
MC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021b08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008084  08021cb8  08021cb8  00031cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029d3c  08029d3c  00040794  2**0
                  CONTENTS
  4 .ARM          00000008  08029d3c  08029d3c  00039d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029d44  08029d44  00040794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029d44  08029d44  00039d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029d48  08029d48  00039d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000794  20000000  08029d4c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009830  20000798  0802a4e0  00040798  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009fc8  0802a4e0  00049fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040794  2**0
                  CONTENTS, READONLY
 12 .debug_info   001e2d6a  00000000  00000000  000407c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ca23  00000000  00000000  0022352e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000052f0  00000000  00000000  0022ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004d98  00000000  00000000  00235248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f99f  00000000  00000000  00239fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005c59d  00000000  00000000  0027997f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001422c8  00000000  00000000  002d5f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  004181e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001759c  00000000  00000000  00418238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000798 	.word	0x20000798
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021ca0 	.word	0x08021ca0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000079c 	.word	0x2000079c
 80001ec:	08021ca0 	.word	0x08021ca0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_Read_REG>:
uint8_t calibr_process = 0;										// Устанавливается в 1 когда идет калибровка
uint8_t read_off_gain = 0;


uint32_t ADC_Read_REG(uint8_t REG, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	uint32_t RES;
	ADC_NCS_ACTIVE();
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <ADC_Read_REG+0x98>)
 80010c2:	f009 f889 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((REG)<<1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b3f      	subs	r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	74bb      	strb	r3, [r7, #18]
	aTxBuffer[3] = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 0110 	add.w	r1, r7, #16
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <ADC_Read_REG+0x9c>)
 80010f6:	f00d f92a 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Read_REG+0x98>)
 8001100:	f009 f86a 	bl	800a1d8 <HAL_GPIO_WritePin>

	RES=aRxBuffer[1];
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[3];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
	RES = RES>>(8*(3-len));
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f1c3 0303 	rsb	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]

	return RES;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	200077f4 	.word	0x200077f4

0800114c <ADC_Conversion>:


void ADC_Conversion(uint8_t RATE)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	ADC_NCS_ACTIVE();
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <ADC_Conversion+0x44>)
 800115c:	f009 f83c 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b50      	subs	r3, #80	; 0x50
 8001164:	b2db      	uxtb	r3, r3
 8001166:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Conversion+0x48>)
 800117a:	f00d f8e8 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ADC_Conversion+0x44>)
 8001184:	f009 f828 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000800 	.word	0x48000800
 8001194:	200077f4 	.word	0x200077f4

08001198 <ADC_Read_DATA>:

int32_t ADC_Read_DATA(uint8_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <ADC_Read_DATA+0x98>)
 80011a8:	f009 f816 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((14+Channel)<<1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	330e      	adds	r3, #14
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b3f      	subs	r3, #63	; 0x3f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f107 0110 	add.w	r1, r7, #16
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <ADC_Read_DATA+0x9c>)
 80011da:	f00d f8b8 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <ADC_Read_DATA+0x98>)
 80011e4:	f008 fff8 	bl	800a1d8 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[2];
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[3];
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
	if((data32>>23)==1) return -(8388608-(data32&0x7FFFFF));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0ddb      	lsrs	r3, r3, #23
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <ADC_Read_DATA+0x88>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800121a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800121e:	e002      	b.n	8001226 <ADC_Read_DATA+0x8e>
	else return (data32&0x7FFFFF);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800
 8001234:	200077f4 	.word	0x200077f4

08001238 <ADC_Read_STAT>:

uint32_t ADC_Read_STAT(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001244:	f008 ffc8 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((STAT_REG)<<1);
 8001248:	23c1      	movs	r3, #193	; 0xc1
 800124a:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	72bb      	strb	r3, [r7, #10]
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <ADC_Read_STAT+0x70>)
 8001268:	f00d f871 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001272:	f008 ffb1 	bl	800a1d8 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[2];
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[3];
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
	return data32;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	200077f4 	.word	0x200077f4

080012ac <ADC_Write_REG>:

void ADC_Write_REG(uint8_t REG, uint8_t*DATA, uint8_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[10], aRxBuffer[10];
	uint8_t i=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
	ADC_NCS_ACTIVE();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <ADC_Write_REG+0x84>)
 80012c6:	f008 ff87 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC0+((REG)<<1);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	753b      	strb	r3, [r7, #20]
	for(i=0;i<len;i++)aTxBuffer[i+1] = DATA[i];
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e00d      	b.n	80012f8 <ADC_Write_REG+0x4c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	441a      	add	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ed      	bcc.n	80012dc <ADC_Write_REG+0x30>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	f107 0114 	add.w	r1, r7, #20
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	9000      	str	r0, [sp, #0]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ADC_Write_REG+0x88>)
 8001318:	f00d f819 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ADC_Write_REG+0x84>)
 8001322:	f008 ff59 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800
 8001334:	200077f4 	.word	0x200077f4

08001338 <Auto_System_Calibration>:
	ADC_NCS_NOT_ACTIVE();
}


void Auto_System_Calibration(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b0a1      	sub	sp, #132	; 0x84
 800133c:	af00      	add	r7, sp, #0
	uint16_t i,j;
	int32_t DYNAMIC_BAND_MAX[9]={0,0,0,0,0,0,0,0,0};
 800133e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01b ff82 	bl	801d250 <memset>
	int32_t DYNAMIC_BAND_MIN[9]={0,0,0,0,0,0,0,0,0};
 800134c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001350:	2224      	movs	r2, #36	; 0x24
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f01b ff7b 	bl	801d250 <memset>
	uint8_t RES=0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	int64_t SUM[6]={0,0,0,0,0,0};
 8001360:	463b      	mov	r3, r7
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01b ff72 	bl	801d250 <memset>

	// Читаем калибровочные данные из внешнего регистра
//	aTxBuffer[0] = 0x10;
//	ADC_Write_REG(CTRL3_REG, aTxBuffer, 1);

	calibr_process=1;
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <Auto_System_Calibration+0x180>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
//		DYNAMIC_BAND_MAX[i]=ADC_middle[5];
//		DYNAMIC_BAND_MIN[i]=ADC_middle[0];
//	}


	ADC_PGA_Set(PGA_GAIN128);
 8001372:	2008      	movs	r0, #8
 8001374:	f000 f988 	bl	8001688 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <Auto_System_Calibration+0x184>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fee5 	bl	800114c <ADC_Conversion>
	ADC_Buff_size=256;
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <Auto_System_Calibration+0x188>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	801a      	strh	r2, [r3, #0]
	adc_full_buff=0;
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <Auto_System_Calibration+0x18c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	while(adc_full_buff<ADC_Buff_size)
 8001390:	e00a      	b.n	80013a8 <Auto_System_Calibration+0x70>
	{
		Gauge_loading((uint8_t*)"Калибровка АЦП..",  (uint8_t)((adc_full_buff*100)/256));
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <Auto_System_Calibration+0x18c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <Auto_System_Calibration+0x190>)
 80013a4:	f001 fd08 	bl	8002db8 <Gauge_loading>
	while(adc_full_buff<ADC_Buff_size)
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Auto_System_Calibration+0x18c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8ed      	bhi.n	8001392 <Auto_System_Calibration+0x5a>
//	OldData=ADC_middle[5];



	// Расчитываем коэффициенты для SYSTEM калибровки GAIN и OFFSET
	adc_mux[0]=1.0;
 80013b6:	4945      	ldr	r1, [pc, #276]	; (80014cc <Auto_System_Calibration+0x194>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <Auto_System_Calibration+0x198>)
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
	//for(i=1;i<9;i++)adc_mux[i]=(double)(DYNAMIC_BAND_MAX[0]*(1<<(i-1)))/(double)(DYNAMIC_BAND_MAX[i]-DYNAMIC_BAND_MIN[i]);
	for(i=1;i<9;i++)adc_mux[i]=(double)DYNAMIC_BAND_MAX[i]/(double)DYNAMIC_BAND_MAX[1];
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80013c8:	e024      	b.n	8001414 <Auto_System_Calibration+0xdc>
 80013ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80013d4:	4413      	add	r3, r2
 80013d6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b2 	bl	8000544 <__aeabi_i2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8ac 	bl	8000544 <__aeabi_i2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f8b7 607e 	ldrh.w	r6, [r7, #126]	; 0x7e
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fa38 	bl	800086c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <Auto_System_Calibration+0x194>)
 8001402:	00f1      	lsls	r1, r6, #3
 8001404:	4401      	add	r1, r0
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
 800140a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800140e:	3301      	adds	r3, #1
 8001410:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001414:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001418:	2b08      	cmp	r3, #8
 800141a:	d9d6      	bls.n	80013ca <Auto_System_Calibration+0x92>
	for(i=0;i<9;i++)adc_system_offset[i]=DYNAMIC_BAND_MIN[i];
 800141c:	2300      	movs	r3, #0
 800141e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001422:	e011      	b.n	8001448 <Auto_System_Calibration+0x110>
 8001424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001428:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001432:	440b      	add	r3, r1
 8001434:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001438:	4926      	ldr	r1, [pc, #152]	; (80014d4 <Auto_System_Calibration+0x19c>)
 800143a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800143e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001442:	3301      	adds	r3, #1
 8001444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800144c:	2b08      	cmp	r3, #8
 800144e:	d9e9      	bls.n	8001424 <Auto_System_Calibration+0xec>

	// Проверяем правильность показаний усиления
	for(i=2;i<9;i++) {if(DYNAMIC_BAND_MAX[i-1]<DYNAMIC_BAND_MAX[i])RES=1;}
 8001450:	2302      	movs	r3, #2
 8001452:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001456:	e01a      	b.n	800148e <Auto_System_Calibration+0x156>
 8001458:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800145c:	3b01      	subs	r3, #1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001464:	4413      	add	r3, r2
 8001466:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800146a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001474:	440b      	add	r3, r1
 8001476:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800147a:	429a      	cmp	r2, r3
 800147c:	da02      	bge.n	8001484 <Auto_System_Calibration+0x14c>
 800147e:	2301      	movs	r3, #1
 8001480:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001484:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001488:	3301      	adds	r3, #1
 800148a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800148e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001492:	2b08      	cmp	r3, #8
 8001494:	d9e0      	bls.n	8001458 <Auto_System_Calibration+0x120>
	if(RES==1)ERROR_REG|=(0x01<<ADC_cal_err);
 8001496:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <Auto_System_Calibration+0x172>
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a8:	6013      	str	r3, [r2, #0]

	//OldData=(double)DYNAMIC_BAND_MAX[1];

	calibr_process=0;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <Auto_System_Calibration+0x180>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3784      	adds	r7, #132	; 0x84
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	200007e1 	.word	0x200007e1
 80014bc:	20000073 	.word	0x20000073
 80014c0:	20000074 	.word	0x20000074
 80014c4:	200007b8 	.word	0x200007b8
 80014c8:	08021cb8 	.word	0x08021cb8
 80014cc:	20000000 	.word	0x20000000
 80014d0:	3ff00000 	.word	0x3ff00000
 80014d4:	200007bc 	.word	0x200007bc
 80014d8:	20000820 	.word	0x20000820

080014dc <ADC_Calibration>:


void ADC_Calibration(uint8_t CAL)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	aTxBuffer[0]=((CAL)<<6)+0x02;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3302      	adds	r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	733b      	strb	r3, [r7, #12]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2201      	movs	r2, #1
 80014f8:	4619      	mov	r1, r3
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fed6 	bl	80012ac <ADC_Write_REG>

	ADC_NCS_ACTIVE();
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <ADC_Calibration+0x5c>)
 8001506:	f008 fe67 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xA0;
 800150a:	23a0      	movs	r3, #160	; 0xa0
 800150c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	f107 010c 	add.w	r1, r7, #12
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <ADC_Calibration+0x60>)
 8001520:	f00c ff15 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <ADC_Calibration+0x5c>)
 800152a:	f008 fe55 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	48000800 	.word	0x48000800
 800153c:	200077f4 	.word	0x200077f4

08001540 <ADC_init>:
}



void ADC_init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data=0xFFFFFFFF;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	60fb      	str	r3, [r7, #12]

	// Reset
	aTxBuffer[0] = 0x30;
 800154c:	2330      	movs	r3, #48	; 0x30
 800154e:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fea7 	bl	80012ac <ADC_Write_REG>
	ADC_NCS_ACTIVE();
 800155e:	2200      	movs	r2, #0
 8001560:	2110      	movs	r1, #16
 8001562:	4844      	ldr	r0, [pc, #272]	; (8001674 <ADC_init+0x134>)
 8001564:	f008 fe38 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x90;
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	723b      	strb	r3, [r7, #8]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800156c:	1d3a      	adds	r2, r7, #4
 800156e:	f107 0108 	add.w	r1, r7, #8
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	483f      	ldr	r0, [pc, #252]	; (8001678 <ADC_init+0x138>)
 800157c:	f00c fee7 	bl	800e34e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	483b      	ldr	r0, [pc, #236]	; (8001674 <ADC_init+0x134>)
 8001586:	f008 fe27 	bl	800a1d8 <HAL_GPIO_WritePin>

	while(data!=152)
 800158a:	e002      	b.n	8001592 <ADC_init+0x52>
	{
		data=ADC_Read_STAT();
 800158c:	f7ff fe54 	bl	8001238 <ADC_Read_STAT>
 8001590:	60f8      	str	r0, [r7, #12]
	while(data!=152)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b98      	cmp	r3, #152	; 0x98
 8001596:	d1f9      	bne.n	800158c <ADC_init+0x4c>
	}

	// Настройка АЦП
	aTxBuffer[0] = 0x09;
 8001598:	2309      	movs	r3, #9
 800159a:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	2008      	movs	r0, #8
 80015a6:	f7ff fe81 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x0E;
 80015aa:	230e      	movs	r3, #14
 80015ac:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = 0x0A;
 80015ae:	230a      	movs	r3, #10
 80015b0:	727b      	strb	r3, [r7, #9]
	aTxBuffer[2] = 0x06;
 80015b2:	2306      	movs	r3, #6
 80015b4:	72bb      	strb	r3, [r7, #10]
	ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2203      	movs	r2, #3
 80015bc:	4619      	mov	r1, r3
 80015be:	2007      	movs	r0, #7
 80015c0:	f7ff fe74 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x1A;
 80015c4:	231a      	movs	r3, #26
 80015c6:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = 0x16;
 80015c8:	2316      	movs	r3, #22
 80015ca:	727b      	strb	r3, [r7, #9]
	aTxBuffer[2] = 0x12;
 80015cc:	2312      	movs	r3, #18
 80015ce:	72bb      	strb	r3, [r7, #10]
	ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2203      	movs	r2, #3
 80015d6:	4619      	mov	r1, r3
 80015d8:	2006      	movs	r0, #6
 80015da:	f7ff fe67 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x02;
 80015de:	2302      	movs	r3, #2
 80015e0:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2201      	movs	r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fe5e 	bl	80012ac <ADC_Write_REG>

	// Self calibration
	LED(1,0,0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fdbf 	bl	8002178 <LED>
	aTxBuffer[0] = 0x01;
 80015fa:	2301      	movs	r3, #1
 80015fc:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2201      	movs	r2, #1
 8001604:	4619      	mov	r1, r3
 8001606:	2008      	movs	r0, #8
 8001608:	f7ff fe50 	bl	80012ac <ADC_Write_REG>
	ADC_Calibration(adc_calibration_mode);
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <ADC_init+0x13c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff63 	bl	80014dc <ADC_Calibration>
	delay_ms(300);
 8001616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800161a:	f001 fe67 	bl	80032ec <delay_ms>
	aTxBuffer[0] = 0x09;
 800161e:	2309      	movs	r3, #9
 8001620:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	2008      	movs	r0, #8
 800162c:	f7ff fe3e 	bl	80012ac <ADC_Write_REG>

	ADC_PGA_Set(PGA_GAIN);
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <ADC_init+0x140>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f827 	bl	8001688 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <ADC_init+0x144>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd84 	bl	800114c <ADC_Conversion>

	delay_ms(1500);
 8001644:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001648:	f001 fe50 	bl	80032ec <delay_ms>
	//Auto_System_Calibration();

	ADC_PGA_Set(PGA_GAIN);
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <ADC_init+0x140>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f819 	bl	8001688 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <ADC_init+0x144>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd76 	bl	800114c <ADC_Conversion>

	LED(0,0,0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f000 fd87 	bl	8002178 <LED>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	48000800 	.word	0x48000800
 8001678:	200077f4 	.word	0x200077f4
 800167c:	20000837 	.word	0x20000837
 8001680:	20000072 	.word	0x20000072
 8001684:	20000073 	.word	0x20000073

08001688 <ADC_PGA_Set>:


void ADC_PGA_Set(uint8_t pga_data)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4];
	uint8_t CTRL=ADC_Read_REG(CTRL2_REG, 1);
 8001692:	2101      	movs	r1, #1
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff fd09 	bl	80010ac <ADC_Read_REG>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
	CTRL&=0xF0;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	f023 030f 	bic.w	r3, r3, #15
 80016a4:	73fb      	strb	r3, [r7, #15]
	if(pga_data==0) aTxBuffer[0]=CTRL;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <ADC_PGA_Set+0x2a>
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	723b      	strb	r3, [r7, #8]
 80016b0:	e006      	b.n	80016c0 <ADC_PGA_Set+0x38>
	else aTxBuffer[0]=CTRL+0x08+(pga_data-1);
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	3307      	adds	r3, #7
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL2_REG, aTxBuffer, 1);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	2201      	movs	r2, #1
 80016c6:	4619      	mov	r1, r3
 80016c8:	2002      	movs	r0, #2
 80016ca:	f7ff fdef 	bl	80012ac <ADC_Write_REG>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <ADC_EXT>:


void ADC_EXT(void)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80016de:	2300      	movs	r3, #0
 80016e0:	80fb      	strh	r3, [r7, #6]

	if(adc_full_buff>2)
 80016e2:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <ADC_EXT+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f240 80c2 	bls.w	8001870 <ADC_EXT+0x198>
	{
		if(read_off_gain==0)
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <ADC_EXT+0x1c0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 8086 	bne.w	8001802 <ADC_EXT+0x12a>
		{
			for(i=0;i<ADC_Buff_size-1;i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	80fb      	strh	r3, [r7, #6]
 80016fa:	e038      	b.n	800176e <ADC_EXT+0x96>
			{
				ADC_channel_0[i]=ADC_channel_0[i+1];
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4966      	ldr	r1, [pc, #408]	; (800189c <ADC_EXT+0x1c4>)
 8001704:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001708:	4964      	ldr	r1, [pc, #400]	; (800189c <ADC_EXT+0x1c4>)
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_1[i]=ADC_channel_1[i+1];
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4962      	ldr	r1, [pc, #392]	; (80018a0 <ADC_EXT+0x1c8>)
 8001716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800171a:	4961      	ldr	r1, [pc, #388]	; (80018a0 <ADC_EXT+0x1c8>)
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_2[i]=ADC_channel_2[i+1];
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	495f      	ldr	r1, [pc, #380]	; (80018a4 <ADC_EXT+0x1cc>)
 8001728:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800172c:	495d      	ldr	r1, [pc, #372]	; (80018a4 <ADC_EXT+0x1cc>)
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_3[i]=ADC_channel_3[i+1];
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	495b      	ldr	r1, [pc, #364]	; (80018a8 <ADC_EXT+0x1d0>)
 800173a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800173e:	495a      	ldr	r1, [pc, #360]	; (80018a8 <ADC_EXT+0x1d0>)
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_4[i]=ADC_channel_4[i+1];
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	4958      	ldr	r1, [pc, #352]	; (80018ac <ADC_EXT+0x1d4>)
 800174c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001750:	4956      	ldr	r1, [pc, #344]	; (80018ac <ADC_EXT+0x1d4>)
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_5[i]=ADC_channel_5[i+1];
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4954      	ldr	r1, [pc, #336]	; (80018b0 <ADC_EXT+0x1d8>)
 800175e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001762:	4953      	ldr	r1, [pc, #332]	; (80018b0 <ADC_EXT+0x1d8>)
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i=0;i<ADC_Buff_size-1;i++)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	3301      	adds	r3, #1
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <ADC_EXT+0x1dc>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	429a      	cmp	r2, r3
 8001778:	dbc0      	blt.n	80016fc <ADC_EXT+0x24>
			}

			for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 800177a:	2300      	movs	r3, #0
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	e00c      	b.n	800179a <ADC_EXT+0xc2>
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	88fc      	ldrh	r4, [r7, #6]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fd06 	bl	8001198 <ADC_Read_DATA>
 800178c:	4603      	mov	r3, r0
 800178e:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <ADC_EXT+0x1e0>)
 8001790:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	3301      	adds	r3, #1
 8001798:	80fb      	strh	r3, [r7, #6]
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d9ef      	bls.n	8001780 <ADC_EXT+0xa8>

			ADC_channel_0[ADC_Buff_size-1]=ADC_data[0];
 80017a0:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <ADC_EXT+0x1dc>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <ADC_EXT+0x1e0>)
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	493c      	ldr	r1, [pc, #240]	; (800189c <ADC_EXT+0x1c4>)
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_1[ADC_Buff_size-1]=ADC_data[1];
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <ADC_EXT+0x1dc>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <ADC_EXT+0x1e0>)
 80017b8:	6852      	ldr	r2, [r2, #4]
 80017ba:	4939      	ldr	r1, [pc, #228]	; (80018a0 <ADC_EXT+0x1c8>)
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_2[ADC_Buff_size-1]=ADC_data[2];
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <ADC_EXT+0x1dc>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	4a3c      	ldr	r2, [pc, #240]	; (80018b8 <ADC_EXT+0x1e0>)
 80017c8:	6892      	ldr	r2, [r2, #8]
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <ADC_EXT+0x1cc>)
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_3[ADC_Buff_size-1]=ADC_data[3];
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <ADC_EXT+0x1dc>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <ADC_EXT+0x1e0>)
 80017d8:	68d2      	ldr	r2, [r2, #12]
 80017da:	4933      	ldr	r1, [pc, #204]	; (80018a8 <ADC_EXT+0x1d0>)
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_4[ADC_Buff_size-1]=ADC_data[4];
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <ADC_EXT+0x1dc>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <ADC_EXT+0x1e0>)
 80017e8:	6912      	ldr	r2, [r2, #16]
 80017ea:	4930      	ldr	r1, [pc, #192]	; (80018ac <ADC_EXT+0x1d4>)
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_5[ADC_Buff_size-1]=ADC_data[5];
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <ADC_EXT+0x1dc>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <ADC_EXT+0x1e0>)
 80017f8:	6952      	ldr	r2, [r2, #20]
 80017fa:	492d      	ldr	r1, [pc, #180]	; (80018b0 <ADC_EXT+0x1d8>)
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001800:	e036      	b.n	8001870 <ADC_EXT+0x198>
		}
		else
		{
			if(read_off_gain==1)
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <ADC_EXT+0x1c0>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d103      	bne.n	8001812 <ADC_EXT+0x13a>
			{
				read_off_gain=2;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <ADC_EXT+0x1c0>)
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e02e      	b.n	8001870 <ADC_EXT+0x198>
			}
			else
			{
				for(i=1;i<ADC_Buff_size;i++)
 8001812:	2301      	movs	r3, #1
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	e00b      	b.n	8001830 <ADC_EXT+0x158>
				{ ADC_channel_OFF[i-1]=ADC_channel_OFF[i]; }
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	3b01      	subs	r3, #1
 800181e:	4927      	ldr	r1, [pc, #156]	; (80018bc <ADC_EXT+0x1e4>)
 8001820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001824:	4925      	ldr	r1, [pc, #148]	; (80018bc <ADC_EXT+0x1e4>)
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=1;i<ADC_Buff_size;i++)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	3301      	adds	r3, #1
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <ADC_EXT+0x1dc>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3ee      	bcc.n	8001818 <ADC_EXT+0x140>
				for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 800183a:	2300      	movs	r3, #0
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	e00c      	b.n	800185a <ADC_EXT+0x182>
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	88fc      	ldrh	r4, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fca6 	bl	8001198 <ADC_Read_DATA>
 800184c:	4603      	mov	r3, r0
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <ADC_EXT+0x1e0>)
 8001850:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	3301      	adds	r3, #1
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d9ef      	bls.n	8001840 <ADC_EXT+0x168>
				ADC_channel_OFF[ADC_Buff_size-1]=ADC_data[5];
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <ADC_EXT+0x1dc>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <ADC_EXT+0x1e0>)
 8001868:	6952      	ldr	r2, [r2, #20]
 800186a:	4914      	ldr	r1, [pc, #80]	; (80018bc <ADC_EXT+0x1e4>)
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

//	if(adc_full_buff<ADC_Buff_size)adc_full_buff++;
//	else{if(cal_ag<10)cal_ag++;}
//	if(cal_ag==10){cal_ag=20; for(i=0;i<6;i++) Kag[i]=(double)CALag[i]/(double)ADC_middle[i];}
	adc_full_buff++;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <ADC_EXT+0x1bc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <ADC_EXT+0x1bc>)
 8001878:	6013      	str	r3, [r2, #0]
	adc_timeout=adc_timeout_const;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <ADC_EXT+0x1e8>)
 800187c:	2205      	movs	r2, #5
 800187e:	701a      	strb	r2, [r3, #0]
	ADC_Conversion(ADC_SPS);
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <ADC_EXT+0x1ec>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc61 	bl	800114c <ADC_Conversion>
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	200007b8 	.word	0x200007b8
 8001898:	200007e2 	.word	0x200007e2
 800189c:	20004a28 	.word	0x20004a28
 80018a0:	20002228 	.word	0x20002228
 80018a4:	20002a28 	.word	0x20002a28
 80018a8:	20003228 	.word	0x20003228
 80018ac:	20004228 	.word	0x20004228
 80018b0:	20003a28 	.word	0x20003a28
 80018b4:	20000074 	.word	0x20000074
 80018b8:	20005228 	.word	0x20005228
 80018bc:	20005280 	.word	0x20005280
 80018c0:	20000048 	.word	0x20000048
 80018c4:	20000073 	.word	0x20000073

080018c8 <Measure_Kdiv>:


void Measure_Kdiv(void)
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	// Gain
	if(read_off_gain==0)
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <Measure_Kdiv+0x98>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d115      	bne.n	8001900 <Measure_Kdiv+0x38>
	{
		if(adc_full_buff>=AutoGainCoef_period)
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <Measure_Kdiv+0x9c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <Measure_Kdiv+0xa0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d825      	bhi.n	800192e <Measure_Kdiv+0x66>
		{
			ADC_PGA_Set(PGA_GAIN_OFF);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff fed0 	bl	8001688 <ADC_PGA_Set>
			ADC_Conversion(ADC_SPS);
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <Measure_Kdiv+0xa4>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc2d 	bl	800114c <ADC_Conversion>
			read_off_gain=1;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <Measure_Kdiv+0x98>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
			adc_full_buff=0;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <Measure_Kdiv+0xa0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e016      	b.n	800192e <Measure_Kdiv+0x66>
		}
	}
	// Gain OFF
	else
	{
		if(adc_full_buff>=AutoOffCoef_period)
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <Measure_Kdiv+0xa8>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <Measure_Kdiv+0xa0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d80f      	bhi.n	800192e <Measure_Kdiv+0x66>
		{
			ADC_PGA_Set(PGA_GAIN);
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <Measure_Kdiv+0xac>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff feb8 	bl	8001688 <ADC_PGA_Set>
			ADC_Conversion(ADC_SPS);
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <Measure_Kdiv+0xa4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc15 	bl	800114c <ADC_Conversion>
			adc_full_buff=0;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <Measure_Kdiv+0xa0>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
			read_off_gain=0;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <Measure_Kdiv+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
		}
	}
	Kdiv=(double)ADC_middle[5]/(double)ADC_middle[6];
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <Measure_Kdiv+0xb0>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe06 	bl	8000544 <__aeabi_i2d>
 8001938:	4604      	mov	r4, r0
 800193a:	460d      	mov	r5, r1
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <Measure_Kdiv+0xb0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdff 	bl	8000544 <__aeabi_i2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe ff8d 	bl	800086c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4909      	ldr	r1, [pc, #36]	; (800197c <Measure_Kdiv+0xb4>)
 8001958:	e9c1 2300 	strd	r2, r3, [r1]
}
 800195c:	bf00      	nop
 800195e:	bdb0      	pop	{r4, r5, r7, pc}
 8001960:	200007e2 	.word	0x200007e2
 8001964:	2000208c 	.word	0x2000208c
 8001968:	200007b8 	.word	0x200007b8
 800196c:	20000073 	.word	0x20000073
 8001970:	200020f4 	.word	0x200020f4
 8001974:	20000072 	.word	0x20000072
 8001978:	20002070 	.word	0x20002070
 800197c:	20000068 	.word	0x20000068

08001980 <ADC_process>:


void ADC_process(void)
{
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001984:	b099      	sub	sp, #100	; 0x64
 8001986:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8001988:	2300      	movs	r3, #0
 800198a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t aTxBuffer[4];
	int64_t SUM[7]={0,0,0,0,0,0};
 800198e:	f107 0020 	add.w	r0, r7, #32
 8001992:	2338      	movs	r3, #56	; 0x38
 8001994:	461a      	mov	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	f01b fc5a 	bl	801d250 <memset>

	// Скользящее среднее
	for(i=0;i<ADC_Buff_size;i++)
 800199c:	2300      	movs	r3, #0
 800199e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80019a2:	e07f      	b.n	8001aa4 <ADC_process+0x124>
	{
		SUM[0]+=ADC_channel_0[i];
 80019a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019a8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ac:	4bbe      	ldr	r3, [pc, #760]	; (8001ca8 <ADC_process+0x328>)
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	461a      	mov	r2, r3
 80019b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019b8:	1884      	adds	r4, r0, r2
 80019ba:	eb41 0503 	adc.w	r5, r1, r3
 80019be:	e9c7 4508 	strd	r4, r5, [r7, #32]
		SUM[1]+=ADC_channel_1[i];
 80019c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019c6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ca:	4bb8      	ldr	r3, [pc, #736]	; (8001cac <ADC_process+0x32c>)
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	461a      	mov	r2, r3
 80019d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019d6:	eb10 0802 	adds.w	r8, r0, r2
 80019da:	eb41 0903 	adc.w	r9, r1, r3
 80019de:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
		SUM[2]+=ADC_channel_2[i];
 80019e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019e6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ea:	4bb1      	ldr	r3, [pc, #708]	; (8001cb0 <ADC_process+0x330>)
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	461a      	mov	r2, r3
 80019f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019f6:	eb10 0a02 	adds.w	sl, r0, r2
 80019fa:	eb41 0b03 	adc.w	fp, r1, r3
 80019fe:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
		SUM[3]+=ADC_channel_3[i];
 8001a02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a06:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a0a:	4baa      	ldr	r3, [pc, #680]	; (8001cb4 <ADC_process+0x334>)
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	461a      	mov	r2, r3
 8001a12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a16:	1886      	adds	r6, r0, r2
 8001a18:	61be      	str	r6, [r7, #24]
 8001a1a:	eb41 0303 	adc.w	r3, r1, r3
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a24:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		SUM[4]+=ADC_channel_4[i];
 8001a28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a2c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a30:	4ba1      	ldr	r3, [pc, #644]	; (8001cb8 <ADC_process+0x338>)
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	461a      	mov	r2, r3
 8001a38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a3c:	1886      	adds	r6, r0, r2
 8001a3e:	613e      	str	r6, [r7, #16]
 8001a40:	eb41 0303 	adc.w	r3, r1, r3
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		SUM[5]+=ADC_channel_5[i];
 8001a4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a52:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a56:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <ADC_process+0x33c>)
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a62:	1886      	adds	r6, r0, r2
 8001a64:	60be      	str	r6, [r7, #8]
 8001a66:	eb41 0303 	adc.w	r3, r1, r3
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a70:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		SUM[6]+=ADC_channel_OFF[i];
 8001a74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a78:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a7c:	4b90      	ldr	r3, [pc, #576]	; (8001cc0 <ADC_process+0x340>)
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	461a      	mov	r2, r3
 8001a84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a88:	1886      	adds	r6, r0, r2
 8001a8a:	603e      	str	r6, [r7, #0]
 8001a8c:	eb41 0303 	adc.w	r3, r1, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(i=0;i<ADC_Buff_size;i++)
 8001a9a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001aa4:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <ADC_process+0x344>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001aac:	4293      	cmp	r3, r2
 8001aae:	f4ff af79 	bcc.w	80019a4 <ADC_process+0x24>
	}
	for(i=0;i<7;i++) ADC_middle[i]=SUM[i]/ADC_Buff_size;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001ab8:	e01e      	b.n	8001af8 <ADC_process+0x178>
 8001aba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b40      	subs	r3, #64	; 0x40
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <ADC_process+0x344>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	f7ff f8e7 	bl	8000ca8 <__aeabi_ldivmod>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <ADC_process+0x348>)
 8001aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001aee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001af2:	3301      	adds	r3, #1
 8001af4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001af8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d9dc      	bls.n	8001aba <ADC_process+0x13a>

	//for(i=0;i<7;i++) ADC_middle[i]*=Kag[i];

	// Перезапуск АЦП если нет ответа в течении adc_timeout_const
	if(adc_timeout>0)adc_timeout--;
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <ADC_process+0x34c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <ADC_process+0x196>
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <ADC_process+0x34c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <ADC_process+0x34c>)
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e05e      	b.n	8001bd4 <ADC_process+0x254>
	else
	{
		// Настройка АЦП
		aTxBuffer[0] = 0x09;
 8001b16:	2309      	movs	r3, #9
 8001b18:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001b1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b20:	2201      	movs	r2, #1
 8001b22:	4619      	mov	r1, r3
 8001b24:	2008      	movs	r0, #8
 8001b26:	f7ff fbc1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x0E;
 8001b2a:	230e      	movs	r3, #14
 8001b2c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x0A;
 8001b30:	230a      	movs	r3, #10
 8001b32:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x06;
 8001b36:	2306      	movs	r3, #6
 8001b38:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 8001b3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b40:	2203      	movs	r2, #3
 8001b42:	4619      	mov	r1, r3
 8001b44:	2007      	movs	r0, #7
 8001b46:	f7ff fbb1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x1A;
 8001b4a:	231a      	movs	r3, #26
 8001b4c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x16;
 8001b50:	2316      	movs	r3, #22
 8001b52:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x12;
 8001b56:	2312      	movs	r3, #18
 8001b58:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 8001b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b60:	2203      	movs	r2, #3
 8001b62:	4619      	mov	r1, r3
 8001b64:	2006      	movs	r0, #6
 8001b66:	f7ff fba1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x02;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001b70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b74:	2201      	movs	r2, #1
 8001b76:	4619      	mov	r1, r3
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fb97 	bl	80012ac <ADC_Write_REG>
		// Self calibration
		aTxBuffer[0] = 0x01;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2008      	movs	r0, #8
 8001b8e:	f7ff fb8d 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <ADC_process+0x350>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fca0 	bl	80014dc <ADC_Calibration>
		delay_ms(300);
 8001b9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ba0:	f001 fba4 	bl	80032ec <delay_ms>
		aTxBuffer[0] = 0x09;
 8001ba4:	2309      	movs	r3, #9
 8001ba6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2008      	movs	r0, #8
 8001bb4:	f7ff fb7a 	bl	80012ac <ADC_Write_REG>

		ADC_Conversion(ADC_SPS);
 8001bb8:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <ADC_process+0x354>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fac5 	bl	800114c <ADC_Conversion>
		adc_timeout=adc_timeout_const;
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <ADC_process+0x34c>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	701a      	strb	r2, [r3, #0]
		ERROR_REG|=(0x01<<ADC_err);
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <ADC_process+0x358>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <ADC_process+0x358>)
 8001bd2:	6013      	str	r3, [r2, #0]
	}


	if(adc_start_calibration==0)
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <ADC_process+0x35c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d120      	bne.n	8001c1e <ADC_process+0x29e>
	{
		if(adc_timeout_cal>0)
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <ADC_process+0x360>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d048      	beq.n	8001c76 <ADC_process+0x2f6>
		{
			adc_timeout_cal--;
 8001be4:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <ADC_process+0x360>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <ADC_process+0x360>)
 8001bee:	801a      	strh	r2, [r3, #0]
			if(adc_timeout_cal==0)
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <ADC_process+0x360>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d13e      	bne.n	8001c76 <ADC_process+0x2f6>
			{
				// Стартуем преобразование
				aTxBuffer[0] = 0x09;
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001bfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c02:	2201      	movs	r2, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	2008      	movs	r0, #8
 8001c08:	f7ff fb50 	bl	80012ac <ADC_Write_REG>
				ADC_Conversion(DATA_RATE_16SPS);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff fa9d 	bl	800114c <ADC_Conversion>
				LED(0,0,0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 faae 	bl	8002178 <LED>
 8001c1c:	e02b      	b.n	8001c76 <ADC_process+0x2f6>
		}
	}
	// Калибровка
	else
	{
		LED(1,0,0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 faa8 	bl	8002178 <LED>
		adc_start_calibration=0;
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <ADC_process+0x35c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
		aTxBuffer[0] = 0x01;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==offset_calibration)aTxBuffer[0]+=(0<<5); 		// Ноль это канал по которому производится калибровка
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <ADC_process+0x350>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d103      	bne.n	8001c44 <ADC_process+0x2c4>
 8001c3c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c40:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==full_scale_calibration)aTxBuffer[0]+=(5<<5);	// Ноль это канал по которому производится калибровка
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <ADC_process+0x350>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d105      	bne.n	8001c58 <ADC_process+0x2d8>
 8001c4c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c50:	3b60      	subs	r3, #96	; 0x60
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001c58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2008      	movs	r0, #8
 8001c62:	f7ff fb23 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <ADC_process+0x350>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fc36 	bl	80014dc <ADC_Calibration>
		adc_timeout_cal=50;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <ADC_process+0x360>)
 8001c72:	2232      	movs	r2, #50	; 0x32
 8001c74:	801a      	strh	r2, [r3, #0]
	}
	// Делитель для PGA
	if(PGA_GAIN==0)devider=1;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <ADC_process+0x364>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <ADC_process+0x306>
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <ADC_process+0x368>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e008      	b.n	8001c98 <ADC_process+0x318>
	else devider= (0x01<<(PGA_GAIN-1));
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <ADC_process+0x364>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <ADC_process+0x368>)
 8001c96:	701a      	strb	r2, [r3, #0]

	// Расчитываем Kdiv
	//Kdiv = 128.0/(OldData/(double)ADC_middle[5]);
	if(AutoAmpCoef==1)Measure_Kdiv();
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <ADC_process+0x36c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d127      	bne.n	8001cf0 <ADC_process+0x370>
 8001ca0:	f7ff fe12 	bl	80018c8 <Measure_Kdiv>
 8001ca4:	e02e      	b.n	8001d04 <ADC_process+0x384>
 8001ca6:	bf00      	nop
 8001ca8:	20004a28 	.word	0x20004a28
 8001cac:	20002228 	.word	0x20002228
 8001cb0:	20002a28 	.word	0x20002a28
 8001cb4:	20003228 	.word	0x20003228
 8001cb8:	20004228 	.word	0x20004228
 8001cbc:	20003a28 	.word	0x20003a28
 8001cc0:	20005280 	.word	0x20005280
 8001cc4:	20000074 	.word	0x20000074
 8001cc8:	20002070 	.word	0x20002070
 8001ccc:	20000048 	.word	0x20000048
 8001cd0:	20000837 	.word	0x20000837
 8001cd4:	20000073 	.word	0x20000073
 8001cd8:	20000820 	.word	0x20000820
 8001cdc:	200007b4 	.word	0x200007b4
 8001ce0:	200007b6 	.word	0x200007b6
 8001ce4:	20000072 	.word	0x20000072
 8001ce8:	200007e0 	.word	0x200007e0
 8001cec:	20000831 	.word	0x20000831
	else Kdiv=devider;
 8001cf0:	4ba4      	ldr	r3, [pc, #656]	; (8001f84 <ADC_process+0x604>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc15 	bl	8000524 <__aeabi_ui2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	49a2      	ldr	r1, [pc, #648]	; (8001f88 <ADC_process+0x608>)
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]

	ADC_volt[0]=ADC_middle[0]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d04:	4ba1      	ldr	r3, [pc, #644]	; (8001f8c <ADC_process+0x60c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc1b 	bl	8000544 <__aeabi_i2d>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	460d      	mov	r5, r1
 8001d12:	4b9f      	ldr	r3, [pc, #636]	; (8001f90 <ADC_process+0x610>)
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b9d      	ldr	r3, [pc, #628]	; (8001f94 <ADC_process+0x614>)
 8001d1e:	f7fe fc7b 	bl	8000618 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4690      	mov	r8, r2
 8001d28:	4699      	mov	r9, r3
 8001d2a:	4b97      	ldr	r3, [pc, #604]	; (8001f88 <ADC_process+0x608>)
 8001d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <ADC_process+0x618>)
 8001d36:	f7fe fc6f 	bl	8000618 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fd93 	bl	800086c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fc63 	bl	8000618 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4991      	ldr	r1, [pc, #580]	; (8001f9c <ADC_process+0x61c>)
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]
	ADC_volt[1]=ADC_middle[1]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d5c:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <ADC_process+0x60c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbef 	bl	8000544 <__aeabi_i2d>
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <ADC_process+0x610>)
 8001d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b87      	ldr	r3, [pc, #540]	; (8001f94 <ADC_process+0x614>)
 8001d76:	f7fe fc4f 	bl	8000618 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4690      	mov	r8, r2
 8001d80:	4699      	mov	r9, r3
 8001d82:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <ADC_process+0x608>)
 8001d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <ADC_process+0x618>)
 8001d8e:	f7fe fc43 	bl	8000618 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4640      	mov	r0, r8
 8001d98:	4649      	mov	r1, r9
 8001d9a:	f7fe fd67 	bl	800086c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fc37 	bl	8000618 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	497b      	ldr	r1, [pc, #492]	; (8001f9c <ADC_process+0x61c>)
 8001db0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ADC_volt[2]=ADC_middle[2]*((RefVoltage*1000)/(8388608*Kdiv));
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <ADC_process+0x60c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbc3 	bl	8000544 <__aeabi_i2d>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	460d      	mov	r5, r1
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <ADC_process+0x610>)
 8001dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <ADC_process+0x614>)
 8001dce:	f7fe fc23 	bl	8000618 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4690      	mov	r8, r2
 8001dd8:	4699      	mov	r9, r3
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <ADC_process+0x608>)
 8001ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <ADC_process+0x618>)
 8001de6:	f7fe fc17 	bl	8000618 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4640      	mov	r0, r8
 8001df0:	4649      	mov	r1, r9
 8001df2:	f7fe fd3b 	bl	800086c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7fe fc0b 	bl	8000618 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4965      	ldr	r1, [pc, #404]	; (8001f9c <ADC_process+0x61c>)
 8001e08:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ADC_volt[3]=ADC_middle[3]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e0c:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <ADC_process+0x60c>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb97 	bl	8000544 <__aeabi_i2d>
 8001e16:	4604      	mov	r4, r0
 8001e18:	460d      	mov	r5, r1
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <ADC_process+0x610>)
 8001e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <ADC_process+0x614>)
 8001e26:	f7fe fbf7 	bl	8000618 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <ADC_process+0x608>)
 8001e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <ADC_process+0x618>)
 8001e3e:	f7fe fbeb 	bl	8000618 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4640      	mov	r0, r8
 8001e48:	4649      	mov	r1, r9
 8001e4a:	f7fe fd0f 	bl	800086c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fbdf 	bl	8000618 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	494f      	ldr	r1, [pc, #316]	; (8001f9c <ADC_process+0x61c>)
 8001e60:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ADC_volt[4]=ADC_middle[4]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <ADC_process+0x60c>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb6b 	bl	8000544 <__aeabi_i2d>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	460d      	mov	r5, r1
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <ADC_process+0x610>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <ADC_process+0x614>)
 8001e7e:	f7fe fbcb 	bl	8000618 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4690      	mov	r8, r2
 8001e88:	4699      	mov	r9, r3
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <ADC_process+0x608>)
 8001e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <ADC_process+0x618>)
 8001e96:	f7fe fbbf 	bl	8000618 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4640      	mov	r0, r8
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	f7fe fce3 	bl	800086c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe fbb3 	bl	8000618 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4939      	ldr	r1, [pc, #228]	; (8001f9c <ADC_process+0x61c>)
 8001eb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ADC_volt[5]=ADC_middle[5]*((RefVoltage*1000)/(8388608*Kdiv));
 8001ebc:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <ADC_process+0x60c>)
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb3f 	bl	8000544 <__aeabi_i2d>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <ADC_process+0x610>)
 8001ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <ADC_process+0x614>)
 8001ed6:	f7fe fb9f 	bl	8000618 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4690      	mov	r8, r2
 8001ee0:	4699      	mov	r9, r3
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <ADC_process+0x608>)
 8001ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <ADC_process+0x618>)
 8001eee:	f7fe fb93 	bl	8000618 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4649      	mov	r1, r9
 8001efa:	f7fe fcb7 	bl	800086c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe fb87 	bl	8000618 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4923      	ldr	r1, [pc, #140]	; (8001f9c <ADC_process+0x61c>)
 8001f10:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Заводской номер 001
	current_4_20mA = calculate_current(ADC_volt[0]);
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <ADC_process+0x61c>)
 8001f16:	ed93 7b00 	vldr	d7, [r3]
 8001f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1e:	eef0 0a67 	vmov.f32	s1, s15
 8001f22:	f003 f941 	bl	80051a8 <calculate_current>
 8001f26:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2a:	eef0 7a60 	vmov.f32	s15, s1
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <ADC_process+0x620>)
 8001f30:	ed83 7b00 	vstr	d7, [r3]
	voltage_measure = calculate_voltage(ADC_volt[1]);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <ADC_process+0x61c>)
 8001f36:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f3e:	eef0 0a67 	vmov.f32	s1, s15
 8001f42:	f003 f99d 	bl	8005280 <calculate_voltage>
 8001f46:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4a:	eef0 7a60 	vmov.f32	s15, s1
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <ADC_process+0x624>)
 8001f50:	ed83 7b00 	vstr	d7, [r3]

	Approximation_MC110(ADC_middle[3], ADC_middle[4]);
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <ADC_process+0x60c>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <ADC_process+0x60c>)
 8001f5a:	6912      	ldr	r2, [r2, #16]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 fdae 	bl	8004ac0 <Approximation_MC110>
	Calculate(ADC_middle[3], ADC_middle[4]);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <ADC_process+0x60c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <ADC_process+0x60c>)
 8001f6a:	6912      	ldr	r2, [r2, #16]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fe32 	bl	8004bd8 <Calculate>

	sleep(100);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f001 f9a1 	bl	80032bc <sleep>
}
 8001f7a:	bf00      	nop
 8001f7c:	3764      	adds	r7, #100	; 0x64
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f84:	200007e0 	.word	0x200007e0
 8001f88:	20000068 	.word	0x20000068
 8001f8c:	20002070 	.word	0x20002070
 8001f90:	20000060 	.word	0x20000060
 8001f94:	408f4000 	.word	0x408f4000
 8001f98:	41600000 	.word	0x41600000
 8001f9c:	20005248 	.word	0x20005248
 8001fa0:	20005240 	.word	0x20005240
 8001fa4:	200020f8 	.word	0x200020f8

08001fa8 <Buttons_init>:
//--------------------------------------------------------------------------------------------------------
//									Инициализация расширителя
//--------------------------------------------------------------------------------------------------------

void Buttons_init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2], rx_buf[2];

	TURN_ON_ADC_POWER();
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2140      	movs	r1, #64	; 0x40
 8001fb2:	4842      	ldr	r0, [pc, #264]	; (80020bc <Buttons_init+0x114>)
 8001fb4:	f008 f910 	bl	800a1d8 <HAL_GPIO_WritePin>
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	4840      	ldr	r0, [pc, #256]	; (80020c0 <Buttons_init+0x118>)
 8001fc0:	f008 f90a 	bl	800a1d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	483e      	ldr	r0, [pc, #248]	; (80020c4 <Buttons_init+0x11c>)
 8001fca:	f008 f905 	bl	800a1d8 <HAL_GPIO_WritePin>


	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001fce:	2303      	movs	r3, #3
 8001fd0:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x18;
 8001fd2:	2318      	movs	r3, #24
 8001fd4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 1000);
 8001fd6:	1d3a      	adds	r2, r7, #4
 8001fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	4839      	ldr	r0, [pc, #228]	; (80020c8 <Buttons_init+0x120>)
 8001fe4:	f008 f9c2 	bl	800a36c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT0; // rd from out-reg port0
 8001fe8:	2302      	movs	r3, #2
 8001fea:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001fec:	1d3a      	adds	r2, r7, #4
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	4833      	ldr	r0, [pc, #204]	; (80020c8 <Buttons_init+0x120>)
 8001ffa:	f008 f9b7 	bl	800a36c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, &rx_buf[0], 0x02, 1000);
 8001ffe:	463a      	mov	r2, r7
 8002000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2302      	movs	r3, #2
 8002008:	2141      	movs	r1, #65	; 0x41
 800200a:	482f      	ldr	r0, [pc, #188]	; (80020c8 <Buttons_init+0x120>)
 800200c:	f008 faa2 	bl	800a554 <HAL_I2C_Master_Receive>

	tx_buf[0] = PI4IOE5V6416_REG_IO_DIR1; // set pin dir to be out
 8002010:	2307      	movs	r3, #7
 8002012:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x07;
 8002014:	2307      	movs	r3, #7
 8002016:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002018:	1d3a      	adds	r2, r7, #4
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2302      	movs	r3, #2
 8002022:	2140      	movs	r1, #64	; 0x40
 8002024:	4828      	ldr	r0, [pc, #160]	; (80020c8 <Buttons_init+0x120>)
 8002026:	f008 f9a1 	bl	800a36c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD0; // pull-up port0
 800202a:	2348      	movs	r3, #72	; 0x48
 800202c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800202e:	23ff      	movs	r3, #255	; 0xff
 8002030:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002032:	1d3a      	adds	r2, r7, #4
 8002034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2302      	movs	r3, #2
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	4822      	ldr	r0, [pc, #136]	; (80020c8 <Buttons_init+0x120>)
 8002040:	f008 f994 	bl	800a36c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD1; // pull-up port1
 8002044:	2349      	movs	r3, #73	; 0x49
 8002046:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002048:	23ff      	movs	r3, #255	; 0xff
 800204a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 800204c:	1d3a      	adds	r2, r7, #4
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2302      	movs	r3, #2
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	481b      	ldr	r0, [pc, #108]	; (80020c8 <Buttons_init+0x120>)
 800205a:	f008 f987 	bl	800a36c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN0; // pull-up enable on port0
 800205e:	2346      	movs	r3, #70	; 0x46
 8002060:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002062:	23ff      	movs	r3, #255	; 0xff
 8002064:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002066:	1d3a      	adds	r2, r7, #4
 8002068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2302      	movs	r3, #2
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	4815      	ldr	r0, [pc, #84]	; (80020c8 <Buttons_init+0x120>)
 8002074:	f008 f97a 	bl	800a36c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN1; // pull-up enable on port1
 8002078:	2347      	movs	r3, #71	; 0x47
 800207a:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800207c:	23ff      	movs	r3, #255	; 0xff
 800207e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002080:	1d3a      	adds	r2, r7, #4
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2302      	movs	r3, #2
 800208a:	2140      	movs	r1, #64	; 0x40
 800208c:	480e      	ldr	r0, [pc, #56]	; (80020c8 <Buttons_init+0x120>)
 800208e:	f008 f96d 	bl	800a36c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_MNTR0; // rd pins state port0
 8002092:	2300      	movs	r3, #0
 8002094:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8002096:	1d3a      	adds	r2, r7, #4
 8002098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	4809      	ldr	r0, [pc, #36]	; (80020c8 <Buttons_init+0x120>)
 80020a4:	f008 f962 	bl	800a36c <HAL_I2C_Master_Transmit>

	LED(0,0,0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f863 	bl	8002178 <LED>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	48000800 	.word	0x48000800
 80020c0:	48000c00 	.word	0x48000c00
 80020c4:	48000400 	.word	0x48000400
 80020c8:	200078a4 	.word	0x200078a4

080020cc <BLueTooth_Configuration>:
//--------------------------------------------------------------------------------------------------------
//										Выбор режима работы блютус
//--------------------------------------------------------------------------------------------------------

void BLueTooth_Configuration(uint8_t state)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint8_t BlueTooth_State = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
	// Читаем порт P1
	aTxBuffer[0] = 0x01;
 80020da:	2301      	movs	r3, #1
 80020dc:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80020de:	f107 0210 	add.w	r2, r7, #16
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	4821      	ldr	r0, [pc, #132]	; (8002174 <BLueTooth_Configuration+0xa8>)
 80020ee:	f008 f93d 	bl	800a36c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2141      	movs	r1, #65	; 0x41
 8002100:	481c      	ldr	r0, [pc, #112]	; (8002174 <BLueTooth_Configuration+0xa8>)
 8002102:	f008 fa27 	bl	800a554 <HAL_I2C_Master_Receive>
	BlueTooth_State=aRxBuffer[0];
 8002106:	7b3b      	ldrb	r3, [r7, #12]
 8002108:	75fb      	strb	r3, [r7, #23]

	// Очищаем P1_3 и P1_4
	BlueTooth_State&=0xE7;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	f023 0318 	bic.w	r3, r3, #24
 8002110:	75fb      	strb	r3, [r7, #23]
	// Записываем значение config
	BlueTooth_State|=(state<<4);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	b25a      	sxtb	r2, r3
 8002118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800211c:	4313      	orrs	r3, r2
 800211e:	b25b      	sxtb	r3, r3
 8002120:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8002122:	2303      	movs	r3, #3
 8002124:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 800212a:	f107 0210 	add.w	r2, r7, #16
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2302      	movs	r3, #2
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	480e      	ldr	r0, [pc, #56]	; (8002174 <BLueTooth_Configuration+0xa8>)
 800213a:	f008 f917 	bl	800a36c <HAL_I2C_Master_Transmit>

	delay_ms(500);
 800213e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002142:	f001 f8d3 	bl	80032ec <delay_ms>

	// Reset
	BlueTooth_State|=(0x01<<5);
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 800214e:	2303      	movs	r3, #3
 8002150:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8002156:	f107 0210 	add.w	r2, r7, #16
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2302      	movs	r3, #2
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <BLueTooth_Configuration+0xa8>)
 8002166:	f008 f901 	bl	800a36c <HAL_I2C_Master_Transmit>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200078a4 	.word	0x200078a4

08002178 <LED>:
//--------------------------------------------------------------------------------------------------------
//											Управление светодиодом
//--------------------------------------------------------------------------------------------------------

void LED(uint8_t RED, uint8_t GREEN, uint8_t BLUE)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	460b      	mov	r3, r1
 8002184:	71bb      	strb	r3, [r7, #6]
 8002186:	4613      	mov	r3, r2
 8002188:	717b      	strb	r3, [r7, #5]
	uint8_t color=0;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[4];
	color=(RED<<7)+(GREEN<<6)+(BLUE<<5)+0x1F;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	b2da      	uxtb	r2, r3
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b2da      	uxtb	r2, r3
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	331f      	adds	r3, #31
 80021aa:	73fb      	strb	r3, [r7, #15]
	color=~color;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 80021b2:	2303      	movs	r3, #3
 80021b4:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = color;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 10000);
 80021ba:	f107 0208 	add.w	r2, r7, #8
 80021be:	f242 7310 	movw	r3, #10000	; 0x2710
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2302      	movs	r3, #2
 80021c6:	2140      	movs	r1, #64	; 0x40
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <LED+0x60>)
 80021ca:	f008 f8cf 	bl	800a36c <HAL_I2C_Master_Transmit>
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200078a4 	.word	0x200078a4

080021dc <Button_S1_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										ON / OFF
//--------------------------------------------------------------------------------------------------------

void Button_S1_press_callback(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	if(OnOffCntr==-1)
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <Button_S1_press_callback+0x34>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d10f      	bne.n	800220c <Button_S1_press_callback+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==1)
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <Button_S1_press_callback+0x38>)
 80021f0:	f007 ffda 	bl	800a1a8 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <Button_S1_press_callback+0x30>
		{
			old_active_string=0xFF; OnOffCntr=on_off_time; screen=Off_screen;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <Button_S1_press_callback+0x3c>)
 80021fc:	22ff      	movs	r2, #255	; 0xff
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <Button_S1_press_callback+0x34>)
 8002202:	22c8      	movs	r2, #200	; 0xc8
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <Button_S1_press_callback+0x40>)
 8002208:	2203      	movs	r2, #3
 800220a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000004a 	.word	0x2000004a
 8002214:	48001000 	.word	0x48001000
 8002218:	20000330 	.word	0x20000330
 800221c:	2000004c 	.word	0x2000004c

08002220 <Button_S2_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										P zero
//--------------------------------------------------------------------------------------------------------

void Button_S2_press_callback(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <Button_S2_press_callback+0x70>)
 8002226:	2200      	movs	r2, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <Button_S2_press_callback+0x70>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <Button_S2_press_callback+0x74>)
 8002230:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <Button_S2_press_callback+0x78>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <Button_S2_press_callback+0x78>)
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <Button_S2_press_callback+0x7c>)
 800223e:	701a      	strb	r2, [r3, #0]
	// Таррирование давления
	if(Pressure_zero==0)Pressure_zero=Pressure;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f7fe fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <Button_S2_press_callback+0x46>
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Button_S2_press_callback+0x84>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	4910      	ldr	r1, [pc, #64]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002260:	e9c1 2300 	strd	r2, r3, [r1]
 8002264:	e006      	b.n	8002274 <Button_S2_press_callback+0x54>
	else Pressure_zero=0;
 8002266:	490e      	ldr	r1, [pc, #56]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9c1 2300 	strd	r2, r3, [r1]

	// Обнуление АЦП
	if(zero_ADC[0]==0)zero_ADC[0]=ADC_middle[3];
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <Button_S2_press_callback+0x66>
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <Button_S2_press_callback+0x8c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002282:	6013      	str	r3, [r2, #0]
		else zero_ADC[0]=0;

}
 8002284:	e002      	b.n	800228c <Button_S2_press_callback+0x6c>
		else zero_ADC[0]=0;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20001bd6 	.word	0x20001bd6
 8002294:	20001bd4 	.word	0x20001bd4
 8002298:	20001bd9 	.word	0x20001bd9
 800229c:	20001bd8 	.word	0x20001bd8
 80022a0:	20000808 	.word	0x20000808
 80022a4:	20002218 	.word	0x20002218
 80022a8:	20002200 	.word	0x20002200
 80022ac:	20002070 	.word	0x20002070

080022b0 <Button_S3_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E zero
//--------------------------------------------------------------------------------------------------------

void Button_S3_press_callback(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <Button_S3_press_callback+0x8c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <Button_S3_press_callback+0x8c>)
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <Button_S3_press_callback+0x90>)
 80022c0:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <Button_S3_press_callback+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <Button_S3_press_callback+0x94>)
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <Button_S3_press_callback+0x98>)
 80022ce:	701a      	strb	r2, [r3, #0]
	// Таррирование электрики
	if(Electric_zero==0)
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <Button_S3_press_callback+0x9c>)
 80022d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f7fe fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <Button_S3_press_callback+0x78>
	switch(E_fun)
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <Button_S3_press_callback+0xa0>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d014      	beq.n	800231a <Button_S3_press_callback+0x6a>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	dc21      	bgt.n	8002338 <Button_S3_press_callback+0x88>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <Button_S3_press_callback+0x4e>
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d007      	beq.n	800230c <Button_S3_press_callback+0x5c>
		case 0: Electric_zero=Test_Pressure; break;
		case 1: Electric_zero=current_4_20mA; break;
		case 2: Electric_zero=voltage_measure; break;
	}
	else Electric_zero=0;
}
 80022fc:	e01c      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 0: Electric_zero=Test_Pressure; break;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <Button_S3_press_callback+0xa4>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	4911      	ldr	r1, [pc, #68]	; (800234c <Button_S3_press_callback+0x9c>)
 8002306:	e9c1 2300 	strd	r2, r3, [r1]
 800230a:	e015      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 1: Electric_zero=current_4_20mA; break;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <Button_S3_press_callback+0xa8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <Button_S3_press_callback+0x9c>)
 8002314:	e9c1 2300 	strd	r2, r3, [r1]
 8002318:	e00e      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 2: Electric_zero=voltage_measure; break;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <Button_S3_press_callback+0xac>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	490a      	ldr	r1, [pc, #40]	; (800234c <Button_S3_press_callback+0x9c>)
 8002322:	e9c1 2300 	strd	r2, r3, [r1]
 8002326:	e007      	b.n	8002338 <Button_S3_press_callback+0x88>
	else Electric_zero=0;
 8002328:	4908      	ldr	r1, [pc, #32]	; (800234c <Button_S3_press_callback+0x9c>)
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002336:	e7ff      	b.n	8002338 <Button_S3_press_callback+0x88>
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001bd6 	.word	0x20001bd6
 8002340:	20001bd4 	.word	0x20001bd4
 8002344:	20001bd9 	.word	0x20001bd9
 8002348:	20001bd8 	.word	0x20001bd8
 800234c:	20000810 	.word	0x20000810
 8002350:	20000830 	.word	0x20000830
 8002354:	20002220 	.word	0x20002220
 8002358:	20005240 	.word	0x20005240
 800235c:	200020f8 	.word	0x200020f8

08002360 <Button_S4_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											ENTER
//--------------------------------------------------------------------------------------------------------

void Button_S4_press_callback(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	 switch(screen)
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <Button_S4_press_callback+0x6c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3b04      	subs	r3, #4
 800236a:	2b05      	cmp	r3, #5
 800236c:	d81d      	bhi.n	80023aa <Button_S4_press_callback+0x4a>
 800236e:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <Button_S4_press_callback+0x14>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	08002393 	.word	0x08002393
 8002378:	080023a5 	.word	0x080023a5
 800237c:	0800239f 	.word	0x0800239f
 8002380:	080023ab 	.word	0x080023ab
 8002384:	0800238d 	.word	0x0800238d
 8002388:	08002399 	.word	0x08002399
	 {
	 	 case Parameter_screen: Parameter_screen_S4(); break;
 800238c:	f016 fb98 	bl	8018ac0 <Parameter_screen_S4>
 8002390:	e00b      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case Option_screen: Option_screen_S4(); break;
 8002392:	f016 fc63 	bl	8018c5c <Option_screen_S4>
 8002396:	e008      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case RTC_screen: RTC_screen_S4(); break;
 8002398:	f016 f81a 	bl	80183d0 <RTC_screen_S4>
 800239c:	e005      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case ADC_options_screen: ADC_options_screen_S4(); break;
 800239e:	f014 fcff 	bl	8016da0 <ADC_options_screen_S4>
 80023a2:	e002      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case Display_options_screen: Display_options_screen_S4(); break;
 80023a4:	f014 fffe 	bl	80173a4 <Display_options_screen_S4>
 80023a8:	bf00      	nop
	 }
	 off_sec=off_min=0;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <Button_S4_press_callback+0x70>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <Button_S4_press_callback+0x70>)
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <Button_S4_press_callback+0x74>)
 80023b6:	801a      	strh	r2, [r3, #0]
	 light_sec=light_min=0;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <Button_S4_press_callback+0x78>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <Button_S4_press_callback+0x78>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <Button_S4_press_callback+0x7c>)
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000004c 	.word	0x2000004c
 80023d0:	20001bd6 	.word	0x20001bd6
 80023d4:	20001bd4 	.word	0x20001bd4
 80023d8:	20001bd9 	.word	0x20001bd9
 80023dc:	20001bd8 	.word	0x20001bd8

080023e0 <Button_S5_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											FORWARD
//--------------------------------------------------------------------------------------------------------

void Button_S5_press_callback(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	switch(screen)
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <Button_S5_press_callback+0x78>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3b05      	subs	r3, #5
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	d824      	bhi.n	8002438 <Button_S5_press_callback+0x58>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <Button_S5_press_callback+0x14>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800241b 	.word	0x0800241b
 80023f8:	08002415 	.word	0x08002415
 80023fc:	08002421 	.word	0x08002421
 8002400:	08002439 	.word	0x08002439
 8002404:	08002427 	.word	0x08002427
 8002408:	0800242d 	.word	0x0800242d
 800240c:	08002439 	.word	0x08002439
 8002410:	08002433 	.word	0x08002433
	{
		case ADC_options_screen: ADC_options_screen_S5(); break;
 8002414:	f014 fd96 	bl	8016f44 <ADC_options_screen_S5>
 8002418:	e00e      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S5(); break;
 800241a:	f015 f82f 	bl	801747c <Display_options_screen_S5>
 800241e:	e00b      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S5(); break;
 8002420:	f015 faaa 	bl	8017978 <Measure_options_screen_S5>
 8002424:	e008      	b.n	8002438 <Button_S5_press_callback+0x58>
		case RTC_screen: RTC_screen_S5(); break;
 8002426:	f015 febf 	bl	80181a8 <RTC_screen_S5>
 800242a:	e005      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S5(); break;
 800242c:	f014 fe68 	bl	8017100 <Auto_Off_option_screen_S5>
 8002430:	e002      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S5(); break;
 8002432:	f016 fa05 	bl	8018840 <Logging_options_screen_S5>
 8002436:	bf00      	nop
	}
	off_sec=off_min=0;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <Button_S5_press_callback+0x7c>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <Button_S5_press_callback+0x7c>)
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <Button_S5_press_callback+0x80>)
 8002444:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <Button_S5_press_callback+0x84>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <Button_S5_press_callback+0x84>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <Button_S5_press_callback+0x88>)
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000004c 	.word	0x2000004c
 800245c:	20001bd6 	.word	0x20001bd6
 8002460:	20001bd4 	.word	0x20001bd4
 8002464:	20001bd9 	.word	0x20001bd9
 8002468:	20001bd8 	.word	0x20001bd8

0800246c <Button_S6_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											UP
//--------------------------------------------------------------------------------------------------------

void Button_S6_press_callback(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	switch(screen)
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <Button_S6_press_callback+0x84>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b04      	subs	r3, #4
 8002476:	2b08      	cmp	r3, #8
 8002478:	d829      	bhi.n	80024ce <Button_S6_press_callback+0x62>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <Button_S6_press_callback+0x14>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	080024ab 	.word	0x080024ab
 8002484:	080024b7 	.word	0x080024b7
 8002488:	080024b1 	.word	0x080024b1
 800248c:	080024bd 	.word	0x080024bd
 8002490:	080024a5 	.word	0x080024a5
 8002494:	080024c3 	.word	0x080024c3
 8002498:	080024cf 	.word	0x080024cf
 800249c:	080024cf 	.word	0x080024cf
 80024a0:	080024c9 	.word	0x080024c9
	{
		case Parameter_screen: Parameter_screen_S6(); break;
 80024a4:	f016 fb68 	bl	8018b78 <Parameter_screen_S6>
 80024a8:	e011      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Option_screen: Option_screen_S6(); break;
 80024aa:	f016 fbc1 	bl	8018c30 <Option_screen_S6>
 80024ae:	e00e      	b.n	80024ce <Button_S6_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S6(); break;
 80024b0:	f014 fc38 	bl	8016d24 <ADC_options_screen_S6>
 80024b4:	e00b      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S6(); break;
 80024b6:	f014 ff4d 	bl	8017354 <Display_options_screen_S6>
 80024ba:	e008      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S6(); break;
 80024bc:	f015 f9b8 	bl	8017830 <Measure_options_screen_S6>
 80024c0:	e005      	b.n	80024ce <Button_S6_press_callback+0x62>
		case RTC_screen: RTC_screen_S6(); break;
 80024c2:	f015 fe99 	bl	80181f8 <RTC_screen_S6>
 80024c6:	e002      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S6(); break;
 80024c8:	f016 f906 	bl	80186d8 <Logging_options_screen_S6>
 80024cc:	bf00      	nop
	}
	off_sec=off_min=0;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <Button_S6_press_callback+0x88>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <Button_S6_press_callback+0x88>)
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <Button_S6_press_callback+0x8c>)
 80024da:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <Button_S6_press_callback+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <Button_S6_press_callback+0x90>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <Button_S6_press_callback+0x94>)
 80024e8:	701a      	strb	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000004c 	.word	0x2000004c
 80024f4:	20001bd6 	.word	0x20001bd6
 80024f8:	20001bd4 	.word	0x20001bd4
 80024fc:	20001bd9 	.word	0x20001bd9
 8002500:	20001bd8 	.word	0x20001bd8

08002504 <Button_S7_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										DOWN
//--------------------------------------------------------------------------------------------------------

void Button_S7_press_callback(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	switch(screen)
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <Button_S7_press_callback+0x84>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3b04      	subs	r3, #4
 800250e:	2b08      	cmp	r3, #8
 8002510:	d829      	bhi.n	8002566 <Button_S7_press_callback+0x62>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <Button_S7_press_callback+0x14>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002543 	.word	0x08002543
 800251c:	0800254f 	.word	0x0800254f
 8002520:	08002549 	.word	0x08002549
 8002524:	08002555 	.word	0x08002555
 8002528:	0800253d 	.word	0x0800253d
 800252c:	0800255b 	.word	0x0800255b
 8002530:	08002567 	.word	0x08002567
 8002534:	08002567 	.word	0x08002567
 8002538:	08002561 	.word	0x08002561
	{
		case Parameter_screen: Parameter_screen_S7(); break;
 800253c:	f016 fb04 	bl	8018b48 <Parameter_screen_S7>
 8002540:	e011      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Option_screen: Option_screen_S7(); break;
 8002542:	f016 fb5d 	bl	8018c00 <Option_screen_S7>
 8002546:	e00e      	b.n	8002566 <Button_S7_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S7(); break;
 8002548:	f014 fc00 	bl	8016d4c <ADC_options_screen_S7>
 800254c:	e00b      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S7(); break;
 800254e:	f014 ff15 	bl	801737c <Display_options_screen_S7>
 8002552:	e008      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S7(); break;
 8002554:	f015 f980 	bl	8017858 <Measure_options_screen_S7>
 8002558:	e005      	b.n	8002566 <Button_S7_press_callback+0x62>
		case RTC_screen: RTC_screen_S7(); break;
 800255a:	f015 fec3 	bl	80182e4 <RTC_screen_S7>
 800255e:	e002      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S7(); break;
 8002560:	f016 f8ce 	bl	8018700 <Logging_options_screen_S7>
 8002564:	bf00      	nop
	}
	off_sec=off_min=0;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <Button_S7_press_callback+0x88>)
 8002568:	2200      	movs	r2, #0
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <Button_S7_press_callback+0x88>)
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <Button_S7_press_callback+0x8c>)
 8002572:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <Button_S7_press_callback+0x90>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <Button_S7_press_callback+0x90>)
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <Button_S7_press_callback+0x94>)
 8002580:	701a      	strb	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000004c 	.word	0x2000004c
 800258c:	20001bd6 	.word	0x20001bd6
 8002590:	20001bd4 	.word	0x20001bd4
 8002594:	20001bd9 	.word	0x20001bd9
 8002598:	20001bd8 	.word	0x20001bd8

0800259c <Button_S8_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											BACKWARD
//--------------------------------------------------------------------------------------------------------

void Button_S8_press_callback(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	switch(screen)
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <Button_S8_press_callback+0x78>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3b05      	subs	r3, #5
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	d824      	bhi.n	80025f4 <Button_S8_press_callback+0x58>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <Button_S8_press_callback+0x14>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025d7 	.word	0x080025d7
 80025b4:	080025d1 	.word	0x080025d1
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025f5 	.word	0x080025f5
 80025c0:	080025e3 	.word	0x080025e3
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	080025f5 	.word	0x080025f5
 80025cc:	080025ef 	.word	0x080025ef
	{
		case ADC_options_screen: ADC_options_screen_S8(); break;
 80025d0:	f014 fc3c 	bl	8016e4c <ADC_options_screen_S8>
 80025d4:	e00e      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S8(); break;
 80025d6:	f014 ff11 	bl	80173fc <Display_options_screen_S8>
 80025da:	e00b      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S8(); break;
 80025dc:	f015 f966 	bl	80178ac <Measure_options_screen_S8>
 80025e0:	e008      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case RTC_screen: RTC_screen_S8(); break;
 80025e2:	f015 fdf5 	bl	80181d0 <RTC_screen_S8>
 80025e6:	e005      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S8(); break;
 80025e8:	f014 fd76 	bl	80170d8 <Auto_Off_option_screen_S8>
 80025ec:	e002      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S8(); break;
 80025ee:	f016 f8b1 	bl	8018754 <Logging_options_screen_S8>
 80025f2:	bf00      	nop
	}
	off_sec=off_min=0;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <Button_S8_press_callback+0x7c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <Button_S8_press_callback+0x7c>)
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <Button_S8_press_callback+0x80>)
 8002600:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <Button_S8_press_callback+0x84>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <Button_S8_press_callback+0x84>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <Button_S8_press_callback+0x88>)
 800260e:	701a      	strb	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000004c 	.word	0x2000004c
 8002618:	20001bd6 	.word	0x20001bd6
 800261c:	20001bd4 	.word	0x20001bd4
 8002620:	20001bd9 	.word	0x20001bd9
 8002624:	20001bd8 	.word	0x20001bd8

08002628 <Button_S9_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											MENU
//--------------------------------------------------------------------------------------------------------

void Button_S9_press_callback(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	switch(screen)
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <Button_S9_press_callback+0xa0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	3b01      	subs	r3, #1
 8002632:	2b0b      	cmp	r3, #11
 8002634:	d838      	bhi.n	80026a8 <Button_S9_press_callback+0x80>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <Button_S9_press_callback+0x14>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800268b 	.word	0x0800268b
 8002640:	080026a9 	.word	0x080026a9
 8002644:	080026a9 	.word	0x080026a9
 8002648:	08002673 	.word	0x08002673
 800264c:	0800267f 	.word	0x0800267f
 8002650:	08002679 	.word	0x08002679
 8002654:	08002685 	.word	0x08002685
 8002658:	0800266d 	.word	0x0800266d
 800265c:	08002691 	.word	0x08002691
 8002660:	08002697 	.word	0x08002697
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026a3 	.word	0x080026a3
	{
		case Parameter_screen: Parameter_screen_S9(); break;
 800266c:	f016 fa12 	bl	8018a94 <Parameter_screen_S9>
 8002670:	e01a      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Option_screen: Option_screen_S9(); break;
 8002672:	f016 fab3 	bl	8018bdc <Option_screen_S9>
 8002676:	e017      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case ADC_options_screen: ADC_options_screen_S9(); break;
 8002678:	f014 fb7c 	bl	8016d74 <ADC_options_screen_S9>
 800267c:	e014      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Display_options_screen: Display_options_screen_S9(); break;
 800267e:	f014 fe53 	bl	8017328 <Display_options_screen_S9>
 8002682:	e011      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Measure_options_screen: Measure_options_screen_S9(); break;
 8002684:	f015 f8fc 	bl	8017880 <Measure_options_screen_S9>
 8002688:	e00e      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Main_screen: Main_screen_S9(); break;
 800268a:	f015 fad1 	bl	8017c30 <Main_screen_S9>
 800268e:	e00b      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case RTC_screen: RTC_screen_S9(); break;
 8002690:	f015 fd74 	bl	801817c <RTC_screen_S9>
 8002694:	e008      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Auto_Off_option_screen: Auto_Off_option_screen_S9(); break;
 8002696:	f014 fd09 	bl	80170ac <Auto_Off_option_screen_S9>
 800269a:	e005      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case About_options_screen: About_options_screen_S9(); break;
 800269c:	f015 ff34 	bl	8018508 <About_options_screen_S9>
 80026a0:	e002      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Logging_options_screen: Logging_options_screen_S9(); break;
 80026a2:	f016 f841 	bl	8018728 <Logging_options_screen_S9>
 80026a6:	bf00      	nop
	}
	off_sec=off_min=0;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <Button_S9_press_callback+0xa4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <Button_S9_press_callback+0xa4>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <Button_S9_press_callback+0xa8>)
 80026b4:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <Button_S9_press_callback+0xac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <Button_S9_press_callback+0xac>)
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <Button_S9_press_callback+0xb0>)
 80026c2:	701a      	strb	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000004c 	.word	0x2000004c
 80026cc:	20001bd6 	.word	0x20001bd6
 80026d0:	20001bd4 	.word	0x20001bd4
 80026d4:	20001bd9 	.word	0x20001bd9
 80026d8:	20001bd8 	.word	0x20001bd8

080026dc <Button_S10_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E func
//--------------------------------------------------------------------------------------------------------

void Button_S10_press_callback(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <Button_S10_press_callback+0x54>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <Button_S10_press_callback+0x54>)
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <Button_S10_press_callback+0x58>)
 80026ec:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <Button_S10_press_callback+0x5c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <Button_S10_press_callback+0x5c>)
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <Button_S10_press_callback+0x60>)
 80026fa:	701a      	strb	r2, [r3, #0]
	// Переключение отображения второй строки
	if(++E_fun==3)E_fun=0;
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <Button_S10_press_callback+0x64>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <Button_S10_press_callback+0x64>)
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <Button_S10_press_callback+0x64>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d102      	bne.n	8002716 <Button_S10_press_callback+0x3a>
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <Button_S10_press_callback+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
	Electric_zero=0;
 8002716:	490b      	ldr	r1, [pc, #44]	; (8002744 <Button_S10_press_callback+0x68>)
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20001bd6 	.word	0x20001bd6
 8002734:	20001bd4 	.word	0x20001bd4
 8002738:	20001bd9 	.word	0x20001bd9
 800273c:	20001bd8 	.word	0x20001bd8
 8002740:	20000830 	.word	0x20000830
 8002744:	20000810 	.word	0x20000810

08002748 <Button_S11_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											P units
//--------------------------------------------------------------------------------------------------------

void Button_S11_press_callback(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	if(screen==Main_screen) screen=Test_screen;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <Button_S11_press_callback+0x50>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d103      	bne.n	800275c <Button_S11_press_callback+0x14>
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <Button_S11_press_callback+0x50>)
 8002756:	2202      	movs	r2, #2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e00a      	b.n	8002772 <Button_S11_press_callback+0x2a>
	else if(screen==Test_screen)screen=ADC_options_screen;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <Button_S11_press_callback+0x50>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d103      	bne.n	800276c <Button_S11_press_callback+0x24>
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <Button_S11_press_callback+0x50>)
 8002766:	2206      	movs	r2, #6
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e002      	b.n	8002772 <Button_S11_press_callback+0x2a>
	else screen=Main_screen;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <Button_S11_press_callback+0x50>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]

	off_sec=off_min=0;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <Button_S11_press_callback+0x54>)
 8002774:	2200      	movs	r2, #0
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <Button_S11_press_callback+0x54>)
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <Button_S11_press_callback+0x58>)
 800277e:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <Button_S11_press_callback+0x5c>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <Button_S11_press_callback+0x5c>)
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <Button_S11_press_callback+0x60>)
 800278c:	701a      	strb	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	2000004c 	.word	0x2000004c
 800279c:	20001bd6 	.word	0x20001bd6
 80027a0:	20001bd4 	.word	0x20001bd4
 80027a4:	20001bd9 	.word	0x20001bd9
 80027a8:	20001bd8 	.word	0x20001bd8

080027ac <Buttons_process>:
//--------------------------------------------------------------------------------------------------------
//											Обработчик кнопок
//--------------------------------------------------------------------------------------------------------

void Buttons_process(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
	uint16_t keypad = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	81fb      	strh	r3, [r7, #14]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	aTxBuffer[0] = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer, 1, 1000);
 80027ba:	f107 0208 	add.w	r2, r7, #8
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	48ac      	ldr	r0, [pc, #688]	; (8002a7c <Buttons_process+0x2d0>)
 80027ca:	f007 fdcf 	bl	800a36c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80027ce:	1d3a      	adds	r2, r7, #4
 80027d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	2141      	movs	r1, #65	; 0x41
 80027da:	48a8      	ldr	r0, [pc, #672]	; (8002a7c <Buttons_process+0x2d0>)
 80027dc:	f007 feba 	bl	800a554 <HAL_I2C_Master_Receive>
	keypad=aRxBuffer[0];
 80027e0:	793b      	ldrb	r3, [r7, #4]
 80027e2:	81fb      	strh	r3, [r7, #14]
	keypad<<=8;
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	81fb      	strh	r3, [r7, #14]
	aTxBuffer[0] = 0x01;
 80027ea:	2301      	movs	r3, #1
 80027ec:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer, 1, 1000);
 80027ee:	f107 0208 	add.w	r2, r7, #8
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	2140      	movs	r1, #64	; 0x40
 80027fc:	489f      	ldr	r0, [pc, #636]	; (8002a7c <Buttons_process+0x2d0>)
 80027fe:	f007 fdb5 	bl	800a36c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002802:	1d3a      	adds	r2, r7, #4
 8002804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2141      	movs	r1, #65	; 0x41
 800280e:	489b      	ldr	r0, [pc, #620]	; (8002a7c <Buttons_process+0x2d0>)
 8002810:	f007 fea0 	bl	800a554 <HAL_I2C_Master_Receive>
	keypad+=(aRxBuffer[0]&0x07);
 8002814:	793b      	ldrb	r3, [r7, #4]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	b29a      	uxth	r2, r3
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	4413      	add	r3, r2
 8002822:	81fb      	strh	r3, [r7, #14]

	keypad_code=keypad;
 8002824:	4a96      	ldr	r2, [pc, #600]	; (8002a80 <Buttons_process+0x2d4>)
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	8013      	strh	r3, [r2, #0]
	switch(keypad)
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	f64f 7207 	movw	r2, #65287	; 0xff07
 8002830:	4293      	cmp	r3, r2
 8002832:	f000 80f3 	beq.w	8002a1c <Buttons_process+0x270>
 8002836:	f64f 7207 	movw	r2, #65287	; 0xff07
 800283a:	4293      	cmp	r3, r2
 800283c:	f300 80fd 	bgt.w	8002a3a <Buttons_process+0x28e>
 8002840:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002844:	4293      	cmp	r3, r2
 8002846:	f000 80bc 	beq.w	80029c2 <Buttons_process+0x216>
 800284a:	f64f 6206 	movw	r2, #65030	; 0xfe06
 800284e:	4293      	cmp	r3, r2
 8002850:	f300 80f3 	bgt.w	8002a3a <Buttons_process+0x28e>
 8002854:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002858:	4293      	cmp	r3, r2
 800285a:	f000 80c1 	beq.w	80029e0 <Buttons_process+0x234>
 800285e:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002862:	4293      	cmp	r3, r2
 8002864:	f300 80e9 	bgt.w	8002a3a <Buttons_process+0x28e>
 8002868:	f64f 6203 	movw	r2, #65027	; 0xfe03
 800286c:	4293      	cmp	r3, r2
 800286e:	f000 80c6 	beq.w	80029fe <Buttons_process+0x252>
 8002872:	f64f 6203 	movw	r2, #65027	; 0xfe03
 8002876:	4293      	cmp	r3, r2
 8002878:	f300 80df 	bgt.w	8002a3a <Buttons_process+0x28e>
 800287c:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <Buttons_process+0x13c>
 8002884:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002888:	4293      	cmp	r3, r2
 800288a:	f300 80d6 	bgt.w	8002a3a <Buttons_process+0x28e>
 800288e:	f64f 2207 	movw	r2, #64007	; 0xfa07
 8002892:	4293      	cmp	r3, r2
 8002894:	d038      	beq.n	8002908 <Buttons_process+0x15c>
 8002896:	f64f 2207 	movw	r2, #64007	; 0xfa07
 800289a:	4293      	cmp	r3, r2
 800289c:	f300 80cd 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028a0:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d03f      	beq.n	8002928 <Buttons_process+0x17c>
 80028a8:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028ac:	4293      	cmp	r3, r2
 80028ae:	f300 80c4 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028b2:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d046      	beq.n	8002948 <Buttons_process+0x19c>
 80028ba:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028be:	4293      	cmp	r3, r2
 80028c0:	f300 80bb 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028c4:	f64d 6207 	movw	r2, #56839	; 0xde07
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d04d      	beq.n	8002968 <Buttons_process+0x1bc>
 80028cc:	f64d 6207 	movw	r2, #56839	; 0xde07
 80028d0:	4293      	cmp	r3, r2
 80028d2:	f300 80b2 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028d6:	f647 6207 	movw	r2, #32263	; 0x7e07
 80028da:	4293      	cmp	r3, r2
 80028dc:	d062      	beq.n	80029a4 <Buttons_process+0x1f8>
 80028de:	f64b 6207 	movw	r2, #48647	; 0xbe07
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04f      	beq.n	8002986 <Buttons_process+0x1da>
 80028e6:	e0a8      	b.n	8002a3a <Buttons_process+0x28e>
	{
		case 64519: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 80028e8:	2201      	movs	r2, #1
 80028ea:	2100      	movs	r1, #0
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff fc43 	bl	8002178 <LED>
 80028f2:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <Buttons_process+0x2d8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 80ab 	bne.w	8002a52 <Buttons_process+0x2a6>
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <Buttons_process+0x2d8>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	f7ff fc8d 	bl	8002220 <Button_S2_press_callback>
 8002906:	e0a4      	b.n	8002a52 <Buttons_process+0x2a6>
		case 64007: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002908:	2201      	movs	r2, #1
 800290a:	2100      	movs	r1, #0
 800290c:	2000      	movs	r0, #0
 800290e:	f7ff fc33 	bl	8002178 <LED>
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <Buttons_process+0x2d8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 809d 	bne.w	8002a56 <Buttons_process+0x2aa>
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <Buttons_process+0x2d8>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	f7ff fcc5 	bl	80022b0 <Button_S3_press_callback>
 8002926:	e096      	b.n	8002a56 <Buttons_process+0x2aa>
		case 62983: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002928:	2201      	movs	r2, #1
 800292a:	2100      	movs	r1, #0
 800292c:	2000      	movs	r0, #0
 800292e:	f7ff fc23 	bl	8002178 <LED>
 8002932:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <Buttons_process+0x2d8>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 808f 	bne.w	8002a5a <Buttons_process+0x2ae>
 800293c:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <Buttons_process+0x2d8>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	f7ff fd0d 	bl	8002360 <Button_S4_press_callback>
 8002946:	e088      	b.n	8002a5a <Buttons_process+0x2ae>
		case 60935: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002948:	2201      	movs	r2, #1
 800294a:	2100      	movs	r1, #0
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff fc13 	bl	8002178 <LED>
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <Buttons_process+0x2d8>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 8081 	bne.w	8002a5e <Buttons_process+0x2b2>
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <Buttons_process+0x2d8>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	f7ff fd3d 	bl	80023e0 <Button_S5_press_callback>
 8002966:	e07a      	b.n	8002a5e <Buttons_process+0x2b2>
		case 56839: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002968:	2201      	movs	r2, #1
 800296a:	2100      	movs	r1, #0
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fc03 	bl	8002178 <LED>
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <Buttons_process+0x2d8>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d173      	bne.n	8002a62 <Buttons_process+0x2b6>
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <Buttons_process+0x2d8>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	f7ff fd74 	bl	800246c <Button_S6_press_callback>
 8002984:	e06d      	b.n	8002a62 <Buttons_process+0x2b6>
		case 48647: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002986:	2201      	movs	r2, #1
 8002988:	2100      	movs	r1, #0
 800298a:	2000      	movs	r0, #0
 800298c:	f7ff fbf4 	bl	8002178 <LED>
 8002990:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <Buttons_process+0x2d8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d166      	bne.n	8002a66 <Buttons_process+0x2ba>
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <Buttons_process+0x2d8>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	f7ff fdb1 	bl	8002504 <Button_S7_press_callback>
 80029a2:	e060      	b.n	8002a66 <Buttons_process+0x2ba>
		case 32263: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 80029a4:	2201      	movs	r2, #1
 80029a6:	2100      	movs	r1, #0
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7ff fbe5 	bl	8002178 <LED>
 80029ae:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <Buttons_process+0x2d8>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d159      	bne.n	8002a6a <Buttons_process+0x2be>
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <Buttons_process+0x2d8>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	f7ff fdee 	bl	800259c <Button_S8_press_callback>
 80029c0:	e053      	b.n	8002a6a <Buttons_process+0x2be>
		case 65030: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 80029c2:	2201      	movs	r2, #1
 80029c4:	2100      	movs	r1, #0
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fbd6 	bl	8002178 <LED>
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <Buttons_process+0x2d8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d14c      	bne.n	8002a6e <Buttons_process+0x2c2>
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <Buttons_process+0x2d8>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	f7ff fe25 	bl	8002628 <Button_S9_press_callback>
 80029de:	e046      	b.n	8002a6e <Buttons_process+0x2c2>
		case 65029: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 80029e0:	2201      	movs	r2, #1
 80029e2:	2100      	movs	r1, #0
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff fbc7 	bl	8002178 <LED>
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <Buttons_process+0x2d8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d13f      	bne.n	8002a72 <Buttons_process+0x2c6>
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <Buttons_process+0x2d8>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	f7ff fe70 	bl	80026dc <Button_S10_press_callback>
 80029fc:	e039      	b.n	8002a72 <Buttons_process+0x2c6>
		case 65027: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 80029fe:	2201      	movs	r2, #1
 8002a00:	2100      	movs	r1, #0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff fbb8 	bl	8002178 <LED>
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <Buttons_process+0x2d8>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d132      	bne.n	8002a76 <Buttons_process+0x2ca>
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <Buttons_process+0x2d8>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	f7ff fe97 	bl	8002748 <Button_S11_press_callback>
 8002a1a:	e02c      	b.n	8002a76 <Buttons_process+0x2ca>
		case 65287: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff fba9 	bl	8002178 <LED>
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <Buttons_process+0x2d8>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12e      	bne.n	8002a8c <Buttons_process+0x2e0>
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <Buttons_process+0x2d8>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	f7ff fbd2 	bl	80021dc <Button_S1_press_callback>
 8002a38:	e028      	b.n	8002a8c <Buttons_process+0x2e0>
		default: LED(0,0,0); buttons_press=Button_State=0; break;
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fb9a 	bl	8002178 <LED>
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <Buttons_process+0x2d8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <Buttons_process+0x2dc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	e01d      	b.n	8002a8e <Buttons_process+0x2e2>
		case 64519: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 8002a52:	bf00      	nop
 8002a54:	e01b      	b.n	8002a8e <Buttons_process+0x2e2>
		case 64007: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002a56:	bf00      	nop
 8002a58:	e019      	b.n	8002a8e <Buttons_process+0x2e2>
		case 62983: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002a5a:	bf00      	nop
 8002a5c:	e017      	b.n	8002a8e <Buttons_process+0x2e2>
		case 60935: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002a5e:	bf00      	nop
 8002a60:	e015      	b.n	8002a8e <Buttons_process+0x2e2>
		case 56839: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002a62:	bf00      	nop
 8002a64:	e013      	b.n	8002a8e <Buttons_process+0x2e2>
		case 48647: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002a66:	bf00      	nop
 8002a68:	e011      	b.n	8002a8e <Buttons_process+0x2e2>
		case 32263: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 8002a6a:	bf00      	nop
 8002a6c:	e00f      	b.n	8002a8e <Buttons_process+0x2e2>
		case 65030: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 8002a6e:	bf00      	nop
 8002a70:	e00d      	b.n	8002a8e <Buttons_process+0x2e2>
		case 65029: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 8002a72:	bf00      	nop
 8002a74:	e00b      	b.n	8002a8e <Buttons_process+0x2e2>
		case 65027: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 8002a76:	bf00      	nop
 8002a78:	e009      	b.n	8002a8e <Buttons_process+0x2e2>
 8002a7a:	bf00      	nop
 8002a7c:	200078a4 	.word	0x200078a4
 8002a80:	200007e8 	.word	0x200007e8
 8002a84:	200007e3 	.word	0x200007e3
 8002a88:	200007e4 	.word	0x200007e4
		case 65287: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002a8c:	bf00      	nop
	}

	if((Button_State==1)&&(buttons_press<20))buttons_press++;
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <Buttons_process+0x3a0>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d109      	bne.n	8002aaa <Buttons_process+0x2fe>
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <Buttons_process+0x3a4>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	2b13      	cmp	r3, #19
 8002a9c:	d805      	bhi.n	8002aaa <Buttons_process+0x2fe>
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <Buttons_process+0x3a4>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <Buttons_process+0x3a4>)
 8002aa8:	801a      	strh	r2, [r3, #0]

	// Задержка на обработку кнопки включения
	if(OnOffCntr>on_off_time){ if(--OnOffCntr==on_off_time) OnOffCntr=-1; }
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <Buttons_process+0x3a8>)
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	2bc8      	cmp	r3, #200	; 0xc8
 8002ab2:	dd11      	ble.n	8002ad8 <Buttons_process+0x32c>
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <Buttons_process+0x3a8>)
 8002ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b21a      	sxth	r2, r3
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <Buttons_process+0x3a8>)
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <Buttons_process+0x3a8>)
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	2bc8      	cmp	r3, #200	; 0xc8
 8002ace:	d103      	bne.n	8002ad8 <Buttons_process+0x32c>
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <Buttons_process+0x3a8>)
 8002ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad6:	801a      	strh	r2, [r3, #0]
	if((OnOffCntr>0)&&(OnOffCntr<=on_off_time)) if(--OnOffCntr==0)
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <Buttons_process+0x3a8>)
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	dd2c      	ble.n	8002b3c <Buttons_process+0x390>
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <Buttons_process+0x3a8>)
 8002ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae8:	2bc8      	cmp	r3, #200	; 0xc8
 8002aea:	dc27      	bgt.n	8002b3c <Buttons_process+0x390>
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <Buttons_process+0x3a8>)
 8002aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <Buttons_process+0x3a8>)
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <Buttons_process+0x3a8>)
 8002b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d119      	bne.n	8002b3c <Buttons_process+0x390>
	{
		// Выключение
		TURN_OFF_ADC_POWER();
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <Buttons_process+0x3ac>)
 8002b0e:	f007 fb63 	bl	800a1d8 <HAL_GPIO_WritePin>
 8002b12:	2200      	movs	r2, #0
 8002b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b18:	4810      	ldr	r0, [pc, #64]	; (8002b5c <Buttons_process+0x3b0>)
 8002b1a:	f007 fb5d 	bl	800a1d8 <HAL_GPIO_WritePin>
		delay_ms(200);
 8002b1e:	20c8      	movs	r0, #200	; 0xc8
 8002b20:	f000 fbe4 	bl	80032ec <delay_ms>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b24:	2200      	movs	r2, #0
 8002b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <Buttons_process+0x3ac>)
 8002b2c:	f007 fb54 	bl	800a1d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LCD_reserv_GPIO_Port, EN_LCD_reserv_Pin, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b36:	4809      	ldr	r0, [pc, #36]	; (8002b5c <Buttons_process+0x3b0>)
 8002b38:	f007 fb4e 	bl	800a1d8 <HAL_GPIO_WritePin>
	}

	sleep(5);
 8002b3c:	2005      	movs	r0, #5
 8002b3e:	f000 fbbd 	bl	80032bc <sleep>
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200007e3 	.word	0x200007e3
 8002b50:	200007e4 	.word	0x200007e4
 8002b54:	2000004a 	.word	0x2000004a
 8002b58:	48000800 	.word	0x48000800
 8002b5c:	48000c00 	.word	0x48000c00

08002b60 <Buttons_timer>:
//--------------------------------------------------------------------------------------------------------
//											Таймер долгого нажатия
//--------------------------------------------------------------------------------------------------------

void Buttons_timer(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	if(buttons_press==20)
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <Buttons_timer+0x44>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	2b14      	cmp	r3, #20
 8002b6a:	d112      	bne.n	8002b92 <Buttons_timer+0x32>
	{
		if(++buttons_ms>=1000)
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <Buttons_timer+0x48>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <Buttons_timer+0x48>)
 8002b76:	801a      	strh	r2, [r3, #0]
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <Buttons_timer+0x48>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b80:	d30a      	bcc.n	8002b98 <Buttons_timer+0x38>
		{
			buttons_ms=1000-100;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <Buttons_timer+0x48>)
 8002b84:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002b88:	801a      	strh	r2, [r3, #0]
			Button_State=0;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <Buttons_timer+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
		}
	}
	else {buttons_ms=0;}
}
 8002b90:	e002      	b.n	8002b98 <Buttons_timer+0x38>
	else {buttons_ms=0;}
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <Buttons_timer+0x48>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	801a      	strh	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200007e4 	.word	0x200007e4
 8002ba8:	200007e6 	.word	0x200007e6
 8002bac:	200007e3 	.word	0x200007e3

08002bb0 <DrawImage>:




void DrawImage(const uint8_t *image, uint16_t x, uint16_t y, uint8_t inverse)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	71fb      	strb	r3, [r7, #7]
	uint16_t xi = 0, yi = 0, bitnum=0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83fb      	strh	r3, [r7, #30]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	83bb      	strh	r3, [r7, #28]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	837b      	strh	r3, [r7, #26]
	uint8_t color;
	uint16_t SIZE_X, SIZE_Y;
	// Размер картинки
	SIZE_X = (uint16_t)(((image[0]<<8) + image[1])>>3);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	3201      	adds	r2, #1
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	10db      	asrs	r3, r3, #3
 8002be6:	833b      	strh	r3, [r7, #24]
	SIZE_Y = (uint16_t)(image[2]<<8) + image[3];
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3302      	adds	r3, #2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3303      	adds	r3, #3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	82fb      	strh	r3, [r7, #22]
	for(yi = 0; yi < SIZE_Y; yi++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	83bb      	strh	r3, [r7, #28]
 8002c04:	e03e      	b.n	8002c84 <DrawImage+0xd4>
	{
		for(xi = 0; xi < SIZE_X; xi++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	83fb      	strh	r3, [r7, #30]
 8002c0a:	e034      	b.n	8002c76 <DrawImage+0xc6>
		{
			for(bitnum=0;bitnum<8;bitnum++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	837b      	strh	r3, [r7, #26]
 8002c10:	e02b      	b.n	8002c6a <DrawImage+0xba>
			{
				color=((image[xi+yi*SIZE_X+4])>>(7-bitnum))&0x01;
 8002c12:	8bfa      	ldrh	r2, [r7, #30]
 8002c14:	8bbb      	ldrh	r3, [r7, #28]
 8002c16:	8b39      	ldrh	r1, [r7, #24]
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	fa42 f303 	asr.w	r3, r2, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	757b      	strb	r3, [r7, #21]
				if(color==inverse)u8g2_DrawPixel(&u8g2, x+(xi*8)+bitnum, y+yi);
 8002c3a:	7d7a      	ldrb	r2, [r7, #21]
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d110      	bne.n	8002c64 <DrawImage+0xb4>
 8002c42:	8bfb      	ldrh	r3, [r7, #30]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
 8002c50:	4413      	add	r3, r2
 8002c52:	b299      	uxth	r1, r3
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8bbb      	ldrh	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	480e      	ldr	r0, [pc, #56]	; (8002c98 <DrawImage+0xe8>)
 8002c60:	f013 f808 	bl	8015c74 <u8g2_DrawPixel>
			for(bitnum=0;bitnum<8;bitnum++)
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	3301      	adds	r3, #1
 8002c68:	837b      	strh	r3, [r7, #26]
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9d0      	bls.n	8002c12 <DrawImage+0x62>
		for(xi = 0; xi < SIZE_X; xi++)
 8002c70:	8bfb      	ldrh	r3, [r7, #30]
 8002c72:	3301      	adds	r3, #1
 8002c74:	83fb      	strh	r3, [r7, #30]
 8002c76:	8bfa      	ldrh	r2, [r7, #30]
 8002c78:	8b3b      	ldrh	r3, [r7, #24]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3c6      	bcc.n	8002c0c <DrawImage+0x5c>
	for(yi = 0; yi < SIZE_Y; yi++)
 8002c7e:	8bbb      	ldrh	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	83bb      	strh	r3, [r7, #28]
 8002c84:	8bba      	ldrh	r2, [r7, #28]
 8002c86:	8afb      	ldrh	r3, [r7, #22]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3bc      	bcc.n	8002c06 <DrawImage+0x56>
			}
		}
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20001f54 	.word	0x20001f54

08002c9c <Display_init>:




void Display_init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	u8g2_Setup_uc1638_240x160_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_cb_stm32l4);
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <Display_init+0xe8>)
 8002ca4:	4a38      	ldr	r2, [pc, #224]	; (8002d88 <Display_init+0xec>)
 8002ca6:	4939      	ldr	r1, [pc, #228]	; (8002d8c <Display_init+0xf0>)
 8002ca8:	4839      	ldr	r0, [pc, #228]	; (8002d90 <Display_init+0xf4>)
 8002caa:	f012 f91f 	bl	8014eec <u8g2_Setup_uc1638_240x160_f>
	u8g2_InitDisplay(&u8g2);
 8002cae:	4838      	ldr	r0, [pc, #224]	; (8002d90 <Display_init+0xf4>)
 8002cb0:	f013 fd98 	bl	80167e4 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4836      	ldr	r0, [pc, #216]	; (8002d90 <Display_init+0xf4>)
 8002cb8:	f013 fda3 	bl	8016802 <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 8002cbc:	4834      	ldr	r0, [pc, #208]	; (8002d90 <Display_init+0xf4>)
 8002cbe:	f012 f8f0 	bl	8014ea2 <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002cc2:	4934      	ldr	r1, [pc, #208]	; (8002d94 <Display_init+0xf8>)
 8002cc4:	4832      	ldr	r0, [pc, #200]	; (8002d90 <Display_init+0xf4>)
 8002cc6:	f012 fec1 	bl	8015a4c <u8g2_SetFont>

	//Подсветка
	temp_light=display_brightness;
 8002cca:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <Display_init+0xfc>)
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <Display_init+0x100>)
 8002cd0:	701a      	strb	r2, [r3, #0]
	TIM2->CCR1=display_brightness;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <Display_init+0xfc>)
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

	// Контрастность
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ce2:	482f      	ldr	r0, [pc, #188]	; (8002da0 <Display_init+0x104>)
 8002ce4:	f007 fa78 	bl	800a1d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2101      	movs	r1, #1
 8002cec:	482d      	ldr	r0, [pc, #180]	; (8002da4 <Display_init+0x108>)
 8002cee:	f007 fa73 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+1;
 8002cf2:	23e9      	movs	r3, #233	; 0xe9
 8002cf4:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002cf6:	463a      	mov	r2, r7
 8002cf8:	1d39      	adds	r1, r7, #4
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	4829      	ldr	r0, [pc, #164]	; (8002da8 <Display_init+0x10c>)
 8002d04:	f00b fb23 	bl	800e34e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4825      	ldr	r0, [pc, #148]	; (8002da4 <Display_init+0x108>)
 8002d0e:	f007 fa63 	bl	800a1d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2101      	movs	r1, #1
 8002d16:	4823      	ldr	r0, [pc, #140]	; (8002da4 <Display_init+0x108>)
 8002d18:	f007 fa5e 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8002d1c:	2381      	movs	r3, #129	; 0x81
 8002d1e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002d20:	463a      	mov	r2, r7
 8002d22:	1d39      	adds	r1, r7, #4
 8002d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	481e      	ldr	r0, [pc, #120]	; (8002da8 <Display_init+0x10c>)
 8002d2e:	f00b fb0e 	bl	800e34e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002d32:	2201      	movs	r2, #1
 8002d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d38:	4819      	ldr	r0, [pc, #100]	; (8002da0 <Display_init+0x104>)
 8002d3a:	f007 fa4d 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <Display_init+0x110>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	337d      	adds	r3, #125	; 0x7d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002d48:	463a      	mov	r2, r7
 8002d4a:	1d39      	adds	r1, r7, #4
 8002d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2301      	movs	r3, #1
 8002d54:	4814      	ldr	r0, [pc, #80]	; (8002da8 <Display_init+0x10c>)
 8002d56:	f00b fafa 	bl	800e34e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4811      	ldr	r0, [pc, #68]	; (8002da4 <Display_init+0x108>)
 8002d60:	f007 fa3a 	bl	800a1d8 <HAL_GPIO_WritePin>

	DrawImage(img1, 16, 61, 1);
 8002d64:	2301      	movs	r3, #1
 8002d66:	223d      	movs	r2, #61	; 0x3d
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4811      	ldr	r0, [pc, #68]	; (8002db0 <Display_init+0x114>)
 8002d6c:	f7ff ff20 	bl	8002bb0 <DrawImage>
	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002d70:	4807      	ldr	r0, [pc, #28]	; (8002d90 <Display_init+0xf4>)
 8002d72:	f012 f82e 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <Display_init+0xf4>)
 8002d78:	f011 ffb8 	bl	8014cec <u8g2_ClearBuffer>
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	080078b1 	.word	0x080078b1
 8002d88:	080079d1 	.word	0x080079d1
 8002d8c:	08029314 	.word	0x08029314
 8002d90:	20001f54 	.word	0x20001f54
 8002d94:	080273d0 	.word	0x080273d0
 8002d98:	20000070 	.word	0x20000070
 8002d9c:	20001bdc 	.word	0x20001bdc
 8002da0:	48000400 	.word	0x48000400
 8002da4:	48001000 	.word	0x48001000
 8002da8:	20001ef0 	.word	0x20001ef0
 8002dac:	20000071 	.word	0x20000071
 8002db0:	080226a4 	.word	0x080226a4
 8002db4:	00000000 	.word	0x00000000

08002db8 <Gauge_loading>:



void Gauge_loading(uint8_t*text, uint8_t percent)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
	DrawImage(img1, 16, 61, 1);
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	223d      	movs	r2, #61	; 0x3d
 8002dc8:	2110      	movs	r1, #16
 8002dca:	481d      	ldr	r0, [pc, #116]	; (8002e40 <Gauge_loading+0x88>)
 8002dcc:	f7ff fef0 	bl	8002bb0 <DrawImage>

	u8g2_DrawFrame(&u8g2, 40, 120, 160, 12);
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	23a0      	movs	r3, #160	; 0xa0
 8002dd6:	2278      	movs	r2, #120	; 0x78
 8002dd8:	2128      	movs	r1, #40	; 0x28
 8002dda:	481a      	ldr	r0, [pc, #104]	; (8002e44 <Gauge_loading+0x8c>)
 8002ddc:	f011 ff29 	bl	8014c32 <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, 40,120, percent*1.6, 12);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbae 	bl	8000544 <__aeabi_i2d>
 8002de8:	a313      	add	r3, pc, #76	; (adr r3, 8002e38 <Gauge_loading+0x80>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fc13 	bl	8000618 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fd fee5 	bl	8000bc8 <__aeabi_d2uiz>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	220c      	movs	r2, #12
 8002e04:	9200      	str	r2, [sp, #0]
 8002e06:	2278      	movs	r2, #120	; 0x78
 8002e08:	2128      	movs	r1, #40	; 0x28
 8002e0a:	480e      	ldr	r0, [pc, #56]	; (8002e44 <Gauge_loading+0x8c>)
 8002e0c:	f011 fedb 	bl	8014bc6 <u8g2_DrawBox>

	//sprintf(RAM,"%d", percent);
	//u8g2_DrawUTF8(&u8g2, 50, 120, RAM);
	u8g2_SetFont(&u8g2, u8g2_font_8x13_t_cyrillic);
 8002e10:	490d      	ldr	r1, [pc, #52]	; (8002e48 <Gauge_loading+0x90>)
 8002e12:	480c      	ldr	r0, [pc, #48]	; (8002e44 <Gauge_loading+0x8c>)
 8002e14:	f012 fe1a 	bl	8015a4c <u8g2_SetFont>
	u8g2_DrawUTF8(&u8g2, 40, 145, text);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2291      	movs	r2, #145	; 0x91
 8002e1c:	2128      	movs	r1, #40	; 0x28
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <Gauge_loading+0x8c>)
 8002e20:	f012 fd72 	bl	8015908 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <Gauge_loading+0x8c>)
 8002e26:	f011 ffd4 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <Gauge_loading+0x8c>)
 8002e2c:	f011 ff5e 	bl	8014cec <u8g2_ClearBuffer>
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	9999999a 	.word	0x9999999a
 8002e3c:	3ff99999 	.word	0x3ff99999
 8002e40:	080226a4 	.word	0x080226a4
 8002e44:	20001f54 	.word	0x20001f54
 8002e48:	08024974 	.word	0x08024974

08002e4c <Off_screen_func>:




void Off_screen_func(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	// static
	if(old_active_string==0xFF)
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <Off_screen_func+0x30>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2bff      	cmp	r3, #255	; 0xff
 8002e56:	d10e      	bne.n	8002e76 <Off_screen_func+0x2a>
	{
		DrawImage(img2, 0, 0, 0);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4808      	ldr	r0, [pc, #32]	; (8002e80 <Off_screen_func+0x34>)
 8002e60:	f7ff fea6 	bl	8002bb0 <DrawImage>
		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <Off_screen_func+0x38>)
 8002e66:	f011 ffb4 	bl	8014dd2 <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <Off_screen_func+0x38>)
 8002e6c:	f011 ff3e 	bl	8014cec <u8g2_ClearBuffer>
		old_active_string=0;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <Off_screen_func+0x30>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
	}
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000330 	.word	0x20000330
 8002e80:	08022a84 	.word	0x08022a84
 8002e84:	20001f54 	.word	0x20001f54

08002e88 <Blink_Edit_Parameter_timer>:

uint16_t blink_timer=0;
uint8_t blink_trig=0;
void Blink_Edit_Parameter_timer(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
	if(++blink_timer==200)blink_trig=1;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e9e:	d102      	bne.n	8002ea6 <Blink_Edit_Parameter_timer+0x1e>
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <Blink_Edit_Parameter_timer+0x44>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
	if(blink_timer>=500){blink_timer=blink_trig=0;}
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eae:	d305      	bcc.n	8002ebc <Blink_Edit_Parameter_timer+0x34>
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <Blink_Edit_Parameter_timer+0x44>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	801a      	strh	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200007ec 	.word	0x200007ec
 8002ecc:	200007ee 	.word	0x200007ee

08002ed0 <Blink_Edit_Parameter>:


void Blink_Edit_Parameter(uint8_t x, uint8_t y, const char* text, uint8_t param_num, uint8_t curr_param)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	603a      	str	r2, [r7, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	71bb      	strb	r3, [r7, #6]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	717b      	strb	r3, [r7, #5]
	if(param_num==curr_param)
 8002ee6:	797a      	ldrb	r2, [r7, #5]
 8002ee8:	7c3b      	ldrb	r3, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10c      	bne.n	8002f08 <Blink_Edit_Parameter+0x38>
	{if(blink_trig==1)u8g2_DrawUTF8(&u8g2, x, y, text);}
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <Blink_Edit_Parameter+0x50>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d110      	bne.n	8002f18 <Blink_Edit_Parameter+0x48>
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	b299      	uxth	r1, r3
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4808      	ldr	r0, [pc, #32]	; (8002f24 <Blink_Edit_Parameter+0x54>)
 8002f02:	f012 fd01 	bl	8015908 <u8g2_DrawUTF8>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
}
 8002f06:	e007      	b.n	8002f18 <Blink_Edit_Parameter+0x48>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	b299      	uxth	r1, r3
 8002f0c:	79bb      	ldrb	r3, [r7, #6]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4804      	ldr	r0, [pc, #16]	; (8002f24 <Blink_Edit_Parameter+0x54>)
 8002f14:	f012 fcf8 	bl	8015908 <u8g2_DrawUTF8>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200007ee 	.word	0x200007ee
 8002f24:	20001f54 	.word	0x20001f54

08002f28 <Test_screen_func>:




void Test_screen_func(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002f32:	4967      	ldr	r1, [pc, #412]	; (80030d0 <Test_screen_func+0x1a8>)
 8002f34:	4867      	ldr	r0, [pc, #412]	; (80030d4 <Test_screen_func+0x1ac>)
 8002f36:	f012 fd89 	bl	8015a4c <u8g2_SetFont>

	// Индикация напряжения
	for(i=0;i<6;i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	e019      	b.n	8002f74 <Test_screen_func+0x4c>
	{
		sprintf(RAM,"%+fmV", ADC_volt[i]);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <Test_screen_func+0x1b0>)
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	4963      	ldr	r1, [pc, #396]	; (80030dc <Test_screen_func+0x1b4>)
 8002f4e:	4864      	ldr	r0, [pc, #400]	; (80030e0 <Test_screen_func+0x1b8>)
 8002f50:	f01b f806 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 30+i*15, RAM);
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	331e      	adds	r3, #30
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <Test_screen_func+0x1b8>)
 8002f66:	2178      	movs	r1, #120	; 0x78
 8002f68:	485a      	ldr	r0, [pc, #360]	; (80030d4 <Test_screen_func+0x1ac>)
 8002f6a:	f012 fccd 	bl	8015908 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	3301      	adds	r3, #1
 8002f72:	71fb      	strb	r3, [r7, #7]
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d9e2      	bls.n	8002f40 <Test_screen_func+0x18>
	}

	// Индикация АЦП
	for(i=0;i<6;i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	e018      	b.n	8002fb2 <Test_screen_func+0x8a>
	{
		//sprintf(RAM,"%d %+d", i, ADC_channel_0[i]);
		sprintf(RAM,"%d %+d", i, ADC_middle[i]);
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4957      	ldr	r1, [pc, #348]	; (80030e4 <Test_screen_func+0x1bc>)
 8002f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f8a:	4957      	ldr	r1, [pc, #348]	; (80030e8 <Test_screen_func+0x1c0>)
 8002f8c:	4854      	ldr	r0, [pc, #336]	; (80030e0 <Test_screen_func+0x1b8>)
 8002f8e:	f01a ffe7 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 30+i*15, RAM);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	331e      	adds	r3, #30
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <Test_screen_func+0x1b8>)
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	484b      	ldr	r0, [pc, #300]	; (80030d4 <Test_screen_func+0x1ac>)
 8002fa8:	f012 fcae 	bl	8015908 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	71fb      	strb	r3, [r7, #7]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d9e3      	bls.n	8002f80 <Test_screen_func+0x58>
	}

	switch(adc_calibration_mode)
 8002fb8:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <Test_screen_func+0x1c4>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d014      	beq.n	8002fea <Test_screen_func+0xc2>
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	dc19      	bgt.n	8002ff8 <Test_screen_func+0xd0>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <Test_screen_func+0xa6>
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <Test_screen_func+0xb4>
 8002fcc:	e014      	b.n	8002ff8 <Test_screen_func+0xd0>
	{
		case 0: u8g2_DrawUTF8(&u8g2, 5, 130, "self_calibration"); break;
 8002fce:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <Test_screen_func+0x1c8>)
 8002fd0:	2282      	movs	r2, #130	; 0x82
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	483f      	ldr	r0, [pc, #252]	; (80030d4 <Test_screen_func+0x1ac>)
 8002fd6:	f012 fc97 	bl	8015908 <u8g2_DrawUTF8>
 8002fda:	e00d      	b.n	8002ff8 <Test_screen_func+0xd0>
		case 1: u8g2_DrawUTF8(&u8g2, 5, 130, "offset_calibration"); break;
 8002fdc:	4b45      	ldr	r3, [pc, #276]	; (80030f4 <Test_screen_func+0x1cc>)
 8002fde:	2282      	movs	r2, #130	; 0x82
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	483c      	ldr	r0, [pc, #240]	; (80030d4 <Test_screen_func+0x1ac>)
 8002fe4:	f012 fc90 	bl	8015908 <u8g2_DrawUTF8>
 8002fe8:	e006      	b.n	8002ff8 <Test_screen_func+0xd0>
		case 2: u8g2_DrawUTF8(&u8g2, 5, 130, "full_scale_calibration"); break;
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <Test_screen_func+0x1d0>)
 8002fec:	2282      	movs	r2, #130	; 0x82
 8002fee:	2105      	movs	r1, #5
 8002ff0:	4838      	ldr	r0, [pc, #224]	; (80030d4 <Test_screen_func+0x1ac>)
 8002ff2:	f012 fc89 	bl	8015908 <u8g2_DrawUTF8>
 8002ff6:	bf00      	nop
	}

	// �?ндикация PGA
	switch(PGA_GAIN)
 8002ff8:	4b40      	ldr	r3, [pc, #256]	; (80030fc <Test_screen_func+0x1d4>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d84a      	bhi.n	8003096 <Test_screen_func+0x16e>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <Test_screen_func+0xe0>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	0800302d 	.word	0x0800302d
 800300c:	08003037 	.word	0x08003037
 8003010:	08003043 	.word	0x08003043
 8003014:	0800304f 	.word	0x0800304f
 8003018:	0800305b 	.word	0x0800305b
 800301c:	08003067 	.word	0x08003067
 8003020:	08003073 	.word	0x08003073
 8003024:	0800307f 	.word	0x0800307f
 8003028:	0800308b 	.word	0x0800308b
	{
		case 0: sprintf(RAM,"PGA OFF"); break;
 800302c:	4934      	ldr	r1, [pc, #208]	; (8003100 <Test_screen_func+0x1d8>)
 800302e:	482c      	ldr	r0, [pc, #176]	; (80030e0 <Test_screen_func+0x1b8>)
 8003030:	f01a ff96 	bl	801df60 <siprintf>
 8003034:	e02f      	b.n	8003096 <Test_screen_func+0x16e>
		case 1: sprintf(RAM,"PGA %d", 1); break;
 8003036:	2201      	movs	r2, #1
 8003038:	4932      	ldr	r1, [pc, #200]	; (8003104 <Test_screen_func+0x1dc>)
 800303a:	4829      	ldr	r0, [pc, #164]	; (80030e0 <Test_screen_func+0x1b8>)
 800303c:	f01a ff90 	bl	801df60 <siprintf>
 8003040:	e029      	b.n	8003096 <Test_screen_func+0x16e>
		case 2: sprintf(RAM,"PGA %d", 2); break;
 8003042:	2202      	movs	r2, #2
 8003044:	492f      	ldr	r1, [pc, #188]	; (8003104 <Test_screen_func+0x1dc>)
 8003046:	4826      	ldr	r0, [pc, #152]	; (80030e0 <Test_screen_func+0x1b8>)
 8003048:	f01a ff8a 	bl	801df60 <siprintf>
 800304c:	e023      	b.n	8003096 <Test_screen_func+0x16e>
		case 3: sprintf(RAM,"PGA %d", 4); break;
 800304e:	2204      	movs	r2, #4
 8003050:	492c      	ldr	r1, [pc, #176]	; (8003104 <Test_screen_func+0x1dc>)
 8003052:	4823      	ldr	r0, [pc, #140]	; (80030e0 <Test_screen_func+0x1b8>)
 8003054:	f01a ff84 	bl	801df60 <siprintf>
 8003058:	e01d      	b.n	8003096 <Test_screen_func+0x16e>
		case 4: sprintf(RAM,"PGA %d", 8); break;
 800305a:	2208      	movs	r2, #8
 800305c:	4929      	ldr	r1, [pc, #164]	; (8003104 <Test_screen_func+0x1dc>)
 800305e:	4820      	ldr	r0, [pc, #128]	; (80030e0 <Test_screen_func+0x1b8>)
 8003060:	f01a ff7e 	bl	801df60 <siprintf>
 8003064:	e017      	b.n	8003096 <Test_screen_func+0x16e>
		case 5: sprintf(RAM,"PGA %d", 16); break;
 8003066:	2210      	movs	r2, #16
 8003068:	4926      	ldr	r1, [pc, #152]	; (8003104 <Test_screen_func+0x1dc>)
 800306a:	481d      	ldr	r0, [pc, #116]	; (80030e0 <Test_screen_func+0x1b8>)
 800306c:	f01a ff78 	bl	801df60 <siprintf>
 8003070:	e011      	b.n	8003096 <Test_screen_func+0x16e>
		case 6: sprintf(RAM,"PGA %d", 32); break;
 8003072:	2220      	movs	r2, #32
 8003074:	4923      	ldr	r1, [pc, #140]	; (8003104 <Test_screen_func+0x1dc>)
 8003076:	481a      	ldr	r0, [pc, #104]	; (80030e0 <Test_screen_func+0x1b8>)
 8003078:	f01a ff72 	bl	801df60 <siprintf>
 800307c:	e00b      	b.n	8003096 <Test_screen_func+0x16e>
		case 7: sprintf(RAM,"PGA %d", 64); break;
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	4920      	ldr	r1, [pc, #128]	; (8003104 <Test_screen_func+0x1dc>)
 8003082:	4817      	ldr	r0, [pc, #92]	; (80030e0 <Test_screen_func+0x1b8>)
 8003084:	f01a ff6c 	bl	801df60 <siprintf>
 8003088:	e005      	b.n	8003096 <Test_screen_func+0x16e>
		case 8: sprintf(RAM,"PGA %d", 128); break;
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	491d      	ldr	r1, [pc, #116]	; (8003104 <Test_screen_func+0x1dc>)
 800308e:	4814      	ldr	r0, [pc, #80]	; (80030e0 <Test_screen_func+0x1b8>)
 8003090:	f01a ff66 	bl	801df60 <siprintf>
 8003094:	bf00      	nop
	}
	u8g2_DrawUTF8(&u8g2, 5, 145, RAM);
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <Test_screen_func+0x1b8>)
 8003098:	2291      	movs	r2, #145	; 0x91
 800309a:	2105      	movs	r1, #5
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <Test_screen_func+0x1ac>)
 800309e:	f012 fc33 	bl	8015908 <u8g2_DrawUTF8>

	sprintf(RAM,"%f", Kdiv);
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <Test_screen_func+0x1e0>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	4918      	ldr	r1, [pc, #96]	; (800310c <Test_screen_func+0x1e4>)
 80030aa:	480d      	ldr	r0, [pc, #52]	; (80030e0 <Test_screen_func+0x1b8>)
 80030ac:	f01a ff58 	bl	801df60 <siprintf>
	u8g2_DrawUTF8(&u8g2, 120, 145, RAM);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <Test_screen_func+0x1b8>)
 80030b2:	2291      	movs	r2, #145	; 0x91
 80030b4:	2178      	movs	r1, #120	; 0x78
 80030b6:	4807      	ldr	r0, [pc, #28]	; (80030d4 <Test_screen_func+0x1ac>)
 80030b8:	f012 fc26 	bl	8015908 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 80030bc:	4805      	ldr	r0, [pc, #20]	; (80030d4 <Test_screen_func+0x1ac>)
 80030be:	f011 fe88 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80030c2:	4804      	ldr	r0, [pc, #16]	; (80030d4 <Test_screen_func+0x1ac>)
 80030c4:	f011 fe12 	bl	8014cec <u8g2_ClearBuffer>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	080273d0 	.word	0x080273d0
 80030d4:	20001f54 	.word	0x20001f54
 80030d8:	20005248 	.word	0x20005248
 80030dc:	08021cd8 	.word	0x08021cd8
 80030e0:	20002008 	.word	0x20002008
 80030e4:	20002070 	.word	0x20002070
 80030e8:	08021ce0 	.word	0x08021ce0
 80030ec:	20000837 	.word	0x20000837
 80030f0:	08021ce8 	.word	0x08021ce8
 80030f4:	08021cfc 	.word	0x08021cfc
 80030f8:	08021d10 	.word	0x08021d10
 80030fc:	20000072 	.word	0x20000072
 8003100:	08021d28 	.word	0x08021d28
 8003104:	08021d30 	.word	0x08021d30
 8003108:	20000068 	.word	0x20000068
 800310c:	08021d38 	.word	0x08021d38

08003110 <Display_process>:




void Display_process(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	switch(screen)
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <Display_process+0x98>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	3b01      	subs	r3, #1
 800311a:	2b0b      	cmp	r3, #11
 800311c:	d83e      	bhi.n	800319c <Display_process+0x8c>
 800311e:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <Display_process+0x14>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003155 	.word	0x08003155
 8003128:	0800315b 	.word	0x0800315b
 800312c:	08003161 	.word	0x08003161
 8003130:	08003167 	.word	0x08003167
 8003134:	0800316d 	.word	0x0800316d
 8003138:	08003173 	.word	0x08003173
 800313c:	08003179 	.word	0x08003179
 8003140:	0800317f 	.word	0x0800317f
 8003144:	08003185 	.word	0x08003185
 8003148:	0800318b 	.word	0x0800318b
 800314c:	08003191 	.word	0x08003191
 8003150:	08003197 	.word	0x08003197
	{
		case Main_screen: Main_screen_func(); break;
 8003154:	f014 fc76 	bl	8017a44 <Main_screen_func>
 8003158:	e020      	b.n	800319c <Display_process+0x8c>
		case Test_screen: Test_screen_func(); break;
 800315a:	f7ff fee5 	bl	8002f28 <Test_screen_func>
 800315e:	e01d      	b.n	800319c <Display_process+0x8c>
		case Off_screen: Off_screen_func(); break;
 8003160:	f7ff fe74 	bl	8002e4c <Off_screen_func>
 8003164:	e01a      	b.n	800319c <Display_process+0x8c>
		case Option_screen: Option_screen_func(); break;
 8003166:	f015 fd1f 	bl	8018ba8 <Option_screen_func>
 800316a:	e017      	b.n	800319c <Display_process+0x8c>
		case Display_options_screen: Display_options_screen_func(); break;
 800316c:	f014 f81a 	bl	80171a4 <Display_options_screen_func>
 8003170:	e014      	b.n	800319c <Display_process+0x8c>
		case ADC_options_screen: ADC_options_screen_func(); break;
 8003172:	f013 fbd5 	bl	8016920 <ADC_options_screen_func>
 8003176:	e011      	b.n	800319c <Display_process+0x8c>
		case Measure_options_screen: Measure_options_screen_func(); break;
 8003178:	f014 fa40 	bl	80175fc <Measure_options_screen_func>
 800317c:	e00e      	b.n	800319c <Display_process+0x8c>
		case Parameter_screen: Parameter_screen_func(); break;
 800317e:	f015 fc6f 	bl	8018a60 <Parameter_screen_func>
 8003182:	e00b      	b.n	800319c <Display_process+0x8c>
		case RTC_screen: RTC_screen_func(); break;
 8003184:	f014 ff30 	bl	8017fe8 <RTC_screen_func>
 8003188:	e008      	b.n	800319c <Display_process+0x8c>
		case Auto_Off_option_screen: Auto_Off_option_screen_func(); break;
 800318a:	f013 ff59 	bl	8017040 <Auto_Off_option_screen_func>
 800318e:	e005      	b.n	800319c <Display_process+0x8c>
		case About_options_screen: About_options_screen_func(); break;
 8003190:	f015 f942 	bl	8018418 <About_options_screen_func>
 8003194:	e002      	b.n	800319c <Display_process+0x8c>
		case Logging_options_screen: Logging_options_screen_func(); break;
 8003196:	f015 f9cd 	bl	8018534 <Logging_options_screen_func>
 800319a:	bf00      	nop
	}
	sleep(10);
 800319c:	200a      	movs	r0, #10
 800319e:	f000 f88d 	bl	80032bc <sleep>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000004c 	.word	0x2000004c

080031ac <wait_scheduler>:
unsigned int delay_count=0;
unsigned char RAM[100];
unsigned int j=0;

void wait_scheduler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
	if(tasks_timer[task_ready_cnt]==0)task=task_ready_cnt+1;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <wait_scheduler+0x44>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <wait_scheduler+0x48>)
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <wait_scheduler+0x20>
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <wait_scheduler+0x44>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <wait_scheduler+0x4c>)
 80031ca:	701a      	strb	r2, [r3, #0]
	if(++task_ready_cnt==num_of_tasks)task_ready_cnt=0;
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <wait_scheduler+0x44>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <wait_scheduler+0x44>)
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <wait_scheduler+0x44>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d102      	bne.n	80031e6 <wait_scheduler+0x3a>
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <wait_scheduler+0x44>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	200007f0 	.word	0x200007f0
 80031f4:	20001fe8 	.word	0x20001fe8
 80031f8:	200007ef 	.word	0x200007ef

080031fc <ELSPIRE_OS_KERNEL>:

void ELSPIRE_OS_KERNEL(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	new_task[0]=wait_scheduler;
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <ELSPIRE_OS_KERNEL+0x40>)
 8003202:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <ELSPIRE_OS_KERNEL+0x44>)
 8003204:	601a      	str	r2, [r3, #0]
	while (1) for(j=0;j<=num_of_tasks;j++)if(task==j)new_task[j]();
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <ELSPIRE_OS_KERNEL+0x48>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e011      	b.n	8003232 <ELSPIRE_OS_KERNEL+0x36>
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <ELSPIRE_OS_KERNEL+0x4c>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <ELSPIRE_OS_KERNEL+0x48>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d105      	bne.n	8003228 <ELSPIRE_OS_KERNEL+0x2c>
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <ELSPIRE_OS_KERNEL+0x48>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a06      	ldr	r2, [pc, #24]	; (800323c <ELSPIRE_OS_KERNEL+0x40>)
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	4798      	blx	r3
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <ELSPIRE_OS_KERNEL+0x48>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <ELSPIRE_OS_KERNEL+0x48>)
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <ELSPIRE_OS_KERNEL+0x48>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b08      	cmp	r3, #8
 8003238:	d9e9      	bls.n	800320e <ELSPIRE_OS_KERNEL+0x12>
 800323a:	e7e4      	b.n	8003206 <ELSPIRE_OS_KERNEL+0xa>
 800323c:	20001ecc 	.word	0x20001ecc
 8003240:	080031ad 	.word	0x080031ad
 8003244:	200007f8 	.word	0x200007f8
 8003248:	200007ef 	.word	0x200007ef

0800324c <ELSPIRE_OS_TIMER>:
	for(i=1;i<=num_of_tasks;i++)
	tasks_timer[i]=0xFFFF;
}

void ELSPIRE_OS_TIMER(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<num_of_tasks;i++)
 8003256:	2300      	movs	r3, #0
 8003258:	71fb      	strb	r3, [r7, #7]
 800325a:	e018      	b.n	800328e <ELSPIRE_OS_TIMER+0x42>
	{
		if(tasks_timer[i]>0)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <ELSPIRE_OS_TIMER+0x68>)
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00f      	beq.n	8003288 <ELSPIRE_OS_TIMER+0x3c>
		{
			if(tasks_timer[i]!=0xFFFF) tasks_timer[i]--;
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <ELSPIRE_OS_TIMER+0x68>)
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <ELSPIRE_OS_TIMER+0x3c>
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <ELSPIRE_OS_TIMER+0x68>)
 800327c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003280:	3a01      	subs	r2, #1
 8003282:	490c      	ldr	r1, [pc, #48]	; (80032b4 <ELSPIRE_OS_TIMER+0x68>)
 8003284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<num_of_tasks;i++)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	3301      	adds	r3, #1
 800328c:	71fb      	strb	r3, [r7, #7]
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	2b07      	cmp	r3, #7
 8003292:	d9e3      	bls.n	800325c <ELSPIRE_OS_TIMER+0x10>
		}
	}
	// Задержка
	if (delay_count > 0)
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <ELSPIRE_OS_TIMER+0x6c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <ELSPIRE_OS_TIMER+0x5a>
	{ delay_count--; }
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <ELSPIRE_OS_TIMER+0x6c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <ELSPIRE_OS_TIMER+0x6c>)
 80032a4:	6013      	str	r3, [r2, #0]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20001fe8 	.word	0x20001fe8
 80032b8:	200007f4 	.word	0x200007f4

080032bc <sleep>:

void sleep(unsigned int ms)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	tasks_timer[task-1] = ms;
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <sleep+0x28>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	4907      	ldr	r1, [pc, #28]	; (80032e8 <sleep+0x2c>)
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task = wait;
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <sleep+0x28>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200007ef 	.word	0x200007ef
 80032e8:	20001fe8 	.word	0x20001fe8

080032ec <delay_ms>:
	tasks_timer[task_num-1]=del;
	task=wait;
}

void delay_ms(unsigned int ms)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 80032f4:	4a07      	ldr	r2, [pc, #28]	; (8003314 <delay_ms+0x28>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
	while (delay_count){}
 80032fa:	bf00      	nop
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <delay_ms+0x28>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1fb      	bne.n	80032fc <delay_ms+0x10>
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200007f4 	.word	0x200007f4

08003318 <clear_buf>:
uint16_t ANSWER=0xFFFF;
uint8_t BSFlag=0;


void clear_buf(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<APP_RX_DATA_SIZE;i++)rx_buf[i]=0;
 800331e:	2300      	movs	r3, #0
 8003320:	80fb      	strh	r3, [r7, #6]
 8003322:	e006      	b.n	8003332 <clear_buf+0x1a>
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <clear_buf+0x3c>)
 8003328:	2100      	movs	r1, #0
 800332a:	54d1      	strb	r1, [r2, r3]
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	3301      	adds	r3, #1
 8003330:	80fb      	strh	r3, [r7, #6]
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d3f4      	bcc.n	8003324 <clear_buf+0xc>
	rxcntr=0;
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <clear_buf+0x40>)
 800333c:	2200      	movs	r2, #0
 800333e:	801a      	strh	r2, [r3, #0]
	ANSWER=0xFFFF;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <clear_buf+0x44>)
 8003342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003346:	801a      	strh	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	20005ae4 	.word	0x20005ae4
 8003358:	2000084a 	.word	0x2000084a
 800335c:	2000015e 	.word	0x2000015e

08003360 <scan_num32>:

int64_t scan_num32(uint8_t offset)
{
 8003360:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003364:	b089      	sub	sp, #36	; 0x24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]
	int64_t res=0;
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t i=0,sign=0;
 8003378:	2300      	movs	r3, #0
 800337a:	75fb      	strb	r3, [r7, #23]
 800337c:	2300      	movs	r3, #0
 800337e:	75bb      	strb	r3, [r7, #22]
	if(rx_buf[offset]=='-')sign=1;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	4a34      	ldr	r2, [pc, #208]	; (8003454 <scan_num32+0xf4>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
 8003386:	2b2d      	cmp	r3, #45	; 0x2d
 8003388:	d101      	bne.n	800338e <scan_num32+0x2e>
 800338a:	2301      	movs	r3, #1
 800338c:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<15;i++){
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
 8003392:	e049      	b.n	8003428 <scan_num32+0xc8>
	if((rx_buf[offset+i+sign]>=48)&&(rx_buf[offset+i+sign]<=58))res=(rx_buf[offset+i+sign]-48)+res*10;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	441a      	add	r2, r3
 800339a:	7dbb      	ldrb	r3, [r7, #22]
 800339c:	4413      	add	r3, r2
 800339e:	4a2d      	ldr	r2, [pc, #180]	; (8003454 <scan_num32+0xf4>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	2b2f      	cmp	r3, #47	; 0x2f
 80033a4:	d934      	bls.n	8003410 <scan_num32+0xb0>
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	441a      	add	r2, r3
 80033ac:	7dbb      	ldrb	r3, [r7, #22]
 80033ae:	4413      	add	r3, r2
 80033b0:	4a28      	ldr	r2, [pc, #160]	; (8003454 <scan_num32+0xf4>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	2b3a      	cmp	r3, #58	; 0x3a
 80033b6:	d82b      	bhi.n	8003410 <scan_num32+0xb0>
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	441a      	add	r2, r3
 80033be:	7dbb      	ldrb	r3, [r7, #22]
 80033c0:	4413      	add	r3, r2
 80033c2:	4a24      	ldr	r2, [pc, #144]	; (8003454 <scan_num32+0xf4>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	3b30      	subs	r3, #48	; 0x30
 80033c8:	4698      	mov	r8, r3
 80033ca:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80033ce:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f04f 0000 	mov.w	r0, #0
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	0099      	lsls	r1, r3, #2
 80033e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80033e4:	0090      	lsls	r0, r2, #2
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	1912      	adds	r2, r2, r4
 80033ec:	eb45 0303 	adc.w	r3, r5, r3
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	6039      	str	r1, [r7, #0]
 80033f4:	415b      	adcs	r3, r3
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fc:	eb18 0a02 	adds.w	sl, r8, r2
 8003400:	eb49 0b03 	adc.w	fp, r9, r3
 8003404:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i=0;i<15;i++){
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	3301      	adds	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
 800340e:	e00b      	b.n	8003428 <scan_num32+0xc8>
	else {if(sign==1)return -res; else return res;}}
 8003410:	7dbb      	ldrb	r3, [r7, #22]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <scan_num32+0xc2>
 8003416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800341a:	4252      	negs	r2, r2
 800341c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003420:	e010      	b.n	8003444 <scan_num32+0xe4>
 8003422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003426:	e00d      	b.n	8003444 <scan_num32+0xe4>
	for(i=0;i<15;i++){
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b0e      	cmp	r3, #14
 800342c:	d9b2      	bls.n	8003394 <scan_num32+0x34>
	if(sign==1)return -res;
 800342e:	7dbb      	ldrb	r3, [r7, #22]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <scan_num32+0xe0>
 8003434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003438:	4252      	negs	r2, r2
 800343a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800343e:	e001      	b.n	8003444 <scan_num32+0xe4>
	else return res;
 8003440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20005ae4 	.word	0x20005ae4

08003458 <scan_float>:

float scan_float(uint8_t offset)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
//	if(devider==0)devider=1;
//	RES = (float)res32/devider;
//	if(sign==1) return (float)-RES;
//	else return RES;

	return scan_double(offset, (uint8_t*)rx_buf);
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	b29b      	uxth	r3, r3
 8003466:	4909      	ldr	r1, [pc, #36]	; (800348c <scan_float+0x34>)
 8003468:	4618      	mov	r0, r3
 800346a:	f002 f839 	bl	80054e0 <scan_double>
 800346e:	ec53 2b10 	vmov	r2, r3, d0
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fbc7 	bl	8000c08 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	ee07 3a90 	vmov	s15, r3
}
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20005ae4 	.word	0x20005ae4

08003490 <scan_num16>:

uint16_t scan_num16(uint8_t offset)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0,i=0;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	2300      	movs	r3, #0
 80034a0:	73bb      	strb	r3, [r7, #14]
	if((rx_buf[offset]=='A')&&(rx_buf[offset+1]=='L')&&(rx_buf[offset+2]=='L'))return 0xFFFF;
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <scan_num16+0xa0>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	2b41      	cmp	r3, #65	; 0x41
 80034aa:	d10e      	bne.n	80034ca <scan_num16+0x3a>
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	3301      	adds	r3, #1
 80034b0:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <scan_num16+0xa0>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	2b4c      	cmp	r3, #76	; 0x4c
 80034b6:	d108      	bne.n	80034ca <scan_num16+0x3a>
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	3302      	adds	r3, #2
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <scan_num16+0xa0>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	2b4c      	cmp	r3, #76	; 0x4c
 80034c2:	d102      	bne.n	80034ca <scan_num16+0x3a>
 80034c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c8:	e02b      	b.n	8003522 <scan_num16+0x92>
	for(i=0;i<10;i++){
 80034ca:	2300      	movs	r3, #0
 80034cc:	73bb      	strb	r3, [r7, #14]
 80034ce:	e023      	b.n	8003518 <scan_num16+0x88>
	if((rx_buf[offset+i]>=48)&&(rx_buf[offset+i]<=58))res=(rx_buf[offset+i]-48)+res*10;
 80034d0:	79fa      	ldrb	r2, [r7, #7]
 80034d2:	7bbb      	ldrb	r3, [r7, #14]
 80034d4:	4413      	add	r3, r2
 80034d6:	4a16      	ldr	r2, [pc, #88]	; (8003530 <scan_num16+0xa0>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	2b2f      	cmp	r3, #47	; 0x2f
 80034dc:	d919      	bls.n	8003512 <scan_num16+0x82>
 80034de:	79fa      	ldrb	r2, [r7, #7]
 80034e0:	7bbb      	ldrb	r3, [r7, #14]
 80034e2:	4413      	add	r3, r2
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <scan_num16+0xa0>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	2b3a      	cmp	r3, #58	; 0x3a
 80034ea:	d812      	bhi.n	8003512 <scan_num16+0x82>
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	7bbb      	ldrb	r3, [r7, #14]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <scan_num16+0xa0>)
 80034f4:	5cd2      	ldrb	r2, [r2, r3]
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	4619      	mov	r1, r3
 80034fa:	0089      	lsls	r1, r1, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4413      	add	r3, r2
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3b30      	subs	r3, #48	; 0x30
 8003508:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<10;i++){
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	3301      	adds	r3, #1
 800350e:	73bb      	strb	r3, [r7, #14]
 8003510:	e002      	b.n	8003518 <scan_num16+0x88>
	else return res;}
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	b29b      	uxth	r3, r3
 8003516:	e004      	b.n	8003522 <scan_num16+0x92>
	for(i=0;i<10;i++){
 8003518:	7bbb      	ldrb	r3, [r7, #14]
 800351a:	2b09      	cmp	r3, #9
 800351c:	d9d8      	bls.n	80034d0 <scan_num16+0x40>
	return res;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	b29b      	uxth	r3, r3
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20005ae4 	.word	0x20005ae4

08003534 <OneCommParseCycle>:

void OneCommParseCycle(uint8_t com, const char* compare, uint8_t offset, uint8_t len)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6039      	str	r1, [r7, #0]
 800353c:	4611      	mov	r1, r2
 800353e:	461a      	mov	r2, r3
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	460b      	mov	r3, r1
 8003546:	71bb      	strb	r3, [r7, #6]
 8003548:	4613      	mov	r3, r2
 800354a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	if(ANSWER==0xFFFF){
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <OneCommParseCycle+0x70>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003554:	4293      	cmp	r3, r2
 8003556:	d11f      	bne.n	8003598 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	e018      	b.n	8003590 <OneCommParseCycle+0x5c>
	{
		if(rx_buf[i+offset]==compare[i]) ANSWER = com;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	79bb      	ldrb	r3, [r7, #6]
 8003562:	4413      	add	r3, r2
 8003564:	4a10      	ldr	r2, [pc, #64]	; (80035a8 <OneCommParseCycle+0x74>)
 8003566:	5cd2      	ldrb	r2, [r2, r3]
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	6839      	ldr	r1, [r7, #0]
 800356c:	440b      	add	r3, r1
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d104      	bne.n	800357e <OneCommParseCycle+0x4a>
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	b29a      	uxth	r2, r3
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <OneCommParseCycle+0x70>)
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	e005      	b.n	800358a <OneCommParseCycle+0x56>
		else {ANSWER=0xFFFF; break;}
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <OneCommParseCycle+0x70>)
 8003580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	bf00      	nop
	}}
}
 8003588:	e006      	b.n	8003598 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	3301      	adds	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	797b      	ldrb	r3, [r7, #5]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3e2      	bcc.n	800355e <OneCommParseCycle+0x2a>
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	2000015e 	.word	0x2000015e
 80035a8:	20005ae4 	.word	0x20005ae4

080035ac <parser>:

uint8_t parser(uint8_t offset)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	ANSWER=0xFFFF;
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <parser+0x90>)
 80035b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035bc:	801a      	strh	r2, [r3, #0]
	// Commands
	for(i=2;i<NUMBER_OF_COMMANDS;i++) OneCommParseCycle(i, COMMAND_STRING[i], offset, COMMAND_NUM_OF_SYM[i]);
 80035be:	2302      	movs	r3, #2
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e00d      	b.n	80035e0 <parser+0x34>
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <parser+0x94>)
 80035c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <parser+0x98>)
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	7bf8      	ldrb	r0, [r7, #15]
 80035d6:	f7ff ffad 	bl	8003534 <OneCommParseCycle>
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	3301      	adds	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b0d      	cmp	r3, #13
 80035e4:	d9ee      	bls.n	80035c4 <parser+0x18>
	// Variables
	for(i=0;i<NUMBER_OF_VARIABLES;i++) OneCommParseCycle(i, GV_STRING[i], offset, GV_NUM_OF_SYM[i]);
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	e00d      	b.n	8003608 <parser+0x5c>
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <parser+0x9c>)
 80035f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <parser+0xa0>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	79fa      	ldrb	r2, [r7, #7]
 80035fc:	7bf8      	ldrb	r0, [r7, #15]
 80035fe:	f7ff ff99 	bl	8003534 <OneCommParseCycle>
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	3301      	adds	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b0e      	cmp	r3, #14
 800360c:	d9ee      	bls.n	80035ec <parser+0x40>
	// UNKNOWING_CMD
	if((rx_buf[offset]!=0)&&(ANSWER==0xFFFF))ANSWER=0xFFFE;
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <parser+0xa4>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <parser+0x80>
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <parser+0x90>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <parser+0x80>
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <parser+0x90>)
 8003626:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800362a:	801a      	strh	r2, [r3, #0]
	return ANSWER;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <parser+0x90>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2000015e 	.word	0x2000015e
 8003640:	20000124 	.word	0x20000124
 8003644:	08023d88 	.word	0x08023d88
 8003648:	200000c8 	.word	0x200000c8
 800364c:	08023d48 	.word	0x08023d48
 8003650:	20005ae4 	.word	0x20005ae4

08003654 <Set_uint8>:


void Set_uint8(uint8_t*arr, uint8_t offset)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff14 	bl	8003490 <scan_num16>
 8003668:	4603      	mov	r3, r0
 800366a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800366c:	2300      	movs	r3, #0
 800366e:	82fb      	strh	r3, [r7, #22]
 8003670:	e019      	b.n	80036a6 <Set_uint8+0x52>
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	8afb      	ldrh	r3, [r7, #22]
 8003676:	4413      	add	r3, r2
 8003678:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <Set_uint8+0x98>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	2b20      	cmp	r3, #32
 800367e:	d006      	beq.n	800368e <Set_uint8+0x3a>
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	4413      	add	r3, r2
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <Set_uint8+0x98>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	2b3d      	cmp	r3, #61	; 0x3d
 800368c:	d108      	bne.n	80036a0 <Set_uint8+0x4c>
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	b29a      	uxth	r2, r3
 8003692:	8afb      	ldrh	r3, [r7, #22]
 8003694:	4413      	add	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	82bb      	strh	r3, [r7, #20]
 800369c:	2364      	movs	r3, #100	; 0x64
 800369e:	82fb      	strh	r3, [r7, #22]
 80036a0:	8afb      	ldrh	r3, [r7, #22]
 80036a2:	3301      	adds	r3, #1
 80036a4:	82fb      	strh	r3, [r7, #22]
 80036a6:	8afb      	ldrh	r3, [r7, #22]
 80036a8:	2b63      	cmp	r3, #99	; 0x63
 80036aa:	d9e2      	bls.n	8003672 <Set_uint8+0x1e>
	data=scan_num32(equal);
 80036ac:	8abb      	ldrh	r3, [r7, #20]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe55 	bl	8003360 <scan_num32>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4613      	mov	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
	if(data>255)CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2bff      	cmp	r3, #255	; 0xff
 80036c2:	d904      	bls.n	80036ce <Set_uint8+0x7a>
 80036c4:	2117      	movs	r1, #23
 80036c6:	480a      	ldr	r0, [pc, #40]	; (80036f0 <Set_uint8+0x9c>)
 80036c8:	f015 ffd4 	bl	8019674 <CDC_Transmit_FS>
	else
	{
		arr[index]=data;
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}
 80036cc:	e009      	b.n	80036e2 <Set_uint8+0x8e>
		arr[index]=data;
 80036ce:	8a7b      	ldrh	r3, [r7, #18]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80036da:	2104      	movs	r1, #4
 80036dc:	4805      	ldr	r0, [pc, #20]	; (80036f4 <Set_uint8+0xa0>)
 80036de:	f015 ffc9 	bl	8019674 <CDC_Transmit_FS>
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20005ae4 	.word	0x20005ae4
 80036f0:	08021edc 	.word	0x08021edc
 80036f4:	08021ef4 	.word	0x08021ef4

080036f8 <Set_int8>:
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}

void Set_int8(int8_t*arr, uint8_t offset)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fec2 	bl	8003490 <scan_num16>
 800370c:	4603      	mov	r3, r0
 800370e:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003710:	2300      	movs	r3, #0
 8003712:	82fb      	strh	r3, [r7, #22]
 8003714:	e019      	b.n	800374a <Set_int8+0x52>
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	8afb      	ldrh	r3, [r7, #22]
 800371a:	4413      	add	r3, r2
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <Set_int8+0xa0>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	2b20      	cmp	r3, #32
 8003722:	d006      	beq.n	8003732 <Set_int8+0x3a>
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	4413      	add	r3, r2
 800372a:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <Set_int8+0xa0>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	2b3d      	cmp	r3, #61	; 0x3d
 8003730:	d108      	bne.n	8003744 <Set_int8+0x4c>
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	b29a      	uxth	r2, r3
 8003736:	8afb      	ldrh	r3, [r7, #22]
 8003738:	4413      	add	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	82bb      	strh	r3, [r7, #20]
 8003740:	2364      	movs	r3, #100	; 0x64
 8003742:	82fb      	strh	r3, [r7, #22]
 8003744:	8afb      	ldrh	r3, [r7, #22]
 8003746:	3301      	adds	r3, #1
 8003748:	82fb      	strh	r3, [r7, #22]
 800374a:	8afb      	ldrh	r3, [r7, #22]
 800374c:	2b63      	cmp	r3, #99	; 0x63
 800374e:	d9e2      	bls.n	8003716 <Set_int8+0x1e>
	data=scan_num32(equal);
 8003750:	8abb      	ldrh	r3, [r7, #20]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fe03 	bl	8003360 <scan_num32>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4613      	mov	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
	if((data>127)||(data<-127))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b7f      	cmp	r3, #127	; 0x7f
 8003766:	d803      	bhi.n	8003770 <Set_int8+0x78>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800376e:	d804      	bhi.n	800377a <Set_int8+0x82>
 8003770:	2117      	movs	r1, #23
 8003772:	480a      	ldr	r0, [pc, #40]	; (800379c <Set_int8+0xa4>)
 8003774:	f015 ff7e 	bl	8019674 <CDC_Transmit_FS>
 8003778:	e00a      	b.n	8003790 <Set_int8+0x98>
	else
	{
		arr[index]=data;
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	b252      	sxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003786:	2104      	movs	r1, #4
 8003788:	4805      	ldr	r0, [pc, #20]	; (80037a0 <Set_int8+0xa8>)
 800378a:	f015 ff73 	bl	8019674 <CDC_Transmit_FS>
	}
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20005ae4 	.word	0x20005ae4
 800379c:	08021edc 	.word	0x08021edc
 80037a0:	08021ef4 	.word	0x08021ef4

080037a4 <Set_int16>:

void Set_int16(int16_t*arr, uint8_t offset)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fe6c 	bl	8003490 <scan_num16>
 80037b8:	4603      	mov	r3, r0
 80037ba:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80037bc:	2300      	movs	r3, #0
 80037be:	82fb      	strh	r3, [r7, #22]
 80037c0:	e019      	b.n	80037f6 <Set_int16+0x52>
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	8afb      	ldrh	r3, [r7, #22]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <Set_int16+0xa4>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d006      	beq.n	80037de <Set_int16+0x3a>
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	8afb      	ldrh	r3, [r7, #22]
 80037d4:	4413      	add	r3, r2
 80037d6:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <Set_int16+0xa4>)
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	2b3d      	cmp	r3, #61	; 0x3d
 80037dc:	d108      	bne.n	80037f0 <Set_int16+0x4c>
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	8afb      	ldrh	r3, [r7, #22]
 80037e4:	4413      	add	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	82bb      	strh	r3, [r7, #20]
 80037ec:	2364      	movs	r3, #100	; 0x64
 80037ee:	82fb      	strh	r3, [r7, #22]
 80037f0:	8afb      	ldrh	r3, [r7, #22]
 80037f2:	3301      	adds	r3, #1
 80037f4:	82fb      	strh	r3, [r7, #22]
 80037f6:	8afb      	ldrh	r3, [r7, #22]
 80037f8:	2b63      	cmp	r3, #99	; 0x63
 80037fa:	d9e2      	bls.n	80037c2 <Set_int16+0x1e>
	data=scan_num32(equal);
 80037fc:	8abb      	ldrh	r3, [r7, #20]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fdad 	bl	8003360 <scan_num32>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4613      	mov	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
	if((data>32767)||(data<-32767))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d203      	bcs.n	800381e <Set_int16+0x7a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800381c:	d804      	bhi.n	8003828 <Set_int16+0x84>
 800381e:	2117      	movs	r1, #23
 8003820:	480a      	ldr	r0, [pc, #40]	; (800384c <Set_int16+0xa8>)
 8003822:	f015 ff27 	bl	8019674 <CDC_Transmit_FS>
 8003826:	e00b      	b.n	8003840 <Set_int16+0x9c>
	else
	{
		arr[index]=data;
 8003828:	8a7b      	ldrh	r3, [r7, #18]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	b212      	sxth	r2, r2
 8003834:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003836:	2104      	movs	r1, #4
 8003838:	4805      	ldr	r0, [pc, #20]	; (8003850 <Set_int16+0xac>)
 800383a:	f015 ff1b 	bl	8019674 <CDC_Transmit_FS>
	}
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20005ae4 	.word	0x20005ae4
 800384c:	08021edc 	.word	0x08021edc
 8003850:	08021ef4 	.word	0x08021ef4

08003854 <Set_int32>:

void Set_int32(int32_t*arr, uint8_t offset)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int64_t data;
	index=scan_num16(offset);
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fe14 	bl	8003490 <scan_num16>
 8003868:	4603      	mov	r3, r0
 800386a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800386c:	2300      	movs	r3, #0
 800386e:	82fb      	strh	r3, [r7, #22]
 8003870:	e019      	b.n	80038a6 <Set_int32+0x52>
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	8afb      	ldrh	r3, [r7, #22]
 8003876:	4413      	add	r3, r2
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <Set_int32+0xb8>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	2b20      	cmp	r3, #32
 800387e:	d006      	beq.n	800388e <Set_int32+0x3a>
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	4413      	add	r3, r2
 8003886:	4a21      	ldr	r2, [pc, #132]	; (800390c <Set_int32+0xb8>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	2b3d      	cmp	r3, #61	; 0x3d
 800388c:	d108      	bne.n	80038a0 <Set_int32+0x4c>
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	b29a      	uxth	r2, r3
 8003892:	8afb      	ldrh	r3, [r7, #22]
 8003894:	4413      	add	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	82bb      	strh	r3, [r7, #20]
 800389c:	2364      	movs	r3, #100	; 0x64
 800389e:	82fb      	strh	r3, [r7, #22]
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	3301      	adds	r3, #1
 80038a4:	82fb      	strh	r3, [r7, #22]
 80038a6:	8afb      	ldrh	r3, [r7, #22]
 80038a8:	2b63      	cmp	r3, #99	; 0x63
 80038aa:	d9e2      	bls.n	8003872 <Set_int32+0x1e>
	data=scan_num32(equal);
 80038ac:	8abb      	ldrh	r3, [r7, #20]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fd55 	bl	8003360 <scan_num32>
 80038b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if((data>2147483647)||(data<-2147483647))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80038ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	4290      	cmp	r0, r2
 80038c8:	eb71 0303 	sbcs.w	r3, r1, r3
 80038cc:	db09      	blt.n	80038e2 <Set_int32+0x8e>
 80038ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80038d6:	f04f 31ff 	mov.w	r1, #4294967295
 80038da:	4290      	cmp	r0, r2
 80038dc:	eb71 0303 	sbcs.w	r3, r1, r3
 80038e0:	db04      	blt.n	80038ec <Set_int32+0x98>
 80038e2:	2117      	movs	r1, #23
 80038e4:	480a      	ldr	r0, [pc, #40]	; (8003910 <Set_int32+0xbc>)
 80038e6:	f015 fec5 	bl	8019674 <CDC_Transmit_FS>
 80038ea:	e00a      	b.n	8003902 <Set_int32+0xae>
	else
	{
		arr[index]=(int32_t)data;
 80038ec:	8a7b      	ldrh	r3, [r7, #18]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80038f8:	2104      	movs	r1, #4
 80038fa:	4806      	ldr	r0, [pc, #24]	; (8003914 <Set_int32+0xc0>)
 80038fc:	f015 feba 	bl	8019674 <CDC_Transmit_FS>
	}

//	arr[index]=data;
//	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20005ae4 	.word	0x20005ae4
 8003910:	08021edc 	.word	0x08021edc
 8003914:	08021ef4 	.word	0x08021ef4

08003918 <Set_uint32>:

void Set_uint32(uint32_t*arr, uint8_t offset)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int32_t data;
	index=scan_num16(offset);
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fdb2 	bl	8003490 <scan_num16>
 800392c:	4603      	mov	r3, r0
 800392e:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003930:	2300      	movs	r3, #0
 8003932:	82fb      	strh	r3, [r7, #22]
 8003934:	e019      	b.n	800396a <Set_uint32+0x52>
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	8afb      	ldrh	r3, [r7, #22]
 800393a:	4413      	add	r3, r2
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <Set_uint32+0x88>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	2b20      	cmp	r3, #32
 8003942:	d006      	beq.n	8003952 <Set_uint32+0x3a>
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	8afb      	ldrh	r3, [r7, #22]
 8003948:	4413      	add	r3, r2
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <Set_uint32+0x88>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	2b3d      	cmp	r3, #61	; 0x3d
 8003950:	d108      	bne.n	8003964 <Set_uint32+0x4c>
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	b29a      	uxth	r2, r3
 8003956:	8afb      	ldrh	r3, [r7, #22]
 8003958:	4413      	add	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	3301      	adds	r3, #1
 800395e:	82bb      	strh	r3, [r7, #20]
 8003960:	2364      	movs	r3, #100	; 0x64
 8003962:	82fb      	strh	r3, [r7, #22]
 8003964:	8afb      	ldrh	r3, [r7, #22]
 8003966:	3301      	adds	r3, #1
 8003968:	82fb      	strh	r3, [r7, #22]
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	2b63      	cmp	r3, #99	; 0x63
 800396e:	d9e2      	bls.n	8003936 <Set_uint32+0x1e>
	data=scan_num32(equal);
 8003970:	8abb      	ldrh	r3, [r7, #20]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fcf3 	bl	8003360 <scan_num32>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4613      	mov	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
	arr[index]=data;
 8003982:	8a7b      	ldrh	r3, [r7, #18]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800398e:	2104      	movs	r1, #4
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <Set_uint32+0x8c>)
 8003992:	f015 fe6f 	bl	8019674 <CDC_Transmit_FS>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20005ae4 	.word	0x20005ae4
 80039a4:	08021ef4 	.word	0x08021ef4

080039a8 <Set_float>:

void Set_float(float*arr, uint8_t offset)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	float data;
	index=scan_num16(offset);
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fd6a 	bl	8003490 <scan_num16>
 80039bc:	4603      	mov	r3, r0
 80039be:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80039c0:	2300      	movs	r3, #0
 80039c2:	82fb      	strh	r3, [r7, #22]
 80039c4:	e019      	b.n	80039fa <Set_float+0x52>
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	8afb      	ldrh	r3, [r7, #22]
 80039ca:	4413      	add	r3, r2
 80039cc:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <Set_float+0x94>)
 80039ce:	5cd3      	ldrb	r3, [r2, r3]
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d006      	beq.n	80039e2 <Set_float+0x3a>
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	4413      	add	r3, r2
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <Set_float+0x94>)
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
 80039de:	2b3d      	cmp	r3, #61	; 0x3d
 80039e0:	d108      	bne.n	80039f4 <Set_float+0x4c>
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	4413      	add	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	82bb      	strh	r3, [r7, #20]
 80039f0:	2364      	movs	r3, #100	; 0x64
 80039f2:	82fb      	strh	r3, [r7, #22]
 80039f4:	8afb      	ldrh	r3, [r7, #22]
 80039f6:	3301      	adds	r3, #1
 80039f8:	82fb      	strh	r3, [r7, #22]
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	2b63      	cmp	r3, #99	; 0x63
 80039fe:	d9e2      	bls.n	80039c6 <Set_float+0x1e>
	data=scan_float(equal);
 8003a00:	8abb      	ldrh	r3, [r7, #20]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fd27 	bl	8003458 <scan_float>
 8003a0a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(!BSFlag){
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <Set_float+0x98>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <Set_float+0x84>
	arr[index]=data;
 8003a16:	8a7b      	ldrh	r3, [r7, #18]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);}
 8003a22:	2104      	movs	r1, #4
 8003a24:	4807      	ldr	r0, [pc, #28]	; (8003a44 <Set_float+0x9c>)
 8003a26:	f015 fe25 	bl	8019674 <CDC_Transmit_FS>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
}
 8003a2a:	e003      	b.n	8003a34 <Set_float+0x8c>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003a2c:	2117      	movs	r1, #23
 8003a2e:	4806      	ldr	r0, [pc, #24]	; (8003a48 <Set_float+0xa0>)
 8003a30:	f015 fe20 	bl	8019674 <CDC_Transmit_FS>
}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20005ae4 	.word	0x20005ae4
 8003a40:	2000084c 	.word	0x2000084c
 8003a44:	08021ef4 	.word	0x08021ef4
 8003a48:	08021edc 	.word	0x08021edc

08003a4c <Get_uint8>:




void Get_uint8(uint8_t*arr, uint8_t offset, uint16_t size)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fd14 	bl	8003490 <scan_num16>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003a6c:	89bb      	ldrh	r3, [r7, #12]
 8003a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d132      	bne.n	8003adc <Get_uint8+0x90>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003a76:	210e      	movs	r1, #14
 8003a78:	482a      	ldr	r0, [pc, #168]	; (8003b24 <Get_uint8+0xd8>)
 8003a7a:	f015 fdfb 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	81fb      	strh	r3, [r7, #14]
 8003a82:	e022      	b.n	8003aca <Get_uint8+0x7e>
		{
			if(!CSV_format)sprintf(RAM, "%d\t", arr[i]);
 8003a84:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <Get_uint8+0xdc>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <Get_uint8+0x54>
 8003a8c:	89fb      	ldrh	r3, [r7, #14]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	4925      	ldr	r1, [pc, #148]	; (8003b2c <Get_uint8+0xe0>)
 8003a98:	4825      	ldr	r0, [pc, #148]	; (8003b30 <Get_uint8+0xe4>)
 8003a9a:	f01a fa61 	bl	801df60 <siprintf>
 8003a9e:	e008      	b.n	8003ab2 <Get_uint8+0x66>
			else sprintf(RAM, "%d;", arr[i]);
 8003aa0:	89fb      	ldrh	r3, [r7, #14]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4922      	ldr	r1, [pc, #136]	; (8003b34 <Get_uint8+0xe8>)
 8003aac:	4820      	ldr	r0, [pc, #128]	; (8003b30 <Get_uint8+0xe4>)
 8003aae:	f01a fa57 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003ab2:	481f      	ldr	r0, [pc, #124]	; (8003b30 <Get_uint8+0xe4>)
 8003ab4:	f7fc fb9c 	bl	80001f0 <strlen>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	481c      	ldr	r0, [pc, #112]	; (8003b30 <Get_uint8+0xe4>)
 8003ac0:	f015 fdd8 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003ac4:	89fb      	ldrh	r3, [r7, #14]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	81fb      	strh	r3, [r7, #14]
 8003aca:	89fa      	ldrh	r2, [r7, #14]
 8003acc:	883b      	ldrh	r3, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d3d8      	bcc.n	8003a84 <Get_uint8+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4818      	ldr	r0, [pc, #96]	; (8003b38 <Get_uint8+0xec>)
 8003ad6:	f015 fdcd 	bl	8019674 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%d\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003ada:	e01e      	b.n	8003b1a <Get_uint8+0xce>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003adc:	883a      	ldrh	r2, [r7, #0]
 8003ade:	89bb      	ldrh	r3, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d808      	bhi.n	8003af6 <Get_uint8+0xaa>
 8003ae4:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <Get_uint8+0xf0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2209      	movs	r2, #9
 8003aea:	b292      	uxth	r2, r2
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f015 fdc0 	bl	8019674 <CDC_Transmit_FS>
}
 8003af4:	e011      	b.n	8003b1a <Get_uint8+0xce>
			sprintf(RAM, "%d\r\n", arr[index]);
 8003af6:	89bb      	ldrh	r3, [r7, #12]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	490f      	ldr	r1, [pc, #60]	; (8003b40 <Get_uint8+0xf4>)
 8003b02:	480b      	ldr	r0, [pc, #44]	; (8003b30 <Get_uint8+0xe4>)
 8003b04:	f01a fa2c 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b08:	4809      	ldr	r0, [pc, #36]	; (8003b30 <Get_uint8+0xe4>)
 8003b0a:	f7fc fb71 	bl	80001f0 <strlen>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	4806      	ldr	r0, [pc, #24]	; (8003b30 <Get_uint8+0xe4>)
 8003b16:	f015 fdad 	bl	8019674 <CDC_Transmit_FS>
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	08021efc 	.word	0x08021efc
 8003b28:	20000847 	.word	0x20000847
 8003b2c:	08021f0c 	.word	0x08021f0c
 8003b30:	20002008 	.word	0x20002008
 8003b34:	08021f10 	.word	0x08021f10
 8003b38:	08021e78 	.word	0x08021e78
 8003b3c:	20000124 	.word	0x20000124
 8003b40:	08021f14 	.word	0x08021f14

08003b44 <Get_int32>:


void Get_int32(int32_t*arr, uint8_t offset, uint16_t size)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
 8003b50:	4613      	mov	r3, r2
 8003b52:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003b54:	2300      	movs	r3, #0
 8003b56:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fc98 	bl	8003490 <scan_num16>
 8003b60:	4603      	mov	r3, r0
 8003b62:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003b64:	89bb      	ldrh	r3, [r7, #12]
 8003b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d134      	bne.n	8003bd8 <Get_int32+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003b6e:	210e      	movs	r1, #14
 8003b70:	482b      	ldr	r0, [pc, #172]	; (8003c20 <Get_int32+0xdc>)
 8003b72:	f015 fd7f 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	81fb      	strh	r3, [r7, #14]
 8003b7a:	e024      	b.n	8003bc6 <Get_int32+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%i\t", arr[i]);
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <Get_int32+0xe0>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <Get_int32+0x56>
 8003b84:	89fb      	ldrh	r3, [r7, #14]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4925      	ldr	r1, [pc, #148]	; (8003c28 <Get_int32+0xe4>)
 8003b92:	4826      	ldr	r0, [pc, #152]	; (8003c2c <Get_int32+0xe8>)
 8003b94:	f01a f9e4 	bl	801df60 <siprintf>
 8003b98:	e009      	b.n	8003bae <Get_int32+0x6a>
			else sprintf(RAM, "%i;", arr[i]);
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4922      	ldr	r1, [pc, #136]	; (8003c30 <Get_int32+0xec>)
 8003ba8:	4820      	ldr	r0, [pc, #128]	; (8003c2c <Get_int32+0xe8>)
 8003baa:	f01a f9d9 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003bae:	481f      	ldr	r0, [pc, #124]	; (8003c2c <Get_int32+0xe8>)
 8003bb0:	f7fc fb1e 	bl	80001f0 <strlen>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	481c      	ldr	r0, [pc, #112]	; (8003c2c <Get_int32+0xe8>)
 8003bbc:	f015 fd5a 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	81fb      	strh	r3, [r7, #14]
 8003bc6:	89fa      	ldrh	r2, [r7, #14]
 8003bc8:	883b      	ldrh	r3, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3d6      	bcc.n	8003b7c <Get_int32+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4818      	ldr	r0, [pc, #96]	; (8003c34 <Get_int32+0xf0>)
 8003bd2:	f015 fd4f 	bl	8019674 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%i\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003bd6:	e01f      	b.n	8003c18 <Get_int32+0xd4>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003bd8:	883a      	ldrh	r2, [r7, #0]
 8003bda:	89bb      	ldrh	r3, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d808      	bhi.n	8003bf2 <Get_int32+0xae>
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <Get_int32+0xf4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2209      	movs	r2, #9
 8003be6:	b292      	uxth	r2, r2
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f015 fd42 	bl	8019674 <CDC_Transmit_FS>
}
 8003bf0:	e012      	b.n	8003c18 <Get_int32+0xd4>
			sprintf(RAM, "%i\r\n", arr[index]);
 8003bf2:	89bb      	ldrh	r3, [r7, #12]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	490f      	ldr	r1, [pc, #60]	; (8003c3c <Get_int32+0xf8>)
 8003c00:	480a      	ldr	r0, [pc, #40]	; (8003c2c <Get_int32+0xe8>)
 8003c02:	f01a f9ad 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003c06:	4809      	ldr	r0, [pc, #36]	; (8003c2c <Get_int32+0xe8>)
 8003c08:	f7fc faf2 	bl	80001f0 <strlen>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4619      	mov	r1, r3
 8003c12:	4806      	ldr	r0, [pc, #24]	; (8003c2c <Get_int32+0xe8>)
 8003c14:	f015 fd2e 	bl	8019674 <CDC_Transmit_FS>
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	08021efc 	.word	0x08021efc
 8003c24:	20000847 	.word	0x20000847
 8003c28:	08021f1c 	.word	0x08021f1c
 8003c2c:	20002008 	.word	0x20002008
 8003c30:	08021f20 	.word	0x08021f20
 8003c34:	08021e78 	.word	0x08021e78
 8003c38:	20000124 	.word	0x20000124
 8003c3c:	08021f24 	.word	0x08021f24

08003c40 <Get_float>:

void Get_float(float*arr, uint8_t offset, uint16_t size)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003c50:	2300      	movs	r3, #0
 8003c52:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fc1a 	bl	8003490 <scan_num16>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003c60:	89bb      	ldrh	r3, [r7, #12]
 8003c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d13c      	bne.n	8003ce4 <Get_float+0xa4>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003c6a:	210e      	movs	r1, #14
 8003c6c:	4831      	ldr	r0, [pc, #196]	; (8003d34 <Get_float+0xf4>)
 8003c6e:	f015 fd01 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	81fb      	strh	r3, [r7, #14]
 8003c76:	e02c      	b.n	8003cd2 <Get_float+0x92>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <Get_float+0xf8>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <Get_float+0x5e>
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fc6c 	bl	8000568 <__aeabi_f2d>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4929      	ldr	r1, [pc, #164]	; (8003d3c <Get_float+0xfc>)
 8003c96:	482a      	ldr	r0, [pc, #168]	; (8003d40 <Get_float+0x100>)
 8003c98:	f01a f962 	bl	801df60 <siprintf>
 8003c9c:	e00d      	b.n	8003cba <Get_float+0x7a>
			else sprintf(RAM, "%f;", arr[i]);
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc5d 	bl	8000568 <__aeabi_f2d>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4924      	ldr	r1, [pc, #144]	; (8003d44 <Get_float+0x104>)
 8003cb4:	4822      	ldr	r0, [pc, #136]	; (8003d40 <Get_float+0x100>)
 8003cb6:	f01a f953 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003cba:	4821      	ldr	r0, [pc, #132]	; (8003d40 <Get_float+0x100>)
 8003cbc:	f7fc fa98 	bl	80001f0 <strlen>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	481e      	ldr	r0, [pc, #120]	; (8003d40 <Get_float+0x100>)
 8003cc8:	f015 fcd4 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	81fb      	strh	r3, [r7, #14]
 8003cd2:	89fa      	ldrh	r2, [r7, #14]
 8003cd4:	883b      	ldrh	r3, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d3ce      	bcc.n	8003c78 <Get_float+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003cda:	2102      	movs	r1, #2
 8003cdc:	481a      	ldr	r0, [pc, #104]	; (8003d48 <Get_float+0x108>)
 8003cde:	f015 fcc9 	bl	8019674 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003ce2:	e023      	b.n	8003d2c <Get_float+0xec>
		if(index>size-1)
 8003ce4:	883a      	ldrh	r2, [r7, #0]
 8003ce6:	89bb      	ldrh	r3, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d808      	bhi.n	8003cfe <Get_float+0xbe>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <Get_float+0x10c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2209      	movs	r2, #9
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f015 fcbc 	bl	8019674 <CDC_Transmit_FS>
}
 8003cfc:	e016      	b.n	8003d2c <Get_float+0xec>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fc2d 	bl	8000568 <__aeabi_f2d>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	490f      	ldr	r1, [pc, #60]	; (8003d50 <Get_float+0x110>)
 8003d14:	480a      	ldr	r0, [pc, #40]	; (8003d40 <Get_float+0x100>)
 8003d16:	f01a f923 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003d1a:	4809      	ldr	r0, [pc, #36]	; (8003d40 <Get_float+0x100>)
 8003d1c:	f7fc fa68 	bl	80001f0 <strlen>
 8003d20:	4603      	mov	r3, r0
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	4806      	ldr	r0, [pc, #24]	; (8003d40 <Get_float+0x100>)
 8003d28:	f015 fca4 	bl	8019674 <CDC_Transmit_FS>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08021efc 	.word	0x08021efc
 8003d38:	20000847 	.word	0x20000847
 8003d3c:	08021f2c 	.word	0x08021f2c
 8003d40:	20002008 	.word	0x20002008
 8003d44:	08021f30 	.word	0x08021f30
 8003d48:	08021e78 	.word	0x08021e78
 8003d4c:	20000124 	.word	0x20000124
 8003d50:	08021f34 	.word	0x08021f34

08003d54 <Get_double>:


void Get_double(double*arr, uint8_t offset, uint16_t size)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
 8003d60:	4613      	mov	r3, r2
 8003d62:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003d64:	2300      	movs	r3, #0
 8003d66:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fb90 	bl	8003490 <scan_num16>
 8003d70:	4603      	mov	r3, r0
 8003d72:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003d74:	89bb      	ldrh	r3, [r7, #12]
 8003d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d134      	bne.n	8003de8 <Get_double+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003d7e:	210e      	movs	r1, #14
 8003d80:	482b      	ldr	r0, [pc, #172]	; (8003e30 <Get_double+0xdc>)
 8003d82:	f015 fc77 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	81fb      	strh	r3, [r7, #14]
 8003d8a:	e024      	b.n	8003dd6 <Get_double+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003d8c:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <Get_double+0xe0>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <Get_double+0x56>
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	4925      	ldr	r1, [pc, #148]	; (8003e38 <Get_double+0xe4>)
 8003da2:	4826      	ldr	r0, [pc, #152]	; (8003e3c <Get_double+0xe8>)
 8003da4:	f01a f8dc 	bl	801df60 <siprintf>
 8003da8:	e009      	b.n	8003dbe <Get_double+0x6a>
			else sprintf(RAM, "%f;", (double)arr[i]);
 8003daa:	89fb      	ldrh	r3, [r7, #14]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	4922      	ldr	r1, [pc, #136]	; (8003e40 <Get_double+0xec>)
 8003db8:	4820      	ldr	r0, [pc, #128]	; (8003e3c <Get_double+0xe8>)
 8003dba:	f01a f8d1 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003dbe:	481f      	ldr	r0, [pc, #124]	; (8003e3c <Get_double+0xe8>)
 8003dc0:	f7fc fa16 	bl	80001f0 <strlen>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	481c      	ldr	r0, [pc, #112]	; (8003e3c <Get_double+0xe8>)
 8003dcc:	f015 fc52 	bl	8019674 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	81fb      	strh	r3, [r7, #14]
 8003dd6:	89fa      	ldrh	r2, [r7, #14]
 8003dd8:	883b      	ldrh	r3, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3d6      	bcc.n	8003d8c <Get_double+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003dde:	2102      	movs	r1, #2
 8003de0:	4818      	ldr	r0, [pc, #96]	; (8003e44 <Get_double+0xf0>)
 8003de2:	f015 fc47 	bl	8019674 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003de6:	e01f      	b.n	8003e28 <Get_double+0xd4>
		if(index>size-1)
 8003de8:	883a      	ldrh	r2, [r7, #0]
 8003dea:	89bb      	ldrh	r3, [r7, #12]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d808      	bhi.n	8003e02 <Get_double+0xae>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <Get_double+0xf4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2209      	movs	r2, #9
 8003df6:	b292      	uxth	r2, r2
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f015 fc3a 	bl	8019674 <CDC_Transmit_FS>
}
 8003e00:	e012      	b.n	8003e28 <Get_double+0xd4>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003e02:	89bb      	ldrh	r3, [r7, #12]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	490f      	ldr	r1, [pc, #60]	; (8003e4c <Get_double+0xf8>)
 8003e10:	480a      	ldr	r0, [pc, #40]	; (8003e3c <Get_double+0xe8>)
 8003e12:	f01a f8a5 	bl	801df60 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003e16:	4809      	ldr	r0, [pc, #36]	; (8003e3c <Get_double+0xe8>)
 8003e18:	f7fc f9ea 	bl	80001f0 <strlen>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	; (8003e3c <Get_double+0xe8>)
 8003e24:	f015 fc26 	bl	8019674 <CDC_Transmit_FS>
}
 8003e28:	bf00      	nop
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08021efc 	.word	0x08021efc
 8003e34:	20000847 	.word	0x20000847
 8003e38:	08021f2c 	.word	0x08021f2c
 8003e3c:	20002008 	.word	0x20002008
 8003e40:	08021f30 	.word	0x08021f30
 8003e44:	08021e78 	.word	0x08021e78
 8003e48:	20000124 	.word	0x20000124
 8003e4c:	08021f34 	.word	0x08021f34

08003e50 <Parser_process>:




void Parser_process(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
	uint16_t RES=0,i;
 8003e56:	2300      	movs	r3, #0
 8003e58:	80bb      	strh	r3, [r7, #4]

	if(BLE_bridge!=0)
 8003e5a:	4bb4      	ldr	r3, [pc, #720]	; (800412c <Parser_process+0x2dc>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <Parser_process+0x3e>
	{
		if(usart1_counter!=0)
 8003e62:	4bb3      	ldr	r3, [pc, #716]	; (8004130 <Parser_process+0x2e0>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d011      	beq.n	8003e8e <Parser_process+0x3e>
		{
			if(rx_cmplt==0)
 8003e6a:	4bb2      	ldr	r3, [pc, #712]	; (8004134 <Parser_process+0x2e4>)
 8003e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10c      	bne.n	8003e8e <Parser_process+0x3e>
			{
				CDC_Transmit_FS((unsigned char*)usart1_data, usart1_counter);
 8003e74:	4bae      	ldr	r3, [pc, #696]	; (8004130 <Parser_process+0x2e0>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	48ae      	ldr	r0, [pc, #696]	; (8004138 <Parser_process+0x2e8>)
 8003e7e:	f015 fbf9 	bl	8019674 <CDC_Transmit_FS>
				usart1_counter=0;
 8003e82:	4bab      	ldr	r3, [pc, #684]	; (8004130 <Parser_process+0x2e0>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
				rx_cmplt=-1;
 8003e88:	4baa      	ldr	r3, [pc, #680]	; (8004134 <Parser_process+0x2e4>)
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(USBTimeOutRX>0)USBTimeOutRX--;
 8003e8e:	4bab      	ldr	r3, [pc, #684]	; (800413c <Parser_process+0x2ec>)
 8003e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dd08      	ble.n	8003eaa <Parser_process+0x5a>
 8003e98:	4ba8      	ldr	r3, [pc, #672]	; (800413c <Parser_process+0x2ec>)
 8003e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	4ba5      	ldr	r3, [pc, #660]	; (800413c <Parser_process+0x2ec>)
 8003ea8:	801a      	strh	r2, [r3, #0]
	if(USBTimeOutRX==0)
 8003eaa:	4ba4      	ldr	r3, [pc, #656]	; (800413c <Parser_process+0x2ec>)
 8003eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f040 8361 	bne.w	8004578 <Parser_process+0x728>
	{
		// Bluetooth bridge
		if(BLE_bridge!=0)
 8003eb6:	4b9d      	ldr	r3, [pc, #628]	; (800412c <Parser_process+0x2dc>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d024      	beq.n	8003f08 <Parser_process+0xb8>
		{
			for(i=0;i<rxcntr;i++)bluetoothbuf[i]=rx_buf[i];
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	80fb      	strh	r3, [r7, #6]
 8003ec2:	e008      	b.n	8003ed6 <Parser_process+0x86>
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	499d      	ldr	r1, [pc, #628]	; (8004140 <Parser_process+0x2f0>)
 8003eca:	5c89      	ldrb	r1, [r1, r2]
 8003ecc:	4a9d      	ldr	r2, [pc, #628]	; (8004144 <Parser_process+0x2f4>)
 8003ece:	54d1      	strb	r1, [r2, r3]
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	80fb      	strh	r3, [r7, #6]
 8003ed6:	4b9c      	ldr	r3, [pc, #624]	; (8004148 <Parser_process+0x2f8>)
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3f1      	bcc.n	8003ec4 <Parser_process+0x74>
			bluetoothcntr=rxcntr;
 8003ee0:	4b99      	ldr	r3, [pc, #612]	; (8004148 <Parser_process+0x2f8>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4b99      	ldr	r3, [pc, #612]	; (800414c <Parser_process+0x2fc>)
 8003ee8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)rx_buf, rxcntr, 1000);
 8003eea:	4b97      	ldr	r3, [pc, #604]	; (8004148 <Parser_process+0x2f8>)
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef2:	4993      	ldr	r1, [pc, #588]	; (8004140 <Parser_process+0x2f0>)
 8003ef4:	4896      	ldr	r0, [pc, #600]	; (8004150 <Parser_process+0x300>)
 8003ef6:	f00b ff65 	bl	800fdc4 <HAL_UART_Transmit>
			clear_buf();
 8003efa:	f7ff fa0d 	bl	8003318 <clear_buf>
			USBTimeOutRX=-1;
 8003efe:	4b8f      	ldr	r3, [pc, #572]	; (800413c <Parser_process+0x2ec>)
 8003f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	e337      	b.n	8004578 <Parser_process+0x728>
		}
		// Parser
		else
		{
			switch(parser(0))
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7ff fb4f 	bl	80035ac <parser>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	3b02      	subs	r3, #2
 8003f12:	2b0b      	cmp	r3, #11
 8003f14:	f200 831d 	bhi.w	8004552 <Parser_process+0x702>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <Parser_process+0xd0>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	0800424d 	.word	0x0800424d
 8003f24:	080043c9 	.word	0x080043c9
 8003f28:	08004545 	.word	0x08004545
 8003f2c:	08004099 	.word	0x08004099
 8003f30:	0800400f 	.word	0x0800400f
 8003f34:	08004031 	.word	0x08004031
 8003f38:	08004053 	.word	0x08004053
 8003f3c:	08003fc1 	.word	0x08003fc1
 8003f40:	08003fdb 	.word	0x08003fdb
 8003f44:	08003f51 	.word	0x08003f51
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f71 	.word	0x08003f71
			{
				case 0xFFFF: break;
				case 0xFFFE: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;

				case BL_BRIDGE:
					CDC_Transmit_FS((unsigned char*)"BlueTooth Bridge Enabled", 24);
 8003f50:	2118      	movs	r1, #24
 8003f52:	4880      	ldr	r0, [pc, #512]	; (8004154 <Parser_process+0x304>)
 8003f54:	f015 fb8e 	bl	8019674 <CDC_Transmit_FS>
					BLE_bridge=1;
 8003f58:	4b74      	ldr	r3, [pc, #464]	; (800412c <Parser_process+0x2dc>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
					usart1_counter=0;
 8003f5e:	4b74      	ldr	r3, [pc, #464]	; (8004130 <Parser_process+0x2e0>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
					rx_cmplt=-1;
 8003f64:	4b73      	ldr	r3, [pc, #460]	; (8004134 <Parser_process+0x2e4>)
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003f6a:	f7ff f9d5 	bl	8003318 <clear_buf>
					break;
 8003f6e:	e2fb      	b.n	8004568 <Parser_process+0x718>

				case CREATE:

					clear_buf();
 8003f70:	f7ff f9d2 	bl	8003318 <clear_buf>
					break;
 8003f74:	e2f8      	b.n	8004568 <Parser_process+0x718>

				case BL_CONFIG:
					if(BLE_config==1)BLE_config=0;
 8003f76:	4b78      	ldr	r3, [pc, #480]	; (8004158 <Parser_process+0x308>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d103      	bne.n	8003f86 <Parser_process+0x136>
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <Parser_process+0x308>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e002      	b.n	8003f8c <Parser_process+0x13c>
					else BLE_config=1;
 8003f86:	4b74      	ldr	r3, [pc, #464]	; (8004158 <Parser_process+0x308>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
					BLueTooth_Configuration(BLE_config);
 8003f8c:	4b72      	ldr	r3, [pc, #456]	; (8004158 <Parser_process+0x308>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe f89b 	bl	80020cc <BLueTooth_Configuration>
					sprintf(RAM, "BlueTooth Config = %d", BLE_config);
 8003f96:	4b70      	ldr	r3, [pc, #448]	; (8004158 <Parser_process+0x308>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	496f      	ldr	r1, [pc, #444]	; (800415c <Parser_process+0x30c>)
 8003f9e:	4870      	ldr	r0, [pc, #448]	; (8004160 <Parser_process+0x310>)
 8003fa0:	f019 ffde 	bl	801df60 <siprintf>
					CDC_Transmit_FS((unsigned char*)RAM, 20);
 8003fa4:	2114      	movs	r1, #20
 8003fa6:	486e      	ldr	r0, [pc, #440]	; (8004160 <Parser_process+0x310>)
 8003fa8:	f015 fb64 	bl	8019674 <CDC_Transmit_FS>
					HAL_UART_Transmit(&huart1, (unsigned char*)RAM, 20, 1000);
 8003fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb0:	2214      	movs	r2, #20
 8003fb2:	496b      	ldr	r1, [pc, #428]	; (8004160 <Parser_process+0x310>)
 8003fb4:	4866      	ldr	r0, [pc, #408]	; (8004150 <Parser_process+0x300>)
 8003fb6:	f00b ff05 	bl	800fdc4 <HAL_UART_Transmit>
					clear_buf();
 8003fba:	f7ff f9ad 	bl	8003318 <clear_buf>
					break;
 8003fbe:	e2d3      	b.n	8004568 <Parser_process+0x718>

				case SELF_CAL:
					clear_buf();
 8003fc0:	f7ff f9aa 	bl	8003318 <clear_buf>
					adc_calibration_mode=self_calibration;
 8003fc4:	4b67      	ldr	r3, [pc, #412]	; (8004164 <Parser_process+0x314>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
					adc_start_calibration=1;
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <Parser_process+0x318>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4866      	ldr	r0, [pc, #408]	; (800416c <Parser_process+0x31c>)
 8003fd4:	f015 fb4e 	bl	8019674 <CDC_Transmit_FS>
				break;
 8003fd8:	e2c6      	b.n	8004568 <Parser_process+0x718>
				case SYS_CAL:
					RES=screen;
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <Parser_process+0x320>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	80bb      	strh	r3, [r7, #4]
					Auto_System_Calibration();
 8003fe0:	f7fd f9aa 	bl	8001338 <Auto_System_Calibration>
						ADC_Conversion(ADC_SPS);
 8003fe4:	4b63      	ldr	r3, [pc, #396]	; (8004174 <Parser_process+0x324>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fd f8af 	bl	800114c <ADC_Conversion>
						LED(0,0,0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7fe f8c0 	bl	8002178 <LED>
						screen=RES;
 8003ff8:	88bb      	ldrh	r3, [r7, #4]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	4b5c      	ldr	r3, [pc, #368]	; (8004170 <Parser_process+0x320>)
 8003ffe:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8004000:	f7ff f98a 	bl	8003318 <clear_buf>
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8004004:	2102      	movs	r1, #2
 8004006:	4859      	ldr	r0, [pc, #356]	; (800416c <Parser_process+0x31c>)
 8004008:	f015 fb34 	bl	8019674 <CDC_Transmit_FS>
					break;
 800400c:	e2ac      	b.n	8004568 <Parser_process+0x718>

				case CSV_ON: CSV_format=1; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV enabled", 11); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV enabled", 11, 1000); break;
 800400e:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <Parser_process+0x328>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	f7ff f980 	bl	8003318 <clear_buf>
 8004018:	210b      	movs	r1, #11
 800401a:	4858      	ldr	r0, [pc, #352]	; (800417c <Parser_process+0x32c>)
 800401c:	f015 fb2a 	bl	8019674 <CDC_Transmit_FS>
 8004020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004024:	220b      	movs	r2, #11
 8004026:	4955      	ldr	r1, [pc, #340]	; (800417c <Parser_process+0x32c>)
 8004028:	4849      	ldr	r0, [pc, #292]	; (8004150 <Parser_process+0x300>)
 800402a:	f00b fecb 	bl	800fdc4 <HAL_UART_Transmit>
 800402e:	e29b      	b.n	8004568 <Parser_process+0x718>
				case CSV_OFF: CSV_format=0; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV disabled", 12); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV disabled", 12, 1000); break;
 8004030:	4b51      	ldr	r3, [pc, #324]	; (8004178 <Parser_process+0x328>)
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	f7ff f96f 	bl	8003318 <clear_buf>
 800403a:	210c      	movs	r1, #12
 800403c:	4850      	ldr	r0, [pc, #320]	; (8004180 <Parser_process+0x330>)
 800403e:	f015 fb19 	bl	8019674 <CDC_Transmit_FS>
 8004042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004046:	220c      	movs	r2, #12
 8004048:	494d      	ldr	r1, [pc, #308]	; (8004180 <Parser_process+0x330>)
 800404a:	4841      	ldr	r0, [pc, #260]	; (8004150 <Parser_process+0x300>)
 800404c:	f00b feba 	bl	800fdc4 <HAL_UART_Transmit>
 8004050:	e28a      	b.n	8004568 <Parser_process+0x718>

				case HELP:
					CDC_Transmit_FS((unsigned char*)CSV_ON_instruction, strlen(CSV_ON_instruction));
 8004052:	215a      	movs	r1, #90	; 0x5a
 8004054:	484b      	ldr	r0, [pc, #300]	; (8004184 <Parser_process+0x334>)
 8004056:	f015 fb0d 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)CSV_OFF_instruction, strlen(CSV_OFF_instruction));
 800405a:	215d      	movs	r1, #93	; 0x5d
 800405c:	484a      	ldr	r0, [pc, #296]	; (8004188 <Parser_process+0x338>)
 800405e:	f015 fb09 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)HELP_instruction, strlen(HELP_instruction));
 8004062:	212d      	movs	r1, #45	; 0x2d
 8004064:	4849      	ldr	r0, [pc, #292]	; (800418c <Parser_process+0x33c>)
 8004066:	f015 fb05 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GV_instruction, strlen(GV_instruction));
 800406a:	214f      	movs	r1, #79	; 0x4f
 800406c:	4848      	ldr	r0, [pc, #288]	; (8004190 <Parser_process+0x340>)
 800406e:	f015 fb01 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SET_instruction, strlen(SET_instruction));
 8004072:	215e      	movs	r1, #94	; 0x5e
 8004074:	4847      	ldr	r0, [pc, #284]	; (8004194 <Parser_process+0x344>)
 8004076:	f015 fafd 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GET_instruction, strlen(GET_instruction));
 800407a:	215d      	movs	r1, #93	; 0x5d
 800407c:	4846      	ldr	r0, [pc, #280]	; (8004198 <Parser_process+0x348>)
 800407e:	f015 faf9 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)ALL_instruction, strlen(ALL_instruction));
 8004082:	2150      	movs	r1, #80	; 0x50
 8004084:	4845      	ldr	r0, [pc, #276]	; (800419c <Parser_process+0x34c>)
 8004086:	f015 faf5 	bl	8019674 <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SAVE_instruction, strlen(SAVE_instruction));
 800408a:	2158      	movs	r1, #88	; 0x58
 800408c:	4844      	ldr	r0, [pc, #272]	; (80041a0 <Parser_process+0x350>)
 800408e:	f015 faf1 	bl	8019674 <CDC_Transmit_FS>

					clear_buf(); break;
 8004092:	f7ff f941 	bl	8003318 <clear_buf>
 8004096:	e267      	b.n	8004568 <Parser_process+0x718>

				case GV:
					if(CSV_format==0)
 8004098:	4b37      	ldr	r3, [pc, #220]	; (8004178 <Parser_process+0x328>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d142      	bne.n	8004126 <Parser_process+0x2d6>
					{
						CDC_Transmit_FS((unsigned char*)"Available Global Variables:\n", 28);
 80040a0:	211c      	movs	r1, #28
 80040a2:	4840      	ldr	r0, [pc, #256]	; (80041a4 <Parser_process+0x354>)
 80040a4:	f015 fae6 	bl	8019674 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	80fb      	strh	r3, [r7, #6]
 80040ac:	e037      	b.n	800411e <Parser_process+0x2ce>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <Parser_process+0x358>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <Parser_process+0x35c>)
 80040b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040bc:	210b      	movs	r1, #11
 80040be:	4618      	mov	r0, r3
 80040c0:	f015 fad8 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 80040c4:	2101      	movs	r1, #1
 80040c6:	483a      	ldr	r0, [pc, #232]	; (80041b0 <Parser_process+0x360>)
 80040c8:	f015 fad4 	bl	8019674 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	4a39      	ldr	r2, [pc, #228]	; (80041b4 <Parser_process+0x364>)
 80040d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4938      	ldr	r1, [pc, #224]	; (80041b8 <Parser_process+0x368>)
 80040d8:	4821      	ldr	r0, [pc, #132]	; (8004160 <Parser_process+0x310>)
 80040da:	f019 ff41 	bl	801df60 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80040de:	4820      	ldr	r0, [pc, #128]	; (8004160 <Parser_process+0x310>)
 80040e0:	f7fc f886 	bl	80001f0 <strlen>
 80040e4:	4603      	mov	r3, r0
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	4619      	mov	r1, r3
 80040ea:	481d      	ldr	r0, [pc, #116]	; (8004160 <Parser_process+0x310>)
 80040ec:	f015 fac2 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 80040f0:	2101      	movs	r1, #1
 80040f2:	482f      	ldr	r0, [pc, #188]	; (80041b0 <Parser_process+0x360>)
 80040f4:	f015 fabe 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	4a30      	ldr	r2, [pc, #192]	; (80041bc <Parser_process+0x36c>)
 80040fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	492f      	ldr	r1, [pc, #188]	; (80041c0 <Parser_process+0x370>)
 8004104:	5ccb      	ldrb	r3, [r1, r3]
 8004106:	b29b      	uxth	r3, r3
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f015 fab2 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 8004110:	2101      	movs	r1, #1
 8004112:	482c      	ldr	r0, [pc, #176]	; (80041c4 <Parser_process+0x374>)
 8004114:	f015 faae 	bl	8019674 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	3301      	adds	r3, #1
 800411c:	80fb      	strh	r3, [r7, #6]
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b0e      	cmp	r3, #14
 8004122:	d9c4      	bls.n	80040ae <Parser_process+0x25e>
 8004124:	e08b      	b.n	800423e <Parser_process+0x3ee>
						}
					}
					else
					{
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8004126:	2300      	movs	r3, #0
 8004128:	80fb      	strh	r3, [r7, #6]
 800412a:	e085      	b.n	8004238 <Parser_process+0x3e8>
 800412c:	20000824 	.word	0x20000824
 8004130:	20000825 	.word	0x20000825
 8004134:	20000826 	.word	0x20000826
 8004138:	20002090 	.word	0x20002090
 800413c:	2000015c 	.word	0x2000015c
 8004140:	20005ae4 	.word	0x20005ae4
 8004144:	20005a80 	.word	0x20005a80
 8004148:	2000084a 	.word	0x2000084a
 800414c:	20000848 	.word	0x20000848
 8004150:	200079c8 	.word	0x200079c8
 8004154:	08021f3c 	.word	0x08021f3c
 8004158:	20000058 	.word	0x20000058
 800415c:	08021f58 	.word	0x08021f58
 8004160:	20002008 	.word	0x20002008
 8004164:	20000837 	.word	0x20000837
 8004168:	200007b4 	.word	0x200007b4
 800416c:	08021f70 	.word	0x08021f70
 8004170:	2000004c 	.word	0x2000004c
 8004174:	20000073 	.word	0x20000073
 8004178:	20000847 	.word	0x20000847
 800417c:	08021f74 	.word	0x08021f74
 8004180:	08021f80 	.word	0x08021f80
 8004184:	08023d98 	.word	0x08023d98
 8004188:	08023df4 	.word	0x08023df4
 800418c:	08023e54 	.word	0x08023e54
 8004190:	08023e84 	.word	0x08023e84
 8004194:	08023ed4 	.word	0x08023ed4
 8004198:	08023f34 	.word	0x08023f34
 800419c:	08023f94 	.word	0x08023f94
 80041a0:	08023fe8 	.word	0x08023fe8
 80041a4:	08021f90 	.word	0x08021f90
 80041a8:	08023d58 	.word	0x08023d58
 80041ac:	20000104 	.word	0x20000104
 80041b0:	08021fb0 	.word	0x08021fb0
 80041b4:	08023d68 	.word	0x08023d68
 80041b8:	08021fb4 	.word	0x08021fb4
 80041bc:	200000c8 	.word	0x200000c8
 80041c0:	08023d48 	.word	0x08023d48
 80041c4:	08021fb8 	.word	0x08021fb8
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	4ab5      	ldr	r2, [pc, #724]	; (80044a0 <Parser_process+0x650>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	461a      	mov	r2, r3
 80041d0:	4bb4      	ldr	r3, [pc, #720]	; (80044a4 <Parser_process+0x654>)
 80041d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d6:	210b      	movs	r1, #11
 80041d8:	4618      	mov	r0, r3
 80041da:	f015 fa4b 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 80041de:	2101      	movs	r1, #1
 80041e0:	48b1      	ldr	r0, [pc, #708]	; (80044a8 <Parser_process+0x658>)
 80041e2:	f015 fa47 	bl	8019674 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	4ab0      	ldr	r2, [pc, #704]	; (80044ac <Parser_process+0x65c>)
 80041ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ee:	461a      	mov	r2, r3
 80041f0:	49af      	ldr	r1, [pc, #700]	; (80044b0 <Parser_process+0x660>)
 80041f2:	48b0      	ldr	r0, [pc, #704]	; (80044b4 <Parser_process+0x664>)
 80041f4:	f019 feb4 	bl	801df60 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80041f8:	48ae      	ldr	r0, [pc, #696]	; (80044b4 <Parser_process+0x664>)
 80041fa:	f7fb fff9 	bl	80001f0 <strlen>
 80041fe:	4603      	mov	r3, r0
 8004200:	b29b      	uxth	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	48ab      	ldr	r0, [pc, #684]	; (80044b4 <Parser_process+0x664>)
 8004206:	f015 fa35 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 800420a:	2101      	movs	r1, #1
 800420c:	48a6      	ldr	r0, [pc, #664]	; (80044a8 <Parser_process+0x658>)
 800420e:	f015 fa31 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	4aa8      	ldr	r2, [pc, #672]	; (80044b8 <Parser_process+0x668>)
 8004216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	49a7      	ldr	r1, [pc, #668]	; (80044bc <Parser_process+0x66c>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	b29b      	uxth	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f015 fa25 	bl	8019674 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 800422a:	2101      	movs	r1, #1
 800422c:	48a4      	ldr	r0, [pc, #656]	; (80044c0 <Parser_process+0x670>)
 800422e:	f015 fa21 	bl	8019674 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	3301      	adds	r3, #1
 8004236:	80fb      	strh	r3, [r7, #6]
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b0e      	cmp	r3, #14
 800423c:	d9c4      	bls.n	80041c8 <Parser_process+0x378>
						}
					}

					CDC_Transmit_FS((unsigned char*)"\r\n", 1);
 800423e:	2101      	movs	r1, #1
 8004240:	48a0      	ldr	r0, [pc, #640]	; (80044c4 <Parser_process+0x674>)
 8004242:	f015 fa17 	bl	8019674 <CDC_Transmit_FS>
					clear_buf();
 8004246:	f7ff f867 	bl	8003318 <clear_buf>
					break;
 800424a:	e18d      	b.n	8004568 <Parser_process+0x718>

				case GET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 800424c:	2303      	movs	r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff f9aa 	bl	80035ac <parser>
 8004258:	4603      	mov	r3, r0
 800425a:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 800425c:	88bb      	ldrh	r3, [r7, #4]
 800425e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8004262:	4293      	cmp	r3, r2
 8004264:	f200 80a3 	bhi.w	80043ae <Parser_process+0x55e>
					{
						switch(GV_TYPE[RES])
 8004268:	88bb      	ldrh	r3, [r7, #4]
 800426a:	4a8d      	ldr	r2, [pc, #564]	; (80044a0 <Parser_process+0x650>)
 800426c:	5cd3      	ldrb	r3, [r2, r3]
 800426e:	2b07      	cmp	r3, #7
 8004270:	f200 8092 	bhi.w	8004398 <Parser_process+0x548>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <Parser_process+0x42c>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	0800429d 	.word	0x0800429d
 8004280:	080043c1 	.word	0x080043c1
 8004284:	080042c7 	.word	0x080042c7
 8004288:	080042f1 	.word	0x080042f1
 800428c:	080043c1 	.word	0x080043c1
 8004290:	0800431b 	.word	0x0800431b
 8004294:	0800436f 	.word	0x0800436f
 8004298:	08004345 	.word	0x08004345
						{
							case type_INT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800429c:	88bb      	ldrh	r3, [r7, #4]
 800429e:	4a8a      	ldr	r2, [pc, #552]	; (80044c8 <Parser_process+0x678>)
 80042a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a4:	4618      	mov	r0, r3
 80042a6:	2203      	movs	r2, #3
 80042a8:	88bb      	ldrh	r3, [r7, #4]
 80042aa:	4984      	ldr	r1, [pc, #528]	; (80044bc <Parser_process+0x66c>)
 80042ac:	5ccb      	ldrb	r3, [r1, r3]
 80042ae:	4413      	add	r3, r2
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	3302      	adds	r3, #2
 80042b4:	b2d9      	uxtb	r1, r3
 80042b6:	88bb      	ldrh	r3, [r7, #4]
 80042b8:	4a7c      	ldr	r2, [pc, #496]	; (80044ac <Parser_process+0x65c>)
 80042ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042be:	461a      	mov	r2, r3
 80042c0:	f7ff fbc4 	bl	8003a4c <Get_uint8>
 80042c4:	e07d      	b.n	80043c2 <Parser_process+0x572>
							case type_INT16: break;
							case type_INT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042c6:	88bb      	ldrh	r3, [r7, #4]
 80042c8:	4a7f      	ldr	r2, [pc, #508]	; (80044c8 <Parser_process+0x678>)
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	4618      	mov	r0, r3
 80042d0:	2203      	movs	r2, #3
 80042d2:	88bb      	ldrh	r3, [r7, #4]
 80042d4:	4979      	ldr	r1, [pc, #484]	; (80044bc <Parser_process+0x66c>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	4413      	add	r3, r2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3302      	adds	r3, #2
 80042de:	b2d9      	uxtb	r1, r3
 80042e0:	88bb      	ldrh	r3, [r7, #4]
 80042e2:	4a72      	ldr	r2, [pc, #456]	; (80044ac <Parser_process+0x65c>)
 80042e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7ff fc2b 	bl	8003b44 <Get_int32>
 80042ee:	e068      	b.n	80043c2 <Parser_process+0x572>
							case type_UINT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042f0:	88bb      	ldrh	r3, [r7, #4]
 80042f2:	4a75      	ldr	r2, [pc, #468]	; (80044c8 <Parser_process+0x678>)
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	4618      	mov	r0, r3
 80042fa:	2203      	movs	r2, #3
 80042fc:	88bb      	ldrh	r3, [r7, #4]
 80042fe:	496f      	ldr	r1, [pc, #444]	; (80044bc <Parser_process+0x66c>)
 8004300:	5ccb      	ldrb	r3, [r1, r3]
 8004302:	4413      	add	r3, r2
 8004304:	b2db      	uxtb	r3, r3
 8004306:	3302      	adds	r3, #2
 8004308:	b2d9      	uxtb	r1, r3
 800430a:	88bb      	ldrh	r3, [r7, #4]
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <Parser_process+0x65c>)
 800430e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004312:	461a      	mov	r2, r3
 8004314:	f7ff fb9a 	bl	8003a4c <Get_uint8>
 8004318:	e053      	b.n	80043c2 <Parser_process+0x572>
							case type_UINT16: break;
							case type_UINT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800431a:	88bb      	ldrh	r3, [r7, #4]
 800431c:	4a6a      	ldr	r2, [pc, #424]	; (80044c8 <Parser_process+0x678>)
 800431e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004322:	4618      	mov	r0, r3
 8004324:	2203      	movs	r2, #3
 8004326:	88bb      	ldrh	r3, [r7, #4]
 8004328:	4964      	ldr	r1, [pc, #400]	; (80044bc <Parser_process+0x66c>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	4413      	add	r3, r2
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3302      	adds	r3, #2
 8004332:	b2d9      	uxtb	r1, r3
 8004334:	88bb      	ldrh	r3, [r7, #4]
 8004336:	4a5d      	ldr	r2, [pc, #372]	; (80044ac <Parser_process+0x65c>)
 8004338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800433c:	461a      	mov	r2, r3
 800433e:	f7ff fc01 	bl	8003b44 <Get_int32>
 8004342:	e03e      	b.n	80043c2 <Parser_process+0x572>
							case type_DOUBLE: Get_double((double*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004344:	88bb      	ldrh	r3, [r7, #4]
 8004346:	4a60      	ldr	r2, [pc, #384]	; (80044c8 <Parser_process+0x678>)
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	4618      	mov	r0, r3
 800434e:	2203      	movs	r2, #3
 8004350:	88bb      	ldrh	r3, [r7, #4]
 8004352:	495a      	ldr	r1, [pc, #360]	; (80044bc <Parser_process+0x66c>)
 8004354:	5ccb      	ldrb	r3, [r1, r3]
 8004356:	4413      	add	r3, r2
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3302      	adds	r3, #2
 800435c:	b2d9      	uxtb	r1, r3
 800435e:	88bb      	ldrh	r3, [r7, #4]
 8004360:	4a52      	ldr	r2, [pc, #328]	; (80044ac <Parser_process+0x65c>)
 8004362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004366:	461a      	mov	r2, r3
 8004368:	f7ff fcf4 	bl	8003d54 <Get_double>
 800436c:	e029      	b.n	80043c2 <Parser_process+0x572>
							case type_FLOAT:  Get_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800436e:	88bb      	ldrh	r3, [r7, #4]
 8004370:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <Parser_process+0x678>)
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	4618      	mov	r0, r3
 8004378:	2203      	movs	r2, #3
 800437a:	88bb      	ldrh	r3, [r7, #4]
 800437c:	494f      	ldr	r1, [pc, #316]	; (80044bc <Parser_process+0x66c>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	4413      	add	r3, r2
 8004382:	b2db      	uxtb	r3, r3
 8004384:	3302      	adds	r3, #2
 8004386:	b2d9      	uxtb	r1, r3
 8004388:	88bb      	ldrh	r3, [r7, #4]
 800438a:	4a48      	ldr	r2, [pc, #288]	; (80044ac <Parser_process+0x65c>)
 800438c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004390:	461a      	mov	r2, r3
 8004392:	f7ff fc55 	bl	8003c40 <Get_float>
 8004396:	e014      	b.n	80043c2 <Parser_process+0x572>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004398:	4b4c      	ldr	r3, [pc, #304]	; (80044cc <Parser_process+0x67c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2209      	movs	r2, #9
 800439e:	b292      	uxth	r2, r2
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f015 f966 	bl	8019674 <CDC_Transmit_FS>
 80043a8:	f7fe ffb6 	bl	8003318 <clear_buf>
 80043ac:	e009      	b.n	80043c2 <Parser_process+0x572>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <Parser_process+0x67c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2209      	movs	r2, #9
 80043b4:	b292      	uxth	r2, r2
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f015 f95b 	bl	8019674 <CDC_Transmit_FS>
 80043be:	e000      	b.n	80043c2 <Parser_process+0x572>
							case type_INT16: break;
 80043c0:	bf00      	nop
					}
					clear_buf(); break;
 80043c2:	f7fe ffa9 	bl	8003318 <clear_buf>
 80043c6:	e0cf      	b.n	8004568 <Parser_process+0x718>


				case SET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 80043c8:	2303      	movs	r3, #3
 80043ca:	3301      	adds	r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff f8ec 	bl	80035ac <parser>
 80043d4:	4603      	mov	r3, r0
 80043d6:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 80043d8:	88bb      	ldrh	r3, [r7, #4]
 80043da:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80043de:	4293      	cmp	r3, r2
 80043e0:	f200 80a3 	bhi.w	800452a <Parser_process+0x6da>
					{
						switch(GV_TYPE[RES])
 80043e4:	88bb      	ldrh	r3, [r7, #4]
 80043e6:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <Parser_process+0x650>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	2b07      	cmp	r3, #7
 80043ec:	f200 8092 	bhi.w	8004514 <Parser_process+0x6c4>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <Parser_process+0x5a8>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004419 	.word	0x08004419
 80043fc:	0800443b 	.word	0x0800443b
 8004400:	0800445d 	.word	0x0800445d
 8004404:	0800447f 	.word	0x0800447f
 8004408:	0800453d 	.word	0x0800453d
 800440c:	080044d1 	.word	0x080044d1
 8004410:	080044f3 	.word	0x080044f3
 8004414:	0800453d 	.word	0x0800453d
						{
							case type_INT8: Set_int8((int8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004418:	88bb      	ldrh	r3, [r7, #4]
 800441a:	4a2b      	ldr	r2, [pc, #172]	; (80044c8 <Parser_process+0x678>)
 800441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004420:	4618      	mov	r0, r3
 8004422:	2203      	movs	r2, #3
 8004424:	88bb      	ldrh	r3, [r7, #4]
 8004426:	4925      	ldr	r1, [pc, #148]	; (80044bc <Parser_process+0x66c>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	4413      	add	r3, r2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3302      	adds	r3, #2
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	f7ff f960 	bl	80036f8 <Set_int8>
 8004438:	e081      	b.n	800453e <Parser_process+0x6ee>
							case type_INT16: Set_int16((int16_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800443a:	88bb      	ldrh	r3, [r7, #4]
 800443c:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <Parser_process+0x678>)
 800443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004442:	4618      	mov	r0, r3
 8004444:	2203      	movs	r2, #3
 8004446:	88bb      	ldrh	r3, [r7, #4]
 8004448:	491c      	ldr	r1, [pc, #112]	; (80044bc <Parser_process+0x66c>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	4413      	add	r3, r2
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3302      	adds	r3, #2
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4619      	mov	r1, r3
 8004456:	f7ff f9a5 	bl	80037a4 <Set_int16>
 800445a:	e070      	b.n	800453e <Parser_process+0x6ee>
							case type_INT32: Set_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800445c:	88bb      	ldrh	r3, [r7, #4]
 800445e:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <Parser_process+0x678>)
 8004460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004464:	4618      	mov	r0, r3
 8004466:	2203      	movs	r2, #3
 8004468:	88bb      	ldrh	r3, [r7, #4]
 800446a:	4914      	ldr	r1, [pc, #80]	; (80044bc <Parser_process+0x66c>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	4413      	add	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	3302      	adds	r3, #2
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	f7ff f9ec 	bl	8003854 <Set_int32>
 800447c:	e05f      	b.n	800453e <Parser_process+0x6ee>
							case type_UINT8: Set_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <Parser_process+0x678>)
 8004482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004486:	4618      	mov	r0, r3
 8004488:	2203      	movs	r2, #3
 800448a:	88bb      	ldrh	r3, [r7, #4]
 800448c:	490b      	ldr	r1, [pc, #44]	; (80044bc <Parser_process+0x66c>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	4413      	add	r3, r2
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3302      	adds	r3, #2
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	f7ff f8db 	bl	8003654 <Set_uint8>
 800449e:	e04e      	b.n	800453e <Parser_process+0x6ee>
 80044a0:	08023d58 	.word	0x08023d58
 80044a4:	20000104 	.word	0x20000104
 80044a8:	08021fbc 	.word	0x08021fbc
 80044ac:	08023d68 	.word	0x08023d68
 80044b0:	08021fb4 	.word	0x08021fb4
 80044b4:	20002008 	.word	0x20002008
 80044b8:	200000c8 	.word	0x200000c8
 80044bc:	08023d48 	.word	0x08023d48
 80044c0:	08021fb8 	.word	0x08021fb8
 80044c4:	08021e78 	.word	0x08021e78
 80044c8:	2000008c 	.word	0x2000008c
 80044cc:	20000124 	.word	0x20000124
							case type_UINT16: break;
							case type_UINT32: Set_uint32((uint32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80044d0:	88bb      	ldrh	r3, [r7, #4]
 80044d2:	4a2d      	ldr	r2, [pc, #180]	; (8004588 <Parser_process+0x738>)
 80044d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d8:	4618      	mov	r0, r3
 80044da:	2203      	movs	r2, #3
 80044dc:	88bb      	ldrh	r3, [r7, #4]
 80044de:	492b      	ldr	r1, [pc, #172]	; (800458c <Parser_process+0x73c>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	4413      	add	r3, r2
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3302      	adds	r3, #2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	f7ff fa14 	bl	8003918 <Set_uint32>
 80044f0:	e025      	b.n	800453e <Parser_process+0x6ee>
							case type_DOUBLE: break;
							case type_FLOAT: Set_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80044f2:	88bb      	ldrh	r3, [r7, #4]
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <Parser_process+0x738>)
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	4618      	mov	r0, r3
 80044fc:	2203      	movs	r2, #3
 80044fe:	88bb      	ldrh	r3, [r7, #4]
 8004500:	4922      	ldr	r1, [pc, #136]	; (800458c <Parser_process+0x73c>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	4413      	add	r3, r2
 8004506:	b2db      	uxtb	r3, r3
 8004508:	3302      	adds	r3, #2
 800450a:	b2db      	uxtb	r3, r3
 800450c:	4619      	mov	r1, r3
 800450e:	f7ff fa4b 	bl	80039a8 <Set_float>
 8004512:	e014      	b.n	800453e <Parser_process+0x6ee>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <Parser_process+0x740>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2209      	movs	r2, #9
 800451a:	b292      	uxth	r2, r2
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f015 f8a8 	bl	8019674 <CDC_Transmit_FS>
 8004524:	f7fe fef8 	bl	8003318 <clear_buf>
 8004528:	e009      	b.n	800453e <Parser_process+0x6ee>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800452a:	4b19      	ldr	r3, [pc, #100]	; (8004590 <Parser_process+0x740>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2209      	movs	r2, #9
 8004530:	b292      	uxth	r2, r2
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f015 f89d 	bl	8019674 <CDC_Transmit_FS>
 800453a:	e000      	b.n	800453e <Parser_process+0x6ee>
							case type_UINT16: break;
 800453c:	bf00      	nop
					}
					clear_buf(); break;
 800453e:	f7fe feeb 	bl	8003318 <clear_buf>
 8004542:	e011      	b.n	8004568 <Parser_process+0x718>


				case SAVE_CMD:
					CDC_Transmit_FS((unsigned char*)"FLASH MEMORY IS BROKEN!!", 24);
 8004544:	2118      	movs	r1, #24
 8004546:	4813      	ldr	r0, [pc, #76]	; (8004594 <Parser_process+0x744>)
 8004548:	f015 f894 	bl	8019674 <CDC_Transmit_FS>
					clear_buf(); break;
 800454c:	f7fe fee4 	bl	8003318 <clear_buf>
 8004550:	e00a      	b.n	8004568 <Parser_process+0x718>

				default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <Parser_process+0x740>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2209      	movs	r2, #9
 8004558:	b292      	uxth	r2, r2
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f015 f889 	bl	8019674 <CDC_Transmit_FS>
 8004562:	f7fe fed9 	bl	8003318 <clear_buf>
 8004566:	bf00      	nop

			}
			CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8004568:	2102      	movs	r1, #2
 800456a:	480b      	ldr	r0, [pc, #44]	; (8004598 <Parser_process+0x748>)
 800456c:	f015 f882 	bl	8019674 <CDC_Transmit_FS>
			USBTimeOutRX=-1;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <Parser_process+0x74c>)
 8004572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004576:	801a      	strh	r2, [r3, #0]
		}
	}
	sleep(5);
 8004578:	2005      	movs	r0, #5
 800457a:	f7fe fe9f 	bl	80032bc <sleep>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000008c 	.word	0x2000008c
 800458c:	08023d48 	.word	0x08023d48
 8004590:	20000124 	.word	0x20000124
 8004594:	08021fc0 	.word	0x08021fc0
 8004598:	08021e78 	.word	0x08021e78
 800459c:	2000015c 	.word	0x2000015c

080045a0 <SPI1_Send>:
w25_info_t  w25_info;


//-------------------------------------------------------------
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi3, dt, cnt, 5000);
 80045ac:	887a      	ldrh	r2, [r7, #2]
 80045ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4803      	ldr	r0, [pc, #12]	; (80045c4 <SPI1_Send+0x24>)
 80045b6:	f009 fc2c 	bl	800de12 <HAL_SPI_Transmit>
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20006304 	.word	0x20006304

080045c8 <SPI1_Recv>:
//-------------------------------------------------------------
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi3, dt, cnt, 5000);
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4803      	ldr	r0, [pc, #12]	; (80045ec <SPI1_Recv+0x24>)
 80045de:	f009 fd86 	bl	800e0ee <HAL_SPI_Receive>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20006304 	.word	0x20006304

080045f0 <W25_WriteEnable>:
//-------------------------------------------------------------

void W25_WriteEnable(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
	uint8_t command[1];
	cs_set();
 80045f6:	2200      	movs	r2, #0
 80045f8:	2104      	movs	r1, #4
 80045fa:	4809      	ldr	r0, [pc, #36]	; (8004620 <W25_WriteEnable+0x30>)
 80045fc:	f005 fdec 	bl	800a1d8 <HAL_GPIO_WritePin>
	command[0]=0x06;
 8004600:	2306      	movs	r3, #6
 8004602:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	2101      	movs	r1, #1
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ffc9 	bl	80045a0 <SPI1_Send>
	cs_reset();
 800460e:	2201      	movs	r2, #1
 8004610:	2104      	movs	r1, #4
 8004612:	4803      	ldr	r0, [pc, #12]	; (8004620 <W25_WriteEnable+0x30>)
 8004614:	f005 fde0 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	48000c00 	.word	0x48000c00

08004624 <W25_Reset>:
	SPI1_Send(command, 1);
	cs_reset();
}

void W25_Reset (void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
	uint8_t command[1];
	while ((W25_Read_Status(0xC0)&0x01)==1);
 800462a:	bf00      	nop
 800462c:	20c0      	movs	r0, #192	; 0xc0
 800462e:	f000 f81d 	bl	800466c <W25_Read_Status>
 8004632:	4603      	mov	r3, r0
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d0f7      	beq.n	800462c <W25_Reset+0x8>
	cs_set();
 800463c:	2200      	movs	r2, #0
 800463e:	2104      	movs	r1, #4
 8004640:	4809      	ldr	r0, [pc, #36]	; (8004668 <W25_Reset+0x44>)
 8004642:	f005 fdc9 	bl	800a1d8 <HAL_GPIO_WritePin>
	command[0] = W25_RESET;
 8004646:	23ff      	movs	r3, #255	; 0xff
 8004648:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	2101      	movs	r1, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ffa6 	bl	80045a0 <SPI1_Send>
	cs_reset();
 8004654:	2201      	movs	r2, #1
 8004656:	2104      	movs	r1, #4
 8004658:	4803      	ldr	r0, [pc, #12]	; (8004668 <W25_Reset+0x44>)
 800465a:	f005 fdbd 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	48000c00 	.word	0x48000c00

0800466c <W25_Read_Status>:
//-------------------------------------------------------------

uint8_t W25_Read_Status(uint8_t StatusRegAdd)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint8_t data[1];
	command[0] = 0x0F; 		// Read Status Register
 8004676:	230f      	movs	r3, #15
 8004678:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	737b      	strb	r3, [r7, #13]
	cs_set();
 800467e:	2200      	movs	r2, #0
 8004680:	2104      	movs	r1, #4
 8004682:	480c      	ldr	r0, [pc, #48]	; (80046b4 <W25_Read_Status+0x48>)
 8004684:	f005 fda8 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	2102      	movs	r1, #2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff86 	bl	80045a0 <SPI1_Send>
	SPI1_Recv(data, 1);
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff94 	bl	80045c8 <SPI1_Recv>
	cs_reset();
 80046a0:	2201      	movs	r2, #1
 80046a2:	2104      	movs	r1, #4
 80046a4:	4803      	ldr	r0, [pc, #12]	; (80046b4 <W25_Read_Status+0x48>)
 80046a6:	f005 fd97 	bl	800a1d8 <HAL_GPIO_WritePin>
	return data[0];
 80046aa:	7a3b      	ldrb	r3, [r7, #8]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	48000c00 	.word	0x48000c00

080046b8 <W25_Write_Status>:

void W25_Write_Status(uint8_t StatusRegAdd, uint8_t data)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	460a      	mov	r2, r1
 80046c2:	71fb      	strb	r3, [r7, #7]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71bb      	strb	r3, [r7, #6]
	uint8_t command[3];
	command[0] = 0x1F; 		// Write Status Register
 80046c8:	231f      	movs	r3, #31
 80046ca:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	737b      	strb	r3, [r7, #13]
	command[2] = data;
 80046d0:	79bb      	ldrb	r3, [r7, #6]
 80046d2:	73bb      	strb	r3, [r7, #14]
	cs_set();
 80046d4:	2200      	movs	r2, #0
 80046d6:	2104      	movs	r1, #4
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <W25_Write_Status+0x44>)
 80046da:	f005 fd7d 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 80046de:	f107 030c 	add.w	r3, r7, #12
 80046e2:	2103      	movs	r1, #3
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff5b 	bl	80045a0 <SPI1_Send>
	cs_reset();
 80046ea:	2201      	movs	r2, #1
 80046ec:	2104      	movs	r1, #4
 80046ee:	4803      	ldr	r0, [pc, #12]	; (80046fc <W25_Write_Status+0x44>)
 80046f0:	f005 fd72 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	48000c00 	.word	0x48000c00

08004700 <W25_Block_Erase>:


void W25_Block_Erase(uint32_t page_addr)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	uint8_t command[4];

	W25_WriteEnable();
 8004708:	f7ff ff72 	bl	80045f0 <W25_WriteEnable>

	command[0] = 0xD8;						// Block erase
 800470c:	23d8      	movs	r3, #216	; 0xd8
 800470e:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;						// Dummy byte
 8004710:	2300      	movs	r3, #0
 8004712:	737b      	strb	r3, [r7, #13]
	command[2] = (page_addr >> 8) & 0xFF;	// Start page address
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	b2db      	uxtb	r3, r3
 800471a:	73bb      	strb	r3, [r7, #14]
	command[3] = page_addr & 0xFF;			// Start page address
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	73fb      	strb	r3, [r7, #15]

	cs_set();
 8004722:	2200      	movs	r2, #0
 8004724:	2104      	movs	r1, #4
 8004726:	480e      	ldr	r0, [pc, #56]	; (8004760 <W25_Block_Erase+0x60>)
 8004728:	f005 fd56 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800472c:	f107 030c 	add.w	r3, r7, #12
 8004730:	2104      	movs	r1, #4
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff34 	bl	80045a0 <SPI1_Send>
	cs_reset();
 8004738:	2201      	movs	r2, #1
 800473a:	2104      	movs	r1, #4
 800473c:	4808      	ldr	r0, [pc, #32]	; (8004760 <W25_Block_Erase+0x60>)
 800473e:	f005 fd4b 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(3)&0x01)==1);
 8004742:	bf00      	nop
 8004744:	2003      	movs	r0, #3
 8004746:	f7ff ff91 	bl	800466c <W25_Read_Status>
 800474a:	4603      	mov	r3, r0
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b01      	cmp	r3, #1
 8004752:	d0f7      	beq.n	8004744 <W25_Block_Erase+0x44>
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	48000c00 	.word	0x48000c00

08004764 <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//-------------------------------------------------------------
uint32_t W25_Read_ID(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
	uint8_t command[4];
	uint8_t dt[3];
	command[0] = W25_GET_JEDEC_ID;
 800476a:	239f      	movs	r3, #159	; 0x9f
 800476c:	713b      	strb	r3, [r7, #4]
	command[1] = 0x00;
 800476e:	2300      	movs	r3, #0
 8004770:	717b      	strb	r3, [r7, #5]
	cs_set();
 8004772:	2200      	movs	r2, #0
 8004774:	2104      	movs	r1, #4
 8004776:	480e      	ldr	r0, [pc, #56]	; (80047b0 <W25_Read_ID+0x4c>)
 8004778:	f005 fd2e 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	2102      	movs	r1, #2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff0d 	bl	80045a0 <SPI1_Send>
	SPI1_Recv(dt,3);
 8004786:	463b      	mov	r3, r7
 8004788:	2103      	movs	r1, #3
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff1c 	bl	80045c8 <SPI1_Recv>
	cs_reset();
 8004790:	2201      	movs	r2, #1
 8004792:	2104      	movs	r1, #4
 8004794:	4806      	ldr	r0, [pc, #24]	; (80047b0 <W25_Read_ID+0x4c>)
 8004796:	f005 fd1f 	bl	800a1d8 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800479a:	783b      	ldrb	r3, [r7, #0]
 800479c:	041a      	lsls	r2, r3, #16
 800479e:	787b      	ldrb	r3, [r7, #1]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	4313      	orrs	r3, r2
 80047a4:	78ba      	ldrb	r2, [r7, #2]
 80047a6:	4313      	orrs	r3, r2
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	48000c00 	.word	0x48000c00

080047b4 <W25_ReadBuf>:


void W25_ReadBuf(uint8_t*data, uint16_t blk_addr)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t address=(blk_addr>>2)*64;
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	019b      	lsls	r3, r3, #6
 80047c8:	81fb      	strh	r3, [r7, #14]
	uint16_t column=(blk_addr&0x03)*512;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	81bb      	strh	r3, [r7, #12]

	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047d6:	bf00      	nop
 80047d8:	20c0      	movs	r0, #192	; 0xc0
 80047da:	f7ff ff47 	bl	800466c <W25_Read_Status>
 80047de:	4603      	mov	r3, r0
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d0f7      	beq.n	80047d8 <W25_ReadBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80047e8:	2313      	movs	r3, #19
 80047ea:	723b      	strb	r3, [r7, #8]
	command[1] = W25_DUMMY;
 80047ec:	2300      	movs	r3, #0
 80047ee:	727b      	strb	r3, [r7, #9]
	command[2] = (address >> 8) & 0xFF;
 80047f0:	89fb      	ldrh	r3, [r7, #14]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	72bb      	strb	r3, [r7, #10]
	command[3] = address & 0xFF;
 80047fa:	89fb      	ldrh	r3, [r7, #14]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	72fb      	strb	r3, [r7, #11]
	cs_set();
 8004800:	2200      	movs	r2, #0
 8004802:	2104      	movs	r1, #4
 8004804:	4822      	ldr	r0, [pc, #136]	; (8004890 <W25_ReadBuf+0xdc>)
 8004806:	f005 fce7 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800480a:	f107 0308 	add.w	r3, r7, #8
 800480e:	2104      	movs	r1, #4
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fec5 	bl	80045a0 <SPI1_Send>
	cs_reset();
 8004816:	2201      	movs	r2, #1
 8004818:	2104      	movs	r1, #4
 800481a:	481d      	ldr	r0, [pc, #116]	; (8004890 <W25_ReadBuf+0xdc>)
 800481c:	f005 fcdc 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004820:	bf00      	nop
 8004822:	20c0      	movs	r0, #192	; 0xc0
 8004824:	f7ff ff22 	bl	800466c <W25_Read_Status>
 8004828:	4603      	mov	r3, r0
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d0f7      	beq.n	8004822 <W25_ReadBuf+0x6e>

	// Read from buffer
	command[0] = W25_FAST_READ;
 8004832:	230b      	movs	r3, #11
 8004834:	723b      	strb	r3, [r7, #8]
	command[1] = (column >> 8) & 0xFF;
 8004836:	89bb      	ldrh	r3, [r7, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b29b      	uxth	r3, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	727b      	strb	r3, [r7, #9]
	command[2] = column & 0xFF;
 8004840:	89bb      	ldrh	r3, [r7, #12]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	72bb      	strb	r3, [r7, #10]
	command[3] = W25_DUMMY;
 8004846:	2300      	movs	r3, #0
 8004848:	72fb      	strb	r3, [r7, #11]
	cs_set();
 800484a:	2200      	movs	r2, #0
 800484c:	2104      	movs	r1, #4
 800484e:	4810      	ldr	r0, [pc, #64]	; (8004890 <W25_ReadBuf+0xdc>)
 8004850:	f005 fcc2 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004854:	f107 0308 	add.w	r3, r7, #8
 8004858:	2104      	movs	r1, #4
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fea0 	bl	80045a0 <SPI1_Send>
	SPI1_Recv(data, 512);
 8004860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff feaf 	bl	80045c8 <SPI1_Recv>
	cs_reset();
 800486a:	2201      	movs	r2, #1
 800486c:	2104      	movs	r1, #4
 800486e:	4808      	ldr	r0, [pc, #32]	; (8004890 <W25_ReadBuf+0xdc>)
 8004870:	f005 fcb2 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004874:	bf00      	nop
 8004876:	20c0      	movs	r0, #192	; 0xc0
 8004878:	f7ff fef8 	bl	800466c <W25_Read_Status>
 800487c:	4603      	mov	r3, r0
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d0f7      	beq.n	8004876 <W25_ReadBuf+0xc2>
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	48000c00 	.word	0x48000c00

08004894 <W25_WriteBuf>:

void W25_WriteBuf(uint8_t*data, uint16_t blk_addr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t i;
	uint16_t address=(blk_addr>>2)*64;
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	019b      	lsls	r3, r3, #6
 80048a8:	82bb      	strh	r3, [r7, #20]
	uint16_t column=(blk_addr&0x03)*512;
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	025b      	lsls	r3, r3, #9
 80048b4:	827b      	strh	r3, [r7, #18]

	// Прочитаем блок 2048 прежде чем стереть
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80048b6:	bf00      	nop
 80048b8:	20c0      	movs	r0, #192	; 0xc0
 80048ba:	f7ff fed7 	bl	800466c <W25_Read_Status>
 80048be:	4603      	mov	r3, r0
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d0f7      	beq.n	80048b8 <W25_WriteBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80048c8:	2313      	movs	r3, #19
 80048ca:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80048cc:	2300      	movs	r3, #0
 80048ce:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;
 80048d0:	8abb      	ldrh	r3, [r7, #20]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;
 80048da:	8abb      	ldrh	r3, [r7, #20]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80048e0:	2200      	movs	r2, #0
 80048e2:	2104      	movs	r1, #4
 80048e4:	4857      	ldr	r0, [pc, #348]	; (8004a44 <W25_WriteBuf+0x1b0>)
 80048e6:	f005 fc77 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80048ea:	f107 030c 	add.w	r3, r7, #12
 80048ee:	2104      	movs	r1, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fe55 	bl	80045a0 <SPI1_Send>
	cs_reset();
 80048f6:	2201      	movs	r2, #1
 80048f8:	2104      	movs	r1, #4
 80048fa:	4852      	ldr	r0, [pc, #328]	; (8004a44 <W25_WriteBuf+0x1b0>)
 80048fc:	f005 fc6c 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004900:	bf00      	nop
 8004902:	20c0      	movs	r0, #192	; 0xc0
 8004904:	f7ff feb2 	bl	800466c <W25_Read_Status>
 8004908:	4603      	mov	r3, r0
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d0f7      	beq.n	8004902 <W25_WriteBuf+0x6e>
	// Read from buffer
	command[0] = W25_FAST_READ;
 8004912:	230b      	movs	r3, #11
 8004914:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	73bb      	strb	r3, [r7, #14]
	command[3] = W25_DUMMY;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004922:	2200      	movs	r2, #0
 8004924:	2104      	movs	r1, #4
 8004926:	4847      	ldr	r0, [pc, #284]	; (8004a44 <W25_WriteBuf+0x1b0>)
 8004928:	f005 fc56 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	2104      	movs	r1, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fe34 	bl	80045a0 <SPI1_Send>
	SPI1_Recv(buf, 2048);
 8004938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800493c:	4842      	ldr	r0, [pc, #264]	; (8004a48 <W25_WriteBuf+0x1b4>)
 800493e:	f7ff fe43 	bl	80045c8 <SPI1_Recv>
	cs_reset();
 8004942:	2201      	movs	r2, #1
 8004944:	2104      	movs	r1, #4
 8004946:	483f      	ldr	r0, [pc, #252]	; (8004a44 <W25_WriteBuf+0x1b0>)
 8004948:	f005 fc46 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 800494c:	bf00      	nop
 800494e:	20c0      	movs	r0, #192	; 0xc0
 8004950:	f7ff fe8c 	bl	800466c <W25_Read_Status>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d0f7      	beq.n	800494e <W25_WriteBuf+0xba>

	for(i=0;i<512;i++)buf[column+i]=data[i];
 800495e:	2300      	movs	r3, #0
 8004960:	82fb      	strh	r3, [r7, #22]
 8004962:	e00b      	b.n	800497c <W25_WriteBuf+0xe8>
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	441a      	add	r2, r3
 800496a:	8a79      	ldrh	r1, [r7, #18]
 800496c:	8afb      	ldrh	r3, [r7, #22]
 800496e:	440b      	add	r3, r1
 8004970:	7811      	ldrb	r1, [r2, #0]
 8004972:	4a35      	ldr	r2, [pc, #212]	; (8004a48 <W25_WriteBuf+0x1b4>)
 8004974:	54d1      	strb	r1, [r2, r3]
 8004976:	8afb      	ldrh	r3, [r7, #22]
 8004978:	3301      	adds	r3, #1
 800497a:	82fb      	strh	r3, [r7, #22]
 800497c:	8afb      	ldrh	r3, [r7, #22]
 800497e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004982:	d3ef      	bcc.n	8004964 <W25_WriteBuf+0xd0>

	//memcpy(buf[column], data, 512);

	// Сотрем блок 128кБ
	W25_Block_Erase(address);
 8004984:	8abb      	ldrh	r3, [r7, #20]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff feba 	bl	8004700 <W25_Block_Erase>

	while ((W25_Read_Status(0xC0)&0x01)==1);
 800498c:	bf00      	nop
 800498e:	20c0      	movs	r0, #192	; 0xc0
 8004990:	f7ff fe6c 	bl	800466c <W25_Read_Status>
 8004994:	4603      	mov	r3, r0
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d0f7      	beq.n	800498e <W25_WriteBuf+0xfa>
	// Пишем в буфер
	W25_WriteEnable();
 800499e:	f7ff fe27 	bl	80045f0 <W25_WriteEnable>
	command[0] = PROGRAM_DATA_LOAD;
 80049a2:	2302      	movs	r3, #2
 80049a4:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73bb      	strb	r3, [r7, #14]
	cs_set();
 80049ae:	2200      	movs	r2, #0
 80049b0:	2104      	movs	r1, #4
 80049b2:	4824      	ldr	r0, [pc, #144]	; (8004a44 <W25_WriteBuf+0x1b0>)
 80049b4:	f005 fc10 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	2103      	movs	r1, #3
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fdee 	bl	80045a0 <SPI1_Send>
	SPI1_Send(buf, 2048);
 80049c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049c8:	481f      	ldr	r0, [pc, #124]	; (8004a48 <W25_WriteBuf+0x1b4>)
 80049ca:	f7ff fde9 	bl	80045a0 <SPI1_Send>
	cs_reset();
 80049ce:	2201      	movs	r2, #1
 80049d0:	2104      	movs	r1, #4
 80049d2:	481c      	ldr	r0, [pc, #112]	; (8004a44 <W25_WriteBuf+0x1b0>)
 80049d4:	f005 fc00 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80049d8:	bf00      	nop
 80049da:	20c0      	movs	r0, #192	; 0xc0
 80049dc:	f7ff fe46 	bl	800466c <W25_Read_Status>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d0f7      	beq.n	80049da <W25_WriteBuf+0x146>

	// Переносим во внутреннюю память
	W25_WriteEnable();
 80049ea:	f7ff fe01 	bl	80045f0 <W25_WriteEnable>
	command[0] = PROGRAM_EXECUTE;
 80049ee:	2310      	movs	r3, #16
 80049f0:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80049f2:	2300      	movs	r3, #0
 80049f4:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;	// Адрес страницы
 80049f6:	8abb      	ldrh	r3, [r7, #20]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;			// Адрес страницы
 8004a00:	8abb      	ldrh	r3, [r7, #20]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004a06:	2200      	movs	r2, #0
 8004a08:	2104      	movs	r1, #4
 8004a0a:	480e      	ldr	r0, [pc, #56]	; (8004a44 <W25_WriteBuf+0x1b0>)
 8004a0c:	f005 fbe4 	bl	800a1d8 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004a10:	f107 030c 	add.w	r3, r7, #12
 8004a14:	2104      	movs	r1, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fdc2 	bl	80045a0 <SPI1_Send>
	cs_reset();
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	2104      	movs	r1, #4
 8004a20:	4808      	ldr	r0, [pc, #32]	; (8004a44 <W25_WriteBuf+0x1b0>)
 8004a22:	f005 fbd9 	bl	800a1d8 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004a26:	bf00      	nop
 8004a28:	20c0      	movs	r0, #192	; 0xc0
 8004a2a:	f7ff fe1f 	bl	800466c <W25_Read_Status>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d0f7      	beq.n	8004a28 <W25_WriteBuf+0x194>
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	48000c00 	.word	0x48000c00
 8004a48:	20006368 	.word	0x20006368

08004a4c <W25_Init>:

//-------------------------------------------------------------
void W25_Init(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8004a52:	2064      	movs	r0, #100	; 0x64
 8004a54:	f003 f8d6 	bl	8007c04 <HAL_Delay>
	W25_Reset();
 8004a58:	f7ff fde4 	bl	8004624 <W25_Reset>
	HAL_Delay(100);
 8004a5c:	2064      	movs	r0, #100	; 0x64
 8004a5e:	f003 f8d1 	bl	8007c04 <HAL_Delay>
	unsigned int id = W25_Read_ID();
 8004a62:	f7ff fe7f 	bl	8004764 <W25_Read_ID>
 8004a66:	6078      	str	r0, [r7, #4]

	if(id!=0xEFAA21)ERROR_REG|=(0x01<<Memory_err);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <W25_Init+0x68>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d005      	beq.n	8004a7c <W25_Init+0x30>
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <W25_Init+0x6c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	4a0f      	ldr	r2, [pc, #60]	; (8004ab8 <W25_Init+0x6c>)
 8004a7a:	6013      	str	r3, [r2, #0]

	w25_info.PageSize=2048;
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <W25_Init+0x70>)
 8004a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a82:	801a      	strh	r2, [r3, #0]
	w25_info.PageCount=0xFFFF;
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <W25_Init+0x70>)
 8004a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a8a:	605a      	str	r2, [r3, #4]
	w25_info.BlockSize=w25_info.PageSize*64;
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <W25_Init+0x70>)
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <W25_Init+0x70>)
 8004a96:	611a      	str	r2, [r3, #16]
	w25_info.NumKB=(w25_info.BlockSize*128)/8;
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <W25_Init+0x70>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	01db      	lsls	r3, r3, #7
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	4a06      	ldr	r2, [pc, #24]	; (8004abc <W25_Init+0x70>)
 8004aa2:	6193      	str	r3, [r2, #24]

	W25_Write_Status(0xA0, 0x00);
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	20a0      	movs	r0, #160	; 0xa0
 8004aa8:	f7ff fe06 	bl	80046b8 <W25_Write_Status>
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	00efaa21 	.word	0x00efaa21
 8004ab8:	20000820 	.word	0x20000820
 8004abc:	200062e4 	.word	0x200062e4

08004ac0 <Approximation_MC110>:
double Temperature_correction(double uncorrect_Pressure, double affect_temp);



void Approximation_MC110(int32_t meas_data, int32_t power_data)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	double LSB;
	double temp_diff;

	int32_t ADC_MEAS_ZERO = meas_data-zero_ADC[0];
 8004aca:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <Approximation_MC110+0x108>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	61fb      	str	r3, [r7, #28]

	// Считаем LSB
	LSB=0.00000000028857241176*(double)ADC_MEAS_ZERO+1.41200835380823000000;
 8004ad4:	69f8      	ldr	r0, [r7, #28]
 8004ad6:	f7fb fd35 	bl	8000544 <__aeabi_i2d>
 8004ada:	a32f      	add	r3, pc, #188	; (adr r3, 8004b98 <Approximation_MC110+0xd8>)
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f7fb fd9a 	bl	8000618 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	a32c      	add	r3, pc, #176	; (adr r3, 8004ba0 <Approximation_MC110+0xe0>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fbdb 	bl	80002ac <__adddf3>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим температуру
	Temperature2=0.000128471469464*(double)power_data-420.277295988542;
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f7fb fd20 	bl	8000544 <__aeabi_i2d>
 8004b04:	a328      	add	r3, pc, #160	; (adr r3, 8004ba8 <Approximation_MC110+0xe8>)
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	f7fb fd85 	bl	8000618 <__aeabi_dmul>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	a326      	add	r3, pc, #152	; (adr r3, 8004bb0 <Approximation_MC110+0xf0>)
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f7fb fbc4 	bl	80002a8 <__aeabi_dsub>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4929      	ldr	r1, [pc, #164]	; (8004bcc <Approximation_MC110+0x10c>)
 8004b26:	e9c1 2300 	strd	r2, r3, [r1]
	// Дифференциал температуры
	temp_diff=Temperature2-cal_temperature;
 8004b2a:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <Approximation_MC110+0x10c>)
 8004b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <Approximation_MC110+0x110>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fbb7 	bl	80002a8 <__aeabi_dsub>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Находим термостабилизированное LSB
	LSB=LSB-(temp_diff*0.0000418240259295);
 8004b42:	a31d      	add	r3, pc, #116	; (adr r3, 8004bb8 <Approximation_MC110+0xf8>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b4c:	f7fb fd64 	bl	8000618 <__aeabi_dmul>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b58:	f7fb fba6 	bl	80002a8 <__aeabi_dsub>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим давление
	Pressure=(LSB*(double)ADC_MEAS_ZERO)/1000000.0;
 8004b64:	69f8      	ldr	r0, [r7, #28]
 8004b66:	f7fb fced 	bl	8000544 <__aeabi_i2d>
 8004b6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b6e:	f7fb fd53 	bl	8000618 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	a311      	add	r3, pc, #68	; (adr r3, 8004bc0 <Approximation_MC110+0x100>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fe74 	bl	800086c <__aeabi_ddiv>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4912      	ldr	r1, [pc, #72]	; (8004bd4 <Approximation_MC110+0x114>)
 8004b8a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b8e:	bf00      	nop
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	9b278484 	.word	0x9b278484
 8004b9c:	3df3d49e 	.word	0x3df3d49e
 8004ba0:	12548ff4 	.word	0x12548ff4
 8004ba4:	3ff69796 	.word	0x3ff69796
 8004ba8:	8506b9ef 	.word	0x8506b9ef
 8004bac:	3f20d6c9 	.word	0x3f20d6c9
 8004bb0:	cdeb2199 	.word	0xcdeb2199
 8004bb4:	407a446f 	.word	0x407a446f
 8004bb8:	96a39d76 	.word	0x96a39d76
 8004bbc:	3f05ed86 	.word	0x3f05ed86
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	412e8480 	.word	0x412e8480
 8004bc8:	20002200 	.word	0x20002200
 8004bcc:	20000800 	.word	0x20000800
 8004bd0:	20000250 	.word	0x20000250
 8004bd4:	20002218 	.word	0x20002218

08004bd8 <Calculate>:



void Calculate(int32_t adc_press, int32_t adc_pow)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	static double Press_old=0;
	// Считаем давлени
	Test_Pressure = Approximation_pressure(adc_press);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f85a 	bl	8004c9c <Approximation_pressure>
 8004be8:	eeb0 7a40 	vmov.f32	s14, s0
 8004bec:	eef0 7a60 	vmov.f32	s15, s1
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <Calculate+0xb4>)
 8004bf2:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температурный коэффициент
	Temperature_coeff_25 = Approximation_Tcoef(adc_press, adc_pow);
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f921 	bl	8004e40 <Approximation_Tcoef>
 8004bfe:	eeb0 7a40 	vmov.f32	s14, s0
 8004c02:	eef0 7a60 	vmov.f32	s15, s1
 8004c06:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <Calculate+0xb8>)
 8004c08:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температуру
	Temperature = Approximation_temperature(Temperature_coeff_25);
 8004c0c:	4b20      	ldr	r3, [pc, #128]	; (8004c90 <Calculate+0xb8>)
 8004c0e:	ed93 7b00 	vldr	d7, [r3]
 8004c12:	eeb0 0a47 	vmov.f32	s0, s14
 8004c16:	eef0 0a67 	vmov.f32	s1, s15
 8004c1a:	f000 f9db 	bl	8004fd4 <Approximation_temperature>
 8004c1e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c22:	eef0 7a60 	vmov.f32	s15, s1
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <Calculate+0xbc>)
 8004c28:	ed83 7b00 	vstr	d7, [r3]
	// Корректируем давление по температуре
	Test_Pressure = (Temperature_correction(Test_Pressure, Temperature) + Press_old)/2.0;
 8004c2c:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <Calculate+0xb4>)
 8004c2e:	ed93 7b00 	vldr	d7, [r3]
 8004c32:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <Calculate+0xbc>)
 8004c34:	ed93 6b00 	vldr	d6, [r3]
 8004c38:	eeb0 1a46 	vmov.f32	s2, s12
 8004c3c:	eef0 1a66 	vmov.f32	s3, s13
 8004c40:	eeb0 0a47 	vmov.f32	s0, s14
 8004c44:	eef0 0a67 	vmov.f32	s1, s15
 8004c48:	f000 fa80 	bl	800514c <Temperature_correction>
 8004c4c:	ec51 0b10 	vmov	r0, r1, d0
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <Calculate+0xc0>)
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f7fb fb29 	bl	80002ac <__adddf3>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c6a:	f7fb fdff 	bl	800086c <__aeabi_ddiv>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4906      	ldr	r1, [pc, #24]	; (8004c8c <Calculate+0xb4>)
 8004c74:	e9c1 2300 	strd	r2, r3, [r1]
	Press_old = Test_Pressure;
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <Calculate+0xb4>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	4906      	ldr	r1, [pc, #24]	; (8004c98 <Calculate+0xc0>)
 8004c80:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20002220 	.word	0x20002220
 8004c90:	20000050 	.word	0x20000050
 8004c94:	20000818 	.word	0x20000818
 8004c98:	20000858 	.word	0x20000858

08004c9c <Approximation_pressure>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация давления
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_pressure(int32_t current_ADC_measure)
{
 8004c9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ca0:	b08c      	sub	sp, #48	; 0x30
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
	double RES=0, a, b;
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004cba:	4b5e      	ldr	r3, [pc, #376]	; (8004e34 <Approximation_pressure+0x198>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <Approximation_pressure+0x38>
 8004cc2:	4b5d      	ldr	r3, [pc, #372]	; (8004e38 <Approximation_pressure+0x19c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	441a      	add	r2, r3
 8004cca:	4b5a      	ldr	r3, [pc, #360]	; (8004e34 <Approximation_pressure+0x198>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	e001      	b.n	8004cd8 <Approximation_pressure+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if(ADC_MEAS_ZERO>ADC_measure_cal_points[i])index++;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e00c      	b.n	8004cf8 <Approximation_pressure+0x5c>
 8004cde:	4a56      	ldr	r2, [pc, #344]	; (8004e38 <Approximation_pressure+0x19c>)
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	dd02      	ble.n	8004cf2 <Approximation_pressure+0x56>
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	3301      	adds	r3, #1
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b09      	cmp	r3, #9
 8004cfc:	ddef      	ble.n	8004cde <Approximation_pressure+0x42>

	if(index==0) a = (Pressure_cal_points[index+1] - Pressure_cal_points[index]) / (double)(ADC_measure_cal_points[index+1] - ADC_measure_cal_points[index]);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d12a      	bne.n	8004d5a <Approximation_pressure+0xbe>
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	3301      	adds	r3, #1
 8004d08:	4a4c      	ldr	r2, [pc, #304]	; (8004e3c <Approximation_pressure+0x1a0>)
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d12:	4a4a      	ldr	r2, [pc, #296]	; (8004e3c <Approximation_pressure+0x1a0>)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb fac3 	bl	80002a8 <__aeabi_dsub>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4614      	mov	r4, r2
 8004d28:	461d      	mov	r5, r3
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <Approximation_pressure+0x19c>)
 8004d30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d34:	4940      	ldr	r1, [pc, #256]	; (8004e38 <Approximation_pressure+0x19c>)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fc00 	bl	8000544 <__aeabi_i2d>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f7fb fd8e 	bl	800086c <__aeabi_ddiv>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004d58:	e033      	b.n	8004dc2 <Approximation_pressure+0x126>
	else a = (Pressure_cal_points[index]-Pressure_cal_points[index-1]) / ((double)ADC_measure_cal_points[index]-(double)ADC_measure_cal_points[index-1]);
 8004d5a:	4a38      	ldr	r2, [pc, #224]	; (8004e3c <Approximation_pressure+0x1a0>)
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4a34      	ldr	r2, [pc, #208]	; (8004e3c <Approximation_pressure+0x1a0>)
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4413      	add	r3, r2
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fa98 	bl	80002a8 <__aeabi_dsub>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	4699      	mov	r9, r3
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <Approximation_pressure+0x19c>)
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fb fbdb 	bl	8000544 <__aeabi_i2d>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a28      	ldr	r2, [pc, #160]	; (8004e38 <Approximation_pressure+0x19c>)
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fbd1 	bl	8000544 <__aeabi_i2d>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4620      	mov	r0, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7fb fa7d 	bl	80002a8 <__aeabi_dsub>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4640      	mov	r0, r8
 8004db4:	4649      	mov	r1, r9
 8004db6:	f7fb fd59 	bl	800086c <__aeabi_ddiv>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	b = (double)Pressure_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004dc2:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <Approximation_pressure+0x1a0>)
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004dce:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <Approximation_pressure+0x19c>)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb fbb4 	bl	8000544 <__aeabi_i2d>
 8004ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de0:	f7fb fc1a 	bl	8000618 <__aeabi_dmul>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fa5c 	bl	80002a8 <__aeabi_dsub>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004df8:	6a38      	ldr	r0, [r7, #32]
 8004dfa:	f7fb fba3 	bl	8000544 <__aeabi_i2d>
 8004dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e02:	f7fb fc09 	bl	8000618 <__aeabi_dmul>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e0e:	f7fb fa4d 	bl	80002ac <__adddf3>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e22:	eeb0 0a47 	vmov.f32	s0, s14
 8004e26:	eef0 0a67 	vmov.f32	s1, s15
 8004e2a:	3730      	adds	r7, #48	; 0x30
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e32:	bf00      	nop
 8004e34:	20002200 	.word	0x20002200
 8004e38:	200001b8 	.word	0x200001b8
 8004e3c:	20000160 	.word	0x20000160

08004e40 <Approximation_Tcoef>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температурного коэффициента
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_Tcoef(int32_t current_ADC_measure, int32_t current_ADC_power)
{
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	double RES = 0, a, b;
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004e5e:	4b5a      	ldr	r3, [pc, #360]	; (8004fc8 <Approximation_Tcoef+0x188>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <Approximation_Tcoef+0x38>
 8004e66:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	441a      	add	r2, r3
 8004e6e:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <Approximation_Tcoef+0x188>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	e001      	b.n	8004e7c <Approximation_Tcoef+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if (ADC_MEAS_ZERO > ADC_measure_cal_points[i]) index++;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e00c      	b.n	8004e9c <Approximation_Tcoef+0x5c>
 8004e82:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	6a3a      	ldr	r2, [r7, #32]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	dd02      	ble.n	8004e96 <Approximation_Tcoef+0x56>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	3301      	adds	r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	ddef      	ble.n	8004e82 <Approximation_Tcoef+0x42>

	if (index == 0) a = (double)(ADC_power_cal_points[index + 1] - ADC_power_cal_points[index]) / (double)(ADC_measure_cal_points[index + 1] - ADC_measure_cal_points[index]);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d126      	bne.n	8004ef6 <Approximation_Tcoef+0xb6>
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	3301      	adds	r3, #1
 8004eac:	4a48      	ldr	r2, [pc, #288]	; (8004fd0 <Approximation_Tcoef+0x190>)
 8004eae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004eb2:	4947      	ldr	r1, [pc, #284]	; (8004fd0 <Approximation_Tcoef+0x190>)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fb fb41 	bl	8000544 <__aeabi_i2d>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	460d      	mov	r5, r1
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a40      	ldr	r2, [pc, #256]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004ecc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ed0:	493e      	ldr	r1, [pc, #248]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb fb32 	bl	8000544 <__aeabi_i2d>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	f7fb fcc0 	bl	800086c <__aeabi_ddiv>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004ef4:	e025      	b.n	8004f42 <Approximation_Tcoef+0x102>
	else a = (double)(ADC_power_cal_points[index] - ADC_power_cal_points[index - 1]) / (double)(ADC_measure_cal_points[index] - ADC_measure_cal_points[index - 1]);
 8004ef6:	4a36      	ldr	r2, [pc, #216]	; (8004fd0 <Approximation_Tcoef+0x190>)
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	3b01      	subs	r3, #1
 8004f02:	4933      	ldr	r1, [pc, #204]	; (8004fd0 <Approximation_Tcoef+0x190>)
 8004f04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fb1a 	bl	8000544 <__aeabi_i2d>
 8004f10:	4604      	mov	r4, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4a2d      	ldr	r2, [pc, #180]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	492a      	ldr	r1, [pc, #168]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004f22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fb fb0b 	bl	8000544 <__aeabi_i2d>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f7fb fc99 	bl	800086c <__aeabi_ddiv>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	b = (double)ADC_power_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004f42:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <Approximation_Tcoef+0x190>)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fb fafa 	bl	8000544 <__aeabi_i2d>
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <Approximation_Tcoef+0x18c>)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb faf1 	bl	8000544 <__aeabi_i2d>
 8004f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f66:	f7fb fb57 	bl	8000618 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7fb f999 	bl	80002a8 <__aeabi_dsub>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004f7e:	6a38      	ldr	r0, [r7, #32]
 8004f80:	f7fb fae0 	bl	8000544 <__aeabi_i2d>
 8004f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f88:	f7fb fb46 	bl	8000618 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f94:	f7fb f98a 	bl	80002ac <__adddf3>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES/current_ADC_power;
 8004fa0:	6838      	ldr	r0, [r7, #0]
 8004fa2:	f7fb facf 	bl	8000544 <__aeabi_i2d>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fae:	f7fb fc5d 	bl	800086c <__aeabi_ddiv>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004fba:	eeb0 0a47 	vmov.f32	s0, s14
 8004fbe:	eef0 0a67 	vmov.f32	s1, s15
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc8:	20002200 	.word	0x20002200
 8004fcc:	200001b8 	.word	0x200001b8
 8004fd0:	200001e4 	.word	0x200001e4

08004fd4 <Approximation_temperature>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температуры
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_temperature(double T_coef)
{
 8004fd4:	b5b0      	push	{r4, r5, r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	ed87 0b00 	vstr	d0, [r7]
	double RES = 0, a, b;
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < (num_of_temperature_cal_points-1); i++) if (T_coef > T_coef_cal[i]) index++;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	e012      	b.n	800501a <Approximation_temperature+0x46>
 8004ff4:	4a53      	ldr	r2, [pc, #332]	; (8005144 <Approximation_temperature+0x170>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005004:	f7fb fd98 	bl	8000b38 <__aeabi_dcmpgt>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <Approximation_temperature+0x40>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	3301      	adds	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b02      	cmp	r3, #2
 800501e:	dde9      	ble.n	8004ff4 <Approximation_temperature+0x20>

	if (index == 0) a = (double)(Temperature_cal_points[index + 1] - Temperature_cal_points[index]) / (double)(T_coef_cal[index + 1] - T_coef_cal[index]);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d12c      	bne.n	8005080 <Approximation_temperature+0xac>
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	4a47      	ldr	r2, [pc, #284]	; (8005148 <Approximation_temperature+0x174>)
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005034:	4a44      	ldr	r2, [pc, #272]	; (8005148 <Approximation_temperature+0x174>)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4413      	add	r3, r2
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f7fb f932 	bl	80002a8 <__aeabi_dsub>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4614      	mov	r4, r2
 800504a:	461d      	mov	r5, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3301      	adds	r3, #1
 8005050:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <Approximation_temperature+0x170>)
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800505a:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <Approximation_temperature+0x170>)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb f91f 	bl	80002a8 <__aeabi_dsub>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fbfb 	bl	800086c <__aeabi_ddiv>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800507e:	e02b      	b.n	80050d8 <Approximation_temperature+0x104>
	else a = (double)(Temperature_cal_points[index] - Temperature_cal_points[index - 1]) / (double)(T_coef_cal[index] - T_coef_cal[index - 1]);
 8005080:	4a31      	ldr	r2, [pc, #196]	; (8005148 <Approximation_temperature+0x174>)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3b01      	subs	r3, #1
 8005090:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <Approximation_temperature+0x174>)
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f7fb f905 	bl	80002a8 <__aeabi_dsub>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4614      	mov	r4, r2
 80050a4:	461d      	mov	r5, r3
 80050a6:	4a27      	ldr	r2, [pc, #156]	; (8005144 <Approximation_temperature+0x170>)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	4a23      	ldr	r2, [pc, #140]	; (8005144 <Approximation_temperature+0x170>)
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb f8f2 	bl	80002a8 <__aeabi_dsub>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4620      	mov	r0, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7fb fbce 	bl	800086c <__aeabi_ddiv>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = (double)Temperature_cal_points[index] - (double)T_coef_cal[index] * a;
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <Approximation_temperature+0x174>)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050e4:	4a17      	ldr	r2, [pc, #92]	; (8005144 <Approximation_temperature+0x170>)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050f4:	f7fb fa90 	bl	8000618 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb f8d2 	bl	80002a8 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * T_coef;
 800510c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005110:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005114:	f7fb fa80 	bl	8000618 <__aeabi_dmul>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005120:	f7fb f8c4 	bl	80002ac <__adddf3>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 800512c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005130:	ec43 2b17 	vmov	d7, r2, r3
}
 8005134:	eeb0 0a47 	vmov.f32	s0, s14
 8005138:	eef0 0a67 	vmov.f32	s1, s15
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bdb0      	pop	{r4, r5, r7, pc}
 8005142:	bf00      	nop
 8005144:	20000210 	.word	0x20000210
 8005148:	20000230 	.word	0x20000230

0800514c <Temperature_correction>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Коррекция давления по температуре
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Temperature_correction(double uncorrect_Pressure, double affect_temp)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	ed87 0b02 	vstr	d0, [r7, #8]
 8005156:	ed87 1b00 	vstr	d1, [r7]
	return (uncorrect_Pressure + (cal_temperature - affect_temp) * affect);
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <Temperature_correction+0x54>)
 800515c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005164:	f7fb f8a0 	bl	80002a8 <__aeabi_dsub>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <Temperature_correction+0x58>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fb fa4f 	bl	8000618 <__aeabi_dmul>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005186:	f7fb f891 	bl	80002ac <__adddf3>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005192:	eeb0 0a47 	vmov.f32	s0, s14
 8005196:	eef0 0a67 	vmov.f32	s1, s15
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000250 	.word	0x20000250
 80051a4:	20000850 	.word	0x20000850

080051a8 <calculate_current>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Расчет тока и напряжения, формулы Тимура
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double calculate_current(double data)
{
 80051a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_current = -0.0000741921796439735;
	//b_current = 9.9684133071094100000;
	//c_current = 0.0080740815705555100;
	RES = (-b_current+(sqrt((b_current*b_current)-(4*a_current*(c_current-data)))))/(2*a_current);
 80051b4:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <calculate_current+0xc8>)
 80051b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ba:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <calculate_current+0xc8>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f7fb fa2a 	bl	8000618 <__aeabi_dmul>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	461d      	mov	r5, r3
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <calculate_current+0xcc>)
 80051ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	4b28      	ldr	r3, [pc, #160]	; (8005278 <calculate_current+0xd0>)
 80051d8:	f7fb fa1e 	bl	8000618 <__aeabi_dmul>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4690      	mov	r8, r2
 80051e2:	4699      	mov	r9, r3
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <calculate_current+0xd4>)
 80051e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ee:	f7fb f85b 	bl	80002a8 <__aeabi_dsub>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f7fb fa0d 	bl	8000618 <__aeabi_dmul>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f7fb f84f 	bl	80002a8 <__aeabi_dsub>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	ec43 2b17 	vmov	d7, r2, r3
 8005212:	eeb0 0a47 	vmov.f32	s0, s14
 8005216:	eef0 0a67 	vmov.f32	s1, s15
 800521a:	f01c fc59 	bl	8021ad0 <sqrt>
 800521e:	ec51 0b10 	vmov	r0, r1, d0
 8005222:	4b13      	ldr	r3, [pc, #76]	; (8005270 <calculate_current+0xc8>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f83e 	bl	80002a8 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <calculate_current+0xcc>)
 8005236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	f7fb f835 	bl	80002ac <__adddf3>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb fb0f 	bl	800086c <__aeabi_ddiv>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 8005256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525a:	ec43 2b17 	vmov	d7, r2, r3
}
 800525e:	eeb0 0a47 	vmov.f32	s0, s14
 8005262:	eef0 0a67 	vmov.f32	s1, s15
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800526e:	bf00      	nop
 8005270:	20006b90 	.word	0x20006b90
 8005274:	20006b78 	.word	0x20006b78
 8005278:	40100000 	.word	0x40100000
 800527c:	20006b70 	.word	0x20006b70

08005280 <calculate_voltage>:

double calculate_voltage(double data)
{
 8005280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_voltage = 0.0000160989032721161;
	//b_voltage = 9.6660275246403800000;
	//c_voltage = 0.0066157945677234600;
	RES = (-b_voltage+(sqrt((b_voltage*b_voltage)-(4*a_voltage*(c_voltage-data)))))/(2*a_voltage);
 800528c:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <calculate_voltage+0xc8>)
 800528e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005292:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <calculate_voltage+0xc8>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f9be 	bl	8000618 <__aeabi_dmul>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4614      	mov	r4, r2
 80052a2:	461d      	mov	r5, r3
 80052a4:	4b29      	ldr	r3, [pc, #164]	; (800534c <calculate_voltage+0xcc>)
 80052a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	4b28      	ldr	r3, [pc, #160]	; (8005350 <calculate_voltage+0xd0>)
 80052b0:	f7fb f9b2 	bl	8000618 <__aeabi_dmul>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4690      	mov	r8, r2
 80052ba:	4699      	mov	r9, r3
 80052bc:	4b25      	ldr	r3, [pc, #148]	; (8005354 <calculate_voltage+0xd4>)
 80052be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c6:	f7fa ffef 	bl	80002a8 <__aeabi_dsub>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4640      	mov	r0, r8
 80052d0:	4649      	mov	r1, r9
 80052d2:	f7fb f9a1 	bl	8000618 <__aeabi_dmul>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4620      	mov	r0, r4
 80052dc:	4629      	mov	r1, r5
 80052de:	f7fa ffe3 	bl	80002a8 <__aeabi_dsub>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	ec43 2b17 	vmov	d7, r2, r3
 80052ea:	eeb0 0a47 	vmov.f32	s0, s14
 80052ee:	eef0 0a67 	vmov.f32	s1, s15
 80052f2:	f01c fbed 	bl	8021ad0 <sqrt>
 80052f6:	ec51 0b10 	vmov	r0, r1, d0
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <calculate_voltage+0xc8>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f7fa ffd2 	bl	80002a8 <__aeabi_dsub>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <calculate_voltage+0xcc>)
 800530e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	f7fa ffc9 	bl	80002ac <__adddf3>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f7fb faa3 	bl	800086c <__aeabi_ddiv>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 800532e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005332:	ec43 2b17 	vmov	d7, r2, r3
}
 8005336:	eeb0 0a47 	vmov.f32	s0, s14
 800533a:	eef0 0a67 	vmov.f32	s1, s15
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005346:	bf00      	nop
 8005348:	20006b68 	.word	0x20006b68
 800534c:	20006b80 	.word	0x20006b80
 8005350:	40100000 	.word	0x40100000
 8005354:	20006b88 	.word	0x20006b88

08005358 <Logging_init>:
	[RefVoltage_tag]=10,
	[AutoGainCoef_period_tag]=19,
};

void Logging_init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
	disk_initialize(W25FatFs.drv);
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <Logging_init+0x14>)
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	4618      	mov	r0, r3
 8005362:	f00c ff47 	bl	80121f4 <disk_initialize>
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20007598 	.word	0x20007598

08005370 <Create_File>:



void Create_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	461a      	mov	r2, r3
 800537c:	460b      	mov	r3, r1
 800537e:	72fb      	strb	r3, [r7, #11]
 8005380:	4613      	mov	r3, r2
 8005382:	813b      	strh	r3, [r7, #8]
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005384:	2200      	movs	r2, #0
 8005386:	490b      	ldr	r1, [pc, #44]	; (80053b4 <Create_File+0x44>)
 8005388:	480b      	ldr	r0, [pc, #44]	; (80053b8 <Create_File+0x48>)
 800538a:	f00e fc57 	bl	8013c3c <f_mount>
	f_open(&MyFile, (char*)FileName, FA_WRITE|FA_CREATE_ALWAYS);
 800538e:	220a      	movs	r2, #10
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	480a      	ldr	r0, [pc, #40]	; (80053bc <Create_File+0x4c>)
 8005394:	f00e fc98 	bl	8013cc8 <f_open>
	f_write(&MyFile, FileText, FileSize, &testBytes);
 8005398:	893a      	ldrh	r2, [r7, #8]
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <Create_File+0x50>)
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4807      	ldr	r0, [pc, #28]	; (80053bc <Create_File+0x4c>)
 80053a0:	f00e ff8f 	bl	80142c2 <f_write>
	f_close(&MyFile);
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <Create_File+0x4c>)
 80053a6:	f00f f97f 	bl	80146a8 <f_close>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200086c8 	.word	0x200086c8
 80053b8:	20007598 	.word	0x20007598
 80053bc:	20007368 	.word	0x20007368
 80053c0:	200077c8 	.word	0x200077c8

080053c4 <Read_File>:



uint8_t Read_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	461a      	mov	r2, r3
 80053d0:	460b      	mov	r3, r1
 80053d2:	72fb      	strb	r3, [r7, #11]
 80053d4:	4613      	mov	r3, r2
 80053d6:	813b      	strh	r3, [r7, #8]
	uint8_t RES;
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 80053d8:	2200      	movs	r2, #0
 80053da:	490c      	ldr	r1, [pc, #48]	; (800540c <Read_File+0x48>)
 80053dc:	480c      	ldr	r0, [pc, #48]	; (8005410 <Read_File+0x4c>)
 80053de:	f00e fc2d 	bl	8013c3c <f_mount>
	f_open(&MyFile, (char*)FileName, FA_READ|FA_OPEN_ALWAYS);
 80053e2:	2211      	movs	r2, #17
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	480b      	ldr	r0, [pc, #44]	; (8005414 <Read_File+0x50>)
 80053e8:	f00e fc6e 	bl	8013cc8 <f_open>
	RES=f_read(&MyFile, FileText, FileSize, &testBytes);
 80053ec:	893a      	ldrh	r2, [r7, #8]
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <Read_File+0x54>)
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4808      	ldr	r0, [pc, #32]	; (8005414 <Read_File+0x50>)
 80053f4:	f00e fe26 	bl	8014044 <f_read>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]
	f_close(&MyFile);
 80053fc:	4805      	ldr	r0, [pc, #20]	; (8005414 <Read_File+0x50>)
 80053fe:	f00f f953 	bl	80146a8 <f_close>
	return RES;
 8005402:	7dfb      	ldrb	r3, [r7, #23]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	200086c8 	.word	0x200086c8
 8005410:	20007598 	.word	0x20007598
 8005414:	20007368 	.word	0x20007368
 8005418:	200077c8 	.word	0x200077c8

0800541c <FileParser>:

uint16_t FileParser(uint8_t tag)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 8005426:	2300      	movs	r3, #0
 8005428:	81fb      	strh	r3, [r7, #14]
	uint16_t RES=0, Sym_cntr=0;
 800542a:	2300      	movs	r3, #0
 800542c:	81bb      	strh	r3, [r7, #12]
 800542e:	2300      	movs	r3, #0
 8005430:	817b      	strh	r3, [r7, #10]

	for(i=0;i<file_size;i++)
 8005432:	2300      	movs	r3, #0
 8005434:	81fb      	strh	r3, [r7, #14]
 8005436:	e042      	b.n	80054be <FileParser+0xa2>
	{
		if(ReadFileBuf[i]==TAG_STRING[tag][Sym_cntr])
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	4a26      	ldr	r2, [pc, #152]	; (80054d4 <FileParser+0xb8>)
 800543c:	5cd2      	ldrb	r2, [r2, r3]
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	4925      	ldr	r1, [pc, #148]	; (80054d8 <FileParser+0xbc>)
 8005442:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	440b      	add	r3, r1
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d133      	bne.n	80054b8 <FileParser+0x9c>
		{
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005450:	e013      	b.n	800547a <FileParser+0x5e>
			{
				if(ReadFileBuf[i+Sym_cntr]==TAG_STRING[tag][Sym_cntr])
 8005452:	89fa      	ldrh	r2, [r7, #14]
 8005454:	897b      	ldrh	r3, [r7, #10]
 8005456:	4413      	add	r3, r2
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <FileParser+0xb8>)
 800545a:	5cd2      	ldrb	r2, [r2, r3]
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	491e      	ldr	r1, [pc, #120]	; (80054d8 <FileParser+0xbc>)
 8005460:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005464:	897b      	ldrh	r3, [r7, #10]
 8005466:	440b      	add	r3, r1
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d102      	bne.n	8005474 <FileParser+0x58>
				{RES++;}
 800546e:	89bb      	ldrh	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	81bb      	strh	r3, [r7, #12]
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005474:	897b      	ldrh	r3, [r7, #10]
 8005476:	3301      	adds	r3, #1
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <FileParser+0xc0>)
 800547e:	5cd3      	ldrb	r3, [r2, r3]
 8005480:	b29b      	uxth	r3, r3
 8005482:	897a      	ldrh	r2, [r7, #10]
 8005484:	429a      	cmp	r2, r3
 8005486:	d3e4      	bcc.n	8005452 <FileParser+0x36>
			}
			if(RES==TAG_NUM_OF_SYM[tag])
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	4a14      	ldr	r2, [pc, #80]	; (80054dc <FileParser+0xc0>)
 800548c:	5cd3      	ldrb	r3, [r2, r3]
 800548e:	b29b      	uxth	r3, r3
 8005490:	89ba      	ldrh	r2, [r7, #12]
 8005492:	429a      	cmp	r2, r3
 8005494:	d10c      	bne.n	80054b0 <FileParser+0x94>
			{RES=i+TAG_NUM_OF_SYM[tag]+1; i=file_size;}
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	4a10      	ldr	r2, [pc, #64]	; (80054dc <FileParser+0xc0>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	b29a      	uxth	r2, r3
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	4413      	add	r3, r2
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3301      	adds	r3, #1
 80054a6:	81bb      	strh	r3, [r7, #12]
 80054a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80054ac:	81fb      	strh	r3, [r7, #14]
 80054ae:	e003      	b.n	80054b8 <FileParser+0x9c>
			else {RES=Sym_cntr=0;}
 80054b0:	2300      	movs	r3, #0
 80054b2:	817b      	strh	r3, [r7, #10]
 80054b4:	897b      	ldrh	r3, [r7, #10]
 80054b6:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<file_size;i++)
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	3301      	adds	r3, #1
 80054bc:	81fb      	strh	r3, [r7, #14]
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054c4:	d3b8      	bcc.n	8005438 <FileParser+0x1c>
		}
	}

	return RES;
 80054c6:	89bb      	ldrh	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20006b98 	.word	0x20006b98
 80054d8:	20000258 	.word	0x20000258
 80054dc:	08024044 	.word	0x08024044

080054e0 <scan_double>:
	}
}


double scan_double(uint16_t offset, uint8_t *buff)
{
 80054e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	4603      	mov	r3, r0
 80054ea:	6039      	str	r1, [r7, #0]
 80054ec:	80fb      	strh	r3, [r7, #6]
	uint64_t res64=0;
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i=0, point=0, sign=0, after_size=0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	82fb      	strh	r3, [r7, #22]
 80054fe:	2300      	movs	r3, #0
 8005500:	82bb      	strh	r3, [r7, #20]
 8005502:	2300      	movs	r3, #0
 8005504:	827b      	strh	r3, [r7, #18]
 8005506:	2300      	movs	r3, #0
 8005508:	823b      	strh	r3, [r7, #16]
	double RES=0;
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(buff[offset]=='-')sign=1;
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	4413      	add	r3, r2
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b2d      	cmp	r3, #45	; 0x2d
 8005520:	d101      	bne.n	8005526 <scan_double+0x46>
 8005522:	2301      	movs	r3, #1
 8005524:	827b      	strh	r3, [r7, #18]

	// Find point
	for(i=0;i<30;i++)
 8005526:	2300      	movs	r3, #0
 8005528:	82fb      	strh	r3, [r7, #22]
 800552a:	e034      	b.n	8005596 <scan_double+0xb6>
	{
		if((buff[i+sign+offset]==',')||(buff[i+sign+offset]=='.')) point=i;
 800552c:	8afa      	ldrh	r2, [r7, #22]
 800552e:	8a7b      	ldrh	r3, [r7, #18]
 8005530:	441a      	add	r2, r3
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	4413      	add	r3, r2
 8005536:	461a      	mov	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b2c      	cmp	r3, #44	; 0x2c
 8005540:	d00a      	beq.n	8005558 <scan_double+0x78>
 8005542:	8afa      	ldrh	r2, [r7, #22]
 8005544:	8a7b      	ldrh	r3, [r7, #18]
 8005546:	441a      	add	r2, r3
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	4413      	add	r3, r2
 800554c:	461a      	mov	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	4413      	add	r3, r2
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b2e      	cmp	r3, #46	; 0x2e
 8005556:	d101      	bne.n	800555c <scan_double+0x7c>
 8005558:	8afb      	ldrh	r3, [r7, #22]
 800555a:	82bb      	strh	r3, [r7, #20]
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) {after_size=i; i=30;}
 800555c:	8afa      	ldrh	r2, [r7, #22]
 800555e:	8a7b      	ldrh	r3, [r7, #18]
 8005560:	441a      	add	r2, r3
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	4413      	add	r3, r2
 8005566:	461a      	mov	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b0d      	cmp	r3, #13
 8005570:	d00a      	beq.n	8005588 <scan_double+0xa8>
 8005572:	8afa      	ldrh	r2, [r7, #22]
 8005574:	8a7b      	ldrh	r3, [r7, #18]
 8005576:	441a      	add	r2, r3
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	4413      	add	r3, r2
 800557c:	461a      	mov	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b0a      	cmp	r3, #10
 8005586:	d103      	bne.n	8005590 <scan_double+0xb0>
 8005588:	8afb      	ldrh	r3, [r7, #22]
 800558a:	823b      	strh	r3, [r7, #16]
 800558c:	231e      	movs	r3, #30
 800558e:	82fb      	strh	r3, [r7, #22]
	for(i=0;i<30;i++)
 8005590:	8afb      	ldrh	r3, [r7, #22]
 8005592:	3301      	adds	r3, #1
 8005594:	82fb      	strh	r3, [r7, #22]
 8005596:	8afb      	ldrh	r3, [r7, #22]
 8005598:	2b1d      	cmp	r3, #29
 800559a:	d9c7      	bls.n	800552c <scan_double+0x4c>
	}

	if(after_size>19)after_size=19;
 800559c:	8a3b      	ldrh	r3, [r7, #16]
 800559e:	2b13      	cmp	r3, #19
 80055a0:	d901      	bls.n	80055a6 <scan_double+0xc6>
 80055a2:	2313      	movs	r3, #19
 80055a4:	823b      	strh	r3, [r7, #16]
	for(i=0;i<after_size;i++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	82fb      	strh	r3, [r7, #22]
 80055aa:	e04d      	b.n	8005648 <scan_double+0x168>
	{
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) break;
 80055ac:	8afa      	ldrh	r2, [r7, #22]
 80055ae:	8a7b      	ldrh	r3, [r7, #18]
 80055b0:	441a      	add	r2, r3
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	4413      	add	r3, r2
 80055b6:	461a      	mov	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b0d      	cmp	r3, #13
 80055c0:	d046      	beq.n	8005650 <scan_double+0x170>
 80055c2:	8afa      	ldrh	r2, [r7, #22]
 80055c4:	8a7b      	ldrh	r3, [r7, #18]
 80055c6:	441a      	add	r2, r3
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	4413      	add	r3, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	4413      	add	r3, r2
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b0a      	cmp	r3, #10
 80055d6:	d03b      	beq.n	8005650 <scan_double+0x170>
		if((i!=point)||(point==0))
 80055d8:	8afa      	ldrh	r2, [r7, #22]
 80055da:	8abb      	ldrh	r3, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d102      	bne.n	80055e6 <scan_double+0x106>
 80055e0:	8abb      	ldrh	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d12d      	bne.n	8005642 <scan_double+0x162>
		{
			res64*=10;
 80055e6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	f04f 0000 	mov.w	r0, #0
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	0099      	lsls	r1, r3, #2
 80055f8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80055fc:	0090      	lsls	r0, r2, #2
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	1912      	adds	r2, r2, r4
 8005604:	eb45 0303 	adc.w	r3, r5, r3
 8005608:	eb12 0a02 	adds.w	sl, r2, r2
 800560c:	eb43 0b03 	adc.w	fp, r3, r3
 8005610:	4652      	mov	r2, sl
 8005612:	465b      	mov	r3, fp
 8005614:	e9c7 2306 	strd	r2, r3, [r7, #24]
			res64+=buff[i+sign+offset]-48;
 8005618:	8afa      	ldrh	r2, [r7, #22]
 800561a:	8a7b      	ldrh	r3, [r7, #18]
 800561c:	441a      	add	r2, r3
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	4413      	add	r3, r2
 8005622:	461a      	mov	r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4413      	add	r3, r2
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	3b30      	subs	r3, #48	; 0x30
 800562c:	461a      	mov	r2, r3
 800562e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005632:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005636:	eb10 0802 	adds.w	r8, r0, r2
 800563a:	eb41 0903 	adc.w	r9, r1, r3
 800563e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i=0;i<after_size;i++)
 8005642:	8afb      	ldrh	r3, [r7, #22]
 8005644:	3301      	adds	r3, #1
 8005646:	82fb      	strh	r3, [r7, #22]
 8005648:	8afa      	ldrh	r2, [r7, #22]
 800564a:	8a3b      	ldrh	r3, [r7, #16]
 800564c:	429a      	cmp	r2, r3
 800564e:	d3ad      	bcc.n	80055ac <scan_double+0xcc>
		}
	}

	if(point!=0){after_size-=1;
 8005650:	8abb      	ldrh	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d022      	beq.n	800569c <scan_double+0x1bc>
 8005656:	8a3b      	ldrh	r3, [r7, #16]
 8005658:	3b01      	subs	r3, #1
 800565a:	823b      	strh	r3, [r7, #16]
	RES = (double)res64;
 800565c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005660:	f7fa ffa4 	bl	80005ac <__aeabi_ul2d>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<(after_size-point);i++)RES *= 0.1;}
 800566c:	2300      	movs	r3, #0
 800566e:	82fb      	strh	r3, [r7, #22]
 8005670:	e00d      	b.n	800568e <scan_double+0x1ae>
 8005672:	a319      	add	r3, pc, #100	; (adr r3, 80056d8 <scan_double+0x1f8>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800567c:	f7fa ffcc 	bl	8000618 <__aeabi_dmul>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005688:	8afb      	ldrh	r3, [r7, #22]
 800568a:	3301      	adds	r3, #1
 800568c:	82fb      	strh	r3, [r7, #22]
 800568e:	8afa      	ldrh	r2, [r7, #22]
 8005690:	8a39      	ldrh	r1, [r7, #16]
 8005692:	8abb      	ldrh	r3, [r7, #20]
 8005694:	1acb      	subs	r3, r1, r3
 8005696:	429a      	cmp	r2, r3
 8005698:	dbeb      	blt.n	8005672 <scan_double+0x192>
 800569a:	e007      	b.n	80056ac <scan_double+0x1cc>
	else RES = (double)res64;
 800569c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056a0:	f7fa ff84 	bl	80005ac <__aeabi_ul2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(sign==1)RES=-RES;
 80056ac:	8a7b      	ldrh	r3, [r7, #18]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <scan_double+0x1de>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80056bc:	60fb      	str	r3, [r7, #12]
	return RES;
 80056be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80056c6:	eeb0 0a47 	vmov.f32	s0, s14
 80056ca:	eef0 0a67 	vmov.f32	s1, s15
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d6:	bf00      	nop
 80056d8:	9999999a 	.word	0x9999999a
 80056dc:	3fb99999 	.word	0x3fb99999

080056e0 <Save_Settings>:

void Save_Settings(uint8_t TAG, int32_t data)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	6039      	str	r1, [r7, #0]
 80056ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Name[11]="CONFIG.CSV\0";
 80056ec:	4a4c      	ldr	r2, [pc, #304]	; (8005820 <Save_Settings+0x140>)
 80056ee:	f107 030c 	add.w	r3, r7, #12
 80056f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80056f4:	c303      	stmia	r3!, {r0, r1}
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	3302      	adds	r3, #2
 80056fa:	0c12      	lsrs	r2, r2, #16
 80056fc:	701a      	strb	r2, [r3, #0]
	uint16_t index, i, end_index;
	while(Read_File(Name, 11, ReadFileBuf, file_size)!=FR_OK){};
 80056fe:	bf00      	nop
 8005700:	f107 000c 	add.w	r0, r7, #12
 8005704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005708:	4a46      	ldr	r2, [pc, #280]	; (8005824 <Save_Settings+0x144>)
 800570a:	210b      	movs	r1, #11
 800570c:	f7ff fe5a 	bl	80053c4 <Read_File>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f4      	bne.n	8005700 <Save_Settings+0x20>
	//{
		index=FileParser(TAG);
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fe7f 	bl	800541c <FileParser>
 800571e:	4603      	mov	r3, r0
 8005720:	837b      	strh	r3, [r7, #26]
		for(i=index;i<file_size-1;i++)
 8005722:	8b7b      	ldrh	r3, [r7, #26]
 8005724:	83fb      	strh	r3, [r7, #30]
 8005726:	e013      	b.n	8005750 <Save_Settings+0x70>
		{
			if((ReadFileBuf[i]==0x0D)&&(ReadFileBuf[i+1]==0x0A))
 8005728:	8bfb      	ldrh	r3, [r7, #30]
 800572a:	4a3e      	ldr	r2, [pc, #248]	; (8005824 <Save_Settings+0x144>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
 800572e:	2b0d      	cmp	r3, #13
 8005730:	d10b      	bne.n	800574a <Save_Settings+0x6a>
 8005732:	8bfb      	ldrh	r3, [r7, #30]
 8005734:	3301      	adds	r3, #1
 8005736:	4a3b      	ldr	r2, [pc, #236]	; (8005824 <Save_Settings+0x144>)
 8005738:	5cd3      	ldrb	r3, [r2, r3]
 800573a:	2b0a      	cmp	r3, #10
 800573c:	d105      	bne.n	800574a <Save_Settings+0x6a>
			{
				end_index=i+2;
 800573e:	8bfb      	ldrh	r3, [r7, #30]
 8005740:	3302      	adds	r3, #2
 8005742:	83bb      	strh	r3, [r7, #28]
				i=file_size-1;
 8005744:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005748:	83fb      	strh	r3, [r7, #30]
		for(i=index;i<file_size-1;i++)
 800574a:	8bfb      	ldrh	r3, [r7, #30]
 800574c:	3301      	adds	r3, #1
 800574e:	83fb      	strh	r3, [r7, #30]
 8005750:	8bfb      	ldrh	r3, [r7, #30]
 8005752:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8005756:	4293      	cmp	r3, r2
 8005758:	d9e6      	bls.n	8005728 <Save_Settings+0x48>
			}
		}

		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	4a32      	ldr	r2, [pc, #200]	; (8005828 <Save_Settings+0x148>)
 800575e:	5cd3      	ldrb	r3, [r2, r3]
 8005760:	b29b      	uxth	r3, r3
 8005762:	8b7a      	ldrh	r2, [r7, #26]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	83fb      	strh	r3, [r7, #30]
 800576c:	e011      	b.n	8005792 <Save_Settings+0xb2>
		{
			ReadFileBuf[i]=ReadFileBuf[i+end_index-(index-TAG_NUM_OF_SYM[TAG]-1)];
 800576e:	8bfa      	ldrh	r2, [r7, #30]
 8005770:	8bbb      	ldrh	r3, [r7, #28]
 8005772:	441a      	add	r2, r3
 8005774:	8b7b      	ldrh	r3, [r7, #26]
 8005776:	79f9      	ldrb	r1, [r7, #7]
 8005778:	482b      	ldr	r0, [pc, #172]	; (8005828 <Save_Settings+0x148>)
 800577a:	5c41      	ldrb	r1, [r0, r1]
 800577c:	1a5b      	subs	r3, r3, r1
 800577e:	3b01      	subs	r3, #1
 8005780:	1ad2      	subs	r2, r2, r3
 8005782:	8bfb      	ldrh	r3, [r7, #30]
 8005784:	4927      	ldr	r1, [pc, #156]	; (8005824 <Save_Settings+0x144>)
 8005786:	5c89      	ldrb	r1, [r1, r2]
 8005788:	4a26      	ldr	r2, [pc, #152]	; (8005824 <Save_Settings+0x144>)
 800578a:	54d1      	strb	r1, [r2, r3]
		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800578c:	8bfb      	ldrh	r3, [r7, #30]
 800578e:	3301      	adds	r3, #1
 8005790:	83fb      	strh	r3, [r7, #30]
 8005792:	8bfa      	ldrh	r2, [r7, #30]
 8005794:	8bbb      	ldrh	r3, [r7, #28]
 8005796:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800579a:	429a      	cmp	r2, r3
 800579c:	dbe7      	blt.n	800576e <Save_Settings+0x8e>
		}

		index=FileParser(end_of_file_tag)-TAG_NUM_OF_SYM[end_of_file_tag]-1;
 800579e:	2000      	movs	r0, #0
 80057a0:	f7ff fe3c 	bl	800541c <FileParser>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	230b      	movs	r3, #11
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	837b      	strh	r3, [r7, #26]

		for(i=0;i<TAG_NUM_OF_SYM[TAG];i++)ReadFileBuf[i+index]=TAG_STRING[TAG][i];
 80057b4:	2300      	movs	r3, #0
 80057b6:	83fb      	strh	r3, [r7, #30]
 80057b8:	e00e      	b.n	80057d8 <Save_Settings+0xf8>
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <Save_Settings+0x14c>)
 80057be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057c2:	8bfb      	ldrh	r3, [r7, #30]
 80057c4:	441a      	add	r2, r3
 80057c6:	8bf9      	ldrh	r1, [r7, #30]
 80057c8:	8b7b      	ldrh	r3, [r7, #26]
 80057ca:	440b      	add	r3, r1
 80057cc:	7811      	ldrb	r1, [r2, #0]
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <Save_Settings+0x144>)
 80057d0:	54d1      	strb	r1, [r2, r3]
 80057d2:	8bfb      	ldrh	r3, [r7, #30]
 80057d4:	3301      	adds	r3, #1
 80057d6:	83fb      	strh	r3, [r7, #30]
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4a13      	ldr	r2, [pc, #76]	; (8005828 <Save_Settings+0x148>)
 80057dc:	5cd3      	ldrb	r3, [r2, r3]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8bfa      	ldrh	r2, [r7, #30]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d3e9      	bcc.n	80057ba <Save_Settings+0xda>
		sprintf(ReadFileBuf+index+TAG_NUM_OF_SYM[TAG],";%d\r\nend_of_file;\r\n", data);
 80057e6:	8b7b      	ldrh	r3, [r7, #26]
 80057e8:	79fa      	ldrb	r2, [r7, #7]
 80057ea:	490f      	ldr	r1, [pc, #60]	; (8005828 <Save_Settings+0x148>)
 80057ec:	5c8a      	ldrb	r2, [r1, r2]
 80057ee:	4413      	add	r3, r2
 80057f0:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <Save_Settings+0x144>)
 80057f2:	4413      	add	r3, r2
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	490e      	ldr	r1, [pc, #56]	; (8005830 <Save_Settings+0x150>)
 80057f8:	4618      	mov	r0, r3
 80057fa:	f018 fbb1 	bl	801df60 <siprintf>
		ReadFileBuf[file_size-1]="\0";
 80057fe:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <Save_Settings+0x154>)
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <Save_Settings+0x144>)
 8005804:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		Create_File(Name, 11, ReadFileBuf, file_size);
 8005808:	f107 000c 	add.w	r0, r7, #12
 800580c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005810:	4a04      	ldr	r2, [pc, #16]	; (8005824 <Save_Settings+0x144>)
 8005812:	210b      	movs	r1, #11
 8005814:	f7ff fdac 	bl	8005370 <Create_File>
	//}
}
 8005818:	bf00      	nop
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	080221cc 	.word	0x080221cc
 8005824:	20006b98 	.word	0x20006b98
 8005828:	08024044 	.word	0x08024044
 800582c:	20000258 	.word	0x20000258
 8005830:	080221b4 	.word	0x080221b4
 8005834:	080221c8 	.word	0x080221c8

08005838 <Read_Variable_From_File>:



double Read_Variable_From_File(uint8_t name)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
	return scan_double(FileParser(name), ReadFileBuf);
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fde9 	bl	800541c <FileParser>
 800584a:	4603      	mov	r3, r0
 800584c:	4907      	ldr	r1, [pc, #28]	; (800586c <Read_Variable_From_File+0x34>)
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fe46 	bl	80054e0 <scan_double>
 8005854:	eeb0 7a40 	vmov.f32	s14, s0
 8005858:	eef0 7a60 	vmov.f32	s15, s1
}
 800585c:	eeb0 0a47 	vmov.f32	s0, s14
 8005860:	eef0 0a67 	vmov.f32	s1, s15
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20006b98 	.word	0x20006b98

08005870 <Load_Settings>:



void Load_Settings(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
	uint8_t Name_settings[11]="CONFIG.CSV\0";
 8005876:	4ad2      	ldr	r2, [pc, #840]	; (8005bc0 <Load_Settings+0x350>)
 8005878:	f107 030c 	add.w	r3, r7, #12
 800587c:	ca07      	ldmia	r2, {r0, r1, r2}
 800587e:	c303      	stmia	r3!, {r0, r1}
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	3302      	adds	r3, #2
 8005884:	0c12      	lsrs	r2, r2, #16
 8005886:	701a      	strb	r2, [r3, #0]
	uint8_t Name_calibr[8]="CAL.CSV\0";
 8005888:	4ace      	ldr	r2, [pc, #824]	; (8005bc4 <Load_Settings+0x354>)
 800588a:	1d3b      	adds	r3, r7, #4
 800588c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005890:	e883 0003 	stmia.w	r3, {r0, r1}

	// Читаем конфигурационный файл
	while(Read_File(Name_settings, 11, ReadFileBuf, file_size)!=FR_OK){};
 8005894:	bf00      	nop
 8005896:	f107 000c 	add.w	r0, r7, #12
 800589a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800589e:	4aca      	ldr	r2, [pc, #808]	; (8005bc8 <Load_Settings+0x358>)
 80058a0:	210b      	movs	r1, #11
 80058a2:	f7ff fd8f 	bl	80053c4 <Read_File>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f4      	bne.n	8005896 <Load_Settings+0x26>
	//{
		gauge_error = Read_Variable_From_File(gauge_error_tag);
 80058ac:	200f      	movs	r0, #15
 80058ae:	f7ff ffc3 	bl	8005838 <Read_Variable_From_File>
 80058b2:	eeb0 7a40 	vmov.f32	s14, s0
 80058b6:	eef0 7a60 	vmov.f32	s15, s1
 80058ba:	4bc4      	ldr	r3, [pc, #784]	; (8005bcc <Load_Settings+0x35c>)
 80058bc:	ed83 7b00 	vstr	d7, [r3]
		display_brightness = (uint16_t)Read_Variable_From_File(display_brightness_tag);
 80058c0:	2001      	movs	r0, #1
 80058c2:	f7ff ffb9 	bl	8005838 <Read_Variable_From_File>
 80058c6:	ec53 2b10 	vmov	r2, r3, d0
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	f7fb f97b 	bl	8000bc8 <__aeabi_d2uiz>
 80058d2:	4603      	mov	r3, r0
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4bbd      	ldr	r3, [pc, #756]	; (8005bd0 <Load_Settings+0x360>)
 80058da:	701a      	strb	r2, [r3, #0]
		display_contrast = (uint16_t)Read_Variable_From_File(display_contrast_tag);
 80058dc:	2002      	movs	r0, #2
 80058de:	f7ff ffab 	bl	8005838 <Read_Variable_From_File>
 80058e2:	ec53 2b10 	vmov	r2, r3, d0
 80058e6:	4610      	mov	r0, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	f7fb f96d 	bl	8000bc8 <__aeabi_d2uiz>
 80058ee:	4603      	mov	r3, r0
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	4bb7      	ldr	r3, [pc, #732]	; (8005bd4 <Load_Settings+0x364>)
 80058f6:	701a      	strb	r2, [r3, #0]
		mm_peak = (uint16_t)Read_Variable_From_File(mm_peak_tag);
 80058f8:	2003      	movs	r0, #3
 80058fa:	f7ff ff9d 	bl	8005838 <Read_Variable_From_File>
 80058fe:	ec53 2b10 	vmov	r2, r3, d0
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	f7fb f95f 	bl	8000bc8 <__aeabi_d2uiz>
 800590a:	4603      	mov	r3, r0
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2da      	uxtb	r2, r3
 8005910:	4bb1      	ldr	r3, [pc, #708]	; (8005bd8 <Load_Settings+0x368>)
 8005912:	701a      	strb	r2, [r3, #0]
		leak_detect = (uint16_t)Read_Variable_From_File(leak_detect_tag);
 8005914:	2004      	movs	r0, #4
 8005916:	f7ff ff8f 	bl	8005838 <Read_Variable_From_File>
 800591a:	ec53 2b10 	vmov	r2, r3, d0
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	f7fb f951 	bl	8000bc8 <__aeabi_d2uiz>
 8005926:	4603      	mov	r3, r0
 8005928:	b29b      	uxth	r3, r3
 800592a:	b2da      	uxtb	r2, r3
 800592c:	4bab      	ldr	r3, [pc, #684]	; (8005bdc <Load_Settings+0x36c>)
 800592e:	701a      	strb	r2, [r3, #0]
		PV = (uint16_t)Read_Variable_From_File(PV_tag);
 8005930:	2005      	movs	r0, #5
 8005932:	f7ff ff81 	bl	8005838 <Read_Variable_From_File>
 8005936:	ec53 2b10 	vmov	r2, r3, d0
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f7fb f943 	bl	8000bc8 <__aeabi_d2uiz>
 8005942:	4603      	mov	r3, r0
 8005944:	b29b      	uxth	r3, r3
 8005946:	b2da      	uxtb	r2, r3
 8005948:	4ba5      	ldr	r3, [pc, #660]	; (8005be0 <Load_Settings+0x370>)
 800594a:	701a      	strb	r2, [r3, #0]
		PI = (uint16_t)Read_Variable_From_File(PI_tag);
 800594c:	2006      	movs	r0, #6
 800594e:	f7ff ff73 	bl	8005838 <Read_Variable_From_File>
 8005952:	ec53 2b10 	vmov	r2, r3, d0
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	f7fb f935 	bl	8000bc8 <__aeabi_d2uiz>
 800595e:	4603      	mov	r3, r0
 8005960:	b29b      	uxth	r3, r3
 8005962:	b2da      	uxtb	r2, r3
 8005964:	4b9f      	ldr	r3, [pc, #636]	; (8005be4 <Load_Settings+0x374>)
 8005966:	701a      	strb	r2, [r3, #0]
		PE = (uint16_t)Read_Variable_From_File(PE_tag);
 8005968:	2007      	movs	r0, #7
 800596a:	f7ff ff65 	bl	8005838 <Read_Variable_From_File>
 800596e:	ec53 2b10 	vmov	r2, r3, d0
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	f7fb f927 	bl	8000bc8 <__aeabi_d2uiz>
 800597a:	4603      	mov	r3, r0
 800597c:	b29b      	uxth	r3, r3
 800597e:	b2da      	uxtb	r2, r3
 8005980:	4b99      	ldr	r3, [pc, #612]	; (8005be8 <Load_Settings+0x378>)
 8005982:	701a      	strb	r2, [r3, #0]
		PGA_GAIN = (uint16_t)Read_Variable_From_File(PGA_GAIN_tag);
 8005984:	2008      	movs	r0, #8
 8005986:	f7ff ff57 	bl	8005838 <Read_Variable_From_File>
 800598a:	ec53 2b10 	vmov	r2, r3, d0
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	f7fb f919 	bl	8000bc8 <__aeabi_d2uiz>
 8005996:	4603      	mov	r3, r0
 8005998:	b29b      	uxth	r3, r3
 800599a:	b2da      	uxtb	r2, r3
 800599c:	4b93      	ldr	r3, [pc, #588]	; (8005bec <Load_Settings+0x37c>)
 800599e:	701a      	strb	r2, [r3, #0]
		ADC_SPS = (uint16_t)Read_Variable_From_File(ADC_SPS_tag);
 80059a0:	2009      	movs	r0, #9
 80059a2:	f7ff ff49 	bl	8005838 <Read_Variable_From_File>
 80059a6:	ec53 2b10 	vmov	r2, r3, d0
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	f7fb f90b 	bl	8000bc8 <__aeabi_d2uiz>
 80059b2:	4603      	mov	r3, r0
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	4b8d      	ldr	r3, [pc, #564]	; (8005bf0 <Load_Settings+0x380>)
 80059ba:	701a      	strb	r2, [r3, #0]
		adc_calibration_mode = (uint16_t)Read_Variable_From_File(adc_calibration_mode_tag);
 80059bc:	200a      	movs	r0, #10
 80059be:	f7ff ff3b 	bl	8005838 <Read_Variable_From_File>
 80059c2:	ec53 2b10 	vmov	r2, r3, d0
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7fb f8fd 	bl	8000bc8 <__aeabi_d2uiz>
 80059ce:	4603      	mov	r3, r0
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	4b87      	ldr	r3, [pc, #540]	; (8005bf4 <Load_Settings+0x384>)
 80059d6:	701a      	strb	r2, [r3, #0]
		ADC_Buff_size = (uint16_t)Read_Variable_From_File(ADC_Buff_size_tag);
 80059d8:	200b      	movs	r0, #11
 80059da:	f7ff ff2d 	bl	8005838 <Read_Variable_From_File>
 80059de:	ec53 2b10 	vmov	r2, r3, d0
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	f7fb f8ef 	bl	8000bc8 <__aeabi_d2uiz>
 80059ea:	4603      	mov	r3, r0
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	4b82      	ldr	r3, [pc, #520]	; (8005bf8 <Load_Settings+0x388>)
 80059f0:	801a      	strh	r2, [r3, #0]
		Auto_Off_Time = (uint16_t)Read_Variable_From_File(Auto_Off_Time_tag);
 80059f2:	200c      	movs	r0, #12
 80059f4:	f7ff ff20 	bl	8005838 <Read_Variable_From_File>
 80059f8:	ec53 2b10 	vmov	r2, r3, d0
 80059fc:	4610      	mov	r0, r2
 80059fe:	4619      	mov	r1, r3
 8005a00:	f7fb f8e2 	bl	8000bc8 <__aeabi_d2uiz>
 8005a04:	4603      	mov	r3, r0
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	4b7c      	ldr	r3, [pc, #496]	; (8005bfc <Load_Settings+0x38c>)
 8005a0a:	801a      	strh	r2, [r3, #0]
		serial_num = (uint16_t)Read_Variable_From_File(serial_num_tag);
 8005a0c:	200d      	movs	r0, #13
 8005a0e:	f7ff ff13 	bl	8005838 <Read_Variable_From_File>
 8005a12:	ec53 2b10 	vmov	r2, r3, d0
 8005a16:	4610      	mov	r0, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f7fb f8d5 	bl	8000bc8 <__aeabi_d2uiz>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	4b76      	ldr	r3, [pc, #472]	; (8005c00 <Load_Settings+0x390>)
 8005a26:	601a      	str	r2, [r3, #0]
		gauge_range = (uint16_t)Read_Variable_From_File(gauge_range_tag);
 8005a28:	200e      	movs	r0, #14
 8005a2a:	f7ff ff05 	bl	8005838 <Read_Variable_From_File>
 8005a2e:	ec53 2b10 	vmov	r2, r3, d0
 8005a32:	4610      	mov	r0, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	f7fb f8c7 	bl	8000bc8 <__aeabi_d2uiz>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4b70      	ldr	r3, [pc, #448]	; (8005c04 <Load_Settings+0x394>)
 8005a42:	601a      	str	r2, [r3, #0]
		light_delay = (uint16_t)Read_Variable_From_File(light_delay_tag);
 8005a44:	2010      	movs	r0, #16
 8005a46:	f7ff fef7 	bl	8005838 <Read_Variable_From_File>
 8005a4a:	ec53 2b10 	vmov	r2, r3, d0
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	f7fb f8b9 	bl	8000bc8 <__aeabi_d2uiz>
 8005a56:	4603      	mov	r3, r0
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	4b6b      	ldr	r3, [pc, #428]	; (8005c08 <Load_Settings+0x398>)
 8005a5c:	801a      	strh	r2, [r3, #0]
		logging = (uint16_t)Read_Variable_From_File(logging_tag);
 8005a5e:	2011      	movs	r0, #17
 8005a60:	f7ff feea 	bl	8005838 <Read_Variable_From_File>
 8005a64:	ec53 2b10 	vmov	r2, r3, d0
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7fb f8ac 	bl	8000bc8 <__aeabi_d2uiz>
 8005a70:	4603      	mov	r3, r0
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4b65      	ldr	r3, [pc, #404]	; (8005c0c <Load_Settings+0x39c>)
 8005a78:	701a      	strb	r2, [r3, #0]
		logging_start_hour = (uint16_t)Read_Variable_From_File(logging_start_hour_tag);
 8005a7a:	2012      	movs	r0, #18
 8005a7c:	f7ff fedc 	bl	8005838 <Read_Variable_From_File>
 8005a80:	ec53 2b10 	vmov	r2, r3, d0
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f7fb f89e 	bl	8000bc8 <__aeabi_d2uiz>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4b5f      	ldr	r3, [pc, #380]	; (8005c10 <Load_Settings+0x3a0>)
 8005a94:	701a      	strb	r2, [r3, #0]
		logging_start_min = (uint16_t)Read_Variable_From_File(logging_start_min_tag);
 8005a96:	2013      	movs	r0, #19
 8005a98:	f7ff fece 	bl	8005838 <Read_Variable_From_File>
 8005a9c:	ec53 2b10 	vmov	r2, r3, d0
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f7fb f890 	bl	8000bc8 <__aeabi_d2uiz>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <Load_Settings+0x3a4>)
 8005ab0:	701a      	strb	r2, [r3, #0]
		logging_start_sec = (uint16_t)Read_Variable_From_File(logging_start_sec_tag);
 8005ab2:	2014      	movs	r0, #20
 8005ab4:	f7ff fec0 	bl	8005838 <Read_Variable_From_File>
 8005ab8:	ec53 2b10 	vmov	r2, r3, d0
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f7fb f882 	bl	8000bc8 <__aeabi_d2uiz>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4b53      	ldr	r3, [pc, #332]	; (8005c18 <Load_Settings+0x3a8>)
 8005acc:	701a      	strb	r2, [r3, #0]
		logging_period = (uint16_t)Read_Variable_From_File(logging_period_tag);
 8005ace:	2015      	movs	r0, #21
 8005ad0:	f7ff feb2 	bl	8005838 <Read_Variable_From_File>
 8005ad4:	ec53 2b10 	vmov	r2, r3, d0
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4619      	mov	r1, r3
 8005adc:	f7fb f874 	bl	8000bc8 <__aeabi_d2uiz>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	4b4d      	ldr	r3, [pc, #308]	; (8005c1c <Load_Settings+0x3ac>)
 8005ae8:	701a      	strb	r2, [r3, #0]
		logging_len = (uint16_t)Read_Variable_From_File(logging_len_tag);
 8005aea:	2016      	movs	r0, #22
 8005aec:	f7ff fea4 	bl	8005838 <Read_Variable_From_File>
 8005af0:	ec53 2b10 	vmov	r2, r3, d0
 8005af4:	4610      	mov	r0, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	f7fb f866 	bl	8000bc8 <__aeabi_d2uiz>
 8005afc:	4603      	mov	r3, r0
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4b47      	ldr	r3, [pc, #284]	; (8005c20 <Load_Settings+0x3b0>)
 8005b04:	701a      	strb	r2, [r3, #0]
		logging_num = (uint16_t)Read_Variable_From_File(logging_num_tag);
 8005b06:	2017      	movs	r0, #23
 8005b08:	f7ff fe96 	bl	8005838 <Read_Variable_From_File>
 8005b0c:	ec53 2b10 	vmov	r2, r3, d0
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	f7fb f858 	bl	8000bc8 <__aeabi_d2uiz>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <Load_Settings+0x3b4>)
 8005b20:	701a      	strb	r2, [r3, #0]
		AutoAmpCoef=(uint8_t)Read_Variable_From_File(AutoAmpCoef_tag);
 8005b22:	201e      	movs	r0, #30
 8005b24:	f7ff fe88 	bl	8005838 <Read_Variable_From_File>
 8005b28:	ec53 2b10 	vmov	r2, r3, d0
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f7fb f84a 	bl	8000bc8 <__aeabi_d2uiz>
 8005b34:	4603      	mov	r3, r0
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <Load_Settings+0x3b8>)
 8005b3a:	701a      	strb	r2, [r3, #0]
		AutoOffCoef_period=(uint16_t)Read_Variable_From_File(AutoOffCoef_period_tag);
 8005b3c:	201f      	movs	r0, #31
 8005b3e:	f7ff fe7b 	bl	8005838 <Read_Variable_From_File>
 8005b42:	ec53 2b10 	vmov	r2, r3, d0
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fb f83d 	bl	8000bc8 <__aeabi_d2uiz>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	4b36      	ldr	r3, [pc, #216]	; (8005c2c <Load_Settings+0x3bc>)
 8005b54:	801a      	strh	r2, [r3, #0]
		AutoGainCoef_period=(uint16_t)Read_Variable_From_File(AutoGainCoef_period_tag);
 8005b56:	2021      	movs	r0, #33	; 0x21
 8005b58:	f7ff fe6e 	bl	8005838 <Read_Variable_From_File>
 8005b5c:	ec53 2b10 	vmov	r2, r3, d0
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	f7fb f830 	bl	8000bc8 <__aeabi_d2uiz>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <Load_Settings+0x3c0>)
 8005b6e:	801a      	strh	r2, [r3, #0]

	//}

		// Читаем калибровочный файл
		while(Read_File(Name_calibr, 8, ReadFileBuf, file_size)!=FR_OK){};
 8005b70:	bf00      	nop
 8005b72:	1d38      	adds	r0, r7, #4
 8005b74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <Load_Settings+0x358>)
 8005b7a:	2108      	movs	r1, #8
 8005b7c:	f7ff fc22 	bl	80053c4 <Read_File>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f5      	bne.n	8005b72 <Load_Settings+0x302>
		a_current=Read_Variable_From_File(a_current_tag);
 8005b86:	2018      	movs	r0, #24
 8005b88:	f7ff fe56 	bl	8005838 <Read_Variable_From_File>
 8005b8c:	eeb0 7a40 	vmov.f32	s14, s0
 8005b90:	eef0 7a60 	vmov.f32	s15, s1
 8005b94:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <Load_Settings+0x3c4>)
 8005b96:	ed83 7b00 	vstr	d7, [r3]
		b_current=Read_Variable_From_File(b_current_tag);
 8005b9a:	2019      	movs	r0, #25
 8005b9c:	f7ff fe4c 	bl	8005838 <Read_Variable_From_File>
 8005ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8005ba4:	eef0 7a60 	vmov.f32	s15, s1
 8005ba8:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <Load_Settings+0x3c8>)
 8005baa:	ed83 7b00 	vstr	d7, [r3]
		c_current=Read_Variable_From_File(c_current_tag);
 8005bae:	201a      	movs	r0, #26
 8005bb0:	f7ff fe42 	bl	8005838 <Read_Variable_From_File>
 8005bb4:	eeb0 7a40 	vmov.f32	s14, s0
 8005bb8:	eef0 7a60 	vmov.f32	s15, s1
 8005bbc:	e03e      	b.n	8005c3c <Load_Settings+0x3cc>
 8005bbe:	bf00      	nop
 8005bc0:	080221cc 	.word	0x080221cc
 8005bc4:	080221d8 	.word	0x080221d8
 8005bc8:	20006b98 	.word	0x20006b98
 8005bcc:	20000080 	.word	0x20000080
 8005bd0:	20000070 	.word	0x20000070
 8005bd4:	20000071 	.word	0x20000071
 8005bd8:	20000832 	.word	0x20000832
 8005bdc:	20000833 	.word	0x20000833
 8005be0:	20000834 	.word	0x20000834
 8005be4:	20000835 	.word	0x20000835
 8005be8:	20000836 	.word	0x20000836
 8005bec:	20000072 	.word	0x20000072
 8005bf0:	20000073 	.word	0x20000073
 8005bf4:	20000837 	.word	0x20000837
 8005bf8:	20000074 	.word	0x20000074
 8005bfc:	20000838 	.word	0x20000838
 8005c00:	20000078 	.word	0x20000078
 8005c04:	2000083c 	.word	0x2000083c
 8005c08:	20000088 	.word	0x20000088
 8005c0c:	20000840 	.word	0x20000840
 8005c10:	20000841 	.word	0x20000841
 8005c14:	20000842 	.word	0x20000842
 8005c18:	20000843 	.word	0x20000843
 8005c1c:	20000844 	.word	0x20000844
 8005c20:	20000845 	.word	0x20000845
 8005c24:	20000846 	.word	0x20000846
 8005c28:	20000831 	.word	0x20000831
 8005c2c:	200020f4 	.word	0x200020f4
 8005c30:	2000208c 	.word	0x2000208c
 8005c34:	20006b78 	.word	0x20006b78
 8005c38:	20006b90 	.word	0x20006b90
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <Load_Settings+0x42c>)
 8005c3e:	ed83 7b00 	vstr	d7, [r3]
		a_voltage=Read_Variable_From_File(a_voltage_tag);
 8005c42:	201b      	movs	r0, #27
 8005c44:	f7ff fdf8 	bl	8005838 <Read_Variable_From_File>
 8005c48:	eeb0 7a40 	vmov.f32	s14, s0
 8005c4c:	eef0 7a60 	vmov.f32	s15, s1
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <Load_Settings+0x430>)
 8005c52:	ed83 7b00 	vstr	d7, [r3]
		b_voltage=Read_Variable_From_File(b_voltage_tag);
 8005c56:	201c      	movs	r0, #28
 8005c58:	f7ff fdee 	bl	8005838 <Read_Variable_From_File>
 8005c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c60:	eef0 7a60 	vmov.f32	s15, s1
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <Load_Settings+0x434>)
 8005c66:	ed83 7b00 	vstr	d7, [r3]
		c_voltage=Read_Variable_From_File(c_voltage_tag);
 8005c6a:	201d      	movs	r0, #29
 8005c6c:	f7ff fde4 	bl	8005838 <Read_Variable_From_File>
 8005c70:	eeb0 7a40 	vmov.f32	s14, s0
 8005c74:	eef0 7a60 	vmov.f32	s15, s1
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <Load_Settings+0x438>)
 8005c7a:	ed83 7b00 	vstr	d7, [r3]
		RefVoltage=Read_Variable_From_File(RefVoltage_tag);
 8005c7e:	2020      	movs	r0, #32
 8005c80:	f7ff fdda 	bl	8005838 <Read_Variable_From_File>
 8005c84:	eeb0 7a40 	vmov.f32	s14, s0
 8005c88:	eef0 7a60 	vmov.f32	s15, s1
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <Load_Settings+0x43c>)
 8005c8e:	ed83 7b00 	vstr	d7, [r3]
//		my_itoa(123456.654321, RAM, 0, 20);
//		my_itoa(-654321.123456, RAM, 0, 20);
//		my_itoa(555555, RAM, 0, 20);
//		my_itoa(-444444, RAM, 0, 20);
//		RAM[0]=0;
}
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20006b70 	.word	0x20006b70
 8005ca0:	20006b80 	.word	0x20006b80
 8005ca4:	20006b68 	.word	0x20006b68
 8005ca8:	20006b88 	.word	0x20006b88
 8005cac:	20000060 	.word	0x20000060

08005cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005cb4:	f001 ff6d 	bl	8007b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005cb8:	f000 f878 	bl	8005dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cbc:	f000 fca0 	bl	8006600 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005cc0:	f000 f9e4 	bl	800608c <MX_I2C1_Init>
  MX_I2C2_Init();
 8005cc4:	f000 fa22 	bl	800610c <MX_I2C2_Init>
  MX_RTC_Init();
 8005cc8:	f000 fa60 	bl	800618c <MX_RTC_Init>
  MX_SPI1_Init();
 8005ccc:	f000 fa8a 	bl	80061e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005cd0:	f000 fac6 	bl	8006260 <MX_SPI2_Init>
  MX_SPI3_Init();
 8005cd4:	f000 fb02 	bl	80062dc <MX_SPI3_Init>
  MX_TIM2_Init();
 8005cd8:	f000 fb3e 	bl	8006358 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005cdc:	f000 fb9a 	bl	8006414 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005ce0:	f000 fc28 	bl	8006534 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8005ce4:	f00c f992 	bl	801200c <MX_FATFS_Init>
  MX_DMA_Init();
 8005ce8:	f000 fc5c 	bl	80065a4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005cec:	f013 f82c 	bl	8018d48 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8005cf0:	f000 f936 	bl	8005f60 <MX_ADC2_Init>
  MX_ADC1_Init();
 8005cf4:	f000 f8ba 	bl	8005e6c <MX_ADC1_Init>
  MX_TIM6_Init();
 8005cf8:	f000 fbe6 	bl	80064c8 <MX_TIM6_Init>
  MX_DAC1_Init();
 8005cfc:	f000 f994 	bl	8006028 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Таски
  	new_task[1]=Parser_process;			// Парсинг команд через виртуальный компорт
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <main+0xc8>)
 8005d02:	4a1e      	ldr	r2, [pc, #120]	; (8005d7c <main+0xcc>)
 8005d04:	605a      	str	r2, [r3, #4]
	new_task[2]=ADC_process;			// АЦП
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <main+0xc8>)
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <main+0xd0>)
 8005d0a:	609a      	str	r2, [r3, #8]
	new_task[3]=Display_process;		// Дисплей
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <main+0xc8>)
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	; (8005d84 <main+0xd4>)
 8005d10:	60da      	str	r2, [r3, #12]
	new_task[4]=Buttons_process;		// Кнопки
 8005d12:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <main+0xc8>)
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <main+0xd8>)
 8005d16:	611a      	str	r2, [r3, #16]
	new_task[5]=RTC_process;			// Часы реального времени
 8005d18:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <main+0xc8>)
 8005d1a:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <main+0xdc>)
 8005d1c:	615a      	str	r2, [r3, #20]
	new_task[6]=Auto_OFF_process;		// Автовыключение
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <main+0xc8>)
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <main+0xe0>)
 8005d22:	619a      	str	r2, [r3, #24]
	new_task[7]=Temperature_process;	// Температура МКУ
 8005d24:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <main+0xc8>)
 8005d26:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <main+0xe4>)
 8005d28:	61da      	str	r2, [r3, #28]
	new_task[8]=Battery_process;		// Напряжение на батарее
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <main+0xc8>)
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <main+0xe8>)
 8005d2e:	621a      	str	r2, [r3, #32]


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Питание на самоблокировку
 8005d30:	2201      	movs	r2, #1
 8005d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d36:	4819      	ldr	r0, [pc, #100]	; (8005d9c <main+0xec>)
 8005d38:	f004 fa4e 	bl	800a1d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Питание на самоблокировку
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d42:	4817      	ldr	r0, [pc, #92]	; (8005da0 <main+0xf0>)
 8005d44:	f004 fa48 	bl	800a1d8 <HAL_GPIO_WritePin>
  Buttons_init();
 8005d48:	f7fc f92e 	bl	8001fa8 <Buttons_init>
  Display_init();
 8005d4c:	f7fc ffa6 	bl	8002c9c <Display_init>
  ADC_init();
 8005d50:	f7fb fbf6 	bl	8001540 <ADC_init>
  W25_Init();
 8005d54:	f7fe fe7a 	bl	8004a4c <W25_Init>
  BLueTooth_Configuration(BLE_config);
 8005d58:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <main+0xf4>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fc f9b5 	bl	80020cc <BLueTooth_Configuration>
  Logging_init();
 8005d62:	f7ff faf9 	bl	8005358 <Logging_init>
  Load_Settings();
 8005d66:	f7ff fd83 	bl	8005870 <Load_Settings>

  Play_Sound((char*)"INTRO.WAV");
 8005d6a:	480f      	ldr	r0, [pc, #60]	; (8005da8 <main+0xf8>)
 8005d6c:	f000 fd7a 	bl	8006864 <Play_Sound>
  ELSPIRE_OS_KERNEL();
 8005d70:	f7fd fa44 	bl	80031fc <ELSPIRE_OS_KERNEL>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d74:	e7fe      	b.n	8005d74 <main+0xc4>
 8005d76:	bf00      	nop
 8005d78:	20001ecc 	.word	0x20001ecc
 8005d7c:	08003e51 	.word	0x08003e51
 8005d80:	08001981 	.word	0x08001981
 8005d84:	08003111 	.word	0x08003111
 8005d88:	080027ad 	.word	0x080027ad
 8005d8c:	08017e81 	.word	0x08017e81
 8005d90:	08017129 	.word	0x08017129
 8005d94:	08007791 	.word	0x08007791
 8005d98:	08017c9d 	.word	0x08017c9d
 8005d9c:	48000800 	.word	0x48000800
 8005da0:	48000c00 	.word	0x48000c00
 8005da4:	20000058 	.word	0x20000058
 8005da8:	080221e0 	.word	0x080221e0

08005dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b096      	sub	sp, #88	; 0x58
 8005db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	2244      	movs	r2, #68	; 0x44
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f017 fa48 	bl	801d250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	609a      	str	r2, [r3, #8]
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005dce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005dd2:	f006 f817 	bl	800be04 <HAL_PWREx_ControlVoltageScaling>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005ddc:	f000 fd3c 	bl	8006858 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005de0:	f005 fff2 	bl	800bdc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005de4:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <SystemClock_Config+0xbc>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <SystemClock_Config+0xbc>)
 8005dec:	f023 0318 	bic.w	r3, r3, #24
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005df4:	2305      	movs	r3, #5
 8005df6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e02:	2302      	movs	r3, #2
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e06:	2303      	movs	r3, #3
 8005e08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005e0e:	2314      	movs	r3, #20
 8005e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e12:	2302      	movs	r3, #2
 8005e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005e16:	2302      	movs	r3, #2
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e1e:	f107 0314 	add.w	r3, r7, #20
 8005e22:	4618      	mov	r0, r3
 8005e24:	f006 f854 	bl	800bed0 <HAL_RCC_OscConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005e2e:	f000 fd13 	bl	8006858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e32:	230f      	movs	r3, #15
 8005e34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e36:	2303      	movs	r3, #3
 8005e38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e46:	463b      	mov	r3, r7
 8005e48:	2104      	movs	r1, #4
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f006 fc66 	bl	800c71c <HAL_RCC_ClockConfig>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005e56:	f000 fcff 	bl	8006858 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005e5a:	f007 f993 	bl	800d184 <HAL_RCCEx_EnableLSECSS>
}
 8005e5e:	bf00      	nop
 8005e60:	3758      	adds	r7, #88	; 0x58
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000

08005e6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005e72:	f107 031c 	add.w	r3, r7, #28
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	605a      	str	r2, [r3, #4]
 8005e7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	611a      	str	r2, [r3, #16]
 8005e8c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005e8e:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005e90:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <MX_ADC1_Init+0xec>)
 8005e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005e94:	4b2f      	ldr	r3, [pc, #188]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ea6:	4b2b      	ldr	r3, [pc, #172]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005eac:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005eae:	2204      	movs	r2, #4
 8005eb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005eb8:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005ebe:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ec4:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ecc:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ed2:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005ed8:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005eee:	4819      	ldr	r0, [pc, #100]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005ef0:	f002 f894 	bl	800801c <HAL_ADC_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005efa:	f000 fcad 	bl	8006858 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f02:	f107 031c 	add.w	r3, r7, #28
 8005f06:	4619      	mov	r1, r3
 8005f08:	4812      	ldr	r0, [pc, #72]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005f0a:	f003 f895 	bl	8009038 <HAL_ADCEx_MultiModeConfigChannel>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005f14:	f000 fca0 	bl	8006858 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <MX_ADC1_Init+0xf0>)
 8005f1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005f1c:	2306      	movs	r3, #6
 8005f1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005f20:	2304      	movs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f24:	237f      	movs	r3, #127	; 0x7f
 8005f26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f28:	2304      	movs	r3, #4
 8005f2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4807      	ldr	r0, [pc, #28]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005f36:	f002 fb57 	bl	80085e8 <HAL_ADC_ConfigChannel>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005f40:	f000 fc8a 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 8005f44:	4803      	ldr	r0, [pc, #12]	; (8005f54 <MX_ADC1_Init+0xe8>)
 8005f46:	f002 f9c3 	bl	80082d0 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8005f4a:	bf00      	nop
 8005f4c:	3728      	adds	r7, #40	; 0x28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20007ab4 	.word	0x20007ab4
 8005f58:	50040000 	.word	0x50040000
 8005f5c:	c7520000 	.word	0xc7520000

08005f60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f66:	463b      	mov	r3, r7
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	611a      	str	r2, [r3, #16]
 8005f74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8005f76:	4b29      	ldr	r3, [pc, #164]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f78:	4a29      	ldr	r2, [pc, #164]	; (8006020 <MX_ADC2_Init+0xc0>)
 8005f7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f82:	4b26      	ldr	r3, [pc, #152]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f88:	4b24      	ldr	r3, [pc, #144]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f8e:	4b23      	ldr	r3, [pc, #140]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f94:	4b21      	ldr	r3, [pc, #132]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f96:	2204      	movs	r2, #4
 8005f98:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005f9a:	4b20      	ldr	r3, [pc, #128]	; (800601c <MX_ADC2_Init+0xbc>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005fa0:	4b1e      	ldr	r3, [pc, #120]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8005fa6:	4b1d      	ldr	r3, [pc, #116]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005fb4:	4b19      	ldr	r3, [pc, #100]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005fc0:	4b16      	ldr	r3, [pc, #88]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005fd6:	4811      	ldr	r0, [pc, #68]	; (800601c <MX_ADC2_Init+0xbc>)
 8005fd8:	f002 f820 	bl	800801c <HAL_ADC_Init>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8005fe2:	f000 fc39 	bl	8006858 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <MX_ADC2_Init+0xc4>)
 8005fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005fea:	2306      	movs	r3, #6
 8005fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005fee:	2304      	movs	r3, #4
 8005ff0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005ff2:	237f      	movs	r3, #127	; 0x7f
 8005ff4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ffe:	463b      	mov	r3, r7
 8006000:	4619      	mov	r1, r3
 8006002:	4806      	ldr	r0, [pc, #24]	; (800601c <MX_ADC2_Init+0xbc>)
 8006004:	f002 faf0 	bl	80085e8 <HAL_ADC_ConfigChannel>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800600e:	f000 fc23 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20007a4c 	.word	0x20007a4c
 8006020:	50040100 	.word	0x50040100
 8006024:	21800100 	.word	0x21800100

08006028 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	2224      	movs	r2, #36	; 0x24
 8006032:	2100      	movs	r1, #0
 8006034:	4618      	mov	r0, r3
 8006036:	f017 f90b 	bl	801d250 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <MX_DAC1_Init+0x5c>)
 800603c:	4a12      	ldr	r2, [pc, #72]	; (8006088 <MX_DAC1_Init+0x60>)
 800603e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006040:	4810      	ldr	r0, [pc, #64]	; (8006084 <MX_DAC1_Init+0x5c>)
 8006042:	f003 f98b 	bl	800935c <HAL_DAC_Init>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800604c:	f000 fc04 	bl	8006858 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8006054:	2304      	movs	r3, #4
 8006056:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006064:	1d3b      	adds	r3, r7, #4
 8006066:	2210      	movs	r2, #16
 8006068:	4619      	mov	r1, r3
 800606a:	4806      	ldr	r0, [pc, #24]	; (8006084 <MX_DAC1_Init+0x5c>)
 800606c:	f003 fae6 	bl	800963c <HAL_DAC_ConfigChannel>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8006076:	f000 fbef 	bl	8006858 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf, 512, DAC_ALIGN_12B_R);
  /* USER CODE END DAC1_Init 2 */

}
 800607a:	bf00      	nop
 800607c:	3728      	adds	r7, #40	; 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20007b1c 	.word	0x20007b1c
 8006088:	40007400 	.word	0x40007400

0800608c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006090:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <MX_I2C1_Init+0x74>)
 8006092:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <MX_I2C1_Init+0x78>)
 8006094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <MX_I2C1_Init+0x74>)
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <MX_I2C1_Init+0x7c>)
 800609a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800609c:	4b18      	ldr	r3, [pc, #96]	; (8006100 <MX_I2C1_Init+0x74>)
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <MX_I2C1_Init+0x74>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <MX_I2C1_Init+0x74>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80060ae:	4b14      	ldr	r3, [pc, #80]	; (8006100 <MX_I2C1_Init+0x74>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80060b4:	4b12      	ldr	r3, [pc, #72]	; (8006100 <MX_I2C1_Init+0x74>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060ba:	4b11      	ldr	r3, [pc, #68]	; (8006100 <MX_I2C1_Init+0x74>)
 80060bc:	2200      	movs	r2, #0
 80060be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <MX_I2C1_Init+0x74>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80060c6:	480e      	ldr	r0, [pc, #56]	; (8006100 <MX_I2C1_Init+0x74>)
 80060c8:	f004 f8c1 	bl	800a24e <HAL_I2C_Init>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80060d2:	f000 fbc1 	bl	8006858 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80060d6:	2100      	movs	r1, #0
 80060d8:	4809      	ldr	r0, [pc, #36]	; (8006100 <MX_I2C1_Init+0x74>)
 80060da:	f004 fd11 	bl	800ab00 <HAL_I2CEx_ConfigAnalogFilter>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80060e4:	f000 fbb8 	bl	8006858 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80060e8:	2100      	movs	r1, #0
 80060ea:	4805      	ldr	r0, [pc, #20]	; (8006100 <MX_I2C1_Init+0x74>)
 80060ec:	f004 fd53 	bl	800ab96 <HAL_I2CEx_ConfigDigitalFilter>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80060f6:	f000 fbaf 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80060fa:	bf00      	nop
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200078a4 	.word	0x200078a4
 8006104:	40005400 	.word	0x40005400
 8006108:	10909cec 	.word	0x10909cec

0800610c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <MX_I2C2_Init+0x74>)
 8006112:	4a1c      	ldr	r2, [pc, #112]	; (8006184 <MX_I2C2_Init+0x78>)
 8006114:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <MX_I2C2_Init+0x74>)
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <MX_I2C2_Init+0x7c>)
 800611a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <MX_I2C2_Init+0x74>)
 800611e:	2200      	movs	r2, #0
 8006120:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <MX_I2C2_Init+0x74>)
 8006124:	2201      	movs	r2, #1
 8006126:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006128:	4b15      	ldr	r3, [pc, #84]	; (8006180 <MX_I2C2_Init+0x74>)
 800612a:	2200      	movs	r2, #0
 800612c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800612e:	4b14      	ldr	r3, [pc, #80]	; (8006180 <MX_I2C2_Init+0x74>)
 8006130:	2200      	movs	r2, #0
 8006132:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006134:	4b12      	ldr	r3, [pc, #72]	; (8006180 <MX_I2C2_Init+0x74>)
 8006136:	2200      	movs	r2, #0
 8006138:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <MX_I2C2_Init+0x74>)
 800613c:	2200      	movs	r2, #0
 800613e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006140:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <MX_I2C2_Init+0x74>)
 8006142:	2200      	movs	r2, #0
 8006144:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006146:	480e      	ldr	r0, [pc, #56]	; (8006180 <MX_I2C2_Init+0x74>)
 8006148:	f004 f881 	bl	800a24e <HAL_I2C_Init>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006152:	f000 fb81 	bl	8006858 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006156:	2100      	movs	r1, #0
 8006158:	4809      	ldr	r0, [pc, #36]	; (8006180 <MX_I2C2_Init+0x74>)
 800615a:	f004 fcd1 	bl	800ab00 <HAL_I2CEx_ConfigAnalogFilter>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006164:	f000 fb78 	bl	8006858 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006168:	2100      	movs	r1, #0
 800616a:	4805      	ldr	r0, [pc, #20]	; (8006180 <MX_I2C2_Init+0x74>)
 800616c:	f004 fd13 	bl	800ab96 <HAL_I2CEx_ConfigDigitalFilter>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006176:	f000 fb6f 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20007858 	.word	0x20007858
 8006184:	40005800 	.word	0x40005800
 8006188:	10909cec 	.word	0x10909cec

0800618c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <MX_RTC_Init+0x50>)
 8006192:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <MX_RTC_Init+0x54>)
 8006194:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006196:	4b11      	ldr	r3, [pc, #68]	; (80061dc <MX_RTC_Init+0x50>)
 8006198:	2200      	movs	r2, #0
 800619a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <MX_RTC_Init+0x50>)
 800619e:	227f      	movs	r2, #127	; 0x7f
 80061a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <MX_RTC_Init+0x50>)
 80061a4:	22ff      	movs	r2, #255	; 0xff
 80061a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <MX_RTC_Init+0x50>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80061ae:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <MX_RTC_Init+0x50>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061b4:	4b09      	ldr	r3, [pc, #36]	; (80061dc <MX_RTC_Init+0x50>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061ba:	4b08      	ldr	r3, [pc, #32]	; (80061dc <MX_RTC_Init+0x50>)
 80061bc:	2200      	movs	r2, #0
 80061be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061c0:	4806      	ldr	r0, [pc, #24]	; (80061dc <MX_RTC_Init+0x50>)
 80061c2:	f007 f9bf 	bl	800d544 <HAL_RTC_Init>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80061cc:	f000 fb44 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_EnableBypassShadow(&hrtc);
 80061d0:	4802      	ldr	r0, [pc, #8]	; (80061dc <MX_RTC_Init+0x50>)
 80061d2:	f007 fd45 	bl	800dc60 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_Init 2 */

}
 80061d6:	bf00      	nop
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200077d0 	.word	0x200077d0
 80061e0:	40002800 	.word	0x40002800

080061e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <MX_SPI1_Init+0x74>)
 80061ea:	4a1c      	ldr	r2, [pc, #112]	; (800625c <MX_SPI1_Init+0x78>)
 80061ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <MX_SPI1_Init+0x74>)
 80061f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061f6:	4b18      	ldr	r3, [pc, #96]	; (8006258 <MX_SPI1_Init+0x74>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <MX_SPI1_Init+0x74>)
 80061fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006202:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006204:	4b14      	ldr	r3, [pc, #80]	; (8006258 <MX_SPI1_Init+0x74>)
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <MX_SPI1_Init+0x74>)
 800620c:	2200      	movs	r2, #0
 800620e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <MX_SPI1_Init+0x74>)
 8006212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006216:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <MX_SPI1_Init+0x74>)
 800621a:	2228      	movs	r2, #40	; 0x28
 800621c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800621e:	4b0e      	ldr	r3, [pc, #56]	; (8006258 <MX_SPI1_Init+0x74>)
 8006220:	2200      	movs	r2, #0
 8006222:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <MX_SPI1_Init+0x74>)
 8006226:	2200      	movs	r2, #0
 8006228:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <MX_SPI1_Init+0x74>)
 800622c:	2200      	movs	r2, #0
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <MX_SPI1_Init+0x74>)
 8006232:	2207      	movs	r2, #7
 8006234:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <MX_SPI1_Init+0x74>)
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <MX_SPI1_Init+0x74>)
 800623e:	2208      	movs	r2, #8
 8006240:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	; (8006258 <MX_SPI1_Init+0x74>)
 8006244:	f007 fd42 	bl	800dccc <HAL_SPI_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800624e:	f000 fb03 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	200077f4 	.word	0x200077f4
 800625c:	40013000 	.word	0x40013000

08006260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <MX_SPI2_Init+0x74>)
 8006266:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <MX_SPI2_Init+0x78>)
 8006268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <MX_SPI2_Init+0x74>)
 800626c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006272:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <MX_SPI2_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006278:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <MX_SPI2_Init+0x74>)
 800627a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800627e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006280:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <MX_SPI2_Init+0x74>)
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <MX_SPI2_Init+0x74>)
 8006288:	2200      	movs	r2, #0
 800628a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <MX_SPI2_Init+0x74>)
 800628e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006292:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <MX_SPI2_Init+0x74>)
 8006296:	2228      	movs	r2, #40	; 0x28
 8006298:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <MX_SPI2_Init+0x74>)
 800629c:	2200      	movs	r2, #0
 800629e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <MX_SPI2_Init+0x74>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <MX_SPI2_Init+0x74>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <MX_SPI2_Init+0x74>)
 80062ae:	2207      	movs	r2, #7
 80062b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <MX_SPI2_Init+0x74>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <MX_SPI2_Init+0x74>)
 80062ba:	2208      	movs	r2, #8
 80062bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80062be:	4805      	ldr	r0, [pc, #20]	; (80062d4 <MX_SPI2_Init+0x74>)
 80062c0:	f007 fd04 	bl	800dccc <HAL_SPI_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80062ca:	f000 fac5 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20001ef0 	.word	0x20001ef0
 80062d8:	40003800 	.word	0x40003800

080062dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80062e0:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <MX_SPI3_Init+0x74>)
 80062e2:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <MX_SPI3_Init+0x78>)
 80062e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <MX_SPI3_Init+0x74>)
 80062e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80062ee:	4b18      	ldr	r3, [pc, #96]	; (8006350 <MX_SPI3_Init+0x74>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <MX_SPI3_Init+0x74>)
 80062f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80062fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <MX_SPI3_Init+0x74>)
 80062fe:	2200      	movs	r2, #0
 8006300:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006302:	4b13      	ldr	r3, [pc, #76]	; (8006350 <MX_SPI3_Init+0x74>)
 8006304:	2200      	movs	r2, #0
 8006306:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <MX_SPI3_Init+0x74>)
 800630a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <MX_SPI3_Init+0x74>)
 8006312:	2220      	movs	r2, #32
 8006314:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <MX_SPI3_Init+0x74>)
 8006318:	2200      	movs	r2, #0
 800631a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <MX_SPI3_Init+0x74>)
 800631e:	2200      	movs	r2, #0
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006322:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <MX_SPI3_Init+0x74>)
 8006324:	2200      	movs	r2, #0
 8006326:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <MX_SPI3_Init+0x74>)
 800632a:	2207      	movs	r2, #7
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800632e:	4b08      	ldr	r3, [pc, #32]	; (8006350 <MX_SPI3_Init+0x74>)
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <MX_SPI3_Init+0x74>)
 8006336:	2208      	movs	r2, #8
 8006338:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800633a:	4805      	ldr	r0, [pc, #20]	; (8006350 <MX_SPI3_Init+0x74>)
 800633c:	f007 fcc6 	bl	800dccc <HAL_SPI_Init>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006346:	f000 fa87 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20006304 	.word	0x20006304
 8006354:	40003c00 	.word	0x40003c00

08006358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800635e:	f107 031c 	add.w	r3, r7, #28
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	605a      	str	r2, [r3, #4]
 8006368:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800636a:	463b      	mov	r3, r7
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
 8006378:	615a      	str	r2, [r3, #20]
 800637a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800637c:	4b24      	ldr	r3, [pc, #144]	; (8006410 <MX_TIM2_Init+0xb8>)
 800637e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8006384:	4b22      	ldr	r3, [pc, #136]	; (8006410 <MX_TIM2_Init+0xb8>)
 8006386:	2202      	movs	r2, #2
 8006388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800638a:	4b21      	ldr	r3, [pc, #132]	; (8006410 <MX_TIM2_Init+0xb8>)
 800638c:	2200      	movs	r2, #0
 800638e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 8006390:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <MX_TIM2_Init+0xb8>)
 8006392:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <MX_TIM2_Init+0xb8>)
 800639a:	2200      	movs	r2, #0
 800639c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800639e:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <MX_TIM2_Init+0xb8>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80063a4:	481a      	ldr	r0, [pc, #104]	; (8006410 <MX_TIM2_Init+0xb8>)
 80063a6:	f008 fccd 	bl	800ed44 <HAL_TIM_PWM_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80063b0:	f000 fa52 	bl	8006858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80063bc:	f107 031c 	add.w	r3, r7, #28
 80063c0:	4619      	mov	r1, r3
 80063c2:	4813      	ldr	r0, [pc, #76]	; (8006410 <MX_TIM2_Init+0xb8>)
 80063c4:	f009 fc0a 	bl	800fbdc <HAL_TIMEx_MasterConfigSynchronization>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80063ce:	f000 fa43 	bl	8006858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063d2:	2360      	movs	r3, #96	; 0x60
 80063d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80063d6:	2332      	movs	r3, #50	; 0x32
 80063d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063e2:	463b      	mov	r3, r7
 80063e4:	2200      	movs	r2, #0
 80063e6:	4619      	mov	r1, r3
 80063e8:	4809      	ldr	r0, [pc, #36]	; (8006410 <MX_TIM2_Init+0xb8>)
 80063ea:	f008 ff29 	bl	800f240 <HAL_TIM_PWM_ConfigChannel>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80063f4:	f000 fa30 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80063f8:	2100      	movs	r1, #0
 80063fa:	4805      	ldr	r0, [pc, #20]	; (8006410 <MX_TIM2_Init+0xb8>)
 80063fc:	f008 fcfa 	bl	800edf4 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006400:	4803      	ldr	r0, [pc, #12]	; (8006410 <MX_TIM2_Init+0xb8>)
 8006402:	f000 ff0f 	bl	8007224 <HAL_TIM_MspPostInit>

}
 8006406:	bf00      	nop
 8006408:	3728      	adds	r7, #40	; 0x28
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20007bc8 	.word	0x20007bc8

08006414 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800641a:	f107 031c 	add.w	r3, r7, #28
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	605a      	str	r2, [r3, #4]
 8006424:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006426:	463b      	mov	r3, r7
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	611a      	str	r2, [r3, #16]
 8006434:	615a      	str	r2, [r3, #20]
 8006436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006438:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <MX_TIM4_Init+0xac>)
 800643a:	4a22      	ldr	r2, [pc, #136]	; (80064c4 <MX_TIM4_Init+0xb0>)
 800643c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <MX_TIM4_Init+0xac>)
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <MX_TIM4_Init+0xac>)
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800644a:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <MX_TIM4_Init+0xac>)
 800644c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006450:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <MX_TIM4_Init+0xac>)
 8006454:	2200      	movs	r2, #0
 8006456:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006458:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <MX_TIM4_Init+0xac>)
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800645e:	4818      	ldr	r0, [pc, #96]	; (80064c0 <MX_TIM4_Init+0xac>)
 8006460:	f008 fc70 	bl	800ed44 <HAL_TIM_PWM_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800646a:	f000 f9f5 	bl	8006858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006476:	f107 031c 	add.w	r3, r7, #28
 800647a:	4619      	mov	r1, r3
 800647c:	4810      	ldr	r0, [pc, #64]	; (80064c0 <MX_TIM4_Init+0xac>)
 800647e:	f009 fbad 	bl	800fbdc <HAL_TIMEx_MasterConfigSynchronization>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8006488:	f000 f9e6 	bl	8006858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800648c:	2360      	movs	r3, #96	; 0x60
 800648e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006494:	2300      	movs	r3, #0
 8006496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800649c:	463b      	mov	r3, r7
 800649e:	2204      	movs	r2, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4807      	ldr	r0, [pc, #28]	; (80064c0 <MX_TIM4_Init+0xac>)
 80064a4:	f008 fecc 	bl	800f240 <HAL_TIM_PWM_ConfigChannel>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80064ae:	f000 f9d3 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80064b2:	4803      	ldr	r0, [pc, #12]	; (80064c0 <MX_TIM4_Init+0xac>)
 80064b4:	f000 feb6 	bl	8007224 <HAL_TIM_MspPostInit>

}
 80064b8:	bf00      	nop
 80064ba:	3728      	adds	r7, #40	; 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20007b7c 	.word	0x20007b7c
 80064c4:	40000800 	.word	0x40000800

080064c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <MX_TIM6_Init+0x64>)
 80064da:	4a15      	ldr	r2, [pc, #84]	; (8006530 <MX_TIM6_Init+0x68>)
 80064dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <MX_TIM6_Init+0x64>)
 80064e0:	2202      	movs	r2, #2
 80064e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064e4:	4b11      	ldr	r3, [pc, #68]	; (800652c <MX_TIM6_Init+0x64>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1666;
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <MX_TIM6_Init+0x64>)
 80064ec:	f240 6282 	movw	r2, #1666	; 0x682
 80064f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064f2:	4b0e      	ldr	r3, [pc, #56]	; (800652c <MX_TIM6_Init+0x64>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80064f8:	480c      	ldr	r0, [pc, #48]	; (800652c <MX_TIM6_Init+0x64>)
 80064fa:	f008 faf3 	bl	800eae4 <HAL_TIM_Base_Init>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006504:	f000 f9a8 	bl	8006858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006508:	2320      	movs	r3, #32
 800650a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4805      	ldr	r0, [pc, #20]	; (800652c <MX_TIM6_Init+0x64>)
 8006516:	f009 fb61 	bl	800fbdc <HAL_TIMEx_MasterConfigSynchronization>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8006520:	f000 f99a 	bl	8006858 <Error_Handler>
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//    HAL_TIM_Base_Start_IT(&htim6);
 //   HAL_TIM_Base_Start(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20007b30 	.word	0x20007b30
 8006530:	40001000 	.word	0x40001000

08006534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006538:	4b18      	ldr	r3, [pc, #96]	; (800659c <MX_USART1_UART_Init+0x68>)
 800653a:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <MX_USART1_UART_Init+0x6c>)
 800653c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800653e:	4b17      	ldr	r3, [pc, #92]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006546:	4b15      	ldr	r3, [pc, #84]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006548:	2200      	movs	r2, #0
 800654a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800654c:	4b13      	ldr	r3, [pc, #76]	; (800659c <MX_USART1_UART_Init+0x68>)
 800654e:	2200      	movs	r2, #0
 8006550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006554:	2200      	movs	r2, #0
 8006556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006558:	4b10      	ldr	r3, [pc, #64]	; (800659c <MX_USART1_UART_Init+0x68>)
 800655a:	220c      	movs	r2, #12
 800655c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800655e:	4b0f      	ldr	r3, [pc, #60]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006560:	2200      	movs	r2, #0
 8006562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006564:	4b0d      	ldr	r3, [pc, #52]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006566:	2200      	movs	r2, #0
 8006568:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800656a:	4b0c      	ldr	r3, [pc, #48]	; (800659c <MX_USART1_UART_Init+0x68>)
 800656c:	2200      	movs	r2, #0
 800656e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006572:	2200      	movs	r2, #0
 8006574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006576:	4809      	ldr	r0, [pc, #36]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006578:	f009 fbd6 	bl	800fd28 <HAL_UART_Init>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006582:	f000 f969 	bl	8006858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8006586:	4b05      	ldr	r3, [pc, #20]	; (800659c <MX_USART1_UART_Init+0x68>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b03      	ldr	r3, [pc, #12]	; (800659c <MX_USART1_UART_Init+0x68>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0220 	orr.w	r2, r2, #32
 8006594:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200079c8 	.word	0x200079c8
 80065a0:	40013800 	.word	0x40013800

080065a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <MX_DMA_Init+0x58>)
 80065ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ae:	4a13      	ldr	r2, [pc, #76]	; (80065fc <MX_DMA_Init+0x58>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	6493      	str	r3, [r2, #72]	; 0x48
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <MX_DMA_Init+0x58>)
 80065b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	607b      	str	r3, [r7, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80065c2:	2200      	movs	r2, #0
 80065c4:	2100      	movs	r1, #0
 80065c6:	200b      	movs	r0, #11
 80065c8:	f002 fe9e 	bl	8009308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80065cc:	200b      	movs	r0, #11
 80065ce:	f002 feb7 	bl	8009340 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80065d2:	2200      	movs	r2, #0
 80065d4:	2100      	movs	r1, #0
 80065d6:	200c      	movs	r0, #12
 80065d8:	f002 fe96 	bl	8009308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80065dc:	200c      	movs	r0, #12
 80065de:	f002 feaf 	bl	8009340 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	200e      	movs	r0, #14
 80065e8:	f002 fe8e 	bl	8009308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80065ec:	200e      	movs	r0, #14
 80065ee:	f002 fea7 	bl	8009340 <HAL_NVIC_EnableIRQ>

}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000

08006600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	; 0x30
 8006604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006606:	f107 031c 	add.w	r3, r7, #28
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	609a      	str	r2, [r3, #8]
 8006612:	60da      	str	r2, [r3, #12]
 8006614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006616:	4b71      	ldr	r3, [pc, #452]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	4a70      	ldr	r2, [pc, #448]	; (80067dc <MX_GPIO_Init+0x1dc>)
 800661c:	f043 0310 	orr.w	r3, r3, #16
 8006620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006622:	4b6e      	ldr	r3, [pc, #440]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800662e:	4b6b      	ldr	r3, [pc, #428]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006632:	4a6a      	ldr	r2, [pc, #424]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006634:	f043 0304 	orr.w	r3, r3, #4
 8006638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800663a:	4b68      	ldr	r3, [pc, #416]	; (80067dc <MX_GPIO_Init+0x1dc>)
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006646:	4b65      	ldr	r3, [pc, #404]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664a:	4a64      	ldr	r2, [pc, #400]	; (80067dc <MX_GPIO_Init+0x1dc>)
 800664c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006652:	4b62      	ldr	r3, [pc, #392]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800665e:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	4a5e      	ldr	r2, [pc, #376]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800666a:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <MX_GPIO_Init+0x1dc>)
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006676:	4b59      	ldr	r3, [pc, #356]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	4a58      	ldr	r2, [pc, #352]	; (80067dc <MX_GPIO_Init+0x1dc>)
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006682:	4b56      	ldr	r3, [pc, #344]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800668e:	4b53      	ldr	r3, [pc, #332]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006692:	4a52      	ldr	r2, [pc, #328]	; (80067dc <MX_GPIO_Init+0x1dc>)
 8006694:	f043 0308 	orr.w	r3, r3, #8
 8006698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800669a:	4b50      	ldr	r3, [pc, #320]	; (80067dc <MX_GPIO_Init+0x1dc>)
 800669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80066a6:	2200      	movs	r2, #0
 80066a8:	2115      	movs	r1, #21
 80066aa:	484d      	ldr	r0, [pc, #308]	; (80067e0 <MX_GPIO_Init+0x1e0>)
 80066ac:	f003 fd94 	bl	800a1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin, GPIO_PIN_RESET);
 80066b0:	2200      	movs	r2, #0
 80066b2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80066b6:	484b      	ldr	r0, [pc, #300]	; (80067e4 <MX_GPIO_Init+0x1e4>)
 80066b8:	f003 fd8e 	bl	800a1d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 80066bc:	2200      	movs	r2, #0
 80066be:	f241 3126 	movw	r1, #4902	; 0x1326
 80066c2:	4849      	ldr	r0, [pc, #292]	; (80067e8 <MX_GPIO_Init+0x1e8>)
 80066c4:	f003 fd88 	bl	800a1d8 <HAL_GPIO_WritePin>
                          |I2C_ADDR_Pin|LCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 80066c8:	2200      	movs	r2, #0
 80066ca:	f24c 014c 	movw	r1, #49228	; 0xc04c
 80066ce:	4847      	ldr	r0, [pc, #284]	; (80067ec <MX_GPIO_Init+0x1ec>)
 80066d0:	f003 fd82 	bl	800a1d8 <HAL_GPIO_WritePin>
                          |LCD_BL_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_ARK_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80066d4:	2315      	movs	r3, #21
 80066d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066d8:	2301      	movs	r3, #1
 80066da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066e4:	f107 031c 	add.w	r3, r7, #28
 80066e8:	4619      	mov	r1, r3
 80066ea:	483d      	ldr	r0, [pc, #244]	; (80067e0 <MX_GPIO_Init+0x1e0>)
 80066ec:	f003 fbca 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reserved_Pin */
  GPIO_InitStruct.Pin = Reserved_Pin;
 80066f0:	2308      	movs	r3, #8
 80066f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066f4:	2300      	movs	r3, #0
 80066f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reserved_GPIO_Port, &GPIO_InitStruct);
 80066fc:	f107 031c 	add.w	r3, r7, #28
 8006700:	4619      	mov	r1, r3
 8006702:	4837      	ldr	r0, [pc, #220]	; (80067e0 <MX_GPIO_Init+0x1e0>)
 8006704:	f003 fbbe 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800670c:	2300      	movs	r3, #0
 800670e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006710:	2302      	movs	r3, #2
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006714:	f107 031c 	add.w	r3, r7, #28
 8006718:	4619      	mov	r1, r3
 800671a:	4831      	ldr	r0, [pc, #196]	; (80067e0 <MX_GPIO_Init+0x1e0>)
 800671c:	f003 fbb2 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDYB_Pin */
  GPIO_InitStruct.Pin = ADC_RDYB_Pin;
 8006720:	2310      	movs	r3, #16
 8006722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006724:	4b32      	ldr	r3, [pc, #200]	; (80067f0 <MX_GPIO_Init+0x1f0>)
 8006726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_RDYB_GPIO_Port, &GPIO_InitStruct);
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006736:	f003 fba5 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin EN_AV6_Pin EN_V24_Pin EN_LCD_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin;
 800673a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800673e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006740:	2301      	movs	r3, #1
 8006742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006744:	2300      	movs	r3, #0
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006748:	2300      	movs	r3, #0
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800674c:	f107 031c 	add.w	r3, r7, #28
 8006750:	4619      	mov	r1, r3
 8006752:	4824      	ldr	r0, [pc, #144]	; (80067e4 <MX_GPIO_Init+0x1e4>)
 8006754:	f003 fb96 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_P_Pin */
  GPIO_InitStruct.Pin = SW_P_Pin;
 8006758:	2320      	movs	r3, #32
 800675a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <MX_GPIO_Init+0x1f4>)
 800675e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_P_GPIO_Port, &GPIO_InitStruct);
 8006764:	f107 031c 	add.w	r3, r7, #28
 8006768:	4619      	mov	r1, r3
 800676a:	481e      	ldr	r0, [pc, #120]	; (80067e4 <MX_GPIO_Init+0x1e4>)
 800676c:	f003 fb8a 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : I_P_ERROR_Pin */
  GPIO_InitStruct.Pin = I_P_ERROR_Pin;
 8006770:	2301      	movs	r3, #1
 8006772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006774:	4b1f      	ldr	r3, [pc, #124]	; (80067f4 <MX_GPIO_Init+0x1f4>)
 8006776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006778:	2300      	movs	r3, #0
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I_P_ERROR_GPIO_Port, &GPIO_InitStruct);
 800677c:	f107 031c 	add.w	r3, r7, #28
 8006780:	4619      	mov	r1, r3
 8006782:	4819      	ldr	r0, [pc, #100]	; (80067e8 <MX_GPIO_Init+0x1e8>)
 8006784:	f003 fb7e 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_EN_Pin INT_CHARGER_Pin LCD_SPI_CS_Pin PB5
                           I2C_ADDR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 8006788:	f241 3326 	movw	r3, #4902	; 0x1326
 800678c:	61fb      	str	r3, [r7, #28]
                          |I2C_ADDR_Pin|LCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800678e:	2301      	movs	r3, #1
 8006790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006792:	2300      	movs	r3, #0
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006796:	2300      	movs	r3, #0
 8006798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800679a:	f107 031c 	add.w	r3, r7, #28
 800679e:	4619      	mov	r1, r3
 80067a0:	4811      	ldr	r0, [pc, #68]	; (80067e8 <MX_GPIO_Init+0x1e8>)
 80067a2:	f003 fb6f 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LCD_reserv_Pin EN_AV6_reserv_Pin MEM1_CS_Pin MEM2_CS_Pin
                           LCD_BL_EN2_Pin */
  GPIO_InitStruct.Pin = EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 80067a6:	f24c 034c 	movw	r3, #49228	; 0xc04c
 80067aa:	61fb      	str	r3, [r7, #28]
                          |LCD_BL_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067ac:	2301      	movs	r3, #1
 80067ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b4:	2300      	movs	r3, #0
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067b8:	f107 031c 	add.w	r3, r7, #28
 80067bc:	4619      	mov	r1, r3
 80067be:	480b      	ldr	r0, [pc, #44]	; (80067ec <MX_GPIO_Init+0x1ec>)
 80067c0:	f003 fb60 	bl	8009e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2100      	movs	r1, #0
 80067c8:	200a      	movs	r0, #10
 80067ca:	f002 fd9d 	bl	8009308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80067ce:	200a      	movs	r0, #10
 80067d0:	f002 fdb6 	bl	8009340 <HAL_NVIC_EnableIRQ>

}
 80067d4:	bf00      	nop
 80067d6:	3730      	adds	r7, #48	; 0x30
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40021000 	.word	0x40021000
 80067e0:	48001000 	.word	0x48001000
 80067e4:	48000800 	.word	0x48000800
 80067e8:	48000400 	.word	0x48000400
 80067ec:	48000c00 	.word	0x48000c00
 80067f0:	10210000 	.word	0x10210000
 80067f4:	10110000 	.word	0x10110000

080067f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	ELSPIRE_OS_TIMER();
 8006800:	f7fc fd24 	bl	800324c <ELSPIRE_OS_TIMER>

	Buttons_timer();
 8006804:	f7fc f9ac 	bl	8002b60 <Buttons_timer>
	Blink_Edit_Parameter_timer();
 8006808:	f7fc fb3e 	bl	8002e88 <Blink_Edit_Parameter_timer>
	menu_timer();
 800680c:	f012 fa68 	bl	8018ce0 <menu_timer>
	Viewer_timer();
 8006810:	f011 fa28 	bl	8017c64 <Viewer_timer>
	Light_OFF_process();
 8006814:	f010 fe72 	bl	80174fc <Light_OFF_process>
	if(rx_cmplt>0)rx_cmplt--;
 8006818:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800681a:	f993 3000 	ldrsb.w	r3, [r3]
 800681e:	2b00      	cmp	r3, #0
 8006820:	dd08      	ble.n	8006834 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006824:	f993 3000 	ldrsb.w	r3, [r3]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	b25a      	sxtb	r2, r3
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006832:	701a      	strb	r2, [r3, #0]
	spi_timeout();
 8006834:	f001 f826 	bl	8007884 <spi_timeout>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a05      	ldr	r2, [pc, #20]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d101      	bne.n	8006846 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8006842:	f001 f9bf 	bl	8007bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000826 	.word	0x20000826
 8006854:	40012c00 	.word	0x40012c00

08006858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800685c:	b672      	cpsid	i
}
 800685e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006860:	e7fe      	b.n	8006860 <Error_Handler+0x8>
	...

08006864 <Play_Sound>:
uint8_t ReadComplete=0;			// Выставляется в 1, когда прочитана очередная порция данных
uint16_t sizecntr=0; 			// Счетчик байт
uint32_t wavcounter=0;

void Play_Sound(char*name)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af02      	add	r7, sp, #8
 800686a:	6078      	str	r0, [r7, #4]
	//uint8_t path[11] = "AUDIO_5.WAV";
	uint16_t i;

	// Открываем файл

	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 800686c:	2200      	movs	r2, #0
 800686e:	4934      	ldr	r1, [pc, #208]	; (8006940 <Play_Sound+0xdc>)
 8006870:	4834      	ldr	r0, [pc, #208]	; (8006944 <Play_Sound+0xe0>)
 8006872:	f00d f9e3 	bl	8013c3c <f_mount>
	f_open(&MyFile, (char*)name, FA_READ|FA_OPEN_ALWAYS);
 8006876:	2211      	movs	r2, #17
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4833      	ldr	r0, [pc, #204]	; (8006948 <Play_Sound+0xe4>)
 800687c:	f00d fa24 	bl	8013cc8 <f_open>
	f_read(&MyFile, sound_buf, WAV_BUF_SIZE, &testBytes);
 8006880:	4b32      	ldr	r3, [pc, #200]	; (800694c <Play_Sound+0xe8>)
 8006882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006886:	4932      	ldr	r1, [pc, #200]	; (8006950 <Play_Sound+0xec>)
 8006888:	482f      	ldr	r0, [pc, #188]	; (8006948 <Play_Sound+0xe4>)
 800688a:	f00d fbdb 	bl	8014044 <f_read>

	// Находим начало данных
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 800688e:	2300      	movs	r3, #0
 8006890:	81fb      	strh	r3, [r7, #14]
 8006892:	e01f      	b.n	80068d4 <Play_Sound+0x70>
	{
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	4a2e      	ldr	r2, [pc, #184]	; (8006950 <Play_Sound+0xec>)
 8006898:	5cd3      	ldrb	r3, [r2, r3]
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d117      	bne.n	80068ce <Play_Sound+0x6a>
 800689e:	89fb      	ldrh	r3, [r7, #14]
 80068a0:	3301      	adds	r3, #1
 80068a2:	4a2b      	ldr	r2, [pc, #172]	; (8006950 <Play_Sound+0xec>)
 80068a4:	5cd3      	ldrb	r3, [r2, r3]
 80068a6:	2b61      	cmp	r3, #97	; 0x61
 80068a8:	d111      	bne.n	80068ce <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 80068aa:	89fb      	ldrh	r3, [r7, #14]
 80068ac:	3302      	adds	r3, #2
 80068ae:	4a28      	ldr	r2, [pc, #160]	; (8006950 <Play_Sound+0xec>)
 80068b0:	5cd3      	ldrb	r3, [r2, r3]
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 80068b2:	2b74      	cmp	r3, #116	; 0x74
 80068b4:	d10b      	bne.n	80068ce <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	3303      	adds	r3, #3
 80068ba:	4a25      	ldr	r2, [pc, #148]	; (8006950 <Play_Sound+0xec>)
 80068bc:	5cd3      	ldrb	r3, [r2, r3]
 80068be:	2b61      	cmp	r3, #97	; 0x61
 80068c0:	d105      	bne.n	80068ce <Play_Sound+0x6a>
	    {
	        dataOffset = i + 8;
 80068c2:	89fb      	ldrh	r3, [r7, #14]
 80068c4:	3308      	adds	r3, #8
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	4b22      	ldr	r3, [pc, #136]	; (8006954 <Play_Sound+0xf0>)
 80068ca:	801a      	strh	r2, [r3, #0]
	        break;
 80068cc:	e006      	b.n	80068dc <Play_Sound+0x78>
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	3301      	adds	r3, #1
 80068d2:	81fb      	strh	r3, [r7, #14]
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80068da:	d9db      	bls.n	8006894 <Play_Sound+0x30>
	    }
	}

	//  перемещаем указатель FatFs
	f_lseek(&MyFile, dataOffset);
 80068dc:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <Play_Sound+0xf0>)
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	4619      	mov	r1, r3
 80068e2:	4819      	ldr	r0, [pc, #100]	; (8006948 <Play_Sound+0xe4>)
 80068e4:	f00d ff0a 	bl	80146fc <f_lseek>
	// определяем количество байт данных
	wavDataSize = f_size(&MyFile) - dataOffset;
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <Play_Sound+0xe4>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a19      	ldr	r2, [pc, #100]	; (8006954 <Play_Sound+0xf0>)
 80068ee:	8812      	ldrh	r2, [r2, #0]
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	4a19      	ldr	r2, [pc, #100]	; (8006958 <Play_Sound+0xf4>)
 80068f4:	6013      	str	r3, [r2, #0]

	// Заполняем оба буфера данными
	f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <Play_Sound+0xe8>)
 80068f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068fc:	4914      	ldr	r1, [pc, #80]	; (8006950 <Play_Sound+0xec>)
 80068fe:	4812      	ldr	r0, [pc, #72]	; (8006948 <Play_Sound+0xe4>)
 8006900:	f00d fba0 	bl	8014044 <f_read>

	ReadComplete=1;
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <Play_Sound+0xf8>)
 8006906:	2201      	movs	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]

	TURN_ON_SOUND();
 800690a:	2201      	movs	r2, #1
 800690c:	2102      	movs	r1, #2
 800690e:	4814      	ldr	r0, [pc, #80]	; (8006960 <Play_Sound+0xfc>)
 8006910:	f003 fc62 	bl	800a1d8 <HAL_GPIO_WritePin>
	//HAL_TIM_Base_Start_IT(&htim6);
	HAL_TIM_Base_Start(&htim6);
 8006914:	4813      	ldr	r0, [pc, #76]	; (8006964 <Play_Sound+0x100>)
 8006916:	f008 f93d 	bl	800eb94 <HAL_TIM_Base_Start>
	DMA1_Channel4->CCR |= (DMA_CCR_TCIE_Msk);
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <Play_Sound+0x104>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a12      	ldr	r2, [pc, #72]	; (8006968 <Play_Sound+0x104>)
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	6013      	str	r3, [r2, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf[0], WAV_BUF_SIZE, DAC_ALIGN_8B_R);
 8006926:	2308      	movs	r3, #8
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800692e:	4a08      	ldr	r2, [pc, #32]	; (8006950 <Play_Sound+0xec>)
 8006930:	2110      	movs	r1, #16
 8006932:	480e      	ldr	r0, [pc, #56]	; (800696c <Play_Sound+0x108>)
 8006934:	f002 fd34 	bl	80093a0 <HAL_DAC_Start_DMA>
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	200086c8 	.word	0x200086c8
 8006944:	20007598 	.word	0x20007598
 8006948:	20007368 	.word	0x20007368
 800694c:	200077c8 	.word	0x200077c8
 8006950:	20007c14 	.word	0x20007c14
 8006954:	20000860 	.word	0x20000860
 8006958:	20000864 	.word	0x20000864
 800695c:	20000868 	.word	0x20000868
 8006960:	48000400 	.word	0x48000400
 8006964:	20007b30 	.word	0x20007b30
 8006968:	40020044 	.word	0x40020044
 800696c:	20007b1c 	.word	0x20007b1c

08006970 <StartReadNextSoundBuf>:


void StartReadNextSoundBuf(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
	if((DMA1->ISR&DMA_ISR_TCIF4_Msk)!=0)
 8006974:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <StartReadNextSoundBuf+0x68>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d028      	beq.n	80069d2 <StartReadNextSoundBuf+0x62>
	{

		ReadComplete=0;
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <StartReadNextSoundBuf+0x6c>)
 8006982:	2200      	movs	r2, #0
 8006984:	701a      	strb	r2, [r3, #0]
		if(buf_num==1)buf_num=0;
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <StartReadNextSoundBuf+0x70>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d103      	bne.n	8006996 <StartReadNextSoundBuf+0x26>
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <StartReadNextSoundBuf+0x70>)
 8006990:	2200      	movs	r2, #0
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	e002      	b.n	800699c <StartReadNextSoundBuf+0x2c>
		else buf_num=1;
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <StartReadNextSoundBuf+0x70>)
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]

		DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <StartReadNextSoundBuf+0x74>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <StartReadNextSoundBuf+0x74>)
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CMAR=(uint32_t)sound_buf[buf_num];
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <StartReadNextSoundBuf+0x70>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	025b      	lsls	r3, r3, #9
 80069ae:	4a0e      	ldr	r2, [pc, #56]	; (80069e8 <StartReadNextSoundBuf+0x78>)
 80069b0:	441a      	add	r2, r3
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <StartReadNextSoundBuf+0x74>)
 80069b4:	60da      	str	r2, [r3, #12]
		//DMA1_Channel4->CNDTR=(uint32_t)WAV_BUF_SIZE;
		DMA1_Channel4->CCR |= (1 << DMA_CCR_EN_Pos);
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <StartReadNextSoundBuf+0x74>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <StartReadNextSoundBuf+0x74>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6013      	str	r3, [r2, #0]

		wavcounter+=WAV_BUF_SIZE;
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <StartReadNextSoundBuf+0x7c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <StartReadNextSoundBuf+0x7c>)
 80069cc:	6013      	str	r3, [r2, #0]
		Sound_process();
 80069ce:	f000 f80f 	bl	80069f0 <Sound_process>
	}
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40020000 	.word	0x40020000
 80069dc:	20000868 	.word	0x20000868
 80069e0:	20000862 	.word	0x20000862
 80069e4:	40020044 	.word	0x40020044
 80069e8:	20007c14 	.word	0x20007c14
 80069ec:	2000086c 	.word	0x2000086c

080069f0 <Sound_process>:


void Sound_process(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	80fb      	strh	r3, [r7, #6]
	uint8_t sign=0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	717b      	strb	r3, [r7, #5]
	if(ReadComplete==0)
 80069fe:	4b2c      	ldr	r3, [pc, #176]	; (8006ab0 <Sound_process+0xc0>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d14f      	bne.n	8006aa6 <Sound_process+0xb6>
	{
		if(wavDataSize>wavcounter)
 8006a06:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <Sound_process+0xc4>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b2b      	ldr	r3, [pc, #172]	; (8006ab8 <Sound_process+0xc8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d938      	bls.n	8006a84 <Sound_process+0x94>
		{
			if(buf_num==0)
 8006a12:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <Sound_process+0xcc>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d117      	bne.n	8006a4a <Sound_process+0x5a>
			{
				f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 8006a1a:	4b29      	ldr	r3, [pc, #164]	; (8006ac0 <Sound_process+0xd0>)
 8006a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a20:	4928      	ldr	r1, [pc, #160]	; (8006ac4 <Sound_process+0xd4>)
 8006a22:	4829      	ldr	r0, [pc, #164]	; (8006ac8 <Sound_process+0xd8>)
 8006a24:	f00d fb0e 	bl	8014044 <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	80fb      	strh	r3, [r7, #6]
 8006a2c:	e008      	b.n	8006a40 <Sound_process+0x50>
				{
					//sign=sound_buf[0][i]&0x80;
					//sound_buf[0][i]=(sound_buf[0][i]&0x7F);
					//sound_buf[0][i]|=sign;
					sound_buf[0][i]=(sound_buf[0][i])&0xFF;
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	4924      	ldr	r1, [pc, #144]	; (8006ac4 <Sound_process+0xd4>)
 8006a34:	5c89      	ldrb	r1, [r1, r2]
 8006a36:	4a23      	ldr	r2, [pc, #140]	; (8006ac4 <Sound_process+0xd4>)
 8006a38:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	80fb      	strh	r3, [r7, #6]
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a46:	d3f2      	bcc.n	8006a2e <Sound_process+0x3e>
 8006a48:	e02a      	b.n	8006aa0 <Sound_process+0xb0>
				}
			}
			else
			{
				f_read(&MyFile, sound_buf[1], WAV_BUF_SIZE, &testBytes);
 8006a4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <Sound_process+0xd0>)
 8006a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a50:	491e      	ldr	r1, [pc, #120]	; (8006acc <Sound_process+0xdc>)
 8006a52:	481d      	ldr	r0, [pc, #116]	; (8006ac8 <Sound_process+0xd8>)
 8006a54:	f00d faf6 	bl	8014044 <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	80fb      	strh	r3, [r7, #6]
 8006a5c:	e00d      	b.n	8006a7a <Sound_process+0x8a>
				{
					//sign=sound_buf[1][i]&0x80;
					//sound_buf[1][i]=(sound_buf[1][i]&0x7F);
					//sound_buf[1][i]|=sign;
					sound_buf[1][i]=(sound_buf[1][i])&0xFF;
 8006a5e:	88fa      	ldrh	r2, [r7, #6]
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	4918      	ldr	r1, [pc, #96]	; (8006ac4 <Sound_process+0xd4>)
 8006a64:	440a      	add	r2, r1
 8006a66:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <Sound_process+0xd4>)
 8006a6c:	4413      	add	r3, r2
 8006a6e:	460a      	mov	r2, r1
 8006a70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	3301      	adds	r3, #1
 8006a78:	80fb      	strh	r3, [r7, #6]
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a80:	d3ed      	bcc.n	8006a5e <Sound_process+0x6e>
 8006a82:	e00d      	b.n	8006aa0 <Sound_process+0xb0>
				}
			}
		}
		else
		{
			TURN_OFF_SOUND();
 8006a84:	2200      	movs	r2, #0
 8006a86:	2102      	movs	r1, #2
 8006a88:	4811      	ldr	r0, [pc, #68]	; (8006ad0 <Sound_process+0xe0>)
 8006a8a:	f003 fba5 	bl	800a1d8 <HAL_GPIO_WritePin>
			DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <Sound_process+0xe4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a10      	ldr	r2, [pc, #64]	; (8006ad4 <Sound_process+0xe4>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	6013      	str	r3, [r2, #0]
			f_close(&MyFile);
 8006a9a:	480b      	ldr	r0, [pc, #44]	; (8006ac8 <Sound_process+0xd8>)
 8006a9c:	f00d fe04 	bl	80146a8 <f_close>
		}
		ReadComplete=1;
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <Sound_process+0xc0>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000868 	.word	0x20000868
 8006ab4:	20000864 	.word	0x20000864
 8006ab8:	2000086c 	.word	0x2000086c
 8006abc:	20000862 	.word	0x20000862
 8006ac0:	200077c8 	.word	0x200077c8
 8006ac4:	20007c14 	.word	0x20007c14
 8006ac8:	20007368 	.word	0x20007368
 8006acc:	20007e14 	.word	0x20007e14
 8006ad0:	48000400 	.word	0x48000400
 8006ad4:	40020044 	.word	0x40020044

08006ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <HAL_MspInit+0x44>)
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <HAL_MspInit+0x44>)
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <HAL_MspInit+0x44>)
 8006aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <HAL_MspInit+0x44>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afa:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <HAL_MspInit+0x44>)
 8006afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b00:	6593      	str	r3, [r2, #88]	; 0x58
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <HAL_MspInit+0x44>)
 8006b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000

08006b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b0ae      	sub	sp, #184	; 0xb8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	605a      	str	r2, [r3, #4]
 8006b32:	609a      	str	r2, [r3, #8]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b38:	f107 0318 	add.w	r3, r7, #24
 8006b3c:	228c      	movs	r2, #140	; 0x8c
 8006b3e:	2100      	movs	r1, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f016 fb85 	bl	801d250 <memset>
  if(hadc->Instance==ADC1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a66      	ldr	r2, [pc, #408]	; (8006ce4 <HAL_ADC_MspInit+0x1c4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d152      	bne.n	8006bf6 <HAL_ADC_MspInit+0xd6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006b50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006b56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b5e:	f107 0318 	add.w	r3, r7, #24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f006 f812 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8006b6e:	f7ff fe73 	bl	8006858 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8006b72:	4b5d      	ldr	r3, [pc, #372]	; (8006ce8 <HAL_ADC_MspInit+0x1c8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	4a5b      	ldr	r2, [pc, #364]	; (8006ce8 <HAL_ADC_MspInit+0x1c8>)
 8006b7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006b7c:	4b5a      	ldr	r3, [pc, #360]	; (8006ce8 <HAL_ADC_MspInit+0x1c8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d10b      	bne.n	8006b9c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006b84:	4b59      	ldr	r3, [pc, #356]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b88:	4a58      	ldr	r2, [pc, #352]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006b8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b90:	4b56      	ldr	r3, [pc, #344]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006b9c:	4b54      	ldr	r3, [pc, #336]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006b9e:	4a55      	ldr	r2, [pc, #340]	; (8006cf4 <HAL_ADC_MspInit+0x1d4>)
 8006ba0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006ba2:	4b53      	ldr	r3, [pc, #332]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ba8:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bae:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006bb4:	4b4e      	ldr	r3, [pc, #312]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bba:	4b4d      	ldr	r3, [pc, #308]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bc2:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bca:	4b49      	ldr	r3, [pc, #292]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bcc:	2220      	movs	r2, #32
 8006bce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bd0:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bd8:	4845      	ldr	r0, [pc, #276]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bda:	f002 fedd 	bl	8009998 <HAL_DMA_Init>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8006be4:	f7ff fe38 	bl	8006858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a41      	ldr	r2, [pc, #260]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50
 8006bee:	4a40      	ldr	r2, [pc, #256]	; (8006cf0 <HAL_ADC_MspInit+0x1d0>)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bf4:	e072      	b.n	8006cdc <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a3f      	ldr	r2, [pc, #252]	; (8006cf8 <HAL_ADC_MspInit+0x1d8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d16d      	bne.n	8006cdc <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006c06:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c0e:	f107 0318 	add.w	r3, r7, #24
 8006c12:	4618      	mov	r0, r3
 8006c14:	f005 ffba 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_ADC_MspInit+0x102>
      Error_Handler();
 8006c1e:	f7ff fe1b 	bl	8006858 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006c22:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <HAL_ADC_MspInit+0x1c8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a2f      	ldr	r2, [pc, #188]	; (8006ce8 <HAL_ADC_MspInit+0x1c8>)
 8006c2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006c2c:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <HAL_ADC_MspInit+0x1c8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d10b      	bne.n	8006c4c <HAL_ADC_MspInit+0x12c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006c34:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c38:	4a2c      	ldr	r2, [pc, #176]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006c3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c40:	4b2a      	ldr	r3, [pc, #168]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c4c:	4b27      	ldr	r3, [pc, #156]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c50:	4a26      	ldr	r2, [pc, #152]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c58:	4b24      	ldr	r3, [pc, #144]	; (8006cec <HAL_ADC_MspInit+0x1cc>)
 8006c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006c64:	2308      	movs	r3, #8
 8006c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006c6a:	230b      	movs	r3, #11
 8006c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c80:	f003 f900 	bl	8009e84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006c86:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <HAL_ADC_MspInit+0x1e0>)
 8006c88:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c96:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006c9c:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ca2:	4b16      	ldr	r3, [pc, #88]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ca8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006caa:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cb0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006cb2:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006cc0:	480e      	ldr	r0, [pc, #56]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006cc2:	f002 fe69 	bl	8009998 <HAL_DMA_Init>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8006ccc:	f7ff fdc4 	bl	8006858 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <HAL_ADC_MspInit+0x1dc>)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006cdc:	bf00      	nop
 8006cde:	37b8      	adds	r7, #184	; 0xb8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	50040000 	.word	0x50040000
 8006ce8:	20000870 	.word	0x20000870
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	200078f0 	.word	0x200078f0
 8006cf4:	40020008 	.word	0x40020008
 8006cf8:	50040100 	.word	0x50040100
 8006cfc:	20007938 	.word	0x20007938
 8006d00:	4002001c 	.word	0x4002001c

08006d04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a2e      	ldr	r2, [pc, #184]	; (8006ddc <HAL_DAC_MspInit+0xd8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d156      	bne.n	8006dd4 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006d26:	4b2e      	ldr	r3, [pc, #184]	; (8006de0 <HAL_DAC_MspInit+0xdc>)
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	4a2d      	ldr	r2, [pc, #180]	; (8006de0 <HAL_DAC_MspInit+0xdc>)
 8006d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d30:	6593      	str	r3, [r2, #88]	; 0x58
 8006d32:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <HAL_DAC_MspInit+0xdc>)
 8006d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d3e:	4b28      	ldr	r3, [pc, #160]	; (8006de0 <HAL_DAC_MspInit+0xdc>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	4a27      	ldr	r2, [pc, #156]	; (8006de0 <HAL_DAC_MspInit+0xdc>)
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d4a:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <HAL_DAC_MspInit+0xdc>)
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 8006d56:	2320      	movs	r3, #32
 8006d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8006d62:	f107 0314 	add.w	r3, r7, #20
 8006d66:	4619      	mov	r1, r3
 8006d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d6c:	f003 f88a 	bl	8009e84 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8006d70:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_DAC_MspInit+0xe4>)
 8006d74:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8006d76:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d78:	2205      	movs	r2, #5
 8006d7a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d7c:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d7e:	2210      	movs	r2, #16
 8006d80:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d82:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006d88:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d8a:	2280      	movs	r2, #128	; 0x80
 8006d8c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d94:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006da0:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006da2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006da6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006da8:	480e      	ldr	r0, [pc, #56]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006daa:	f002 fdf5 	bl	8009998 <HAL_DMA_Init>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8006db4:	f7ff fd50 	bl	8006858 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <HAL_DAC_MspInit+0xe0>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	2036      	movs	r0, #54	; 0x36
 8006dca:	f002 fa9d 	bl	8009308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006dce:	2036      	movs	r0, #54	; 0x36
 8006dd0:	f002 fab6 	bl	8009340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006dd4:	bf00      	nop
 8006dd6:	3728      	adds	r7, #40	; 0x28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40007400 	.word	0x40007400
 8006de0:	40021000 	.word	0x40021000
 8006de4:	20007980 	.word	0x20007980
 8006de8:	40020044 	.word	0x40020044

08006dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b0ae      	sub	sp, #184	; 0xb8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	60da      	str	r2, [r3, #12]
 8006e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e04:	f107 0318 	add.w	r3, r7, #24
 8006e08:	228c      	movs	r2, #140	; 0x8c
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f016 fa1f 	bl	801d250 <memset>
  if(hi2c->Instance==I2C1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a42      	ldr	r2, [pc, #264]	; (8006f20 <HAL_I2C_MspInit+0x134>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d13b      	bne.n	8006e94 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006e1c:	2340      	movs	r3, #64	; 0x40
 8006e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006e20:	2300      	movs	r3, #0
 8006e22:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e24:	f107 0318 	add.w	r3, r7, #24
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f005 feaf 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006e34:	f7ff fd10 	bl	8006858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e38:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3c:	4a39      	ldr	r2, [pc, #228]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006e3e:	f043 0302 	orr.w	r3, r3, #2
 8006e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e44:	4b37      	ldr	r3, [pc, #220]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = KEYPAD_SCL_Pin|KEYPAD_SDA_Pin;
 8006e50:	23c0      	movs	r3, #192	; 0xc0
 8006e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e56:	2312      	movs	r3, #18
 8006e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e62:	2303      	movs	r3, #3
 8006e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e68:	2304      	movs	r3, #4
 8006e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e72:	4619      	mov	r1, r3
 8006e74:	482c      	ldr	r0, [pc, #176]	; (8006f28 <HAL_I2C_MspInit+0x13c>)
 8006e76:	f003 f805 	bl	8009e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	4a29      	ldr	r2, [pc, #164]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e84:	6593      	str	r3, [r2, #88]	; 0x58
 8006e86:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e92:	e040      	b.n	8006f16 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a24      	ldr	r2, [pc, #144]	; (8006f2c <HAL_I2C_MspInit+0x140>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d13b      	bne.n	8006f16 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006e9e:	2380      	movs	r3, #128	; 0x80
 8006ea0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ea6:	f107 0318 	add.w	r3, r7, #24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f005 fe6e 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8006eb6:	f7ff fccf 	bl	8006858 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebe:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ec6:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POWER_SCL_Pin|POWER_SDA_Pin;
 8006ed2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006eda:	2312      	movs	r3, #18
 8006edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006eec:	2304      	movs	r3, #4
 8006eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	480b      	ldr	r0, [pc, #44]	; (8006f28 <HAL_I2C_MspInit+0x13c>)
 8006efa:	f002 ffc3 	bl	8009e84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f08:	6593      	str	r3, [r2, #88]	; 0x58
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <HAL_I2C_MspInit+0x138>)
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f12:	60bb      	str	r3, [r7, #8]
 8006f14:	68bb      	ldr	r3, [r7, #8]
}
 8006f16:	bf00      	nop
 8006f18:	37b8      	adds	r7, #184	; 0xb8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40005400 	.word	0x40005400
 8006f24:	40021000 	.word	0x40021000
 8006f28:	48000400 	.word	0x48000400
 8006f2c:	40005800 	.word	0x40005800

08006f30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b0a6      	sub	sp, #152	; 0x98
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	228c      	movs	r2, #140	; 0x8c
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f016 f985 	bl	801d250 <memset>
  if(hrtc->Instance==RTC)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <HAL_RTC_MspInit+0x5c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d118      	bne.n	8006f82 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f54:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f5e:	f107 030c 	add.w	r3, r7, #12
 8006f62:	4618      	mov	r0, r3
 8006f64:	f005 fe12 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006f6e:	f7ff fc73 	bl	8006858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <HAL_RTC_MspInit+0x60>)
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f78:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <HAL_RTC_MspInit+0x60>)
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006f82:	bf00      	nop
 8006f84:	3798      	adds	r7, #152	; 0x98
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40002800 	.word	0x40002800
 8006f90:	40021000 	.word	0x40021000

08006f94 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a08      	ldr	r2, [pc, #32]	; (8006fc4 <HAL_RTC_MspDeInit+0x30>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RTC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8006fa6:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <HAL_RTC_MspDeInit+0x34>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	4a06      	ldr	r2, [pc, #24]	; (8006fc8 <HAL_RTC_MspDeInit+0x34>)
 8006fae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40002800 	.word	0x40002800
 8006fc8:	40021000 	.word	0x40021000

08006fcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08e      	sub	sp, #56	; 0x38
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	609a      	str	r2, [r3, #8]
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a5c      	ldr	r2, [pc, #368]	; (800715c <HAL_SPI_MspInit+0x190>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d129      	bne.n	8007042 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fee:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8006ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff2:	4a5b      	ldr	r2, [pc, #364]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8006ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8006ffa:	4b59      	ldr	r3, [pc, #356]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007002:	623b      	str	r3, [r7, #32]
 8007004:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007006:	4b56      	ldr	r3, [pc, #344]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	4a55      	ldr	r2, [pc, #340]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007012:	4b53      	ldr	r3, [pc, #332]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 800701e:	23c2      	movs	r3, #194	; 0xc2
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007022:	2302      	movs	r3, #2
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007026:	2300      	movs	r3, #0
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800702a:	2303      	movs	r3, #3
 800702c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800702e:	2305      	movs	r3, #5
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007036:	4619      	mov	r1, r3
 8007038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800703c:	f002 ff22 	bl	8009e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007040:	e088      	b.n	8007154 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a47      	ldr	r2, [pc, #284]	; (8007164 <HAL_SPI_MspInit+0x198>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d155      	bne.n	80070f8 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800704c:	4b44      	ldr	r3, [pc, #272]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	4a43      	ldr	r2, [pc, #268]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007056:	6593      	str	r3, [r2, #88]	; 0x58
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007064:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007068:	4a3d      	ldr	r2, [pc, #244]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800706a:	f043 0304 	orr.w	r3, r3, #4
 800706e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007070:	4b3b      	ldr	r3, [pc, #236]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800707c:	4b38      	ldr	r3, [pc, #224]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800707e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007080:	4a37      	ldr	r2, [pc, #220]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007082:	f043 0302 	orr.w	r3, r3, #2
 8007086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007088:	4b35      	ldr	r3, [pc, #212]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800708a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8007094:	2302      	movs	r3, #2
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007098:	2302      	movs	r3, #2
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800709c:	2300      	movs	r3, #0
 800709e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a0:	2303      	movs	r3, #3
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80070a4:	2303      	movs	r3, #3
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80070a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ac:	4619      	mov	r1, r3
 80070ae:	482e      	ldr	r0, [pc, #184]	; (8007168 <HAL_SPI_MspInit+0x19c>)
 80070b0:	f002 fee8 	bl	8009e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80070b4:	2304      	movs	r3, #4
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b8:	2302      	movs	r3, #2
 80070ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070c0:	2303      	movs	r3, #3
 80070c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070c4:	2305      	movs	r3, #5
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80070c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070cc:	4619      	mov	r1, r3
 80070ce:	4826      	ldr	r0, [pc, #152]	; (8007168 <HAL_SPI_MspInit+0x19c>)
 80070d0:	f002 fed8 	bl	8009e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 80070d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070da:	2302      	movs	r3, #2
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070e2:	2303      	movs	r3, #3
 80070e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070e6:	2305      	movs	r3, #5
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 80070ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ee:	4619      	mov	r1, r3
 80070f0:	481e      	ldr	r0, [pc, #120]	; (800716c <HAL_SPI_MspInit+0x1a0>)
 80070f2:	f002 fec7 	bl	8009e84 <HAL_GPIO_Init>
}
 80070f6:	e02d      	b.n	8007154 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI3)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <HAL_SPI_MspInit+0x1a4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d128      	bne.n	8007154 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007102:	4b17      	ldr	r3, [pc, #92]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007106:	4a16      	ldr	r2, [pc, #88]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	6593      	str	r3, [r2, #88]	; 0x58
 800710e:	4b14      	ldr	r3, [pc, #80]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800711a:	4b11      	ldr	r3, [pc, #68]	; (8007160 <HAL_SPI_MspInit+0x194>)
 800711c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711e:	4a10      	ldr	r2, [pc, #64]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007120:	f043 0304 	orr.w	r3, r3, #4
 8007124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007126:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <HAL_SPI_MspInit+0x194>)
 8007128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 8007132:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007138:	2302      	movs	r3, #2
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713c:	2300      	movs	r3, #0
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007140:	2303      	movs	r3, #3
 8007142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007144:	2306      	movs	r3, #6
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800714c:	4619      	mov	r1, r3
 800714e:	4806      	ldr	r0, [pc, #24]	; (8007168 <HAL_SPI_MspInit+0x19c>)
 8007150:	f002 fe98 	bl	8009e84 <HAL_GPIO_Init>
}
 8007154:	bf00      	nop
 8007156:	3738      	adds	r7, #56	; 0x38
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40013000 	.word	0x40013000
 8007160:	40021000 	.word	0x40021000
 8007164:	40003800 	.word	0x40003800
 8007168:	48000800 	.word	0x48000800
 800716c:	48000400 	.word	0x48000400
 8007170:	40003c00 	.word	0x40003c00

08007174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	d10c      	bne.n	80071a0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <HAL_TIM_PWM_MspInit+0x5c>)
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	6593      	str	r3, [r2, #88]	; 0x58
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800719e:	e010      	b.n	80071c2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a0b      	ldr	r2, [pc, #44]	; (80071d4 <HAL_TIM_PWM_MspInit+0x60>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10b      	bne.n	80071c2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80071ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ae:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80071b0:	f043 0304 	orr.w	r3, r3, #4
 80071b4:	6593      	str	r3, [r2, #88]	; 0x58
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40000800 	.word	0x40000800

080071d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0d      	ldr	r2, [pc, #52]	; (800721c <HAL_TIM_Base_MspInit+0x44>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d113      	bne.n	8007212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <HAL_TIM_Base_MspInit+0x48>)
 80071ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ee:	4a0c      	ldr	r2, [pc, #48]	; (8007220 <HAL_TIM_Base_MspInit+0x48>)
 80071f0:	f043 0310 	orr.w	r3, r3, #16
 80071f4:	6593      	str	r3, [r2, #88]	; 0x58
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <HAL_TIM_Base_MspInit+0x48>)
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	f003 0310 	and.w	r3, r3, #16
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	2036      	movs	r0, #54	; 0x36
 8007208:	f002 f87e 	bl	8009308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800720c:	2036      	movs	r0, #54	; 0x36
 800720e:	f002 f897 	bl	8009340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40001000 	.word	0x40001000
 8007220:	40021000 	.word	0x40021000

08007224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007244:	d11d      	bne.n	8007282 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007246:	4b22      	ldr	r3, [pc, #136]	; (80072d0 <HAL_TIM_MspPostInit+0xac>)
 8007248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724a:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <HAL_TIM_MspPostInit+0xac>)
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007252:	4b1f      	ldr	r3, [pc, #124]	; (80072d0 <HAL_TIM_MspPostInit+0xac>)
 8007254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 800725e:	2301      	movs	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007262:	2302      	movs	r3, #2
 8007264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800726a:	2300      	movs	r3, #0
 800726c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800726e:	2301      	movs	r3, #1
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8007272:	f107 0314 	add.w	r3, r7, #20
 8007276:	4619      	mov	r1, r3
 8007278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800727c:	f002 fe02 	bl	8009e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007280:	e021      	b.n	80072c6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a13      	ldr	r2, [pc, #76]	; (80072d4 <HAL_TIM_MspPostInit+0xb0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d11c      	bne.n	80072c6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800728c:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <HAL_TIM_MspPostInit+0xac>)
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <HAL_TIM_MspPostInit+0xac>)
 8007292:	f043 0308 	orr.w	r3, r3, #8
 8007296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007298:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <HAL_TIM_MspPostInit+0xac>)
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_meter_UGen_Pin;
 80072a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072aa:	2302      	movs	r3, #2
 80072ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b2:	2300      	movs	r3, #0
 80072b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80072b6:	2302      	movs	r3, #2
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P_meter_UGen_GPIO_Port, &GPIO_InitStruct);
 80072ba:	f107 0314 	add.w	r3, r7, #20
 80072be:	4619      	mov	r1, r3
 80072c0:	4805      	ldr	r0, [pc, #20]	; (80072d8 <HAL_TIM_MspPostInit+0xb4>)
 80072c2:	f002 fddf 	bl	8009e84 <HAL_GPIO_Init>
}
 80072c6:	bf00      	nop
 80072c8:	3728      	adds	r7, #40	; 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40000800 	.word	0x40000800
 80072d8:	48000c00 	.word	0x48000c00

080072dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b0ac      	sub	sp, #176	; 0xb0
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	228c      	movs	r2, #140	; 0x8c
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f015 ffa7 	bl	801d250 <memset>
  if(huart->Instance==USART1)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <HAL_UART_MspInit+0xc4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d144      	bne.n	8007396 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800730c:	2301      	movs	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007310:	2300      	movs	r3, #0
 8007312:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007314:	f107 0310 	add.w	r3, r7, #16
 8007318:	4618      	mov	r0, r3
 800731a:	f005 fc37 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007324:	f7ff fa98 	bl	8006858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007328:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <HAL_UART_MspInit+0xc8>)
 800732a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732c:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <HAL_UART_MspInit+0xc8>)
 800732e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007332:	6613      	str	r3, [r2, #96]	; 0x60
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <HAL_UART_MspInit+0xc8>)
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007340:	4b18      	ldr	r3, [pc, #96]	; (80073a4 <HAL_UART_MspInit+0xc8>)
 8007342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007344:	4a17      	ldr	r2, [pc, #92]	; (80073a4 <HAL_UART_MspInit+0xc8>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800734c:	4b15      	ldr	r3, [pc, #84]	; (80073a4 <HAL_UART_MspInit+0xc8>)
 800734e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007358:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800735c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007360:	2302      	movs	r3, #2
 8007362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007366:	2300      	movs	r3, #0
 8007368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800736c:	2303      	movs	r3, #3
 800736e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007372:	2307      	movs	r3, #7
 8007374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007378:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800737c:	4619      	mov	r1, r3
 800737e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007382:	f002 fd7f 	bl	8009e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	2025      	movs	r0, #37	; 0x25
 800738c:	f001 ffbc 	bl	8009308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007390:	2025      	movs	r0, #37	; 0x25
 8007392:	f001 ffd5 	bl	8009340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007396:	bf00      	nop
 8007398:	37b0      	adds	r7, #176	; 0xb0
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40013800 	.word	0x40013800
 80073a4:	40021000 	.word	0x40021000

080073a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80073b8:	2200      	movs	r2, #0
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	2019      	movs	r0, #25
 80073be:	f001 ffa3 	bl	8009308 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80073c2:	2019      	movs	r0, #25
 80073c4:	f001 ffbc 	bl	8009340 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80073c8:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <HAL_InitTick+0x9c>)
 80073ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <HAL_InitTick+0x9c>)
 80073ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073d2:	6613      	str	r3, [r2, #96]	; 0x60
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <HAL_InitTick+0x9c>)
 80073d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80073e0:	f107 0210 	add.w	r2, r7, #16
 80073e4:	f107 0314 	add.w	r3, r7, #20
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f005 fb3c 	bl	800ca68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80073f0:	f005 fb24 	bl	800ca3c <HAL_RCC_GetPCLK2Freq>
 80073f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	4a13      	ldr	r2, [pc, #76]	; (8007448 <HAL_InitTick+0xa0>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	0c9b      	lsrs	r3, r3, #18
 8007400:	3b01      	subs	r3, #1
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007404:	4b11      	ldr	r3, [pc, #68]	; (800744c <HAL_InitTick+0xa4>)
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <HAL_InitTick+0xa8>)
 8007408:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <HAL_InitTick+0xa4>)
 800740c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007410:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007412:	4a0e      	ldr	r2, [pc, #56]	; (800744c <HAL_InitTick+0xa4>)
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <HAL_InitTick+0xa4>)
 800741a:	2200      	movs	r2, #0
 800741c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <HAL_InitTick+0xa4>)
 8007420:	2200      	movs	r2, #0
 8007422:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007424:	4809      	ldr	r0, [pc, #36]	; (800744c <HAL_InitTick+0xa4>)
 8007426:	f007 fb5d 	bl	800eae4 <HAL_TIM_Base_Init>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007430:	4806      	ldr	r0, [pc, #24]	; (800744c <HAL_InitTick+0xa4>)
 8007432:	f007 fc17 	bl	800ec64 <HAL_TIM_Base_Start_IT>
 8007436:	4603      	mov	r3, r0
 8007438:	e000      	b.n	800743c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
}
 800743c:	4618      	mov	r0, r3
 800743e:	3730      	adds	r7, #48	; 0x30
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40021000 	.word	0x40021000
 8007448:	431bde83 	.word	0x431bde83
 800744c:	20008014 	.word	0x20008014
 8007450:	40012c00 	.word	0x40012c00

08007454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007458:	e7fe      	b.n	8007458 <NMI_Handler+0x4>

0800745a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800745a:	b480      	push	{r7}
 800745c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800745e:	e7fe      	b.n	800745e <HardFault_Handler+0x4>

08007460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007464:	e7fe      	b.n	8007464 <MemManage_Handler+0x4>

08007466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007466:	b480      	push	{r7}
 8007468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800746a:	e7fe      	b.n	800746a <BusFault_Handler+0x4>

0800746c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007470:	e7fe      	b.n	8007470 <UsageFault_Handler+0x4>

08007472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007472:	b480      	push	{r7}
 8007474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007476:	bf00      	nop
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007484:	bf00      	nop
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  ADC_EXT();
 80074ae:	f7fa f913 	bl	80016d8 <ADC_EXT>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80074b2:	2010      	movs	r0, #16
 80074b4:	f002 fea8 	bl	800a208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}

080074bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074c0:	4802      	ldr	r0, [pc, #8]	; (80074cc <DMA1_Channel1_IRQHandler+0x10>)
 80074c2:	f002 fc00 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	200078f0 	.word	0x200078f0

080074d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074d4:	4802      	ldr	r0, [pc, #8]	; (80074e0 <DMA1_Channel2_IRQHandler+0x10>)
 80074d6:	f002 fbf6 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80074da:	bf00      	nop
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20007938 	.word	0x20007938

080074e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//
	StartReadNextSoundBuf();
 80074e8:	f7ff fa42 	bl	8006970 <StartReadNextSoundBuf>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <DMA1_Channel4_IRQHandler+0x14>)
 80074ee:	f002 fbea 	bl	8009cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20007980 	.word	0x20007980

080074fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007500:	4802      	ldr	r0, [pc, #8]	; (800750c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007502:	f007 fd7d 	bl	800f000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20008014 	.word	0x20008014

08007510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1, UART_IT_RXNE)==SET)
 8007514:	4b11      	ldr	r3, [pc, #68]	; (800755c <USART1_IRQHandler+0x4c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d016      	beq.n	8007550 <USART1_IRQHandler+0x40>
	{
		usart1_data[usart1_counter]=(uint8_t)USART1->RDR;
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <USART1_IRQHandler+0x50>)
 8007524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007526:	b299      	uxth	r1, r3
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <USART1_IRQHandler+0x54>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	b2c9      	uxtb	r1, r1
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <USART1_IRQHandler+0x58>)
 8007532:	5499      	strb	r1, [r3, r2]
		usart1_counter++;
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <USART1_IRQHandler+0x54>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <USART1_IRQHandler+0x54>)
 800753e:	701a      	strb	r2, [r3, #0]
		rx_cmplt=5;
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <USART1_IRQHandler+0x5c>)
 8007542:	2205      	movs	r2, #5
 8007544:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_IT_RXNE);
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <USART1_IRQHandler+0x4c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f240 5225 	movw	r2, #1317	; 0x525
 800754e:	621a      	str	r2, [r3, #32]
//		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007550:	4802      	ldr	r0, [pc, #8]	; (800755c <USART1_IRQHandler+0x4c>)
 8007552:	f008 fccb 	bl	800feec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200079c8 	.word	0x200079c8
 8007560:	40013800 	.word	0x40013800
 8007564:	20000825 	.word	0x20000825
 8007568:	20002090 	.word	0x20002090
 800756c:	20000826 	.word	0x20000826

08007570 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StartReadNextSoundBuf();
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007574:	4803      	ldr	r0, [pc, #12]	; (8007584 <TIM6_DAC_IRQHandler+0x14>)
 8007576:	f007 fd43 	bl	800f000 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800757a:	4803      	ldr	r0, [pc, #12]	; (8007588 <TIM6_DAC_IRQHandler+0x18>)
 800757c:	f001 ffdc 	bl	8009538 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007580:	bf00      	nop
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20007b30 	.word	0x20007b30
 8007588:	20007b1c 	.word	0x20007b1c

0800758c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007590:	4802      	ldr	r0, [pc, #8]	; (800759c <OTG_FS_IRQHandler+0x10>)
 8007592:	f003 fc9f 	bl	800aed4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200099b0 	.word	0x200099b0

080075a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
	return 1;
 80075a4:	2301      	movs	r3, #1
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <_kill>:

int _kill(int pid, int sig)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80075ba:	f015 fe1f 	bl	801d1fc <__errno>
 80075be:	4603      	mov	r3, r0
 80075c0:	2216      	movs	r2, #22
 80075c2:	601a      	str	r2, [r3, #0]
	return -1;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <_exit>:

void _exit (int status)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80075d8:	f04f 31ff 	mov.w	r1, #4294967295
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ffe7 	bl	80075b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80075e2:	e7fe      	b.n	80075e2 <_exit+0x12>

080075e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e00a      	b.n	800760c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80075f6:	f3af 8000 	nop.w
 80075fa:	4601      	mov	r1, r0
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	60ba      	str	r2, [r7, #8]
 8007602:	b2ca      	uxtb	r2, r1
 8007604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	3301      	adds	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	dbf0      	blt.n	80075f6 <_read+0x12>
	}

return len;
 8007614:	687b      	ldr	r3, [r7, #4]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	e009      	b.n	8007644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	60ba      	str	r2, [r7, #8]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3301      	adds	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	dbf1      	blt.n	8007630 <_write+0x12>
	}
	return len;
 800764c:	687b      	ldr	r3, [r7, #4]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <_close>:

int _close(int file)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
	return -1;
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800767e:	605a      	str	r2, [r3, #4]
	return 0;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <_isatty>:

int _isatty(int file)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
	return 1;
 8007696:	2301      	movs	r3, #1
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
	return 0;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076c8:	4a14      	ldr	r2, [pc, #80]	; (800771c <_sbrk+0x5c>)
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <_sbrk+0x60>)
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076d4:	4b13      	ldr	r3, [pc, #76]	; (8007724 <_sbrk+0x64>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <_sbrk+0x64>)
 80076de:	4a12      	ldr	r2, [pc, #72]	; (8007728 <_sbrk+0x68>)
 80076e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <_sbrk+0x64>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d207      	bcs.n	8007700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076f0:	f015 fd84 	bl	801d1fc <__errno>
 80076f4:	4603      	mov	r3, r0
 80076f6:	220c      	movs	r2, #12
 80076f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295
 80076fe:	e009      	b.n	8007714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007700:	4b08      	ldr	r3, [pc, #32]	; (8007724 <_sbrk+0x64>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <_sbrk+0x64>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	4a05      	ldr	r2, [pc, #20]	; (8007724 <_sbrk+0x64>)
 8007710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20040000 	.word	0x20040000
 8007720:	00000400 	.word	0x00000400
 8007724:	20000874 	.word	0x20000874
 8007728:	20009fc8 	.word	0x20009fc8

0800772c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007730:	4b15      	ldr	r3, [pc, #84]	; (8007788 <SystemInit+0x5c>)
 8007732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007736:	4a14      	ldr	r2, [pc, #80]	; (8007788 <SystemInit+0x5c>)
 8007738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800773c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007740:	4b12      	ldr	r3, [pc, #72]	; (800778c <SystemInit+0x60>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a11      	ldr	r2, [pc, #68]	; (800778c <SystemInit+0x60>)
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800774c:	4b0f      	ldr	r3, [pc, #60]	; (800778c <SystemInit+0x60>)
 800774e:	2200      	movs	r2, #0
 8007750:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007752:	4b0e      	ldr	r3, [pc, #56]	; (800778c <SystemInit+0x60>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a0d      	ldr	r2, [pc, #52]	; (800778c <SystemInit+0x60>)
 8007758:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800775c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007760:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <SystemInit+0x60>)
 8007764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007768:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800776a:	4b08      	ldr	r3, [pc, #32]	; (800778c <SystemInit+0x60>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a07      	ldr	r2, [pc, #28]	; (800778c <SystemInit+0x60>)
 8007770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007774:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <SystemInit+0x60>)
 8007778:	2200      	movs	r2, #0
 800777a:	619a      	str	r2, [r3, #24]
}
 800777c:	bf00      	nop
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	e000ed00 	.word	0xe000ed00
 800778c:	40021000 	.word	0x40021000

08007790 <Temperature_process>:
extern ADC_HandleTypeDef hadc1;

uint16_t temperature_buf[256];

void Temperature_process(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_sum=0;
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]
	uint16_t temperature_middle = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &temperature_buf, 128);
 80077a2:	2280      	movs	r2, #128	; 0x80
 80077a4:	4932      	ldr	r1, [pc, #200]	; (8007870 <Temperature_process+0xe0>)
 80077a6:	4833      	ldr	r0, [pc, #204]	; (8007874 <Temperature_process+0xe4>)
 80077a8:	f000 fe4c 	bl	8008444 <HAL_ADC_Start_DMA>

	for(i=0;i<128;i++)temp_sum+=temperature_buf[i];
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
 80077b0:	e00a      	b.n	80077c8 <Temperature_process+0x38>
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	4a2e      	ldr	r2, [pc, #184]	; (8007870 <Temperature_process+0xe0>)
 80077b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ba:	461a      	mov	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4413      	add	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3301      	adds	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	daf0      	bge.n	80077b2 <Temperature_process+0x22>
	temperature_middle = (temp_sum>>7);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	09db      	lsrs	r3, r3, #7
 80077d4:	80fb      	strh	r3, [r7, #6]

	MCU_temp = (double)(temperature_middle/4096.0)*Vref;   // Напряжение в вольтах на датчике.
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7f8 feb3 	bl	8000544 <__aeabi_i2d>
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	4b25      	ldr	r3, [pc, #148]	; (8007878 <Temperature_process+0xe8>)
 80077e4:	f7f9 f842 	bl	800086c <__aeabi_ddiv>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4610      	mov	r0, r2
 80077ee:	4619      	mov	r1, r3
 80077f0:	a319      	add	r3, pc, #100	; (adr r3, 8007858 <Temperature_process+0xc8>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 ff0f 	bl	8000618 <__aeabi_dmul>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	491f      	ldr	r1, [pc, #124]	; (800787c <Temperature_process+0xec>)
 8007800:	e9c1 2300 	strd	r2, r3, [r1]
	MCU_temp = (tV_25-MCU_temp)/tSlope + 25.0;             // Температура в градусах.
 8007804:	4b1d      	ldr	r3, [pc, #116]	; (800787c <Temperature_process+0xec>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	a115      	add	r1, pc, #84	; (adr r1, 8007860 <Temperature_process+0xd0>)
 800780c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007810:	f7f8 fd4a 	bl	80002a8 <__aeabi_dsub>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4610      	mov	r0, r2
 800781a:	4619      	mov	r1, r3
 800781c:	a312      	add	r3, pc, #72	; (adr r3, 8007868 <Temperature_process+0xd8>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f9 f823 	bl	800086c <__aeabi_ddiv>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4610      	mov	r0, r2
 800782c:	4619      	mov	r1, r3
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	4b13      	ldr	r3, [pc, #76]	; (8007880 <Temperature_process+0xf0>)
 8007834:	f7f8 fd3a 	bl	80002ac <__adddf3>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	490f      	ldr	r1, [pc, #60]	; (800787c <Temperature_process+0xec>)
 800783e:	e9c1 2300 	strd	r2, r3, [r1]


	sleep(1000);
 8007842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007846:	f7fb fd39 	bl	80032bc <sleep>
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
 8007858:	66666666 	.word	0x66666666
 800785c:	400a6666 	.word	0x400a6666
 8007860:	22d0e560 	.word	0x22d0e560
 8007864:	3ff2f9db 	.word	0x3ff2f9db
 8007868:	75f6fd22 	.word	0x75f6fd22
 800786c:	3f719ce0 	.word	0x3f719ce0
 8007870:	20008060 	.word	0x20008060
 8007874:	20007ab4 	.word	0x20007ab4
 8007878:	40b00000 	.word	0x40b00000
 800787c:	20000828 	.word	0x20000828
 8007880:	40390000 	.word	0x40390000

08007884 <spi_timeout>:
static SPI_HandleTypeDef hdisplayspi;



uint8_t spi_timeout(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
	if(++spitimeout==100) return 1;
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <spi_timeout+0x28>)
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <spi_timeout+0x28>)
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <spi_timeout+0x28>)
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	2b64      	cmp	r3, #100	; 0x64
 800789a:	d101      	bne.n	80078a0 <spi_timeout+0x1c>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <spi_timeout+0x1e>
	else return 0;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000878 	.word	0x20000878

080078b0 <u8x8_gpio_and_delay_cb_stm32l4>:
/** @addtogroup _Exported_Functions
  * @{
  */
uint8_t u8x8_gpio_and_delay_cb_stm32l4 (U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
		U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	72fb      	strb	r3, [r7, #11]
 80078be:	4613      	mov	r3, r2
 80078c0:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c2:	f107 0314 	add.w	r3, r7, #20
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	605a      	str	r2, [r3, #4]
 80078cc:	609a      	str	r2, [r3, #8]
 80078ce:	60da      	str	r2, [r3, #12]
 80078d0:	611a      	str	r2, [r3, #16]
	  switch (msg)
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	3b28      	subs	r3, #40	; 0x28
 80078d6:	2b23      	cmp	r3, #35	; 0x23
 80078d8:	d870      	bhi.n	80079bc <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <u8x8_gpio_and_delay_cb_stm32l4+0x30>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007971 	.word	0x08007971
 80078e4:	08007987 	.word	0x08007987
 80078e8:	080079bd 	.word	0x080079bd
 80078ec:	080079bd 	.word	0x080079bd
 80078f0:	080079bd 	.word	0x080079bd
 80078f4:	080079bd 	.word	0x080079bd
 80078f8:	080079bd 	.word	0x080079bd
 80078fc:	080079bd 	.word	0x080079bd
 8007900:	080079bd 	.word	0x080079bd
 8007904:	080079bd 	.word	0x080079bd
 8007908:	080079bd 	.word	0x080079bd
 800790c:	080079bd 	.word	0x080079bd
 8007910:	080079bd 	.word	0x080079bd
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079bd 	.word	0x080079bd
 800791c:	080079bd 	.word	0x080079bd
 8007920:	080079bd 	.word	0x080079bd
 8007924:	080079bd 	.word	0x080079bd
 8007928:	080079bd 	.word	0x080079bd
 800792c:	080079bd 	.word	0x080079bd
 8007930:	080079bd 	.word	0x080079bd
 8007934:	080079bd 	.word	0x080079bd
 8007938:	080079bd 	.word	0x080079bd
 800793c:	080079bd 	.word	0x080079bd
 8007940:	080079bd 	.word	0x080079bd
 8007944:	080079bd 	.word	0x080079bd
 8007948:	080079bd 	.word	0x080079bd
 800794c:	080079bd 	.word	0x080079bd
 8007950:	080079bd 	.word	0x080079bd
 8007954:	080079bd 	.word	0x080079bd
 8007958:	080079bd 	.word	0x080079bd
 800795c:	080079bd 	.word	0x080079bd
 8007960:	080079bd 	.word	0x080079bd
 8007964:	080079a1 	.word	0x080079a1
 8007968:	08007991 	.word	0x08007991
 800796c:	080079af 	.word	0x080079af
	  {
	  case U8X8_MSG_GPIO_AND_DELAY_INIT:
		  LCD_NRST_NOT_ACTIVE();
 8007970:	2201      	movs	r2, #1
 8007972:	2110      	movs	r1, #16
 8007974:	4814      	ldr	r0, [pc, #80]	; (80079c8 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007976:	f002 fc2f 	bl	800a1d8 <HAL_GPIO_WritePin>
		  LCD_NCS_NOT_ACTIVE();
 800797a:	2201      	movs	r2, #1
 800797c:	2101      	movs	r1, #1
 800797e:	4812      	ldr	r0, [pc, #72]	; (80079c8 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007980:	f002 fc2a 	bl	800a1d8 <HAL_GPIO_WritePin>
	    break;
 8007984:	e01a      	b.n	80079bc <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_DELAY_MILLI:
		  delay_ms(arg_int);
 8007986:	7abb      	ldrb	r3, [r7, #10]
 8007988:	4618      	mov	r0, r3
 800798a:	f7fb fcaf 	bl	80032ec <delay_ms>
	    break;
 800798e:	e015      	b.n	80079bc <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_DC:
	    HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, arg_int); //?
 8007990:	7abb      	ldrb	r3, [r7, #10]
 8007992:	461a      	mov	r2, r3
 8007994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007998:	480c      	ldr	r0, [pc, #48]	; (80079cc <u8x8_gpio_and_delay_cb_stm32l4+0x11c>)
 800799a:	f002 fc1d 	bl	800a1d8 <HAL_GPIO_WritePin>
	    break;
 800799e:	e00d      	b.n	80079bc <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_CS:
	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, arg_int); //?
 80079a0:	7abb      	ldrb	r3, [r7, #10]
 80079a2:	461a      	mov	r2, r3
 80079a4:	2101      	movs	r1, #1
 80079a6:	4808      	ldr	r0, [pc, #32]	; (80079c8 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079a8:	f002 fc16 	bl	800a1d8 <HAL_GPIO_WritePin>
	    break;
 80079ac:	e006      	b.n	80079bc <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_RESET:
	    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, arg_int);
 80079ae:	7abb      	ldrb	r3, [r7, #10]
 80079b0:	461a      	mov	r2, r3
 80079b2:	2110      	movs	r1, #16
 80079b4:	4804      	ldr	r0, [pc, #16]	; (80079c8 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079b6:	f002 fc0f 	bl	800a1d8 <HAL_GPIO_WritePin>
	    break;
 80079ba:	bf00      	nop
	  }
	  return 1;
 80079bc:	2301      	movs	r3, #1
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3728      	adds	r7, #40	; 0x28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	48001000 	.word	0x48001000
 80079cc:	48000400 	.word	0x48000400

080079d0 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	607b      	str	r3, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	72fb      	strb	r3, [r7, #11]
 80079de:	4613      	mov	r3, r2
 80079e0:	72bb      	strb	r3, [r7, #10]
	uint8_t *data;//, a_flag;
#ifdef  USE_BSP_SPI2
 hdisplayspi.Instance = huc1638_hspi.Instance;
#else
 hdisplayspi.Instance = hspi2.Instance;
 80079e2:	4b54      	ldr	r3, [pc, #336]	; (8007b34 <u8x8_byte_4wire_hw_spi+0x164>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a54      	ldr	r2, [pc, #336]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 80079e8:	6013      	str	r3, [r2, #0]
#endif

  switch (msg)
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	3b14      	subs	r3, #20
 80079ee:	2b0c      	cmp	r3, #12
 80079f0:	f200 8098 	bhi.w	8007b24 <u8x8_byte_4wire_hw_spi+0x154>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <u8x8_byte_4wire_hw_spi+0x2c>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007ac1 	.word	0x08007ac1
 8007a00:	08007b25 	.word	0x08007b25
 8007a04:	08007b25 	.word	0x08007b25
 8007a08:	08007a31 	.word	0x08007a31
 8007a0c:	08007ae1 	.word	0x08007ae1
 8007a10:	08007b03 	.word	0x08007b03
 8007a14:	08007b25 	.word	0x08007b25
 8007a18:	08007b25 	.word	0x08007b25
 8007a1c:	08007b25 	.word	0x08007b25
 8007a20:	08007b25 	.word	0x08007b25
 8007a24:	08007b25 	.word	0x08007b25
 8007a28:	08007b25 	.word	0x08007b25
 8007a2c:	08007ad3 	.word	0x08007ad3
  {
  case U8X8_MSG_BYTE_SEND:
	data = (uint8_t *)arg_ptr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 8007a34:	e040      	b.n	8007ab8 <u8x8_byte_4wire_hw_spi+0xe8>
    {
    	/* check TXE flag */
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
    	{
    		spitimeout = 0;
 8007a36:	4b41      	ldr	r3, [pc, #260]	; (8007b3c <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007a3c:	f7ff ff22 	bl	8007884 <spi_timeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d007      	beq.n	8007a56 <u8x8_byte_4wire_hw_spi+0x86>
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8007a46:	4b3c      	ldr	r3, [pc, #240]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d1f0      	bne.n	8007a36 <u8x8_byte_4wire_hw_spi+0x66>
 8007a54:	e000      	b.n	8007a58 <u8x8_byte_4wire_hw_spi+0x88>
    		if(spi_timeout()==1) break;
 8007a56:	bf00      	nop
    	}
    	/* Write the data */
    	*((__IO uint8_t*) &hdisplayspi.Instance->DR ) = (uint8_t) * data;
 8007a58:	4b37      	ldr	r3, [pc, #220]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	701a      	strb	r2, [r3, #0]
    	/* Wait BSY flag */
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a64:	e007      	b.n	8007a76 <u8x8_byte_4wire_hw_spi+0xa6>
    		{
    			spitimeout = 0;
 8007a66:	4b35      	ldr	r3, [pc, #212]	; (8007b3c <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	801a      	strh	r2, [r3, #0]
    		    if(spi_timeout()==1) break;
 8007a6c:	f7ff ff0a 	bl	8007884 <spi_timeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d007      	beq.n	8007a86 <u8x8_byte_4wire_hw_spi+0xb6>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a76:	4b30      	ldr	r3, [pc, #192]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <u8x8_byte_4wire_hw_spi+0x96>
 8007a84:	e009      	b.n	8007a9a <u8x8_byte_4wire_hw_spi+0xca>
    		    if(spi_timeout()==1) break;
 8007a86:	bf00      	nop
    		}
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007a88:	e007      	b.n	8007a9a <u8x8_byte_4wire_hw_spi+0xca>
    	{
    		spitimeout = 0;
 8007a8a:	4b2c      	ldr	r3, [pc, #176]	; (8007b3c <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007a90:	f7ff fef8 	bl	8007884 <spi_timeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d007      	beq.n	8007aaa <u8x8_byte_4wire_hw_spi+0xda>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007a9a:	4b27      	ldr	r3, [pc, #156]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	2b80      	cmp	r3, #128	; 0x80
 8007aa6:	d0f0      	beq.n	8007a8a <u8x8_byte_4wire_hw_spi+0xba>
 8007aa8:	e000      	b.n	8007aac <u8x8_byte_4wire_hw_spi+0xdc>
    		if(spi_timeout()==1) break;
 8007aaa:	bf00      	nop
    	}
        data++;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]
        arg_int--;
 8007ab2:	7abb      	ldrb	r3, [r7, #10]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 8007ab8:	7abb      	ldrb	r3, [r7, #10]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1c3      	bne.n	8007a46 <u8x8_byte_4wire_hw_spi+0x76>
    }
//	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, arg_int, 1000);
    break;
 8007abe:	e033      	b.n	8007b28 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_INIT:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2149      	movs	r1, #73	; 0x49
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f00e feb9 	bl	8016842 <u8x8_gpio_call>
    break;
 8007ad0:	e02a      	b.n	8007b28 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_SET_DC:
	  u8x8_gpio_SetDC(u8x8, arg_int);
 8007ad2:	7abb      	ldrb	r3, [r7, #10]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	214a      	movs	r1, #74	; 0x4a
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f00e feb2 	bl	8016842 <u8x8_gpio_call>
    break;
 8007ade:	e023      	b.n	8007b28 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_START_TRANSFER:
	  __HAL_SPI_ENABLE(&hdisplayspi);
 8007ae0:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aee:	601a      	str	r2, [r3, #0]
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	2149      	movs	r1, #73	; 0x49
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f00e fea1 	bl	8016842 <u8x8_gpio_call>
    break;
 8007b00:	e012      	b.n	8007b28 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_END_TRANSFER:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2149      	movs	r1, #73	; 0x49
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f00e fe98 	bl	8016842 <u8x8_gpio_call>
	  __HAL_SPI_DISABLE(&hdisplayspi);
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b20:	601a      	str	r2, [r3, #0]
    break;
 8007b22:	e001      	b.n	8007b28 <u8x8_byte_4wire_hw_spi+0x158>
  default:
    return 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <u8x8_byte_4wire_hw_spi+0x15a>
  }
  return 1;
 8007b28:	2301      	movs	r3, #1
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20001ef0 	.word	0x20001ef0
 8007b38:	2000087c 	.word	0x2000087c
 8007b3c:	20000878 	.word	0x20000878

08007b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007b44:	f7ff fdf2 	bl	800772c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007b48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007b4a:	e003      	b.n	8007b54 <LoopCopyDataInit>

08007b4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007b4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007b50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007b52:	3104      	adds	r1, #4

08007b54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007b54:	480a      	ldr	r0, [pc, #40]	; (8007b80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007b58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007b5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007b5c:	d3f6      	bcc.n	8007b4c <CopyDataInit>
	ldr	r2, =_sbss
 8007b5e:	4a0a      	ldr	r2, [pc, #40]	; (8007b88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007b60:	e002      	b.n	8007b68 <LoopFillZerobss>

08007b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007b62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007b64:	f842 3b04 	str.w	r3, [r2], #4

08007b68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007b68:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <LoopForever+0x16>)
	cmp	r2, r3
 8007b6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007b6c:	d3f9      	bcc.n	8007b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007b6e:	f015 fb4b 	bl	801d208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b72:	f7fe f89d 	bl	8005cb0 <main>

08007b76 <LoopForever>:

LoopForever:
    b LoopForever
 8007b76:	e7fe      	b.n	8007b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007b78:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8007b7c:	08029d4c 	.word	0x08029d4c
	ldr	r0, =_sdata
 8007b80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007b84:	20000794 	.word	0x20000794
	ldr	r2, =_sbss
 8007b88:	20000798 	.word	0x20000798
	ldr	r3, = _ebss
 8007b8c:	20009fc8 	.word	0x20009fc8

08007b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b90:	e7fe      	b.n	8007b90 <ADC1_2_IRQHandler>

08007b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b9c:	2003      	movs	r0, #3
 8007b9e:	f001 fba8 	bl	80092f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ba2:	200f      	movs	r0, #15
 8007ba4:	f7ff fc00 	bl	80073a8 <HAL_InitTick>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	71fb      	strb	r3, [r7, #7]
 8007bb2:	e001      	b.n	8007bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007bb4:	f7fe ff90 	bl	8006ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <HAL_IncTick+0x20>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_IncTick+0x24>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	4a04      	ldr	r2, [pc, #16]	; (8007be8 <HAL_IncTick+0x24>)
 8007bd6:	6013      	str	r3, [r2, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	200002e8 	.word	0x200002e8
 8007be8:	20008260 	.word	0x20008260

08007bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  return uwTick;
 8007bf0:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <HAL_GetTick+0x14>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20008260 	.word	0x20008260

08007c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c0c:	f7ff ffee 	bl	8007bec <HAL_GetTick>
 8007c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d005      	beq.n	8007c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007c1e:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <HAL_Delay+0x44>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c2a:	bf00      	nop
 8007c2c:	f7ff ffde 	bl	8007bec <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d8f7      	bhi.n	8007c2c <HAL_Delay+0x28>
  {
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200002e8 	.word	0x200002e8

08007c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3360      	adds	r3, #96	; 0x60
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <LL_ADC_SetOffset+0x44>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	03fff000 	.word	0x03fff000

08007cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3360      	adds	r3, #96	; 0x60
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3360      	adds	r3, #96	; 0x60
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	615a      	str	r2, [r3, #20]
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e000      	b.n	8007d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b087      	sub	sp, #28
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3330      	adds	r3, #48	; 0x30
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	0a1b      	lsrs	r3, r3, #8
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	4413      	add	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	211f      	movs	r1, #31
 8007dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	401a      	ands	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	0e9b      	lsrs	r3, r3, #26
 8007de2:	f003 011f 	and.w	r1, r3, #31
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f003 031f 	and.w	r3, r3, #31
 8007dec:	fa01 f303 	lsl.w	r3, r1, r3
 8007df0:	431a      	orrs	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b087      	sub	sp, #28
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3314      	adds	r3, #20
 8007e12:	461a      	mov	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	0e5b      	lsrs	r3, r3, #25
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	4413      	add	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	0d1b      	lsrs	r3, r3, #20
 8007e2a:	f003 031f 	and.w	r3, r3, #31
 8007e2e:	2107      	movs	r1, #7
 8007e30:	fa01 f303 	lsl.w	r3, r1, r3
 8007e34:	43db      	mvns	r3, r3
 8007e36:	401a      	ands	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	0d1b      	lsrs	r3, r3, #20
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	fa01 f303 	lsl.w	r3, r1, r3
 8007e46:	431a      	orrs	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007e4c:	bf00      	nop
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e70:	43db      	mvns	r3, r3
 8007e72:	401a      	ands	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f003 0318 	and.w	r3, r3, #24
 8007e7a:	4908      	ldr	r1, [pc, #32]	; (8007e9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8007e7c:	40d9      	lsrs	r1, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	400b      	ands	r3, r1
 8007e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e86:	431a      	orrs	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	0007ffff 	.word	0x0007ffff

08007ea0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 031f 	and.w	r3, r3, #31
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6093      	str	r3, [r2, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef4:	d101      	bne.n	8007efa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f44:	d101      	bne.n	8007f4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f6c:	f043 0201 	orr.w	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <LL_ADC_IsEnabled+0x18>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <LL_ADC_IsEnabled+0x1a>
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fba:	f043 0204 	orr.w	r2, r3, #4
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d101      	bne.n	8007fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b08      	cmp	r3, #8
 8008006:	d101      	bne.n	800800c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008008:	2301      	movs	r3, #1
 800800a:	e000      	b.n	800800e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b089      	sub	sp, #36	; 0x24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008028:	2300      	movs	r3, #0
 800802a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e139      	b.n	80082aa <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7fe fd6b 	bl	8006b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff ff3f 	bl	8007ee0 <LL_ADC_IsDeepPowerDownEnabled>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff ff25 	bl	8007ebc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff ff5a 	bl	8007f30 <LL_ADC_IsInternalRegulatorEnabled>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d115      	bne.n	80080ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff ff3e 	bl	8007f08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800808c:	4b89      	ldr	r3, [pc, #548]	; (80082b4 <HAL_ADC_Init+0x298>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	099b      	lsrs	r3, r3, #6
 8008092:	4a89      	ldr	r2, [pc, #548]	; (80082b8 <HAL_ADC_Init+0x29c>)
 8008094:	fba2 2303 	umull	r2, r3, r2, r3
 8008098:	099b      	lsrs	r3, r3, #6
 800809a:	3301      	adds	r3, #1
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080a0:	e002      	b.n	80080a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f9      	bne.n	80080a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff ff3c 	bl	8007f30 <LL_ADC_IsInternalRegulatorEnabled>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	f043 0210 	orr.w	r2, r3, #16
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ce:	f043 0201 	orr.w	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff ff75 	bl	8007fce <LL_ADC_REG_IsConversionOngoing>
 80080e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80d2 	bne.w	8008298 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f040 80ce 	bne.w	8008298 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008100:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008104:	f043 0202 	orr.w	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff ff35 	bl	8007f80 <LL_ADC_IsEnabled>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d115      	bne.n	8008148 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800811c:	4867      	ldr	r0, [pc, #412]	; (80082bc <HAL_ADC_Init+0x2a0>)
 800811e:	f7ff ff2f 	bl	8007f80 <LL_ADC_IsEnabled>
 8008122:	4604      	mov	r4, r0
 8008124:	4866      	ldr	r0, [pc, #408]	; (80082c0 <HAL_ADC_Init+0x2a4>)
 8008126:	f7ff ff2b 	bl	8007f80 <LL_ADC_IsEnabled>
 800812a:	4603      	mov	r3, r0
 800812c:	431c      	orrs	r4, r3
 800812e:	4865      	ldr	r0, [pc, #404]	; (80082c4 <HAL_ADC_Init+0x2a8>)
 8008130:	f7ff ff26 	bl	8007f80 <LL_ADC_IsEnabled>
 8008134:	4603      	mov	r3, r0
 8008136:	4323      	orrs	r3, r4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d105      	bne.n	8008148 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4619      	mov	r1, r3
 8008142:	4861      	ldr	r0, [pc, #388]	; (80082c8 <HAL_ADC_Init+0x2ac>)
 8008144:	f7ff fd82 	bl	8007c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	7e5b      	ldrb	r3, [r3, #25]
 800814c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008152:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008158:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800815e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008166:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008168:	4313      	orrs	r3, r2
 800816a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d106      	bne.n	8008184 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	3b01      	subs	r3, #1
 800817c:	045b      	lsls	r3, r3, #17
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	4313      	orrs	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	4313      	orrs	r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	4b49      	ldr	r3, [pc, #292]	; (80082cc <HAL_ADC_Init+0x2b0>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	69b9      	ldr	r1, [r7, #24]
 80081b0:	430b      	orrs	r3, r1
 80081b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff ff08 	bl	8007fce <LL_ADC_REG_IsConversionOngoing>
 80081be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff ff15 	bl	8007ff4 <LL_ADC_INJ_IsConversionOngoing>
 80081ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d140      	bne.n	8008254 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d13d      	bne.n	8008254 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7e1b      	ldrb	r3, [r3, #24]
 80081e0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081e2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081ea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081ec:	4313      	orrs	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081fa:	f023 0306 	bic.w	r3, r3, #6
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6812      	ldr	r2, [r2, #0]
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	430b      	orrs	r3, r1
 8008206:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800820e:	2b01      	cmp	r3, #1
 8008210:	d118      	bne.n	8008244 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008228:	4311      	orrs	r1, r2
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800822e:	4311      	orrs	r1, r2
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008234:	430a      	orrs	r2, r1
 8008236:	431a      	orrs	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	e007      	b.n	8008254 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691a      	ldr	r2, [r3, #16]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d10c      	bne.n	8008276 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	f023 010f 	bic.w	r1, r3, #15
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	1e5a      	subs	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	631a      	str	r2, [r3, #48]	; 0x30
 8008274:	e007      	b.n	8008286 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 020f 	bic.w	r2, r2, #15
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828a:	f023 0303 	bic.w	r3, r3, #3
 800828e:	f043 0201 	orr.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	659a      	str	r2, [r3, #88]	; 0x58
 8008296:	e007      	b.n	80082a8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829c:	f043 0210 	orr.w	r2, r3, #16
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80082a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3724      	adds	r7, #36	; 0x24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd90      	pop	{r4, r7, pc}
 80082b2:	bf00      	nop
 80082b4:	200002e0 	.word	0x200002e0
 80082b8:	053e2d63 	.word	0x053e2d63
 80082bc:	50040000 	.word	0x50040000
 80082c0:	50040100 	.word	0x50040100
 80082c4:	50040200 	.word	0x50040200
 80082c8:	50040300 	.word	0x50040300
 80082cc:	fff0c007 	.word	0xfff0c007

080082d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80082d8:	4857      	ldr	r0, [pc, #348]	; (8008438 <HAL_ADC_Start+0x168>)
 80082da:	f7ff fde1 	bl	8007ea0 <LL_ADC_GetMultimode>
 80082de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff fe72 	bl	8007fce <LL_ADC_REG_IsConversionOngoing>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 809c 	bne.w	800842a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_ADC_Start+0x30>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e097      	b.n	8008430 <HAL_ADC_Start+0x160>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fd79 	bl	8008e00 <ADC_Enable>
 800830e:	4603      	mov	r3, r0
 8008310:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 8083 	bne.w	8008420 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a42      	ldr	r2, [pc, #264]	; (800843c <HAL_ADC_Start+0x16c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d002      	beq.n	800833e <HAL_ADC_Start+0x6e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	e000      	b.n	8008340 <HAL_ADC_Start+0x70>
 800833e:	4b40      	ldr	r3, [pc, #256]	; (8008440 <HAL_ADC_Start+0x170>)
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6812      	ldr	r2, [r2, #0]
 8008344:	4293      	cmp	r3, r2
 8008346:	d002      	beq.n	800834e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d105      	bne.n	800835a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d106      	bne.n	8008376 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836c:	f023 0206 	bic.w	r2, r3, #6
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	65da      	str	r2, [r3, #92]	; 0x5c
 8008374:	e002      	b.n	800837c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	221c      	movs	r2, #28
 8008382:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a2a      	ldr	r2, [pc, #168]	; (800843c <HAL_ADC_Start+0x16c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d002      	beq.n	800839c <HAL_ADC_Start+0xcc>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	e000      	b.n	800839e <HAL_ADC_Start+0xce>
 800839c:	4b28      	ldr	r3, [pc, #160]	; (8008440 <HAL_ADC_Start+0x170>)
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d008      	beq.n	80083b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d002      	beq.n	80083b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d114      	bne.n	80083e2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80083ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fde3 	bl	8007fa6 <LL_ADC_REG_StartConversion>
 80083e0:	e025      	b.n	800842e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a12      	ldr	r2, [pc, #72]	; (800843c <HAL_ADC_Start+0x16c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d002      	beq.n	80083fe <HAL_ADC_Start+0x12e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	e000      	b.n	8008400 <HAL_ADC_Start+0x130>
 80083fe:	4b10      	ldr	r3, [pc, #64]	; (8008440 <HAL_ADC_Start+0x170>)
 8008400:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00f      	beq.n	800842e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008416:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	659a      	str	r2, [r3, #88]	; 0x58
 800841e:	e006      	b.n	800842e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008428:	e001      	b.n	800842e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800842a:	2302      	movs	r3, #2
 800842c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	50040300 	.word	0x50040300
 800843c:	50040100 	.word	0x50040100
 8008440:	50040000 	.word	0x50040000

08008444 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008450:	4850      	ldr	r0, [pc, #320]	; (8008594 <HAL_ADC_Start_DMA+0x150>)
 8008452:	f7ff fd25 	bl	8007ea0 <LL_ADC_GetMultimode>
 8008456:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fdb6 	bl	8007fce <LL_ADC_REG_IsConversionOngoing>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 808e 	bne.w	8008586 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_ADC_Start_DMA+0x34>
 8008474:	2302      	movs	r3, #2
 8008476:	e089      	b.n	800858c <HAL_ADC_Start_DMA+0x148>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d005      	beq.n	8008492 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b05      	cmp	r3, #5
 800848a:	d002      	beq.n	8008492 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b09      	cmp	r3, #9
 8008490:	d172      	bne.n	8008578 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fcb4 	bl	8008e00 <ADC_Enable>
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d165      	bne.n	800856e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a37      	ldr	r2, [pc, #220]	; (8008598 <HAL_ADC_Start_DMA+0x154>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d002      	beq.n	80084c6 <HAL_ADC_Start_DMA+0x82>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	e000      	b.n	80084c8 <HAL_ADC_Start_DMA+0x84>
 80084c6:	4b35      	ldr	r3, [pc, #212]	; (800859c <HAL_ADC_Start_DMA+0x158>)
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	6812      	ldr	r2, [r2, #0]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d002      	beq.n	80084d6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f2:	f023 0206 	bic.w	r2, r3, #6
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80084fa:	e002      	b.n	8008502 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008506:	4a26      	ldr	r2, [pc, #152]	; (80085a0 <HAL_ADC_Start_DMA+0x15c>)
 8008508:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850e:	4a25      	ldr	r2, [pc, #148]	; (80085a4 <HAL_ADC_Start_DMA+0x160>)
 8008510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <HAL_ADC_Start_DMA+0x164>)
 8008518:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	221c      	movs	r2, #28
 8008520:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f042 0210 	orr.w	r2, r2, #16
 8008538:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0201 	orr.w	r2, r2, #1
 8008548:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3340      	adds	r3, #64	; 0x40
 8008554:	4619      	mov	r1, r3
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f001 fad5 	bl	8009b08 <HAL_DMA_Start_IT>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fd1d 	bl	8007fa6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800856c:	e00d      	b.n	800858a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8008576:	e008      	b.n	800858a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008584:	e001      	b.n	800858a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008586:	2302      	movs	r3, #2
 8008588:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	50040300 	.word	0x50040300
 8008598:	50040100 	.word	0x50040100
 800859c:	50040000 	.word	0x50040000
 80085a0:	08008ec5 	.word	0x08008ec5
 80085a4:	08008f9d 	.word	0x08008f9d
 80085a8:	08008fb9 	.word	0x08008fb9

080085ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b0b6      	sub	sp, #216	; 0xd8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_ADC_ConfigChannel+0x22>
 8008606:	2302      	movs	r3, #2
 8008608:	e3e3      	b.n	8008dd2 <HAL_ADC_ConfigChannel+0x7ea>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fcd9 	bl	8007fce <LL_ADC_REG_IsConversionOngoing>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 83c4 	bne.w	8008dac <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	2b05      	cmp	r3, #5
 800862a:	d824      	bhi.n	8008676 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	3b02      	subs	r3, #2
 8008632:	2b03      	cmp	r3, #3
 8008634:	d81b      	bhi.n	800866e <HAL_ADC_ConfigChannel+0x86>
 8008636:	a201      	add	r2, pc, #4	; (adr r2, 800863c <HAL_ADC_ConfigChannel+0x54>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008655 	.word	0x08008655
 8008644:	0800865d 	.word	0x0800865d
 8008648:	08008665 	.word	0x08008665
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	220c      	movs	r2, #12
 8008650:	605a      	str	r2, [r3, #4]
          break;
 8008652:	e011      	b.n	8008678 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2212      	movs	r2, #18
 8008658:	605a      	str	r2, [r3, #4]
          break;
 800865a:	e00d      	b.n	8008678 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2218      	movs	r2, #24
 8008660:	605a      	str	r2, [r3, #4]
          break;
 8008662:	e009      	b.n	8008678 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800866a:	605a      	str	r2, [r3, #4]
          break;
 800866c:	e004      	b.n	8008678 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2206      	movs	r2, #6
 8008672:	605a      	str	r2, [r3, #4]
          break;
 8008674:	e000      	b.n	8008678 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8008676:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	6859      	ldr	r1, [r3, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	f7ff fb90 	bl	8007daa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fc9d 	bl	8007fce <LL_ADC_REG_IsConversionOngoing>
 8008694:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fca9 	bl	8007ff4 <LL_ADC_INJ_IsConversionOngoing>
 80086a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f040 81c1 	bne.w	8008a32 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 81bc 	bne.w	8008a32 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c2:	d10f      	bne.n	80086e4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2200      	movs	r2, #0
 80086ce:	4619      	mov	r1, r3
 80086d0:	f7ff fb97 	bl	8007e02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fb3e 	bl	8007d5e <LL_ADC_SetSamplingTimeCommonConfig>
 80086e2:	e00e      	b.n	8008702 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6819      	ldr	r1, [r3, #0]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	461a      	mov	r2, r3
 80086f2:	f7ff fb86 	bl	8007e02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fb2e 	bl	8007d5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	08db      	lsrs	r3, r3, #3
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b04      	cmp	r3, #4
 8008722:	d00a      	beq.n	800873a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	6919      	ldr	r1, [r3, #16]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008734:	f7ff fabe 	bl	8007cb4 <LL_ADC_SetOffset>
 8008738:	e17b      	b.n	8008a32 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff fadb 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 8008746:	4603      	mov	r3, r0
 8008748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <HAL_ADC_ConfigChannel+0x17e>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff fad0 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 800875c:	4603      	mov	r3, r0
 800875e:	0e9b      	lsrs	r3, r3, #26
 8008760:	f003 021f 	and.w	r2, r3, #31
 8008764:	e01e      	b.n	80087a4 <HAL_ADC_ConfigChannel+0x1bc>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fac5 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 8008772:	4603      	mov	r3, r0
 8008774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800877c:	fa93 f3a3 	rbit	r3, r3
 8008780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800878c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8008794:	2320      	movs	r3, #32
 8008796:	e004      	b.n	80087a2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8008798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800879c:	fab3 f383 	clz	r3, r3
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <HAL_ADC_ConfigChannel+0x1d4>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	0e9b      	lsrs	r3, r3, #26
 80087b6:	f003 031f 	and.w	r3, r3, #31
 80087ba:	e018      	b.n	80087ee <HAL_ADC_ConfigChannel+0x206>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087c8:	fa93 f3a3 	rbit	r3, r3
 80087cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80087d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80087d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80087e0:	2320      	movs	r3, #32
 80087e2:	e004      	b.n	80087ee <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80087e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087e8:	fab3 f383 	clz	r3, r3
 80087ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d106      	bne.n	8008800 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fa94 	bl	8007d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2101      	movs	r1, #1
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fa78 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 800880c:	4603      	mov	r3, r0
 800880e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <HAL_ADC_ConfigChannel+0x244>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2101      	movs	r1, #1
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fa6d 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 8008822:	4603      	mov	r3, r0
 8008824:	0e9b      	lsrs	r3, r3, #26
 8008826:	f003 021f 	and.w	r2, r3, #31
 800882a:	e01e      	b.n	800886a <HAL_ADC_ConfigChannel+0x282>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2101      	movs	r1, #1
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff fa62 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 8008838:	4603      	mov	r3, r0
 800883a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008842:	fa93 f3a3 	rbit	r3, r3
 8008846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800884a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800884e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800885a:	2320      	movs	r3, #32
 800885c:	e004      	b.n	8008868 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800885e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008862:	fab3 f383 	clz	r3, r3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <HAL_ADC_ConfigChannel+0x29a>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	0e9b      	lsrs	r3, r3, #26
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	e018      	b.n	80088b4 <HAL_ADC_ConfigChannel+0x2cc>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800888a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800888e:	fa93 f3a3 	rbit	r3, r3
 8008892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800889a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800889e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80088a6:	2320      	movs	r3, #32
 80088a8:	e004      	b.n	80088b4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80088aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ae:	fab3 f383 	clz	r3, r3
 80088b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d106      	bne.n	80088c6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	2101      	movs	r1, #1
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fa31 	bl	8007d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2102      	movs	r1, #2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff fa15 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <HAL_ADC_ConfigChannel+0x30a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2102      	movs	r1, #2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff fa0a 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 80088e8:	4603      	mov	r3, r0
 80088ea:	0e9b      	lsrs	r3, r3, #26
 80088ec:	f003 021f 	and.w	r2, r3, #31
 80088f0:	e01e      	b.n	8008930 <HAL_ADC_ConfigChannel+0x348>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2102      	movs	r1, #2
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff f9ff 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 80088fe:	4603      	mov	r3, r0
 8008900:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008908:	fa93 f3a3 	rbit	r3, r3
 800890c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8008920:	2320      	movs	r3, #32
 8008922:	e004      	b.n	800892e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8008924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008928:	fab3 f383 	clz	r3, r3
 800892c:	b2db      	uxtb	r3, r3
 800892e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008938:	2b00      	cmp	r3, #0
 800893a:	d105      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x360>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	0e9b      	lsrs	r3, r3, #26
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	e016      	b.n	8008976 <HAL_ADC_ConfigChannel+0x38e>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008954:	fa93 f3a3 	rbit	r3, r3
 8008958:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800895a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800895c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8008968:	2320      	movs	r3, #32
 800896a:	e004      	b.n	8008976 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800896c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008970:	fab3 f383 	clz	r3, r3
 8008974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008976:	429a      	cmp	r2, r3
 8008978:	d106      	bne.n	8008988 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	2102      	movs	r1, #2
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff f9d0 	bl	8007d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2103      	movs	r1, #3
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff f9b4 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 8008994:	4603      	mov	r3, r0
 8008996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <HAL_ADC_ConfigChannel+0x3cc>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2103      	movs	r1, #3
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff f9a9 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 80089aa:	4603      	mov	r3, r0
 80089ac:	0e9b      	lsrs	r3, r3, #26
 80089ae:	f003 021f 	and.w	r2, r3, #31
 80089b2:	e017      	b.n	80089e4 <HAL_ADC_ConfigChannel+0x3fc>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2103      	movs	r1, #3
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff f99e 	bl	8007cfc <LL_ADC_GetOffsetChannel>
 80089c0:	4603      	mov	r3, r0
 80089c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c6:	fa93 f3a3 	rbit	r3, r3
 80089ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80089cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80089d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80089d6:	2320      	movs	r3, #32
 80089d8:	e003      	b.n	80089e2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80089da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089dc:	fab3 f383 	clz	r3, r3
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_ADC_ConfigChannel+0x414>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	0e9b      	lsrs	r3, r3, #26
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	e011      	b.n	8008a20 <HAL_ADC_ConfigChannel+0x438>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a04:	fa93 f3a3 	rbit	r3, r3
 8008a08:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8008a14:	2320      	movs	r3, #32
 8008a16:	e003      	b.n	8008a20 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8008a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1a:	fab3 f383 	clz	r3, r3
 8008a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d106      	bne.n	8008a32 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2103      	movs	r1, #3
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff f97b 	bl	8007d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff faa2 	bl	8007f80 <LL_ADC_IsEnabled>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f040 8140 	bne.w	8008cc4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	6819      	ldr	r1, [r3, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	461a      	mov	r2, r3
 8008a52:	f7ff fa01 	bl	8007e58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	4a8f      	ldr	r2, [pc, #572]	; (8008c98 <HAL_ADC_ConfigChannel+0x6b0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	f040 8131 	bne.w	8008cc4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_ADC_ConfigChannel+0x4a2>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	0e9b      	lsrs	r3, r3, #26
 8008a78:	3301      	adds	r3, #1
 8008a7a:	f003 031f 	and.w	r3, r3, #31
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	bf94      	ite	ls
 8008a82:	2301      	movls	r3, #1
 8008a84:	2300      	movhi	r3, #0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	e019      	b.n	8008abe <HAL_ADC_ConfigChannel+0x4d6>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a92:	fa93 f3a3 	rbit	r3, r3
 8008a96:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a9a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8008aa2:	2320      	movs	r3, #32
 8008aa4:	e003      	b.n	8008aae <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8008aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa8:	fab3 f383 	clz	r3, r3
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	3301      	adds	r3, #1
 8008ab0:	f003 031f 	and.w	r3, r3, #31
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	bf94      	ite	ls
 8008ab8:	2301      	movls	r3, #1
 8008aba:	2300      	movhi	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d079      	beq.n	8008bb6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d107      	bne.n	8008ade <HAL_ADC_ConfigChannel+0x4f6>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	0e9b      	lsrs	r3, r3, #26
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	069b      	lsls	r3, r3, #26
 8008ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008adc:	e015      	b.n	8008b0a <HAL_ADC_ConfigChannel+0x522>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae6:	fa93 f3a3 	rbit	r3, r3
 8008aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8008af6:	2320      	movs	r3, #32
 8008af8:	e003      	b.n	8008b02 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8008afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008afc:	fab3 f383 	clz	r3, r3
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	3301      	adds	r3, #1
 8008b04:	069b      	lsls	r3, r3, #26
 8008b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <HAL_ADC_ConfigChannel+0x542>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	0e9b      	lsrs	r3, r3, #26
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f003 031f 	and.w	r3, r3, #31
 8008b22:	2101      	movs	r1, #1
 8008b24:	fa01 f303 	lsl.w	r3, r1, r3
 8008b28:	e017      	b.n	8008b5a <HAL_ADC_ConfigChannel+0x572>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b32:	fa93 f3a3 	rbit	r3, r3
 8008b36:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8008b42:	2320      	movs	r3, #32
 8008b44:	e003      	b.n	8008b4e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	fab3 f383 	clz	r3, r3
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	2101      	movs	r1, #1
 8008b56:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5a:	ea42 0103 	orr.w	r1, r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10a      	bne.n	8008b80 <HAL_ADC_ConfigChannel+0x598>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	0e9b      	lsrs	r3, r3, #26
 8008b70:	3301      	adds	r3, #1
 8008b72:	f003 021f 	and.w	r2, r3, #31
 8008b76:	4613      	mov	r3, r2
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	4413      	add	r3, r2
 8008b7c:	051b      	lsls	r3, r3, #20
 8008b7e:	e018      	b.n	8008bb2 <HAL_ADC_ConfigChannel+0x5ca>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	fa93 f3a3 	rbit	r3, r3
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8008b98:	2320      	movs	r3, #32
 8008b9a:	e003      	b.n	8008ba4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	fab3 f383 	clz	r3, r3
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f003 021f 	and.w	r2, r3, #31
 8008baa:	4613      	mov	r3, r2
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	4413      	add	r3, r2
 8008bb0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	e081      	b.n	8008cba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d107      	bne.n	8008bd2 <HAL_ADC_ConfigChannel+0x5ea>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	0e9b      	lsrs	r3, r3, #26
 8008bc8:	3301      	adds	r3, #1
 8008bca:	069b      	lsls	r3, r3, #26
 8008bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bd0:	e015      	b.n	8008bfe <HAL_ADC_ConfigChannel+0x616>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	fa93 f3a3 	rbit	r3, r3
 8008bde:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8008bea:	2320      	movs	r3, #32
 8008bec:	e003      	b.n	8008bf6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	fab3 f383 	clz	r3, r3
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	069b      	lsls	r3, r3, #26
 8008bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <HAL_ADC_ConfigChannel+0x636>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	0e9b      	lsrs	r3, r3, #26
 8008c10:	3301      	adds	r3, #1
 8008c12:	f003 031f 	and.w	r3, r3, #31
 8008c16:	2101      	movs	r1, #1
 8008c18:	fa01 f303 	lsl.w	r3, r1, r3
 8008c1c:	e017      	b.n	8008c4e <HAL_ADC_ConfigChannel+0x666>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	fa93 f3a3 	rbit	r3, r3
 8008c2a:	61fb      	str	r3, [r7, #28]
  return result;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8008c36:	2320      	movs	r3, #32
 8008c38:	e003      	b.n	8008c42 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	fab3 f383 	clz	r3, r3
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	3301      	adds	r3, #1
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	2101      	movs	r1, #1
 8008c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4e:	ea42 0103 	orr.w	r1, r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10d      	bne.n	8008c7a <HAL_ADC_ConfigChannel+0x692>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	0e9b      	lsrs	r3, r3, #26
 8008c64:	3301      	adds	r3, #1
 8008c66:	f003 021f 	and.w	r2, r3, #31
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	3b1e      	subs	r3, #30
 8008c72:	051b      	lsls	r3, r3, #20
 8008c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c78:	e01e      	b.n	8008cb8 <HAL_ADC_ConfigChannel+0x6d0>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	fa93 f3a3 	rbit	r3, r3
 8008c86:	613b      	str	r3, [r7, #16]
  return result;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8008c92:	2320      	movs	r3, #32
 8008c94:	e006      	b.n	8008ca4 <HAL_ADC_ConfigChannel+0x6bc>
 8008c96:	bf00      	nop
 8008c98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	fab3 f383 	clz	r3, r3
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	f003 021f 	and.w	r2, r3, #31
 8008caa:	4613      	mov	r3, r2
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	4413      	add	r3, r2
 8008cb0:	3b1e      	subs	r3, #30
 8008cb2:	051b      	lsls	r3, r3, #20
 8008cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	6892      	ldr	r2, [r2, #8]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f7ff f89f 	bl	8007e02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	4b44      	ldr	r3, [pc, #272]	; (8008ddc <HAL_ADC_ConfigChannel+0x7f4>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d07a      	beq.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008cd0:	4843      	ldr	r0, [pc, #268]	; (8008de0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008cd2:	f7fe ffe1 	bl	8007c98 <LL_ADC_GetCommonPathInternalCh>
 8008cd6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a41      	ldr	r2, [pc, #260]	; (8008de4 <HAL_ADC_ConfigChannel+0x7fc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d12c      	bne.n	8008d3e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d126      	bne.n	8008d3e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a3c      	ldr	r2, [pc, #240]	; (8008de8 <HAL_ADC_ConfigChannel+0x800>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <HAL_ADC_ConfigChannel+0x71c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a3b      	ldr	r2, [pc, #236]	; (8008dec <HAL_ADC_ConfigChannel+0x804>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d15d      	bne.n	8008dc0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4834      	ldr	r0, [pc, #208]	; (8008de0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d10:	f7fe ffaf 	bl	8007c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d14:	4b36      	ldr	r3, [pc, #216]	; (8008df0 <HAL_ADC_ConfigChannel+0x808>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	099b      	lsrs	r3, r3, #6
 8008d1a:	4a36      	ldr	r2, [pc, #216]	; (8008df4 <HAL_ADC_ConfigChannel+0x80c>)
 8008d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d20:	099b      	lsrs	r3, r3, #6
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	4613      	mov	r3, r2
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008d2e:	e002      	b.n	8008d36 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f9      	bne.n	8008d30 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d3c:	e040      	b.n	8008dc0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a2d      	ldr	r2, [pc, #180]	; (8008df8 <HAL_ADC_ConfigChannel+0x810>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d118      	bne.n	8008d7a <HAL_ADC_ConfigChannel+0x792>
 8008d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d112      	bne.n	8008d7a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a23      	ldr	r2, [pc, #140]	; (8008de8 <HAL_ADC_ConfigChannel+0x800>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_ADC_ConfigChannel+0x780>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a22      	ldr	r2, [pc, #136]	; (8008dec <HAL_ADC_ConfigChannel+0x804>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d12d      	bne.n	8008dc4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d70:	4619      	mov	r1, r3
 8008d72:	481b      	ldr	r0, [pc, #108]	; (8008de0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d74:	f7fe ff7d 	bl	8007c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d78:	e024      	b.n	8008dc4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a1f      	ldr	r2, [pc, #124]	; (8008dfc <HAL_ADC_ConfigChannel+0x814>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d120      	bne.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d11a      	bne.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <HAL_ADC_ConfigChannel+0x800>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d115      	bne.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008da2:	4619      	mov	r1, r3
 8008da4:	480e      	ldr	r0, [pc, #56]	; (8008de0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008da6:	f7fe ff64 	bl	8007c72 <LL_ADC_SetCommonPathInternalCh>
 8008daa:	e00c      	b.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db0:	f043 0220 	orr.w	r2, r3, #32
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008dbe:	e002      	b.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008dc0:	bf00      	nop
 8008dc2:	e000      	b.n	8008dc6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008dc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008dce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	37d8      	adds	r7, #216	; 0xd8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	80080000 	.word	0x80080000
 8008de0:	50040300 	.word	0x50040300
 8008de4:	c7520000 	.word	0xc7520000
 8008de8:	50040000 	.word	0x50040000
 8008dec:	50040200 	.word	0x50040200
 8008df0:	200002e0 	.word	0x200002e0
 8008df4:	053e2d63 	.word	0x053e2d63
 8008df8:	cb840000 	.word	0xcb840000
 8008dfc:	80000001 	.word	0x80000001

08008e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff f8b7 	bl	8007f80 <LL_ADC_IsEnabled>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d14d      	bne.n	8008eb4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	4b28      	ldr	r3, [pc, #160]	; (8008ec0 <ADC_Enable+0xc0>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00d      	beq.n	8008e42 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	f043 0210 	orr.w	r2, r3, #16
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e36:	f043 0201 	orr.w	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e039      	b.n	8008eb6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff f886 	bl	8007f58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008e4c:	f7fe fece 	bl	8007bec <HAL_GetTick>
 8008e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e52:	e028      	b.n	8008ea6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff f891 	bl	8007f80 <LL_ADC_IsEnabled>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d104      	bne.n	8008e6e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff f875 	bl	8007f58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e6e:	f7fe febd 	bl	8007bec <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d914      	bls.n	8008ea6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d00d      	beq.n	8008ea6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	f043 0210 	orr.w	r2, r3, #16
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9a:	f043 0201 	orr.w	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e007      	b.n	8008eb6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d1cf      	bne.n	8008e54 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	8000003f 	.word	0x8000003f

08008ec4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d14b      	bne.n	8008f76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d021      	beq.n	8008f3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fe ff41 	bl	8007d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d032      	beq.n	8008f6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d12b      	bne.n	8008f6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d11f      	bne.n	8008f6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	f043 0201 	orr.w	r2, r3, #1
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	659a      	str	r2, [r3, #88]	; 0x58
 8008f3a:	e018      	b.n	8008f6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d111      	bne.n	8008f6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	f043 0201 	orr.w	r2, r3, #1
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff fb1c 	bl	80085ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008f74:	e00e      	b.n	8008f94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7a:	f003 0310 	and.w	r3, r3, #16
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff fb26 	bl	80085d4 <HAL_ADC_ErrorCallback>
}
 8008f88:	e004      	b.n	8008f94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fb08 	bl	80085c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff faf8 	bl	80085d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <LL_ADC_IsEnabled>:
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <LL_ADC_IsEnabled+0x18>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <LL_ADC_IsEnabled+0x1a>
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <LL_ADC_REG_IsConversionOngoing>:
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b04      	cmp	r3, #4
 8009024:	d101      	bne.n	800902a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009038:	b590      	push	{r4, r7, lr}
 800903a:	b0a1      	sub	sp, #132	; 0x84
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009052:	2302      	movs	r3, #2
 8009054:	e093      	b.n	800917e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800905e:	2300      	movs	r3, #0
 8009060:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8009062:	2300      	movs	r3, #0
 8009064:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a47      	ldr	r2, [pc, #284]	; (8009188 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d102      	bne.n	8009076 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009070:	4b46      	ldr	r3, [pc, #280]	; (800918c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	e001      	b.n	800907a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10b      	bne.n	8009098 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009084:	f043 0220 	orr.w	r2, r3, #32
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e072      	b.n	800917e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4618      	mov	r0, r3
 800909c:	f7ff ffb9 	bl	8009012 <LL_ADC_REG_IsConversionOngoing>
 80090a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ffb3 	bl	8009012 <LL_ADC_REG_IsConversionOngoing>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d154      	bne.n	800915c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80090b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d151      	bne.n	800915c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090b8:	4b35      	ldr	r3, [pc, #212]	; (8009190 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80090ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d02c      	beq.n	800911e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	6859      	ldr	r1, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090d6:	035b      	lsls	r3, r3, #13
 80090d8:	430b      	orrs	r3, r1
 80090da:	431a      	orrs	r2, r3
 80090dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090e0:	4829      	ldr	r0, [pc, #164]	; (8009188 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80090e2:	f7ff ff83 	bl	8008fec <LL_ADC_IsEnabled>
 80090e6:	4604      	mov	r4, r0
 80090e8:	4828      	ldr	r0, [pc, #160]	; (800918c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80090ea:	f7ff ff7f 	bl	8008fec <LL_ADC_IsEnabled>
 80090ee:	4603      	mov	r3, r0
 80090f0:	431c      	orrs	r4, r3
 80090f2:	4828      	ldr	r0, [pc, #160]	; (8009194 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80090f4:	f7ff ff7a 	bl	8008fec <LL_ADC_IsEnabled>
 80090f8:	4603      	mov	r3, r0
 80090fa:	4323      	orrs	r3, r4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d137      	bne.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009108:	f023 030f 	bic.w	r3, r3, #15
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	6811      	ldr	r1, [r2, #0]
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	6892      	ldr	r2, [r2, #8]
 8009114:	430a      	orrs	r2, r1
 8009116:	431a      	orrs	r2, r3
 8009118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800911a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800911c:	e028      	b.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800911e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009128:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800912a:	4817      	ldr	r0, [pc, #92]	; (8009188 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800912c:	f7ff ff5e 	bl	8008fec <LL_ADC_IsEnabled>
 8009130:	4604      	mov	r4, r0
 8009132:	4816      	ldr	r0, [pc, #88]	; (800918c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009134:	f7ff ff5a 	bl	8008fec <LL_ADC_IsEnabled>
 8009138:	4603      	mov	r3, r0
 800913a:	431c      	orrs	r4, r3
 800913c:	4815      	ldr	r0, [pc, #84]	; (8009194 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800913e:	f7ff ff55 	bl	8008fec <LL_ADC_IsEnabled>
 8009142:	4603      	mov	r3, r0
 8009144:	4323      	orrs	r3, r4
 8009146:	2b00      	cmp	r3, #0
 8009148:	d112      	bne.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800914a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009152:	f023 030f 	bic.w	r3, r3, #15
 8009156:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009158:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800915a:	e009      	b.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009160:	f043 0220 	orr.w	r2, r3, #32
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800916e:	e000      	b.n	8009172 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800917a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800917e:	4618      	mov	r0, r3
 8009180:	3784      	adds	r7, #132	; 0x84
 8009182:	46bd      	mov	sp, r7
 8009184:	bd90      	pop	{r4, r7, pc}
 8009186:	bf00      	nop
 8009188:	50040000 	.word	0x50040000
 800918c:	50040100 	.word	0x50040100
 8009190:	50040300 	.word	0x50040300
 8009194:	50040200 	.word	0x50040200

08009198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091a8:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <__NVIC_SetPriorityGrouping+0x44>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091b4:	4013      	ands	r3, r2
 80091b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091ca:	4a04      	ldr	r2, [pc, #16]	; (80091dc <__NVIC_SetPriorityGrouping+0x44>)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	60d3      	str	r3, [r2, #12]
}
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	e000ed00 	.word	0xe000ed00

080091e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <__NVIC_GetPriorityGrouping+0x18>)
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	0a1b      	lsrs	r3, r3, #8
 80091ea:	f003 0307 	and.w	r3, r3, #7
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	e000ed00 	.word	0xe000ed00

080091fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800920a:	2b00      	cmp	r3, #0
 800920c:	db0b      	blt.n	8009226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	f003 021f 	and.w	r2, r3, #31
 8009214:	4907      	ldr	r1, [pc, #28]	; (8009234 <__NVIC_EnableIRQ+0x38>)
 8009216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	2001      	movs	r0, #1
 800921e:	fa00 f202 	lsl.w	r2, r0, r2
 8009222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	e000e100 	.word	0xe000e100

08009238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	6039      	str	r1, [r7, #0]
 8009242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009248:	2b00      	cmp	r3, #0
 800924a:	db0a      	blt.n	8009262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	b2da      	uxtb	r2, r3
 8009250:	490c      	ldr	r1, [pc, #48]	; (8009284 <__NVIC_SetPriority+0x4c>)
 8009252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009256:	0112      	lsls	r2, r2, #4
 8009258:	b2d2      	uxtb	r2, r2
 800925a:	440b      	add	r3, r1
 800925c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009260:	e00a      	b.n	8009278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	4908      	ldr	r1, [pc, #32]	; (8009288 <__NVIC_SetPriority+0x50>)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	3b04      	subs	r3, #4
 8009270:	0112      	lsls	r2, r2, #4
 8009272:	b2d2      	uxtb	r2, r2
 8009274:	440b      	add	r3, r1
 8009276:	761a      	strb	r2, [r3, #24]
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	e000e100 	.word	0xe000e100
 8009288:	e000ed00 	.word	0xe000ed00

0800928c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800928c:	b480      	push	{r7}
 800928e:	b089      	sub	sp, #36	; 0x24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f003 0307 	and.w	r3, r3, #7
 800929e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	f1c3 0307 	rsb	r3, r3, #7
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	bf28      	it	cs
 80092aa:	2304      	movcs	r3, #4
 80092ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3304      	adds	r3, #4
 80092b2:	2b06      	cmp	r3, #6
 80092b4:	d902      	bls.n	80092bc <NVIC_EncodePriority+0x30>
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	3b03      	subs	r3, #3
 80092ba:	e000      	b.n	80092be <NVIC_EncodePriority+0x32>
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ca:	43da      	mvns	r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	401a      	ands	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092d4:	f04f 31ff 	mov.w	r1, #4294967295
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	fa01 f303 	lsl.w	r3, r1, r3
 80092de:	43d9      	mvns	r1, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092e4:	4313      	orrs	r3, r2
         );
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3724      	adds	r7, #36	; 0x24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff ff4c 	bl	8009198 <__NVIC_SetPriorityGrouping>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800931a:	f7ff ff61 	bl	80091e0 <__NVIC_GetPriorityGrouping>
 800931e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	6978      	ldr	r0, [r7, #20]
 8009326:	f7ff ffb1 	bl	800928c <NVIC_EncodePriority>
 800932a:	4602      	mov	r2, r0
 800932c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff ff80 	bl	8009238 <__NVIC_SetPriority>
}
 8009338:	bf00      	nop
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800934a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff ff54 	bl	80091fc <__NVIC_EnableIRQ>
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e014      	b.n	8009398 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	791b      	ldrb	r3, [r3, #4]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	d105      	bne.n	8009384 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fd fcc0 	bl	8006d04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	795b      	ldrb	r3, [r3, #5]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_DAC_Start_DMA+0x1e>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e0ab      	b.n	8009516 <HAL_DAC_Start_DMA+0x176>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2202      	movs	r2, #2
 80093c8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d12f      	bne.n	8009430 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	4a52      	ldr	r2, [pc, #328]	; (8009520 <HAL_DAC_Start_DMA+0x180>)
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	4a51      	ldr	r2, [pc, #324]	; (8009524 <HAL_DAC_Start_DMA+0x184>)
 80093de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4a50      	ldr	r2, [pc, #320]	; (8009528 <HAL_DAC_Start_DMA+0x188>)
 80093e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	d013      	beq.n	8009426 <HAL_DAC_Start_DMA+0x86>
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	2b08      	cmp	r3, #8
 8009402:	d845      	bhi.n	8009490 <HAL_DAC_Start_DMA+0xf0>
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_DAC_Start_DMA+0x72>
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	2b04      	cmp	r3, #4
 800940e:	d005      	beq.n	800941c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009410:	e03e      	b.n	8009490 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3308      	adds	r3, #8
 8009418:	613b      	str	r3, [r7, #16]
        break;
 800941a:	e03c      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	330c      	adds	r3, #12
 8009422:	613b      	str	r3, [r7, #16]
        break;
 8009424:	e037      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3310      	adds	r3, #16
 800942c:	613b      	str	r3, [r7, #16]
        break;
 800942e:	e032      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	4a3d      	ldr	r2, [pc, #244]	; (800952c <HAL_DAC_Start_DMA+0x18c>)
 8009436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a3c      	ldr	r2, [pc, #240]	; (8009530 <HAL_DAC_Start_DMA+0x190>)
 800943e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	4a3b      	ldr	r2, [pc, #236]	; (8009534 <HAL_DAC_Start_DMA+0x194>)
 8009446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009456:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	2b08      	cmp	r3, #8
 800945c:	d013      	beq.n	8009486 <HAL_DAC_Start_DMA+0xe6>
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	2b08      	cmp	r3, #8
 8009462:	d817      	bhi.n	8009494 <HAL_DAC_Start_DMA+0xf4>
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <HAL_DAC_Start_DMA+0xd2>
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d005      	beq.n	800947c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009470:	e010      	b.n	8009494 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3314      	adds	r3, #20
 8009478:	613b      	str	r3, [r7, #16]
        break;
 800947a:	e00c      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3318      	adds	r3, #24
 8009482:	613b      	str	r3, [r7, #16]
        break;
 8009484:	e007      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	331c      	adds	r3, #28
 800948c:	613b      	str	r3, [r7, #16]
        break;
 800948e:	e002      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009490:	bf00      	nop
 8009492:	e000      	b.n	8009496 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009494:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d111      	bne.n	80094c0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6898      	ldr	r0, [r3, #8]
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	f000 fb27 	bl	8009b08 <HAL_DMA_Start_IT>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]
 80094be:	e010      	b.n	80094e2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80094ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	68d8      	ldr	r0, [r3, #12]
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	f000 fb15 	bl	8009b08 <HAL_DMA_Start_IT>
 80094de:	4603      	mov	r3, r0
 80094e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10c      	bne.n	8009508 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	2201      	movs	r2, #1
 80094fc:	409a      	lsls	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	e005      	b.n	8009514 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f043 0204 	orr.w	r2, r3, #4
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009514:	7dfb      	ldrb	r3, [r7, #23]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	08009871 	.word	0x08009871
 8009524:	08009893 	.word	0x08009893
 8009528:	080098af 	.word	0x080098af
 800952c:	0800992d 	.word	0x0800992d
 8009530:	0800994f 	.word	0x0800994f
 8009534:	0800996b 	.word	0x0800996b

08009538 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800954a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954e:	d120      	bne.n	8009592 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800955a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800955e:	d118      	bne.n	8009592 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f043 0201 	orr.w	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800957a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800958a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f84b 	bl	8009628 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800959c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a0:	d120      	bne.n	80095e4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b0:	d118      	bne.n	80095e4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2204      	movs	r2, #4
 80095b6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f043 0202 	orr.w	r2, r3, #2
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80095cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80095dc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f99a 	bl	8009918 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	795b      	ldrb	r3, [r3, #5]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d101      	bne.n	8009658 <HAL_DAC_ConfigChannel+0x1c>
 8009654:	2302      	movs	r3, #2
 8009656:	e107      	b.n	8009868 <HAL_DAC_ConfigChannel+0x22c>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2201      	movs	r2, #1
 800965c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2202      	movs	r2, #2
 8009662:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b04      	cmp	r3, #4
 800966a:	d174      	bne.n	8009756 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800966c:	f7fe fabe 	bl	8007bec <HAL_GetTick>
 8009670:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d134      	bne.n	80096e2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009678:	e011      	b.n	800969e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800967a:	f7fe fab7 	bl	8007bec <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	d90a      	bls.n	800969e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	f043 0208 	orr.w	r2, r3, #8
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2203      	movs	r2, #3
 8009698:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e0e4      	b.n	8009868 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80096ac:	2001      	movs	r0, #1
 80096ae:	f7fe faa9 	bl	8007c04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	6992      	ldr	r2, [r2, #24]
 80096ba:	641a      	str	r2, [r3, #64]	; 0x40
 80096bc:	e01e      	b.n	80096fc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80096be:	f7fe fa95 	bl	8007bec <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d90a      	bls.n	80096e2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f043 0208 	orr.w	r2, r3, #8
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2203      	movs	r2, #3
 80096dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e0c2      	b.n	8009868 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dbe8      	blt.n	80096be <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80096ec:	2001      	movs	r0, #1
 80096ee:	f7fe fa89 	bl	8007c04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	6992      	ldr	r2, [r2, #24]
 80096fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800970c:	fa01 f303 	lsl.w	r3, r1, r3
 8009710:	43db      	mvns	r3, r3
 8009712:	ea02 0103 	and.w	r1, r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	69da      	ldr	r2, [r3, #28]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f003 0310 	and.w	r3, r3, #16
 8009720:	409a      	lsls	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	21ff      	movs	r1, #255	; 0xff
 8009738:	fa01 f303 	lsl.w	r3, r1, r3
 800973c:	43db      	mvns	r3, r3
 800973e:	ea02 0103 	and.w	r1, r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6a1a      	ldr	r2, [r3, #32]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	409a      	lsls	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d11d      	bne.n	800979a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	221f      	movs	r2, #31
 800976e:	fa02 f303 	lsl.w	r3, r2, r3
 8009772:	43db      	mvns	r3, r3
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	4013      	ands	r3, r2
 8009778:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	fa02 f303 	lsl.w	r3, r2, r3
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	4313      	orrs	r3, r2
 8009790:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f003 0310 	and.w	r3, r3, #16
 80097a8:	2207      	movs	r2, #7
 80097aa:	fa02 f303 	lsl.w	r3, r2, r3
 80097ae:	43db      	mvns	r3, r3
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	4013      	ands	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	431a      	orrs	r2, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f003 0310 	and.w	r3, r3, #16
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	fa02 f303 	lsl.w	r3, r2, r3
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6819      	ldr	r1, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43da      	mvns	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	400a      	ands	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	43db      	mvns	r3, r3
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	4013      	ands	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f003 0310 	and.w	r3, r3, #16
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	fa02 f303 	lsl.w	r3, r2, r3
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	4313      	orrs	r3, r2
 8009834:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	22c0      	movs	r2, #192	; 0xc0
 800984c:	fa02 f303 	lsl.w	r3, r2, r3
 8009850:	43da      	mvns	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	400a      	ands	r2, r1
 8009858:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff feb4 	bl	80095ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	711a      	strb	r2, [r3, #4]
}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff fead 	bl	8009600 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f043 0204 	orr.w	r2, r3, #4
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff fea3 	bl	8009614 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	711a      	strb	r2, [r3, #4]
}
 80098d4:	bf00      	nop
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009938:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff ffce 	bl	80098dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	711a      	strb	r2, [r3, #4]
}
 8009946:	bf00      	nop
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7ff ffc7 	bl	80098f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f043 0204 	orr.w	r2, r3, #4
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff ffbd 	bl	8009904 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2201      	movs	r2, #1
 800998e:	711a      	strb	r2, [r3, #4]
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e098      	b.n	8009adc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	4b4d      	ldr	r3, [pc, #308]	; (8009ae8 <HAL_DMA_Init+0x150>)
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d80f      	bhi.n	80099d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	4b4b      	ldr	r3, [pc, #300]	; (8009aec <HAL_DMA_Init+0x154>)
 80099be:	4413      	add	r3, r2
 80099c0:	4a4b      	ldr	r2, [pc, #300]	; (8009af0 <HAL_DMA_Init+0x158>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	091b      	lsrs	r3, r3, #4
 80099c8:	009a      	lsls	r2, r3, #2
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a48      	ldr	r2, [pc, #288]	; (8009af4 <HAL_DMA_Init+0x15c>)
 80099d2:	641a      	str	r2, [r3, #64]	; 0x40
 80099d4:	e00e      	b.n	80099f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	4b46      	ldr	r3, [pc, #280]	; (8009af8 <HAL_DMA_Init+0x160>)
 80099de:	4413      	add	r3, r2
 80099e0:	4a43      	ldr	r2, [pc, #268]	; (8009af0 <HAL_DMA_Init+0x158>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	091b      	lsrs	r3, r3, #4
 80099e8:	009a      	lsls	r2, r3, #2
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a42      	ldr	r2, [pc, #264]	; (8009afc <HAL_DMA_Init+0x164>)
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a4e:	d039      	beq.n	8009ac4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	4a27      	ldr	r2, [pc, #156]	; (8009af4 <HAL_DMA_Init+0x15c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d11a      	bne.n	8009a90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a5a:	4b29      	ldr	r3, [pc, #164]	; (8009b00 <HAL_DMA_Init+0x168>)
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	f003 031c 	and.w	r3, r3, #28
 8009a66:	210f      	movs	r1, #15
 8009a68:	fa01 f303 	lsl.w	r3, r1, r3
 8009a6c:	43db      	mvns	r3, r3
 8009a6e:	4924      	ldr	r1, [pc, #144]	; (8009b00 <HAL_DMA_Init+0x168>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009a74:	4b22      	ldr	r3, [pc, #136]	; (8009b00 <HAL_DMA_Init+0x168>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6859      	ldr	r1, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a80:	f003 031c 	and.w	r3, r3, #28
 8009a84:	fa01 f303 	lsl.w	r3, r1, r3
 8009a88:	491d      	ldr	r1, [pc, #116]	; (8009b00 <HAL_DMA_Init+0x168>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	600b      	str	r3, [r1, #0]
 8009a8e:	e019      	b.n	8009ac4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a90:	4b1c      	ldr	r3, [pc, #112]	; (8009b04 <HAL_DMA_Init+0x16c>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a98:	f003 031c 	and.w	r3, r3, #28
 8009a9c:	210f      	movs	r1, #15
 8009a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	4917      	ldr	r1, [pc, #92]	; (8009b04 <HAL_DMA_Init+0x16c>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009aaa:	4b16      	ldr	r3, [pc, #88]	; (8009b04 <HAL_DMA_Init+0x16c>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6859      	ldr	r1, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab6:	f003 031c 	and.w	r3, r3, #28
 8009aba:	fa01 f303 	lsl.w	r3, r1, r3
 8009abe:	4911      	ldr	r1, [pc, #68]	; (8009b04 <HAL_DMA_Init+0x16c>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	40020407 	.word	0x40020407
 8009aec:	bffdfff8 	.word	0xbffdfff8
 8009af0:	cccccccd 	.word	0xcccccccd
 8009af4:	40020000 	.word	0x40020000
 8009af8:	bffdfbf8 	.word	0xbffdfbf8
 8009afc:	40020400 	.word	0x40020400
 8009b00:	400200a8 	.word	0x400200a8
 8009b04:	400204a8 	.word	0x400204a8

08009b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d101      	bne.n	8009b28 <HAL_DMA_Start_IT+0x20>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e04b      	b.n	8009bc0 <HAL_DMA_Start_IT+0xb8>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d13a      	bne.n	8009bb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f022 0201 	bic.w	r2, r2, #1
 8009b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	68b9      	ldr	r1, [r7, #8]
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 f95f 	bl	8009e24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 020e 	orr.w	r2, r2, #14
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e00f      	b.n	8009ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0204 	bic.w	r2, r2, #4
 8009b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 020a 	orr.w	r2, r2, #10
 8009b9e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f042 0201 	orr.w	r2, r2, #1
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e005      	b.n	8009bbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d008      	beq.n	8009bf2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2204      	movs	r2, #4
 8009be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e022      	b.n	8009c38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 020e 	bic.w	r2, r2, #14
 8009c00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c16:	f003 021c 	and.w	r2, r3, #28
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	2101      	movs	r1, #1
 8009c20:	fa01 f202 	lsl.w	r2, r1, r2
 8009c24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d005      	beq.n	8009c68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2204      	movs	r2, #4
 8009c60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	73fb      	strb	r3, [r7, #15]
 8009c66:	e029      	b.n	8009cbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 020e 	bic.w	r2, r2, #14
 8009c76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 0201 	bic.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8c:	f003 021c 	and.w	r2, r3, #28
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c94:	2101      	movs	r1, #1
 8009c96:	fa01 f202 	lsl.w	r2, r1, r2
 8009c9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4798      	blx	r3
    }
  }
  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce2:	f003 031c 	and.w	r3, r3, #28
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	409a      	lsls	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d026      	beq.n	8009d40 <HAL_DMA_IRQHandler+0x7a>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d021      	beq.n	8009d40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0204 	bic.w	r2, r2, #4
 8009d18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1e:	f003 021c 	and.w	r2, r3, #28
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	2104      	movs	r1, #4
 8009d28:	fa01 f202 	lsl.w	r2, r1, r2
 8009d2c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d071      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009d3e:	e06c      	b.n	8009e1a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d44:	f003 031c 	and.w	r3, r3, #28
 8009d48:	2202      	movs	r2, #2
 8009d4a:	409a      	lsls	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d02e      	beq.n	8009db2 <HAL_DMA_IRQHandler+0xec>
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d029      	beq.n	8009db2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 020a 	bic.w	r2, r2, #10
 8009d7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d88:	f003 021c 	and.w	r2, r3, #28
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d90:	2102      	movs	r1, #2
 8009d92:	fa01 f202 	lsl.w	r2, r1, r2
 8009d96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d038      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009db0:	e033      	b.n	8009e1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db6:	f003 031c 	and.w	r3, r3, #28
 8009dba:	2208      	movs	r2, #8
 8009dbc:	409a      	lsls	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d02a      	beq.n	8009e1c <HAL_DMA_IRQHandler+0x156>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f003 0308 	and.w	r3, r3, #8
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d025      	beq.n	8009e1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 020e 	bic.w	r2, r2, #14
 8009dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de4:	f003 021c 	and.w	r2, r3, #28
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dec:	2101      	movs	r1, #1
 8009dee:	fa01 f202 	lsl.w	r2, r1, r2
 8009df2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
}
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e36:	f003 021c 	and.w	r2, r3, #28
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	2101      	movs	r1, #1
 8009e40:	fa01 f202 	lsl.w	r2, r1, r2
 8009e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d108      	bne.n	8009e68 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e66:	e007      	b.n	8009e78 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	60da      	str	r2, [r3, #12]
}
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b087      	sub	sp, #28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e92:	e166      	b.n	800a162 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	2101      	movs	r1, #1
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8158 	beq.w	800a15c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d00b      	beq.n	8009ecc <HAL_GPIO_Init+0x48>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d007      	beq.n	8009ecc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ec0:	2b11      	cmp	r3, #17
 8009ec2:	d003      	beq.n	8009ecc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b12      	cmp	r3, #18
 8009eca:	d130      	bne.n	8009f2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	2203      	movs	r2, #3
 8009ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8009edc:	43db      	mvns	r3, r3
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f02:	2201      	movs	r2, #1
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	43db      	mvns	r3, r3
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	091b      	lsrs	r3, r3, #4
 8009f18:	f003 0201 	and.w	r2, r3, #1
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	2203      	movs	r2, #3
 8009f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4013      	ands	r3, r2
 8009f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d003      	beq.n	8009f6e <HAL_GPIO_Init+0xea>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	2b12      	cmp	r3, #18
 8009f6c:	d123      	bne.n	8009fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	08da      	lsrs	r2, r3, #3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3208      	adds	r2, #8
 8009f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	220f      	movs	r2, #15
 8009f86:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4013      	ands	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	08da      	lsrs	r2, r3, #3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3208      	adds	r2, #8
 8009fb0:	6939      	ldr	r1, [r7, #16]
 8009fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f003 0203 	and.w	r2, r3, #3
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 80b2 	beq.w	800a15c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ff8:	4b61      	ldr	r3, [pc, #388]	; (800a180 <HAL_GPIO_Init+0x2fc>)
 8009ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ffc:	4a60      	ldr	r2, [pc, #384]	; (800a180 <HAL_GPIO_Init+0x2fc>)
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	6613      	str	r3, [r2, #96]	; 0x60
 800a004:	4b5e      	ldr	r3, [pc, #376]	; (800a180 <HAL_GPIO_Init+0x2fc>)
 800a006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	60bb      	str	r3, [r7, #8]
 800a00e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a010:	4a5c      	ldr	r2, [pc, #368]	; (800a184 <HAL_GPIO_Init+0x300>)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	089b      	lsrs	r3, r3, #2
 800a016:	3302      	adds	r3, #2
 800a018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a01c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	220f      	movs	r2, #15
 800a028:	fa02 f303 	lsl.w	r3, r2, r3
 800a02c:	43db      	mvns	r3, r3
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	4013      	ands	r3, r2
 800a032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a03a:	d02b      	beq.n	800a094 <HAL_GPIO_Init+0x210>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a52      	ldr	r2, [pc, #328]	; (800a188 <HAL_GPIO_Init+0x304>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d025      	beq.n	800a090 <HAL_GPIO_Init+0x20c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a51      	ldr	r2, [pc, #324]	; (800a18c <HAL_GPIO_Init+0x308>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d01f      	beq.n	800a08c <HAL_GPIO_Init+0x208>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a50      	ldr	r2, [pc, #320]	; (800a190 <HAL_GPIO_Init+0x30c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d019      	beq.n	800a088 <HAL_GPIO_Init+0x204>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a4f      	ldr	r2, [pc, #316]	; (800a194 <HAL_GPIO_Init+0x310>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d013      	beq.n	800a084 <HAL_GPIO_Init+0x200>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a4e      	ldr	r2, [pc, #312]	; (800a198 <HAL_GPIO_Init+0x314>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d00d      	beq.n	800a080 <HAL_GPIO_Init+0x1fc>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a4d      	ldr	r2, [pc, #308]	; (800a19c <HAL_GPIO_Init+0x318>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d007      	beq.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a4c      	ldr	r2, [pc, #304]	; (800a1a0 <HAL_GPIO_Init+0x31c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d101      	bne.n	800a078 <HAL_GPIO_Init+0x1f4>
 800a074:	2307      	movs	r3, #7
 800a076:	e00e      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a078:	2308      	movs	r3, #8
 800a07a:	e00c      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a07c:	2306      	movs	r3, #6
 800a07e:	e00a      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a080:	2305      	movs	r3, #5
 800a082:	e008      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a084:	2304      	movs	r3, #4
 800a086:	e006      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a088:	2303      	movs	r3, #3
 800a08a:	e004      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e002      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <HAL_GPIO_Init+0x212>
 800a094:	2300      	movs	r3, #0
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	f002 0203 	and.w	r2, r2, #3
 800a09c:	0092      	lsls	r2, r2, #2
 800a09e:	4093      	lsls	r3, r2
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a0a6:	4937      	ldr	r1, [pc, #220]	; (800a184 <HAL_GPIO_Init+0x300>)
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	089b      	lsrs	r3, r3, #2
 800a0ac:	3302      	adds	r3, #2
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a0b4:	4b3b      	ldr	r3, [pc, #236]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a0d8:	4a32      	ldr	r2, [pc, #200]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a0de:	4b31      	ldr	r3, [pc, #196]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	43db      	mvns	r3, r3
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a102:	4a28      	ldr	r2, [pc, #160]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a108:	4b26      	ldr	r3, [pc, #152]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	43db      	mvns	r3, r3
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	4013      	ands	r3, r2
 800a116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a12c:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	43db      	mvns	r3, r3
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	4013      	ands	r3, r2
 800a140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a156:	4a13      	ldr	r2, [pc, #76]	; (800a1a4 <HAL_GPIO_Init+0x320>)
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	3301      	adds	r3, #1
 800a160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	fa22 f303 	lsr.w	r3, r2, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f47f ae91 	bne.w	8009e94 <HAL_GPIO_Init+0x10>
  }
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	40021000 	.word	0x40021000
 800a184:	40010000 	.word	0x40010000
 800a188:	48000400 	.word	0x48000400
 800a18c:	48000800 	.word	0x48000800
 800a190:	48000c00 	.word	0x48000c00
 800a194:	48001000 	.word	0x48001000
 800a198:	48001400 	.word	0x48001400
 800a19c:	48001800 	.word	0x48001800
 800a1a0:	48001c00 	.word	0x48001c00
 800a1a4:	40010400 	.word	0x40010400

0800a1a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691a      	ldr	r2, [r3, #16]
 800a1b8:	887b      	ldrh	r3, [r7, #2]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e001      	b.n	800a1ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	807b      	strh	r3, [r7, #2]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a1e8:	787b      	ldrb	r3, [r7, #1]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a1ee:	887a      	ldrh	r2, [r7, #2]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a1f4:	e002      	b.n	800a1fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a1f6:	887a      	ldrh	r2, [r7, #2]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a212:	4b08      	ldr	r3, [pc, #32]	; (800a234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	88fb      	ldrh	r3, [r7, #6]
 800a218:	4013      	ands	r3, r2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a21e:	4a05      	ldr	r2, [pc, #20]	; (800a234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f806 	bl	800a238 <HAL_GPIO_EXTI_Callback>
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	40010400 	.word	0x40010400

0800a238 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a242:	bf00      	nop
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e081      	b.n	800a364 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7fc fdb9 	bl	8006dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2224      	movs	r2, #36	; 0x24
 800a27e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f022 0201 	bic.w	r2, r2, #1
 800a290:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a29e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d107      	bne.n	800a2c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2c4:	609a      	str	r2, [r3, #8]
 800a2c6:	e006      	b.n	800a2d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a2d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d104      	bne.n	800a2e8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	6812      	ldr	r2, [r2, #0]
 800a2f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a30a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	ea42 0103 	orr.w	r1, r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	021a      	lsls	r2, r3, #8
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69d9      	ldr	r1, [r3, #28]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1a      	ldr	r2, [r3, #32]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0201 	orr.w	r2, r2, #1
 800a344:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af02      	add	r7, sp, #8
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	461a      	mov	r2, r3
 800a378:	460b      	mov	r3, r1
 800a37a:	817b      	strh	r3, [r7, #10]
 800a37c:	4613      	mov	r3, r2
 800a37e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b20      	cmp	r3, #32
 800a38a:	f040 80da 	bne.w	800a542 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a394:	2b01      	cmp	r3, #1
 800a396:	d101      	bne.n	800a39c <HAL_I2C_Master_Transmit+0x30>
 800a398:	2302      	movs	r3, #2
 800a39a:	e0d3      	b.n	800a544 <HAL_I2C_Master_Transmit+0x1d8>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a3a4:	f7fd fc22 	bl	8007bec <HAL_GetTick>
 800a3a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	2319      	movs	r3, #25
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 f9e6 	bl	800a788 <I2C_WaitOnFlagUntilTimeout>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0be      	b.n	800a544 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2221      	movs	r2, #33	; 0x21
 800a3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2210      	movs	r2, #16
 800a3d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	893a      	ldrh	r2, [r7, #8]
 800a3e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2bff      	cmp	r3, #255	; 0xff
 800a3f6:	d90e      	bls.n	800a416 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	22ff      	movs	r2, #255	; 0xff
 800a3fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a402:	b2da      	uxtb	r2, r3
 800a404:	8979      	ldrh	r1, [r7, #10]
 800a406:	4b51      	ldr	r3, [pc, #324]	; (800a54c <HAL_I2C_Master_Transmit+0x1e0>)
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fb48 	bl	800aaa4 <I2C_TransferConfig>
 800a414:	e06c      	b.n	800a4f0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a424:	b2da      	uxtb	r2, r3
 800a426:	8979      	ldrh	r1, [r7, #10]
 800a428:	4b48      	ldr	r3, [pc, #288]	; (800a54c <HAL_I2C_Master_Transmit+0x1e0>)
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fb37 	bl	800aaa4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a436:	e05b      	b.n	800a4f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	6a39      	ldr	r1, [r7, #32]
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 f9e3 	bl	800a808 <I2C_WaitOnTXISFlagUntilTimeout>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e07b      	b.n	800a544 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	781a      	ldrb	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b01      	subs	r3, #1
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a474:	3b01      	subs	r3, #1
 800a476:	b29a      	uxth	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a480:	b29b      	uxth	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d034      	beq.n	800a4f0 <HAL_I2C_Master_Transmit+0x184>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d130      	bne.n	800a4f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	2200      	movs	r2, #0
 800a496:	2180      	movs	r1, #128	; 0x80
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f975 	bl	800a788 <I2C_WaitOnFlagUntilTimeout>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e04d      	b.n	800a544 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2bff      	cmp	r3, #255	; 0xff
 800a4b0:	d90e      	bls.n	800a4d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	22ff      	movs	r2, #255	; 0xff
 800a4b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	8979      	ldrh	r1, [r7, #10]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 faeb 	bl	800aaa4 <I2C_TransferConfig>
 800a4ce:	e00f      	b.n	800a4f0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	8979      	ldrh	r1, [r7, #10]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fada 	bl	800aaa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d19e      	bne.n	800a438 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	6a39      	ldr	r1, [r7, #32]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 f9c2 	bl	800a888 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e01a      	b.n	800a544 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2220      	movs	r2, #32
 800a514:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6859      	ldr	r1, [r3, #4]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <HAL_I2C_Master_Transmit+0x1e4>)
 800a522:	400b      	ands	r3, r1
 800a524:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2220      	movs	r2, #32
 800a52a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	e000      	b.n	800a544 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a542:	2302      	movs	r3, #2
  }
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	80002000 	.word	0x80002000
 800a550:	fe00e800 	.word	0xfe00e800

0800a554 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	461a      	mov	r2, r3
 800a560:	460b      	mov	r3, r1
 800a562:	817b      	strh	r3, [r7, #10]
 800a564:	4613      	mov	r3, r2
 800a566:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b20      	cmp	r3, #32
 800a572:	f040 80db 	bne.w	800a72c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d101      	bne.n	800a584 <HAL_I2C_Master_Receive+0x30>
 800a580:	2302      	movs	r3, #2
 800a582:	e0d4      	b.n	800a72e <HAL_I2C_Master_Receive+0x1da>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a58c:	f7fd fb2e 	bl	8007bec <HAL_GetTick>
 800a590:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	2319      	movs	r3, #25
 800a598:	2201      	movs	r2, #1
 800a59a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 f8f2 	bl	800a788 <I2C_WaitOnFlagUntilTimeout>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e0bf      	b.n	800a72e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2222      	movs	r2, #34	; 0x22
 800a5b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2210      	movs	r2, #16
 800a5ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	893a      	ldrh	r2, [r7, #8]
 800a5ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	2bff      	cmp	r3, #255	; 0xff
 800a5de:	d90e      	bls.n	800a5fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	22ff      	movs	r2, #255	; 0xff
 800a5e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	8979      	ldrh	r1, [r7, #10]
 800a5ee:	4b52      	ldr	r3, [pc, #328]	; (800a738 <HAL_I2C_Master_Receive+0x1e4>)
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fa54 	bl	800aaa4 <I2C_TransferConfig>
 800a5fc:	e06d      	b.n	800a6da <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a602:	b29a      	uxth	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	8979      	ldrh	r1, [r7, #10]
 800a610:	4b49      	ldr	r3, [pc, #292]	; (800a738 <HAL_I2C_Master_Receive+0x1e4>)
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 fa43 	bl	800aaa4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a61e:	e05c      	b.n	800a6da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	6a39      	ldr	r1, [r7, #32]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f96b 	bl	800a900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e07c      	b.n	800a72e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a650:	3b01      	subs	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	b29a      	uxth	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d034      	beq.n	800a6da <HAL_I2C_Master_Receive+0x186>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a674:	2b00      	cmp	r3, #0
 800a676:	d130      	bne.n	800a6da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	2200      	movs	r2, #0
 800a680:	2180      	movs	r1, #128	; 0x80
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f880 	bl	800a788 <I2C_WaitOnFlagUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e04d      	b.n	800a72e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a696:	b29b      	uxth	r3, r3
 800a698:	2bff      	cmp	r3, #255	; 0xff
 800a69a:	d90e      	bls.n	800a6ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	22ff      	movs	r2, #255	; 0xff
 800a6a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	8979      	ldrh	r1, [r7, #10]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f9f6 	bl	800aaa4 <I2C_TransferConfig>
 800a6b8:	e00f      	b.n	800a6da <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	8979      	ldrh	r1, [r7, #10]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 f9e5 	bl	800aaa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d19d      	bne.n	800a620 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	6a39      	ldr	r1, [r7, #32]
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f8cd 	bl	800a888 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e01a      	b.n	800a72e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <HAL_I2C_Master_Receive+0x1e8>)
 800a70c:	400b      	ands	r3, r1
 800a70e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2220      	movs	r2, #32
 800a714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	e000      	b.n	800a72e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a72c:	2302      	movs	r3, #2
  }
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	80002400 	.word	0x80002400
 800a73c:	fe00e800 	.word	0xfe00e800

0800a740 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b02      	cmp	r3, #2
 800a754:	d103      	bne.n	800a75e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d007      	beq.n	800a77c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f042 0201 	orr.w	r2, r2, #1
 800a77a:	619a      	str	r2, [r3, #24]
  }
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	4613      	mov	r3, r2
 800a796:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a798:	e022      	b.n	800a7e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a0:	d01e      	beq.n	800a7e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a2:	f7fd fa23 	bl	8007bec <HAL_GetTick>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d302      	bcc.n	800a7b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d113      	bne.n	800a7e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7bc:	f043 0220 	orr.w	r2, r3, #32
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e00f      	b.n	800a800 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	699a      	ldr	r2, [r3, #24]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	bf0c      	ite	eq
 800a7f0:	2301      	moveq	r3, #1
 800a7f2:	2300      	movne	r3, #0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d0cd      	beq.n	800a79a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a814:	e02c      	b.n	800a870 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 f8dc 	bl	800a9d8 <I2C_IsAcknowledgeFailed>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e02a      	b.n	800a880 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a830:	d01e      	beq.n	800a870 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a832:	f7fd f9db 	bl	8007bec <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d302      	bcc.n	800a848 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d113      	bne.n	800a870 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84c:	f043 0220 	orr.w	r2, r3, #32
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2220      	movs	r2, #32
 800a858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e007      	b.n	800a880 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d1cb      	bne.n	800a816 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a894:	e028      	b.n	800a8e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f000 f89c 	bl	800a9d8 <I2C_IsAcknowledgeFailed>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e026      	b.n	800a8f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8aa:	f7fd f99f 	bl	8007bec <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d302      	bcc.n	800a8c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d113      	bne.n	800a8e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c4:	f043 0220 	orr.w	r2, r3, #32
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e007      	b.n	800a8f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	f003 0320 	and.w	r3, r3, #32
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	d1cf      	bne.n	800a896 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a90c:	e055      	b.n	800a9ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	68b9      	ldr	r1, [r7, #8]
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 f860 	bl	800a9d8 <I2C_IsAcknowledgeFailed>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e053      	b.n	800a9ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d129      	bne.n	800a984 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d105      	bne.n	800a94a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	e03f      	b.n	800a9ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2220      	movs	r2, #32
 800a950:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6859      	ldr	r1, [r3, #4]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b1d      	ldr	r3, [pc, #116]	; (800a9d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a95e:	400b      	ands	r3, r1
 800a960:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e022      	b.n	800a9ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a984:	f7fd f932 	bl	8007bec <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	429a      	cmp	r2, r3
 800a992:	d302      	bcc.n	800a99a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10f      	bne.n	800a9ba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99e:	f043 0220 	orr.w	r2, r3, #32
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e007      	b.n	800a9ca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d1a2      	bne.n	800a90e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	fe00e800 	.word	0xfe00e800

0800a9d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	f003 0310 	and.w	r3, r3, #16
 800a9ee:	2b10      	cmp	r3, #16
 800a9f0:	d151      	bne.n	800aa96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9f2:	e022      	b.n	800aa3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fa:	d01e      	beq.n	800aa3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9fc:	f7fd f8f6 	bl	8007bec <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d302      	bcc.n	800aa12 <I2C_IsAcknowledgeFailed+0x3a>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d113      	bne.n	800aa3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa16:	f043 0220 	orr.w	r2, r3, #32
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e02e      	b.n	800aa98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	d1d5      	bne.n	800a9f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2210      	movs	r2, #16
 800aa4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2220      	movs	r2, #32
 800aa56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f7ff fe71 	bl	800a740 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6859      	ldr	r1, [r3, #4]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa6a:	400b      	ands	r3, r1
 800aa6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa72:	f043 0204 	orr.w	r2, r3, #4
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e000      	b.n	800aa98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	fe00e800 	.word	0xfe00e800

0800aaa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	607b      	str	r3, [r7, #4]
 800aaae:	460b      	mov	r3, r1
 800aab0:	817b      	strh	r3, [r7, #10]
 800aab2:	4613      	mov	r3, r2
 800aab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	0d5b      	lsrs	r3, r3, #21
 800aac0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aac4:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <I2C_TransferConfig+0x58>)
 800aac6:	430b      	orrs	r3, r1
 800aac8:	43db      	mvns	r3, r3
 800aaca:	ea02 0103 	and.w	r1, r2, r3
 800aace:	897b      	ldrh	r3, [r7, #10]
 800aad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aad4:	7a7b      	ldrb	r3, [r7, #9]
 800aad6:	041b      	lsls	r3, r3, #16
 800aad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aadc:	431a      	orrs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	431a      	orrs	r2, r3
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	03ff63ff 	.word	0x03ff63ff

0800ab00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d138      	bne.n	800ab88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ab20:	2302      	movs	r3, #2
 800ab22:	e032      	b.n	800ab8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2224      	movs	r2, #36	; 0x24
 800ab30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f022 0201 	bic.w	r2, r2, #1
 800ab42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e000      	b.n	800ab8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab88:	2302      	movs	r3, #2
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b20      	cmp	r3, #32
 800abaa:	d139      	bne.n	800ac20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d101      	bne.n	800abba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e033      	b.n	800ac22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2224      	movs	r2, #36	; 0x24
 800abc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0201 	bic.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800abe8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f042 0201 	orr.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	e000      	b.n	800ac22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ac20:	2302      	movs	r3, #2
  }
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac30:	b08f      	sub	sp, #60	; 0x3c
 800ac32:	af0a      	add	r7, sp, #40	; 0x28
 800ac34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e116      	b.n	800ae6e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d106      	bne.n	800ac60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f00e fd5c 	bl	8019718 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2203      	movs	r2, #3
 800ac64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f006 f889 	bl	8010d96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	603b      	str	r3, [r7, #0]
 800ac8a:	687e      	ldr	r6, [r7, #4]
 800ac8c:	466d      	mov	r5, sp
 800ac8e:	f106 0410 	add.w	r4, r6, #16
 800ac92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ac9e:	e885 0003 	stmia.w	r5, {r0, r1}
 800aca2:	1d33      	adds	r3, r6, #4
 800aca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aca6:	6838      	ldr	r0, [r7, #0]
 800aca8:	f005 ff9b 	bl	8010be2 <USB_CoreInit>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e0d7      	b.n	800ae6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2100      	movs	r1, #0
 800acc4:	4618      	mov	r0, r3
 800acc6:	f006 f877 	bl	8010db8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acca:	2300      	movs	r3, #0
 800accc:	73fb      	strb	r3, [r7, #15]
 800acce:	e04a      	b.n	800ad66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800acd0:	7bfa      	ldrb	r2, [r7, #15]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	333d      	adds	r3, #61	; 0x3d
 800ace0:	2201      	movs	r2, #1
 800ace2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ace4:	7bfa      	ldrb	r2, [r7, #15]
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	4613      	mov	r3, r2
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	440b      	add	r3, r1
 800acf2:	333c      	adds	r3, #60	; 0x3c
 800acf4:	7bfa      	ldrb	r2, [r7, #15]
 800acf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	b298      	uxth	r0, r3
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4613      	mov	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	3342      	adds	r3, #66	; 0x42
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad10:	7bfa      	ldrb	r2, [r7, #15]
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	4613      	mov	r3, r2
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	333f      	adds	r3, #63	; 0x3f
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad24:	7bfa      	ldrb	r2, [r7, #15]
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	3344      	adds	r3, #68	; 0x44
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad38:	7bfa      	ldrb	r2, [r7, #15]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	1a9b      	subs	r3, r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	3348      	adds	r3, #72	; 0x48
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad4c:	7bfa      	ldrb	r2, [r7, #15]
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	4613      	mov	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	440b      	add	r3, r1
 800ad5a:	3350      	adds	r3, #80	; 0x50
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	3301      	adds	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
 800ad66:	7bfa      	ldrb	r2, [r7, #15]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d3af      	bcc.n	800acd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad70:	2300      	movs	r3, #0
 800ad72:	73fb      	strb	r3, [r7, #15]
 800ad74:	e044      	b.n	800ae00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad76:	7bfa      	ldrb	r2, [r7, #15]
 800ad78:	6879      	ldr	r1, [r7, #4]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	00db      	lsls	r3, r3, #3
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	440b      	add	r3, r1
 800ad84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ad88:	2200      	movs	r2, #0
 800ad8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad8c:	7bfa      	ldrb	r2, [r7, #15]
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	4613      	mov	r3, r2
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	1a9b      	subs	r3, r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ad9e:	7bfa      	ldrb	r2, [r7, #15]
 800ada0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ada2:	7bfa      	ldrb	r2, [r7, #15]
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	4613      	mov	r3, r2
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	1a9b      	subs	r3, r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	440b      	add	r3, r1
 800adb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800adb4:	2200      	movs	r2, #0
 800adb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800adb8:	7bfa      	ldrb	r2, [r7, #15]
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	4613      	mov	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	440b      	add	r3, r1
 800adc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800adca:	2200      	movs	r2, #0
 800adcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800adce:	7bfa      	ldrb	r2, [r7, #15]
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	1a9b      	subs	r3, r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ade4:	7bfa      	ldrb	r2, [r7, #15]
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	4613      	mov	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	440b      	add	r3, r1
 800adf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800adf6:	2200      	movs	r2, #0
 800adf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	3301      	adds	r3, #1
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	7bfa      	ldrb	r2, [r7, #15]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d3b5      	bcc.n	800ad76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	687e      	ldr	r6, [r7, #4]
 800ae12:	466d      	mov	r5, sp
 800ae14:	f106 0410 	add.w	r4, r6, #16
 800ae18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae20:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae24:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae28:	1d33      	adds	r3, r6, #4
 800ae2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae2c:	6838      	ldr	r0, [r7, #0]
 800ae2e:	f005 ffed 	bl	8010e0c <USB_DevInit>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d005      	beq.n	800ae44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e014      	b.n	800ae6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d102      	bne.n	800ae62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 ff8f 	bl	800bd80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f006 ff6f 	bl	8011d4a <USB_DevDisconnect>

  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_PCD_Start+0x1c>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e01c      	b.n	800aecc <HAL_PCD_Start+0x56>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d105      	bne.n	800aeae <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f005 ff5e 	bl	8010d74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f006 ff23 	bl	8011d08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800aed4:	b590      	push	{r4, r7, lr}
 800aed6:	b08d      	sub	sp, #52	; 0x34
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f006 ffe1 	bl	8011eb2 <USB_GetMode>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f040 838f 	bne.w	800b616 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f006 ff45 	bl	8011d8c <USB_ReadInterrupts>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8385 	beq.w	800b614 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4618      	mov	r0, r3
 800af10:	f006 ff3c 	bl	8011d8c <USB_ReadInterrupts>
 800af14:	4603      	mov	r3, r0
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d107      	bne.n	800af2e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	695a      	ldr	r2, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f002 0202 	and.w	r2, r2, #2
 800af2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f006 ff2a 	bl	8011d8c <USB_ReadInterrupts>
 800af38:	4603      	mov	r3, r0
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d161      	bne.n	800b006 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	699a      	ldr	r2, [r3, #24]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0210 	bic.w	r2, r2, #16
 800af50:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	f003 020f 	and.w	r2, r3, #15
 800af5e:	4613      	mov	r3, r2
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	1a9b      	subs	r3, r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	4413      	add	r3, r2
 800af6e:	3304      	adds	r3, #4
 800af70:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	0c5b      	lsrs	r3, r3, #17
 800af76:	f003 030f 	and.w	r3, r3, #15
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d124      	bne.n	800afc8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800af84:	4013      	ands	r3, r2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d035      	beq.n	800aff6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	091b      	lsrs	r3, r3, #4
 800af92:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af98:	b29b      	uxth	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	6a38      	ldr	r0, [r7, #32]
 800af9e:	f006 fd90 	bl	8011ac2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	68da      	ldr	r2, [r3, #12]
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	091b      	lsrs	r3, r3, #4
 800afaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afae:	441a      	add	r2, r3
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	699a      	ldr	r2, [r3, #24]
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	091b      	lsrs	r3, r3, #4
 800afbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afc0:	441a      	add	r2, r3
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	619a      	str	r2, [r3, #24]
 800afc6:	e016      	b.n	800aff6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	0c5b      	lsrs	r3, r3, #17
 800afcc:	f003 030f 	and.w	r3, r3, #15
 800afd0:	2b06      	cmp	r3, #6
 800afd2:	d110      	bne.n	800aff6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afda:	2208      	movs	r2, #8
 800afdc:	4619      	mov	r1, r3
 800afde:	6a38      	ldr	r0, [r7, #32]
 800afe0:	f006 fd6f 	bl	8011ac2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	699a      	ldr	r2, [r3, #24]
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	091b      	lsrs	r3, r3, #4
 800afec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aff0:	441a      	add	r2, r3
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	699a      	ldr	r2, [r3, #24]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f042 0210 	orr.w	r2, r2, #16
 800b004:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f006 febe 	bl	8011d8c <USB_ReadInterrupts>
 800b010:	4603      	mov	r3, r0
 800b012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b016:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b01a:	d16e      	bne.n	800b0fa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f006 fec4 	bl	8011db2 <USB_ReadDevAllOutEpInterrupt>
 800b02a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b02c:	e062      	b.n	800b0f4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	d057      	beq.n	800b0e8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f006 fee9 	bl	8011e1a <USB_ReadDevOutEPInterrupt>
 800b048:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00c      	beq.n	800b06e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b060:	461a      	mov	r2, r3
 800b062:	2301      	movs	r3, #1
 800b064:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fdaf 	bl	800bbcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f003 0308 	and.w	r3, r3, #8
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00c      	beq.n	800b092 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b084:	461a      	mov	r2, r3
 800b086:	2308      	movs	r3, #8
 800b088:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b08a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fdeb 	bl	800bc68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d008      	beq.n	800b0ae <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	f003 0320 	and.w	r3, r3, #32
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d008      	beq.n	800b0ca <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d009      	beq.n	800b0e8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	085b      	lsrs	r3, r3, #1
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d199      	bne.n	800b02e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f006 fe44 	bl	8011d8c <USB_ReadInterrupts>
 800b104:	4603      	mov	r3, r0
 800b106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b10a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b10e:	f040 8087 	bne.w	800b220 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4618      	mov	r0, r3
 800b118:	f006 fe65 	bl	8011de6 <USB_ReadDevAllInEpInterrupt>
 800b11c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b122:	e07a      	b.n	800b21a <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d06f      	beq.n	800b20e <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b134:	b2d2      	uxtb	r2, r2
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f006 fe8c 	bl	8011e56 <USB_ReadDevInEPInterrupt>
 800b13e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d020      	beq.n	800b18c <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	f003 030f 	and.w	r3, r3, #15
 800b150:	2201      	movs	r2, #1
 800b152:	fa02 f303 	lsl.w	r3, r2, r3
 800b156:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b15e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	43db      	mvns	r3, r3
 800b164:	69f9      	ldr	r1, [r7, #28]
 800b166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b16a:	4013      	ands	r3, r2
 800b16c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17a:	461a      	mov	r2, r3
 800b17c:	2301      	movs	r3, #1
 800b17e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	b2db      	uxtb	r3, r3
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f00e fb85 	bl	8019896 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f003 0308 	and.w	r3, r3, #8
 800b192:	2b00      	cmp	r3, #0
 800b194:	d008      	beq.n	800b1a8 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f003 0310 	and.w	r3, r3, #16
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d008      	beq.n	800b1c4 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1be:	461a      	mov	r2, r3
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d008      	beq.n	800b1e0 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1da:	461a      	mov	r2, r3
 800b1dc:	2340      	movs	r3, #64	; 0x40
 800b1de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f003 0302 	and.w	r3, r3, #2
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d008      	beq.n	800b1fc <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fc56 	bl	800baba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	3301      	adds	r3, #1
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	085b      	lsrs	r3, r3, #1
 800b218:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d181      	bne.n	800b124 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4618      	mov	r0, r3
 800b226:	f006 fdb1 	bl	8011d8c <USB_ReadInterrupts>
 800b22a:	4603      	mov	r3, r0
 800b22c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b234:	d122      	bne.n	800b27c <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b244:	f023 0301 	bic.w	r3, r3, #1
 800b248:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b250:	2b01      	cmp	r3, #1
 800b252:	d108      	bne.n	800b266 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f00e fe72 	bl	8019f48 <HAL_PCDEx_LPM_Callback>
 800b264:	e002      	b.n	800b26c <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f00e fb82 	bl	8019970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	695a      	ldr	r2, [r3, #20]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b27a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4618      	mov	r0, r3
 800b282:	f006 fd83 	bl	8011d8c <USB_ReadInterrupts>
 800b286:	4603      	mov	r3, r0
 800b288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b28c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b290:	d112      	bne.n	800b2b8 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d102      	bne.n	800b2a8 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f00e fb3e 	bl	8019924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	695a      	ldr	r2, [r3, #20]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b2b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f006 fd65 	bl	8011d8c <USB_ReadInterrupts>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2cc:	d121      	bne.n	800b312 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	695a      	ldr	r2, [r3, #20]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b2dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d111      	bne.n	800b30c <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f6:	089b      	lsrs	r3, r3, #2
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b302:	2101      	movs	r1, #1
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f00e fe1f 	bl	8019f48 <HAL_PCDEx_LPM_Callback>
 800b30a:	e002      	b.n	800b312 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f00e fb09 	bl	8019924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4618      	mov	r0, r3
 800b318:	f006 fd38 	bl	8011d8c <USB_ReadInterrupts>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b326:	f040 80c5 	bne.w	800b4b4 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2110      	movs	r1, #16
 800b344:	4618      	mov	r0, r3
 800b346:	f005 fead 	bl	80110a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b34a:	2300      	movs	r3, #0
 800b34c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b34e:	e056      	b.n	800b3fe <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35c:	461a      	mov	r2, r3
 800b35e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b362:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b374:	0151      	lsls	r1, r2, #5
 800b376:	69fa      	ldr	r2, [r7, #28]
 800b378:	440a      	add	r2, r1
 800b37a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b37e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b382:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b394:	0151      	lsls	r1, r2, #5
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	440a      	add	r2, r1
 800b39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b39e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e8:	0151      	lsls	r1, r2, #5
 800b3ea:	69fa      	ldr	r2, [r7, #28]
 800b3ec:	440a      	add	r2, r1
 800b3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b404:	429a      	cmp	r2, r3
 800b406:	d3a3      	bcc.n	800b350 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	69fa      	ldr	r2, [r7, #28]
 800b412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b416:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b41a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b420:	2b00      	cmp	r3, #0
 800b422:	d016      	beq.n	800b452 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b434:	f043 030b 	orr.w	r3, r3, #11
 800b438:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b444:	69fa      	ldr	r2, [r7, #28]
 800b446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b44a:	f043 030b 	orr.w	r3, r3, #11
 800b44e:	6453      	str	r3, [r2, #68]	; 0x44
 800b450:	e015      	b.n	800b47e <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	69fa      	ldr	r2, [r7, #28]
 800b45c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b464:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b468:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b478:	f043 030b 	orr.w	r3, r3, #11
 800b47c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	69fa      	ldr	r2, [r7, #28]
 800b488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b48c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b490:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b49c:	4619      	mov	r1, r3
 800b49e:	4610      	mov	r0, r2
 800b4a0:	f006 fd38 	bl	8011f14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	695a      	ldr	r2, [r3, #20]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b4b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f006 fc67 	bl	8011d8c <USB_ReadInterrupts>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c8:	d124      	bne.n	800b514 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f006 fcfd 	bl	8011ece <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f005 fe44 	bl	8011166 <USB_GetDevSpeed>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681c      	ldr	r4, [r3, #0]
 800b4ea:	f001 fa85 	bl	800c9f8 <HAL_RCC_GetHCLKFreq>
 800b4ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f005 fb9f 	bl	8010c3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f00e f9f1 	bl	80198e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695a      	ldr	r2, [r3, #20]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b512:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f006 fc37 	bl	8011d8c <USB_ReadInterrupts>
 800b51e:	4603      	mov	r3, r0
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b08      	cmp	r3, #8
 800b526:	d10a      	bne.n	800b53e <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f00e f9ce 	bl	80198ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	695a      	ldr	r2, [r3, #20]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f002 0208 	and.w	r2, r2, #8
 800b53c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f006 fc22 	bl	8011d8c <USB_ReadInterrupts>
 800b548:	4603      	mov	r3, r0
 800b54a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b54e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b552:	d10f      	bne.n	800b574 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b554:	2300      	movs	r3, #0
 800b556:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f00e fa40 	bl	80199e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	695a      	ldr	r2, [r3, #20]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f006 fc07 	bl	8011d8c <USB_ReadInterrupts>
 800b57e:	4603      	mov	r3, r0
 800b580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b588:	d10f      	bne.n	800b5aa <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	b2db      	uxtb	r3, r3
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f00e fa13 	bl	80199c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	695a      	ldr	r2, [r3, #20]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b5a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f006 fbec 	bl	8011d8c <USB_ReadInterrupts>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5be:	d10a      	bne.n	800b5d6 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f00e fa21 	bl	8019a08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	695a      	ldr	r2, [r3, #20]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b5d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f006 fbd6 	bl	8011d8c <USB_ReadInterrupts>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f003 0304 	and.w	r3, r3, #4
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	d115      	bne.n	800b616 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f00e fa11 	bl	8019a24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6859      	ldr	r1, [r3, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	430a      	orrs	r2, r1
 800b610:	605a      	str	r2, [r3, #4]
 800b612:	e000      	b.n	800b616 <HAL_PCD_IRQHandler+0x742>
      return;
 800b614:	bf00      	nop
    }
  }
}
 800b616:	3734      	adds	r7, #52	; 0x34
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd90      	pop	{r4, r7, pc}

0800b61c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d101      	bne.n	800b636 <HAL_PCD_SetAddress+0x1a>
 800b632:	2302      	movs	r3, #2
 800b634:	e013      	b.n	800b65e <HAL_PCD_SetAddress+0x42>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	78fa      	ldrb	r2, [r7, #3]
 800b642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	78fa      	ldrb	r2, [r7, #3]
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f006 fb34 	bl	8011cbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	4608      	mov	r0, r1
 800b670:	4611      	mov	r1, r2
 800b672:	461a      	mov	r2, r3
 800b674:	4603      	mov	r3, r0
 800b676:	70fb      	strb	r3, [r7, #3]
 800b678:	460b      	mov	r3, r1
 800b67a:	803b      	strh	r3, [r7, #0]
 800b67c:	4613      	mov	r3, r2
 800b67e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	da0f      	bge.n	800b6ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	f003 020f 	and.w	r2, r3, #15
 800b692:	4613      	mov	r3, r2
 800b694:	00db      	lsls	r3, r3, #3
 800b696:	1a9b      	subs	r3, r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	3338      	adds	r3, #56	; 0x38
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4413      	add	r3, r2
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	705a      	strb	r2, [r3, #1]
 800b6aa:	e00f      	b.n	800b6cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	f003 020f 	and.w	r2, r3, #15
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	00db      	lsls	r3, r3, #3
 800b6b6:	1a9b      	subs	r3, r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b6cc:	78fb      	ldrb	r3, [r7, #3]
 800b6ce:	f003 030f 	and.w	r3, r3, #15
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b6d8:	883a      	ldrh	r2, [r7, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	78ba      	ldrb	r2, [r7, #2]
 800b6e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d004      	beq.n	800b6f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b6f6:	78bb      	ldrb	r3, [r7, #2]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d102      	bne.n	800b702 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d101      	bne.n	800b710 <HAL_PCD_EP_Open+0xaa>
 800b70c:	2302      	movs	r3, #2
 800b70e:	e00e      	b.n	800b72e <HAL_PCD_EP_Open+0xc8>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68f9      	ldr	r1, [r7, #12]
 800b71e:	4618      	mov	r0, r3
 800b720:	f005 fd40 	bl	80111a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b72c:	7afb      	ldrb	r3, [r7, #11]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b746:	2b00      	cmp	r3, #0
 800b748:	da0f      	bge.n	800b76a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	f003 020f 	and.w	r2, r3, #15
 800b750:	4613      	mov	r3, r2
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	1a9b      	subs	r3, r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	3338      	adds	r3, #56	; 0x38
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	4413      	add	r3, r2
 800b75e:	3304      	adds	r3, #4
 800b760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2201      	movs	r2, #1
 800b766:	705a      	strb	r2, [r3, #1]
 800b768:	e00f      	b.n	800b78a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b76a:	78fb      	ldrb	r3, [r7, #3]
 800b76c:	f003 020f 	and.w	r2, r3, #15
 800b770:	4613      	mov	r3, r2
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	4413      	add	r3, r2
 800b780:	3304      	adds	r3, #4
 800b782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	f003 030f 	and.w	r3, r3, #15
 800b790:	b2da      	uxtb	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d101      	bne.n	800b7a4 <HAL_PCD_EP_Close+0x6e>
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	e00e      	b.n	800b7c2 <HAL_PCD_EP_Close+0x8c>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68f9      	ldr	r1, [r7, #12]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f005 fd7e 	bl	80112b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b086      	sub	sp, #24
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7da:	7afb      	ldrb	r3, [r7, #11]
 800b7dc:	f003 020f 	and.w	r2, r3, #15
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	1a9b      	subs	r3, r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2200      	movs	r2, #0
 800b804:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2200      	movs	r2, #0
 800b80a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b80c:	7afb      	ldrb	r3, [r7, #11]
 800b80e:	f003 030f 	and.w	r3, r3, #15
 800b812:	b2da      	uxtb	r2, r3
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b818:	7afb      	ldrb	r3, [r7, #11]
 800b81a:	f003 030f 	and.w	r3, r3, #15
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6979      	ldr	r1, [r7, #20]
 800b828:	4618      	mov	r0, r3
 800b82a:	f005 fffb 	bl	8011824 <USB_EP0StartXfer>
 800b82e:	e005      	b.n	800b83c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	6979      	ldr	r1, [r7, #20]
 800b836:	4618      	mov	r0, r3
 800b838:	f005 fe18 	bl	801146c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	460b      	mov	r3, r1
 800b850:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b852:	78fb      	ldrb	r3, [r7, #3]
 800b854:	f003 020f 	and.w	r2, r3, #15
 800b858:	6879      	ldr	r1, [r7, #4]
 800b85a:	4613      	mov	r3, r2
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	440b      	add	r3, r1
 800b864:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b868:	681b      	ldr	r3, [r3, #0]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b086      	sub	sp, #24
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	603b      	str	r3, [r7, #0]
 800b882:	460b      	mov	r3, r1
 800b884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b886:	7afb      	ldrb	r3, [r7, #11]
 800b888:	f003 020f 	and.w	r2, r3, #15
 800b88c:	4613      	mov	r3, r2
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	3338      	adds	r3, #56	; 0x38
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4413      	add	r3, r2
 800b89a:	3304      	adds	r3, #4
 800b89c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8b6:	7afb      	ldrb	r3, [r7, #11]
 800b8b8:	f003 030f 	and.w	r3, r3, #15
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8c2:	7afb      	ldrb	r3, [r7, #11]
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6979      	ldr	r1, [r7, #20]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f005 ffa6 	bl	8011824 <USB_EP0StartXfer>
 800b8d8:	e005      	b.n	800b8e6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6979      	ldr	r1, [r7, #20]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f005 fdc3 	bl	801146c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	f003 020f 	and.w	r2, r3, #15
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	429a      	cmp	r2, r3
 800b908:	d901      	bls.n	800b90e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e04e      	b.n	800b9ac <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b90e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b912:	2b00      	cmp	r3, #0
 800b914:	da0f      	bge.n	800b936 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b916:	78fb      	ldrb	r3, [r7, #3]
 800b918:	f003 020f 	and.w	r2, r3, #15
 800b91c:	4613      	mov	r3, r2
 800b91e:	00db      	lsls	r3, r3, #3
 800b920:	1a9b      	subs	r3, r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	3338      	adds	r3, #56	; 0x38
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4413      	add	r3, r2
 800b92a:	3304      	adds	r3, #4
 800b92c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2201      	movs	r2, #1
 800b932:	705a      	strb	r2, [r3, #1]
 800b934:	e00d      	b.n	800b952 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b936:	78fa      	ldrb	r2, [r7, #3]
 800b938:	4613      	mov	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	1a9b      	subs	r3, r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	4413      	add	r3, r2
 800b948:	3304      	adds	r3, #4
 800b94a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b958:	78fb      	ldrb	r3, [r7, #3]
 800b95a:	f003 030f 	and.w	r3, r3, #15
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d101      	bne.n	800b972 <HAL_PCD_EP_SetStall+0x82>
 800b96e:	2302      	movs	r3, #2
 800b970:	e01c      	b.n	800b9ac <HAL_PCD_EP_SetStall+0xbc>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68f9      	ldr	r1, [r7, #12]
 800b980:	4618      	mov	r0, r3
 800b982:	f006 f8c7 	bl	8011b14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b986:	78fb      	ldrb	r3, [r7, #3]
 800b988:	f003 030f 	and.w	r3, r3, #15
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d108      	bne.n	800b9a2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f006 fab9 	bl	8011f14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	f003 020f 	and.w	r2, r3, #15
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d901      	bls.n	800b9d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e042      	b.n	800ba58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b9d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	da0f      	bge.n	800b9fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	f003 020f 	and.w	r2, r3, #15
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	3338      	adds	r3, #56	; 0x38
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	705a      	strb	r2, [r3, #1]
 800b9f8:	e00f      	b.n	800ba1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	f003 020f 	and.w	r2, r3, #15
 800ba00:	4613      	mov	r3, r2
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	1a9b      	subs	r3, r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	4413      	add	r3, r2
 800ba10:	3304      	adds	r3, #4
 800ba12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <HAL_PCD_EP_ClrStall+0x86>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e00e      	b.n	800ba58 <HAL_PCD_EP_ClrStall+0xa4>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f006 f8d1 	bl	8011bf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <HAL_PCD_EP_Flush+0x1a>
 800ba76:	2302      	movs	r3, #2
 800ba78:	e01b      	b.n	800bab2 <HAL_PCD_EP_Flush+0x52>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800ba82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	da09      	bge.n	800ba9e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	78fb      	ldrb	r3, [r7, #3]
 800ba90:	f003 030f 	and.w	r3, r3, #15
 800ba94:	4619      	mov	r1, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	f005 fb04 	bl	80110a4 <USB_FlushTxFifo>
 800ba9c:	e004      	b.n	800baa8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f005 fb24 	bl	80110f0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b088      	sub	sp, #32
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4613      	mov	r3, r2
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	3338      	adds	r3, #56	; 0x38
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	4413      	add	r3, r2
 800bade:	3304      	adds	r3, #4
 800bae0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	699a      	ldr	r2, [r3, #24]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	429a      	cmp	r2, r3
 800baec:	d901      	bls.n	800baf2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e067      	b.n	800bbc2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	695a      	ldr	r2, [r3, #20]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	69fa      	ldr	r2, [r7, #28]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d902      	bls.n	800bb0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	3303      	adds	r3, #3
 800bb12:	089b      	lsrs	r3, r3, #2
 800bb14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb16:	e026      	b.n	800bb66 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	695a      	ldr	r2, [r3, #20]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	69fa      	ldr	r2, [r7, #28]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d902      	bls.n	800bb34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	3303      	adds	r3, #3
 800bb38:	089b      	lsrs	r3, r3, #2
 800bb3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68d9      	ldr	r1, [r3, #12]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	6978      	ldr	r0, [r7, #20]
 800bb4a:	f005 ff89 	bl	8011a60 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	441a      	add	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	699a      	ldr	r2, [r3, #24]
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	441a      	add	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	015a      	lsls	r2, r3, #5
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	69ba      	ldr	r2, [r7, #24]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d809      	bhi.n	800bb90 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	699a      	ldr	r2, [r3, #24]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d203      	bcs.n	800bb90 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1c3      	bne.n	800bb18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	695a      	ldr	r2, [r3, #20]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d811      	bhi.n	800bbc0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f003 030f 	and.w	r3, r3, #15
 800bba2:	2201      	movs	r2, #1
 800bba4:	fa02 f303 	lsl.w	r3, r2, r3
 800bba8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	43db      	mvns	r3, r3
 800bbb6:	6939      	ldr	r1, [r7, #16]
 800bbb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3720      	adds	r7, #32
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	333c      	adds	r3, #60	; 0x3c
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	015a      	lsls	r2, r3, #5
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4a19      	ldr	r2, [pc, #100]	; (800bc64 <PCD_EP_OutXfrComplete_int+0x98>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d124      	bne.n	800bc4c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc18:	461a      	mov	r2, r3
 800bc1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc1e:	6093      	str	r3, [r2, #8]
 800bc20:	e01a      	b.n	800bc58 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f003 0320 	and.w	r3, r3, #32
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d008      	beq.n	800bc3e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc38:	461a      	mov	r2, r3
 800bc3a:	2320      	movs	r3, #32
 800bc3c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f00d fe0b 	bl	8019860 <HAL_PCD_DataOutStageCallback>
 800bc4a:	e005      	b.n	800bc58 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f00d fe04 	bl	8019860 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	4f54310a 	.word	0x4f54310a

0800bc68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	333c      	adds	r3, #60	; 0x3c
 800bc80:	3304      	adds	r3, #4
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4a0c      	ldr	r2, [pc, #48]	; (800bccc <PCD_EP_OutSetupPacket_int+0x64>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d90e      	bls.n	800bcbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d009      	beq.n	800bcbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f00d fdbd 	bl	801983c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	4f54300a 	.word	0x4f54300a

0800bcd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	70fb      	strb	r3, [r7, #3]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bce8:	78fb      	ldrb	r3, [r7, #3]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d107      	bne.n	800bcfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bcee:	883b      	ldrh	r3, [r7, #0]
 800bcf0:	0419      	lsls	r1, r3, #16
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	629a      	str	r2, [r3, #40]	; 0x28
 800bcfc:	e028      	b.n	800bd50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd04:	0c1b      	lsrs	r3, r3, #16
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	4413      	add	r3, r2
 800bd0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
 800bd10:	e00d      	b.n	800bd2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
 800bd18:	3340      	adds	r3, #64	; 0x40
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	0c1b      	lsrs	r3, r3, #16
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	4413      	add	r3, r2
 800bd26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	73fb      	strb	r3, [r7, #15]
 800bd2e:	7bfa      	ldrb	r2, [r7, #15]
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d3ec      	bcc.n	800bd12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bd38:	883b      	ldrh	r3, [r7, #0]
 800bd3a:	0418      	lsls	r0, r3, #16
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6819      	ldr	r1, [r3, #0]
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	4302      	orrs	r2, r0
 800bd48:	3340      	adds	r3, #64	; 0x40
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	460b      	mov	r3, r1
 800bd68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	887a      	ldrh	r2, [r7, #2]
 800bd70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdb2:	f043 0303 	orr.w	r3, r3, #3
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdcc:	4b05      	ldr	r3, [pc, #20]	; (800bde4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a04      	ldr	r2, [pc, #16]	; (800bde4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdd6:	6013      	str	r3, [r2, #0]
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	40007000 	.word	0x40007000

0800bde8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bde8:	b480      	push	{r7}
 800bdea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bdec:	4b04      	ldr	r3, [pc, #16]	; (800be00 <HAL_PWREx_GetVoltageRange+0x18>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	40007000 	.word	0x40007000

0800be04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be12:	d130      	bne.n	800be76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800be14:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be20:	d038      	beq.n	800be94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800be22:	4b20      	ldr	r3, [pc, #128]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be2a:	4a1e      	ldr	r2, [pc, #120]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800be32:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2232      	movs	r2, #50	; 0x32
 800be38:	fb02 f303 	mul.w	r3, r2, r3
 800be3c:	4a1b      	ldr	r2, [pc, #108]	; (800beac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800be3e:	fba2 2303 	umull	r2, r3, r2, r3
 800be42:	0c9b      	lsrs	r3, r3, #18
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be48:	e002      	b.n	800be50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be50:	4b14      	ldr	r3, [pc, #80]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be5c:	d102      	bne.n	800be64 <HAL_PWREx_ControlVoltageScaling+0x60>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f2      	bne.n	800be4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be64:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be70:	d110      	bne.n	800be94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e00f      	b.n	800be96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be76:	4b0b      	ldr	r3, [pc, #44]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be82:	d007      	beq.n	800be94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800be84:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be8c:	4a05      	ldr	r2, [pc, #20]	; (800bea4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	40007000 	.word	0x40007000
 800bea8:	200002e0 	.word	0x200002e0
 800beac:	431bde83 	.word	0x431bde83

0800beb0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800beb4:	4b05      	ldr	r3, [pc, #20]	; (800becc <HAL_PWREx_EnableVddUSB+0x1c>)
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	4a04      	ldr	r2, [pc, #16]	; (800becc <HAL_PWREx_EnableVddUSB+0x1c>)
 800beba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bebe:	6053      	str	r3, [r2, #4]
}
 800bec0:	bf00      	nop
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	40007000 	.word	0x40007000

0800bed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	f000 bc16 	b.w	800c710 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bee4:	4ba0      	ldr	r3, [pc, #640]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f003 030c 	and.w	r3, r3, #12
 800beec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800beee:	4b9e      	ldr	r3, [pc, #632]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f003 0303 	and.w	r3, r3, #3
 800bef6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0310 	and.w	r3, r3, #16
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 80e4 	beq.w	800c0ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <HAL_RCC_OscConfig+0x4c>
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	2b0c      	cmp	r3, #12
 800bf10:	f040 808b 	bne.w	800c02a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	f040 8087 	bne.w	800c02a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf1c:	4b92      	ldr	r3, [pc, #584]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0302 	and.w	r3, r3, #2
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d005      	beq.n	800bf34 <HAL_RCC_OscConfig+0x64>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e3ed      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a1a      	ldr	r2, [r3, #32]
 800bf38:	4b8b      	ldr	r3, [pc, #556]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0308 	and.w	r3, r3, #8
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <HAL_RCC_OscConfig+0x7e>
 800bf44:	4b88      	ldr	r3, [pc, #544]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf4c:	e005      	b.n	800bf5a <HAL_RCC_OscConfig+0x8a>
 800bf4e:	4b86      	ldr	r3, [pc, #536]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf54:	091b      	lsrs	r3, r3, #4
 800bf56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d223      	bcs.n	800bfa6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fdb2 	bl	800cacc <RCC_SetFlashLatencyFromMSIRange>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e3ce      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf72:	4b7d      	ldr	r3, [pc, #500]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a7c      	ldr	r2, [pc, #496]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf78:	f043 0308 	orr.w	r3, r3, #8
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	4b7a      	ldr	r3, [pc, #488]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	4977      	ldr	r1, [pc, #476]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf90:	4b75      	ldr	r3, [pc, #468]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	021b      	lsls	r3, r3, #8
 800bf9e:	4972      	ldr	r1, [pc, #456]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	604b      	str	r3, [r1, #4]
 800bfa4:	e025      	b.n	800bff2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bfa6:	4b70      	ldr	r3, [pc, #448]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a6f      	ldr	r2, [pc, #444]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfac:	f043 0308 	orr.w	r3, r3, #8
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	4b6d      	ldr	r3, [pc, #436]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a1b      	ldr	r3, [r3, #32]
 800bfbe:	496a      	ldr	r1, [pc, #424]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfc4:	4b68      	ldr	r3, [pc, #416]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	4965      	ldr	r1, [pc, #404]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d109      	bne.n	800bff2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 fd72 	bl	800cacc <RCC_SetFlashLatencyFromMSIRange>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e38e      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bff2:	f000 fc75 	bl	800c8e0 <HAL_RCC_GetSysClockFreq>
 800bff6:	4602      	mov	r2, r0
 800bff8:	4b5b      	ldr	r3, [pc, #364]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	091b      	lsrs	r3, r3, #4
 800bffe:	f003 030f 	and.w	r3, r3, #15
 800c002:	495a      	ldr	r1, [pc, #360]	; (800c16c <HAL_RCC_OscConfig+0x29c>)
 800c004:	5ccb      	ldrb	r3, [r1, r3]
 800c006:	f003 031f 	and.w	r3, r3, #31
 800c00a:	fa22 f303 	lsr.w	r3, r2, r3
 800c00e:	4a58      	ldr	r2, [pc, #352]	; (800c170 <HAL_RCC_OscConfig+0x2a0>)
 800c010:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c012:	4b58      	ldr	r3, [pc, #352]	; (800c174 <HAL_RCC_OscConfig+0x2a4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4618      	mov	r0, r3
 800c018:	f7fb f9c6 	bl	80073a8 <HAL_InitTick>
 800c01c:	4603      	mov	r3, r0
 800c01e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d052      	beq.n	800c0cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
 800c028:	e372      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d032      	beq.n	800c098 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c032:	4b4d      	ldr	r3, [pc, #308]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a4c      	ldr	r2, [pc, #304]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c038:	f043 0301 	orr.w	r3, r3, #1
 800c03c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c03e:	f7fb fdd5 	bl	8007bec <HAL_GetTick>
 800c042:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c044:	e008      	b.n	800c058 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c046:	f7fb fdd1 	bl	8007bec <HAL_GetTick>
 800c04a:	4602      	mov	r2, r0
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	2b02      	cmp	r3, #2
 800c052:	d901      	bls.n	800c058 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e35b      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c058:	4b43      	ldr	r3, [pc, #268]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0302 	and.w	r3, r3, #2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0f0      	beq.n	800c046 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c064:	4b40      	ldr	r3, [pc, #256]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a3f      	ldr	r2, [pc, #252]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c06a:	f043 0308 	orr.w	r3, r3, #8
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	4b3d      	ldr	r3, [pc, #244]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	493a      	ldr	r1, [pc, #232]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c082:	4b39      	ldr	r3, [pc, #228]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	4935      	ldr	r1, [pc, #212]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c092:	4313      	orrs	r3, r2
 800c094:	604b      	str	r3, [r1, #4]
 800c096:	e01a      	b.n	800c0ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c098:	4b33      	ldr	r3, [pc, #204]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a32      	ldr	r2, [pc, #200]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c09e:	f023 0301 	bic.w	r3, r3, #1
 800c0a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c0a4:	f7fb fda2 	bl	8007bec <HAL_GetTick>
 800c0a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0aa:	e008      	b.n	800c0be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0ac:	f7fb fd9e 	bl	8007bec <HAL_GetTick>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d901      	bls.n	800c0be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e328      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0be:	4b2a      	ldr	r3, [pc, #168]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0302 	and.w	r3, r3, #2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1f0      	bne.n	800c0ac <HAL_RCC_OscConfig+0x1dc>
 800c0ca:	e000      	b.n	800c0ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c0cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d073      	beq.n	800c1c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d005      	beq.n	800c0ec <HAL_RCC_OscConfig+0x21c>
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	2b0c      	cmp	r3, #12
 800c0e4:	d10e      	bne.n	800c104 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d10b      	bne.n	800c104 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0ec:	4b1e      	ldr	r3, [pc, #120]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d063      	beq.n	800c1c0 <HAL_RCC_OscConfig+0x2f0>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d15f      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e305      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c10c:	d106      	bne.n	800c11c <HAL_RCC_OscConfig+0x24c>
 800c10e:	4b16      	ldr	r3, [pc, #88]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a15      	ldr	r2, [pc, #84]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	e01d      	b.n	800c158 <HAL_RCC_OscConfig+0x288>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c124:	d10c      	bne.n	800c140 <HAL_RCC_OscConfig+0x270>
 800c126:	4b10      	ldr	r3, [pc, #64]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a0f      	ldr	r2, [pc, #60]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c12c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	4b0d      	ldr	r3, [pc, #52]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a0c      	ldr	r2, [pc, #48]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	e00b      	b.n	800c158 <HAL_RCC_OscConfig+0x288>
 800c140:	4b09      	ldr	r3, [pc, #36]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a08      	ldr	r2, [pc, #32]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	4b06      	ldr	r3, [pc, #24]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a05      	ldr	r2, [pc, #20]	; (800c168 <HAL_RCC_OscConfig+0x298>)
 800c152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01b      	beq.n	800c198 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c160:	f7fb fd44 	bl	8007bec <HAL_GetTick>
 800c164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c166:	e010      	b.n	800c18a <HAL_RCC_OscConfig+0x2ba>
 800c168:	40021000 	.word	0x40021000
 800c16c:	08024068 	.word	0x08024068
 800c170:	200002e0 	.word	0x200002e0
 800c174:	200002e4 	.word	0x200002e4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c178:	f7fb fd38 	bl	8007bec <HAL_GetTick>
 800c17c:	4602      	mov	r2, r0
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	2b64      	cmp	r3, #100	; 0x64
 800c184:	d901      	bls.n	800c18a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c186:	2303      	movs	r3, #3
 800c188:	e2c2      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c18a:	4baf      	ldr	r3, [pc, #700]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0f0      	beq.n	800c178 <HAL_RCC_OscConfig+0x2a8>
 800c196:	e014      	b.n	800c1c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c198:	f7fb fd28 	bl	8007bec <HAL_GetTick>
 800c19c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c19e:	e008      	b.n	800c1b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1a0:	f7fb fd24 	bl	8007bec <HAL_GetTick>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	2b64      	cmp	r3, #100	; 0x64
 800c1ac:	d901      	bls.n	800c1b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e2ae      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1b2:	4ba5      	ldr	r3, [pc, #660]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1f0      	bne.n	800c1a0 <HAL_RCC_OscConfig+0x2d0>
 800c1be:	e000      	b.n	800c1c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d060      	beq.n	800c290 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b04      	cmp	r3, #4
 800c1d2:	d005      	beq.n	800c1e0 <HAL_RCC_OscConfig+0x310>
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	2b0c      	cmp	r3, #12
 800c1d8:	d119      	bne.n	800c20e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d116      	bne.n	800c20e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c1e0:	4b99      	ldr	r3, [pc, #612]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d005      	beq.n	800c1f8 <HAL_RCC_OscConfig+0x328>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e28b      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1f8:	4b93      	ldr	r3, [pc, #588]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	061b      	lsls	r3, r3, #24
 800c206:	4990      	ldr	r1, [pc, #576]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c208:	4313      	orrs	r3, r2
 800c20a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c20c:	e040      	b.n	800c290 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d023      	beq.n	800c25e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c216:	4b8c      	ldr	r3, [pc, #560]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a8b      	ldr	r2, [pc, #556]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c222:	f7fb fce3 	bl	8007bec <HAL_GetTick>
 800c226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c228:	e008      	b.n	800c23c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c22a:	f7fb fcdf 	bl	8007bec <HAL_GetTick>
 800c22e:	4602      	mov	r2, r0
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	2b02      	cmp	r3, #2
 800c236:	d901      	bls.n	800c23c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e269      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c23c:	4b82      	ldr	r3, [pc, #520]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c244:	2b00      	cmp	r3, #0
 800c246:	d0f0      	beq.n	800c22a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c248:	4b7f      	ldr	r3, [pc, #508]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	061b      	lsls	r3, r3, #24
 800c256:	497c      	ldr	r1, [pc, #496]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c258:	4313      	orrs	r3, r2
 800c25a:	604b      	str	r3, [r1, #4]
 800c25c:	e018      	b.n	800c290 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c25e:	4b7a      	ldr	r3, [pc, #488]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a79      	ldr	r2, [pc, #484]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c26a:	f7fb fcbf 	bl	8007bec <HAL_GetTick>
 800c26e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c270:	e008      	b.n	800c284 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c272:	f7fb fcbb 	bl	8007bec <HAL_GetTick>
 800c276:	4602      	mov	r2, r0
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d901      	bls.n	800c284 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c280:	2303      	movs	r3, #3
 800c282:	e245      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c284:	4b70      	ldr	r3, [pc, #448]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1f0      	bne.n	800c272 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0308 	and.w	r3, r3, #8
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d03c      	beq.n	800c316 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d01c      	beq.n	800c2de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c2a4:	4b68      	ldr	r3, [pc, #416]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c2a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2aa:	4a67      	ldr	r2, [pc, #412]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c2ac:	f043 0301 	orr.w	r3, r3, #1
 800c2b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2b4:	f7fb fc9a 	bl	8007bec <HAL_GetTick>
 800c2b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2ba:	e008      	b.n	800c2ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2bc:	f7fb fc96 	bl	8007bec <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d901      	bls.n	800c2ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e220      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2ce:	4b5e      	ldr	r3, [pc, #376]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c2d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2d4:	f003 0302 	and.w	r3, r3, #2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0ef      	beq.n	800c2bc <HAL_RCC_OscConfig+0x3ec>
 800c2dc:	e01b      	b.n	800c316 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c2de:	4b5a      	ldr	r3, [pc, #360]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c2e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2e4:	4a58      	ldr	r2, [pc, #352]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c2e6:	f023 0301 	bic.w	r3, r3, #1
 800c2ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ee:	f7fb fc7d 	bl	8007bec <HAL_GetTick>
 800c2f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c2f4:	e008      	b.n	800c308 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2f6:	f7fb fc79 	bl	8007bec <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	2b02      	cmp	r3, #2
 800c302:	d901      	bls.n	800c308 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e203      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c308:	4b4f      	ldr	r3, [pc, #316]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c30a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c30e:	f003 0302 	and.w	r3, r3, #2
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1ef      	bne.n	800c2f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 0304 	and.w	r3, r3, #4
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 80a6 	beq.w	800c470 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c324:	2300      	movs	r3, #0
 800c326:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c328:	4b47      	ldr	r3, [pc, #284]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10d      	bne.n	800c350 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c334:	4b44      	ldr	r3, [pc, #272]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c338:	4a43      	ldr	r2, [pc, #268]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c33a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c33e:	6593      	str	r3, [r2, #88]	; 0x58
 800c340:	4b41      	ldr	r3, [pc, #260]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c348:	60bb      	str	r3, [r7, #8]
 800c34a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c34c:	2301      	movs	r3, #1
 800c34e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c350:	4b3e      	ldr	r3, [pc, #248]	; (800c44c <HAL_RCC_OscConfig+0x57c>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d118      	bne.n	800c38e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c35c:	4b3b      	ldr	r3, [pc, #236]	; (800c44c <HAL_RCC_OscConfig+0x57c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a3a      	ldr	r2, [pc, #232]	; (800c44c <HAL_RCC_OscConfig+0x57c>)
 800c362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c368:	f7fb fc40 	bl	8007bec <HAL_GetTick>
 800c36c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c36e:	e008      	b.n	800c382 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c370:	f7fb fc3c 	bl	8007bec <HAL_GetTick>
 800c374:	4602      	mov	r2, r0
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d901      	bls.n	800c382 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e1c6      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c382:	4b32      	ldr	r3, [pc, #200]	; (800c44c <HAL_RCC_OscConfig+0x57c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0f0      	beq.n	800c370 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d108      	bne.n	800c3a8 <HAL_RCC_OscConfig+0x4d8>
 800c396:	4b2c      	ldr	r3, [pc, #176]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c39c:	4a2a      	ldr	r2, [pc, #168]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c39e:	f043 0301 	orr.w	r3, r3, #1
 800c3a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3a6:	e024      	b.n	800c3f2 <HAL_RCC_OscConfig+0x522>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	2b05      	cmp	r3, #5
 800c3ae:	d110      	bne.n	800c3d2 <HAL_RCC_OscConfig+0x502>
 800c3b0:	4b25      	ldr	r3, [pc, #148]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3b6:	4a24      	ldr	r2, [pc, #144]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3b8:	f043 0304 	orr.w	r3, r3, #4
 800c3bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3c0:	4b21      	ldr	r3, [pc, #132]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3c6:	4a20      	ldr	r2, [pc, #128]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3c8:	f043 0301 	orr.w	r3, r3, #1
 800c3cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3d0:	e00f      	b.n	800c3f2 <HAL_RCC_OscConfig+0x522>
 800c3d2:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3d8:	4a1b      	ldr	r2, [pc, #108]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3da:	f023 0301 	bic.w	r3, r3, #1
 800c3de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3e2:	4b19      	ldr	r3, [pc, #100]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e8:	4a17      	ldr	r2, [pc, #92]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c3ea:	f023 0304 	bic.w	r3, r3, #4
 800c3ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d016      	beq.n	800c428 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3fa:	f7fb fbf7 	bl	8007bec <HAL_GetTick>
 800c3fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c400:	e00a      	b.n	800c418 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c402:	f7fb fbf3 	bl	8007bec <HAL_GetTick>
 800c406:	4602      	mov	r2, r0
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c410:	4293      	cmp	r3, r2
 800c412:	d901      	bls.n	800c418 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c414:	2303      	movs	r3, #3
 800c416:	e17b      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <HAL_RCC_OscConfig+0x578>)
 800c41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c41e:	f003 0302 	and.w	r3, r3, #2
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0ed      	beq.n	800c402 <HAL_RCC_OscConfig+0x532>
 800c426:	e01a      	b.n	800c45e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c428:	f7fb fbe0 	bl	8007bec <HAL_GetTick>
 800c42c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c42e:	e00f      	b.n	800c450 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c430:	f7fb fbdc 	bl	8007bec <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c43e:	4293      	cmp	r3, r2
 800c440:	d906      	bls.n	800c450 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e164      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
 800c446:	bf00      	nop
 800c448:	40021000 	.word	0x40021000
 800c44c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c450:	4ba8      	ldr	r3, [pc, #672]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c456:	f003 0302 	and.w	r3, r3, #2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1e8      	bne.n	800c430 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c45e:	7ffb      	ldrb	r3, [r7, #31]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d105      	bne.n	800c470 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c464:	4ba3      	ldr	r3, [pc, #652]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c468:	4aa2      	ldr	r2, [pc, #648]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c46a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c46e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d03c      	beq.n	800c4f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	d01c      	beq.n	800c4be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c484:	4b9b      	ldr	r3, [pc, #620]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c48a:	4a9a      	ldr	r2, [pc, #616]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c48c:	f043 0301 	orr.w	r3, r3, #1
 800c490:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c494:	f7fb fbaa 	bl	8007bec <HAL_GetTick>
 800c498:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c49a:	e008      	b.n	800c4ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c49c:	f7fb fba6 	bl	8007bec <HAL_GetTick>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d901      	bls.n	800c4ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	e130      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c4ae:	4b91      	ldr	r3, [pc, #580]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c4b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4b4:	f003 0302 	and.w	r3, r3, #2
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d0ef      	beq.n	800c49c <HAL_RCC_OscConfig+0x5cc>
 800c4bc:	e01b      	b.n	800c4f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c4be:	4b8d      	ldr	r3, [pc, #564]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c4c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4c4:	4a8b      	ldr	r2, [pc, #556]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c4c6:	f023 0301 	bic.w	r3, r3, #1
 800c4ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ce:	f7fb fb8d 	bl	8007bec <HAL_GetTick>
 800c4d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4d4:	e008      	b.n	800c4e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4d6:	f7fb fb89 	bl	8007bec <HAL_GetTick>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d901      	bls.n	800c4e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e113      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4e8:	4b82      	ldr	r3, [pc, #520]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1ef      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 8107 	beq.w	800c70e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c504:	2b02      	cmp	r3, #2
 800c506:	f040 80cb 	bne.w	800c6a0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c50a:	4b7a      	ldr	r3, [pc, #488]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f003 0203 	and.w	r2, r3, #3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d12c      	bne.n	800c578 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c528:	3b01      	subs	r3, #1
 800c52a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d123      	bne.n	800c578 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d11b      	bne.n	800c578 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d113      	bne.n	800c578 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55a:	085b      	lsrs	r3, r3, #1
 800c55c:	3b01      	subs	r3, #1
 800c55e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c560:	429a      	cmp	r2, r3
 800c562:	d109      	bne.n	800c578 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56e:	085b      	lsrs	r3, r3, #1
 800c570:	3b01      	subs	r3, #1
 800c572:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c574:	429a      	cmp	r2, r3
 800c576:	d06d      	beq.n	800c654 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	2b0c      	cmp	r3, #12
 800c57c:	d068      	beq.n	800c650 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c57e:	4b5d      	ldr	r3, [pc, #372]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d105      	bne.n	800c596 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c58a:	4b5a      	ldr	r3, [pc, #360]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e0ba      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c59a:	4b56      	ldr	r3, [pc, #344]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a55      	ldr	r2, [pc, #340]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c5a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c5a6:	f7fb fb21 	bl	8007bec <HAL_GetTick>
 800c5aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5ae:	f7fb fb1d 	bl	8007bec <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d901      	bls.n	800c5c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e0a7      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5c0:	4b4c      	ldr	r3, [pc, #304]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1f0      	bne.n	800c5ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5cc:	4b49      	ldr	r3, [pc, #292]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c5ce:	68da      	ldr	r2, [r3, #12]
 800c5d0:	4b49      	ldr	r3, [pc, #292]	; (800c6f8 <HAL_RCC_OscConfig+0x828>)
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c5dc:	3a01      	subs	r2, #1
 800c5de:	0112      	lsls	r2, r2, #4
 800c5e0:	4311      	orrs	r1, r2
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c5e6:	0212      	lsls	r2, r2, #8
 800c5e8:	4311      	orrs	r1, r2
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c5ee:	0852      	lsrs	r2, r2, #1
 800c5f0:	3a01      	subs	r2, #1
 800c5f2:	0552      	lsls	r2, r2, #21
 800c5f4:	4311      	orrs	r1, r2
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c5fa:	0852      	lsrs	r2, r2, #1
 800c5fc:	3a01      	subs	r2, #1
 800c5fe:	0652      	lsls	r2, r2, #25
 800c600:	4311      	orrs	r1, r2
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c606:	06d2      	lsls	r2, r2, #27
 800c608:	430a      	orrs	r2, r1
 800c60a:	493a      	ldr	r1, [pc, #232]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c610:	4b38      	ldr	r3, [pc, #224]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a37      	ldr	r2, [pc, #220]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c61a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c61c:	4b35      	ldr	r3, [pc, #212]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	4a34      	ldr	r2, [pc, #208]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c626:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c628:	f7fb fae0 	bl	8007bec <HAL_GetTick>
 800c62c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c62e:	e008      	b.n	800c642 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c630:	f7fb fadc 	bl	8007bec <HAL_GetTick>
 800c634:	4602      	mov	r2, r0
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d901      	bls.n	800c642 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e066      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c642:	4b2c      	ldr	r3, [pc, #176]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0f0      	beq.n	800c630 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c64e:	e05e      	b.n	800c70e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e05d      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c654:	4b27      	ldr	r3, [pc, #156]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d156      	bne.n	800c70e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c660:	4b24      	ldr	r3, [pc, #144]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a23      	ldr	r2, [pc, #140]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c66a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c66c:	4b21      	ldr	r3, [pc, #132]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	4a20      	ldr	r2, [pc, #128]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c676:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c678:	f7fb fab8 	bl	8007bec <HAL_GetTick>
 800c67c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c67e:	e008      	b.n	800c692 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c680:	f7fb fab4 	bl	8007bec <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d901      	bls.n	800c692 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e03e      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c692:	4b18      	ldr	r3, [pc, #96]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f0      	beq.n	800c680 <HAL_RCC_OscConfig+0x7b0>
 800c69e:	e036      	b.n	800c70e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	2b0c      	cmp	r3, #12
 800c6a4:	d031      	beq.n	800c70a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6a6:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a12      	ldr	r2, [pc, #72]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c6b2:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d105      	bne.n	800c6ca <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c6be:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	4a0c      	ldr	r2, [pc, #48]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6c4:	f023 0303 	bic.w	r3, r3, #3
 800c6c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c6ca:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	4a09      	ldr	r2, [pc, #36]	; (800c6f4 <HAL_RCC_OscConfig+0x824>)
 800c6d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c6d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6da:	f7fb fa87 	bl	8007bec <HAL_GetTick>
 800c6de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6e0:	e00c      	b.n	800c6fc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6e2:	f7fb fa83 	bl	8007bec <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d905      	bls.n	800c6fc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e00d      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
 800c6f4:	40021000 	.word	0x40021000
 800c6f8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6fc:	4b06      	ldr	r3, [pc, #24]	; (800c718 <HAL_RCC_OscConfig+0x848>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1ec      	bne.n	800c6e2 <HAL_RCC_OscConfig+0x812>
 800c708:	e001      	b.n	800c70e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e000      	b.n	800c710 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3720      	adds	r7, #32
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	40021000 	.word	0x40021000

0800c71c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e0c8      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c730:	4b66      	ldr	r3, [pc, #408]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0307 	and.w	r3, r3, #7
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d910      	bls.n	800c760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c73e:	4b63      	ldr	r3, [pc, #396]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f023 0207 	bic.w	r2, r3, #7
 800c746:	4961      	ldr	r1, [pc, #388]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c74e:	4b5f      	ldr	r3, [pc, #380]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d001      	beq.n	800c760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e0b0      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d04c      	beq.n	800c806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	2b03      	cmp	r3, #3
 800c772:	d107      	bne.n	800c784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c774:	4b56      	ldr	r3, [pc, #344]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d121      	bne.n	800c7c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e09e      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d107      	bne.n	800c79c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c78c:	4b50      	ldr	r3, [pc, #320]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d115      	bne.n	800c7c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e092      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d107      	bne.n	800c7b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c7a4:	4b4a      	ldr	r3, [pc, #296]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d109      	bne.n	800c7c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e086      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7b4:	4b46      	ldr	r3, [pc, #280]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e07e      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c7c4:	4b42      	ldr	r3, [pc, #264]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	f023 0203 	bic.w	r2, r3, #3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	493f      	ldr	r1, [pc, #252]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7d6:	f7fb fa09 	bl	8007bec <HAL_GetTick>
 800c7da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7dc:	e00a      	b.n	800c7f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7de:	f7fb fa05 	bl	8007bec <HAL_GetTick>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d901      	bls.n	800c7f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e066      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7f4:	4b36      	ldr	r3, [pc, #216]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f003 020c 	and.w	r2, r3, #12
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	429a      	cmp	r2, r3
 800c804:	d1eb      	bne.n	800c7de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 0302 	and.w	r3, r3, #2
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d008      	beq.n	800c824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c812:	4b2f      	ldr	r3, [pc, #188]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	492c      	ldr	r1, [pc, #176]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c820:	4313      	orrs	r3, r2
 800c822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c824:	4b29      	ldr	r3, [pc, #164]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0307 	and.w	r3, r3, #7
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d210      	bcs.n	800c854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c832:	4b26      	ldr	r3, [pc, #152]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f023 0207 	bic.w	r2, r3, #7
 800c83a:	4924      	ldr	r1, [pc, #144]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	4313      	orrs	r3, r2
 800c840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c842:	4b22      	ldr	r3, [pc, #136]	; (800c8cc <HAL_RCC_ClockConfig+0x1b0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d001      	beq.n	800c854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	e036      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d008      	beq.n	800c872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c860:	4b1b      	ldr	r3, [pc, #108]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	4918      	ldr	r1, [pc, #96]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c86e:	4313      	orrs	r3, r2
 800c870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f003 0308 	and.w	r3, r3, #8
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d009      	beq.n	800c892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c87e:	4b14      	ldr	r3, [pc, #80]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	00db      	lsls	r3, r3, #3
 800c88c:	4910      	ldr	r1, [pc, #64]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c88e:	4313      	orrs	r3, r2
 800c890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c892:	f000 f825 	bl	800c8e0 <HAL_RCC_GetSysClockFreq>
 800c896:	4602      	mov	r2, r0
 800c898:	4b0d      	ldr	r3, [pc, #52]	; (800c8d0 <HAL_RCC_ClockConfig+0x1b4>)
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	091b      	lsrs	r3, r3, #4
 800c89e:	f003 030f 	and.w	r3, r3, #15
 800c8a2:	490c      	ldr	r1, [pc, #48]	; (800c8d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c8a4:	5ccb      	ldrb	r3, [r1, r3]
 800c8a6:	f003 031f 	and.w	r3, r3, #31
 800c8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ae:	4a0a      	ldr	r2, [pc, #40]	; (800c8d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c8b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c8b2:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <HAL_RCC_ClockConfig+0x1c0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fa fd76 	bl	80073a8 <HAL_InitTick>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	72fb      	strb	r3, [r7, #11]

  return status;
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	40022000 	.word	0x40022000
 800c8d0:	40021000 	.word	0x40021000
 800c8d4:	08024068 	.word	0x08024068
 800c8d8:	200002e0 	.word	0x200002e0
 800c8dc:	200002e4 	.word	0x200002e4

0800c8e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b089      	sub	sp, #36	; 0x24
 800c8e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61fb      	str	r3, [r7, #28]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8ee:	4b3e      	ldr	r3, [pc, #248]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	f003 030c 	and.w	r3, r3, #12
 800c8f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8f8:	4b3b      	ldr	r3, [pc, #236]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	f003 0303 	and.w	r3, r3, #3
 800c900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <HAL_RCC_GetSysClockFreq+0x34>
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2b0c      	cmp	r3, #12
 800c90c:	d121      	bne.n	800c952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d11e      	bne.n	800c952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c914:	4b34      	ldr	r3, [pc, #208]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0308 	and.w	r3, r3, #8
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c920:	4b31      	ldr	r3, [pc, #196]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c926:	0a1b      	lsrs	r3, r3, #8
 800c928:	f003 030f 	and.w	r3, r3, #15
 800c92c:	61fb      	str	r3, [r7, #28]
 800c92e:	e005      	b.n	800c93c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c930:	4b2d      	ldr	r3, [pc, #180]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	091b      	lsrs	r3, r3, #4
 800c936:	f003 030f 	and.w	r3, r3, #15
 800c93a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c93c:	4a2b      	ldr	r2, [pc, #172]	; (800c9ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10d      	bne.n	800c968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c950:	e00a      	b.n	800c968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	2b04      	cmp	r3, #4
 800c956:	d102      	bne.n	800c95e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c958:	4b25      	ldr	r3, [pc, #148]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800c95a:	61bb      	str	r3, [r7, #24]
 800c95c:	e004      	b.n	800c968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	2b08      	cmp	r3, #8
 800c962:	d101      	bne.n	800c968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c964:	4b23      	ldr	r3, [pc, #140]	; (800c9f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800c966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	2b0c      	cmp	r3, #12
 800c96c:	d134      	bne.n	800c9d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c96e:	4b1e      	ldr	r3, [pc, #120]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	f003 0303 	and.w	r3, r3, #3
 800c976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d003      	beq.n	800c986 <HAL_RCC_GetSysClockFreq+0xa6>
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2b03      	cmp	r3, #3
 800c982:	d003      	beq.n	800c98c <HAL_RCC_GetSysClockFreq+0xac>
 800c984:	e005      	b.n	800c992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c986:	4b1a      	ldr	r3, [pc, #104]	; (800c9f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800c988:	617b      	str	r3, [r7, #20]
      break;
 800c98a:	e005      	b.n	800c998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c98c:	4b19      	ldr	r3, [pc, #100]	; (800c9f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800c98e:	617b      	str	r3, [r7, #20]
      break;
 800c990:	e002      	b.n	800c998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	617b      	str	r3, [r7, #20]
      break;
 800c996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c998:	4b13      	ldr	r3, [pc, #76]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	091b      	lsrs	r3, r3, #4
 800c99e:	f003 0307 	and.w	r3, r3, #7
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c9a6:	4b10      	ldr	r3, [pc, #64]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	0a1b      	lsrs	r3, r3, #8
 800c9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b0:	697a      	ldr	r2, [r7, #20]
 800c9b2:	fb02 f203 	mul.w	r2, r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c9be:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	0e5b      	lsrs	r3, r3, #25
 800c9c4:	f003 0303 	and.w	r3, r3, #3
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c9d8:	69bb      	ldr	r3, [r7, #24]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3724      	adds	r7, #36	; 0x24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	40021000 	.word	0x40021000
 800c9ec:	08024080 	.word	0x08024080
 800c9f0:	00f42400 	.word	0x00f42400
 800c9f4:	007a1200 	.word	0x007a1200

0800c9f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c9fc:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <HAL_RCC_GetHCLKFreq+0x14>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	200002e0 	.word	0x200002e0

0800ca10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ca14:	f7ff fff0 	bl	800c9f8 <HAL_RCC_GetHCLKFreq>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	f003 0307 	and.w	r3, r3, #7
 800ca24:	4904      	ldr	r1, [pc, #16]	; (800ca38 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ca26:	5ccb      	ldrb	r3, [r1, r3]
 800ca28:	f003 031f 	and.w	r3, r3, #31
 800ca2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	40021000 	.word	0x40021000
 800ca38:	08024078 	.word	0x08024078

0800ca3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ca40:	f7ff ffda 	bl	800c9f8 <HAL_RCC_GetHCLKFreq>
 800ca44:	4602      	mov	r2, r0
 800ca46:	4b06      	ldr	r3, [pc, #24]	; (800ca60 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	0adb      	lsrs	r3, r3, #11
 800ca4c:	f003 0307 	and.w	r3, r3, #7
 800ca50:	4904      	ldr	r1, [pc, #16]	; (800ca64 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca52:	5ccb      	ldrb	r3, [r1, r3]
 800ca54:	f003 031f 	and.w	r3, r3, #31
 800ca58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	40021000 	.word	0x40021000
 800ca64:	08024078 	.word	0x08024078

0800ca68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	220f      	movs	r2, #15
 800ca76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ca78:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <HAL_RCC_GetClockConfig+0x5c>)
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f003 0203 	and.w	r2, r3, #3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <HAL_RCC_GetClockConfig+0x5c>)
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <HAL_RCC_GetClockConfig+0x5c>)
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca9c:	4b09      	ldr	r3, [pc, #36]	; (800cac4 <HAL_RCC_GetClockConfig+0x5c>)
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	08db      	lsrs	r3, r3, #3
 800caa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <HAL_RCC_GetClockConfig+0x60>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 0207 	and.w	r2, r3, #7
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	601a      	str	r2, [r3, #0]
}
 800cab6:	bf00      	nop
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	40021000 	.word	0x40021000
 800cac8:	40022000 	.word	0x40022000

0800cacc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cad4:	2300      	movs	r3, #0
 800cad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cad8:	4b2a      	ldr	r3, [pc, #168]	; (800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cadc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d003      	beq.n	800caec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cae4:	f7ff f980 	bl	800bde8 <HAL_PWREx_GetVoltageRange>
 800cae8:	6178      	str	r0, [r7, #20]
 800caea:	e014      	b.n	800cb16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800caec:	4b25      	ldr	r3, [pc, #148]	; (800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf0:	4a24      	ldr	r2, [pc, #144]	; (800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caf6:	6593      	str	r3, [r2, #88]	; 0x58
 800caf8:	4b22      	ldr	r3, [pc, #136]	; (800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cafc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cb04:	f7ff f970 	bl	800bde8 <HAL_PWREx_GetVoltageRange>
 800cb08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cb0a:	4b1e      	ldr	r3, [pc, #120]	; (800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0e:	4a1d      	ldr	r2, [pc, #116]	; (800cb84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb1c:	d10b      	bne.n	800cb36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b80      	cmp	r3, #128	; 0x80
 800cb22:	d919      	bls.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2ba0      	cmp	r3, #160	; 0xa0
 800cb28:	d902      	bls.n	800cb30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	613b      	str	r3, [r7, #16]
 800cb2e:	e013      	b.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb30:	2301      	movs	r3, #1
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	e010      	b.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b80      	cmp	r3, #128	; 0x80
 800cb3a:	d902      	bls.n	800cb42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	613b      	str	r3, [r7, #16]
 800cb40:	e00a      	b.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b80      	cmp	r3, #128	; 0x80
 800cb46:	d102      	bne.n	800cb4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb48:	2302      	movs	r3, #2
 800cb4a:	613b      	str	r3, [r7, #16]
 800cb4c:	e004      	b.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b70      	cmp	r3, #112	; 0x70
 800cb52:	d101      	bne.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb54:	2301      	movs	r3, #1
 800cb56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f023 0207 	bic.w	r2, r3, #7
 800cb60:	4909      	ldr	r1, [pc, #36]	; (800cb88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cb68:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0307 	and.w	r3, r3, #7
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d001      	beq.n	800cb7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e000      	b.n	800cb7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	40021000 	.word	0x40021000
 800cb88:	40022000 	.word	0x40022000

0800cb8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb94:	2300      	movs	r3, #0
 800cb96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb98:	2300      	movs	r3, #0
 800cb9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d041      	beq.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cbb0:	d02a      	beq.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cbb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cbb6:	d824      	bhi.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbbc:	d008      	beq.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cbbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbc2:	d81e      	bhi.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00a      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cbc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbcc:	d010      	beq.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cbce:	e018      	b.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cbd0:	4b86      	ldr	r3, [pc, #536]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	4a85      	ldr	r2, [pc, #532]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbdc:	e015      	b.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 fadf 	bl	800d1a8 <RCCEx_PLLSAI1_Config>
 800cbea:	4603      	mov	r3, r0
 800cbec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbee:	e00c      	b.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	3320      	adds	r3, #32
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fbc8 	bl	800d38c <RCCEx_PLLSAI2_Config>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc00:	e003      	b.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	74fb      	strb	r3, [r7, #19]
      break;
 800cc06:	e000      	b.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cc08:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc0a:	7cfb      	ldrb	r3, [r7, #19]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10b      	bne.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc10:	4b76      	ldr	r3, [pc, #472]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc1e:	4973      	ldr	r1, [pc, #460]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc20:	4313      	orrs	r3, r2
 800cc22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cc26:	e001      	b.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc28:	7cfb      	ldrb	r3, [r7, #19]
 800cc2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d041      	beq.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc40:	d02a      	beq.n	800cc98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cc42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc46:	d824      	bhi.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc4c:	d008      	beq.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cc4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc52:	d81e      	bhi.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00a      	beq.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cc58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc5c:	d010      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cc5e:	e018      	b.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cc60:	4b62      	ldr	r3, [pc, #392]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	4a61      	ldr	r2, [pc, #388]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc6c:	e015      	b.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3304      	adds	r3, #4
 800cc72:	2100      	movs	r1, #0
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fa97 	bl	800d1a8 <RCCEx_PLLSAI1_Config>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc7e:	e00c      	b.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3320      	adds	r3, #32
 800cc84:	2100      	movs	r1, #0
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fb80 	bl	800d38c <RCCEx_PLLSAI2_Config>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc90:	e003      	b.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	74fb      	strb	r3, [r7, #19]
      break;
 800cc96:	e000      	b.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800cc98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc9a:	7cfb      	ldrb	r3, [r7, #19]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10b      	bne.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cca0:	4b52      	ldr	r3, [pc, #328]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccae:	494f      	ldr	r1, [pc, #316]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ccb6:	e001      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb8:	7cfb      	ldrb	r3, [r7, #19]
 800ccba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f000 80a0 	beq.w	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccca:	2300      	movs	r3, #0
 800cccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ccce:	4b47      	ldr	r3, [pc, #284]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e000      	b.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ccde:	2300      	movs	r3, #0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00d      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cce4:	4b41      	ldr	r3, [pc, #260]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cce8:	4a40      	ldr	r2, [pc, #256]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccee:	6593      	str	r3, [r2, #88]	; 0x58
 800ccf0:	4b3e      	ldr	r3, [pc, #248]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccf8:	60bb      	str	r3, [r7, #8]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd00:	4b3b      	ldr	r3, [pc, #236]	; (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a3a      	ldr	r2, [pc, #232]	; (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd0c:	f7fa ff6e 	bl	8007bec <HAL_GetTick>
 800cd10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd12:	e009      	b.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd14:	f7fa ff6a 	bl	8007bec <HAL_GetTick>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d902      	bls.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	74fb      	strb	r3, [r7, #19]
        break;
 800cd26:	e005      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd28:	4b31      	ldr	r3, [pc, #196]	; (800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0ef      	beq.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800cd34:	7cfb      	ldrb	r3, [r7, #19]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d15c      	bne.n	800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd3a:	4b2c      	ldr	r3, [pc, #176]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01f      	beq.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d019      	beq.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd58:	4b24      	ldr	r3, [pc, #144]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd64:	4b21      	ldr	r3, [pc, #132]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd6a:	4a20      	ldr	r2, [pc, #128]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd74:	4b1d      	ldr	r3, [pc, #116]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd7a:	4a1c      	ldr	r2, [pc, #112]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cd84:	4a19      	ldr	r2, [pc, #100]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d016      	beq.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd96:	f7fa ff29 	bl	8007bec <HAL_GetTick>
 800cd9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd9c:	e00b      	b.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd9e:	f7fa ff25 	bl	8007bec <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d902      	bls.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	74fb      	strb	r3, [r7, #19]
            break;
 800cdb4:	e006      	b.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdb6:	4b0d      	ldr	r3, [pc, #52]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdbc:	f003 0302 	and.w	r3, r3, #2
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0ec      	beq.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cdc4:	7cfb      	ldrb	r3, [r7, #19]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10c      	bne.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdca:	4b08      	ldr	r3, [pc, #32]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdda:	4904      	ldr	r1, [pc, #16]	; (800cdec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cddc:	4313      	orrs	r3, r2
 800cdde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cde2:	e009      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cde4:	7cfb      	ldrb	r3, [r7, #19]
 800cde6:	74bb      	strb	r3, [r7, #18]
 800cde8:	e006      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cdea:	bf00      	nop
 800cdec:	40021000 	.word	0x40021000
 800cdf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf4:	7cfb      	ldrb	r3, [r7, #19]
 800cdf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdf8:	7c7b      	ldrb	r3, [r7, #17]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d105      	bne.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdfe:	4ba6      	ldr	r3, [pc, #664]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce02:	4aa5      	ldr	r2, [pc, #660]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00a      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce16:	4ba0      	ldr	r3, [pc, #640]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce1c:	f023 0203 	bic.w	r2, r3, #3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	499c      	ldr	r1, [pc, #624]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00a      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce38:	4b97      	ldr	r3, [pc, #604]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce3e:	f023 020c 	bic.w	r2, r3, #12
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce46:	4994      	ldr	r1, [pc, #592]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 0304 	and.w	r3, r3, #4
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00a      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce5a:	4b8f      	ldr	r3, [pc, #572]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce68:	498b      	ldr	r1, [pc, #556]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0308 	and.w	r3, r3, #8
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00a      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce7c:	4b86      	ldr	r3, [pc, #536]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce8a:	4983      	ldr	r1, [pc, #524]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0310 	and.w	r3, r3, #16
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ce9e:	4b7e      	ldr	r3, [pc, #504]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceac:	497a      	ldr	r1, [pc, #488]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 0320 	and.w	r3, r3, #32
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cec0:	4b75      	ldr	r3, [pc, #468]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cece:	4972      	ldr	r1, [pc, #456]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cee2:	4b6d      	ldr	r3, [pc, #436]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cef0:	4969      	ldr	r1, [pc, #420]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00a      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf04:	4b64      	ldr	r3, [pc, #400]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf12:	4961      	ldr	r1, [pc, #388]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf14:	4313      	orrs	r3, r2
 800cf16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf26:	4b5c      	ldr	r3, [pc, #368]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf34:	4958      	ldr	r1, [pc, #352]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00a      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf48:	4b53      	ldr	r3, [pc, #332]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf56:	4950      	ldr	r1, [pc, #320]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00a      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf6a:	4b4b      	ldr	r3, [pc, #300]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf78:	4947      	ldr	r1, [pc, #284]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf8c:	4b42      	ldr	r3, [pc, #264]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf92:	f023 0203 	bic.w	r2, r3, #3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9a:	493f      	ldr	r1, [pc, #252]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d028      	beq.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cfae:	4b3a      	ldr	r3, [pc, #232]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfbc:	4936      	ldr	r1, [pc, #216]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfcc:	d106      	bne.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfce:	4b32      	ldr	r3, [pc, #200]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	4a31      	ldr	r2, [pc, #196]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfd8:	60d3      	str	r3, [r2, #12]
 800cfda:	e011      	b.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfe4:	d10c      	bne.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	2101      	movs	r1, #1
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 f8db 	bl	800d1a8 <RCCEx_PLLSAI1_Config>
 800cff2:	4603      	mov	r3, r0
 800cff4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cff6:	7cfb      	ldrb	r3, [r7, #19]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800cffc:	7cfb      	ldrb	r3, [r7, #19]
 800cffe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d028      	beq.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d00c:	4b22      	ldr	r3, [pc, #136]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01a:	491f      	ldr	r1, [pc, #124]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d01c:	4313      	orrs	r3, r2
 800d01e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d02a:	d106      	bne.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d02c:	4b1a      	ldr	r3, [pc, #104]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	4a19      	ldr	r2, [pc, #100]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d036:	60d3      	str	r3, [r2, #12]
 800d038:	e011      	b.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d03e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d042:	d10c      	bne.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3304      	adds	r3, #4
 800d048:	2101      	movs	r1, #1
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 f8ac 	bl	800d1a8 <RCCEx_PLLSAI1_Config>
 800d050:	4603      	mov	r3, r0
 800d052:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d054:	7cfb      	ldrb	r3, [r7, #19]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800d05a:	7cfb      	ldrb	r3, [r7, #19]
 800d05c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d02a      	beq.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d06a:	4b0b      	ldr	r3, [pc, #44]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d070:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d078:	4907      	ldr	r1, [pc, #28]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d07a:	4313      	orrs	r3, r2
 800d07c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d088:	d108      	bne.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d08a:	4b03      	ldr	r3, [pc, #12]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	4a02      	ldr	r2, [pc, #8]	; (800d098 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d094:	60d3      	str	r3, [r2, #12]
 800d096:	e013      	b.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800d098:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0a4:	d10c      	bne.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	2101      	movs	r1, #1
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 f87b 	bl	800d1a8 <RCCEx_PLLSAI1_Config>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0b6:	7cfb      	ldrb	r3, [r7, #19]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800d0bc:	7cfb      	ldrb	r3, [r7, #19]
 800d0be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d02f      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0cc:	4b2c      	ldr	r3, [pc, #176]	; (800d180 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0da:	4929      	ldr	r1, [pc, #164]	; (800d180 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0ea:	d10d      	bne.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	2102      	movs	r1, #2
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 f858 	bl	800d1a8 <RCCEx_PLLSAI1_Config>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0fc:	7cfb      	ldrb	r3, [r7, #19]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d014      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d102:	7cfb      	ldrb	r3, [r7, #19]
 800d104:	74bb      	strb	r3, [r7, #18]
 800d106:	e011      	b.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d110:	d10c      	bne.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3320      	adds	r3, #32
 800d116:	2102      	movs	r1, #2
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 f937 	bl	800d38c <RCCEx_PLLSAI2_Config>
 800d11e:	4603      	mov	r3, r0
 800d120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d122:	7cfb      	ldrb	r3, [r7, #19]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d128:	7cfb      	ldrb	r3, [r7, #19]
 800d12a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00b      	beq.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d138:	4b11      	ldr	r3, [pc, #68]	; (800d180 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d13e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d148:	490d      	ldr	r1, [pc, #52]	; (800d180 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d14a:	4313      	orrs	r3, r2
 800d14c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d15c:	4b08      	ldr	r3, [pc, #32]	; (800d180 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d16c:	4904      	ldr	r1, [pc, #16]	; (800d180 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d174:	7cbb      	ldrb	r3, [r7, #18]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	40021000 	.word	0x40021000

0800d184 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800d184:	b480      	push	{r7}
 800d186:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800d188:	4b06      	ldr	r3, [pc, #24]	; (800d1a4 <HAL_RCCEx_EnableLSECSS+0x20>)
 800d18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18e:	4a05      	ldr	r2, [pc, #20]	; (800d1a4 <HAL_RCCEx_EnableLSECSS+0x20>)
 800d190:	f043 0320 	orr.w	r3, r3, #32
 800d194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d198:	bf00      	nop
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	40021000 	.word	0x40021000

0800d1a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d1b6:	4b74      	ldr	r3, [pc, #464]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f003 0303 	and.w	r3, r3, #3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d018      	beq.n	800d1f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d1c2:	4b71      	ldr	r3, [pc, #452]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f003 0203 	and.w	r2, r3, #3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d10d      	bne.n	800d1ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
       ||
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d009      	beq.n	800d1ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d1da:	4b6b      	ldr	r3, [pc, #428]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	091b      	lsrs	r3, r3, #4
 800d1e0:	f003 0307 	and.w	r3, r3, #7
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
       ||
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d047      	beq.n	800d27e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	73fb      	strb	r3, [r7, #15]
 800d1f2:	e044      	b.n	800d27e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d018      	beq.n	800d22e <RCCEx_PLLSAI1_Config+0x86>
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d825      	bhi.n	800d24c <RCCEx_PLLSAI1_Config+0xa4>
 800d200:	2b01      	cmp	r3, #1
 800d202:	d002      	beq.n	800d20a <RCCEx_PLLSAI1_Config+0x62>
 800d204:	2b02      	cmp	r3, #2
 800d206:	d009      	beq.n	800d21c <RCCEx_PLLSAI1_Config+0x74>
 800d208:	e020      	b.n	800d24c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d20a:	4b5f      	ldr	r3, [pc, #380]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 0302 	and.w	r3, r3, #2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d11d      	bne.n	800d252 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d21a:	e01a      	b.n	800d252 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d21c:	4b5a      	ldr	r3, [pc, #360]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d224:	2b00      	cmp	r3, #0
 800d226:	d116      	bne.n	800d256 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d22c:	e013      	b.n	800d256 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d22e:	4b56      	ldr	r3, [pc, #344]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10f      	bne.n	800d25a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d23a:	4b53      	ldr	r3, [pc, #332]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d109      	bne.n	800d25a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d24a:	e006      	b.n	800d25a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	73fb      	strb	r3, [r7, #15]
      break;
 800d250:	e004      	b.n	800d25c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d252:	bf00      	nop
 800d254:	e002      	b.n	800d25c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d256:	bf00      	nop
 800d258:	e000      	b.n	800d25c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d25a:	bf00      	nop
    }

    if(status == HAL_OK)
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10d      	bne.n	800d27e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d262:	4b49      	ldr	r3, [pc, #292]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6819      	ldr	r1, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	3b01      	subs	r3, #1
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	430b      	orrs	r3, r1
 800d278:	4943      	ldr	r1, [pc, #268]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d27a:	4313      	orrs	r3, r2
 800d27c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d17c      	bne.n	800d37e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d284:	4b40      	ldr	r3, [pc, #256]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a3f      	ldr	r2, [pc, #252]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d28a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d28e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d290:	f7fa fcac 	bl	8007bec <HAL_GetTick>
 800d294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d296:	e009      	b.n	800d2ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d298:	f7fa fca8 	bl	8007bec <HAL_GetTick>
 800d29c:	4602      	mov	r2, r0
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d902      	bls.n	800d2ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	73fb      	strb	r3, [r7, #15]
        break;
 800d2aa:	e005      	b.n	800d2b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d2ac:	4b36      	ldr	r3, [pc, #216]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1ef      	bne.n	800d298 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d15f      	bne.n	800d37e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d110      	bne.n	800d2e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2c4:	4b30      	ldr	r3, [pc, #192]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d2cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	6892      	ldr	r2, [r2, #8]
 800d2d4:	0211      	lsls	r1, r2, #8
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	68d2      	ldr	r2, [r2, #12]
 800d2da:	06d2      	lsls	r2, r2, #27
 800d2dc:	430a      	orrs	r2, r1
 800d2de:	492a      	ldr	r1, [pc, #168]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	610b      	str	r3, [r1, #16]
 800d2e4:	e027      	b.n	800d336 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d112      	bne.n	800d312 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2ec:	4b26      	ldr	r3, [pc, #152]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d2f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	6892      	ldr	r2, [r2, #8]
 800d2fc:	0211      	lsls	r1, r2, #8
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	6912      	ldr	r2, [r2, #16]
 800d302:	0852      	lsrs	r2, r2, #1
 800d304:	3a01      	subs	r2, #1
 800d306:	0552      	lsls	r2, r2, #21
 800d308:	430a      	orrs	r2, r1
 800d30a:	491f      	ldr	r1, [pc, #124]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d30c:	4313      	orrs	r3, r2
 800d30e:	610b      	str	r3, [r1, #16]
 800d310:	e011      	b.n	800d336 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d312:	4b1d      	ldr	r3, [pc, #116]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d31a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	6892      	ldr	r2, [r2, #8]
 800d322:	0211      	lsls	r1, r2, #8
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	6952      	ldr	r2, [r2, #20]
 800d328:	0852      	lsrs	r2, r2, #1
 800d32a:	3a01      	subs	r2, #1
 800d32c:	0652      	lsls	r2, r2, #25
 800d32e:	430a      	orrs	r2, r1
 800d330:	4915      	ldr	r1, [pc, #84]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d332:	4313      	orrs	r3, r2
 800d334:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d336:	4b14      	ldr	r3, [pc, #80]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a13      	ldr	r2, [pc, #76]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d33c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d340:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d342:	f7fa fc53 	bl	8007bec <HAL_GetTick>
 800d346:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d348:	e009      	b.n	800d35e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d34a:	f7fa fc4f 	bl	8007bec <HAL_GetTick>
 800d34e:	4602      	mov	r2, r0
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	2b02      	cmp	r3, #2
 800d356:	d902      	bls.n	800d35e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d358:	2303      	movs	r3, #3
 800d35a:	73fb      	strb	r3, [r7, #15]
          break;
 800d35c:	e005      	b.n	800d36a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d35e:	4b0a      	ldr	r3, [pc, #40]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0ef      	beq.n	800d34a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d106      	bne.n	800d37e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d372:	691a      	ldr	r2, [r3, #16]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	4903      	ldr	r1, [pc, #12]	; (800d388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d37a:	4313      	orrs	r3, r2
 800d37c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	40021000 	.word	0x40021000

0800d38c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d39a:	4b69      	ldr	r3, [pc, #420]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	f003 0303 	and.w	r3, r3, #3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d018      	beq.n	800d3d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d3a6:	4b66      	ldr	r3, [pc, #408]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	f003 0203 	and.w	r2, r3, #3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d10d      	bne.n	800d3d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
       ||
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d009      	beq.n	800d3d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d3be:	4b60      	ldr	r3, [pc, #384]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	091b      	lsrs	r3, r3, #4
 800d3c4:	f003 0307 	and.w	r3, r3, #7
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
       ||
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d047      	beq.n	800d462 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	73fb      	strb	r3, [r7, #15]
 800d3d6:	e044      	b.n	800d462 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b03      	cmp	r3, #3
 800d3de:	d018      	beq.n	800d412 <RCCEx_PLLSAI2_Config+0x86>
 800d3e0:	2b03      	cmp	r3, #3
 800d3e2:	d825      	bhi.n	800d430 <RCCEx_PLLSAI2_Config+0xa4>
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d002      	beq.n	800d3ee <RCCEx_PLLSAI2_Config+0x62>
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d009      	beq.n	800d400 <RCCEx_PLLSAI2_Config+0x74>
 800d3ec:	e020      	b.n	800d430 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d3ee:	4b54      	ldr	r3, [pc, #336]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d11d      	bne.n	800d436 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d3fe:	e01a      	b.n	800d436 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d400:	4b4f      	ldr	r3, [pc, #316]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d116      	bne.n	800d43a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d410:	e013      	b.n	800d43a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d412:	4b4b      	ldr	r3, [pc, #300]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10f      	bne.n	800d43e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d41e:	4b48      	ldr	r3, [pc, #288]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d109      	bne.n	800d43e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d42e:	e006      	b.n	800d43e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]
      break;
 800d434:	e004      	b.n	800d440 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d436:	bf00      	nop
 800d438:	e002      	b.n	800d440 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d43a:	bf00      	nop
 800d43c:	e000      	b.n	800d440 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d43e:	bf00      	nop
    }

    if(status == HAL_OK)
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d446:	4b3e      	ldr	r3, [pc, #248]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6819      	ldr	r1, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	3b01      	subs	r3, #1
 800d458:	011b      	lsls	r3, r3, #4
 800d45a:	430b      	orrs	r3, r1
 800d45c:	4938      	ldr	r1, [pc, #224]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d45e:	4313      	orrs	r3, r2
 800d460:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d462:	7bfb      	ldrb	r3, [r7, #15]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d166      	bne.n	800d536 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d468:	4b35      	ldr	r3, [pc, #212]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a34      	ldr	r2, [pc, #208]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d46e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d474:	f7fa fbba 	bl	8007bec <HAL_GetTick>
 800d478:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d47a:	e009      	b.n	800d490 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d47c:	f7fa fbb6 	bl	8007bec <HAL_GetTick>
 800d480:	4602      	mov	r2, r0
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	2b02      	cmp	r3, #2
 800d488:	d902      	bls.n	800d490 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	73fb      	strb	r3, [r7, #15]
        break;
 800d48e:	e005      	b.n	800d49c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d490:	4b2b      	ldr	r3, [pc, #172]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1ef      	bne.n	800d47c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d149      	bne.n	800d536 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d110      	bne.n	800d4ca <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4a8:	4b25      	ldr	r3, [pc, #148]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d4b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	6892      	ldr	r2, [r2, #8]
 800d4b8:	0211      	lsls	r1, r2, #8
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	68d2      	ldr	r2, [r2, #12]
 800d4be:	06d2      	lsls	r2, r2, #27
 800d4c0:	430a      	orrs	r2, r1
 800d4c2:	491f      	ldr	r1, [pc, #124]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	614b      	str	r3, [r1, #20]
 800d4c8:	e011      	b.n	800d4ee <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4ca:	4b1d      	ldr	r3, [pc, #116]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d4d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	6892      	ldr	r2, [r2, #8]
 800d4da:	0211      	lsls	r1, r2, #8
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	6912      	ldr	r2, [r2, #16]
 800d4e0:	0852      	lsrs	r2, r2, #1
 800d4e2:	3a01      	subs	r2, #1
 800d4e4:	0652      	lsls	r2, r2, #25
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	4915      	ldr	r1, [pc, #84]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d4ee:	4b14      	ldr	r3, [pc, #80]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a13      	ldr	r2, [pc, #76]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4fa:	f7fa fb77 	bl	8007bec <HAL_GetTick>
 800d4fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d500:	e009      	b.n	800d516 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d502:	f7fa fb73 	bl	8007bec <HAL_GetTick>
 800d506:	4602      	mov	r2, r0
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d902      	bls.n	800d516 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	73fb      	strb	r3, [r7, #15]
          break;
 800d514:	e005      	b.n	800d522 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d516:	4b0a      	ldr	r3, [pc, #40]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0ef      	beq.n	800d502 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d522:	7bfb      	ldrb	r3, [r7, #15]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d106      	bne.n	800d536 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d528:	4b05      	ldr	r3, [pc, #20]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d52a:	695a      	ldr	r2, [r3, #20]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	695b      	ldr	r3, [r3, #20]
 800d530:	4903      	ldr	r1, [pc, #12]	; (800d540 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d532:	4313      	orrs	r3, r2
 800d534:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d536:	7bfb      	ldrb	r3, [r7, #15]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	40021000 	.word	0x40021000

0800d544 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d06c      	beq.n	800d630 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d106      	bne.n	800d570 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7f9 fce0 	bl	8006f30 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	22ca      	movs	r2, #202	; 0xca
 800d57e:	625a      	str	r2, [r3, #36]	; 0x24
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2253      	movs	r2, #83	; 0x53
 800d586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fabe 	bl	800db0a <RTC_EnterInitMode>
 800d58e:	4603      	mov	r3, r0
 800d590:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d592:	7bfb      	ldrb	r3, [r7, #15]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d14b      	bne.n	800d630 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	6812      	ldr	r2, [r2, #0]
 800d5a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5aa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6899      	ldr	r1, [r3, #8]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	699b      	ldr	r3, [r3, #24]
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	68d2      	ldr	r2, [r2, #12]
 800d5d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6919      	ldr	r1, [r3, #16]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	041a      	lsls	r2, r3, #16
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fac1 	bl	800db70 <RTC_ExitInitMode>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d11b      	bne.n	800d630 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f022 0203 	bic.w	r2, r2, #3
 800d606:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	69da      	ldr	r2, [r3, #28]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	431a      	orrs	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	430a      	orrs	r2, r1
 800d61e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	22ff      	movs	r2, #255	; 0xff
 800d626:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d630:	7bfb      	ldrb	r3, [r7, #15]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <HAL_RTC_DeInit>:
  * @note   This function does not reset the RTC Backup Data registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d063      	beq.n	800d716 <HAL_RTC_DeInit+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2202      	movs	r2, #2
 800d652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	22ca      	movs	r2, #202	; 0xca
 800d65c:	625a      	str	r2, [r3, #36]	; 0x24
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2253      	movs	r2, #83	; 0x53
 800d664:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fa4f 	bl	800db0a <RTC_EnterInitMode>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d14f      	bne.n	800d716 <HAL_RTC_DeInit+0xda>
    {
      /* Reset all RTC CR register bits */
      hrtc->Instance->TR = 0x00000000U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2200      	movs	r2, #0
 800d67c:	601a      	str	r2, [r3, #0]
      hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f242 1201 	movw	r2, #8449	; 0x2101
 800d686:	605a      	str	r2, [r3, #4]
      hrtc->Instance->CR &= 0x00000000U;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2200      	movs	r2, #0
 800d694:	609a      	str	r2, [r3, #8]

      hrtc->Instance->WUTR = RTC_WUTR_WUT;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d69e:	615a      	str	r2, [r3, #20]
      hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a1e      	ldr	r2, [pc, #120]	; (800d720 <HAL_RTC_DeInit+0xe4>)
 800d6a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->ALRMAR = 0x00000000U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	61da      	str	r2, [r3, #28]
      hrtc->Instance->ALRMBR = 0x00000000U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	621a      	str	r2, [r3, #32]
      hrtc->Instance->SHIFTR = 0x00000000U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->Instance->CALR = 0x00000000U;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Instance->ALRMASSR = 0x00000000U;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Instance->ALRMBSSR = 0x00000000U;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	649a      	str	r2, [r3, #72]	; 0x48

      /* Exit initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 fa49 	bl	800db70 <RTC_ExitInitMode>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73fb      	strb	r3, [r7, #15]


      if (status == HAL_OK)
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d116      	bne.n	800d716 <HAL_RTC_DeInit+0xda>
        /* Reset TAMP registers */
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
#else
        /* Reset Tamper configuration register */
        hrtc->Instance->TAMPCR = 0x00000000U;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Reset Option register */
        hrtc->Instance->OR = 0x00000000U;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	22ff      	movs	r2, #255	; 0xff
 800d6fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* DeInit the low level hardware: CLOCK, NVIC.*/
        hrtc->MspDeInitCallback(hrtc);
#else
        /* De-Initialize RTC MSP */
        HAL_RTC_MspDeInit(hrtc);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7f9 fc47 	bl	8006f94 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

        hrtc->State = HAL_RTC_STATE_RESET;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Release Lock */
        __HAL_UNLOCK(hrtc);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2020 	strb.w	r2, [r3, #32]
      }
    }
  }

  return status;
 800d716:	7bfb      	ldrb	r3, [r7, #15]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	007f00ff 	.word	0x007f00ff

0800d724 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <HAL_RTC_SetTime+0x1a>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e08b      	b.n	800d856 <HAL_RTC_SetTime+0x132>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2202      	movs	r2, #2
 800d74a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	22ca      	movs	r2, #202	; 0xca
 800d754:	625a      	str	r2, [r3, #36]	; 0x24
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2253      	movs	r2, #83	; 0x53
 800d75c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 f9d3 	bl	800db0a <RTC_EnterInitMode>
 800d764:	4603      	mov	r3, r0
 800d766:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d768:	7cfb      	ldrb	r3, [r7, #19]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d163      	bne.n	800d836 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d126      	bne.n	800d7c2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2200      	movs	r2, #0
 800d786:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fa2d 	bl	800dbec <RTC_ByteToBcd2>
 800d792:	4603      	mov	r3, r0
 800d794:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	785b      	ldrb	r3, [r3, #1]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fa26 	bl	800dbec <RTC_ByteToBcd2>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7a4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	789b      	ldrb	r3, [r3, #2]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fa1e 	bl	800dbec <RTC_ByteToBcd2>
 800d7b0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7b2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	78db      	ldrb	r3, [r3, #3]
 800d7ba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	e018      	b.n	800d7f4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d102      	bne.n	800d7d6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	785b      	ldrb	r3, [r3, #1]
 800d7e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	78db      	ldrb	r3, [r3, #3]
 800d7ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d7fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d802:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	689a      	ldr	r2, [r3, #8]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d812:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6899      	ldr	r1, [r3, #8]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	68da      	ldr	r2, [r3, #12]
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	691b      	ldr	r3, [r3, #16]
 800d822:	431a      	orrs	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	430a      	orrs	r2, r1
 800d82a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 f99f 	bl	800db70 <RTC_ExitInitMode>
 800d832:	4603      	mov	r3, r0
 800d834:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	22ff      	movs	r2, #255	; 0xff
 800d83c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d83e:	7cfb      	ldrb	r3, [r7, #19]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d103      	bne.n	800d84c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d854:	7cfb      	ldrb	r3, [r7, #19]
}
 800d856:	4618      	mov	r0, r3
 800d858:	371c      	adds	r7, #28
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd90      	pop	{r4, r7, pc}

0800d85e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b086      	sub	sp, #24
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	691b      	ldr	r3, [r3, #16]
 800d87a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d88c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d890:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	0c1b      	lsrs	r3, r3, #16
 800d896:	b2db      	uxtb	r3, r3
 800d898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	0a1b      	lsrs	r3, r3, #8
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	0d9b      	lsrs	r3, r3, #22
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d11a      	bne.n	800d90c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 f9a6 	bl	800dc2c <RTC_Bcd2ToByte>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 f99d 	bl	800dc2c <RTC_Bcd2ToByte>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	789b      	ldrb	r3, [r3, #2]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 f994 	bl	800dc2c <RTC_Bcd2ToByte>
 800d904:	4603      	mov	r3, r0
 800d906:	461a      	mov	r2, r3
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d916:	b590      	push	{r4, r7, lr}
 800d918:	b087      	sub	sp, #28
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	60b9      	str	r1, [r7, #8]
 800d920:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d101      	bne.n	800d930 <HAL_RTC_SetDate+0x1a>
 800d92c:	2302      	movs	r3, #2
 800d92e:	e075      	b.n	800da1c <HAL_RTC_SetDate+0x106>
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2202      	movs	r2, #2
 800d93c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10e      	bne.n	800d964 <HAL_RTC_SetDate+0x4e>
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	785b      	ldrb	r3, [r3, #1]
 800d94a:	f003 0310 	and.w	r3, r3, #16
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d008      	beq.n	800d964 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	785b      	ldrb	r3, [r3, #1]
 800d956:	f023 0310 	bic.w	r3, r3, #16
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	330a      	adds	r3, #10
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d11c      	bne.n	800d9a4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	78db      	ldrb	r3, [r3, #3]
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 f93c 	bl	800dbec <RTC_ByteToBcd2>
 800d974:	4603      	mov	r3, r0
 800d976:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	785b      	ldrb	r3, [r3, #1]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 f935 	bl	800dbec <RTC_ByteToBcd2>
 800d982:	4603      	mov	r3, r0
 800d984:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d986:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	789b      	ldrb	r3, [r3, #2]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f000 f92d 	bl	800dbec <RTC_ByteToBcd2>
 800d992:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d994:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	e00e      	b.n	800d9c2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	78db      	ldrb	r3, [r3, #3]
 800d9a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9b0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d9b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	22ca      	movs	r2, #202	; 0xca
 800d9c8:	625a      	str	r2, [r3, #36]	; 0x24
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2253      	movs	r2, #83	; 0x53
 800d9d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 f899 	bl	800db0a <RTC_EnterInitMode>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d9dc:	7cfb      	ldrb	r3, [r7, #19]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10c      	bne.n	800d9fc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 f8bc 	bl	800db70 <RTC_ExitInitMode>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	22ff      	movs	r2, #255	; 0xff
 800da02:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da04:	7cfb      	ldrb	r3, [r7, #19]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d103      	bne.n	800da12 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da1a:	7cfb      	ldrb	r3, [r7, #19]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	371c      	adds	r7, #28
 800da20:	46bd      	mov	sp, r7
 800da22:	bd90      	pop	{r4, r7, pc}

0800da24 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	0c1b      	lsrs	r3, r3, #16
 800da44:	b2da      	uxtb	r2, r3
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	0a1b      	lsrs	r3, r3, #8
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 031f 	and.w	r3, r3, #31
 800da54:	b2da      	uxtb	r2, r3
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da62:	b2da      	uxtb	r2, r3
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	0b5b      	lsrs	r3, r3, #13
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	b2da      	uxtb	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d11a      	bne.n	800dab4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	78db      	ldrb	r3, [r3, #3]
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f8d2 	bl	800dc2c <RTC_Bcd2ToByte>
 800da88:	4603      	mov	r3, r0
 800da8a:	461a      	mov	r2, r3
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	785b      	ldrb	r3, [r3, #1]
 800da94:	4618      	mov	r0, r3
 800da96:	f000 f8c9 	bl	800dc2c <RTC_Bcd2ToByte>
 800da9a:	4603      	mov	r3, r0
 800da9c:	461a      	mov	r2, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	789b      	ldrb	r3, [r3, #2]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 f8c0 	bl	800dc2c <RTC_Bcd2ToByte>
 800daac:	4603      	mov	r3, r0
 800daae:	461a      	mov	r2, r3
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	68da      	ldr	r2, [r3, #12]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dad4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800dad6:	f7fa f889 	bl	8007bec <HAL_GetTick>
 800dada:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dadc:	e009      	b.n	800daf2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dade:	f7fa f885 	bl	8007bec <HAL_GetTick>
 800dae2:	4602      	mov	r2, r0
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daec:	d901      	bls.n	800daf2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e007      	b.n	800db02 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	f003 0320 	and.w	r3, r3, #32
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0ee      	beq.n	800dade <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d120      	bne.n	800db66 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f04f 32ff 	mov.w	r2, #4294967295
 800db2c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800db2e:	f7fa f85d 	bl	8007bec <HAL_GetTick>
 800db32:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db34:	e00d      	b.n	800db52 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800db36:	f7fa f859 	bl	8007bec <HAL_GetTick>
 800db3a:	4602      	mov	r2, r0
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db44:	d905      	bls.n	800db52 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800db46:	2303      	movs	r3, #3
 800db48:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2203      	movs	r2, #3
 800db4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <RTC_EnterInitMode+0x5c>
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	2b03      	cmp	r3, #3
 800db64:	d1e7      	bne.n	800db36 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db78:	2300      	movs	r3, #0
 800db7a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800db7c:	4b1a      	ldr	r3, [pc, #104]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	4a19      	ldr	r2, [pc, #100]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800db82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db86:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800db88:	4b17      	ldr	r3, [pc, #92]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	f003 0320 	and.w	r3, r3, #32
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10c      	bne.n	800dbae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff ff92 	bl	800dabe <HAL_RTC_WaitForSynchro>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d01e      	beq.n	800dbde <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2203      	movs	r2, #3
 800dba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	73fb      	strb	r3, [r7, #15]
 800dbac:	e017      	b.n	800dbde <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbae:	4b0e      	ldr	r3, [pc, #56]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	4a0d      	ldr	r2, [pc, #52]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800dbb4:	f023 0320 	bic.w	r3, r3, #32
 800dbb8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff7f 	bl	800dabe <HAL_RTC_WaitForSynchro>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d005      	beq.n	800dbd2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2203      	movs	r2, #3
 800dbca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbd2:	4b05      	ldr	r3, [pc, #20]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	4a04      	ldr	r2, [pc, #16]	; (800dbe8 <RTC_ExitInitMode+0x78>)
 800dbd8:	f043 0320 	orr.w	r3, r3, #32
 800dbdc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	40002800 	.word	0x40002800

0800dbec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800dbfa:	79fb      	ldrb	r3, [r7, #7]
 800dbfc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800dbfe:	e005      	b.n	800dc0c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	3301      	adds	r3, #1
 800dc04:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800dc06:	7afb      	ldrb	r3, [r7, #11]
 800dc08:	3b0a      	subs	r3, #10
 800dc0a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800dc0c:	7afb      	ldrb	r3, [r7, #11]
 800dc0e:	2b09      	cmp	r3, #9
 800dc10:	d8f6      	bhi.n	800dc00 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	011b      	lsls	r3, r3, #4
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	7afb      	ldrb	r3, [r7, #11]
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	b2db      	uxtb	r3, r3
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3714      	adds	r7, #20
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dc36:	79fb      	ldrb	r3, [r7, #7]
 800dc38:	091b      	lsrs	r3, r3, #4
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	0092      	lsls	r2, r2, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dc46:	79fb      	ldrb	r3, [r7, #7]
 800dc48:	f003 030f 	and.w	r3, r3, #15
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
 800dc50:	4413      	add	r3, r2
 800dc52:	b2db      	uxtb	r3, r3
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3714      	adds	r7, #20
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d101      	bne.n	800dc76 <HAL_RTCEx_EnableBypassShadow+0x16>
 800dc72:	2302      	movs	r3, #2
 800dc74:	e024      	b.n	800dcc0 <HAL_RTCEx_EnableBypassShadow+0x60>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2202      	movs	r2, #2
 800dc82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	22ca      	movs	r2, #202	; 0xca
 800dc8c:	625a      	str	r2, [r3, #36]	; 0x24
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2253      	movs	r2, #83	; 0x53
 800dc94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689a      	ldr	r2, [r3, #8]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f042 0220 	orr.w	r2, r2, #32
 800dca4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	22ff      	movs	r2, #255	; 0xff
 800dcac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e095      	b.n	800de0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d108      	bne.n	800dcf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcee:	d009      	beq.n	800dd04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	61da      	str	r2, [r3, #28]
 800dcf6:	e005      	b.n	800dd04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d106      	bne.n	800dd24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7f9 f954 	bl	8006fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2202      	movs	r2, #2
 800dd28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd44:	d902      	bls.n	800dd4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd46:	2300      	movs	r3, #0
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	e002      	b.n	800dd52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd5a:	d007      	beq.n	800dd6c <HAL_SPI_Init+0xa0>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd64:	d002      	beq.n	800dd6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dd7c:	431a      	orrs	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	f003 0302 	and.w	r3, r3, #2
 800dd86:	431a      	orrs	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dda4:	431a      	orrs	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddae:	ea42 0103 	orr.w	r1, r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	430a      	orrs	r2, r1
 800ddc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	0c1b      	lsrs	r3, r3, #16
 800ddc8:	f003 0204 	and.w	r2, r3, #4
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	f003 0310 	and.w	r3, r3, #16
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddda:	f003 0308 	and.w	r3, r3, #8
 800ddde:	431a      	orrs	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dde8:	ea42 0103 	orr.w	r1, r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b088      	sub	sp, #32
 800de16:	af00      	add	r7, sp, #0
 800de18:	60f8      	str	r0, [r7, #12]
 800de1a:	60b9      	str	r1, [r7, #8]
 800de1c:	603b      	str	r3, [r7, #0]
 800de1e:	4613      	mov	r3, r2
 800de20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d101      	bne.n	800de34 <HAL_SPI_Transmit+0x22>
 800de30:	2302      	movs	r3, #2
 800de32:	e158      	b.n	800e0e6 <HAL_SPI_Transmit+0x2d4>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de3c:	f7f9 fed6 	bl	8007bec <HAL_GetTick>
 800de40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de42:	88fb      	ldrh	r3, [r7, #6]
 800de44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d002      	beq.n	800de58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de52:	2302      	movs	r3, #2
 800de54:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de56:	e13d      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <HAL_SPI_Transmit+0x52>
 800de5e:	88fb      	ldrh	r3, [r7, #6]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d102      	bne.n	800de6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de68:	e134      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2203      	movs	r2, #3
 800de6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	88fa      	ldrh	r2, [r7, #6]
 800de82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	88fa      	ldrh	r2, [r7, #6]
 800de88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2200      	movs	r2, #0
 800dea4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deb4:	d10f      	bne.n	800ded6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ded4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dee0:	2b40      	cmp	r3, #64	; 0x40
 800dee2:	d007      	beq.n	800def4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800def2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800defc:	d94b      	bls.n	800df96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d002      	beq.n	800df0c <HAL_SPI_Transmit+0xfa>
 800df06:	8afb      	ldrh	r3, [r7, #22]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d13e      	bne.n	800df8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df10:	881a      	ldrh	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1c:	1c9a      	adds	r2, r3, #2
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df26:	b29b      	uxth	r3, r3
 800df28:	3b01      	subs	r3, #1
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df30:	e02b      	b.n	800df8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d112      	bne.n	800df66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df44:	881a      	ldrh	r2, [r3, #0]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	1c9a      	adds	r2, r3, #2
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	3b01      	subs	r3, #1
 800df5e:	b29a      	uxth	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df64:	e011      	b.n	800df8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df66:	f7f9 fe41 	bl	8007bec <HAL_GetTick>
 800df6a:	4602      	mov	r2, r0
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d803      	bhi.n	800df7e <HAL_SPI_Transmit+0x16c>
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7c:	d102      	bne.n	800df84 <HAL_SPI_Transmit+0x172>
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d102      	bne.n	800df8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800df84:	2303      	movs	r3, #3
 800df86:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df88:	e0a4      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df8e:	b29b      	uxth	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1ce      	bne.n	800df32 <HAL_SPI_Transmit+0x120>
 800df94:	e07c      	b.n	800e090 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <HAL_SPI_Transmit+0x192>
 800df9e:	8afb      	ldrh	r3, [r7, #22]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d170      	bne.n	800e086 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d912      	bls.n	800dfd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb2:	881a      	ldrh	r2, [r3, #0]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	1c9a      	adds	r2, r3, #2
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	3b02      	subs	r3, #2
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dfd2:	e058      	b.n	800e086 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	330c      	adds	r3, #12
 800dfde:	7812      	ldrb	r2, [r2, #0]
 800dfe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3b01      	subs	r3, #1
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800dffa:	e044      	b.n	800e086 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f003 0302 	and.w	r3, r3, #2
 800e006:	2b02      	cmp	r3, #2
 800e008:	d12b      	bne.n	800e062 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e00e:	b29b      	uxth	r3, r3
 800e010:	2b01      	cmp	r3, #1
 800e012:	d912      	bls.n	800e03a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e018:	881a      	ldrh	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e024:	1c9a      	adds	r2, r3, #2
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e02e:	b29b      	uxth	r3, r3
 800e030:	3b02      	subs	r3, #2
 800e032:	b29a      	uxth	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e038:	e025      	b.n	800e086 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	330c      	adds	r3, #12
 800e044:	7812      	ldrb	r2, [r2, #0]
 800e046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e056:	b29b      	uxth	r3, r3
 800e058:	3b01      	subs	r3, #1
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e060:	e011      	b.n	800e086 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e062:	f7f9 fdc3 	bl	8007bec <HAL_GetTick>
 800e066:	4602      	mov	r2, r0
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d803      	bhi.n	800e07a <HAL_SPI_Transmit+0x268>
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e078:	d102      	bne.n	800e080 <HAL_SPI_Transmit+0x26e>
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d102      	bne.n	800e086 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e080:	2303      	movs	r3, #3
 800e082:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e084:	e026      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1b5      	bne.n	800dffc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f000 fcdf 	bl	800ea58 <SPI_EndRxTxTransaction>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2220      	movs	r2, #32
 800e0a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	613b      	str	r3, [r7, #16]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	613b      	str	r3, [r7, #16]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	613b      	str	r3, [r7, #16]
 800e0c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	77fb      	strb	r3, [r7, #31]
 800e0d0:	e000      	b.n	800e0d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e0d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e0e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b088      	sub	sp, #32
 800e0f2:	af02      	add	r7, sp, #8
 800e0f4:	60f8      	str	r0, [r7, #12]
 800e0f6:	60b9      	str	r1, [r7, #8]
 800e0f8:	603b      	str	r3, [r7, #0]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e10a:	d112      	bne.n	800e132 <HAL_SPI_Receive+0x44>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10e      	bne.n	800e132 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2204      	movs	r2, #4
 800e118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e11c:	88fa      	ldrh	r2, [r7, #6]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	4613      	mov	r3, r2
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 f910 	bl	800e34e <HAL_SPI_TransmitReceive>
 800e12e:	4603      	mov	r3, r0
 800e130:	e109      	b.n	800e346 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d101      	bne.n	800e140 <HAL_SPI_Receive+0x52>
 800e13c:	2302      	movs	r3, #2
 800e13e:	e102      	b.n	800e346 <HAL_SPI_Receive+0x258>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e148:	f7f9 fd50 	bl	8007bec <HAL_GetTick>
 800e14c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2b01      	cmp	r3, #1
 800e158:	d002      	beq.n	800e160 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e15a:	2302      	movs	r3, #2
 800e15c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e15e:	e0e9      	b.n	800e334 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d002      	beq.n	800e16c <HAL_SPI_Receive+0x7e>
 800e166:	88fb      	ldrh	r3, [r7, #6]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d102      	bne.n	800e172 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e170:	e0e0      	b.n	800e334 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2204      	movs	r2, #4
 800e176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	88fa      	ldrh	r2, [r7, #6]
 800e18a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	88fa      	ldrh	r2, [r7, #6]
 800e192:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1bc:	d908      	bls.n	800e1d0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1cc:	605a      	str	r2, [r3, #4]
 800e1ce:	e007      	b.n	800e1e0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1de:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1e8:	d10f      	bne.n	800e20a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e208:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e214:	2b40      	cmp	r3, #64	; 0x40
 800e216:	d007      	beq.n	800e228 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e226:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e230:	d867      	bhi.n	800e302 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e232:	e030      	b.n	800e296 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f003 0301 	and.w	r3, r3, #1
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d117      	bne.n	800e272 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f103 020c 	add.w	r2, r3, #12
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	7812      	ldrb	r2, [r2, #0]
 800e250:	b2d2      	uxtb	r2, r2
 800e252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e264:	b29b      	uxth	r3, r3
 800e266:	3b01      	subs	r3, #1
 800e268:	b29a      	uxth	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e270:	e011      	b.n	800e296 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e272:	f7f9 fcbb 	bl	8007bec <HAL_GetTick>
 800e276:	4602      	mov	r2, r0
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d803      	bhi.n	800e28a <HAL_SPI_Receive+0x19c>
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e288:	d102      	bne.n	800e290 <HAL_SPI_Receive+0x1a2>
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e290:	2303      	movs	r3, #3
 800e292:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e294:	e04e      	b.n	800e334 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1c8      	bne.n	800e234 <HAL_SPI_Receive+0x146>
 800e2a2:	e034      	b.n	800e30e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	f003 0301 	and.w	r3, r3, #1
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d115      	bne.n	800e2de <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2bc:	b292      	uxth	r2, r2
 800e2be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c4:	1c9a      	adds	r2, r3, #2
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e2dc:	e011      	b.n	800e302 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2de:	f7f9 fc85 	bl	8007bec <HAL_GetTick>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d803      	bhi.n	800e2f6 <HAL_SPI_Receive+0x208>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f4:	d102      	bne.n	800e2fc <HAL_SPI_Receive+0x20e>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e300:	e018      	b.n	800e334 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e308:	b29b      	uxth	r3, r3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1ca      	bne.n	800e2a4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e30e:	693a      	ldr	r2, [r7, #16]
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 fb48 	bl	800e9a8 <SPI_EndRxTransaction>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2220      	movs	r2, #32
 800e322:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	75fb      	strb	r3, [r7, #23]
 800e330:	e000      	b.n	800e334 <HAL_SPI_Receive+0x246>
  }

error :
 800e332:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e344:	7dfb      	ldrb	r3, [r7, #23]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b08a      	sub	sp, #40	; 0x28
 800e352:	af00      	add	r7, sp, #0
 800e354:	60f8      	str	r0, [r7, #12]
 800e356:	60b9      	str	r1, [r7, #8]
 800e358:	607a      	str	r2, [r7, #4]
 800e35a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e35c:	2301      	movs	r3, #1
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e360:	2300      	movs	r3, #0
 800e362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d101      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x26>
 800e370:	2302      	movs	r3, #2
 800e372:	e1fb      	b.n	800e76c <HAL_SPI_TransmitReceive+0x41e>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e37c:	f7f9 fc36 	bl	8007bec <HAL_GetTick>
 800e380:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e388:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e390:	887b      	ldrh	r3, [r7, #2]
 800e392:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e394:	887b      	ldrh	r3, [r7, #2]
 800e396:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e398:	7efb      	ldrb	r3, [r7, #27]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d00e      	beq.n	800e3bc <HAL_SPI_TransmitReceive+0x6e>
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3a4:	d106      	bne.n	800e3b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d102      	bne.n	800e3b4 <HAL_SPI_TransmitReceive+0x66>
 800e3ae:	7efb      	ldrb	r3, [r7, #27]
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	d003      	beq.n	800e3bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3ba:	e1cd      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d005      	beq.n	800e3ce <HAL_SPI_TransmitReceive+0x80>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <HAL_SPI_TransmitReceive+0x80>
 800e3c8:	887b      	ldrh	r3, [r7, #2]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d103      	bne.n	800e3d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3d4:	e1c0      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	2b04      	cmp	r3, #4
 800e3e0:	d003      	beq.n	800e3ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2205      	movs	r2, #5
 800e3e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	887a      	ldrh	r2, [r7, #2]
 800e3fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	887a      	ldrh	r2, [r7, #2]
 800e402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	68ba      	ldr	r2, [r7, #8]
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	887a      	ldrh	r2, [r7, #2]
 800e410:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	887a      	ldrh	r2, [r7, #2]
 800e416:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e42c:	d802      	bhi.n	800e434 <HAL_SPI_TransmitReceive+0xe6>
 800e42e:	8a3b      	ldrh	r3, [r7, #16]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d908      	bls.n	800e446 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	685a      	ldr	r2, [r3, #4]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e442:	605a      	str	r2, [r3, #4]
 800e444:	e007      	b.n	800e456 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e454:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e460:	2b40      	cmp	r3, #64	; 0x40
 800e462:	d007      	beq.n	800e474 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e47c:	d97c      	bls.n	800e578 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <HAL_SPI_TransmitReceive+0x13e>
 800e486:	8a7b      	ldrh	r3, [r7, #18]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d169      	bne.n	800e560 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	881a      	ldrh	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49c:	1c9a      	adds	r2, r3, #2
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4b0:	e056      	b.n	800e560 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f003 0302 	and.w	r3, r3, #2
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d11b      	bne.n	800e4f8 <HAL_SPI_TransmitReceive+0x1aa>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d016      	beq.n	800e4f8 <HAL_SPI_TransmitReceive+0x1aa>
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d113      	bne.n	800e4f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d4:	881a      	ldrh	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e0:	1c9a      	adds	r2, r3, #2
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	f003 0301 	and.w	r3, r3, #1
 800e502:	2b01      	cmp	r3, #1
 800e504:	d11c      	bne.n	800e540 <HAL_SPI_TransmitReceive+0x1f2>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d016      	beq.n	800e540 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68da      	ldr	r2, [r3, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51c:	b292      	uxth	r2, r2
 800e51e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e524:	1c9a      	adds	r2, r3, #2
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e530:	b29b      	uxth	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	b29a      	uxth	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e53c:	2301      	movs	r3, #1
 800e53e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e540:	f7f9 fb54 	bl	8007bec <HAL_GetTick>
 800e544:	4602      	mov	r2, r0
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d807      	bhi.n	800e560 <HAL_SPI_TransmitReceive+0x212>
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d003      	beq.n	800e560 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e558:	2303      	movs	r3, #3
 800e55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e55e:	e0fb      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e564:	b29b      	uxth	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1a3      	bne.n	800e4b2 <HAL_SPI_TransmitReceive+0x164>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e570:	b29b      	uxth	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	d19d      	bne.n	800e4b2 <HAL_SPI_TransmitReceive+0x164>
 800e576:	e0df      	b.n	800e738 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d003      	beq.n	800e588 <HAL_SPI_TransmitReceive+0x23a>
 800e580:	8a7b      	ldrh	r3, [r7, #18]
 800e582:	2b01      	cmp	r3, #1
 800e584:	f040 80cb 	bne.w	800e71e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d912      	bls.n	800e5b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e596:	881a      	ldrh	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a2:	1c9a      	adds	r2, r3, #2
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	3b02      	subs	r3, #2
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5b6:	e0b2      	b.n	800e71e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	7812      	ldrb	r2, [r2, #0]
 800e5c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ca:	1c5a      	adds	r2, r3, #1
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5de:	e09e      	b.n	800e71e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f003 0302 	and.w	r3, r3, #2
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d134      	bne.n	800e658 <HAL_SPI_TransmitReceive+0x30a>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d02f      	beq.n	800e658 <HAL_SPI_TransmitReceive+0x30a>
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d12c      	bne.n	800e658 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e602:	b29b      	uxth	r3, r3
 800e604:	2b01      	cmp	r3, #1
 800e606:	d912      	bls.n	800e62e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60c:	881a      	ldrh	r2, [r3, #0]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e618:	1c9a      	adds	r2, r3, #2
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e622:	b29b      	uxth	r3, r3
 800e624:	3b02      	subs	r3, #2
 800e626:	b29a      	uxth	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e62c:	e012      	b.n	800e654 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	330c      	adds	r3, #12
 800e638:	7812      	ldrb	r2, [r2, #0]
 800e63a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	3b01      	subs	r3, #1
 800e64e:	b29a      	uxth	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e654:	2300      	movs	r3, #0
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b01      	cmp	r3, #1
 800e664:	d148      	bne.n	800e6f8 <HAL_SPI_TransmitReceive+0x3aa>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d042      	beq.n	800e6f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d923      	bls.n	800e6c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e688:	b292      	uxth	r2, r2
 800e68a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e690:	1c9a      	adds	r2, r3, #2
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	3b02      	subs	r3, #2
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d81f      	bhi.n	800e6f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e6c2:	605a      	str	r2, [r3, #4]
 800e6c4:	e016      	b.n	800e6f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f103 020c 	add.w	r2, r3, #12
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	7812      	ldrb	r2, [r2, #0]
 800e6d4:	b2d2      	uxtb	r2, r2
 800e6d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e6f8:	f7f9 fa78 	bl	8007bec <HAL_GetTick>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e704:	429a      	cmp	r2, r3
 800e706:	d803      	bhi.n	800e710 <HAL_SPI_TransmitReceive+0x3c2>
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e70e:	d102      	bne.n	800e716 <HAL_SPI_TransmitReceive+0x3c8>
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e716:	2303      	movs	r3, #3
 800e718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e71c:	e01c      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e722:	b29b      	uxth	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	f47f af5b 	bne.w	800e5e0 <HAL_SPI_TransmitReceive+0x292>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e730:	b29b      	uxth	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	f47f af54 	bne.w	800e5e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f98b 	bl	800ea58 <SPI_EndRxTxTransaction>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d006      	beq.n	800e756 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2220      	movs	r2, #32
 800e752:	661a      	str	r2, [r3, #96]	; 0x60
 800e754:	e000      	b.n	800e758 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e756:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3728      	adds	r7, #40	; 0x28
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b088      	sub	sp, #32
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e784:	f7f9 fa32 	bl	8007bec <HAL_GetTick>
 800e788:	4602      	mov	r2, r0
 800e78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78c:	1a9b      	subs	r3, r3, r2
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	4413      	add	r3, r2
 800e792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e794:	f7f9 fa2a 	bl	8007bec <HAL_GetTick>
 800e798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e79a:	4b39      	ldr	r3, [pc, #228]	; (800e880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	015b      	lsls	r3, r3, #5
 800e7a0:	0d1b      	lsrs	r3, r3, #20
 800e7a2:	69fa      	ldr	r2, [r7, #28]
 800e7a4:	fb02 f303 	mul.w	r3, r2, r3
 800e7a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7aa:	e054      	b.n	800e856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b2:	d050      	beq.n	800e856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e7b4:	f7f9 fa1a 	bl	8007bec <HAL_GetTick>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d902      	bls.n	800e7ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d13d      	bne.n	800e846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7e2:	d111      	bne.n	800e808 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7ec:	d004      	beq.n	800e7f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7f6:	d107      	bne.n	800e808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e810:	d10f      	bne.n	800e832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e842:	2303      	movs	r3, #3
 800e844:	e017      	b.n	800e876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	3b01      	subs	r3, #1
 800e854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	689a      	ldr	r2, [r3, #8]
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	4013      	ands	r3, r2
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	429a      	cmp	r2, r3
 800e864:	bf0c      	ite	eq
 800e866:	2301      	moveq	r3, #1
 800e868:	2300      	movne	r3, #0
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	461a      	mov	r2, r3
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	429a      	cmp	r2, r3
 800e872:	d19b      	bne.n	800e7ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e874:	2300      	movs	r3, #0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3720      	adds	r7, #32
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	200002e0 	.word	0x200002e0

0800e884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b088      	sub	sp, #32
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e892:	f7f9 f9ab 	bl	8007bec <HAL_GetTick>
 800e896:	4602      	mov	r2, r0
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	683a      	ldr	r2, [r7, #0]
 800e89e:	4413      	add	r3, r2
 800e8a0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e8a2:	f7f9 f9a3 	bl	8007bec <HAL_GetTick>
 800e8a6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8a8:	4b3e      	ldr	r3, [pc, #248]	; (800e9a4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	00da      	lsls	r2, r3, #3
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	0d1b      	lsrs	r3, r3, #20
 800e8b8:	69fa      	ldr	r2, [r7, #28]
 800e8ba:	fb02 f303 	mul.w	r3, r2, r3
 800e8be:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8c0:	e062      	b.n	800e988 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e8c8:	d109      	bne.n	800e8de <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	330c      	adds	r3, #12
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e8dc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e4:	d050      	beq.n	800e988 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8e6:	f7f9 f981 	bl	8007bec <HAL_GetTick>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	69fa      	ldr	r2, [r7, #28]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d902      	bls.n	800e8fc <SPI_WaitFifoStateUntilTimeout+0x78>
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d13d      	bne.n	800e978 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e90a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e914:	d111      	bne.n	800e93a <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e91e:	d004      	beq.n	800e92a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e928:	d107      	bne.n	800e93a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e938:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e93e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e942:	d10f      	bne.n	800e964 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e962:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e974:	2303      	movs	r3, #3
 800e976:	e010      	b.n	800e99a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d101      	bne.n	800e982 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800e97e:	2300      	movs	r3, #0
 800e980:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	3b01      	subs	r3, #1
 800e986:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	689a      	ldr	r2, [r3, #8]
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	4013      	ands	r3, r2
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	429a      	cmp	r2, r3
 800e996:	d194      	bne.n	800e8c2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3720      	adds	r7, #32
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	200002e0 	.word	0x200002e0

0800e9a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9bc:	d111      	bne.n	800e9e2 <SPI_EndRxTransaction+0x3a>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9c6:	d004      	beq.n	800e9d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d0:	d107      	bne.n	800e9e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2180      	movs	r1, #128	; 0x80
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7ff fec1 	bl	800e774 <SPI_WaitFlagStateUntilTimeout>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d007      	beq.n	800ea08 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9fc:	f043 0220 	orr.w	r2, r3, #32
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea04:	2303      	movs	r3, #3
 800ea06:	e023      	b.n	800ea50 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea10:	d11d      	bne.n	800ea4e <SPI_EndRxTransaction+0xa6>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea1a:	d004      	beq.n	800ea26 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea24:	d113      	bne.n	800ea4e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7ff ff26 	bl	800e884 <SPI_WaitFifoStateUntilTimeout>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d007      	beq.n	800ea4e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea42:	f043 0220 	orr.w	r2, r3, #32
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ea4a:	2303      	movs	r3, #3
 800ea4c:	e000      	b.n	800ea50 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af02      	add	r7, sp, #8
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f7ff ff07 	bl	800e884 <SPI_WaitFifoStateUntilTimeout>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d007      	beq.n	800ea8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea80:	f043 0220 	orr.w	r2, r3, #32
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e027      	b.n	800eadc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2200      	movs	r2, #0
 800ea94:	2180      	movs	r1, #128	; 0x80
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff fe6c 	bl	800e774 <SPI_WaitFlagStateUntilTimeout>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d007      	beq.n	800eab2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaa6:	f043 0220 	orr.w	r2, r3, #32
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eaae:	2303      	movs	r3, #3
 800eab0:	e014      	b.n	800eadc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff fee0 	bl	800e884 <SPI_WaitFifoStateUntilTimeout>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eace:	f043 0220 	orr.w	r2, r3, #32
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ead6:	2303      	movs	r3, #3
 800ead8:	e000      	b.n	800eadc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e049      	b.n	800eb8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7f8 fb64 	bl	80071d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2202      	movs	r2, #2
 800eb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3304      	adds	r3, #4
 800eb20:	4619      	mov	r1, r3
 800eb22:	4610      	mov	r0, r2
 800eb24:	f000 fcc4 	bl	800f4b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
	...

0800eb94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d001      	beq.n	800ebac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e047      	b.n	800ec3c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2202      	movs	r2, #2
 800ebb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4a23      	ldr	r2, [pc, #140]	; (800ec48 <HAL_TIM_Base_Start+0xb4>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d01d      	beq.n	800ebfa <HAL_TIM_Base_Start+0x66>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebc6:	d018      	beq.n	800ebfa <HAL_TIM_Base_Start+0x66>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a1f      	ldr	r2, [pc, #124]	; (800ec4c <HAL_TIM_Base_Start+0xb8>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d013      	beq.n	800ebfa <HAL_TIM_Base_Start+0x66>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a1e      	ldr	r2, [pc, #120]	; (800ec50 <HAL_TIM_Base_Start+0xbc>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d00e      	beq.n	800ebfa <HAL_TIM_Base_Start+0x66>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a1c      	ldr	r2, [pc, #112]	; (800ec54 <HAL_TIM_Base_Start+0xc0>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d009      	beq.n	800ebfa <HAL_TIM_Base_Start+0x66>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a1b      	ldr	r2, [pc, #108]	; (800ec58 <HAL_TIM_Base_Start+0xc4>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d004      	beq.n	800ebfa <HAL_TIM_Base_Start+0x66>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a19      	ldr	r2, [pc, #100]	; (800ec5c <HAL_TIM_Base_Start+0xc8>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d115      	bne.n	800ec26 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	689a      	ldr	r2, [r3, #8]
 800ec00:	4b17      	ldr	r3, [pc, #92]	; (800ec60 <HAL_TIM_Base_Start+0xcc>)
 800ec02:	4013      	ands	r3, r2
 800ec04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2b06      	cmp	r3, #6
 800ec0a:	d015      	beq.n	800ec38 <HAL_TIM_Base_Start+0xa4>
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec12:	d011      	beq.n	800ec38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f042 0201 	orr.w	r2, r2, #1
 800ec22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec24:	e008      	b.n	800ec38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f042 0201 	orr.w	r2, r2, #1
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	e000      	b.n	800ec3a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	40012c00 	.word	0x40012c00
 800ec4c:	40000400 	.word	0x40000400
 800ec50:	40000800 	.word	0x40000800
 800ec54:	40000c00 	.word	0x40000c00
 800ec58:	40013400 	.word	0x40013400
 800ec5c:	40014000 	.word	0x40014000
 800ec60:	00010007 	.word	0x00010007

0800ec64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d001      	beq.n	800ec7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e04f      	b.n	800ed1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2202      	movs	r2, #2
 800ec80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68da      	ldr	r2, [r3, #12]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f042 0201 	orr.w	r2, r2, #1
 800ec92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a23      	ldr	r2, [pc, #140]	; (800ed28 <HAL_TIM_Base_Start_IT+0xc4>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d01d      	beq.n	800ecda <HAL_TIM_Base_Start_IT+0x76>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eca6:	d018      	beq.n	800ecda <HAL_TIM_Base_Start_IT+0x76>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a1f      	ldr	r2, [pc, #124]	; (800ed2c <HAL_TIM_Base_Start_IT+0xc8>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d013      	beq.n	800ecda <HAL_TIM_Base_Start_IT+0x76>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a1e      	ldr	r2, [pc, #120]	; (800ed30 <HAL_TIM_Base_Start_IT+0xcc>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d00e      	beq.n	800ecda <HAL_TIM_Base_Start_IT+0x76>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a1c      	ldr	r2, [pc, #112]	; (800ed34 <HAL_TIM_Base_Start_IT+0xd0>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d009      	beq.n	800ecda <HAL_TIM_Base_Start_IT+0x76>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a1b      	ldr	r2, [pc, #108]	; (800ed38 <HAL_TIM_Base_Start_IT+0xd4>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d004      	beq.n	800ecda <HAL_TIM_Base_Start_IT+0x76>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a19      	ldr	r2, [pc, #100]	; (800ed3c <HAL_TIM_Base_Start_IT+0xd8>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d115      	bne.n	800ed06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	4b17      	ldr	r3, [pc, #92]	; (800ed40 <HAL_TIM_Base_Start_IT+0xdc>)
 800ece2:	4013      	ands	r3, r2
 800ece4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b06      	cmp	r3, #6
 800ecea:	d015      	beq.n	800ed18 <HAL_TIM_Base_Start_IT+0xb4>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecf2:	d011      	beq.n	800ed18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f042 0201 	orr.w	r2, r2, #1
 800ed02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed04:	e008      	b.n	800ed18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f042 0201 	orr.w	r2, r2, #1
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	e000      	b.n	800ed1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	40012c00 	.word	0x40012c00
 800ed2c:	40000400 	.word	0x40000400
 800ed30:	40000800 	.word	0x40000800
 800ed34:	40000c00 	.word	0x40000c00
 800ed38:	40013400 	.word	0x40013400
 800ed3c:	40014000 	.word	0x40014000
 800ed40:	00010007 	.word	0x00010007

0800ed44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	e049      	b.n	800edea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d106      	bne.n	800ed70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7f8 fa02 	bl	8007174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2202      	movs	r2, #2
 800ed74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f000 fb94 	bl	800f4b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
	...

0800edf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d109      	bne.n	800ee18 <HAL_TIM_PWM_Start+0x24>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	bf14      	ite	ne
 800ee10:	2301      	movne	r3, #1
 800ee12:	2300      	moveq	r3, #0
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	e03c      	b.n	800ee92 <HAL_TIM_PWM_Start+0x9e>
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	d109      	bne.n	800ee32 <HAL_TIM_PWM_Start+0x3e>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	bf14      	ite	ne
 800ee2a:	2301      	movne	r3, #1
 800ee2c:	2300      	moveq	r3, #0
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	e02f      	b.n	800ee92 <HAL_TIM_PWM_Start+0x9e>
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	2b08      	cmp	r3, #8
 800ee36:	d109      	bne.n	800ee4c <HAL_TIM_PWM_Start+0x58>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	bf14      	ite	ne
 800ee44:	2301      	movne	r3, #1
 800ee46:	2300      	moveq	r3, #0
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	e022      	b.n	800ee92 <HAL_TIM_PWM_Start+0x9e>
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	2b0c      	cmp	r3, #12
 800ee50:	d109      	bne.n	800ee66 <HAL_TIM_PWM_Start+0x72>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	bf14      	ite	ne
 800ee5e:	2301      	movne	r3, #1
 800ee60:	2300      	moveq	r3, #0
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	e015      	b.n	800ee92 <HAL_TIM_PWM_Start+0x9e>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b10      	cmp	r3, #16
 800ee6a:	d109      	bne.n	800ee80 <HAL_TIM_PWM_Start+0x8c>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	bf14      	ite	ne
 800ee78:	2301      	movne	r3, #1
 800ee7a:	2300      	moveq	r3, #0
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	e008      	b.n	800ee92 <HAL_TIM_PWM_Start+0x9e>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	bf14      	ite	ne
 800ee8c:	2301      	movne	r3, #1
 800ee8e:	2300      	moveq	r3, #0
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d001      	beq.n	800ee9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	e09c      	b.n	800efd4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d104      	bne.n	800eeaa <HAL_TIM_PWM_Start+0xb6>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eea8:	e023      	b.n	800eef2 <HAL_TIM_PWM_Start+0xfe>
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d104      	bne.n	800eeba <HAL_TIM_PWM_Start+0xc6>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eeb8:	e01b      	b.n	800eef2 <HAL_TIM_PWM_Start+0xfe>
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b08      	cmp	r3, #8
 800eebe:	d104      	bne.n	800eeca <HAL_TIM_PWM_Start+0xd6>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eec8:	e013      	b.n	800eef2 <HAL_TIM_PWM_Start+0xfe>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b0c      	cmp	r3, #12
 800eece:	d104      	bne.n	800eeda <HAL_TIM_PWM_Start+0xe6>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2202      	movs	r2, #2
 800eed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eed8:	e00b      	b.n	800eef2 <HAL_TIM_PWM_Start+0xfe>
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	2b10      	cmp	r3, #16
 800eede:	d104      	bne.n	800eeea <HAL_TIM_PWM_Start+0xf6>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2202      	movs	r2, #2
 800eee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eee8:	e003      	b.n	800eef2 <HAL_TIM_PWM_Start+0xfe>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2202      	movs	r2, #2
 800eeee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2201      	movs	r2, #1
 800eef8:	6839      	ldr	r1, [r7, #0]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 fe48 	bl	800fb90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a35      	ldr	r2, [pc, #212]	; (800efdc <HAL_TIM_PWM_Start+0x1e8>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d013      	beq.n	800ef32 <HAL_TIM_PWM_Start+0x13e>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a34      	ldr	r2, [pc, #208]	; (800efe0 <HAL_TIM_PWM_Start+0x1ec>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d00e      	beq.n	800ef32 <HAL_TIM_PWM_Start+0x13e>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a32      	ldr	r2, [pc, #200]	; (800efe4 <HAL_TIM_PWM_Start+0x1f0>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d009      	beq.n	800ef32 <HAL_TIM_PWM_Start+0x13e>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a31      	ldr	r2, [pc, #196]	; (800efe8 <HAL_TIM_PWM_Start+0x1f4>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d004      	beq.n	800ef32 <HAL_TIM_PWM_Start+0x13e>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a2f      	ldr	r2, [pc, #188]	; (800efec <HAL_TIM_PWM_Start+0x1f8>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d101      	bne.n	800ef36 <HAL_TIM_PWM_Start+0x142>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <HAL_TIM_PWM_Start+0x144>
 800ef36:	2300      	movs	r3, #0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d007      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a22      	ldr	r2, [pc, #136]	; (800efdc <HAL_TIM_PWM_Start+0x1e8>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d01d      	beq.n	800ef92 <HAL_TIM_PWM_Start+0x19e>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef5e:	d018      	beq.n	800ef92 <HAL_TIM_PWM_Start+0x19e>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a22      	ldr	r2, [pc, #136]	; (800eff0 <HAL_TIM_PWM_Start+0x1fc>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d013      	beq.n	800ef92 <HAL_TIM_PWM_Start+0x19e>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a21      	ldr	r2, [pc, #132]	; (800eff4 <HAL_TIM_PWM_Start+0x200>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d00e      	beq.n	800ef92 <HAL_TIM_PWM_Start+0x19e>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a1f      	ldr	r2, [pc, #124]	; (800eff8 <HAL_TIM_PWM_Start+0x204>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d009      	beq.n	800ef92 <HAL_TIM_PWM_Start+0x19e>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4a17      	ldr	r2, [pc, #92]	; (800efe0 <HAL_TIM_PWM_Start+0x1ec>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d004      	beq.n	800ef92 <HAL_TIM_PWM_Start+0x19e>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a15      	ldr	r2, [pc, #84]	; (800efe4 <HAL_TIM_PWM_Start+0x1f0>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d115      	bne.n	800efbe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	689a      	ldr	r2, [r3, #8]
 800ef98:	4b18      	ldr	r3, [pc, #96]	; (800effc <HAL_TIM_PWM_Start+0x208>)
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b06      	cmp	r3, #6
 800efa2:	d015      	beq.n	800efd0 <HAL_TIM_PWM_Start+0x1dc>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efaa:	d011      	beq.n	800efd0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f042 0201 	orr.w	r2, r2, #1
 800efba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efbc:	e008      	b.n	800efd0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f042 0201 	orr.w	r2, r2, #1
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	e000      	b.n	800efd2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	40012c00 	.word	0x40012c00
 800efe0:	40013400 	.word	0x40013400
 800efe4:	40014000 	.word	0x40014000
 800efe8:	40014400 	.word	0x40014400
 800efec:	40014800 	.word	0x40014800
 800eff0:	40000400 	.word	0x40000400
 800eff4:	40000800 	.word	0x40000800
 800eff8:	40000c00 	.word	0x40000c00
 800effc:	00010007 	.word	0x00010007

0800f000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	f003 0302 	and.w	r3, r3, #2
 800f012:	2b02      	cmp	r3, #2
 800f014:	d122      	bne.n	800f05c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	f003 0302 	and.w	r3, r3, #2
 800f020:	2b02      	cmp	r3, #2
 800f022:	d11b      	bne.n	800f05c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f06f 0202 	mvn.w	r2, #2
 800f02c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	f003 0303 	and.w	r3, r3, #3
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d003      	beq.n	800f04a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 fa16 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f048:	e005      	b.n	800f056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 fa08 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fa19 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	f003 0304 	and.w	r3, r3, #4
 800f066:	2b04      	cmp	r3, #4
 800f068:	d122      	bne.n	800f0b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	f003 0304 	and.w	r3, r3, #4
 800f074:	2b04      	cmp	r3, #4
 800f076:	d11b      	bne.n	800f0b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f06f 0204 	mvn.w	r2, #4
 800f080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2202      	movs	r2, #2
 800f086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	699b      	ldr	r3, [r3, #24]
 800f08e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f092:	2b00      	cmp	r3, #0
 800f094:	d003      	beq.n	800f09e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f9ec 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f09c:	e005      	b.n	800f0aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 f9de 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 f9ef 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	f003 0308 	and.w	r3, r3, #8
 800f0ba:	2b08      	cmp	r3, #8
 800f0bc:	d122      	bne.n	800f104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	f003 0308 	and.w	r3, r3, #8
 800f0c8:	2b08      	cmp	r3, #8
 800f0ca:	d11b      	bne.n	800f104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f06f 0208 	mvn.w	r2, #8
 800f0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2204      	movs	r2, #4
 800f0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	69db      	ldr	r3, [r3, #28]
 800f0e2:	f003 0303 	and.w	r3, r3, #3
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f9c2 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f0f0:	e005      	b.n	800f0fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f9b4 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 f9c5 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	691b      	ldr	r3, [r3, #16]
 800f10a:	f003 0310 	and.w	r3, r3, #16
 800f10e:	2b10      	cmp	r3, #16
 800f110:	d122      	bne.n	800f158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	f003 0310 	and.w	r3, r3, #16
 800f11c:	2b10      	cmp	r3, #16
 800f11e:	d11b      	bne.n	800f158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f06f 0210 	mvn.w	r2, #16
 800f128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2208      	movs	r2, #8
 800f12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	69db      	ldr	r3, [r3, #28]
 800f136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d003      	beq.n	800f146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f998 	bl	800f474 <HAL_TIM_IC_CaptureCallback>
 800f144:	e005      	b.n	800f152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f98a 	bl	800f460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 f99b 	bl	800f488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	691b      	ldr	r3, [r3, #16]
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	2b01      	cmp	r3, #1
 800f164:	d10e      	bne.n	800f184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	f003 0301 	and.w	r3, r3, #1
 800f170:	2b01      	cmp	r3, #1
 800f172:	d107      	bne.n	800f184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f06f 0201 	mvn.w	r2, #1
 800f17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7f7 fb3a 	bl	80067f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	691b      	ldr	r3, [r3, #16]
 800f18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f18e:	2b80      	cmp	r3, #128	; 0x80
 800f190:	d10e      	bne.n	800f1b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f19c:	2b80      	cmp	r3, #128	; 0x80
 800f19e:	d107      	bne.n	800f1b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fda8 	bl	800fd00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1be:	d10e      	bne.n	800f1de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ca:	2b80      	cmp	r3, #128	; 0x80
 800f1cc:	d107      	bne.n	800f1de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fd9b 	bl	800fd14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1e8:	2b40      	cmp	r3, #64	; 0x40
 800f1ea:	d10e      	bne.n	800f20a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1f6:	2b40      	cmp	r3, #64	; 0x40
 800f1f8:	d107      	bne.n	800f20a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f949 	bl	800f49c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	f003 0320 	and.w	r3, r3, #32
 800f214:	2b20      	cmp	r3, #32
 800f216:	d10e      	bne.n	800f236 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	f003 0320 	and.w	r3, r3, #32
 800f222:	2b20      	cmp	r3, #32
 800f224:	d107      	bne.n	800f236 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f06f 0220 	mvn.w	r2, #32
 800f22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fd5b 	bl	800fcec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f236:	bf00      	nop
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f252:	2b01      	cmp	r3, #1
 800f254:	d101      	bne.n	800f25a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f256:	2302      	movs	r3, #2
 800f258:	e0fd      	b.n	800f456 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2201      	movs	r2, #1
 800f25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b14      	cmp	r3, #20
 800f266:	f200 80f0 	bhi.w	800f44a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f26a:	a201      	add	r2, pc, #4	; (adr r2, 800f270 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f270:	0800f2c5 	.word	0x0800f2c5
 800f274:	0800f44b 	.word	0x0800f44b
 800f278:	0800f44b 	.word	0x0800f44b
 800f27c:	0800f44b 	.word	0x0800f44b
 800f280:	0800f305 	.word	0x0800f305
 800f284:	0800f44b 	.word	0x0800f44b
 800f288:	0800f44b 	.word	0x0800f44b
 800f28c:	0800f44b 	.word	0x0800f44b
 800f290:	0800f347 	.word	0x0800f347
 800f294:	0800f44b 	.word	0x0800f44b
 800f298:	0800f44b 	.word	0x0800f44b
 800f29c:	0800f44b 	.word	0x0800f44b
 800f2a0:	0800f387 	.word	0x0800f387
 800f2a4:	0800f44b 	.word	0x0800f44b
 800f2a8:	0800f44b 	.word	0x0800f44b
 800f2ac:	0800f44b 	.word	0x0800f44b
 800f2b0:	0800f3c9 	.word	0x0800f3c9
 800f2b4:	0800f44b 	.word	0x0800f44b
 800f2b8:	0800f44b 	.word	0x0800f44b
 800f2bc:	0800f44b 	.word	0x0800f44b
 800f2c0:	0800f409 	.word	0x0800f409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68b9      	ldr	r1, [r7, #8]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 f98a 	bl	800f5e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	699a      	ldr	r2, [r3, #24]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f042 0208 	orr.w	r2, r2, #8
 800f2de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	699a      	ldr	r2, [r3, #24]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f022 0204 	bic.w	r2, r2, #4
 800f2ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6999      	ldr	r1, [r3, #24]
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	691a      	ldr	r2, [r3, #16]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	430a      	orrs	r2, r1
 800f300:	619a      	str	r2, [r3, #24]
      break;
 800f302:	e0a3      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68b9      	ldr	r1, [r7, #8]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 f9fa 	bl	800f704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	699a      	ldr	r2, [r3, #24]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f31e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	699a      	ldr	r2, [r3, #24]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f32e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6999      	ldr	r1, [r3, #24]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	021a      	lsls	r2, r3, #8
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	430a      	orrs	r2, r1
 800f342:	619a      	str	r2, [r3, #24]
      break;
 800f344:	e082      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 fa63 	bl	800f818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	69da      	ldr	r2, [r3, #28]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f042 0208 	orr.w	r2, r2, #8
 800f360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	69da      	ldr	r2, [r3, #28]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f022 0204 	bic.w	r2, r2, #4
 800f370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	69d9      	ldr	r1, [r3, #28]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	691a      	ldr	r2, [r3, #16]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	430a      	orrs	r2, r1
 800f382:	61da      	str	r2, [r3, #28]
      break;
 800f384:	e062      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	68b9      	ldr	r1, [r7, #8]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 facb 	bl	800f928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	69da      	ldr	r2, [r3, #28]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	69da      	ldr	r2, [r3, #28]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	69d9      	ldr	r1, [r3, #28]
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	021a      	lsls	r2, r3, #8
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	430a      	orrs	r2, r1
 800f3c4:	61da      	str	r2, [r3, #28]
      break;
 800f3c6:	e041      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68b9      	ldr	r1, [r7, #8]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 fb14 	bl	800f9fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f042 0208 	orr.w	r2, r2, #8
 800f3e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f022 0204 	bic.w	r2, r2, #4
 800f3f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	691a      	ldr	r2, [r3, #16]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	430a      	orrs	r2, r1
 800f404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f406:	e021      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68b9      	ldr	r1, [r7, #8]
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fb58 	bl	800fac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	021a      	lsls	r2, r3, #8
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	430a      	orrs	r2, r1
 800f446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f448:	e000      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f44a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop

0800f460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f47c:	bf00      	nop
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f490:	bf00      	nop
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a40      	ldr	r2, [pc, #256]	; (800f5c4 <TIM_Base_SetConfig+0x114>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d013      	beq.n	800f4f0 <TIM_Base_SetConfig+0x40>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4ce:	d00f      	beq.n	800f4f0 <TIM_Base_SetConfig+0x40>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a3d      	ldr	r2, [pc, #244]	; (800f5c8 <TIM_Base_SetConfig+0x118>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d00b      	beq.n	800f4f0 <TIM_Base_SetConfig+0x40>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a3c      	ldr	r2, [pc, #240]	; (800f5cc <TIM_Base_SetConfig+0x11c>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d007      	beq.n	800f4f0 <TIM_Base_SetConfig+0x40>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a3b      	ldr	r2, [pc, #236]	; (800f5d0 <TIM_Base_SetConfig+0x120>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d003      	beq.n	800f4f0 <TIM_Base_SetConfig+0x40>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a3a      	ldr	r2, [pc, #232]	; (800f5d4 <TIM_Base_SetConfig+0x124>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d108      	bne.n	800f502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a2f      	ldr	r2, [pc, #188]	; (800f5c4 <TIM_Base_SetConfig+0x114>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d01f      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f510:	d01b      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a2c      	ldr	r2, [pc, #176]	; (800f5c8 <TIM_Base_SetConfig+0x118>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d017      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a2b      	ldr	r2, [pc, #172]	; (800f5cc <TIM_Base_SetConfig+0x11c>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d013      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a2a      	ldr	r2, [pc, #168]	; (800f5d0 <TIM_Base_SetConfig+0x120>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d00f      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a29      	ldr	r2, [pc, #164]	; (800f5d4 <TIM_Base_SetConfig+0x124>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d00b      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a28      	ldr	r2, [pc, #160]	; (800f5d8 <TIM_Base_SetConfig+0x128>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d007      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a27      	ldr	r2, [pc, #156]	; (800f5dc <TIM_Base_SetConfig+0x12c>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d003      	beq.n	800f54a <TIM_Base_SetConfig+0x9a>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a26      	ldr	r2, [pc, #152]	; (800f5e0 <TIM_Base_SetConfig+0x130>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d108      	bne.n	800f55c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	68fa      	ldr	r2, [r7, #12]
 800f558:	4313      	orrs	r3, r2
 800f55a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	4313      	orrs	r3, r2
 800f568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	689a      	ldr	r2, [r3, #8]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a10      	ldr	r2, [pc, #64]	; (800f5c4 <TIM_Base_SetConfig+0x114>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d00f      	beq.n	800f5a8 <TIM_Base_SetConfig+0xf8>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a12      	ldr	r2, [pc, #72]	; (800f5d4 <TIM_Base_SetConfig+0x124>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d00b      	beq.n	800f5a8 <TIM_Base_SetConfig+0xf8>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a11      	ldr	r2, [pc, #68]	; (800f5d8 <TIM_Base_SetConfig+0x128>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d007      	beq.n	800f5a8 <TIM_Base_SetConfig+0xf8>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a10      	ldr	r2, [pc, #64]	; (800f5dc <TIM_Base_SetConfig+0x12c>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d003      	beq.n	800f5a8 <TIM_Base_SetConfig+0xf8>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a0f      	ldr	r2, [pc, #60]	; (800f5e0 <TIM_Base_SetConfig+0x130>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d103      	bne.n	800f5b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	691a      	ldr	r2, [r3, #16]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	615a      	str	r2, [r3, #20]
}
 800f5b6:	bf00      	nop
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	40012c00 	.word	0x40012c00
 800f5c8:	40000400 	.word	0x40000400
 800f5cc:	40000800 	.word	0x40000800
 800f5d0:	40000c00 	.word	0x40000c00
 800f5d4:	40013400 	.word	0x40013400
 800f5d8:	40014000 	.word	0x40014000
 800f5dc:	40014400 	.word	0x40014400
 800f5e0:	40014800 	.word	0x40014800

0800f5e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b087      	sub	sp, #28
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	f023 0201 	bic.w	r2, r3, #1
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	699b      	ldr	r3, [r3, #24]
 800f60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f023 0303 	bic.w	r3, r3, #3
 800f61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	4313      	orrs	r3, r2
 800f628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f023 0302 	bic.w	r3, r3, #2
 800f630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	697a      	ldr	r2, [r7, #20]
 800f638:	4313      	orrs	r3, r2
 800f63a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a2c      	ldr	r2, [pc, #176]	; (800f6f0 <TIM_OC1_SetConfig+0x10c>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d00f      	beq.n	800f664 <TIM_OC1_SetConfig+0x80>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a2b      	ldr	r2, [pc, #172]	; (800f6f4 <TIM_OC1_SetConfig+0x110>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d00b      	beq.n	800f664 <TIM_OC1_SetConfig+0x80>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a2a      	ldr	r2, [pc, #168]	; (800f6f8 <TIM_OC1_SetConfig+0x114>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d007      	beq.n	800f664 <TIM_OC1_SetConfig+0x80>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a29      	ldr	r2, [pc, #164]	; (800f6fc <TIM_OC1_SetConfig+0x118>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d003      	beq.n	800f664 <TIM_OC1_SetConfig+0x80>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a28      	ldr	r2, [pc, #160]	; (800f700 <TIM_OC1_SetConfig+0x11c>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d10c      	bne.n	800f67e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	f023 0308 	bic.w	r3, r3, #8
 800f66a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	697a      	ldr	r2, [r7, #20]
 800f672:	4313      	orrs	r3, r2
 800f674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f023 0304 	bic.w	r3, r3, #4
 800f67c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4a1b      	ldr	r2, [pc, #108]	; (800f6f0 <TIM_OC1_SetConfig+0x10c>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d00f      	beq.n	800f6a6 <TIM_OC1_SetConfig+0xc2>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a1a      	ldr	r2, [pc, #104]	; (800f6f4 <TIM_OC1_SetConfig+0x110>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d00b      	beq.n	800f6a6 <TIM_OC1_SetConfig+0xc2>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a19      	ldr	r2, [pc, #100]	; (800f6f8 <TIM_OC1_SetConfig+0x114>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d007      	beq.n	800f6a6 <TIM_OC1_SetConfig+0xc2>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a18      	ldr	r2, [pc, #96]	; (800f6fc <TIM_OC1_SetConfig+0x118>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d003      	beq.n	800f6a6 <TIM_OC1_SetConfig+0xc2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a17      	ldr	r2, [pc, #92]	; (800f700 <TIM_OC1_SetConfig+0x11c>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d111      	bne.n	800f6ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	695b      	ldr	r3, [r3, #20]
 800f6ba:	693a      	ldr	r2, [r7, #16]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	699b      	ldr	r3, [r3, #24]
 800f6c4:	693a      	ldr	r2, [r7, #16]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	685a      	ldr	r2, [r3, #4]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	621a      	str	r2, [r3, #32]
}
 800f6e4:	bf00      	nop
 800f6e6:	371c      	adds	r7, #28
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	40012c00 	.word	0x40012c00
 800f6f4:	40013400 	.word	0x40013400
 800f6f8:	40014000 	.word	0x40014000
 800f6fc:	40014400 	.word	0x40014400
 800f700:	40014800 	.word	0x40014800

0800f704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	f023 0210 	bic.w	r2, r3, #16
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6a1b      	ldr	r3, [r3, #32]
 800f71e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	021b      	lsls	r3, r3, #8
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	4313      	orrs	r3, r2
 800f74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	f023 0320 	bic.w	r3, r3, #32
 800f752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	4313      	orrs	r3, r2
 800f75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a28      	ldr	r2, [pc, #160]	; (800f804 <TIM_OC2_SetConfig+0x100>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d003      	beq.n	800f770 <TIM_OC2_SetConfig+0x6c>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a27      	ldr	r2, [pc, #156]	; (800f808 <TIM_OC2_SetConfig+0x104>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d10d      	bne.n	800f78c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	4313      	orrs	r3, r2
 800f782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f78a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4a1d      	ldr	r2, [pc, #116]	; (800f804 <TIM_OC2_SetConfig+0x100>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d00f      	beq.n	800f7b4 <TIM_OC2_SetConfig+0xb0>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a1c      	ldr	r2, [pc, #112]	; (800f808 <TIM_OC2_SetConfig+0x104>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d00b      	beq.n	800f7b4 <TIM_OC2_SetConfig+0xb0>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a1b      	ldr	r2, [pc, #108]	; (800f80c <TIM_OC2_SetConfig+0x108>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d007      	beq.n	800f7b4 <TIM_OC2_SetConfig+0xb0>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a1a      	ldr	r2, [pc, #104]	; (800f810 <TIM_OC2_SetConfig+0x10c>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d003      	beq.n	800f7b4 <TIM_OC2_SetConfig+0xb0>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a19      	ldr	r2, [pc, #100]	; (800f814 <TIM_OC2_SetConfig+0x110>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d113      	bne.n	800f7dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	695b      	ldr	r3, [r3, #20]
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	693a      	ldr	r2, [r7, #16]
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	699b      	ldr	r3, [r3, #24]
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	685a      	ldr	r2, [r3, #4]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	621a      	str	r2, [r3, #32]
}
 800f7f6:	bf00      	nop
 800f7f8:	371c      	adds	r7, #28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	40012c00 	.word	0x40012c00
 800f808:	40013400 	.word	0x40013400
 800f80c:	40014000 	.word	0x40014000
 800f810:	40014400 	.word	0x40014400
 800f814:	40014800 	.word	0x40014800

0800f818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f818:	b480      	push	{r7}
 800f81a:	b087      	sub	sp, #28
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f023 0303 	bic.w	r3, r3, #3
 800f852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	021b      	lsls	r3, r3, #8
 800f86c:	697a      	ldr	r2, [r7, #20]
 800f86e:	4313      	orrs	r3, r2
 800f870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a27      	ldr	r2, [pc, #156]	; (800f914 <TIM_OC3_SetConfig+0xfc>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d003      	beq.n	800f882 <TIM_OC3_SetConfig+0x6a>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a26      	ldr	r2, [pc, #152]	; (800f918 <TIM_OC3_SetConfig+0x100>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d10d      	bne.n	800f89e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	021b      	lsls	r3, r3, #8
 800f890:	697a      	ldr	r2, [r7, #20]
 800f892:	4313      	orrs	r3, r2
 800f894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f89c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a1c      	ldr	r2, [pc, #112]	; (800f914 <TIM_OC3_SetConfig+0xfc>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d00f      	beq.n	800f8c6 <TIM_OC3_SetConfig+0xae>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a1b      	ldr	r2, [pc, #108]	; (800f918 <TIM_OC3_SetConfig+0x100>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d00b      	beq.n	800f8c6 <TIM_OC3_SetConfig+0xae>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a1a      	ldr	r2, [pc, #104]	; (800f91c <TIM_OC3_SetConfig+0x104>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d007      	beq.n	800f8c6 <TIM_OC3_SetConfig+0xae>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a19      	ldr	r2, [pc, #100]	; (800f920 <TIM_OC3_SetConfig+0x108>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d003      	beq.n	800f8c6 <TIM_OC3_SetConfig+0xae>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a18      	ldr	r2, [pc, #96]	; (800f924 <TIM_OC3_SetConfig+0x10c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d113      	bne.n	800f8ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	695b      	ldr	r3, [r3, #20]
 800f8da:	011b      	lsls	r3, r3, #4
 800f8dc:	693a      	ldr	r2, [r7, #16]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	011b      	lsls	r3, r3, #4
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	697a      	ldr	r2, [r7, #20]
 800f906:	621a      	str	r2, [r3, #32]
}
 800f908:	bf00      	nop
 800f90a:	371c      	adds	r7, #28
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	40012c00 	.word	0x40012c00
 800f918:	40013400 	.word	0x40013400
 800f91c:	40014000 	.word	0x40014000
 800f920:	40014400 	.word	0x40014400
 800f924:	40014800 	.word	0x40014800

0800f928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f928:	b480      	push	{r7}
 800f92a:	b087      	sub	sp, #28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a1b      	ldr	r3, [r3, #32]
 800f936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	021b      	lsls	r3, r3, #8
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	4313      	orrs	r3, r2
 800f96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	031b      	lsls	r3, r3, #12
 800f97e:	693a      	ldr	r2, [r7, #16]
 800f980:	4313      	orrs	r3, r2
 800f982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a18      	ldr	r2, [pc, #96]	; (800f9e8 <TIM_OC4_SetConfig+0xc0>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d00f      	beq.n	800f9ac <TIM_OC4_SetConfig+0x84>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a17      	ldr	r2, [pc, #92]	; (800f9ec <TIM_OC4_SetConfig+0xc4>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d00b      	beq.n	800f9ac <TIM_OC4_SetConfig+0x84>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a16      	ldr	r2, [pc, #88]	; (800f9f0 <TIM_OC4_SetConfig+0xc8>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d007      	beq.n	800f9ac <TIM_OC4_SetConfig+0x84>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a15      	ldr	r2, [pc, #84]	; (800f9f4 <TIM_OC4_SetConfig+0xcc>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d003      	beq.n	800f9ac <TIM_OC4_SetConfig+0x84>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a14      	ldr	r2, [pc, #80]	; (800f9f8 <TIM_OC4_SetConfig+0xd0>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d109      	bne.n	800f9c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	695b      	ldr	r3, [r3, #20]
 800f9b8:	019b      	lsls	r3, r3, #6
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68fa      	ldr	r2, [r7, #12]
 800f9ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	685a      	ldr	r2, [r3, #4]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	693a      	ldr	r2, [r7, #16]
 800f9d8:	621a      	str	r2, [r3, #32]
}
 800f9da:	bf00      	nop
 800f9dc:	371c      	adds	r7, #28
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	40012c00 	.word	0x40012c00
 800f9ec:	40013400 	.word	0x40013400
 800f9f0:	40014000 	.word	0x40014000
 800f9f4:	40014400 	.word	0x40014400
 800f9f8:	40014800 	.word	0x40014800

0800f9fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	689b      	ldr	r3, [r3, #8]
 800fa46:	041b      	lsls	r3, r3, #16
 800fa48:	693a      	ldr	r2, [r7, #16]
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a17      	ldr	r2, [pc, #92]	; (800fab0 <TIM_OC5_SetConfig+0xb4>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d00f      	beq.n	800fa76 <TIM_OC5_SetConfig+0x7a>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a16      	ldr	r2, [pc, #88]	; (800fab4 <TIM_OC5_SetConfig+0xb8>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d00b      	beq.n	800fa76 <TIM_OC5_SetConfig+0x7a>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a15      	ldr	r2, [pc, #84]	; (800fab8 <TIM_OC5_SetConfig+0xbc>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d007      	beq.n	800fa76 <TIM_OC5_SetConfig+0x7a>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a14      	ldr	r2, [pc, #80]	; (800fabc <TIM_OC5_SetConfig+0xc0>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d003      	beq.n	800fa76 <TIM_OC5_SetConfig+0x7a>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a13      	ldr	r2, [pc, #76]	; (800fac0 <TIM_OC5_SetConfig+0xc4>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d109      	bne.n	800fa8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	695b      	ldr	r3, [r3, #20]
 800fa82:	021b      	lsls	r3, r3, #8
 800fa84:	697a      	ldr	r2, [r7, #20]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	621a      	str	r2, [r3, #32]
}
 800faa4:	bf00      	nop
 800faa6:	371c      	adds	r7, #28
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	40012c00 	.word	0x40012c00
 800fab4:	40013400 	.word	0x40013400
 800fab8:	40014000 	.word	0x40014000
 800fabc:	40014400 	.word	0x40014400
 800fac0:	40014800 	.word	0x40014800

0800fac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800faf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	021b      	lsls	r3, r3, #8
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	051b      	lsls	r3, r3, #20
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a18      	ldr	r2, [pc, #96]	; (800fb7c <TIM_OC6_SetConfig+0xb8>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d00f      	beq.n	800fb40 <TIM_OC6_SetConfig+0x7c>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a17      	ldr	r2, [pc, #92]	; (800fb80 <TIM_OC6_SetConfig+0xbc>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d00b      	beq.n	800fb40 <TIM_OC6_SetConfig+0x7c>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a16      	ldr	r2, [pc, #88]	; (800fb84 <TIM_OC6_SetConfig+0xc0>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d007      	beq.n	800fb40 <TIM_OC6_SetConfig+0x7c>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a15      	ldr	r2, [pc, #84]	; (800fb88 <TIM_OC6_SetConfig+0xc4>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d003      	beq.n	800fb40 <TIM_OC6_SetConfig+0x7c>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a14      	ldr	r2, [pc, #80]	; (800fb8c <TIM_OC6_SetConfig+0xc8>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d109      	bne.n	800fb54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	695b      	ldr	r3, [r3, #20]
 800fb4c:	029b      	lsls	r3, r3, #10
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	4313      	orrs	r3, r2
 800fb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	693a      	ldr	r2, [r7, #16]
 800fb6c:	621a      	str	r2, [r3, #32]
}
 800fb6e:	bf00      	nop
 800fb70:	371c      	adds	r7, #28
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	40012c00 	.word	0x40012c00
 800fb80:	40013400 	.word	0x40013400
 800fb84:	40014000 	.word	0x40014000
 800fb88:	40014400 	.word	0x40014400
 800fb8c:	40014800 	.word	0x40014800

0800fb90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b087      	sub	sp, #28
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	f003 031f 	and.w	r3, r3, #31
 800fba2:	2201      	movs	r2, #1
 800fba4:	fa02 f303 	lsl.w	r3, r2, r3
 800fba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6a1a      	ldr	r2, [r3, #32]
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	43db      	mvns	r3, r3
 800fbb2:	401a      	ands	r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6a1a      	ldr	r2, [r3, #32]
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	f003 031f 	and.w	r3, r3, #31
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	fa01 f303 	lsl.w	r3, r1, r3
 800fbc8:	431a      	orrs	r2, r3
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	621a      	str	r2, [r3, #32]
}
 800fbce:	bf00      	nop
 800fbd0:	371c      	adds	r7, #28
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
	...

0800fbdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d101      	bne.n	800fbf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	e068      	b.n	800fcc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2202      	movs	r2, #2
 800fc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a2e      	ldr	r2, [pc, #184]	; (800fcd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d004      	beq.n	800fc28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	4a2d      	ldr	r2, [pc, #180]	; (800fcd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d108      	bne.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a1e      	ldr	r2, [pc, #120]	; (800fcd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d01d      	beq.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc66:	d018      	beq.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a1b      	ldr	r2, [pc, #108]	; (800fcdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d013      	beq.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a1a      	ldr	r2, [pc, #104]	; (800fce0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d00e      	beq.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a18      	ldr	r2, [pc, #96]	; (800fce4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d009      	beq.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a13      	ldr	r2, [pc, #76]	; (800fcd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d004      	beq.n	800fc9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a14      	ldr	r2, [pc, #80]	; (800fce8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d10c      	bne.n	800fcb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	40012c00 	.word	0x40012c00
 800fcd8:	40013400 	.word	0x40013400
 800fcdc:	40000400 	.word	0x40000400
 800fce0:	40000800 	.word	0x40000800
 800fce4:	40000c00 	.word	0x40000c00
 800fce8:	40014000 	.word	0x40014000

0800fcec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fcf4:	bf00      	nop
 800fcf6:	370c      	adds	r7, #12
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd08:	bf00      	nop
 800fd0a:	370c      	adds	r7, #12
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd1c:	bf00      	nop
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd36:	2301      	movs	r3, #1
 800fd38:	e040      	b.n	800fdbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7f7 fac6 	bl	80072dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2224      	movs	r2, #36	; 0x24
 800fd54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f022 0201 	bic.w	r2, r2, #1
 800fd64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fae2 	bl	8010330 <UART_SetConfig>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d101      	bne.n	800fd76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fd72:	2301      	movs	r3, #1
 800fd74:	e022      	b.n	800fdbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fd60 	bl	8010844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	685a      	ldr	r2, [r3, #4]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	689a      	ldr	r2, [r3, #8]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fda2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f042 0201 	orr.w	r2, r2, #1
 800fdb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 fde7 	bl	8010988 <UART_CheckIdleState>
 800fdba:	4603      	mov	r3, r0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b08a      	sub	sp, #40	; 0x28
 800fdc8:	af02      	add	r7, sp, #8
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdd8:	2b20      	cmp	r3, #32
 800fdda:	f040 8082 	bne.w	800fee2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d002      	beq.n	800fdea <HAL_UART_Transmit+0x26>
 800fde4:	88fb      	ldrh	r3, [r7, #6]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d101      	bne.n	800fdee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fdea:	2301      	movs	r3, #1
 800fdec:	e07a      	b.n	800fee4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d101      	bne.n	800fdfc <HAL_UART_Transmit+0x38>
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	e073      	b.n	800fee4 <HAL_UART_Transmit+0x120>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2201      	movs	r2, #1
 800fe00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2200      	movs	r2, #0
 800fe08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2221      	movs	r2, #33	; 0x21
 800fe10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe12:	f7f7 feeb 	bl	8007bec <HAL_GetTick>
 800fe16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	88fa      	ldrh	r2, [r7, #6]
 800fe1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	88fa      	ldrh	r2, [r7, #6]
 800fe24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe30:	d108      	bne.n	800fe44 <HAL_UART_Transmit+0x80>
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d104      	bne.n	800fe44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	61bb      	str	r3, [r7, #24]
 800fe42:	e003      	b.n	800fe4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fe54:	e02d      	b.n	800feb2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	2180      	movs	r1, #128	; 0x80
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 fdda 	bl	8010a1a <UART_WaitOnFlagUntilTimeout>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	e039      	b.n	800fee4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d10b      	bne.n	800fe8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	881a      	ldrh	r2, [r3, #0]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe82:	b292      	uxth	r2, r2
 800fe84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	3302      	adds	r3, #2
 800fe8a:	61bb      	str	r3, [r7, #24]
 800fe8c:	e008      	b.n	800fea0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	781a      	ldrb	r2, [r3, #0]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	b292      	uxth	r2, r2
 800fe98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	3b01      	subs	r3, #1
 800feaa:	b29a      	uxth	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800feb8:	b29b      	uxth	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d1cb      	bne.n	800fe56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2200      	movs	r2, #0
 800fec6:	2140      	movs	r1, #64	; 0x40
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f000 fda6 	bl	8010a1a <UART_WaitOnFlagUntilTimeout>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d001      	beq.n	800fed8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800fed4:	2303      	movs	r3, #3
 800fed6:	e005      	b.n	800fee4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2220      	movs	r2, #32
 800fedc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	e000      	b.n	800fee4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800fee2:	2302      	movs	r3, #2
  }
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3720      	adds	r7, #32
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b088      	sub	sp, #32
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	69db      	ldr	r3, [r3, #28]
 800fefa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff0c:	69fa      	ldr	r2, [r7, #28]
 800ff0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff12:	4013      	ands	r3, r2
 800ff14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d113      	bne.n	800ff44 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	f003 0320 	and.w	r3, r3, #32
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00e      	beq.n	800ff44 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	f003 0320 	and.w	r3, r3, #32
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d009      	beq.n	800ff44 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f000 81ce 	beq.w	80102d6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	4798      	blx	r3
      }
      return;
 800ff42:	e1c8      	b.n	80102d6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	f000 80e3 	beq.w	8010112 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d105      	bne.n	800ff62 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ff56:	69ba      	ldr	r2, [r7, #24]
 800ff58:	4ba6      	ldr	r3, [pc, #664]	; (80101f4 <HAL_UART_IRQHandler+0x308>)
 800ff5a:	4013      	ands	r3, r2
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 80d8 	beq.w	8010112 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	f003 0301 	and.w	r3, r3, #1
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d010      	beq.n	800ff8e <HAL_UART_IRQHandler+0xa2>
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d00b      	beq.n	800ff8e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff84:	f043 0201 	orr.w	r2, r3, #1
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	f003 0302 	and.w	r3, r3, #2
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d010      	beq.n	800ffba <HAL_UART_IRQHandler+0xce>
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	f003 0301 	and.w	r3, r3, #1
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00b      	beq.n	800ffba <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffb0:	f043 0204 	orr.w	r2, r3, #4
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	f003 0304 	and.w	r3, r3, #4
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d010      	beq.n	800ffe6 <HAL_UART_IRQHandler+0xfa>
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00b      	beq.n	800ffe6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2204      	movs	r2, #4
 800ffd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffdc:	f043 0202 	orr.w	r2, r3, #2
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	f003 0308 	and.w	r3, r3, #8
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d015      	beq.n	801001c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	f003 0320 	and.w	r3, r3, #32
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d104      	bne.n	8010004 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00b      	beq.n	801001c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2208      	movs	r2, #8
 801000a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010012:	f043 0208 	orr.w	r2, r3, #8
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010022:	2b00      	cmp	r3, #0
 8010024:	d011      	beq.n	801004a <HAL_UART_IRQHandler+0x15e>
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00c      	beq.n	801004a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010040:	f043 0220 	orr.w	r2, r3, #32
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 8142 	beq.w	80102da <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	f003 0320 	and.w	r3, r3, #32
 801005c:	2b00      	cmp	r3, #0
 801005e:	d00c      	beq.n	801007a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	f003 0320 	and.w	r3, r3, #32
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801006e:	2b00      	cmp	r3, #0
 8010070:	d003      	beq.n	801007a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010080:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801008c:	2b40      	cmp	r3, #64	; 0x40
 801008e:	d004      	beq.n	801009a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010096:	2b00      	cmp	r3, #0
 8010098:	d031      	beq.n	80100fe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fd39 	bl	8010b12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100aa:	2b40      	cmp	r3, #64	; 0x40
 80100ac:	d123      	bne.n	80100f6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	689a      	ldr	r2, [r3, #8]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d013      	beq.n	80100ee <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ca:	4a4b      	ldr	r2, [pc, #300]	; (80101f8 <HAL_UART_IRQHandler+0x30c>)
 80100cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7f9 fdb6 	bl	8009c44 <HAL_DMA_Abort_IT>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d017      	beq.n	801010e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80100e8:	4610      	mov	r0, r2
 80100ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ec:	e00f      	b.n	801010e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f908 	bl	8010304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100f4:	e00b      	b.n	801010e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f904 	bl	8010304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100fc:	e007      	b.n	801010e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 f900 	bl	8010304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 801010c:	e0e5      	b.n	80102da <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801010e:	bf00      	nop
    return;
 8010110:	e0e3      	b.n	80102da <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010116:	2b01      	cmp	r3, #1
 8010118:	f040 80a9 	bne.w	801026e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	f003 0310 	and.w	r3, r3, #16
 8010122:	2b00      	cmp	r3, #0
 8010124:	f000 80a3 	beq.w	801026e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 809d 	beq.w	801026e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2210      	movs	r2, #16
 801013a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010146:	2b40      	cmp	r3, #64	; 0x40
 8010148:	d158      	bne.n	80101fc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8010154:	893b      	ldrh	r3, [r7, #8]
 8010156:	2b00      	cmp	r3, #0
 8010158:	f000 80c1 	beq.w	80102de <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010162:	893a      	ldrh	r2, [r7, #8]
 8010164:	429a      	cmp	r2, r3
 8010166:	f080 80ba 	bcs.w	80102de <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	893a      	ldrh	r2, [r7, #8]
 801016e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f003 0320 	and.w	r3, r3, #32
 801017e:	2b00      	cmp	r3, #0
 8010180:	d12a      	bne.n	80101d8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010190:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	689a      	ldr	r2, [r3, #8]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f022 0201 	bic.w	r2, r2, #1
 80101a0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689a      	ldr	r2, [r3, #8]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101b0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2220      	movs	r2, #32
 80101b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f022 0210 	bic.w	r2, r2, #16
 80101cc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f9 fcf8 	bl	8009bc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	1ad3      	subs	r3, r2, r3
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	4619      	mov	r1, r3
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 f893 	bl	8010318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80101f2:	e074      	b.n	80102de <HAL_UART_IRQHandler+0x3f2>
 80101f4:	04000120 	.word	0x04000120
 80101f8:	08010b71 	.word	0x08010b71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010208:	b29b      	uxth	r3, r3
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010214:	b29b      	uxth	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d063      	beq.n	80102e2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 801021a:	897b      	ldrh	r3, [r7, #10]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d060      	beq.n	80102e2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801022e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	689a      	ldr	r2, [r3, #8]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f022 0201 	bic.w	r2, r2, #1
 801023e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2220      	movs	r2, #32
 8010244:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f022 0210 	bic.w	r2, r2, #16
 8010260:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010262:	897b      	ldrh	r3, [r7, #10]
 8010264:	4619      	mov	r1, r3
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 f856 	bl	8010318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801026c:	e039      	b.n	80102e2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00d      	beq.n	8010294 <HAL_UART_IRQHandler+0x3a8>
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d008      	beq.n	8010294 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801028a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 fc9e 	bl	8010bce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010292:	e029      	b.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801029a:	2b00      	cmp	r3, #0
 801029c:	d00d      	beq.n	80102ba <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d008      	beq.n	80102ba <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d01a      	beq.n	80102e6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	4798      	blx	r3
    }
    return;
 80102b8:	e015      	b.n	80102e6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d011      	beq.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00c      	beq.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fc64 	bl	8010b9c <UART_EndTransmit_IT>
    return;
 80102d4:	e008      	b.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102d6:	bf00      	nop
 80102d8:	e006      	b.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80102da:	bf00      	nop
 80102dc:	e004      	b.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102de:	bf00      	nop
 80102e0:	e002      	b.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102e2:	bf00      	nop
 80102e4:	e000      	b.n	80102e8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80102e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80102e8:	3720      	adds	r7, #32
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop

080102f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80102f8:	bf00      	nop
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801030c:	bf00      	nop
 801030e:	370c      	adds	r7, #12
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010318:	b480      	push	{r7}
 801031a:	b083      	sub	sp, #12
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	460b      	mov	r3, r1
 8010322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010324:	bf00      	nop
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010330:	b5b0      	push	{r4, r5, r7, lr}
 8010332:	b088      	sub	sp, #32
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010338:	2300      	movs	r3, #0
 801033a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	689a      	ldr	r2, [r3, #8]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	431a      	orrs	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	431a      	orrs	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	69db      	ldr	r3, [r3, #28]
 8010350:	4313      	orrs	r3, r2
 8010352:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	4bad      	ldr	r3, [pc, #692]	; (8010610 <UART_SetConfig+0x2e0>)
 801035c:	4013      	ands	r3, r2
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	6812      	ldr	r2, [r2, #0]
 8010362:	69f9      	ldr	r1, [r7, #28]
 8010364:	430b      	orrs	r3, r1
 8010366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	68da      	ldr	r2, [r3, #12]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	430a      	orrs	r2, r1
 801037c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	699b      	ldr	r3, [r3, #24]
 8010382:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4aa2      	ldr	r2, [pc, #648]	; (8010614 <UART_SetConfig+0x2e4>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d004      	beq.n	8010398 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a1b      	ldr	r3, [r3, #32]
 8010392:	69fa      	ldr	r2, [r7, #28]
 8010394:	4313      	orrs	r3, r2
 8010396:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	69fa      	ldr	r2, [r7, #28]
 80103a8:	430a      	orrs	r2, r1
 80103aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a99      	ldr	r2, [pc, #612]	; (8010618 <UART_SetConfig+0x2e8>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d121      	bne.n	80103fa <UART_SetConfig+0xca>
 80103b6:	4b99      	ldr	r3, [pc, #612]	; (801061c <UART_SetConfig+0x2ec>)
 80103b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103bc:	f003 0303 	and.w	r3, r3, #3
 80103c0:	2b03      	cmp	r3, #3
 80103c2:	d817      	bhi.n	80103f4 <UART_SetConfig+0xc4>
 80103c4:	a201      	add	r2, pc, #4	; (adr r2, 80103cc <UART_SetConfig+0x9c>)
 80103c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ca:	bf00      	nop
 80103cc:	080103dd 	.word	0x080103dd
 80103d0:	080103e9 	.word	0x080103e9
 80103d4:	080103e3 	.word	0x080103e3
 80103d8:	080103ef 	.word	0x080103ef
 80103dc:	2301      	movs	r3, #1
 80103de:	76fb      	strb	r3, [r7, #27]
 80103e0:	e0e7      	b.n	80105b2 <UART_SetConfig+0x282>
 80103e2:	2302      	movs	r3, #2
 80103e4:	76fb      	strb	r3, [r7, #27]
 80103e6:	e0e4      	b.n	80105b2 <UART_SetConfig+0x282>
 80103e8:	2304      	movs	r3, #4
 80103ea:	76fb      	strb	r3, [r7, #27]
 80103ec:	e0e1      	b.n	80105b2 <UART_SetConfig+0x282>
 80103ee:	2308      	movs	r3, #8
 80103f0:	76fb      	strb	r3, [r7, #27]
 80103f2:	e0de      	b.n	80105b2 <UART_SetConfig+0x282>
 80103f4:	2310      	movs	r3, #16
 80103f6:	76fb      	strb	r3, [r7, #27]
 80103f8:	e0db      	b.n	80105b2 <UART_SetConfig+0x282>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4a88      	ldr	r2, [pc, #544]	; (8010620 <UART_SetConfig+0x2f0>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d132      	bne.n	801046a <UART_SetConfig+0x13a>
 8010404:	4b85      	ldr	r3, [pc, #532]	; (801061c <UART_SetConfig+0x2ec>)
 8010406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801040a:	f003 030c 	and.w	r3, r3, #12
 801040e:	2b0c      	cmp	r3, #12
 8010410:	d828      	bhi.n	8010464 <UART_SetConfig+0x134>
 8010412:	a201      	add	r2, pc, #4	; (adr r2, 8010418 <UART_SetConfig+0xe8>)
 8010414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010418:	0801044d 	.word	0x0801044d
 801041c:	08010465 	.word	0x08010465
 8010420:	08010465 	.word	0x08010465
 8010424:	08010465 	.word	0x08010465
 8010428:	08010459 	.word	0x08010459
 801042c:	08010465 	.word	0x08010465
 8010430:	08010465 	.word	0x08010465
 8010434:	08010465 	.word	0x08010465
 8010438:	08010453 	.word	0x08010453
 801043c:	08010465 	.word	0x08010465
 8010440:	08010465 	.word	0x08010465
 8010444:	08010465 	.word	0x08010465
 8010448:	0801045f 	.word	0x0801045f
 801044c:	2300      	movs	r3, #0
 801044e:	76fb      	strb	r3, [r7, #27]
 8010450:	e0af      	b.n	80105b2 <UART_SetConfig+0x282>
 8010452:	2302      	movs	r3, #2
 8010454:	76fb      	strb	r3, [r7, #27]
 8010456:	e0ac      	b.n	80105b2 <UART_SetConfig+0x282>
 8010458:	2304      	movs	r3, #4
 801045a:	76fb      	strb	r3, [r7, #27]
 801045c:	e0a9      	b.n	80105b2 <UART_SetConfig+0x282>
 801045e:	2308      	movs	r3, #8
 8010460:	76fb      	strb	r3, [r7, #27]
 8010462:	e0a6      	b.n	80105b2 <UART_SetConfig+0x282>
 8010464:	2310      	movs	r3, #16
 8010466:	76fb      	strb	r3, [r7, #27]
 8010468:	e0a3      	b.n	80105b2 <UART_SetConfig+0x282>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	4a6d      	ldr	r2, [pc, #436]	; (8010624 <UART_SetConfig+0x2f4>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d120      	bne.n	80104b6 <UART_SetConfig+0x186>
 8010474:	4b69      	ldr	r3, [pc, #420]	; (801061c <UART_SetConfig+0x2ec>)
 8010476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801047a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801047e:	2b30      	cmp	r3, #48	; 0x30
 8010480:	d013      	beq.n	80104aa <UART_SetConfig+0x17a>
 8010482:	2b30      	cmp	r3, #48	; 0x30
 8010484:	d814      	bhi.n	80104b0 <UART_SetConfig+0x180>
 8010486:	2b20      	cmp	r3, #32
 8010488:	d009      	beq.n	801049e <UART_SetConfig+0x16e>
 801048a:	2b20      	cmp	r3, #32
 801048c:	d810      	bhi.n	80104b0 <UART_SetConfig+0x180>
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <UART_SetConfig+0x168>
 8010492:	2b10      	cmp	r3, #16
 8010494:	d006      	beq.n	80104a4 <UART_SetConfig+0x174>
 8010496:	e00b      	b.n	80104b0 <UART_SetConfig+0x180>
 8010498:	2300      	movs	r3, #0
 801049a:	76fb      	strb	r3, [r7, #27]
 801049c:	e089      	b.n	80105b2 <UART_SetConfig+0x282>
 801049e:	2302      	movs	r3, #2
 80104a0:	76fb      	strb	r3, [r7, #27]
 80104a2:	e086      	b.n	80105b2 <UART_SetConfig+0x282>
 80104a4:	2304      	movs	r3, #4
 80104a6:	76fb      	strb	r3, [r7, #27]
 80104a8:	e083      	b.n	80105b2 <UART_SetConfig+0x282>
 80104aa:	2308      	movs	r3, #8
 80104ac:	76fb      	strb	r3, [r7, #27]
 80104ae:	e080      	b.n	80105b2 <UART_SetConfig+0x282>
 80104b0:	2310      	movs	r3, #16
 80104b2:	76fb      	strb	r3, [r7, #27]
 80104b4:	e07d      	b.n	80105b2 <UART_SetConfig+0x282>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a5b      	ldr	r2, [pc, #364]	; (8010628 <UART_SetConfig+0x2f8>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d120      	bne.n	8010502 <UART_SetConfig+0x1d2>
 80104c0:	4b56      	ldr	r3, [pc, #344]	; (801061c <UART_SetConfig+0x2ec>)
 80104c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80104ca:	2bc0      	cmp	r3, #192	; 0xc0
 80104cc:	d013      	beq.n	80104f6 <UART_SetConfig+0x1c6>
 80104ce:	2bc0      	cmp	r3, #192	; 0xc0
 80104d0:	d814      	bhi.n	80104fc <UART_SetConfig+0x1cc>
 80104d2:	2b80      	cmp	r3, #128	; 0x80
 80104d4:	d009      	beq.n	80104ea <UART_SetConfig+0x1ba>
 80104d6:	2b80      	cmp	r3, #128	; 0x80
 80104d8:	d810      	bhi.n	80104fc <UART_SetConfig+0x1cc>
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d002      	beq.n	80104e4 <UART_SetConfig+0x1b4>
 80104de:	2b40      	cmp	r3, #64	; 0x40
 80104e0:	d006      	beq.n	80104f0 <UART_SetConfig+0x1c0>
 80104e2:	e00b      	b.n	80104fc <UART_SetConfig+0x1cc>
 80104e4:	2300      	movs	r3, #0
 80104e6:	76fb      	strb	r3, [r7, #27]
 80104e8:	e063      	b.n	80105b2 <UART_SetConfig+0x282>
 80104ea:	2302      	movs	r3, #2
 80104ec:	76fb      	strb	r3, [r7, #27]
 80104ee:	e060      	b.n	80105b2 <UART_SetConfig+0x282>
 80104f0:	2304      	movs	r3, #4
 80104f2:	76fb      	strb	r3, [r7, #27]
 80104f4:	e05d      	b.n	80105b2 <UART_SetConfig+0x282>
 80104f6:	2308      	movs	r3, #8
 80104f8:	76fb      	strb	r3, [r7, #27]
 80104fa:	e05a      	b.n	80105b2 <UART_SetConfig+0x282>
 80104fc:	2310      	movs	r3, #16
 80104fe:	76fb      	strb	r3, [r7, #27]
 8010500:	e057      	b.n	80105b2 <UART_SetConfig+0x282>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4a49      	ldr	r2, [pc, #292]	; (801062c <UART_SetConfig+0x2fc>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d125      	bne.n	8010558 <UART_SetConfig+0x228>
 801050c:	4b43      	ldr	r3, [pc, #268]	; (801061c <UART_SetConfig+0x2ec>)
 801050e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801051a:	d017      	beq.n	801054c <UART_SetConfig+0x21c>
 801051c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010520:	d817      	bhi.n	8010552 <UART_SetConfig+0x222>
 8010522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010526:	d00b      	beq.n	8010540 <UART_SetConfig+0x210>
 8010528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801052c:	d811      	bhi.n	8010552 <UART_SetConfig+0x222>
 801052e:	2b00      	cmp	r3, #0
 8010530:	d003      	beq.n	801053a <UART_SetConfig+0x20a>
 8010532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010536:	d006      	beq.n	8010546 <UART_SetConfig+0x216>
 8010538:	e00b      	b.n	8010552 <UART_SetConfig+0x222>
 801053a:	2300      	movs	r3, #0
 801053c:	76fb      	strb	r3, [r7, #27]
 801053e:	e038      	b.n	80105b2 <UART_SetConfig+0x282>
 8010540:	2302      	movs	r3, #2
 8010542:	76fb      	strb	r3, [r7, #27]
 8010544:	e035      	b.n	80105b2 <UART_SetConfig+0x282>
 8010546:	2304      	movs	r3, #4
 8010548:	76fb      	strb	r3, [r7, #27]
 801054a:	e032      	b.n	80105b2 <UART_SetConfig+0x282>
 801054c:	2308      	movs	r3, #8
 801054e:	76fb      	strb	r3, [r7, #27]
 8010550:	e02f      	b.n	80105b2 <UART_SetConfig+0x282>
 8010552:	2310      	movs	r3, #16
 8010554:	76fb      	strb	r3, [r7, #27]
 8010556:	e02c      	b.n	80105b2 <UART_SetConfig+0x282>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a2d      	ldr	r2, [pc, #180]	; (8010614 <UART_SetConfig+0x2e4>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d125      	bne.n	80105ae <UART_SetConfig+0x27e>
 8010562:	4b2e      	ldr	r3, [pc, #184]	; (801061c <UART_SetConfig+0x2ec>)
 8010564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801056c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010570:	d017      	beq.n	80105a2 <UART_SetConfig+0x272>
 8010572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010576:	d817      	bhi.n	80105a8 <UART_SetConfig+0x278>
 8010578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801057c:	d00b      	beq.n	8010596 <UART_SetConfig+0x266>
 801057e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010582:	d811      	bhi.n	80105a8 <UART_SetConfig+0x278>
 8010584:	2b00      	cmp	r3, #0
 8010586:	d003      	beq.n	8010590 <UART_SetConfig+0x260>
 8010588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801058c:	d006      	beq.n	801059c <UART_SetConfig+0x26c>
 801058e:	e00b      	b.n	80105a8 <UART_SetConfig+0x278>
 8010590:	2300      	movs	r3, #0
 8010592:	76fb      	strb	r3, [r7, #27]
 8010594:	e00d      	b.n	80105b2 <UART_SetConfig+0x282>
 8010596:	2302      	movs	r3, #2
 8010598:	76fb      	strb	r3, [r7, #27]
 801059a:	e00a      	b.n	80105b2 <UART_SetConfig+0x282>
 801059c:	2304      	movs	r3, #4
 801059e:	76fb      	strb	r3, [r7, #27]
 80105a0:	e007      	b.n	80105b2 <UART_SetConfig+0x282>
 80105a2:	2308      	movs	r3, #8
 80105a4:	76fb      	strb	r3, [r7, #27]
 80105a6:	e004      	b.n	80105b2 <UART_SetConfig+0x282>
 80105a8:	2310      	movs	r3, #16
 80105aa:	76fb      	strb	r3, [r7, #27]
 80105ac:	e001      	b.n	80105b2 <UART_SetConfig+0x282>
 80105ae:	2310      	movs	r3, #16
 80105b0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a17      	ldr	r2, [pc, #92]	; (8010614 <UART_SetConfig+0x2e4>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	f040 8087 	bne.w	80106cc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80105be:	7efb      	ldrb	r3, [r7, #27]
 80105c0:	2b08      	cmp	r3, #8
 80105c2:	d837      	bhi.n	8010634 <UART_SetConfig+0x304>
 80105c4:	a201      	add	r2, pc, #4	; (adr r2, 80105cc <UART_SetConfig+0x29c>)
 80105c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ca:	bf00      	nop
 80105cc:	080105f1 	.word	0x080105f1
 80105d0:	08010635 	.word	0x08010635
 80105d4:	080105f9 	.word	0x080105f9
 80105d8:	08010635 	.word	0x08010635
 80105dc:	080105ff 	.word	0x080105ff
 80105e0:	08010635 	.word	0x08010635
 80105e4:	08010635 	.word	0x08010635
 80105e8:	08010635 	.word	0x08010635
 80105ec:	08010607 	.word	0x08010607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105f0:	f7fc fa0e 	bl	800ca10 <HAL_RCC_GetPCLK1Freq>
 80105f4:	6178      	str	r0, [r7, #20]
        break;
 80105f6:	e022      	b.n	801063e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80105f8:	4b0d      	ldr	r3, [pc, #52]	; (8010630 <UART_SetConfig+0x300>)
 80105fa:	617b      	str	r3, [r7, #20]
        break;
 80105fc:	e01f      	b.n	801063e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105fe:	f7fc f96f 	bl	800c8e0 <HAL_RCC_GetSysClockFreq>
 8010602:	6178      	str	r0, [r7, #20]
        break;
 8010604:	e01b      	b.n	801063e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801060a:	617b      	str	r3, [r7, #20]
        break;
 801060c:	e017      	b.n	801063e <UART_SetConfig+0x30e>
 801060e:	bf00      	nop
 8010610:	efff69f3 	.word	0xefff69f3
 8010614:	40008000 	.word	0x40008000
 8010618:	40013800 	.word	0x40013800
 801061c:	40021000 	.word	0x40021000
 8010620:	40004400 	.word	0x40004400
 8010624:	40004800 	.word	0x40004800
 8010628:	40004c00 	.word	0x40004c00
 801062c:	40005000 	.word	0x40005000
 8010630:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010638:	2301      	movs	r3, #1
 801063a:	76bb      	strb	r3, [r7, #26]
        break;
 801063c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 80f1 	beq.w	8010828 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	685a      	ldr	r2, [r3, #4]
 801064a:	4613      	mov	r3, r2
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4413      	add	r3, r2
 8010650:	697a      	ldr	r2, [r7, #20]
 8010652:	429a      	cmp	r2, r3
 8010654:	d305      	bcc.n	8010662 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801065c:	697a      	ldr	r2, [r7, #20]
 801065e:	429a      	cmp	r2, r3
 8010660:	d902      	bls.n	8010668 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8010662:	2301      	movs	r3, #1
 8010664:	76bb      	strb	r3, [r7, #26]
 8010666:	e0df      	b.n	8010828 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	4618      	mov	r0, r3
 801066c:	f04f 0100 	mov.w	r1, #0
 8010670:	f04f 0200 	mov.w	r2, #0
 8010674:	f04f 0300 	mov.w	r3, #0
 8010678:	020b      	lsls	r3, r1, #8
 801067a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801067e:	0202      	lsls	r2, r0, #8
 8010680:	6879      	ldr	r1, [r7, #4]
 8010682:	6849      	ldr	r1, [r1, #4]
 8010684:	0849      	lsrs	r1, r1, #1
 8010686:	4608      	mov	r0, r1
 8010688:	f04f 0100 	mov.w	r1, #0
 801068c:	1814      	adds	r4, r2, r0
 801068e:	eb43 0501 	adc.w	r5, r3, r1
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	461a      	mov	r2, r3
 8010698:	f04f 0300 	mov.w	r3, #0
 801069c:	4620      	mov	r0, r4
 801069e:	4629      	mov	r1, r5
 80106a0:	f7f0 fb52 	bl	8000d48 <__aeabi_uldivmod>
 80106a4:	4602      	mov	r2, r0
 80106a6:	460b      	mov	r3, r1
 80106a8:	4613      	mov	r3, r2
 80106aa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80106b2:	d308      	bcc.n	80106c6 <UART_SetConfig+0x396>
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106ba:	d204      	bcs.n	80106c6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	60da      	str	r2, [r3, #12]
 80106c4:	e0b0      	b.n	8010828 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80106c6:	2301      	movs	r3, #1
 80106c8:	76bb      	strb	r3, [r7, #26]
 80106ca:	e0ad      	b.n	8010828 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	69db      	ldr	r3, [r3, #28]
 80106d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106d4:	d15c      	bne.n	8010790 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80106d6:	7efb      	ldrb	r3, [r7, #27]
 80106d8:	2b08      	cmp	r3, #8
 80106da:	d828      	bhi.n	801072e <UART_SetConfig+0x3fe>
 80106dc:	a201      	add	r2, pc, #4	; (adr r2, 80106e4 <UART_SetConfig+0x3b4>)
 80106de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e2:	bf00      	nop
 80106e4:	08010709 	.word	0x08010709
 80106e8:	08010711 	.word	0x08010711
 80106ec:	08010719 	.word	0x08010719
 80106f0:	0801072f 	.word	0x0801072f
 80106f4:	0801071f 	.word	0x0801071f
 80106f8:	0801072f 	.word	0x0801072f
 80106fc:	0801072f 	.word	0x0801072f
 8010700:	0801072f 	.word	0x0801072f
 8010704:	08010727 	.word	0x08010727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010708:	f7fc f982 	bl	800ca10 <HAL_RCC_GetPCLK1Freq>
 801070c:	6178      	str	r0, [r7, #20]
        break;
 801070e:	e013      	b.n	8010738 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010710:	f7fc f994 	bl	800ca3c <HAL_RCC_GetPCLK2Freq>
 8010714:	6178      	str	r0, [r7, #20]
        break;
 8010716:	e00f      	b.n	8010738 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010718:	4b49      	ldr	r3, [pc, #292]	; (8010840 <UART_SetConfig+0x510>)
 801071a:	617b      	str	r3, [r7, #20]
        break;
 801071c:	e00c      	b.n	8010738 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801071e:	f7fc f8df 	bl	800c8e0 <HAL_RCC_GetSysClockFreq>
 8010722:	6178      	str	r0, [r7, #20]
        break;
 8010724:	e008      	b.n	8010738 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801072a:	617b      	str	r3, [r7, #20]
        break;
 801072c:	e004      	b.n	8010738 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 801072e:	2300      	movs	r3, #0
 8010730:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010732:	2301      	movs	r3, #1
 8010734:	76bb      	strb	r3, [r7, #26]
        break;
 8010736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d074      	beq.n	8010828 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	005a      	lsls	r2, r3, #1
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	085b      	lsrs	r3, r3, #1
 8010748:	441a      	add	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010752:	b29b      	uxth	r3, r3
 8010754:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b0f      	cmp	r3, #15
 801075a:	d916      	bls.n	801078a <UART_SetConfig+0x45a>
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010762:	d212      	bcs.n	801078a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	b29b      	uxth	r3, r3
 8010768:	f023 030f 	bic.w	r3, r3, #15
 801076c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	085b      	lsrs	r3, r3, #1
 8010772:	b29b      	uxth	r3, r3
 8010774:	f003 0307 	and.w	r3, r3, #7
 8010778:	b29a      	uxth	r2, r3
 801077a:	89fb      	ldrh	r3, [r7, #14]
 801077c:	4313      	orrs	r3, r2
 801077e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	89fa      	ldrh	r2, [r7, #14]
 8010786:	60da      	str	r2, [r3, #12]
 8010788:	e04e      	b.n	8010828 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	76bb      	strb	r3, [r7, #26]
 801078e:	e04b      	b.n	8010828 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010790:	7efb      	ldrb	r3, [r7, #27]
 8010792:	2b08      	cmp	r3, #8
 8010794:	d827      	bhi.n	80107e6 <UART_SetConfig+0x4b6>
 8010796:	a201      	add	r2, pc, #4	; (adr r2, 801079c <UART_SetConfig+0x46c>)
 8010798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079c:	080107c1 	.word	0x080107c1
 80107a0:	080107c9 	.word	0x080107c9
 80107a4:	080107d1 	.word	0x080107d1
 80107a8:	080107e7 	.word	0x080107e7
 80107ac:	080107d7 	.word	0x080107d7
 80107b0:	080107e7 	.word	0x080107e7
 80107b4:	080107e7 	.word	0x080107e7
 80107b8:	080107e7 	.word	0x080107e7
 80107bc:	080107df 	.word	0x080107df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107c0:	f7fc f926 	bl	800ca10 <HAL_RCC_GetPCLK1Freq>
 80107c4:	6178      	str	r0, [r7, #20]
        break;
 80107c6:	e013      	b.n	80107f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107c8:	f7fc f938 	bl	800ca3c <HAL_RCC_GetPCLK2Freq>
 80107cc:	6178      	str	r0, [r7, #20]
        break;
 80107ce:	e00f      	b.n	80107f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80107d0:	4b1b      	ldr	r3, [pc, #108]	; (8010840 <UART_SetConfig+0x510>)
 80107d2:	617b      	str	r3, [r7, #20]
        break;
 80107d4:	e00c      	b.n	80107f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80107d6:	f7fc f883 	bl	800c8e0 <HAL_RCC_GetSysClockFreq>
 80107da:	6178      	str	r0, [r7, #20]
        break;
 80107dc:	e008      	b.n	80107f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107e2:	617b      	str	r3, [r7, #20]
        break;
 80107e4:	e004      	b.n	80107f0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80107e6:	2300      	movs	r3, #0
 80107e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	76bb      	strb	r3, [r7, #26]
        break;
 80107ee:	bf00      	nop
    }

    if (pclk != 0U)
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d018      	beq.n	8010828 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	085a      	lsrs	r2, r3, #1
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	441a      	add	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	fbb2 f3f3 	udiv	r3, r2, r3
 8010808:	b29b      	uxth	r3, r3
 801080a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	2b0f      	cmp	r3, #15
 8010810:	d908      	bls.n	8010824 <UART_SetConfig+0x4f4>
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010818:	d204      	bcs.n	8010824 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	693a      	ldr	r2, [r7, #16]
 8010820:	60da      	str	r2, [r3, #12]
 8010822:	e001      	b.n	8010828 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8010824:	2301      	movs	r3, #1
 8010826:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010834:	7ebb      	ldrb	r3, [r7, #26]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3720      	adds	r7, #32
 801083a:	46bd      	mov	sp, r7
 801083c:	bdb0      	pop	{r4, r5, r7, pc}
 801083e:	bf00      	nop
 8010840:	00f42400 	.word	0x00f42400

08010844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010850:	f003 0301 	and.w	r3, r3, #1
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00a      	beq.n	801086e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	430a      	orrs	r2, r1
 801086c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010872:	f003 0302 	and.w	r3, r3, #2
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00a      	beq.n	8010890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	430a      	orrs	r2, r1
 801088e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010894:	f003 0304 	and.w	r3, r3, #4
 8010898:	2b00      	cmp	r3, #0
 801089a:	d00a      	beq.n	80108b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	430a      	orrs	r2, r1
 80108b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b6:	f003 0308 	and.w	r3, r3, #8
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00a      	beq.n	80108d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	430a      	orrs	r2, r1
 80108d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d8:	f003 0310 	and.w	r3, r3, #16
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d00a      	beq.n	80108f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	430a      	orrs	r2, r1
 80108f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fa:	f003 0320 	and.w	r3, r3, #32
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	430a      	orrs	r2, r1
 8010916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010920:	2b00      	cmp	r3, #0
 8010922:	d01a      	beq.n	801095a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	430a      	orrs	r2, r1
 8010938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801093e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010942:	d10a      	bne.n	801095a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	430a      	orrs	r2, r1
 8010958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00a      	beq.n	801097c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	430a      	orrs	r2, r1
 801097a:	605a      	str	r2, [r3, #4]
  }
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af02      	add	r7, sp, #8
 801098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010998:	f7f7 f928 	bl	8007bec <HAL_GetTick>
 801099c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f003 0308 	and.w	r3, r3, #8
 80109a8:	2b08      	cmp	r3, #8
 80109aa:	d10e      	bne.n	80109ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f82d 	bl	8010a1a <UART_WaitOnFlagUntilTimeout>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109c6:	2303      	movs	r3, #3
 80109c8:	e023      	b.n	8010a12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f003 0304 	and.w	r3, r3, #4
 80109d4:	2b04      	cmp	r3, #4
 80109d6:	d10e      	bne.n	80109f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80109dc:	9300      	str	r3, [sp, #0]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f817 	bl	8010a1a <UART_WaitOnFlagUntilTimeout>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d001      	beq.n	80109f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109f2:	2303      	movs	r3, #3
 80109f4:	e00d      	b.n	8010a12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2220      	movs	r2, #32
 80109fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2220      	movs	r2, #32
 8010a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b084      	sub	sp, #16
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	60b9      	str	r1, [r7, #8]
 8010a24:	603b      	str	r3, [r7, #0]
 8010a26:	4613      	mov	r3, r2
 8010a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a2a:	e05e      	b.n	8010aea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a32:	d05a      	beq.n	8010aea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a34:	f7f7 f8da 	bl	8007bec <HAL_GetTick>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	69ba      	ldr	r2, [r7, #24]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d302      	bcc.n	8010a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8010a44:	69bb      	ldr	r3, [r7, #24]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d11b      	bne.n	8010a82 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	689a      	ldr	r2, [r3, #8]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f022 0201 	bic.w	r2, r2, #1
 8010a68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2220      	movs	r2, #32
 8010a74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010a7e:	2303      	movs	r3, #3
 8010a80:	e043      	b.n	8010b0a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f003 0304 	and.w	r3, r3, #4
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d02c      	beq.n	8010aea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	69db      	ldr	r3, [r3, #28]
 8010a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a9e:	d124      	bne.n	8010aea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010aa8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010ab8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	689a      	ldr	r2, [r3, #8]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f022 0201 	bic.w	r2, r2, #1
 8010ac8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2220      	movs	r2, #32
 8010ace:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2220      	movs	r2, #32
 8010ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	e00f      	b.n	8010b0a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	69da      	ldr	r2, [r3, #28]
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	4013      	ands	r3, r2
 8010af4:	68ba      	ldr	r2, [r7, #8]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	bf0c      	ite	eq
 8010afa:	2301      	moveq	r3, #1
 8010afc:	2300      	movne	r3, #0
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	461a      	mov	r2, r3
 8010b02:	79fb      	ldrb	r3, [r7, #7]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d091      	beq.n	8010a2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b08:	2300      	movs	r3, #0
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3710      	adds	r7, #16
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b12:	b480      	push	{r7}
 8010b14:	b083      	sub	sp, #12
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b28:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	689a      	ldr	r2, [r3, #8]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f022 0201 	bic.w	r2, r2, #1
 8010b38:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d107      	bne.n	8010b52 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f022 0210 	bic.w	r2, r2, #16
 8010b50:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2220      	movs	r2, #32
 8010b56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010b64:	bf00      	nop
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7ff fbb8 	bl	8010304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b94:	bf00      	nop
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bb2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2220      	movs	r2, #32
 8010bb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7ff fb95 	bl	80102f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bc6:	bf00      	nop
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010bce:	b480      	push	{r7}
 8010bd0:	b083      	sub	sp, #12
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010bd6:	bf00      	nop
 8010bd8:	370c      	adds	r7, #12
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr

08010be2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010be2:	b084      	sub	sp, #16
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	f107 001c 	add.w	r0, r7, #28
 8010bf0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f001 f9cf 	bl	8011fa4 <USB_CoreReset>
 8010c06:	4603      	mov	r3, r0
 8010c08:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d106      	bne.n	8010c1e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8010c1c:	e005      	b.n	8010c2a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c36:	b004      	add	sp, #16
 8010c38:	4770      	bx	lr
	...

08010c3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b087      	sub	sp, #28
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	4613      	mov	r3, r2
 8010c48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c4a:	79fb      	ldrb	r3, [r7, #7]
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d165      	bne.n	8010d1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	4a3e      	ldr	r2, [pc, #248]	; (8010d4c <USB_SetTurnaroundTime+0x110>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d906      	bls.n	8010c66 <USB_SetTurnaroundTime+0x2a>
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	4a3d      	ldr	r2, [pc, #244]	; (8010d50 <USB_SetTurnaroundTime+0x114>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d202      	bcs.n	8010c66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c60:	230f      	movs	r3, #15
 8010c62:	617b      	str	r3, [r7, #20]
 8010c64:	e05c      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	4a39      	ldr	r2, [pc, #228]	; (8010d50 <USB_SetTurnaroundTime+0x114>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d306      	bcc.n	8010c7c <USB_SetTurnaroundTime+0x40>
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	4a38      	ldr	r2, [pc, #224]	; (8010d54 <USB_SetTurnaroundTime+0x118>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d202      	bcs.n	8010c7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c76:	230e      	movs	r3, #14
 8010c78:	617b      	str	r3, [r7, #20]
 8010c7a:	e051      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	4a35      	ldr	r2, [pc, #212]	; (8010d54 <USB_SetTurnaroundTime+0x118>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d306      	bcc.n	8010c92 <USB_SetTurnaroundTime+0x56>
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	4a34      	ldr	r2, [pc, #208]	; (8010d58 <USB_SetTurnaroundTime+0x11c>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d202      	bcs.n	8010c92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010c8c:	230d      	movs	r3, #13
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	e046      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	4a30      	ldr	r2, [pc, #192]	; (8010d58 <USB_SetTurnaroundTime+0x11c>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d306      	bcc.n	8010ca8 <USB_SetTurnaroundTime+0x6c>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	4a2f      	ldr	r2, [pc, #188]	; (8010d5c <USB_SetTurnaroundTime+0x120>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d802      	bhi.n	8010ca8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010ca2:	230c      	movs	r3, #12
 8010ca4:	617b      	str	r3, [r7, #20]
 8010ca6:	e03b      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	4a2c      	ldr	r2, [pc, #176]	; (8010d5c <USB_SetTurnaroundTime+0x120>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d906      	bls.n	8010cbe <USB_SetTurnaroundTime+0x82>
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	4a2b      	ldr	r2, [pc, #172]	; (8010d60 <USB_SetTurnaroundTime+0x124>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d802      	bhi.n	8010cbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010cb8:	230b      	movs	r3, #11
 8010cba:	617b      	str	r3, [r7, #20]
 8010cbc:	e030      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	4a27      	ldr	r2, [pc, #156]	; (8010d60 <USB_SetTurnaroundTime+0x124>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d906      	bls.n	8010cd4 <USB_SetTurnaroundTime+0x98>
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	4a26      	ldr	r2, [pc, #152]	; (8010d64 <USB_SetTurnaroundTime+0x128>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d802      	bhi.n	8010cd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cce:	230a      	movs	r3, #10
 8010cd0:	617b      	str	r3, [r7, #20]
 8010cd2:	e025      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	4a23      	ldr	r2, [pc, #140]	; (8010d64 <USB_SetTurnaroundTime+0x128>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d906      	bls.n	8010cea <USB_SetTurnaroundTime+0xae>
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	4a22      	ldr	r2, [pc, #136]	; (8010d68 <USB_SetTurnaroundTime+0x12c>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d202      	bcs.n	8010cea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010ce4:	2309      	movs	r3, #9
 8010ce6:	617b      	str	r3, [r7, #20]
 8010ce8:	e01a      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	4a1e      	ldr	r2, [pc, #120]	; (8010d68 <USB_SetTurnaroundTime+0x12c>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d306      	bcc.n	8010d00 <USB_SetTurnaroundTime+0xc4>
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	4a1d      	ldr	r2, [pc, #116]	; (8010d6c <USB_SetTurnaroundTime+0x130>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d802      	bhi.n	8010d00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010cfa:	2308      	movs	r3, #8
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e00f      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	4a1a      	ldr	r2, [pc, #104]	; (8010d6c <USB_SetTurnaroundTime+0x130>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d906      	bls.n	8010d16 <USB_SetTurnaroundTime+0xda>
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	4a19      	ldr	r2, [pc, #100]	; (8010d70 <USB_SetTurnaroundTime+0x134>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d202      	bcs.n	8010d16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d10:	2307      	movs	r3, #7
 8010d12:	617b      	str	r3, [r7, #20]
 8010d14:	e004      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d16:	2306      	movs	r3, #6
 8010d18:	617b      	str	r3, [r7, #20]
 8010d1a:	e001      	b.n	8010d20 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d1c:	2309      	movs	r3, #9
 8010d1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	68da      	ldr	r2, [r3, #12]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	029b      	lsls	r3, r3, #10
 8010d34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d38:	431a      	orrs	r2, r3
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	371c      	adds	r7, #28
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	00d8acbf 	.word	0x00d8acbf
 8010d50:	00e4e1c0 	.word	0x00e4e1c0
 8010d54:	00f42400 	.word	0x00f42400
 8010d58:	01067380 	.word	0x01067380
 8010d5c:	011a499f 	.word	0x011a499f
 8010d60:	01312cff 	.word	0x01312cff
 8010d64:	014ca43f 	.word	0x014ca43f
 8010d68:	016e3600 	.word	0x016e3600
 8010d6c:	01a6ab1f 	.word	0x01a6ab1f
 8010d70:	01e84800 	.word	0x01e84800

08010d74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	f043 0201 	orr.w	r2, r3, #1
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d88:	2300      	movs	r3, #0
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	370c      	adds	r7, #12
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr

08010d96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d96:	b480      	push	{r7}
 8010d98:	b083      	sub	sp, #12
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	689b      	ldr	r3, [r3, #8]
 8010da2:	f023 0201 	bic.w	r2, r3, #1
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010dd0:	78fb      	ldrb	r3, [r7, #3]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d106      	bne.n	8010de4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	60da      	str	r2, [r3, #12]
 8010de2:	e00b      	b.n	8010dfc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010de4:	78fb      	ldrb	r3, [r7, #3]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	60da      	str	r2, [r3, #12]
 8010df6:	e001      	b.n	8010dfc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e003      	b.n	8010e04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010dfc:	2032      	movs	r0, #50	; 0x32
 8010dfe:	f7f6 ff01 	bl	8007c04 <HAL_Delay>

  return HAL_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b086      	sub	sp, #24
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e26:	2300      	movs	r3, #0
 8010e28:	613b      	str	r3, [r7, #16]
 8010e2a:	e009      	b.n	8010e40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	3340      	adds	r3, #64	; 0x40
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	4413      	add	r3, r2
 8010e36:	2200      	movs	r2, #0
 8010e38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	613b      	str	r3, [r7, #16]
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	2b0e      	cmp	r3, #14
 8010e44:	d9f2      	bls.n	8010e2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d11c      	bne.n	8010e86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e5a:	f043 0302 	orr.w	r3, r3, #2
 8010e5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	e005      	b.n	8010e92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e98:	461a      	mov	r2, r3
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eac:	461a      	mov	r2, r3
 8010eae:	680b      	ldr	r3, [r1, #0]
 8010eb0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010eb2:	2103      	movs	r1, #3
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 f93d 	bl	8011134 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010eba:	2110      	movs	r1, #16
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f8f1 	bl	80110a4 <USB_FlushTxFifo>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d001      	beq.n	8010ecc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 f90f 	bl	80110f0 <USB_FlushRxFifo>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010ed8:	2301      	movs	r3, #1
 8010eda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eee:	461a      	mov	r2, r3
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010efa:	461a      	mov	r2, r3
 8010efc:	2300      	movs	r3, #0
 8010efe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f00:	2300      	movs	r3, #0
 8010f02:	613b      	str	r3, [r7, #16]
 8010f04:	e043      	b.n	8010f8e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	015a      	lsls	r2, r3, #5
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f1c:	d118      	bne.n	8010f50 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d10a      	bne.n	8010f3a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	015a      	lsls	r2, r3, #5
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f30:	461a      	mov	r2, r3
 8010f32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	e013      	b.n	8010f62 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	015a      	lsls	r2, r3, #5
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	4413      	add	r3, r2
 8010f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f46:	461a      	mov	r2, r3
 8010f48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f4c:	6013      	str	r3, [r2, #0]
 8010f4e:	e008      	b.n	8010f62 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	015a      	lsls	r2, r3, #5
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	4413      	add	r3, r2
 8010f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	2300      	movs	r3, #0
 8010f60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	015a      	lsls	r2, r3, #5
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	4413      	add	r3, r2
 8010f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f6e:	461a      	mov	r2, r3
 8010f70:	2300      	movs	r3, #0
 8010f72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	015a      	lsls	r2, r3, #5
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f80:	461a      	mov	r2, r3
 8010f82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010f86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	613b      	str	r3, [r7, #16]
 8010f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f90:	693a      	ldr	r2, [r7, #16]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d3b7      	bcc.n	8010f06 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f96:	2300      	movs	r3, #0
 8010f98:	613b      	str	r3, [r7, #16]
 8010f9a:	e043      	b.n	8011024 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	015a      	lsls	r2, r3, #5
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fb2:	d118      	bne.n	8010fe6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10a      	bne.n	8010fd0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	015a      	lsls	r2, r3, #5
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010fcc:	6013      	str	r3, [r2, #0]
 8010fce:	e013      	b.n	8010ff8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	015a      	lsls	r2, r3, #5
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fdc:	461a      	mov	r2, r3
 8010fde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fe2:	6013      	str	r3, [r2, #0]
 8010fe4:	e008      	b.n	8010ff8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	015a      	lsls	r2, r3, #5
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	4413      	add	r3, r2
 8010fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	015a      	lsls	r2, r3, #5
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	4413      	add	r3, r2
 8011000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011004:	461a      	mov	r2, r3
 8011006:	2300      	movs	r3, #0
 8011008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	015a      	lsls	r2, r3, #5
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	4413      	add	r3, r2
 8011012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011016:	461a      	mov	r2, r3
 8011018:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801101c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	3301      	adds	r3, #1
 8011022:	613b      	str	r3, [r7, #16]
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	693a      	ldr	r2, [r7, #16]
 8011028:	429a      	cmp	r2, r3
 801102a:	d3b7      	bcc.n	8010f9c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	68fa      	ldr	r2, [r7, #12]
 8011036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801103a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801103e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801104c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	699b      	ldr	r3, [r3, #24]
 8011052:	f043 0210 	orr.w	r2, r3, #16
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	699a      	ldr	r2, [r3, #24]
 801105e:	4b10      	ldr	r3, [pc, #64]	; (80110a0 <USB_DevInit+0x294>)
 8011060:	4313      	orrs	r3, r2
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011068:	2b00      	cmp	r3, #0
 801106a:	d005      	beq.n	8011078 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	699b      	ldr	r3, [r3, #24]
 8011070:	f043 0208 	orr.w	r2, r3, #8
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801107a:	2b01      	cmp	r3, #1
 801107c:	d107      	bne.n	801108e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	699b      	ldr	r3, [r3, #24]
 8011082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011086:	f043 0304 	orr.w	r3, r3, #4
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801108e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011090:	4618      	mov	r0, r3
 8011092:	3718      	adds	r7, #24
 8011094:	46bd      	mov	sp, r7
 8011096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801109a:	b004      	add	sp, #16
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	803c3800 	.word	0x803c3800

080110a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80110ae:	2300      	movs	r3, #0
 80110b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	019b      	lsls	r3, r3, #6
 80110b6:	f043 0220 	orr.w	r2, r3, #32
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	3301      	adds	r3, #1
 80110c2:	60fb      	str	r3, [r7, #12]
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	4a09      	ldr	r2, [pc, #36]	; (80110ec <USB_FlushTxFifo+0x48>)
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d901      	bls.n	80110d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80110cc:	2303      	movs	r3, #3
 80110ce:	e006      	b.n	80110de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	691b      	ldr	r3, [r3, #16]
 80110d4:	f003 0320 	and.w	r3, r3, #32
 80110d8:	2b20      	cmp	r3, #32
 80110da:	d0f0      	beq.n	80110be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3714      	adds	r7, #20
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr
 80110ea:	bf00      	nop
 80110ec:	00030d40 	.word	0x00030d40

080110f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2210      	movs	r2, #16
 8011100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	3301      	adds	r3, #1
 8011106:	60fb      	str	r3, [r7, #12]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	4a09      	ldr	r2, [pc, #36]	; (8011130 <USB_FlushRxFifo+0x40>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d901      	bls.n	8011114 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011110:	2303      	movs	r3, #3
 8011112:	e006      	b.n	8011122 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	691b      	ldr	r3, [r3, #16]
 8011118:	f003 0310 	and.w	r3, r3, #16
 801111c:	2b10      	cmp	r3, #16
 801111e:	d0f0      	beq.n	8011102 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	00030d40 	.word	0x00030d40

08011134 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	78fb      	ldrb	r3, [r7, #3]
 801114e:	68f9      	ldr	r1, [r7, #12]
 8011150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011154:	4313      	orrs	r3, r2
 8011156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr

08011166 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011166:	b480      	push	{r7}
 8011168:	b087      	sub	sp, #28
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	f003 0306 	and.w	r3, r3, #6
 801117e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b02      	cmp	r3, #2
 8011184:	d002      	beq.n	801118c <USB_GetDevSpeed+0x26>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2b06      	cmp	r3, #6
 801118a:	d102      	bne.n	8011192 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801118c:	2302      	movs	r3, #2
 801118e:	75fb      	strb	r3, [r7, #23]
 8011190:	e001      	b.n	8011196 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011192:	230f      	movs	r3, #15
 8011194:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011196:	7dfb      	ldrb	r3, [r7, #23]
}
 8011198:	4618      	mov	r0, r3
 801119a:	371c      	adds	r7, #28
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	785b      	ldrb	r3, [r3, #1]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d13a      	bne.n	8011236 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111c6:	69da      	ldr	r2, [r3, #28]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f003 030f 	and.w	r3, r3, #15
 80111d0:	2101      	movs	r1, #1
 80111d2:	fa01 f303 	lsl.w	r3, r1, r3
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	68f9      	ldr	r1, [r7, #12]
 80111da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111de:	4313      	orrs	r3, r2
 80111e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	015a      	lsls	r2, r3, #5
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	4413      	add	r3, r2
 80111ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d155      	bne.n	80112a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	015a      	lsls	r2, r3, #5
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	4413      	add	r3, r2
 8011200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	689b      	ldr	r3, [r3, #8]
 801120a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	78db      	ldrb	r3, [r3, #3]
 8011212:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011214:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	059b      	lsls	r3, r3, #22
 801121a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801121c:	4313      	orrs	r3, r2
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	0151      	lsls	r1, r2, #5
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	440a      	add	r2, r1
 8011226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801122e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011232:	6013      	str	r3, [r2, #0]
 8011234:	e036      	b.n	80112a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801123c:	69da      	ldr	r2, [r3, #28]
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	f003 030f 	and.w	r3, r3, #15
 8011246:	2101      	movs	r1, #1
 8011248:	fa01 f303 	lsl.w	r3, r1, r3
 801124c:	041b      	lsls	r3, r3, #16
 801124e:	68f9      	ldr	r1, [r7, #12]
 8011250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011254:	4313      	orrs	r3, r2
 8011256:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	015a      	lsls	r2, r3, #5
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	4413      	add	r3, r2
 8011260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801126a:	2b00      	cmp	r3, #0
 801126c:	d11a      	bne.n	80112a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	015a      	lsls	r2, r3, #5
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	4413      	add	r3, r2
 8011276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	78db      	ldrb	r3, [r3, #3]
 8011288:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801128a:	430b      	orrs	r3, r1
 801128c:	4313      	orrs	r3, r2
 801128e:	68ba      	ldr	r2, [r7, #8]
 8011290:	0151      	lsls	r1, r2, #5
 8011292:	68fa      	ldr	r2, [r7, #12]
 8011294:	440a      	add	r2, r1
 8011296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801129e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3714      	adds	r7, #20
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
	...

080112b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b085      	sub	sp, #20
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	785b      	ldrb	r3, [r3, #1]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d161      	bne.n	8011394 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	015a      	lsls	r2, r3, #5
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4413      	add	r3, r2
 80112d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112e6:	d11f      	bne.n	8011328 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	015a      	lsls	r2, r3, #5
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	4413      	add	r3, r2
 80112f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	68ba      	ldr	r2, [r7, #8]
 80112f8:	0151      	lsls	r1, r2, #5
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	440a      	add	r2, r1
 80112fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011306:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	015a      	lsls	r2, r3, #5
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	4413      	add	r3, r2
 8011310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	0151      	lsls	r1, r2, #5
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	440a      	add	r2, r1
 801131e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801132e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	f003 030f 	and.w	r3, r3, #15
 8011338:	2101      	movs	r1, #1
 801133a:	fa01 f303 	lsl.w	r3, r1, r3
 801133e:	b29b      	uxth	r3, r3
 8011340:	43db      	mvns	r3, r3
 8011342:	68f9      	ldr	r1, [r7, #12]
 8011344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011348:	4013      	ands	r3, r2
 801134a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011352:	69da      	ldr	r2, [r3, #28]
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f003 030f 	and.w	r3, r3, #15
 801135c:	2101      	movs	r1, #1
 801135e:	fa01 f303 	lsl.w	r3, r1, r3
 8011362:	b29b      	uxth	r3, r3
 8011364:	43db      	mvns	r3, r3
 8011366:	68f9      	ldr	r1, [r7, #12]
 8011368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801136c:	4013      	ands	r3, r2
 801136e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	015a      	lsls	r2, r3, #5
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	4413      	add	r3, r2
 8011378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	0159      	lsls	r1, r3, #5
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	440b      	add	r3, r1
 8011386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801138a:	4619      	mov	r1, r3
 801138c:	4b35      	ldr	r3, [pc, #212]	; (8011464 <USB_DeactivateEndpoint+0x1b0>)
 801138e:	4013      	ands	r3, r2
 8011390:	600b      	str	r3, [r1, #0]
 8011392:	e060      	b.n	8011456 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	015a      	lsls	r2, r3, #5
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	4413      	add	r3, r2
 801139c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113aa:	d11f      	bne.n	80113ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	015a      	lsls	r2, r3, #5
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	4413      	add	r3, r2
 80113b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	68ba      	ldr	r2, [r7, #8]
 80113bc:	0151      	lsls	r1, r2, #5
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	440a      	add	r2, r1
 80113c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80113ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	015a      	lsls	r2, r3, #5
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	4413      	add	r3, r2
 80113d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	68ba      	ldr	r2, [r7, #8]
 80113dc:	0151      	lsls	r1, r2, #5
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	440a      	add	r2, r1
 80113e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	f003 030f 	and.w	r3, r3, #15
 80113fc:	2101      	movs	r1, #1
 80113fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011402:	041b      	lsls	r3, r3, #16
 8011404:	43db      	mvns	r3, r3
 8011406:	68f9      	ldr	r1, [r7, #12]
 8011408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801140c:	4013      	ands	r3, r2
 801140e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011416:	69da      	ldr	r2, [r3, #28]
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	f003 030f 	and.w	r3, r3, #15
 8011420:	2101      	movs	r1, #1
 8011422:	fa01 f303 	lsl.w	r3, r1, r3
 8011426:	041b      	lsls	r3, r3, #16
 8011428:	43db      	mvns	r3, r3
 801142a:	68f9      	ldr	r1, [r7, #12]
 801142c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011430:	4013      	ands	r3, r2
 8011432:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	015a      	lsls	r2, r3, #5
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	4413      	add	r3, r2
 801143c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	0159      	lsls	r1, r3, #5
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	440b      	add	r3, r1
 801144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801144e:	4619      	mov	r1, r3
 8011450:	4b05      	ldr	r3, [pc, #20]	; (8011468 <USB_DeactivateEndpoint+0x1b4>)
 8011452:	4013      	ands	r3, r2
 8011454:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3714      	adds	r7, #20
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	ec337800 	.word	0xec337800
 8011468:	eff37800 	.word	0xeff37800

0801146c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	785b      	ldrb	r3, [r3, #1]
 8011484:	2b01      	cmp	r3, #1
 8011486:	f040 810a 	bne.w	801169e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	695b      	ldr	r3, [r3, #20]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d132      	bne.n	80114f8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	015a      	lsls	r2, r3, #5
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	4413      	add	r3, r2
 801149a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801149e:	691b      	ldr	r3, [r3, #16]
 80114a0:	693a      	ldr	r2, [r7, #16]
 80114a2:	0151      	lsls	r1, r2, #5
 80114a4:	697a      	ldr	r2, [r7, #20]
 80114a6:	440a      	add	r2, r1
 80114a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80114b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80114b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	015a      	lsls	r2, r3, #5
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	4413      	add	r3, r2
 80114be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114c2:	691b      	ldr	r3, [r3, #16]
 80114c4:	693a      	ldr	r2, [r7, #16]
 80114c6:	0151      	lsls	r1, r2, #5
 80114c8:	697a      	ldr	r2, [r7, #20]
 80114ca:	440a      	add	r2, r1
 80114cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	015a      	lsls	r2, r3, #5
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	4413      	add	r3, r2
 80114de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114e2:	691b      	ldr	r3, [r3, #16]
 80114e4:	693a      	ldr	r2, [r7, #16]
 80114e6:	0151      	lsls	r1, r2, #5
 80114e8:	697a      	ldr	r2, [r7, #20]
 80114ea:	440a      	add	r2, r1
 80114ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114f0:	0cdb      	lsrs	r3, r3, #19
 80114f2:	04db      	lsls	r3, r3, #19
 80114f4:	6113      	str	r3, [r2, #16]
 80114f6:	e074      	b.n	80115e2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	015a      	lsls	r2, r3, #5
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	4413      	add	r3, r2
 8011500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011504:	691b      	ldr	r3, [r3, #16]
 8011506:	693a      	ldr	r2, [r7, #16]
 8011508:	0151      	lsls	r1, r2, #5
 801150a:	697a      	ldr	r2, [r7, #20]
 801150c:	440a      	add	r2, r1
 801150e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011512:	0cdb      	lsrs	r3, r3, #19
 8011514:	04db      	lsls	r3, r3, #19
 8011516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	015a      	lsls	r2, r3, #5
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	4413      	add	r3, r2
 8011520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	693a      	ldr	r2, [r7, #16]
 8011528:	0151      	lsls	r1, r2, #5
 801152a:	697a      	ldr	r2, [r7, #20]
 801152c:	440a      	add	r2, r1
 801152e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011532:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011536:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801153a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	015a      	lsls	r2, r3, #5
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	4413      	add	r3, r2
 8011544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011548:	691a      	ldr	r2, [r3, #16]
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	6959      	ldr	r1, [r3, #20]
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	440b      	add	r3, r1
 8011554:	1e59      	subs	r1, r3, #1
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	fbb1 f3f3 	udiv	r3, r1, r3
 801155e:	04d9      	lsls	r1, r3, #19
 8011560:	4baf      	ldr	r3, [pc, #700]	; (8011820 <USB_EPStartXfer+0x3b4>)
 8011562:	400b      	ands	r3, r1
 8011564:	6939      	ldr	r1, [r7, #16]
 8011566:	0148      	lsls	r0, r1, #5
 8011568:	6979      	ldr	r1, [r7, #20]
 801156a:	4401      	add	r1, r0
 801156c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011570:	4313      	orrs	r3, r2
 8011572:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	4413      	add	r3, r2
 801157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011580:	691a      	ldr	r2, [r3, #16]
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	695b      	ldr	r3, [r3, #20]
 8011586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801158a:	6939      	ldr	r1, [r7, #16]
 801158c:	0148      	lsls	r0, r1, #5
 801158e:	6979      	ldr	r1, [r7, #20]
 8011590:	4401      	add	r1, r0
 8011592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011596:	4313      	orrs	r3, r2
 8011598:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	78db      	ldrb	r3, [r3, #3]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d11f      	bne.n	80115e2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	015a      	lsls	r2, r3, #5
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	4413      	add	r3, r2
 80115aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ae:	691b      	ldr	r3, [r3, #16]
 80115b0:	693a      	ldr	r2, [r7, #16]
 80115b2:	0151      	lsls	r1, r2, #5
 80115b4:	697a      	ldr	r2, [r7, #20]
 80115b6:	440a      	add	r2, r1
 80115b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80115c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	015a      	lsls	r2, r3, #5
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	4413      	add	r3, r2
 80115ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ce:	691b      	ldr	r3, [r3, #16]
 80115d0:	693a      	ldr	r2, [r7, #16]
 80115d2:	0151      	lsls	r1, r2, #5
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	440a      	add	r2, r1
 80115d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80115e0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	015a      	lsls	r2, r3, #5
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	4413      	add	r3, r2
 80115ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	693a      	ldr	r2, [r7, #16]
 80115f2:	0151      	lsls	r1, r2, #5
 80115f4:	697a      	ldr	r2, [r7, #20]
 80115f6:	440a      	add	r2, r1
 80115f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011600:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	78db      	ldrb	r3, [r3, #3]
 8011606:	2b01      	cmp	r3, #1
 8011608:	d015      	beq.n	8011636 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	2b00      	cmp	r3, #0
 8011610:	f000 8100 	beq.w	8011814 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801161a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	f003 030f 	and.w	r3, r3, #15
 8011624:	2101      	movs	r1, #1
 8011626:	fa01 f303 	lsl.w	r3, r1, r3
 801162a:	6979      	ldr	r1, [r7, #20]
 801162c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011630:	4313      	orrs	r3, r2
 8011632:	634b      	str	r3, [r1, #52]	; 0x34
 8011634:	e0ee      	b.n	8011814 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801163c:	689b      	ldr	r3, [r3, #8]
 801163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011642:	2b00      	cmp	r3, #0
 8011644:	d110      	bne.n	8011668 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	015a      	lsls	r2, r3, #5
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	4413      	add	r3, r2
 801164e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	693a      	ldr	r2, [r7, #16]
 8011656:	0151      	lsls	r1, r2, #5
 8011658:	697a      	ldr	r2, [r7, #20]
 801165a:	440a      	add	r2, r1
 801165c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011664:	6013      	str	r3, [r2, #0]
 8011666:	e00f      	b.n	8011688 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	015a      	lsls	r2, r3, #5
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	4413      	add	r3, r2
 8011670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	693a      	ldr	r2, [r7, #16]
 8011678:	0151      	lsls	r1, r2, #5
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	440a      	add	r2, r1
 801167e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011686:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	68d9      	ldr	r1, [r3, #12]
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	781a      	ldrb	r2, [r3, #0]
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	695b      	ldr	r3, [r3, #20]
 8011694:	b29b      	uxth	r3, r3
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 f9e2 	bl	8011a60 <USB_WritePacket>
 801169c:	e0ba      	b.n	8011814 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	015a      	lsls	r2, r3, #5
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	4413      	add	r3, r2
 80116a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116aa:	691b      	ldr	r3, [r3, #16]
 80116ac:	693a      	ldr	r2, [r7, #16]
 80116ae:	0151      	lsls	r1, r2, #5
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	440a      	add	r2, r1
 80116b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116b8:	0cdb      	lsrs	r3, r3, #19
 80116ba:	04db      	lsls	r3, r3, #19
 80116bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	015a      	lsls	r2, r3, #5
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	4413      	add	r3, r2
 80116c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	693a      	ldr	r2, [r7, #16]
 80116ce:	0151      	lsls	r1, r2, #5
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	440a      	add	r2, r1
 80116d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80116dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80116e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	695b      	ldr	r3, [r3, #20]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d123      	bne.n	8011732 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	015a      	lsls	r2, r3, #5
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	4413      	add	r3, r2
 80116f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116f6:	691a      	ldr	r2, [r3, #16]
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011700:	6939      	ldr	r1, [r7, #16]
 8011702:	0148      	lsls	r0, r1, #5
 8011704:	6979      	ldr	r1, [r7, #20]
 8011706:	4401      	add	r1, r0
 8011708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801170c:	4313      	orrs	r3, r2
 801170e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	015a      	lsls	r2, r3, #5
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	4413      	add	r3, r2
 8011718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	0151      	lsls	r1, r2, #5
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	440a      	add	r2, r1
 8011726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801172a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801172e:	6113      	str	r3, [r2, #16]
 8011730:	e033      	b.n	801179a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	695a      	ldr	r2, [r3, #20]
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	4413      	add	r3, r2
 801173c:	1e5a      	subs	r2, r3, #1
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	fbb2 f3f3 	udiv	r3, r2, r3
 8011746:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	015a      	lsls	r2, r3, #5
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	4413      	add	r3, r2
 8011750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011754:	691a      	ldr	r2, [r3, #16]
 8011756:	89fb      	ldrh	r3, [r7, #14]
 8011758:	04d9      	lsls	r1, r3, #19
 801175a:	4b31      	ldr	r3, [pc, #196]	; (8011820 <USB_EPStartXfer+0x3b4>)
 801175c:	400b      	ands	r3, r1
 801175e:	6939      	ldr	r1, [r7, #16]
 8011760:	0148      	lsls	r0, r1, #5
 8011762:	6979      	ldr	r1, [r7, #20]
 8011764:	4401      	add	r1, r0
 8011766:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801176a:	4313      	orrs	r3, r2
 801176c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	015a      	lsls	r2, r3, #5
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	4413      	add	r3, r2
 8011776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801177a:	691a      	ldr	r2, [r3, #16]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	89f9      	ldrh	r1, [r7, #14]
 8011782:	fb01 f303 	mul.w	r3, r1, r3
 8011786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801178a:	6939      	ldr	r1, [r7, #16]
 801178c:	0148      	lsls	r0, r1, #5
 801178e:	6979      	ldr	r1, [r7, #20]
 8011790:	4401      	add	r1, r0
 8011792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011796:	4313      	orrs	r3, r2
 8011798:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	78db      	ldrb	r3, [r3, #3]
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d128      	bne.n	80117f4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d110      	bne.n	80117d4 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	015a      	lsls	r2, r3, #5
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	4413      	add	r3, r2
 80117ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	693a      	ldr	r2, [r7, #16]
 80117c2:	0151      	lsls	r1, r2, #5
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	440a      	add	r2, r1
 80117c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117d0:	6013      	str	r3, [r2, #0]
 80117d2:	e00f      	b.n	80117f4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	015a      	lsls	r2, r3, #5
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	4413      	add	r3, r2
 80117dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	693a      	ldr	r2, [r7, #16]
 80117e4:	0151      	lsls	r1, r2, #5
 80117e6:	697a      	ldr	r2, [r7, #20]
 80117e8:	440a      	add	r2, r1
 80117ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	015a      	lsls	r2, r3, #5
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	4413      	add	r3, r2
 80117fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	693a      	ldr	r2, [r7, #16]
 8011804:	0151      	lsls	r1, r2, #5
 8011806:	697a      	ldr	r2, [r7, #20]
 8011808:	440a      	add	r2, r1
 801180a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801180e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011812:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3718      	adds	r7, #24
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	1ff80000 	.word	0x1ff80000

08011824 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011824:	b480      	push	{r7}
 8011826:	b085      	sub	sp, #20
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	785b      	ldrb	r3, [r3, #1]
 801183c:	2b01      	cmp	r3, #1
 801183e:	f040 80ab 	bne.w	8011998 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	695b      	ldr	r3, [r3, #20]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d132      	bne.n	80118b0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	015a      	lsls	r2, r3, #5
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	4413      	add	r3, r2
 8011852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	0151      	lsls	r1, r2, #5
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	440a      	add	r2, r1
 8011860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801186c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	015a      	lsls	r2, r3, #5
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	4413      	add	r3, r2
 8011876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	68ba      	ldr	r2, [r7, #8]
 801187e:	0151      	lsls	r1, r2, #5
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	440a      	add	r2, r1
 8011884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801188c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	015a      	lsls	r2, r3, #5
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	4413      	add	r3, r2
 8011896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	68ba      	ldr	r2, [r7, #8]
 801189e:	0151      	lsls	r1, r2, #5
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	440a      	add	r2, r1
 80118a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118a8:	0cdb      	lsrs	r3, r3, #19
 80118aa:	04db      	lsls	r3, r3, #19
 80118ac:	6113      	str	r3, [r2, #16]
 80118ae:	e04e      	b.n	801194e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	015a      	lsls	r2, r3, #5
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	4413      	add	r3, r2
 80118b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118bc:	691b      	ldr	r3, [r3, #16]
 80118be:	68ba      	ldr	r2, [r7, #8]
 80118c0:	0151      	lsls	r1, r2, #5
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	440a      	add	r2, r1
 80118c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118ca:	0cdb      	lsrs	r3, r3, #19
 80118cc:	04db      	lsls	r3, r3, #19
 80118ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	015a      	lsls	r2, r3, #5
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	4413      	add	r3, r2
 80118d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118dc:	691b      	ldr	r3, [r3, #16]
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	0151      	lsls	r1, r2, #5
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	440a      	add	r2, r1
 80118e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	695a      	ldr	r2, [r3, #20]
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	689b      	ldr	r3, [r3, #8]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d903      	bls.n	8011908 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	689a      	ldr	r2, [r3, #8]
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	015a      	lsls	r2, r3, #5
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	4413      	add	r3, r2
 8011910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	0151      	lsls	r1, r2, #5
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	440a      	add	r2, r1
 801191e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	015a      	lsls	r2, r3, #5
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	4413      	add	r3, r2
 8011930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011934:	691a      	ldr	r2, [r3, #16]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	695b      	ldr	r3, [r3, #20]
 801193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801193e:	68b9      	ldr	r1, [r7, #8]
 8011940:	0148      	lsls	r0, r1, #5
 8011942:	68f9      	ldr	r1, [r7, #12]
 8011944:	4401      	add	r1, r0
 8011946:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801194a:	4313      	orrs	r3, r2
 801194c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	015a      	lsls	r2, r3, #5
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	4413      	add	r3, r2
 8011956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	0151      	lsls	r1, r2, #5
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	440a      	add	r2, r1
 8011964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011968:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801196c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	695b      	ldr	r3, [r3, #20]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d06d      	beq.n	8011a52 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	f003 030f 	and.w	r3, r3, #15
 8011986:	2101      	movs	r1, #1
 8011988:	fa01 f303 	lsl.w	r3, r1, r3
 801198c:	68f9      	ldr	r1, [r7, #12]
 801198e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011992:	4313      	orrs	r3, r2
 8011994:	634b      	str	r3, [r1, #52]	; 0x34
 8011996:	e05c      	b.n	8011a52 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	015a      	lsls	r2, r3, #5
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	4413      	add	r3, r2
 80119a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119a4:	691b      	ldr	r3, [r3, #16]
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	0151      	lsls	r1, r2, #5
 80119aa:	68fa      	ldr	r2, [r7, #12]
 80119ac:	440a      	add	r2, r1
 80119ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119b2:	0cdb      	lsrs	r3, r3, #19
 80119b4:	04db      	lsls	r3, r3, #19
 80119b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	015a      	lsls	r2, r3, #5
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	4413      	add	r3, r2
 80119c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	68ba      	ldr	r2, [r7, #8]
 80119c8:	0151      	lsls	r1, r2, #5
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	440a      	add	r2, r1
 80119ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80119d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80119da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	695b      	ldr	r3, [r3, #20]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d003      	beq.n	80119ec <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	689a      	ldr	r2, [r3, #8]
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	015a      	lsls	r2, r3, #5
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	4413      	add	r3, r2
 80119f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119f8:	691b      	ldr	r3, [r3, #16]
 80119fa:	68ba      	ldr	r2, [r7, #8]
 80119fc:	0151      	lsls	r1, r2, #5
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	440a      	add	r2, r1
 8011a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	015a      	lsls	r2, r3, #5
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	4413      	add	r3, r2
 8011a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a18:	691a      	ldr	r2, [r3, #16]
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a22:	68b9      	ldr	r1, [r7, #8]
 8011a24:	0148      	lsls	r0, r1, #5
 8011a26:	68f9      	ldr	r1, [r7, #12]
 8011a28:	4401      	add	r1, r0
 8011a2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a2e:	4313      	orrs	r3, r2
 8011a30:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	015a      	lsls	r2, r3, #5
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	0151      	lsls	r1, r2, #5
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	440a      	add	r2, r1
 8011a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011a50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a52:	2300      	movs	r3, #0
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3714      	adds	r7, #20
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b089      	sub	sp, #36	; 0x24
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	460b      	mov	r3, r1
 8011a70:	71fb      	strb	r3, [r7, #7]
 8011a72:	4613      	mov	r3, r2
 8011a74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011a7e:	88bb      	ldrh	r3, [r7, #4]
 8011a80:	3303      	adds	r3, #3
 8011a82:	089b      	lsrs	r3, r3, #2
 8011a84:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011a86:	2300      	movs	r3, #0
 8011a88:	61bb      	str	r3, [r7, #24]
 8011a8a:	e00f      	b.n	8011aac <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011a8c:	79fb      	ldrb	r3, [r7, #7]
 8011a8e:	031a      	lsls	r2, r3, #12
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	4413      	add	r3, r2
 8011a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a98:	461a      	mov	r2, r3
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	3304      	adds	r3, #4
 8011aa4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	61bb      	str	r3, [r7, #24]
 8011aac:	69ba      	ldr	r2, [r7, #24]
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d3eb      	bcc.n	8011a8c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011ab4:	2300      	movs	r3, #0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3724      	adds	r7, #36	; 0x24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr

08011ac2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011ac2:	b480      	push	{r7}
 8011ac4:	b089      	sub	sp, #36	; 0x24
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	60f8      	str	r0, [r7, #12]
 8011aca:	60b9      	str	r1, [r7, #8]
 8011acc:	4613      	mov	r3, r2
 8011ace:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011ad8:	88fb      	ldrh	r3, [r7, #6]
 8011ada:	3303      	adds	r3, #3
 8011adc:	089b      	lsrs	r3, r3, #2
 8011ade:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	61bb      	str	r3, [r7, #24]
 8011ae4:	e00b      	b.n	8011afe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	601a      	str	r2, [r3, #0]
    pDest++;
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	3304      	adds	r3, #4
 8011af6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	3301      	adds	r3, #1
 8011afc:	61bb      	str	r3, [r7, #24]
 8011afe:	69ba      	ldr	r2, [r7, #24]
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d3ef      	bcc.n	8011ae6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011b06:	69fb      	ldr	r3, [r7, #28]
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3724      	adds	r7, #36	; 0x24
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	785b      	ldrb	r3, [r3, #1]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d12c      	bne.n	8011b8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	015a      	lsls	r2, r3, #5
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	4413      	add	r3, r2
 8011b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	db12      	blt.n	8011b68 <USB_EPSetStall+0x54>
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00f      	beq.n	8011b68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	015a      	lsls	r2, r3, #5
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	4413      	add	r3, r2
 8011b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	0151      	lsls	r1, r2, #5
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	440a      	add	r2, r1
 8011b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011b66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	015a      	lsls	r2, r3, #5
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	4413      	add	r3, r2
 8011b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	0151      	lsls	r1, r2, #5
 8011b7a:	68fa      	ldr	r2, [r7, #12]
 8011b7c:	440a      	add	r2, r1
 8011b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b86:	6013      	str	r3, [r2, #0]
 8011b88:	e02b      	b.n	8011be2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	015a      	lsls	r2, r3, #5
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	4413      	add	r3, r2
 8011b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	db12      	blt.n	8011bc2 <USB_EPSetStall+0xae>
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00f      	beq.n	8011bc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	015a      	lsls	r2, r3, #5
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	4413      	add	r3, r2
 8011baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	68ba      	ldr	r2, [r7, #8]
 8011bb2:	0151      	lsls	r1, r2, #5
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	440a      	add	r2, r1
 8011bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011bc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	015a      	lsls	r2, r3, #5
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	4413      	add	r3, r2
 8011bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	0151      	lsls	r1, r2, #5
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	440a      	add	r2, r1
 8011bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011be0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3714      	adds	r7, #20
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b085      	sub	sp, #20
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	785b      	ldrb	r3, [r3, #1]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d128      	bne.n	8011c5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	015a      	lsls	r2, r3, #5
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	4413      	add	r3, r2
 8011c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	0151      	lsls	r1, r2, #5
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	440a      	add	r2, r1
 8011c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	78db      	ldrb	r3, [r3, #3]
 8011c30:	2b03      	cmp	r3, #3
 8011c32:	d003      	beq.n	8011c3c <USB_EPClearStall+0x4c>
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	78db      	ldrb	r3, [r3, #3]
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	d138      	bne.n	8011cae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	015a      	lsls	r2, r3, #5
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	4413      	add	r3, r2
 8011c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	0151      	lsls	r1, r2, #5
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	440a      	add	r2, r1
 8011c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c5a:	6013      	str	r3, [r2, #0]
 8011c5c:	e027      	b.n	8011cae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	015a      	lsls	r2, r3, #5
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	4413      	add	r3, r2
 8011c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	0151      	lsls	r1, r2, #5
 8011c70:	68fa      	ldr	r2, [r7, #12]
 8011c72:	440a      	add	r2, r1
 8011c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	78db      	ldrb	r3, [r3, #3]
 8011c82:	2b03      	cmp	r3, #3
 8011c84:	d003      	beq.n	8011c8e <USB_EPClearStall+0x9e>
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	78db      	ldrb	r3, [r3, #3]
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d10f      	bne.n	8011cae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	015a      	lsls	r2, r3, #5
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	4413      	add	r3, r2
 8011c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	0151      	lsls	r1, r2, #5
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	440a      	add	r2, r1
 8011ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011cda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011cde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	78fb      	ldrb	r3, [r7, #3]
 8011cea:	011b      	lsls	r3, r3, #4
 8011cec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011cf0:	68f9      	ldr	r1, [r7, #12]
 8011cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3714      	adds	r7, #20
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr

08011d08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b085      	sub	sp, #20
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d22:	f023 0303 	bic.w	r3, r3, #3
 8011d26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d36:	f023 0302 	bic.w	r3, r3, #2
 8011d3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3714      	adds	r7, #20
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr

08011d4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d4a:	b480      	push	{r7}
 8011d4c:	b085      	sub	sp, #20
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d64:	f023 0303 	bic.w	r3, r3, #3
 8011d68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	68fa      	ldr	r2, [r7, #12]
 8011d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d78:	f043 0302 	orr.w	r3, r3, #2
 8011d7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3714      	adds	r7, #20
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr

08011d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b085      	sub	sp, #20
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	695b      	ldr	r3, [r3, #20]
 8011d98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	699b      	ldr	r3, [r3, #24]
 8011d9e:	68fa      	ldr	r2, [r7, #12]
 8011da0:	4013      	ands	r3, r2
 8011da2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011da4:	68fb      	ldr	r3, [r7, #12]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3714      	adds	r7, #20
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr

08011db2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011db2:	b480      	push	{r7}
 8011db4:	b085      	sub	sp, #20
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dc4:	699b      	ldr	r3, [r3, #24]
 8011dc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	68ba      	ldr	r2, [r7, #8]
 8011dd2:	4013      	ands	r3, r2
 8011dd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	0c1b      	lsrs	r3, r3, #16
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3714      	adds	r7, #20
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr

08011de6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011de6:	b480      	push	{r7}
 8011de8:	b085      	sub	sp, #20
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011df8:	699b      	ldr	r3, [r3, #24]
 8011dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e02:	69db      	ldr	r3, [r3, #28]
 8011e04:	68ba      	ldr	r2, [r7, #8]
 8011e06:	4013      	ands	r3, r2
 8011e08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	b29b      	uxth	r3, r3
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3714      	adds	r7, #20
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e1a:	b480      	push	{r7}
 8011e1c:	b085      	sub	sp, #20
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
 8011e22:	460b      	mov	r3, r1
 8011e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	015a      	lsls	r2, r3, #5
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	4413      	add	r3, r2
 8011e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e36:	689b      	ldr	r3, [r3, #8]
 8011e38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e40:	695b      	ldr	r3, [r3, #20]
 8011e42:	68ba      	ldr	r2, [r7, #8]
 8011e44:	4013      	ands	r3, r2
 8011e46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e48:	68bb      	ldr	r3, [r7, #8]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr

08011e56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e56:	b480      	push	{r7}
 8011e58:	b087      	sub	sp, #28
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
 8011e5e:	460b      	mov	r3, r1
 8011e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011e7a:	78fb      	ldrb	r3, [r7, #3]
 8011e7c:	f003 030f 	and.w	r3, r3, #15
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	fa22 f303 	lsr.w	r3, r2, r3
 8011e86:	01db      	lsls	r3, r3, #7
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	4313      	orrs	r3, r2
 8011e8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011e90:	78fb      	ldrb	r3, [r7, #3]
 8011e92:	015a      	lsls	r2, r3, #5
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	4413      	add	r3, r2
 8011e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e9c:	689b      	ldr	r3, [r3, #8]
 8011e9e:	693a      	ldr	r2, [r7, #16]
 8011ea0:	4013      	ands	r3, r2
 8011ea2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011ea4:	68bb      	ldr	r3, [r7, #8]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	371c      	adds	r7, #28
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr

08011eb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011eb2:	b480      	push	{r7}
 8011eb4:	b083      	sub	sp, #12
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	695b      	ldr	r3, [r3, #20]
 8011ebe:	f003 0301 	and.w	r3, r3, #1
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	370c      	adds	r7, #12
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr

08011ece <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011ece:	b480      	push	{r7}
 8011ed0:	b085      	sub	sp, #20
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	68fa      	ldr	r2, [r7, #12]
 8011ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ee8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011eec:	f023 0307 	bic.w	r3, r3, #7
 8011ef0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	68fa      	ldr	r2, [r7, #12]
 8011efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f06:	2300      	movs	r3, #0
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3714      	adds	r7, #20
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	333c      	adds	r3, #60	; 0x3c
 8011f26:	3304      	adds	r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	4a1c      	ldr	r2, [pc, #112]	; (8011fa0 <USB_EP0_OutStart+0x8c>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d90a      	bls.n	8011f4a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f44:	d101      	bne.n	8011f4a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e024      	b.n	8011f94 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f50:	461a      	mov	r2, r3
 8011f52:	2300      	movs	r3, #0
 8011f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	68fa      	ldr	r2, [r7, #12]
 8011f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f70:	691b      	ldr	r3, [r3, #16]
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f78:	f043 0318 	orr.w	r3, r3, #24
 8011f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	68fa      	ldr	r2, [r7, #12]
 8011f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011f90:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr
 8011fa0:	4f54300a 	.word	0x4f54300a

08011fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b085      	sub	sp, #20
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011fac:	2300      	movs	r3, #0
 8011fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	60fb      	str	r3, [r7, #12]
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	4a13      	ldr	r2, [pc, #76]	; (8012008 <USB_CoreReset+0x64>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d901      	bls.n	8011fc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011fbe:	2303      	movs	r3, #3
 8011fc0:	e01b      	b.n	8011ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	691b      	ldr	r3, [r3, #16]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	daf2      	bge.n	8011fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	691b      	ldr	r3, [r3, #16]
 8011fd2:	f043 0201 	orr.w	r2, r3, #1
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	60fb      	str	r3, [r7, #12]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	4a09      	ldr	r2, [pc, #36]	; (8012008 <USB_CoreReset+0x64>)
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	d901      	bls.n	8011fec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011fe8:	2303      	movs	r3, #3
 8011fea:	e006      	b.n	8011ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	691b      	ldr	r3, [r3, #16]
 8011ff0:	f003 0301 	and.w	r3, r3, #1
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d0f0      	beq.n	8011fda <USB_CoreReset+0x36>

  return HAL_OK;
 8011ff8:	2300      	movs	r3, #0
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3714      	adds	r7, #20
 8011ffe:	46bd      	mov	sp, r7
 8012000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop
 8012008:	00030d40 	.word	0x00030d40

0801200c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012010:	4904      	ldr	r1, [pc, #16]	; (8012024 <MX_FATFS_Init+0x18>)
 8012012:	4805      	ldr	r0, [pc, #20]	; (8012028 <MX_FATFS_Init+0x1c>)
 8012014:	f002 fdc8 	bl	8014ba8 <FATFS_LinkDriver>
 8012018:	4603      	mov	r3, r0
 801201a:	461a      	mov	r2, r3
 801201c:	4b03      	ldr	r3, [pc, #12]	; (801202c <MX_FATFS_Init+0x20>)
 801201e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012020:	bf00      	nop
 8012022:	bd80      	pop	{r7, pc}
 8012024:	200086c8 	.word	0x200086c8
 8012028:	200002ec 	.word	0x200002ec
 801202c:	200086c4 	.word	0x200086c4

08012030 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012030:	b480      	push	{r7}
 8012032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012034:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012036:	4618      	mov	r0, r3
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	4603      	mov	r3, r0
 8012048:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat &= ~STA_NOINIT;
 801204a:	4b08      	ldr	r3, [pc, #32]	; (801206c <USER_initialize+0x2c>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	f023 0301 	bic.w	r3, r3, #1
 8012054:	b2da      	uxtb	r2, r3
 8012056:	4b05      	ldr	r3, [pc, #20]	; (801206c <USER_initialize+0x2c>)
 8012058:	701a      	strb	r2, [r3, #0]
    return Stat;
 801205a:	4b04      	ldr	r3, [pc, #16]	; (801206c <USER_initialize+0x2c>)
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8012060:	4618      	mov	r0, r3
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr
 801206c:	200002e9 	.word	0x200002e9

08012070 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012070:	b480      	push	{r7}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	4603      	mov	r3, r0
 8012078:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(pdrv) return STA_NOINIT;
 801207a:	79fb      	ldrb	r3, [r7, #7]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d001      	beq.n	8012084 <USER_status+0x14>
 8012080:	2301      	movs	r3, #1
 8012082:	e002      	b.n	801208a <USER_status+0x1a>
    return Stat;
 8012084:	4b04      	ldr	r3, [pc, #16]	; (8012098 <USER_status+0x28>)
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 801208a:	4618      	mov	r0, r3
 801208c:	370c      	adds	r7, #12
 801208e:	46bd      	mov	sp, r7
 8012090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012094:	4770      	bx	lr
 8012096:	bf00      	nop
 8012098:	200002e9 	.word	0x200002e9

0801209c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	607a      	str	r2, [r7, #4]
 80120a6:	603b      	str	r3, [r7, #0]
 80120a8:	4603      	mov	r3, r0
 80120aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		uint8_t block_cnt = 0;
 80120ac:	2300      	movs	r3, #0
 80120ae:	75fb      	strb	r3, [r7, #23]
		for(block_cnt=0;block_cnt<count;block_cnt++) W25_ReadBuf(&buff[block_cnt*512], sector+block_cnt);
 80120b0:	2300      	movs	r3, #0
 80120b2:	75fb      	strb	r3, [r7, #23]
 80120b4:	e010      	b.n	80120d8 <USER_read+0x3c>
 80120b6:	7dfb      	ldrb	r3, [r7, #23]
 80120b8:	025b      	lsls	r3, r3, #9
 80120ba:	461a      	mov	r2, r3
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	1898      	adds	r0, r3, r2
 80120c0:	7dfb      	ldrb	r3, [r7, #23]
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	4413      	add	r3, r2
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	4619      	mov	r1, r3
 80120ce:	f7f2 fb71 	bl	80047b4 <W25_ReadBuf>
 80120d2:	7dfb      	ldrb	r3, [r7, #23]
 80120d4:	3301      	adds	r3, #1
 80120d6:	75fb      	strb	r3, [r7, #23]
 80120d8:	7dfb      	ldrb	r3, [r7, #23]
 80120da:	683a      	ldr	r2, [r7, #0]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d8ea      	bhi.n	80120b6 <USER_read+0x1a>
		return RES_OK;
 80120e0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3718      	adds	r7, #24
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b086      	sub	sp, #24
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	607a      	str	r2, [r7, #4]
 80120f4:	603b      	str	r3, [r7, #0]
 80120f6:	4603      	mov	r3, r0
 80120f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t block_cnt = 0;
 80120fa:	2300      	movs	r3, #0
 80120fc:	75fb      	strb	r3, [r7, #23]
	for(block_cnt=0;block_cnt<count;block_cnt++) W25_WriteBuf(&buff[block_cnt*512], sector+block_cnt);
 80120fe:	2300      	movs	r3, #0
 8012100:	75fb      	strb	r3, [r7, #23]
 8012102:	e010      	b.n	8012126 <USER_write+0x3c>
 8012104:	7dfb      	ldrb	r3, [r7, #23]
 8012106:	025b      	lsls	r3, r3, #9
 8012108:	461a      	mov	r2, r3
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	1898      	adds	r0, r3, r2
 801210e:	7dfb      	ldrb	r3, [r7, #23]
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	b29b      	uxth	r3, r3
 8012116:	4413      	add	r3, r2
 8012118:	b29b      	uxth	r3, r3
 801211a:	4619      	mov	r1, r3
 801211c:	f7f2 fbba 	bl	8004894 <W25_WriteBuf>
 8012120:	7dfb      	ldrb	r3, [r7, #23]
 8012122:	3301      	adds	r3, #1
 8012124:	75fb      	strb	r3, [r7, #23]
 8012126:	7dfb      	ldrb	r3, [r7, #23]
 8012128:	683a      	ldr	r2, [r7, #0]
 801212a:	429a      	cmp	r2, r3
 801212c:	d8ea      	bhi.n	8012104 <USER_write+0x1a>

	return RES_OK;
 801212e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8012130:	4618      	mov	r0, r3
 8012132:	3718      	adds	r7, #24
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012138:	b480      	push	{r7}
 801213a:	b085      	sub	sp, #20
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	603a      	str	r2, [r7, #0]
 8012142:	71fb      	strb	r3, [r7, #7]
 8012144:	460b      	mov	r3, r1
 8012146:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 8012148:	2300      	movs	r3, #0
 801214a:	73fb      	strb	r3, [r7, #15]
	    if(pdrv) return RES_PARERR;
 801214c:	79fb      	ldrb	r3, [r7, #7]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d001      	beq.n	8012156 <USER_ioctl+0x1e>
 8012152:	2304      	movs	r3, #4
 8012154:	e02b      	b.n	80121ae <USER_ioctl+0x76>
	    if(Stat&STA_NOINIT) return RES_NOTRDY;
 8012156:	4b19      	ldr	r3, [pc, #100]	; (80121bc <USER_ioctl+0x84>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	b2db      	uxtb	r3, r3
 801215c:	f003 0301 	and.w	r3, r3, #1
 8012160:	2b00      	cmp	r3, #0
 8012162:	d001      	beq.n	8012168 <USER_ioctl+0x30>
 8012164:	2303      	movs	r3, #3
 8012166:	e022      	b.n	80121ae <USER_ioctl+0x76>
	    switch(cmd)
 8012168:	79bb      	ldrb	r3, [r7, #6]
 801216a:	2b03      	cmp	r3, #3
 801216c:	d81b      	bhi.n	80121a6 <USER_ioctl+0x6e>
 801216e:	a201      	add	r2, pc, #4	; (adr r2, 8012174 <USER_ioctl+0x3c>)
 8012170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012174:	080121a1 	.word	0x080121a1
 8012178:	08012191 	.word	0x08012191
 801217c:	08012185 	.word	0x08012185
 8012180:	08012199 	.word	0x08012199
	    {
			case GET_SECTOR_SIZE:
				*(WORD*)buff=50; // Размер сектора
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	2232      	movs	r2, #50	; 0x32
 8012188:	801a      	strh	r2, [r3, #0]
				res=RES_OK;
 801218a:	2300      	movs	r3, #0
 801218c:	73fb      	strb	r3, [r7, #15]
				break;
 801218e:	e00d      	b.n	80121ac <USER_ioctl+0x74>
			case GET_SECTOR_COUNT: *(WORD*)buff=50; break;
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	2232      	movs	r2, #50	; 0x32
 8012194:	801a      	strh	r2, [r3, #0]
 8012196:	e009      	b.n	80121ac <USER_ioctl+0x74>
			case GET_BLOCK_SIZE: *(WORD*)buff=50; break;
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	2232      	movs	r2, #50	; 0x32
 801219c:	801a      	strh	r2, [r3, #0]
 801219e:	e005      	b.n	80121ac <USER_ioctl+0x74>
			case CTRL_SYNC: res=RES_OK; break;
 80121a0:	2300      	movs	r3, #0
 80121a2:	73fb      	strb	r3, [r7, #15]
 80121a4:	e002      	b.n	80121ac <USER_ioctl+0x74>
			default: res = RES_PARERR; break;
 80121a6:	2304      	movs	r3, #4
 80121a8:	73fb      	strb	r3, [r7, #15]
 80121aa:	bf00      	nop
	    }

	    return res;
 80121ac:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop
 80121bc:	200002e9 	.word	0x200002e9

080121c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	4603      	mov	r3, r0
 80121c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80121ca:	79fb      	ldrb	r3, [r7, #7]
 80121cc:	4a08      	ldr	r2, [pc, #32]	; (80121f0 <disk_status+0x30>)
 80121ce:	009b      	lsls	r3, r3, #2
 80121d0:	4413      	add	r3, r2
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	79fa      	ldrb	r2, [r7, #7]
 80121d8:	4905      	ldr	r1, [pc, #20]	; (80121f0 <disk_status+0x30>)
 80121da:	440a      	add	r2, r1
 80121dc:	7a12      	ldrb	r2, [r2, #8]
 80121de:	4610      	mov	r0, r2
 80121e0:	4798      	blx	r3
 80121e2:	4603      	mov	r3, r0
 80121e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80121e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3710      	adds	r7, #16
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	20000908 	.word	0x20000908

080121f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	4603      	mov	r3, r0
 80121fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80121fe:	2300      	movs	r3, #0
 8012200:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	4a0d      	ldr	r2, [pc, #52]	; (801223c <disk_initialize+0x48>)
 8012206:	5cd3      	ldrb	r3, [r2, r3]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d111      	bne.n	8012230 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801220c:	79fb      	ldrb	r3, [r7, #7]
 801220e:	4a0b      	ldr	r2, [pc, #44]	; (801223c <disk_initialize+0x48>)
 8012210:	2101      	movs	r1, #1
 8012212:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	4a09      	ldr	r2, [pc, #36]	; (801223c <disk_initialize+0x48>)
 8012218:	009b      	lsls	r3, r3, #2
 801221a:	4413      	add	r3, r2
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	79fa      	ldrb	r2, [r7, #7]
 8012222:	4906      	ldr	r1, [pc, #24]	; (801223c <disk_initialize+0x48>)
 8012224:	440a      	add	r2, r1
 8012226:	7a12      	ldrb	r2, [r2, #8]
 8012228:	4610      	mov	r0, r2
 801222a:	4798      	blx	r3
 801222c:	4603      	mov	r3, r0
 801222e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012230:	7bfb      	ldrb	r3, [r7, #15]
}
 8012232:	4618      	mov	r0, r3
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	20000908 	.word	0x20000908

08012240 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012240:	b590      	push	{r4, r7, lr}
 8012242:	b087      	sub	sp, #28
 8012244:	af00      	add	r7, sp, #0
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	607a      	str	r2, [r7, #4]
 801224a:	603b      	str	r3, [r7, #0]
 801224c:	4603      	mov	r3, r0
 801224e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	4a0a      	ldr	r2, [pc, #40]	; (801227c <disk_read+0x3c>)
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	4413      	add	r3, r2
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	689c      	ldr	r4, [r3, #8]
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	4a07      	ldr	r2, [pc, #28]	; (801227c <disk_read+0x3c>)
 8012260:	4413      	add	r3, r2
 8012262:	7a18      	ldrb	r0, [r3, #8]
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	68b9      	ldr	r1, [r7, #8]
 801226a:	47a0      	blx	r4
 801226c:	4603      	mov	r3, r0
 801226e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012270:	7dfb      	ldrb	r3, [r7, #23]
}
 8012272:	4618      	mov	r0, r3
 8012274:	371c      	adds	r7, #28
 8012276:	46bd      	mov	sp, r7
 8012278:	bd90      	pop	{r4, r7, pc}
 801227a:	bf00      	nop
 801227c:	20000908 	.word	0x20000908

08012280 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012280:	b590      	push	{r4, r7, lr}
 8012282:	b087      	sub	sp, #28
 8012284:	af00      	add	r7, sp, #0
 8012286:	60b9      	str	r1, [r7, #8]
 8012288:	607a      	str	r2, [r7, #4]
 801228a:	603b      	str	r3, [r7, #0]
 801228c:	4603      	mov	r3, r0
 801228e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012290:	7bfb      	ldrb	r3, [r7, #15]
 8012292:	4a0a      	ldr	r2, [pc, #40]	; (80122bc <disk_write+0x3c>)
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	4413      	add	r3, r2
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	68dc      	ldr	r4, [r3, #12]
 801229c:	7bfb      	ldrb	r3, [r7, #15]
 801229e:	4a07      	ldr	r2, [pc, #28]	; (80122bc <disk_write+0x3c>)
 80122a0:	4413      	add	r3, r2
 80122a2:	7a18      	ldrb	r0, [r3, #8]
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	68b9      	ldr	r1, [r7, #8]
 80122aa:	47a0      	blx	r4
 80122ac:	4603      	mov	r3, r0
 80122ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80122b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	371c      	adds	r7, #28
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd90      	pop	{r4, r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20000908 	.word	0x20000908

080122c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	4603      	mov	r3, r0
 80122c8:	603a      	str	r2, [r7, #0]
 80122ca:	71fb      	strb	r3, [r7, #7]
 80122cc:	460b      	mov	r3, r1
 80122ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80122d0:	79fb      	ldrb	r3, [r7, #7]
 80122d2:	4a09      	ldr	r2, [pc, #36]	; (80122f8 <disk_ioctl+0x38>)
 80122d4:	009b      	lsls	r3, r3, #2
 80122d6:	4413      	add	r3, r2
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	691b      	ldr	r3, [r3, #16]
 80122dc:	79fa      	ldrb	r2, [r7, #7]
 80122de:	4906      	ldr	r1, [pc, #24]	; (80122f8 <disk_ioctl+0x38>)
 80122e0:	440a      	add	r2, r1
 80122e2:	7a10      	ldrb	r0, [r2, #8]
 80122e4:	79b9      	ldrb	r1, [r7, #6]
 80122e6:	683a      	ldr	r2, [r7, #0]
 80122e8:	4798      	blx	r3
 80122ea:	4603      	mov	r3, r0
 80122ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80122ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3710      	adds	r7, #16
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	20000908 	.word	0x20000908

080122fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80122fc:	b480      	push	{r7}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3301      	adds	r3, #1
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801230c:	89fb      	ldrh	r3, [r7, #14]
 801230e:	021b      	lsls	r3, r3, #8
 8012310:	b21a      	sxth	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	b21b      	sxth	r3, r3
 8012318:	4313      	orrs	r3, r2
 801231a:	b21b      	sxth	r3, r3
 801231c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801231e:	89fb      	ldrh	r3, [r7, #14]
}
 8012320:	4618      	mov	r0, r3
 8012322:	3714      	adds	r7, #20
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr

0801232c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	3303      	adds	r3, #3
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	021b      	lsls	r3, r3, #8
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	3202      	adds	r2, #2
 8012344:	7812      	ldrb	r2, [r2, #0]
 8012346:	4313      	orrs	r3, r2
 8012348:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	021b      	lsls	r3, r3, #8
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	3201      	adds	r2, #1
 8012352:	7812      	ldrb	r2, [r2, #0]
 8012354:	4313      	orrs	r3, r2
 8012356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	021b      	lsls	r3, r3, #8
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	7812      	ldrb	r2, [r2, #0]
 8012360:	4313      	orrs	r3, r2
 8012362:	60fb      	str	r3, [r7, #12]
	return rv;
 8012364:	68fb      	ldr	r3, [r7, #12]
}
 8012366:	4618      	mov	r0, r3
 8012368:	3714      	adds	r7, #20
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr

08012372 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012372:	b480      	push	{r7}
 8012374:	b083      	sub	sp, #12
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]
 801237a:	460b      	mov	r3, r1
 801237c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	1c5a      	adds	r2, r3, #1
 8012382:	607a      	str	r2, [r7, #4]
 8012384:	887a      	ldrh	r2, [r7, #2]
 8012386:	b2d2      	uxtb	r2, r2
 8012388:	701a      	strb	r2, [r3, #0]
 801238a:	887b      	ldrh	r3, [r7, #2]
 801238c:	0a1b      	lsrs	r3, r3, #8
 801238e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	1c5a      	adds	r2, r3, #1
 8012394:	607a      	str	r2, [r7, #4]
 8012396:	887a      	ldrh	r2, [r7, #2]
 8012398:	b2d2      	uxtb	r2, r2
 801239a:	701a      	strb	r2, [r3, #0]
}
 801239c:	bf00      	nop
 801239e:	370c      	adds	r7, #12
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	1c5a      	adds	r2, r3, #1
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	683a      	ldr	r2, [r7, #0]
 80123ba:	b2d2      	uxtb	r2, r2
 80123bc:	701a      	strb	r2, [r3, #0]
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	0a1b      	lsrs	r3, r3, #8
 80123c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	607a      	str	r2, [r7, #4]
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	b2d2      	uxtb	r2, r2
 80123ce:	701a      	strb	r2, [r3, #0]
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	0a1b      	lsrs	r3, r3, #8
 80123d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	1c5a      	adds	r2, r3, #1
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	683a      	ldr	r2, [r7, #0]
 80123de:	b2d2      	uxtb	r2, r2
 80123e0:	701a      	strb	r2, [r3, #0]
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	0a1b      	lsrs	r3, r3, #8
 80123e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	1c5a      	adds	r2, r3, #1
 80123ec:	607a      	str	r2, [r7, #4]
 80123ee:	683a      	ldr	r2, [r7, #0]
 80123f0:	b2d2      	uxtb	r2, r2
 80123f2:	701a      	strb	r2, [r3, #0]
}
 80123f4:	bf00      	nop
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012400:	b480      	push	{r7}
 8012402:	b087      	sub	sp, #28
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00d      	beq.n	8012436 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801241a:	693a      	ldr	r2, [r7, #16]
 801241c:	1c53      	adds	r3, r2, #1
 801241e:	613b      	str	r3, [r7, #16]
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	1c59      	adds	r1, r3, #1
 8012424:	6179      	str	r1, [r7, #20]
 8012426:	7812      	ldrb	r2, [r2, #0]
 8012428:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3b01      	subs	r3, #1
 801242e:	607b      	str	r3, [r7, #4]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1f1      	bne.n	801241a <mem_cpy+0x1a>
	}
}
 8012436:	bf00      	nop
 8012438:	371c      	adds	r7, #28
 801243a:	46bd      	mov	sp, r7
 801243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012440:	4770      	bx	lr

08012442 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012442:	b480      	push	{r7}
 8012444:	b087      	sub	sp, #28
 8012446:	af00      	add	r7, sp, #0
 8012448:	60f8      	str	r0, [r7, #12]
 801244a:	60b9      	str	r1, [r7, #8]
 801244c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	1c5a      	adds	r2, r3, #1
 8012456:	617a      	str	r2, [r7, #20]
 8012458:	68ba      	ldr	r2, [r7, #8]
 801245a:	b2d2      	uxtb	r2, r2
 801245c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	3b01      	subs	r3, #1
 8012462:	607b      	str	r3, [r7, #4]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1f3      	bne.n	8012452 <mem_set+0x10>
}
 801246a:	bf00      	nop
 801246c:	bf00      	nop
 801246e:	371c      	adds	r7, #28
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012478:	b480      	push	{r7}
 801247a:	b089      	sub	sp, #36	; 0x24
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	61fb      	str	r3, [r7, #28]
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801248c:	2300      	movs	r3, #0
 801248e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	1c5a      	adds	r2, r3, #1
 8012494:	61fa      	str	r2, [r7, #28]
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	4619      	mov	r1, r3
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	61ba      	str	r2, [r7, #24]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	1acb      	subs	r3, r1, r3
 80124a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	607b      	str	r3, [r7, #4]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d002      	beq.n	80124b8 <mem_cmp+0x40>
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d0eb      	beq.n	8012490 <mem_cmp+0x18>

	return r;
 80124b8:	697b      	ldr	r3, [r7, #20]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3724      	adds	r7, #36	; 0x24
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80124c6:	b480      	push	{r7}
 80124c8:	b083      	sub	sp, #12
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80124d0:	e002      	b.n	80124d8 <chk_chr+0x12>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	3301      	adds	r3, #1
 80124d6:	607b      	str	r3, [r7, #4]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d005      	beq.n	80124ec <chk_chr+0x26>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	461a      	mov	r2, r3
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d1f2      	bne.n	80124d2 <chk_chr+0xc>
	return *str;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	781b      	ldrb	r3, [r3, #0]
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b085      	sub	sp, #20
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012506:	2300      	movs	r3, #0
 8012508:	60bb      	str	r3, [r7, #8]
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	60fb      	str	r3, [r7, #12]
 801250e:	e029      	b.n	8012564 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012510:	4a27      	ldr	r2, [pc, #156]	; (80125b0 <chk_lock+0xb4>)
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	011b      	lsls	r3, r3, #4
 8012516:	4413      	add	r3, r2
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d01d      	beq.n	801255a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801251e:	4a24      	ldr	r2, [pc, #144]	; (80125b0 <chk_lock+0xb4>)
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	011b      	lsls	r3, r3, #4
 8012524:	4413      	add	r3, r2
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	429a      	cmp	r2, r3
 801252e:	d116      	bne.n	801255e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012530:	4a1f      	ldr	r2, [pc, #124]	; (80125b0 <chk_lock+0xb4>)
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	011b      	lsls	r3, r3, #4
 8012536:	4413      	add	r3, r2
 8012538:	3304      	adds	r3, #4
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012540:	429a      	cmp	r2, r3
 8012542:	d10c      	bne.n	801255e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012544:	4a1a      	ldr	r2, [pc, #104]	; (80125b0 <chk_lock+0xb4>)
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	011b      	lsls	r3, r3, #4
 801254a:	4413      	add	r3, r2
 801254c:	3308      	adds	r3, #8
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012554:	429a      	cmp	r2, r3
 8012556:	d102      	bne.n	801255e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012558:	e007      	b.n	801256a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801255a:	2301      	movs	r3, #1
 801255c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	3301      	adds	r3, #1
 8012562:	60fb      	str	r3, [r7, #12]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	2b01      	cmp	r3, #1
 8012568:	d9d2      	bls.n	8012510 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2b02      	cmp	r3, #2
 801256e:	d109      	bne.n	8012584 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d102      	bne.n	801257c <chk_lock+0x80>
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	2b02      	cmp	r3, #2
 801257a:	d101      	bne.n	8012580 <chk_lock+0x84>
 801257c:	2300      	movs	r3, #0
 801257e:	e010      	b.n	80125a2 <chk_lock+0xa6>
 8012580:	2312      	movs	r3, #18
 8012582:	e00e      	b.n	80125a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d108      	bne.n	801259c <chk_lock+0xa0>
 801258a:	4a09      	ldr	r2, [pc, #36]	; (80125b0 <chk_lock+0xb4>)
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	011b      	lsls	r3, r3, #4
 8012590:	4413      	add	r3, r2
 8012592:	330c      	adds	r3, #12
 8012594:	881b      	ldrh	r3, [r3, #0]
 8012596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801259a:	d101      	bne.n	80125a0 <chk_lock+0xa4>
 801259c:	2310      	movs	r3, #16
 801259e:	e000      	b.n	80125a2 <chk_lock+0xa6>
 80125a0:	2300      	movs	r3, #0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3714      	adds	r7, #20
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr
 80125ae:	bf00      	nop
 80125b0:	200008e8 	.word	0x200008e8

080125b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80125ba:	2300      	movs	r3, #0
 80125bc:	607b      	str	r3, [r7, #4]
 80125be:	e002      	b.n	80125c6 <enq_lock+0x12>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	3301      	adds	r3, #1
 80125c4:	607b      	str	r3, [r7, #4]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d806      	bhi.n	80125da <enq_lock+0x26>
 80125cc:	4a09      	ldr	r2, [pc, #36]	; (80125f4 <enq_lock+0x40>)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	011b      	lsls	r3, r3, #4
 80125d2:	4413      	add	r3, r2
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1f2      	bne.n	80125c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b02      	cmp	r3, #2
 80125de:	bf14      	ite	ne
 80125e0:	2301      	movne	r3, #1
 80125e2:	2300      	moveq	r3, #0
 80125e4:	b2db      	uxtb	r3, r3
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	370c      	adds	r7, #12
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	200008e8 	.word	0x200008e8

080125f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b085      	sub	sp, #20
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012602:	2300      	movs	r3, #0
 8012604:	60fb      	str	r3, [r7, #12]
 8012606:	e01f      	b.n	8012648 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012608:	4a41      	ldr	r2, [pc, #260]	; (8012710 <inc_lock+0x118>)
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	011b      	lsls	r3, r3, #4
 801260e:	4413      	add	r3, r2
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	429a      	cmp	r2, r3
 8012618:	d113      	bne.n	8012642 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801261a:	4a3d      	ldr	r2, [pc, #244]	; (8012710 <inc_lock+0x118>)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	011b      	lsls	r3, r3, #4
 8012620:	4413      	add	r3, r2
 8012622:	3304      	adds	r3, #4
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801262a:	429a      	cmp	r2, r3
 801262c:	d109      	bne.n	8012642 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801262e:	4a38      	ldr	r2, [pc, #224]	; (8012710 <inc_lock+0x118>)
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	011b      	lsls	r3, r3, #4
 8012634:	4413      	add	r3, r2
 8012636:	3308      	adds	r3, #8
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801263e:	429a      	cmp	r2, r3
 8012640:	d006      	beq.n	8012650 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	3301      	adds	r3, #1
 8012646:	60fb      	str	r3, [r7, #12]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d9dc      	bls.n	8012608 <inc_lock+0x10>
 801264e:	e000      	b.n	8012652 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012650:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2b02      	cmp	r3, #2
 8012656:	d132      	bne.n	80126be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012658:	2300      	movs	r3, #0
 801265a:	60fb      	str	r3, [r7, #12]
 801265c:	e002      	b.n	8012664 <inc_lock+0x6c>
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3301      	adds	r3, #1
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2b01      	cmp	r3, #1
 8012668:	d806      	bhi.n	8012678 <inc_lock+0x80>
 801266a:	4a29      	ldr	r2, [pc, #164]	; (8012710 <inc_lock+0x118>)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	011b      	lsls	r3, r3, #4
 8012670:	4413      	add	r3, r2
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1f2      	bne.n	801265e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	2b02      	cmp	r3, #2
 801267c:	d101      	bne.n	8012682 <inc_lock+0x8a>
 801267e:	2300      	movs	r3, #0
 8012680:	e040      	b.n	8012704 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	4922      	ldr	r1, [pc, #136]	; (8012710 <inc_lock+0x118>)
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	011b      	lsls	r3, r3, #4
 801268c:	440b      	add	r3, r1
 801268e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	689a      	ldr	r2, [r3, #8]
 8012694:	491e      	ldr	r1, [pc, #120]	; (8012710 <inc_lock+0x118>)
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	011b      	lsls	r3, r3, #4
 801269a:	440b      	add	r3, r1
 801269c:	3304      	adds	r3, #4
 801269e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	695a      	ldr	r2, [r3, #20]
 80126a4:	491a      	ldr	r1, [pc, #104]	; (8012710 <inc_lock+0x118>)
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	011b      	lsls	r3, r3, #4
 80126aa:	440b      	add	r3, r1
 80126ac:	3308      	adds	r3, #8
 80126ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80126b0:	4a17      	ldr	r2, [pc, #92]	; (8012710 <inc_lock+0x118>)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	011b      	lsls	r3, r3, #4
 80126b6:	4413      	add	r3, r2
 80126b8:	330c      	adds	r3, #12
 80126ba:	2200      	movs	r2, #0
 80126bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d009      	beq.n	80126d8 <inc_lock+0xe0>
 80126c4:	4a12      	ldr	r2, [pc, #72]	; (8012710 <inc_lock+0x118>)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	011b      	lsls	r3, r3, #4
 80126ca:	4413      	add	r3, r2
 80126cc:	330c      	adds	r3, #12
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <inc_lock+0xe0>
 80126d4:	2300      	movs	r3, #0
 80126d6:	e015      	b.n	8012704 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d108      	bne.n	80126f0 <inc_lock+0xf8>
 80126de:	4a0c      	ldr	r2, [pc, #48]	; (8012710 <inc_lock+0x118>)
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	011b      	lsls	r3, r3, #4
 80126e4:	4413      	add	r3, r2
 80126e6:	330c      	adds	r3, #12
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	3301      	adds	r3, #1
 80126ec:	b29a      	uxth	r2, r3
 80126ee:	e001      	b.n	80126f4 <inc_lock+0xfc>
 80126f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126f4:	4906      	ldr	r1, [pc, #24]	; (8012710 <inc_lock+0x118>)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	011b      	lsls	r3, r3, #4
 80126fa:	440b      	add	r3, r1
 80126fc:	330c      	adds	r3, #12
 80126fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	3301      	adds	r3, #1
}
 8012704:	4618      	mov	r0, r3
 8012706:	3714      	adds	r7, #20
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr
 8012710:	200008e8 	.word	0x200008e8

08012714 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012714:	b480      	push	{r7}
 8012716:	b085      	sub	sp, #20
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3b01      	subs	r3, #1
 8012720:	607b      	str	r3, [r7, #4]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2b01      	cmp	r3, #1
 8012726:	d825      	bhi.n	8012774 <dec_lock+0x60>
		n = Files[i].ctr;
 8012728:	4a17      	ldr	r2, [pc, #92]	; (8012788 <dec_lock+0x74>)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	011b      	lsls	r3, r3, #4
 801272e:	4413      	add	r3, r2
 8012730:	330c      	adds	r3, #12
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012736:	89fb      	ldrh	r3, [r7, #14]
 8012738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801273c:	d101      	bne.n	8012742 <dec_lock+0x2e>
 801273e:	2300      	movs	r3, #0
 8012740:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012742:	89fb      	ldrh	r3, [r7, #14]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <dec_lock+0x3a>
 8012748:	89fb      	ldrh	r3, [r7, #14]
 801274a:	3b01      	subs	r3, #1
 801274c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801274e:	4a0e      	ldr	r2, [pc, #56]	; (8012788 <dec_lock+0x74>)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	011b      	lsls	r3, r3, #4
 8012754:	4413      	add	r3, r2
 8012756:	330c      	adds	r3, #12
 8012758:	89fa      	ldrh	r2, [r7, #14]
 801275a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801275c:	89fb      	ldrh	r3, [r7, #14]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d105      	bne.n	801276e <dec_lock+0x5a>
 8012762:	4a09      	ldr	r2, [pc, #36]	; (8012788 <dec_lock+0x74>)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	011b      	lsls	r3, r3, #4
 8012768:	4413      	add	r3, r2
 801276a:	2200      	movs	r2, #0
 801276c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801276e:	2300      	movs	r3, #0
 8012770:	737b      	strb	r3, [r7, #13]
 8012772:	e001      	b.n	8012778 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012774:	2302      	movs	r3, #2
 8012776:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012778:	7b7b      	ldrb	r3, [r7, #13]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3714      	adds	r7, #20
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	200008e8 	.word	0x200008e8

0801278c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012794:	2300      	movs	r3, #0
 8012796:	60fb      	str	r3, [r7, #12]
 8012798:	e010      	b.n	80127bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801279a:	4a0d      	ldr	r2, [pc, #52]	; (80127d0 <clear_lock+0x44>)
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	011b      	lsls	r3, r3, #4
 80127a0:	4413      	add	r3, r2
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d105      	bne.n	80127b6 <clear_lock+0x2a>
 80127aa:	4a09      	ldr	r2, [pc, #36]	; (80127d0 <clear_lock+0x44>)
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	011b      	lsls	r3, r3, #4
 80127b0:	4413      	add	r3, r2
 80127b2:	2200      	movs	r2, #0
 80127b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	3301      	adds	r3, #1
 80127ba:	60fb      	str	r3, [r7, #12]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d9eb      	bls.n	801279a <clear_lock+0xe>
	}
}
 80127c2:	bf00      	nop
 80127c4:	bf00      	nop
 80127c6:	3714      	adds	r7, #20
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr
 80127d0:	200008e8 	.word	0x200008e8

080127d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	78db      	ldrb	r3, [r3, #3]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d034      	beq.n	8012852 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	7858      	ldrb	r0, [r3, #1]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127f8:	2301      	movs	r3, #1
 80127fa:	697a      	ldr	r2, [r7, #20]
 80127fc:	f7ff fd40 	bl	8012280 <disk_write>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d002      	beq.n	801280c <sync_window+0x38>
			res = FR_DISK_ERR;
 8012806:	2301      	movs	r3, #1
 8012808:	73fb      	strb	r3, [r7, #15]
 801280a:	e022      	b.n	8012852 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2200      	movs	r2, #0
 8012810:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6a1b      	ldr	r3, [r3, #32]
 8012816:	697a      	ldr	r2, [r7, #20]
 8012818:	1ad2      	subs	r2, r2, r3
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	429a      	cmp	r2, r3
 8012820:	d217      	bcs.n	8012852 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	789b      	ldrb	r3, [r3, #2]
 8012826:	613b      	str	r3, [r7, #16]
 8012828:	e010      	b.n	801284c <sync_window+0x78>
					wsect += fs->fsize;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	699b      	ldr	r3, [r3, #24]
 801282e:	697a      	ldr	r2, [r7, #20]
 8012830:	4413      	add	r3, r2
 8012832:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	7858      	ldrb	r0, [r3, #1]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801283e:	2301      	movs	r3, #1
 8012840:	697a      	ldr	r2, [r7, #20]
 8012842:	f7ff fd1d 	bl	8012280 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	3b01      	subs	r3, #1
 801284a:	613b      	str	r3, [r7, #16]
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	2b01      	cmp	r3, #1
 8012850:	d8eb      	bhi.n	801282a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012852:	7bfb      	ldrb	r3, [r7, #15]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012866:	2300      	movs	r3, #0
 8012868:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801286e:	683a      	ldr	r2, [r7, #0]
 8012870:	429a      	cmp	r2, r3
 8012872:	d01b      	beq.n	80128ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7ff ffad 	bl	80127d4 <sync_window>
 801287a:	4603      	mov	r3, r0
 801287c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801287e:	7bfb      	ldrb	r3, [r7, #15]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d113      	bne.n	80128ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	7858      	ldrb	r0, [r3, #1]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801288e:	2301      	movs	r3, #1
 8012890:	683a      	ldr	r2, [r7, #0]
 8012892:	f7ff fcd5 	bl	8012240 <disk_read>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d004      	beq.n	80128a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801289c:	f04f 33ff 	mov.w	r3, #4294967295
 80128a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128a2:	2301      	movs	r3, #1
 80128a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	683a      	ldr	r2, [r7, #0]
 80128aa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
	...

080128b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7ff ff87 	bl	80127d4 <sync_window>
 80128c6:	4603      	mov	r3, r0
 80128c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d158      	bne.n	8012982 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b03      	cmp	r3, #3
 80128d6:	d148      	bne.n	801296a <sync_fs+0xb2>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	791b      	ldrb	r3, [r3, #4]
 80128dc:	2b01      	cmp	r3, #1
 80128de:	d144      	bne.n	801296a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	3330      	adds	r3, #48	; 0x30
 80128e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128e8:	2100      	movs	r1, #0
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7ff fda9 	bl	8012442 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	3330      	adds	r3, #48	; 0x30
 80128f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7ff fd38 	bl	8012372 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	3330      	adds	r3, #48	; 0x30
 8012906:	4921      	ldr	r1, [pc, #132]	; (801298c <sync_fs+0xd4>)
 8012908:	4618      	mov	r0, r3
 801290a:	f7ff fd4d 	bl	80123a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	3330      	adds	r3, #48	; 0x30
 8012912:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012916:	491e      	ldr	r1, [pc, #120]	; (8012990 <sync_fs+0xd8>)
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff fd45 	bl	80123a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	3330      	adds	r3, #48	; 0x30
 8012922:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	691b      	ldr	r3, [r3, #16]
 801292a:	4619      	mov	r1, r3
 801292c:	4610      	mov	r0, r2
 801292e:	f7ff fd3b 	bl	80123a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3330      	adds	r3, #48	; 0x30
 8012936:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	4619      	mov	r1, r3
 8012940:	4610      	mov	r0, r2
 8012942:	f7ff fd31 	bl	80123a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	69db      	ldr	r3, [r3, #28]
 801294a:	1c5a      	adds	r2, r3, #1
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	7858      	ldrb	r0, [r3, #1]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801295e:	2301      	movs	r3, #1
 8012960:	f7ff fc8e 	bl	8012280 <disk_write>
			fs->fsi_flag = 0;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	785b      	ldrb	r3, [r3, #1]
 801296e:	2200      	movs	r2, #0
 8012970:	2100      	movs	r1, #0
 8012972:	4618      	mov	r0, r3
 8012974:	f7ff fca4 	bl	80122c0 <disk_ioctl>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d001      	beq.n	8012982 <sync_fs+0xca>
 801297e:	2301      	movs	r3, #1
 8012980:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012982:	7bfb      	ldrb	r3, [r7, #15]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3710      	adds	r7, #16
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	41615252 	.word	0x41615252
 8012990:	61417272 	.word	0x61417272

08012994 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	3b02      	subs	r3, #2
 80129a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	695b      	ldr	r3, [r3, #20]
 80129a8:	3b02      	subs	r3, #2
 80129aa:	683a      	ldr	r2, [r7, #0]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d301      	bcc.n	80129b4 <clust2sect+0x20>
 80129b0:	2300      	movs	r3, #0
 80129b2:	e008      	b.n	80129c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	895b      	ldrh	r3, [r3, #10]
 80129b8:	461a      	mov	r2, r3
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	fb03 f202 	mul.w	r2, r3, r2
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129c4:	4413      	add	r3, r2
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	370c      	adds	r7, #12
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr

080129d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b086      	sub	sp, #24
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
 80129da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d904      	bls.n	80129f2 <get_fat+0x20>
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	683a      	ldr	r2, [r7, #0]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d302      	bcc.n	80129f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80129f2:	2301      	movs	r3, #1
 80129f4:	617b      	str	r3, [r7, #20]
 80129f6:	e08f      	b.n	8012b18 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80129f8:	f04f 33ff 	mov.w	r3, #4294967295
 80129fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b03      	cmp	r3, #3
 8012a04:	d062      	beq.n	8012acc <get_fat+0xfa>
 8012a06:	2b03      	cmp	r3, #3
 8012a08:	dc7c      	bgt.n	8012b04 <get_fat+0x132>
 8012a0a:	2b01      	cmp	r3, #1
 8012a0c:	d002      	beq.n	8012a14 <get_fat+0x42>
 8012a0e:	2b02      	cmp	r3, #2
 8012a10:	d042      	beq.n	8012a98 <get_fat+0xc6>
 8012a12:	e077      	b.n	8012b04 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	60fb      	str	r3, [r7, #12]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	085b      	lsrs	r3, r3, #1
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	4413      	add	r3, r2
 8012a20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	6a1a      	ldr	r2, [r3, #32]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	0a5b      	lsrs	r3, r3, #9
 8012a2a:	4413      	add	r3, r2
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	6938      	ldr	r0, [r7, #16]
 8012a30:	f7ff ff14 	bl	801285c <move_window>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d167      	bne.n	8012b0a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	1c5a      	adds	r2, r3, #1
 8012a3e:	60fa      	str	r2, [r7, #12]
 8012a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a44:	693a      	ldr	r2, [r7, #16]
 8012a46:	4413      	add	r3, r2
 8012a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	6a1a      	ldr	r2, [r3, #32]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	0a5b      	lsrs	r3, r3, #9
 8012a56:	4413      	add	r3, r2
 8012a58:	4619      	mov	r1, r3
 8012a5a:	6938      	ldr	r0, [r7, #16]
 8012a5c:	f7ff fefe 	bl	801285c <move_window>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d153      	bne.n	8012b0e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a6c:	693a      	ldr	r2, [r7, #16]
 8012a6e:	4413      	add	r3, r2
 8012a70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a74:	021b      	lsls	r3, r3, #8
 8012a76:	461a      	mov	r2, r3
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	4313      	orrs	r3, r2
 8012a7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	f003 0301 	and.w	r3, r3, #1
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d002      	beq.n	8012a8e <get_fat+0xbc>
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	091b      	lsrs	r3, r3, #4
 8012a8c:	e002      	b.n	8012a94 <get_fat+0xc2>
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a94:	617b      	str	r3, [r7, #20]
			break;
 8012a96:	e03f      	b.n	8012b18 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	6a1a      	ldr	r2, [r3, #32]
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	0a1b      	lsrs	r3, r3, #8
 8012aa0:	4413      	add	r3, r2
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6938      	ldr	r0, [r7, #16]
 8012aa6:	f7ff fed9 	bl	801285c <move_window>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d130      	bne.n	8012b12 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012abe:	4413      	add	r3, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff fc1b 	bl	80122fc <ld_word>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	617b      	str	r3, [r7, #20]
			break;
 8012aca:	e025      	b.n	8012b18 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	6a1a      	ldr	r2, [r3, #32]
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	09db      	lsrs	r3, r3, #7
 8012ad4:	4413      	add	r3, r2
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	6938      	ldr	r0, [r7, #16]
 8012ada:	f7ff febf 	bl	801285c <move_window>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d118      	bne.n	8012b16 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012af2:	4413      	add	r3, r2
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7ff fc19 	bl	801232c <ld_dword>
 8012afa:	4603      	mov	r3, r0
 8012afc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b00:	617b      	str	r3, [r7, #20]
			break;
 8012b02:	e009      	b.n	8012b18 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b04:	2301      	movs	r3, #1
 8012b06:	617b      	str	r3, [r7, #20]
 8012b08:	e006      	b.n	8012b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b0a:	bf00      	nop
 8012b0c:	e004      	b.n	8012b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b0e:	bf00      	nop
 8012b10:	e002      	b.n	8012b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b12:	bf00      	nop
 8012b14:	e000      	b.n	8012b18 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b16:	bf00      	nop
		}
	}

	return val;
 8012b18:	697b      	ldr	r3, [r7, #20]
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3718      	adds	r7, #24
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b22:	b590      	push	{r4, r7, lr}
 8012b24:	b089      	sub	sp, #36	; 0x24
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	60f8      	str	r0, [r7, #12]
 8012b2a:	60b9      	str	r1, [r7, #8]
 8012b2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b2e:	2302      	movs	r3, #2
 8012b30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	f240 80d2 	bls.w	8012cde <put_fat+0x1bc>
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	695b      	ldr	r3, [r3, #20]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	f080 80cc 	bcs.w	8012cde <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	2b03      	cmp	r3, #3
 8012b4c:	f000 8096 	beq.w	8012c7c <put_fat+0x15a>
 8012b50:	2b03      	cmp	r3, #3
 8012b52:	f300 80cd 	bgt.w	8012cf0 <put_fat+0x1ce>
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d002      	beq.n	8012b60 <put_fat+0x3e>
 8012b5a:	2b02      	cmp	r3, #2
 8012b5c:	d06e      	beq.n	8012c3c <put_fat+0x11a>
 8012b5e:	e0c7      	b.n	8012cf0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	61bb      	str	r3, [r7, #24]
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	085b      	lsrs	r3, r3, #1
 8012b68:	69ba      	ldr	r2, [r7, #24]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	6a1a      	ldr	r2, [r3, #32]
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	0a5b      	lsrs	r3, r3, #9
 8012b76:	4413      	add	r3, r2
 8012b78:	4619      	mov	r1, r3
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	f7ff fe6e 	bl	801285c <move_window>
 8012b80:	4603      	mov	r3, r0
 8012b82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b84:	7ffb      	ldrb	r3, [r7, #31]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f040 80ab 	bne.w	8012ce2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	1c59      	adds	r1, r3, #1
 8012b96:	61b9      	str	r1, [r7, #24]
 8012b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b9c:	4413      	add	r3, r2
 8012b9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	f003 0301 	and.w	r3, r3, #1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d00d      	beq.n	8012bc6 <put_fat+0xa4>
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	b25b      	sxtb	r3, r3
 8012bb0:	f003 030f 	and.w	r3, r3, #15
 8012bb4:	b25a      	sxtb	r2, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	b2db      	uxtb	r3, r3
 8012bba:	011b      	lsls	r3, r3, #4
 8012bbc:	b25b      	sxtb	r3, r3
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	b25b      	sxtb	r3, r3
 8012bc2:	b2db      	uxtb	r3, r3
 8012bc4:	e001      	b.n	8012bca <put_fat+0xa8>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	697a      	ldr	r2, [r7, #20]
 8012bcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6a1a      	ldr	r2, [r3, #32]
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	0a5b      	lsrs	r3, r3, #9
 8012bdc:	4413      	add	r3, r2
 8012bde:	4619      	mov	r1, r3
 8012be0:	68f8      	ldr	r0, [r7, #12]
 8012be2:	f7ff fe3b 	bl	801285c <move_window>
 8012be6:	4603      	mov	r3, r0
 8012be8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bea:	7ffb      	ldrb	r3, [r7, #31]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d17a      	bne.n	8012ce6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bfc:	4413      	add	r3, r2
 8012bfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	f003 0301 	and.w	r3, r3, #1
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d003      	beq.n	8012c12 <put_fat+0xf0>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	091b      	lsrs	r3, r3, #4
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	e00e      	b.n	8012c30 <put_fat+0x10e>
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	b25b      	sxtb	r3, r3
 8012c18:	f023 030f 	bic.w	r3, r3, #15
 8012c1c:	b25a      	sxtb	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	0a1b      	lsrs	r3, r3, #8
 8012c22:	b25b      	sxtb	r3, r3
 8012c24:	f003 030f 	and.w	r3, r3, #15
 8012c28:	b25b      	sxtb	r3, r3
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	b25b      	sxtb	r3, r3
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	697a      	ldr	r2, [r7, #20]
 8012c32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2201      	movs	r2, #1
 8012c38:	70da      	strb	r2, [r3, #3]
			break;
 8012c3a:	e059      	b.n	8012cf0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	6a1a      	ldr	r2, [r3, #32]
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	0a1b      	lsrs	r3, r3, #8
 8012c44:	4413      	add	r3, r2
 8012c46:	4619      	mov	r1, r3
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7ff fe07 	bl	801285c <move_window>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c52:	7ffb      	ldrb	r3, [r7, #31]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d148      	bne.n	8012cea <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012c66:	4413      	add	r3, r2
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	b292      	uxth	r2, r2
 8012c6c:	4611      	mov	r1, r2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff fb7f 	bl	8012372 <st_word>
			fs->wflag = 1;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2201      	movs	r2, #1
 8012c78:	70da      	strb	r2, [r3, #3]
			break;
 8012c7a:	e039      	b.n	8012cf0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	6a1a      	ldr	r2, [r3, #32]
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	09db      	lsrs	r3, r3, #7
 8012c84:	4413      	add	r3, r2
 8012c86:	4619      	mov	r1, r3
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f7ff fde7 	bl	801285c <move_window>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c92:	7ffb      	ldrb	r3, [r7, #31]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d12a      	bne.n	8012cee <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012cac:	4413      	add	r3, r2
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7ff fb3c 	bl	801232c <ld_dword>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012cba:	4323      	orrs	r3, r4
 8012cbc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	009b      	lsls	r3, r3, #2
 8012cc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012ccc:	4413      	add	r3, r2
 8012cce:	6879      	ldr	r1, [r7, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7ff fb69 	bl	80123a8 <st_dword>
			fs->wflag = 1;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2201      	movs	r2, #1
 8012cda:	70da      	strb	r2, [r3, #3]
			break;
 8012cdc:	e008      	b.n	8012cf0 <put_fat+0x1ce>
		}
	}
 8012cde:	bf00      	nop
 8012ce0:	e006      	b.n	8012cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012ce2:	bf00      	nop
 8012ce4:	e004      	b.n	8012cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012ce6:	bf00      	nop
 8012ce8:	e002      	b.n	8012cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cea:	bf00      	nop
 8012cec:	e000      	b.n	8012cf0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cee:	bf00      	nop
	return res;
 8012cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3724      	adds	r7, #36	; 0x24
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd90      	pop	{r4, r7, pc}

08012cfa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b088      	sub	sp, #32
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	60f8      	str	r0, [r7, #12]
 8012d02:	60b9      	str	r1, [r7, #8]
 8012d04:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d06:	2300      	movs	r3, #0
 8012d08:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d904      	bls.n	8012d20 <remove_chain+0x26>
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	695b      	ldr	r3, [r3, #20]
 8012d1a:	68ba      	ldr	r2, [r7, #8]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d301      	bcc.n	8012d24 <remove_chain+0x2a>
 8012d20:	2302      	movs	r3, #2
 8012d22:	e04b      	b.n	8012dbc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d00c      	beq.n	8012d44 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2e:	6879      	ldr	r1, [r7, #4]
 8012d30:	69b8      	ldr	r0, [r7, #24]
 8012d32:	f7ff fef6 	bl	8012b22 <put_fat>
 8012d36:	4603      	mov	r3, r0
 8012d38:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d3a:	7ffb      	ldrb	r3, [r7, #31]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d001      	beq.n	8012d44 <remove_chain+0x4a>
 8012d40:	7ffb      	ldrb	r3, [r7, #31]
 8012d42:	e03b      	b.n	8012dbc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d44:	68b9      	ldr	r1, [r7, #8]
 8012d46:	68f8      	ldr	r0, [r7, #12]
 8012d48:	f7ff fe43 	bl	80129d2 <get_fat>
 8012d4c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d031      	beq.n	8012db8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d101      	bne.n	8012d5e <remove_chain+0x64>
 8012d5a:	2302      	movs	r3, #2
 8012d5c:	e02e      	b.n	8012dbc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d64:	d101      	bne.n	8012d6a <remove_chain+0x70>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e028      	b.n	8012dbc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	69b8      	ldr	r0, [r7, #24]
 8012d70:	f7ff fed7 	bl	8012b22 <put_fat>
 8012d74:	4603      	mov	r3, r0
 8012d76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012d78:	7ffb      	ldrb	r3, [r7, #31]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <remove_chain+0x88>
 8012d7e:	7ffb      	ldrb	r3, [r7, #31]
 8012d80:	e01c      	b.n	8012dbc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	691a      	ldr	r2, [r3, #16]
 8012d86:	69bb      	ldr	r3, [r7, #24]
 8012d88:	695b      	ldr	r3, [r3, #20]
 8012d8a:	3b02      	subs	r3, #2
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d20b      	bcs.n	8012da8 <remove_chain+0xae>
			fs->free_clst++;
 8012d90:	69bb      	ldr	r3, [r7, #24]
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	1c5a      	adds	r2, r3, #1
 8012d96:	69bb      	ldr	r3, [r7, #24]
 8012d98:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012d9a:	69bb      	ldr	r3, [r7, #24]
 8012d9c:	791b      	ldrb	r3, [r3, #4]
 8012d9e:	f043 0301 	orr.w	r3, r3, #1
 8012da2:	b2da      	uxtb	r2, r3
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	695b      	ldr	r3, [r3, #20]
 8012db0:	68ba      	ldr	r2, [r7, #8]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d3c6      	bcc.n	8012d44 <remove_chain+0x4a>
 8012db6:	e000      	b.n	8012dba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012db8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3720      	adds	r7, #32
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b088      	sub	sp, #32
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d10d      	bne.n	8012df6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d004      	beq.n	8012df0 <create_chain+0x2c>
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	695b      	ldr	r3, [r3, #20]
 8012dea:	69ba      	ldr	r2, [r7, #24]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d31b      	bcc.n	8012e28 <create_chain+0x64>
 8012df0:	2301      	movs	r3, #1
 8012df2:	61bb      	str	r3, [r7, #24]
 8012df4:	e018      	b.n	8012e28 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012df6:	6839      	ldr	r1, [r7, #0]
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff fdea 	bl	80129d2 <get_fat>
 8012dfe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d801      	bhi.n	8012e0a <create_chain+0x46>
 8012e06:	2301      	movs	r3, #1
 8012e08:	e070      	b.n	8012eec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e10:	d101      	bne.n	8012e16 <create_chain+0x52>
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	e06a      	b.n	8012eec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	695b      	ldr	r3, [r3, #20]
 8012e1a:	68fa      	ldr	r2, [r7, #12]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d201      	bcs.n	8012e24 <create_chain+0x60>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	e063      	b.n	8012eec <create_chain+0x128>
		scl = clst;
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e2c:	69fb      	ldr	r3, [r7, #28]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	695b      	ldr	r3, [r3, #20]
 8012e36:	69fa      	ldr	r2, [r7, #28]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d307      	bcc.n	8012e4c <create_chain+0x88>
				ncl = 2;
 8012e3c:	2302      	movs	r3, #2
 8012e3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e40:	69fa      	ldr	r2, [r7, #28]
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d901      	bls.n	8012e4c <create_chain+0x88>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e04f      	b.n	8012eec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e4c:	69f9      	ldr	r1, [r7, #28]
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f7ff fdbf 	bl	80129d2 <get_fat>
 8012e54:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d00e      	beq.n	8012e7a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d003      	beq.n	8012e6a <create_chain+0xa6>
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e68:	d101      	bne.n	8012e6e <create_chain+0xaa>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	e03e      	b.n	8012eec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e6e:	69fa      	ldr	r2, [r7, #28]
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d1da      	bne.n	8012e2c <create_chain+0x68>
 8012e76:	2300      	movs	r3, #0
 8012e78:	e038      	b.n	8012eec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012e7a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e80:	69f9      	ldr	r1, [r7, #28]
 8012e82:	6938      	ldr	r0, [r7, #16]
 8012e84:	f7ff fe4d 	bl	8012b22 <put_fat>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e8c:	7dfb      	ldrb	r3, [r7, #23]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d109      	bne.n	8012ea6 <create_chain+0xe2>
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d006      	beq.n	8012ea6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012e98:	69fa      	ldr	r2, [r7, #28]
 8012e9a:	6839      	ldr	r1, [r7, #0]
 8012e9c:	6938      	ldr	r0, [r7, #16]
 8012e9e:	f7ff fe40 	bl	8012b22 <put_fat>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012ea6:	7dfb      	ldrb	r3, [r7, #23]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d116      	bne.n	8012eda <create_chain+0x116>
		fs->last_clst = ncl;
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	69fa      	ldr	r2, [r7, #28]
 8012eb0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	691a      	ldr	r2, [r3, #16]
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	695b      	ldr	r3, [r3, #20]
 8012eba:	3b02      	subs	r3, #2
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d804      	bhi.n	8012eca <create_chain+0x106>
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	691b      	ldr	r3, [r3, #16]
 8012ec4:	1e5a      	subs	r2, r3, #1
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	791b      	ldrb	r3, [r3, #4]
 8012ece:	f043 0301 	orr.w	r3, r3, #1
 8012ed2:	b2da      	uxtb	r2, r3
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	711a      	strb	r2, [r3, #4]
 8012ed8:	e007      	b.n	8012eea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012eda:	7dfb      	ldrb	r3, [r7, #23]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d102      	bne.n	8012ee6 <create_chain+0x122>
 8012ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee4:	e000      	b.n	8012ee8 <create_chain+0x124>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012eea:	69fb      	ldr	r3, [r7, #28]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3720      	adds	r7, #32
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b087      	sub	sp, #28
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f08:	3304      	adds	r3, #4
 8012f0a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	0a5b      	lsrs	r3, r3, #9
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	8952      	ldrh	r2, [r2, #10]
 8012f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	1d1a      	adds	r2, r3, #4
 8012f1e:	613a      	str	r2, [r7, #16]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <clmt_clust+0x3a>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	e010      	b.n	8012f50 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d307      	bcc.n	8012f46 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	1ad3      	subs	r3, r2, r3
 8012f3c:	617b      	str	r3, [r7, #20]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	3304      	adds	r3, #4
 8012f42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f44:	e7e9      	b.n	8012f1a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	4413      	add	r3, r2
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	371c      	adds	r7, #28
 8012f54:	46bd      	mov	sp, r7
 8012f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5a:	4770      	bx	lr

08012f5c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f72:	d204      	bcs.n	8012f7e <dir_sdi+0x22>
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	f003 031f 	and.w	r3, r3, #31
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d001      	beq.n	8012f82 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012f7e:	2302      	movs	r3, #2
 8012f80:	e063      	b.n	801304a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	683a      	ldr	r2, [r7, #0]
 8012f86:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	689b      	ldr	r3, [r3, #8]
 8012f8c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d106      	bne.n	8012fa2 <dir_sdi+0x46>
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d902      	bls.n	8012fa2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10c      	bne.n	8012fc2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	095b      	lsrs	r3, r3, #5
 8012fac:	693a      	ldr	r2, [r7, #16]
 8012fae:	8912      	ldrh	r2, [r2, #8]
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d301      	bcc.n	8012fb8 <dir_sdi+0x5c>
 8012fb4:	2302      	movs	r3, #2
 8012fb6:	e048      	b.n	801304a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	61da      	str	r2, [r3, #28]
 8012fc0:	e029      	b.n	8013016 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	895b      	ldrh	r3, [r3, #10]
 8012fc6:	025b      	lsls	r3, r3, #9
 8012fc8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012fca:	e019      	b.n	8013000 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6979      	ldr	r1, [r7, #20]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7ff fcfe 	bl	80129d2 <get_fat>
 8012fd6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fde:	d101      	bne.n	8012fe4 <dir_sdi+0x88>
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e032      	b.n	801304a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	2b01      	cmp	r3, #1
 8012fe8:	d904      	bls.n	8012ff4 <dir_sdi+0x98>
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	695b      	ldr	r3, [r3, #20]
 8012fee:	697a      	ldr	r2, [r7, #20]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d301      	bcc.n	8012ff8 <dir_sdi+0x9c>
 8012ff4:	2302      	movs	r3, #2
 8012ff6:	e028      	b.n	801304a <dir_sdi+0xee>
			ofs -= csz;
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	429a      	cmp	r2, r3
 8013006:	d2e1      	bcs.n	8012fcc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013008:	6979      	ldr	r1, [r7, #20]
 801300a:	6938      	ldr	r0, [r7, #16]
 801300c:	f7ff fcc2 	bl	8012994 <clust2sect>
 8013010:	4602      	mov	r2, r0
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	69db      	ldr	r3, [r3, #28]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d101      	bne.n	8013028 <dir_sdi+0xcc>
 8013024:	2302      	movs	r3, #2
 8013026:	e010      	b.n	801304a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	69da      	ldr	r2, [r3, #28]
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	0a5b      	lsrs	r3, r3, #9
 8013030:	441a      	add	r2, r3
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013042:	441a      	add	r2, r3
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3718      	adds	r7, #24
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013052:	b580      	push	{r7, lr}
 8013054:	b086      	sub	sp, #24
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	695b      	ldr	r3, [r3, #20]
 8013066:	3320      	adds	r3, #32
 8013068:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	69db      	ldr	r3, [r3, #28]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d003      	beq.n	801307a <dir_next+0x28>
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013078:	d301      	bcc.n	801307e <dir_next+0x2c>
 801307a:	2304      	movs	r3, #4
 801307c:	e0aa      	b.n	80131d4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013084:	2b00      	cmp	r3, #0
 8013086:	f040 8098 	bne.w	80131ba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	69db      	ldr	r3, [r3, #28]
 801308e:	1c5a      	adds	r2, r3, #1
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	699b      	ldr	r3, [r3, #24]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d10b      	bne.n	80130b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	095b      	lsrs	r3, r3, #5
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	8912      	ldrh	r2, [r2, #8]
 80130a4:	4293      	cmp	r3, r2
 80130a6:	f0c0 8088 	bcc.w	80131ba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	61da      	str	r2, [r3, #28]
 80130b0:	2304      	movs	r3, #4
 80130b2:	e08f      	b.n	80131d4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	0a5b      	lsrs	r3, r3, #9
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	8952      	ldrh	r2, [r2, #10]
 80130bc:	3a01      	subs	r2, #1
 80130be:	4013      	ands	r3, r2
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d17a      	bne.n	80131ba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	699b      	ldr	r3, [r3, #24]
 80130ca:	4619      	mov	r1, r3
 80130cc:	4610      	mov	r0, r2
 80130ce:	f7ff fc80 	bl	80129d2 <get_fat>
 80130d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	d801      	bhi.n	80130de <dir_next+0x8c>
 80130da:	2302      	movs	r3, #2
 80130dc:	e07a      	b.n	80131d4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130e4:	d101      	bne.n	80130ea <dir_next+0x98>
 80130e6:	2301      	movs	r3, #1
 80130e8:	e074      	b.n	80131d4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	695b      	ldr	r3, [r3, #20]
 80130ee:	697a      	ldr	r2, [r7, #20]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d358      	bcc.n	80131a6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d104      	bne.n	8013104 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	61da      	str	r2, [r3, #28]
 8013100:	2304      	movs	r3, #4
 8013102:	e067      	b.n	80131d4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	699b      	ldr	r3, [r3, #24]
 801310a:	4619      	mov	r1, r3
 801310c:	4610      	mov	r0, r2
 801310e:	f7ff fe59 	bl	8012dc4 <create_chain>
 8013112:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d101      	bne.n	801311e <dir_next+0xcc>
 801311a:	2307      	movs	r3, #7
 801311c:	e05a      	b.n	80131d4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	2b01      	cmp	r3, #1
 8013122:	d101      	bne.n	8013128 <dir_next+0xd6>
 8013124:	2302      	movs	r3, #2
 8013126:	e055      	b.n	80131d4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312e:	d101      	bne.n	8013134 <dir_next+0xe2>
 8013130:	2301      	movs	r3, #1
 8013132:	e04f      	b.n	80131d4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f7ff fb4d 	bl	80127d4 <sync_window>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d001      	beq.n	8013144 <dir_next+0xf2>
 8013140:	2301      	movs	r3, #1
 8013142:	e047      	b.n	80131d4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	3330      	adds	r3, #48	; 0x30
 8013148:	f44f 7200 	mov.w	r2, #512	; 0x200
 801314c:	2100      	movs	r1, #0
 801314e:	4618      	mov	r0, r3
 8013150:	f7ff f977 	bl	8012442 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013154:	2300      	movs	r3, #0
 8013156:	613b      	str	r3, [r7, #16]
 8013158:	6979      	ldr	r1, [r7, #20]
 801315a:	68f8      	ldr	r0, [r7, #12]
 801315c:	f7ff fc1a 	bl	8012994 <clust2sect>
 8013160:	4602      	mov	r2, r0
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	62da      	str	r2, [r3, #44]	; 0x2c
 8013166:	e012      	b.n	801318e <dir_next+0x13c>
						fs->wflag = 1;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2201      	movs	r2, #1
 801316c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f7ff fb30 	bl	80127d4 <sync_window>
 8013174:	4603      	mov	r3, r0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <dir_next+0x12c>
 801317a:	2301      	movs	r3, #1
 801317c:	e02a      	b.n	80131d4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	3301      	adds	r3, #1
 8013182:	613b      	str	r3, [r7, #16]
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013188:	1c5a      	adds	r2, r3, #1
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	62da      	str	r2, [r3, #44]	; 0x2c
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	895b      	ldrh	r3, [r3, #10]
 8013192:	461a      	mov	r2, r3
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	4293      	cmp	r3, r2
 8013198:	d3e6      	bcc.n	8013168 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	1ad2      	subs	r2, r2, r3
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	697a      	ldr	r2, [r7, #20]
 80131aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80131ac:	6979      	ldr	r1, [r7, #20]
 80131ae:	68f8      	ldr	r0, [r7, #12]
 80131b0:	f7ff fbf0 	bl	8012994 <clust2sect>
 80131b4:	4602      	mov	r2, r0
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	68ba      	ldr	r2, [r7, #8]
 80131be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131cc:	441a      	add	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80131d2:	2300      	movs	r3, #0
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	3718      	adds	r7, #24
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}

080131dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b086      	sub	sp, #24
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80131ec:	2100      	movs	r1, #0
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f7ff feb4 	bl	8012f5c <dir_sdi>
 80131f4:	4603      	mov	r3, r0
 80131f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d12b      	bne.n	8013256 <dir_alloc+0x7a>
		n = 0;
 80131fe:	2300      	movs	r3, #0
 8013200:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	69db      	ldr	r3, [r3, #28]
 8013206:	4619      	mov	r1, r3
 8013208:	68f8      	ldr	r0, [r7, #12]
 801320a:	f7ff fb27 	bl	801285c <move_window>
 801320e:	4603      	mov	r3, r0
 8013210:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013212:	7dfb      	ldrb	r3, [r7, #23]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d11d      	bne.n	8013254 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6a1b      	ldr	r3, [r3, #32]
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	2be5      	cmp	r3, #229	; 0xe5
 8013220:	d004      	beq.n	801322c <dir_alloc+0x50>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6a1b      	ldr	r3, [r3, #32]
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d107      	bne.n	801323c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	3301      	adds	r3, #1
 8013230:	613b      	str	r3, [r7, #16]
 8013232:	693a      	ldr	r2, [r7, #16]
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	429a      	cmp	r2, r3
 8013238:	d102      	bne.n	8013240 <dir_alloc+0x64>
 801323a:	e00c      	b.n	8013256 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801323c:	2300      	movs	r3, #0
 801323e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013240:	2101      	movs	r1, #1
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f7ff ff05 	bl	8013052 <dir_next>
 8013248:	4603      	mov	r3, r0
 801324a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801324c:	7dfb      	ldrb	r3, [r7, #23]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d0d7      	beq.n	8013202 <dir_alloc+0x26>
 8013252:	e000      	b.n	8013256 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013254:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013256:	7dfb      	ldrb	r3, [r7, #23]
 8013258:	2b04      	cmp	r3, #4
 801325a:	d101      	bne.n	8013260 <dir_alloc+0x84>
 801325c:	2307      	movs	r3, #7
 801325e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013260:	7dfb      	ldrb	r3, [r7, #23]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3718      	adds	r7, #24
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}

0801326a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801326a:	b580      	push	{r7, lr}
 801326c:	b084      	sub	sp, #16
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
 8013272:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	331a      	adds	r3, #26
 8013278:	4618      	mov	r0, r3
 801327a:	f7ff f83f 	bl	80122fc <ld_word>
 801327e:	4603      	mov	r3, r0
 8013280:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b03      	cmp	r3, #3
 8013288:	d109      	bne.n	801329e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	3314      	adds	r3, #20
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff f834 	bl	80122fc <ld_word>
 8013294:	4603      	mov	r3, r0
 8013296:	041b      	lsls	r3, r3, #16
 8013298:	68fa      	ldr	r2, [r7, #12]
 801329a:	4313      	orrs	r3, r2
 801329c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801329e:	68fb      	ldr	r3, [r7, #12]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3710      	adds	r7, #16
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	331a      	adds	r3, #26
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	b292      	uxth	r2, r2
 80132bc:	4611      	mov	r1, r2
 80132be:	4618      	mov	r0, r3
 80132c0:	f7ff f857 	bl	8012372 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	2b03      	cmp	r3, #3
 80132ca:	d109      	bne.n	80132e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	f103 0214 	add.w	r2, r3, #20
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	0c1b      	lsrs	r3, r3, #16
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	4619      	mov	r1, r3
 80132da:	4610      	mov	r0, r2
 80132dc:	f7ff f849 	bl	8012372 <st_word>
	}
}
 80132e0:	bf00      	nop
 80132e2:	3710      	adds	r7, #16
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80132f6:	2100      	movs	r1, #0
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f7ff fe2f 	bl	8012f5c <dir_sdi>
 80132fe:	4603      	mov	r3, r0
 8013300:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013302:	7dfb      	ldrb	r3, [r7, #23]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d001      	beq.n	801330c <dir_find+0x24>
 8013308:	7dfb      	ldrb	r3, [r7, #23]
 801330a:	e03e      	b.n	801338a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	4619      	mov	r1, r3
 8013312:	6938      	ldr	r0, [r7, #16]
 8013314:	f7ff faa2 	bl	801285c <move_window>
 8013318:	4603      	mov	r3, r0
 801331a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801331c:	7dfb      	ldrb	r3, [r7, #23]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d12f      	bne.n	8013382 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6a1b      	ldr	r3, [r3, #32]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801332a:	7bfb      	ldrb	r3, [r7, #15]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d102      	bne.n	8013336 <dir_find+0x4e>
 8013330:	2304      	movs	r3, #4
 8013332:	75fb      	strb	r3, [r7, #23]
 8013334:	e028      	b.n	8013388 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6a1b      	ldr	r3, [r3, #32]
 801333a:	330b      	adds	r3, #11
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013342:	b2da      	uxtb	r2, r3
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6a1b      	ldr	r3, [r3, #32]
 801334c:	330b      	adds	r3, #11
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	f003 0308 	and.w	r3, r3, #8
 8013354:	2b00      	cmp	r3, #0
 8013356:	d10a      	bne.n	801336e <dir_find+0x86>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6a18      	ldr	r0, [r3, #32]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	3324      	adds	r3, #36	; 0x24
 8013360:	220b      	movs	r2, #11
 8013362:	4619      	mov	r1, r3
 8013364:	f7ff f888 	bl	8012478 <mem_cmp>
 8013368:	4603      	mov	r3, r0
 801336a:	2b00      	cmp	r3, #0
 801336c:	d00b      	beq.n	8013386 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801336e:	2100      	movs	r1, #0
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7ff fe6e 	bl	8013052 <dir_next>
 8013376:	4603      	mov	r3, r0
 8013378:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801337a:	7dfb      	ldrb	r3, [r7, #23]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d0c5      	beq.n	801330c <dir_find+0x24>
 8013380:	e002      	b.n	8013388 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013382:	bf00      	nop
 8013384:	e000      	b.n	8013388 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013386:	bf00      	nop

	return res;
 8013388:	7dfb      	ldrb	r3, [r7, #23]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3718      	adds	r7, #24
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b084      	sub	sp, #16
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80133a0:	2101      	movs	r1, #1
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7ff ff1a 	bl	80131dc <dir_alloc>
 80133a8:	4603      	mov	r3, r0
 80133aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d11c      	bne.n	80133ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	69db      	ldr	r3, [r3, #28]
 80133b6:	4619      	mov	r1, r3
 80133b8:	68b8      	ldr	r0, [r7, #8]
 80133ba:	f7ff fa4f 	bl	801285c <move_window>
 80133be:	4603      	mov	r3, r0
 80133c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80133c2:	7bfb      	ldrb	r3, [r7, #15]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d111      	bne.n	80133ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6a1b      	ldr	r3, [r3, #32]
 80133cc:	2220      	movs	r2, #32
 80133ce:	2100      	movs	r1, #0
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7ff f836 	bl	8012442 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6a18      	ldr	r0, [r3, #32]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	3324      	adds	r3, #36	; 0x24
 80133de:	220b      	movs	r2, #11
 80133e0:	4619      	mov	r1, r3
 80133e2:	f7ff f80d 	bl	8012400 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	2201      	movs	r2, #1
 80133ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80133ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
	...

080133f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b088      	sub	sp, #32
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	60fb      	str	r3, [r7, #12]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	3324      	adds	r3, #36	; 0x24
 801340c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801340e:	220b      	movs	r2, #11
 8013410:	2120      	movs	r1, #32
 8013412:	68b8      	ldr	r0, [r7, #8]
 8013414:	f7ff f815 	bl	8012442 <mem_set>
	si = i = 0; ni = 8;
 8013418:	2300      	movs	r3, #0
 801341a:	613b      	str	r3, [r7, #16]
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	61fb      	str	r3, [r7, #28]
 8013420:	2308      	movs	r3, #8
 8013422:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013424:	69fb      	ldr	r3, [r7, #28]
 8013426:	1c5a      	adds	r2, r3, #1
 8013428:	61fa      	str	r2, [r7, #28]
 801342a:	68fa      	ldr	r2, [r7, #12]
 801342c:	4413      	add	r3, r2
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013432:	7efb      	ldrb	r3, [r7, #27]
 8013434:	2b20      	cmp	r3, #32
 8013436:	d94e      	bls.n	80134d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013438:	7efb      	ldrb	r3, [r7, #27]
 801343a:	2b2f      	cmp	r3, #47	; 0x2f
 801343c:	d006      	beq.n	801344c <create_name+0x54>
 801343e:	7efb      	ldrb	r3, [r7, #27]
 8013440:	2b5c      	cmp	r3, #92	; 0x5c
 8013442:	d110      	bne.n	8013466 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013444:	e002      	b.n	801344c <create_name+0x54>
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	3301      	adds	r3, #1
 801344a:	61fb      	str	r3, [r7, #28]
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	4413      	add	r3, r2
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	2b2f      	cmp	r3, #47	; 0x2f
 8013456:	d0f6      	beq.n	8013446 <create_name+0x4e>
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	4413      	add	r3, r2
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	2b5c      	cmp	r3, #92	; 0x5c
 8013462:	d0f0      	beq.n	8013446 <create_name+0x4e>
			break;
 8013464:	e038      	b.n	80134d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013466:	7efb      	ldrb	r3, [r7, #27]
 8013468:	2b2e      	cmp	r3, #46	; 0x2e
 801346a:	d003      	beq.n	8013474 <create_name+0x7c>
 801346c:	693a      	ldr	r2, [r7, #16]
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	429a      	cmp	r2, r3
 8013472:	d30c      	bcc.n	801348e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	2b0b      	cmp	r3, #11
 8013478:	d002      	beq.n	8013480 <create_name+0x88>
 801347a:	7efb      	ldrb	r3, [r7, #27]
 801347c:	2b2e      	cmp	r3, #46	; 0x2e
 801347e:	d001      	beq.n	8013484 <create_name+0x8c>
 8013480:	2306      	movs	r3, #6
 8013482:	e044      	b.n	801350e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013484:	2308      	movs	r3, #8
 8013486:	613b      	str	r3, [r7, #16]
 8013488:	230b      	movs	r3, #11
 801348a:	617b      	str	r3, [r7, #20]
			continue;
 801348c:	e022      	b.n	80134d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801348e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013492:	2b00      	cmp	r3, #0
 8013494:	da04      	bge.n	80134a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013496:	7efb      	ldrb	r3, [r7, #27]
 8013498:	3b80      	subs	r3, #128	; 0x80
 801349a:	4a1f      	ldr	r2, [pc, #124]	; (8013518 <create_name+0x120>)
 801349c:	5cd3      	ldrb	r3, [r2, r3]
 801349e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80134a0:	7efb      	ldrb	r3, [r7, #27]
 80134a2:	4619      	mov	r1, r3
 80134a4:	481d      	ldr	r0, [pc, #116]	; (801351c <create_name+0x124>)
 80134a6:	f7ff f80e 	bl	80124c6 <chk_chr>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d001      	beq.n	80134b4 <create_name+0xbc>
 80134b0:	2306      	movs	r3, #6
 80134b2:	e02c      	b.n	801350e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80134b4:	7efb      	ldrb	r3, [r7, #27]
 80134b6:	2b60      	cmp	r3, #96	; 0x60
 80134b8:	d905      	bls.n	80134c6 <create_name+0xce>
 80134ba:	7efb      	ldrb	r3, [r7, #27]
 80134bc:	2b7a      	cmp	r3, #122	; 0x7a
 80134be:	d802      	bhi.n	80134c6 <create_name+0xce>
 80134c0:	7efb      	ldrb	r3, [r7, #27]
 80134c2:	3b20      	subs	r3, #32
 80134c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	613a      	str	r2, [r7, #16]
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	4413      	add	r3, r2
 80134d0:	7efa      	ldrb	r2, [r7, #27]
 80134d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80134d4:	e7a6      	b.n	8013424 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	441a      	add	r2, r3
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d101      	bne.n	80134ec <create_name+0xf4>
 80134e8:	2306      	movs	r3, #6
 80134ea:	e010      	b.n	801350e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	2be5      	cmp	r3, #229	; 0xe5
 80134f2:	d102      	bne.n	80134fa <create_name+0x102>
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	2205      	movs	r2, #5
 80134f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80134fa:	7efb      	ldrb	r3, [r7, #27]
 80134fc:	2b20      	cmp	r3, #32
 80134fe:	d801      	bhi.n	8013504 <create_name+0x10c>
 8013500:	2204      	movs	r2, #4
 8013502:	e000      	b.n	8013506 <create_name+0x10e>
 8013504:	2200      	movs	r2, #0
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	330b      	adds	r3, #11
 801350a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801350c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801350e:	4618      	mov	r0, r3
 8013510:	3720      	adds	r7, #32
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	080240b0 	.word	0x080240b0
 801351c:	080221ec 	.word	0x080221ec

08013520 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b086      	sub	sp, #24
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013534:	e002      	b.n	801353c <follow_path+0x1c>
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	3301      	adds	r3, #1
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	2b2f      	cmp	r3, #47	; 0x2f
 8013542:	d0f8      	beq.n	8013536 <follow_path+0x16>
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	2b5c      	cmp	r3, #92	; 0x5c
 801354a:	d0f4      	beq.n	8013536 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	2200      	movs	r2, #0
 8013550:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	2b1f      	cmp	r3, #31
 8013558:	d80a      	bhi.n	8013570 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2280      	movs	r2, #128	; 0x80
 801355e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013562:	2100      	movs	r1, #0
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ff fcf9 	bl	8012f5c <dir_sdi>
 801356a:	4603      	mov	r3, r0
 801356c:	75fb      	strb	r3, [r7, #23]
 801356e:	e043      	b.n	80135f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013570:	463b      	mov	r3, r7
 8013572:	4619      	mov	r1, r3
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7ff ff3f 	bl	80133f8 <create_name>
 801357a:	4603      	mov	r3, r0
 801357c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801357e:	7dfb      	ldrb	r3, [r7, #23]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d134      	bne.n	80135ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff feaf 	bl	80132e8 <dir_find>
 801358a:	4603      	mov	r3, r0
 801358c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013594:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013596:	7dfb      	ldrb	r3, [r7, #23]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00a      	beq.n	80135b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801359c:	7dfb      	ldrb	r3, [r7, #23]
 801359e:	2b04      	cmp	r3, #4
 80135a0:	d127      	bne.n	80135f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80135a2:	7afb      	ldrb	r3, [r7, #11]
 80135a4:	f003 0304 	and.w	r3, r3, #4
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d122      	bne.n	80135f2 <follow_path+0xd2>
 80135ac:	2305      	movs	r3, #5
 80135ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80135b0:	e01f      	b.n	80135f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135b2:	7afb      	ldrb	r3, [r7, #11]
 80135b4:	f003 0304 	and.w	r3, r3, #4
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d11c      	bne.n	80135f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	799b      	ldrb	r3, [r3, #6]
 80135c0:	f003 0310 	and.w	r3, r3, #16
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d102      	bne.n	80135ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80135c8:	2305      	movs	r3, #5
 80135ca:	75fb      	strb	r3, [r7, #23]
 80135cc:	e014      	b.n	80135f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	695b      	ldr	r3, [r3, #20]
 80135d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135dc:	4413      	add	r3, r2
 80135de:	4619      	mov	r1, r3
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f7ff fe42 	bl	801326a <ld_clust>
 80135e6:	4602      	mov	r2, r0
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135ec:	e7c0      	b.n	8013570 <follow_path+0x50>
			if (res != FR_OK) break;
 80135ee:	bf00      	nop
 80135f0:	e002      	b.n	80135f8 <follow_path+0xd8>
				break;
 80135f2:	bf00      	nop
 80135f4:	e000      	b.n	80135f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135f6:	bf00      	nop
			}
		}
	}

	return res;
 80135f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3718      	adds	r7, #24
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013602:	b480      	push	{r7}
 8013604:	b087      	sub	sp, #28
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801360a:	f04f 33ff 	mov.w	r3, #4294967295
 801360e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d031      	beq.n	801367c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	617b      	str	r3, [r7, #20]
 801361e:	e002      	b.n	8013626 <get_ldnumber+0x24>
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	3301      	adds	r3, #1
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	2b20      	cmp	r3, #32
 801362c:	d903      	bls.n	8013636 <get_ldnumber+0x34>
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	2b3a      	cmp	r3, #58	; 0x3a
 8013634:	d1f4      	bne.n	8013620 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	2b3a      	cmp	r3, #58	; 0x3a
 801363c:	d11c      	bne.n	8013678 <get_ldnumber+0x76>
			tp = *path;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	1c5a      	adds	r2, r3, #1
 8013648:	60fa      	str	r2, [r7, #12]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	3b30      	subs	r3, #48	; 0x30
 801364e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	2b09      	cmp	r3, #9
 8013654:	d80e      	bhi.n	8013674 <get_ldnumber+0x72>
 8013656:	68fa      	ldr	r2, [r7, #12]
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	429a      	cmp	r2, r3
 801365c:	d10a      	bne.n	8013674 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d107      	bne.n	8013674 <get_ldnumber+0x72>
					vol = (int)i;
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	3301      	adds	r3, #1
 801366c:	617b      	str	r3, [r7, #20]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	697a      	ldr	r2, [r7, #20]
 8013672:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	e002      	b.n	801367e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013678:	2300      	movs	r3, #0
 801367a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801367c:	693b      	ldr	r3, [r7, #16]
}
 801367e:	4618      	mov	r0, r3
 8013680:	371c      	adds	r7, #28
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr
	...

0801368c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2200      	movs	r2, #0
 801369a:	70da      	strb	r2, [r3, #3]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f04f 32ff 	mov.w	r2, #4294967295
 80136a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80136a4:	6839      	ldr	r1, [r7, #0]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f7ff f8d8 	bl	801285c <move_window>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d001      	beq.n	80136b6 <check_fs+0x2a>
 80136b2:	2304      	movs	r3, #4
 80136b4:	e038      	b.n	8013728 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	3330      	adds	r3, #48	; 0x30
 80136ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe fe1c 	bl	80122fc <ld_word>
 80136c4:	4603      	mov	r3, r0
 80136c6:	461a      	mov	r2, r3
 80136c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d001      	beq.n	80136d4 <check_fs+0x48>
 80136d0:	2303      	movs	r3, #3
 80136d2:	e029      	b.n	8013728 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136da:	2be9      	cmp	r3, #233	; 0xe9
 80136dc:	d009      	beq.n	80136f2 <check_fs+0x66>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136e4:	2beb      	cmp	r3, #235	; 0xeb
 80136e6:	d11e      	bne.n	8013726 <check_fs+0x9a>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80136ee:	2b90      	cmp	r3, #144	; 0x90
 80136f0:	d119      	bne.n	8013726 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	3330      	adds	r3, #48	; 0x30
 80136f6:	3336      	adds	r3, #54	; 0x36
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fe fe17 	bl	801232c <ld_dword>
 80136fe:	4603      	mov	r3, r0
 8013700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013704:	4a0a      	ldr	r2, [pc, #40]	; (8013730 <check_fs+0xa4>)
 8013706:	4293      	cmp	r3, r2
 8013708:	d101      	bne.n	801370e <check_fs+0x82>
 801370a:	2300      	movs	r3, #0
 801370c:	e00c      	b.n	8013728 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	3330      	adds	r3, #48	; 0x30
 8013712:	3352      	adds	r3, #82	; 0x52
 8013714:	4618      	mov	r0, r3
 8013716:	f7fe fe09 	bl	801232c <ld_dword>
 801371a:	4603      	mov	r3, r0
 801371c:	4a05      	ldr	r2, [pc, #20]	; (8013734 <check_fs+0xa8>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d101      	bne.n	8013726 <check_fs+0x9a>
 8013722:	2300      	movs	r3, #0
 8013724:	e000      	b.n	8013728 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013726:	2302      	movs	r3, #2
}
 8013728:	4618      	mov	r0, r3
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	00544146 	.word	0x00544146
 8013734:	33544146 	.word	0x33544146

08013738 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b096      	sub	sp, #88	; 0x58
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	4613      	mov	r3, r2
 8013744:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f7ff ff58 	bl	8013602 <get_ldnumber>
 8013752:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013756:	2b00      	cmp	r3, #0
 8013758:	da01      	bge.n	801375e <find_volume+0x26>
 801375a:	230b      	movs	r3, #11
 801375c:	e22e      	b.n	8013bbc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801375e:	4aa8      	ldr	r2, [pc, #672]	; (8013a00 <find_volume+0x2c8>)
 8013760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013766:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <find_volume+0x3a>
 801376e:	230c      	movs	r3, #12
 8013770:	e224      	b.n	8013bbc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013776:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013778:	79fb      	ldrb	r3, [r7, #7]
 801377a:	f023 0301 	bic.w	r3, r3, #1
 801377e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d01a      	beq.n	80137be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378a:	785b      	ldrb	r3, [r3, #1]
 801378c:	4618      	mov	r0, r3
 801378e:	f7fe fd17 	bl	80121c0 <disk_status>
 8013792:	4603      	mov	r3, r0
 8013794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801379c:	f003 0301 	and.w	r3, r3, #1
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d10c      	bne.n	80137be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80137a4:	79fb      	ldrb	r3, [r7, #7]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d007      	beq.n	80137ba <find_volume+0x82>
 80137aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137ae:	f003 0304 	and.w	r3, r3, #4
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d001      	beq.n	80137ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80137b6:	230a      	movs	r3, #10
 80137b8:	e200      	b.n	8013bbc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80137ba:	2300      	movs	r3, #0
 80137bc:	e1fe      	b.n	8013bbc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80137be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c0:	2200      	movs	r2, #0
 80137c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80137c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80137cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ce:	785b      	ldrb	r3, [r3, #1]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe fd0f 	bl	80121f4 <disk_initialize>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80137dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137e0:	f003 0301 	and.w	r3, r3, #1
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d001      	beq.n	80137ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80137e8:	2303      	movs	r3, #3
 80137ea:	e1e7      	b.n	8013bbc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80137ec:	79fb      	ldrb	r3, [r7, #7]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d007      	beq.n	8013802 <find_volume+0xca>
 80137f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137f6:	f003 0304 	and.w	r3, r3, #4
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d001      	beq.n	8013802 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80137fe:	230a      	movs	r3, #10
 8013800:	e1dc      	b.n	8013bbc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013802:	2300      	movs	r3, #0
 8013804:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801380a:	f7ff ff3f 	bl	801368c <check_fs>
 801380e:	4603      	mov	r3, r0
 8013810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013818:	2b02      	cmp	r3, #2
 801381a:	d14b      	bne.n	80138b4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801381c:	2300      	movs	r3, #0
 801381e:	643b      	str	r3, [r7, #64]	; 0x40
 8013820:	e01f      	b.n	8013862 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801382a:	011b      	lsls	r3, r3, #4
 801382c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013830:	4413      	add	r3, r2
 8013832:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013836:	3304      	adds	r3, #4
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d006      	beq.n	801384c <find_volume+0x114>
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	3308      	adds	r3, #8
 8013842:	4618      	mov	r0, r3
 8013844:	f7fe fd72 	bl	801232c <ld_dword>
 8013848:	4602      	mov	r2, r0
 801384a:	e000      	b.n	801384e <find_volume+0x116>
 801384c:	2200      	movs	r2, #0
 801384e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013856:	440b      	add	r3, r1
 8013858:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801385c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801385e:	3301      	adds	r3, #1
 8013860:	643b      	str	r3, [r7, #64]	; 0x40
 8013862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013864:	2b03      	cmp	r3, #3
 8013866:	d9dc      	bls.n	8013822 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013868:	2300      	movs	r3, #0
 801386a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801386c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801386e:	2b00      	cmp	r3, #0
 8013870:	d002      	beq.n	8013878 <find_volume+0x140>
 8013872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013874:	3b01      	subs	r3, #1
 8013876:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013880:	4413      	add	r3, r2
 8013882:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013886:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801388a:	2b00      	cmp	r3, #0
 801388c:	d005      	beq.n	801389a <find_volume+0x162>
 801388e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013892:	f7ff fefb 	bl	801368c <check_fs>
 8013896:	4603      	mov	r3, r0
 8013898:	e000      	b.n	801389c <find_volume+0x164>
 801389a:	2303      	movs	r3, #3
 801389c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d905      	bls.n	80138b4 <find_volume+0x17c>
 80138a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138aa:	3301      	adds	r3, #1
 80138ac:	643b      	str	r3, [r7, #64]	; 0x40
 80138ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b0:	2b03      	cmp	r3, #3
 80138b2:	d9e1      	bls.n	8013878 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138b8:	2b04      	cmp	r3, #4
 80138ba:	d101      	bne.n	80138c0 <find_volume+0x188>
 80138bc:	2301      	movs	r3, #1
 80138be:	e17d      	b.n	8013bbc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d901      	bls.n	80138cc <find_volume+0x194>
 80138c8:	230d      	movs	r3, #13
 80138ca:	e177      	b.n	8013bbc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80138cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ce:	3330      	adds	r3, #48	; 0x30
 80138d0:	330b      	adds	r3, #11
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fe fd12 	bl	80122fc <ld_word>
 80138d8:	4603      	mov	r3, r0
 80138da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138de:	d001      	beq.n	80138e4 <find_volume+0x1ac>
 80138e0:	230d      	movs	r3, #13
 80138e2:	e16b      	b.n	8013bbc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e6:	3330      	adds	r3, #48	; 0x30
 80138e8:	3316      	adds	r3, #22
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fe fd06 	bl	80122fc <ld_word>
 80138f0:	4603      	mov	r3, r0
 80138f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80138f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <find_volume+0x1d0>
 80138fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fc:	3330      	adds	r3, #48	; 0x30
 80138fe:	3324      	adds	r3, #36	; 0x24
 8013900:	4618      	mov	r0, r3
 8013902:	f7fe fd13 	bl	801232c <ld_dword>
 8013906:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801390a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801390c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013910:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8013914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013916:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391a:	789b      	ldrb	r3, [r3, #2]
 801391c:	2b01      	cmp	r3, #1
 801391e:	d005      	beq.n	801392c <find_volume+0x1f4>
 8013920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013922:	789b      	ldrb	r3, [r3, #2]
 8013924:	2b02      	cmp	r3, #2
 8013926:	d001      	beq.n	801392c <find_volume+0x1f4>
 8013928:	230d      	movs	r3, #13
 801392a:	e147      	b.n	8013bbc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392e:	789b      	ldrb	r3, [r3, #2]
 8013930:	461a      	mov	r2, r3
 8013932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013934:	fb02 f303 	mul.w	r3, r2, r3
 8013938:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013940:	b29a      	uxth	r2, r3
 8013942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013944:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013948:	895b      	ldrh	r3, [r3, #10]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d008      	beq.n	8013960 <find_volume+0x228>
 801394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013950:	895b      	ldrh	r3, [r3, #10]
 8013952:	461a      	mov	r2, r3
 8013954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013956:	895b      	ldrh	r3, [r3, #10]
 8013958:	3b01      	subs	r3, #1
 801395a:	4013      	ands	r3, r2
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <find_volume+0x22c>
 8013960:	230d      	movs	r3, #13
 8013962:	e12b      	b.n	8013bbc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013966:	3330      	adds	r3, #48	; 0x30
 8013968:	3311      	adds	r3, #17
 801396a:	4618      	mov	r0, r3
 801396c:	f7fe fcc6 	bl	80122fc <ld_word>
 8013970:	4603      	mov	r3, r0
 8013972:	461a      	mov	r2, r3
 8013974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013976:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397a:	891b      	ldrh	r3, [r3, #8]
 801397c:	f003 030f 	and.w	r3, r3, #15
 8013980:	b29b      	uxth	r3, r3
 8013982:	2b00      	cmp	r3, #0
 8013984:	d001      	beq.n	801398a <find_volume+0x252>
 8013986:	230d      	movs	r3, #13
 8013988:	e118      	b.n	8013bbc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398c:	3330      	adds	r3, #48	; 0x30
 801398e:	3313      	adds	r3, #19
 8013990:	4618      	mov	r0, r3
 8013992:	f7fe fcb3 	bl	80122fc <ld_word>
 8013996:	4603      	mov	r3, r0
 8013998:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801399a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801399c:	2b00      	cmp	r3, #0
 801399e:	d106      	bne.n	80139ae <find_volume+0x276>
 80139a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a2:	3330      	adds	r3, #48	; 0x30
 80139a4:	3320      	adds	r3, #32
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fe fcc0 	bl	801232c <ld_dword>
 80139ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b0:	3330      	adds	r3, #48	; 0x30
 80139b2:	330e      	adds	r3, #14
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fe fca1 	bl	80122fc <ld_word>
 80139ba:	4603      	mov	r3, r0
 80139bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d101      	bne.n	80139c8 <find_volume+0x290>
 80139c4:	230d      	movs	r3, #13
 80139c6:	e0f9      	b.n	8013bbc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80139c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139cc:	4413      	add	r3, r2
 80139ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139d0:	8912      	ldrh	r2, [r2, #8]
 80139d2:	0912      	lsrs	r2, r2, #4
 80139d4:	b292      	uxth	r2, r2
 80139d6:	4413      	add	r3, r2
 80139d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80139da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139de:	429a      	cmp	r2, r3
 80139e0:	d201      	bcs.n	80139e6 <find_volume+0x2ae>
 80139e2:	230d      	movs	r3, #13
 80139e4:	e0ea      	b.n	8013bbc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80139e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139ee:	8952      	ldrh	r2, [r2, #10]
 80139f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80139f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d103      	bne.n	8013a04 <find_volume+0x2cc>
 80139fc:	230d      	movs	r3, #13
 80139fe:	e0dd      	b.n	8013bbc <find_volume+0x484>
 8013a00:	200008e0 	.word	0x200008e0
		fmt = FS_FAT32;
 8013a04:	2303      	movs	r3, #3
 8013a06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a10:	4293      	cmp	r3, r2
 8013a12:	d802      	bhi.n	8013a1a <find_volume+0x2e2>
 8013a14:	2302      	movs	r3, #2
 8013a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d802      	bhi.n	8013a2a <find_volume+0x2f2>
 8013a24:	2301      	movs	r3, #1
 8013a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2c:	1c9a      	adds	r2, r3, #2
 8013a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a30:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a36:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a3c:	441a      	add	r2, r3
 8013a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a40:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a46:	441a      	add	r2, r3
 8013a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a50:	2b03      	cmp	r3, #3
 8013a52:	d11e      	bne.n	8013a92 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a56:	3330      	adds	r3, #48	; 0x30
 8013a58:	332a      	adds	r3, #42	; 0x2a
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fe fc4e 	bl	80122fc <ld_word>
 8013a60:	4603      	mov	r3, r0
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d001      	beq.n	8013a6a <find_volume+0x332>
 8013a66:	230d      	movs	r3, #13
 8013a68:	e0a8      	b.n	8013bbc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6c:	891b      	ldrh	r3, [r3, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d001      	beq.n	8013a76 <find_volume+0x33e>
 8013a72:	230d      	movs	r3, #13
 8013a74:	e0a2      	b.n	8013bbc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a78:	3330      	adds	r3, #48	; 0x30
 8013a7a:	332c      	adds	r3, #44	; 0x2c
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fe fc55 	bl	801232c <ld_dword>
 8013a82:	4602      	mov	r2, r0
 8013a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a86:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8a:	695b      	ldr	r3, [r3, #20]
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8013a90:	e01f      	b.n	8013ad2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a94:	891b      	ldrh	r3, [r3, #8]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d101      	bne.n	8013a9e <find_volume+0x366>
 8013a9a:	230d      	movs	r3, #13
 8013a9c:	e08e      	b.n	8013bbc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa0:	6a1a      	ldr	r2, [r3, #32]
 8013aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aa4:	441a      	add	r2, r3
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013aaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013aae:	2b02      	cmp	r3, #2
 8013ab0:	d103      	bne.n	8013aba <find_volume+0x382>
 8013ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab4:	695b      	ldr	r3, [r3, #20]
 8013ab6:	005b      	lsls	r3, r3, #1
 8013ab8:	e00a      	b.n	8013ad0 <find_volume+0x398>
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	695a      	ldr	r2, [r3, #20]
 8013abe:	4613      	mov	r3, r2
 8013ac0:	005b      	lsls	r3, r3, #1
 8013ac2:	4413      	add	r3, r2
 8013ac4:	085a      	lsrs	r2, r3, #1
 8013ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac8:	695b      	ldr	r3, [r3, #20]
 8013aca:	f003 0301 	and.w	r3, r3, #1
 8013ace:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013ad0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad4:	699a      	ldr	r2, [r3, #24]
 8013ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ad8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013adc:	0a5b      	lsrs	r3, r3, #9
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d201      	bcs.n	8013ae6 <find_volume+0x3ae>
 8013ae2:	230d      	movs	r3, #13
 8013ae4:	e06a      	b.n	8013bbc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8013aec:	611a      	str	r2, [r3, #16]
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	691a      	ldr	r2, [r3, #16]
 8013af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	2280      	movs	r2, #128	; 0x80
 8013afa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b00:	2b03      	cmp	r3, #3
 8013b02:	d149      	bne.n	8013b98 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b06:	3330      	adds	r3, #48	; 0x30
 8013b08:	3330      	adds	r3, #48	; 0x30
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fe fbf6 	bl	80122fc <ld_word>
 8013b10:	4603      	mov	r3, r0
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d140      	bne.n	8013b98 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b18:	3301      	adds	r3, #1
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b1e:	f7fe fe9d 	bl	801285c <move_window>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d137      	bne.n	8013b98 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	3330      	adds	r3, #48	; 0x30
 8013b32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fe fbe0 	bl	80122fc <ld_word>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	461a      	mov	r2, r3
 8013b40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d127      	bne.n	8013b98 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b4a:	3330      	adds	r3, #48	; 0x30
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fe fbed 	bl	801232c <ld_dword>
 8013b52:	4603      	mov	r3, r0
 8013b54:	4a1b      	ldr	r2, [pc, #108]	; (8013bc4 <find_volume+0x48c>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d11e      	bne.n	8013b98 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5c:	3330      	adds	r3, #48	; 0x30
 8013b5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fe fbe2 	bl	801232c <ld_dword>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	4a17      	ldr	r2, [pc, #92]	; (8013bc8 <find_volume+0x490>)
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d113      	bne.n	8013b98 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	3330      	adds	r3, #48	; 0x30
 8013b74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fe fbd7 	bl	801232c <ld_dword>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b82:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b86:	3330      	adds	r3, #48	; 0x30
 8013b88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7fe fbcd 	bl	801232c <ld_dword>
 8013b92:	4602      	mov	r2, r0
 8013b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b96:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013b9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013ba0:	4b0a      	ldr	r3, [pc, #40]	; (8013bcc <find_volume+0x494>)
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	4b08      	ldr	r3, [pc, #32]	; (8013bcc <find_volume+0x494>)
 8013baa:	801a      	strh	r2, [r3, #0]
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <find_volume+0x494>)
 8013bae:	881a      	ldrh	r2, [r3, #0]
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bb6:	f7fe fde9 	bl	801278c <clear_lock>
#endif
	return FR_OK;
 8013bba:	2300      	movs	r3, #0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3758      	adds	r7, #88	; 0x58
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	41615252 	.word	0x41615252
 8013bc8:	61417272 	.word	0x61417272
 8013bcc:	200008e4 	.word	0x200008e4

08013bd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013bda:	2309      	movs	r3, #9
 8013bdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d01c      	beq.n	8013c1e <validate+0x4e>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d018      	beq.n	8013c1e <validate+0x4e>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d013      	beq.n	8013c1e <validate+0x4e>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	889a      	ldrh	r2, [r3, #4]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	88db      	ldrh	r3, [r3, #6]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d10c      	bne.n	8013c1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	785b      	ldrb	r3, [r3, #1]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fad8 	bl	80121c0 <disk_status>
 8013c10:	4603      	mov	r3, r0
 8013c12:	f003 0301 	and.w	r3, r3, #1
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d101      	bne.n	8013c1e <validate+0x4e>
			res = FR_OK;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c1e:	7bfb      	ldrb	r3, [r7, #15]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d102      	bne.n	8013c2a <validate+0x5a>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	e000      	b.n	8013c2c <validate+0x5c>
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	6013      	str	r3, [r2, #0]
	return res;
 8013c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
	...

08013c3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b088      	sub	sp, #32
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	60b9      	str	r1, [r7, #8]
 8013c46:	4613      	mov	r3, r2
 8013c48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c4e:	f107 0310 	add.w	r3, r7, #16
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7ff fcd5 	bl	8013602 <get_ldnumber>
 8013c58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	da01      	bge.n	8013c64 <f_mount+0x28>
 8013c60:	230b      	movs	r3, #11
 8013c62:	e02b      	b.n	8013cbc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c64:	4a17      	ldr	r2, [pc, #92]	; (8013cc4 <f_mount+0x88>)
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d005      	beq.n	8013c80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013c74:	69b8      	ldr	r0, [r7, #24]
 8013c76:	f7fe fd89 	bl	801278c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d002      	beq.n	8013c8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013c8c:	68fa      	ldr	r2, [r7, #12]
 8013c8e:	490d      	ldr	r1, [pc, #52]	; (8013cc4 <f_mount+0x88>)
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d002      	beq.n	8013ca2 <f_mount+0x66>
 8013c9c:	79fb      	ldrb	r3, [r7, #7]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d001      	beq.n	8013ca6 <f_mount+0x6a>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	e00a      	b.n	8013cbc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013ca6:	f107 010c 	add.w	r1, r7, #12
 8013caa:	f107 0308 	add.w	r3, r7, #8
 8013cae:	2200      	movs	r2, #0
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7ff fd41 	bl	8013738 <find_volume>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3720      	adds	r7, #32
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	200008e0 	.word	0x200008e0

08013cc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b098      	sub	sp, #96	; 0x60
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <f_open+0x18>
 8013cdc:	2309      	movs	r3, #9
 8013cde:	e1ad      	b.n	801403c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013ce0:	79fb      	ldrb	r3, [r7, #7]
 8013ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ce6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013ce8:	79fa      	ldrb	r2, [r7, #7]
 8013cea:	f107 0110 	add.w	r1, r7, #16
 8013cee:	f107 0308 	add.w	r3, r7, #8
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff fd20 	bl	8013738 <find_volume>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f040 8191 	bne.w	801402a <f_open+0x362>
		dj.obj.fs = fs;
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d0c:	68ba      	ldr	r2, [r7, #8]
 8013d0e:	f107 0314 	add.w	r3, r7, #20
 8013d12:	4611      	mov	r1, r2
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ff fc03 	bl	8013520 <follow_path>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d11a      	bne.n	8013d5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013d2c:	b25b      	sxtb	r3, r3
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	da03      	bge.n	8013d3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013d32:	2306      	movs	r3, #6
 8013d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013d38:	e011      	b.n	8013d5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013d3a:	79fb      	ldrb	r3, [r7, #7]
 8013d3c:	f023 0301 	bic.w	r3, r3, #1
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	bf14      	ite	ne
 8013d44:	2301      	movne	r3, #1
 8013d46:	2300      	moveq	r3, #0
 8013d48:	b2db      	uxtb	r3, r3
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	f107 0314 	add.w	r3, r7, #20
 8013d50:	4611      	mov	r1, r2
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7fe fbd2 	bl	80124fc <chk_lock>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d5e:	79fb      	ldrb	r3, [r7, #7]
 8013d60:	f003 031c 	and.w	r3, r3, #28
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d07f      	beq.n	8013e68 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d017      	beq.n	8013da0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d74:	2b04      	cmp	r3, #4
 8013d76:	d10e      	bne.n	8013d96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013d78:	f7fe fc1c 	bl	80125b4 <enq_lock>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d006      	beq.n	8013d90 <f_open+0xc8>
 8013d82:	f107 0314 	add.w	r3, r7, #20
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ff fb03 	bl	8013392 <dir_register>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	e000      	b.n	8013d92 <f_open+0xca>
 8013d90:	2312      	movs	r3, #18
 8013d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d96:	79fb      	ldrb	r3, [r7, #7]
 8013d98:	f043 0308 	orr.w	r3, r3, #8
 8013d9c:	71fb      	strb	r3, [r7, #7]
 8013d9e:	e010      	b.n	8013dc2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013da0:	7ebb      	ldrb	r3, [r7, #26]
 8013da2:	f003 0311 	and.w	r3, r3, #17
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d003      	beq.n	8013db2 <f_open+0xea>
					res = FR_DENIED;
 8013daa:	2307      	movs	r3, #7
 8013dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013db0:	e007      	b.n	8013dc2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	f003 0304 	and.w	r3, r3, #4
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d002      	beq.n	8013dc2 <f_open+0xfa>
 8013dbc:	2308      	movs	r3, #8
 8013dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d168      	bne.n	8013e9c <f_open+0x1d4>
 8013dca:	79fb      	ldrb	r3, [r7, #7]
 8013dcc:	f003 0308 	and.w	r3, r3, #8
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d063      	beq.n	8013e9c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013dd4:	f7fe f92c 	bl	8012030 <get_fattime>
 8013dd8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ddc:	330e      	adds	r3, #14
 8013dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7fe fae1 	bl	80123a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de8:	3316      	adds	r3, #22
 8013dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fe fadb 	bl	80123a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df4:	330b      	adds	r3, #11
 8013df6:	2220      	movs	r2, #32
 8013df8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dfe:	4611      	mov	r1, r2
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7ff fa32 	bl	801326a <ld_clust>
 8013e06:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff fa4a 	bl	80132a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e16:	331c      	adds	r3, #28
 8013e18:	2100      	movs	r1, #0
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7fe fac4 	bl	80123a8 <st_dword>
					fs->wflag = 1;
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	2201      	movs	r2, #1
 8013e24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d037      	beq.n	8013e9c <f_open+0x1d4>
						dw = fs->winsect;
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e30:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013e32:	f107 0314 	add.w	r3, r7, #20
 8013e36:	2200      	movs	r2, #0
 8013e38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fe ff5d 	bl	8012cfa <remove_chain>
 8013e40:	4603      	mov	r3, r0
 8013e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d126      	bne.n	8013e9c <f_open+0x1d4>
							res = move_window(fs, dw);
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7fe fd02 	bl	801285c <move_window>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e62:	3a01      	subs	r2, #1
 8013e64:	60da      	str	r2, [r3, #12]
 8013e66:	e019      	b.n	8013e9c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d115      	bne.n	8013e9c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e70:	7ebb      	ldrb	r3, [r7, #26]
 8013e72:	f003 0310 	and.w	r3, r3, #16
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d003      	beq.n	8013e82 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013e7a:	2304      	movs	r3, #4
 8013e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e80:	e00c      	b.n	8013e9c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e82:	79fb      	ldrb	r3, [r7, #7]
 8013e84:	f003 0302 	and.w	r3, r3, #2
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d007      	beq.n	8013e9c <f_open+0x1d4>
 8013e8c:	7ebb      	ldrb	r3, [r7, #26]
 8013e8e:	f003 0301 	and.w	r3, r3, #1
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d002      	beq.n	8013e9c <f_open+0x1d4>
						res = FR_DENIED;
 8013e96:	2307      	movs	r3, #7
 8013e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d128      	bne.n	8013ef6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	f003 0308 	and.w	r3, r3, #8
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d003      	beq.n	8013eb6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013eae:	79fb      	ldrb	r3, [r7, #7]
 8013eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013ec4:	79fb      	ldrb	r3, [r7, #7]
 8013ec6:	f023 0301 	bic.w	r3, r3, #1
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	bf14      	ite	ne
 8013ece:	2301      	movne	r3, #1
 8013ed0:	2300      	moveq	r3, #0
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	f107 0314 	add.w	r3, r7, #20
 8013eda:	4611      	mov	r1, r2
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fe fb8b 	bl	80125f8 <inc_lock>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	691b      	ldr	r3, [r3, #16]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d102      	bne.n	8013ef6 <f_open+0x22e>
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	f040 8095 	bne.w	801402a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f04:	4611      	mov	r1, r2
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7ff f9af 	bl	801326a <ld_clust>
 8013f0c:	4602      	mov	r2, r0
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f14:	331c      	adds	r3, #28
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe fa08 	bl	801232c <ld_dword>
 8013f1c:	4602      	mov	r2, r0
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013f28:	693a      	ldr	r2, [r7, #16]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	88da      	ldrh	r2, [r3, #6]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	79fa      	ldrb	r2, [r7, #7]
 8013f3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2200      	movs	r2, #0
 8013f46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	3330      	adds	r3, #48	; 0x30
 8013f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f56:	2100      	movs	r1, #0
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe fa72 	bl	8012442 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f5e:	79fb      	ldrb	r3, [r7, #7]
 8013f60:	f003 0320 	and.w	r3, r3, #32
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d060      	beq.n	801402a <f_open+0x362>
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d05c      	beq.n	801402a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	68da      	ldr	r2, [r3, #12]
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	895b      	ldrh	r3, [r3, #10]
 8013f7c:	025b      	lsls	r3, r3, #9
 8013f7e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8013f8c:	e016      	b.n	8013fbc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fe fd1d 	bl	80129d2 <get_fat>
 8013f98:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d802      	bhi.n	8013fa6 <f_open+0x2de>
 8013fa0:	2302      	movs	r3, #2
 8013fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fac:	d102      	bne.n	8013fb4 <f_open+0x2ec>
 8013fae:	2301      	movs	r3, #1
 8013fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	657b      	str	r3, [r7, #84]	; 0x54
 8013fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d103      	bne.n	8013fcc <f_open+0x304>
 8013fc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d8e0      	bhi.n	8013f8e <f_open+0x2c6>
				}
				fp->clust = clst;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013fd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d127      	bne.n	801402a <f_open+0x362>
 8013fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d022      	beq.n	801402a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fe fcd3 	bl	8012994 <clust2sect>
 8013fee:	6478      	str	r0, [r7, #68]	; 0x44
 8013ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d103      	bne.n	8013ffe <f_open+0x336>
						res = FR_INT_ERR;
 8013ff6:	2302      	movs	r3, #2
 8013ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013ffc:	e015      	b.n	801402a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014000:	0a5a      	lsrs	r2, r3, #9
 8014002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014004:	441a      	add	r2, r3
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	7858      	ldrb	r0, [r3, #1]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	6a1a      	ldr	r2, [r3, #32]
 8014018:	2301      	movs	r3, #1
 801401a:	f7fe f911 	bl	8012240 <disk_read>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d002      	beq.n	801402a <f_open+0x362>
 8014024:	2301      	movs	r3, #1
 8014026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801402a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801402e:	2b00      	cmp	r3, #0
 8014030:	d002      	beq.n	8014038 <f_open+0x370>
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2200      	movs	r2, #0
 8014036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801403c:	4618      	mov	r0, r3
 801403e:	3760      	adds	r7, #96	; 0x60
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b08e      	sub	sp, #56	; 0x38
 8014048:	af00      	add	r7, sp, #0
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	60b9      	str	r1, [r7, #8]
 801404e:	607a      	str	r2, [r7, #4]
 8014050:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	2200      	movs	r2, #0
 801405a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f107 0214 	add.w	r2, r7, #20
 8014062:	4611      	mov	r1, r2
 8014064:	4618      	mov	r0, r3
 8014066:	f7ff fdb3 	bl	8013bd0 <validate>
 801406a:	4603      	mov	r3, r0
 801406c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014074:	2b00      	cmp	r3, #0
 8014076:	d107      	bne.n	8014088 <f_read+0x44>
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	7d5b      	ldrb	r3, [r3, #21]
 801407c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014084:	2b00      	cmp	r3, #0
 8014086:	d002      	beq.n	801408e <f_read+0x4a>
 8014088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801408c:	e115      	b.n	80142ba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	7d1b      	ldrb	r3, [r3, #20]
 8014092:	f003 0301 	and.w	r3, r3, #1
 8014096:	2b00      	cmp	r3, #0
 8014098:	d101      	bne.n	801409e <f_read+0x5a>
 801409a:	2307      	movs	r3, #7
 801409c:	e10d      	b.n	80142ba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	68da      	ldr	r2, [r3, #12]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	699b      	ldr	r3, [r3, #24]
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	6a3b      	ldr	r3, [r7, #32]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	f240 80fe 	bls.w	80142b0 <f_read+0x26c>
 80140b4:	6a3b      	ldr	r3, [r7, #32]
 80140b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80140b8:	e0fa      	b.n	80142b0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	699b      	ldr	r3, [r3, #24]
 80140be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f040 80c6 	bne.w	8014254 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	699b      	ldr	r3, [r3, #24]
 80140cc:	0a5b      	lsrs	r3, r3, #9
 80140ce:	697a      	ldr	r2, [r7, #20]
 80140d0:	8952      	ldrh	r2, [r2, #10]
 80140d2:	3a01      	subs	r2, #1
 80140d4:	4013      	ands	r3, r2
 80140d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d12f      	bne.n	801413e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	699b      	ldr	r3, [r3, #24]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d103      	bne.n	80140ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	689b      	ldr	r3, [r3, #8]
 80140ea:	633b      	str	r3, [r7, #48]	; 0x30
 80140ec:	e013      	b.n	8014116 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d007      	beq.n	8014106 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	699b      	ldr	r3, [r3, #24]
 80140fa:	4619      	mov	r1, r3
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f7fe fef9 	bl	8012ef4 <clmt_clust>
 8014102:	6338      	str	r0, [r7, #48]	; 0x30
 8014104:	e007      	b.n	8014116 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	69db      	ldr	r3, [r3, #28]
 801410c:	4619      	mov	r1, r3
 801410e:	4610      	mov	r0, r2
 8014110:	f7fe fc5f 	bl	80129d2 <get_fat>
 8014114:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014118:	2b01      	cmp	r3, #1
 801411a:	d804      	bhi.n	8014126 <f_read+0xe2>
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	2202      	movs	r2, #2
 8014120:	755a      	strb	r2, [r3, #21]
 8014122:	2302      	movs	r3, #2
 8014124:	e0c9      	b.n	80142ba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412c:	d104      	bne.n	8014138 <f_read+0xf4>
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2201      	movs	r2, #1
 8014132:	755a      	strb	r2, [r3, #21]
 8014134:	2301      	movs	r3, #1
 8014136:	e0c0      	b.n	80142ba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801413c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801413e:	697a      	ldr	r2, [r7, #20]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	69db      	ldr	r3, [r3, #28]
 8014144:	4619      	mov	r1, r3
 8014146:	4610      	mov	r0, r2
 8014148:	f7fe fc24 	bl	8012994 <clust2sect>
 801414c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d104      	bne.n	801415e <f_read+0x11a>
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2202      	movs	r2, #2
 8014158:	755a      	strb	r2, [r3, #21]
 801415a:	2302      	movs	r3, #2
 801415c:	e0ad      	b.n	80142ba <f_read+0x276>
			sect += csect;
 801415e:	69ba      	ldr	r2, [r7, #24]
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	4413      	add	r3, r2
 8014164:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	0a5b      	lsrs	r3, r3, #9
 801416a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416e:	2b00      	cmp	r3, #0
 8014170:	d039      	beq.n	80141e6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014172:	69fa      	ldr	r2, [r7, #28]
 8014174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014176:	4413      	add	r3, r2
 8014178:	697a      	ldr	r2, [r7, #20]
 801417a:	8952      	ldrh	r2, [r2, #10]
 801417c:	4293      	cmp	r3, r2
 801417e:	d905      	bls.n	801418c <f_read+0x148>
					cc = fs->csize - csect;
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	895b      	ldrh	r3, [r3, #10]
 8014184:	461a      	mov	r2, r3
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	7858      	ldrb	r0, [r3, #1]
 8014190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014192:	69ba      	ldr	r2, [r7, #24]
 8014194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014196:	f7fe f853 	bl	8012240 <disk_read>
 801419a:	4603      	mov	r3, r0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d004      	beq.n	80141aa <f_read+0x166>
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2201      	movs	r2, #1
 80141a4:	755a      	strb	r2, [r3, #21]
 80141a6:	2301      	movs	r3, #1
 80141a8:	e087      	b.n	80142ba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	7d1b      	ldrb	r3, [r3, #20]
 80141ae:	b25b      	sxtb	r3, r3
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	da14      	bge.n	80141de <f_read+0x19a>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	6a1a      	ldr	r2, [r3, #32]
 80141b8:	69bb      	ldr	r3, [r7, #24]
 80141ba:	1ad3      	subs	r3, r2, r3
 80141bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141be:	429a      	cmp	r2, r3
 80141c0:	d90d      	bls.n	80141de <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	6a1a      	ldr	r2, [r3, #32]
 80141c6:	69bb      	ldr	r3, [r7, #24]
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	025b      	lsls	r3, r3, #9
 80141cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ce:	18d0      	adds	r0, r2, r3
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	3330      	adds	r3, #48	; 0x30
 80141d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141d8:	4619      	mov	r1, r3
 80141da:	f7fe f911 	bl	8012400 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80141de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e0:	025b      	lsls	r3, r3, #9
 80141e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80141e4:	e050      	b.n	8014288 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6a1b      	ldr	r3, [r3, #32]
 80141ea:	69ba      	ldr	r2, [r7, #24]
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d02e      	beq.n	801424e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	7d1b      	ldrb	r3, [r3, #20]
 80141f4:	b25b      	sxtb	r3, r3
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	da18      	bge.n	801422c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	7858      	ldrb	r0, [r3, #1]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	6a1a      	ldr	r2, [r3, #32]
 8014208:	2301      	movs	r3, #1
 801420a:	f7fe f839 	bl	8012280 <disk_write>
 801420e:	4603      	mov	r3, r0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d004      	beq.n	801421e <f_read+0x1da>
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2201      	movs	r2, #1
 8014218:	755a      	strb	r2, [r3, #21]
 801421a:	2301      	movs	r3, #1
 801421c:	e04d      	b.n	80142ba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	7d1b      	ldrb	r3, [r3, #20]
 8014222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014226:	b2da      	uxtb	r2, r3
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	7858      	ldrb	r0, [r3, #1]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014236:	2301      	movs	r3, #1
 8014238:	69ba      	ldr	r2, [r7, #24]
 801423a:	f7fe f801 	bl	8012240 <disk_read>
 801423e:	4603      	mov	r3, r0
 8014240:	2b00      	cmp	r3, #0
 8014242:	d004      	beq.n	801424e <f_read+0x20a>
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2201      	movs	r2, #1
 8014248:	755a      	strb	r2, [r3, #21]
 801424a:	2301      	movs	r3, #1
 801424c:	e035      	b.n	80142ba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	69ba      	ldr	r2, [r7, #24]
 8014252:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	699b      	ldr	r3, [r3, #24]
 8014258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801425c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014260:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	429a      	cmp	r2, r3
 8014268:	d901      	bls.n	801426e <f_read+0x22a>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	699b      	ldr	r3, [r3, #24]
 8014278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801427c:	4413      	add	r3, r2
 801427e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014280:	4619      	mov	r1, r3
 8014282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014284:	f7fe f8bc 	bl	8012400 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428c:	4413      	add	r3, r2
 801428e:	627b      	str	r3, [r7, #36]	; 0x24
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	699a      	ldr	r2, [r3, #24]
 8014294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014296:	441a      	add	r2, r3
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	619a      	str	r2, [r3, #24]
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a2:	441a      	add	r2, r3
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	601a      	str	r2, [r3, #0]
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ac:	1ad3      	subs	r3, r2, r3
 80142ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	f47f af01 	bne.w	80140ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80142b8:	2300      	movs	r3, #0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3738      	adds	r7, #56	; 0x38
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}

080142c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80142c2:	b580      	push	{r7, lr}
 80142c4:	b08c      	sub	sp, #48	; 0x30
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	60f8      	str	r0, [r7, #12]
 80142ca:	60b9      	str	r1, [r7, #8]
 80142cc:	607a      	str	r2, [r7, #4]
 80142ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	2200      	movs	r2, #0
 80142d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f107 0210 	add.w	r2, r7, #16
 80142e0:	4611      	mov	r1, r2
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7ff fc74 	bl	8013bd0 <validate>
 80142e8:	4603      	mov	r3, r0
 80142ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80142ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d107      	bne.n	8014306 <f_write+0x44>
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	7d5b      	ldrb	r3, [r3, #21]
 80142fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80142fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014302:	2b00      	cmp	r3, #0
 8014304:	d002      	beq.n	801430c <f_write+0x4a>
 8014306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801430a:	e14b      	b.n	80145a4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	7d1b      	ldrb	r3, [r3, #20]
 8014310:	f003 0302 	and.w	r3, r3, #2
 8014314:	2b00      	cmp	r3, #0
 8014316:	d101      	bne.n	801431c <f_write+0x5a>
 8014318:	2307      	movs	r3, #7
 801431a:	e143      	b.n	80145a4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	699a      	ldr	r2, [r3, #24]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	441a      	add	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	699b      	ldr	r3, [r3, #24]
 8014328:	429a      	cmp	r2, r3
 801432a:	f080 812d 	bcs.w	8014588 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	699b      	ldr	r3, [r3, #24]
 8014332:	43db      	mvns	r3, r3
 8014334:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014336:	e127      	b.n	8014588 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	699b      	ldr	r3, [r3, #24]
 801433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014340:	2b00      	cmp	r3, #0
 8014342:	f040 80e3 	bne.w	801450c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	699b      	ldr	r3, [r3, #24]
 801434a:	0a5b      	lsrs	r3, r3, #9
 801434c:	693a      	ldr	r2, [r7, #16]
 801434e:	8952      	ldrh	r2, [r2, #10]
 8014350:	3a01      	subs	r2, #1
 8014352:	4013      	ands	r3, r2
 8014354:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d143      	bne.n	80143e4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	699b      	ldr	r3, [r3, #24]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d10c      	bne.n	801437e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	689b      	ldr	r3, [r3, #8]
 8014368:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	2b00      	cmp	r3, #0
 801436e:	d11a      	bne.n	80143a6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	2100      	movs	r1, #0
 8014374:	4618      	mov	r0, r3
 8014376:	f7fe fd25 	bl	8012dc4 <create_chain>
 801437a:	62b8      	str	r0, [r7, #40]	; 0x28
 801437c:	e013      	b.n	80143a6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d007      	beq.n	8014396 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	699b      	ldr	r3, [r3, #24]
 801438a:	4619      	mov	r1, r3
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f7fe fdb1 	bl	8012ef4 <clmt_clust>
 8014392:	62b8      	str	r0, [r7, #40]	; 0x28
 8014394:	e007      	b.n	80143a6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014396:	68fa      	ldr	r2, [r7, #12]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	69db      	ldr	r3, [r3, #28]
 801439c:	4619      	mov	r1, r3
 801439e:	4610      	mov	r0, r2
 80143a0:	f7fe fd10 	bl	8012dc4 <create_chain>
 80143a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80143a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 80f2 	beq.w	8014592 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80143ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d104      	bne.n	80143be <f_write+0xfc>
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2202      	movs	r2, #2
 80143b8:	755a      	strb	r2, [r3, #21]
 80143ba:	2302      	movs	r3, #2
 80143bc:	e0f2      	b.n	80145a4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80143be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143c4:	d104      	bne.n	80143d0 <f_write+0x10e>
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	2201      	movs	r2, #1
 80143ca:	755a      	strb	r2, [r3, #21]
 80143cc:	2301      	movs	r3, #1
 80143ce:	e0e9      	b.n	80145a4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	689b      	ldr	r3, [r3, #8]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d102      	bne.n	80143e4 <f_write+0x122>
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	7d1b      	ldrb	r3, [r3, #20]
 80143e8:	b25b      	sxtb	r3, r3
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	da18      	bge.n	8014420 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	7858      	ldrb	r0, [r3, #1]
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	6a1a      	ldr	r2, [r3, #32]
 80143fc:	2301      	movs	r3, #1
 80143fe:	f7fd ff3f 	bl	8012280 <disk_write>
 8014402:	4603      	mov	r3, r0
 8014404:	2b00      	cmp	r3, #0
 8014406:	d004      	beq.n	8014412 <f_write+0x150>
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2201      	movs	r2, #1
 801440c:	755a      	strb	r2, [r3, #21]
 801440e:	2301      	movs	r3, #1
 8014410:	e0c8      	b.n	80145a4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	7d1b      	ldrb	r3, [r3, #20]
 8014416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801441a:	b2da      	uxtb	r2, r3
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014420:	693a      	ldr	r2, [r7, #16]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	69db      	ldr	r3, [r3, #28]
 8014426:	4619      	mov	r1, r3
 8014428:	4610      	mov	r0, r2
 801442a:	f7fe fab3 	bl	8012994 <clust2sect>
 801442e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d104      	bne.n	8014440 <f_write+0x17e>
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	2202      	movs	r2, #2
 801443a:	755a      	strb	r2, [r3, #21]
 801443c:	2302      	movs	r3, #2
 801443e:	e0b1      	b.n	80145a4 <f_write+0x2e2>
			sect += csect;
 8014440:	697a      	ldr	r2, [r7, #20]
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	4413      	add	r3, r2
 8014446:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	0a5b      	lsrs	r3, r3, #9
 801444c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801444e:	6a3b      	ldr	r3, [r7, #32]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d03c      	beq.n	80144ce <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014454:	69ba      	ldr	r2, [r7, #24]
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	4413      	add	r3, r2
 801445a:	693a      	ldr	r2, [r7, #16]
 801445c:	8952      	ldrh	r2, [r2, #10]
 801445e:	4293      	cmp	r3, r2
 8014460:	d905      	bls.n	801446e <f_write+0x1ac>
					cc = fs->csize - csect;
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	895b      	ldrh	r3, [r3, #10]
 8014466:	461a      	mov	r2, r3
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	7858      	ldrb	r0, [r3, #1]
 8014472:	6a3b      	ldr	r3, [r7, #32]
 8014474:	697a      	ldr	r2, [r7, #20]
 8014476:	69f9      	ldr	r1, [r7, #28]
 8014478:	f7fd ff02 	bl	8012280 <disk_write>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d004      	beq.n	801448c <f_write+0x1ca>
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2201      	movs	r2, #1
 8014486:	755a      	strb	r2, [r3, #21]
 8014488:	2301      	movs	r3, #1
 801448a:	e08b      	b.n	80145a4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	6a1a      	ldr	r2, [r3, #32]
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	1ad3      	subs	r3, r2, r3
 8014494:	6a3a      	ldr	r2, [r7, #32]
 8014496:	429a      	cmp	r2, r3
 8014498:	d915      	bls.n	80144c6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	6a1a      	ldr	r2, [r3, #32]
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	025b      	lsls	r3, r3, #9
 80144aa:	69fa      	ldr	r2, [r7, #28]
 80144ac:	4413      	add	r3, r2
 80144ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144b2:	4619      	mov	r1, r3
 80144b4:	f7fd ffa4 	bl	8012400 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	7d1b      	ldrb	r3, [r3, #20]
 80144bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80144c6:	6a3b      	ldr	r3, [r7, #32]
 80144c8:	025b      	lsls	r3, r3, #9
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80144cc:	e03f      	b.n	801454e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6a1b      	ldr	r3, [r3, #32]
 80144d2:	697a      	ldr	r2, [r7, #20]
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d016      	beq.n	8014506 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	699a      	ldr	r2, [r3, #24]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d210      	bcs.n	8014506 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	7858      	ldrb	r0, [r3, #1]
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144ee:	2301      	movs	r3, #1
 80144f0:	697a      	ldr	r2, [r7, #20]
 80144f2:	f7fd fea5 	bl	8012240 <disk_read>
 80144f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d004      	beq.n	8014506 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2201      	movs	r2, #1
 8014500:	755a      	strb	r2, [r3, #21]
 8014502:	2301      	movs	r3, #1
 8014504:	e04e      	b.n	80145a4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	697a      	ldr	r2, [r7, #20]
 801450a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	699b      	ldr	r3, [r3, #24]
 8014510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014514:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014518:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	429a      	cmp	r2, r3
 8014520:	d901      	bls.n	8014526 <f_write+0x264>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	699b      	ldr	r3, [r3, #24]
 8014530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014534:	4413      	add	r3, r2
 8014536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014538:	69f9      	ldr	r1, [r7, #28]
 801453a:	4618      	mov	r0, r3
 801453c:	f7fd ff60 	bl	8012400 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014548:	b2da      	uxtb	r2, r3
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801454e:	69fa      	ldr	r2, [r7, #28]
 8014550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014552:	4413      	add	r3, r2
 8014554:	61fb      	str	r3, [r7, #28]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	699a      	ldr	r2, [r3, #24]
 801455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455c:	441a      	add	r2, r3
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	619a      	str	r2, [r3, #24]
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	68da      	ldr	r2, [r3, #12]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	699b      	ldr	r3, [r3, #24]
 801456a:	429a      	cmp	r2, r3
 801456c:	bf38      	it	cc
 801456e:	461a      	movcc	r2, r3
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	60da      	str	r2, [r3, #12]
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801457a:	441a      	add	r2, r3
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	601a      	str	r2, [r3, #0]
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014584:	1ad3      	subs	r3, r2, r3
 8014586:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	f47f aed4 	bne.w	8014338 <f_write+0x76>
 8014590:	e000      	b.n	8014594 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014592:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	7d1b      	ldrb	r3, [r3, #20]
 8014598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801459c:	b2da      	uxtb	r2, r3
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3730      	adds	r7, #48	; 0x30
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f107 0208 	add.w	r2, r7, #8
 80145ba:	4611      	mov	r1, r2
 80145bc:	4618      	mov	r0, r3
 80145be:	f7ff fb07 	bl	8013bd0 <validate>
 80145c2:	4603      	mov	r3, r0
 80145c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80145c6:	7dfb      	ldrb	r3, [r7, #23]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d168      	bne.n	801469e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	7d1b      	ldrb	r3, [r3, #20]
 80145d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d062      	beq.n	801469e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	7d1b      	ldrb	r3, [r3, #20]
 80145dc:	b25b      	sxtb	r3, r3
 80145de:	2b00      	cmp	r3, #0
 80145e0:	da15      	bge.n	801460e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	7858      	ldrb	r0, [r3, #1]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6a1a      	ldr	r2, [r3, #32]
 80145f0:	2301      	movs	r3, #1
 80145f2:	f7fd fe45 	bl	8012280 <disk_write>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d001      	beq.n	8014600 <f_sync+0x54>
 80145fc:	2301      	movs	r3, #1
 80145fe:	e04f      	b.n	80146a0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	7d1b      	ldrb	r3, [r3, #20]
 8014604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014608:	b2da      	uxtb	r2, r3
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801460e:	f7fd fd0f 	bl	8012030 <get_fattime>
 8014612:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014614:	68ba      	ldr	r2, [r7, #8]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801461a:	4619      	mov	r1, r3
 801461c:	4610      	mov	r0, r2
 801461e:	f7fe f91d 	bl	801285c <move_window>
 8014622:	4603      	mov	r3, r0
 8014624:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014626:	7dfb      	ldrb	r3, [r7, #23]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d138      	bne.n	801469e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014630:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	330b      	adds	r3, #11
 8014636:	781a      	ldrb	r2, [r3, #0]
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	330b      	adds	r3, #11
 801463c:	f042 0220 	orr.w	r2, r2, #32
 8014640:	b2d2      	uxtb	r2, r2
 8014642:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	6818      	ldr	r0, [r3, #0]
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	689b      	ldr	r3, [r3, #8]
 801464c:	461a      	mov	r2, r3
 801464e:	68f9      	ldr	r1, [r7, #12]
 8014650:	f7fe fe2a 	bl	80132a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f103 021c 	add.w	r2, r3, #28
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	4619      	mov	r1, r3
 8014660:	4610      	mov	r0, r2
 8014662:	f7fd fea1 	bl	80123a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	3316      	adds	r3, #22
 801466a:	6939      	ldr	r1, [r7, #16]
 801466c:	4618      	mov	r0, r3
 801466e:	f7fd fe9b 	bl	80123a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	3312      	adds	r3, #18
 8014676:	2100      	movs	r1, #0
 8014678:	4618      	mov	r0, r3
 801467a:	f7fd fe7a 	bl	8012372 <st_word>
					fs->wflag = 1;
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	2201      	movs	r2, #1
 8014682:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	4618      	mov	r0, r3
 8014688:	f7fe f916 	bl	80128b8 <sync_fs>
 801468c:	4603      	mov	r3, r0
 801468e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	7d1b      	ldrb	r3, [r3, #20]
 8014694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014698:	b2da      	uxtb	r2, r3
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3718      	adds	r7, #24
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f7ff ff7b 	bl	80145ac <f_sync>
 80146b6:	4603      	mov	r3, r0
 80146b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80146ba:	7bfb      	ldrb	r3, [r7, #15]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d118      	bne.n	80146f2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f107 0208 	add.w	r2, r7, #8
 80146c6:	4611      	mov	r1, r2
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff fa81 	bl	8013bd0 <validate>
 80146ce:	4603      	mov	r3, r0
 80146d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80146d2:	7bfb      	ldrb	r3, [r7, #15]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d10c      	bne.n	80146f2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fe f819 	bl	8012714 <dec_lock>
 80146e2:	4603      	mov	r3, r0
 80146e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80146e6:	7bfb      	ldrb	r3, [r7, #15]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d102      	bne.n	80146f2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2200      	movs	r2, #0
 80146f0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80146f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3710      	adds	r7, #16
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b090      	sub	sp, #64	; 0x40
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f107 0208 	add.w	r2, r7, #8
 801470c:	4611      	mov	r1, r2
 801470e:	4618      	mov	r0, r3
 8014710:	f7ff fa5e 	bl	8013bd0 <validate>
 8014714:	4603      	mov	r3, r0
 8014716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801471a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801471e:	2b00      	cmp	r3, #0
 8014720:	d103      	bne.n	801472a <f_lseek+0x2e>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	7d5b      	ldrb	r3, [r3, #21]
 8014726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801472a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801472e:	2b00      	cmp	r3, #0
 8014730:	d002      	beq.n	8014738 <f_lseek+0x3c>
 8014732:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014736:	e1e6      	b.n	8014b06 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473c:	2b00      	cmp	r3, #0
 801473e:	f000 80d1 	beq.w	80148e4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014748:	d15a      	bne.n	8014800 <f_lseek+0x104>
			tbl = fp->cltbl;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801474e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014752:	1d1a      	adds	r2, r3, #4
 8014754:	627a      	str	r2, [r7, #36]	; 0x24
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	617b      	str	r3, [r7, #20]
 801475a:	2302      	movs	r3, #2
 801475c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	689b      	ldr	r3, [r3, #8]
 8014762:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014766:	2b00      	cmp	r3, #0
 8014768:	d03a      	beq.n	80147e0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801476c:	613b      	str	r3, [r7, #16]
 801476e:	2300      	movs	r3, #0
 8014770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014774:	3302      	adds	r3, #2
 8014776:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801477a:	60fb      	str	r3, [r7, #12]
 801477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477e:	3301      	adds	r3, #1
 8014780:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014786:	4618      	mov	r0, r3
 8014788:	f7fe f923 	bl	80129d2 <get_fat>
 801478c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014790:	2b01      	cmp	r3, #1
 8014792:	d804      	bhi.n	801479e <f_lseek+0xa2>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2202      	movs	r2, #2
 8014798:	755a      	strb	r2, [r3, #21]
 801479a:	2302      	movs	r3, #2
 801479c:	e1b3      	b.n	8014b06 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a4:	d104      	bne.n	80147b0 <f_lseek+0xb4>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2201      	movs	r2, #1
 80147aa:	755a      	strb	r2, [r3, #21]
 80147ac:	2301      	movs	r3, #1
 80147ae:	e1aa      	b.n	8014b06 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	3301      	adds	r3, #1
 80147b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d0de      	beq.n	8014778 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80147ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d809      	bhi.n	80147d6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	1d1a      	adds	r2, r3, #4
 80147c6:	627a      	str	r2, [r7, #36]	; 0x24
 80147c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147ca:	601a      	str	r2, [r3, #0]
 80147cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ce:	1d1a      	adds	r2, r3, #4
 80147d0:	627a      	str	r2, [r7, #36]	; 0x24
 80147d2:	693a      	ldr	r2, [r7, #16]
 80147d4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	695b      	ldr	r3, [r3, #20]
 80147da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147dc:	429a      	cmp	r2, r3
 80147de:	d3c4      	bcc.n	801476a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147e6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80147e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d803      	bhi.n	80147f8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80147f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f2:	2200      	movs	r2, #0
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	e184      	b.n	8014b02 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80147f8:	2311      	movs	r3, #17
 80147fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80147fe:	e180      	b.n	8014b02 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	683a      	ldr	r2, [r7, #0]
 8014806:	429a      	cmp	r2, r3
 8014808:	d902      	bls.n	8014810 <f_lseek+0x114>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	68db      	ldr	r3, [r3, #12]
 801480e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	683a      	ldr	r2, [r7, #0]
 8014814:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	f000 8172 	beq.w	8014b02 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	3b01      	subs	r3, #1
 8014822:	4619      	mov	r1, r3
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7fe fb65 	bl	8012ef4 <clmt_clust>
 801482a:	4602      	mov	r2, r0
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	69db      	ldr	r3, [r3, #28]
 8014836:	4619      	mov	r1, r3
 8014838:	4610      	mov	r0, r2
 801483a:	f7fe f8ab 	bl	8012994 <clust2sect>
 801483e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014840:	69bb      	ldr	r3, [r7, #24]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d104      	bne.n	8014850 <f_lseek+0x154>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2202      	movs	r2, #2
 801484a:	755a      	strb	r2, [r3, #21]
 801484c:	2302      	movs	r3, #2
 801484e:	e15a      	b.n	8014b06 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	3b01      	subs	r3, #1
 8014854:	0a5b      	lsrs	r3, r3, #9
 8014856:	68ba      	ldr	r2, [r7, #8]
 8014858:	8952      	ldrh	r2, [r2, #10]
 801485a:	3a01      	subs	r2, #1
 801485c:	4013      	ands	r3, r2
 801485e:	69ba      	ldr	r2, [r7, #24]
 8014860:	4413      	add	r3, r2
 8014862:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	699b      	ldr	r3, [r3, #24]
 8014868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801486c:	2b00      	cmp	r3, #0
 801486e:	f000 8148 	beq.w	8014b02 <f_lseek+0x406>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6a1b      	ldr	r3, [r3, #32]
 8014876:	69ba      	ldr	r2, [r7, #24]
 8014878:	429a      	cmp	r2, r3
 801487a:	f000 8142 	beq.w	8014b02 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	7d1b      	ldrb	r3, [r3, #20]
 8014882:	b25b      	sxtb	r3, r3
 8014884:	2b00      	cmp	r3, #0
 8014886:	da18      	bge.n	80148ba <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	7858      	ldrb	r0, [r3, #1]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6a1a      	ldr	r2, [r3, #32]
 8014896:	2301      	movs	r3, #1
 8014898:	f7fd fcf2 	bl	8012280 <disk_write>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d004      	beq.n	80148ac <f_lseek+0x1b0>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2201      	movs	r2, #1
 80148a6:	755a      	strb	r2, [r3, #21]
 80148a8:	2301      	movs	r3, #1
 80148aa:	e12c      	b.n	8014b06 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	7d1b      	ldrb	r3, [r3, #20]
 80148b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148b4:	b2da      	uxtb	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	7858      	ldrb	r0, [r3, #1]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148c4:	2301      	movs	r3, #1
 80148c6:	69ba      	ldr	r2, [r7, #24]
 80148c8:	f7fd fcba 	bl	8012240 <disk_read>
 80148cc:	4603      	mov	r3, r0
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d004      	beq.n	80148dc <f_lseek+0x1e0>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2201      	movs	r2, #1
 80148d6:	755a      	strb	r2, [r3, #21]
 80148d8:	2301      	movs	r3, #1
 80148da:	e114      	b.n	8014b06 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	69ba      	ldr	r2, [r7, #24]
 80148e0:	621a      	str	r2, [r3, #32]
 80148e2:	e10e      	b.n	8014b02 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	683a      	ldr	r2, [r7, #0]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d908      	bls.n	8014900 <f_lseek+0x204>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	7d1b      	ldrb	r3, [r3, #20]
 80148f2:	f003 0302 	and.w	r3, r3, #2
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d102      	bne.n	8014900 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	68db      	ldr	r3, [r3, #12]
 80148fe:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	699b      	ldr	r3, [r3, #24]
 8014904:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	637b      	str	r3, [r7, #52]	; 0x34
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801490e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	f000 80a7 	beq.w	8014a66 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	895b      	ldrh	r3, [r3, #10]
 801491c:	025b      	lsls	r3, r3, #9
 801491e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014920:	6a3b      	ldr	r3, [r7, #32]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d01b      	beq.n	801495e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	1e5a      	subs	r2, r3, #1
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014930:	6a3b      	ldr	r3, [r7, #32]
 8014932:	1e59      	subs	r1, r3, #1
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801493a:	429a      	cmp	r2, r3
 801493c:	d30f      	bcc.n	801495e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801493e:	6a3b      	ldr	r3, [r7, #32]
 8014940:	1e5a      	subs	r2, r3, #1
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	425b      	negs	r3, r3
 8014946:	401a      	ands	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	699b      	ldr	r3, [r3, #24]
 8014950:	683a      	ldr	r2, [r7, #0]
 8014952:	1ad3      	subs	r3, r2, r3
 8014954:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	69db      	ldr	r3, [r3, #28]
 801495a:	63bb      	str	r3, [r7, #56]	; 0x38
 801495c:	e022      	b.n	80149a4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	689b      	ldr	r3, [r3, #8]
 8014962:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014966:	2b00      	cmp	r3, #0
 8014968:	d119      	bne.n	801499e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2100      	movs	r1, #0
 801496e:	4618      	mov	r0, r3
 8014970:	f7fe fa28 	bl	8012dc4 <create_chain>
 8014974:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014978:	2b01      	cmp	r3, #1
 801497a:	d104      	bne.n	8014986 <f_lseek+0x28a>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2202      	movs	r2, #2
 8014980:	755a      	strb	r2, [r3, #21]
 8014982:	2302      	movs	r3, #2
 8014984:	e0bf      	b.n	8014b06 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801498c:	d104      	bne.n	8014998 <f_lseek+0x29c>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2201      	movs	r2, #1
 8014992:	755a      	strb	r2, [r3, #21]
 8014994:	2301      	movs	r3, #1
 8014996:	e0b6      	b.n	8014b06 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801499c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149a2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80149a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d05d      	beq.n	8014a66 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80149aa:	e03a      	b.n	8014a22 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80149ac:	683a      	ldr	r2, [r7, #0]
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	1ad3      	subs	r3, r2, r3
 80149b2:	603b      	str	r3, [r7, #0]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	699a      	ldr	r2, [r3, #24]
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	441a      	add	r2, r3
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	7d1b      	ldrb	r3, [r3, #20]
 80149c4:	f003 0302 	and.w	r3, r3, #2
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d00b      	beq.n	80149e4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fe f9f7 	bl	8012dc4 <create_chain>
 80149d6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80149d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d108      	bne.n	80149f0 <f_lseek+0x2f4>
							ofs = 0; break;
 80149de:	2300      	movs	r3, #0
 80149e0:	603b      	str	r3, [r7, #0]
 80149e2:	e022      	b.n	8014a2a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fd fff2 	bl	80129d2 <get_fat>
 80149ee:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80149f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149f6:	d104      	bne.n	8014a02 <f_lseek+0x306>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2201      	movs	r2, #1
 80149fc:	755a      	strb	r2, [r3, #21]
 80149fe:	2301      	movs	r3, #1
 8014a00:	e081      	b.n	8014b06 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d904      	bls.n	8014a12 <f_lseek+0x316>
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	695b      	ldr	r3, [r3, #20]
 8014a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d304      	bcc.n	8014a1c <f_lseek+0x320>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2202      	movs	r2, #2
 8014a16:	755a      	strb	r2, [r3, #21]
 8014a18:	2302      	movs	r3, #2
 8014a1a:	e074      	b.n	8014b06 <f_lseek+0x40a>
					fp->clust = clst;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a20:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014a22:	683a      	ldr	r2, [r7, #0]
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d8c0      	bhi.n	80149ac <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	699a      	ldr	r2, [r3, #24]
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	441a      	add	r2, r3
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d012      	beq.n	8014a66 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fd ffa5 	bl	8012994 <clust2sect>
 8014a4a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d104      	bne.n	8014a5c <f_lseek+0x360>
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2202      	movs	r2, #2
 8014a56:	755a      	strb	r2, [r3, #21]
 8014a58:	2302      	movs	r3, #2
 8014a5a:	e054      	b.n	8014b06 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	0a5b      	lsrs	r3, r3, #9
 8014a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a62:	4413      	add	r3, r2
 8014a64:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	699a      	ldr	r2, [r3, #24]
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	68db      	ldr	r3, [r3, #12]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d90a      	bls.n	8014a88 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	699a      	ldr	r2, [r3, #24]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	7d1b      	ldrb	r3, [r3, #20]
 8014a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a82:	b2da      	uxtb	r2, r3
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	699b      	ldr	r3, [r3, #24]
 8014a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d036      	beq.n	8014b02 <f_lseek+0x406>
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6a1b      	ldr	r3, [r3, #32]
 8014a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d031      	beq.n	8014b02 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	7d1b      	ldrb	r3, [r3, #20]
 8014aa2:	b25b      	sxtb	r3, r3
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	da18      	bge.n	8014ada <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	7858      	ldrb	r0, [r3, #1]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	6a1a      	ldr	r2, [r3, #32]
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	f7fd fbe2 	bl	8012280 <disk_write>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d004      	beq.n	8014acc <f_lseek+0x3d0>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2201      	movs	r2, #1
 8014ac6:	755a      	strb	r2, [r3, #21]
 8014ac8:	2301      	movs	r3, #1
 8014aca:	e01c      	b.n	8014b06 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	7d1b      	ldrb	r3, [r3, #20]
 8014ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ad4:	b2da      	uxtb	r2, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	7858      	ldrb	r0, [r3, #1]
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ae8:	f7fd fbaa 	bl	8012240 <disk_read>
 8014aec:	4603      	mov	r3, r0
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d004      	beq.n	8014afc <f_lseek+0x400>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2201      	movs	r2, #1
 8014af6:	755a      	strb	r2, [r3, #21]
 8014af8:	2301      	movs	r3, #1
 8014afa:	e004      	b.n	8014b06 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b00:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014b02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3740      	adds	r7, #64	; 0x40
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
	...

08014b10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b087      	sub	sp, #28
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	4613      	mov	r3, r2
 8014b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014b1e:	2301      	movs	r3, #1
 8014b20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014b22:	2300      	movs	r3, #0
 8014b24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014b26:	4b1f      	ldr	r3, [pc, #124]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b28:	7a5b      	ldrb	r3, [r3, #9]
 8014b2a:	b2db      	uxtb	r3, r3
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d131      	bne.n	8014b94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014b30:	4b1c      	ldr	r3, [pc, #112]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b32:	7a5b      	ldrb	r3, [r3, #9]
 8014b34:	b2db      	uxtb	r3, r3
 8014b36:	461a      	mov	r2, r3
 8014b38:	4b1a      	ldr	r3, [pc, #104]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014b3e:	4b19      	ldr	r3, [pc, #100]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b40:	7a5b      	ldrb	r3, [r3, #9]
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	4a17      	ldr	r2, [pc, #92]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b46:	009b      	lsls	r3, r3, #2
 8014b48:	4413      	add	r3, r2
 8014b4a:	68fa      	ldr	r2, [r7, #12]
 8014b4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014b4e:	4b15      	ldr	r3, [pc, #84]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b50:	7a5b      	ldrb	r3, [r3, #9]
 8014b52:	b2db      	uxtb	r3, r3
 8014b54:	461a      	mov	r2, r3
 8014b56:	4b13      	ldr	r3, [pc, #76]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b58:	4413      	add	r3, r2
 8014b5a:	79fa      	ldrb	r2, [r7, #7]
 8014b5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014b5e:	4b11      	ldr	r3, [pc, #68]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b60:	7a5b      	ldrb	r3, [r3, #9]
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	1c5a      	adds	r2, r3, #1
 8014b66:	b2d1      	uxtb	r1, r2
 8014b68:	4a0e      	ldr	r2, [pc, #56]	; (8014ba4 <FATFS_LinkDriverEx+0x94>)
 8014b6a:	7251      	strb	r1, [r2, #9]
 8014b6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014b6e:	7dbb      	ldrb	r3, [r7, #22]
 8014b70:	3330      	adds	r3, #48	; 0x30
 8014b72:	b2da      	uxtb	r2, r3
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	223a      	movs	r2, #58	; 0x3a
 8014b7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	3302      	adds	r3, #2
 8014b84:	222f      	movs	r2, #47	; 0x2f
 8014b86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	3303      	adds	r3, #3
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014b90:	2300      	movs	r3, #0
 8014b92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	371c      	adds	r7, #28
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop
 8014ba4:	20000908 	.word	0x20000908

08014ba8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	6839      	ldr	r1, [r7, #0]
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f7ff ffaa 	bl	8014b10 <FATFS_LinkDriverEx>
 8014bbc:	4603      	mov	r3, r0
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3708      	adds	r7, #8
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}

08014bc6 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014bc6:	b580      	push	{r7, lr}
 8014bc8:	b086      	sub	sp, #24
 8014bca:	af02      	add	r7, sp, #8
 8014bcc:	60f8      	str	r0, [r7, #12]
 8014bce:	4608      	mov	r0, r1
 8014bd0:	4611      	mov	r1, r2
 8014bd2:	461a      	mov	r2, r3
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	817b      	strh	r3, [r7, #10]
 8014bd8:	460b      	mov	r3, r1
 8014bda:	813b      	strh	r3, [r7, #8]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014be0:	897a      	ldrh	r2, [r7, #10]
 8014be2:	88fb      	ldrh	r3, [r7, #6]
 8014be4:	4413      	add	r3, r2
 8014be6:	b298      	uxth	r0, r3
 8014be8:	893a      	ldrh	r2, [r7, #8]
 8014bea:	8b3b      	ldrh	r3, [r7, #24]
 8014bec:	4413      	add	r3, r2
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	893a      	ldrh	r2, [r7, #8]
 8014bf2:	8979      	ldrh	r1, [r7, #10]
 8014bf4:	9300      	str	r3, [sp, #0]
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f001 f8a1 	bl	8015d40 <u8g2_IsIntersection>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d012      	beq.n	8014c2a <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8014c04:	e00d      	b.n	8014c22 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c06:	88fb      	ldrh	r3, [r7, #6]
 8014c08:	893a      	ldrh	r2, [r7, #8]
 8014c0a:	8979      	ldrh	r1, [r7, #10]
 8014c0c:	2000      	movs	r0, #0
 8014c0e:	9000      	str	r0, [sp, #0]
 8014c10:	68f8      	ldr	r0, [r7, #12]
 8014c12:	f000 ffa4 	bl	8015b5e <u8g2_DrawHVLine>
    y++;    
 8014c16:	893b      	ldrh	r3, [r7, #8]
 8014c18:	3301      	adds	r3, #1
 8014c1a:	813b      	strh	r3, [r7, #8]
    h--;
 8014c1c:	8b3b      	ldrh	r3, [r7, #24]
 8014c1e:	3b01      	subs	r3, #1
 8014c20:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8014c22:	8b3b      	ldrh	r3, [r7, #24]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d1ee      	bne.n	8014c06 <u8g2_DrawBox+0x40>
 8014c28:	e000      	b.n	8014c2c <u8g2_DrawBox+0x66>
    return;
 8014c2a:	bf00      	nop
  }
}
 8014c2c:	3710      	adds	r7, #16
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}

08014c32 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b088      	sub	sp, #32
 8014c36:	af02      	add	r7, sp, #8
 8014c38:	60f8      	str	r0, [r7, #12]
 8014c3a:	4608      	mov	r0, r1
 8014c3c:	4611      	mov	r1, r2
 8014c3e:	461a      	mov	r2, r3
 8014c40:	4603      	mov	r3, r0
 8014c42:	817b      	strh	r3, [r7, #10]
 8014c44:	460b      	mov	r3, r1
 8014c46:	813b      	strh	r3, [r7, #8]
 8014c48:	4613      	mov	r3, r2
 8014c4a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8014c4c:	897b      	ldrh	r3, [r7, #10]
 8014c4e:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c50:	897a      	ldrh	r2, [r7, #10]
 8014c52:	88fb      	ldrh	r3, [r7, #6]
 8014c54:	4413      	add	r3, r2
 8014c56:	b298      	uxth	r0, r3
 8014c58:	893a      	ldrh	r2, [r7, #8]
 8014c5a:	8c3b      	ldrh	r3, [r7, #32]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	893a      	ldrh	r2, [r7, #8]
 8014c62:	8979      	ldrh	r1, [r7, #10]
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	4603      	mov	r3, r0
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f001 f869 	bl	8015d40 <u8g2_IsIntersection>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d037      	beq.n	8014ce4 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c74:	88fb      	ldrh	r3, [r7, #6]
 8014c76:	893a      	ldrh	r2, [r7, #8]
 8014c78:	8979      	ldrh	r1, [r7, #10]
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	9000      	str	r0, [sp, #0]
 8014c7e:	68f8      	ldr	r0, [r7, #12]
 8014c80:	f000 ff6d 	bl	8015b5e <u8g2_DrawHVLine>
  if (h >= 2) {
 8014c84:	8c3b      	ldrh	r3, [r7, #32]
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d92d      	bls.n	8014ce6 <u8g2_DrawFrame+0xb4>
    h-=2;
 8014c8a:	8c3b      	ldrh	r3, [r7, #32]
 8014c8c:	3b02      	subs	r3, #2
 8014c8e:	843b      	strh	r3, [r7, #32]
    y++;
 8014c90:	893b      	ldrh	r3, [r7, #8]
 8014c92:	3301      	adds	r3, #1
 8014c94:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8014c96:	8c3b      	ldrh	r3, [r7, #32]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d01a      	beq.n	8014cd2 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014c9c:	8c3b      	ldrh	r3, [r7, #32]
 8014c9e:	893a      	ldrh	r2, [r7, #8]
 8014ca0:	8979      	ldrh	r1, [r7, #10]
 8014ca2:	2001      	movs	r0, #1
 8014ca4:	9000      	str	r0, [sp, #0]
 8014ca6:	68f8      	ldr	r0, [r7, #12]
 8014ca8:	f000 ff59 	bl	8015b5e <u8g2_DrawHVLine>
      x+=w;
 8014cac:	897a      	ldrh	r2, [r7, #10]
 8014cae:	88fb      	ldrh	r3, [r7, #6]
 8014cb0:	4413      	add	r3, r2
 8014cb2:	817b      	strh	r3, [r7, #10]
      x--;
 8014cb4:	897b      	ldrh	r3, [r7, #10]
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014cba:	8c3b      	ldrh	r3, [r7, #32]
 8014cbc:	893a      	ldrh	r2, [r7, #8]
 8014cbe:	8979      	ldrh	r1, [r7, #10]
 8014cc0:	2001      	movs	r0, #1
 8014cc2:	9000      	str	r0, [sp, #0]
 8014cc4:	68f8      	ldr	r0, [r7, #12]
 8014cc6:	f000 ff4a 	bl	8015b5e <u8g2_DrawHVLine>
      y+=h;
 8014cca:	893a      	ldrh	r2, [r7, #8]
 8014ccc:	8c3b      	ldrh	r3, [r7, #32]
 8014cce:	4413      	add	r3, r2
 8014cd0:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8014cd2:	88fb      	ldrh	r3, [r7, #6]
 8014cd4:	893a      	ldrh	r2, [r7, #8]
 8014cd6:	8af9      	ldrh	r1, [r7, #22]
 8014cd8:	2000      	movs	r0, #0
 8014cda:	9000      	str	r0, [sp, #0]
 8014cdc:	68f8      	ldr	r0, [r7, #12]
 8014cde:	f000 ff3e 	bl	8015b5e <u8g2_DrawHVLine>
 8014ce2:	e000      	b.n	8014ce6 <u8g2_DrawFrame+0xb4>
    return;
 8014ce4:	bf00      	nop
  }
}
 8014ce6:	3718      	adds	r7, #24
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}

08014cec <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	7c1b      	ldrb	r3, [r3, #16]
 8014cfa:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d02:	461a      	mov	r2, r3
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	fb02 f303 	mul.w	r3, r2, r3
 8014d0a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	2100      	movs	r1, #0
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f008 fa98 	bl	801d250 <memset>
}
 8014d20:	bf00      	nop
 8014d22:	3710      	adds	r7, #16
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b086      	sub	sp, #24
 8014d2c:	af02      	add	r7, sp, #8
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	460b      	mov	r3, r1
 8014d32:	70fb      	strb	r3, [r7, #3]
 8014d34:	4613      	mov	r3, r2
 8014d36:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	7c1b      	ldrb	r3, [r3, #16]
 8014d3e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8014d40:	78fb      	ldrb	r3, [r7, #3]
 8014d42:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d48:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	89ba      	ldrh	r2, [r7, #12]
 8014d50:	fb12 f303 	smulbb	r3, r2, r3
 8014d54:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8014d56:	89bb      	ldrh	r3, [r7, #12]
 8014d58:	00db      	lsls	r3, r3, #3
 8014d5a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8014d5c:	89bb      	ldrh	r3, [r7, #12]
 8014d5e:	68ba      	ldr	r2, [r7, #8]
 8014d60:	4413      	add	r3, r2
 8014d62:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8014d64:	7bf9      	ldrb	r1, [r7, #15]
 8014d66:	78ba      	ldrb	r2, [r7, #2]
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	2100      	movs	r1, #0
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f001 fd06 	bl	8016782 <u8x8_DrawTile>
}
 8014d76:	bf00      	nop
 8014d78:	3710      	adds	r7, #16
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}

08014d7e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b084      	sub	sp, #16
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8014d86:	2300      	movs	r3, #0
 8014d88:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d90:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014d98:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	7c5b      	ldrb	r3, [r3, #17]
 8014da0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8014da2:	7bba      	ldrb	r2, [r7, #14]
 8014da4:	7bfb      	ldrb	r3, [r7, #15]
 8014da6:	4619      	mov	r1, r3
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f7ff ffbd 	bl	8014d28 <u8g2_send_tile_row>
    src_row++;
 8014dae:	7bfb      	ldrb	r3, [r7, #15]
 8014db0:	3301      	adds	r3, #1
 8014db2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8014db4:	7bbb      	ldrb	r3, [r7, #14]
 8014db6:	3301      	adds	r3, #1
 8014db8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8014dba:	7bfa      	ldrb	r2, [r7, #15]
 8014dbc:	7b7b      	ldrb	r3, [r7, #13]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d203      	bcs.n	8014dca <u8g2_send_buffer+0x4c>
 8014dc2:	7bba      	ldrb	r2, [r7, #14]
 8014dc4:	7b3b      	ldrb	r3, [r7, #12]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d3eb      	bcc.n	8014da2 <u8g2_send_buffer+0x24>
}
 8014dca:	bf00      	nop
 8014dcc:	3710      	adds	r7, #16
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}

08014dd2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8014dd2:	b580      	push	{r7, lr}
 8014dd4:	b082      	sub	sp, #8
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7ff ffcf 	bl	8014d7e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f001 fd1f 	bl	8016824 <u8x8_RefreshDisplay>
}
 8014de6:	bf00      	nop
 8014de8:	3708      	adds	r7, #8
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}

08014dee <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8014dee:	b580      	push	{r7, lr}
 8014df0:	b082      	sub	sp, #8
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	6078      	str	r0, [r7, #4]
 8014df6:	460b      	mov	r3, r1
 8014df8:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	78fa      	ldrb	r2, [r7, #3]
 8014dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	4798      	blx	r3
}
 8014e16:	bf00      	nop
 8014e18:	3708      	adds	r7, #8
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}

08014e1e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8014e1e:	b580      	push	{r7, lr}
 8014e20:	b082      	sub	sp, #8
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d002      	beq.n	8014e36 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7ff ff5b 	bl	8014cec <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8014e36:	2100      	movs	r1, #0
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff ffd8 	bl	8014dee <u8g2_SetBufferCurrTileRow>
}
 8014e3e:	bf00      	nop
 8014e40:	3708      	adds	r7, #8
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b084      	sub	sp, #16
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f7ff ff95 	bl	8014d7e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e5a:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014e62:	7bfb      	ldrb	r3, [r7, #15]
 8014e64:	4413      	add	r3, r2
 8014e66:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	7c5b      	ldrb	r3, [r3, #17]
 8014e6e:	7bfa      	ldrb	r2, [r7, #15]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d304      	bcc.n	8014e7e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f001 fcd5 	bl	8016824 <u8x8_RefreshDisplay>
    return 0;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e00d      	b.n	8014e9a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d002      	beq.n	8014e8e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f7ff ff2f 	bl	8014cec <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8014e8e:	7bfb      	ldrb	r3, [r7, #15]
 8014e90:	4619      	mov	r1, r3
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7ff ffab 	bl	8014dee <u8g2_SetBufferCurrTileRow>
  return 1;
 8014e98:	2301      	movs	r3, #1
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}

08014ea2 <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8014ea2:	b580      	push	{r7, lr}
 8014ea4:	b082      	sub	sp, #8
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ff ffb7 	bl	8014e1e <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff ffc8 	bl	8014e46 <u8g2_NextPage>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d1f9      	bne.n	8014eb0 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f7ff ff95 	bl	8014dee <u8g2_SetBufferCurrTileRow>
}
 8014ec4:	bf00      	nop
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <u8g2_m_30_20_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_30_20_f(uint8_t *page_cnt)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 20;
  return 0;
  #else
  static uint8_t buf[4800];
  *page_cnt = 20;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2214      	movs	r2, #20
 8014ed8:	701a      	strb	r2, [r3, #0]
  return buf;
 8014eda:	4b03      	ldr	r3, [pc, #12]	; (8014ee8 <u8g2_m_30_20_f+0x1c>)
  #endif
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	370c      	adds	r7, #12
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr
 8014ee8:	20000914 	.word	0x20000914

08014eec <u8g2_Setup_uc1638_240x160_f>:
  buf = u8g2_m_30_20_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1638 f */
void u8g2_Setup_uc1638_240x160_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b088      	sub	sp, #32
 8014ef0:	af02      	add	r7, sp, #8
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
 8014ef8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1638_240x160, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	9300      	str	r3, [sp, #0]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	4a0b      	ldr	r2, [pc, #44]	; (8014f30 <u8g2_Setup_uc1638_240x160_f+0x44>)
 8014f02:	490c      	ldr	r1, [pc, #48]	; (8014f34 <u8g2_Setup_uc1638_240x160_f+0x48>)
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f001 fced 	bl	80168e4 <u8x8_Setup>
  buf = u8g2_m_30_20_f(&tile_buf_height);
 8014f0a:	f107 0313 	add.w	r3, r7, #19
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7ff ffdc 	bl	8014ecc <u8g2_m_30_20_f>
 8014f14:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8014f16:	7cfa      	ldrb	r2, [r7, #19]
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	4b06      	ldr	r3, [pc, #24]	; (8014f38 <u8g2_Setup_uc1638_240x160_f+0x4c>)
 8014f1e:	6979      	ldr	r1, [r7, #20]
 8014f20:	68f8      	ldr	r0, [r7, #12]
 8014f22:	f000 fff7 	bl	8015f14 <u8g2_SetupBuffer>
}
 8014f26:	bf00      	nop
 8014f28:	3718      	adds	r7, #24
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	0801647d 	.word	0x0801647d
 8014f34:	0801667d 	.word	0x0801667d
 8014f38:	08015d97 	.word	0x08015d97

08014f3c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	460b      	mov	r3, r1
 8014f46:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8014f48:	78fb      	ldrb	r3, [r7, #3]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	781b      	ldrb	r3, [r3, #0]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	370c      	adds	r7, #12
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr

08014f60 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8014f60:	b480      	push	{r7}
 8014f62:	b085      	sub	sp, #20
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	460b      	mov	r3, r1
 8014f6a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8014f6c:	78fb      	ldrb	r3, [r7, #3]
 8014f6e:	687a      	ldr	r2, [r7, #4]
 8014f70:	4413      	add	r3, r2
 8014f72:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	81fb      	strh	r3, [r7, #14]
    font++;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8014f80:	89fb      	ldrh	r3, [r7, #14]
 8014f82:	021b      	lsls	r3, r3, #8
 8014f84:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	781b      	ldrb	r3, [r3, #0]
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	89fb      	ldrh	r3, [r7, #14]
 8014f8e:	4413      	add	r3, r2
 8014f90:	81fb      	strh	r3, [r7, #14]
    return pos;
 8014f92:	89fb      	ldrh	r3, [r7, #14]
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3714      	adds	r7, #20
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9e:	4770      	bx	lr

08014fa0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8014faa:	2100      	movs	r1, #0
 8014fac:	6838      	ldr	r0, [r7, #0]
 8014fae:	f7ff ffc5 	bl	8014f3c <u8g2_font_get_byte>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8014fba:	2101      	movs	r1, #1
 8014fbc:	6838      	ldr	r0, [r7, #0]
 8014fbe:	f7ff ffbd 	bl	8014f3c <u8g2_font_get_byte>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8014fca:	2102      	movs	r1, #2
 8014fcc:	6838      	ldr	r0, [r7, #0]
 8014fce:	f7ff ffb5 	bl	8014f3c <u8g2_font_get_byte>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8014fda:	2103      	movs	r1, #3
 8014fdc:	6838      	ldr	r0, [r7, #0]
 8014fde:	f7ff ffad 	bl	8014f3c <u8g2_font_get_byte>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8014fea:	2104      	movs	r1, #4
 8014fec:	6838      	ldr	r0, [r7, #0]
 8014fee:	f7ff ffa5 	bl	8014f3c <u8g2_font_get_byte>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8014ffa:	2105      	movs	r1, #5
 8014ffc:	6838      	ldr	r0, [r7, #0]
 8014ffe:	f7ff ff9d 	bl	8014f3c <u8g2_font_get_byte>
 8015002:	4603      	mov	r3, r0
 8015004:	461a      	mov	r2, r3
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 801500a:	2106      	movs	r1, #6
 801500c:	6838      	ldr	r0, [r7, #0]
 801500e:	f7ff ff95 	bl	8014f3c <u8g2_font_get_byte>
 8015012:	4603      	mov	r3, r0
 8015014:	461a      	mov	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 801501a:	2107      	movs	r1, #7
 801501c:	6838      	ldr	r0, [r7, #0]
 801501e:	f7ff ff8d 	bl	8014f3c <u8g2_font_get_byte>
 8015022:	4603      	mov	r3, r0
 8015024:	461a      	mov	r2, r3
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 801502a:	2108      	movs	r1, #8
 801502c:	6838      	ldr	r0, [r7, #0]
 801502e:	f7ff ff85 	bl	8014f3c <u8g2_font_get_byte>
 8015032:	4603      	mov	r3, r0
 8015034:	461a      	mov	r2, r3
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 801503a:	2109      	movs	r1, #9
 801503c:	6838      	ldr	r0, [r7, #0]
 801503e:	f7ff ff7d 	bl	8014f3c <u8g2_font_get_byte>
 8015042:	4603      	mov	r3, r0
 8015044:	b25a      	sxtb	r2, r3
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 801504a:	210a      	movs	r1, #10
 801504c:	6838      	ldr	r0, [r7, #0]
 801504e:	f7ff ff75 	bl	8014f3c <u8g2_font_get_byte>
 8015052:	4603      	mov	r3, r0
 8015054:	b25a      	sxtb	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 801505a:	210b      	movs	r1, #11
 801505c:	6838      	ldr	r0, [r7, #0]
 801505e:	f7ff ff6d 	bl	8014f3c <u8g2_font_get_byte>
 8015062:	4603      	mov	r3, r0
 8015064:	b25a      	sxtb	r2, r3
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 801506a:	210c      	movs	r1, #12
 801506c:	6838      	ldr	r0, [r7, #0]
 801506e:	f7ff ff65 	bl	8014f3c <u8g2_font_get_byte>
 8015072:	4603      	mov	r3, r0
 8015074:	b25a      	sxtb	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 801507a:	210d      	movs	r1, #13
 801507c:	6838      	ldr	r0, [r7, #0]
 801507e:	f7ff ff5d 	bl	8014f3c <u8g2_font_get_byte>
 8015082:	4603      	mov	r3, r0
 8015084:	b25a      	sxtb	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 801508a:	210e      	movs	r1, #14
 801508c:	6838      	ldr	r0, [r7, #0]
 801508e:	f7ff ff55 	bl	8014f3c <u8g2_font_get_byte>
 8015092:	4603      	mov	r3, r0
 8015094:	b25a      	sxtb	r2, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 801509a:	210f      	movs	r1, #15
 801509c:	6838      	ldr	r0, [r7, #0]
 801509e:	f7ff ff4d 	bl	8014f3c <u8g2_font_get_byte>
 80150a2:	4603      	mov	r3, r0
 80150a4:	b25a      	sxtb	r2, r3
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80150aa:	2110      	movs	r1, #16
 80150ac:	6838      	ldr	r0, [r7, #0]
 80150ae:	f7ff ff45 	bl	8014f3c <u8g2_font_get_byte>
 80150b2:	4603      	mov	r3, r0
 80150b4:	b25a      	sxtb	r2, r3
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80150ba:	2111      	movs	r1, #17
 80150bc:	6838      	ldr	r0, [r7, #0]
 80150be:	f7ff ff4f 	bl	8014f60 <u8g2_font_get_word>
 80150c2:	4603      	mov	r3, r0
 80150c4:	461a      	mov	r2, r3
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80150ca:	2113      	movs	r1, #19
 80150cc:	6838      	ldr	r0, [r7, #0]
 80150ce:	f7ff ff47 	bl	8014f60 <u8g2_font_get_word>
 80150d2:	4603      	mov	r3, r0
 80150d4:	461a      	mov	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80150da:	2115      	movs	r1, #21
 80150dc:	6838      	ldr	r0, [r7, #0]
 80150de:	f7ff ff3f 	bl	8014f60 <u8g2_font_get_word>
 80150e2:	4603      	mov	r3, r0
 80150e4:	461a      	mov	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	82da      	strh	r2, [r3, #22]
#endif
}
 80150ea:	bf00      	nop
 80150ec:	3708      	adds	r7, #8
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}

080150f2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80150f2:	b480      	push	{r7}
 80150f4:	b085      	sub	sp, #20
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	6078      	str	r0, [r7, #4]
 80150fa:	460b      	mov	r3, r1
 80150fc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	7b1b      	ldrb	r3, [r3, #12]
 8015102:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	781b      	ldrb	r3, [r3, #0]
 801510a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 801510c:	7bfa      	ldrb	r2, [r7, #15]
 801510e:	7b7b      	ldrb	r3, [r7, #13]
 8015110:	fa42 f303 	asr.w	r3, r2, r3
 8015114:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8015116:	7b7b      	ldrb	r3, [r7, #13]
 8015118:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 801511a:	7bba      	ldrb	r2, [r7, #14]
 801511c:	78fb      	ldrb	r3, [r7, #3]
 801511e:	4413      	add	r3, r2
 8015120:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8015122:	7bbb      	ldrb	r3, [r7, #14]
 8015124:	2b07      	cmp	r3, #7
 8015126:	d91a      	bls.n	801515e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8015128:	2308      	movs	r3, #8
 801512a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 801512c:	7b3a      	ldrb	r2, [r7, #12]
 801512e:	7b7b      	ldrb	r3, [r7, #13]
 8015130:	1ad3      	subs	r3, r2, r3
 8015132:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	1c5a      	adds	r2, r3, #1
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	781b      	ldrb	r3, [r3, #0]
 8015144:	461a      	mov	r2, r3
 8015146:	7b3b      	ldrb	r3, [r7, #12]
 8015148:	fa02 f303 	lsl.w	r3, r2, r3
 801514c:	b25a      	sxtb	r2, r3
 801514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015152:	4313      	orrs	r3, r2
 8015154:	b25b      	sxtb	r3, r3
 8015156:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8015158:	7bbb      	ldrb	r3, [r7, #14]
 801515a:	3b08      	subs	r3, #8
 801515c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 801515e:	78fb      	ldrb	r3, [r7, #3]
 8015160:	f04f 32ff 	mov.w	r2, #4294967295
 8015164:	fa02 f303 	lsl.w	r3, r2, r3
 8015168:	b2db      	uxtb	r3, r3
 801516a:	43db      	mvns	r3, r3
 801516c:	b2da      	uxtb	r2, r3
 801516e:	7bfb      	ldrb	r3, [r7, #15]
 8015170:	4013      	ands	r3, r2
 8015172:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	7bba      	ldrb	r2, [r7, #14]
 8015178:	731a      	strb	r2, [r3, #12]
  return val;
 801517a:	7bfb      	ldrb	r3, [r7, #15]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3714      	adds	r7, #20
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	460b      	mov	r3, r1
 8015192:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8015194:	78fb      	ldrb	r3, [r7, #3]
 8015196:	4619      	mov	r1, r3
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f7ff ffaa 	bl	80150f2 <u8g2_font_decode_get_unsigned_bits>
 801519e:	4603      	mov	r3, r0
 80151a0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80151a2:	2301      	movs	r3, #1
 80151a4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80151a6:	78fb      	ldrb	r3, [r7, #3]
 80151a8:	3b01      	subs	r3, #1
 80151aa:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80151ac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80151b0:	78fb      	ldrb	r3, [r7, #3]
 80151b2:	fa02 f303 	lsl.w	r3, r2, r3
 80151b6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80151b8:	7bfa      	ldrb	r2, [r7, #15]
 80151ba:	7bbb      	ldrb	r3, [r7, #14]
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	b2db      	uxtb	r3, r3
 80151c0:	73fb      	strb	r3, [r7, #15]
  return v;
 80151c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3710      	adds	r7, #16
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}

080151ce <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80151ce:	b490      	push	{r4, r7}
 80151d0:	b082      	sub	sp, #8
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	4604      	mov	r4, r0
 80151d6:	4608      	mov	r0, r1
 80151d8:	4611      	mov	r1, r2
 80151da:	461a      	mov	r2, r3
 80151dc:	4623      	mov	r3, r4
 80151de:	80fb      	strh	r3, [r7, #6]
 80151e0:	4603      	mov	r3, r0
 80151e2:	717b      	strb	r3, [r7, #5]
 80151e4:	460b      	mov	r3, r1
 80151e6:	713b      	strb	r3, [r7, #4]
 80151e8:	4613      	mov	r3, r2
 80151ea:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80151ec:	78fb      	ldrb	r3, [r7, #3]
 80151ee:	2b02      	cmp	r3, #2
 80151f0:	d014      	beq.n	801521c <u8g2_add_vector_y+0x4e>
 80151f2:	2b02      	cmp	r3, #2
 80151f4:	dc19      	bgt.n	801522a <u8g2_add_vector_y+0x5c>
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d002      	beq.n	8015200 <u8g2_add_vector_y+0x32>
 80151fa:	2b01      	cmp	r3, #1
 80151fc:	d007      	beq.n	801520e <u8g2_add_vector_y+0x40>
 80151fe:	e014      	b.n	801522a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8015200:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015204:	b29a      	uxth	r2, r3
 8015206:	88fb      	ldrh	r3, [r7, #6]
 8015208:	4413      	add	r3, r2
 801520a:	80fb      	strh	r3, [r7, #6]
      break;
 801520c:	e014      	b.n	8015238 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 801520e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015212:	b29a      	uxth	r2, r3
 8015214:	88fb      	ldrh	r3, [r7, #6]
 8015216:	4413      	add	r3, r2
 8015218:	80fb      	strh	r3, [r7, #6]
      break;
 801521a:	e00d      	b.n	8015238 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 801521c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015220:	b29b      	uxth	r3, r3
 8015222:	88fa      	ldrh	r2, [r7, #6]
 8015224:	1ad3      	subs	r3, r2, r3
 8015226:	80fb      	strh	r3, [r7, #6]
      break;
 8015228:	e006      	b.n	8015238 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 801522a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801522e:	b29b      	uxth	r3, r3
 8015230:	88fa      	ldrh	r2, [r7, #6]
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	80fb      	strh	r3, [r7, #6]
      break;      
 8015236:	bf00      	nop
  }
  return dy;
 8015238:	88fb      	ldrh	r3, [r7, #6]
}
 801523a:	4618      	mov	r0, r3
 801523c:	3708      	adds	r7, #8
 801523e:	46bd      	mov	sp, r7
 8015240:	bc90      	pop	{r4, r7}
 8015242:	4770      	bx	lr

08015244 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8015244:	b490      	push	{r4, r7}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	4604      	mov	r4, r0
 801524c:	4608      	mov	r0, r1
 801524e:	4611      	mov	r1, r2
 8015250:	461a      	mov	r2, r3
 8015252:	4623      	mov	r3, r4
 8015254:	80fb      	strh	r3, [r7, #6]
 8015256:	4603      	mov	r3, r0
 8015258:	717b      	strb	r3, [r7, #5]
 801525a:	460b      	mov	r3, r1
 801525c:	713b      	strb	r3, [r7, #4]
 801525e:	4613      	mov	r3, r2
 8015260:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8015262:	78fb      	ldrb	r3, [r7, #3]
 8015264:	2b02      	cmp	r3, #2
 8015266:	d014      	beq.n	8015292 <u8g2_add_vector_x+0x4e>
 8015268:	2b02      	cmp	r3, #2
 801526a:	dc19      	bgt.n	80152a0 <u8g2_add_vector_x+0x5c>
 801526c:	2b00      	cmp	r3, #0
 801526e:	d002      	beq.n	8015276 <u8g2_add_vector_x+0x32>
 8015270:	2b01      	cmp	r3, #1
 8015272:	d007      	beq.n	8015284 <u8g2_add_vector_x+0x40>
 8015274:	e014      	b.n	80152a0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8015276:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801527a:	b29a      	uxth	r2, r3
 801527c:	88fb      	ldrh	r3, [r7, #6]
 801527e:	4413      	add	r3, r2
 8015280:	80fb      	strh	r3, [r7, #6]
      break;
 8015282:	e014      	b.n	80152ae <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8015284:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015288:	b29b      	uxth	r3, r3
 801528a:	88fa      	ldrh	r2, [r7, #6]
 801528c:	1ad3      	subs	r3, r2, r3
 801528e:	80fb      	strh	r3, [r7, #6]
      break;
 8015290:	e00d      	b.n	80152ae <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8015292:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015296:	b29b      	uxth	r3, r3
 8015298:	88fa      	ldrh	r2, [r7, #6]
 801529a:	1ad3      	subs	r3, r2, r3
 801529c:	80fb      	strh	r3, [r7, #6]
      break;
 801529e:	e006      	b.n	80152ae <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80152a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80152a4:	b29a      	uxth	r2, r3
 80152a6:	88fb      	ldrh	r3, [r7, #6]
 80152a8:	4413      	add	r3, r2
 80152aa:	80fb      	strh	r3, [r7, #6]
      break;      
 80152ac:	bf00      	nop
  }
  return dx;
 80152ae:	88fb      	ldrh	r3, [r7, #6]
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3708      	adds	r7, #8
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bc90      	pop	{r4, r7}
 80152b8:	4770      	bx	lr

080152ba <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b088      	sub	sp, #32
 80152be:	af02      	add	r7, sp, #8
 80152c0:	6078      	str	r0, [r7, #4]
 80152c2:	460b      	mov	r3, r1
 80152c4:	70fb      	strb	r3, [r7, #3]
 80152c6:	4613      	mov	r3, r2
 80152c8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	3360      	adds	r3, #96	; 0x60
 80152ce:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80152d0:	78fb      	ldrb	r3, [r7, #3]
 80152d2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80152da:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80152e2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80152ea:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80152ec:	7bfa      	ldrb	r2, [r7, #15]
 80152ee:	7d7b      	ldrb	r3, [r7, #21]
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80152f4:	7bfb      	ldrb	r3, [r7, #15]
 80152f6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80152f8:	7dfa      	ldrb	r2, [r7, #23]
 80152fa:	7bfb      	ldrb	r3, [r7, #15]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d201      	bcs.n	8015304 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8015300:	7dfb      	ldrb	r3, [r7, #23]
 8015302:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	889b      	ldrh	r3, [r3, #4]
 8015308:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	88db      	ldrh	r3, [r3, #6]
 801530e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8015310:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8015314:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	7c1b      	ldrb	r3, [r3, #16]
 801531c:	89b8      	ldrh	r0, [r7, #12]
 801531e:	f7ff ff91 	bl	8015244 <u8g2_add_vector_x>
 8015322:	4603      	mov	r3, r0
 8015324:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8015326:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801532a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	7c1b      	ldrb	r3, [r3, #16]
 8015332:	8978      	ldrh	r0, [r7, #10]
 8015334:	f7ff ff4b 	bl	80151ce <u8g2_add_vector_y>
 8015338:	4603      	mov	r3, r0
 801533a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 801533c:	78bb      	ldrb	r3, [r7, #2]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d010      	beq.n	8015364 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	7b9a      	ldrb	r2, [r3, #14]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 801534c:	7dbb      	ldrb	r3, [r7, #22]
 801534e:	b298      	uxth	r0, r3
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	7c1b      	ldrb	r3, [r3, #16]
 8015354:	897a      	ldrh	r2, [r7, #10]
 8015356:	89b9      	ldrh	r1, [r7, #12]
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	4603      	mov	r3, r0
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f000 fbfe 	bl	8015b5e <u8g2_DrawHVLine>
 8015362:	e013      	b.n	801538c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	7b5b      	ldrb	r3, [r3, #13]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d10f      	bne.n	801538c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	7bda      	ldrb	r2, [r3, #15]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8015376:	7dbb      	ldrb	r3, [r7, #22]
 8015378:	b298      	uxth	r0, r3
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	7c1b      	ldrb	r3, [r3, #16]
 801537e:	897a      	ldrh	r2, [r7, #10]
 8015380:	89b9      	ldrh	r1, [r7, #12]
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	4603      	mov	r3, r0
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f000 fbe9 	bl	8015b5e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 801538c:	7dfa      	ldrb	r2, [r7, #23]
 801538e:	7bfb      	ldrb	r3, [r7, #15]
 8015390:	429a      	cmp	r2, r3
 8015392:	d309      	bcc.n	80153a8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8015394:	7dfa      	ldrb	r2, [r7, #23]
 8015396:	7bfb      	ldrb	r3, [r7, #15]
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 801539c:	2300      	movs	r3, #0
 801539e:	757b      	strb	r3, [r7, #21]
    ly++;
 80153a0:	7d3b      	ldrb	r3, [r7, #20]
 80153a2:	3301      	adds	r3, #1
 80153a4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80153a6:	e79d      	b.n	80152e4 <u8g2_font_decode_len+0x2a>
      break;
 80153a8:	bf00      	nop
  }
  lx += cnt;
 80153aa:	7d7a      	ldrb	r2, [r7, #21]
 80153ac:	7dfb      	ldrb	r3, [r7, #23]
 80153ae:	4413      	add	r3, r2
 80153b0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80153b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80153ba:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	725a      	strb	r2, [r3, #9]
  
}
 80153c2:	bf00      	nop
 80153c4:	3718      	adds	r7, #24
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b084      	sub	sp, #16
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	3360      	adds	r3, #96	; 0x60
 80153d8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	683a      	ldr	r2, [r7, #0]
 80153de:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2200      	movs	r2, #0
 80153e4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80153ec:	4619      	mov	r1, r3
 80153ee:	68f8      	ldr	r0, [r7, #12]
 80153f0:	f7ff fe7f 	bl	80150f2 <u8g2_font_decode_get_unsigned_bits>
 80153f4:	4603      	mov	r3, r0
 80153f6:	b25a      	sxtb	r2, r3
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8015402:	4619      	mov	r1, r3
 8015404:	68f8      	ldr	r0, [r7, #12]
 8015406:	f7ff fe74 	bl	80150f2 <u8g2_font_decode_get_unsigned_bits>
 801540a:	4603      	mov	r3, r0
 801540c:	b25a      	sxtb	r2, r3
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	7b9b      	ldrb	r3, [r3, #14]
 8015420:	2b00      	cmp	r3, #0
 8015422:	bf0c      	ite	eq
 8015424:	2301      	moveq	r3, #1
 8015426:	2300      	movne	r3, #0
 8015428:	b2db      	uxtb	r3, r3
 801542a:	461a      	mov	r2, r3
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	73da      	strb	r2, [r3, #15]
}
 8015430:	bf00      	nop
 8015432:	3710      	adds	r7, #16
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b08a      	sub	sp, #40	; 0x28
 801543c:	af02      	add	r7, sp, #8
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	3360      	adds	r3, #96	; 0x60
 8015446:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8015448:	6839      	ldr	r1, [r7, #0]
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f7ff ffbd 	bl	80153ca <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8015456:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801545e:	4619      	mov	r1, r3
 8015460:	6978      	ldr	r0, [r7, #20]
 8015462:	f7ff fe91 	bl	8015188 <u8g2_font_decode_get_signed_bits>
 8015466:	4603      	mov	r3, r0
 8015468:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8015470:	4619      	mov	r1, r3
 8015472:	6978      	ldr	r0, [r7, #20]
 8015474:	f7ff fe88 	bl	8015188 <u8g2_font_decode_get_signed_bits>
 8015478:	4603      	mov	r3, r0
 801547a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015482:	4619      	mov	r1, r3
 8015484:	6978      	ldr	r0, [r7, #20]
 8015486:	f7ff fe7f 	bl	8015188 <u8g2_font_decode_get_signed_bits>
 801548a:	4603      	mov	r3, r0
 801548c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015494:	2b00      	cmp	r3, #0
 8015496:	f340 80d7 	ble.w	8015648 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	8898      	ldrh	r0, [r3, #4]
 801549e:	7cfa      	ldrb	r2, [r7, #19]
 80154a0:	7c7b      	ldrb	r3, [r7, #17]
 80154a2:	4413      	add	r3, r2
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	425b      	negs	r3, r3
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	b25a      	sxtb	r2, r3
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	7c1b      	ldrb	r3, [r3, #16]
 80154b0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80154b4:	f7ff fec6 	bl	8015244 <u8g2_add_vector_x>
 80154b8:	4603      	mov	r3, r0
 80154ba:	461a      	mov	r2, r3
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	88d8      	ldrh	r0, [r3, #6]
 80154c4:	7cfa      	ldrb	r2, [r7, #19]
 80154c6:	7c7b      	ldrb	r3, [r7, #17]
 80154c8:	4413      	add	r3, r2
 80154ca:	b2db      	uxtb	r3, r3
 80154cc:	425b      	negs	r3, r3
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	b25a      	sxtb	r2, r3
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	7c1b      	ldrb	r3, [r3, #16]
 80154d6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80154da:	f7ff fe78 	bl	80151ce <u8g2_add_vector_y>
 80154de:	4603      	mov	r3, r0
 80154e0:	461a      	mov	r2, r3
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	889b      	ldrh	r3, [r3, #4]
 80154ea:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	88db      	ldrh	r3, [r3, #6]
 80154f0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80154f2:	8bfb      	ldrh	r3, [r7, #30]
 80154f4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80154f6:	8b7b      	ldrh	r3, [r7, #26]
 80154f8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	7c1b      	ldrb	r3, [r3, #16]
 80154fe:	2b03      	cmp	r3, #3
 8015500:	d85a      	bhi.n	80155b8 <u8g2_font_decode_glyph+0x180>
 8015502:	a201      	add	r2, pc, #4	; (adr r2, 8015508 <u8g2_font_decode_glyph+0xd0>)
 8015504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015508:	08015519 	.word	0x08015519
 801550c:	08015535 	.word	0x08015535
 8015510:	0801555d 	.word	0x0801555d
 8015514:	08015591 	.word	0x08015591
      {
	case 0:
	    x1 += decode->glyph_width;
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801551e:	b29a      	uxth	r2, r3
 8015520:	8bbb      	ldrh	r3, [r7, #28]
 8015522:	4413      	add	r3, r2
 8015524:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8015526:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801552a:	b29a      	uxth	r2, r3
 801552c:	8b3b      	ldrh	r3, [r7, #24]
 801552e:	4413      	add	r3, r2
 8015530:	833b      	strh	r3, [r7, #24]
	    break;
 8015532:	e041      	b.n	80155b8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8015534:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015538:	b29b      	uxth	r3, r3
 801553a:	8bfa      	ldrh	r2, [r7, #30]
 801553c:	1ad3      	subs	r3, r2, r3
 801553e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015540:	8bfb      	ldrh	r3, [r7, #30]
 8015542:	3301      	adds	r3, #1
 8015544:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8015546:	8bbb      	ldrh	r3, [r7, #28]
 8015548:	3301      	adds	r3, #1
 801554a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015552:	b29a      	uxth	r2, r3
 8015554:	8b3b      	ldrh	r3, [r7, #24]
 8015556:	4413      	add	r3, r2
 8015558:	833b      	strh	r3, [r7, #24]
	    break;
 801555a:	e02d      	b.n	80155b8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015562:	b29b      	uxth	r3, r3
 8015564:	8bfa      	ldrh	r2, [r7, #30]
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801556a:	8bfb      	ldrh	r3, [r7, #30]
 801556c:	3301      	adds	r3, #1
 801556e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8015570:	8bbb      	ldrh	r3, [r7, #28]
 8015572:	3301      	adds	r3, #1
 8015574:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8015576:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801557a:	b29b      	uxth	r3, r3
 801557c:	8b7a      	ldrh	r2, [r7, #26]
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015582:	8b7b      	ldrh	r3, [r7, #26]
 8015584:	3301      	adds	r3, #1
 8015586:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015588:	8b3b      	ldrh	r3, [r7, #24]
 801558a:	3301      	adds	r3, #1
 801558c:	833b      	strh	r3, [r7, #24]
	    break;	  
 801558e:	e013      	b.n	80155b8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8015590:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015594:	b29a      	uxth	r2, r3
 8015596:	8bbb      	ldrh	r3, [r7, #28]
 8015598:	4413      	add	r3, r2
 801559a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	8b7a      	ldrh	r2, [r7, #26]
 80155a6:	1ad3      	subs	r3, r2, r3
 80155a8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155aa:	8b7b      	ldrh	r3, [r7, #26]
 80155ac:	3301      	adds	r3, #1
 80155ae:	837b      	strh	r3, [r7, #26]
	    y1++;
 80155b0:	8b3b      	ldrh	r3, [r7, #24]
 80155b2:	3301      	adds	r3, #1
 80155b4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80155b6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80155b8:	8bb8      	ldrh	r0, [r7, #28]
 80155ba:	8b7a      	ldrh	r2, [r7, #26]
 80155bc:	8bf9      	ldrh	r1, [r7, #30]
 80155be:	8b3b      	ldrh	r3, [r7, #24]
 80155c0:	9300      	str	r3, [sp, #0]
 80155c2:	4603      	mov	r3, r0
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f000 fbbb 	bl	8015d40 <u8g2_IsIntersection>
 80155ca:	4603      	mov	r3, r0
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d102      	bne.n	80155d6 <u8g2_font_decode_glyph+0x19e>
	return d;
 80155d0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80155d4:	e03a      	b.n	801564c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	2200      	movs	r2, #0
 80155da:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	2200      	movs	r2, #0
 80155e0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80155e8:	4619      	mov	r1, r3
 80155ea:	6978      	ldr	r0, [r7, #20]
 80155ec:	f7ff fd81 	bl	80150f2 <u8g2_font_decode_get_unsigned_bits>
 80155f0:	4603      	mov	r3, r0
 80155f2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80155fa:	4619      	mov	r1, r3
 80155fc:	6978      	ldr	r0, [r7, #20]
 80155fe:	f7ff fd78 	bl	80150f2 <u8g2_font_decode_get_unsigned_bits>
 8015602:	4603      	mov	r3, r0
 8015604:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8015606:	7bfb      	ldrb	r3, [r7, #15]
 8015608:	2200      	movs	r2, #0
 801560a:	4619      	mov	r1, r3
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f7ff fe54 	bl	80152ba <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8015612:	7bbb      	ldrb	r3, [r7, #14]
 8015614:	2201      	movs	r2, #1
 8015616:	4619      	mov	r1, r3
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f7ff fe4e 	bl	80152ba <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 801561e:	2101      	movs	r1, #1
 8015620:	6978      	ldr	r0, [r7, #20]
 8015622:	f7ff fd66 	bl	80150f2 <u8g2_font_decode_get_unsigned_bits>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d1ec      	bne.n	8015606 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8015632:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015636:	429a      	cmp	r2, r3
 8015638:	dd00      	ble.n	801563c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 801563a:	e7d2      	b.n	80155e2 <u8g2_font_decode_glyph+0x1aa>
	break;
 801563c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	7b9a      	ldrb	r2, [r3, #14]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8015648:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3720      	adds	r7, #32
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	460b      	mov	r3, r1
 801565e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015664:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	3317      	adds	r3, #23
 801566a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 801566c:	887b      	ldrh	r3, [r7, #2]
 801566e:	2bff      	cmp	r3, #255	; 0xff
 8015670:	d82a      	bhi.n	80156c8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8015672:	887b      	ldrh	r3, [r7, #2]
 8015674:	2b60      	cmp	r3, #96	; 0x60
 8015676:	d907      	bls.n	8015688 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801567e:	461a      	mov	r2, r3
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	4413      	add	r3, r2
 8015684:	617b      	str	r3, [r7, #20]
 8015686:	e009      	b.n	801569c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8015688:	887b      	ldrh	r3, [r7, #2]
 801568a:	2b40      	cmp	r3, #64	; 0x40
 801568c:	d906      	bls.n	801569c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8015694:	461a      	mov	r2, r3
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	4413      	add	r3, r2
 801569a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	3301      	adds	r3, #1
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d04e      	beq.n	8015744 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	887a      	ldrh	r2, [r7, #2]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d102      	bne.n	80156b8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	3302      	adds	r3, #2
 80156b6:	e049      	b.n	801574c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	3301      	adds	r3, #1
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	461a      	mov	r2, r3
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	4413      	add	r3, r2
 80156c4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80156c6:	e7e9      	b.n	801569c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80156ce:	461a      	mov	r2, r3
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	4413      	add	r3, r2
 80156d4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80156da:	2100      	movs	r1, #0
 80156dc:	6938      	ldr	r0, [r7, #16]
 80156de:	f7ff fc3f 	bl	8014f60 <u8g2_font_get_word>
 80156e2:	4603      	mov	r3, r0
 80156e4:	461a      	mov	r2, r3
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	4413      	add	r3, r2
 80156ea:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80156ec:	2102      	movs	r1, #2
 80156ee:	6938      	ldr	r0, [r7, #16]
 80156f0:	f7ff fc36 	bl	8014f60 <u8g2_font_get_word>
 80156f4:	4603      	mov	r3, r0
 80156f6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	3304      	adds	r3, #4
 80156fc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80156fe:	89fa      	ldrh	r2, [r7, #14]
 8015700:	887b      	ldrh	r3, [r7, #2]
 8015702:	429a      	cmp	r2, r3
 8015704:	d3e9      	bcc.n	80156da <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 801570c:	89fb      	ldrh	r3, [r7, #14]
 801570e:	021b      	lsls	r3, r3, #8
 8015710:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	3301      	adds	r3, #1
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	b29a      	uxth	r2, r3
 801571a:	89fb      	ldrh	r3, [r7, #14]
 801571c:	4313      	orrs	r3, r2
 801571e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8015720:	89fb      	ldrh	r3, [r7, #14]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d010      	beq.n	8015748 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8015726:	89fa      	ldrh	r2, [r7, #14]
 8015728:	887b      	ldrh	r3, [r7, #2]
 801572a:	429a      	cmp	r2, r3
 801572c:	d102      	bne.n	8015734 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	3303      	adds	r3, #3
 8015732:	e00b      	b.n	801574c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	3302      	adds	r3, #2
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	461a      	mov	r2, r3
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	4413      	add	r3, r2
 8015740:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8015742:	e7e0      	b.n	8015706 <u8g2_font_get_glyph_data+0xb2>
	break;
 8015744:	bf00      	nop
 8015746:	e000      	b.n	801574a <u8g2_font_get_glyph_data+0xf6>
	break;
 8015748:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 801574a:	2300      	movs	r3, #0
}
 801574c:	4618      	mov	r0, r3
 801574e:	3718      	adds	r7, #24
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}

08015754 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b086      	sub	sp, #24
 8015758:	af00      	add	r7, sp, #0
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	4608      	mov	r0, r1
 801575e:	4611      	mov	r1, r2
 8015760:	461a      	mov	r2, r3
 8015762:	4603      	mov	r3, r0
 8015764:	817b      	strh	r3, [r7, #10]
 8015766:	460b      	mov	r3, r1
 8015768:	813b      	strh	r3, [r7, #8]
 801576a:	4613      	mov	r3, r2
 801576c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 801576e:	2300      	movs	r3, #0
 8015770:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	897a      	ldrh	r2, [r7, #10]
 8015776:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	893a      	ldrh	r2, [r7, #8]
 801577e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8015782:	88fb      	ldrh	r3, [r7, #6]
 8015784:	4619      	mov	r1, r3
 8015786:	68f8      	ldr	r0, [r7, #12]
 8015788:	f7ff ff64 	bl	8015654 <u8g2_font_get_glyph_data>
 801578c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d005      	beq.n	80157a0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8015794:	6939      	ldr	r1, [r7, #16]
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	f7ff fe4e 	bl	8015438 <u8g2_font_decode_glyph>
 801579c:	4603      	mov	r3, r0
 801579e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80157a0:	8afb      	ldrh	r3, [r7, #22]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3718      	adds	r7, #24
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
	...

080157ac <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	4608      	mov	r0, r1
 80157b6:	4611      	mov	r1, r2
 80157b8:	461a      	mov	r2, r3
 80157ba:	4603      	mov	r3, r0
 80157bc:	817b      	strh	r3, [r7, #10]
 80157be:	460b      	mov	r3, r1
 80157c0:	813b      	strh	r3, [r7, #8]
 80157c2:	4613      	mov	r3, r2
 80157c4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80157cc:	2b03      	cmp	r3, #3
 80157ce:	d833      	bhi.n	8015838 <u8g2_DrawGlyph+0x8c>
 80157d0:	a201      	add	r2, pc, #4	; (adr r2, 80157d8 <u8g2_DrawGlyph+0x2c>)
 80157d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d6:	bf00      	nop
 80157d8:	080157e9 	.word	0x080157e9
 80157dc:	080157fd 	.word	0x080157fd
 80157e0:	08015811 	.word	0x08015811
 80157e4:	08015825 	.word	0x08015825
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157ec:	68f8      	ldr	r0, [r7, #12]
 80157ee:	4798      	blx	r3
 80157f0:	4603      	mov	r3, r0
 80157f2:	461a      	mov	r2, r3
 80157f4:	893b      	ldrh	r3, [r7, #8]
 80157f6:	4413      	add	r3, r2
 80157f8:	813b      	strh	r3, [r7, #8]
      break;
 80157fa:	e01d      	b.n	8015838 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	4798      	blx	r3
 8015804:	4603      	mov	r3, r0
 8015806:	461a      	mov	r2, r3
 8015808:	897b      	ldrh	r3, [r7, #10]
 801580a:	1a9b      	subs	r3, r3, r2
 801580c:	817b      	strh	r3, [r7, #10]
      break;
 801580e:	e013      	b.n	8015838 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015814:	68f8      	ldr	r0, [r7, #12]
 8015816:	4798      	blx	r3
 8015818:	4603      	mov	r3, r0
 801581a:	461a      	mov	r2, r3
 801581c:	893b      	ldrh	r3, [r7, #8]
 801581e:	1a9b      	subs	r3, r3, r2
 8015820:	813b      	strh	r3, [r7, #8]
      break;
 8015822:	e009      	b.n	8015838 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	4798      	blx	r3
 801582c:	4603      	mov	r3, r0
 801582e:	461a      	mov	r2, r3
 8015830:	897b      	ldrh	r3, [r7, #10]
 8015832:	4413      	add	r3, r2
 8015834:	817b      	strh	r3, [r7, #10]
      break;
 8015836:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8015838:	88fb      	ldrh	r3, [r7, #6]
 801583a:	893a      	ldrh	r2, [r7, #8]
 801583c:	8979      	ldrh	r1, [r7, #10]
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	f7ff ff88 	bl	8015754 <u8g2_font_draw_glyph>
 8015844:	4603      	mov	r3, r0
}
 8015846:	4618      	mov	r0, r3
 8015848:	3710      	adds	r7, #16
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop

08015850 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	607b      	str	r3, [r7, #4]
 801585a:	460b      	mov	r3, r1
 801585c:	817b      	strh	r3, [r7, #10]
 801585e:	4613      	mov	r3, r2
 8015860:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8015862:	68f8      	ldr	r0, [r7, #12]
 8015864:	f000 fc99 	bl	801619a <u8x8_utf8_init>
  sum = 0;
 8015868:	2300      	movs	r3, #0
 801586a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	685b      	ldr	r3, [r3, #4]
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	7812      	ldrb	r2, [r2, #0]
 8015874:	4611      	mov	r1, r2
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	4798      	blx	r3
 801587a:	4603      	mov	r3, r0
 801587c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 801587e:	8abb      	ldrh	r3, [r7, #20]
 8015880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015884:	4293      	cmp	r3, r2
 8015886:	d038      	beq.n	80158fa <u8g2_draw_string+0xaa>
      break;
    str++;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	3301      	adds	r3, #1
 801588c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 801588e:	8abb      	ldrh	r3, [r7, #20]
 8015890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015894:	4293      	cmp	r3, r2
 8015896:	d0e9      	beq.n	801586c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8015898:	8abb      	ldrh	r3, [r7, #20]
 801589a:	893a      	ldrh	r2, [r7, #8]
 801589c:	8979      	ldrh	r1, [r7, #10]
 801589e:	68f8      	ldr	r0, [r7, #12]
 80158a0:	f7ff ff84 	bl	80157ac <u8g2_DrawGlyph>
 80158a4:	4603      	mov	r3, r0
 80158a6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80158ae:	2b03      	cmp	r3, #3
 80158b0:	d81e      	bhi.n	80158f0 <u8g2_draw_string+0xa0>
 80158b2:	a201      	add	r2, pc, #4	; (adr r2, 80158b8 <u8g2_draw_string+0x68>)
 80158b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158b8:	080158c9 	.word	0x080158c9
 80158bc:	080158d3 	.word	0x080158d3
 80158c0:	080158dd 	.word	0x080158dd
 80158c4:	080158e7 	.word	0x080158e7
      {
	case 0:
	  x += delta;
 80158c8:	897a      	ldrh	r2, [r7, #10]
 80158ca:	8a7b      	ldrh	r3, [r7, #18]
 80158cc:	4413      	add	r3, r2
 80158ce:	817b      	strh	r3, [r7, #10]
	  break;
 80158d0:	e00e      	b.n	80158f0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80158d2:	893a      	ldrh	r2, [r7, #8]
 80158d4:	8a7b      	ldrh	r3, [r7, #18]
 80158d6:	4413      	add	r3, r2
 80158d8:	813b      	strh	r3, [r7, #8]
	  break;
 80158da:	e009      	b.n	80158f0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80158dc:	897a      	ldrh	r2, [r7, #10]
 80158de:	8a7b      	ldrh	r3, [r7, #18]
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	817b      	strh	r3, [r7, #10]
	  break;
 80158e4:	e004      	b.n	80158f0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80158e6:	893a      	ldrh	r2, [r7, #8]
 80158e8:	8a7b      	ldrh	r3, [r7, #18]
 80158ea:	1ad3      	subs	r3, r2, r3
 80158ec:	813b      	strh	r3, [r7, #8]
	  break;
 80158ee:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80158f0:	8afa      	ldrh	r2, [r7, #22]
 80158f2:	8a7b      	ldrh	r3, [r7, #18]
 80158f4:	4413      	add	r3, r2
 80158f6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80158f8:	e7b8      	b.n	801586c <u8g2_draw_string+0x1c>
      break;
 80158fa:	bf00      	nop
    }
  }
  return sum;
 80158fc:	8afb      	ldrh	r3, [r7, #22]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3718      	adds	r7, #24
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop

08015908 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	60f8      	str	r0, [r7, #12]
 8015910:	607b      	str	r3, [r7, #4]
 8015912:	460b      	mov	r3, r1
 8015914:	817b      	strh	r3, [r7, #10]
 8015916:	4613      	mov	r3, r2
 8015918:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	4a06      	ldr	r2, [pc, #24]	; (8015938 <u8g2_DrawUTF8+0x30>)
 801591e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8015920:	893a      	ldrh	r2, [r7, #8]
 8015922:	8979      	ldrh	r1, [r7, #10]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f7ff ff92 	bl	8015850 <u8g2_draw_string>
 801592c:	4603      	mov	r3, r0
}
 801592e:	4618      	mov	r0, r3
 8015930:	3710      	adds	r7, #16
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	080161b7 	.word	0x080161b7

0801593c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 801593c:	b480      	push	{r7}
 801593e:	b083      	sub	sp, #12
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015948:	2b00      	cmp	r3, #0
 801594a:	d05d      	beq.n	8015a08 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 801596a:	2b00      	cmp	r3, #0
 801596c:	d04d      	beq.n	8015a0a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8015974:	2b01      	cmp	r3, #1
 8015976:	d11c      	bne.n	80159b2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8015984:	429a      	cmp	r2, r3
 8015986:	da05      	bge.n	8015994 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80159a0:	429a      	cmp	r2, r3
 80159a2:	dd32      	ble.n	8015a0a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80159b0:	e02b      	b.n	8015a0a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80159b8:	461a      	mov	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80159c0:	4619      	mov	r1, r3
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159c8:	440b      	add	r3, r1
 80159ca:	429a      	cmp	r2, r3
 80159cc:	da0d      	bge.n	80159ea <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80159d4:	b2da      	uxtb	r2, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	4413      	add	r3, r2
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	b25a      	sxtb	r2, r3
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159f6:	429a      	cmp	r2, r3
 80159f8:	dd07      	ble.n	8015a0a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a06:	e000      	b.n	8015a0a <u8g2_UpdateRefHeight+0xce>
    return;
 8015a08:	bf00      	nop
  }  
}
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr

08015a14 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  return 0;
 8015a1c:	2300      	movs	r3, #0
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	370c      	adds	r7, #12
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr
	...

08015a2c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	4a04      	ldr	r2, [pc, #16]	; (8015a48 <u8g2_SetFontPosBaseline+0x1c>)
 8015a38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8015a3a:	bf00      	nop
 8015a3c:	370c      	adds	r7, #12
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a44:	4770      	bx	lr
 8015a46:	bf00      	nop
 8015a48:	08015a15 	.word	0x08015a15

08015a4c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
 8015a54:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a5a:	683a      	ldr	r2, [r7, #0]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d00b      	beq.n	8015a78 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	683a      	ldr	r2, [r7, #0]
 8015a64:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	3374      	adds	r3, #116	; 0x74
 8015a6a:	6839      	ldr	r1, [r7, #0]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fa97 	bl	8014fa0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7ff ff62 	bl	801593c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b087      	sub	sp, #28
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	4611      	mov	r1, r2
 8015a8c:	461a      	mov	r2, r3
 8015a8e:	460b      	mov	r3, r1
 8015a90:	80fb      	strh	r3, [r7, #6]
 8015a92:	4613      	mov	r3, r2
 8015a94:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	881b      	ldrh	r3, [r3, #0]
 8015a9a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8015a9c:	8afb      	ldrh	r3, [r7, #22]
 8015a9e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	881a      	ldrh	r2, [r3, #0]
 8015aa4:	8abb      	ldrh	r3, [r7, #20]
 8015aa6:	4413      	add	r3, r2
 8015aa8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8015aaa:	8afa      	ldrh	r2, [r7, #22]
 8015aac:	8abb      	ldrh	r3, [r7, #20]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d90b      	bls.n	8015aca <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8015ab2:	8afa      	ldrh	r2, [r7, #22]
 8015ab4:	88bb      	ldrh	r3, [r7, #4]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d205      	bcs.n	8015ac6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8015aba:	88bb      	ldrh	r3, [r7, #4]
 8015abc:	82bb      	strh	r3, [r7, #20]
      b--;
 8015abe:	8abb      	ldrh	r3, [r7, #20]
 8015ac0:	3b01      	subs	r3, #1
 8015ac2:	82bb      	strh	r3, [r7, #20]
 8015ac4:	e001      	b.n	8015aca <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8015ac6:	88fb      	ldrh	r3, [r7, #6]
 8015ac8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8015aca:	8afa      	ldrh	r2, [r7, #22]
 8015acc:	88bb      	ldrh	r3, [r7, #4]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d301      	bcc.n	8015ad6 <u8g2_clip_intersection2+0x56>
    return 0;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	e01c      	b.n	8015b10 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8015ad6:	8aba      	ldrh	r2, [r7, #20]
 8015ad8:	88fb      	ldrh	r3, [r7, #6]
 8015ada:	429a      	cmp	r2, r3
 8015adc:	d801      	bhi.n	8015ae2 <u8g2_clip_intersection2+0x62>
    return 0;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	e016      	b.n	8015b10 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8015ae2:	8afa      	ldrh	r2, [r7, #22]
 8015ae4:	88fb      	ldrh	r3, [r7, #6]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d201      	bcs.n	8015aee <u8g2_clip_intersection2+0x6e>
    a = c;
 8015aea:	88fb      	ldrh	r3, [r7, #6]
 8015aec:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8015aee:	8aba      	ldrh	r2, [r7, #20]
 8015af0:	88bb      	ldrh	r3, [r7, #4]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d901      	bls.n	8015afa <u8g2_clip_intersection2+0x7a>
    b = d;
 8015af6:	88bb      	ldrh	r3, [r7, #4]
 8015af8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	8afa      	ldrh	r2, [r7, #22]
 8015afe:	801a      	strh	r2, [r3, #0]
  b -= a;
 8015b00:	8aba      	ldrh	r2, [r7, #20]
 8015b02:	8afb      	ldrh	r3, [r7, #22]
 8015b04:	1ad3      	subs	r3, r2, r3
 8015b06:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	8aba      	ldrh	r2, [r7, #20]
 8015b0c:	801a      	strh	r2, [r3, #0]
  return 1;
 8015b0e:	2301      	movs	r3, #1
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	371c      	adds	r7, #28
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr

08015b1c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b1c:	b590      	push	{r4, r7, lr}
 8015b1e:	b087      	sub	sp, #28
 8015b20:	af02      	add	r7, sp, #8
 8015b22:	60f8      	str	r0, [r7, #12]
 8015b24:	4608      	mov	r0, r1
 8015b26:	4611      	mov	r1, r2
 8015b28:	461a      	mov	r2, r3
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	817b      	strh	r3, [r7, #10]
 8015b2e:	460b      	mov	r3, r1
 8015b30:	813b      	strh	r3, [r7, #8]
 8015b32:	4613      	mov	r3, r2
 8015b34:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015b3a:	893a      	ldrh	r2, [r7, #8]
 8015b3c:	1ad3      	subs	r3, r2, r3
 8015b3e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015b44:	88f8      	ldrh	r0, [r7, #6]
 8015b46:	893a      	ldrh	r2, [r7, #8]
 8015b48:	8979      	ldrh	r1, [r7, #10]
 8015b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	4603      	mov	r3, r0
 8015b52:	68f8      	ldr	r0, [r7, #12]
 8015b54:	47a0      	blx	r4
}
 8015b56:	bf00      	nop
 8015b58:	3714      	adds	r7, #20
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd90      	pop	{r4, r7, pc}

08015b5e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b5e:	b590      	push	{r4, r7, lr}
 8015b60:	b087      	sub	sp, #28
 8015b62:	af02      	add	r7, sp, #8
 8015b64:	60f8      	str	r0, [r7, #12]
 8015b66:	4608      	mov	r0, r1
 8015b68:	4611      	mov	r1, r2
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	817b      	strh	r3, [r7, #10]
 8015b70:	460b      	mov	r3, r1
 8015b72:	813b      	strh	r3, [r7, #8]
 8015b74:	4613      	mov	r3, r2
 8015b76:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d075      	beq.n	8015c6e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8015b82:	88fb      	ldrh	r3, [r7, #6]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d072      	beq.n	8015c6e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8015b88:	88fb      	ldrh	r3, [r7, #6]
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d91a      	bls.n	8015bc4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8015b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b92:	2b02      	cmp	r3, #2
 8015b94:	d109      	bne.n	8015baa <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8015b96:	897a      	ldrh	r2, [r7, #10]
 8015b98:	88fb      	ldrh	r3, [r7, #6]
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	817b      	strh	r3, [r7, #10]
	  x++;
 8015ba0:	897b      	ldrh	r3, [r7, #10]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	817b      	strh	r3, [r7, #10]
 8015ba8:	e00c      	b.n	8015bc4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8015baa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bae:	2b03      	cmp	r3, #3
 8015bb0:	d108      	bne.n	8015bc4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8015bb2:	893a      	ldrh	r2, [r7, #8]
 8015bb4:	88fb      	ldrh	r3, [r7, #6]
 8015bb6:	1ad3      	subs	r3, r2, r3
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	813b      	strh	r3, [r7, #8]
	  y++;
 8015bbc:	893b      	ldrh	r3, [r7, #8]
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8015bc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bc8:	f003 0301 	and.w	r3, r3, #1
 8015bcc:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8015bd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d11a      	bne.n	8015c0e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015bde:	893b      	ldrh	r3, [r7, #8]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d83b      	bhi.n	8015c5c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8015bea:	893b      	ldrh	r3, [r7, #8]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d937      	bls.n	8015c60 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015bfc:	1db9      	adds	r1, r7, #6
 8015bfe:	f107 000a 	add.w	r0, r7, #10
 8015c02:	f7ff ff3d 	bl	8015a80 <u8g2_clip_intersection2>
 8015c06:	4603      	mov	r3, r0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d11a      	bne.n	8015c42 <u8g2_DrawHVLine+0xe4>
	  return;
 8015c0c:	e02f      	b.n	8015c6e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c14:	897b      	ldrh	r3, [r7, #10]
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d824      	bhi.n	8015c64 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c20:	897b      	ldrh	r3, [r7, #10]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d920      	bls.n	8015c68 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015c32:	1db9      	adds	r1, r7, #6
 8015c34:	f107 0008 	add.w	r0, r7, #8
 8015c38:	f7ff ff22 	bl	8015a80 <u8g2_clip_intersection2>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d014      	beq.n	8015c6c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c46:	689c      	ldr	r4, [r3, #8]
 8015c48:	8979      	ldrh	r1, [r7, #10]
 8015c4a:	893a      	ldrh	r2, [r7, #8]
 8015c4c:	88f8      	ldrh	r0, [r7, #6]
 8015c4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c52:	9300      	str	r3, [sp, #0]
 8015c54:	4603      	mov	r3, r0
 8015c56:	68f8      	ldr	r0, [r7, #12]
 8015c58:	47a0      	blx	r4
 8015c5a:	e008      	b.n	8015c6e <u8g2_DrawHVLine+0x110>
	  return;
 8015c5c:	bf00      	nop
 8015c5e:	e006      	b.n	8015c6e <u8g2_DrawHVLine+0x110>
	  return;
 8015c60:	bf00      	nop
 8015c62:	e004      	b.n	8015c6e <u8g2_DrawHVLine+0x110>
	  return;
 8015c64:	bf00      	nop
 8015c66:	e002      	b.n	8015c6e <u8g2_DrawHVLine+0x110>
	  return;
 8015c68:	bf00      	nop
 8015c6a:	e000      	b.n	8015c6e <u8g2_DrawHVLine+0x110>
	  return;
 8015c6c:	bf00      	nop
    }
}
 8015c6e:	3714      	adds	r7, #20
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd90      	pop	{r4, r7, pc}

08015c74 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b084      	sub	sp, #16
 8015c78:	af02      	add	r7, sp, #8
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	807b      	strh	r3, [r7, #2]
 8015c80:	4613      	mov	r3, r2
 8015c82:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015c8a:	883a      	ldrh	r2, [r7, #0]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d31a      	bcc.n	8015cc6 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015c96:	883a      	ldrh	r2, [r7, #0]
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d216      	bcs.n	8015cca <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ca2:	887a      	ldrh	r2, [r7, #2]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d312      	bcc.n	8015cce <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015cae:	887a      	ldrh	r2, [r7, #2]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d20e      	bcs.n	8015cd2 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8015cb4:	883a      	ldrh	r2, [r7, #0]
 8015cb6:	8879      	ldrh	r1, [r7, #2]
 8015cb8:	2300      	movs	r3, #0
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f7ff ff4d 	bl	8015b5e <u8g2_DrawHVLine>
 8015cc4:	e006      	b.n	8015cd4 <u8g2_DrawPixel+0x60>
    return;
 8015cc6:	bf00      	nop
 8015cc8:	e004      	b.n	8015cd4 <u8g2_DrawPixel+0x60>
    return;
 8015cca:	bf00      	nop
 8015ccc:	e002      	b.n	8015cd4 <u8g2_DrawPixel+0x60>
    return;
 8015cce:	bf00      	nop
 8015cd0:	e000      	b.n	8015cd4 <u8g2_DrawPixel+0x60>
    return;
 8015cd2:	bf00      	nop
}
 8015cd4:	3708      	adds	r7, #8
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}

08015cda <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8015cda:	b490      	push	{r4, r7}
 8015cdc:	b082      	sub	sp, #8
 8015cde:	af00      	add	r7, sp, #0
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	4608      	mov	r0, r1
 8015ce4:	4611      	mov	r1, r2
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	4623      	mov	r3, r4
 8015cea:	80fb      	strh	r3, [r7, #6]
 8015cec:	4603      	mov	r3, r0
 8015cee:	80bb      	strh	r3, [r7, #4]
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	807b      	strh	r3, [r7, #2]
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8015cf8:	887a      	ldrh	r2, [r7, #2]
 8015cfa:	88bb      	ldrh	r3, [r7, #4]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d20d      	bcs.n	8015d1c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d00:	883a      	ldrh	r2, [r7, #0]
 8015d02:	88fb      	ldrh	r3, [r7, #6]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d901      	bls.n	8015d0c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	e014      	b.n	8015d36 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015d0c:	887a      	ldrh	r2, [r7, #2]
 8015d0e:	883b      	ldrh	r3, [r7, #0]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d901      	bls.n	8015d18 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8015d14:	2301      	movs	r3, #1
 8015d16:	e00e      	b.n	8015d36 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e00c      	b.n	8015d36 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d1c:	883a      	ldrh	r2, [r7, #0]
 8015d1e:	88fb      	ldrh	r3, [r7, #6]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d907      	bls.n	8015d34 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8015d24:	887a      	ldrh	r2, [r7, #2]
 8015d26:	883b      	ldrh	r3, [r7, #0]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d901      	bls.n	8015d30 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e002      	b.n	8015d36 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d30:	2300      	movs	r3, #0
 8015d32:	e000      	b.n	8015d36 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8015d34:	2300      	movs	r3, #0
    }
  }
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3708      	adds	r7, #8
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bc90      	pop	{r4, r7}
 8015d3e:	4770      	bx	lr

08015d40 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60f8      	str	r0, [r7, #12]
 8015d48:	4608      	mov	r0, r1
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	4603      	mov	r3, r0
 8015d50:	817b      	strh	r3, [r7, #10]
 8015d52:	460b      	mov	r3, r1
 8015d54:	813b      	strh	r3, [r7, #8]
 8015d56:	4613      	mov	r3, r2
 8015d58:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8015d66:	8b3b      	ldrh	r3, [r7, #24]
 8015d68:	893a      	ldrh	r2, [r7, #8]
 8015d6a:	f7ff ffb6 	bl	8015cda <u8g2_is_intersection_decision_tree>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d101      	bne.n	8015d78 <u8g2_IsIntersection+0x38>
    return 0; 
 8015d74:	2300      	movs	r3, #0
 8015d76:	e00a      	b.n	8015d8e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8015d84:	88fb      	ldrh	r3, [r7, #6]
 8015d86:	897a      	ldrh	r2, [r7, #10]
 8015d88:	f7ff ffa7 	bl	8015cda <u8g2_is_intersection_decision_tree>
 8015d8c:	4603      	mov	r3, r0
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015d96:	b480      	push	{r7}
 8015d98:	b089      	sub	sp, #36	; 0x24
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	60f8      	str	r0, [r7, #12]
 8015d9e:	4608      	mov	r0, r1
 8015da0:	4611      	mov	r1, r2
 8015da2:	461a      	mov	r2, r3
 8015da4:	4603      	mov	r3, r0
 8015da6:	817b      	strh	r3, [r7, #10]
 8015da8:	460b      	mov	r3, r1
 8015daa:	813b      	strh	r3, [r7, #8]
 8015dac:	4613      	mov	r3, r2
 8015dae:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8015db0:	893b      	ldrh	r3, [r7, #8]
 8015db2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8015db4:	7efb      	ldrb	r3, [r7, #27]
 8015db6:	f003 0307 	and.w	r3, r3, #7
 8015dba:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8015dc0:	7e3a      	ldrb	r2, [r7, #24]
 8015dc2:	7efb      	ldrb	r3, [r7, #27]
 8015dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8015dc8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015dd8:	2b01      	cmp	r3, #1
 8015dda:	d801      	bhi.n	8015de0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015ddc:	7e3b      	ldrb	r3, [r7, #24]
 8015dde:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015de6:	2b01      	cmp	r3, #1
 8015de8:	d001      	beq.n	8015dee <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015dea:	7e3b      	ldrb	r3, [r7, #24]
 8015dec:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015dee:	893b      	ldrh	r3, [r7, #8]
 8015df0:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8015df2:	8afb      	ldrh	r3, [r7, #22]
 8015df4:	f023 0307 	bic.w	r3, r3, #7
 8015df8:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	7c1b      	ldrb	r3, [r3, #16]
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	8afa      	ldrh	r2, [r7, #22]
 8015e04:	fb12 f303 	smulbb	r3, r2, r3
 8015e08:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e0e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8015e10:	8afb      	ldrh	r3, [r7, #22]
 8015e12:	69fa      	ldr	r2, [r7, #28]
 8015e14:	4413      	add	r3, r2
 8015e16:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8015e18:	897b      	ldrh	r3, [r7, #10]
 8015e1a:	69fa      	ldr	r2, [r7, #28]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8015e20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d117      	bne.n	8015e58 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	781a      	ldrb	r2, [r3, #0]
 8015e2c:	7ebb      	ldrb	r3, [r7, #26]
 8015e2e:	4313      	orrs	r3, r2
 8015e30:	b2da      	uxtb	r2, r3
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015e36:	69fb      	ldr	r3, [r7, #28]
 8015e38:	781a      	ldrb	r2, [r3, #0]
 8015e3a:	7e7b      	ldrb	r3, [r7, #25]
 8015e3c:	4053      	eors	r3, r2
 8015e3e:	b2da      	uxtb	r2, r3
 8015e40:	69fb      	ldr	r3, [r7, #28]
 8015e42:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	3301      	adds	r3, #1
 8015e48:	61fb      	str	r3, [r7, #28]
	len--;
 8015e4a:	88fb      	ldrh	r3, [r7, #6]
 8015e4c:	3b01      	subs	r3, #1
 8015e4e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8015e50:	88fb      	ldrh	r3, [r7, #6]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d1e8      	bne.n	8015e28 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015e56:	e038      	b.n	8015eca <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	781a      	ldrb	r2, [r3, #0]
 8015e5c:	7ebb      	ldrb	r3, [r7, #26]
 8015e5e:	4313      	orrs	r3, r2
 8015e60:	b2da      	uxtb	r2, r3
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	781a      	ldrb	r2, [r3, #0]
 8015e6a:	7e7b      	ldrb	r3, [r7, #25]
 8015e6c:	4053      	eors	r3, r2
 8015e6e:	b2da      	uxtb	r2, r3
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8015e74:	7efb      	ldrb	r3, [r7, #27]
 8015e76:	3301      	adds	r3, #1
 8015e78:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8015e7a:	7efb      	ldrb	r3, [r7, #27]
 8015e7c:	f003 0307 	and.w	r3, r3, #7
 8015e80:	76fb      	strb	r3, [r7, #27]
      len--;
 8015e82:	88fb      	ldrh	r3, [r7, #6]
 8015e84:	3b01      	subs	r3, #1
 8015e86:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8015e88:	7efb      	ldrb	r3, [r7, #27]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d114      	bne.n	8015eb8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8015e92:	461a      	mov	r2, r3
 8015e94:	69fb      	ldr	r3, [r7, #28]
 8015e96:	4413      	add	r3, r2
 8015e98:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d801      	bhi.n	8015ea8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015eae:	2b01      	cmp	r3, #1
 8015eb0:	d008      	beq.n	8015ec4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	767b      	strb	r3, [r7, #25]
 8015eb6:	e005      	b.n	8015ec4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8015eb8:	7ebb      	ldrb	r3, [r7, #26]
 8015eba:	005b      	lsls	r3, r3, #1
 8015ebc:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8015ebe:	7e7b      	ldrb	r3, [r7, #25]
 8015ec0:	005b      	lsls	r3, r3, #1
 8015ec2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8015ec4:	88fb      	ldrh	r3, [r7, #6]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d1c6      	bne.n	8015e58 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015eca:	bf00      	nop
 8015ecc:	3724      	adds	r7, #36	; 0x24
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed4:	4770      	bx	lr

08015ed6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015ed6:	b580      	push	{r7, lr}
 8015ed8:	b082      	sub	sp, #8
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015efe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	4798      	blx	r3
}
 8015f0c:	bf00      	nop
 8015f0e:	3708      	adds	r7, #8
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}

08015f14 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	603b      	str	r3, [r7, #0]
 8015f20:	4613      	mov	r3, r2
 8015f22:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2200      	movs	r2, #0
 8015f28:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	683a      	ldr	r2, [r7, #0]
 8015f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	79fa      	ldrb	r2, [r7, #7]
 8015f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2200      	movs	r2, #0
 8015f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2200      	movs	r2, #0
 8015f52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2201      	movs	r2, #1
 8015f5a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2201      	movs	r2, #1
 8015f62:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	69ba      	ldr	r2, [r7, #24]
 8015f6a:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	68f8      	ldr	r0, [r7, #12]
 8015f74:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015f76:	68f8      	ldr	r0, [r7, #12]
 8015f78:	f7ff ffad 	bl	8015ed6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015f7c:	68f8      	ldr	r0, [r7, #12]
 8015f7e:	f7ff fd55 	bl	8015a2c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2200      	movs	r2, #0
 8015f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8015f8a:	bf00      	nop
 8015f8c:	3710      	adds	r7, #16
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}

08015f92 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015f92:	b480      	push	{r7}
 8015f94:	b085      	sub	sp, #20
 8015f96:	af00      	add	r7, sp, #0
 8015f98:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fa6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015fa8:	89fb      	ldrh	r3, [r7, #14]
 8015faa:	00db      	lsls	r3, r3, #3
 8015fac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	89fa      	ldrh	r2, [r7, #14]
 8015fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	7c1b      	ldrb	r3, [r3, #16]
 8015fb8:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8015fba:	89fb      	ldrh	r3, [r7, #14]
 8015fbc:	00db      	lsls	r3, r3, #3
 8015fbe:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	89fa      	ldrh	r2, [r7, #14]
 8015fc4:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015fcc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015fce:	89fb      	ldrh	r3, [r7, #14]
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	89fa      	ldrh	r2, [r7, #14]
 8015fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fe0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8015fe2:	89fb      	ldrh	r3, [r7, #14]
 8015fe4:	687a      	ldr	r2, [r7, #4]
 8015fe6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8015fea:	4413      	add	r3, r2
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	7c52      	ldrb	r2, [r2, #17]
 8015ff0:	4293      	cmp	r3, r2
 8015ff2:	dd08      	ble.n	8016006 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	7c5b      	ldrb	r3, [r3, #17]
 8015ff8:	b29a      	uxth	r2, r3
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016000:	b29b      	uxth	r3, r3
 8016002:	1ad3      	subs	r3, r2, r3
 8016004:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8016006:	89fb      	ldrh	r3, [r7, #14]
 8016008:	00db      	lsls	r3, r3, #3
 801600a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8016028:	89fb      	ldrh	r3, [r7, #14]
 801602a:	4413      	add	r3, r2
 801602c:	b29a      	uxth	r2, r3
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	8a9a      	ldrh	r2, [r3, #20]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	8ada      	ldrh	r2, [r3, #22]
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8016048:	bf00      	nop
 801604a:	3714      	adds	r7, #20
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af02      	add	r7, sp, #8
 801605a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	4603      	mov	r3, r0
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7ff fe61 	bl	8015d40 <u8g2_IsIntersection>
 801607e:	4603      	mov	r3, r0
 8016080:	2b00      	cmp	r3, #0
 8016082:	d104      	bne.n	801608e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2200      	movs	r2, #0
 8016088:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 801608c:	e03b      	b.n	8016106 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2201      	movs	r2, #1
 8016092:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d205      	bcs.n	80160b2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80160be:	429a      	cmp	r2, r3
 80160c0:	d905      	bls.n	80160ce <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80160da:	429a      	cmp	r2, r3
 80160dc:	d205      	bcs.n	80160ea <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d905      	bls.n	8016106 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8016106:	bf00      	nop
 8016108:	3708      	adds	r7, #8
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}

0801610e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 801610e:	b580      	push	{r7, lr}
 8016110:	b082      	sub	sp, #8
 8016112:	af00      	add	r7, sp, #0
 8016114:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7ff ff3b 	bl	8015f92 <u8g2_update_dimension_common>
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2200      	movs	r2, #0
 8016130:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f7ff ff7b 	bl	8016054 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 801615e:	bf00      	nop
 8016160:	3708      	adds	r7, #8
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}

08016166 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8016166:	b580      	push	{r7, lr}
 8016168:	b086      	sub	sp, #24
 801616a:	af02      	add	r7, sp, #8
 801616c:	60f8      	str	r0, [r7, #12]
 801616e:	4608      	mov	r0, r1
 8016170:	4611      	mov	r1, r2
 8016172:	461a      	mov	r2, r3
 8016174:	4603      	mov	r3, r0
 8016176:	817b      	strh	r3, [r7, #10]
 8016178:	460b      	mov	r3, r1
 801617a:	813b      	strh	r3, [r7, #8]
 801617c:	4613      	mov	r3, r2
 801617e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8016180:	88f8      	ldrh	r0, [r7, #6]
 8016182:	893a      	ldrh	r2, [r7, #8]
 8016184:	8979      	ldrh	r1, [r7, #10]
 8016186:	7e3b      	ldrb	r3, [r7, #24]
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	4603      	mov	r3, r0
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f7ff fcc5 	bl	8015b1c <u8g2_draw_hv_line_2dir>
}
 8016192:	bf00      	nop
 8016194:	3710      	adds	r7, #16
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}

0801619a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 801619a:	b480      	push	{r7}
 801619c:	b083      	sub	sp, #12
 801619e:	af00      	add	r7, sp, #0
 80161a0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2200      	movs	r2, #0
 80161a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80161aa:	bf00      	nop
 80161ac:	370c      	adds	r7, #12
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr

080161b6 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80161b6:	b480      	push	{r7}
 80161b8:	b083      	sub	sp, #12
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
 80161be:	460b      	mov	r3, r1
 80161c0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80161c2:	78fb      	ldrb	r3, [r7, #3]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d002      	beq.n	80161ce <u8x8_utf8_next+0x18>
 80161c8:	78fb      	ldrb	r3, [r7, #3]
 80161ca:	2b0a      	cmp	r3, #10
 80161cc:	d102      	bne.n	80161d4 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80161ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80161d2:	e06e      	b.n	80162b2 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d145      	bne.n	801626a <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80161de:	78fb      	ldrb	r3, [r7, #3]
 80161e0:	2bfb      	cmp	r3, #251	; 0xfb
 80161e2:	d908      	bls.n	80161f6 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2205      	movs	r2, #5
 80161e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80161ec:	78fb      	ldrb	r3, [r7, #3]
 80161ee:	f003 0301 	and.w	r3, r3, #1
 80161f2:	70fb      	strb	r3, [r7, #3]
 80161f4:	e032      	b.n	801625c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80161f6:	78fb      	ldrb	r3, [r7, #3]
 80161f8:	2bf7      	cmp	r3, #247	; 0xf7
 80161fa:	d908      	bls.n	801620e <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2204      	movs	r2, #4
 8016200:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8016204:	78fb      	ldrb	r3, [r7, #3]
 8016206:	f003 0303 	and.w	r3, r3, #3
 801620a:	70fb      	strb	r3, [r7, #3]
 801620c:	e026      	b.n	801625c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 801620e:	78fb      	ldrb	r3, [r7, #3]
 8016210:	2bef      	cmp	r3, #239	; 0xef
 8016212:	d908      	bls.n	8016226 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2203      	movs	r2, #3
 8016218:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 801621c:	78fb      	ldrb	r3, [r7, #3]
 801621e:	f003 0307 	and.w	r3, r3, #7
 8016222:	70fb      	strb	r3, [r7, #3]
 8016224:	e01a      	b.n	801625c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8016226:	78fb      	ldrb	r3, [r7, #3]
 8016228:	2bdf      	cmp	r3, #223	; 0xdf
 801622a:	d908      	bls.n	801623e <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2202      	movs	r2, #2
 8016230:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8016234:	78fb      	ldrb	r3, [r7, #3]
 8016236:	f003 030f 	and.w	r3, r3, #15
 801623a:	70fb      	strb	r3, [r7, #3]
 801623c:	e00e      	b.n	801625c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 801623e:	78fb      	ldrb	r3, [r7, #3]
 8016240:	2bbf      	cmp	r3, #191	; 0xbf
 8016242:	d908      	bls.n	8016256 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2201      	movs	r2, #1
 8016248:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 801624c:	78fb      	ldrb	r3, [r7, #3]
 801624e:	f003 031f 	and.w	r3, r3, #31
 8016252:	70fb      	strb	r3, [r7, #3]
 8016254:	e002      	b.n	801625c <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8016256:	78fb      	ldrb	r3, [r7, #3]
 8016258:	b29b      	uxth	r3, r3
 801625a:	e02a      	b.n	80162b2 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 801625c:	78fb      	ldrb	r3, [r7, #3]
 801625e:	b29a      	uxth	r2, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8016264:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016268:	e023      	b.n	80162b2 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016270:	3b01      	subs	r3, #1
 8016272:	b2da      	uxtb	r2, r3
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	8c1b      	ldrh	r3, [r3, #32]
 801627e:	019b      	lsls	r3, r3, #6
 8016280:	b29a      	uxth	r2, r3
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8016286:	78fb      	ldrb	r3, [r7, #3]
 8016288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801628c:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	8c1a      	ldrh	r2, [r3, #32]
 8016292:	78fb      	ldrb	r3, [r7, #3]
 8016294:	b29b      	uxth	r3, r3
 8016296:	4313      	orrs	r3, r2
 8016298:	b29a      	uxth	r2, r3
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d002      	beq.n	80162ae <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80162a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162ac:	e001      	b.n	80162b2 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	8c1b      	ldrh	r3, [r3, #32]
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	370c      	adds	r7, #12
 80162b6:	46bd      	mov	sp, r7
 80162b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162bc:	4770      	bx	lr

080162be <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80162be:	b590      	push	{r4, r7, lr}
 80162c0:	b083      	sub	sp, #12
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]
 80162c6:	460b      	mov	r3, r1
 80162c8:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	691c      	ldr	r4, [r3, #16]
 80162ce:	78fa      	ldrb	r2, [r7, #3]
 80162d0:	2300      	movs	r3, #0
 80162d2:	2120      	movs	r1, #32
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	47a0      	blx	r4
 80162d8:	4603      	mov	r3, r0
}
 80162da:	4618      	mov	r0, r3
 80162dc:	370c      	adds	r7, #12
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd90      	pop	{r4, r7, pc}

080162e2 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80162e2:	b590      	push	{r4, r7, lr}
 80162e4:	b085      	sub	sp, #20
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	60f8      	str	r0, [r7, #12]
 80162ea:	460b      	mov	r3, r1
 80162ec:	607a      	str	r2, [r7, #4]
 80162ee:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	691c      	ldr	r4, [r3, #16]
 80162f4:	7afa      	ldrb	r2, [r7, #11]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2117      	movs	r1, #23
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	47a0      	blx	r4
 80162fe:	4603      	mov	r3, r0
}
 8016300:	4618      	mov	r0, r3
 8016302:	3714      	adds	r7, #20
 8016304:	46bd      	mov	sp, r7
 8016306:	bd90      	pop	{r4, r7, pc}

08016308 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	460b      	mov	r3, r1
 8016312:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8016314:	1cfb      	adds	r3, r7, #3
 8016316:	461a      	mov	r2, r3
 8016318:	2101      	movs	r1, #1
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f7ff ffe1 	bl	80162e2 <u8x8_byte_SendBytes>
 8016320:	4603      	mov	r3, r0
}
 8016322:	4618      	mov	r0, r3
 8016324:	3708      	adds	r7, #8
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}

0801632a <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 801632a:	b590      	push	{r4, r7, lr}
 801632c:	b083      	sub	sp, #12
 801632e:	af00      	add	r7, sp, #0
 8016330:	6078      	str	r0, [r7, #4]
 8016332:	460b      	mov	r3, r1
 8016334:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	68dc      	ldr	r4, [r3, #12]
 801633a:	78fa      	ldrb	r2, [r7, #3]
 801633c:	2300      	movs	r3, #0
 801633e:	2115      	movs	r1, #21
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	47a0      	blx	r4
 8016344:	4603      	mov	r3, r0
}
 8016346:	4618      	mov	r0, r3
 8016348:	370c      	adds	r7, #12
 801634a:	46bd      	mov	sp, r7
 801634c:	bd90      	pop	{r4, r7, pc}

0801634e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 801634e:	b590      	push	{r4, r7, lr}
 8016350:	b083      	sub	sp, #12
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
 8016356:	460b      	mov	r3, r1
 8016358:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	68dc      	ldr	r4, [r3, #12]
 801635e:	78fa      	ldrb	r2, [r7, #3]
 8016360:	2300      	movs	r3, #0
 8016362:	2116      	movs	r1, #22
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	47a0      	blx	r4
 8016368:	4603      	mov	r3, r0
}
 801636a:	4618      	mov	r0, r3
 801636c:	370c      	adds	r7, #12
 801636e:	46bd      	mov	sp, r7
 8016370:	bd90      	pop	{r4, r7, pc}

08016372 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8016372:	b590      	push	{r4, r7, lr}
 8016374:	b085      	sub	sp, #20
 8016376:	af00      	add	r7, sp, #0
 8016378:	60f8      	str	r0, [r7, #12]
 801637a:	460b      	mov	r3, r1
 801637c:	607a      	str	r2, [r7, #4]
 801637e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	68dc      	ldr	r4, [r3, #12]
 8016384:	7afa      	ldrb	r2, [r7, #11]
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2117      	movs	r1, #23
 801638a:	68f8      	ldr	r0, [r7, #12]
 801638c:	47a0      	blx	r4
 801638e:	4603      	mov	r3, r0
}
 8016390:	4618      	mov	r0, r3
 8016392:	3714      	adds	r7, #20
 8016394:	46bd      	mov	sp, r7
 8016396:	bd90      	pop	{r4, r7, pc}

08016398 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8016398:	b590      	push	{r4, r7, lr}
 801639a:	b083      	sub	sp, #12
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	68dc      	ldr	r4, [r3, #12]
 80163a4:	2300      	movs	r3, #0
 80163a6:	2200      	movs	r2, #0
 80163a8:	2118      	movs	r1, #24
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	47a0      	blx	r4
 80163ae:	4603      	mov	r3, r0
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	370c      	adds	r7, #12
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd90      	pop	{r4, r7, pc}

080163b8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80163b8:	b590      	push	{r4, r7, lr}
 80163ba:	b083      	sub	sp, #12
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	68dc      	ldr	r4, [r3, #12]
 80163c4:	2300      	movs	r3, #0
 80163c6:	2200      	movs	r2, #0
 80163c8:	2119      	movs	r1, #25
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	47a0      	blx	r4
 80163ce:	4603      	mov	r3, r0
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	370c      	adds	r7, #12
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd90      	pop	{r4, r7, pc}

080163d8 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80163d8:	b590      	push	{r4, r7, lr}
 80163da:	b085      	sub	sp, #20
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
 80163e0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	73fb      	strb	r3, [r7, #15]
    data++;
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	3301      	adds	r3, #1
 80163ec:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80163ee:	7bfb      	ldrb	r3, [r7, #15]
 80163f0:	2bfe      	cmp	r3, #254	; 0xfe
 80163f2:	d031      	beq.n	8016458 <u8x8_cad_SendSequence+0x80>
 80163f4:	2bfe      	cmp	r3, #254	; 0xfe
 80163f6:	dc3d      	bgt.n	8016474 <u8x8_cad_SendSequence+0x9c>
 80163f8:	2b19      	cmp	r3, #25
 80163fa:	dc3b      	bgt.n	8016474 <u8x8_cad_SendSequence+0x9c>
 80163fc:	2b18      	cmp	r3, #24
 80163fe:	da23      	bge.n	8016448 <u8x8_cad_SendSequence+0x70>
 8016400:	2b16      	cmp	r3, #22
 8016402:	dc02      	bgt.n	801640a <u8x8_cad_SendSequence+0x32>
 8016404:	2b15      	cmp	r3, #21
 8016406:	da03      	bge.n	8016410 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8016408:	e034      	b.n	8016474 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 801640a:	2b17      	cmp	r3, #23
 801640c:	d00e      	beq.n	801642c <u8x8_cad_SendSequence+0x54>
	return;
 801640e:	e031      	b.n	8016474 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	68dc      	ldr	r4, [r3, #12]
 801641a:	7bba      	ldrb	r2, [r7, #14]
 801641c:	7bf9      	ldrb	r1, [r7, #15]
 801641e:	2300      	movs	r3, #0
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	47a0      	blx	r4
	  data++;
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	3301      	adds	r3, #1
 8016428:	603b      	str	r3, [r7, #0]
	  break;
 801642a:	e022      	b.n	8016472 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	781b      	ldrb	r3, [r3, #0]
 8016430:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8016432:	f107 030e 	add.w	r3, r7, #14
 8016436:	461a      	mov	r2, r3
 8016438:	2101      	movs	r1, #1
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7ff ff99 	bl	8016372 <u8x8_cad_SendData>
	  data++;
 8016440:	683b      	ldr	r3, [r7, #0]
 8016442:	3301      	adds	r3, #1
 8016444:	603b      	str	r3, [r7, #0]
	  break;
 8016446:	e014      	b.n	8016472 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	68dc      	ldr	r4, [r3, #12]
 801644c:	7bf9      	ldrb	r1, [r7, #15]
 801644e:	2300      	movs	r3, #0
 8016450:	2200      	movs	r2, #0
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	47a0      	blx	r4
	  break;
 8016456:	e00c      	b.n	8016472 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 801645e:	7bbb      	ldrb	r3, [r7, #14]
 8016460:	461a      	mov	r2, r3
 8016462:	2129      	movs	r1, #41	; 0x29
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f000 f9ec 	bl	8016842 <u8x8_gpio_call>
	  data++;
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	3301      	adds	r3, #1
 801646e:	603b      	str	r3, [r7, #0]
	  break;
 8016470:	bf00      	nop
    cmd = *data;
 8016472:	e7b6      	b.n	80163e2 <u8x8_cad_SendSequence+0xa>
	return;
 8016474:	bf00      	nop
    }
  }
}
 8016476:	3714      	adds	r7, #20
 8016478:	46bd      	mov	sp, r7
 801647a:	bd90      	pop	{r4, r7, pc}

0801647c <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801647c:	b590      	push	{r4, r7, lr}
 801647e:	b085      	sub	sp, #20
 8016480:	af00      	add	r7, sp, #0
 8016482:	60f8      	str	r0, [r7, #12]
 8016484:	607b      	str	r3, [r7, #4]
 8016486:	460b      	mov	r3, r1
 8016488:	72fb      	strb	r3, [r7, #11]
 801648a:	4613      	mov	r3, r2
 801648c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 801648e:	7afb      	ldrb	r3, [r7, #11]
 8016490:	3b14      	subs	r3, #20
 8016492:	2b05      	cmp	r3, #5
 8016494:	d82f      	bhi.n	80164f6 <u8x8_cad_011+0x7a>
 8016496:	a201      	add	r2, pc, #4	; (adr r2, 801649c <u8x8_cad_011+0x20>)
 8016498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801649c:	080164e5 	.word	0x080164e5
 80164a0:	080164b5 	.word	0x080164b5
 80164a4:	080164c9 	.word	0x080164c9
 80164a8:	080164dd 	.word	0x080164dd
 80164ac:	080164e5 	.word	0x080164e5
 80164b0:	080164e5 	.word	0x080164e5
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80164b4:	2100      	movs	r1, #0
 80164b6:	68f8      	ldr	r0, [r7, #12]
 80164b8:	f7ff ff01 	bl	80162be <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80164bc:	7abb      	ldrb	r3, [r7, #10]
 80164be:	4619      	mov	r1, r3
 80164c0:	68f8      	ldr	r0, [r7, #12]
 80164c2:	f7ff ff21 	bl	8016308 <u8x8_byte_SendByte>
      break;
 80164c6:	e018      	b.n	80164fa <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 80164c8:	2101      	movs	r1, #1
 80164ca:	68f8      	ldr	r0, [r7, #12]
 80164cc:	f7ff fef7 	bl	80162be <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80164d0:	7abb      	ldrb	r3, [r7, #10]
 80164d2:	4619      	mov	r1, r3
 80164d4:	68f8      	ldr	r0, [r7, #12]
 80164d6:	f7ff ff17 	bl	8016308 <u8x8_byte_SendByte>
      break;
 80164da:	e00e      	b.n	80164fa <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80164dc:	2101      	movs	r1, #1
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	f7ff feed 	bl	80162be <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	691c      	ldr	r4, [r3, #16]
 80164e8:	7aba      	ldrb	r2, [r7, #10]
 80164ea:	7af9      	ldrb	r1, [r7, #11]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	47a0      	blx	r4
 80164f2:	4603      	mov	r3, r0
 80164f4:	e002      	b.n	80164fc <u8x8_cad_011+0x80>
    default:
      return 0;
 80164f6:	2300      	movs	r3, #0
 80164f8:	e000      	b.n	80164fc <u8x8_cad_011+0x80>
  }
  return 1;
 80164fa:	2301      	movs	r3, #1
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3714      	adds	r7, #20
 8016500:	46bd      	mov	sp, r7
 8016502:	bd90      	pop	{r4, r7, pc}

08016504 <u8x8_d_uc1638_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b086      	sub	sp, #24
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	607b      	str	r3, [r7, #4]
 801650e:	460b      	mov	r3, r1
 8016510:	72fb      	strb	r3, [r7, #11]
 8016512:	4613      	mov	r3, r2
 8016514:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8016516:	7afb      	ldrb	r3, [r7, #11]
 8016518:	3b0b      	subs	r3, #11
 801651a:	2b04      	cmp	r3, #4
 801651c:	f200 809e 	bhi.w	801665c <u8x8_d_uc1638_common+0x158>
 8016520:	a201      	add	r2, pc, #4	; (adr r2, 8016528 <u8x8_d_uc1638_common+0x24>)
 8016522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016526:	bf00      	nop
 8016528:	080165f1 	.word	0x080165f1
 801652c:	0801665d 	.word	0x0801665d
 8016530:	0801660b 	.word	0x0801660b
 8016534:	0801663d 	.word	0x0801663d
 8016538:	0801653d 	.word	0x0801653d
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f7ff ff2b 	bl	8016398 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	795b      	ldrb	r3, [r3, #5]
 8016546:	75fb      	strb	r3, [r7, #23]
	  x += u8x8->x_offset & 15; //I find this string in the new version
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801654e:	f003 030f 	and.w	r3, r3, #15
 8016552:	b2da      	uxtb	r2, r3
 8016554:	7dfb      	ldrb	r3, [r7, #23]
 8016556:	4413      	add	r3, r2
 8016558:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 801655a:	7dfb      	ldrb	r3, [r7, #23]
 801655c:	00db      	lsls	r3, r3, #3
 801655e:	75fb      	strb	r3, [r7, #23]

      u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
 8016560:	2104      	movs	r1, #4
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f7ff fee1 	bl	801632a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, x);
 8016568:	7dfb      	ldrb	r3, [r7, #23]
 801656a:	4619      	mov	r1, r3
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f7ff feee 	bl	801634e <u8x8_cad_SendArg>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	799b      	ldrb	r3, [r3, #6]
 8016576:	75bb      	strb	r3, [r7, #22]
	  y += u8x8->x_offset >> 4;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801657e:	091b      	lsrs	r3, r3, #4
 8016580:	b2da      	uxtb	r2, r3
 8016582:	7dbb      	ldrb	r3, [r7, #22]
 8016584:	4413      	add	r3, r2
 8016586:	75bb      	strb	r3, [r7, #22]
      //y += u8x8->x_offset;
      //y *= 2;		/* for B/W mode, use only every second page */

      u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
 8016588:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801658c:	f003 030f 	and.w	r3, r3, #15
 8016590:	b25b      	sxtb	r3, r3
 8016592:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8016596:	b25b      	sxtb	r3, r3
 8016598:	b2db      	uxtb	r3, r3
 801659a:	4619      	mov	r1, r3
 801659c:	68f8      	ldr	r0, [r7, #12]
 801659e:	f7ff fec4 	bl	801632a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
 80165a2:	7dbb      	ldrb	r3, [r7, #22]
 80165a4:	091b      	lsrs	r3, r3, #4
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80165ac:	b2db      	uxtb	r3, r3
 80165ae:	4619      	mov	r1, r3
 80165b0:	68f8      	ldr	r0, [r7, #12]
 80165b2:	f7ff feba 	bl	801632a <u8x8_cad_SendCmd>
    
    
      u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
 80165b6:	2101      	movs	r1, #1
 80165b8:	68f8      	ldr	r0, [r7, #12]
 80165ba:	f7ff feb6 	bl	801632a <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	791b      	ldrb	r3, [r3, #4]
 80165c2:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80165c4:	7d7b      	ldrb	r3, [r7, #21]
 80165c6:	00db      	lsls	r3, r3, #3
 80165c8:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80165d0:	7d7b      	ldrb	r3, [r7, #21]
 80165d2:	693a      	ldr	r2, [r7, #16]
 80165d4:	4619      	mov	r1, r3
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	f7ff fecb 	bl	8016372 <u8x8_cad_SendData>
	arg_int--;
 80165dc:	7abb      	ldrb	r3, [r7, #10]
 80165de:	3b01      	subs	r3, #1
 80165e0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80165e2:	7abb      	ldrb	r3, [r7, #10]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d1f3      	bne.n	80165d0 <u8x8_d_uc1638_common+0xcc>
      
      u8x8_cad_EndTransfer(u8x8);
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f7ff fee5 	bl	80163b8 <u8x8_cad_EndTransfer>
      break;
 80165ee:	e037      	b.n	8016660 <u8x8_d_uc1638_common+0x15c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80165f0:	7abb      	ldrb	r3, [r7, #10]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d104      	bne.n	8016600 <u8x8_d_uc1638_common+0xfc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
 80165f6:	491d      	ldr	r1, [pc, #116]	; (801666c <u8x8_d_uc1638_common+0x168>)
 80165f8:	68f8      	ldr	r0, [r7, #12]
 80165fa:	f7ff feed 	bl	80163d8 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
      break;
 80165fe:	e02f      	b.n	8016660 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
 8016600:	491b      	ldr	r1, [pc, #108]	; (8016670 <u8x8_d_uc1638_common+0x16c>)
 8016602:	68f8      	ldr	r0, [r7, #12]
 8016604:	f7ff fee8 	bl	80163d8 <u8x8_cad_SendSequence>
      break;
 8016608:	e02a      	b.n	8016660 <u8x8_d_uc1638_common+0x15c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 801660a:	7abb      	ldrb	r3, [r7, #10]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d10a      	bne.n	8016626 <u8x8_d_uc1638_common+0x122>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
 8016610:	4918      	ldr	r1, [pc, #96]	; (8016674 <u8x8_d_uc1638_common+0x170>)
 8016612:	68f8      	ldr	r0, [r7, #12]
 8016614:	f7ff fee0 	bl	80163d8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	7c9a      	ldrb	r2, [r3, #18]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8016624:	e01c      	b.n	8016660 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
 8016626:	4914      	ldr	r1, [pc, #80]	; (8016678 <u8x8_d_uc1638_common+0x174>)
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f7ff fed5 	bl	80163d8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	7cda      	ldrb	r2, [r3, #19]
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 801663a:	e011      	b.n	8016660 <u8x8_d_uc1638_common+0x15c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 801663c:	68f8      	ldr	r0, [r7, #12]
 801663e:	f7ff feab 	bl	8016398 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8016642:	2181      	movs	r1, #129	; 0x81
 8016644:	68f8      	ldr	r0, [r7, #12]
 8016646:	f7ff fe70 	bl	801632a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1638 has range from 0 to 255 */
 801664a:	7abb      	ldrb	r3, [r7, #10]
 801664c:	4619      	mov	r1, r3
 801664e:	68f8      	ldr	r0, [r7, #12]
 8016650:	f7ff fe7d 	bl	801634e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8016654:	68f8      	ldr	r0, [r7, #12]
 8016656:	f7ff feaf 	bl	80163b8 <u8x8_cad_EndTransfer>
      break;
 801665a:	e001      	b.n	8016660 <u8x8_d_uc1638_common+0x15c>
#endif
    default:
      return 0;
 801665c:	2300      	movs	r3, #0
 801665e:	e000      	b.n	8016662 <u8x8_d_uc1638_common+0x15e>
  }
  return 1;
 8016660:	2301      	movs	r3, #1
}
 8016662:	4618      	mov	r0, r3
 8016664:	3718      	adds	r7, #24
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}
 801666a:	bf00      	nop
 801666c:	08029320 	.word	0x08029320
 8016670:	08029328 	.word	0x08029328
 8016674:	08029330 	.word	0x08029330
 8016678:	08029338 	.word	0x08029338

0801667c <u8x8_d_uc1638_240x160>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1638_240x160(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b084      	sub	sp, #16
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	607b      	str	r3, [r7, #4]
 8016686:	460b      	mov	r3, r1
 8016688:	72fb      	strb	r3, [r7, #11]
 801668a:	4613      	mov	r3, r2
 801668c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 801668e:	7aba      	ldrb	r2, [r7, #10]
 8016690:	7af9      	ldrb	r1, [r7, #11]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	f7ff ff35 	bl	8016504 <u8x8_d_uc1638_common>
 801669a:	4603      	mov	r3, r0
 801669c:	2b00      	cmp	r3, #0
 801669e:	d114      	bne.n	80166ca <u8x8_d_uc1638_240x160+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 80166a0:	7afb      	ldrb	r3, [r7, #11]
 80166a2:	2b09      	cmp	r3, #9
 80166a4:	d002      	beq.n	80166ac <u8x8_d_uc1638_240x160+0x30>
 80166a6:	2b0a      	cmp	r3, #10
 80166a8:	d005      	beq.n	80166b6 <u8x8_d_uc1638_240x160+0x3a>
 80166aa:	e00c      	b.n	80166c6 <u8x8_d_uc1638_240x160+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_240x160_display_info);
 80166ac:	490a      	ldr	r1, [pc, #40]	; (80166d8 <u8x8_d_uc1638_240x160+0x5c>)
 80166ae:	68f8      	ldr	r0, [r7, #12]
 80166b0:	f000 f816 	bl	80166e0 <u8x8_d_helper_display_setup_memory>
	break;
 80166b4:	e00a      	b.n	80166cc <u8x8_d_uc1638_240x160+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80166b6:	68f8      	ldr	r0, [r7, #12]
 80166b8:	f000 f826 	bl	8016708 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_240x160_init_seq);
 80166bc:	4907      	ldr	r1, [pc, #28]	; (80166dc <u8x8_d_uc1638_240x160+0x60>)
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	f7ff fe8a 	bl	80163d8 <u8x8_cad_SendSequence>
	break;
 80166c4:	e002      	b.n	80166cc <u8x8_d_uc1638_240x160+0x50>
      default:
	return 0;		/* msg unknown */
 80166c6:	2300      	movs	r3, #0
 80166c8:	e001      	b.n	80166ce <u8x8_d_uc1638_240x160+0x52>
    }
  }
 80166ca:	bf00      	nop
  return 1;
 80166cc:	2301      	movs	r3, #1
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3710      	adds	r7, #16
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	08029340 	.word	0x08029340
 80166dc:	08029358 	.word	0x08029358

080166e0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80166e0:	b480      	push	{r7}
 80166e2:	b083      	sub	sp, #12
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	683a      	ldr	r2, [r7, #0]
 80166ee:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	7c9a      	ldrb	r2, [r3, #18]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80166fc:	bf00      	nop
 80166fe:	370c      	adds	r7, #12
 8016700:	46bd      	mov	sp, r7
 8016702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016706:	4770      	bx	lr

08016708 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016708:	b590      	push	{r4, r7, lr}
 801670a:	b083      	sub	sp, #12
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	695c      	ldr	r4, [r3, #20]
 8016714:	2300      	movs	r3, #0
 8016716:	2200      	movs	r2, #0
 8016718:	2128      	movs	r1, #40	; 0x28
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	68dc      	ldr	r4, [r3, #12]
 8016722:	2300      	movs	r3, #0
 8016724:	2200      	movs	r2, #0
 8016726:	2114      	movs	r1, #20
 8016728:	6878      	ldr	r0, [r7, #4]
 801672a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 801672c:	2201      	movs	r2, #1
 801672e:	214b      	movs	r1, #75	; 0x4b
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f000 f886 	bl	8016842 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	791b      	ldrb	r3, [r3, #4]
 801673c:	461a      	mov	r2, r3
 801673e:	2129      	movs	r1, #41	; 0x29
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f000 f87e 	bl	8016842 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8016746:	2200      	movs	r2, #0
 8016748:	214b      	movs	r1, #75	; 0x4b
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f000 f879 	bl	8016842 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	791b      	ldrb	r3, [r3, #4]
 8016756:	461a      	mov	r2, r3
 8016758:	2129      	movs	r1, #41	; 0x29
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f000 f871 	bl	8016842 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8016760:	2201      	movs	r2, #1
 8016762:	214b      	movs	r1, #75	; 0x4b
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f000 f86c 	bl	8016842 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	795b      	ldrb	r3, [r3, #5]
 8016770:	461a      	mov	r2, r3
 8016772:	2129      	movs	r1, #41	; 0x29
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f000 f864 	bl	8016842 <u8x8_gpio_call>
}    
 801677a:	bf00      	nop
 801677c:	370c      	adds	r7, #12
 801677e:	46bd      	mov	sp, r7
 8016780:	bd90      	pop	{r4, r7, pc}

08016782 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8016782:	b590      	push	{r4, r7, lr}
 8016784:	b085      	sub	sp, #20
 8016786:	af00      	add	r7, sp, #0
 8016788:	6078      	str	r0, [r7, #4]
 801678a:	4608      	mov	r0, r1
 801678c:	4611      	mov	r1, r2
 801678e:	461a      	mov	r2, r3
 8016790:	4603      	mov	r3, r0
 8016792:	70fb      	strb	r3, [r7, #3]
 8016794:	460b      	mov	r3, r1
 8016796:	70bb      	strb	r3, [r7, #2]
 8016798:	4613      	mov	r3, r2
 801679a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 801679c:	78fb      	ldrb	r3, [r7, #3]
 801679e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80167a0:	78bb      	ldrb	r3, [r7, #2]
 80167a2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80167a4:	787b      	ldrb	r3, [r7, #1]
 80167a6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80167a8:	6a3b      	ldr	r3, [r7, #32]
 80167aa:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	689c      	ldr	r4, [r3, #8]
 80167b0:	f107 0308 	add.w	r3, r7, #8
 80167b4:	2201      	movs	r2, #1
 80167b6:	210f      	movs	r1, #15
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	47a0      	blx	r4
 80167bc:	4603      	mov	r3, r0
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3714      	adds	r7, #20
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd90      	pop	{r4, r7, pc}

080167c6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80167c6:	b590      	push	{r4, r7, lr}
 80167c8:	b083      	sub	sp, #12
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	689c      	ldr	r4, [r3, #8]
 80167d2:	2300      	movs	r3, #0
 80167d4:	2200      	movs	r2, #0
 80167d6:	2109      	movs	r1, #9
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	47a0      	blx	r4
}
 80167dc:	bf00      	nop
 80167de:	370c      	adds	r7, #12
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd90      	pop	{r4, r7, pc}

080167e4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80167e4:	b590      	push	{r4, r7, lr}
 80167e6:	b083      	sub	sp, #12
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	689c      	ldr	r4, [r3, #8]
 80167f0:	2300      	movs	r3, #0
 80167f2:	2200      	movs	r2, #0
 80167f4:	210a      	movs	r1, #10
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	47a0      	blx	r4
}
 80167fa:	bf00      	nop
 80167fc:	370c      	adds	r7, #12
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd90      	pop	{r4, r7, pc}

08016802 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8016802:	b590      	push	{r4, r7, lr}
 8016804:	b083      	sub	sp, #12
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
 801680a:	460b      	mov	r3, r1
 801680c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	689c      	ldr	r4, [r3, #8]
 8016812:	78fa      	ldrb	r2, [r7, #3]
 8016814:	2300      	movs	r3, #0
 8016816:	210b      	movs	r1, #11
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	47a0      	blx	r4
}
 801681c:	bf00      	nop
 801681e:	370c      	adds	r7, #12
 8016820:	46bd      	mov	sp, r7
 8016822:	bd90      	pop	{r4, r7, pc}

08016824 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8016824:	b590      	push	{r4, r7, lr}
 8016826:	b083      	sub	sp, #12
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	689c      	ldr	r4, [r3, #8]
 8016830:	2300      	movs	r3, #0
 8016832:	2200      	movs	r2, #0
 8016834:	2110      	movs	r1, #16
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	47a0      	blx	r4
}
 801683a:	bf00      	nop
 801683c:	370c      	adds	r7, #12
 801683e:	46bd      	mov	sp, r7
 8016840:	bd90      	pop	{r4, r7, pc}

08016842 <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8016842:	b590      	push	{r4, r7, lr}
 8016844:	b083      	sub	sp, #12
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
 801684a:	460b      	mov	r3, r1
 801684c:	70fb      	strb	r3, [r7, #3]
 801684e:	4613      	mov	r3, r2
 8016850:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	695c      	ldr	r4, [r3, #20]
 8016856:	78ba      	ldrb	r2, [r7, #2]
 8016858:	78f9      	ldrb	r1, [r7, #3]
 801685a:	2300      	movs	r3, #0
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	47a0      	blx	r4
}
 8016860:	bf00      	nop
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	bd90      	pop	{r4, r7, pc}

08016868 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8016868:	b480      	push	{r7}
 801686a:	b085      	sub	sp, #20
 801686c:	af00      	add	r7, sp, #0
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	607b      	str	r3, [r7, #4]
 8016872:	460b      	mov	r3, r1
 8016874:	72fb      	strb	r3, [r7, #11]
 8016876:	4613      	mov	r3, r2
 8016878:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 801687a:	2300      	movs	r3, #0
}
 801687c:	4618      	mov	r0, r3
 801687e:	3714      	adds	r7, #20
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr

08016888 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2200      	movs	r2, #0
 8016894:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4a11      	ldr	r2, [pc, #68]	; (80168e0 <u8x8_SetupDefaults+0x58>)
 801689a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	4a10      	ldr	r2, [pc, #64]	; (80168e0 <u8x8_SetupDefaults+0x58>)
 80168a0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	4a0e      	ldr	r2, [pc, #56]	; (80168e0 <u8x8_SetupDefaults+0x58>)
 80168a6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4a0d      	ldr	r2, [pc, #52]	; (80168e0 <u8x8_SetupDefaults+0x58>)
 80168ac:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2200      	movs	r2, #0
 80168b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2200      	movs	r2, #0
 80168ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	22ff      	movs	r2, #255	; 0xff
 80168c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	22ff      	movs	r2, #255	; 0xff
 80168d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80168d4:	bf00      	nop
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr
 80168e0:	08016869 	.word	0x08016869

080168e4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]
 80168f0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	f7ff ffc8 	bl	8016888 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	68ba      	ldr	r2, [r7, #8]
 80168fc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	683a      	ldr	r2, [r7, #0]
 8016908:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	69ba      	ldr	r2, [r7, #24]
 801690e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f7ff ff58 	bl	80167c6 <u8x8_SetupMemory>
}
 8016916:	bf00      	nop
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <ADC_options_screen_func>:

#define max_edit_param 6


void ADC_options_screen_func(void)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af02      	add	r7, sp, #8
	RTC_view();
 8016926:	f001 f9cb 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801692a:	49aa      	ldr	r1, [pc, #680]	; (8016bd4 <ADC_options_screen_func+0x2b4>)
 801692c:	48aa      	ldr	r0, [pc, #680]	; (8016bd8 <ADC_options_screen_func+0x2b8>)
 801692e:	f7ff f88d 	bl	8015a4c <u8g2_SetFont>

	// PGA
	u8g2_DrawUTF8(&u8g2, 10, 40, "PGA:");
 8016932:	4baa      	ldr	r3, [pc, #680]	; (8016bdc <ADC_options_screen_func+0x2bc>)
 8016934:	2228      	movs	r2, #40	; 0x28
 8016936:	210a      	movs	r1, #10
 8016938:	48a7      	ldr	r0, [pc, #668]	; (8016bd8 <ADC_options_screen_func+0x2b8>)
 801693a:	f7fe ffe5 	bl	8015908 <u8g2_DrawUTF8>
	switch(PGA_GAIN)
 801693e:	4ba8      	ldr	r3, [pc, #672]	; (8016be0 <ADC_options_screen_func+0x2c0>)
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	2b08      	cmp	r3, #8
 8016944:	d849      	bhi.n	80169da <ADC_options_screen_func+0xba>
 8016946:	a201      	add	r2, pc, #4	; (adr r2, 801694c <ADC_options_screen_func+0x2c>)
 8016948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801694c:	08016971 	.word	0x08016971
 8016950:	0801697b 	.word	0x0801697b
 8016954:	08016987 	.word	0x08016987
 8016958:	08016993 	.word	0x08016993
 801695c:	0801699f 	.word	0x0801699f
 8016960:	080169ab 	.word	0x080169ab
 8016964:	080169b7 	.word	0x080169b7
 8016968:	080169c3 	.word	0x080169c3
 801696c:	080169cf 	.word	0x080169cf
	{
		case 0: sprintf(RAM,"OFF"); break;
 8016970:	499c      	ldr	r1, [pc, #624]	; (8016be4 <ADC_options_screen_func+0x2c4>)
 8016972:	489d      	ldr	r0, [pc, #628]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 8016974:	f007 faf4 	bl	801df60 <siprintf>
 8016978:	e02f      	b.n	80169da <ADC_options_screen_func+0xba>
		case 1: sprintf(RAM,"%d", 1); break;
 801697a:	2201      	movs	r2, #1
 801697c:	499b      	ldr	r1, [pc, #620]	; (8016bec <ADC_options_screen_func+0x2cc>)
 801697e:	489a      	ldr	r0, [pc, #616]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 8016980:	f007 faee 	bl	801df60 <siprintf>
 8016984:	e029      	b.n	80169da <ADC_options_screen_func+0xba>
		case 2: sprintf(RAM,"%d", 2); break;
 8016986:	2202      	movs	r2, #2
 8016988:	4998      	ldr	r1, [pc, #608]	; (8016bec <ADC_options_screen_func+0x2cc>)
 801698a:	4897      	ldr	r0, [pc, #604]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 801698c:	f007 fae8 	bl	801df60 <siprintf>
 8016990:	e023      	b.n	80169da <ADC_options_screen_func+0xba>
		case 3: sprintf(RAM,"%d", 4); break;
 8016992:	2204      	movs	r2, #4
 8016994:	4995      	ldr	r1, [pc, #596]	; (8016bec <ADC_options_screen_func+0x2cc>)
 8016996:	4894      	ldr	r0, [pc, #592]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 8016998:	f007 fae2 	bl	801df60 <siprintf>
 801699c:	e01d      	b.n	80169da <ADC_options_screen_func+0xba>
		case 4: sprintf(RAM,"%d", 8); break;
 801699e:	2208      	movs	r2, #8
 80169a0:	4992      	ldr	r1, [pc, #584]	; (8016bec <ADC_options_screen_func+0x2cc>)
 80169a2:	4891      	ldr	r0, [pc, #580]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 80169a4:	f007 fadc 	bl	801df60 <siprintf>
 80169a8:	e017      	b.n	80169da <ADC_options_screen_func+0xba>
		case 5: sprintf(RAM,"%d", 16); break;
 80169aa:	2210      	movs	r2, #16
 80169ac:	498f      	ldr	r1, [pc, #572]	; (8016bec <ADC_options_screen_func+0x2cc>)
 80169ae:	488e      	ldr	r0, [pc, #568]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 80169b0:	f007 fad6 	bl	801df60 <siprintf>
 80169b4:	e011      	b.n	80169da <ADC_options_screen_func+0xba>
		case 6: sprintf(RAM,"%d", 32); break;
 80169b6:	2220      	movs	r2, #32
 80169b8:	498c      	ldr	r1, [pc, #560]	; (8016bec <ADC_options_screen_func+0x2cc>)
 80169ba:	488b      	ldr	r0, [pc, #556]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 80169bc:	f007 fad0 	bl	801df60 <siprintf>
 80169c0:	e00b      	b.n	80169da <ADC_options_screen_func+0xba>
		case 7: sprintf(RAM,"%d", 64); break;
 80169c2:	2240      	movs	r2, #64	; 0x40
 80169c4:	4989      	ldr	r1, [pc, #548]	; (8016bec <ADC_options_screen_func+0x2cc>)
 80169c6:	4888      	ldr	r0, [pc, #544]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 80169c8:	f007 faca 	bl	801df60 <siprintf>
 80169cc:	e005      	b.n	80169da <ADC_options_screen_func+0xba>
		case 8: sprintf(RAM,"%d", 128); break;
 80169ce:	2280      	movs	r2, #128	; 0x80
 80169d0:	4986      	ldr	r1, [pc, #536]	; (8016bec <ADC_options_screen_func+0x2cc>)
 80169d2:	4885      	ldr	r0, [pc, #532]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 80169d4:	f007 fac4 	bl	801df60 <siprintf>
 80169d8:	bf00      	nop
	}
	Blink_Edit_Parameter(120, 40, RAM, edit_param, 0);
 80169da:	4b85      	ldr	r3, [pc, #532]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 80169dc:	781b      	ldrb	r3, [r3, #0]
 80169de:	2200      	movs	r2, #0
 80169e0:	9200      	str	r2, [sp, #0]
 80169e2:	4a81      	ldr	r2, [pc, #516]	; (8016be8 <ADC_options_screen_func+0x2c8>)
 80169e4:	2128      	movs	r1, #40	; 0x28
 80169e6:	2078      	movs	r0, #120	; 0x78
 80169e8:	f7ec fa72 	bl	8002ed0 <Blink_Edit_Parameter>

	// SPS
	u8g2_DrawUTF8(&u8g2, 10, 60, "SPS:");
 80169ec:	4b81      	ldr	r3, [pc, #516]	; (8016bf4 <ADC_options_screen_func+0x2d4>)
 80169ee:	223c      	movs	r2, #60	; 0x3c
 80169f0:	210a      	movs	r1, #10
 80169f2:	4879      	ldr	r0, [pc, #484]	; (8016bd8 <ADC_options_screen_func+0x2b8>)
 80169f4:	f7fe ff88 	bl	8015908 <u8g2_DrawUTF8>
	switch(ADC_SPS)
 80169f8:	4b7f      	ldr	r3, [pc, #508]	; (8016bf8 <ADC_options_screen_func+0x2d8>)
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	2b0f      	cmp	r3, #15
 80169fe:	f200 80c3 	bhi.w	8016b88 <ADC_options_screen_func+0x268>
 8016a02:	a201      	add	r2, pc, #4	; (adr r2, 8016a08 <ADC_options_screen_func+0xe8>)
 8016a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a08:	08016a49 	.word	0x08016a49
 8016a0c:	08016a5d 	.word	0x08016a5d
 8016a10:	08016a71 	.word	0x08016a71
 8016a14:	08016a85 	.word	0x08016a85
 8016a18:	08016a99 	.word	0x08016a99
 8016a1c:	08016aad 	.word	0x08016aad
 8016a20:	08016ac1 	.word	0x08016ac1
 8016a24:	08016ad5 	.word	0x08016ad5
 8016a28:	08016ae9 	.word	0x08016ae9
 8016a2c:	08016afd 	.word	0x08016afd
 8016a30:	08016b11 	.word	0x08016b11
 8016a34:	08016b25 	.word	0x08016b25
 8016a38:	08016b39 	.word	0x08016b39
 8016a3c:	08016b4d 	.word	0x08016b4d
 8016a40:	08016b61 	.word	0x08016b61
 8016a44:	08016b75 	.word	0x08016b75
	{
		case 0: Blink_Edit_Parameter(120, 60, "RATE_2SPS", edit_param, 1); break;
 8016a48:	4b69      	ldr	r3, [pc, #420]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	2201      	movs	r2, #1
 8016a4e:	9200      	str	r2, [sp, #0]
 8016a50:	4a6a      	ldr	r2, [pc, #424]	; (8016bfc <ADC_options_screen_func+0x2dc>)
 8016a52:	213c      	movs	r1, #60	; 0x3c
 8016a54:	2078      	movs	r0, #120	; 0x78
 8016a56:	f7ec fa3b 	bl	8002ed0 <Blink_Edit_Parameter>
 8016a5a:	e095      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 1: Blink_Edit_Parameter(120, 60, "RATE_4SPS", edit_param, 1); break;
 8016a5c:	4b64      	ldr	r3, [pc, #400]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	2201      	movs	r2, #1
 8016a62:	9200      	str	r2, [sp, #0]
 8016a64:	4a66      	ldr	r2, [pc, #408]	; (8016c00 <ADC_options_screen_func+0x2e0>)
 8016a66:	213c      	movs	r1, #60	; 0x3c
 8016a68:	2078      	movs	r0, #120	; 0x78
 8016a6a:	f7ec fa31 	bl	8002ed0 <Blink_Edit_Parameter>
 8016a6e:	e08b      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 2: Blink_Edit_Parameter(120, 60, "RATE_8SPS", edit_param, 1); break;
 8016a70:	4b5f      	ldr	r3, [pc, #380]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	2201      	movs	r2, #1
 8016a76:	9200      	str	r2, [sp, #0]
 8016a78:	4a62      	ldr	r2, [pc, #392]	; (8016c04 <ADC_options_screen_func+0x2e4>)
 8016a7a:	213c      	movs	r1, #60	; 0x3c
 8016a7c:	2078      	movs	r0, #120	; 0x78
 8016a7e:	f7ec fa27 	bl	8002ed0 <Blink_Edit_Parameter>
 8016a82:	e081      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 3: Blink_Edit_Parameter(120, 60, "RATE_16SPS", edit_param, 1); break;
 8016a84:	4b5a      	ldr	r3, [pc, #360]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016a86:	781b      	ldrb	r3, [r3, #0]
 8016a88:	2201      	movs	r2, #1
 8016a8a:	9200      	str	r2, [sp, #0]
 8016a8c:	4a5e      	ldr	r2, [pc, #376]	; (8016c08 <ADC_options_screen_func+0x2e8>)
 8016a8e:	213c      	movs	r1, #60	; 0x3c
 8016a90:	2078      	movs	r0, #120	; 0x78
 8016a92:	f7ec fa1d 	bl	8002ed0 <Blink_Edit_Parameter>
 8016a96:	e077      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 4: Blink_Edit_Parameter(120, 60, "RATE_32SPS", edit_param, 1); break;
 8016a98:	4b55      	ldr	r3, [pc, #340]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	2201      	movs	r2, #1
 8016a9e:	9200      	str	r2, [sp, #0]
 8016aa0:	4a5a      	ldr	r2, [pc, #360]	; (8016c0c <ADC_options_screen_func+0x2ec>)
 8016aa2:	213c      	movs	r1, #60	; 0x3c
 8016aa4:	2078      	movs	r0, #120	; 0x78
 8016aa6:	f7ec fa13 	bl	8002ed0 <Blink_Edit_Parameter>
 8016aaa:	e06d      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 5: Blink_Edit_Parameter(120, 60, "RATE_63SPS", edit_param, 1); break;
 8016aac:	4b50      	ldr	r3, [pc, #320]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	2201      	movs	r2, #1
 8016ab2:	9200      	str	r2, [sp, #0]
 8016ab4:	4a56      	ldr	r2, [pc, #344]	; (8016c10 <ADC_options_screen_func+0x2f0>)
 8016ab6:	213c      	movs	r1, #60	; 0x3c
 8016ab8:	2078      	movs	r0, #120	; 0x78
 8016aba:	f7ec fa09 	bl	8002ed0 <Blink_Edit_Parameter>
 8016abe:	e063      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 6: Blink_Edit_Parameter(120, 60, "RATE_125SPS", edit_param, 1); break;
 8016ac0:	4b4b      	ldr	r3, [pc, #300]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016ac2:	781b      	ldrb	r3, [r3, #0]
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	9200      	str	r2, [sp, #0]
 8016ac8:	4a52      	ldr	r2, [pc, #328]	; (8016c14 <ADC_options_screen_func+0x2f4>)
 8016aca:	213c      	movs	r1, #60	; 0x3c
 8016acc:	2078      	movs	r0, #120	; 0x78
 8016ace:	f7ec f9ff 	bl	8002ed0 <Blink_Edit_Parameter>
 8016ad2:	e059      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 7: Blink_Edit_Parameter(120, 60, "RATE_250SPS", edit_param, 1); break;
 8016ad4:	4b46      	ldr	r3, [pc, #280]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	2201      	movs	r2, #1
 8016ada:	9200      	str	r2, [sp, #0]
 8016adc:	4a4e      	ldr	r2, [pc, #312]	; (8016c18 <ADC_options_screen_func+0x2f8>)
 8016ade:	213c      	movs	r1, #60	; 0x3c
 8016ae0:	2078      	movs	r0, #120	; 0x78
 8016ae2:	f7ec f9f5 	bl	8002ed0 <Blink_Edit_Parameter>
 8016ae6:	e04f      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 8: Blink_Edit_Parameter(120, 60, "RATE_500SPS", edit_param, 1); break;
 8016ae8:	4b41      	ldr	r3, [pc, #260]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016aea:	781b      	ldrb	r3, [r3, #0]
 8016aec:	2201      	movs	r2, #1
 8016aee:	9200      	str	r2, [sp, #0]
 8016af0:	4a4a      	ldr	r2, [pc, #296]	; (8016c1c <ADC_options_screen_func+0x2fc>)
 8016af2:	213c      	movs	r1, #60	; 0x3c
 8016af4:	2078      	movs	r0, #120	; 0x78
 8016af6:	f7ec f9eb 	bl	8002ed0 <Blink_Edit_Parameter>
 8016afa:	e045      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 9: Blink_Edit_Parameter(120, 60, "RATE_1000SPS", edit_param, 1); break;
 8016afc:	4b3c      	ldr	r3, [pc, #240]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	2201      	movs	r2, #1
 8016b02:	9200      	str	r2, [sp, #0]
 8016b04:	4a46      	ldr	r2, [pc, #280]	; (8016c20 <ADC_options_screen_func+0x300>)
 8016b06:	213c      	movs	r1, #60	; 0x3c
 8016b08:	2078      	movs	r0, #120	; 0x78
 8016b0a:	f7ec f9e1 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b0e:	e03b      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 10: Blink_Edit_Parameter(120, 60, "RATE_2000SPS", edit_param, 1); break;
 8016b10:	4b37      	ldr	r3, [pc, #220]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2201      	movs	r2, #1
 8016b16:	9200      	str	r2, [sp, #0]
 8016b18:	4a42      	ldr	r2, [pc, #264]	; (8016c24 <ADC_options_screen_func+0x304>)
 8016b1a:	213c      	movs	r1, #60	; 0x3c
 8016b1c:	2078      	movs	r0, #120	; 0x78
 8016b1e:	f7ec f9d7 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b22:	e031      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 11: Blink_Edit_Parameter(120, 60, "RATE_4000SPS", edit_param, 1); break;
 8016b24:	4b32      	ldr	r3, [pc, #200]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	2201      	movs	r2, #1
 8016b2a:	9200      	str	r2, [sp, #0]
 8016b2c:	4a3e      	ldr	r2, [pc, #248]	; (8016c28 <ADC_options_screen_func+0x308>)
 8016b2e:	213c      	movs	r1, #60	; 0x3c
 8016b30:	2078      	movs	r0, #120	; 0x78
 8016b32:	f7ec f9cd 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b36:	e027      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 12: Blink_Edit_Parameter(120, 60, "RATE_8000SPS", edit_param, 1); break;
 8016b38:	4b2d      	ldr	r3, [pc, #180]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016b3a:	781b      	ldrb	r3, [r3, #0]
 8016b3c:	2201      	movs	r2, #1
 8016b3e:	9200      	str	r2, [sp, #0]
 8016b40:	4a3a      	ldr	r2, [pc, #232]	; (8016c2c <ADC_options_screen_func+0x30c>)
 8016b42:	213c      	movs	r1, #60	; 0x3c
 8016b44:	2078      	movs	r0, #120	; 0x78
 8016b46:	f7ec f9c3 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b4a:	e01d      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 13: Blink_Edit_Parameter(120, 60, "RATE_16000SPS", edit_param, 1); break;
 8016b4c:	4b28      	ldr	r3, [pc, #160]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	2201      	movs	r2, #1
 8016b52:	9200      	str	r2, [sp, #0]
 8016b54:	4a36      	ldr	r2, [pc, #216]	; (8016c30 <ADC_options_screen_func+0x310>)
 8016b56:	213c      	movs	r1, #60	; 0x3c
 8016b58:	2078      	movs	r0, #120	; 0x78
 8016b5a:	f7ec f9b9 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b5e:	e013      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 14: Blink_Edit_Parameter(120, 60, "RATE_32000SPS", edit_param, 1); break;
 8016b60:	4b23      	ldr	r3, [pc, #140]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2201      	movs	r2, #1
 8016b66:	9200      	str	r2, [sp, #0]
 8016b68:	4a32      	ldr	r2, [pc, #200]	; (8016c34 <ADC_options_screen_func+0x314>)
 8016b6a:	213c      	movs	r1, #60	; 0x3c
 8016b6c:	2078      	movs	r0, #120	; 0x78
 8016b6e:	f7ec f9af 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b72:	e009      	b.n	8016b88 <ADC_options_screen_func+0x268>
		case 15: Blink_Edit_Parameter(120, 60, "RATE_64000SPS", edit_param, 1); break;
 8016b74:	4b1e      	ldr	r3, [pc, #120]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	2201      	movs	r2, #1
 8016b7a:	9200      	str	r2, [sp, #0]
 8016b7c:	4a2e      	ldr	r2, [pc, #184]	; (8016c38 <ADC_options_screen_func+0x318>)
 8016b7e:	213c      	movs	r1, #60	; 0x3c
 8016b80:	2078      	movs	r0, #120	; 0x78
 8016b82:	f7ec f9a5 	bl	8002ed0 <Blink_Edit_Parameter>
 8016b86:	bf00      	nop
	}

	// Calibration
	u8g2_DrawUTF8(&u8g2, 10, 80, "CAL:");
 8016b88:	4b2c      	ldr	r3, [pc, #176]	; (8016c3c <ADC_options_screen_func+0x31c>)
 8016b8a:	2250      	movs	r2, #80	; 0x50
 8016b8c:	210a      	movs	r1, #10
 8016b8e:	4812      	ldr	r0, [pc, #72]	; (8016bd8 <ADC_options_screen_func+0x2b8>)
 8016b90:	f7fe feba 	bl	8015908 <u8g2_DrawUTF8>
	switch(adc_calibration_mode)
 8016b94:	4b2a      	ldr	r3, [pc, #168]	; (8016c40 <ADC_options_screen_func+0x320>)
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	2b02      	cmp	r3, #2
 8016b9a:	d057      	beq.n	8016c4c <ADC_options_screen_func+0x32c>
 8016b9c:	2b02      	cmp	r3, #2
 8016b9e:	dc5f      	bgt.n	8016c60 <ADC_options_screen_func+0x340>
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d002      	beq.n	8016baa <ADC_options_screen_func+0x28a>
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d00a      	beq.n	8016bbe <ADC_options_screen_func+0x29e>
 8016ba8:	e05a      	b.n	8016c60 <ADC_options_screen_func+0x340>
	{
		case 0: Blink_Edit_Parameter(120, 80, "SELF", edit_param, 2); break;
 8016baa:	4b11      	ldr	r3, [pc, #68]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	2202      	movs	r2, #2
 8016bb0:	9200      	str	r2, [sp, #0]
 8016bb2:	4a24      	ldr	r2, [pc, #144]	; (8016c44 <ADC_options_screen_func+0x324>)
 8016bb4:	2150      	movs	r1, #80	; 0x50
 8016bb6:	2078      	movs	r0, #120	; 0x78
 8016bb8:	f7ec f98a 	bl	8002ed0 <Blink_Edit_Parameter>
 8016bbc:	e050      	b.n	8016c60 <ADC_options_screen_func+0x340>
		case 1: Blink_Edit_Parameter(120, 80, "OFFSET", edit_param, 2); break;
 8016bbe:	4b0c      	ldr	r3, [pc, #48]	; (8016bf0 <ADC_options_screen_func+0x2d0>)
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	2202      	movs	r2, #2
 8016bc4:	9200      	str	r2, [sp, #0]
 8016bc6:	4a20      	ldr	r2, [pc, #128]	; (8016c48 <ADC_options_screen_func+0x328>)
 8016bc8:	2150      	movs	r1, #80	; 0x50
 8016bca:	2078      	movs	r0, #120	; 0x78
 8016bcc:	f7ec f980 	bl	8002ed0 <Blink_Edit_Parameter>
 8016bd0:	e046      	b.n	8016c60 <ADC_options_screen_func+0x340>
 8016bd2:	bf00      	nop
 8016bd4:	080273d0 	.word	0x080273d0
 8016bd8:	20001f54 	.word	0x20001f54
 8016bdc:	08022230 	.word	0x08022230
 8016be0:	20000072 	.word	0x20000072
 8016be4:	08022238 	.word	0x08022238
 8016be8:	20002008 	.word	0x20002008
 8016bec:	0802223c 	.word	0x0802223c
 8016bf0:	200007ea 	.word	0x200007ea
 8016bf4:	08022240 	.word	0x08022240
 8016bf8:	20000073 	.word	0x20000073
 8016bfc:	08022248 	.word	0x08022248
 8016c00:	08022254 	.word	0x08022254
 8016c04:	08022260 	.word	0x08022260
 8016c08:	0802226c 	.word	0x0802226c
 8016c0c:	08022278 	.word	0x08022278
 8016c10:	08022284 	.word	0x08022284
 8016c14:	08022290 	.word	0x08022290
 8016c18:	0802229c 	.word	0x0802229c
 8016c1c:	080222a8 	.word	0x080222a8
 8016c20:	080222b4 	.word	0x080222b4
 8016c24:	080222c4 	.word	0x080222c4
 8016c28:	080222d4 	.word	0x080222d4
 8016c2c:	080222e4 	.word	0x080222e4
 8016c30:	080222f4 	.word	0x080222f4
 8016c34:	08022304 	.word	0x08022304
 8016c38:	08022314 	.word	0x08022314
 8016c3c:	08022324 	.word	0x08022324
 8016c40:	20000837 	.word	0x20000837
 8016c44:	0802232c 	.word	0x0802232c
 8016c48:	08022334 	.word	0x08022334
		case 2: Blink_Edit_Parameter(120, 80, "FULL SCALE", edit_param, 2); break;
 8016c4c:	4b2a      	ldr	r3, [pc, #168]	; (8016cf8 <ADC_options_screen_func+0x3d8>)
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2202      	movs	r2, #2
 8016c52:	9200      	str	r2, [sp, #0]
 8016c54:	4a29      	ldr	r2, [pc, #164]	; (8016cfc <ADC_options_screen_func+0x3dc>)
 8016c56:	2150      	movs	r1, #80	; 0x50
 8016c58:	2078      	movs	r0, #120	; 0x78
 8016c5a:	f7ec f939 	bl	8002ed0 <Blink_Edit_Parameter>
 8016c5e:	bf00      	nop
	}

	// Window size
	u8g2_DrawUTF8(&u8g2, 10, 100, "SIZE:");
 8016c60:	4b27      	ldr	r3, [pc, #156]	; (8016d00 <ADC_options_screen_func+0x3e0>)
 8016c62:	2264      	movs	r2, #100	; 0x64
 8016c64:	210a      	movs	r1, #10
 8016c66:	4827      	ldr	r0, [pc, #156]	; (8016d04 <ADC_options_screen_func+0x3e4>)
 8016c68:	f7fe fe4e 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", ADC_Buff_size);
 8016c6c:	4b26      	ldr	r3, [pc, #152]	; (8016d08 <ADC_options_screen_func+0x3e8>)
 8016c6e:	881b      	ldrh	r3, [r3, #0]
 8016c70:	461a      	mov	r2, r3
 8016c72:	4926      	ldr	r1, [pc, #152]	; (8016d0c <ADC_options_screen_func+0x3ec>)
 8016c74:	4826      	ldr	r0, [pc, #152]	; (8016d10 <ADC_options_screen_func+0x3f0>)
 8016c76:	f007 f973 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(120, 100, RAM, edit_param, 3);
 8016c7a:	4b1f      	ldr	r3, [pc, #124]	; (8016cf8 <ADC_options_screen_func+0x3d8>)
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	2203      	movs	r2, #3
 8016c80:	9200      	str	r2, [sp, #0]
 8016c82:	4a23      	ldr	r2, [pc, #140]	; (8016d10 <ADC_options_screen_func+0x3f0>)
 8016c84:	2164      	movs	r1, #100	; 0x64
 8016c86:	2078      	movs	r0, #120	; 0x78
 8016c88:	f7ec f922 	bl	8002ed0 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 120, "OFF PERIOD:");
 8016c8c:	4b21      	ldr	r3, [pc, #132]	; (8016d14 <ADC_options_screen_func+0x3f4>)
 8016c8e:	2278      	movs	r2, #120	; 0x78
 8016c90:	210a      	movs	r1, #10
 8016c92:	481c      	ldr	r0, [pc, #112]	; (8016d04 <ADC_options_screen_func+0x3e4>)
 8016c94:	f7fe fe38 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoOffCoef_period);
 8016c98:	4b1f      	ldr	r3, [pc, #124]	; (8016d18 <ADC_options_screen_func+0x3f8>)
 8016c9a:	881b      	ldrh	r3, [r3, #0]
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	491b      	ldr	r1, [pc, #108]	; (8016d0c <ADC_options_screen_func+0x3ec>)
 8016ca0:	481b      	ldr	r0, [pc, #108]	; (8016d10 <ADC_options_screen_func+0x3f0>)
 8016ca2:	f007 f95d 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(120, 120, RAM, edit_param, 4);
 8016ca6:	4b14      	ldr	r3, [pc, #80]	; (8016cf8 <ADC_options_screen_func+0x3d8>)
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	2204      	movs	r2, #4
 8016cac:	9200      	str	r2, [sp, #0]
 8016cae:	4a18      	ldr	r2, [pc, #96]	; (8016d10 <ADC_options_screen_func+0x3f0>)
 8016cb0:	2178      	movs	r1, #120	; 0x78
 8016cb2:	2078      	movs	r0, #120	; 0x78
 8016cb4:	f7ec f90c 	bl	8002ed0 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 140, "GAIN PERIOD:");
 8016cb8:	4b18      	ldr	r3, [pc, #96]	; (8016d1c <ADC_options_screen_func+0x3fc>)
 8016cba:	228c      	movs	r2, #140	; 0x8c
 8016cbc:	210a      	movs	r1, #10
 8016cbe:	4811      	ldr	r0, [pc, #68]	; (8016d04 <ADC_options_screen_func+0x3e4>)
 8016cc0:	f7fe fe22 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoGainCoef_period);
 8016cc4:	4b16      	ldr	r3, [pc, #88]	; (8016d20 <ADC_options_screen_func+0x400>)
 8016cc6:	881b      	ldrh	r3, [r3, #0]
 8016cc8:	461a      	mov	r2, r3
 8016cca:	4910      	ldr	r1, [pc, #64]	; (8016d0c <ADC_options_screen_func+0x3ec>)
 8016ccc:	4810      	ldr	r0, [pc, #64]	; (8016d10 <ADC_options_screen_func+0x3f0>)
 8016cce:	f007 f947 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(160, 140, RAM, edit_param, 5);
 8016cd2:	4b09      	ldr	r3, [pc, #36]	; (8016cf8 <ADC_options_screen_func+0x3d8>)
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	2205      	movs	r2, #5
 8016cd8:	9200      	str	r2, [sp, #0]
 8016cda:	4a0d      	ldr	r2, [pc, #52]	; (8016d10 <ADC_options_screen_func+0x3f0>)
 8016cdc:	218c      	movs	r1, #140	; 0x8c
 8016cde:	20a0      	movs	r0, #160	; 0xa0
 8016ce0:	f7ec f8f6 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016ce4:	4807      	ldr	r0, [pc, #28]	; (8016d04 <ADC_options_screen_func+0x3e4>)
 8016ce6:	f7fe f874 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016cea:	4806      	ldr	r0, [pc, #24]	; (8016d04 <ADC_options_screen_func+0x3e4>)
 8016cec:	f7fd fffe 	bl	8014cec <u8g2_ClearBuffer>
}
 8016cf0:	bf00      	nop
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	200007ea 	.word	0x200007ea
 8016cfc:	0802233c 	.word	0x0802233c
 8016d00:	08022348 	.word	0x08022348
 8016d04:	20001f54 	.word	0x20001f54
 8016d08:	20000074 	.word	0x20000074
 8016d0c:	0802223c 	.word	0x0802223c
 8016d10:	20002008 	.word	0x20002008
 8016d14:	08022350 	.word	0x08022350
 8016d18:	200020f4 	.word	0x200020f4
 8016d1c:	0802235c 	.word	0x0802235c
 8016d20:	2000208c 	.word	0x2000208c

08016d24 <ADC_options_screen_S6>:



// DOWN
void ADC_options_screen_S6(void)
{
 8016d24:	b480      	push	{r7}
 8016d26:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8016d28:	4b07      	ldr	r3, [pc, #28]	; (8016d48 <ADC_options_screen_S6+0x24>)
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	2b04      	cmp	r3, #4
 8016d2e:	d805      	bhi.n	8016d3c <ADC_options_screen_S6+0x18>
 8016d30:	4b05      	ldr	r3, [pc, #20]	; (8016d48 <ADC_options_screen_S6+0x24>)
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	3301      	adds	r3, #1
 8016d36:	b2da      	uxtb	r2, r3
 8016d38:	4b03      	ldr	r3, [pc, #12]	; (8016d48 <ADC_options_screen_S6+0x24>)
 8016d3a:	701a      	strb	r2, [r3, #0]
}
 8016d3c:	bf00      	nop
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr
 8016d46:	bf00      	nop
 8016d48:	200007ea 	.word	0x200007ea

08016d4c <ADC_options_screen_S7>:

// UP
void ADC_options_screen_S7(void)
{
 8016d4c:	b480      	push	{r7}
 8016d4e:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8016d50:	4b07      	ldr	r3, [pc, #28]	; (8016d70 <ADC_options_screen_S7+0x24>)
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d005      	beq.n	8016d64 <ADC_options_screen_S7+0x18>
 8016d58:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <ADC_options_screen_S7+0x24>)
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	3b01      	subs	r3, #1
 8016d5e:	b2da      	uxtb	r2, r3
 8016d60:	4b03      	ldr	r3, [pc, #12]	; (8016d70 <ADC_options_screen_S7+0x24>)
 8016d62:	701a      	strb	r2, [r3, #0]
}
 8016d64:	bf00      	nop
 8016d66:	46bd      	mov	sp, r7
 8016d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6c:	4770      	bx	lr
 8016d6e:	bf00      	nop
 8016d70:	200007ea 	.word	0x200007ea

08016d74 <ADC_options_screen_S9>:


// MENU
void ADC_options_screen_S9(void)
{
 8016d74:	b480      	push	{r7}
 8016d76:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016d78:	4b06      	ldr	r3, [pc, #24]	; (8016d94 <ADC_options_screen_S9+0x20>)
 8016d7a:	2208      	movs	r2, #8
 8016d7c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016d7e:	4b06      	ldr	r3, [pc, #24]	; (8016d98 <ADC_options_screen_S9+0x24>)
 8016d80:	22ff      	movs	r2, #255	; 0xff
 8016d82:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8016d84:	4b05      	ldr	r3, [pc, #20]	; (8016d9c <ADC_options_screen_S9+0x28>)
 8016d86:	2205      	movs	r2, #5
 8016d88:	701a      	strb	r2, [r3, #0]
}
 8016d8a:	bf00      	nop
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d92:	4770      	bx	lr
 8016d94:	2000004c 	.word	0x2000004c
 8016d98:	20000330 	.word	0x20000330
 8016d9c:	20000331 	.word	0x20000331

08016da0 <ADC_options_screen_S4>:



// ENTER
void ADC_options_screen_S4(void)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016da4:	4b21      	ldr	r3, [pc, #132]	; (8016e2c <ADC_options_screen_S4+0x8c>)
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	2b05      	cmp	r3, #5
 8016daa:	d83c      	bhi.n	8016e26 <ADC_options_screen_S4+0x86>
 8016dac:	a201      	add	r2, pc, #4	; (adr r2, 8016db4 <ADC_options_screen_S4+0x14>)
 8016dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016db2:	bf00      	nop
 8016db4:	08016dcd 	.word	0x08016dcd
 8016db8:	08016ddb 	.word	0x08016ddb
 8016dbc:	08016de9 	.word	0x08016de9
 8016dc0:	08016dfd 	.word	0x08016dfd
 8016dc4:	08016e0b 	.word	0x08016e0b
 8016dc8:	08016e19 	.word	0x08016e19
	{
		case 0: Save_Settings(PGA_GAIN_tag, PGA_GAIN); break;
 8016dcc:	4b18      	ldr	r3, [pc, #96]	; (8016e30 <ADC_options_screen_S4+0x90>)
 8016dce:	781b      	ldrb	r3, [r3, #0]
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	2008      	movs	r0, #8
 8016dd4:	f7ee fc84 	bl	80056e0 <Save_Settings>
 8016dd8:	e025      	b.n	8016e26 <ADC_options_screen_S4+0x86>
		case 1: Save_Settings(ADC_SPS_tag, ADC_SPS); break;
 8016dda:	4b16      	ldr	r3, [pc, #88]	; (8016e34 <ADC_options_screen_S4+0x94>)
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	4619      	mov	r1, r3
 8016de0:	2009      	movs	r0, #9
 8016de2:	f7ee fc7d 	bl	80056e0 <Save_Settings>
 8016de6:	e01e      	b.n	8016e26 <ADC_options_screen_S4+0x86>
		case 2: Save_Settings(adc_calibration_mode_tag, adc_calibration_mode); adc_start_calibration=1; break;
 8016de8:	4b13      	ldr	r3, [pc, #76]	; (8016e38 <ADC_options_screen_S4+0x98>)
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	4619      	mov	r1, r3
 8016dee:	200a      	movs	r0, #10
 8016df0:	f7ee fc76 	bl	80056e0 <Save_Settings>
 8016df4:	4b11      	ldr	r3, [pc, #68]	; (8016e3c <ADC_options_screen_S4+0x9c>)
 8016df6:	2201      	movs	r2, #1
 8016df8:	701a      	strb	r2, [r3, #0]
 8016dfa:	e014      	b.n	8016e26 <ADC_options_screen_S4+0x86>
		case 3: Save_Settings(ADC_Buff_size_tag, ADC_Buff_size); break;
 8016dfc:	4b10      	ldr	r3, [pc, #64]	; (8016e40 <ADC_options_screen_S4+0xa0>)
 8016dfe:	881b      	ldrh	r3, [r3, #0]
 8016e00:	4619      	mov	r1, r3
 8016e02:	200b      	movs	r0, #11
 8016e04:	f7ee fc6c 	bl	80056e0 <Save_Settings>
 8016e08:	e00d      	b.n	8016e26 <ADC_options_screen_S4+0x86>
		case 4: Save_Settings(AutoOffCoef_period_tag, AutoOffCoef_period); break;
 8016e0a:	4b0e      	ldr	r3, [pc, #56]	; (8016e44 <ADC_options_screen_S4+0xa4>)
 8016e0c:	881b      	ldrh	r3, [r3, #0]
 8016e0e:	4619      	mov	r1, r3
 8016e10:	201f      	movs	r0, #31
 8016e12:	f7ee fc65 	bl	80056e0 <Save_Settings>
 8016e16:	e006      	b.n	8016e26 <ADC_options_screen_S4+0x86>
		case 5: Save_Settings(AutoGainCoef_period_tag, AutoGainCoef_period); break;
 8016e18:	4b0b      	ldr	r3, [pc, #44]	; (8016e48 <ADC_options_screen_S4+0xa8>)
 8016e1a:	881b      	ldrh	r3, [r3, #0]
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	2021      	movs	r0, #33	; 0x21
 8016e20:	f7ee fc5e 	bl	80056e0 <Save_Settings>
 8016e24:	bf00      	nop
	}
}
 8016e26:	bf00      	nop
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	200007ea 	.word	0x200007ea
 8016e30:	20000072 	.word	0x20000072
 8016e34:	20000073 	.word	0x20000073
 8016e38:	20000837 	.word	0x20000837
 8016e3c:	200007b4 	.word	0x200007b4
 8016e40:	20000074 	.word	0x20000074
 8016e44:	200020f4 	.word	0x200020f4
 8016e48:	2000208c 	.word	0x2000208c

08016e4c <ADC_options_screen_S8>:



// BACKWARD
void ADC_options_screen_S8(void)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016e50:	4b35      	ldr	r3, [pc, #212]	; (8016f28 <ADC_options_screen_S8+0xdc>)
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	2b05      	cmp	r3, #5
 8016e56:	d864      	bhi.n	8016f22 <ADC_options_screen_S8+0xd6>
 8016e58:	a201      	add	r2, pc, #4	; (adr r2, 8016e60 <ADC_options_screen_S8+0x14>)
 8016e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e5e:	bf00      	nop
 8016e60:	08016e79 	.word	0x08016e79
 8016e64:	08016ea3 	.word	0x08016ea3
 8016e68:	08016eb9 	.word	0x08016eb9
 8016e6c:	08016ecf 	.word	0x08016ecf
 8016e70:	08016ee5 	.word	0x08016ee5
 8016e74:	08016efb 	.word	0x08016efb
	{
		case 0: if(PGA_GAIN>0)PGA_GAIN--;
 8016e78:	4b2c      	ldr	r3, [pc, #176]	; (8016f2c <ADC_options_screen_S8+0xe0>)
 8016e7a:	781b      	ldrb	r3, [r3, #0]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d005      	beq.n	8016e8c <ADC_options_screen_S8+0x40>
 8016e80:	4b2a      	ldr	r3, [pc, #168]	; (8016f2c <ADC_options_screen_S8+0xe0>)
 8016e82:	781b      	ldrb	r3, [r3, #0]
 8016e84:	3b01      	subs	r3, #1
 8016e86:	b2da      	uxtb	r2, r3
 8016e88:	4b28      	ldr	r3, [pc, #160]	; (8016f2c <ADC_options_screen_S8+0xe0>)
 8016e8a:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016e8c:	4b27      	ldr	r3, [pc, #156]	; (8016f2c <ADC_options_screen_S8+0xe0>)
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7ea fbf9 	bl	8001688 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016e96:	4b26      	ldr	r3, [pc, #152]	; (8016f30 <ADC_options_screen_S8+0xe4>)
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7ea f956 	bl	800114c <ADC_Conversion>
		break;
 8016ea0:	e03f      	b.n	8016f22 <ADC_options_screen_S8+0xd6>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016ea2:	4b23      	ldr	r3, [pc, #140]	; (8016f30 <ADC_options_screen_S8+0xe4>)
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d032      	beq.n	8016f10 <ADC_options_screen_S8+0xc4>
 8016eaa:	4b21      	ldr	r3, [pc, #132]	; (8016f30 <ADC_options_screen_S8+0xe4>)
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	3b01      	subs	r3, #1
 8016eb0:	b2da      	uxtb	r2, r3
 8016eb2:	4b1f      	ldr	r3, [pc, #124]	; (8016f30 <ADC_options_screen_S8+0xe4>)
 8016eb4:	701a      	strb	r2, [r3, #0]
 8016eb6:	e02b      	b.n	8016f10 <ADC_options_screen_S8+0xc4>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016eb8:	4b1e      	ldr	r3, [pc, #120]	; (8016f34 <ADC_options_screen_S8+0xe8>)
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d029      	beq.n	8016f14 <ADC_options_screen_S8+0xc8>
 8016ec0:	4b1c      	ldr	r3, [pc, #112]	; (8016f34 <ADC_options_screen_S8+0xe8>)
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	3b01      	subs	r3, #1
 8016ec6:	b2da      	uxtb	r2, r3
 8016ec8:	4b1a      	ldr	r3, [pc, #104]	; (8016f34 <ADC_options_screen_S8+0xe8>)
 8016eca:	701a      	strb	r2, [r3, #0]
 8016ecc:	e022      	b.n	8016f14 <ADC_options_screen_S8+0xc8>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016ece:	4b1a      	ldr	r3, [pc, #104]	; (8016f38 <ADC_options_screen_S8+0xec>)
 8016ed0:	881b      	ldrh	r3, [r3, #0]
 8016ed2:	2b01      	cmp	r3, #1
 8016ed4:	d920      	bls.n	8016f18 <ADC_options_screen_S8+0xcc>
 8016ed6:	4b18      	ldr	r3, [pc, #96]	; (8016f38 <ADC_options_screen_S8+0xec>)
 8016ed8:	881b      	ldrh	r3, [r3, #0]
 8016eda:	3b01      	subs	r3, #1
 8016edc:	b29a      	uxth	r2, r3
 8016ede:	4b16      	ldr	r3, [pc, #88]	; (8016f38 <ADC_options_screen_S8+0xec>)
 8016ee0:	801a      	strh	r2, [r3, #0]
 8016ee2:	e019      	b.n	8016f18 <ADC_options_screen_S8+0xcc>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016ee4:	4b15      	ldr	r3, [pc, #84]	; (8016f3c <ADC_options_screen_S8+0xf0>)
 8016ee6:	881b      	ldrh	r3, [r3, #0]
 8016ee8:	2b05      	cmp	r3, #5
 8016eea:	d917      	bls.n	8016f1c <ADC_options_screen_S8+0xd0>
 8016eec:	4b13      	ldr	r3, [pc, #76]	; (8016f3c <ADC_options_screen_S8+0xf0>)
 8016eee:	881b      	ldrh	r3, [r3, #0]
 8016ef0:	3b01      	subs	r3, #1
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	4b11      	ldr	r3, [pc, #68]	; (8016f3c <ADC_options_screen_S8+0xf0>)
 8016ef6:	801a      	strh	r2, [r3, #0]
 8016ef8:	e010      	b.n	8016f1c <ADC_options_screen_S8+0xd0>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016efa:	4b11      	ldr	r3, [pc, #68]	; (8016f40 <ADC_options_screen_S8+0xf4>)
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	2b05      	cmp	r3, #5
 8016f00:	d90e      	bls.n	8016f20 <ADC_options_screen_S8+0xd4>
 8016f02:	4b0f      	ldr	r3, [pc, #60]	; (8016f40 <ADC_options_screen_S8+0xf4>)
 8016f04:	881b      	ldrh	r3, [r3, #0]
 8016f06:	3b01      	subs	r3, #1
 8016f08:	b29a      	uxth	r2, r3
 8016f0a:	4b0d      	ldr	r3, [pc, #52]	; (8016f40 <ADC_options_screen_S8+0xf4>)
 8016f0c:	801a      	strh	r2, [r3, #0]
 8016f0e:	e007      	b.n	8016f20 <ADC_options_screen_S8+0xd4>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016f10:	bf00      	nop
 8016f12:	e006      	b.n	8016f22 <ADC_options_screen_S8+0xd6>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016f14:	bf00      	nop
 8016f16:	e004      	b.n	8016f22 <ADC_options_screen_S8+0xd6>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016f18:	bf00      	nop
 8016f1a:	e002      	b.n	8016f22 <ADC_options_screen_S8+0xd6>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016f1c:	bf00      	nop
 8016f1e:	e000      	b.n	8016f22 <ADC_options_screen_S8+0xd6>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016f20:	bf00      	nop
	}
}
 8016f22:	bf00      	nop
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	200007ea 	.word	0x200007ea
 8016f2c:	20000072 	.word	0x20000072
 8016f30:	20000073 	.word	0x20000073
 8016f34:	20000837 	.word	0x20000837
 8016f38:	20000074 	.word	0x20000074
 8016f3c:	200020f4 	.word	0x200020f4
 8016f40:	2000208c 	.word	0x2000208c

08016f44 <ADC_options_screen_S5>:


// FORWARD
void ADC_options_screen_S5(void)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016f48:	4b36      	ldr	r3, [pc, #216]	; (8017024 <ADC_options_screen_S5+0xe0>)
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	2b05      	cmp	r3, #5
 8016f4e:	d867      	bhi.n	8017020 <ADC_options_screen_S5+0xdc>
 8016f50:	a201      	add	r2, pc, #4	; (adr r2, 8016f58 <ADC_options_screen_S5+0x14>)
 8016f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f56:	bf00      	nop
 8016f58:	08016f71 	.word	0x08016f71
 8016f5c:	08016f9b 	.word	0x08016f9b
 8016f60:	08016fb1 	.word	0x08016fb1
 8016f64:	08016fc7 	.word	0x08016fc7
 8016f68:	08016fdf 	.word	0x08016fdf
 8016f6c:	08016ff7 	.word	0x08016ff7
	{
		case 0: if(PGA_GAIN<8)PGA_GAIN++;
 8016f70:	4b2d      	ldr	r3, [pc, #180]	; (8017028 <ADC_options_screen_S5+0xe4>)
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	2b07      	cmp	r3, #7
 8016f76:	d805      	bhi.n	8016f84 <ADC_options_screen_S5+0x40>
 8016f78:	4b2b      	ldr	r3, [pc, #172]	; (8017028 <ADC_options_screen_S5+0xe4>)
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	3301      	adds	r3, #1
 8016f7e:	b2da      	uxtb	r2, r3
 8016f80:	4b29      	ldr	r3, [pc, #164]	; (8017028 <ADC_options_screen_S5+0xe4>)
 8016f82:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016f84:	4b28      	ldr	r3, [pc, #160]	; (8017028 <ADC_options_screen_S5+0xe4>)
 8016f86:	781b      	ldrb	r3, [r3, #0]
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7ea fb7d 	bl	8001688 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016f8e:	4b27      	ldr	r3, [pc, #156]	; (801702c <ADC_options_screen_S5+0xe8>)
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ea f8da 	bl	800114c <ADC_Conversion>
		break;
 8016f98:	e042      	b.n	8017020 <ADC_options_screen_S5+0xdc>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016f9a:	4b24      	ldr	r3, [pc, #144]	; (801702c <ADC_options_screen_S5+0xe8>)
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	2b0e      	cmp	r3, #14
 8016fa0:	d835      	bhi.n	801700e <ADC_options_screen_S5+0xca>
 8016fa2:	4b22      	ldr	r3, [pc, #136]	; (801702c <ADC_options_screen_S5+0xe8>)
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	b2da      	uxtb	r2, r3
 8016faa:	4b20      	ldr	r3, [pc, #128]	; (801702c <ADC_options_screen_S5+0xe8>)
 8016fac:	701a      	strb	r2, [r3, #0]
 8016fae:	e02e      	b.n	801700e <ADC_options_screen_S5+0xca>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016fb0:	4b1f      	ldr	r3, [pc, #124]	; (8017030 <ADC_options_screen_S5+0xec>)
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	2b01      	cmp	r3, #1
 8016fb6:	d82c      	bhi.n	8017012 <ADC_options_screen_S5+0xce>
 8016fb8:	4b1d      	ldr	r3, [pc, #116]	; (8017030 <ADC_options_screen_S5+0xec>)
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	3301      	adds	r3, #1
 8016fbe:	b2da      	uxtb	r2, r3
 8016fc0:	4b1b      	ldr	r3, [pc, #108]	; (8017030 <ADC_options_screen_S5+0xec>)
 8016fc2:	701a      	strb	r2, [r3, #0]
 8016fc4:	e025      	b.n	8017012 <ADC_options_screen_S5+0xce>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016fc6:	4b1b      	ldr	r3, [pc, #108]	; (8017034 <ADC_options_screen_S5+0xf0>)
 8016fc8:	881b      	ldrh	r3, [r3, #0]
 8016fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fce:	d222      	bcs.n	8017016 <ADC_options_screen_S5+0xd2>
 8016fd0:	4b18      	ldr	r3, [pc, #96]	; (8017034 <ADC_options_screen_S5+0xf0>)
 8016fd2:	881b      	ldrh	r3, [r3, #0]
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	b29a      	uxth	r2, r3
 8016fd8:	4b16      	ldr	r3, [pc, #88]	; (8017034 <ADC_options_screen_S5+0xf0>)
 8016fda:	801a      	strh	r2, [r3, #0]
 8016fdc:	e01b      	b.n	8017016 <ADC_options_screen_S5+0xd2>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016fde:	4b16      	ldr	r3, [pc, #88]	; (8017038 <ADC_options_screen_S5+0xf4>)
 8016fe0:	881b      	ldrh	r3, [r3, #0]
 8016fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fe6:	d218      	bcs.n	801701a <ADC_options_screen_S5+0xd6>
 8016fe8:	4b13      	ldr	r3, [pc, #76]	; (8017038 <ADC_options_screen_S5+0xf4>)
 8016fea:	881b      	ldrh	r3, [r3, #0]
 8016fec:	3301      	adds	r3, #1
 8016fee:	b29a      	uxth	r2, r3
 8016ff0:	4b11      	ldr	r3, [pc, #68]	; (8017038 <ADC_options_screen_S5+0xf4>)
 8016ff2:	801a      	strh	r2, [r3, #0]
 8016ff4:	e011      	b.n	801701a <ADC_options_screen_S5+0xd6>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016ff6:	4b11      	ldr	r3, [pc, #68]	; (801703c <ADC_options_screen_S5+0xf8>)
 8016ff8:	881b      	ldrh	r3, [r3, #0]
 8016ffa:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8016ffe:	d20e      	bcs.n	801701e <ADC_options_screen_S5+0xda>
 8017000:	4b0e      	ldr	r3, [pc, #56]	; (801703c <ADC_options_screen_S5+0xf8>)
 8017002:	881b      	ldrh	r3, [r3, #0]
 8017004:	3301      	adds	r3, #1
 8017006:	b29a      	uxth	r2, r3
 8017008:	4b0c      	ldr	r3, [pc, #48]	; (801703c <ADC_options_screen_S5+0xf8>)
 801700a:	801a      	strh	r2, [r3, #0]
 801700c:	e007      	b.n	801701e <ADC_options_screen_S5+0xda>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 801700e:	bf00      	nop
 8017010:	e006      	b.n	8017020 <ADC_options_screen_S5+0xdc>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8017012:	bf00      	nop
 8017014:	e004      	b.n	8017020 <ADC_options_screen_S5+0xdc>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8017016:	bf00      	nop
 8017018:	e002      	b.n	8017020 <ADC_options_screen_S5+0xdc>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 801701a:	bf00      	nop
 801701c:	e000      	b.n	8017020 <ADC_options_screen_S5+0xdc>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 801701e:	bf00      	nop
	}
}
 8017020:	bf00      	nop
 8017022:	bd80      	pop	{r7, pc}
 8017024:	200007ea 	.word	0x200007ea
 8017028:	20000072 	.word	0x20000072
 801702c:	20000073 	.word	0x20000073
 8017030:	20000837 	.word	0x20000837
 8017034:	20000074 	.word	0x20000074
 8017038:	200020f4 	.word	0x200020f4
 801703c:	2000208c 	.word	0x2000208c

08017040 <Auto_Off_option_screen_func>:
uint16_t off_min = 0;



void Auto_Off_option_screen_func(void)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af02      	add	r7, sp, #8
	RTC_view();
 8017046:	f000 fe3b 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801704a:	4911      	ldr	r1, [pc, #68]	; (8017090 <Auto_Off_option_screen_func+0x50>)
 801704c:	4811      	ldr	r0, [pc, #68]	; (8017094 <Auto_Off_option_screen_func+0x54>)
 801704e:	f7fe fcfd 	bl	8015a4c <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 20, 60, "Автовыключение:");
 8017052:	4b11      	ldr	r3, [pc, #68]	; (8017098 <Auto_Off_option_screen_func+0x58>)
 8017054:	223c      	movs	r2, #60	; 0x3c
 8017056:	2114      	movs	r1, #20
 8017058:	480e      	ldr	r0, [pc, #56]	; (8017094 <Auto_Off_option_screen_func+0x54>)
 801705a:	f7fe fc55 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", Auto_Off_Time);
 801705e:	4b0f      	ldr	r3, [pc, #60]	; (801709c <Auto_Off_option_screen_func+0x5c>)
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	461a      	mov	r2, r3
 8017064:	490e      	ldr	r1, [pc, #56]	; (80170a0 <Auto_Off_option_screen_func+0x60>)
 8017066:	480f      	ldr	r0, [pc, #60]	; (80170a4 <Auto_Off_option_screen_func+0x64>)
 8017068:	f006 ff7a 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(180, 60, RAM, edit_param, 0);
 801706c:	4b0e      	ldr	r3, [pc, #56]	; (80170a8 <Auto_Off_option_screen_func+0x68>)
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	2200      	movs	r2, #0
 8017072:	9200      	str	r2, [sp, #0]
 8017074:	4a0b      	ldr	r2, [pc, #44]	; (80170a4 <Auto_Off_option_screen_func+0x64>)
 8017076:	213c      	movs	r1, #60	; 0x3c
 8017078:	20b4      	movs	r0, #180	; 0xb4
 801707a:	f7eb ff29 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 801707e:	4805      	ldr	r0, [pc, #20]	; (8017094 <Auto_Off_option_screen_func+0x54>)
 8017080:	f7fd fea7 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017084:	4803      	ldr	r0, [pc, #12]	; (8017094 <Auto_Off_option_screen_func+0x54>)
 8017086:	f7fd fe31 	bl	8014cec <u8g2_ClearBuffer>
}
 801708a:	bf00      	nop
 801708c:	46bd      	mov	sp, r7
 801708e:	bd80      	pop	{r7, pc}
 8017090:	080273d0 	.word	0x080273d0
 8017094:	20001f54 	.word	0x20001f54
 8017098:	0802236c 	.word	0x0802236c
 801709c:	20000838 	.word	0x20000838
 80170a0:	0802238c 	.word	0x0802238c
 80170a4:	20002008 	.word	0x20002008
 80170a8:	200007ea 	.word	0x200007ea

080170ac <Auto_Off_option_screen_S9>:



// MENU
void Auto_Off_option_screen_S9(void)
{
 80170ac:	b480      	push	{r7}
 80170ae:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 80170b0:	4b06      	ldr	r3, [pc, #24]	; (80170cc <Auto_Off_option_screen_S9+0x20>)
 80170b2:	2208      	movs	r2, #8
 80170b4:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80170b6:	4b06      	ldr	r3, [pc, #24]	; (80170d0 <Auto_Off_option_screen_S9+0x24>)
 80170b8:	22ff      	movs	r2, #255	; 0xff
 80170ba:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 80170bc:	4b05      	ldr	r3, [pc, #20]	; (80170d4 <Auto_Off_option_screen_S9+0x28>)
 80170be:	2203      	movs	r2, #3
 80170c0:	701a      	strb	r2, [r3, #0]
}
 80170c2:	bf00      	nop
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr
 80170cc:	2000004c 	.word	0x2000004c
 80170d0:	20000330 	.word	0x20000330
 80170d4:	20000331 	.word	0x20000331

080170d8 <Auto_Off_option_screen_S8>:

// BACKWARD
void Auto_Off_option_screen_S8(void)
{ if(Auto_Off_Time>1)Auto_Off_Time--; }
 80170d8:	b480      	push	{r7}
 80170da:	af00      	add	r7, sp, #0
 80170dc:	4b07      	ldr	r3, [pc, #28]	; (80170fc <Auto_Off_option_screen_S8+0x24>)
 80170de:	881b      	ldrh	r3, [r3, #0]
 80170e0:	2b01      	cmp	r3, #1
 80170e2:	d905      	bls.n	80170f0 <Auto_Off_option_screen_S8+0x18>
 80170e4:	4b05      	ldr	r3, [pc, #20]	; (80170fc <Auto_Off_option_screen_S8+0x24>)
 80170e6:	881b      	ldrh	r3, [r3, #0]
 80170e8:	3b01      	subs	r3, #1
 80170ea:	b29a      	uxth	r2, r3
 80170ec:	4b03      	ldr	r3, [pc, #12]	; (80170fc <Auto_Off_option_screen_S8+0x24>)
 80170ee:	801a      	strh	r2, [r3, #0]
 80170f0:	bf00      	nop
 80170f2:	46bd      	mov	sp, r7
 80170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop
 80170fc:	20000838 	.word	0x20000838

08017100 <Auto_Off_option_screen_S5>:

// FORWARD
void Auto_Off_option_screen_S5(void)
{ if(Auto_Off_Time<120)Auto_Off_Time++; }
 8017100:	b480      	push	{r7}
 8017102:	af00      	add	r7, sp, #0
 8017104:	4b07      	ldr	r3, [pc, #28]	; (8017124 <Auto_Off_option_screen_S5+0x24>)
 8017106:	881b      	ldrh	r3, [r3, #0]
 8017108:	2b77      	cmp	r3, #119	; 0x77
 801710a:	d805      	bhi.n	8017118 <Auto_Off_option_screen_S5+0x18>
 801710c:	4b05      	ldr	r3, [pc, #20]	; (8017124 <Auto_Off_option_screen_S5+0x24>)
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	3301      	adds	r3, #1
 8017112:	b29a      	uxth	r2, r3
 8017114:	4b03      	ldr	r3, [pc, #12]	; (8017124 <Auto_Off_option_screen_S5+0x24>)
 8017116:	801a      	strh	r2, [r3, #0]
 8017118:	bf00      	nop
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop
 8017124:	20000838 	.word	0x20000838

08017128 <Auto_OFF_process>:




void Auto_OFF_process(void)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	af00      	add	r7, sp, #0
	if(Auto_Off_Time!=0)
 801712c:	4b17      	ldr	r3, [pc, #92]	; (801718c <Auto_OFF_process+0x64>)
 801712e:	881b      	ldrh	r3, [r3, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d025      	beq.n	8017180 <Auto_OFF_process+0x58>
	{
		if(++off_sec>=59){off_min++;off_sec=0;}
 8017134:	4b16      	ldr	r3, [pc, #88]	; (8017190 <Auto_OFF_process+0x68>)
 8017136:	881b      	ldrh	r3, [r3, #0]
 8017138:	3301      	adds	r3, #1
 801713a:	b29a      	uxth	r2, r3
 801713c:	4b14      	ldr	r3, [pc, #80]	; (8017190 <Auto_OFF_process+0x68>)
 801713e:	801a      	strh	r2, [r3, #0]
 8017140:	4b13      	ldr	r3, [pc, #76]	; (8017190 <Auto_OFF_process+0x68>)
 8017142:	881b      	ldrh	r3, [r3, #0]
 8017144:	2b3a      	cmp	r3, #58	; 0x3a
 8017146:	d908      	bls.n	801715a <Auto_OFF_process+0x32>
 8017148:	4b12      	ldr	r3, [pc, #72]	; (8017194 <Auto_OFF_process+0x6c>)
 801714a:	881b      	ldrh	r3, [r3, #0]
 801714c:	3301      	adds	r3, #1
 801714e:	b29a      	uxth	r2, r3
 8017150:	4b10      	ldr	r3, [pc, #64]	; (8017194 <Auto_OFF_process+0x6c>)
 8017152:	801a      	strh	r2, [r3, #0]
 8017154:	4b0e      	ldr	r3, [pc, #56]	; (8017190 <Auto_OFF_process+0x68>)
 8017156:	2200      	movs	r2, #0
 8017158:	801a      	strh	r2, [r3, #0]

		if(screen != Off_screen)
 801715a:	4b0f      	ldr	r3, [pc, #60]	; (8017198 <Auto_OFF_process+0x70>)
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	2b03      	cmp	r3, #3
 8017160:	d00e      	beq.n	8017180 <Auto_OFF_process+0x58>
		{
			if(off_min>=Auto_Off_Time)
 8017162:	4b0c      	ldr	r3, [pc, #48]	; (8017194 <Auto_OFF_process+0x6c>)
 8017164:	881a      	ldrh	r2, [r3, #0]
 8017166:	4b09      	ldr	r3, [pc, #36]	; (801718c <Auto_OFF_process+0x64>)
 8017168:	881b      	ldrh	r3, [r3, #0]
 801716a:	429a      	cmp	r2, r3
 801716c:	d308      	bcc.n	8017180 <Auto_OFF_process+0x58>
			{
				old_active_string=0xFF;
 801716e:	4b0b      	ldr	r3, [pc, #44]	; (801719c <Auto_OFF_process+0x74>)
 8017170:	22ff      	movs	r2, #255	; 0xff
 8017172:	701a      	strb	r2, [r3, #0]
				OnOffCntr = on_off_time;
 8017174:	4b0a      	ldr	r3, [pc, #40]	; (80171a0 <Auto_OFF_process+0x78>)
 8017176:	22c8      	movs	r2, #200	; 0xc8
 8017178:	801a      	strh	r2, [r3, #0]
				screen = Off_screen;
 801717a:	4b07      	ldr	r3, [pc, #28]	; (8017198 <Auto_OFF_process+0x70>)
 801717c:	2203      	movs	r2, #3
 801717e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	sleep(1000);
 8017180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017184:	f7ec f89a 	bl	80032bc <sleep>
}
 8017188:	bf00      	nop
 801718a:	bd80      	pop	{r7, pc}
 801718c:	20000838 	.word	0x20000838
 8017190:	20001bd4 	.word	0x20001bd4
 8017194:	20001bd6 	.word	0x20001bd6
 8017198:	2000004c 	.word	0x2000004c
 801719c:	20000330 	.word	0x20000330
 80171a0:	2000004a 	.word	0x2000004a

080171a4 <Display_options_screen_func>:
uint8_t temp_light=0;
uint8_t soft_onoff_cntr=0;


void Display_options_screen_func(void)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b084      	sub	sp, #16
 80171a8:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	RTC_view();
 80171aa:	f000 fd89 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80171ae:	494e      	ldr	r1, [pc, #312]	; (80172e8 <Display_options_screen_func+0x144>)
 80171b0:	484e      	ldr	r0, [pc, #312]	; (80172ec <Display_options_screen_func+0x148>)
 80171b2:	f7fe fc4b 	bl	8015a4c <u8g2_SetFont>

	// brightness
	u8g2_DrawUTF8(&u8g2, 20, 60, "Яркость:");
 80171b6:	4b4e      	ldr	r3, [pc, #312]	; (80172f0 <Display_options_screen_func+0x14c>)
 80171b8:	223c      	movs	r2, #60	; 0x3c
 80171ba:	2114      	movs	r1, #20
 80171bc:	484b      	ldr	r0, [pc, #300]	; (80172ec <Display_options_screen_func+0x148>)
 80171be:	f7fe fba3 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_brightness);
 80171c2:	4b4c      	ldr	r3, [pc, #304]	; (80172f4 <Display_options_screen_func+0x150>)
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	461a      	mov	r2, r3
 80171c8:	494b      	ldr	r1, [pc, #300]	; (80172f8 <Display_options_screen_func+0x154>)
 80171ca:	484c      	ldr	r0, [pc, #304]	; (80172fc <Display_options_screen_func+0x158>)
 80171cc:	f006 fec8 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(170, 60, RAM, edit_param, 0);
 80171d0:	4b4b      	ldr	r3, [pc, #300]	; (8017300 <Display_options_screen_func+0x15c>)
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	2200      	movs	r2, #0
 80171d6:	9200      	str	r2, [sp, #0]
 80171d8:	4a48      	ldr	r2, [pc, #288]	; (80172fc <Display_options_screen_func+0x158>)
 80171da:	213c      	movs	r1, #60	; 0x3c
 80171dc:	20aa      	movs	r0, #170	; 0xaa
 80171de:	f7eb fe77 	bl	8002ed0 <Blink_Edit_Parameter>
	// contrast
	u8g2_DrawUTF8(&u8g2, 20, 80, "Контрастность:");
 80171e2:	4b48      	ldr	r3, [pc, #288]	; (8017304 <Display_options_screen_func+0x160>)
 80171e4:	2250      	movs	r2, #80	; 0x50
 80171e6:	2114      	movs	r1, #20
 80171e8:	4840      	ldr	r0, [pc, #256]	; (80172ec <Display_options_screen_func+0x148>)
 80171ea:	f7fe fb8d 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_contrast);
 80171ee:	4b46      	ldr	r3, [pc, #280]	; (8017308 <Display_options_screen_func+0x164>)
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	461a      	mov	r2, r3
 80171f4:	4940      	ldr	r1, [pc, #256]	; (80172f8 <Display_options_screen_func+0x154>)
 80171f6:	4841      	ldr	r0, [pc, #260]	; (80172fc <Display_options_screen_func+0x158>)
 80171f8:	f006 feb2 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(170, 80, RAM, edit_param, 1);
 80171fc:	4b40      	ldr	r3, [pc, #256]	; (8017300 <Display_options_screen_func+0x15c>)
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	2201      	movs	r2, #1
 8017202:	9200      	str	r2, [sp, #0]
 8017204:	4a3d      	ldr	r2, [pc, #244]	; (80172fc <Display_options_screen_func+0x158>)
 8017206:	2150      	movs	r1, #80	; 0x50
 8017208:	20aa      	movs	r0, #170	; 0xaa
 801720a:	f7eb fe61 	bl	8002ed0 <Blink_Edit_Parameter>
	// delay
	u8g2_DrawUTF8(&u8g2, 20, 100, "Длительность:");
 801720e:	4b3f      	ldr	r3, [pc, #252]	; (801730c <Display_options_screen_func+0x168>)
 8017210:	2264      	movs	r2, #100	; 0x64
 8017212:	2114      	movs	r1, #20
 8017214:	4835      	ldr	r0, [pc, #212]	; (80172ec <Display_options_screen_func+0x148>)
 8017216:	f7fe fb77 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", light_delay);
 801721a:	4b3d      	ldr	r3, [pc, #244]	; (8017310 <Display_options_screen_func+0x16c>)
 801721c:	881b      	ldrh	r3, [r3, #0]
 801721e:	461a      	mov	r2, r3
 8017220:	4935      	ldr	r1, [pc, #212]	; (80172f8 <Display_options_screen_func+0x154>)
 8017222:	4836      	ldr	r0, [pc, #216]	; (80172fc <Display_options_screen_func+0x158>)
 8017224:	f006 fe9c 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(170, 100, RAM, edit_param, 2);
 8017228:	4b35      	ldr	r3, [pc, #212]	; (8017300 <Display_options_screen_func+0x15c>)
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2202      	movs	r2, #2
 801722e:	9200      	str	r2, [sp, #0]
 8017230:	4a32      	ldr	r2, [pc, #200]	; (80172fc <Display_options_screen_func+0x158>)
 8017232:	2164      	movs	r1, #100	; 0x64
 8017234:	20aa      	movs	r0, #170	; 0xaa
 8017236:	f7eb fe4b 	bl	8002ed0 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 801723a:	482c      	ldr	r0, [pc, #176]	; (80172ec <Display_options_screen_func+0x148>)
 801723c:	f7fd fdc9 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017240:	482a      	ldr	r0, [pc, #168]	; (80172ec <Display_options_screen_func+0x148>)
 8017242:	f7fd fd53 	bl	8014cec <u8g2_ClearBuffer>

	TIM2->CCR1=temp_light;//display_brightness;
 8017246:	4b33      	ldr	r3, [pc, #204]	; (8017314 <Display_options_screen_func+0x170>)
 8017248:	781a      	ldrb	r2, [r3, #0]
 801724a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801724e:	635a      	str	r2, [r3, #52]	; 0x34

	// Vbias
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8017250:	2200      	movs	r2, #0
 8017252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017256:	4830      	ldr	r0, [pc, #192]	; (8017318 <Display_options_screen_func+0x174>)
 8017258:	f7f2 ffbe 	bl	800a1d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 801725c:	2200      	movs	r2, #0
 801725e:	2101      	movs	r1, #1
 8017260:	482e      	ldr	r0, [pc, #184]	; (801731c <Display_options_screen_func+0x178>)
 8017262:	f7f2 ffb9 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+Vbias;
 8017266:	4b2e      	ldr	r3, [pc, #184]	; (8017320 <Display_options_screen_func+0x17c>)
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	3b18      	subs	r3, #24
 801726c:	b2db      	uxtb	r3, r3
 801726e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8017270:	463a      	mov	r2, r7
 8017272:	1d39      	adds	r1, r7, #4
 8017274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017278:	9300      	str	r3, [sp, #0]
 801727a:	2301      	movs	r3, #1
 801727c:	4829      	ldr	r0, [pc, #164]	; (8017324 <Display_options_screen_func+0x180>)
 801727e:	f7f7 f866 	bl	800e34e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017282:	2201      	movs	r2, #1
 8017284:	2101      	movs	r1, #1
 8017286:	4825      	ldr	r0, [pc, #148]	; (801731c <Display_options_screen_func+0x178>)
 8017288:	f7f2 ffa6 	bl	800a1d8 <HAL_GPIO_WritePin>
	// Temp compensation
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 801728c:	2200      	movs	r2, #0
 801728e:	2101      	movs	r1, #1
 8017290:	4822      	ldr	r0, [pc, #136]	; (801731c <Display_options_screen_func+0x178>)
 8017292:	f7f2 ffa1 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8017296:	2381      	movs	r3, #129	; 0x81
 8017298:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 801729a:	463a      	mov	r2, r7
 801729c:	1d39      	adds	r1, r7, #4
 801729e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80172a2:	9300      	str	r3, [sp, #0]
 80172a4:	2301      	movs	r3, #1
 80172a6:	481f      	ldr	r0, [pc, #124]	; (8017324 <Display_options_screen_func+0x180>)
 80172a8:	f7f7 f851 	bl	800e34e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 80172ac:	2201      	movs	r2, #1
 80172ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80172b2:	4819      	ldr	r0, [pc, #100]	; (8017318 <Display_options_screen_func+0x174>)
 80172b4:	f7f2 ff90 	bl	800a1d8 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 80172b8:	4b13      	ldr	r3, [pc, #76]	; (8017308 <Display_options_screen_func+0x164>)
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	337d      	adds	r3, #125	; 0x7d
 80172be:	b2db      	uxtb	r3, r3
 80172c0:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80172c2:	463a      	mov	r2, r7
 80172c4:	1d39      	adds	r1, r7, #4
 80172c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80172ca:	9300      	str	r3, [sp, #0]
 80172cc:	2301      	movs	r3, #1
 80172ce:	4815      	ldr	r0, [pc, #84]	; (8017324 <Display_options_screen_func+0x180>)
 80172d0:	f7f7 f83d 	bl	800e34e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80172d4:	2201      	movs	r2, #1
 80172d6:	2101      	movs	r1, #1
 80172d8:	4810      	ldr	r0, [pc, #64]	; (801731c <Display_options_screen_func+0x178>)
 80172da:	f7f2 ff7d 	bl	800a1d8 <HAL_GPIO_WritePin>
}
 80172de:	bf00      	nop
 80172e0:	3708      	adds	r7, #8
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	080273d0 	.word	0x080273d0
 80172ec:	20001f54 	.word	0x20001f54
 80172f0:	08022390 	.word	0x08022390
 80172f4:	20000070 	.word	0x20000070
 80172f8:	080223a0 	.word	0x080223a0
 80172fc:	20002008 	.word	0x20002008
 8017300:	200007ea 	.word	0x200007ea
 8017304:	080223a4 	.word	0x080223a4
 8017308:	20000071 	.word	0x20000071
 801730c:	080223c0 	.word	0x080223c0
 8017310:	20000088 	.word	0x20000088
 8017314:	20001bdc 	.word	0x20001bdc
 8017318:	48000400 	.word	0x48000400
 801731c:	48001000 	.word	0x48001000
 8017320:	20000300 	.word	0x20000300
 8017324:	20001ef0 	.word	0x20001ef0

08017328 <Display_options_screen_S9>:


// MENU
void Display_options_screen_S9(void)
{
 8017328:	b480      	push	{r7}
 801732a:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 801732c:	4b06      	ldr	r3, [pc, #24]	; (8017348 <Display_options_screen_S9+0x20>)
 801732e:	2208      	movs	r2, #8
 8017330:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8017332:	4b06      	ldr	r3, [pc, #24]	; (801734c <Display_options_screen_S9+0x24>)
 8017334:	22ff      	movs	r2, #255	; 0xff
 8017336:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 8017338:	4b05      	ldr	r3, [pc, #20]	; (8017350 <Display_options_screen_S9+0x28>)
 801733a:	2200      	movs	r2, #0
 801733c:	701a      	strb	r2, [r3, #0]
}
 801733e:	bf00      	nop
 8017340:	46bd      	mov	sp, r7
 8017342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017346:	4770      	bx	lr
 8017348:	2000004c 	.word	0x2000004c
 801734c:	20000330 	.word	0x20000330
 8017350:	20000331 	.word	0x20000331

08017354 <Display_options_screen_S6>:

// DOWN
void Display_options_screen_S6(void)
{
 8017354:	b480      	push	{r7}
 8017356:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017358:	4b07      	ldr	r3, [pc, #28]	; (8017378 <Display_options_screen_S6+0x24>)
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	2b01      	cmp	r3, #1
 801735e:	d805      	bhi.n	801736c <Display_options_screen_S6+0x18>
 8017360:	4b05      	ldr	r3, [pc, #20]	; (8017378 <Display_options_screen_S6+0x24>)
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	3301      	adds	r3, #1
 8017366:	b2da      	uxtb	r2, r3
 8017368:	4b03      	ldr	r3, [pc, #12]	; (8017378 <Display_options_screen_S6+0x24>)
 801736a:	701a      	strb	r2, [r3, #0]
}
 801736c:	bf00      	nop
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop
 8017378:	200007ea 	.word	0x200007ea

0801737c <Display_options_screen_S7>:

// UP
void Display_options_screen_S7(void)
{
 801737c:	b480      	push	{r7}
 801737e:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017380:	4b07      	ldr	r3, [pc, #28]	; (80173a0 <Display_options_screen_S7+0x24>)
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d005      	beq.n	8017394 <Display_options_screen_S7+0x18>
 8017388:	4b05      	ldr	r3, [pc, #20]	; (80173a0 <Display_options_screen_S7+0x24>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	3b01      	subs	r3, #1
 801738e:	b2da      	uxtb	r2, r3
 8017390:	4b03      	ldr	r3, [pc, #12]	; (80173a0 <Display_options_screen_S7+0x24>)
 8017392:	701a      	strb	r2, [r3, #0]
}
 8017394:	bf00      	nop
 8017396:	46bd      	mov	sp, r7
 8017398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739c:	4770      	bx	lr
 801739e:	bf00      	nop
 80173a0:	200007ea 	.word	0x200007ea

080173a4 <Display_options_screen_S4>:

// ENTER
void Display_options_screen_S4(void)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80173a8:	4b10      	ldr	r3, [pc, #64]	; (80173ec <Display_options_screen_S4+0x48>)
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	2b02      	cmp	r3, #2
 80173ae:	d014      	beq.n	80173da <Display_options_screen_S4+0x36>
 80173b0:	2b02      	cmp	r3, #2
 80173b2:	dc19      	bgt.n	80173e8 <Display_options_screen_S4+0x44>
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d002      	beq.n	80173be <Display_options_screen_S4+0x1a>
 80173b8:	2b01      	cmp	r3, #1
 80173ba:	d007      	beq.n	80173cc <Display_options_screen_S4+0x28>
	{
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
		case 2: Save_Settings(light_delay_tag, light_delay); break;
	}
}
 80173bc:	e014      	b.n	80173e8 <Display_options_screen_S4+0x44>
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
 80173be:	4b0c      	ldr	r3, [pc, #48]	; (80173f0 <Display_options_screen_S4+0x4c>)
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	4619      	mov	r1, r3
 80173c4:	2001      	movs	r0, #1
 80173c6:	f7ee f98b 	bl	80056e0 <Save_Settings>
 80173ca:	e00d      	b.n	80173e8 <Display_options_screen_S4+0x44>
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
 80173cc:	4b09      	ldr	r3, [pc, #36]	; (80173f4 <Display_options_screen_S4+0x50>)
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	4619      	mov	r1, r3
 80173d2:	2002      	movs	r0, #2
 80173d4:	f7ee f984 	bl	80056e0 <Save_Settings>
 80173d8:	e006      	b.n	80173e8 <Display_options_screen_S4+0x44>
		case 2: Save_Settings(light_delay_tag, light_delay); break;
 80173da:	4b07      	ldr	r3, [pc, #28]	; (80173f8 <Display_options_screen_S4+0x54>)
 80173dc:	881b      	ldrh	r3, [r3, #0]
 80173de:	4619      	mov	r1, r3
 80173e0:	2010      	movs	r0, #16
 80173e2:	f7ee f97d 	bl	80056e0 <Save_Settings>
 80173e6:	bf00      	nop
}
 80173e8:	bf00      	nop
 80173ea:	bd80      	pop	{r7, pc}
 80173ec:	200007ea 	.word	0x200007ea
 80173f0:	20000070 	.word	0x20000070
 80173f4:	20000071 	.word	0x20000071
 80173f8:	20000088 	.word	0x20000088

080173fc <Display_options_screen_S8>:



// BACKWARD
void Display_options_screen_S8(void)
{
 80173fc:	b480      	push	{r7}
 80173fe:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017400:	4b1a      	ldr	r3, [pc, #104]	; (801746c <Display_options_screen_S8+0x70>)
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	2b02      	cmp	r3, #2
 8017406:	d01c      	beq.n	8017442 <Display_options_screen_S8+0x46>
 8017408:	2b02      	cmp	r3, #2
 801740a:	dc2a      	bgt.n	8017462 <Display_options_screen_S8+0x66>
 801740c:	2b00      	cmp	r3, #0
 801740e:	d002      	beq.n	8017416 <Display_options_screen_S8+0x1a>
 8017410:	2b01      	cmp	r3, #1
 8017412:	d00b      	beq.n	801742c <Display_options_screen_S8+0x30>
	{
		case 0: if(display_brightness>0)display_brightness--; break;
		case 1: if(display_contrast>0)display_contrast--; break;
		case 2: if(light_delay>0)light_delay--; break;
	}
}
 8017414:	e025      	b.n	8017462 <Display_options_screen_S8+0x66>
		case 0: if(display_brightness>0)display_brightness--; break;
 8017416:	4b16      	ldr	r3, [pc, #88]	; (8017470 <Display_options_screen_S8+0x74>)
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d01c      	beq.n	8017458 <Display_options_screen_S8+0x5c>
 801741e:	4b14      	ldr	r3, [pc, #80]	; (8017470 <Display_options_screen_S8+0x74>)
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	3b01      	subs	r3, #1
 8017424:	b2da      	uxtb	r2, r3
 8017426:	4b12      	ldr	r3, [pc, #72]	; (8017470 <Display_options_screen_S8+0x74>)
 8017428:	701a      	strb	r2, [r3, #0]
 801742a:	e015      	b.n	8017458 <Display_options_screen_S8+0x5c>
		case 1: if(display_contrast>0)display_contrast--; break;
 801742c:	4b11      	ldr	r3, [pc, #68]	; (8017474 <Display_options_screen_S8+0x78>)
 801742e:	781b      	ldrb	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d013      	beq.n	801745c <Display_options_screen_S8+0x60>
 8017434:	4b0f      	ldr	r3, [pc, #60]	; (8017474 <Display_options_screen_S8+0x78>)
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	3b01      	subs	r3, #1
 801743a:	b2da      	uxtb	r2, r3
 801743c:	4b0d      	ldr	r3, [pc, #52]	; (8017474 <Display_options_screen_S8+0x78>)
 801743e:	701a      	strb	r2, [r3, #0]
 8017440:	e00c      	b.n	801745c <Display_options_screen_S8+0x60>
		case 2: if(light_delay>0)light_delay--; break;
 8017442:	4b0d      	ldr	r3, [pc, #52]	; (8017478 <Display_options_screen_S8+0x7c>)
 8017444:	881b      	ldrh	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d00a      	beq.n	8017460 <Display_options_screen_S8+0x64>
 801744a:	4b0b      	ldr	r3, [pc, #44]	; (8017478 <Display_options_screen_S8+0x7c>)
 801744c:	881b      	ldrh	r3, [r3, #0]
 801744e:	3b01      	subs	r3, #1
 8017450:	b29a      	uxth	r2, r3
 8017452:	4b09      	ldr	r3, [pc, #36]	; (8017478 <Display_options_screen_S8+0x7c>)
 8017454:	801a      	strh	r2, [r3, #0]
 8017456:	e003      	b.n	8017460 <Display_options_screen_S8+0x64>
		case 0: if(display_brightness>0)display_brightness--; break;
 8017458:	bf00      	nop
 801745a:	e002      	b.n	8017462 <Display_options_screen_S8+0x66>
		case 1: if(display_contrast>0)display_contrast--; break;
 801745c:	bf00      	nop
 801745e:	e000      	b.n	8017462 <Display_options_screen_S8+0x66>
		case 2: if(light_delay>0)light_delay--; break;
 8017460:	bf00      	nop
}
 8017462:	bf00      	nop
 8017464:	46bd      	mov	sp, r7
 8017466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746a:	4770      	bx	lr
 801746c:	200007ea 	.word	0x200007ea
 8017470:	20000070 	.word	0x20000070
 8017474:	20000071 	.word	0x20000071
 8017478:	20000088 	.word	0x20000088

0801747c <Display_options_screen_S5>:

// FORWARD
void Display_options_screen_S5(void)
{
 801747c:	b480      	push	{r7}
 801747e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017480:	4b1a      	ldr	r3, [pc, #104]	; (80174ec <Display_options_screen_S5+0x70>)
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	2b02      	cmp	r3, #2
 8017486:	d01c      	beq.n	80174c2 <Display_options_screen_S5+0x46>
 8017488:	2b02      	cmp	r3, #2
 801748a:	dc2a      	bgt.n	80174e2 <Display_options_screen_S5+0x66>
 801748c:	2b00      	cmp	r3, #0
 801748e:	d002      	beq.n	8017496 <Display_options_screen_S5+0x1a>
 8017490:	2b01      	cmp	r3, #1
 8017492:	d00b      	beq.n	80174ac <Display_options_screen_S5+0x30>
	{
		case 0:if(display_brightness<50)display_brightness++; break;
		case 1: if(display_contrast<50)display_contrast++; break;
		case 2: if(light_delay<50)light_delay++; break;
	}
}
 8017494:	e025      	b.n	80174e2 <Display_options_screen_S5+0x66>
		case 0:if(display_brightness<50)display_brightness++; break;
 8017496:	4b16      	ldr	r3, [pc, #88]	; (80174f0 <Display_options_screen_S5+0x74>)
 8017498:	781b      	ldrb	r3, [r3, #0]
 801749a:	2b31      	cmp	r3, #49	; 0x31
 801749c:	d81c      	bhi.n	80174d8 <Display_options_screen_S5+0x5c>
 801749e:	4b14      	ldr	r3, [pc, #80]	; (80174f0 <Display_options_screen_S5+0x74>)
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	3301      	adds	r3, #1
 80174a4:	b2da      	uxtb	r2, r3
 80174a6:	4b12      	ldr	r3, [pc, #72]	; (80174f0 <Display_options_screen_S5+0x74>)
 80174a8:	701a      	strb	r2, [r3, #0]
 80174aa:	e015      	b.n	80174d8 <Display_options_screen_S5+0x5c>
		case 1: if(display_contrast<50)display_contrast++; break;
 80174ac:	4b11      	ldr	r3, [pc, #68]	; (80174f4 <Display_options_screen_S5+0x78>)
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	2b31      	cmp	r3, #49	; 0x31
 80174b2:	d813      	bhi.n	80174dc <Display_options_screen_S5+0x60>
 80174b4:	4b0f      	ldr	r3, [pc, #60]	; (80174f4 <Display_options_screen_S5+0x78>)
 80174b6:	781b      	ldrb	r3, [r3, #0]
 80174b8:	3301      	adds	r3, #1
 80174ba:	b2da      	uxtb	r2, r3
 80174bc:	4b0d      	ldr	r3, [pc, #52]	; (80174f4 <Display_options_screen_S5+0x78>)
 80174be:	701a      	strb	r2, [r3, #0]
 80174c0:	e00c      	b.n	80174dc <Display_options_screen_S5+0x60>
		case 2: if(light_delay<50)light_delay++; break;
 80174c2:	4b0d      	ldr	r3, [pc, #52]	; (80174f8 <Display_options_screen_S5+0x7c>)
 80174c4:	881b      	ldrh	r3, [r3, #0]
 80174c6:	2b31      	cmp	r3, #49	; 0x31
 80174c8:	d80a      	bhi.n	80174e0 <Display_options_screen_S5+0x64>
 80174ca:	4b0b      	ldr	r3, [pc, #44]	; (80174f8 <Display_options_screen_S5+0x7c>)
 80174cc:	881b      	ldrh	r3, [r3, #0]
 80174ce:	3301      	adds	r3, #1
 80174d0:	b29a      	uxth	r2, r3
 80174d2:	4b09      	ldr	r3, [pc, #36]	; (80174f8 <Display_options_screen_S5+0x7c>)
 80174d4:	801a      	strh	r2, [r3, #0]
 80174d6:	e003      	b.n	80174e0 <Display_options_screen_S5+0x64>
		case 0:if(display_brightness<50)display_brightness++; break;
 80174d8:	bf00      	nop
 80174da:	e002      	b.n	80174e2 <Display_options_screen_S5+0x66>
		case 1: if(display_contrast<50)display_contrast++; break;
 80174dc:	bf00      	nop
 80174de:	e000      	b.n	80174e2 <Display_options_screen_S5+0x66>
		case 2: if(light_delay<50)light_delay++; break;
 80174e0:	bf00      	nop
}
 80174e2:	bf00      	nop
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr
 80174ec:	200007ea 	.word	0x200007ea
 80174f0:	20000070 	.word	0x20000070
 80174f4:	20000071 	.word	0x20000071
 80174f8:	20000088 	.word	0x20000088

080174fc <Light_OFF_process>:



void Light_OFF_process(void)
{
 80174fc:	b480      	push	{r7}
 80174fe:	af00      	add	r7, sp, #0
	if(++light_ms>=1000)
 8017500:	4b37      	ldr	r3, [pc, #220]	; (80175e0 <Light_OFF_process+0xe4>)
 8017502:	881b      	ldrh	r3, [r3, #0]
 8017504:	3301      	adds	r3, #1
 8017506:	b29a      	uxth	r2, r3
 8017508:	4b35      	ldr	r3, [pc, #212]	; (80175e0 <Light_OFF_process+0xe4>)
 801750a:	801a      	strh	r2, [r3, #0]
 801750c:	4b34      	ldr	r3, [pc, #208]	; (80175e0 <Light_OFF_process+0xe4>)
 801750e:	881b      	ldrh	r3, [r3, #0]
 8017510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017514:	d315      	bcc.n	8017542 <Light_OFF_process+0x46>
	{
		light_ms=0;
 8017516:	4b32      	ldr	r3, [pc, #200]	; (80175e0 <Light_OFF_process+0xe4>)
 8017518:	2200      	movs	r2, #0
 801751a:	801a      	strh	r2, [r3, #0]
		if(++light_sec>59){light_min++; light_sec=0;}
 801751c:	4b31      	ldr	r3, [pc, #196]	; (80175e4 <Light_OFF_process+0xe8>)
 801751e:	781b      	ldrb	r3, [r3, #0]
 8017520:	3301      	adds	r3, #1
 8017522:	b2da      	uxtb	r2, r3
 8017524:	4b2f      	ldr	r3, [pc, #188]	; (80175e4 <Light_OFF_process+0xe8>)
 8017526:	701a      	strb	r2, [r3, #0]
 8017528:	4b2e      	ldr	r3, [pc, #184]	; (80175e4 <Light_OFF_process+0xe8>)
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	2b3b      	cmp	r3, #59	; 0x3b
 801752e:	d908      	bls.n	8017542 <Light_OFF_process+0x46>
 8017530:	4b2d      	ldr	r3, [pc, #180]	; (80175e8 <Light_OFF_process+0xec>)
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	3301      	adds	r3, #1
 8017536:	b2da      	uxtb	r2, r3
 8017538:	4b2b      	ldr	r3, [pc, #172]	; (80175e8 <Light_OFF_process+0xec>)
 801753a:	701a      	strb	r2, [r3, #0]
 801753c:	4b29      	ldr	r3, [pc, #164]	; (80175e4 <Light_OFF_process+0xe8>)
 801753e:	2200      	movs	r2, #0
 8017540:	701a      	strb	r2, [r3, #0]
	}

	if(++soft_onoff_cntr>=50)
 8017542:	4b2a      	ldr	r3, [pc, #168]	; (80175ec <Light_OFF_process+0xf0>)
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	3301      	adds	r3, #1
 8017548:	b2da      	uxtb	r2, r3
 801754a:	4b28      	ldr	r3, [pc, #160]	; (80175ec <Light_OFF_process+0xf0>)
 801754c:	701a      	strb	r2, [r3, #0]
 801754e:	4b27      	ldr	r3, [pc, #156]	; (80175ec <Light_OFF_process+0xf0>)
 8017550:	781b      	ldrb	r3, [r3, #0]
 8017552:	2b31      	cmp	r3, #49	; 0x31
 8017554:	d93e      	bls.n	80175d4 <Light_OFF_process+0xd8>
	{
		soft_onoff_cntr=0;
 8017556:	4b25      	ldr	r3, [pc, #148]	; (80175ec <Light_OFF_process+0xf0>)
 8017558:	2200      	movs	r2, #0
 801755a:	701a      	strb	r2, [r3, #0]
		if(light_min>=light_delay)
 801755c:	4b22      	ldr	r3, [pc, #136]	; (80175e8 <Light_OFF_process+0xec>)
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	b29a      	uxth	r2, r3
 8017562:	4b23      	ldr	r3, [pc, #140]	; (80175f0 <Light_OFF_process+0xf4>)
 8017564:	881b      	ldrh	r3, [r3, #0]
 8017566:	429a      	cmp	r2, r3
 8017568:	d319      	bcc.n	801759e <Light_OFF_process+0xa2>
		{
			light_min=light_delay;
 801756a:	4b21      	ldr	r3, [pc, #132]	; (80175f0 <Light_OFF_process+0xf4>)
 801756c:	881b      	ldrh	r3, [r3, #0]
 801756e:	b2da      	uxtb	r2, r3
 8017570:	4b1d      	ldr	r3, [pc, #116]	; (80175e8 <Light_OFF_process+0xec>)
 8017572:	701a      	strb	r2, [r3, #0]
			if(temp_light>0)temp_light--;
 8017574:	4b1f      	ldr	r3, [pc, #124]	; (80175f4 <Light_OFF_process+0xf8>)
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d005      	beq.n	8017588 <Light_OFF_process+0x8c>
 801757c:	4b1d      	ldr	r3, [pc, #116]	; (80175f4 <Light_OFF_process+0xf8>)
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	3b01      	subs	r3, #1
 8017582:	b2da      	uxtb	r2, r3
 8017584:	4b1b      	ldr	r3, [pc, #108]	; (80175f4 <Light_OFF_process+0xf8>)
 8017586:	701a      	strb	r2, [r3, #0]
			light_min=light_delay;
 8017588:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <Light_OFF_process+0xf4>)
 801758a:	881b      	ldrh	r3, [r3, #0]
 801758c:	b2da      	uxtb	r2, r3
 801758e:	4b16      	ldr	r3, [pc, #88]	; (80175e8 <Light_OFF_process+0xec>)
 8017590:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 8017592:	4b18      	ldr	r3, [pc, #96]	; (80175f4 <Light_OFF_process+0xf8>)
 8017594:	781a      	ldrb	r2, [r3, #0]
 8017596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801759a:	635a      	str	r2, [r3, #52]	; 0x34
			if(temp_light<display_brightness)temp_light++;
			if(temp_light>=display_brightness)temp_light=display_brightness;
			TIM2->CCR1=temp_light;
		}
	}
}
 801759c:	e01a      	b.n	80175d4 <Light_OFF_process+0xd8>
			if(temp_light<display_brightness)temp_light++;
 801759e:	4b15      	ldr	r3, [pc, #84]	; (80175f4 <Light_OFF_process+0xf8>)
 80175a0:	781a      	ldrb	r2, [r3, #0]
 80175a2:	4b15      	ldr	r3, [pc, #84]	; (80175f8 <Light_OFF_process+0xfc>)
 80175a4:	781b      	ldrb	r3, [r3, #0]
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d205      	bcs.n	80175b6 <Light_OFF_process+0xba>
 80175aa:	4b12      	ldr	r3, [pc, #72]	; (80175f4 <Light_OFF_process+0xf8>)
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	3301      	adds	r3, #1
 80175b0:	b2da      	uxtb	r2, r3
 80175b2:	4b10      	ldr	r3, [pc, #64]	; (80175f4 <Light_OFF_process+0xf8>)
 80175b4:	701a      	strb	r2, [r3, #0]
			if(temp_light>=display_brightness)temp_light=display_brightness;
 80175b6:	4b0f      	ldr	r3, [pc, #60]	; (80175f4 <Light_OFF_process+0xf8>)
 80175b8:	781a      	ldrb	r2, [r3, #0]
 80175ba:	4b0f      	ldr	r3, [pc, #60]	; (80175f8 <Light_OFF_process+0xfc>)
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	429a      	cmp	r2, r3
 80175c0:	d303      	bcc.n	80175ca <Light_OFF_process+0xce>
 80175c2:	4b0d      	ldr	r3, [pc, #52]	; (80175f8 <Light_OFF_process+0xfc>)
 80175c4:	781a      	ldrb	r2, [r3, #0]
 80175c6:	4b0b      	ldr	r3, [pc, #44]	; (80175f4 <Light_OFF_process+0xf8>)
 80175c8:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 80175ca:	4b0a      	ldr	r3, [pc, #40]	; (80175f4 <Light_OFF_process+0xf8>)
 80175cc:	781a      	ldrb	r2, [r3, #0]
 80175ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80175d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80175d4:	bf00      	nop
 80175d6:	46bd      	mov	sp, r7
 80175d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175dc:	4770      	bx	lr
 80175de:	bf00      	nop
 80175e0:	20001bda 	.word	0x20001bda
 80175e4:	20001bd8 	.word	0x20001bd8
 80175e8:	20001bd9 	.word	0x20001bd9
 80175ec:	20001bdd 	.word	0x20001bdd
 80175f0:	20000088 	.word	0x20000088
 80175f4:	20001bdc 	.word	0x20001bdc
 80175f8:	20000070 	.word	0x20000070

080175fc <Measure_options_screen_func>:
const uint8_t time_icon[]={0,24,0,24,0x1F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFE, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x31, 0x87, 0xE0, 0x33, 0x87, 0xE0, 0x3F, 0x07, 0xE0, 0x1E, 0x07, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0x7F, 0xFF, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xF8};



void Measure_options_screen_func(void)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af02      	add	r7, sp, #8
	RTC_view();
 8017602:	f000 fb5d 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017606:	4974      	ldr	r1, [pc, #464]	; (80177d8 <Measure_options_screen_func+0x1dc>)
 8017608:	4874      	ldr	r0, [pc, #464]	; (80177dc <Measure_options_screen_func+0x1e0>)
 801760a:	f7fe fa1f 	bl	8015a4c <u8g2_SetFont>


		// "ПИКОВЫЕ ЗНАЧЕНИЯ");
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*0+6, "ПИКОВЫЕ ЗНАЧЕНИЯ", edit_param, 0);
 801760e:	4b74      	ldr	r3, [pc, #464]	; (80177e0 <Measure_options_screen_func+0x1e4>)
 8017610:	781b      	ldrb	r3, [r3, #0]
 8017612:	2200      	movs	r2, #0
 8017614:	9200      	str	r2, [sp, #0]
 8017616:	4a73      	ldr	r2, [pc, #460]	; (80177e4 <Measure_options_screen_func+0x1e8>)
 8017618:	211f      	movs	r1, #31
 801761a:	200f      	movs	r0, #15
 801761c:	f7eb fc58 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(mm_peak)
 8017620:	4b71      	ldr	r3, [pc, #452]	; (80177e8 <Measure_options_screen_func+0x1ec>)
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d002      	beq.n	801762e <Measure_options_screen_func+0x32>
 8017628:	2b01      	cmp	r3, #1
 801762a:	d007      	beq.n	801763c <Measure_options_screen_func+0x40>
 801762c:	e00d      	b.n	801764a <Measure_options_screen_func+0x4e>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 801762e:	2301      	movs	r3, #1
 8017630:	2219      	movs	r2, #25
 8017632:	21c8      	movs	r1, #200	; 0xc8
 8017634:	486d      	ldr	r0, [pc, #436]	; (80177ec <Measure_options_screen_func+0x1f0>)
 8017636:	f7eb fabb 	bl	8002bb0 <DrawImage>
 801763a:	e006      	b.n	801764a <Measure_options_screen_func+0x4e>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 801763c:	2301      	movs	r3, #1
 801763e:	2219      	movs	r2, #25
 8017640:	21c8      	movs	r1, #200	; 0xc8
 8017642:	486b      	ldr	r0, [pc, #428]	; (80177f0 <Measure_options_screen_func+0x1f4>)
 8017644:	f7eb fab4 	bl	8002bb0 <DrawImage>
 8017648:	bf00      	nop
		}

		// "ОБНАРУЖЕНИЕ УТЕЧЕК"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*1+6, "ОБНАРУЖЕНИЕ УТЕЧЕК", edit_param, 1);
 801764a:	4b65      	ldr	r3, [pc, #404]	; (80177e0 <Measure_options_screen_func+0x1e4>)
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	2201      	movs	r2, #1
 8017650:	9200      	str	r2, [sp, #0]
 8017652:	4a68      	ldr	r2, [pc, #416]	; (80177f4 <Measure_options_screen_func+0x1f8>)
 8017654:	2139      	movs	r1, #57	; 0x39
 8017656:	200f      	movs	r0, #15
 8017658:	f7eb fc3a 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(leak_detect)
 801765c:	4b66      	ldr	r3, [pc, #408]	; (80177f8 <Measure_options_screen_func+0x1fc>)
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	2b02      	cmp	r3, #2
 8017662:	d014      	beq.n	801768e <Measure_options_screen_func+0x92>
 8017664:	2b02      	cmp	r3, #2
 8017666:	dc19      	bgt.n	801769c <Measure_options_screen_func+0xa0>
 8017668:	2b00      	cmp	r3, #0
 801766a:	d002      	beq.n	8017672 <Measure_options_screen_func+0x76>
 801766c:	2b01      	cmp	r3, #1
 801766e:	d007      	beq.n	8017680 <Measure_options_screen_func+0x84>
 8017670:	e014      	b.n	801769c <Measure_options_screen_func+0xa0>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017672:	2301      	movs	r3, #1
 8017674:	2233      	movs	r2, #51	; 0x33
 8017676:	21c8      	movs	r1, #200	; 0xc8
 8017678:	485c      	ldr	r0, [pc, #368]	; (80177ec <Measure_options_screen_func+0x1f0>)
 801767a:	f7eb fa99 	bl	8002bb0 <DrawImage>
 801767e:	e00d      	b.n	801769c <Measure_options_screen_func+0xa0>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017680:	2301      	movs	r3, #1
 8017682:	2233      	movs	r2, #51	; 0x33
 8017684:	21c8      	movs	r1, #200	; 0xc8
 8017686:	485a      	ldr	r0, [pc, #360]	; (80177f0 <Measure_options_screen_func+0x1f4>)
 8017688:	f7eb fa92 	bl	8002bb0 <DrawImage>
 801768c:	e006      	b.n	801769c <Measure_options_screen_func+0xa0>
			case 2: DrawImage(time_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 801768e:	2301      	movs	r3, #1
 8017690:	2233      	movs	r2, #51	; 0x33
 8017692:	21c8      	movs	r1, #200	; 0xc8
 8017694:	4859      	ldr	r0, [pc, #356]	; (80177fc <Measure_options_screen_func+0x200>)
 8017696:	f7eb fa8b 	bl	8002bb0 <DrawImage>
 801769a:	bf00      	nop
		}

		// "P+V"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*2+6, "P+V", edit_param, 2);
 801769c:	4b50      	ldr	r3, [pc, #320]	; (80177e0 <Measure_options_screen_func+0x1e4>)
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2202      	movs	r2, #2
 80176a2:	9200      	str	r2, [sp, #0]
 80176a4:	4a56      	ldr	r2, [pc, #344]	; (8017800 <Measure_options_screen_func+0x204>)
 80176a6:	2153      	movs	r1, #83	; 0x53
 80176a8:	200f      	movs	r0, #15
 80176aa:	f7eb fc11 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(PV)
 80176ae:	4b55      	ldr	r3, [pc, #340]	; (8017804 <Measure_options_screen_func+0x208>)
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d002      	beq.n	80176bc <Measure_options_screen_func+0xc0>
 80176b6:	2b01      	cmp	r3, #1
 80176b8:	d007      	beq.n	80176ca <Measure_options_screen_func+0xce>
 80176ba:	e00d      	b.n	80176d8 <Measure_options_screen_func+0xdc>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 80176bc:	2301      	movs	r3, #1
 80176be:	224d      	movs	r2, #77	; 0x4d
 80176c0:	21c8      	movs	r1, #200	; 0xc8
 80176c2:	484a      	ldr	r0, [pc, #296]	; (80177ec <Measure_options_screen_func+0x1f0>)
 80176c4:	f7eb fa74 	bl	8002bb0 <DrawImage>
 80176c8:	e006      	b.n	80176d8 <Measure_options_screen_func+0xdc>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 80176ca:	2301      	movs	r3, #1
 80176cc:	224d      	movs	r2, #77	; 0x4d
 80176ce:	21c8      	movs	r1, #200	; 0xc8
 80176d0:	4847      	ldr	r0, [pc, #284]	; (80177f0 <Measure_options_screen_func+0x1f4>)
 80176d2:	f7eb fa6d 	bl	8002bb0 <DrawImage>
 80176d6:	bf00      	nop
		}

		// "P+I"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*3+6, "P+I", edit_param, 3);
 80176d8:	4b41      	ldr	r3, [pc, #260]	; (80177e0 <Measure_options_screen_func+0x1e4>)
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	2203      	movs	r2, #3
 80176de:	9200      	str	r2, [sp, #0]
 80176e0:	4a49      	ldr	r2, [pc, #292]	; (8017808 <Measure_options_screen_func+0x20c>)
 80176e2:	216d      	movs	r1, #109	; 0x6d
 80176e4:	200f      	movs	r0, #15
 80176e6:	f7eb fbf3 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(PI)
 80176ea:	4b48      	ldr	r3, [pc, #288]	; (801780c <Measure_options_screen_func+0x210>)
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d002      	beq.n	80176f8 <Measure_options_screen_func+0xfc>
 80176f2:	2b01      	cmp	r3, #1
 80176f4:	d007      	beq.n	8017706 <Measure_options_screen_func+0x10a>
 80176f6:	e00d      	b.n	8017714 <Measure_options_screen_func+0x118>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 80176f8:	2301      	movs	r3, #1
 80176fa:	2267      	movs	r2, #103	; 0x67
 80176fc:	21c8      	movs	r1, #200	; 0xc8
 80176fe:	483b      	ldr	r0, [pc, #236]	; (80177ec <Measure_options_screen_func+0x1f0>)
 8017700:	f7eb fa56 	bl	8002bb0 <DrawImage>
 8017704:	e006      	b.n	8017714 <Measure_options_screen_func+0x118>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 8017706:	2301      	movs	r3, #1
 8017708:	2267      	movs	r2, #103	; 0x67
 801770a:	21c8      	movs	r1, #200	; 0xc8
 801770c:	4838      	ldr	r0, [pc, #224]	; (80177f0 <Measure_options_screen_func+0x1f4>)
 801770e:	f7eb fa4f 	bl	8002bb0 <DrawImage>
 8017712:	bf00      	nop
		}

		// "P+E"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*4+6, "P+E", edit_param, 4);
 8017714:	4b32      	ldr	r3, [pc, #200]	; (80177e0 <Measure_options_screen_func+0x1e4>)
 8017716:	781b      	ldrb	r3, [r3, #0]
 8017718:	2204      	movs	r2, #4
 801771a:	9200      	str	r2, [sp, #0]
 801771c:	4a3c      	ldr	r2, [pc, #240]	; (8017810 <Measure_options_screen_func+0x214>)
 801771e:	2187      	movs	r1, #135	; 0x87
 8017720:	200f      	movs	r0, #15
 8017722:	f7eb fbd5 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(PE)
 8017726:	4b3b      	ldr	r3, [pc, #236]	; (8017814 <Measure_options_screen_func+0x218>)
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	2b07      	cmp	r3, #7
 801772c:	d84a      	bhi.n	80177c4 <Measure_options_screen_func+0x1c8>
 801772e:	a201      	add	r2, pc, #4	; (adr r2, 8017734 <Measure_options_screen_func+0x138>)
 8017730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017734:	08017755 	.word	0x08017755
 8017738:	08017763 	.word	0x08017763
 801773c:	08017771 	.word	0x08017771
 8017740:	0801777f 	.word	0x0801777f
 8017744:	0801778d 	.word	0x0801778d
 8017748:	0801779b 	.word	0x0801779b
 801774c:	080177a9 	.word	0x080177a9
 8017750:	080177b7 	.word	0x080177b7
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017754:	2301      	movs	r3, #1
 8017756:	2281      	movs	r2, #129	; 0x81
 8017758:	21c8      	movs	r1, #200	; 0xc8
 801775a:	4824      	ldr	r0, [pc, #144]	; (80177ec <Measure_options_screen_func+0x1f0>)
 801775c:	f7eb fa28 	bl	8002bb0 <DrawImage>
 8017760:	e030      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017762:	2301      	movs	r3, #1
 8017764:	2281      	movs	r2, #129	; 0x81
 8017766:	21c8      	movs	r1, #200	; 0xc8
 8017768:	4821      	ldr	r0, [pc, #132]	; (80177f0 <Measure_options_screen_func+0x1f4>)
 801776a:	f7eb fa21 	bl	8002bb0 <DrawImage>
 801776e:	e029      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 2: DrawImage(press_on_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017770:	2301      	movs	r3, #1
 8017772:	2281      	movs	r2, #129	; 0x81
 8017774:	21c8      	movs	r1, #200	; 0xc8
 8017776:	4828      	ldr	r0, [pc, #160]	; (8017818 <Measure_options_screen_func+0x21c>)
 8017778:	f7eb fa1a 	bl	8002bb0 <DrawImage>
 801777c:	e022      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 3: DrawImage(press_off_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801777e:	2301      	movs	r3, #1
 8017780:	2281      	movs	r2, #129	; 0x81
 8017782:	21c8      	movs	r1, #200	; 0xc8
 8017784:	4825      	ldr	r0, [pc, #148]	; (801781c <Measure_options_screen_func+0x220>)
 8017786:	f7eb fa13 	bl	8002bb0 <DrawImage>
 801778a:	e01b      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 4: DrawImage(up_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801778c:	2301      	movs	r3, #1
 801778e:	2281      	movs	r2, #129	; 0x81
 8017790:	21c8      	movs	r1, #200	; 0xc8
 8017792:	4823      	ldr	r0, [pc, #140]	; (8017820 <Measure_options_screen_func+0x224>)
 8017794:	f7eb fa0c 	bl	8002bb0 <DrawImage>
 8017798:	e014      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 5: DrawImage(down_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801779a:	2301      	movs	r3, #1
 801779c:	2281      	movs	r2, #129	; 0x81
 801779e:	21c8      	movs	r1, #200	; 0xc8
 80177a0:	4820      	ldr	r0, [pc, #128]	; (8017824 <Measure_options_screen_func+0x228>)
 80177a2:	f7eb fa05 	bl	8002bb0 <DrawImage>
 80177a6:	e00d      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 6: DrawImage(pos_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80177a8:	2301      	movs	r3, #1
 80177aa:	2281      	movs	r2, #129	; 0x81
 80177ac:	21c8      	movs	r1, #200	; 0xc8
 80177ae:	481e      	ldr	r0, [pc, #120]	; (8017828 <Measure_options_screen_func+0x22c>)
 80177b0:	f7eb f9fe 	bl	8002bb0 <DrawImage>
 80177b4:	e006      	b.n	80177c4 <Measure_options_screen_func+0x1c8>
			case 7: DrawImage(neg_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80177b6:	2301      	movs	r3, #1
 80177b8:	2281      	movs	r2, #129	; 0x81
 80177ba:	21c8      	movs	r1, #200	; 0xc8
 80177bc:	481b      	ldr	r0, [pc, #108]	; (801782c <Measure_options_screen_func+0x230>)
 80177be:	f7eb f9f7 	bl	8002bb0 <DrawImage>
 80177c2:	bf00      	nop
		}



	u8g2_SendBuffer(&u8g2);
 80177c4:	4805      	ldr	r0, [pc, #20]	; (80177dc <Measure_options_screen_func+0x1e0>)
 80177c6:	f7fd fb04 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80177ca:	4804      	ldr	r0, [pc, #16]	; (80177dc <Measure_options_screen_func+0x1e0>)
 80177cc:	f7fd fa8e 	bl	8014cec <u8g2_ClearBuffer>
}
 80177d0:	bf00      	nop
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}
 80177d6:	bf00      	nop
 80177d8:	080273d0 	.word	0x080273d0
 80177dc:	20001f54 	.word	0x20001f54
 80177e0:	200007ea 	.word	0x200007ea
 80177e4:	080223dc 	.word	0x080223dc
 80177e8:	20000832 	.word	0x20000832
 80177ec:	080293a4 	.word	0x080293a4
 80177f0:	080293f0 	.word	0x080293f0
 80177f4:	080223fc 	.word	0x080223fc
 80177f8:	20000833 	.word	0x20000833
 80177fc:	08029604 	.word	0x08029604
 8017800:	08022420 	.word	0x08022420
 8017804:	20000834 	.word	0x20000834
 8017808:	08022424 	.word	0x08022424
 801780c:	20000835 	.word	0x20000835
 8017810:	08022428 	.word	0x08022428
 8017814:	20000836 	.word	0x20000836
 8017818:	0802956c 	.word	0x0802956c
 801781c:	080295b8 	.word	0x080295b8
 8017820:	0802943c 	.word	0x0802943c
 8017824:	08029488 	.word	0x08029488
 8017828:	08029520 	.word	0x08029520
 801782c:	080294d4 	.word	0x080294d4

08017830 <Measure_options_screen_S6>:


// DOWN
void Measure_options_screen_S6(void)
{
 8017830:	b480      	push	{r7}
 8017832:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017834:	4b07      	ldr	r3, [pc, #28]	; (8017854 <Measure_options_screen_S6+0x24>)
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	2b03      	cmp	r3, #3
 801783a:	d805      	bhi.n	8017848 <Measure_options_screen_S6+0x18>
 801783c:	4b05      	ldr	r3, [pc, #20]	; (8017854 <Measure_options_screen_S6+0x24>)
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	3301      	adds	r3, #1
 8017842:	b2da      	uxtb	r2, r3
 8017844:	4b03      	ldr	r3, [pc, #12]	; (8017854 <Measure_options_screen_S6+0x24>)
 8017846:	701a      	strb	r2, [r3, #0]
}
 8017848:	bf00      	nop
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr
 8017852:	bf00      	nop
 8017854:	200007ea 	.word	0x200007ea

08017858 <Measure_options_screen_S7>:

// UP
void Measure_options_screen_S7(void)
{
 8017858:	b480      	push	{r7}
 801785a:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 801785c:	4b07      	ldr	r3, [pc, #28]	; (801787c <Measure_options_screen_S7+0x24>)
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d005      	beq.n	8017870 <Measure_options_screen_S7+0x18>
 8017864:	4b05      	ldr	r3, [pc, #20]	; (801787c <Measure_options_screen_S7+0x24>)
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	3b01      	subs	r3, #1
 801786a:	b2da      	uxtb	r2, r3
 801786c:	4b03      	ldr	r3, [pc, #12]	; (801787c <Measure_options_screen_S7+0x24>)
 801786e:	701a      	strb	r2, [r3, #0]
}
 8017870:	bf00      	nop
 8017872:	46bd      	mov	sp, r7
 8017874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017878:	4770      	bx	lr
 801787a:	bf00      	nop
 801787c:	200007ea 	.word	0x200007ea

08017880 <Measure_options_screen_S9>:



// MENU
void Measure_options_screen_S9(void)
{
 8017880:	b480      	push	{r7}
 8017882:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8017884:	4b06      	ldr	r3, [pc, #24]	; (80178a0 <Measure_options_screen_S9+0x20>)
 8017886:	2204      	movs	r2, #4
 8017888:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801788a:	4b06      	ldr	r3, [pc, #24]	; (80178a4 <Measure_options_screen_S9+0x24>)
 801788c:	22ff      	movs	r2, #255	; 0xff
 801788e:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 8017890:	4b05      	ldr	r3, [pc, #20]	; (80178a8 <Measure_options_screen_S9+0x28>)
 8017892:	2200      	movs	r2, #0
 8017894:	701a      	strb	r2, [r3, #0]
}
 8017896:	bf00      	nop
 8017898:	46bd      	mov	sp, r7
 801789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789e:	4770      	bx	lr
 80178a0:	2000004c 	.word	0x2000004c
 80178a4:	20000330 	.word	0x20000330
 80178a8:	20000331 	.word	0x20000331

080178ac <Measure_options_screen_S8>:

// BACKWARD
void Measure_options_screen_S8(void)
{
 80178ac:	b480      	push	{r7}
 80178ae:	af00      	add	r7, sp, #0
	switch(edit_param)
 80178b0:	4b2b      	ldr	r3, [pc, #172]	; (8017960 <Measure_options_screen_S8+0xb4>)
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	2b04      	cmp	r3, #4
 80178b6:	d84d      	bhi.n	8017954 <Measure_options_screen_S8+0xa8>
 80178b8:	a201      	add	r2, pc, #4	; (adr r2, 80178c0 <Measure_options_screen_S8+0x14>)
 80178ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178be:	bf00      	nop
 80178c0:	080178d5 	.word	0x080178d5
 80178c4:	080178eb 	.word	0x080178eb
 80178c8:	08017901 	.word	0x08017901
 80178cc:	08017917 	.word	0x08017917
 80178d0:	0801792d 	.word	0x0801792d
	{
		case 0: if(mm_peak>0)mm_peak--; break;
 80178d4:	4b23      	ldr	r3, [pc, #140]	; (8017964 <Measure_options_screen_S8+0xb8>)
 80178d6:	781b      	ldrb	r3, [r3, #0]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d032      	beq.n	8017942 <Measure_options_screen_S8+0x96>
 80178dc:	4b21      	ldr	r3, [pc, #132]	; (8017964 <Measure_options_screen_S8+0xb8>)
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	3b01      	subs	r3, #1
 80178e2:	b2da      	uxtb	r2, r3
 80178e4:	4b1f      	ldr	r3, [pc, #124]	; (8017964 <Measure_options_screen_S8+0xb8>)
 80178e6:	701a      	strb	r2, [r3, #0]
 80178e8:	e02b      	b.n	8017942 <Measure_options_screen_S8+0x96>
		case 1: if(leak_detect>0)leak_detect--; break;
 80178ea:	4b1f      	ldr	r3, [pc, #124]	; (8017968 <Measure_options_screen_S8+0xbc>)
 80178ec:	781b      	ldrb	r3, [r3, #0]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d029      	beq.n	8017946 <Measure_options_screen_S8+0x9a>
 80178f2:	4b1d      	ldr	r3, [pc, #116]	; (8017968 <Measure_options_screen_S8+0xbc>)
 80178f4:	781b      	ldrb	r3, [r3, #0]
 80178f6:	3b01      	subs	r3, #1
 80178f8:	b2da      	uxtb	r2, r3
 80178fa:	4b1b      	ldr	r3, [pc, #108]	; (8017968 <Measure_options_screen_S8+0xbc>)
 80178fc:	701a      	strb	r2, [r3, #0]
 80178fe:	e022      	b.n	8017946 <Measure_options_screen_S8+0x9a>
		case 2: if(PV>0)PV--; break;
 8017900:	4b1a      	ldr	r3, [pc, #104]	; (801796c <Measure_options_screen_S8+0xc0>)
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d020      	beq.n	801794a <Measure_options_screen_S8+0x9e>
 8017908:	4b18      	ldr	r3, [pc, #96]	; (801796c <Measure_options_screen_S8+0xc0>)
 801790a:	781b      	ldrb	r3, [r3, #0]
 801790c:	3b01      	subs	r3, #1
 801790e:	b2da      	uxtb	r2, r3
 8017910:	4b16      	ldr	r3, [pc, #88]	; (801796c <Measure_options_screen_S8+0xc0>)
 8017912:	701a      	strb	r2, [r3, #0]
 8017914:	e019      	b.n	801794a <Measure_options_screen_S8+0x9e>
		case 3: if(PI>0)PI--; break;
 8017916:	4b16      	ldr	r3, [pc, #88]	; (8017970 <Measure_options_screen_S8+0xc4>)
 8017918:	781b      	ldrb	r3, [r3, #0]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d017      	beq.n	801794e <Measure_options_screen_S8+0xa2>
 801791e:	4b14      	ldr	r3, [pc, #80]	; (8017970 <Measure_options_screen_S8+0xc4>)
 8017920:	781b      	ldrb	r3, [r3, #0]
 8017922:	3b01      	subs	r3, #1
 8017924:	b2da      	uxtb	r2, r3
 8017926:	4b12      	ldr	r3, [pc, #72]	; (8017970 <Measure_options_screen_S8+0xc4>)
 8017928:	701a      	strb	r2, [r3, #0]
 801792a:	e010      	b.n	801794e <Measure_options_screen_S8+0xa2>
		case 4: if(PE>0)PE--; break;
 801792c:	4b11      	ldr	r3, [pc, #68]	; (8017974 <Measure_options_screen_S8+0xc8>)
 801792e:	781b      	ldrb	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d00e      	beq.n	8017952 <Measure_options_screen_S8+0xa6>
 8017934:	4b0f      	ldr	r3, [pc, #60]	; (8017974 <Measure_options_screen_S8+0xc8>)
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	3b01      	subs	r3, #1
 801793a:	b2da      	uxtb	r2, r3
 801793c:	4b0d      	ldr	r3, [pc, #52]	; (8017974 <Measure_options_screen_S8+0xc8>)
 801793e:	701a      	strb	r2, [r3, #0]
 8017940:	e007      	b.n	8017952 <Measure_options_screen_S8+0xa6>
		case 0: if(mm_peak>0)mm_peak--; break;
 8017942:	bf00      	nop
 8017944:	e006      	b.n	8017954 <Measure_options_screen_S8+0xa8>
		case 1: if(leak_detect>0)leak_detect--; break;
 8017946:	bf00      	nop
 8017948:	e004      	b.n	8017954 <Measure_options_screen_S8+0xa8>
		case 2: if(PV>0)PV--; break;
 801794a:	bf00      	nop
 801794c:	e002      	b.n	8017954 <Measure_options_screen_S8+0xa8>
		case 3: if(PI>0)PI--; break;
 801794e:	bf00      	nop
 8017950:	e000      	b.n	8017954 <Measure_options_screen_S8+0xa8>
		case 4: if(PE>0)PE--; break;
 8017952:	bf00      	nop
	}
}
 8017954:	bf00      	nop
 8017956:	46bd      	mov	sp, r7
 8017958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795c:	4770      	bx	lr
 801795e:	bf00      	nop
 8017960:	200007ea 	.word	0x200007ea
 8017964:	20000832 	.word	0x20000832
 8017968:	20000833 	.word	0x20000833
 801796c:	20000834 	.word	0x20000834
 8017970:	20000835 	.word	0x20000835
 8017974:	20000836 	.word	0x20000836

08017978 <Measure_options_screen_S5>:

// FORWARD
void Measure_options_screen_S5(void)
{
 8017978:	b480      	push	{r7}
 801797a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801797c:	4b2b      	ldr	r3, [pc, #172]	; (8017a2c <Measure_options_screen_S5+0xb4>)
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	2b04      	cmp	r3, #4
 8017982:	d84d      	bhi.n	8017a20 <Measure_options_screen_S5+0xa8>
 8017984:	a201      	add	r2, pc, #4	; (adr r2, 801798c <Measure_options_screen_S5+0x14>)
 8017986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801798a:	bf00      	nop
 801798c:	080179a1 	.word	0x080179a1
 8017990:	080179b7 	.word	0x080179b7
 8017994:	080179cd 	.word	0x080179cd
 8017998:	080179e3 	.word	0x080179e3
 801799c:	080179f9 	.word	0x080179f9
	{
		case 0: if(mm_peak<1)mm_peak++; break;
 80179a0:	4b23      	ldr	r3, [pc, #140]	; (8017a30 <Measure_options_screen_S5+0xb8>)
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d132      	bne.n	8017a0e <Measure_options_screen_S5+0x96>
 80179a8:	4b21      	ldr	r3, [pc, #132]	; (8017a30 <Measure_options_screen_S5+0xb8>)
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	3301      	adds	r3, #1
 80179ae:	b2da      	uxtb	r2, r3
 80179b0:	4b1f      	ldr	r3, [pc, #124]	; (8017a30 <Measure_options_screen_S5+0xb8>)
 80179b2:	701a      	strb	r2, [r3, #0]
 80179b4:	e02b      	b.n	8017a0e <Measure_options_screen_S5+0x96>
		case 1: if(leak_detect<2)leak_detect++; break;
 80179b6:	4b1f      	ldr	r3, [pc, #124]	; (8017a34 <Measure_options_screen_S5+0xbc>)
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	2b01      	cmp	r3, #1
 80179bc:	d829      	bhi.n	8017a12 <Measure_options_screen_S5+0x9a>
 80179be:	4b1d      	ldr	r3, [pc, #116]	; (8017a34 <Measure_options_screen_S5+0xbc>)
 80179c0:	781b      	ldrb	r3, [r3, #0]
 80179c2:	3301      	adds	r3, #1
 80179c4:	b2da      	uxtb	r2, r3
 80179c6:	4b1b      	ldr	r3, [pc, #108]	; (8017a34 <Measure_options_screen_S5+0xbc>)
 80179c8:	701a      	strb	r2, [r3, #0]
 80179ca:	e022      	b.n	8017a12 <Measure_options_screen_S5+0x9a>
		case 2: if(PV<1)PV++; break;
 80179cc:	4b1a      	ldr	r3, [pc, #104]	; (8017a38 <Measure_options_screen_S5+0xc0>)
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d120      	bne.n	8017a16 <Measure_options_screen_S5+0x9e>
 80179d4:	4b18      	ldr	r3, [pc, #96]	; (8017a38 <Measure_options_screen_S5+0xc0>)
 80179d6:	781b      	ldrb	r3, [r3, #0]
 80179d8:	3301      	adds	r3, #1
 80179da:	b2da      	uxtb	r2, r3
 80179dc:	4b16      	ldr	r3, [pc, #88]	; (8017a38 <Measure_options_screen_S5+0xc0>)
 80179de:	701a      	strb	r2, [r3, #0]
 80179e0:	e019      	b.n	8017a16 <Measure_options_screen_S5+0x9e>
		case 3: if(PI<1)PI++; break;
 80179e2:	4b16      	ldr	r3, [pc, #88]	; (8017a3c <Measure_options_screen_S5+0xc4>)
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d117      	bne.n	8017a1a <Measure_options_screen_S5+0xa2>
 80179ea:	4b14      	ldr	r3, [pc, #80]	; (8017a3c <Measure_options_screen_S5+0xc4>)
 80179ec:	781b      	ldrb	r3, [r3, #0]
 80179ee:	3301      	adds	r3, #1
 80179f0:	b2da      	uxtb	r2, r3
 80179f2:	4b12      	ldr	r3, [pc, #72]	; (8017a3c <Measure_options_screen_S5+0xc4>)
 80179f4:	701a      	strb	r2, [r3, #0]
 80179f6:	e010      	b.n	8017a1a <Measure_options_screen_S5+0xa2>
		case 4: if(PE<7)PE++; break;
 80179f8:	4b11      	ldr	r3, [pc, #68]	; (8017a40 <Measure_options_screen_S5+0xc8>)
 80179fa:	781b      	ldrb	r3, [r3, #0]
 80179fc:	2b06      	cmp	r3, #6
 80179fe:	d80e      	bhi.n	8017a1e <Measure_options_screen_S5+0xa6>
 8017a00:	4b0f      	ldr	r3, [pc, #60]	; (8017a40 <Measure_options_screen_S5+0xc8>)
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	3301      	adds	r3, #1
 8017a06:	b2da      	uxtb	r2, r3
 8017a08:	4b0d      	ldr	r3, [pc, #52]	; (8017a40 <Measure_options_screen_S5+0xc8>)
 8017a0a:	701a      	strb	r2, [r3, #0]
 8017a0c:	e007      	b.n	8017a1e <Measure_options_screen_S5+0xa6>
		case 0: if(mm_peak<1)mm_peak++; break;
 8017a0e:	bf00      	nop
 8017a10:	e006      	b.n	8017a20 <Measure_options_screen_S5+0xa8>
		case 1: if(leak_detect<2)leak_detect++; break;
 8017a12:	bf00      	nop
 8017a14:	e004      	b.n	8017a20 <Measure_options_screen_S5+0xa8>
		case 2: if(PV<1)PV++; break;
 8017a16:	bf00      	nop
 8017a18:	e002      	b.n	8017a20 <Measure_options_screen_S5+0xa8>
		case 3: if(PI<1)PI++; break;
 8017a1a:	bf00      	nop
 8017a1c:	e000      	b.n	8017a20 <Measure_options_screen_S5+0xa8>
		case 4: if(PE<7)PE++; break;
 8017a1e:	bf00      	nop
	}
}
 8017a20:	bf00      	nop
 8017a22:	46bd      	mov	sp, r7
 8017a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a28:	4770      	bx	lr
 8017a2a:	bf00      	nop
 8017a2c:	200007ea 	.word	0x200007ea
 8017a30:	20000832 	.word	0x20000832
 8017a34:	20000833 	.word	0x20000833
 8017a38:	20000834 	.word	0x20000834
 8017a3c:	20000835 	.word	0x20000835
 8017a40:	20000836 	.word	0x20000836

08017a44 <Main_screen_func>:

uint16_t view_tim=0;
uint8_t view =0;

void Main_screen_func(void)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	af00      	add	r7, sp, #0
	if(view==1)
 8017a48:	4b61      	ldr	r3, [pc, #388]	; (8017bd0 <Main_screen_func+0x18c>)
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	2b01      	cmp	r3, #1
 8017a4e:	f040 80bd 	bne.w	8017bcc <Main_screen_func+0x188>
	{
		RTC_view();
 8017a52:	f000 f935 	bl	8017cc0 <RTC_view>

		view=0;
 8017a56:	4b5e      	ldr	r3, [pc, #376]	; (8017bd0 <Main_screen_func+0x18c>)
 8017a58:	2200      	movs	r2, #0
 8017a5a:	701a      	strb	r2, [r3, #0]
		u8g2_SetFont(&u8g2, u8g2_font_inr30_mn);
 8017a5c:	495d      	ldr	r1, [pc, #372]	; (8017bd4 <Main_screen_func+0x190>)
 8017a5e:	485e      	ldr	r0, [pc, #376]	; (8017bd8 <Main_screen_func+0x194>)
 8017a60:	f7fd fff4 	bl	8015a4c <u8g2_SetFont>

		sprintf(RAM,"%+fV", Pressure);
 8017a64:	4b5d      	ldr	r3, [pc, #372]	; (8017bdc <Main_screen_func+0x198>)
 8017a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a6a:	495d      	ldr	r1, [pc, #372]	; (8017be0 <Main_screen_func+0x19c>)
 8017a6c:	485d      	ldr	r0, [pc, #372]	; (8017be4 <Main_screen_func+0x1a0>)
 8017a6e:	f006 fa77 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 70, RAM);
 8017a72:	4b5c      	ldr	r3, [pc, #368]	; (8017be4 <Main_screen_func+0x1a0>)
 8017a74:	2246      	movs	r2, #70	; 0x46
 8017a76:	2105      	movs	r1, #5
 8017a78:	4857      	ldr	r0, [pc, #348]	; (8017bd8 <Main_screen_func+0x194>)
 8017a7a:	f7fd ff45 	bl	8015908 <u8g2_DrawUTF8>

		switch(E_fun)
 8017a7e:	4b5a      	ldr	r3, [pc, #360]	; (8017be8 <Main_screen_func+0x1a4>)
 8017a80:	781b      	ldrb	r3, [r3, #0]
 8017a82:	2b02      	cmp	r3, #2
 8017a84:	d03d      	beq.n	8017b02 <Main_screen_func+0xbe>
 8017a86:	2b02      	cmp	r3, #2
 8017a88:	dc5a      	bgt.n	8017b40 <Main_screen_func+0xfc>
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d002      	beq.n	8017a94 <Main_screen_func+0x50>
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d018      	beq.n	8017ac4 <Main_screen_func+0x80>
 8017a92:	e055      	b.n	8017b40 <Main_screen_func+0xfc>
		{
		// Давление
		case 0:
			sprintf(RAM,"%+fV", Test_Pressure);
 8017a94:	4b55      	ldr	r3, [pc, #340]	; (8017bec <Main_screen_func+0x1a8>)
 8017a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a9a:	4951      	ldr	r1, [pc, #324]	; (8017be0 <Main_screen_func+0x19c>)
 8017a9c:	4851      	ldr	r0, [pc, #324]	; (8017be4 <Main_screen_func+0x1a0>)
 8017a9e:	f006 fa5f 	bl	801df60 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017aa2:	4b50      	ldr	r3, [pc, #320]	; (8017be4 <Main_screen_func+0x1a0>)
 8017aa4:	2282      	movs	r2, #130	; 0x82
 8017aa6:	2105      	movs	r1, #5
 8017aa8:	484b      	ldr	r0, [pc, #300]	; (8017bd8 <Main_screen_func+0x194>)
 8017aaa:	f7fd ff2d 	bl	8015908 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017aae:	4950      	ldr	r1, [pc, #320]	; (8017bf0 <Main_screen_func+0x1ac>)
 8017ab0:	4849      	ldr	r0, [pc, #292]	; (8017bd8 <Main_screen_func+0x194>)
 8017ab2:	f7fd ffcb 	bl	8015a4c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "давление");
 8017ab6:	4b4f      	ldr	r3, [pc, #316]	; (8017bf4 <Main_screen_func+0x1b0>)
 8017ab8:	229b      	movs	r2, #155	; 0x9b
 8017aba:	21a0      	movs	r1, #160	; 0xa0
 8017abc:	4846      	ldr	r0, [pc, #280]	; (8017bd8 <Main_screen_func+0x194>)
 8017abe:	f7fd ff23 	bl	8015908 <u8g2_DrawUTF8>
			break;
 8017ac2:	e03d      	b.n	8017b40 <Main_screen_func+0xfc>

			// Ток
		case 1:
			sprintf(RAM,"%+fV", current_4_20mA-Electric_zero);
 8017ac4:	4b4c      	ldr	r3, [pc, #304]	; (8017bf8 <Main_screen_func+0x1b4>)
 8017ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017aca:	4b4c      	ldr	r3, [pc, #304]	; (8017bfc <Main_screen_func+0x1b8>)
 8017acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ad0:	f7e8 fbea 	bl	80002a8 <__aeabi_dsub>
 8017ad4:	4602      	mov	r2, r0
 8017ad6:	460b      	mov	r3, r1
 8017ad8:	4941      	ldr	r1, [pc, #260]	; (8017be0 <Main_screen_func+0x19c>)
 8017ada:	4842      	ldr	r0, [pc, #264]	; (8017be4 <Main_screen_func+0x1a0>)
 8017adc:	f006 fa40 	bl	801df60 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017ae0:	4b40      	ldr	r3, [pc, #256]	; (8017be4 <Main_screen_func+0x1a0>)
 8017ae2:	2282      	movs	r2, #130	; 0x82
 8017ae4:	2105      	movs	r1, #5
 8017ae6:	483c      	ldr	r0, [pc, #240]	; (8017bd8 <Main_screen_func+0x194>)
 8017ae8:	f7fd ff0e 	bl	8015908 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017aec:	4940      	ldr	r1, [pc, #256]	; (8017bf0 <Main_screen_func+0x1ac>)
 8017aee:	483a      	ldr	r0, [pc, #232]	; (8017bd8 <Main_screen_func+0x194>)
 8017af0:	f7fd ffac 	bl	8015a4c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "ток");
 8017af4:	4b42      	ldr	r3, [pc, #264]	; (8017c00 <Main_screen_func+0x1bc>)
 8017af6:	229b      	movs	r2, #155	; 0x9b
 8017af8:	21a0      	movs	r1, #160	; 0xa0
 8017afa:	4837      	ldr	r0, [pc, #220]	; (8017bd8 <Main_screen_func+0x194>)
 8017afc:	f7fd ff04 	bl	8015908 <u8g2_DrawUTF8>
			break;
 8017b00:	e01e      	b.n	8017b40 <Main_screen_func+0xfc>

			// Напряжение
		case 2:
			sprintf(RAM,"%+fV", voltage_measure-Electric_zero);
 8017b02:	4b40      	ldr	r3, [pc, #256]	; (8017c04 <Main_screen_func+0x1c0>)
 8017b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017b08:	4b3c      	ldr	r3, [pc, #240]	; (8017bfc <Main_screen_func+0x1b8>)
 8017b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b0e:	f7e8 fbcb 	bl	80002a8 <__aeabi_dsub>
 8017b12:	4602      	mov	r2, r0
 8017b14:	460b      	mov	r3, r1
 8017b16:	4932      	ldr	r1, [pc, #200]	; (8017be0 <Main_screen_func+0x19c>)
 8017b18:	4832      	ldr	r0, [pc, #200]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b1a:	f006 fa21 	bl	801df60 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 8017b1e:	4b31      	ldr	r3, [pc, #196]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b20:	2282      	movs	r2, #130	; 0x82
 8017b22:	2105      	movs	r1, #5
 8017b24:	482c      	ldr	r0, [pc, #176]	; (8017bd8 <Main_screen_func+0x194>)
 8017b26:	f7fd feef 	bl	8015908 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017b2a:	4931      	ldr	r1, [pc, #196]	; (8017bf0 <Main_screen_func+0x1ac>)
 8017b2c:	482a      	ldr	r0, [pc, #168]	; (8017bd8 <Main_screen_func+0x194>)
 8017b2e:	f7fd ff8d 	bl	8015a4c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "напряжение");
 8017b32:	4b35      	ldr	r3, [pc, #212]	; (8017c08 <Main_screen_func+0x1c4>)
 8017b34:	229b      	movs	r2, #155	; 0x9b
 8017b36:	21a0      	movs	r1, #160	; 0xa0
 8017b38:	4827      	ldr	r0, [pc, #156]	; (8017bd8 <Main_screen_func+0x194>)
 8017b3a:	f7fd fee5 	bl	8015908 <u8g2_DrawUTF8>
			break;
 8017b3e:	bf00      	nop
		}

		u8g2_DrawUTF8(&u8g2, 5, 35, "Каюков А.Н.");
 8017b40:	4b32      	ldr	r3, [pc, #200]	; (8017c0c <Main_screen_func+0x1c8>)
 8017b42:	2223      	movs	r2, #35	; 0x23
 8017b44:	2105      	movs	r1, #5
 8017b46:	4824      	ldr	r0, [pc, #144]	; (8017bd8 <Main_screen_func+0x194>)
 8017b48:	f7fd fede 	bl	8015908 <u8g2_DrawUTF8>
		u8g2_DrawUTF8(&u8g2, 5, 95, "Агапов А.Д.");
 8017b4c:	4b30      	ldr	r3, [pc, #192]	; (8017c10 <Main_screen_func+0x1cc>)
 8017b4e:	225f      	movs	r2, #95	; 0x5f
 8017b50:	2105      	movs	r1, #5
 8017b52:	4821      	ldr	r0, [pc, #132]	; (8017bd8 <Main_screen_func+0x194>)
 8017b54:	f7fd fed8 	bl	8015908 <u8g2_DrawUTF8>

		sprintf(RAM,"t %.2f", Temperature2);
 8017b58:	4b2e      	ldr	r3, [pc, #184]	; (8017c14 <Main_screen_func+0x1d0>)
 8017b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b5e:	492e      	ldr	r1, [pc, #184]	; (8017c18 <Main_screen_func+0x1d4>)
 8017b60:	4820      	ldr	r0, [pc, #128]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b62:	f006 f9fd 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 35, RAM);
 8017b66:	4b1f      	ldr	r3, [pc, #124]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b68:	2223      	movs	r2, #35	; 0x23
 8017b6a:	2178      	movs	r1, #120	; 0x78
 8017b6c:	481a      	ldr	r0, [pc, #104]	; (8017bd8 <Main_screen_func+0x194>)
 8017b6e:	f7fd fecb 	bl	8015908 <u8g2_DrawUTF8>

		sprintf(RAM,"%.6f", Temperature_coeff_25);
 8017b72:	4b2a      	ldr	r3, [pc, #168]	; (8017c1c <Main_screen_func+0x1d8>)
 8017b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b78:	4929      	ldr	r1, [pc, #164]	; (8017c20 <Main_screen_func+0x1dc>)
 8017b7a:	481a      	ldr	r0, [pc, #104]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b7c:	f006 f9f0 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 155, RAM);
 8017b80:	4b18      	ldr	r3, [pc, #96]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b82:	229b      	movs	r2, #155	; 0x9b
 8017b84:	2105      	movs	r1, #5
 8017b86:	4814      	ldr	r0, [pc, #80]	; (8017bd8 <Main_screen_func+0x194>)
 8017b88:	f7fd febe 	bl	8015908 <u8g2_DrawUTF8>

		sprintf(RAM,"%.2f", MCU_temp);
 8017b8c:	4b25      	ldr	r3, [pc, #148]	; (8017c24 <Main_screen_func+0x1e0>)
 8017b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b92:	4925      	ldr	r1, [pc, #148]	; (8017c28 <Main_screen_func+0x1e4>)
 8017b94:	4813      	ldr	r0, [pc, #76]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b96:	f006 f9e3 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 95, 155, RAM);
 8017b9a:	4b12      	ldr	r3, [pc, #72]	; (8017be4 <Main_screen_func+0x1a0>)
 8017b9c:	229b      	movs	r2, #155	; 0x9b
 8017b9e:	215f      	movs	r1, #95	; 0x5f
 8017ba0:	480d      	ldr	r0, [pc, #52]	; (8017bd8 <Main_screen_func+0x194>)
 8017ba2:	f7fd feb1 	bl	8015908 <u8g2_DrawUTF8>


		sprintf(RAM,"t %.2f", Temperature);
 8017ba6:	4b21      	ldr	r3, [pc, #132]	; (8017c2c <Main_screen_func+0x1e8>)
 8017ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bac:	491a      	ldr	r1, [pc, #104]	; (8017c18 <Main_screen_func+0x1d4>)
 8017bae:	480d      	ldr	r0, [pc, #52]	; (8017be4 <Main_screen_func+0x1a0>)
 8017bb0:	f006 f9d6 	bl	801df60 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 95, RAM);
 8017bb4:	4b0b      	ldr	r3, [pc, #44]	; (8017be4 <Main_screen_func+0x1a0>)
 8017bb6:	225f      	movs	r2, #95	; 0x5f
 8017bb8:	2178      	movs	r1, #120	; 0x78
 8017bba:	4807      	ldr	r0, [pc, #28]	; (8017bd8 <Main_screen_func+0x194>)
 8017bbc:	f7fd fea4 	bl	8015908 <u8g2_DrawUTF8>

		u8g2_SendBuffer(&u8g2);
 8017bc0:	4805      	ldr	r0, [pc, #20]	; (8017bd8 <Main_screen_func+0x194>)
 8017bc2:	f7fd f906 	bl	8014dd2 <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8017bc6:	4804      	ldr	r0, [pc, #16]	; (8017bd8 <Main_screen_func+0x194>)
 8017bc8:	f7fd f890 	bl	8014cec <u8g2_ClearBuffer>
	}
}
 8017bcc:	bf00      	nop
 8017bce:	bd80      	pop	{r7, pc}
 8017bd0:	20001be0 	.word	0x20001be0
 8017bd4:	08028ffc 	.word	0x08028ffc
 8017bd8:	20001f54 	.word	0x20001f54
 8017bdc:	20002218 	.word	0x20002218
 8017be0:	0802242c 	.word	0x0802242c
 8017be4:	20002008 	.word	0x20002008
 8017be8:	20000830 	.word	0x20000830
 8017bec:	20002220 	.word	0x20002220
 8017bf0:	08025da4 	.word	0x08025da4
 8017bf4:	08022434 	.word	0x08022434
 8017bf8:	20005240 	.word	0x20005240
 8017bfc:	20000810 	.word	0x20000810
 8017c00:	08022448 	.word	0x08022448
 8017c04:	200020f8 	.word	0x200020f8
 8017c08:	08022450 	.word	0x08022450
 8017c0c:	08022468 	.word	0x08022468
 8017c10:	0802247c 	.word	0x0802247c
 8017c14:	20000800 	.word	0x20000800
 8017c18:	08022490 	.word	0x08022490
 8017c1c:	20000050 	.word	0x20000050
 8017c20:	08022498 	.word	0x08022498
 8017c24:	20000828 	.word	0x20000828
 8017c28:	080224a0 	.word	0x080224a0
 8017c2c:	20000818 	.word	0x20000818

08017c30 <Main_screen_S9>:



// Меню
void Main_screen_S9(void)
{
 8017c30:	b480      	push	{r7}
 8017c32:	af00      	add	r7, sp, #0
	if(screen=Main_screen)
 8017c34:	4b08      	ldr	r3, [pc, #32]	; (8017c58 <Main_screen_S9+0x28>)
 8017c36:	2201      	movs	r2, #1
 8017c38:	701a      	strb	r2, [r3, #0]
	{
		screen=Option_screen;
 8017c3a:	4b07      	ldr	r3, [pc, #28]	; (8017c58 <Main_screen_S9+0x28>)
 8017c3c:	2204      	movs	r2, #4
 8017c3e:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8017c40:	4b06      	ldr	r3, [pc, #24]	; (8017c5c <Main_screen_S9+0x2c>)
 8017c42:	22ff      	movs	r2, #255	; 0xff
 8017c44:	701a      	strb	r2, [r3, #0]
		Menu_num=0;
 8017c46:	4b06      	ldr	r3, [pc, #24]	; (8017c60 <Main_screen_S9+0x30>)
 8017c48:	2200      	movs	r2, #0
 8017c4a:	701a      	strb	r2, [r3, #0]
	}
}
 8017c4c:	bf00      	nop
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c54:	4770      	bx	lr
 8017c56:	bf00      	nop
 8017c58:	2000004c 	.word	0x2000004c
 8017c5c:	20000330 	.word	0x20000330
 8017c60:	20000331 	.word	0x20000331

08017c64 <Viewer_timer>:


void Viewer_timer(void)
{
 8017c64:	b480      	push	{r7}
 8017c66:	af00      	add	r7, sp, #0
	if(++view_tim==300){view=1;view_tim=0;}
 8017c68:	4b0a      	ldr	r3, [pc, #40]	; (8017c94 <Viewer_timer+0x30>)
 8017c6a:	881b      	ldrh	r3, [r3, #0]
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	b29a      	uxth	r2, r3
 8017c70:	4b08      	ldr	r3, [pc, #32]	; (8017c94 <Viewer_timer+0x30>)
 8017c72:	801a      	strh	r2, [r3, #0]
 8017c74:	4b07      	ldr	r3, [pc, #28]	; (8017c94 <Viewer_timer+0x30>)
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017c7c:	d105      	bne.n	8017c8a <Viewer_timer+0x26>
 8017c7e:	4b06      	ldr	r3, [pc, #24]	; (8017c98 <Viewer_timer+0x34>)
 8017c80:	2201      	movs	r2, #1
 8017c82:	701a      	strb	r2, [r3, #0]
 8017c84:	4b03      	ldr	r3, [pc, #12]	; (8017c94 <Viewer_timer+0x30>)
 8017c86:	2200      	movs	r2, #0
 8017c88:	801a      	strh	r2, [r3, #0]
}
 8017c8a:	bf00      	nop
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c92:	4770      	bx	lr
 8017c94:	20001bde 	.word	0x20001bde
 8017c98:	20001be0 	.word	0x20001be0

08017c9c <Battery_process>:
const uint8_t eltara_icon[]={0,16,0,16, 0x3F, 0xFC, 0x40, 0x02, 0x80, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x86, 0x01, 0x86, 0x01, 0x87, 0x81, 0x87, 0x81, 0x86, 0x01, 0x86, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x80, 0x01, 0x40, 0x02, 0x3F, 0xFC};



void Battery_process(void)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*) &Vbat_uint,128);
 8017ca0:	2280      	movs	r2, #128	; 0x80
 8017ca2:	4904      	ldr	r1, [pc, #16]	; (8017cb4 <Battery_process+0x18>)
 8017ca4:	4804      	ldr	r0, [pc, #16]	; (8017cb8 <Battery_process+0x1c>)
 8017ca6:	f7f0 fbcd 	bl	8008444 <HAL_ADC_Start_DMA>
	sleep(100);
 8017caa:	2064      	movs	r0, #100	; 0x64
 8017cac:	f7eb fb06 	bl	80032bc <sleep>
}
 8017cb0:	bf00      	nop
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	20002100 	.word	0x20002100
 8017cb8:	20007a4c 	.word	0x20007a4c
 8017cbc:	00000000 	.word	0x00000000

08017cc0 <RTC_view>:



void RTC_view(void)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b086      	sub	sp, #24
 8017cc4:	af02      	add	r7, sp, #8
	uint8_t battery_percent, i;
	uint32_t bat_sum=0;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	60bb      	str	r3, [r7, #8]
	float battery_volt;

	// date & time
	u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017cca:	4959      	ldr	r1, [pc, #356]	; (8017e30 <RTC_view+0x170>)
 8017ccc:	4859      	ldr	r0, [pc, #356]	; (8017e34 <RTC_view+0x174>)
 8017cce:	f7fd febd 	bl	8015a4c <u8g2_SetFont>
	sprintf(RAM,"%02d.%02d.%02d", day, month, year);
 8017cd2:	4b59      	ldr	r3, [pc, #356]	; (8017e38 <RTC_view+0x178>)
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	461a      	mov	r2, r3
 8017cd8:	4b58      	ldr	r3, [pc, #352]	; (8017e3c <RTC_view+0x17c>)
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	4619      	mov	r1, r3
 8017cde:	4b58      	ldr	r3, [pc, #352]	; (8017e40 <RTC_view+0x180>)
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	9300      	str	r3, [sp, #0]
 8017ce4:	460b      	mov	r3, r1
 8017ce6:	4957      	ldr	r1, [pc, #348]	; (8017e44 <RTC_view+0x184>)
 8017ce8:	4857      	ldr	r0, [pc, #348]	; (8017e48 <RTC_view+0x188>)
 8017cea:	f006 f939 	bl	801df60 <siprintf>
	u8g2_DrawUTF8(&u8g2, 0, 12, RAM);
 8017cee:	4b56      	ldr	r3, [pc, #344]	; (8017e48 <RTC_view+0x188>)
 8017cf0:	220c      	movs	r2, #12
 8017cf2:	2100      	movs	r1, #0
 8017cf4:	484f      	ldr	r0, [pc, #316]	; (8017e34 <RTC_view+0x174>)
 8017cf6:	f7fd fe07 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:%02d:%02d", hour, minute, sec);
 8017cfa:	4b54      	ldr	r3, [pc, #336]	; (8017e4c <RTC_view+0x18c>)
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	461a      	mov	r2, r3
 8017d00:	4b53      	ldr	r3, [pc, #332]	; (8017e50 <RTC_view+0x190>)
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	4619      	mov	r1, r3
 8017d06:	4b53      	ldr	r3, [pc, #332]	; (8017e54 <RTC_view+0x194>)
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	9300      	str	r3, [sp, #0]
 8017d0c:	460b      	mov	r3, r1
 8017d0e:	4952      	ldr	r1, [pc, #328]	; (8017e58 <RTC_view+0x198>)
 8017d10:	484d      	ldr	r0, [pc, #308]	; (8017e48 <RTC_view+0x188>)
 8017d12:	f006 f925 	bl	801df60 <siprintf>
	u8g2_DrawUTF8(&u8g2, 81, 12, RAM);
 8017d16:	4b4c      	ldr	r3, [pc, #304]	; (8017e48 <RTC_view+0x188>)
 8017d18:	220c      	movs	r2, #12
 8017d1a:	2151      	movs	r1, #81	; 0x51
 8017d1c:	4845      	ldr	r0, [pc, #276]	; (8017e34 <RTC_view+0x174>)
 8017d1e:	f7fd fdf3 	bl	8015908 <u8g2_DrawUTF8>

	// Tarring
	if(Pressure_zero!=0)DrawImage(tara_icon, 194, 2, 1);
 8017d22:	4b4e      	ldr	r3, [pc, #312]	; (8017e5c <RTC_view+0x19c>)
 8017d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017d28:	f04f 0200 	mov.w	r2, #0
 8017d2c:	f04f 0300 	mov.w	r3, #0
 8017d30:	f7e8 feda 	bl	8000ae8 <__aeabi_dcmpeq>
 8017d34:	4603      	mov	r3, r0
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d105      	bne.n	8017d46 <RTC_view+0x86>
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	2202      	movs	r2, #2
 8017d3e:	21c2      	movs	r1, #194	; 0xc2
 8017d40:	4847      	ldr	r0, [pc, #284]	; (8017e60 <RTC_view+0x1a0>)
 8017d42:	f7ea ff35 	bl	8002bb0 <DrawImage>

	//El tarring
	if(Electric_zero!=0)DrawImage(eltara_icon, 176, 2, 1);
 8017d46:	4b47      	ldr	r3, [pc, #284]	; (8017e64 <RTC_view+0x1a4>)
 8017d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017d4c:	f04f 0200 	mov.w	r2, #0
 8017d50:	f04f 0300 	mov.w	r3, #0
 8017d54:	f7e8 fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d105      	bne.n	8017d6a <RTC_view+0xaa>
 8017d5e:	2301      	movs	r3, #1
 8017d60:	2202      	movs	r2, #2
 8017d62:	21b0      	movs	r1, #176	; 0xb0
 8017d64:	4840      	ldr	r0, [pc, #256]	; (8017e68 <RTC_view+0x1a8>)
 8017d66:	f7ea ff23 	bl	8002bb0 <DrawImage>

	// Battery
	for(i=0;i<128;i++)bat_sum+=Vbat_uint[i];
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	73fb      	strb	r3, [r7, #15]
 8017d6e:	e00a      	b.n	8017d86 <RTC_view+0xc6>
 8017d70:	7bfb      	ldrb	r3, [r7, #15]
 8017d72:	4a3e      	ldr	r2, [pc, #248]	; (8017e6c <RTC_view+0x1ac>)
 8017d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017d78:	461a      	mov	r2, r3
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	4413      	add	r3, r2
 8017d7e:	60bb      	str	r3, [r7, #8]
 8017d80:	7bfb      	ldrb	r3, [r7, #15]
 8017d82:	3301      	adds	r3, #1
 8017d84:	73fb      	strb	r3, [r7, #15]
 8017d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	daf0      	bge.n	8017d70 <RTC_view+0xb0>
	battery_volt = 0.0074258*(bat_sum>>7);
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	09db      	lsrs	r3, r3, #7
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7e8 fbc6 	bl	8000524 <__aeabi_ui2d>
 8017d98:	a321      	add	r3, pc, #132	; (adr r3, 8017e20 <RTC_view+0x160>)
 8017d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d9e:	f7e8 fc3b 	bl	8000618 <__aeabi_dmul>
 8017da2:	4602      	mov	r2, r0
 8017da4:	460b      	mov	r3, r1
 8017da6:	4610      	mov	r0, r2
 8017da8:	4619      	mov	r1, r3
 8017daa:	f7e8 ff2d 	bl	8000c08 <__aeabi_d2f>
 8017dae:	4603      	mov	r3, r0
 8017db0:	607b      	str	r3, [r7, #4]
	DrawImage(bat_icon, 216, 4, 1);
 8017db2:	2301      	movs	r3, #1
 8017db4:	2204      	movs	r2, #4
 8017db6:	21d8      	movs	r1, #216	; 0xd8
 8017db8:	482d      	ldr	r0, [pc, #180]	; (8017e70 <RTC_view+0x1b0>)
 8017dba:	f7ea fef9 	bl	8002bb0 <DrawImage>
	battery_percent = (uint8_t)((battery_volt-2.9)*100);
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7e8 fbd2 	bl	8000568 <__aeabi_f2d>
 8017dc4:	a318      	add	r3, pc, #96	; (adr r3, 8017e28 <RTC_view+0x168>)
 8017dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dca:	f7e8 fa6d 	bl	80002a8 <__aeabi_dsub>
 8017dce:	4602      	mov	r2, r0
 8017dd0:	460b      	mov	r3, r1
 8017dd2:	4610      	mov	r0, r2
 8017dd4:	4619      	mov	r1, r3
 8017dd6:	f04f 0200 	mov.w	r2, #0
 8017dda:	4b26      	ldr	r3, [pc, #152]	; (8017e74 <RTC_view+0x1b4>)
 8017ddc:	f7e8 fc1c 	bl	8000618 <__aeabi_dmul>
 8017de0:	4602      	mov	r2, r0
 8017de2:	460b      	mov	r3, r1
 8017de4:	4610      	mov	r0, r2
 8017de6:	4619      	mov	r1, r3
 8017de8:	f7e8 feee 	bl	8000bc8 <__aeabi_d2uiz>
 8017dec:	4603      	mov	r3, r0
 8017dee:	70fb      	strb	r3, [r7, #3]

	u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8017df0:	4921      	ldr	r1, [pc, #132]	; (8017e78 <RTC_view+0x1b8>)
 8017df2:	4810      	ldr	r0, [pc, #64]	; (8017e34 <RTC_view+0x174>)
 8017df4:	f7fd fe2a 	bl	8015a4c <u8g2_SetFont>
	sprintf(RAM,"%.2f", battery_volt);
 8017df8:	6878      	ldr	r0, [r7, #4]
 8017dfa:	f7e8 fbb5 	bl	8000568 <__aeabi_f2d>
 8017dfe:	4602      	mov	r2, r0
 8017e00:	460b      	mov	r3, r1
 8017e02:	491e      	ldr	r1, [pc, #120]	; (8017e7c <RTC_view+0x1bc>)
 8017e04:	4810      	ldr	r0, [pc, #64]	; (8017e48 <RTC_view+0x188>)
 8017e06:	f006 f8ab 	bl	801df60 <siprintf>
	//sprintf(RAM,"%d", battery_percent);
	u8g2_DrawUTF8(&u8g2, 219, 13, RAM);
 8017e0a:	4b0f      	ldr	r3, [pc, #60]	; (8017e48 <RTC_view+0x188>)
 8017e0c:	220d      	movs	r2, #13
 8017e0e:	21db      	movs	r1, #219	; 0xdb
 8017e10:	4808      	ldr	r0, [pc, #32]	; (8017e34 <RTC_view+0x174>)
 8017e12:	f7fd fd79 	bl	8015908 <u8g2_DrawUTF8>
}
 8017e16:	bf00      	nop
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	02589fd4 	.word	0x02589fd4
 8017e24:	3f7e6a84 	.word	0x3f7e6a84
 8017e28:	33333333 	.word	0x33333333
 8017e2c:	40073333 	.word	0x40073333
 8017e30:	08025da4 	.word	0x08025da4
 8017e34:	20001f54 	.word	0x20001f54
 8017e38:	200086cc 	.word	0x200086cc
 8017e3c:	200086d3 	.word	0x200086d3
 8017e40:	200086d4 	.word	0x200086d4
 8017e44:	080224a8 	.word	0x080224a8
 8017e48:	20002008 	.word	0x20002008
 8017e4c:	200086cf 	.word	0x200086cf
 8017e50:	200086d6 	.word	0x200086d6
 8017e54:	200086d0 	.word	0x200086d0
 8017e58:	080224b8 	.word	0x080224b8
 8017e5c:	20000808 	.word	0x20000808
 8017e60:	08029678 	.word	0x08029678
 8017e64:	20000810 	.word	0x20000810
 8017e68:	0802969c 	.word	0x0802969c
 8017e6c:	20002100 	.word	0x20002100
 8017e70:	08029650 	.word	0x08029650
 8017e74:	40590000 	.word	0x40590000
 8017e78:	08024130 	.word	0x08024130
 8017e7c:	080224c8 	.word	0x080224c8

08017e80 <RTC_process>:


void RTC_process(void)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b086      	sub	sp, #24
 8017e84:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8017e86:	1d3b      	adds	r3, r7, #4
 8017e88:	2200      	movs	r2, #0
 8017e8a:	601a      	str	r2, [r3, #0]
 8017e8c:	605a      	str	r2, [r3, #4]
 8017e8e:	609a      	str	r2, [r3, #8]
 8017e90:	60da      	str	r2, [r3, #12]
 8017e92:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017e94:	2300      	movs	r3, #0
 8017e96:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8017e98:	463b      	mov	r3, r7
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	4619      	mov	r1, r3
 8017e9e:	4811      	ldr	r0, [pc, #68]	; (8017ee4 <RTC_process+0x64>)
 8017ea0:	f7f5 fdc0 	bl	800da24 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8017ea4:	1d3b      	adds	r3, r7, #4
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	4619      	mov	r1, r3
 8017eaa:	480e      	ldr	r0, [pc, #56]	; (8017ee4 <RTC_process+0x64>)
 8017eac:	f7f5 fcd7 	bl	800d85e <HAL_RTC_GetTime>

	year=sDate.Year;
 8017eb0:	78fa      	ldrb	r2, [r7, #3]
 8017eb2:	4b0d      	ldr	r3, [pc, #52]	; (8017ee8 <RTC_process+0x68>)
 8017eb4:	701a      	strb	r2, [r3, #0]
	month=sDate.Month;
 8017eb6:	787a      	ldrb	r2, [r7, #1]
 8017eb8:	4b0c      	ldr	r3, [pc, #48]	; (8017eec <RTC_process+0x6c>)
 8017eba:	701a      	strb	r2, [r3, #0]
	day=sDate.Date;
 8017ebc:	78ba      	ldrb	r2, [r7, #2]
 8017ebe:	4b0c      	ldr	r3, [pc, #48]	; (8017ef0 <RTC_process+0x70>)
 8017ec0:	701a      	strb	r2, [r3, #0]
	hour=sTime.Hours;
 8017ec2:	793a      	ldrb	r2, [r7, #4]
 8017ec4:	4b0b      	ldr	r3, [pc, #44]	; (8017ef4 <RTC_process+0x74>)
 8017ec6:	701a      	strb	r2, [r3, #0]
	minute=sTime.Minutes;
 8017ec8:	797a      	ldrb	r2, [r7, #5]
 8017eca:	4b0b      	ldr	r3, [pc, #44]	; (8017ef8 <RTC_process+0x78>)
 8017ecc:	701a      	strb	r2, [r3, #0]
	sec=sTime.Seconds;
 8017ece:	79ba      	ldrb	r2, [r7, #6]
 8017ed0:	4b0a      	ldr	r3, [pc, #40]	; (8017efc <RTC_process+0x7c>)
 8017ed2:	701a      	strb	r2, [r3, #0]

	sleep(1000);
 8017ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ed8:	f7eb f9f0 	bl	80032bc <sleep>
}
 8017edc:	bf00      	nop
 8017ede:	3718      	adds	r7, #24
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}
 8017ee4:	200077d0 	.word	0x200077d0
 8017ee8:	200086d4 	.word	0x200086d4
 8017eec:	200086d3 	.word	0x200086d3
 8017ef0:	200086cc 	.word	0x200086cc
 8017ef4:	200086cf 	.word	0x200086cf
 8017ef8:	200086d6 	.word	0x200086d6
 8017efc:	200086d0 	.word	0x200086d0

08017f00 <RTC_set>:


void RTC_set(uint8_t rtc_year, uint8_t rtc_month, uint8_t rtc_day, uint8_t rtc_hour, uint8_t rtc_min, uint8_t rtc_sec)
{
 8017f00:	b590      	push	{r4, r7, lr}
 8017f02:	b089      	sub	sp, #36	; 0x24
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	4604      	mov	r4, r0
 8017f08:	4608      	mov	r0, r1
 8017f0a:	4611      	mov	r1, r2
 8017f0c:	461a      	mov	r2, r3
 8017f0e:	4623      	mov	r3, r4
 8017f10:	71fb      	strb	r3, [r7, #7]
 8017f12:	4603      	mov	r3, r0
 8017f14:	71bb      	strb	r3, [r7, #6]
 8017f16:	460b      	mov	r3, r1
 8017f18:	717b      	strb	r3, [r7, #5]
 8017f1a:	4613      	mov	r3, r2
 8017f1c:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8017f1e:	f107 030c 	add.w	r3, r7, #12
 8017f22:	2200      	movs	r2, #0
 8017f24:	601a      	str	r2, [r3, #0]
 8017f26:	605a      	str	r2, [r3, #4]
 8017f28:	609a      	str	r2, [r3, #8]
 8017f2a:	60da      	str	r2, [r3, #12]
 8017f2c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017f2e:	2300      	movs	r3, #0
 8017f30:	60bb      	str	r3, [r7, #8]
	HAL_RTC_DeInit(&hrtc);
 8017f32:	482b      	ldr	r0, [pc, #172]	; (8017fe0 <RTC_set+0xe0>)
 8017f34:	f7f5 fb82 	bl	800d63c <HAL_RTC_DeInit>


	hrtc.Instance = RTC;
 8017f38:	4b29      	ldr	r3, [pc, #164]	; (8017fe0 <RTC_set+0xe0>)
 8017f3a:	4a2a      	ldr	r2, [pc, #168]	; (8017fe4 <RTC_set+0xe4>)
 8017f3c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8017f3e:	4b28      	ldr	r3, [pc, #160]	; (8017fe0 <RTC_set+0xe0>)
 8017f40:	2200      	movs	r2, #0
 8017f42:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8017f44:	4b26      	ldr	r3, [pc, #152]	; (8017fe0 <RTC_set+0xe0>)
 8017f46:	227f      	movs	r2, #127	; 0x7f
 8017f48:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8017f4a:	4b25      	ldr	r3, [pc, #148]	; (8017fe0 <RTC_set+0xe0>)
 8017f4c:	22ff      	movs	r2, #255	; 0xff
 8017f4e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017f50:	4b23      	ldr	r3, [pc, #140]	; (8017fe0 <RTC_set+0xe0>)
 8017f52:	2200      	movs	r2, #0
 8017f54:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8017f56:	4b22      	ldr	r3, [pc, #136]	; (8017fe0 <RTC_set+0xe0>)
 8017f58:	2200      	movs	r2, #0
 8017f5a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017f5c:	4b20      	ldr	r3, [pc, #128]	; (8017fe0 <RTC_set+0xe0>)
 8017f5e:	2200      	movs	r2, #0
 8017f60:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8017f62:	4b1f      	ldr	r3, [pc, #124]	; (8017fe0 <RTC_set+0xe0>)
 8017f64:	2200      	movs	r2, #0
 8017f66:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017f68:	481d      	ldr	r0, [pc, #116]	; (8017fe0 <RTC_set+0xe0>)
 8017f6a:	f7f5 faeb 	bl	800d544 <HAL_RTC_Init>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d001      	beq.n	8017f78 <RTC_set+0x78>
	{
	Error_Handler();
 8017f74:	f7ee fc70 	bl	8006858 <Error_Handler>
	}


	sTime.Hours = rtc_hour;
 8017f78:	793b      	ldrb	r3, [r7, #4]
 8017f7a:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtc_min;
 8017f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017f80:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtc_sec;
 8017f82:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017f86:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017f88:	2300      	movs	r3, #0
 8017f8a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017f90:	f107 030c 	add.w	r3, r7, #12
 8017f94:	2200      	movs	r2, #0
 8017f96:	4619      	mov	r1, r3
 8017f98:	4811      	ldr	r0, [pc, #68]	; (8017fe0 <RTC_set+0xe0>)
 8017f9a:	f7f5 fbc3 	bl	800d724 <HAL_RTC_SetTime>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d001      	beq.n	8017fa8 <RTC_set+0xa8>
	{
		Error_Handler();
 8017fa4:	f7ee fc58 	bl	8006858 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017fa8:	2301      	movs	r3, #1
 8017faa:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtc_month;
 8017fac:	79bb      	ldrb	r3, [r7, #6]
 8017fae:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtc_day;
 8017fb0:	797b      	ldrb	r3, [r7, #5]
 8017fb2:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtc_year;
 8017fb4:	79fb      	ldrb	r3, [r7, #7]
 8017fb6:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8017fb8:	f107 0308 	add.w	r3, r7, #8
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	4619      	mov	r1, r3
 8017fc0:	4807      	ldr	r0, [pc, #28]	; (8017fe0 <RTC_set+0xe0>)
 8017fc2:	f7f5 fca8 	bl	800d916 <HAL_RTC_SetDate>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d001      	beq.n	8017fd0 <RTC_set+0xd0>
	{
		Error_Handler();
 8017fcc:	f7ee fc44 	bl	8006858 <Error_Handler>
	}

	HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017fd0:	4803      	ldr	r0, [pc, #12]	; (8017fe0 <RTC_set+0xe0>)
 8017fd2:	f7f5 fe45 	bl	800dc60 <HAL_RTCEx_EnableBypassShadow>
}
 8017fd6:	bf00      	nop
 8017fd8:	3724      	adds	r7, #36	; 0x24
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd90      	pop	{r4, r7, pc}
 8017fde:	bf00      	nop
 8017fe0:	200077d0 	.word	0x200077d0
 8017fe4:	40002800 	.word	0x40002800

08017fe8 <RTC_screen_func>:


void RTC_screen_func(void)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af02      	add	r7, sp, #8
	if(old_active_string==0xFF)
 8017fee:	4b4d      	ldr	r3, [pc, #308]	; (8018124 <RTC_screen_func+0x13c>)
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	2bff      	cmp	r3, #255	; 0xff
 8017ff4:	d11a      	bne.n	801802c <RTC_screen_func+0x44>
	{
		old_active_string=0;
 8017ff6:	4b4b      	ldr	r3, [pc, #300]	; (8018124 <RTC_screen_func+0x13c>)
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	701a      	strb	r2, [r3, #0]
		year_temp=year;
 8017ffc:	4b4a      	ldr	r3, [pc, #296]	; (8018128 <RTC_screen_func+0x140>)
 8017ffe:	781a      	ldrb	r2, [r3, #0]
 8018000:	4b4a      	ldr	r3, [pc, #296]	; (801812c <RTC_screen_func+0x144>)
 8018002:	701a      	strb	r2, [r3, #0]
		month_temp=month;
 8018004:	4b4a      	ldr	r3, [pc, #296]	; (8018130 <RTC_screen_func+0x148>)
 8018006:	781a      	ldrb	r2, [r3, #0]
 8018008:	4b4a      	ldr	r3, [pc, #296]	; (8018134 <RTC_screen_func+0x14c>)
 801800a:	701a      	strb	r2, [r3, #0]
		day_temp=day;
 801800c:	4b4a      	ldr	r3, [pc, #296]	; (8018138 <RTC_screen_func+0x150>)
 801800e:	781a      	ldrb	r2, [r3, #0]
 8018010:	4b4a      	ldr	r3, [pc, #296]	; (801813c <RTC_screen_func+0x154>)
 8018012:	701a      	strb	r2, [r3, #0]
		hour_temp=hour;
 8018014:	4b4a      	ldr	r3, [pc, #296]	; (8018140 <RTC_screen_func+0x158>)
 8018016:	781a      	ldrb	r2, [r3, #0]
 8018018:	4b4a      	ldr	r3, [pc, #296]	; (8018144 <RTC_screen_func+0x15c>)
 801801a:	701a      	strb	r2, [r3, #0]
		minute_temp=minute;
 801801c:	4b4a      	ldr	r3, [pc, #296]	; (8018148 <RTC_screen_func+0x160>)
 801801e:	781a      	ldrb	r2, [r3, #0]
 8018020:	4b4a      	ldr	r3, [pc, #296]	; (801814c <RTC_screen_func+0x164>)
 8018022:	701a      	strb	r2, [r3, #0]
		sec_temp=sec;
 8018024:	4b4a      	ldr	r3, [pc, #296]	; (8018150 <RTC_screen_func+0x168>)
 8018026:	781a      	ldrb	r2, [r3, #0]
 8018028:	4b4a      	ldr	r3, [pc, #296]	; (8018154 <RTC_screen_func+0x16c>)
 801802a:	701a      	strb	r2, [r3, #0]
	}

	// date time
	RTC_view();
 801802c:	f7ff fe48 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018030:	4949      	ldr	r1, [pc, #292]	; (8018158 <RTC_screen_func+0x170>)
 8018032:	484a      	ldr	r0, [pc, #296]	; (801815c <RTC_screen_func+0x174>)
 8018034:	f7fd fd0a 	bl	8015a4c <u8g2_SetFont>

	// Date
	u8g2_DrawUTF8(&u8g2, 20, 50, "Дата:");
 8018038:	4b49      	ldr	r3, [pc, #292]	; (8018160 <RTC_screen_func+0x178>)
 801803a:	2232      	movs	r2, #50	; 0x32
 801803c:	2114      	movs	r1, #20
 801803e:	4847      	ldr	r0, [pc, #284]	; (801815c <RTC_screen_func+0x174>)
 8018040:	f7fd fc62 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d.", day_temp);
 8018044:	4b3d      	ldr	r3, [pc, #244]	; (801813c <RTC_screen_func+0x154>)
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	461a      	mov	r2, r3
 801804a:	4946      	ldr	r1, [pc, #280]	; (8018164 <RTC_screen_func+0x17c>)
 801804c:	4846      	ldr	r0, [pc, #280]	; (8018168 <RTC_screen_func+0x180>)
 801804e:	f005 ff87 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(120, 50, RAM, edit_param, 0);
 8018052:	4b46      	ldr	r3, [pc, #280]	; (801816c <RTC_screen_func+0x184>)
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	2200      	movs	r2, #0
 8018058:	9200      	str	r2, [sp, #0]
 801805a:	4a43      	ldr	r2, [pc, #268]	; (8018168 <RTC_screen_func+0x180>)
 801805c:	2132      	movs	r1, #50	; 0x32
 801805e:	2078      	movs	r0, #120	; 0x78
 8018060:	f7ea ff36 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d.", month_temp);
 8018064:	4b33      	ldr	r3, [pc, #204]	; (8018134 <RTC_screen_func+0x14c>)
 8018066:	781b      	ldrb	r3, [r3, #0]
 8018068:	461a      	mov	r2, r3
 801806a:	493e      	ldr	r1, [pc, #248]	; (8018164 <RTC_screen_func+0x17c>)
 801806c:	483e      	ldr	r0, [pc, #248]	; (8018168 <RTC_screen_func+0x180>)
 801806e:	f005 ff77 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(150, 50, RAM, edit_param, 1);
 8018072:	4b3e      	ldr	r3, [pc, #248]	; (801816c <RTC_screen_func+0x184>)
 8018074:	781b      	ldrb	r3, [r3, #0]
 8018076:	2201      	movs	r2, #1
 8018078:	9200      	str	r2, [sp, #0]
 801807a:	4a3b      	ldr	r2, [pc, #236]	; (8018168 <RTC_screen_func+0x180>)
 801807c:	2132      	movs	r1, #50	; 0x32
 801807e:	2096      	movs	r0, #150	; 0x96
 8018080:	f7ea ff26 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", year_temp);
 8018084:	4b29      	ldr	r3, [pc, #164]	; (801812c <RTC_screen_func+0x144>)
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	461a      	mov	r2, r3
 801808a:	4939      	ldr	r1, [pc, #228]	; (8018170 <RTC_screen_func+0x188>)
 801808c:	4836      	ldr	r0, [pc, #216]	; (8018168 <RTC_screen_func+0x180>)
 801808e:	f005 ff67 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(180, 50, RAM, edit_param, 2);
 8018092:	4b36      	ldr	r3, [pc, #216]	; (801816c <RTC_screen_func+0x184>)
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2202      	movs	r2, #2
 8018098:	9200      	str	r2, [sp, #0]
 801809a:	4a33      	ldr	r2, [pc, #204]	; (8018168 <RTC_screen_func+0x180>)
 801809c:	2132      	movs	r1, #50	; 0x32
 801809e:	20b4      	movs	r0, #180	; 0xb4
 80180a0:	f7ea ff16 	bl	8002ed0 <Blink_Edit_Parameter>


	// Date
	u8g2_DrawUTF8(&u8g2, 20, 70, "Время:");
 80180a4:	4b33      	ldr	r3, [pc, #204]	; (8018174 <RTC_screen_func+0x18c>)
 80180a6:	2246      	movs	r2, #70	; 0x46
 80180a8:	2114      	movs	r1, #20
 80180aa:	482c      	ldr	r0, [pc, #176]	; (801815c <RTC_screen_func+0x174>)
 80180ac:	f7fd fc2c 	bl	8015908 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:", hour_temp);
 80180b0:	4b24      	ldr	r3, [pc, #144]	; (8018144 <RTC_screen_func+0x15c>)
 80180b2:	781b      	ldrb	r3, [r3, #0]
 80180b4:	461a      	mov	r2, r3
 80180b6:	4930      	ldr	r1, [pc, #192]	; (8018178 <RTC_screen_func+0x190>)
 80180b8:	482b      	ldr	r0, [pc, #172]	; (8018168 <RTC_screen_func+0x180>)
 80180ba:	f005 ff51 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(120, 70, RAM, edit_param, 3);
 80180be:	4b2b      	ldr	r3, [pc, #172]	; (801816c <RTC_screen_func+0x184>)
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	2203      	movs	r2, #3
 80180c4:	9200      	str	r2, [sp, #0]
 80180c6:	4a28      	ldr	r2, [pc, #160]	; (8018168 <RTC_screen_func+0x180>)
 80180c8:	2146      	movs	r1, #70	; 0x46
 80180ca:	2078      	movs	r0, #120	; 0x78
 80180cc:	f7ea ff00 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d:", minute_temp);
 80180d0:	4b1e      	ldr	r3, [pc, #120]	; (801814c <RTC_screen_func+0x164>)
 80180d2:	781b      	ldrb	r3, [r3, #0]
 80180d4:	461a      	mov	r2, r3
 80180d6:	4928      	ldr	r1, [pc, #160]	; (8018178 <RTC_screen_func+0x190>)
 80180d8:	4823      	ldr	r0, [pc, #140]	; (8018168 <RTC_screen_func+0x180>)
 80180da:	f005 ff41 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(150, 70, RAM, edit_param, 4);
 80180de:	4b23      	ldr	r3, [pc, #140]	; (801816c <RTC_screen_func+0x184>)
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	2204      	movs	r2, #4
 80180e4:	9200      	str	r2, [sp, #0]
 80180e6:	4a20      	ldr	r2, [pc, #128]	; (8018168 <RTC_screen_func+0x180>)
 80180e8:	2146      	movs	r1, #70	; 0x46
 80180ea:	2096      	movs	r0, #150	; 0x96
 80180ec:	f7ea fef0 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", sec_temp);
 80180f0:	4b18      	ldr	r3, [pc, #96]	; (8018154 <RTC_screen_func+0x16c>)
 80180f2:	781b      	ldrb	r3, [r3, #0]
 80180f4:	461a      	mov	r2, r3
 80180f6:	491e      	ldr	r1, [pc, #120]	; (8018170 <RTC_screen_func+0x188>)
 80180f8:	481b      	ldr	r0, [pc, #108]	; (8018168 <RTC_screen_func+0x180>)
 80180fa:	f005 ff31 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(180, 70, RAM, edit_param, 5);
 80180fe:	4b1b      	ldr	r3, [pc, #108]	; (801816c <RTC_screen_func+0x184>)
 8018100:	781b      	ldrb	r3, [r3, #0]
 8018102:	2205      	movs	r2, #5
 8018104:	9200      	str	r2, [sp, #0]
 8018106:	4a18      	ldr	r2, [pc, #96]	; (8018168 <RTC_screen_func+0x180>)
 8018108:	2146      	movs	r1, #70	; 0x46
 801810a:	20b4      	movs	r0, #180	; 0xb4
 801810c:	f7ea fee0 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8018110:	4812      	ldr	r0, [pc, #72]	; (801815c <RTC_screen_func+0x174>)
 8018112:	f7fc fe5e 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018116:	4811      	ldr	r0, [pc, #68]	; (801815c <RTC_screen_func+0x174>)
 8018118:	f7fc fde8 	bl	8014cec <u8g2_ClearBuffer>
}
 801811c:	bf00      	nop
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	20000330 	.word	0x20000330
 8018128:	200086d4 	.word	0x200086d4
 801812c:	200086d5 	.word	0x200086d5
 8018130:	200086d3 	.word	0x200086d3
 8018134:	200086d1 	.word	0x200086d1
 8018138:	200086cc 	.word	0x200086cc
 801813c:	200086ce 	.word	0x200086ce
 8018140:	200086cf 	.word	0x200086cf
 8018144:	200086d7 	.word	0x200086d7
 8018148:	200086d6 	.word	0x200086d6
 801814c:	200086cd 	.word	0x200086cd
 8018150:	200086d0 	.word	0x200086d0
 8018154:	200086d2 	.word	0x200086d2
 8018158:	080273d0 	.word	0x080273d0
 801815c:	20001f54 	.word	0x20001f54
 8018160:	080224d0 	.word	0x080224d0
 8018164:	080224dc 	.word	0x080224dc
 8018168:	20002008 	.word	0x20002008
 801816c:	200007ea 	.word	0x200007ea
 8018170:	080224e4 	.word	0x080224e4
 8018174:	080224ec 	.word	0x080224ec
 8018178:	080224f8 	.word	0x080224f8

0801817c <RTC_screen_S9>:



// MENU
void RTC_screen_S9(void)
{
 801817c:	b480      	push	{r7}
 801817e:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8018180:	4b06      	ldr	r3, [pc, #24]	; (801819c <RTC_screen_S9+0x20>)
 8018182:	2208      	movs	r2, #8
 8018184:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018186:	4b06      	ldr	r3, [pc, #24]	; (80181a0 <RTC_screen_S9+0x24>)
 8018188:	22ff      	movs	r2, #255	; 0xff
 801818a:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 801818c:	4b05      	ldr	r3, [pc, #20]	; (80181a4 <RTC_screen_S9+0x28>)
 801818e:	2202      	movs	r2, #2
 8018190:	701a      	strb	r2, [r3, #0]
}
 8018192:	bf00      	nop
 8018194:	46bd      	mov	sp, r7
 8018196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819a:	4770      	bx	lr
 801819c:	2000004c 	.word	0x2000004c
 80181a0:	20000330 	.word	0x20000330
 80181a4:	20000331 	.word	0x20000331

080181a8 <RTC_screen_S5>:

// DOWN
void RTC_screen_S5(void)
{
 80181a8:	b480      	push	{r7}
 80181aa:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80181ac:	4b07      	ldr	r3, [pc, #28]	; (80181cc <RTC_screen_S5+0x24>)
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	2b04      	cmp	r3, #4
 80181b2:	d805      	bhi.n	80181c0 <RTC_screen_S5+0x18>
 80181b4:	4b05      	ldr	r3, [pc, #20]	; (80181cc <RTC_screen_S5+0x24>)
 80181b6:	781b      	ldrb	r3, [r3, #0]
 80181b8:	3301      	adds	r3, #1
 80181ba:	b2da      	uxtb	r2, r3
 80181bc:	4b03      	ldr	r3, [pc, #12]	; (80181cc <RTC_screen_S5+0x24>)
 80181be:	701a      	strb	r2, [r3, #0]
}
 80181c0:	bf00      	nop
 80181c2:	46bd      	mov	sp, r7
 80181c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c8:	4770      	bx	lr
 80181ca:	bf00      	nop
 80181cc:	200007ea 	.word	0x200007ea

080181d0 <RTC_screen_S8>:

// UP
void RTC_screen_S8(void)
{
 80181d0:	b480      	push	{r7}
 80181d2:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80181d4:	4b07      	ldr	r3, [pc, #28]	; (80181f4 <RTC_screen_S8+0x24>)
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d005      	beq.n	80181e8 <RTC_screen_S8+0x18>
 80181dc:	4b05      	ldr	r3, [pc, #20]	; (80181f4 <RTC_screen_S8+0x24>)
 80181de:	781b      	ldrb	r3, [r3, #0]
 80181e0:	3b01      	subs	r3, #1
 80181e2:	b2da      	uxtb	r2, r3
 80181e4:	4b03      	ldr	r3, [pc, #12]	; (80181f4 <RTC_screen_S8+0x24>)
 80181e6:	701a      	strb	r2, [r3, #0]
}
 80181e8:	bf00      	nop
 80181ea:	46bd      	mov	sp, r7
 80181ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f0:	4770      	bx	lr
 80181f2:	bf00      	nop
 80181f4:	200007ea 	.word	0x200007ea

080181f8 <RTC_screen_S6>:



// BACKWARD
void RTC_screen_S6(void)
{
 80181f8:	b480      	push	{r7}
 80181fa:	af00      	add	r7, sp, #0
	switch(edit_param)
 80181fc:	4b32      	ldr	r3, [pc, #200]	; (80182c8 <RTC_screen_S6+0xd0>)
 80181fe:	781b      	ldrb	r3, [r3, #0]
 8018200:	2b05      	cmp	r3, #5
 8018202:	d85c      	bhi.n	80182be <RTC_screen_S6+0xc6>
 8018204:	a201      	add	r2, pc, #4	; (adr r2, 801820c <RTC_screen_S6+0x14>)
 8018206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801820a:	bf00      	nop
 801820c:	08018225 	.word	0x08018225
 8018210:	0801823b 	.word	0x0801823b
 8018214:	08018251 	.word	0x08018251
 8018218:	08018267 	.word	0x08018267
 801821c:	0801827d 	.word	0x0801827d
 8018220:	08018293 	.word	0x08018293
	{
		case 0: if(day_temp>0)day_temp--; break;
 8018224:	4b29      	ldr	r3, [pc, #164]	; (80182cc <RTC_screen_S6+0xd4>)
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d03d      	beq.n	80182a8 <RTC_screen_S6+0xb0>
 801822c:	4b27      	ldr	r3, [pc, #156]	; (80182cc <RTC_screen_S6+0xd4>)
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	3b01      	subs	r3, #1
 8018232:	b2da      	uxtb	r2, r3
 8018234:	4b25      	ldr	r3, [pc, #148]	; (80182cc <RTC_screen_S6+0xd4>)
 8018236:	701a      	strb	r2, [r3, #0]
 8018238:	e036      	b.n	80182a8 <RTC_screen_S6+0xb0>
		case 1: if(month_temp>0)month_temp--; break;
 801823a:	4b25      	ldr	r3, [pc, #148]	; (80182d0 <RTC_screen_S6+0xd8>)
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d034      	beq.n	80182ac <RTC_screen_S6+0xb4>
 8018242:	4b23      	ldr	r3, [pc, #140]	; (80182d0 <RTC_screen_S6+0xd8>)
 8018244:	781b      	ldrb	r3, [r3, #0]
 8018246:	3b01      	subs	r3, #1
 8018248:	b2da      	uxtb	r2, r3
 801824a:	4b21      	ldr	r3, [pc, #132]	; (80182d0 <RTC_screen_S6+0xd8>)
 801824c:	701a      	strb	r2, [r3, #0]
 801824e:	e02d      	b.n	80182ac <RTC_screen_S6+0xb4>
		case 2: if(year_temp>0)year_temp--; break;
 8018250:	4b20      	ldr	r3, [pc, #128]	; (80182d4 <RTC_screen_S6+0xdc>)
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d02b      	beq.n	80182b0 <RTC_screen_S6+0xb8>
 8018258:	4b1e      	ldr	r3, [pc, #120]	; (80182d4 <RTC_screen_S6+0xdc>)
 801825a:	781b      	ldrb	r3, [r3, #0]
 801825c:	3b01      	subs	r3, #1
 801825e:	b2da      	uxtb	r2, r3
 8018260:	4b1c      	ldr	r3, [pc, #112]	; (80182d4 <RTC_screen_S6+0xdc>)
 8018262:	701a      	strb	r2, [r3, #0]
 8018264:	e024      	b.n	80182b0 <RTC_screen_S6+0xb8>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018266:	4b1c      	ldr	r3, [pc, #112]	; (80182d8 <RTC_screen_S6+0xe0>)
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d022      	beq.n	80182b4 <RTC_screen_S6+0xbc>
 801826e:	4b1a      	ldr	r3, [pc, #104]	; (80182d8 <RTC_screen_S6+0xe0>)
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	3b01      	subs	r3, #1
 8018274:	b2da      	uxtb	r2, r3
 8018276:	4b18      	ldr	r3, [pc, #96]	; (80182d8 <RTC_screen_S6+0xe0>)
 8018278:	701a      	strb	r2, [r3, #0]
 801827a:	e01b      	b.n	80182b4 <RTC_screen_S6+0xbc>
		case 4: if(minute_temp>0)minute_temp--; break;
 801827c:	4b17      	ldr	r3, [pc, #92]	; (80182dc <RTC_screen_S6+0xe4>)
 801827e:	781b      	ldrb	r3, [r3, #0]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d019      	beq.n	80182b8 <RTC_screen_S6+0xc0>
 8018284:	4b15      	ldr	r3, [pc, #84]	; (80182dc <RTC_screen_S6+0xe4>)
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	3b01      	subs	r3, #1
 801828a:	b2da      	uxtb	r2, r3
 801828c:	4b13      	ldr	r3, [pc, #76]	; (80182dc <RTC_screen_S6+0xe4>)
 801828e:	701a      	strb	r2, [r3, #0]
 8018290:	e012      	b.n	80182b8 <RTC_screen_S6+0xc0>
		case 5: if(sec_temp>0)sec_temp--; break;
 8018292:	4b13      	ldr	r3, [pc, #76]	; (80182e0 <RTC_screen_S6+0xe8>)
 8018294:	781b      	ldrb	r3, [r3, #0]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d010      	beq.n	80182bc <RTC_screen_S6+0xc4>
 801829a:	4b11      	ldr	r3, [pc, #68]	; (80182e0 <RTC_screen_S6+0xe8>)
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	3b01      	subs	r3, #1
 80182a0:	b2da      	uxtb	r2, r3
 80182a2:	4b0f      	ldr	r3, [pc, #60]	; (80182e0 <RTC_screen_S6+0xe8>)
 80182a4:	701a      	strb	r2, [r3, #0]
 80182a6:	e009      	b.n	80182bc <RTC_screen_S6+0xc4>
		case 0: if(day_temp>0)day_temp--; break;
 80182a8:	bf00      	nop
 80182aa:	e008      	b.n	80182be <RTC_screen_S6+0xc6>
		case 1: if(month_temp>0)month_temp--; break;
 80182ac:	bf00      	nop
 80182ae:	e006      	b.n	80182be <RTC_screen_S6+0xc6>
		case 2: if(year_temp>0)year_temp--; break;
 80182b0:	bf00      	nop
 80182b2:	e004      	b.n	80182be <RTC_screen_S6+0xc6>
		case 3: if(hour_temp>0)hour_temp--; break;
 80182b4:	bf00      	nop
 80182b6:	e002      	b.n	80182be <RTC_screen_S6+0xc6>
		case 4: if(minute_temp>0)minute_temp--; break;
 80182b8:	bf00      	nop
 80182ba:	e000      	b.n	80182be <RTC_screen_S6+0xc6>
		case 5: if(sec_temp>0)sec_temp--; break;
 80182bc:	bf00      	nop
	}
}
 80182be:	bf00      	nop
 80182c0:	46bd      	mov	sp, r7
 80182c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c6:	4770      	bx	lr
 80182c8:	200007ea 	.word	0x200007ea
 80182cc:	200086ce 	.word	0x200086ce
 80182d0:	200086d1 	.word	0x200086d1
 80182d4:	200086d5 	.word	0x200086d5
 80182d8:	200086d7 	.word	0x200086d7
 80182dc:	200086cd 	.word	0x200086cd
 80182e0:	200086d2 	.word	0x200086d2

080182e4 <RTC_screen_S7>:

// FORWARD
void RTC_screen_S7(void)
{
 80182e4:	b480      	push	{r7}
 80182e6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80182e8:	4b32      	ldr	r3, [pc, #200]	; (80183b4 <RTC_screen_S7+0xd0>)
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	2b05      	cmp	r3, #5
 80182ee:	d85c      	bhi.n	80183aa <RTC_screen_S7+0xc6>
 80182f0:	a201      	add	r2, pc, #4	; (adr r2, 80182f8 <RTC_screen_S7+0x14>)
 80182f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182f6:	bf00      	nop
 80182f8:	08018311 	.word	0x08018311
 80182fc:	08018327 	.word	0x08018327
 8018300:	0801833d 	.word	0x0801833d
 8018304:	08018353 	.word	0x08018353
 8018308:	08018369 	.word	0x08018369
 801830c:	0801837f 	.word	0x0801837f
	{
		case 0: if(day_temp<31)day_temp++; break;
 8018310:	4b29      	ldr	r3, [pc, #164]	; (80183b8 <RTC_screen_S7+0xd4>)
 8018312:	781b      	ldrb	r3, [r3, #0]
 8018314:	2b1e      	cmp	r3, #30
 8018316:	d83d      	bhi.n	8018394 <RTC_screen_S7+0xb0>
 8018318:	4b27      	ldr	r3, [pc, #156]	; (80183b8 <RTC_screen_S7+0xd4>)
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	3301      	adds	r3, #1
 801831e:	b2da      	uxtb	r2, r3
 8018320:	4b25      	ldr	r3, [pc, #148]	; (80183b8 <RTC_screen_S7+0xd4>)
 8018322:	701a      	strb	r2, [r3, #0]
 8018324:	e036      	b.n	8018394 <RTC_screen_S7+0xb0>
		case 1: if(month_temp<12)month_temp++; break;
 8018326:	4b25      	ldr	r3, [pc, #148]	; (80183bc <RTC_screen_S7+0xd8>)
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	2b0b      	cmp	r3, #11
 801832c:	d834      	bhi.n	8018398 <RTC_screen_S7+0xb4>
 801832e:	4b23      	ldr	r3, [pc, #140]	; (80183bc <RTC_screen_S7+0xd8>)
 8018330:	781b      	ldrb	r3, [r3, #0]
 8018332:	3301      	adds	r3, #1
 8018334:	b2da      	uxtb	r2, r3
 8018336:	4b21      	ldr	r3, [pc, #132]	; (80183bc <RTC_screen_S7+0xd8>)
 8018338:	701a      	strb	r2, [r3, #0]
 801833a:	e02d      	b.n	8018398 <RTC_screen_S7+0xb4>
		case 2: if(year_temp<60)year_temp++; break;
 801833c:	4b20      	ldr	r3, [pc, #128]	; (80183c0 <RTC_screen_S7+0xdc>)
 801833e:	781b      	ldrb	r3, [r3, #0]
 8018340:	2b3b      	cmp	r3, #59	; 0x3b
 8018342:	d82b      	bhi.n	801839c <RTC_screen_S7+0xb8>
 8018344:	4b1e      	ldr	r3, [pc, #120]	; (80183c0 <RTC_screen_S7+0xdc>)
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	3301      	adds	r3, #1
 801834a:	b2da      	uxtb	r2, r3
 801834c:	4b1c      	ldr	r3, [pc, #112]	; (80183c0 <RTC_screen_S7+0xdc>)
 801834e:	701a      	strb	r2, [r3, #0]
 8018350:	e024      	b.n	801839c <RTC_screen_S7+0xb8>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018352:	4b1c      	ldr	r3, [pc, #112]	; (80183c4 <RTC_screen_S7+0xe0>)
 8018354:	781b      	ldrb	r3, [r3, #0]
 8018356:	2b17      	cmp	r3, #23
 8018358:	d822      	bhi.n	80183a0 <RTC_screen_S7+0xbc>
 801835a:	4b1a      	ldr	r3, [pc, #104]	; (80183c4 <RTC_screen_S7+0xe0>)
 801835c:	781b      	ldrb	r3, [r3, #0]
 801835e:	3301      	adds	r3, #1
 8018360:	b2da      	uxtb	r2, r3
 8018362:	4b18      	ldr	r3, [pc, #96]	; (80183c4 <RTC_screen_S7+0xe0>)
 8018364:	701a      	strb	r2, [r3, #0]
 8018366:	e01b      	b.n	80183a0 <RTC_screen_S7+0xbc>
		case 4: if(minute_temp<60)minute_temp++; break;
 8018368:	4b17      	ldr	r3, [pc, #92]	; (80183c8 <RTC_screen_S7+0xe4>)
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	2b3b      	cmp	r3, #59	; 0x3b
 801836e:	d819      	bhi.n	80183a4 <RTC_screen_S7+0xc0>
 8018370:	4b15      	ldr	r3, [pc, #84]	; (80183c8 <RTC_screen_S7+0xe4>)
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	3301      	adds	r3, #1
 8018376:	b2da      	uxtb	r2, r3
 8018378:	4b13      	ldr	r3, [pc, #76]	; (80183c8 <RTC_screen_S7+0xe4>)
 801837a:	701a      	strb	r2, [r3, #0]
 801837c:	e012      	b.n	80183a4 <RTC_screen_S7+0xc0>
		case 5: if(sec_temp<60)sec_temp++; break;
 801837e:	4b13      	ldr	r3, [pc, #76]	; (80183cc <RTC_screen_S7+0xe8>)
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	2b3b      	cmp	r3, #59	; 0x3b
 8018384:	d810      	bhi.n	80183a8 <RTC_screen_S7+0xc4>
 8018386:	4b11      	ldr	r3, [pc, #68]	; (80183cc <RTC_screen_S7+0xe8>)
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	3301      	adds	r3, #1
 801838c:	b2da      	uxtb	r2, r3
 801838e:	4b0f      	ldr	r3, [pc, #60]	; (80183cc <RTC_screen_S7+0xe8>)
 8018390:	701a      	strb	r2, [r3, #0]
 8018392:	e009      	b.n	80183a8 <RTC_screen_S7+0xc4>
		case 0: if(day_temp<31)day_temp++; break;
 8018394:	bf00      	nop
 8018396:	e008      	b.n	80183aa <RTC_screen_S7+0xc6>
		case 1: if(month_temp<12)month_temp++; break;
 8018398:	bf00      	nop
 801839a:	e006      	b.n	80183aa <RTC_screen_S7+0xc6>
		case 2: if(year_temp<60)year_temp++; break;
 801839c:	bf00      	nop
 801839e:	e004      	b.n	80183aa <RTC_screen_S7+0xc6>
		case 3: if(hour_temp<24)hour_temp++; break;
 80183a0:	bf00      	nop
 80183a2:	e002      	b.n	80183aa <RTC_screen_S7+0xc6>
		case 4: if(minute_temp<60)minute_temp++; break;
 80183a4:	bf00      	nop
 80183a6:	e000      	b.n	80183aa <RTC_screen_S7+0xc6>
		case 5: if(sec_temp<60)sec_temp++; break;
 80183a8:	bf00      	nop
	}
}
 80183aa:	bf00      	nop
 80183ac:	46bd      	mov	sp, r7
 80183ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b2:	4770      	bx	lr
 80183b4:	200007ea 	.word	0x200007ea
 80183b8:	200086ce 	.word	0x200086ce
 80183bc:	200086d1 	.word	0x200086d1
 80183c0:	200086d5 	.word	0x200086d5
 80183c4:	200086d7 	.word	0x200086d7
 80183c8:	200086cd 	.word	0x200086cd
 80183cc:	200086d2 	.word	0x200086d2

080183d0 <RTC_screen_S4>:

// ENTER
void RTC_screen_S4(void)
{
 80183d0:	b5b0      	push	{r4, r5, r7, lr}
 80183d2:	b082      	sub	sp, #8
 80183d4:	af02      	add	r7, sp, #8
	RTC_set(year_temp, month_temp, day_temp, hour_temp, minute_temp, sec_temp);
 80183d6:	4b0a      	ldr	r3, [pc, #40]	; (8018400 <RTC_screen_S4+0x30>)
 80183d8:	7818      	ldrb	r0, [r3, #0]
 80183da:	4b0a      	ldr	r3, [pc, #40]	; (8018404 <RTC_screen_S4+0x34>)
 80183dc:	7819      	ldrb	r1, [r3, #0]
 80183de:	4b0a      	ldr	r3, [pc, #40]	; (8018408 <RTC_screen_S4+0x38>)
 80183e0:	781c      	ldrb	r4, [r3, #0]
 80183e2:	4b0a      	ldr	r3, [pc, #40]	; (801840c <RTC_screen_S4+0x3c>)
 80183e4:	781d      	ldrb	r5, [r3, #0]
 80183e6:	4b0a      	ldr	r3, [pc, #40]	; (8018410 <RTC_screen_S4+0x40>)
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	4a0a      	ldr	r2, [pc, #40]	; (8018414 <RTC_screen_S4+0x44>)
 80183ec:	7812      	ldrb	r2, [r2, #0]
 80183ee:	9201      	str	r2, [sp, #4]
 80183f0:	9300      	str	r3, [sp, #0]
 80183f2:	462b      	mov	r3, r5
 80183f4:	4622      	mov	r2, r4
 80183f6:	f7ff fd83 	bl	8017f00 <RTC_set>
}
 80183fa:	bf00      	nop
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bdb0      	pop	{r4, r5, r7, pc}
 8018400:	200086d5 	.word	0x200086d5
 8018404:	200086d1 	.word	0x200086d1
 8018408:	200086ce 	.word	0x200086ce
 801840c:	200086d7 	.word	0x200086d7
 8018410:	200086cd 	.word	0x200086cd
 8018414:	200086d2 	.word	0x200086d2

08018418 <About_options_screen_func>:
};



void About_options_screen_func(void)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	af00      	add	r7, sp, #0
	RTC_view();
 801841c:	f7ff fc50 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018420:	492a      	ldr	r1, [pc, #168]	; (80184cc <About_options_screen_func+0xb4>)
 8018422:	482b      	ldr	r0, [pc, #172]	; (80184d0 <About_options_screen_func+0xb8>)
 8018424:	f7fd fb12 	bl	8015a4c <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 10, 35, "Серийный номер:");
 8018428:	4b2a      	ldr	r3, [pc, #168]	; (80184d4 <About_options_screen_func+0xbc>)
 801842a:	2223      	movs	r2, #35	; 0x23
 801842c:	210a      	movs	r1, #10
 801842e:	4828      	ldr	r0, [pc, #160]	; (80184d0 <About_options_screen_func+0xb8>)
 8018430:	f7fd fa6a 	bl	8015908 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%05d", serial_num);
 8018434:	4b28      	ldr	r3, [pc, #160]	; (80184d8 <About_options_screen_func+0xc0>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	461a      	mov	r2, r3
 801843a:	4928      	ldr	r1, [pc, #160]	; (80184dc <About_options_screen_func+0xc4>)
 801843c:	4828      	ldr	r0, [pc, #160]	; (80184e0 <About_options_screen_func+0xc8>)
 801843e:	f005 fd8f 	bl	801df60 <siprintf>
	u8g2_DrawUTF8(&u8g2, 170, 35, (char*)RAM);
 8018442:	4b27      	ldr	r3, [pc, #156]	; (80184e0 <About_options_screen_func+0xc8>)
 8018444:	2223      	movs	r2, #35	; 0x23
 8018446:	21aa      	movs	r1, #170	; 0xaa
 8018448:	4821      	ldr	r0, [pc, #132]	; (80184d0 <About_options_screen_func+0xb8>)
 801844a:	f7fd fa5d 	bl	8015908 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 50, "Диапазон:");
 801844e:	4b25      	ldr	r3, [pc, #148]	; (80184e4 <About_options_screen_func+0xcc>)
 8018450:	2232      	movs	r2, #50	; 0x32
 8018452:	210a      	movs	r1, #10
 8018454:	481e      	ldr	r0, [pc, #120]	; (80184d0 <About_options_screen_func+0xb8>)
 8018456:	f7fd fa57 	bl	8015908 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 110, 50, GAUGE_RANGE_TEXT[gauge_range]);
 801845a:	4b23      	ldr	r3, [pc, #140]	; (80184e8 <About_options_screen_func+0xd0>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4a23      	ldr	r2, [pc, #140]	; (80184ec <About_options_screen_func+0xd4>)
 8018460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018464:	2232      	movs	r2, #50	; 0x32
 8018466:	216e      	movs	r1, #110	; 0x6e
 8018468:	4819      	ldr	r0, [pc, #100]	; (80184d0 <About_options_screen_func+0xb8>)
 801846a:	f7fd fa4d 	bl	8015908 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 65, "Погрешность:");
 801846e:	4b20      	ldr	r3, [pc, #128]	; (80184f0 <About_options_screen_func+0xd8>)
 8018470:	2241      	movs	r2, #65	; 0x41
 8018472:	210a      	movs	r1, #10
 8018474:	4816      	ldr	r0, [pc, #88]	; (80184d0 <About_options_screen_func+0xb8>)
 8018476:	f7fd fa47 	bl	8015908 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%.4f", gauge_error);
 801847a:	4b1e      	ldr	r3, [pc, #120]	; (80184f4 <About_options_screen_func+0xdc>)
 801847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018480:	491d      	ldr	r1, [pc, #116]	; (80184f8 <About_options_screen_func+0xe0>)
 8018482:	4817      	ldr	r0, [pc, #92]	; (80184e0 <About_options_screen_func+0xc8>)
 8018484:	f005 fd6c 	bl	801df60 <siprintf>
	u8g2_DrawUTF8(&u8g2, 140, 65, (char*)RAM);
 8018488:	4b15      	ldr	r3, [pc, #84]	; (80184e0 <About_options_screen_func+0xc8>)
 801848a:	2241      	movs	r2, #65	; 0x41
 801848c:	218c      	movs	r1, #140	; 0x8c
 801848e:	4810      	ldr	r0, [pc, #64]	; (80184d0 <About_options_screen_func+0xb8>)
 8018490:	f7fd fa3a 	bl	8015908 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 145, "Код ошибки:");
 8018494:	4b19      	ldr	r3, [pc, #100]	; (80184fc <About_options_screen_func+0xe4>)
 8018496:	2291      	movs	r2, #145	; 0x91
 8018498:	210a      	movs	r1, #10
 801849a:	480d      	ldr	r0, [pc, #52]	; (80184d0 <About_options_screen_func+0xb8>)
 801849c:	f7fd fa34 	bl	8015908 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%d", ERROR_REG);
 80184a0:	4b17      	ldr	r3, [pc, #92]	; (8018500 <About_options_screen_func+0xe8>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	461a      	mov	r2, r3
 80184a6:	4917      	ldr	r1, [pc, #92]	; (8018504 <About_options_screen_func+0xec>)
 80184a8:	480d      	ldr	r0, [pc, #52]	; (80184e0 <About_options_screen_func+0xc8>)
 80184aa:	f005 fd59 	bl	801df60 <siprintf>
	u8g2_DrawUTF8(&u8g2, 130, 145, (char*)RAM);
 80184ae:	4b0c      	ldr	r3, [pc, #48]	; (80184e0 <About_options_screen_func+0xc8>)
 80184b0:	2291      	movs	r2, #145	; 0x91
 80184b2:	2182      	movs	r1, #130	; 0x82
 80184b4:	4806      	ldr	r0, [pc, #24]	; (80184d0 <About_options_screen_func+0xb8>)
 80184b6:	f7fd fa27 	bl	8015908 <u8g2_DrawUTF8>



	u8g2_SendBuffer(&u8g2);
 80184ba:	4805      	ldr	r0, [pc, #20]	; (80184d0 <About_options_screen_func+0xb8>)
 80184bc:	f7fc fc89 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80184c0:	4803      	ldr	r0, [pc, #12]	; (80184d0 <About_options_screen_func+0xb8>)
 80184c2:	f7fc fc13 	bl	8014cec <u8g2_ClearBuffer>
}
 80184c6:	bf00      	nop
 80184c8:	bd80      	pop	{r7, pc}
 80184ca:	bf00      	nop
 80184cc:	080273d0 	.word	0x080273d0
 80184d0:	20001f54 	.word	0x20001f54
 80184d4:	08022534 	.word	0x08022534
 80184d8:	20000078 	.word	0x20000078
 80184dc:	08022554 	.word	0x08022554
 80184e0:	20002008 	.word	0x20002008
 80184e4:	0802255c 	.word	0x0802255c
 80184e8:	2000083c 	.word	0x2000083c
 80184ec:	20000304 	.word	0x20000304
 80184f0:	08022570 	.word	0x08022570
 80184f4:	20000080 	.word	0x20000080
 80184f8:	08022588 	.word	0x08022588
 80184fc:	08022590 	.word	0x08022590
 8018500:	20000820 	.word	0x20000820
 8018504:	080225a8 	.word	0x080225a8

08018508 <About_options_screen_S9>:


// MENU
void About_options_screen_S9(void)
{
 8018508:	b480      	push	{r7}
 801850a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801850c:	4b06      	ldr	r3, [pc, #24]	; (8018528 <About_options_screen_S9+0x20>)
 801850e:	2204      	movs	r2, #4
 8018510:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018512:	4b06      	ldr	r3, [pc, #24]	; (801852c <About_options_screen_S9+0x24>)
 8018514:	22ff      	movs	r2, #255	; 0xff
 8018516:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8018518:	4b05      	ldr	r3, [pc, #20]	; (8018530 <About_options_screen_S9+0x28>)
 801851a:	2203      	movs	r2, #3
 801851c:	701a      	strb	r2, [r3, #0]
}
 801851e:	bf00      	nop
 8018520:	46bd      	mov	sp, r7
 8018522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018526:	4770      	bx	lr
 8018528:	2000004c 	.word	0x2000004c
 801852c:	20000330 	.word	0x20000330
 8018530:	20000331 	.word	0x20000331

08018534 <Logging_options_screen_func>:
#define max_edit_param 6



void Logging_options_screen_func(void)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b082      	sub	sp, #8
 8018538:	af02      	add	r7, sp, #8
	RTC_view();
 801853a:	f7ff fbc1 	bl	8017cc0 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801853e:	4951      	ldr	r1, [pc, #324]	; (8018684 <Logging_options_screen_func+0x150>)
 8018540:	4851      	ldr	r0, [pc, #324]	; (8018688 <Logging_options_screen_func+0x154>)
 8018542:	f7fd fa83 	bl	8015a4c <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 5, 40, "Логгирование:");
 8018546:	4b51      	ldr	r3, [pc, #324]	; (801868c <Logging_options_screen_func+0x158>)
 8018548:	2228      	movs	r2, #40	; 0x28
 801854a:	2105      	movs	r1, #5
 801854c:	484e      	ldr	r0, [pc, #312]	; (8018688 <Logging_options_screen_func+0x154>)
 801854e:	f7fd f9db 	bl	8015908 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 60, "Время старта:");
 8018552:	4b4f      	ldr	r3, [pc, #316]	; (8018690 <Logging_options_screen_func+0x15c>)
 8018554:	223c      	movs	r2, #60	; 0x3c
 8018556:	2105      	movs	r1, #5
 8018558:	484b      	ldr	r0, [pc, #300]	; (8018688 <Logging_options_screen_func+0x154>)
 801855a:	f7fd f9d5 	bl	8015908 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 80, "Период сохранения:");
 801855e:	4b4d      	ldr	r3, [pc, #308]	; (8018694 <Logging_options_screen_func+0x160>)
 8018560:	2250      	movs	r2, #80	; 0x50
 8018562:	2105      	movs	r1, #5
 8018564:	4848      	ldr	r0, [pc, #288]	; (8018688 <Logging_options_screen_func+0x154>)
 8018566:	f7fd f9cf 	bl	8015908 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 100, "Длительность:");
 801856a:	4b4b      	ldr	r3, [pc, #300]	; (8018698 <Logging_options_screen_func+0x164>)
 801856c:	2264      	movs	r2, #100	; 0x64
 801856e:	2105      	movs	r1, #5
 8018570:	4845      	ldr	r0, [pc, #276]	; (8018688 <Logging_options_screen_func+0x154>)
 8018572:	f7fd f9c9 	bl	8015908 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 120, "Всего файлов:");
 8018576:	4b49      	ldr	r3, [pc, #292]	; (801869c <Logging_options_screen_func+0x168>)
 8018578:	2278      	movs	r2, #120	; 0x78
 801857a:	2105      	movs	r1, #5
 801857c:	4842      	ldr	r0, [pc, #264]	; (8018688 <Logging_options_screen_func+0x154>)
 801857e:	f7fd f9c3 	bl	8015908 <u8g2_DrawUTF8>


	// 0 parameter
	if(logging==0)Blink_Edit_Parameter(155, 40, "ДА", edit_param, 0);
 8018582:	4b47      	ldr	r3, [pc, #284]	; (80186a0 <Logging_options_screen_func+0x16c>)
 8018584:	781b      	ldrb	r3, [r3, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d109      	bne.n	801859e <Logging_options_screen_func+0x6a>
 801858a:	4b46      	ldr	r3, [pc, #280]	; (80186a4 <Logging_options_screen_func+0x170>)
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	2200      	movs	r2, #0
 8018590:	9200      	str	r2, [sp, #0]
 8018592:	4a45      	ldr	r2, [pc, #276]	; (80186a8 <Logging_options_screen_func+0x174>)
 8018594:	2128      	movs	r1, #40	; 0x28
 8018596:	209b      	movs	r0, #155	; 0x9b
 8018598:	f7ea fc9a 	bl	8002ed0 <Blink_Edit_Parameter>
 801859c:	e008      	b.n	80185b0 <Logging_options_screen_func+0x7c>
	else Blink_Edit_Parameter(155, 40, "НЕТ", edit_param, 0);
 801859e:	4b41      	ldr	r3, [pc, #260]	; (80186a4 <Logging_options_screen_func+0x170>)
 80185a0:	781b      	ldrb	r3, [r3, #0]
 80185a2:	2200      	movs	r2, #0
 80185a4:	9200      	str	r2, [sp, #0]
 80185a6:	4a41      	ldr	r2, [pc, #260]	; (80186ac <Logging_options_screen_func+0x178>)
 80185a8:	2128      	movs	r1, #40	; 0x28
 80185aa:	209b      	movs	r0, #155	; 0x9b
 80185ac:	f7ea fc90 	bl	8002ed0 <Blink_Edit_Parameter>
	// 1 parameter
	sprintf(RAM,"%02d:", logging_start_hour);
 80185b0:	4b3f      	ldr	r3, [pc, #252]	; (80186b0 <Logging_options_screen_func+0x17c>)
 80185b2:	781b      	ldrb	r3, [r3, #0]
 80185b4:	461a      	mov	r2, r3
 80185b6:	493f      	ldr	r1, [pc, #252]	; (80186b4 <Logging_options_screen_func+0x180>)
 80185b8:	483f      	ldr	r0, [pc, #252]	; (80186b8 <Logging_options_screen_func+0x184>)
 80185ba:	f005 fcd1 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(155, 60, RAM, edit_param, 1);
 80185be:	4b39      	ldr	r3, [pc, #228]	; (80186a4 <Logging_options_screen_func+0x170>)
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	2201      	movs	r2, #1
 80185c4:	9200      	str	r2, [sp, #0]
 80185c6:	4a3c      	ldr	r2, [pc, #240]	; (80186b8 <Logging_options_screen_func+0x184>)
 80185c8:	213c      	movs	r1, #60	; 0x3c
 80185ca:	209b      	movs	r0, #155	; 0x9b
 80185cc:	f7ea fc80 	bl	8002ed0 <Blink_Edit_Parameter>
	// 2 parameter
	sprintf(RAM,"%02d:", logging_start_min);
 80185d0:	4b3a      	ldr	r3, [pc, #232]	; (80186bc <Logging_options_screen_func+0x188>)
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	461a      	mov	r2, r3
 80185d6:	4937      	ldr	r1, [pc, #220]	; (80186b4 <Logging_options_screen_func+0x180>)
 80185d8:	4837      	ldr	r0, [pc, #220]	; (80186b8 <Logging_options_screen_func+0x184>)
 80185da:	f005 fcc1 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(185, 60, RAM, edit_param, 2);
 80185de:	4b31      	ldr	r3, [pc, #196]	; (80186a4 <Logging_options_screen_func+0x170>)
 80185e0:	781b      	ldrb	r3, [r3, #0]
 80185e2:	2202      	movs	r2, #2
 80185e4:	9200      	str	r2, [sp, #0]
 80185e6:	4a34      	ldr	r2, [pc, #208]	; (80186b8 <Logging_options_screen_func+0x184>)
 80185e8:	213c      	movs	r1, #60	; 0x3c
 80185ea:	20b9      	movs	r0, #185	; 0xb9
 80185ec:	f7ea fc70 	bl	8002ed0 <Blink_Edit_Parameter>
	// 3 parameter
	sprintf(RAM,"%02d", logging_start_sec);
 80185f0:	4b33      	ldr	r3, [pc, #204]	; (80186c0 <Logging_options_screen_func+0x18c>)
 80185f2:	781b      	ldrb	r3, [r3, #0]
 80185f4:	461a      	mov	r2, r3
 80185f6:	4933      	ldr	r1, [pc, #204]	; (80186c4 <Logging_options_screen_func+0x190>)
 80185f8:	482f      	ldr	r0, [pc, #188]	; (80186b8 <Logging_options_screen_func+0x184>)
 80185fa:	f005 fcb1 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(215, 60, RAM, edit_param, 3);
 80185fe:	4b29      	ldr	r3, [pc, #164]	; (80186a4 <Logging_options_screen_func+0x170>)
 8018600:	781b      	ldrb	r3, [r3, #0]
 8018602:	2203      	movs	r2, #3
 8018604:	9200      	str	r2, [sp, #0]
 8018606:	4a2c      	ldr	r2, [pc, #176]	; (80186b8 <Logging_options_screen_func+0x184>)
 8018608:	213c      	movs	r1, #60	; 0x3c
 801860a:	20d7      	movs	r0, #215	; 0xd7
 801860c:	f7ea fc60 	bl	8002ed0 <Blink_Edit_Parameter>
	// 4 parameter
	sprintf(RAM,"%d", logging_period);
 8018610:	4b2d      	ldr	r3, [pc, #180]	; (80186c8 <Logging_options_screen_func+0x194>)
 8018612:	781b      	ldrb	r3, [r3, #0]
 8018614:	461a      	mov	r2, r3
 8018616:	492d      	ldr	r1, [pc, #180]	; (80186cc <Logging_options_screen_func+0x198>)
 8018618:	4827      	ldr	r0, [pc, #156]	; (80186b8 <Logging_options_screen_func+0x184>)
 801861a:	f005 fca1 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(195, 80, RAM, edit_param, 4);
 801861e:	4b21      	ldr	r3, [pc, #132]	; (80186a4 <Logging_options_screen_func+0x170>)
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	2204      	movs	r2, #4
 8018624:	9200      	str	r2, [sp, #0]
 8018626:	4a24      	ldr	r2, [pc, #144]	; (80186b8 <Logging_options_screen_func+0x184>)
 8018628:	2150      	movs	r1, #80	; 0x50
 801862a:	20c3      	movs	r0, #195	; 0xc3
 801862c:	f7ea fc50 	bl	8002ed0 <Blink_Edit_Parameter>
	// 5 parameter
	sprintf(RAM,"%d", logging_len);
 8018630:	4b27      	ldr	r3, [pc, #156]	; (80186d0 <Logging_options_screen_func+0x19c>)
 8018632:	781b      	ldrb	r3, [r3, #0]
 8018634:	461a      	mov	r2, r3
 8018636:	4925      	ldr	r1, [pc, #148]	; (80186cc <Logging_options_screen_func+0x198>)
 8018638:	481f      	ldr	r0, [pc, #124]	; (80186b8 <Logging_options_screen_func+0x184>)
 801863a:	f005 fc91 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(155, 100, RAM, edit_param, 5);
 801863e:	4b19      	ldr	r3, [pc, #100]	; (80186a4 <Logging_options_screen_func+0x170>)
 8018640:	781b      	ldrb	r3, [r3, #0]
 8018642:	2205      	movs	r2, #5
 8018644:	9200      	str	r2, [sp, #0]
 8018646:	4a1c      	ldr	r2, [pc, #112]	; (80186b8 <Logging_options_screen_func+0x184>)
 8018648:	2164      	movs	r1, #100	; 0x64
 801864a:	209b      	movs	r0, #155	; 0x9b
 801864c:	f7ea fc40 	bl	8002ed0 <Blink_Edit_Parameter>
	// 6 parameter
	sprintf(RAM,"%d", logging_num);
 8018650:	4b20      	ldr	r3, [pc, #128]	; (80186d4 <Logging_options_screen_func+0x1a0>)
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	461a      	mov	r2, r3
 8018656:	491d      	ldr	r1, [pc, #116]	; (80186cc <Logging_options_screen_func+0x198>)
 8018658:	4817      	ldr	r0, [pc, #92]	; (80186b8 <Logging_options_screen_func+0x184>)
 801865a:	f005 fc81 	bl	801df60 <siprintf>
	Blink_Edit_Parameter(155, 120, RAM, edit_param, 6);
 801865e:	4b11      	ldr	r3, [pc, #68]	; (80186a4 <Logging_options_screen_func+0x170>)
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	2206      	movs	r2, #6
 8018664:	9200      	str	r2, [sp, #0]
 8018666:	4a14      	ldr	r2, [pc, #80]	; (80186b8 <Logging_options_screen_func+0x184>)
 8018668:	2178      	movs	r1, #120	; 0x78
 801866a:	209b      	movs	r0, #155	; 0x9b
 801866c:	f7ea fc30 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8018670:	4805      	ldr	r0, [pc, #20]	; (8018688 <Logging_options_screen_func+0x154>)
 8018672:	f7fc fbae 	bl	8014dd2 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018676:	4804      	ldr	r0, [pc, #16]	; (8018688 <Logging_options_screen_func+0x154>)
 8018678:	f7fc fb38 	bl	8014cec <u8g2_ClearBuffer>
}
 801867c:	bf00      	nop
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	080273d0 	.word	0x080273d0
 8018688:	20001f54 	.word	0x20001f54
 801868c:	080225ac 	.word	0x080225ac
 8018690:	080225c8 	.word	0x080225c8
 8018694:	080225e4 	.word	0x080225e4
 8018698:	08022608 	.word	0x08022608
 801869c:	08022624 	.word	0x08022624
 80186a0:	20000840 	.word	0x20000840
 80186a4:	200007ea 	.word	0x200007ea
 80186a8:	08022640 	.word	0x08022640
 80186ac:	08022648 	.word	0x08022648
 80186b0:	20000841 	.word	0x20000841
 80186b4:	08022650 	.word	0x08022650
 80186b8:	20002008 	.word	0x20002008
 80186bc:	20000842 	.word	0x20000842
 80186c0:	20000843 	.word	0x20000843
 80186c4:	08022658 	.word	0x08022658
 80186c8:	20000844 	.word	0x20000844
 80186cc:	08022660 	.word	0x08022660
 80186d0:	20000845 	.word	0x20000845
 80186d4:	20000846 	.word	0x20000846

080186d8 <Logging_options_screen_S6>:


// DOWN
void Logging_options_screen_S6(void)
{
 80186d8:	b480      	push	{r7}
 80186da:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80186dc:	4b07      	ldr	r3, [pc, #28]	; (80186fc <Logging_options_screen_S6+0x24>)
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	2b04      	cmp	r3, #4
 80186e2:	d805      	bhi.n	80186f0 <Logging_options_screen_S6+0x18>
 80186e4:	4b05      	ldr	r3, [pc, #20]	; (80186fc <Logging_options_screen_S6+0x24>)
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	3301      	adds	r3, #1
 80186ea:	b2da      	uxtb	r2, r3
 80186ec:	4b03      	ldr	r3, [pc, #12]	; (80186fc <Logging_options_screen_S6+0x24>)
 80186ee:	701a      	strb	r2, [r3, #0]
}
 80186f0:	bf00      	nop
 80186f2:	46bd      	mov	sp, r7
 80186f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f8:	4770      	bx	lr
 80186fa:	bf00      	nop
 80186fc:	200007ea 	.word	0x200007ea

08018700 <Logging_options_screen_S7>:

// UP
void Logging_options_screen_S7(void)
{
 8018700:	b480      	push	{r7}
 8018702:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8018704:	4b07      	ldr	r3, [pc, #28]	; (8018724 <Logging_options_screen_S7+0x24>)
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d005      	beq.n	8018718 <Logging_options_screen_S7+0x18>
 801870c:	4b05      	ldr	r3, [pc, #20]	; (8018724 <Logging_options_screen_S7+0x24>)
 801870e:	781b      	ldrb	r3, [r3, #0]
 8018710:	3b01      	subs	r3, #1
 8018712:	b2da      	uxtb	r2, r3
 8018714:	4b03      	ldr	r3, [pc, #12]	; (8018724 <Logging_options_screen_S7+0x24>)
 8018716:	701a      	strb	r2, [r3, #0]
}
 8018718:	bf00      	nop
 801871a:	46bd      	mov	sp, r7
 801871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018720:	4770      	bx	lr
 8018722:	bf00      	nop
 8018724:	200007ea 	.word	0x200007ea

08018728 <Logging_options_screen_S9>:



// MENU
void Logging_options_screen_S9(void)
{
 8018728:	b480      	push	{r7}
 801872a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801872c:	4b06      	ldr	r3, [pc, #24]	; (8018748 <Logging_options_screen_S9+0x20>)
 801872e:	2204      	movs	r2, #4
 8018730:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018732:	4b06      	ldr	r3, [pc, #24]	; (801874c <Logging_options_screen_S9+0x24>)
 8018734:	22ff      	movs	r2, #255	; 0xff
 8018736:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8018738:	4b05      	ldr	r3, [pc, #20]	; (8018750 <Logging_options_screen_S9+0x28>)
 801873a:	2205      	movs	r2, #5
 801873c:	701a      	strb	r2, [r3, #0]
}
 801873e:	bf00      	nop
 8018740:	46bd      	mov	sp, r7
 8018742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018746:	4770      	bx	lr
 8018748:	2000004c 	.word	0x2000004c
 801874c:	20000330 	.word	0x20000330
 8018750:	20000331 	.word	0x20000331

08018754 <Logging_options_screen_S8>:

// BACKWARD
void Logging_options_screen_S8(void)
{
 8018754:	b480      	push	{r7}
 8018756:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018758:	4b32      	ldr	r3, [pc, #200]	; (8018824 <Logging_options_screen_S8+0xd0>)
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b05      	cmp	r3, #5
 801875e:	d85c      	bhi.n	801881a <Logging_options_screen_S8+0xc6>
 8018760:	a201      	add	r2, pc, #4	; (adr r2, 8018768 <Logging_options_screen_S8+0x14>)
 8018762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018766:	bf00      	nop
 8018768:	08018781 	.word	0x08018781
 801876c:	08018797 	.word	0x08018797
 8018770:	080187ad 	.word	0x080187ad
 8018774:	080187c3 	.word	0x080187c3
 8018778:	080187d9 	.word	0x080187d9
 801877c:	080187ef 	.word	0x080187ef
	{
		case 0: if(logging>0)logging--; break;
 8018780:	4b29      	ldr	r3, [pc, #164]	; (8018828 <Logging_options_screen_S8+0xd4>)
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d03d      	beq.n	8018804 <Logging_options_screen_S8+0xb0>
 8018788:	4b27      	ldr	r3, [pc, #156]	; (8018828 <Logging_options_screen_S8+0xd4>)
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	3b01      	subs	r3, #1
 801878e:	b2da      	uxtb	r2, r3
 8018790:	4b25      	ldr	r3, [pc, #148]	; (8018828 <Logging_options_screen_S8+0xd4>)
 8018792:	701a      	strb	r2, [r3, #0]
 8018794:	e036      	b.n	8018804 <Logging_options_screen_S8+0xb0>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018796:	4b25      	ldr	r3, [pc, #148]	; (801882c <Logging_options_screen_S8+0xd8>)
 8018798:	781b      	ldrb	r3, [r3, #0]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d034      	beq.n	8018808 <Logging_options_screen_S8+0xb4>
 801879e:	4b23      	ldr	r3, [pc, #140]	; (801882c <Logging_options_screen_S8+0xd8>)
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	3b01      	subs	r3, #1
 80187a4:	b2da      	uxtb	r2, r3
 80187a6:	4b21      	ldr	r3, [pc, #132]	; (801882c <Logging_options_screen_S8+0xd8>)
 80187a8:	701a      	strb	r2, [r3, #0]
 80187aa:	e02d      	b.n	8018808 <Logging_options_screen_S8+0xb4>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 80187ac:	4b20      	ldr	r3, [pc, #128]	; (8018830 <Logging_options_screen_S8+0xdc>)
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d02b      	beq.n	801880c <Logging_options_screen_S8+0xb8>
 80187b4:	4b1e      	ldr	r3, [pc, #120]	; (8018830 <Logging_options_screen_S8+0xdc>)
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	3b01      	subs	r3, #1
 80187ba:	b2da      	uxtb	r2, r3
 80187bc:	4b1c      	ldr	r3, [pc, #112]	; (8018830 <Logging_options_screen_S8+0xdc>)
 80187be:	701a      	strb	r2, [r3, #0]
 80187c0:	e024      	b.n	801880c <Logging_options_screen_S8+0xb8>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 80187c2:	4b1c      	ldr	r3, [pc, #112]	; (8018834 <Logging_options_screen_S8+0xe0>)
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d022      	beq.n	8018810 <Logging_options_screen_S8+0xbc>
 80187ca:	4b1a      	ldr	r3, [pc, #104]	; (8018834 <Logging_options_screen_S8+0xe0>)
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	3b01      	subs	r3, #1
 80187d0:	b2da      	uxtb	r2, r3
 80187d2:	4b18      	ldr	r3, [pc, #96]	; (8018834 <Logging_options_screen_S8+0xe0>)
 80187d4:	701a      	strb	r2, [r3, #0]
 80187d6:	e01b      	b.n	8018810 <Logging_options_screen_S8+0xbc>
		case 4: if(logging_period>0)logging_period--; break;
 80187d8:	4b17      	ldr	r3, [pc, #92]	; (8018838 <Logging_options_screen_S8+0xe4>)
 80187da:	781b      	ldrb	r3, [r3, #0]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d019      	beq.n	8018814 <Logging_options_screen_S8+0xc0>
 80187e0:	4b15      	ldr	r3, [pc, #84]	; (8018838 <Logging_options_screen_S8+0xe4>)
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	3b01      	subs	r3, #1
 80187e6:	b2da      	uxtb	r2, r3
 80187e8:	4b13      	ldr	r3, [pc, #76]	; (8018838 <Logging_options_screen_S8+0xe4>)
 80187ea:	701a      	strb	r2, [r3, #0]
 80187ec:	e012      	b.n	8018814 <Logging_options_screen_S8+0xc0>
		case 5: if(logging_len>0)logging_len--; break;
 80187ee:	4b13      	ldr	r3, [pc, #76]	; (801883c <Logging_options_screen_S8+0xe8>)
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d010      	beq.n	8018818 <Logging_options_screen_S8+0xc4>
 80187f6:	4b11      	ldr	r3, [pc, #68]	; (801883c <Logging_options_screen_S8+0xe8>)
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	3b01      	subs	r3, #1
 80187fc:	b2da      	uxtb	r2, r3
 80187fe:	4b0f      	ldr	r3, [pc, #60]	; (801883c <Logging_options_screen_S8+0xe8>)
 8018800:	701a      	strb	r2, [r3, #0]
 8018802:	e009      	b.n	8018818 <Logging_options_screen_S8+0xc4>
		case 0: if(logging>0)logging--; break;
 8018804:	bf00      	nop
 8018806:	e008      	b.n	801881a <Logging_options_screen_S8+0xc6>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018808:	bf00      	nop
 801880a:	e006      	b.n	801881a <Logging_options_screen_S8+0xc6>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 801880c:	bf00      	nop
 801880e:	e004      	b.n	801881a <Logging_options_screen_S8+0xc6>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 8018810:	bf00      	nop
 8018812:	e002      	b.n	801881a <Logging_options_screen_S8+0xc6>
		case 4: if(logging_period>0)logging_period--; break;
 8018814:	bf00      	nop
 8018816:	e000      	b.n	801881a <Logging_options_screen_S8+0xc6>
		case 5: if(logging_len>0)logging_len--; break;
 8018818:	bf00      	nop
	}
}
 801881a:	bf00      	nop
 801881c:	46bd      	mov	sp, r7
 801881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018822:	4770      	bx	lr
 8018824:	200007ea 	.word	0x200007ea
 8018828:	20000840 	.word	0x20000840
 801882c:	20000841 	.word	0x20000841
 8018830:	20000842 	.word	0x20000842
 8018834:	20000843 	.word	0x20000843
 8018838:	20000844 	.word	0x20000844
 801883c:	20000845 	.word	0x20000845

08018840 <Logging_options_screen_S5>:

// FORWARD
void Logging_options_screen_S5(void)
{
 8018840:	b480      	push	{r7}
 8018842:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018844:	4b32      	ldr	r3, [pc, #200]	; (8018910 <Logging_options_screen_S5+0xd0>)
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	2b05      	cmp	r3, #5
 801884a:	d85c      	bhi.n	8018906 <Logging_options_screen_S5+0xc6>
 801884c:	a201      	add	r2, pc, #4	; (adr r2, 8018854 <Logging_options_screen_S5+0x14>)
 801884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018852:	bf00      	nop
 8018854:	0801886d 	.word	0x0801886d
 8018858:	08018883 	.word	0x08018883
 801885c:	08018899 	.word	0x08018899
 8018860:	080188af 	.word	0x080188af
 8018864:	080188c5 	.word	0x080188c5
 8018868:	080188db 	.word	0x080188db
	{
		case 0: if(logging<1)logging++; break;
 801886c:	4b29      	ldr	r3, [pc, #164]	; (8018914 <Logging_options_screen_S5+0xd4>)
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d13d      	bne.n	80188f0 <Logging_options_screen_S5+0xb0>
 8018874:	4b27      	ldr	r3, [pc, #156]	; (8018914 <Logging_options_screen_S5+0xd4>)
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	3301      	adds	r3, #1
 801887a:	b2da      	uxtb	r2, r3
 801887c:	4b25      	ldr	r3, [pc, #148]	; (8018914 <Logging_options_screen_S5+0xd4>)
 801887e:	701a      	strb	r2, [r3, #0]
 8018880:	e036      	b.n	80188f0 <Logging_options_screen_S5+0xb0>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 8018882:	4b25      	ldr	r3, [pc, #148]	; (8018918 <Logging_options_screen_S5+0xd8>)
 8018884:	781b      	ldrb	r3, [r3, #0]
 8018886:	2b16      	cmp	r3, #22
 8018888:	d834      	bhi.n	80188f4 <Logging_options_screen_S5+0xb4>
 801888a:	4b23      	ldr	r3, [pc, #140]	; (8018918 <Logging_options_screen_S5+0xd8>)
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	3301      	adds	r3, #1
 8018890:	b2da      	uxtb	r2, r3
 8018892:	4b21      	ldr	r3, [pc, #132]	; (8018918 <Logging_options_screen_S5+0xd8>)
 8018894:	701a      	strb	r2, [r3, #0]
 8018896:	e02d      	b.n	80188f4 <Logging_options_screen_S5+0xb4>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018898:	4b20      	ldr	r3, [pc, #128]	; (801891c <Logging_options_screen_S5+0xdc>)
 801889a:	781b      	ldrb	r3, [r3, #0]
 801889c:	2b3a      	cmp	r3, #58	; 0x3a
 801889e:	d82b      	bhi.n	80188f8 <Logging_options_screen_S5+0xb8>
 80188a0:	4b1e      	ldr	r3, [pc, #120]	; (801891c <Logging_options_screen_S5+0xdc>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	3301      	adds	r3, #1
 80188a6:	b2da      	uxtb	r2, r3
 80188a8:	4b1c      	ldr	r3, [pc, #112]	; (801891c <Logging_options_screen_S5+0xdc>)
 80188aa:	701a      	strb	r2, [r3, #0]
 80188ac:	e024      	b.n	80188f8 <Logging_options_screen_S5+0xb8>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 80188ae:	4b1c      	ldr	r3, [pc, #112]	; (8018920 <Logging_options_screen_S5+0xe0>)
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	2b3a      	cmp	r3, #58	; 0x3a
 80188b4:	d822      	bhi.n	80188fc <Logging_options_screen_S5+0xbc>
 80188b6:	4b1a      	ldr	r3, [pc, #104]	; (8018920 <Logging_options_screen_S5+0xe0>)
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	3301      	adds	r3, #1
 80188bc:	b2da      	uxtb	r2, r3
 80188be:	4b18      	ldr	r3, [pc, #96]	; (8018920 <Logging_options_screen_S5+0xe0>)
 80188c0:	701a      	strb	r2, [r3, #0]
 80188c2:	e01b      	b.n	80188fc <Logging_options_screen_S5+0xbc>
		case 4: if(logging_period<30)logging_period++; break;
 80188c4:	4b17      	ldr	r3, [pc, #92]	; (8018924 <Logging_options_screen_S5+0xe4>)
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	2b1d      	cmp	r3, #29
 80188ca:	d819      	bhi.n	8018900 <Logging_options_screen_S5+0xc0>
 80188cc:	4b15      	ldr	r3, [pc, #84]	; (8018924 <Logging_options_screen_S5+0xe4>)
 80188ce:	781b      	ldrb	r3, [r3, #0]
 80188d0:	3301      	adds	r3, #1
 80188d2:	b2da      	uxtb	r2, r3
 80188d4:	4b13      	ldr	r3, [pc, #76]	; (8018924 <Logging_options_screen_S5+0xe4>)
 80188d6:	701a      	strb	r2, [r3, #0]
 80188d8:	e012      	b.n	8018900 <Logging_options_screen_S5+0xc0>
		case 5: if(logging_len<100)logging_len++; break;
 80188da:	4b13      	ldr	r3, [pc, #76]	; (8018928 <Logging_options_screen_S5+0xe8>)
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	2b63      	cmp	r3, #99	; 0x63
 80188e0:	d810      	bhi.n	8018904 <Logging_options_screen_S5+0xc4>
 80188e2:	4b11      	ldr	r3, [pc, #68]	; (8018928 <Logging_options_screen_S5+0xe8>)
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	3301      	adds	r3, #1
 80188e8:	b2da      	uxtb	r2, r3
 80188ea:	4b0f      	ldr	r3, [pc, #60]	; (8018928 <Logging_options_screen_S5+0xe8>)
 80188ec:	701a      	strb	r2, [r3, #0]
 80188ee:	e009      	b.n	8018904 <Logging_options_screen_S5+0xc4>
		case 0: if(logging<1)logging++; break;
 80188f0:	bf00      	nop
 80188f2:	e008      	b.n	8018906 <Logging_options_screen_S5+0xc6>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 80188f4:	bf00      	nop
 80188f6:	e006      	b.n	8018906 <Logging_options_screen_S5+0xc6>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 80188f8:	bf00      	nop
 80188fa:	e004      	b.n	8018906 <Logging_options_screen_S5+0xc6>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 80188fc:	bf00      	nop
 80188fe:	e002      	b.n	8018906 <Logging_options_screen_S5+0xc6>
		case 4: if(logging_period<30)logging_period++; break;
 8018900:	bf00      	nop
 8018902:	e000      	b.n	8018906 <Logging_options_screen_S5+0xc6>
		case 5: if(logging_len<100)logging_len++; break;
 8018904:	bf00      	nop
	}
}
 8018906:	bf00      	nop
 8018908:	46bd      	mov	sp, r7
 801890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890e:	4770      	bx	lr
 8018910:	200007ea 	.word	0x200007ea
 8018914:	20000840 	.word	0x20000840
 8018918:	20000841 	.word	0x20000841
 801891c:	20000842 	.word	0x20000842
 8018920:	20000843 	.word	0x20000843
 8018924:	20000844 	.word	0x20000844
 8018928:	20000845 	.word	0x20000845

0801892c <Menu_GUI>:



void Menu_GUI(uint16_t x_pos, uint16_t y_pos, const unsigned char *menu_string[], uint8_t *str_size,
		uint8_t str_to_str, uint8_t menu_size, uint8_t active_string)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b086      	sub	sp, #24
 8018930:	af00      	add	r7, sp, #0
 8018932:	60ba      	str	r2, [r7, #8]
 8018934:	607b      	str	r3, [r7, #4]
 8018936:	4603      	mov	r3, r0
 8018938:	81fb      	strh	r3, [r7, #14]
 801893a:	460b      	mov	r3, r1
 801893c:	81bb      	strh	r3, [r7, #12]
	uint8_t i=0;
 801893e:	2300      	movs	r3, #0
 8018940:	75fb      	strb	r3, [r7, #23]
	if((old_active_string!=active_string)||(float_menu!=0))
 8018942:	4b42      	ldr	r3, [pc, #264]	; (8018a4c <Menu_GUI+0x120>)
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801894a:	429a      	cmp	r2, r3
 801894c:	d104      	bne.n	8018958 <Menu_GUI+0x2c>
 801894e:	4b40      	ldr	r3, [pc, #256]	; (8018a50 <Menu_GUI+0x124>)
 8018950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d075      	beq.n	8018a44 <Menu_GUI+0x118>
	{
		for(i=0;i<menu_size;i++)
 8018958:	2300      	movs	r3, #0
 801895a:	75fb      	strb	r3, [r7, #23]
 801895c:	e063      	b.n	8018a26 <Menu_GUI+0xfa>
		{
			if(active_string==i)
 801895e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018962:	7dfb      	ldrb	r3, [r7, #23]
 8018964:	429a      	cmp	r2, r3
 8018966:	d12d      	bne.n	80189c4 <Menu_GUI+0x98>
			{
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018968:	493a      	ldr	r1, [pc, #232]	; (8018a54 <Menu_GUI+0x128>)
 801896a:	483b      	ldr	r0, [pc, #236]	; (8018a58 <Menu_GUI+0x12c>)
 801896c:	f7fd f86e 	bl	8015a4c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*10))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 8018970:	7dfb      	ldrb	r3, [r7, #23]
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	4413      	add	r3, r2
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	461a      	mov	r2, r3
 801897a:	f06f 0309 	mvn.w	r3, #9
 801897e:	fb03 f302 	mul.w	r3, r3, r2
 8018982:	33f0      	adds	r3, #240	; 0xf0
 8018984:	105b      	asrs	r3, r3, #1
 8018986:	b29a      	uxth	r2, r3
 8018988:	89fb      	ldrh	r3, [r7, #14]
 801898a:	4413      	add	r3, r2
 801898c:	b299      	uxth	r1, r3
 801898e:	7dfb      	ldrb	r3, [r7, #23]
 8018990:	b29a      	uxth	r2, r3
 8018992:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018996:	b29b      	uxth	r3, r3
 8018998:	fb12 f303 	smulbb	r3, r2, r3
 801899c:	b29a      	uxth	r2, r3
 801899e:	89bb      	ldrh	r3, [r7, #12]
 80189a0:	4413      	add	r3, r2
 80189a2:	b29a      	uxth	r2, r3
 80189a4:	4b2a      	ldr	r3, [pc, #168]	; (8018a50 <Menu_GUI+0x124>)
 80189a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189aa:	b29b      	uxth	r3, r3
 80189ac:	4413      	add	r3, r2
 80189ae:	b298      	uxth	r0, r3
 80189b0:	7dfb      	ldrb	r3, [r7, #23]
 80189b2:	009b      	lsls	r3, r3, #2
 80189b4:	68ba      	ldr	r2, [r7, #8]
 80189b6:	4413      	add	r3, r2
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	4602      	mov	r2, r0
 80189bc:	4826      	ldr	r0, [pc, #152]	; (8018a58 <Menu_GUI+0x12c>)
 80189be:	f7fc ffa3 	bl	8015908 <u8g2_DrawUTF8>
 80189c2:	e02d      	b.n	8018a20 <Menu_GUI+0xf4>
			}
			else
			{
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 80189c4:	4925      	ldr	r1, [pc, #148]	; (8018a5c <Menu_GUI+0x130>)
 80189c6:	4824      	ldr	r0, [pc, #144]	; (8018a58 <Menu_GUI+0x12c>)
 80189c8:	f7fd f840 	bl	8015a4c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*9))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 80189cc:	7dfb      	ldrb	r3, [r7, #23]
 80189ce:	687a      	ldr	r2, [r7, #4]
 80189d0:	4413      	add	r3, r2
 80189d2:	781b      	ldrb	r3, [r3, #0]
 80189d4:	461a      	mov	r2, r3
 80189d6:	4613      	mov	r3, r2
 80189d8:	075b      	lsls	r3, r3, #29
 80189da:	1a9b      	subs	r3, r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	1a9b      	subs	r3, r3, r2
 80189e0:	33f0      	adds	r3, #240	; 0xf0
 80189e2:	105b      	asrs	r3, r3, #1
 80189e4:	b29a      	uxth	r2, r3
 80189e6:	89fb      	ldrh	r3, [r7, #14]
 80189e8:	4413      	add	r3, r2
 80189ea:	b299      	uxth	r1, r3
 80189ec:	7dfb      	ldrb	r3, [r7, #23]
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189f4:	b29b      	uxth	r3, r3
 80189f6:	fb12 f303 	smulbb	r3, r2, r3
 80189fa:	b29a      	uxth	r2, r3
 80189fc:	89bb      	ldrh	r3, [r7, #12]
 80189fe:	4413      	add	r3, r2
 8018a00:	b29a      	uxth	r2, r3
 8018a02:	4b13      	ldr	r3, [pc, #76]	; (8018a50 <Menu_GUI+0x124>)
 8018a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	4413      	add	r3, r2
 8018a0c:	b298      	uxth	r0, r3
 8018a0e:	7dfb      	ldrb	r3, [r7, #23]
 8018a10:	009b      	lsls	r3, r3, #2
 8018a12:	68ba      	ldr	r2, [r7, #8]
 8018a14:	4413      	add	r3, r2
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	4602      	mov	r2, r0
 8018a1a:	480f      	ldr	r0, [pc, #60]	; (8018a58 <Menu_GUI+0x12c>)
 8018a1c:	f7fc ff74 	bl	8015908 <u8g2_DrawUTF8>
		for(i=0;i<menu_size;i++)
 8018a20:	7dfb      	ldrb	r3, [r7, #23]
 8018a22:	3301      	adds	r3, #1
 8018a24:	75fb      	strb	r3, [r7, #23]
 8018a26:	7dfa      	ldrb	r2, [r7, #23]
 8018a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d396      	bcc.n	801895e <Menu_GUI+0x32>
			}
		}
		old_active_string=active_string;
 8018a30:	4a06      	ldr	r2, [pc, #24]	; (8018a4c <Menu_GUI+0x120>)
 8018a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018a36:	7013      	strb	r3, [r2, #0]

		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8018a38:	4807      	ldr	r0, [pc, #28]	; (8018a58 <Menu_GUI+0x12c>)
 8018a3a:	f7fc f9ca 	bl	8014dd2 <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8018a3e:	4806      	ldr	r0, [pc, #24]	; (8018a58 <Menu_GUI+0x12c>)
 8018a40:	f7fc f954 	bl	8014cec <u8g2_ClearBuffer>
	}
}
 8018a44:	bf00      	nop
 8018a46:	3718      	adds	r7, #24
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}
 8018a4c:	20000330 	.word	0x20000330
 8018a50:	20001be2 	.word	0x20001be2
 8018a54:	080273d0 	.word	0x080273d0
 8018a58:	20001f54 	.word	0x20001f54
 8018a5c:	08025da4 	.word	0x08025da4

08018a60 <Parameter_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Parameter_screen_func(void)
{ Menu_GUI(0, 40, menu_parameter, menu_parameter_size, 17, Menu_parameter_num, Menu_num); }
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af04      	add	r7, sp, #16
 8018a66:	4b08      	ldr	r3, [pc, #32]	; (8018a88 <Parameter_screen_func+0x28>)
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	9302      	str	r3, [sp, #8]
 8018a6c:	2307      	movs	r3, #7
 8018a6e:	9301      	str	r3, [sp, #4]
 8018a70:	2311      	movs	r3, #17
 8018a72:	9300      	str	r3, [sp, #0]
 8018a74:	4b05      	ldr	r3, [pc, #20]	; (8018a8c <Parameter_screen_func+0x2c>)
 8018a76:	4a06      	ldr	r2, [pc, #24]	; (8018a90 <Parameter_screen_func+0x30>)
 8018a78:	2128      	movs	r1, #40	; 0x28
 8018a7a:	2000      	movs	r0, #0
 8018a7c:	f7ff ff56 	bl	801892c <Menu_GUI>
 8018a80:	bf00      	nop
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	20000331 	.word	0x20000331
 8018a8c:	0802985c 	.word	0x0802985c
 8018a90:	20000358 	.word	0x20000358

08018a94 <Parameter_screen_S9>:



// MENU
void Parameter_screen_S9(void)
{
 8018a94:	b480      	push	{r7}
 8018a96:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8018a98:	4b06      	ldr	r3, [pc, #24]	; (8018ab4 <Parameter_screen_S9+0x20>)
 8018a9a:	2204      	movs	r2, #4
 8018a9c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018a9e:	4b06      	ldr	r3, [pc, #24]	; (8018ab8 <Parameter_screen_S9+0x24>)
 8018aa0:	22ff      	movs	r2, #255	; 0xff
 8018aa2:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 8018aa4:	4b05      	ldr	r3, [pc, #20]	; (8018abc <Parameter_screen_S9+0x28>)
 8018aa6:	2202      	movs	r2, #2
 8018aa8:	701a      	strb	r2, [r3, #0]
}
 8018aaa:	bf00      	nop
 8018aac:	46bd      	mov	sp, r7
 8018aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab2:	4770      	bx	lr
 8018ab4:	2000004c 	.word	0x2000004c
 8018ab8:	20000330 	.word	0x20000330
 8018abc:	20000331 	.word	0x20000331

08018ac0 <Parameter_screen_S4>:


// ENTER
void Parameter_screen_S4(void)
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018ac4:	4b1c      	ldr	r3, [pc, #112]	; (8018b38 <Parameter_screen_S4+0x78>)
 8018ac6:	781b      	ldrb	r3, [r3, #0]
 8018ac8:	2b06      	cmp	r3, #6
 8018aca:	d82d      	bhi.n	8018b28 <Parameter_screen_S4+0x68>
 8018acc:	a201      	add	r2, pc, #4	; (adr r2, 8018ad4 <Parameter_screen_S4+0x14>)
 8018ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ad2:	bf00      	nop
 8018ad4:	08018af1 	.word	0x08018af1
 8018ad8:	08018b29 	.word	0x08018b29
 8018adc:	08018aff 	.word	0x08018aff
 8018ae0:	08018b0d 	.word	0x08018b0d
 8018ae4:	08018b29 	.word	0x08018b29
 8018ae8:	08018b1b 	.word	0x08018b1b
 8018aec:	08018b29 	.word	0x08018b29
	{
		// ДИСПЛЕЙ
		case 0: screen=Display_options_screen; old_active_string=0xFF; break;
 8018af0:	4b12      	ldr	r3, [pc, #72]	; (8018b3c <Parameter_screen_S4+0x7c>)
 8018af2:	2205      	movs	r2, #5
 8018af4:	701a      	strb	r2, [r3, #0]
 8018af6:	4b12      	ldr	r3, [pc, #72]	; (8018b40 <Parameter_screen_S4+0x80>)
 8018af8:	22ff      	movs	r2, #255	; 0xff
 8018afa:	701a      	strb	r2, [r3, #0]
 8018afc:	e014      	b.n	8018b28 <Parameter_screen_S4+0x68>
		// ГРОМКОСТЬ
		case 1:
		break;
		// ДАТА И ВРЕМЯ
		case 2: screen=RTC_screen; old_active_string=0xFF; break;
 8018afe:	4b0f      	ldr	r3, [pc, #60]	; (8018b3c <Parameter_screen_S4+0x7c>)
 8018b00:	2209      	movs	r2, #9
 8018b02:	701a      	strb	r2, [r3, #0]
 8018b04:	4b0e      	ldr	r3, [pc, #56]	; (8018b40 <Parameter_screen_S4+0x80>)
 8018b06:	22ff      	movs	r2, #255	; 0xff
 8018b08:	701a      	strb	r2, [r3, #0]
 8018b0a:	e00d      	b.n	8018b28 <Parameter_screen_S4+0x68>
		// АВТООТКЛЮЧЕНИЕ
		case 3: screen=Auto_Off_option_screen; old_active_string=0xFF; break;
 8018b0c:	4b0b      	ldr	r3, [pc, #44]	; (8018b3c <Parameter_screen_S4+0x7c>)
 8018b0e:	220a      	movs	r2, #10
 8018b10:	701a      	strb	r2, [r3, #0]
 8018b12:	4b0b      	ldr	r3, [pc, #44]	; (8018b40 <Parameter_screen_S4+0x80>)
 8018b14:	22ff      	movs	r2, #255	; 0xff
 8018b16:	701a      	strb	r2, [r3, #0]
 8018b18:	e006      	b.n	8018b28 <Parameter_screen_S4+0x68>
		// НАСТРОЙКА ПОДКЛЮЧЕНИЯ
		case 4: break;
		// НАСТРОЙКА АЦП
		case 5: screen=ADC_options_screen; old_active_string=0xFF; break;
 8018b1a:	4b08      	ldr	r3, [pc, #32]	; (8018b3c <Parameter_screen_S4+0x7c>)
 8018b1c:	2206      	movs	r2, #6
 8018b1e:	701a      	strb	r2, [r3, #0]
 8018b20:	4b07      	ldr	r3, [pc, #28]	; (8018b40 <Parameter_screen_S4+0x80>)
 8018b22:	22ff      	movs	r2, #255	; 0xff
 8018b24:	701a      	strb	r2, [r3, #0]
 8018b26:	bf00      	nop
		// РЕЧЕВОЕ ИНФОРМИРОВАНИЕ
		case 6: break;
	}
	edit_param=0;
 8018b28:	4b06      	ldr	r3, [pc, #24]	; (8018b44 <Parameter_screen_S4+0x84>)
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	701a      	strb	r2, [r3, #0]
}
 8018b2e:	bf00      	nop
 8018b30:	46bd      	mov	sp, r7
 8018b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b36:	4770      	bx	lr
 8018b38:	20000331 	.word	0x20000331
 8018b3c:	2000004c 	.word	0x2000004c
 8018b40:	20000330 	.word	0x20000330
 8018b44:	200007ea 	.word	0x200007ea

08018b48 <Parameter_screen_S7>:

// DOWN
void Parameter_screen_S7(void)
{
 8018b48:	b480      	push	{r7}
 8018b4a:	af00      	add	r7, sp, #0
		if(Menu_num>0)
 8018b4c:	4b09      	ldr	r3, [pc, #36]	; (8018b74 <Parameter_screen_S7+0x2c>)
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d006      	beq.n	8018b62 <Parameter_screen_S7+0x1a>
		{
			Menu_num--;
 8018b54:	4b07      	ldr	r3, [pc, #28]	; (8018b74 <Parameter_screen_S7+0x2c>)
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	3b01      	subs	r3, #1
 8018b5a:	b2da      	uxtb	r2, r3
 8018b5c:	4b05      	ldr	r3, [pc, #20]	; (8018b74 <Parameter_screen_S7+0x2c>)
 8018b5e:	701a      	strb	r2, [r3, #0]
			//float_menu=-2;
		}
		else Menu_num=Menu_parameter_num-1;
}
 8018b60:	e002      	b.n	8018b68 <Parameter_screen_S7+0x20>
		else Menu_num=Menu_parameter_num-1;
 8018b62:	4b04      	ldr	r3, [pc, #16]	; (8018b74 <Parameter_screen_S7+0x2c>)
 8018b64:	2206      	movs	r2, #6
 8018b66:	701a      	strb	r2, [r3, #0]
}
 8018b68:	bf00      	nop
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b70:	4770      	bx	lr
 8018b72:	bf00      	nop
 8018b74:	20000331 	.word	0x20000331

08018b78 <Parameter_screen_S6>:

// UP
void Parameter_screen_S6(void)
{
 8018b78:	b480      	push	{r7}
 8018b7a:	af00      	add	r7, sp, #0
		if(Menu_num<(Menu_parameter_num-1))
 8018b7c:	4b09      	ldr	r3, [pc, #36]	; (8018ba4 <Parameter_screen_S6+0x2c>)
 8018b7e:	781b      	ldrb	r3, [r3, #0]
 8018b80:	2b05      	cmp	r3, #5
 8018b82:	d806      	bhi.n	8018b92 <Parameter_screen_S6+0x1a>
		{
			Menu_num++;
 8018b84:	4b07      	ldr	r3, [pc, #28]	; (8018ba4 <Parameter_screen_S6+0x2c>)
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	b2da      	uxtb	r2, r3
 8018b8c:	4b05      	ldr	r3, [pc, #20]	; (8018ba4 <Parameter_screen_S6+0x2c>)
 8018b8e:	701a      	strb	r2, [r3, #0]
			//float_menu=2;
		}
		else Menu_num=0;
}
 8018b90:	e002      	b.n	8018b98 <Parameter_screen_S6+0x20>
		else Menu_num=0;
 8018b92:	4b04      	ldr	r3, [pc, #16]	; (8018ba4 <Parameter_screen_S6+0x2c>)
 8018b94:	2200      	movs	r2, #0
 8018b96:	701a      	strb	r2, [r3, #0]
}
 8018b98:	bf00      	nop
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba0:	4770      	bx	lr
 8018ba2:	bf00      	nop
 8018ba4:	20000331 	.word	0x20000331

08018ba8 <Option_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Option_screen_func(void)
{ Menu_GUI(0, 16, menu_option, menu_option_size, 17, Menu_option_num, Menu_num); }
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b084      	sub	sp, #16
 8018bac:	af04      	add	r7, sp, #16
 8018bae:	4b08      	ldr	r3, [pc, #32]	; (8018bd0 <Option_screen_func+0x28>)
 8018bb0:	781b      	ldrb	r3, [r3, #0]
 8018bb2:	9302      	str	r3, [sp, #8]
 8018bb4:	2309      	movs	r3, #9
 8018bb6:	9301      	str	r3, [sp, #4]
 8018bb8:	2311      	movs	r3, #17
 8018bba:	9300      	str	r3, [sp, #0]
 8018bbc:	4b05      	ldr	r3, [pc, #20]	; (8018bd4 <Option_screen_func+0x2c>)
 8018bbe:	4a06      	ldr	r2, [pc, #24]	; (8018bd8 <Option_screen_func+0x30>)
 8018bc0:	2110      	movs	r1, #16
 8018bc2:	2000      	movs	r0, #0
 8018bc4:	f7ff feb2 	bl	801892c <Menu_GUI>
 8018bc8:	bf00      	nop
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	bd80      	pop	{r7, pc}
 8018bce:	bf00      	nop
 8018bd0:	20000331 	.word	0x20000331
 8018bd4:	08029784 	.word	0x08029784
 8018bd8:	20000334 	.word	0x20000334

08018bdc <Option_screen_S9>:


// MENU
void Option_screen_S9(void)
{
 8018bdc:	b480      	push	{r7}
 8018bde:	af00      	add	r7, sp, #0
		screen=Main_screen;
 8018be0:	4b05      	ldr	r3, [pc, #20]	; (8018bf8 <Option_screen_S9+0x1c>)
 8018be2:	2201      	movs	r2, #1
 8018be4:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8018be6:	4b05      	ldr	r3, [pc, #20]	; (8018bfc <Option_screen_S9+0x20>)
 8018be8:	22ff      	movs	r2, #255	; 0xff
 8018bea:	701a      	strb	r2, [r3, #0]
}
 8018bec:	bf00      	nop
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf4:	4770      	bx	lr
 8018bf6:	bf00      	nop
 8018bf8:	2000004c 	.word	0x2000004c
 8018bfc:	20000330 	.word	0x20000330

08018c00 <Option_screen_S7>:

// DOWN
void Option_screen_S7(void)
{
 8018c00:	b480      	push	{r7}
 8018c02:	af00      	add	r7, sp, #0
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018c04:	4b09      	ldr	r3, [pc, #36]	; (8018c2c <Option_screen_S7+0x2c>)
 8018c06:	781b      	ldrb	r3, [r3, #0]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d006      	beq.n	8018c1a <Option_screen_S7+0x1a>
 8018c0c:	4b07      	ldr	r3, [pc, #28]	; (8018c2c <Option_screen_S7+0x2c>)
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	3b01      	subs	r3, #1
 8018c12:	b2da      	uxtb	r2, r3
 8018c14:	4b05      	ldr	r3, [pc, #20]	; (8018c2c <Option_screen_S7+0x2c>)
 8018c16:	701a      	strb	r2, [r3, #0]
}
 8018c18:	e002      	b.n	8018c20 <Option_screen_S7+0x20>
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018c1a:	4b04      	ldr	r3, [pc, #16]	; (8018c2c <Option_screen_S7+0x2c>)
 8018c1c:	2208      	movs	r2, #8
 8018c1e:	701a      	strb	r2, [r3, #0]
}
 8018c20:	bf00      	nop
 8018c22:	46bd      	mov	sp, r7
 8018c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c28:	4770      	bx	lr
 8018c2a:	bf00      	nop
 8018c2c:	20000331 	.word	0x20000331

08018c30 <Option_screen_S6>:

// UP
void Option_screen_S6(void)
{
 8018c30:	b480      	push	{r7}
 8018c32:	af00      	add	r7, sp, #0
		if(++Menu_num==Menu_option_num)Menu_num=0;
 8018c34:	4b08      	ldr	r3, [pc, #32]	; (8018c58 <Option_screen_S6+0x28>)
 8018c36:	781b      	ldrb	r3, [r3, #0]
 8018c38:	3301      	adds	r3, #1
 8018c3a:	b2da      	uxtb	r2, r3
 8018c3c:	4b06      	ldr	r3, [pc, #24]	; (8018c58 <Option_screen_S6+0x28>)
 8018c3e:	701a      	strb	r2, [r3, #0]
 8018c40:	4b05      	ldr	r3, [pc, #20]	; (8018c58 <Option_screen_S6+0x28>)
 8018c42:	781b      	ldrb	r3, [r3, #0]
 8018c44:	2b09      	cmp	r3, #9
 8018c46:	d102      	bne.n	8018c4e <Option_screen_S6+0x1e>
 8018c48:	4b03      	ldr	r3, [pc, #12]	; (8018c58 <Option_screen_S6+0x28>)
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	701a      	strb	r2, [r3, #0]
}
 8018c4e:	bf00      	nop
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr
 8018c58:	20000331 	.word	0x20000331

08018c5c <Option_screen_S4>:

// ENTER
void Option_screen_S4(void)
{
 8018c5c:	b480      	push	{r7}
 8018c5e:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018c60:	4b1b      	ldr	r3, [pc, #108]	; (8018cd0 <Option_screen_S4+0x74>)
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	2b08      	cmp	r3, #8
 8018c66:	d825      	bhi.n	8018cb4 <Option_screen_S4+0x58>
 8018c68:	a201      	add	r2, pc, #4	; (adr r2, 8018c70 <Option_screen_S4+0x14>)
 8018c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c6e:	bf00      	nop
 8018c70:	08018c95 	.word	0x08018c95
 8018c74:	08018cb5 	.word	0x08018cb5
 8018c78:	08018c9d 	.word	0x08018c9d
 8018c7c:	08018ca5 	.word	0x08018ca5
 8018c80:	08018cb5 	.word	0x08018cb5
 8018c84:	08018cad 	.word	0x08018cad
 8018c88:	08018cb5 	.word	0x08018cb5
 8018c8c:	08018cb5 	.word	0x08018cb5
 8018c90:	08018cb5 	.word	0x08018cb5
	{
		// ИЗМЕРЕНИЕ
		case 0: screen=Measure_options_screen; break;
 8018c94:	4b0f      	ldr	r3, [pc, #60]	; (8018cd4 <Option_screen_S4+0x78>)
 8018c96:	2207      	movs	r2, #7
 8018c98:	701a      	strb	r2, [r3, #0]
 8018c9a:	e00b      	b.n	8018cb4 <Option_screen_S4+0x58>
		// 24 ВОЛЬТА
		case 1: break;
		// ПАРАМЕТРЫ
		case 2: screen=Parameter_screen; break;
 8018c9c:	4b0d      	ldr	r3, [pc, #52]	; (8018cd4 <Option_screen_S4+0x78>)
 8018c9e:	2208      	movs	r2, #8
 8018ca0:	701a      	strb	r2, [r3, #0]
 8018ca2:	e007      	b.n	8018cb4 <Option_screen_S4+0x58>
		// О ПРИБОРЕ
		case 3: screen=About_options_screen; break;
 8018ca4:	4b0b      	ldr	r3, [pc, #44]	; (8018cd4 <Option_screen_S4+0x78>)
 8018ca6:	220b      	movs	r2, #11
 8018ca8:	701a      	strb	r2, [r3, #0]
 8018caa:	e003      	b.n	8018cb4 <Option_screen_S4+0x58>
		// КАЛИБРОВКА
		case 4: break;
		// ЛОГГИРОВАНИЕ
		case 5: screen=Logging_options_screen; break;
 8018cac:	4b09      	ldr	r3, [pc, #36]	; (8018cd4 <Option_screen_S4+0x78>)
 8018cae:	220c      	movs	r2, #12
 8018cb0:	701a      	strb	r2, [r3, #0]
 8018cb2:	bf00      	nop
		// ТЕХ ПАРАМЕТРЫ
		case 7: break;
		// СЕРВИСНОЕ МЕНЮ
		case 8: break;
	}
	Menu_num=0;
 8018cb4:	4b06      	ldr	r3, [pc, #24]	; (8018cd0 <Option_screen_S4+0x74>)
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018cba:	4b07      	ldr	r3, [pc, #28]	; (8018cd8 <Option_screen_S4+0x7c>)
 8018cbc:	22ff      	movs	r2, #255	; 0xff
 8018cbe:	701a      	strb	r2, [r3, #0]
	edit_param=0;
 8018cc0:	4b06      	ldr	r3, [pc, #24]	; (8018cdc <Option_screen_S4+0x80>)
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	701a      	strb	r2, [r3, #0]
}
 8018cc6:	bf00      	nop
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr
 8018cd0:	20000331 	.word	0x20000331
 8018cd4:	2000004c 	.word	0x2000004c
 8018cd8:	20000330 	.word	0x20000330
 8018cdc:	200007ea 	.word	0x200007ea

08018ce0 <menu_timer>:
//
//------------------------------------------------------------------------------------------------------------------

uint8_t menu_delay = 0;
void menu_timer(void)
{
 8018ce0:	b480      	push	{r7}
 8018ce2:	af00      	add	r7, sp, #0
	if(++menu_delay==25)
 8018ce4:	4b16      	ldr	r3, [pc, #88]	; (8018d40 <menu_timer+0x60>)
 8018ce6:	781b      	ldrb	r3, [r3, #0]
 8018ce8:	3301      	adds	r3, #1
 8018cea:	b2da      	uxtb	r2, r3
 8018cec:	4b14      	ldr	r3, [pc, #80]	; (8018d40 <menu_timer+0x60>)
 8018cee:	701a      	strb	r2, [r3, #0]
 8018cf0:	4b13      	ldr	r3, [pc, #76]	; (8018d40 <menu_timer+0x60>)
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	2b19      	cmp	r3, #25
 8018cf6:	d11e      	bne.n	8018d36 <menu_timer+0x56>
	{
		if(float_menu>0)float_menu--;
 8018cf8:	4b12      	ldr	r3, [pc, #72]	; (8018d44 <menu_timer+0x64>)
 8018cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	dd08      	ble.n	8018d14 <menu_timer+0x34>
 8018d02:	4b10      	ldr	r3, [pc, #64]	; (8018d44 <menu_timer+0x64>)
 8018d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	3b01      	subs	r3, #1
 8018d0c:	b29b      	uxth	r3, r3
 8018d0e:	b21a      	sxth	r2, r3
 8018d10:	4b0c      	ldr	r3, [pc, #48]	; (8018d44 <menu_timer+0x64>)
 8018d12:	801a      	strh	r2, [r3, #0]
		if(float_menu<0)float_menu++;
 8018d14:	4b0b      	ldr	r3, [pc, #44]	; (8018d44 <menu_timer+0x64>)
 8018d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	da08      	bge.n	8018d30 <menu_timer+0x50>
 8018d1e:	4b09      	ldr	r3, [pc, #36]	; (8018d44 <menu_timer+0x64>)
 8018d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d24:	b29b      	uxth	r3, r3
 8018d26:	3301      	adds	r3, #1
 8018d28:	b29b      	uxth	r3, r3
 8018d2a:	b21a      	sxth	r2, r3
 8018d2c:	4b05      	ldr	r3, [pc, #20]	; (8018d44 <menu_timer+0x64>)
 8018d2e:	801a      	strh	r2, [r3, #0]
		menu_delay=0;
 8018d30:	4b03      	ldr	r3, [pc, #12]	; (8018d40 <menu_timer+0x60>)
 8018d32:	2200      	movs	r2, #0
 8018d34:	701a      	strb	r2, [r3, #0]
	}
}
 8018d36:	bf00      	nop
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3e:	4770      	bx	lr
 8018d40:	20001be4 	.word	0x20001be4
 8018d44:	20001be2 	.word	0x20001be2

08018d48 <MX_USB_DEVICE_Init>:




void MX_USB_DEVICE_Init(void)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	490a      	ldr	r1, [pc, #40]	; (8018d78 <MX_USB_DEVICE_Init+0x30>)
 8018d50:	480a      	ldr	r0, [pc, #40]	; (8018d7c <MX_USB_DEVICE_Init+0x34>)
 8018d52:	f001 f965 	bl	801a020 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC_CDC);
 8018d56:	490a      	ldr	r1, [pc, #40]	; (8018d80 <MX_USB_DEVICE_Init+0x38>)
 8018d58:	4808      	ldr	r0, [pc, #32]	; (8018d7c <MX_USB_DEVICE_Init+0x34>)
 8018d5a:	f001 f995 	bl	801a088 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8018d5e:	4909      	ldr	r1, [pc, #36]	; (8018d84 <MX_USB_DEVICE_Init+0x3c>)
 8018d60:	4806      	ldr	r0, [pc, #24]	; (8018d7c <MX_USB_DEVICE_Init+0x34>)
 8018d62:	f000 fb3c 	bl	80193de <USBD_CDC_RegisterInterface>
	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018d66:	4908      	ldr	r1, [pc, #32]	; (8018d88 <MX_USB_DEVICE_Init+0x40>)
 8018d68:	4804      	ldr	r0, [pc, #16]	; (8018d7c <MX_USB_DEVICE_Init+0x34>)
 8018d6a:	f002 fd9d 	bl	801b8a8 <USBD_MSC_RegisterStorage>
	USBD_Start(&hUsbDeviceFS);
 8018d6e:	4803      	ldr	r0, [pc, #12]	; (8018d7c <MX_USB_DEVICE_Init+0x34>)
 8018d70:	f001 f9b1 	bl	801a0d6 <USBD_Start>
}
 8018d74:	bf00      	nop
 8018d76:	bd80      	pop	{r7, pc}
 8018d78:	200004f8 	.word	0x200004f8
 8018d7c:	200086d8 	.word	0x200086d8
 8018d80:	20000374 	.word	0x20000374
 8018d84:	200004e4 	.word	0x200004e4
 8018d88:	2000059c 	.word	0x2000059c

08018d8c <USBD_MSC_CDC_GetDeviceQualifierDescriptor>:
};



uint8_t *USBD_MSC_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	b083      	sub	sp, #12
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_DeviceQualifierDesc);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	220a      	movs	r2, #10
 8018d98:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_DeviceQualifierDesc;
 8018d9a:	4b03      	ldr	r3, [pc, #12]	; (8018da8 <USBD_MSC_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	370c      	adds	r7, #12
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr
 8018da8:	200004d8 	.word	0x200004d8

08018dac <USBD_MSC_CDC_GetOtherSpeedCfgDesc>:


uint8_t *USBD_MSC_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b083      	sub	sp, #12
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_OtherSpeedCfgDesc);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	2262      	movs	r2, #98	; 0x62
 8018db8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_OtherSpeedCfgDesc;
 8018dba:	4b03      	ldr	r3, [pc, #12]	; (8018dc8 <USBD_MSC_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	370c      	adds	r7, #12
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc6:	4770      	bx	lr
 8018dc8:	20000474 	.word	0x20000474

08018dcc <USBD_MSC_CDC_GetHSCfgDesc>:

uint8_t *USBD_MSC_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgHSDesc);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2262      	movs	r2, #98	; 0x62
 8018dd8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgHSDesc;
 8018dda:	4b03      	ldr	r3, [pc, #12]	; (8018de8 <USBD_MSC_CDC_GetHSCfgDesc+0x1c>)
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	370c      	adds	r7, #12
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr
 8018de8:	200003ac 	.word	0x200003ac

08018dec <USBD_MSC_CDC_GetFSCfgDesc>:


uint8_t *USBD_MSC_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018dec:	b480      	push	{r7}
 8018dee:	b083      	sub	sp, #12
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgFSDesc);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2262      	movs	r2, #98	; 0x62
 8018df8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgFSDesc;
 8018dfa:	4b03      	ldr	r3, [pc, #12]	; (8018e08 <USBD_MSC_CDC_GetFSCfgDesc+0x1c>)
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	370c      	adds	r7, #12
 8018e00:	46bd      	mov	sp, r7
 8018e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e06:	4770      	bx	lr
 8018e08:	20000410 	.word	0x20000410

08018e0c <USBD_MSC_CDC_Init>:


// Инициализация композитного устройства
static uint8_t  USBD_MSC_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b084      	sub	sp, #16
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
 8018e14:	460b      	mov	r3, r1
 8018e16:	70fb      	strb	r3, [r7, #3]
	/* MSC initialization */
	uint8_t ret = USBD_MSC_Init (pdev, cfgidx);
 8018e18:	78fb      	ldrb	r3, [r7, #3]
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f002 fbb8 	bl	801b592 <USBD_MSC_Init>
 8018e22:	4603      	mov	r3, r0
 8018e24:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018e26:	7bfb      	ldrb	r3, [r7, #15]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d001      	beq.n	8018e30 <USBD_MSC_CDC_Init+0x24>
			return ret;
 8018e2c:	7bfb      	ldrb	r3, [r7, #15]
 8018e2e:	e00c      	b.n	8018e4a <USBD_MSC_CDC_Init+0x3e>

	/* CDC initialization */
	ret = USBD_CDC_Init (pdev, cfgidx);
 8018e30:	78fb      	ldrb	r3, [r7, #3]
 8018e32:	4619      	mov	r1, r3
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f000 f88b 	bl	8018f50 <USBD_CDC_Init>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018e3e:	7bfb      	ldrb	r3, [r7, #15]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d001      	beq.n	8018e48 <USBD_MSC_CDC_Init+0x3c>
			return ret;
 8018e44:	7bfb      	ldrb	r3, [r7, #15]
 8018e46:	e000      	b.n	8018e4a <USBD_MSC_CDC_Init+0x3e>

	return USBD_OK;
 8018e48:	2300      	movs	r3, #0
}
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	3710      	adds	r7, #16
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bd80      	pop	{r7, pc}

08018e52 <USBD_MSC_CDC_DeInit>:


// Деинициализация композитного устройства
static uint8_t  USBD_MSC_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018e52:	b580      	push	{r7, lr}
 8018e54:	b082      	sub	sp, #8
 8018e56:	af00      	add	r7, sp, #0
 8018e58:	6078      	str	r0, [r7, #4]
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	70fb      	strb	r3, [r7, #3]
       	/* MSC De-initialization */
       	USBD_MSC_DeInit(pdev, cfgidx);
 8018e5e:	78fb      	ldrb	r3, [r7, #3]
 8018e60:	4619      	mov	r1, r3
 8018e62:	6878      	ldr	r0, [r7, #4]
 8018e64:	f002 fbe2 	bl	801b62c <USBD_MSC_DeInit>

       	/* CDC De-initialization */
       	USBD_CDC_DeInit(pdev, cfgidx);
 8018e68:	78fb      	ldrb	r3, [r7, #3]
 8018e6a:	4619      	mov	r1, r3
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f000 f8ed 	bl	801904c <USBD_CDC_DeInit>

       	return USBD_OK;
 8018e72:	2300      	movs	r3, #0
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3708      	adds	r7, #8
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <USBD_MSC_CDC_Setup>:



// Setup для композитного устройства
static uint8_t  USBD_MSC_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	781b      	ldrb	r3, [r3, #0]
 8018e8a:	f003 0303 	and.w	r3, r3, #3
 8018e8e:	2b01      	cmp	r3, #1
 8018e90:	d103      	bne.n	8018e9a <USBD_MSC_CDC_Setup+0x1e>
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	889b      	ldrh	r3, [r3, #4]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d00b      	beq.n	8018eb2 <USBD_MSC_CDC_Setup+0x36>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018e9a:	683b      	ldr	r3, [r7, #0]
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018ea2:	2b02      	cmp	r3, #2
 8018ea4:	d10b      	bne.n	8018ebe <USBD_MSC_CDC_Setup+0x42>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018ea6:	683b      	ldr	r3, [r7, #0]
 8018ea8:	889b      	ldrh	r3, [r3, #4]
 8018eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	d105      	bne.n	8018ebe <USBD_MSC_CDC_Setup+0x42>
	{
		return USBD_MSC_Setup(pdev, req);
 8018eb2:	6839      	ldr	r1, [r7, #0]
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f002 fbe5 	bl	801b684 <USBD_MSC_Setup>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	e004      	b.n	8018ec8 <USBD_MSC_CDC_Setup+0x4c>
	}

	return USBD_CDC_Setup(pdev, req);
 8018ebe:	6839      	ldr	r1, [r7, #0]
 8018ec0:	6878      	ldr	r0, [r7, #4]
 8018ec2:	f000 f8ff 	bl	80190c4 <USBD_CDC_Setup>
 8018ec6:	4603      	mov	r3, r0
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	3708      	adds	r7, #8
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}

08018ed0 <USBD_MSC_CDC_DataIn>:


// Data IN для композитного устройства
static uint8_t  USBD_MSC_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b082      	sub	sp, #8
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
 8018ed8:	460b      	mov	r3, r1
 8018eda:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018edc:	78fb      	ldrb	r3, [r7, #3]
 8018ede:	2b01      	cmp	r3, #1
 8018ee0:	d106      	bne.n	8018ef0 <USBD_MSC_CDC_DataIn+0x20>
		return USBD_MSC_DataIn(pdev, epnum);
 8018ee2:	78fb      	ldrb	r3, [r7, #3]
 8018ee4:	4619      	mov	r1, r3
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f002 fcbe 	bl	801b868 <USBD_MSC_DataIn>
 8018eec:	4603      	mov	r3, r0
 8018eee:	e005      	b.n	8018efc <USBD_MSC_CDC_DataIn+0x2c>

	return USBD_CDC_DataIn(pdev, epnum);
 8018ef0:	78fb      	ldrb	r3, [r7, #3]
 8018ef2:	4619      	mov	r1, r3
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	f000 f9b3 	bl	8019260 <USBD_CDC_DataIn>
 8018efa:	4603      	mov	r3, r0
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	3708      	adds	r7, #8
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bd80      	pop	{r7, pc}

08018f04 <USBD_MSC_CDC_DataOut>:


// Data OUT для композитного устройства
static uint8_t  USBD_MSC_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b082      	sub	sp, #8
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	460b      	mov	r3, r1
 8018f0e:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018f10:	78fb      	ldrb	r3, [r7, #3]
 8018f12:	2b01      	cmp	r3, #1
 8018f14:	d106      	bne.n	8018f24 <USBD_MSC_CDC_DataOut+0x20>
		return USBD_MSC_DataOut(pdev, epnum);
 8018f16:	78fb      	ldrb	r3, [r7, #3]
 8018f18:	4619      	mov	r1, r3
 8018f1a:	6878      	ldr	r0, [r7, #4]
 8018f1c:	f002 fcb4 	bl	801b888 <USBD_MSC_DataOut>
 8018f20:	4603      	mov	r3, r0
 8018f22:	e005      	b.n	8018f30 <USBD_MSC_CDC_DataOut+0x2c>

	return USBD_CDC_DataOut(pdev, epnum);
 8018f24:	78fb      	ldrb	r3, [r7, #3]
 8018f26:	4619      	mov	r1, r3
 8018f28:	6878      	ldr	r0, [r7, #4]
 8018f2a:	f000 f9fe 	bl	801932a <USBD_CDC_DataOut>
 8018f2e:	4603      	mov	r3, r0
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	3708      	adds	r7, #8
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd80      	pop	{r7, pc}

08018f38 <USBD_MSC_CDC_EP0_RxReady>:


// Обработчик приема EP0
static uint8_t  USBD_MSC_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b082      	sub	sp, #8
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
    	return USBD_CDC_EP0_RxReady(pdev);
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f000 fa1d 	bl	8019380 <USBD_CDC_EP0_RxReady>
 8018f46:	4603      	mov	r3, r0
}
 8018f48:	4618      	mov	r0, r3
 8018f4a:	3708      	adds	r7, #8
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd80      	pop	{r7, pc}

08018f50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b084      	sub	sp, #16
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hcdc;


  hcdc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 8018f5c:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8018f60:	f001 f840 	bl	8019fe4 <USBD_static_malloc>
 8018f64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d105      	bne.n	8018f78 <USBD_CDC_Init+0x28>
  {
    pdev->pClassDataCDC = NULL;
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    return (uint8_t)USBD_EMEM;
 8018f74:	2302      	movs	r3, #2
 8018f76:	e065      	b.n	8019044 <USBD_CDC_Init+0xf4>
  }

  pdev->pClassDataCDC = (void *)hcdc;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	7c1b      	ldrb	r3, [r3, #16]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d118      	bne.n	8018fba <USBD_CDC_Init+0x6a>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018f88:	2340      	movs	r3, #64	; 0x40
 8018f8a:	2202      	movs	r2, #2
 8018f8c:	2183      	movs	r1, #131	; 0x83
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f000 fdde 	bl	8019b50 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2201      	movs	r2, #1
 8018f98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018f9c:	2340      	movs	r3, #64	; 0x40
 8018f9e:	2202      	movs	r2, #2
 8018fa0:	2103      	movs	r1, #3
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f000 fdd4 	bl	8019b50 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2201      	movs	r2, #1
 8018fac:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2264      	movs	r2, #100	; 0x64
 8018fb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8018fb8:	e017      	b.n	8018fea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018fba:	2340      	movs	r3, #64	; 0x40
 8018fbc:	2202      	movs	r2, #2
 8018fbe:	2183      	movs	r1, #131	; 0x83
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f000 fdc5 	bl	8019b50 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2201      	movs	r2, #1
 8018fca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018fce:	2340      	movs	r3, #64	; 0x40
 8018fd0:	2202      	movs	r2, #2
 8018fd2:	2103      	movs	r1, #3
 8018fd4:	6878      	ldr	r0, [r7, #4]
 8018fd6:	f000 fdbb 	bl	8019b50 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	2201      	movs	r2, #1
 8018fde:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2264      	movs	r2, #100	; 0x64
 8018fe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018fea:	2340      	movs	r3, #64	; 0x40
 8018fec:	2203      	movs	r2, #3
 8018fee:	2182      	movs	r1, #130	; 0x82
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f000 fdad 	bl	8019b50 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	2201      	movs	r2, #1
 8018ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Init();
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	2200      	movs	r2, #0
 801900c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hcdc->RxState = 0U;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2200      	movs	r2, #0
 8019014:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	7c1b      	ldrb	r3, [r3, #16]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d108      	bne.n	8019032 <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019026:	2340      	movs	r3, #64	; 0x40
 8019028:	2103      	movs	r1, #3
 801902a:	6878      	ldr	r0, [r7, #4]
 801902c:	f000 ff40 	bl	8019eb0 <USBD_LL_PrepareReceive>
 8019030:	e007      	b.n	8019042 <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019038:	2340      	movs	r3, #64	; 0x40
 801903a:	2103      	movs	r1, #3
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f000 ff37 	bl	8019eb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8019042:	2300      	movs	r3, #0
}
 8019044:	4618      	mov	r0, r3
 8019046:	3710      	adds	r7, #16
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	460b      	mov	r3, r1
 8019056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8019058:	2183      	movs	r1, #131	; 0x83
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	f000 fdb6 	bl	8019bcc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2200      	movs	r2, #0
 8019064:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8019068:	2103      	movs	r1, #3
 801906a:	6878      	ldr	r0, [r7, #4]
 801906c:	f000 fdae 	bl	8019bcc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	2200      	movs	r2, #0
 8019074:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8019078:	2182      	movs	r1, #130	; 0x82
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f000 fda6 	bl	8019bcc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	2200      	movs	r2, #0
 8019084:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	2200      	movs	r2, #0
 801908c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCDC != NULL)
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019096:	2b00      	cmp	r3, #0
 8019098:	d00e      	beq.n	80190b8 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->DeInit();
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCDC);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190aa:	4618      	mov	r0, r3
 80190ac:	f000 ffa8 	bl	801a000 <USBD_static_free>
    pdev->pClassDataCDC = NULL;
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	2200      	movs	r2, #0
 80190b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }

  return (uint8_t)USBD_OK;
 80190b8:	2300      	movs	r3, #0
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3708      	adds	r7, #8
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}
	...

080190c4 <USBD_CDC_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b086      	sub	sp, #24
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
 80190cc:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80190d6:	2300      	movs	r3, #0
 80190d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80190da:	2300      	movs	r3, #0
 80190dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80190de:	2300      	movs	r3, #0
 80190e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d101      	bne.n	80190ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80190e8:	2303      	movs	r3, #3
 80190ea:	e0b5      	b.n	8019258 <USBD_CDC_Setup+0x194>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80190ec:	683b      	ldr	r3, [r7, #0]
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d045      	beq.n	8019184 <USBD_CDC_Setup+0xc0>
 80190f8:	2b20      	cmp	r3, #32
 80190fa:	f040 80a5 	bne.w	8019248 <USBD_CDC_Setup+0x184>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	88db      	ldrh	r3, [r3, #6]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d034      	beq.n	8019170 <USBD_CDC_Setup+0xac>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	781b      	ldrb	r3, [r3, #0]
 801910a:	b25b      	sxtb	r3, r3
 801910c:	2b00      	cmp	r3, #0
 801910e:	da1a      	bge.n	8019146 <USBD_CDC_Setup+0x82>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019116:	689b      	ldr	r3, [r3, #8]
 8019118:	683a      	ldr	r2, [r7, #0]
 801911a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801911c:	693a      	ldr	r2, [r7, #16]
 801911e:	f502 711d 	add.w	r1, r2, #628	; 0x274
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019122:	683a      	ldr	r2, [r7, #0]
 8019124:	88d2      	ldrh	r2, [r2, #6]
 8019126:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	88db      	ldrh	r3, [r3, #6]
 801912c:	2b08      	cmp	r3, #8
 801912e:	bf28      	it	cs
 8019130:	2308      	movcs	r3, #8
 8019132:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801913a:	89fa      	ldrh	r2, [r7, #14]
 801913c:	4619      	mov	r1, r3
 801913e:	6878      	ldr	r0, [r7, #4]
 8019140:	f002 f9a7 	bl	801b492 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8019144:	e087      	b.n	8019256 <USBD_CDC_Setup+0x192>
          hcdc->CmdOpCode = req->bRequest;
 8019146:	683b      	ldr	r3, [r7, #0]
 8019148:	785a      	ldrb	r2, [r3, #1]
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	88db      	ldrh	r3, [r3, #6]
 8019154:	b2da      	uxtb	r2, r3
 8019156:	693b      	ldr	r3, [r7, #16]
 8019158:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8019162:	683b      	ldr	r3, [r7, #0]
 8019164:	88db      	ldrh	r3, [r3, #6]
 8019166:	461a      	mov	r2, r3
 8019168:	6878      	ldr	r0, [r7, #4]
 801916a:	f002 f9be 	bl	801b4ea <USBD_CtlPrepareRx>
      break;
 801916e:	e072      	b.n	8019256 <USBD_CDC_Setup+0x192>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019176:	689b      	ldr	r3, [r3, #8]
 8019178:	683a      	ldr	r2, [r7, #0]
 801917a:	7850      	ldrb	r0, [r2, #1]
 801917c:	2200      	movs	r2, #0
 801917e:	6839      	ldr	r1, [r7, #0]
 8019180:	4798      	blx	r3
      break;
 8019182:	e068      	b.n	8019256 <USBD_CDC_Setup+0x192>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	785b      	ldrb	r3, [r3, #1]
 8019188:	2b0b      	cmp	r3, #11
 801918a:	d852      	bhi.n	8019232 <USBD_CDC_Setup+0x16e>
 801918c:	a201      	add	r2, pc, #4	; (adr r2, 8019194 <USBD_CDC_Setup+0xd0>)
 801918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019192:	bf00      	nop
 8019194:	080191c5 	.word	0x080191c5
 8019198:	08019241 	.word	0x08019241
 801919c:	08019233 	.word	0x08019233
 80191a0:	08019233 	.word	0x08019233
 80191a4:	08019233 	.word	0x08019233
 80191a8:	08019233 	.word	0x08019233
 80191ac:	08019233 	.word	0x08019233
 80191b0:	08019233 	.word	0x08019233
 80191b4:	08019233 	.word	0x08019233
 80191b8:	08019233 	.word	0x08019233
 80191bc:	080191ef 	.word	0x080191ef
 80191c0:	08019219 	.word	0x08019219
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80191ca:	b2db      	uxtb	r3, r3
 80191cc:	2b03      	cmp	r3, #3
 80191ce:	d107      	bne.n	80191e0 <USBD_CDC_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80191d0:	f107 030a 	add.w	r3, r7, #10
 80191d4:	2202      	movs	r2, #2
 80191d6:	4619      	mov	r1, r3
 80191d8:	6878      	ldr	r0, [r7, #4]
 80191da:	f002 f95a 	bl	801b492 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80191de:	e032      	b.n	8019246 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 80191e0:	6839      	ldr	r1, [r7, #0]
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f001 ffc2 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 80191e8:	2303      	movs	r3, #3
 80191ea:	75fb      	strb	r3, [r7, #23]
          break;
 80191ec:	e02b      	b.n	8019246 <USBD_CDC_Setup+0x182>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	2b03      	cmp	r3, #3
 80191f8:	d107      	bne.n	801920a <USBD_CDC_Setup+0x146>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80191fa:	f107 030d 	add.w	r3, r7, #13
 80191fe:	2201      	movs	r2, #1
 8019200:	4619      	mov	r1, r3
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	f002 f945 	bl	801b492 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019208:	e01d      	b.n	8019246 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 801920a:	6839      	ldr	r1, [r7, #0]
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f001 ffad 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 8019212:	2303      	movs	r3, #3
 8019214:	75fb      	strb	r3, [r7, #23]
          break;
 8019216:	e016      	b.n	8019246 <USBD_CDC_Setup+0x182>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801921e:	b2db      	uxtb	r3, r3
 8019220:	2b03      	cmp	r3, #3
 8019222:	d00f      	beq.n	8019244 <USBD_CDC_Setup+0x180>
          {
            USBD_CtlError(pdev, req);
 8019224:	6839      	ldr	r1, [r7, #0]
 8019226:	6878      	ldr	r0, [r7, #4]
 8019228:	f001 ffa0 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 801922c:	2303      	movs	r3, #3
 801922e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8019230:	e008      	b.n	8019244 <USBD_CDC_Setup+0x180>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8019232:	6839      	ldr	r1, [r7, #0]
 8019234:	6878      	ldr	r0, [r7, #4]
 8019236:	f001 ff99 	bl	801b16c <USBD_CtlError>
          ret = USBD_FAIL;
 801923a:	2303      	movs	r3, #3
 801923c:	75fb      	strb	r3, [r7, #23]
          break;
 801923e:	e002      	b.n	8019246 <USBD_CDC_Setup+0x182>
          break;
 8019240:	bf00      	nop
 8019242:	e008      	b.n	8019256 <USBD_CDC_Setup+0x192>
          break;
 8019244:	bf00      	nop
      }
      break;
 8019246:	e006      	b.n	8019256 <USBD_CDC_Setup+0x192>

    default:
      USBD_CtlError(pdev, req);
 8019248:	6839      	ldr	r1, [r7, #0]
 801924a:	6878      	ldr	r0, [r7, #4]
 801924c:	f001 ff8e 	bl	801b16c <USBD_CtlError>
      ret = USBD_FAIL;
 8019250:	2303      	movs	r3, #3
 8019252:	75fb      	strb	r3, [r7, #23]
      break;
 8019254:	bf00      	nop
  }

  return (uint8_t)ret;
 8019256:	7dfb      	ldrb	r3, [r7, #23]
}
 8019258:	4618      	mov	r0, r3
 801925a:	3718      	adds	r7, #24
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b084      	sub	sp, #16
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
 8019268:	460b      	mov	r3, r1
 801926a:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019272:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801927a:	2b00      	cmp	r3, #0
 801927c:	d101      	bne.n	8019282 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801927e:	2303      	movs	r3, #3
 8019280:	e04f      	b.n	8019322 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019288:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801928a:	78fa      	ldrb	r2, [r7, #3]
 801928c:	6879      	ldr	r1, [r7, #4]
 801928e:	4613      	mov	r3, r2
 8019290:	009b      	lsls	r3, r3, #2
 8019292:	4413      	add	r3, r2
 8019294:	009b      	lsls	r3, r3, #2
 8019296:	440b      	add	r3, r1
 8019298:	3318      	adds	r3, #24
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d029      	beq.n	80192f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80192a0:	78fa      	ldrb	r2, [r7, #3]
 80192a2:	6879      	ldr	r1, [r7, #4]
 80192a4:	4613      	mov	r3, r2
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	4413      	add	r3, r2
 80192aa:	009b      	lsls	r3, r3, #2
 80192ac:	440b      	add	r3, r1
 80192ae:	3318      	adds	r3, #24
 80192b0:	681a      	ldr	r2, [r3, #0]
 80192b2:	78f9      	ldrb	r1, [r7, #3]
 80192b4:	68f8      	ldr	r0, [r7, #12]
 80192b6:	460b      	mov	r3, r1
 80192b8:	00db      	lsls	r3, r3, #3
 80192ba:	1a5b      	subs	r3, r3, r1
 80192bc:	009b      	lsls	r3, r3, #2
 80192be:	4403      	add	r3, r0
 80192c0:	3344      	adds	r3, #68	; 0x44
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80192c8:	fb03 f301 	mul.w	r3, r3, r1
 80192cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d110      	bne.n	80192f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80192d2:	78fa      	ldrb	r2, [r7, #3]
 80192d4:	6879      	ldr	r1, [r7, #4]
 80192d6:	4613      	mov	r3, r2
 80192d8:	009b      	lsls	r3, r3, #2
 80192da:	4413      	add	r3, r2
 80192dc:	009b      	lsls	r3, r3, #2
 80192de:	440b      	add	r3, r1
 80192e0:	3318      	adds	r3, #24
 80192e2:	2200      	movs	r2, #0
 80192e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80192e6:	78f9      	ldrb	r1, [r7, #3]
 80192e8:	2300      	movs	r3, #0
 80192ea:	2200      	movs	r2, #0
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f000 fda7 	bl	8019e40 <USBD_LL_Transmit>
 80192f2:	e015      	b.n	8019320 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80192f4:	68bb      	ldr	r3, [r7, #8]
 80192f6:	2200      	movs	r2, #0
 80192f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt != NULL)
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019302:	691b      	ldr	r3, [r3, #16]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d00b      	beq.n	8019320 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801930e:	691b      	ldr	r3, [r3, #16]
 8019310:	68ba      	ldr	r2, [r7, #8]
 8019312:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
 8019316:	68ba      	ldr	r2, [r7, #8]
 8019318:	f502 7131 	add.w	r1, r2, #708	; 0x2c4
 801931c:	78fa      	ldrb	r2, [r7, #3]
 801931e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8019320:	2300      	movs	r3, #0
}
 8019322:	4618      	mov	r0, r3
 8019324:	3710      	adds	r7, #16
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}

0801932a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801932a:	b580      	push	{r7, lr}
 801932c:	b084      	sub	sp, #16
 801932e:	af00      	add	r7, sp, #0
 8019330:	6078      	str	r0, [r7, #4]
 8019332:	460b      	mov	r3, r1
 8019334:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801933c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019344:	2b00      	cmp	r3, #0
 8019346:	d101      	bne.n	801934c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019348:	2303      	movs	r3, #3
 801934a:	e015      	b.n	8019378 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801934c:	78fb      	ldrb	r3, [r7, #3]
 801934e:	4619      	mov	r1, r3
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	f000 fde5 	bl	8019f20 <USBD_LL_GetRxDataSize>
 8019356:	4602      	mov	r2, r0
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019364:	68db      	ldr	r3, [r3, #12]
 8019366:	68fa      	ldr	r2, [r7, #12]
 8019368:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
 801936c:	68fa      	ldr	r2, [r7, #12]
 801936e:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 8019372:	4611      	mov	r1, r2
 8019374:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8019376:	2300      	movs	r3, #0
}
 8019378:	4618      	mov	r0, r3
 801937a:	3710      	adds	r7, #16
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}

08019380 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b084      	sub	sp, #16
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801938e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d101      	bne.n	801939a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8019396:	2303      	movs	r3, #3
 8019398:	e01d      	b.n	80193d6 <USBD_CDC_EP0_RxReady+0x56>
  }

  if ((pdev->pUserDataCDC != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d017      	beq.n	80193d4 <USBD_CDC_EP0_RxReady+0x54>
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 80193aa:	2bff      	cmp	r3, #255	; 0xff
 80193ac:	d012      	beq.n	80193d4 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193b4:	689b      	ldr	r3, [r3, #8]
 80193b6:	68fa      	ldr	r2, [r7, #12]
 80193b8:	f892 02b4 	ldrb.w	r0, [r2, #692]	; 0x2b4
                                                      (uint8_t *)hcdc->data,
 80193bc:	68fa      	ldr	r2, [r7, #12]
 80193be:	f502 711d 	add.w	r1, r2, #628	; 0x274
                                                      (uint16_t)hcdc->CmdLength);
 80193c2:	68fa      	ldr	r2, [r7, #12]
 80193c4:	f892 22b5 	ldrb.w	r2, [r2, #693]	; 0x2b5
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 80193c8:	b292      	uxth	r2, r2
 80193ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	22ff      	movs	r2, #255	; 0xff
 80193d0:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
  }

  return (uint8_t)USBD_OK;
 80193d4:	2300      	movs	r3, #0
}
 80193d6:	4618      	mov	r0, r3
 80193d8:	3710      	adds	r7, #16
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}

080193de <USBD_CDC_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops)
{
 80193de:	b480      	push	{r7}
 80193e0:	b083      	sub	sp, #12
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	6078      	str	r0, [r7, #4]
 80193e6:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d101      	bne.n	80193f2 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80193ee:	2303      	movs	r3, #3
 80193f0:	e004      	b.n	80193fc <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserDataCDC = fops;
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	683a      	ldr	r2, [r7, #0]
 80193f6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  return (uint8_t)USBD_OK;
 80193fa:	2300      	movs	r3, #0
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	370c      	adds	r7, #12
 8019400:	46bd      	mov	sp, r7
 8019402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019406:	4770      	bx	lr

08019408 <USBD_CDC_SetTxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 8019408:	b480      	push	{r7}
 801940a:	b087      	sub	sp, #28
 801940c:	af00      	add	r7, sp, #0
 801940e:	60f8      	str	r0, [r7, #12]
 8019410:	60b9      	str	r1, [r7, #8]
 8019412:	607a      	str	r2, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801941a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801941c:	697b      	ldr	r3, [r7, #20]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d101      	bne.n	8019426 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019422:	2303      	movs	r3, #3
 8019424:	e008      	b.n	8019438 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	68ba      	ldr	r2, [r7, #8]
 801942a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  hcdc->TxLength = length;
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	687a      	ldr	r2, [r7, #4]
 8019432:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 8019436:	2300      	movs	r3, #0
}
 8019438:	4618      	mov	r0, r3
 801943a:	371c      	adds	r7, #28
 801943c:	46bd      	mov	sp, r7
 801943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019442:	4770      	bx	lr

08019444 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8019444:	b480      	push	{r7}
 8019446:	b085      	sub	sp, #20
 8019448:	af00      	add	r7, sp, #0
 801944a:	6078      	str	r0, [r7, #4]
 801944c:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019454:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d101      	bne.n	8019460 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801945c:	2303      	movs	r3, #3
 801945e:	e004      	b.n	801946a <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	683a      	ldr	r2, [r7, #0]
 8019464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  return (uint8_t)USBD_OK;
 8019468:	2300      	movs	r3, #0
}
 801946a:	4618      	mov	r0, r3
 801946c:	3714      	adds	r7, #20
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	4770      	bx	lr

08019476 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019476:	b580      	push	{r7, lr}
 8019478:	b084      	sub	sp, #16
 801947a:	af00      	add	r7, sp, #0
 801947c:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019484:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8019486:	2301      	movs	r3, #1
 8019488:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCDC == NULL)
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019490:	2b00      	cmp	r3, #0
 8019492:	d101      	bne.n	8019498 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019494:	2303      	movs	r3, #3
 8019496:	e01a      	b.n	80194ce <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d114      	bne.n	80194cc <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	2201      	movs	r2, #1
 80194a6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194c0:	2183      	movs	r1, #131	; 0x83
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f000 fcbc 	bl	8019e40 <USBD_LL_Transmit>

    ret = USBD_OK;
 80194c8:	2300      	movs	r3, #0
 80194ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80194cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80194ce:	4618      	mov	r0, r3
 80194d0:	3710      	adds	r7, #16
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}

080194d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80194d6:	b580      	push	{r7, lr}
 80194d8:	b084      	sub	sp, #16
 80194da:	af00      	add	r7, sp, #0
 80194dc:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d101      	bne.n	80194f4 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80194f0:	2303      	movs	r3, #3
 80194f2:	e015      	b.n	8019520 <USBD_CDC_ReceivePacket+0x4a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	7c1b      	ldrb	r3, [r3, #16]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d108      	bne.n	801950e <USBD_CDC_ReceivePacket+0x38>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019502:	2340      	movs	r3, #64	; 0x40
 8019504:	2103      	movs	r1, #3
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f000 fcd2 	bl	8019eb0 <USBD_LL_PrepareReceive>
 801950c:	e007      	b.n	801951e <USBD_CDC_ReceivePacket+0x48>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8019514:	2340      	movs	r3, #64	; 0x40
 8019516:	2103      	movs	r1, #3
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f000 fcc9 	bl	8019eb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801951e:	2300      	movs	r3, #0
}
 8019520:	4618      	mov	r0, r3
 8019522:	3710      	adds	r7, #16
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}

08019528 <CDC_Init_FS>:
};



static int8_t CDC_Init_FS(void)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801952c:	2200      	movs	r2, #0
 801952e:	4905      	ldr	r1, [pc, #20]	; (8019544 <CDC_Init_FS+0x1c>)
 8019530:	4805      	ldr	r0, [pc, #20]	; (8019548 <CDC_Init_FS+0x20>)
 8019532:	f7ff ff69 	bl	8019408 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019536:	4905      	ldr	r1, [pc, #20]	; (801954c <CDC_Init_FS+0x24>)
 8019538:	4803      	ldr	r0, [pc, #12]	; (8019548 <CDC_Init_FS+0x20>)
 801953a:	f7ff ff83 	bl	8019444 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801953e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019540:	4618      	mov	r0, r3
 8019542:	bd80      	pop	{r7, pc}
 8019544:	200089b0 	.word	0x200089b0
 8019548:	200086d8 	.word	0x200086d8
 801954c:	200091b0 	.word	0x200091b0

08019550 <CDC_DeInit_FS>:



static int8_t CDC_DeInit_FS(void)
{
 8019550:	b480      	push	{r7}
 8019552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019554:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019556:	4618      	mov	r0, r3
 8019558:	46bd      	mov	sp, r7
 801955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955e:	4770      	bx	lr

08019560 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019560:	b480      	push	{r7}
 8019562:	b083      	sub	sp, #12
 8019564:	af00      	add	r7, sp, #0
 8019566:	4603      	mov	r3, r0
 8019568:	6039      	str	r1, [r7, #0]
 801956a:	71fb      	strb	r3, [r7, #7]
 801956c:	4613      	mov	r3, r2
 801956e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019570:	79fb      	ldrb	r3, [r7, #7]
 8019572:	2b23      	cmp	r3, #35	; 0x23
 8019574:	d84a      	bhi.n	801960c <CDC_Control_FS+0xac>
 8019576:	a201      	add	r2, pc, #4	; (adr r2, 801957c <CDC_Control_FS+0x1c>)
 8019578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801957c:	0801960d 	.word	0x0801960d
 8019580:	0801960d 	.word	0x0801960d
 8019584:	0801960d 	.word	0x0801960d
 8019588:	0801960d 	.word	0x0801960d
 801958c:	0801960d 	.word	0x0801960d
 8019590:	0801960d 	.word	0x0801960d
 8019594:	0801960d 	.word	0x0801960d
 8019598:	0801960d 	.word	0x0801960d
 801959c:	0801960d 	.word	0x0801960d
 80195a0:	0801960d 	.word	0x0801960d
 80195a4:	0801960d 	.word	0x0801960d
 80195a8:	0801960d 	.word	0x0801960d
 80195ac:	0801960d 	.word	0x0801960d
 80195b0:	0801960d 	.word	0x0801960d
 80195b4:	0801960d 	.word	0x0801960d
 80195b8:	0801960d 	.word	0x0801960d
 80195bc:	0801960d 	.word	0x0801960d
 80195c0:	0801960d 	.word	0x0801960d
 80195c4:	0801960d 	.word	0x0801960d
 80195c8:	0801960d 	.word	0x0801960d
 80195cc:	0801960d 	.word	0x0801960d
 80195d0:	0801960d 	.word	0x0801960d
 80195d4:	0801960d 	.word	0x0801960d
 80195d8:	0801960d 	.word	0x0801960d
 80195dc:	0801960d 	.word	0x0801960d
 80195e0:	0801960d 	.word	0x0801960d
 80195e4:	0801960d 	.word	0x0801960d
 80195e8:	0801960d 	.word	0x0801960d
 80195ec:	0801960d 	.word	0x0801960d
 80195f0:	0801960d 	.word	0x0801960d
 80195f4:	0801960d 	.word	0x0801960d
 80195f8:	0801960d 	.word	0x0801960d
 80195fc:	0801960d 	.word	0x0801960d
 8019600:	0801960d 	.word	0x0801960d
 8019604:	0801960d 	.word	0x0801960d
 8019608:	0801960d 	.word	0x0801960d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801960c:	bf00      	nop
  }

  return (USBD_OK);
 801960e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019610:	4618      	mov	r0, r3
 8019612:	370c      	adds	r7, #12
 8019614:	46bd      	mov	sp, r7
 8019616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961a:	4770      	bx	lr

0801961c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
 8019624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(rx_buf+rxcntr, (char*)Buf, *Len);
 8019626:	4b0f      	ldr	r3, [pc, #60]	; (8019664 <CDC_Receive_FS+0x48>)
 8019628:	881b      	ldrh	r3, [r3, #0]
 801962a:	461a      	mov	r2, r3
 801962c:	4b0e      	ldr	r3, [pc, #56]	; (8019668 <CDC_Receive_FS+0x4c>)
 801962e:	18d0      	adds	r0, r2, r3
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	461a      	mov	r2, r3
 8019636:	6879      	ldr	r1, [r7, #4]
 8019638:	f004 fcb2 	bl	801dfa0 <strncpy>
  	rxcntr+=*Len;
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	b29a      	uxth	r2, r3
 8019642:	4b08      	ldr	r3, [pc, #32]	; (8019664 <CDC_Receive_FS+0x48>)
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	4413      	add	r3, r2
 8019648:	b29a      	uxth	r2, r3
 801964a:	4b06      	ldr	r3, [pc, #24]	; (8019664 <CDC_Receive_FS+0x48>)
 801964c:	801a      	strh	r2, [r3, #0]
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801964e:	4807      	ldr	r0, [pc, #28]	; (801966c <CDC_Receive_FS+0x50>)
 8019650:	f7ff ff41 	bl	80194d6 <USBD_CDC_ReceivePacket>
  	USBTimeOutRX=timeout_const;
 8019654:	4b06      	ldr	r3, [pc, #24]	; (8019670 <CDC_Receive_FS+0x54>)
 8019656:	2202      	movs	r2, #2
 8019658:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 801965a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801965c:	4618      	mov	r0, r3
 801965e:	3708      	adds	r7, #8
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}
 8019664:	2000084a 	.word	0x2000084a
 8019668:	20005ae4 	.word	0x20005ae4
 801966c:	200086d8 	.word	0x200086d8
 8019670:	2000015c 	.word	0x2000015c

08019674 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b084      	sub	sp, #16
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	460b      	mov	r3, r1
 801967e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019680:	2300      	movs	r3, #0
 8019682:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef*)hUsbDeviceFS.pClassDataCDC;
 8019684:	4b18      	ldr	r3, [pc, #96]	; (80196e8 <CDC_Transmit_FS+0x74>)
 8019686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801968a:	60bb      	str	r3, [r7, #8]
  USB_timeout=1500;
 801968c:	4b17      	ldr	r3, [pc, #92]	; (80196ec <CDC_Transmit_FS+0x78>)
 801968e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8019692:	601a      	str	r2, [r3, #0]
  while(hcdc->TxState!=0)
 8019694:	e013      	b.n	80196be <CDC_Transmit_FS+0x4a>
  {
	  USB_timeout--;
 8019696:	4b15      	ldr	r3, [pc, #84]	; (80196ec <CDC_Transmit_FS+0x78>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	3b01      	subs	r3, #1
 801969c:	4a13      	ldr	r2, [pc, #76]	; (80196ec <CDC_Transmit_FS+0x78>)
 801969e:	6013      	str	r3, [r2, #0]
	  if(USB_timeout==0) {ERROR_REG|=(0x01<<USB_CVC_err); hcdc->TxState=0; break;}
 80196a0:	4b12      	ldr	r3, [pc, #72]	; (80196ec <CDC_Transmit_FS+0x78>)
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d10a      	bne.n	80196be <CDC_Transmit_FS+0x4a>
 80196a8:	4b11      	ldr	r3, [pc, #68]	; (80196f0 <CDC_Transmit_FS+0x7c>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	f043 0308 	orr.w	r3, r3, #8
 80196b0:	4a0f      	ldr	r2, [pc, #60]	; (80196f0 <CDC_Transmit_FS+0x7c>)
 80196b2:	6013      	str	r3, [r2, #0]
 80196b4:	68bb      	ldr	r3, [r7, #8]
 80196b6:	2200      	movs	r2, #0
 80196b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 80196bc:	e004      	b.n	80196c8 <CDC_Transmit_FS+0x54>
  while(hcdc->TxState!=0)
 80196be:	68bb      	ldr	r3, [r7, #8]
 80196c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d1e6      	bne.n	8019696 <CDC_Transmit_FS+0x22>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80196c8:	887b      	ldrh	r3, [r7, #2]
 80196ca:	461a      	mov	r2, r3
 80196cc:	6879      	ldr	r1, [r7, #4]
 80196ce:	4806      	ldr	r0, [pc, #24]	; (80196e8 <CDC_Transmit_FS+0x74>)
 80196d0:	f7ff fe9a 	bl	8019408 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80196d4:	4804      	ldr	r0, [pc, #16]	; (80196e8 <CDC_Transmit_FS+0x74>)
 80196d6:	f7ff fece 	bl	8019476 <USBD_CDC_TransmitPacket>
 80196da:	4603      	mov	r3, r0
 80196dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80196de:	7bfb      	ldrb	r3, [r7, #15]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3710      	adds	r7, #16
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	200086d8 	.word	0x200086d8
 80196ec:	20001be8 	.word	0x20001be8
 80196f0:	20000820 	.word	0x20000820

080196f4 <CDC_TransmitCplt_FS>:



static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80196f4:	b480      	push	{r7}
 80196f6:	b087      	sub	sp, #28
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	60f8      	str	r0, [r7, #12]
 80196fc:	60b9      	str	r1, [r7, #8]
 80196fe:	4613      	mov	r3, r2
 8019700:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019702:	2300      	movs	r3, #0
 8019704:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801970a:	4618      	mov	r0, r3
 801970c:	371c      	adds	r7, #28
 801970e:	46bd      	mov	sp, r7
 8019710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019714:	4770      	bx	lr
	...

08019718 <HAL_PCD_MspInit>:




void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b0ae      	sub	sp, #184	; 0xb8
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019720:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019724:	2200      	movs	r2, #0
 8019726:	601a      	str	r2, [r3, #0]
 8019728:	605a      	str	r2, [r3, #4]
 801972a:	609a      	str	r2, [r3, #8]
 801972c:	60da      	str	r2, [r3, #12]
 801972e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019730:	f107 0318 	add.w	r3, r7, #24
 8019734:	228c      	movs	r2, #140	; 0x8c
 8019736:	2100      	movs	r1, #0
 8019738:	4618      	mov	r0, r3
 801973a:	f003 fd89 	bl	801d250 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019746:	d173      	bne.n	8019830 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801974c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801974e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8019752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8019756:	2303      	movs	r3, #3
 8019758:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801975a:	2301      	movs	r3, #1
 801975c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801975e:	230c      	movs	r3, #12
 8019760:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8019762:	2302      	movs	r3, #2
 8019764:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8019766:	2302      	movs	r3, #2
 8019768:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801976a:	2302      	movs	r3, #2
 801976c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801976e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019772:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8019774:	f107 0318 	add.w	r3, r7, #24
 8019778:	4618      	mov	r0, r3
 801977a:	f7f3 fa07 	bl	800cb8c <HAL_RCCEx_PeriphCLKConfig>
 801977e:	4603      	mov	r3, r0
 8019780:	2b00      	cmp	r3, #0
 8019782:	d001      	beq.n	8019788 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8019784:	f7ed f868 	bl	8006858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019788:	4b2b      	ldr	r3, [pc, #172]	; (8019838 <HAL_PCD_MspInit+0x120>)
 801978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801978c:	4a2a      	ldr	r2, [pc, #168]	; (8019838 <HAL_PCD_MspInit+0x120>)
 801978e:	f043 0301 	orr.w	r3, r3, #1
 8019792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019794:	4b28      	ldr	r3, [pc, #160]	; (8019838 <HAL_PCD_MspInit+0x120>)
 8019796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019798:	f003 0301 	and.w	r3, r3, #1
 801979c:	617b      	str	r3, [r7, #20]
 801979e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80197a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80197a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80197a8:	2302      	movs	r3, #2
 80197aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80197ae:	2300      	movs	r3, #0
 80197b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80197b4:	2303      	movs	r3, #3
 80197b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80197ba:	230a      	movs	r3, #10
 80197bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80197c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80197c4:	4619      	mov	r1, r3
 80197c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80197ca:	f7f0 fb5b 	bl	8009e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80197ce:	4b1a      	ldr	r3, [pc, #104]	; (8019838 <HAL_PCD_MspInit+0x120>)
 80197d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197d2:	4a19      	ldr	r2, [pc, #100]	; (8019838 <HAL_PCD_MspInit+0x120>)
 80197d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80197d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80197da:	4b17      	ldr	r3, [pc, #92]	; (8019838 <HAL_PCD_MspInit+0x120>)
 80197dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80197e2:	613b      	str	r3, [r7, #16]
 80197e4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80197e6:	4b14      	ldr	r3, [pc, #80]	; (8019838 <HAL_PCD_MspInit+0x120>)
 80197e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d114      	bne.n	801981c <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80197f2:	4b11      	ldr	r3, [pc, #68]	; (8019838 <HAL_PCD_MspInit+0x120>)
 80197f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197f6:	4a10      	ldr	r2, [pc, #64]	; (8019838 <HAL_PCD_MspInit+0x120>)
 80197f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80197fc:	6593      	str	r3, [r2, #88]	; 0x58
 80197fe:	4b0e      	ldr	r3, [pc, #56]	; (8019838 <HAL_PCD_MspInit+0x120>)
 8019800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019806:	60fb      	str	r3, [r7, #12]
 8019808:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801980a:	f7f2 fb51 	bl	800beb0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801980e:	4b0a      	ldr	r3, [pc, #40]	; (8019838 <HAL_PCD_MspInit+0x120>)
 8019810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019812:	4a09      	ldr	r2, [pc, #36]	; (8019838 <HAL_PCD_MspInit+0x120>)
 8019814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019818:	6593      	str	r3, [r2, #88]	; 0x58
 801981a:	e001      	b.n	8019820 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801981c:	f7f2 fb48 	bl	800beb0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019820:	2200      	movs	r2, #0
 8019822:	2100      	movs	r1, #0
 8019824:	2043      	movs	r0, #67	; 0x43
 8019826:	f7ef fd6f 	bl	8009308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801982a:	2043      	movs	r0, #67	; 0x43
 801982c:	f7ef fd88 	bl	8009340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019830:	bf00      	nop
 8019832:	37b8      	adds	r7, #184	; 0xb8
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}
 8019838:	40021000 	.word	0x40021000

0801983c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019850:	4619      	mov	r1, r3
 8019852:	4610      	mov	r0, r2
 8019854:	f000 fc8a 	bl	801a16c <USBD_LL_SetupStage>
}
 8019858:	bf00      	nop
 801985a:	3708      	adds	r7, #8
 801985c:	46bd      	mov	sp, r7
 801985e:	bd80      	pop	{r7, pc}

08019860 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b082      	sub	sp, #8
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	460b      	mov	r3, r1
 801986a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019872:	78fa      	ldrb	r2, [r7, #3]
 8019874:	6879      	ldr	r1, [r7, #4]
 8019876:	4613      	mov	r3, r2
 8019878:	00db      	lsls	r3, r3, #3
 801987a:	1a9b      	subs	r3, r3, r2
 801987c:	009b      	lsls	r3, r3, #2
 801987e:	440b      	add	r3, r1
 8019880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019884:	681a      	ldr	r2, [r3, #0]
 8019886:	78fb      	ldrb	r3, [r7, #3]
 8019888:	4619      	mov	r1, r3
 801988a:	f000 fcc4 	bl	801a216 <USBD_LL_DataOutStage>
}
 801988e:	bf00      	nop
 8019890:	3708      	adds	r7, #8
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}

08019896 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019896:	b580      	push	{r7, lr}
 8019898:	b082      	sub	sp, #8
 801989a:	af00      	add	r7, sp, #0
 801989c:	6078      	str	r0, [r7, #4]
 801989e:	460b      	mov	r3, r1
 80198a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80198a8:	78fa      	ldrb	r2, [r7, #3]
 80198aa:	6879      	ldr	r1, [r7, #4]
 80198ac:	4613      	mov	r3, r2
 80198ae:	00db      	lsls	r3, r3, #3
 80198b0:	1a9b      	subs	r3, r3, r2
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	440b      	add	r3, r1
 80198b6:	3348      	adds	r3, #72	; 0x48
 80198b8:	681a      	ldr	r2, [r3, #0]
 80198ba:	78fb      	ldrb	r3, [r7, #3]
 80198bc:	4619      	mov	r1, r3
 80198be:	f000 fd0d 	bl	801a2dc <USBD_LL_DataInStage>
}
 80198c2:	bf00      	nop
 80198c4:	3708      	adds	r7, #8
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}

080198ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198ca:	b580      	push	{r7, lr}
 80198cc:	b082      	sub	sp, #8
 80198ce:	af00      	add	r7, sp, #0
 80198d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80198d8:	4618      	mov	r0, r3
 80198da:	f000 fe21 	bl	801a520 <USBD_LL_SOF>
}
 80198de:	bf00      	nop
 80198e0:	3708      	adds	r7, #8
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}

080198e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198e6:	b580      	push	{r7, lr}
 80198e8:	b084      	sub	sp, #16
 80198ea:	af00      	add	r7, sp, #0
 80198ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80198ee:	2301      	movs	r3, #1
 80198f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	68db      	ldr	r3, [r3, #12]
 80198f6:	2b02      	cmp	r3, #2
 80198f8:	d001      	beq.n	80198fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80198fa:	f7ec ffad 	bl	8006858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019904:	7bfa      	ldrb	r2, [r7, #15]
 8019906:	4611      	mov	r1, r2
 8019908:	4618      	mov	r0, r3
 801990a:	f000 fdcb 	bl	801a4a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019914:	4618      	mov	r0, r3
 8019916:	f000 fd77 	bl	801a408 <USBD_LL_Reset>
}
 801991a:	bf00      	nop
 801991c:	3710      	adds	r7, #16
 801991e:	46bd      	mov	sp, r7
 8019920:	bd80      	pop	{r7, pc}
	...

08019924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b082      	sub	sp, #8
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	6812      	ldr	r2, [r2, #0]
 801993a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801993e:	f043 0301 	orr.w	r3, r3, #1
 8019942:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801994a:	4618      	mov	r0, r3
 801994c:	f000 fdba 	bl	801a4c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	6a1b      	ldr	r3, [r3, #32]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d005      	beq.n	8019964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019958:	4b04      	ldr	r3, [pc, #16]	; (801996c <HAL_PCD_SuspendCallback+0x48>)
 801995a:	691b      	ldr	r3, [r3, #16]
 801995c:	4a03      	ldr	r2, [pc, #12]	; (801996c <HAL_PCD_SuspendCallback+0x48>)
 801995e:	f043 0306 	orr.w	r3, r3, #6
 8019962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019964:	bf00      	nop
 8019966:	3708      	adds	r7, #8
 8019968:	46bd      	mov	sp, r7
 801996a:	bd80      	pop	{r7, pc}
 801996c:	e000ed00 	.word	0xe000ed00

08019970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b082      	sub	sp, #8
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	687a      	ldr	r2, [r7, #4]
 8019984:	6812      	ldr	r2, [r2, #0]
 8019986:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801998a:	f023 0301 	bic.w	r3, r3, #1
 801998e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	6a1b      	ldr	r3, [r3, #32]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d007      	beq.n	80199a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019998:	4b08      	ldr	r3, [pc, #32]	; (80199bc <HAL_PCD_ResumeCallback+0x4c>)
 801999a:	691b      	ldr	r3, [r3, #16]
 801999c:	4a07      	ldr	r2, [pc, #28]	; (80199bc <HAL_PCD_ResumeCallback+0x4c>)
 801999e:	f023 0306 	bic.w	r3, r3, #6
 80199a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80199a4:	f000 fb36 	bl	801a014 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80199ae:	4618      	mov	r0, r3
 80199b0:	f000 fd9e 	bl	801a4f0 <USBD_LL_Resume>
}
 80199b4:	bf00      	nop
 80199b6:	3708      	adds	r7, #8
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}
 80199bc:	e000ed00 	.word	0xe000ed00

080199c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b082      	sub	sp, #8
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	6078      	str	r0, [r7, #4]
 80199c8:	460b      	mov	r3, r1
 80199ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80199d2:	78fa      	ldrb	r2, [r7, #3]
 80199d4:	4611      	mov	r1, r2
 80199d6:	4618      	mov	r0, r3
 80199d8:	f000 fdea 	bl	801a5b0 <USBD_LL_IsoOUTIncomplete>
}
 80199dc:	bf00      	nop
 80199de:	3708      	adds	r7, #8
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	460b      	mov	r3, r1
 80199ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80199f6:	78fa      	ldrb	r2, [r7, #3]
 80199f8:	4611      	mov	r1, r2
 80199fa:	4618      	mov	r0, r3
 80199fc:	f000 fdb2 	bl	801a564 <USBD_LL_IsoINIncomplete>
}
 8019a00:	bf00      	nop
 8019a02:	3708      	adds	r7, #8
 8019a04:	46bd      	mov	sp, r7
 8019a06:	bd80      	pop	{r7, pc}

08019a08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b082      	sub	sp, #8
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a16:	4618      	mov	r0, r3
 8019a18:	f000 fdf0 	bl	801a5fc <USBD_LL_DevConnected>
}
 8019a1c:	bf00      	nop
 8019a1e:	3708      	adds	r7, #8
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}

08019a24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b082      	sub	sp, #8
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a32:	4618      	mov	r0, r3
 8019a34:	f000 fded 	bl	801a612 <USBD_LL_DevDisconnected>
}
 8019a38:	bf00      	nop
 8019a3a:	3708      	adds	r7, #8
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <USBD_LL_Init>:
/*******************************************************************************
                       LL Driver Interface (USB Device Library --> PCD)
*******************************************************************************/

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b082      	sub	sp, #8
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	781b      	ldrb	r3, [r3, #0]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d146      	bne.n	8019ade <USBD_LL_Init+0x9e>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019a50:	4a25      	ldr	r2, [pc, #148]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	4a23      	ldr	r2, [pc, #140]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019a60:	4b21      	ldr	r3, [pc, #132]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019a66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 7;
 8019a68:	4b1f      	ldr	r3, [pc, #124]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a6a:	2207      	movs	r2, #7
 8019a6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019a6e:	4b1e      	ldr	r3, [pc, #120]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a70:	2202      	movs	r2, #2
 8019a72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019a74:	4b1c      	ldr	r3, [pc, #112]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a76:	2202      	movs	r2, #2
 8019a78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019a7a:	4b1b      	ldr	r3, [pc, #108]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019a80:	4b19      	ldr	r3, [pc, #100]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a82:	2200      	movs	r2, #0
 8019a84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019a86:	4b18      	ldr	r3, [pc, #96]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a88:	2200      	movs	r2, #0
 8019a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019a8c:	4b16      	ldr	r3, [pc, #88]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a8e:	2200      	movs	r2, #0
 8019a90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019a92:	4b15      	ldr	r3, [pc, #84]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a94:	2200      	movs	r2, #0
 8019a96:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019a98:	4b13      	ldr	r3, [pc, #76]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019a9e:	4812      	ldr	r0, [pc, #72]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019aa0:	f7f1 f8c5 	bl	800ac2e <HAL_PCD_Init>
 8019aa4:	4603      	mov	r3, r0
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d001      	beq.n	8019aae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019aaa:	f7ec fed5 	bl	8006858 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 8019aae:	2140      	movs	r1, #64	; 0x40
 8019ab0:	480d      	ldr	r0, [pc, #52]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019ab2:	f7f2 f954 	bl	800bd5e <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019ab6:	2240      	movs	r2, #64	; 0x40
 8019ab8:	2100      	movs	r1, #0
 8019aba:	480b      	ldr	r0, [pc, #44]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019abc:	f7f2 f908 	bl	800bcd0 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8019ac0:	2240      	movs	r2, #64	; 0x40
 8019ac2:	2101      	movs	r1, #1
 8019ac4:	4808      	ldr	r0, [pc, #32]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019ac6:	f7f2 f903 	bl	800bcd0 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 8019aca:	2240      	movs	r2, #64	; 0x40
 8019acc:	2102      	movs	r1, #2
 8019ace:	4806      	ldr	r0, [pc, #24]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019ad0:	f7f2 f8fe 	bl	800bcd0 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8019ad4:	2240      	movs	r2, #64	; 0x40
 8019ad6:	2103      	movs	r1, #3
 8019ad8:	4803      	ldr	r0, [pc, #12]	; (8019ae8 <USBD_LL_Init+0xa8>)
 8019ada:	f7f2 f8f9 	bl	800bcd0 <HAL_PCDEx_SetTxFiFo>

	//


  }
  return USBD_OK;
 8019ade:	2300      	movs	r3, #0
}
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	3708      	adds	r7, #8
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	200099b0 	.word	0x200099b0

08019aec <USBD_LL_Start>:




USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b084      	sub	sp, #16
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019af4:	2300      	movs	r3, #0
 8019af6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019af8:	2300      	movs	r3, #0
 8019afa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7f1 f9b7 	bl	800ae76 <HAL_PCD_Start>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b0c:	7bbb      	ldrb	r3, [r7, #14]
 8019b0e:	2b03      	cmp	r3, #3
 8019b10:	d816      	bhi.n	8019b40 <USBD_LL_Start+0x54>
 8019b12:	a201      	add	r2, pc, #4	; (adr r2, 8019b18 <USBD_LL_Start+0x2c>)
 8019b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b18:	08019b29 	.word	0x08019b29
 8019b1c:	08019b2f 	.word	0x08019b2f
 8019b20:	08019b35 	.word	0x08019b35
 8019b24:	08019b3b 	.word	0x08019b3b
    case HAL_OK :
      usb_status = USBD_OK;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b2c:	e00b      	b.n	8019b46 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b2e:	2303      	movs	r3, #3
 8019b30:	73fb      	strb	r3, [r7, #15]
    break;
 8019b32:	e008      	b.n	8019b46 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b34:	2301      	movs	r3, #1
 8019b36:	73fb      	strb	r3, [r7, #15]
    break;
 8019b38:	e005      	b.n	8019b46 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b3a:	2303      	movs	r3, #3
 8019b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b3e:	e002      	b.n	8019b46 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019b40:	2303      	movs	r3, #3
 8019b42:	73fb      	strb	r3, [r7, #15]
    break;
 8019b44:	bf00      	nop
  }
  return usb_status;
 8019b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	3710      	adds	r7, #16
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}

08019b50 <USBD_LL_OpenEP>:




USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b084      	sub	sp, #16
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	4608      	mov	r0, r1
 8019b5a:	4611      	mov	r1, r2
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	4603      	mov	r3, r0
 8019b60:	70fb      	strb	r3, [r7, #3]
 8019b62:	460b      	mov	r3, r1
 8019b64:	70bb      	strb	r3, [r7, #2]
 8019b66:	4613      	mov	r3, r2
 8019b68:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019b78:	78bb      	ldrb	r3, [r7, #2]
 8019b7a:	883a      	ldrh	r2, [r7, #0]
 8019b7c:	78f9      	ldrb	r1, [r7, #3]
 8019b7e:	f7f1 fd72 	bl	800b666 <HAL_PCD_EP_Open>
 8019b82:	4603      	mov	r3, r0
 8019b84:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b86:	7bbb      	ldrb	r3, [r7, #14]
 8019b88:	2b03      	cmp	r3, #3
 8019b8a:	d817      	bhi.n	8019bbc <USBD_LL_OpenEP+0x6c>
 8019b8c:	a201      	add	r2, pc, #4	; (adr r2, 8019b94 <USBD_LL_OpenEP+0x44>)
 8019b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b92:	bf00      	nop
 8019b94:	08019ba5 	.word	0x08019ba5
 8019b98:	08019bab 	.word	0x08019bab
 8019b9c:	08019bb1 	.word	0x08019bb1
 8019ba0:	08019bb7 	.word	0x08019bb7
    case HAL_OK :
      usb_status = USBD_OK;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ba8:	e00b      	b.n	8019bc2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019baa:	2303      	movs	r3, #3
 8019bac:	73fb      	strb	r3, [r7, #15]
    break;
 8019bae:	e008      	b.n	8019bc2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8019bb4:	e005      	b.n	8019bc2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bb6:	2303      	movs	r3, #3
 8019bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8019bba:	e002      	b.n	8019bc2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019bbc:	2303      	movs	r3, #3
 8019bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8019bc0:	bf00      	nop
  }
  return usb_status;
 8019bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	3710      	adds	r7, #16
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd80      	pop	{r7, pc}

08019bcc <USBD_LL_CloseEP>:



USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b084      	sub	sp, #16
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	6078      	str	r0, [r7, #4]
 8019bd4:	460b      	mov	r3, r1
 8019bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bd8:	2300      	movs	r3, #0
 8019bda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bdc:	2300      	movs	r3, #0
 8019bde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019be6:	78fa      	ldrb	r2, [r7, #3]
 8019be8:	4611      	mov	r1, r2
 8019bea:	4618      	mov	r0, r3
 8019bec:	f7f1 fda3 	bl	800b736 <HAL_PCD_EP_Close>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019bf4:	7bbb      	ldrb	r3, [r7, #14]
 8019bf6:	2b03      	cmp	r3, #3
 8019bf8:	d816      	bhi.n	8019c28 <USBD_LL_CloseEP+0x5c>
 8019bfa:	a201      	add	r2, pc, #4	; (adr r2, 8019c00 <USBD_LL_CloseEP+0x34>)
 8019bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c00:	08019c11 	.word	0x08019c11
 8019c04:	08019c17 	.word	0x08019c17
 8019c08:	08019c1d 	.word	0x08019c1d
 8019c0c:	08019c23 	.word	0x08019c23
    case HAL_OK :
      usb_status = USBD_OK;
 8019c10:	2300      	movs	r3, #0
 8019c12:	73fb      	strb	r3, [r7, #15]
    break;
 8019c14:	e00b      	b.n	8019c2e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c16:	2303      	movs	r3, #3
 8019c18:	73fb      	strb	r3, [r7, #15]
    break;
 8019c1a:	e008      	b.n	8019c2e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c1c:	2301      	movs	r3, #1
 8019c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8019c20:	e005      	b.n	8019c2e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c22:	2303      	movs	r3, #3
 8019c24:	73fb      	strb	r3, [r7, #15]
    break;
 8019c26:	e002      	b.n	8019c2e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019c28:	2303      	movs	r3, #3
 8019c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c2c:	bf00      	nop
  }
  return usb_status;
 8019c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3710      	adds	r7, #16
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}

08019c38 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	460b      	mov	r3, r1
 8019c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c44:	2300      	movs	r3, #0
 8019c46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c48:	2300      	movs	r3, #0
 8019c4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c52:	78fa      	ldrb	r2, [r7, #3]
 8019c54:	4611      	mov	r1, r2
 8019c56:	4618      	mov	r0, r3
 8019c58:	f7f1 ff02 	bl	800ba60 <HAL_PCD_EP_Flush>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019c60:	7bbb      	ldrb	r3, [r7, #14]
 8019c62:	2b03      	cmp	r3, #3
 8019c64:	d816      	bhi.n	8019c94 <USBD_LL_FlushEP+0x5c>
 8019c66:	a201      	add	r2, pc, #4	; (adr r2, 8019c6c <USBD_LL_FlushEP+0x34>)
 8019c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c6c:	08019c7d 	.word	0x08019c7d
 8019c70:	08019c83 	.word	0x08019c83
 8019c74:	08019c89 	.word	0x08019c89
 8019c78:	08019c8f 	.word	0x08019c8f
    case HAL_OK :
      usb_status = USBD_OK;
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8019c80:	e00b      	b.n	8019c9a <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c82:	2303      	movs	r3, #3
 8019c84:	73fb      	strb	r3, [r7, #15]
    break;
 8019c86:	e008      	b.n	8019c9a <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c88:	2301      	movs	r3, #1
 8019c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c8c:	e005      	b.n	8019c9a <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c8e:	2303      	movs	r3, #3
 8019c90:	73fb      	strb	r3, [r7, #15]
    break;
 8019c92:	e002      	b.n	8019c9a <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019c94:	2303      	movs	r3, #3
 8019c96:	73fb      	strb	r3, [r7, #15]
    break;
 8019c98:	bf00      	nop
  }
  return usb_status;
 8019c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	3710      	adds	r7, #16
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	bd80      	pop	{r7, pc}

08019ca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b084      	sub	sp, #16
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
 8019cac:	460b      	mov	r3, r1
 8019cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019cbe:	78fa      	ldrb	r2, [r7, #3]
 8019cc0:	4611      	mov	r1, r2
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f7f1 fe14 	bl	800b8f0 <HAL_PCD_EP_SetStall>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019ccc:	7bbb      	ldrb	r3, [r7, #14]
 8019cce:	2b03      	cmp	r3, #3
 8019cd0:	d816      	bhi.n	8019d00 <USBD_LL_StallEP+0x5c>
 8019cd2:	a201      	add	r2, pc, #4	; (adr r2, 8019cd8 <USBD_LL_StallEP+0x34>)
 8019cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cd8:	08019ce9 	.word	0x08019ce9
 8019cdc:	08019cef 	.word	0x08019cef
 8019ce0:	08019cf5 	.word	0x08019cf5
 8019ce4:	08019cfb 	.word	0x08019cfb
    case HAL_OK :
      usb_status = USBD_OK;
 8019ce8:	2300      	movs	r3, #0
 8019cea:	73fb      	strb	r3, [r7, #15]
    break;
 8019cec:	e00b      	b.n	8019d06 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019cee:	2303      	movs	r3, #3
 8019cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8019cf2:	e008      	b.n	8019d06 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8019cf8:	e005      	b.n	8019d06 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019cfa:	2303      	movs	r3, #3
 8019cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8019cfe:	e002      	b.n	8019d06 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019d00:	2303      	movs	r3, #3
 8019d02:	73fb      	strb	r3, [r7, #15]
    break;
 8019d04:	bf00      	nop
  }
  return usb_status;
 8019d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3710      	adds	r7, #16
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b084      	sub	sp, #16
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	460b      	mov	r3, r1
 8019d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d20:	2300      	movs	r3, #0
 8019d22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019d2a:	78fa      	ldrb	r2, [r7, #3]
 8019d2c:	4611      	mov	r1, r2
 8019d2e:	4618      	mov	r0, r3
 8019d30:	f7f1 fe40 	bl	800b9b4 <HAL_PCD_EP_ClrStall>
 8019d34:	4603      	mov	r3, r0
 8019d36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019d38:	7bbb      	ldrb	r3, [r7, #14]
 8019d3a:	2b03      	cmp	r3, #3
 8019d3c:	d816      	bhi.n	8019d6c <USBD_LL_ClearStallEP+0x5c>
 8019d3e:	a201      	add	r2, pc, #4	; (adr r2, 8019d44 <USBD_LL_ClearStallEP+0x34>)
 8019d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d44:	08019d55 	.word	0x08019d55
 8019d48:	08019d5b 	.word	0x08019d5b
 8019d4c:	08019d61 	.word	0x08019d61
 8019d50:	08019d67 	.word	0x08019d67
    case HAL_OK :
      usb_status = USBD_OK;
 8019d54:	2300      	movs	r3, #0
 8019d56:	73fb      	strb	r3, [r7, #15]
    break;
 8019d58:	e00b      	b.n	8019d72 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d5a:	2303      	movs	r3, #3
 8019d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8019d5e:	e008      	b.n	8019d72 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d60:	2301      	movs	r3, #1
 8019d62:	73fb      	strb	r3, [r7, #15]
    break;
 8019d64:	e005      	b.n	8019d72 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d66:	2303      	movs	r3, #3
 8019d68:	73fb      	strb	r3, [r7, #15]
    break;
 8019d6a:	e002      	b.n	8019d72 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019d6c:	2303      	movs	r3, #3
 8019d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8019d70:	bf00      	nop
  }
  return usb_status;
 8019d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	3710      	adds	r7, #16
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}

08019d7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b085      	sub	sp, #20
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
 8019d84:	460b      	mov	r3, r1
 8019d86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019d8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	da0b      	bge.n	8019db0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019d98:	78fb      	ldrb	r3, [r7, #3]
 8019d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019d9e:	68f9      	ldr	r1, [r7, #12]
 8019da0:	4613      	mov	r3, r2
 8019da2:	00db      	lsls	r3, r3, #3
 8019da4:	1a9b      	subs	r3, r3, r2
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	440b      	add	r3, r1
 8019daa:	333e      	adds	r3, #62	; 0x3e
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	e00b      	b.n	8019dc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019db0:	78fb      	ldrb	r3, [r7, #3]
 8019db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019db6:	68f9      	ldr	r1, [r7, #12]
 8019db8:	4613      	mov	r3, r2
 8019dba:	00db      	lsls	r3, r3, #3
 8019dbc:	1a9b      	subs	r3, r3, r2
 8019dbe:	009b      	lsls	r3, r3, #2
 8019dc0:	440b      	add	r3, r1
 8019dc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019dc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019dc8:	4618      	mov	r0, r3
 8019dca:	3714      	adds	r7, #20
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd2:	4770      	bx	lr

08019dd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019dd4:	b580      	push	{r7, lr}
 8019dd6:	b084      	sub	sp, #16
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	460b      	mov	r3, r1
 8019dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019de0:	2300      	movs	r3, #0
 8019de2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019de4:	2300      	movs	r3, #0
 8019de6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019dee:	78fa      	ldrb	r2, [r7, #3]
 8019df0:	4611      	mov	r1, r2
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7f1 fc12 	bl	800b61c <HAL_PCD_SetAddress>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019dfc:	7bbb      	ldrb	r3, [r7, #14]
 8019dfe:	2b03      	cmp	r3, #3
 8019e00:	d816      	bhi.n	8019e30 <USBD_LL_SetUSBAddress+0x5c>
 8019e02:	a201      	add	r2, pc, #4	; (adr r2, 8019e08 <USBD_LL_SetUSBAddress+0x34>)
 8019e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e08:	08019e19 	.word	0x08019e19
 8019e0c:	08019e1f 	.word	0x08019e1f
 8019e10:	08019e25 	.word	0x08019e25
 8019e14:	08019e2b 	.word	0x08019e2b
    case HAL_OK :
      usb_status = USBD_OK;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8019e1c:	e00b      	b.n	8019e36 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019e1e:	2303      	movs	r3, #3
 8019e20:	73fb      	strb	r3, [r7, #15]
    break;
 8019e22:	e008      	b.n	8019e36 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019e24:	2301      	movs	r3, #1
 8019e26:	73fb      	strb	r3, [r7, #15]
    break;
 8019e28:	e005      	b.n	8019e36 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019e2a:	2303      	movs	r3, #3
 8019e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8019e2e:	e002      	b.n	8019e36 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019e30:	2303      	movs	r3, #3
 8019e32:	73fb      	strb	r3, [r7, #15]
    break;
 8019e34:	bf00      	nop
  }
  return usb_status;
 8019e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e38:	4618      	mov	r0, r3
 8019e3a:	3710      	adds	r7, #16
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	bd80      	pop	{r7, pc}

08019e40 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b086      	sub	sp, #24
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	60f8      	str	r0, [r7, #12]
 8019e48:	607a      	str	r2, [r7, #4]
 8019e4a:	603b      	str	r3, [r7, #0]
 8019e4c:	460b      	mov	r3, r1
 8019e4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e50:	2300      	movs	r3, #0
 8019e52:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e54:	2300      	movs	r3, #0
 8019e56:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019e5e:	7af9      	ldrb	r1, [r7, #11]
 8019e60:	683b      	ldr	r3, [r7, #0]
 8019e62:	687a      	ldr	r2, [r7, #4]
 8019e64:	f7f1 fd07 	bl	800b876 <HAL_PCD_EP_Transmit>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019e6c:	7dbb      	ldrb	r3, [r7, #22]
 8019e6e:	2b03      	cmp	r3, #3
 8019e70:	d816      	bhi.n	8019ea0 <USBD_LL_Transmit+0x60>
 8019e72:	a201      	add	r2, pc, #4	; (adr r2, 8019e78 <USBD_LL_Transmit+0x38>)
 8019e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e78:	08019e89 	.word	0x08019e89
 8019e7c:	08019e8f 	.word	0x08019e8f
 8019e80:	08019e95 	.word	0x08019e95
 8019e84:	08019e9b 	.word	0x08019e9b
    case HAL_OK :
      usb_status = USBD_OK;
 8019e88:	2300      	movs	r3, #0
 8019e8a:	75fb      	strb	r3, [r7, #23]
    break;
 8019e8c:	e00b      	b.n	8019ea6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019e8e:	2303      	movs	r3, #3
 8019e90:	75fb      	strb	r3, [r7, #23]
    break;
 8019e92:	e008      	b.n	8019ea6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019e94:	2301      	movs	r3, #1
 8019e96:	75fb      	strb	r3, [r7, #23]
    break;
 8019e98:	e005      	b.n	8019ea6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019e9a:	2303      	movs	r3, #3
 8019e9c:	75fb      	strb	r3, [r7, #23]
    break;
 8019e9e:	e002      	b.n	8019ea6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019ea0:	2303      	movs	r3, #3
 8019ea2:	75fb      	strb	r3, [r7, #23]
    break;
 8019ea4:	bf00      	nop
  }
  return usb_status;
 8019ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3718      	adds	r7, #24
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}

08019eb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b086      	sub	sp, #24
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	60f8      	str	r0, [r7, #12]
 8019eb8:	607a      	str	r2, [r7, #4]
 8019eba:	603b      	str	r3, [r7, #0]
 8019ebc:	460b      	mov	r3, r1
 8019ebe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019ece:	7af9      	ldrb	r1, [r7, #11]
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	687a      	ldr	r2, [r7, #4]
 8019ed4:	f7f1 fc79 	bl	800b7ca <HAL_PCD_EP_Receive>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019edc:	7dbb      	ldrb	r3, [r7, #22]
 8019ede:	2b03      	cmp	r3, #3
 8019ee0:	d816      	bhi.n	8019f10 <USBD_LL_PrepareReceive+0x60>
 8019ee2:	a201      	add	r2, pc, #4	; (adr r2, 8019ee8 <USBD_LL_PrepareReceive+0x38>)
 8019ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ee8:	08019ef9 	.word	0x08019ef9
 8019eec:	08019eff 	.word	0x08019eff
 8019ef0:	08019f05 	.word	0x08019f05
 8019ef4:	08019f0b 	.word	0x08019f0b
    case HAL_OK :
      usb_status = USBD_OK;
 8019ef8:	2300      	movs	r3, #0
 8019efa:	75fb      	strb	r3, [r7, #23]
    break;
 8019efc:	e00b      	b.n	8019f16 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019efe:	2303      	movs	r3, #3
 8019f00:	75fb      	strb	r3, [r7, #23]
    break;
 8019f02:	e008      	b.n	8019f16 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019f04:	2301      	movs	r3, #1
 8019f06:	75fb      	strb	r3, [r7, #23]
    break;
 8019f08:	e005      	b.n	8019f16 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019f0a:	2303      	movs	r3, #3
 8019f0c:	75fb      	strb	r3, [r7, #23]
    break;
 8019f0e:	e002      	b.n	8019f16 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019f10:	2303      	movs	r3, #3
 8019f12:	75fb      	strb	r3, [r7, #23]
    break;
 8019f14:	bf00      	nop
  }
  return usb_status;
 8019f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8019f18:	4618      	mov	r0, r3
 8019f1a:	3718      	adds	r7, #24
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	bd80      	pop	{r7, pc}

08019f20 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b082      	sub	sp, #8
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
 8019f28:	460b      	mov	r3, r1
 8019f2a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019f32:	78fa      	ldrb	r2, [r7, #3]
 8019f34:	4611      	mov	r1, r2
 8019f36:	4618      	mov	r0, r3
 8019f38:	f7f1 fc85 	bl	800b846 <HAL_PCD_EP_GetRxCount>
 8019f3c:	4603      	mov	r3, r0
}
 8019f3e:	4618      	mov	r0, r3
 8019f40:	3708      	adds	r7, #8
 8019f42:	46bd      	mov	sp, r7
 8019f44:	bd80      	pop	{r7, pc}
	...

08019f48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b082      	sub	sp, #8
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	460b      	mov	r3, r1
 8019f52:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019f54:	78fb      	ldrb	r3, [r7, #3]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d002      	beq.n	8019f60 <HAL_PCDEx_LPM_Callback+0x18>
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d01f      	beq.n	8019f9e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019f5e:	e03b      	b.n	8019fd8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6a1b      	ldr	r3, [r3, #32]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d007      	beq.n	8019f78 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019f68:	f000 f854 	bl	801a014 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019f6c:	4b1c      	ldr	r3, [pc, #112]	; (8019fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019f6e:	691b      	ldr	r3, [r3, #16]
 8019f70:	4a1b      	ldr	r2, [pc, #108]	; (8019fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019f72:	f023 0306 	bic.w	r3, r3, #6
 8019f76:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	687a      	ldr	r2, [r7, #4]
 8019f84:	6812      	ldr	r2, [r2, #0]
 8019f86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019f8a:	f023 0301 	bic.w	r3, r3, #1
 8019f8e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019f96:	4618      	mov	r0, r3
 8019f98:	f000 faaa 	bl	801a4f0 <USBD_LL_Resume>
    break;
 8019f9c:	e01c      	b.n	8019fd8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	6812      	ldr	r2, [r2, #0]
 8019fac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019fb0:	f043 0301 	orr.w	r3, r3, #1
 8019fb4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	f000 fa81 	bl	801a4c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	6a1b      	ldr	r3, [r3, #32]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d005      	beq.n	8019fd6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019fca:	4b05      	ldr	r3, [pc, #20]	; (8019fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019fcc:	691b      	ldr	r3, [r3, #16]
 8019fce:	4a04      	ldr	r2, [pc, #16]	; (8019fe0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019fd0:	f043 0306 	orr.w	r3, r3, #6
 8019fd4:	6113      	str	r3, [r2, #16]
    break;
 8019fd6:	bf00      	nop
}
 8019fd8:	bf00      	nop
 8019fda:	3708      	adds	r7, #8
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	bd80      	pop	{r7, pc}
 8019fe0:	e000ed00 	.word	0xe000ed00

08019fe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019fe4:	b480      	push	{r7}
 8019fe6:	b083      	sub	sp, #12
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
  //static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  static uint32_t mem[(sizeof(USBD_CDCMSC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  //static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */

  return mem;
 8019fec:	4b03      	ldr	r3, [pc, #12]	; (8019ffc <USBD_static_malloc+0x18>)
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	370c      	adds	r7, #12
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff8:	4770      	bx	lr
 8019ffa:	bf00      	nop
 8019ffc:	20001bec 	.word	0x20001bec

0801a000 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a000:	b480      	push	{r7}
 801a002:	b083      	sub	sp, #12
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]

}
 801a008:	bf00      	nop
 801a00a:	370c      	adds	r7, #12
 801a00c:	46bd      	mov	sp, r7
 801a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a012:	4770      	bx	lr

0801a014 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a014:	b580      	push	{r7, lr}
 801a016:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a018:	f7eb fec8 	bl	8005dac <SystemClock_Config>
}
 801a01c:	bf00      	nop
 801a01e:	bd80      	pop	{r7, pc}

0801a020 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b086      	sub	sp, #24
 801a024:	af00      	add	r7, sp, #0
 801a026:	60f8      	str	r0, [r7, #12]
 801a028:	60b9      	str	r1, [r7, #8]
 801a02a:	4613      	mov	r3, r2
 801a02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d101      	bne.n	801a038 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801a034:	2303      	movs	r3, #3
 801a036:	e023      	b.n	801a080 <USBD_Init+0x60>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	2200      	movs	r2, #0
 801a03c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserDataCDC = NULL;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	2200      	movs	r2, #0
 801a044:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pdev->pUserDataMSC = NULL;
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	2200      	movs	r2, #0
 801a04c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	2200      	movs	r2, #0
 801a054:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d003      	beq.n	801a066 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	68ba      	ldr	r2, [r7, #8]
 801a062:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	2201      	movs	r2, #1
 801a06a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	79fa      	ldrb	r2, [r7, #7]
 801a072:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801a074:	68f8      	ldr	r0, [r7, #12]
 801a076:	f7ff fce3 	bl	8019a40 <USBD_LL_Init>
 801a07a:	4603      	mov	r3, r0
 801a07c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801a07e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a080:	4618      	mov	r0, r3
 801a082:	3718      	adds	r7, #24
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}

0801a088 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b084      	sub	sp, #16
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a092:	2300      	movs	r3, #0
 801a094:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801a096:	683b      	ldr	r3, [r7, #0]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d101      	bne.n	801a0a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801a09c:	2303      	movs	r3, #3
 801a09e:	e016      	b.n	801a0ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	683a      	ldr	r2, [r7, #0]
 801a0a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d00b      	beq.n	801a0cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0bc:	f107 020e 	add.w	r2, r7, #14
 801a0c0:	4610      	mov	r0, r2
 801a0c2:	4798      	blx	r3
 801a0c4:	4602      	mov	r2, r0
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801a0cc:	2300      	movs	r3, #0
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3710      	adds	r7, #16
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}

0801a0d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a0d6:	b580      	push	{r7, lr}
 801a0d8:	b082      	sub	sp, #8
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801a0de:	6878      	ldr	r0, [r7, #4]
 801a0e0:	f7ff fd04 	bl	8019aec <USBD_LL_Start>
 801a0e4:	4603      	mov	r3, r0
}
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	3708      	adds	r7, #8
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd80      	pop	{r7, pc}

0801a0ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a0ee:	b480      	push	{r7}
 801a0f0:	b083      	sub	sp, #12
 801a0f2:	af00      	add	r7, sp, #0
 801a0f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a0f6:	2300      	movs	r3, #0
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	370c      	adds	r7, #12
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a102:	4770      	bx	lr

0801a104 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b084      	sub	sp, #16
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
 801a10c:	460b      	mov	r3, r1
 801a10e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a110:	2303      	movs	r3, #3
 801a112:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d009      	beq.n	801a132 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	78fa      	ldrb	r2, [r7, #3]
 801a128:	4611      	mov	r1, r2
 801a12a:	6878      	ldr	r0, [r7, #4]
 801a12c:	4798      	blx	r3
 801a12e:	4603      	mov	r3, r0
 801a130:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801a132:	7bfb      	ldrb	r3, [r7, #15]
}
 801a134:	4618      	mov	r0, r3
 801a136:	3710      	adds	r7, #16
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b082      	sub	sp, #8
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	460b      	mov	r3, r1
 801a146:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d007      	beq.n	801a162 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a158:	685b      	ldr	r3, [r3, #4]
 801a15a:	78fa      	ldrb	r2, [r7, #3]
 801a15c:	4611      	mov	r1, r2
 801a15e:	6878      	ldr	r0, [r7, #4]
 801a160:	4798      	blx	r3
  }

  return USBD_OK;
 801a162:	2300      	movs	r3, #0
}
 801a164:	4618      	mov	r0, r3
 801a166:	3708      	adds	r7, #8
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}

0801a16c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b084      	sub	sp, #16
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
 801a174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a17c:	6839      	ldr	r1, [r7, #0]
 801a17e:	4618      	mov	r0, r3
 801a180:	f000 ffba 	bl	801b0f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2201      	movs	r2, #1
 801a188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801a192:	461a      	mov	r2, r3
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a1a0:	f003 031f 	and.w	r3, r3, #31
 801a1a4:	2b02      	cmp	r3, #2
 801a1a6:	d01a      	beq.n	801a1de <USBD_LL_SetupStage+0x72>
 801a1a8:	2b02      	cmp	r3, #2
 801a1aa:	d822      	bhi.n	801a1f2 <USBD_LL_SetupStage+0x86>
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d002      	beq.n	801a1b6 <USBD_LL_SetupStage+0x4a>
 801a1b0:	2b01      	cmp	r3, #1
 801a1b2:	d00a      	beq.n	801a1ca <USBD_LL_SetupStage+0x5e>
 801a1b4:	e01d      	b.n	801a1f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a1bc:	4619      	mov	r1, r3
 801a1be:	6878      	ldr	r0, [r7, #4]
 801a1c0:	f000 fa62 	bl	801a688 <USBD_StdDevReq>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	73fb      	strb	r3, [r7, #15]
      break;
 801a1c8:	e020      	b.n	801a20c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	f000 fac6 	bl	801a764 <USBD_StdItfReq>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	73fb      	strb	r3, [r7, #15]
      break;
 801a1dc:	e016      	b.n	801a20c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a1e4:	4619      	mov	r1, r3
 801a1e6:	6878      	ldr	r0, [r7, #4]
 801a1e8:	f000 fb05 	bl	801a7f6 <USBD_StdEPReq>
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	73fb      	strb	r3, [r7, #15]
      break;
 801a1f0:	e00c      	b.n	801a20c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a1f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a1fc:	b2db      	uxtb	r3, r3
 801a1fe:	4619      	mov	r1, r3
 801a200:	6878      	ldr	r0, [r7, #4]
 801a202:	f7ff fd4f 	bl	8019ca4 <USBD_LL_StallEP>
 801a206:	4603      	mov	r3, r0
 801a208:	73fb      	strb	r3, [r7, #15]
      break;
 801a20a:	bf00      	nop
  }

  return ret;
 801a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a20e:	4618      	mov	r0, r3
 801a210:	3710      	adds	r7, #16
 801a212:	46bd      	mov	sp, r7
 801a214:	bd80      	pop	{r7, pc}

0801a216 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a216:	b580      	push	{r7, lr}
 801a218:	b086      	sub	sp, #24
 801a21a:	af00      	add	r7, sp, #0
 801a21c:	60f8      	str	r0, [r7, #12]
 801a21e:	460b      	mov	r3, r1
 801a220:	607a      	str	r2, [r7, #4]
 801a222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a224:	7afb      	ldrb	r3, [r7, #11]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d138      	bne.n	801a29c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801a230:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a238:	2b03      	cmp	r3, #3
 801a23a:	d14a      	bne.n	801a2d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801a23c:	693b      	ldr	r3, [r7, #16]
 801a23e:	689a      	ldr	r2, [r3, #8]
 801a240:	693b      	ldr	r3, [r7, #16]
 801a242:	68db      	ldr	r3, [r3, #12]
 801a244:	429a      	cmp	r2, r3
 801a246:	d913      	bls.n	801a270 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a248:	693b      	ldr	r3, [r7, #16]
 801a24a:	689a      	ldr	r2, [r3, #8]
 801a24c:	693b      	ldr	r3, [r7, #16]
 801a24e:	68db      	ldr	r3, [r3, #12]
 801a250:	1ad2      	subs	r2, r2, r3
 801a252:	693b      	ldr	r3, [r7, #16]
 801a254:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a256:	693b      	ldr	r3, [r7, #16]
 801a258:	68da      	ldr	r2, [r3, #12]
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	689b      	ldr	r3, [r3, #8]
 801a25e:	4293      	cmp	r3, r2
 801a260:	bf28      	it	cs
 801a262:	4613      	movcs	r3, r2
 801a264:	461a      	mov	r2, r3
 801a266:	6879      	ldr	r1, [r7, #4]
 801a268:	68f8      	ldr	r0, [r7, #12]
 801a26a:	f001 f95b 	bl	801b524 <USBD_CtlContinueRx>
 801a26e:	e030      	b.n	801a2d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a276:	b2db      	uxtb	r3, r3
 801a278:	2b03      	cmp	r3, #3
 801a27a:	d10b      	bne.n	801a294 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a282:	691b      	ldr	r3, [r3, #16]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d005      	beq.n	801a294 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a28e:	691b      	ldr	r3, [r3, #16]
 801a290:	68f8      	ldr	r0, [r7, #12]
 801a292:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a294:	68f8      	ldr	r0, [r7, #12]
 801a296:	f001 f956 	bl	801b546 <USBD_CtlSendStatus>
 801a29a:	e01a      	b.n	801a2d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2a2:	b2db      	uxtb	r3, r3
 801a2a4:	2b03      	cmp	r3, #3
 801a2a6:	d114      	bne.n	801a2d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2ae:	699b      	ldr	r3, [r3, #24]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d00e      	beq.n	801a2d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2ba:	699b      	ldr	r3, [r3, #24]
 801a2bc:	7afa      	ldrb	r2, [r7, #11]
 801a2be:	4611      	mov	r1, r2
 801a2c0:	68f8      	ldr	r0, [r7, #12]
 801a2c2:	4798      	blx	r3
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a2c8:	7dfb      	ldrb	r3, [r7, #23]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d001      	beq.n	801a2d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a2ce:	7dfb      	ldrb	r3, [r7, #23]
 801a2d0:	e000      	b.n	801a2d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a2d2:	2300      	movs	r3, #0
}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	3718      	adds	r7, #24
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}

0801a2dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b086      	sub	sp, #24
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	60f8      	str	r0, [r7, #12]
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	607a      	str	r2, [r7, #4]
 801a2e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a2ea:	7afb      	ldrb	r3, [r7, #11]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d16b      	bne.n	801a3c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	3314      	adds	r3, #20
 801a2f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a2fc:	2b02      	cmp	r3, #2
 801a2fe:	d156      	bne.n	801a3ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a300:	693b      	ldr	r3, [r7, #16]
 801a302:	689a      	ldr	r2, [r3, #8]
 801a304:	693b      	ldr	r3, [r7, #16]
 801a306:	68db      	ldr	r3, [r3, #12]
 801a308:	429a      	cmp	r2, r3
 801a30a:	d914      	bls.n	801a336 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	689a      	ldr	r2, [r3, #8]
 801a310:	693b      	ldr	r3, [r7, #16]
 801a312:	68db      	ldr	r3, [r3, #12]
 801a314:	1ad2      	subs	r2, r2, r3
 801a316:	693b      	ldr	r3, [r7, #16]
 801a318:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a31a:	693b      	ldr	r3, [r7, #16]
 801a31c:	689b      	ldr	r3, [r3, #8]
 801a31e:	461a      	mov	r2, r3
 801a320:	6879      	ldr	r1, [r7, #4]
 801a322:	68f8      	ldr	r0, [r7, #12]
 801a324:	f001 f8d0 	bl	801b4c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a328:	2300      	movs	r3, #0
 801a32a:	2200      	movs	r2, #0
 801a32c:	2100      	movs	r1, #0
 801a32e:	68f8      	ldr	r0, [r7, #12]
 801a330:	f7ff fdbe 	bl	8019eb0 <USBD_LL_PrepareReceive>
 801a334:	e03b      	b.n	801a3ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a336:	693b      	ldr	r3, [r7, #16]
 801a338:	68da      	ldr	r2, [r3, #12]
 801a33a:	693b      	ldr	r3, [r7, #16]
 801a33c:	689b      	ldr	r3, [r3, #8]
 801a33e:	429a      	cmp	r2, r3
 801a340:	d11c      	bne.n	801a37c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	685a      	ldr	r2, [r3, #4]
 801a346:	693b      	ldr	r3, [r7, #16]
 801a348:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a34a:	429a      	cmp	r2, r3
 801a34c:	d316      	bcc.n	801a37c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a34e:	693b      	ldr	r3, [r7, #16]
 801a350:	685a      	ldr	r2, [r3, #4]
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a358:	429a      	cmp	r2, r3
 801a35a:	d20f      	bcs.n	801a37c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a35c:	2200      	movs	r2, #0
 801a35e:	2100      	movs	r1, #0
 801a360:	68f8      	ldr	r0, [r7, #12]
 801a362:	f001 f8b1 	bl	801b4c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	2200      	movs	r2, #0
 801a36a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a36e:	2300      	movs	r3, #0
 801a370:	2200      	movs	r2, #0
 801a372:	2100      	movs	r1, #0
 801a374:	68f8      	ldr	r0, [r7, #12]
 801a376:	f7ff fd9b 	bl	8019eb0 <USBD_LL_PrepareReceive>
 801a37a:	e018      	b.n	801a3ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a382:	b2db      	uxtb	r3, r3
 801a384:	2b03      	cmp	r3, #3
 801a386:	d10b      	bne.n	801a3a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a38e:	68db      	ldr	r3, [r3, #12]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d005      	beq.n	801a3a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a39a:	68db      	ldr	r3, [r3, #12]
 801a39c:	68f8      	ldr	r0, [r7, #12]
 801a39e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a3a0:	2180      	movs	r1, #128	; 0x80
 801a3a2:	68f8      	ldr	r0, [r7, #12]
 801a3a4:	f7ff fc7e 	bl	8019ca4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a3a8:	68f8      	ldr	r0, [r7, #12]
 801a3aa:	f001 f8df 	bl	801b56c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a3b4:	2b01      	cmp	r3, #1
 801a3b6:	d122      	bne.n	801a3fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a3b8:	68f8      	ldr	r0, [r7, #12]
 801a3ba:	f7ff fe98 	bl	801a0ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a3c6:	e01a      	b.n	801a3fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a3ce:	b2db      	uxtb	r3, r3
 801a3d0:	2b03      	cmp	r3, #3
 801a3d2:	d114      	bne.n	801a3fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3da:	695b      	ldr	r3, [r3, #20]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d00e      	beq.n	801a3fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a3e6:	695b      	ldr	r3, [r3, #20]
 801a3e8:	7afa      	ldrb	r2, [r7, #11]
 801a3ea:	4611      	mov	r1, r2
 801a3ec:	68f8      	ldr	r0, [r7, #12]
 801a3ee:	4798      	blx	r3
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a3f4:	7dfb      	ldrb	r3, [r7, #23]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d001      	beq.n	801a3fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a3fa:	7dfb      	ldrb	r3, [r7, #23]
 801a3fc:	e000      	b.n	801a400 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a3fe:	2300      	movs	r3, #0
}
 801a400:	4618      	mov	r0, r3
 801a402:	3718      	adds	r7, #24
 801a404:	46bd      	mov	sp, r7
 801a406:	bd80      	pop	{r7, pc}

0801a408 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	2201      	movs	r2, #1
 801a414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	2200      	movs	r2, #0
 801a41c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2200      	movs	r2, #0
 801a424:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	2200      	movs	r2, #0
 801a42a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a434:	2b00      	cmp	r3, #0
 801a436:	d101      	bne.n	801a43c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a438:	2303      	movs	r3, #3
 801a43a:	e02f      	b.n	801a49c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassDataCDC != NULL)
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a442:	2b00      	cmp	r3, #0
 801a444:	d00f      	beq.n	801a466 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a44c:	685b      	ldr	r3, [r3, #4]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d009      	beq.n	801a466 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a458:	685b      	ldr	r3, [r3, #4]
 801a45a:	687a      	ldr	r2, [r7, #4]
 801a45c:	6852      	ldr	r2, [r2, #4]
 801a45e:	b2d2      	uxtb	r2, r2
 801a460:	4611      	mov	r1, r2
 801a462:	6878      	ldr	r0, [r7, #4]
 801a464:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a466:	2340      	movs	r3, #64	; 0x40
 801a468:	2200      	movs	r2, #0
 801a46a:	2100      	movs	r1, #0
 801a46c:	6878      	ldr	r0, [r7, #4]
 801a46e:	f7ff fb6f 	bl	8019b50 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	2201      	movs	r2, #1
 801a476:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	2240      	movs	r2, #64	; 0x40
 801a47e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a482:	2340      	movs	r3, #64	; 0x40
 801a484:	2200      	movs	r2, #0
 801a486:	2180      	movs	r1, #128	; 0x80
 801a488:	6878      	ldr	r0, [r7, #4]
 801a48a:	f7ff fb61 	bl	8019b50 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	2201      	movs	r2, #1
 801a492:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	2240      	movs	r2, #64	; 0x40
 801a498:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a49a:	2300      	movs	r3, #0
}
 801a49c:	4618      	mov	r0, r3
 801a49e:	3708      	adds	r7, #8
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}

0801a4a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a4a4:	b480      	push	{r7}
 801a4a6:	b083      	sub	sp, #12
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	6078      	str	r0, [r7, #4]
 801a4ac:	460b      	mov	r3, r1
 801a4ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	78fa      	ldrb	r2, [r7, #3]
 801a4b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a4b6:	2300      	movs	r3, #0
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	370c      	adds	r7, #12
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c2:	4770      	bx	lr

0801a4c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a4c4:	b480      	push	{r7}
 801a4c6:	b083      	sub	sp, #12
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4d2:	b2da      	uxtb	r2, r3
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	2204      	movs	r2, #4
 801a4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a4e2:	2300      	movs	r3, #0
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	370c      	adds	r7, #12
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ee:	4770      	bx	lr

0801a4f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a4f0:	b480      	push	{r7}
 801a4f2:	b083      	sub	sp, #12
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4fe:	b2db      	uxtb	r3, r3
 801a500:	2b04      	cmp	r3, #4
 801a502:	d106      	bne.n	801a512 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a50a:	b2da      	uxtb	r2, r3
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a512:	2300      	movs	r3, #0
}
 801a514:	4618      	mov	r0, r3
 801a516:	370c      	adds	r7, #12
 801a518:	46bd      	mov	sp, r7
 801a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51e:	4770      	bx	lr

0801a520 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b082      	sub	sp, #8
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d101      	bne.n	801a536 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a532:	2303      	movs	r3, #3
 801a534:	e012      	b.n	801a55c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a53c:	b2db      	uxtb	r3, r3
 801a53e:	2b03      	cmp	r3, #3
 801a540:	d10b      	bne.n	801a55a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a548:	69db      	ldr	r3, [r3, #28]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d005      	beq.n	801a55a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a554:	69db      	ldr	r3, [r3, #28]
 801a556:	6878      	ldr	r0, [r7, #4]
 801a558:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a55a:	2300      	movs	r3, #0
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3708      	adds	r7, #8
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}

0801a564 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
 801a56c:	460b      	mov	r3, r1
 801a56e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a576:	2b00      	cmp	r3, #0
 801a578:	d101      	bne.n	801a57e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a57a:	2303      	movs	r3, #3
 801a57c:	e014      	b.n	801a5a8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a584:	b2db      	uxtb	r3, r3
 801a586:	2b03      	cmp	r3, #3
 801a588:	d10d      	bne.n	801a5a6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a590:	6a1b      	ldr	r3, [r3, #32]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d007      	beq.n	801a5a6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a59c:	6a1b      	ldr	r3, [r3, #32]
 801a59e:	78fa      	ldrb	r2, [r7, #3]
 801a5a0:	4611      	mov	r1, r2
 801a5a2:	6878      	ldr	r0, [r7, #4]
 801a5a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a5a6:	2300      	movs	r3, #0
}
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	3708      	adds	r7, #8
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}

0801a5b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
 801a5b8:	460b      	mov	r3, r1
 801a5ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d101      	bne.n	801a5ca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a5c6:	2303      	movs	r3, #3
 801a5c8:	e014      	b.n	801a5f4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	2b03      	cmp	r3, #3
 801a5d4:	d10d      	bne.n	801a5f2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d007      	beq.n	801a5f2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5ea:	78fa      	ldrb	r2, [r7, #3]
 801a5ec:	4611      	mov	r1, r2
 801a5ee:	6878      	ldr	r0, [r7, #4]
 801a5f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a5f2:	2300      	movs	r3, #0
}
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	3708      	adds	r7, #8
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}

0801a5fc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a5fc:	b480      	push	{r7}
 801a5fe:	b083      	sub	sp, #12
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a604:	2300      	movs	r3, #0
}
 801a606:	4618      	mov	r0, r3
 801a608:	370c      	adds	r7, #12
 801a60a:	46bd      	mov	sp, r7
 801a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a610:	4770      	bx	lr

0801a612 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a612:	b580      	push	{r7, lr}
 801a614:	b082      	sub	sp, #8
 801a616:	af00      	add	r7, sp, #0
 801a618:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	2201      	movs	r2, #1
 801a61e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d009      	beq.n	801a640 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	687a      	ldr	r2, [r7, #4]
 801a636:	6852      	ldr	r2, [r2, #4]
 801a638:	b2d2      	uxtb	r2, r2
 801a63a:	4611      	mov	r1, r2
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	4798      	blx	r3
  }

  return USBD_OK;
 801a640:	2300      	movs	r3, #0
}
 801a642:	4618      	mov	r0, r3
 801a644:	3708      	adds	r7, #8
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}

0801a64a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a64a:	b480      	push	{r7}
 801a64c:	b087      	sub	sp, #28
 801a64e:	af00      	add	r7, sp, #0
 801a650:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	781b      	ldrb	r3, [r3, #0]
 801a65a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	3301      	adds	r3, #1
 801a660:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	781b      	ldrb	r3, [r3, #0]
 801a666:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a668:	8a3b      	ldrh	r3, [r7, #16]
 801a66a:	021b      	lsls	r3, r3, #8
 801a66c:	b21a      	sxth	r2, r3
 801a66e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a672:	4313      	orrs	r3, r2
 801a674:	b21b      	sxth	r3, r3
 801a676:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a678:	89fb      	ldrh	r3, [r7, #14]
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	371c      	adds	r7, #28
 801a67e:	46bd      	mov	sp, r7
 801a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a684:	4770      	bx	lr
	...

0801a688 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b084      	sub	sp, #16
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
 801a690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a692:	2300      	movs	r3, #0
 801a694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	781b      	ldrb	r3, [r3, #0]
 801a69a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a69e:	2b40      	cmp	r3, #64	; 0x40
 801a6a0:	d005      	beq.n	801a6ae <USBD_StdDevReq+0x26>
 801a6a2:	2b40      	cmp	r3, #64	; 0x40
 801a6a4:	d853      	bhi.n	801a74e <USBD_StdDevReq+0xc6>
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d00b      	beq.n	801a6c2 <USBD_StdDevReq+0x3a>
 801a6aa:	2b20      	cmp	r3, #32
 801a6ac:	d14f      	bne.n	801a74e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a6b4:	689b      	ldr	r3, [r3, #8]
 801a6b6:	6839      	ldr	r1, [r7, #0]
 801a6b8:	6878      	ldr	r0, [r7, #4]
 801a6ba:	4798      	blx	r3
 801a6bc:	4603      	mov	r3, r0
 801a6be:	73fb      	strb	r3, [r7, #15]
      break;
 801a6c0:	e04a      	b.n	801a758 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	785b      	ldrb	r3, [r3, #1]
 801a6c6:	2b09      	cmp	r3, #9
 801a6c8:	d83b      	bhi.n	801a742 <USBD_StdDevReq+0xba>
 801a6ca:	a201      	add	r2, pc, #4	; (adr r2, 801a6d0 <USBD_StdDevReq+0x48>)
 801a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6d0:	0801a725 	.word	0x0801a725
 801a6d4:	0801a739 	.word	0x0801a739
 801a6d8:	0801a743 	.word	0x0801a743
 801a6dc:	0801a72f 	.word	0x0801a72f
 801a6e0:	0801a743 	.word	0x0801a743
 801a6e4:	0801a703 	.word	0x0801a703
 801a6e8:	0801a6f9 	.word	0x0801a6f9
 801a6ec:	0801a743 	.word	0x0801a743
 801a6f0:	0801a71b 	.word	0x0801a71b
 801a6f4:	0801a70d 	.word	0x0801a70d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a6f8:	6839      	ldr	r1, [r7, #0]
 801a6fa:	6878      	ldr	r0, [r7, #4]
 801a6fc:	f000 f9de 	bl	801aabc <USBD_GetDescriptor>
          break;
 801a700:	e024      	b.n	801a74c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a702:	6839      	ldr	r1, [r7, #0]
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	f000 fb6d 	bl	801ade4 <USBD_SetAddress>
          break;
 801a70a:	e01f      	b.n	801a74c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a70c:	6839      	ldr	r1, [r7, #0]
 801a70e:	6878      	ldr	r0, [r7, #4]
 801a710:	f000 fbac 	bl	801ae6c <USBD_SetConfig>
 801a714:	4603      	mov	r3, r0
 801a716:	73fb      	strb	r3, [r7, #15]
          break;
 801a718:	e018      	b.n	801a74c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a71a:	6839      	ldr	r1, [r7, #0]
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f000 fc4b 	bl	801afb8 <USBD_GetConfig>
          break;
 801a722:	e013      	b.n	801a74c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a724:	6839      	ldr	r1, [r7, #0]
 801a726:	6878      	ldr	r0, [r7, #4]
 801a728:	f000 fc7c 	bl	801b024 <USBD_GetStatus>
          break;
 801a72c:	e00e      	b.n	801a74c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a72e:	6839      	ldr	r1, [r7, #0]
 801a730:	6878      	ldr	r0, [r7, #4]
 801a732:	f000 fcab 	bl	801b08c <USBD_SetFeature>
          break;
 801a736:	e009      	b.n	801a74c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a738:	6839      	ldr	r1, [r7, #0]
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f000 fcba 	bl	801b0b4 <USBD_ClrFeature>
          break;
 801a740:	e004      	b.n	801a74c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a742:	6839      	ldr	r1, [r7, #0]
 801a744:	6878      	ldr	r0, [r7, #4]
 801a746:	f000 fd11 	bl	801b16c <USBD_CtlError>
          break;
 801a74a:	bf00      	nop
      }
      break;
 801a74c:	e004      	b.n	801a758 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a74e:	6839      	ldr	r1, [r7, #0]
 801a750:	6878      	ldr	r0, [r7, #4]
 801a752:	f000 fd0b 	bl	801b16c <USBD_CtlError>
      break;
 801a756:	bf00      	nop
  }

  return ret;
 801a758:	7bfb      	ldrb	r3, [r7, #15]
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3710      	adds	r7, #16
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}
 801a762:	bf00      	nop

0801a764 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b084      	sub	sp, #16
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a76e:	2300      	movs	r3, #0
 801a770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a772:	683b      	ldr	r3, [r7, #0]
 801a774:	781b      	ldrb	r3, [r3, #0]
 801a776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a77a:	2b40      	cmp	r3, #64	; 0x40
 801a77c:	d005      	beq.n	801a78a <USBD_StdItfReq+0x26>
 801a77e:	2b40      	cmp	r3, #64	; 0x40
 801a780:	d82f      	bhi.n	801a7e2 <USBD_StdItfReq+0x7e>
 801a782:	2b00      	cmp	r3, #0
 801a784:	d001      	beq.n	801a78a <USBD_StdItfReq+0x26>
 801a786:	2b20      	cmp	r3, #32
 801a788:	d12b      	bne.n	801a7e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a790:	b2db      	uxtb	r3, r3
 801a792:	3b01      	subs	r3, #1
 801a794:	2b02      	cmp	r3, #2
 801a796:	d81d      	bhi.n	801a7d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a798:	683b      	ldr	r3, [r7, #0]
 801a79a:	889b      	ldrh	r3, [r3, #4]
 801a79c:	b2db      	uxtb	r3, r3
 801a79e:	2b03      	cmp	r3, #3
 801a7a0:	d813      	bhi.n	801a7ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a7a8:	689b      	ldr	r3, [r3, #8]
 801a7aa:	6839      	ldr	r1, [r7, #0]
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	4798      	blx	r3
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a7b4:	683b      	ldr	r3, [r7, #0]
 801a7b6:	88db      	ldrh	r3, [r3, #6]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d110      	bne.n	801a7de <USBD_StdItfReq+0x7a>
 801a7bc:	7bfb      	ldrb	r3, [r7, #15]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d10d      	bne.n	801a7de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a7c2:	6878      	ldr	r0, [r7, #4]
 801a7c4:	f000 febf 	bl	801b546 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a7c8:	e009      	b.n	801a7de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a7ca:	6839      	ldr	r1, [r7, #0]
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f000 fccd 	bl	801b16c <USBD_CtlError>
          break;
 801a7d2:	e004      	b.n	801a7de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a7d4:	6839      	ldr	r1, [r7, #0]
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	f000 fcc8 	bl	801b16c <USBD_CtlError>
          break;
 801a7dc:	e000      	b.n	801a7e0 <USBD_StdItfReq+0x7c>
          break;
 801a7de:	bf00      	nop
      }
      break;
 801a7e0:	e004      	b.n	801a7ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a7e2:	6839      	ldr	r1, [r7, #0]
 801a7e4:	6878      	ldr	r0, [r7, #4]
 801a7e6:	f000 fcc1 	bl	801b16c <USBD_CtlError>
      break;
 801a7ea:	bf00      	nop
  }

  return ret;
 801a7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	3710      	adds	r7, #16
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	bd80      	pop	{r7, pc}

0801a7f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a7f6:	b580      	push	{r7, lr}
 801a7f8:	b084      	sub	sp, #16
 801a7fa:	af00      	add	r7, sp, #0
 801a7fc:	6078      	str	r0, [r7, #4]
 801a7fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a800:	2300      	movs	r3, #0
 801a802:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	889b      	ldrh	r3, [r3, #4]
 801a808:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	781b      	ldrb	r3, [r3, #0]
 801a80e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a812:	2b40      	cmp	r3, #64	; 0x40
 801a814:	d007      	beq.n	801a826 <USBD_StdEPReq+0x30>
 801a816:	2b40      	cmp	r3, #64	; 0x40
 801a818:	f200 8145 	bhi.w	801aaa6 <USBD_StdEPReq+0x2b0>
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d00c      	beq.n	801a83a <USBD_StdEPReq+0x44>
 801a820:	2b20      	cmp	r3, #32
 801a822:	f040 8140 	bne.w	801aaa6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a82c:	689b      	ldr	r3, [r3, #8]
 801a82e:	6839      	ldr	r1, [r7, #0]
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	4798      	blx	r3
 801a834:	4603      	mov	r3, r0
 801a836:	73fb      	strb	r3, [r7, #15]
      break;
 801a838:	e13a      	b.n	801aab0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	785b      	ldrb	r3, [r3, #1]
 801a83e:	2b03      	cmp	r3, #3
 801a840:	d007      	beq.n	801a852 <USBD_StdEPReq+0x5c>
 801a842:	2b03      	cmp	r3, #3
 801a844:	f300 8129 	bgt.w	801aa9a <USBD_StdEPReq+0x2a4>
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d07f      	beq.n	801a94c <USBD_StdEPReq+0x156>
 801a84c:	2b01      	cmp	r3, #1
 801a84e:	d03c      	beq.n	801a8ca <USBD_StdEPReq+0xd4>
 801a850:	e123      	b.n	801aa9a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a858:	b2db      	uxtb	r3, r3
 801a85a:	2b02      	cmp	r3, #2
 801a85c:	d002      	beq.n	801a864 <USBD_StdEPReq+0x6e>
 801a85e:	2b03      	cmp	r3, #3
 801a860:	d016      	beq.n	801a890 <USBD_StdEPReq+0x9a>
 801a862:	e02c      	b.n	801a8be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a864:	7bbb      	ldrb	r3, [r7, #14]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d00d      	beq.n	801a886 <USBD_StdEPReq+0x90>
 801a86a:	7bbb      	ldrb	r3, [r7, #14]
 801a86c:	2b80      	cmp	r3, #128	; 0x80
 801a86e:	d00a      	beq.n	801a886 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a870:	7bbb      	ldrb	r3, [r7, #14]
 801a872:	4619      	mov	r1, r3
 801a874:	6878      	ldr	r0, [r7, #4]
 801a876:	f7ff fa15 	bl	8019ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a87a:	2180      	movs	r1, #128	; 0x80
 801a87c:	6878      	ldr	r0, [r7, #4]
 801a87e:	f7ff fa11 	bl	8019ca4 <USBD_LL_StallEP>
 801a882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a884:	e020      	b.n	801a8c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a886:	6839      	ldr	r1, [r7, #0]
 801a888:	6878      	ldr	r0, [r7, #4]
 801a88a:	f000 fc6f 	bl	801b16c <USBD_CtlError>
              break;
 801a88e:	e01b      	b.n	801a8c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a890:	683b      	ldr	r3, [r7, #0]
 801a892:	885b      	ldrh	r3, [r3, #2]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d10e      	bne.n	801a8b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a898:	7bbb      	ldrb	r3, [r7, #14]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d00b      	beq.n	801a8b6 <USBD_StdEPReq+0xc0>
 801a89e:	7bbb      	ldrb	r3, [r7, #14]
 801a8a0:	2b80      	cmp	r3, #128	; 0x80
 801a8a2:	d008      	beq.n	801a8b6 <USBD_StdEPReq+0xc0>
 801a8a4:	683b      	ldr	r3, [r7, #0]
 801a8a6:	88db      	ldrh	r3, [r3, #6]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d104      	bne.n	801a8b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a8ac:	7bbb      	ldrb	r3, [r7, #14]
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	6878      	ldr	r0, [r7, #4]
 801a8b2:	f7ff f9f7 	bl	8019ca4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a8b6:	6878      	ldr	r0, [r7, #4]
 801a8b8:	f000 fe45 	bl	801b546 <USBD_CtlSendStatus>

              break;
 801a8bc:	e004      	b.n	801a8c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a8be:	6839      	ldr	r1, [r7, #0]
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f000 fc53 	bl	801b16c <USBD_CtlError>
              break;
 801a8c6:	bf00      	nop
          }
          break;
 801a8c8:	e0ec      	b.n	801aaa4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a8d0:	b2db      	uxtb	r3, r3
 801a8d2:	2b02      	cmp	r3, #2
 801a8d4:	d002      	beq.n	801a8dc <USBD_StdEPReq+0xe6>
 801a8d6:	2b03      	cmp	r3, #3
 801a8d8:	d016      	beq.n	801a908 <USBD_StdEPReq+0x112>
 801a8da:	e030      	b.n	801a93e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a8dc:	7bbb      	ldrb	r3, [r7, #14]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d00d      	beq.n	801a8fe <USBD_StdEPReq+0x108>
 801a8e2:	7bbb      	ldrb	r3, [r7, #14]
 801a8e4:	2b80      	cmp	r3, #128	; 0x80
 801a8e6:	d00a      	beq.n	801a8fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a8e8:	7bbb      	ldrb	r3, [r7, #14]
 801a8ea:	4619      	mov	r1, r3
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f7ff f9d9 	bl	8019ca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a8f2:	2180      	movs	r1, #128	; 0x80
 801a8f4:	6878      	ldr	r0, [r7, #4]
 801a8f6:	f7ff f9d5 	bl	8019ca4 <USBD_LL_StallEP>
 801a8fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a8fc:	e025      	b.n	801a94a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a8fe:	6839      	ldr	r1, [r7, #0]
 801a900:	6878      	ldr	r0, [r7, #4]
 801a902:	f000 fc33 	bl	801b16c <USBD_CtlError>
              break;
 801a906:	e020      	b.n	801a94a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a908:	683b      	ldr	r3, [r7, #0]
 801a90a:	885b      	ldrh	r3, [r3, #2]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d11b      	bne.n	801a948 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a910:	7bbb      	ldrb	r3, [r7, #14]
 801a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a916:	2b00      	cmp	r3, #0
 801a918:	d004      	beq.n	801a924 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a91a:	7bbb      	ldrb	r3, [r7, #14]
 801a91c:	4619      	mov	r1, r3
 801a91e:	6878      	ldr	r0, [r7, #4]
 801a920:	f7ff f9f6 	bl	8019d10 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a924:	6878      	ldr	r0, [r7, #4]
 801a926:	f000 fe0e 	bl	801b546 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a930:	689b      	ldr	r3, [r3, #8]
 801a932:	6839      	ldr	r1, [r7, #0]
 801a934:	6878      	ldr	r0, [r7, #4]
 801a936:	4798      	blx	r3
 801a938:	4603      	mov	r3, r0
 801a93a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a93c:	e004      	b.n	801a948 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a93e:	6839      	ldr	r1, [r7, #0]
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	f000 fc13 	bl	801b16c <USBD_CtlError>
              break;
 801a946:	e000      	b.n	801a94a <USBD_StdEPReq+0x154>
              break;
 801a948:	bf00      	nop
          }
          break;
 801a94a:	e0ab      	b.n	801aaa4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a952:	b2db      	uxtb	r3, r3
 801a954:	2b02      	cmp	r3, #2
 801a956:	d002      	beq.n	801a95e <USBD_StdEPReq+0x168>
 801a958:	2b03      	cmp	r3, #3
 801a95a:	d032      	beq.n	801a9c2 <USBD_StdEPReq+0x1cc>
 801a95c:	e097      	b.n	801aa8e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a95e:	7bbb      	ldrb	r3, [r7, #14]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d007      	beq.n	801a974 <USBD_StdEPReq+0x17e>
 801a964:	7bbb      	ldrb	r3, [r7, #14]
 801a966:	2b80      	cmp	r3, #128	; 0x80
 801a968:	d004      	beq.n	801a974 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a96a:	6839      	ldr	r1, [r7, #0]
 801a96c:	6878      	ldr	r0, [r7, #4]
 801a96e:	f000 fbfd 	bl	801b16c <USBD_CtlError>
                break;
 801a972:	e091      	b.n	801aa98 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	da0b      	bge.n	801a994 <USBD_StdEPReq+0x19e>
 801a97c:	7bbb      	ldrb	r3, [r7, #14]
 801a97e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a982:	4613      	mov	r3, r2
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	4413      	add	r3, r2
 801a988:	009b      	lsls	r3, r3, #2
 801a98a:	3310      	adds	r3, #16
 801a98c:	687a      	ldr	r2, [r7, #4]
 801a98e:	4413      	add	r3, r2
 801a990:	3304      	adds	r3, #4
 801a992:	e00b      	b.n	801a9ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a994:	7bbb      	ldrb	r3, [r7, #14]
 801a996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a99a:	4613      	mov	r3, r2
 801a99c:	009b      	lsls	r3, r3, #2
 801a99e:	4413      	add	r3, r2
 801a9a0:	009b      	lsls	r3, r3, #2
 801a9a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a9a6:	687a      	ldr	r2, [r7, #4]
 801a9a8:	4413      	add	r3, r2
 801a9aa:	3304      	adds	r3, #4
 801a9ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a9ae:	68bb      	ldr	r3, [r7, #8]
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	2202      	movs	r2, #2
 801a9b8:	4619      	mov	r1, r3
 801a9ba:	6878      	ldr	r0, [r7, #4]
 801a9bc:	f000 fd69 	bl	801b492 <USBD_CtlSendData>
              break;
 801a9c0:	e06a      	b.n	801aa98 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a9c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	da11      	bge.n	801a9ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a9ca:	7bbb      	ldrb	r3, [r7, #14]
 801a9cc:	f003 020f 	and.w	r2, r3, #15
 801a9d0:	6879      	ldr	r1, [r7, #4]
 801a9d2:	4613      	mov	r3, r2
 801a9d4:	009b      	lsls	r3, r3, #2
 801a9d6:	4413      	add	r3, r2
 801a9d8:	009b      	lsls	r3, r3, #2
 801a9da:	440b      	add	r3, r1
 801a9dc:	3324      	adds	r3, #36	; 0x24
 801a9de:	881b      	ldrh	r3, [r3, #0]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d117      	bne.n	801aa14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a9e4:	6839      	ldr	r1, [r7, #0]
 801a9e6:	6878      	ldr	r0, [r7, #4]
 801a9e8:	f000 fbc0 	bl	801b16c <USBD_CtlError>
                  break;
 801a9ec:	e054      	b.n	801aa98 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a9ee:	7bbb      	ldrb	r3, [r7, #14]
 801a9f0:	f003 020f 	and.w	r2, r3, #15
 801a9f4:	6879      	ldr	r1, [r7, #4]
 801a9f6:	4613      	mov	r3, r2
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	4413      	add	r3, r2
 801a9fc:	009b      	lsls	r3, r3, #2
 801a9fe:	440b      	add	r3, r1
 801aa00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d104      	bne.n	801aa14 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801aa0a:	6839      	ldr	r1, [r7, #0]
 801aa0c:	6878      	ldr	r0, [r7, #4]
 801aa0e:	f000 fbad 	bl	801b16c <USBD_CtlError>
                  break;
 801aa12:	e041      	b.n	801aa98 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aa14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	da0b      	bge.n	801aa34 <USBD_StdEPReq+0x23e>
 801aa1c:	7bbb      	ldrb	r3, [r7, #14]
 801aa1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801aa22:	4613      	mov	r3, r2
 801aa24:	009b      	lsls	r3, r3, #2
 801aa26:	4413      	add	r3, r2
 801aa28:	009b      	lsls	r3, r3, #2
 801aa2a:	3310      	adds	r3, #16
 801aa2c:	687a      	ldr	r2, [r7, #4]
 801aa2e:	4413      	add	r3, r2
 801aa30:	3304      	adds	r3, #4
 801aa32:	e00b      	b.n	801aa4c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801aa34:	7bbb      	ldrb	r3, [r7, #14]
 801aa36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aa3a:	4613      	mov	r3, r2
 801aa3c:	009b      	lsls	r3, r3, #2
 801aa3e:	4413      	add	r3, r2
 801aa40:	009b      	lsls	r3, r3, #2
 801aa42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801aa46:	687a      	ldr	r2, [r7, #4]
 801aa48:	4413      	add	r3, r2
 801aa4a:	3304      	adds	r3, #4
 801aa4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801aa4e:	7bbb      	ldrb	r3, [r7, #14]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d002      	beq.n	801aa5a <USBD_StdEPReq+0x264>
 801aa54:	7bbb      	ldrb	r3, [r7, #14]
 801aa56:	2b80      	cmp	r3, #128	; 0x80
 801aa58:	d103      	bne.n	801aa62 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801aa5a:	68bb      	ldr	r3, [r7, #8]
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	601a      	str	r2, [r3, #0]
 801aa60:	e00e      	b.n	801aa80 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801aa62:	7bbb      	ldrb	r3, [r7, #14]
 801aa64:	4619      	mov	r1, r3
 801aa66:	6878      	ldr	r0, [r7, #4]
 801aa68:	f7ff f988 	bl	8019d7c <USBD_LL_IsStallEP>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d003      	beq.n	801aa7a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801aa72:	68bb      	ldr	r3, [r7, #8]
 801aa74:	2201      	movs	r2, #1
 801aa76:	601a      	str	r2, [r3, #0]
 801aa78:	e002      	b.n	801aa80 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	2202      	movs	r2, #2
 801aa84:	4619      	mov	r1, r3
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	f000 fd03 	bl	801b492 <USBD_CtlSendData>
              break;
 801aa8c:	e004      	b.n	801aa98 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801aa8e:	6839      	ldr	r1, [r7, #0]
 801aa90:	6878      	ldr	r0, [r7, #4]
 801aa92:	f000 fb6b 	bl	801b16c <USBD_CtlError>
              break;
 801aa96:	bf00      	nop
          }
          break;
 801aa98:	e004      	b.n	801aaa4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801aa9a:	6839      	ldr	r1, [r7, #0]
 801aa9c:	6878      	ldr	r0, [r7, #4]
 801aa9e:	f000 fb65 	bl	801b16c <USBD_CtlError>
          break;
 801aaa2:	bf00      	nop
      }
      break;
 801aaa4:	e004      	b.n	801aab0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801aaa6:	6839      	ldr	r1, [r7, #0]
 801aaa8:	6878      	ldr	r0, [r7, #4]
 801aaaa:	f000 fb5f 	bl	801b16c <USBD_CtlError>
      break;
 801aaae:	bf00      	nop
  }

  return ret;
 801aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3710      	adds	r7, #16
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
	...

0801aabc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b084      	sub	sp, #16
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801aac6:	2300      	movs	r3, #0
 801aac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801aaca:	2300      	movs	r3, #0
 801aacc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801aace:	2300      	movs	r3, #0
 801aad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	885b      	ldrh	r3, [r3, #2]
 801aad6:	0a1b      	lsrs	r3, r3, #8
 801aad8:	b29b      	uxth	r3, r3
 801aada:	3b01      	subs	r3, #1
 801aadc:	2b0e      	cmp	r3, #14
 801aade:	f200 8152 	bhi.w	801ad86 <USBD_GetDescriptor+0x2ca>
 801aae2:	a201      	add	r2, pc, #4	; (adr r2, 801aae8 <USBD_GetDescriptor+0x2c>)
 801aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aae8:	0801ab59 	.word	0x0801ab59
 801aaec:	0801ab71 	.word	0x0801ab71
 801aaf0:	0801abb1 	.word	0x0801abb1
 801aaf4:	0801ad87 	.word	0x0801ad87
 801aaf8:	0801ad87 	.word	0x0801ad87
 801aafc:	0801ad27 	.word	0x0801ad27
 801ab00:	0801ad53 	.word	0x0801ad53
 801ab04:	0801ad87 	.word	0x0801ad87
 801ab08:	0801ad87 	.word	0x0801ad87
 801ab0c:	0801ad87 	.word	0x0801ad87
 801ab10:	0801ad87 	.word	0x0801ad87
 801ab14:	0801ad87 	.word	0x0801ad87
 801ab18:	0801ad87 	.word	0x0801ad87
 801ab1c:	0801ad87 	.word	0x0801ad87
 801ab20:	0801ab25 	.word	0x0801ab25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab2a:	69db      	ldr	r3, [r3, #28]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d00b      	beq.n	801ab48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab36:	69db      	ldr	r3, [r3, #28]
 801ab38:	687a      	ldr	r2, [r7, #4]
 801ab3a:	7c12      	ldrb	r2, [r2, #16]
 801ab3c:	f107 0108 	add.w	r1, r7, #8
 801ab40:	4610      	mov	r0, r2
 801ab42:	4798      	blx	r3
 801ab44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ab46:	e126      	b.n	801ad96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ab48:	6839      	ldr	r1, [r7, #0]
 801ab4a:	6878      	ldr	r0, [r7, #4]
 801ab4c:	f000 fb0e 	bl	801b16c <USBD_CtlError>
        err++;
 801ab50:	7afb      	ldrb	r3, [r7, #11]
 801ab52:	3301      	adds	r3, #1
 801ab54:	72fb      	strb	r3, [r7, #11]
      break;
 801ab56:	e11e      	b.n	801ad96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	687a      	ldr	r2, [r7, #4]
 801ab62:	7c12      	ldrb	r2, [r2, #16]
 801ab64:	f107 0108 	add.w	r1, r7, #8
 801ab68:	4610      	mov	r0, r2
 801ab6a:	4798      	blx	r3
 801ab6c:	60f8      	str	r0, [r7, #12]
      break;
 801ab6e:	e112      	b.n	801ad96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	7c1b      	ldrb	r3, [r3, #16]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d10d      	bne.n	801ab94 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab80:	f107 0208 	add.w	r2, r7, #8
 801ab84:	4610      	mov	r0, r2
 801ab86:	4798      	blx	r3
 801ab88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	3301      	adds	r3, #1
 801ab8e:	2202      	movs	r2, #2
 801ab90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ab92:	e100      	b.n	801ad96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab9c:	f107 0208 	add.w	r2, r7, #8
 801aba0:	4610      	mov	r0, r2
 801aba2:	4798      	blx	r3
 801aba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	3301      	adds	r3, #1
 801abaa:	2202      	movs	r2, #2
 801abac:	701a      	strb	r2, [r3, #0]
      break;
 801abae:	e0f2      	b.n	801ad96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801abb0:	683b      	ldr	r3, [r7, #0]
 801abb2:	885b      	ldrh	r3, [r3, #2]
 801abb4:	b2db      	uxtb	r3, r3
 801abb6:	2b05      	cmp	r3, #5
 801abb8:	f200 80ac 	bhi.w	801ad14 <USBD_GetDescriptor+0x258>
 801abbc:	a201      	add	r2, pc, #4	; (adr r2, 801abc4 <USBD_GetDescriptor+0x108>)
 801abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abc2:	bf00      	nop
 801abc4:	0801abdd 	.word	0x0801abdd
 801abc8:	0801ac11 	.word	0x0801ac11
 801abcc:	0801ac45 	.word	0x0801ac45
 801abd0:	0801ac79 	.word	0x0801ac79
 801abd4:	0801acad 	.word	0x0801acad
 801abd8:	0801ace1 	.word	0x0801ace1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abe2:	685b      	ldr	r3, [r3, #4]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d00b      	beq.n	801ac00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	687a      	ldr	r2, [r7, #4]
 801abf2:	7c12      	ldrb	r2, [r2, #16]
 801abf4:	f107 0108 	add.w	r1, r7, #8
 801abf8:	4610      	mov	r0, r2
 801abfa:	4798      	blx	r3
 801abfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801abfe:	e091      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ac00:	6839      	ldr	r1, [r7, #0]
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f000 fab2 	bl	801b16c <USBD_CtlError>
            err++;
 801ac08:	7afb      	ldrb	r3, [r7, #11]
 801ac0a:	3301      	adds	r3, #1
 801ac0c:	72fb      	strb	r3, [r7, #11]
          break;
 801ac0e:	e089      	b.n	801ad24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac16:	689b      	ldr	r3, [r3, #8]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d00b      	beq.n	801ac34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac22:	689b      	ldr	r3, [r3, #8]
 801ac24:	687a      	ldr	r2, [r7, #4]
 801ac26:	7c12      	ldrb	r2, [r2, #16]
 801ac28:	f107 0108 	add.w	r1, r7, #8
 801ac2c:	4610      	mov	r0, r2
 801ac2e:	4798      	blx	r3
 801ac30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac32:	e077      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ac34:	6839      	ldr	r1, [r7, #0]
 801ac36:	6878      	ldr	r0, [r7, #4]
 801ac38:	f000 fa98 	bl	801b16c <USBD_CtlError>
            err++;
 801ac3c:	7afb      	ldrb	r3, [r7, #11]
 801ac3e:	3301      	adds	r3, #1
 801ac40:	72fb      	strb	r3, [r7, #11]
          break;
 801ac42:	e06f      	b.n	801ad24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac4a:	68db      	ldr	r3, [r3, #12]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d00b      	beq.n	801ac68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac56:	68db      	ldr	r3, [r3, #12]
 801ac58:	687a      	ldr	r2, [r7, #4]
 801ac5a:	7c12      	ldrb	r2, [r2, #16]
 801ac5c:	f107 0108 	add.w	r1, r7, #8
 801ac60:	4610      	mov	r0, r2
 801ac62:	4798      	blx	r3
 801ac64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac66:	e05d      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ac68:	6839      	ldr	r1, [r7, #0]
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f000 fa7e 	bl	801b16c <USBD_CtlError>
            err++;
 801ac70:	7afb      	ldrb	r3, [r7, #11]
 801ac72:	3301      	adds	r3, #1
 801ac74:	72fb      	strb	r3, [r7, #11]
          break;
 801ac76:	e055      	b.n	801ad24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac7e:	691b      	ldr	r3, [r3, #16]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d00b      	beq.n	801ac9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ac8a:	691b      	ldr	r3, [r3, #16]
 801ac8c:	687a      	ldr	r2, [r7, #4]
 801ac8e:	7c12      	ldrb	r2, [r2, #16]
 801ac90:	f107 0108 	add.w	r1, r7, #8
 801ac94:	4610      	mov	r0, r2
 801ac96:	4798      	blx	r3
 801ac98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ac9a:	e043      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ac9c:	6839      	ldr	r1, [r7, #0]
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	f000 fa64 	bl	801b16c <USBD_CtlError>
            err++;
 801aca4:	7afb      	ldrb	r3, [r7, #11]
 801aca6:	3301      	adds	r3, #1
 801aca8:	72fb      	strb	r3, [r7, #11]
          break;
 801acaa:	e03b      	b.n	801ad24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801acb2:	695b      	ldr	r3, [r3, #20]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d00b      	beq.n	801acd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801acbe:	695b      	ldr	r3, [r3, #20]
 801acc0:	687a      	ldr	r2, [r7, #4]
 801acc2:	7c12      	ldrb	r2, [r2, #16]
 801acc4:	f107 0108 	add.w	r1, r7, #8
 801acc8:	4610      	mov	r0, r2
 801acca:	4798      	blx	r3
 801accc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801acce:	e029      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801acd0:	6839      	ldr	r1, [r7, #0]
 801acd2:	6878      	ldr	r0, [r7, #4]
 801acd4:	f000 fa4a 	bl	801b16c <USBD_CtlError>
            err++;
 801acd8:	7afb      	ldrb	r3, [r7, #11]
 801acda:	3301      	adds	r3, #1
 801acdc:	72fb      	strb	r3, [r7, #11]
          break;
 801acde:	e021      	b.n	801ad24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ace6:	699b      	ldr	r3, [r3, #24]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d00b      	beq.n	801ad04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801acf2:	699b      	ldr	r3, [r3, #24]
 801acf4:	687a      	ldr	r2, [r7, #4]
 801acf6:	7c12      	ldrb	r2, [r2, #16]
 801acf8:	f107 0108 	add.w	r1, r7, #8
 801acfc:	4610      	mov	r0, r2
 801acfe:	4798      	blx	r3
 801ad00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ad02:	e00f      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ad04:	6839      	ldr	r1, [r7, #0]
 801ad06:	6878      	ldr	r0, [r7, #4]
 801ad08:	f000 fa30 	bl	801b16c <USBD_CtlError>
            err++;
 801ad0c:	7afb      	ldrb	r3, [r7, #11]
 801ad0e:	3301      	adds	r3, #1
 801ad10:	72fb      	strb	r3, [r7, #11]
          break;
 801ad12:	e007      	b.n	801ad24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801ad14:	6839      	ldr	r1, [r7, #0]
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 fa28 	bl	801b16c <USBD_CtlError>
          err++;
 801ad1c:	7afb      	ldrb	r3, [r7, #11]
 801ad1e:	3301      	adds	r3, #1
 801ad20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801ad22:	bf00      	nop
      }
      break;
 801ad24:	e037      	b.n	801ad96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	7c1b      	ldrb	r3, [r3, #16]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d109      	bne.n	801ad42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ad34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad36:	f107 0208 	add.w	r2, r7, #8
 801ad3a:	4610      	mov	r0, r2
 801ad3c:	4798      	blx	r3
 801ad3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ad40:	e029      	b.n	801ad96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ad42:	6839      	ldr	r1, [r7, #0]
 801ad44:	6878      	ldr	r0, [r7, #4]
 801ad46:	f000 fa11 	bl	801b16c <USBD_CtlError>
        err++;
 801ad4a:	7afb      	ldrb	r3, [r7, #11]
 801ad4c:	3301      	adds	r3, #1
 801ad4e:	72fb      	strb	r3, [r7, #11]
      break;
 801ad50:	e021      	b.n	801ad96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	7c1b      	ldrb	r3, [r3, #16]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d10d      	bne.n	801ad76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ad60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad62:	f107 0208 	add.w	r2, r7, #8
 801ad66:	4610      	mov	r0, r2
 801ad68:	4798      	blx	r3
 801ad6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	3301      	adds	r3, #1
 801ad70:	2207      	movs	r2, #7
 801ad72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ad74:	e00f      	b.n	801ad96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ad76:	6839      	ldr	r1, [r7, #0]
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	f000 f9f7 	bl	801b16c <USBD_CtlError>
        err++;
 801ad7e:	7afb      	ldrb	r3, [r7, #11]
 801ad80:	3301      	adds	r3, #1
 801ad82:	72fb      	strb	r3, [r7, #11]
      break;
 801ad84:	e007      	b.n	801ad96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801ad86:	6839      	ldr	r1, [r7, #0]
 801ad88:	6878      	ldr	r0, [r7, #4]
 801ad8a:	f000 f9ef 	bl	801b16c <USBD_CtlError>
      err++;
 801ad8e:	7afb      	ldrb	r3, [r7, #11]
 801ad90:	3301      	adds	r3, #1
 801ad92:	72fb      	strb	r3, [r7, #11]
      break;
 801ad94:	bf00      	nop
  }

  if (err != 0U)
 801ad96:	7afb      	ldrb	r3, [r7, #11]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d11e      	bne.n	801adda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801ad9c:	683b      	ldr	r3, [r7, #0]
 801ad9e:	88db      	ldrh	r3, [r3, #6]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d016      	beq.n	801add2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801ada4:	893b      	ldrh	r3, [r7, #8]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d00e      	beq.n	801adc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	88da      	ldrh	r2, [r3, #6]
 801adae:	893b      	ldrh	r3, [r7, #8]
 801adb0:	4293      	cmp	r3, r2
 801adb2:	bf28      	it	cs
 801adb4:	4613      	movcs	r3, r2
 801adb6:	b29b      	uxth	r3, r3
 801adb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801adba:	893b      	ldrh	r3, [r7, #8]
 801adbc:	461a      	mov	r2, r3
 801adbe:	68f9      	ldr	r1, [r7, #12]
 801adc0:	6878      	ldr	r0, [r7, #4]
 801adc2:	f000 fb66 	bl	801b492 <USBD_CtlSendData>
 801adc6:	e009      	b.n	801addc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801adc8:	6839      	ldr	r1, [r7, #0]
 801adca:	6878      	ldr	r0, [r7, #4]
 801adcc:	f000 f9ce 	bl	801b16c <USBD_CtlError>
 801add0:	e004      	b.n	801addc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801add2:	6878      	ldr	r0, [r7, #4]
 801add4:	f000 fbb7 	bl	801b546 <USBD_CtlSendStatus>
 801add8:	e000      	b.n	801addc <USBD_GetDescriptor+0x320>
    return;
 801adda:	bf00      	nop
  }
}
 801addc:	3710      	adds	r7, #16
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}
 801ade2:	bf00      	nop

0801ade4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b084      	sub	sp, #16
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
 801adec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	889b      	ldrh	r3, [r3, #4]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d131      	bne.n	801ae5a <USBD_SetAddress+0x76>
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	88db      	ldrh	r3, [r3, #6]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d12d      	bne.n	801ae5a <USBD_SetAddress+0x76>
 801adfe:	683b      	ldr	r3, [r7, #0]
 801ae00:	885b      	ldrh	r3, [r3, #2]
 801ae02:	2b7f      	cmp	r3, #127	; 0x7f
 801ae04:	d829      	bhi.n	801ae5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	885b      	ldrh	r3, [r3, #2]
 801ae0a:	b2db      	uxtb	r3, r3
 801ae0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ae10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae18:	b2db      	uxtb	r3, r3
 801ae1a:	2b03      	cmp	r3, #3
 801ae1c:	d104      	bne.n	801ae28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801ae1e:	6839      	ldr	r1, [r7, #0]
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f000 f9a3 	bl	801b16c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae26:	e01d      	b.n	801ae64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	7bfa      	ldrb	r2, [r7, #15]
 801ae2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ae30:	7bfb      	ldrb	r3, [r7, #15]
 801ae32:	4619      	mov	r1, r3
 801ae34:	6878      	ldr	r0, [r7, #4]
 801ae36:	f7fe ffcd 	bl	8019dd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f000 fb83 	bl	801b546 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ae40:	7bfb      	ldrb	r3, [r7, #15]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d004      	beq.n	801ae50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	2202      	movs	r2, #2
 801ae4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae4e:	e009      	b.n	801ae64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	2201      	movs	r2, #1
 801ae54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ae58:	e004      	b.n	801ae64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ae5a:	6839      	ldr	r1, [r7, #0]
 801ae5c:	6878      	ldr	r0, [r7, #4]
 801ae5e:	f000 f985 	bl	801b16c <USBD_CtlError>
  }
}
 801ae62:	bf00      	nop
 801ae64:	bf00      	nop
 801ae66:	3710      	adds	r7, #16
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}

0801ae6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b084      	sub	sp, #16
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ae76:	2300      	movs	r3, #0
 801ae78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	885b      	ldrh	r3, [r3, #2]
 801ae7e:	b2da      	uxtb	r2, r3
 801ae80:	4b4c      	ldr	r3, [pc, #304]	; (801afb4 <USBD_SetConfig+0x148>)
 801ae82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ae84:	4b4b      	ldr	r3, [pc, #300]	; (801afb4 <USBD_SetConfig+0x148>)
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	2b01      	cmp	r3, #1
 801ae8a:	d905      	bls.n	801ae98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801ae8c:	6839      	ldr	r1, [r7, #0]
 801ae8e:	6878      	ldr	r0, [r7, #4]
 801ae90:	f000 f96c 	bl	801b16c <USBD_CtlError>
    return USBD_FAIL;
 801ae94:	2303      	movs	r3, #3
 801ae96:	e088      	b.n	801afaa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	2b02      	cmp	r3, #2
 801aea2:	d002      	beq.n	801aeaa <USBD_SetConfig+0x3e>
 801aea4:	2b03      	cmp	r3, #3
 801aea6:	d025      	beq.n	801aef4 <USBD_SetConfig+0x88>
 801aea8:	e071      	b.n	801af8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801aeaa:	4b42      	ldr	r3, [pc, #264]	; (801afb4 <USBD_SetConfig+0x148>)
 801aeac:	781b      	ldrb	r3, [r3, #0]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d01c      	beq.n	801aeec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801aeb2:	4b40      	ldr	r3, [pc, #256]	; (801afb4 <USBD_SetConfig+0x148>)
 801aeb4:	781b      	ldrb	r3, [r3, #0]
 801aeb6:	461a      	mov	r2, r3
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801aebc:	4b3d      	ldr	r3, [pc, #244]	; (801afb4 <USBD_SetConfig+0x148>)
 801aebe:	781b      	ldrb	r3, [r3, #0]
 801aec0:	4619      	mov	r1, r3
 801aec2:	6878      	ldr	r0, [r7, #4]
 801aec4:	f7ff f91e 	bl	801a104 <USBD_SetClassConfig>
 801aec8:	4603      	mov	r3, r0
 801aeca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801aecc:	7bfb      	ldrb	r3, [r7, #15]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d004      	beq.n	801aedc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801aed2:	6839      	ldr	r1, [r7, #0]
 801aed4:	6878      	ldr	r0, [r7, #4]
 801aed6:	f000 f949 	bl	801b16c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801aeda:	e065      	b.n	801afa8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	f000 fb32 	bl	801b546 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	2203      	movs	r2, #3
 801aee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801aeea:	e05d      	b.n	801afa8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801aeec:	6878      	ldr	r0, [r7, #4]
 801aeee:	f000 fb2a 	bl	801b546 <USBD_CtlSendStatus>
      break;
 801aef2:	e059      	b.n	801afa8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801aef4:	4b2f      	ldr	r3, [pc, #188]	; (801afb4 <USBD_SetConfig+0x148>)
 801aef6:	781b      	ldrb	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d112      	bne.n	801af22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	2202      	movs	r2, #2
 801af00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801af04:	4b2b      	ldr	r3, [pc, #172]	; (801afb4 <USBD_SetConfig+0x148>)
 801af06:	781b      	ldrb	r3, [r3, #0]
 801af08:	461a      	mov	r2, r3
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801af0e:	4b29      	ldr	r3, [pc, #164]	; (801afb4 <USBD_SetConfig+0x148>)
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	4619      	mov	r1, r3
 801af14:	6878      	ldr	r0, [r7, #4]
 801af16:	f7ff f911 	bl	801a13c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801af1a:	6878      	ldr	r0, [r7, #4]
 801af1c:	f000 fb13 	bl	801b546 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801af20:	e042      	b.n	801afa8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801af22:	4b24      	ldr	r3, [pc, #144]	; (801afb4 <USBD_SetConfig+0x148>)
 801af24:	781b      	ldrb	r3, [r3, #0]
 801af26:	461a      	mov	r2, r3
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	685b      	ldr	r3, [r3, #4]
 801af2c:	429a      	cmp	r2, r3
 801af2e:	d02a      	beq.n	801af86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	685b      	ldr	r3, [r3, #4]
 801af34:	b2db      	uxtb	r3, r3
 801af36:	4619      	mov	r1, r3
 801af38:	6878      	ldr	r0, [r7, #4]
 801af3a:	f7ff f8ff 	bl	801a13c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801af3e:	4b1d      	ldr	r3, [pc, #116]	; (801afb4 <USBD_SetConfig+0x148>)
 801af40:	781b      	ldrb	r3, [r3, #0]
 801af42:	461a      	mov	r2, r3
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801af48:	4b1a      	ldr	r3, [pc, #104]	; (801afb4 <USBD_SetConfig+0x148>)
 801af4a:	781b      	ldrb	r3, [r3, #0]
 801af4c:	4619      	mov	r1, r3
 801af4e:	6878      	ldr	r0, [r7, #4]
 801af50:	f7ff f8d8 	bl	801a104 <USBD_SetClassConfig>
 801af54:	4603      	mov	r3, r0
 801af56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801af58:	7bfb      	ldrb	r3, [r7, #15]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d00f      	beq.n	801af7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801af5e:	6839      	ldr	r1, [r7, #0]
 801af60:	6878      	ldr	r0, [r7, #4]
 801af62:	f000 f903 	bl	801b16c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	4619      	mov	r1, r3
 801af6e:	6878      	ldr	r0, [r7, #4]
 801af70:	f7ff f8e4 	bl	801a13c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	2202      	movs	r2, #2
 801af78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801af7c:	e014      	b.n	801afa8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f000 fae1 	bl	801b546 <USBD_CtlSendStatus>
      break;
 801af84:	e010      	b.n	801afa8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	f000 fadd 	bl	801b546 <USBD_CtlSendStatus>
      break;
 801af8c:	e00c      	b.n	801afa8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801af8e:	6839      	ldr	r1, [r7, #0]
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f000 f8eb 	bl	801b16c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801af96:	4b07      	ldr	r3, [pc, #28]	; (801afb4 <USBD_SetConfig+0x148>)
 801af98:	781b      	ldrb	r3, [r3, #0]
 801af9a:	4619      	mov	r1, r3
 801af9c:	6878      	ldr	r0, [r7, #4]
 801af9e:	f7ff f8cd 	bl	801a13c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801afa2:	2303      	movs	r3, #3
 801afa4:	73fb      	strb	r3, [r7, #15]
      break;
 801afa6:	bf00      	nop
  }

  return ret;
 801afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3710      	adds	r7, #16
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}
 801afb2:	bf00      	nop
 801afb4:	20001ec0 	.word	0x20001ec0

0801afb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801afc2:	683b      	ldr	r3, [r7, #0]
 801afc4:	88db      	ldrh	r3, [r3, #6]
 801afc6:	2b01      	cmp	r3, #1
 801afc8:	d004      	beq.n	801afd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801afca:	6839      	ldr	r1, [r7, #0]
 801afcc:	6878      	ldr	r0, [r7, #4]
 801afce:	f000 f8cd 	bl	801b16c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801afd2:	e023      	b.n	801b01c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801afda:	b2db      	uxtb	r3, r3
 801afdc:	2b02      	cmp	r3, #2
 801afde:	dc02      	bgt.n	801afe6 <USBD_GetConfig+0x2e>
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	dc03      	bgt.n	801afec <USBD_GetConfig+0x34>
 801afe4:	e015      	b.n	801b012 <USBD_GetConfig+0x5a>
 801afe6:	2b03      	cmp	r3, #3
 801afe8:	d00b      	beq.n	801b002 <USBD_GetConfig+0x4a>
 801afea:	e012      	b.n	801b012 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2200      	movs	r2, #0
 801aff0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	3308      	adds	r3, #8
 801aff6:	2201      	movs	r2, #1
 801aff8:	4619      	mov	r1, r3
 801affa:	6878      	ldr	r0, [r7, #4]
 801affc:	f000 fa49 	bl	801b492 <USBD_CtlSendData>
        break;
 801b000:	e00c      	b.n	801b01c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	3304      	adds	r3, #4
 801b006:	2201      	movs	r2, #1
 801b008:	4619      	mov	r1, r3
 801b00a:	6878      	ldr	r0, [r7, #4]
 801b00c:	f000 fa41 	bl	801b492 <USBD_CtlSendData>
        break;
 801b010:	e004      	b.n	801b01c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801b012:	6839      	ldr	r1, [r7, #0]
 801b014:	6878      	ldr	r0, [r7, #4]
 801b016:	f000 f8a9 	bl	801b16c <USBD_CtlError>
        break;
 801b01a:	bf00      	nop
}
 801b01c:	bf00      	nop
 801b01e:	3708      	adds	r7, #8
 801b020:	46bd      	mov	sp, r7
 801b022:	bd80      	pop	{r7, pc}

0801b024 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	b082      	sub	sp, #8
 801b028:	af00      	add	r7, sp, #0
 801b02a:	6078      	str	r0, [r7, #4]
 801b02c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b034:	b2db      	uxtb	r3, r3
 801b036:	3b01      	subs	r3, #1
 801b038:	2b02      	cmp	r3, #2
 801b03a:	d81e      	bhi.n	801b07a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801b03c:	683b      	ldr	r3, [r7, #0]
 801b03e:	88db      	ldrh	r3, [r3, #6]
 801b040:	2b02      	cmp	r3, #2
 801b042:	d004      	beq.n	801b04e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801b044:	6839      	ldr	r1, [r7, #0]
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f000 f890 	bl	801b16c <USBD_CtlError>
        break;
 801b04c:	e01a      	b.n	801b084 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	2201      	movs	r2, #1
 801b052:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d005      	beq.n	801b06a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	68db      	ldr	r3, [r3, #12]
 801b062:	f043 0202 	orr.w	r2, r3, #2
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	330c      	adds	r3, #12
 801b06e:	2202      	movs	r2, #2
 801b070:	4619      	mov	r1, r3
 801b072:	6878      	ldr	r0, [r7, #4]
 801b074:	f000 fa0d 	bl	801b492 <USBD_CtlSendData>
      break;
 801b078:	e004      	b.n	801b084 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801b07a:	6839      	ldr	r1, [r7, #0]
 801b07c:	6878      	ldr	r0, [r7, #4]
 801b07e:	f000 f875 	bl	801b16c <USBD_CtlError>
      break;
 801b082:	bf00      	nop
  }
}
 801b084:	bf00      	nop
 801b086:	3708      	adds	r7, #8
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd80      	pop	{r7, pc}

0801b08c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b082      	sub	sp, #8
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
 801b094:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	885b      	ldrh	r3, [r3, #2]
 801b09a:	2b01      	cmp	r3, #1
 801b09c:	d106      	bne.n	801b0ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2201      	movs	r2, #1
 801b0a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801b0a6:	6878      	ldr	r0, [r7, #4]
 801b0a8:	f000 fa4d 	bl	801b546 <USBD_CtlSendStatus>
  }
}
 801b0ac:	bf00      	nop
 801b0ae:	3708      	adds	r7, #8
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}

0801b0b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b082      	sub	sp, #8
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
 801b0bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b0c4:	b2db      	uxtb	r3, r3
 801b0c6:	3b01      	subs	r3, #1
 801b0c8:	2b02      	cmp	r3, #2
 801b0ca:	d80b      	bhi.n	801b0e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	885b      	ldrh	r3, [r3, #2]
 801b0d0:	2b01      	cmp	r3, #1
 801b0d2:	d10c      	bne.n	801b0ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801b0dc:	6878      	ldr	r0, [r7, #4]
 801b0de:	f000 fa32 	bl	801b546 <USBD_CtlSendStatus>
      }
      break;
 801b0e2:	e004      	b.n	801b0ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801b0e4:	6839      	ldr	r1, [r7, #0]
 801b0e6:	6878      	ldr	r0, [r7, #4]
 801b0e8:	f000 f840 	bl	801b16c <USBD_CtlError>
      break;
 801b0ec:	e000      	b.n	801b0f0 <USBD_ClrFeature+0x3c>
      break;
 801b0ee:	bf00      	nop
  }
}
 801b0f0:	bf00      	nop
 801b0f2:	3708      	adds	r7, #8
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}

0801b0f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b084      	sub	sp, #16
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
 801b100:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	781a      	ldrb	r2, [r3, #0]
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	3301      	adds	r3, #1
 801b112:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	781a      	ldrb	r2, [r3, #0]
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	3301      	adds	r3, #1
 801b120:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801b122:	68f8      	ldr	r0, [r7, #12]
 801b124:	f7ff fa91 	bl	801a64a <SWAPBYTE>
 801b128:	4603      	mov	r3, r0
 801b12a:	461a      	mov	r2, r3
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	3301      	adds	r3, #1
 801b134:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	3301      	adds	r3, #1
 801b13a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801b13c:	68f8      	ldr	r0, [r7, #12]
 801b13e:	f7ff fa84 	bl	801a64a <SWAPBYTE>
 801b142:	4603      	mov	r3, r0
 801b144:	461a      	mov	r2, r3
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	3301      	adds	r3, #1
 801b14e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	3301      	adds	r3, #1
 801b154:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801b156:	68f8      	ldr	r0, [r7, #12]
 801b158:	f7ff fa77 	bl	801a64a <SWAPBYTE>
 801b15c:	4603      	mov	r3, r0
 801b15e:	461a      	mov	r2, r3
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	80da      	strh	r2, [r3, #6]
}
 801b164:	bf00      	nop
 801b166:	3710      	adds	r7, #16
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}

0801b16c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b082      	sub	sp, #8
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
 801b174:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801b176:	2180      	movs	r1, #128	; 0x80
 801b178:	6878      	ldr	r0, [r7, #4]
 801b17a:	f7fe fd93 	bl	8019ca4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801b17e:	2100      	movs	r1, #0
 801b180:	6878      	ldr	r0, [r7, #4]
 801b182:	f7fe fd8f 	bl	8019ca4 <USBD_LL_StallEP>
}
 801b186:	bf00      	nop
 801b188:	3708      	adds	r7, #8
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}

0801b18e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b18e:	b580      	push	{r7, lr}
 801b190:	b086      	sub	sp, #24
 801b192:	af00      	add	r7, sp, #0
 801b194:	60f8      	str	r0, [r7, #12]
 801b196:	60b9      	str	r1, [r7, #8]
 801b198:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b19a:	2300      	movs	r3, #0
 801b19c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801b19e:	68fb      	ldr	r3, [r7, #12]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d036      	beq.n	801b212 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801b1a8:	6938      	ldr	r0, [r7, #16]
 801b1aa:	f000 f836 	bl	801b21a <USBD_GetLen>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	3301      	adds	r3, #1
 801b1b2:	b29b      	uxth	r3, r3
 801b1b4:	005b      	lsls	r3, r3, #1
 801b1b6:	b29a      	uxth	r2, r3
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801b1bc:	7dfb      	ldrb	r3, [r7, #23]
 801b1be:	68ba      	ldr	r2, [r7, #8]
 801b1c0:	4413      	add	r3, r2
 801b1c2:	687a      	ldr	r2, [r7, #4]
 801b1c4:	7812      	ldrb	r2, [r2, #0]
 801b1c6:	701a      	strb	r2, [r3, #0]
  idx++;
 801b1c8:	7dfb      	ldrb	r3, [r7, #23]
 801b1ca:	3301      	adds	r3, #1
 801b1cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801b1ce:	7dfb      	ldrb	r3, [r7, #23]
 801b1d0:	68ba      	ldr	r2, [r7, #8]
 801b1d2:	4413      	add	r3, r2
 801b1d4:	2203      	movs	r2, #3
 801b1d6:	701a      	strb	r2, [r3, #0]
  idx++;
 801b1d8:	7dfb      	ldrb	r3, [r7, #23]
 801b1da:	3301      	adds	r3, #1
 801b1dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801b1de:	e013      	b.n	801b208 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801b1e0:	7dfb      	ldrb	r3, [r7, #23]
 801b1e2:	68ba      	ldr	r2, [r7, #8]
 801b1e4:	4413      	add	r3, r2
 801b1e6:	693a      	ldr	r2, [r7, #16]
 801b1e8:	7812      	ldrb	r2, [r2, #0]
 801b1ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	3301      	adds	r3, #1
 801b1f0:	613b      	str	r3, [r7, #16]
    idx++;
 801b1f2:	7dfb      	ldrb	r3, [r7, #23]
 801b1f4:	3301      	adds	r3, #1
 801b1f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801b1f8:	7dfb      	ldrb	r3, [r7, #23]
 801b1fa:	68ba      	ldr	r2, [r7, #8]
 801b1fc:	4413      	add	r3, r2
 801b1fe:	2200      	movs	r2, #0
 801b200:	701a      	strb	r2, [r3, #0]
    idx++;
 801b202:	7dfb      	ldrb	r3, [r7, #23]
 801b204:	3301      	adds	r3, #1
 801b206:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801b208:	693b      	ldr	r3, [r7, #16]
 801b20a:	781b      	ldrb	r3, [r3, #0]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d1e7      	bne.n	801b1e0 <USBD_GetString+0x52>
 801b210:	e000      	b.n	801b214 <USBD_GetString+0x86>
    return;
 801b212:	bf00      	nop
  }
}
 801b214:	3718      	adds	r7, #24
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}

0801b21a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b21a:	b480      	push	{r7}
 801b21c:	b085      	sub	sp, #20
 801b21e:	af00      	add	r7, sp, #0
 801b220:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b222:	2300      	movs	r3, #0
 801b224:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801b22a:	e005      	b.n	801b238 <USBD_GetLen+0x1e>
  {
    len++;
 801b22c:	7bfb      	ldrb	r3, [r7, #15]
 801b22e:	3301      	adds	r3, #1
 801b230:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	3301      	adds	r3, #1
 801b236:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	781b      	ldrb	r3, [r3, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d1f5      	bne.n	801b22c <USBD_GetLen+0x12>
  }

  return len;
 801b240:	7bfb      	ldrb	r3, [r7, #15]
}
 801b242:	4618      	mov	r0, r3
 801b244:	3714      	adds	r7, #20
 801b246:	46bd      	mov	sp, r7
 801b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24c:	4770      	bx	lr
	...

0801b250 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b250:	b480      	push	{r7}
 801b252:	b083      	sub	sp, #12
 801b254:	af00      	add	r7, sp, #0
 801b256:	4603      	mov	r3, r0
 801b258:	6039      	str	r1, [r7, #0]
 801b25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b25c:	683b      	ldr	r3, [r7, #0]
 801b25e:	2212      	movs	r2, #18
 801b260:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b262:	4b03      	ldr	r3, [pc, #12]	; (801b270 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b264:	4618      	mov	r0, r3
 801b266:	370c      	adds	r7, #12
 801b268:	46bd      	mov	sp, r7
 801b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26e:	4770      	bx	lr
 801b270:	20000518 	.word	0x20000518

0801b274 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b274:	b480      	push	{r7}
 801b276:	b083      	sub	sp, #12
 801b278:	af00      	add	r7, sp, #0
 801b27a:	4603      	mov	r3, r0
 801b27c:	6039      	str	r1, [r7, #0]
 801b27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b280:	683b      	ldr	r3, [r7, #0]
 801b282:	2204      	movs	r2, #4
 801b284:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b286:	4b03      	ldr	r3, [pc, #12]	; (801b294 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b288:	4618      	mov	r0, r3
 801b28a:	370c      	adds	r7, #12
 801b28c:	46bd      	mov	sp, r7
 801b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b292:	4770      	bx	lr
 801b294:	20000538 	.word	0x20000538

0801b298 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b082      	sub	sp, #8
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	4603      	mov	r3, r0
 801b2a0:	6039      	str	r1, [r7, #0]
 801b2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b2a4:	79fb      	ldrb	r3, [r7, #7]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d105      	bne.n	801b2b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b2aa:	683a      	ldr	r2, [r7, #0]
 801b2ac:	4907      	ldr	r1, [pc, #28]	; (801b2cc <USBD_FS_ProductStrDescriptor+0x34>)
 801b2ae:	4808      	ldr	r0, [pc, #32]	; (801b2d0 <USBD_FS_ProductStrDescriptor+0x38>)
 801b2b0:	f7ff ff6d 	bl	801b18e <USBD_GetString>
 801b2b4:	e004      	b.n	801b2c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b2b6:	683a      	ldr	r2, [r7, #0]
 801b2b8:	4904      	ldr	r1, [pc, #16]	; (801b2cc <USBD_FS_ProductStrDescriptor+0x34>)
 801b2ba:	4805      	ldr	r0, [pc, #20]	; (801b2d0 <USBD_FS_ProductStrDescriptor+0x38>)
 801b2bc:	f7ff ff67 	bl	801b18e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b2c0:	4b02      	ldr	r3, [pc, #8]	; (801b2cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	3708      	adds	r7, #8
 801b2c6:	46bd      	mov	sp, r7
 801b2c8:	bd80      	pop	{r7, pc}
 801b2ca:	bf00      	nop
 801b2cc:	20009db8 	.word	0x20009db8
 801b2d0:	08022664 	.word	0x08022664

0801b2d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	4603      	mov	r3, r0
 801b2dc:	6039      	str	r1, [r7, #0]
 801b2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b2e0:	683a      	ldr	r2, [r7, #0]
 801b2e2:	4904      	ldr	r1, [pc, #16]	; (801b2f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b2e4:	4804      	ldr	r0, [pc, #16]	; (801b2f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b2e6:	f7ff ff52 	bl	801b18e <USBD_GetString>
  return USBD_StrDesc;
 801b2ea:	4b02      	ldr	r3, [pc, #8]	; (801b2f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3708      	adds	r7, #8
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	20009db8 	.word	0x20009db8
 801b2f8:	0802266c 	.word	0x0802266c

0801b2fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b082      	sub	sp, #8
 801b300:	af00      	add	r7, sp, #0
 801b302:	4603      	mov	r3, r0
 801b304:	6039      	str	r1, [r7, #0]
 801b306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b308:	683b      	ldr	r3, [r7, #0]
 801b30a:	221a      	movs	r2, #26
 801b30c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b30e:	f000 f855 	bl	801b3bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b312:	4b02      	ldr	r3, [pc, #8]	; (801b31c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b314:	4618      	mov	r0, r3
 801b316:	3708      	adds	r7, #8
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}
 801b31c:	2000053c 	.word	0x2000053c

0801b320 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b082      	sub	sp, #8
 801b324:	af00      	add	r7, sp, #0
 801b326:	4603      	mov	r3, r0
 801b328:	6039      	str	r1, [r7, #0]
 801b32a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b32c:	79fb      	ldrb	r3, [r7, #7]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d105      	bne.n	801b33e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b332:	683a      	ldr	r2, [r7, #0]
 801b334:	4907      	ldr	r1, [pc, #28]	; (801b354 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b336:	4808      	ldr	r0, [pc, #32]	; (801b358 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b338:	f7ff ff29 	bl	801b18e <USBD_GetString>
 801b33c:	e004      	b.n	801b348 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b33e:	683a      	ldr	r2, [r7, #0]
 801b340:	4904      	ldr	r1, [pc, #16]	; (801b354 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b342:	4805      	ldr	r0, [pc, #20]	; (801b358 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b344:	f7ff ff23 	bl	801b18e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b348:	4b02      	ldr	r3, [pc, #8]	; (801b354 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b34a:	4618      	mov	r0, r3
 801b34c:	3708      	adds	r7, #8
 801b34e:	46bd      	mov	sp, r7
 801b350:	bd80      	pop	{r7, pc}
 801b352:	bf00      	nop
 801b354:	20009db8 	.word	0x20009db8
 801b358:	08022680 	.word	0x08022680

0801b35c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b082      	sub	sp, #8
 801b360:	af00      	add	r7, sp, #0
 801b362:	4603      	mov	r3, r0
 801b364:	6039      	str	r1, [r7, #0]
 801b366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b368:	79fb      	ldrb	r3, [r7, #7]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d105      	bne.n	801b37a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b36e:	683a      	ldr	r2, [r7, #0]
 801b370:	4907      	ldr	r1, [pc, #28]	; (801b390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b372:	4808      	ldr	r0, [pc, #32]	; (801b394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b374:	f7ff ff0b 	bl	801b18e <USBD_GetString>
 801b378:	e004      	b.n	801b384 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b37a:	683a      	ldr	r2, [r7, #0]
 801b37c:	4904      	ldr	r1, [pc, #16]	; (801b390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b37e:	4805      	ldr	r0, [pc, #20]	; (801b394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b380:	f7ff ff05 	bl	801b18e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b384:	4b02      	ldr	r3, [pc, #8]	; (801b390 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b386:	4618      	mov	r0, r3
 801b388:	3708      	adds	r7, #8
 801b38a:	46bd      	mov	sp, r7
 801b38c:	bd80      	pop	{r7, pc}
 801b38e:	bf00      	nop
 801b390:	20009db8 	.word	0x20009db8
 801b394:	08022690 	.word	0x08022690

0801b398 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b398:	b480      	push	{r7}
 801b39a:	b083      	sub	sp, #12
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	4603      	mov	r3, r0
 801b3a0:	6039      	str	r1, [r7, #0]
 801b3a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b3a4:	683b      	ldr	r3, [r7, #0]
 801b3a6:	220c      	movs	r2, #12
 801b3a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b3aa:	4b03      	ldr	r3, [pc, #12]	; (801b3b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	370c      	adds	r7, #12
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b6:	4770      	bx	lr
 801b3b8:	2000052c 	.word	0x2000052c

0801b3bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b084      	sub	sp, #16
 801b3c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b3c2:	4b0f      	ldr	r3, [pc, #60]	; (801b400 <Get_SerialNum+0x44>)
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b3c8:	4b0e      	ldr	r3, [pc, #56]	; (801b404 <Get_SerialNum+0x48>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b3ce:	4b0e      	ldr	r3, [pc, #56]	; (801b408 <Get_SerialNum+0x4c>)
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b3d4:	68fa      	ldr	r2, [r7, #12]
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	4413      	add	r3, r2
 801b3da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d009      	beq.n	801b3f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b3e2:	2208      	movs	r2, #8
 801b3e4:	4909      	ldr	r1, [pc, #36]	; (801b40c <Get_SerialNum+0x50>)
 801b3e6:	68f8      	ldr	r0, [r7, #12]
 801b3e8:	f000 f814 	bl	801b414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b3ec:	2204      	movs	r2, #4
 801b3ee:	4908      	ldr	r1, [pc, #32]	; (801b410 <Get_SerialNum+0x54>)
 801b3f0:	68b8      	ldr	r0, [r7, #8]
 801b3f2:	f000 f80f 	bl	801b414 <IntToUnicode>
  }
}
 801b3f6:	bf00      	nop
 801b3f8:	3710      	adds	r7, #16
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}
 801b3fe:	bf00      	nop
 801b400:	1fff7590 	.word	0x1fff7590
 801b404:	1fff7594 	.word	0x1fff7594
 801b408:	1fff7598 	.word	0x1fff7598
 801b40c:	2000053e 	.word	0x2000053e
 801b410:	2000054e 	.word	0x2000054e

0801b414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b414:	b480      	push	{r7}
 801b416:	b087      	sub	sp, #28
 801b418:	af00      	add	r7, sp, #0
 801b41a:	60f8      	str	r0, [r7, #12]
 801b41c:	60b9      	str	r1, [r7, #8]
 801b41e:	4613      	mov	r3, r2
 801b420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b422:	2300      	movs	r3, #0
 801b424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b426:	2300      	movs	r3, #0
 801b428:	75fb      	strb	r3, [r7, #23]
 801b42a:	e027      	b.n	801b47c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	0f1b      	lsrs	r3, r3, #28
 801b430:	2b09      	cmp	r3, #9
 801b432:	d80b      	bhi.n	801b44c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	0f1b      	lsrs	r3, r3, #28
 801b438:	b2da      	uxtb	r2, r3
 801b43a:	7dfb      	ldrb	r3, [r7, #23]
 801b43c:	005b      	lsls	r3, r3, #1
 801b43e:	4619      	mov	r1, r3
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	440b      	add	r3, r1
 801b444:	3230      	adds	r2, #48	; 0x30
 801b446:	b2d2      	uxtb	r2, r2
 801b448:	701a      	strb	r2, [r3, #0]
 801b44a:	e00a      	b.n	801b462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	0f1b      	lsrs	r3, r3, #28
 801b450:	b2da      	uxtb	r2, r3
 801b452:	7dfb      	ldrb	r3, [r7, #23]
 801b454:	005b      	lsls	r3, r3, #1
 801b456:	4619      	mov	r1, r3
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	440b      	add	r3, r1
 801b45c:	3237      	adds	r2, #55	; 0x37
 801b45e:	b2d2      	uxtb	r2, r2
 801b460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	011b      	lsls	r3, r3, #4
 801b466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b468:	7dfb      	ldrb	r3, [r7, #23]
 801b46a:	005b      	lsls	r3, r3, #1
 801b46c:	3301      	adds	r3, #1
 801b46e:	68ba      	ldr	r2, [r7, #8]
 801b470:	4413      	add	r3, r2
 801b472:	2200      	movs	r2, #0
 801b474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b476:	7dfb      	ldrb	r3, [r7, #23]
 801b478:	3301      	adds	r3, #1
 801b47a:	75fb      	strb	r3, [r7, #23]
 801b47c:	7dfa      	ldrb	r2, [r7, #23]
 801b47e:	79fb      	ldrb	r3, [r7, #7]
 801b480:	429a      	cmp	r2, r3
 801b482:	d3d3      	bcc.n	801b42c <IntToUnicode+0x18>
  }
}
 801b484:	bf00      	nop
 801b486:	bf00      	nop
 801b488:	371c      	adds	r7, #28
 801b48a:	46bd      	mov	sp, r7
 801b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b490:	4770      	bx	lr

0801b492 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b492:	b580      	push	{r7, lr}
 801b494:	b084      	sub	sp, #16
 801b496:	af00      	add	r7, sp, #0
 801b498:	60f8      	str	r0, [r7, #12]
 801b49a:	60b9      	str	r1, [r7, #8]
 801b49c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	2202      	movs	r2, #2
 801b4a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	687a      	ldr	r2, [r7, #4]
 801b4b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	68ba      	ldr	r2, [r7, #8]
 801b4b6:	2100      	movs	r1, #0
 801b4b8:	68f8      	ldr	r0, [r7, #12]
 801b4ba:	f7fe fcc1 	bl	8019e40 <USBD_LL_Transmit>

  return USBD_OK;
 801b4be:	2300      	movs	r3, #0
}
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	3710      	adds	r7, #16
 801b4c4:	46bd      	mov	sp, r7
 801b4c6:	bd80      	pop	{r7, pc}

0801b4c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b084      	sub	sp, #16
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	60f8      	str	r0, [r7, #12]
 801b4d0:	60b9      	str	r1, [r7, #8]
 801b4d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	68ba      	ldr	r2, [r7, #8]
 801b4d8:	2100      	movs	r1, #0
 801b4da:	68f8      	ldr	r0, [r7, #12]
 801b4dc:	f7fe fcb0 	bl	8019e40 <USBD_LL_Transmit>

  return USBD_OK;
 801b4e0:	2300      	movs	r3, #0
}
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	3710      	adds	r7, #16
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bd80      	pop	{r7, pc}

0801b4ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b4ea:	b580      	push	{r7, lr}
 801b4ec:	b084      	sub	sp, #16
 801b4ee:	af00      	add	r7, sp, #0
 801b4f0:	60f8      	str	r0, [r7, #12]
 801b4f2:	60b9      	str	r1, [r7, #8]
 801b4f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	2203      	movs	r2, #3
 801b4fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	687a      	ldr	r2, [r7, #4]
 801b502:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	687a      	ldr	r2, [r7, #4]
 801b50a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	68ba      	ldr	r2, [r7, #8]
 801b512:	2100      	movs	r1, #0
 801b514:	68f8      	ldr	r0, [r7, #12]
 801b516:	f7fe fccb 	bl	8019eb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b51a:	2300      	movs	r3, #0
}
 801b51c:	4618      	mov	r0, r3
 801b51e:	3710      	adds	r7, #16
 801b520:	46bd      	mov	sp, r7
 801b522:	bd80      	pop	{r7, pc}

0801b524 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b084      	sub	sp, #16
 801b528:	af00      	add	r7, sp, #0
 801b52a:	60f8      	str	r0, [r7, #12]
 801b52c:	60b9      	str	r1, [r7, #8]
 801b52e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	68ba      	ldr	r2, [r7, #8]
 801b534:	2100      	movs	r1, #0
 801b536:	68f8      	ldr	r0, [r7, #12]
 801b538:	f7fe fcba 	bl	8019eb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b53c:	2300      	movs	r3, #0
}
 801b53e:	4618      	mov	r0, r3
 801b540:	3710      	adds	r7, #16
 801b542:	46bd      	mov	sp, r7
 801b544:	bd80      	pop	{r7, pc}

0801b546 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b546:	b580      	push	{r7, lr}
 801b548:	b082      	sub	sp, #8
 801b54a:	af00      	add	r7, sp, #0
 801b54c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	2204      	movs	r2, #4
 801b552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b556:	2300      	movs	r3, #0
 801b558:	2200      	movs	r2, #0
 801b55a:	2100      	movs	r1, #0
 801b55c:	6878      	ldr	r0, [r7, #4]
 801b55e:	f7fe fc6f 	bl	8019e40 <USBD_LL_Transmit>

  return USBD_OK;
 801b562:	2300      	movs	r3, #0
}
 801b564:	4618      	mov	r0, r3
 801b566:	3708      	adds	r7, #8
 801b568:	46bd      	mov	sp, r7
 801b56a:	bd80      	pop	{r7, pc}

0801b56c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b082      	sub	sp, #8
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	2205      	movs	r2, #5
 801b578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b57c:	2300      	movs	r3, #0
 801b57e:	2200      	movs	r2, #0
 801b580:	2100      	movs	r1, #0
 801b582:	6878      	ldr	r0, [r7, #4]
 801b584:	f7fe fc94 	bl	8019eb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b588:	2300      	movs	r3, #0
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3708      	adds	r7, #8
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}

0801b592 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b592:	b580      	push	{r7, lr}
 801b594:	b084      	sub	sp, #16
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
 801b59a:	460b      	mov	r3, r1
 801b59c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 801b59e:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b5a2:	f7fe fd1f 	bl	8019fe4 <USBD_static_malloc>
 801b5a6:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d105      	bne.n	801b5ba <USBD_MSC_Init+0x28>
  {
    pdev->pClassDataMSC = NULL;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	2200      	movs	r2, #0
 801b5b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801b5b6:	2302      	movs	r3, #2
 801b5b8:	e034      	b.n	801b624 <USBD_MSC_Init+0x92>
  }

  pdev->pClassDataMSC = (void *)hmsc;
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	68fa      	ldr	r2, [r7, #12]
 801b5be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	7c1b      	ldrb	r3, [r3, #16]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d115      	bne.n	801b5f6 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b5ce:	2202      	movs	r2, #2
 801b5d0:	2101      	movs	r1, #1
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	f7fe fabc 	bl	8019b50 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	2201      	movs	r2, #1
 801b5dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b5e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b5e4:	2202      	movs	r2, #2
 801b5e6:	2181      	movs	r1, #129	; 0x81
 801b5e8:	6878      	ldr	r0, [r7, #4]
 801b5ea:	f7fe fab1 	bl	8019b50 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	2201      	movs	r2, #1
 801b5f2:	871a      	strh	r2, [r3, #56]	; 0x38
 801b5f4:	e012      	b.n	801b61c <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b5f6:	2340      	movs	r3, #64	; 0x40
 801b5f8:	2202      	movs	r2, #2
 801b5fa:	2101      	movs	r1, #1
 801b5fc:	6878      	ldr	r0, [r7, #4]
 801b5fe:	f7fe faa7 	bl	8019b50 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	2201      	movs	r2, #1
 801b606:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b60a:	2340      	movs	r3, #64	; 0x40
 801b60c:	2202      	movs	r2, #2
 801b60e:	2181      	movs	r1, #129	; 0x81
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f7fe fa9d 	bl	8019b50 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2201      	movs	r2, #1
 801b61a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	f000 f958 	bl	801b8d2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801b622:	2300      	movs	r3, #0
}
 801b624:	4618      	mov	r0, r3
 801b626:	3710      	adds	r7, #16
 801b628:	46bd      	mov	sp, r7
 801b62a:	bd80      	pop	{r7, pc}

0801b62c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b082      	sub	sp, #8
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
 801b634:	460b      	mov	r3, r1
 801b636:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 801b638:	2101      	movs	r1, #1
 801b63a:	6878      	ldr	r0, [r7, #4]
 801b63c:	f7fe fac6 	bl	8019bcc <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	2200      	movs	r2, #0
 801b644:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 801b648:	2181      	movs	r1, #129	; 0x81
 801b64a:	6878      	ldr	r0, [r7, #4]
 801b64c:	f7fe fabe 	bl	8019bcc <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	2200      	movs	r2, #0
 801b654:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassDataMSC != NULL)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d00c      	beq.n	801b67a <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801b660:	6878      	ldr	r0, [r7, #4]
 801b662:	f000 f994 	bl	801b98e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataMSC);
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b66c:	4618      	mov	r0, r3
 801b66e:	f7fe fcc7 	bl	801a000 <USBD_static_free>
    pdev->pClassDataMSC = NULL;
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	2200      	movs	r2, #0
 801b676:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b67a:	2300      	movs	r3, #0
}
 801b67c:	4618      	mov	r0, r3
 801b67e:	3708      	adds	r7, #8
 801b680:	46bd      	mov	sp, r7
 801b682:	bd80      	pop	{r7, pc}

0801b684 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b684:	b580      	push	{r7, lr}
 801b686:	b086      	sub	sp, #24
 801b688:	af00      	add	r7, sp, #0
 801b68a:	6078      	str	r0, [r7, #4]
 801b68c:	6039      	str	r1, [r7, #0]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b694:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801b696:	2300      	movs	r3, #0
 801b698:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801b69a:	2300      	movs	r3, #0
 801b69c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801b69e:	693b      	ldr	r3, [r7, #16]
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d101      	bne.n	801b6a8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b6a4:	2303      	movs	r3, #3
 801b6a6:	e0db      	b.n	801b860 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	781b      	ldrb	r3, [r3, #0]
 801b6ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d04e      	beq.n	801b752 <USBD_MSC_Setup+0xce>
 801b6b4:	2b20      	cmp	r3, #32
 801b6b6:	f040 80cb 	bne.w	801b850 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	785b      	ldrb	r3, [r3, #1]
 801b6be:	2bfe      	cmp	r3, #254	; 0xfe
 801b6c0:	d002      	beq.n	801b6c8 <USBD_MSC_Setup+0x44>
 801b6c2:	2bff      	cmp	r3, #255	; 0xff
 801b6c4:	d025      	beq.n	801b712 <USBD_MSC_Setup+0x8e>
 801b6c6:	e03c      	b.n	801b742 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b6c8:	683b      	ldr	r3, [r7, #0]
 801b6ca:	885b      	ldrh	r3, [r3, #2]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d119      	bne.n	801b704 <USBD_MSC_Setup+0x80>
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	88db      	ldrh	r3, [r3, #6]
 801b6d4:	2b01      	cmp	r3, #1
 801b6d6:	d115      	bne.n	801b704 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801b6d8:	683b      	ldr	r3, [r7, #0]
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	da10      	bge.n	801b704 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetMaxLun();
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b6e8:	699b      	ldr	r3, [r3, #24]
 801b6ea:	4798      	blx	r3
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	461a      	mov	r2, r3
 801b6f0:	693b      	ldr	r3, [r7, #16]
 801b6f2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	2201      	movs	r2, #1
 801b6f8:	4619      	mov	r1, r3
 801b6fa:	6878      	ldr	r0, [r7, #4]
 801b6fc:	f7ff fec9 	bl	801b492 <USBD_CtlSendData>
 801b700:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b702:	e025      	b.n	801b750 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b704:	6839      	ldr	r1, [r7, #0]
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	f7ff fd30 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 801b70c:	2303      	movs	r3, #3
 801b70e:	75fb      	strb	r3, [r7, #23]
          break;
 801b710:	e01e      	b.n	801b750 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b712:	683b      	ldr	r3, [r7, #0]
 801b714:	885b      	ldrh	r3, [r3, #2]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d10c      	bne.n	801b734 <USBD_MSC_Setup+0xb0>
 801b71a:	683b      	ldr	r3, [r7, #0]
 801b71c:	88db      	ldrh	r3, [r3, #6]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d108      	bne.n	801b734 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801b722:	683b      	ldr	r3, [r7, #0]
 801b724:	781b      	ldrb	r3, [r3, #0]
 801b726:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b728:	2b00      	cmp	r3, #0
 801b72a:	db03      	blt.n	801b734 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801b72c:	6878      	ldr	r0, [r7, #4]
 801b72e:	f000 f908 	bl	801b942 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b732:	e00d      	b.n	801b750 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b734:	6839      	ldr	r1, [r7, #0]
 801b736:	6878      	ldr	r0, [r7, #4]
 801b738:	f7ff fd18 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 801b73c:	2303      	movs	r3, #3
 801b73e:	75fb      	strb	r3, [r7, #23]
          break;
 801b740:	e006      	b.n	801b750 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b742:	6839      	ldr	r1, [r7, #0]
 801b744:	6878      	ldr	r0, [r7, #4]
 801b746:	f7ff fd11 	bl	801b16c <USBD_CtlError>
          ret = USBD_FAIL;
 801b74a:	2303      	movs	r3, #3
 801b74c:	75fb      	strb	r3, [r7, #23]
          break;
 801b74e:	bf00      	nop
      }
      break;
 801b750:	e085      	b.n	801b85e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	785b      	ldrb	r3, [r3, #1]
 801b756:	2b0b      	cmp	r3, #11
 801b758:	d871      	bhi.n	801b83e <USBD_MSC_Setup+0x1ba>
 801b75a:	a201      	add	r2, pc, #4	; (adr r2, 801b760 <USBD_MSC_Setup+0xdc>)
 801b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b760:	0801b791 	.word	0x0801b791
 801b764:	0801b80d 	.word	0x0801b80d
 801b768:	0801b83f 	.word	0x0801b83f
 801b76c:	0801b83f 	.word	0x0801b83f
 801b770:	0801b83f 	.word	0x0801b83f
 801b774:	0801b83f 	.word	0x0801b83f
 801b778:	0801b83f 	.word	0x0801b83f
 801b77c:	0801b83f 	.word	0x0801b83f
 801b780:	0801b83f 	.word	0x0801b83f
 801b784:	0801b83f 	.word	0x0801b83f
 801b788:	0801b7bb 	.word	0x0801b7bb
 801b78c:	0801b7e5 	.word	0x0801b7e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b796:	b2db      	uxtb	r3, r3
 801b798:	2b03      	cmp	r3, #3
 801b79a:	d107      	bne.n	801b7ac <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b79c:	f107 030e 	add.w	r3, r7, #14
 801b7a0:	2202      	movs	r2, #2
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	6878      	ldr	r0, [r7, #4]
 801b7a6:	f7ff fe74 	bl	801b492 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b7aa:	e050      	b.n	801b84e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b7ac:	6839      	ldr	r1, [r7, #0]
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7ff fcdc 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 801b7b4:	2303      	movs	r3, #3
 801b7b6:	75fb      	strb	r3, [r7, #23]
          break;
 801b7b8:	e049      	b.n	801b84e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b7c0:	b2db      	uxtb	r3, r3
 801b7c2:	2b03      	cmp	r3, #3
 801b7c4:	d107      	bne.n	801b7d6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801b7c6:	693b      	ldr	r3, [r7, #16]
 801b7c8:	3304      	adds	r3, #4
 801b7ca:	2201      	movs	r2, #1
 801b7cc:	4619      	mov	r1, r3
 801b7ce:	6878      	ldr	r0, [r7, #4]
 801b7d0:	f7ff fe5f 	bl	801b492 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b7d4:	e03b      	b.n	801b84e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b7d6:	6839      	ldr	r1, [r7, #0]
 801b7d8:	6878      	ldr	r0, [r7, #4]
 801b7da:	f7ff fcc7 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 801b7de:	2303      	movs	r3, #3
 801b7e0:	75fb      	strb	r3, [r7, #23]
          break;
 801b7e2:	e034      	b.n	801b84e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b7ea:	b2db      	uxtb	r3, r3
 801b7ec:	2b03      	cmp	r3, #3
 801b7ee:	d106      	bne.n	801b7fe <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	885b      	ldrh	r3, [r3, #2]
 801b7f4:	b2db      	uxtb	r3, r3
 801b7f6:	461a      	mov	r2, r3
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b7fc:	e027      	b.n	801b84e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b7fe:	6839      	ldr	r1, [r7, #0]
 801b800:	6878      	ldr	r0, [r7, #4]
 801b802:	f7ff fcb3 	bl	801b16c <USBD_CtlError>
            ret = USBD_FAIL;
 801b806:	2303      	movs	r3, #3
 801b808:	75fb      	strb	r3, [r7, #23]
          break;
 801b80a:	e020      	b.n	801b84e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b812:	b2db      	uxtb	r3, r3
 801b814:	2b03      	cmp	r3, #3
 801b816:	d119      	bne.n	801b84c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801b818:	683b      	ldr	r3, [r7, #0]
 801b81a:	885b      	ldrh	r3, [r3, #2]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d115      	bne.n	801b84c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	889b      	ldrh	r3, [r3, #4]
 801b824:	b2db      	uxtb	r3, r3
 801b826:	4619      	mov	r1, r3
 801b828:	6878      	ldr	r0, [r7, #4]
 801b82a:	f7fe fa05 	bl	8019c38 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	889b      	ldrh	r3, [r3, #4]
 801b832:	b2db      	uxtb	r3, r3
 801b834:	4619      	mov	r1, r3
 801b836:	6878      	ldr	r0, [r7, #4]
 801b838:	f000 fa42 	bl	801bcc0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801b83c:	e006      	b.n	801b84c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801b83e:	6839      	ldr	r1, [r7, #0]
 801b840:	6878      	ldr	r0, [r7, #4]
 801b842:	f7ff fc93 	bl	801b16c <USBD_CtlError>
          ret = USBD_FAIL;
 801b846:	2303      	movs	r3, #3
 801b848:	75fb      	strb	r3, [r7, #23]
          break;
 801b84a:	e000      	b.n	801b84e <USBD_MSC_Setup+0x1ca>
          break;
 801b84c:	bf00      	nop
      }
      break;
 801b84e:	e006      	b.n	801b85e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801b850:	6839      	ldr	r1, [r7, #0]
 801b852:	6878      	ldr	r0, [r7, #4]
 801b854:	f7ff fc8a 	bl	801b16c <USBD_CtlError>
      ret = USBD_FAIL;
 801b858:	2303      	movs	r3, #3
 801b85a:	75fb      	strb	r3, [r7, #23]
      break;
 801b85c:	bf00      	nop
  }

  return (uint8_t)ret;
 801b85e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b860:	4618      	mov	r0, r3
 801b862:	3718      	adds	r7, #24
 801b864:	46bd      	mov	sp, r7
 801b866:	bd80      	pop	{r7, pc}

0801b868 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b868:	b580      	push	{r7, lr}
 801b86a:	b082      	sub	sp, #8
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
 801b870:	460b      	mov	r3, r1
 801b872:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801b874:	78fb      	ldrb	r3, [r7, #3]
 801b876:	4619      	mov	r1, r3
 801b878:	6878      	ldr	r0, [r7, #4]
 801b87a:	f000 f89c 	bl	801b9b6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801b87e:	2300      	movs	r3, #0
}
 801b880:	4618      	mov	r0, r3
 801b882:	3708      	adds	r7, #8
 801b884:	46bd      	mov	sp, r7
 801b886:	bd80      	pop	{r7, pc}

0801b888 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b082      	sub	sp, #8
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
 801b890:	460b      	mov	r3, r1
 801b892:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801b894:	78fb      	ldrb	r3, [r7, #3]
 801b896:	4619      	mov	r1, r3
 801b898:	6878      	ldr	r0, [r7, #4]
 801b89a:	f000 f8c2 	bl	801ba22 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801b89e:	2300      	movs	r3, #0
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	3708      	adds	r7, #8
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd80      	pop	{r7, pc}

0801b8a8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801b8a8:	b480      	push	{r7}
 801b8aa:	b083      	sub	sp, #12
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
 801b8b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b8b2:	683b      	ldr	r3, [r7, #0]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d101      	bne.n	801b8bc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b8b8:	2303      	movs	r3, #3
 801b8ba:	e004      	b.n	801b8c6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserDataMSC = fops;
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	683a      	ldr	r2, [r7, #0]
 801b8c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801b8c4:	2300      	movs	r3, #0
}
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	370c      	adds	r7, #12
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d0:	4770      	bx	lr

0801b8d2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801b8d2:	b580      	push	{r7, lr}
 801b8d4:	b084      	sub	sp, #16
 801b8d6:	af00      	add	r7, sp, #0
 801b8d8:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b8e0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d028      	beq.n	801b93a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	2200      	movs	r2, #0
 801b8f2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	2200      	movs	r2, #0
 801b900:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	2200      	movs	r2, #0
 801b908:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Init(0U);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	2000      	movs	r0, #0
 801b916:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 801b918:	2101      	movs	r1, #1
 801b91a:	6878      	ldr	r0, [r7, #4]
 801b91c:	f7fe f98c 	bl	8019c38 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 801b920:	2181      	movs	r1, #129	; 0x81
 801b922:	6878      	ldr	r0, [r7, #4]
 801b924:	f7fe f988 	bl	8019c38 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b92e:	231f      	movs	r3, #31
 801b930:	2101      	movs	r1, #1
 801b932:	6878      	ldr	r0, [r7, #4]
 801b934:	f7fe fabc 	bl	8019eb0 <USBD_LL_PrepareReceive>
 801b938:	e000      	b.n	801b93c <MSC_BOT_Init+0x6a>
    return;
 801b93a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b93c:	3710      	adds	r7, #16
 801b93e:	46bd      	mov	sp, r7
 801b940:	bd80      	pop	{r7, pc}

0801b942 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801b942:	b580      	push	{r7, lr}
 801b944:	b084      	sub	sp, #16
 801b946:	af00      	add	r7, sp, #0
 801b948:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b950:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d016      	beq.n	801b986 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	2200      	movs	r2, #0
 801b95c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	2201      	movs	r2, #1
 801b962:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 801b964:	2181      	movs	r1, #129	; 0x81
 801b966:	6878      	ldr	r0, [r7, #4]
 801b968:	f7fe f9d2 	bl	8019d10 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 801b96c:	2101      	movs	r1, #1
 801b96e:	6878      	ldr	r0, [r7, #4]
 801b970:	f7fe f9ce 	bl	8019d10 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b97a:	231f      	movs	r3, #31
 801b97c:	2101      	movs	r1, #1
 801b97e:	6878      	ldr	r0, [r7, #4]
 801b980:	f7fe fa96 	bl	8019eb0 <USBD_LL_PrepareReceive>
 801b984:	e000      	b.n	801b988 <MSC_BOT_Reset+0x46>
    return;
 801b986:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b988:	3710      	adds	r7, #16
 801b98a:	46bd      	mov	sp, r7
 801b98c:	bd80      	pop	{r7, pc}

0801b98e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801b98e:	b480      	push	{r7}
 801b990:	b085      	sub	sp, #20
 801b992:	af00      	add	r7, sp, #0
 801b994:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b99c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d002      	beq.n	801b9aa <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	721a      	strb	r2, [r3, #8]
  }
}
 801b9aa:	bf00      	nop
 801b9ac:	3714      	adds	r7, #20
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b4:	4770      	bx	lr

0801b9b6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b9b6:	b580      	push	{r7, lr}
 801b9b8:	b084      	sub	sp, #16
 801b9ba:	af00      	add	r7, sp, #0
 801b9bc:	6078      	str	r0, [r7, #4]
 801b9be:	460b      	mov	r3, r1
 801b9c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b9c8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d020      	beq.n	801ba12 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	7a1b      	ldrb	r3, [r3, #8]
 801b9d4:	2b02      	cmp	r3, #2
 801b9d6:	d005      	beq.n	801b9e4 <MSC_BOT_DataIn+0x2e>
 801b9d8:	2b02      	cmp	r3, #2
 801b9da:	db1c      	blt.n	801ba16 <MSC_BOT_DataIn+0x60>
 801b9dc:	3b03      	subs	r3, #3
 801b9de:	2b01      	cmp	r3, #1
 801b9e0:	d819      	bhi.n	801ba16 <MSC_BOT_DataIn+0x60>
 801b9e2:	e011      	b.n	801ba08 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b9f0:	461a      	mov	r2, r3
 801b9f2:	6878      	ldr	r0, [r7, #4]
 801b9f4:	f000 f992 	bl	801bd1c <SCSI_ProcessCmd>
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	da0d      	bge.n	801ba1a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b9fe:	2101      	movs	r1, #1
 801ba00:	6878      	ldr	r0, [r7, #4]
 801ba02:	f000 f8fb 	bl	801bbfc <MSC_BOT_SendCSW>
      }
      break;
 801ba06:	e008      	b.n	801ba1a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801ba08:	2100      	movs	r1, #0
 801ba0a:	6878      	ldr	r0, [r7, #4]
 801ba0c:	f000 f8f6 	bl	801bbfc <MSC_BOT_SendCSW>
      break;
 801ba10:	e004      	b.n	801ba1c <MSC_BOT_DataIn+0x66>
    return;
 801ba12:	bf00      	nop
 801ba14:	e002      	b.n	801ba1c <MSC_BOT_DataIn+0x66>

    default:
      break;
 801ba16:	bf00      	nop
 801ba18:	e000      	b.n	801ba1c <MSC_BOT_DataIn+0x66>
      break;
 801ba1a:	bf00      	nop
  }
}
 801ba1c:	3710      	adds	r7, #16
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	bd80      	pop	{r7, pc}

0801ba22 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ba22:	b580      	push	{r7, lr}
 801ba24:	b084      	sub	sp, #16
 801ba26:	af00      	add	r7, sp, #0
 801ba28:	6078      	str	r0, [r7, #4]
 801ba2a:	460b      	mov	r3, r1
 801ba2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba34:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d01c      	beq.n	801ba76 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	7a1b      	ldrb	r3, [r3, #8]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d002      	beq.n	801ba4a <MSC_BOT_DataOut+0x28>
 801ba44:	2b01      	cmp	r3, #1
 801ba46:	d004      	beq.n	801ba52 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801ba48:	e018      	b.n	801ba7c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801ba4a:	6878      	ldr	r0, [r7, #4]
 801ba4c:	f000 f81a 	bl	801ba84 <MSC_BOT_CBW_Decode>
      break;
 801ba50:	e014      	b.n	801ba7c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801ba5e:	461a      	mov	r2, r3
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	f000 f95b 	bl	801bd1c <SCSI_ProcessCmd>
 801ba66:	4603      	mov	r3, r0
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	da06      	bge.n	801ba7a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801ba6c:	2101      	movs	r1, #1
 801ba6e:	6878      	ldr	r0, [r7, #4]
 801ba70:	f000 f8c4 	bl	801bbfc <MSC_BOT_SendCSW>
      break;
 801ba74:	e001      	b.n	801ba7a <MSC_BOT_DataOut+0x58>
    return;
 801ba76:	bf00      	nop
 801ba78:	e000      	b.n	801ba7c <MSC_BOT_DataOut+0x5a>
      break;
 801ba7a:	bf00      	nop
  }
}
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
	...

0801ba84 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b084      	sub	sp, #16
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba92:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d077      	beq.n	801bb8a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801bab2:	2101      	movs	r1, #1
 801bab4:	6878      	ldr	r0, [r7, #4]
 801bab6:	f7fe fa33 	bl	8019f20 <USBD_LL_GetRxDataSize>
 801baba:	4603      	mov	r3, r0
 801babc:	2b1f      	cmp	r3, #31
 801babe:	d114      	bne.n	801baea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801bac6:	4a34      	ldr	r2, [pc, #208]	; (801bb98 <MSC_BOT_CBW_Decode+0x114>)
 801bac8:	4293      	cmp	r3, r2
 801baca:	d10e      	bne.n	801baea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801bad2:	2b01      	cmp	r3, #1
 801bad4:	d809      	bhi.n	801baea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801badc:	2b00      	cmp	r3, #0
 801bade:	d004      	beq.n	801baea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801bae6:	2b10      	cmp	r3, #16
 801bae8:	d90e      	bls.n	801bb08 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801baf0:	2320      	movs	r3, #32
 801baf2:	2205      	movs	r2, #5
 801baf4:	6878      	ldr	r0, [r7, #4]
 801baf6:	f000 fdbc 	bl	801c672 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801bafa:	68fb      	ldr	r3, [r7, #12]
 801bafc:	2202      	movs	r2, #2
 801bafe:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801bb00:	6878      	ldr	r0, [r7, #4]
 801bb02:	f000 f8ab 	bl	801bc5c <MSC_BOT_Abort>
 801bb06:	e043      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801bb14:	461a      	mov	r2, r3
 801bb16:	6878      	ldr	r0, [r7, #4]
 801bb18:	f000 f900 	bl	801bd1c <SCSI_ProcessCmd>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	da0c      	bge.n	801bb3c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	7a1b      	ldrb	r3, [r3, #8]
 801bb26:	2b05      	cmp	r3, #5
 801bb28:	d104      	bne.n	801bb34 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801bb2a:	2101      	movs	r1, #1
 801bb2c:	6878      	ldr	r0, [r7, #4]
 801bb2e:	f000 f865 	bl	801bbfc <MSC_BOT_SendCSW>
 801bb32:	e02d      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801bb34:	6878      	ldr	r0, [r7, #4]
 801bb36:	f000 f891 	bl	801bc5c <MSC_BOT_Abort>
 801bb3a:	e029      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	7a1b      	ldrb	r3, [r3, #8]
 801bb40:	2b02      	cmp	r3, #2
 801bb42:	d024      	beq.n	801bb8e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801bb48:	2b01      	cmp	r3, #1
 801bb4a:	d020      	beq.n	801bb8e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801bb50:	2b03      	cmp	r3, #3
 801bb52:	d01c      	beq.n	801bb8e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	68db      	ldr	r3, [r3, #12]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d009      	beq.n	801bb70 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	f103 0110 	add.w	r1, r3, #16
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	68db      	ldr	r3, [r3, #12]
 801bb66:	461a      	mov	r2, r3
 801bb68:	6878      	ldr	r0, [r7, #4]
 801bb6a:	f000 f817 	bl	801bb9c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801bb6e:	e00f      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	68db      	ldr	r3, [r3, #12]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d104      	bne.n	801bb82 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801bb78:	2100      	movs	r1, #0
 801bb7a:	6878      	ldr	r0, [r7, #4]
 801bb7c:	f000 f83e 	bl	801bbfc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801bb80:	e006      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801bb82:	6878      	ldr	r0, [r7, #4]
 801bb84:	f000 f86a 	bl	801bc5c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801bb88:	e002      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801bb8a:	bf00      	nop
 801bb8c:	e000      	b.n	801bb90 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801bb8e:	bf00      	nop
    }
  }
}
 801bb90:	3710      	adds	r7, #16
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	bf00      	nop
 801bb98:	43425355 	.word	0x43425355

0801bb9c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b086      	sub	sp, #24
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	60f8      	str	r0, [r7, #12]
 801bba4:	60b9      	str	r1, [r7, #8]
 801bba6:	607a      	str	r2, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bbae:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bbb6:	687a      	ldr	r2, [r7, #4]
 801bbb8:	4293      	cmp	r3, r2
 801bbba:	bf28      	it	cs
 801bbbc:	4613      	movcs	r3, r2
 801bbbe:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bbc0:	697b      	ldr	r3, [r7, #20]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d015      	beq.n	801bbf2 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801bbc6:	697b      	ldr	r3, [r7, #20]
 801bbc8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	1ad2      	subs	r2, r2, r3
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801bbd6:	697b      	ldr	r3, [r7, #20]
 801bbd8:	2200      	movs	r2, #0
 801bbda:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	2204      	movs	r2, #4
 801bbe2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	68ba      	ldr	r2, [r7, #8]
 801bbe8:	2181      	movs	r1, #129	; 0x81
 801bbea:	68f8      	ldr	r0, [r7, #12]
 801bbec:	f7fe f928 	bl	8019e40 <USBD_LL_Transmit>
 801bbf0:	e000      	b.n	801bbf4 <MSC_BOT_SendData+0x58>
    return;
 801bbf2:	bf00      	nop
}
 801bbf4:	3718      	adds	r7, #24
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	bd80      	pop	{r7, pc}
	...

0801bbfc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b084      	sub	sp, #16
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	6078      	str	r0, [r7, #4]
 801bc04:	460b      	mov	r3, r1
 801bc06:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bc0e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d01b      	beq.n	801bc4e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	4a0f      	ldr	r2, [pc, #60]	; (801bc58 <MSC_BOT_SendCSW+0x5c>)
 801bc1a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	78fa      	ldrb	r2, [r7, #3]
 801bc22:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	2200      	movs	r2, #0
 801bc2a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801bc32:	230d      	movs	r3, #13
 801bc34:	2181      	movs	r1, #129	; 0x81
 801bc36:	6878      	ldr	r0, [r7, #4]
 801bc38:	f7fe f902 	bl	8019e40 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801bc42:	231f      	movs	r3, #31
 801bc44:	2101      	movs	r1, #1
 801bc46:	6878      	ldr	r0, [r7, #4]
 801bc48:	f7fe f932 	bl	8019eb0 <USBD_LL_PrepareReceive>
 801bc4c:	e000      	b.n	801bc50 <MSC_BOT_SendCSW+0x54>
    return;
 801bc4e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801bc50:	3710      	adds	r7, #16
 801bc52:	46bd      	mov	sp, r7
 801bc54:	bd80      	pop	{r7, pc}
 801bc56:	bf00      	nop
 801bc58:	53425355 	.word	0x53425355

0801bc5c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b084      	sub	sp, #16
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bc6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d022      	beq.n	801bcb8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d10c      	bne.n	801bc96 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d007      	beq.n	801bc96 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d103      	bne.n	801bc96 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bc8e:	2101      	movs	r1, #1
 801bc90:	6878      	ldr	r0, [r7, #4]
 801bc92:	f7fe f807 	bl	8019ca4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bc96:	2181      	movs	r1, #129	; 0x81
 801bc98:	6878      	ldr	r0, [r7, #4]
 801bc9a:	f7fe f803 	bl	8019ca4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	7a5b      	ldrb	r3, [r3, #9]
 801bca2:	2b02      	cmp	r3, #2
 801bca4:	d109      	bne.n	801bcba <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bca6:	2181      	movs	r1, #129	; 0x81
 801bca8:	6878      	ldr	r0, [r7, #4]
 801bcaa:	f7fd fffb 	bl	8019ca4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bcae:	2101      	movs	r1, #1
 801bcb0:	6878      	ldr	r0, [r7, #4]
 801bcb2:	f7fd fff7 	bl	8019ca4 <USBD_LL_StallEP>
 801bcb6:	e000      	b.n	801bcba <MSC_BOT_Abort+0x5e>
    return;
 801bcb8:	bf00      	nop
  }
}
 801bcba:	3710      	adds	r7, #16
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	bd80      	pop	{r7, pc}

0801bcc0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b084      	sub	sp, #16
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	6078      	str	r0, [r7, #4]
 801bcc8:	460b      	mov	r3, r1
 801bcca:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bcd2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d019      	beq.n	801bd0e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	7a5b      	ldrb	r3, [r3, #9]
 801bcde:	2b02      	cmp	r3, #2
 801bce0:	d108      	bne.n	801bcf4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bce2:	2181      	movs	r1, #129	; 0x81
 801bce4:	6878      	ldr	r0, [r7, #4]
 801bce6:	f7fd ffdd 	bl	8019ca4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bcea:	2101      	movs	r1, #1
 801bcec:	6878      	ldr	r0, [r7, #4]
 801bcee:	f7fd ffd9 	bl	8019ca4 <USBD_LL_StallEP>
 801bcf2:	e00f      	b.n	801bd14 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801bcf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	da0a      	bge.n	801bd12 <MSC_BOT_CplClrFeature+0x52>
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	7a5b      	ldrb	r3, [r3, #9]
 801bd00:	2b01      	cmp	r3, #1
 801bd02:	d006      	beq.n	801bd12 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801bd04:	2101      	movs	r1, #1
 801bd06:	6878      	ldr	r0, [r7, #4]
 801bd08:	f7ff ff78 	bl	801bbfc <MSC_BOT_SendCSW>
 801bd0c:	e002      	b.n	801bd14 <MSC_BOT_CplClrFeature+0x54>
    return;
 801bd0e:	bf00      	nop
 801bd10:	e000      	b.n	801bd14 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801bd12:	bf00      	nop
  }
}
 801bd14:	3710      	adds	r7, #16
 801bd16:	46bd      	mov	sp, r7
 801bd18:	bd80      	pop	{r7, pc}
	...

0801bd1c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b086      	sub	sp, #24
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	60f8      	str	r0, [r7, #12]
 801bd24:	460b      	mov	r3, r1
 801bd26:	607a      	str	r2, [r7, #4]
 801bd28:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bd30:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bd32:	693b      	ldr	r3, [r7, #16]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d102      	bne.n	801bd3e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801bd38:	f04f 33ff 	mov.w	r3, #4294967295
 801bd3c:	e168      	b.n	801c010 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	2baa      	cmp	r3, #170	; 0xaa
 801bd44:	f000 8144 	beq.w	801bfd0 <SCSI_ProcessCmd+0x2b4>
 801bd48:	2baa      	cmp	r3, #170	; 0xaa
 801bd4a:	f300 8153 	bgt.w	801bff4 <SCSI_ProcessCmd+0x2d8>
 801bd4e:	2ba8      	cmp	r3, #168	; 0xa8
 801bd50:	f000 812c 	beq.w	801bfac <SCSI_ProcessCmd+0x290>
 801bd54:	2ba8      	cmp	r3, #168	; 0xa8
 801bd56:	f300 814d 	bgt.w	801bff4 <SCSI_ProcessCmd+0x2d8>
 801bd5a:	2b5a      	cmp	r3, #90	; 0x5a
 801bd5c:	f300 80c0 	bgt.w	801bee0 <SCSI_ProcessCmd+0x1c4>
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	f2c0 8147 	blt.w	801bff4 <SCSI_ProcessCmd+0x2d8>
 801bd66:	2b5a      	cmp	r3, #90	; 0x5a
 801bd68:	f200 8144 	bhi.w	801bff4 <SCSI_ProcessCmd+0x2d8>
 801bd6c:	a201      	add	r2, pc, #4	; (adr r2, 801bd74 <SCSI_ProcessCmd+0x58>)
 801bd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd72:	bf00      	nop
 801bd74:	0801bee7 	.word	0x0801bee7
 801bd78:	0801bff5 	.word	0x0801bff5
 801bd7c:	0801bff5 	.word	0x0801bff5
 801bd80:	0801bef9 	.word	0x0801bef9
 801bd84:	0801bff5 	.word	0x0801bff5
 801bd88:	0801bff5 	.word	0x0801bff5
 801bd8c:	0801bff5 	.word	0x0801bff5
 801bd90:	0801bff5 	.word	0x0801bff5
 801bd94:	0801bff5 	.word	0x0801bff5
 801bd98:	0801bff5 	.word	0x0801bff5
 801bd9c:	0801bff5 	.word	0x0801bff5
 801bda0:	0801bff5 	.word	0x0801bff5
 801bda4:	0801bff5 	.word	0x0801bff5
 801bda8:	0801bff5 	.word	0x0801bff5
 801bdac:	0801bff5 	.word	0x0801bff5
 801bdb0:	0801bff5 	.word	0x0801bff5
 801bdb4:	0801bff5 	.word	0x0801bff5
 801bdb8:	0801bff5 	.word	0x0801bff5
 801bdbc:	0801bf0b 	.word	0x0801bf0b
 801bdc0:	0801bff5 	.word	0x0801bff5
 801bdc4:	0801bff5 	.word	0x0801bff5
 801bdc8:	0801bff5 	.word	0x0801bff5
 801bdcc:	0801bff5 	.word	0x0801bff5
 801bdd0:	0801bff5 	.word	0x0801bff5
 801bdd4:	0801bff5 	.word	0x0801bff5
 801bdd8:	0801bff5 	.word	0x0801bff5
 801bddc:	0801bf41 	.word	0x0801bf41
 801bde0:	0801bf1d 	.word	0x0801bf1d
 801bde4:	0801bff5 	.word	0x0801bff5
 801bde8:	0801bff5 	.word	0x0801bff5
 801bdec:	0801bf2f 	.word	0x0801bf2f
 801bdf0:	0801bff5 	.word	0x0801bff5
 801bdf4:	0801bff5 	.word	0x0801bff5
 801bdf8:	0801bff5 	.word	0x0801bff5
 801bdfc:	0801bff5 	.word	0x0801bff5
 801be00:	0801bf65 	.word	0x0801bf65
 801be04:	0801bff5 	.word	0x0801bff5
 801be08:	0801bf77 	.word	0x0801bf77
 801be0c:	0801bff5 	.word	0x0801bff5
 801be10:	0801bff5 	.word	0x0801bff5
 801be14:	0801bf9b 	.word	0x0801bf9b
 801be18:	0801bff5 	.word	0x0801bff5
 801be1c:	0801bfbf 	.word	0x0801bfbf
 801be20:	0801bff5 	.word	0x0801bff5
 801be24:	0801bff5 	.word	0x0801bff5
 801be28:	0801bff5 	.word	0x0801bff5
 801be2c:	0801bff5 	.word	0x0801bff5
 801be30:	0801bfe3 	.word	0x0801bfe3
 801be34:	0801bff5 	.word	0x0801bff5
 801be38:	0801bff5 	.word	0x0801bff5
 801be3c:	0801bff5 	.word	0x0801bff5
 801be40:	0801bff5 	.word	0x0801bff5
 801be44:	0801bff5 	.word	0x0801bff5
 801be48:	0801bff5 	.word	0x0801bff5
 801be4c:	0801bff5 	.word	0x0801bff5
 801be50:	0801bff5 	.word	0x0801bff5
 801be54:	0801bff5 	.word	0x0801bff5
 801be58:	0801bff5 	.word	0x0801bff5
 801be5c:	0801bff5 	.word	0x0801bff5
 801be60:	0801bff5 	.word	0x0801bff5
 801be64:	0801bff5 	.word	0x0801bff5
 801be68:	0801bff5 	.word	0x0801bff5
 801be6c:	0801bff5 	.word	0x0801bff5
 801be70:	0801bff5 	.word	0x0801bff5
 801be74:	0801bff5 	.word	0x0801bff5
 801be78:	0801bff5 	.word	0x0801bff5
 801be7c:	0801bff5 	.word	0x0801bff5
 801be80:	0801bff5 	.word	0x0801bff5
 801be84:	0801bff5 	.word	0x0801bff5
 801be88:	0801bff5 	.word	0x0801bff5
 801be8c:	0801bff5 	.word	0x0801bff5
 801be90:	0801bff5 	.word	0x0801bff5
 801be94:	0801bff5 	.word	0x0801bff5
 801be98:	0801bff5 	.word	0x0801bff5
 801be9c:	0801bff5 	.word	0x0801bff5
 801bea0:	0801bff5 	.word	0x0801bff5
 801bea4:	0801bff5 	.word	0x0801bff5
 801bea8:	0801bff5 	.word	0x0801bff5
 801beac:	0801bff5 	.word	0x0801bff5
 801beb0:	0801bff5 	.word	0x0801bff5
 801beb4:	0801bff5 	.word	0x0801bff5
 801beb8:	0801bff5 	.word	0x0801bff5
 801bebc:	0801bff5 	.word	0x0801bff5
 801bec0:	0801bff5 	.word	0x0801bff5
 801bec4:	0801bff5 	.word	0x0801bff5
 801bec8:	0801bff5 	.word	0x0801bff5
 801becc:	0801bff5 	.word	0x0801bff5
 801bed0:	0801bff5 	.word	0x0801bff5
 801bed4:	0801bff5 	.word	0x0801bff5
 801bed8:	0801bff5 	.word	0x0801bff5
 801bedc:	0801bf53 	.word	0x0801bf53
 801bee0:	2b9e      	cmp	r3, #158	; 0x9e
 801bee2:	d051      	beq.n	801bf88 <SCSI_ProcessCmd+0x26c>
 801bee4:	e086      	b.n	801bff4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801bee6:	7afb      	ldrb	r3, [r7, #11]
 801bee8:	687a      	ldr	r2, [r7, #4]
 801beea:	4619      	mov	r1, r3
 801beec:	68f8      	ldr	r0, [r7, #12]
 801beee:	f000 f893 	bl	801c018 <SCSI_TestUnitReady>
 801bef2:	4603      	mov	r3, r0
 801bef4:	75fb      	strb	r3, [r7, #23]
      break;
 801bef6:	e089      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801bef8:	7afb      	ldrb	r3, [r7, #11]
 801befa:	687a      	ldr	r2, [r7, #4]
 801befc:	4619      	mov	r1, r3
 801befe:	68f8      	ldr	r0, [r7, #12]
 801bf00:	f000 fb38 	bl	801c574 <SCSI_RequestSense>
 801bf04:	4603      	mov	r3, r0
 801bf06:	75fb      	strb	r3, [r7, #23]
      break;
 801bf08:	e080      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801bf0a:	7afb      	ldrb	r3, [r7, #11]
 801bf0c:	687a      	ldr	r2, [r7, #4]
 801bf0e:	4619      	mov	r1, r3
 801bf10:	68f8      	ldr	r0, [r7, #12]
 801bf12:	f000 f8d1 	bl	801c0b8 <SCSI_Inquiry>
 801bf16:	4603      	mov	r3, r0
 801bf18:	75fb      	strb	r3, [r7, #23]
      break;
 801bf1a:	e077      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801bf1c:	7afb      	ldrb	r3, [r7, #11]
 801bf1e:	687a      	ldr	r2, [r7, #4]
 801bf20:	4619      	mov	r1, r3
 801bf22:	68f8      	ldr	r0, [r7, #12]
 801bf24:	f000 fbec 	bl	801c700 <SCSI_StartStopUnit>
 801bf28:	4603      	mov	r3, r0
 801bf2a:	75fb      	strb	r3, [r7, #23]
      break;
 801bf2c:	e06e      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801bf2e:	7afb      	ldrb	r3, [r7, #11]
 801bf30:	687a      	ldr	r2, [r7, #4]
 801bf32:	4619      	mov	r1, r3
 801bf34:	68f8      	ldr	r0, [r7, #12]
 801bf36:	f000 fc34 	bl	801c7a2 <SCSI_AllowPreventRemovable>
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	75fb      	strb	r3, [r7, #23]
      break;
 801bf3e:	e065      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801bf40:	7afb      	ldrb	r3, [r7, #11]
 801bf42:	687a      	ldr	r2, [r7, #4]
 801bf44:	4619      	mov	r1, r3
 801bf46:	68f8      	ldr	r0, [r7, #12]
 801bf48:	f000 fabc 	bl	801c4c4 <SCSI_ModeSense6>
 801bf4c:	4603      	mov	r3, r0
 801bf4e:	75fb      	strb	r3, [r7, #23]
      break;
 801bf50:	e05c      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801bf52:	7afb      	ldrb	r3, [r7, #11]
 801bf54:	687a      	ldr	r2, [r7, #4]
 801bf56:	4619      	mov	r1, r3
 801bf58:	68f8      	ldr	r0, [r7, #12]
 801bf5a:	f000 fadf 	bl	801c51c <SCSI_ModeSense10>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	75fb      	strb	r3, [r7, #23]
      break;
 801bf62:	e053      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801bf64:	7afb      	ldrb	r3, [r7, #11]
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	4619      	mov	r1, r3
 801bf6a:	68f8      	ldr	r0, [r7, #12]
 801bf6c:	f000 fa37 	bl	801c3de <SCSI_ReadFormatCapacity>
 801bf70:	4603      	mov	r3, r0
 801bf72:	75fb      	strb	r3, [r7, #23]
      break;
 801bf74:	e04a      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801bf76:	7afb      	ldrb	r3, [r7, #11]
 801bf78:	687a      	ldr	r2, [r7, #4]
 801bf7a:	4619      	mov	r1, r3
 801bf7c:	68f8      	ldr	r0, [r7, #12]
 801bf7e:	f000 f90f 	bl	801c1a0 <SCSI_ReadCapacity10>
 801bf82:	4603      	mov	r3, r0
 801bf84:	75fb      	strb	r3, [r7, #23]
      break;
 801bf86:	e041      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801bf88:	7afb      	ldrb	r3, [r7, #11]
 801bf8a:	687a      	ldr	r2, [r7, #4]
 801bf8c:	4619      	mov	r1, r3
 801bf8e:	68f8      	ldr	r0, [r7, #12]
 801bf90:	f000 f97b 	bl	801c28a <SCSI_ReadCapacity16>
 801bf94:	4603      	mov	r3, r0
 801bf96:	75fb      	strb	r3, [r7, #23]
      break;
 801bf98:	e038      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801bf9a:	7afb      	ldrb	r3, [r7, #11]
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	4619      	mov	r1, r3
 801bfa0:	68f8      	ldr	r0, [r7, #12]
 801bfa2:	f000 fc27 	bl	801c7f4 <SCSI_Read10>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	75fb      	strb	r3, [r7, #23]
      break;
 801bfaa:	e02f      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801bfac:	7afb      	ldrb	r3, [r7, #11]
 801bfae:	687a      	ldr	r2, [r7, #4]
 801bfb0:	4619      	mov	r1, r3
 801bfb2:	68f8      	ldr	r0, [r7, #12]
 801bfb4:	f000 fcbe 	bl	801c934 <SCSI_Read12>
 801bfb8:	4603      	mov	r3, r0
 801bfba:	75fb      	strb	r3, [r7, #23]
      break;
 801bfbc:	e026      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801bfbe:	7afb      	ldrb	r3, [r7, #11]
 801bfc0:	687a      	ldr	r2, [r7, #4]
 801bfc2:	4619      	mov	r1, r3
 801bfc4:	68f8      	ldr	r0, [r7, #12]
 801bfc6:	f000 fd60 	bl	801ca8a <SCSI_Write10>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	75fb      	strb	r3, [r7, #23]
      break;
 801bfce:	e01d      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801bfd0:	7afb      	ldrb	r3, [r7, #11]
 801bfd2:	687a      	ldr	r2, [r7, #4]
 801bfd4:	4619      	mov	r1, r3
 801bfd6:	68f8      	ldr	r0, [r7, #12]
 801bfd8:	f000 fe1c 	bl	801cc14 <SCSI_Write12>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	75fb      	strb	r3, [r7, #23]
      break;
 801bfe0:	e014      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801bfe2:	7afb      	ldrb	r3, [r7, #11]
 801bfe4:	687a      	ldr	r2, [r7, #4]
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	68f8      	ldr	r0, [r7, #12]
 801bfea:	f000 fee8 	bl	801cdbe <SCSI_Verify10>
 801bfee:	4603      	mov	r3, r0
 801bff0:	75fb      	strb	r3, [r7, #23]
      break;
 801bff2:	e00b      	b.n	801c00c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801bff4:	7af9      	ldrb	r1, [r7, #11]
 801bff6:	2320      	movs	r3, #32
 801bff8:	2205      	movs	r2, #5
 801bffa:	68f8      	ldr	r0, [r7, #12]
 801bffc:	f000 fb39 	bl	801c672 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801c000:	693b      	ldr	r3, [r7, #16]
 801c002:	2202      	movs	r2, #2
 801c004:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801c006:	23ff      	movs	r3, #255	; 0xff
 801c008:	75fb      	strb	r3, [r7, #23]
      break;
 801c00a:	bf00      	nop
  }

  return ret;
 801c00c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c010:	4618      	mov	r0, r3
 801c012:	3718      	adds	r7, #24
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}

0801c018 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c018:	b580      	push	{r7, lr}
 801c01a:	b086      	sub	sp, #24
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	60f8      	str	r0, [r7, #12]
 801c020:	460b      	mov	r3, r1
 801c022:	607a      	str	r2, [r7, #4]
 801c024:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c02c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c02e:	697b      	ldr	r3, [r7, #20]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d102      	bne.n	801c03a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801c034:	f04f 33ff 	mov.w	r3, #4294967295
 801c038:	e03a      	b.n	801c0b0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801c03a:	697b      	ldr	r3, [r7, #20]
 801c03c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c040:	2b00      	cmp	r3, #0
 801c042:	d00a      	beq.n	801c05a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c044:	697b      	ldr	r3, [r7, #20]
 801c046:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c04a:	2320      	movs	r3, #32
 801c04c:	2205      	movs	r2, #5
 801c04e:	68f8      	ldr	r0, [r7, #12]
 801c050:	f000 fb0f 	bl	801c672 <SCSI_SenseCode>

    return -1;
 801c054:	f04f 33ff 	mov.w	r3, #4294967295
 801c058:	e02a      	b.n	801c0b0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c05a:	697b      	ldr	r3, [r7, #20]
 801c05c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c060:	2b02      	cmp	r3, #2
 801c062:	d10b      	bne.n	801c07c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c064:	7af9      	ldrb	r1, [r7, #11]
 801c066:	233a      	movs	r3, #58	; 0x3a
 801c068:	2202      	movs	r2, #2
 801c06a:	68f8      	ldr	r0, [r7, #12]
 801c06c:	f000 fb01 	bl	801c672 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801c070:	697b      	ldr	r3, [r7, #20]
 801c072:	2205      	movs	r2, #5
 801c074:	721a      	strb	r2, [r3, #8]
    return -1;
 801c076:	f04f 33ff 	mov.w	r3, #4294967295
 801c07a:	e019      	b.n	801c0b0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c082:	689b      	ldr	r3, [r3, #8]
 801c084:	7afa      	ldrb	r2, [r7, #11]
 801c086:	4610      	mov	r0, r2
 801c088:	4798      	blx	r3
 801c08a:	4603      	mov	r3, r0
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d00b      	beq.n	801c0a8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c090:	7af9      	ldrb	r1, [r7, #11]
 801c092:	233a      	movs	r3, #58	; 0x3a
 801c094:	2202      	movs	r2, #2
 801c096:	68f8      	ldr	r0, [r7, #12]
 801c098:	f000 faeb 	bl	801c672 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801c09c:	697b      	ldr	r3, [r7, #20]
 801c09e:	2205      	movs	r2, #5
 801c0a0:	721a      	strb	r2, [r3, #8]

    return -1;
 801c0a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c0a6:	e003      	b.n	801c0b0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801c0a8:	697b      	ldr	r3, [r7, #20]
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	60da      	str	r2, [r3, #12]

  return 0;
 801c0ae:	2300      	movs	r3, #0
}
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	3718      	adds	r7, #24
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	bd80      	pop	{r7, pc}

0801c0b8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b088      	sub	sp, #32
 801c0bc:	af00      	add	r7, sp, #0
 801c0be:	60f8      	str	r0, [r7, #12]
 801c0c0:	460b      	mov	r3, r1
 801c0c2:	607a      	str	r2, [r7, #4]
 801c0c4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c0cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c0ce:	69bb      	ldr	r3, [r7, #24]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d102      	bne.n	801c0da <SCSI_Inquiry+0x22>
  {
    return -1;
 801c0d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0d8:	e05a      	b.n	801c190 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c0da:	69bb      	ldr	r3, [r7, #24]
 801c0dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d10a      	bne.n	801c0fa <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c0e4:	69bb      	ldr	r3, [r7, #24]
 801c0e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c0ea:	2320      	movs	r3, #32
 801c0ec:	2205      	movs	r2, #5
 801c0ee:	68f8      	ldr	r0, [r7, #12]
 801c0f0:	f000 fabf 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801c0f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0f8:	e04a      	b.n	801c190 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	781b      	ldrb	r3, [r3, #0]
 801c100:	f003 0301 	and.w	r3, r3, #1
 801c104:	2b00      	cmp	r3, #0
 801c106:	d020      	beq.n	801c14a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	3302      	adds	r3, #2
 801c10c:	781b      	ldrb	r3, [r3, #0]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d105      	bne.n	801c11e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801c112:	2206      	movs	r2, #6
 801c114:	4920      	ldr	r1, [pc, #128]	; (801c198 <SCSI_Inquiry+0xe0>)
 801c116:	69b8      	ldr	r0, [r7, #24]
 801c118:	f000 ffb4 	bl	801d084 <SCSI_UpdateBotData>
 801c11c:	e037      	b.n	801c18e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	3302      	adds	r3, #2
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	2b80      	cmp	r3, #128	; 0x80
 801c126:	d105      	bne.n	801c134 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801c128:	2208      	movs	r2, #8
 801c12a:	491c      	ldr	r1, [pc, #112]	; (801c19c <SCSI_Inquiry+0xe4>)
 801c12c:	69b8      	ldr	r0, [r7, #24]
 801c12e:	f000 ffa9 	bl	801d084 <SCSI_UpdateBotData>
 801c132:	e02c      	b.n	801c18e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801c134:	69bb      	ldr	r3, [r7, #24]
 801c136:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c13a:	2324      	movs	r3, #36	; 0x24
 801c13c:	2205      	movs	r2, #5
 801c13e:	68f8      	ldr	r0, [r7, #12]
 801c140:	f000 fa97 	bl	801c672 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801c144:	f04f 33ff 	mov.w	r3, #4294967295
 801c148:	e022      	b.n	801c190 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserDataMSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c150:	69d9      	ldr	r1, [r3, #28]
 801c152:	7afa      	ldrb	r2, [r7, #11]
 801c154:	4613      	mov	r3, r2
 801c156:	00db      	lsls	r3, r3, #3
 801c158:	4413      	add	r3, r2
 801c15a:	009b      	lsls	r3, r3, #2
 801c15c:	440b      	add	r3, r1
 801c15e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801c160:	697b      	ldr	r3, [r7, #20]
 801c162:	3304      	adds	r3, #4
 801c164:	781b      	ldrb	r3, [r3, #0]
 801c166:	b29b      	uxth	r3, r3
 801c168:	3305      	adds	r3, #5
 801c16a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	3304      	adds	r3, #4
 801c170:	781b      	ldrb	r3, [r3, #0]
 801c172:	b29b      	uxth	r3, r3
 801c174:	8bfa      	ldrh	r2, [r7, #30]
 801c176:	429a      	cmp	r2, r3
 801c178:	d303      	bcc.n	801c182 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	3304      	adds	r3, #4
 801c17e:	781b      	ldrb	r3, [r3, #0]
 801c180:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801c182:	8bfb      	ldrh	r3, [r7, #30]
 801c184:	461a      	mov	r2, r3
 801c186:	6979      	ldr	r1, [r7, #20]
 801c188:	69b8      	ldr	r0, [r7, #24]
 801c18a:	f000 ff7b 	bl	801d084 <SCSI_UpdateBotData>
  }

  return 0;
 801c18e:	2300      	movs	r3, #0
}
 801c190:	4618      	mov	r0, r3
 801c192:	3720      	adds	r7, #32
 801c194:	46bd      	mov	sp, r7
 801c196:	bd80      	pop	{r7, pc}
 801c198:	20000558 	.word	0x20000558
 801c19c:	20000560 	.word	0x20000560

0801c1a0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b086      	sub	sp, #24
 801c1a4:	af00      	add	r7, sp, #0
 801c1a6:	60f8      	str	r0, [r7, #12]
 801c1a8:	460b      	mov	r3, r1
 801c1aa:	607a      	str	r2, [r7, #4]
 801c1ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c1b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c1b6:	697b      	ldr	r3, [r7, #20]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d102      	bne.n	801c1c2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801c1bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c1c0:	e05f      	b.n	801c282 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c1c8:	685b      	ldr	r3, [r3, #4]
 801c1ca:	697a      	ldr	r2, [r7, #20]
 801c1cc:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c1d0:	697a      	ldr	r2, [r7, #20]
 801c1d2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c1d6:	7af8      	ldrb	r0, [r7, #11]
 801c1d8:	4798      	blx	r3
 801c1da:	4603      	mov	r3, r0
 801c1dc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c1de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d104      	bne.n	801c1f0 <SCSI_ReadCapacity10+0x50>
 801c1e6:	697b      	ldr	r3, [r7, #20]
 801c1e8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c1ec:	2b02      	cmp	r3, #2
 801c1ee:	d108      	bne.n	801c202 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c1f0:	7af9      	ldrb	r1, [r7, #11]
 801c1f2:	233a      	movs	r3, #58	; 0x3a
 801c1f4:	2202      	movs	r2, #2
 801c1f6:	68f8      	ldr	r0, [r7, #12]
 801c1f8:	f000 fa3b 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801c1fc:	f04f 33ff 	mov.w	r3, #4294967295
 801c200:	e03f      	b.n	801c282 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c202:	697b      	ldr	r3, [r7, #20]
 801c204:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c208:	3b01      	subs	r3, #1
 801c20a:	0e1b      	lsrs	r3, r3, #24
 801c20c:	b2da      	uxtb	r2, r3
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c212:	697b      	ldr	r3, [r7, #20]
 801c214:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c218:	3b01      	subs	r3, #1
 801c21a:	0c1b      	lsrs	r3, r3, #16
 801c21c:	b2da      	uxtb	r2, r3
 801c21e:	697b      	ldr	r3, [r7, #20]
 801c220:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c222:	697b      	ldr	r3, [r7, #20]
 801c224:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c228:	3b01      	subs	r3, #1
 801c22a:	0a1b      	lsrs	r3, r3, #8
 801c22c:	b2da      	uxtb	r2, r3
 801c22e:	697b      	ldr	r3, [r7, #20]
 801c230:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c232:	697b      	ldr	r3, [r7, #20]
 801c234:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c238:	b2db      	uxtb	r3, r3
 801c23a:	3b01      	subs	r3, #1
 801c23c:	b2da      	uxtb	r2, r3
 801c23e:	697b      	ldr	r3, [r7, #20]
 801c240:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c242:	697b      	ldr	r3, [r7, #20]
 801c244:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c248:	161b      	asrs	r3, r3, #24
 801c24a:	b2da      	uxtb	r2, r3
 801c24c:	697b      	ldr	r3, [r7, #20]
 801c24e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c250:	697b      	ldr	r3, [r7, #20]
 801c252:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c256:	141b      	asrs	r3, r3, #16
 801c258:	b2da      	uxtb	r2, r3
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c25e:	697b      	ldr	r3, [r7, #20]
 801c260:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c264:	0a1b      	lsrs	r3, r3, #8
 801c266:	b29b      	uxth	r3, r3
 801c268:	b2da      	uxtb	r2, r3
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801c26e:	697b      	ldr	r3, [r7, #20]
 801c270:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c274:	b2da      	uxtb	r2, r3
 801c276:	697b      	ldr	r3, [r7, #20]
 801c278:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801c27a:	697b      	ldr	r3, [r7, #20]
 801c27c:	2208      	movs	r2, #8
 801c27e:	60da      	str	r2, [r3, #12]

  return 0;
 801c280:	2300      	movs	r3, #0

}
 801c282:	4618      	mov	r0, r3
 801c284:	3718      	adds	r7, #24
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}

0801c28a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c28a:	b580      	push	{r7, lr}
 801c28c:	b088      	sub	sp, #32
 801c28e:	af00      	add	r7, sp, #0
 801c290:	60f8      	str	r0, [r7, #12]
 801c292:	460b      	mov	r3, r1
 801c294:	607a      	str	r2, [r7, #4]
 801c296:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c29e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c2a0:	69bb      	ldr	r3, [r7, #24]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d102      	bne.n	801c2ac <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801c2a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c2aa:	e094      	b.n	801c3d6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c2b2:	685b      	ldr	r3, [r3, #4]
 801c2b4:	69ba      	ldr	r2, [r7, #24]
 801c2b6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c2ba:	69ba      	ldr	r2, [r7, #24]
 801c2bc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c2c0:	7af8      	ldrb	r0, [r7, #11]
 801c2c2:	4798      	blx	r3
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c2c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d104      	bne.n	801c2da <SCSI_ReadCapacity16+0x50>
 801c2d0:	69bb      	ldr	r3, [r7, #24]
 801c2d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c2d6:	2b02      	cmp	r3, #2
 801c2d8:	d108      	bne.n	801c2ec <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c2da:	7af9      	ldrb	r1, [r7, #11]
 801c2dc:	233a      	movs	r3, #58	; 0x3a
 801c2de:	2202      	movs	r2, #2
 801c2e0:	68f8      	ldr	r0, [r7, #12]
 801c2e2:	f000 f9c6 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801c2e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c2ea:	e074      	b.n	801c3d6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	330a      	adds	r3, #10
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	330b      	adds	r3, #11
 801c2f8:	781b      	ldrb	r3, [r3, #0]
 801c2fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c2fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	330c      	adds	r3, #12
 801c302:	781b      	ldrb	r3, [r3, #0]
 801c304:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c306:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c308:	687a      	ldr	r2, [r7, #4]
 801c30a:	320d      	adds	r2, #13
 801c30c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c30e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c310:	69bb      	ldr	r3, [r7, #24]
 801c312:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c314:	2300      	movs	r3, #0
 801c316:	77fb      	strb	r3, [r7, #31]
 801c318:	e007      	b.n	801c32a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801c31a:	7ffb      	ldrb	r3, [r7, #31]
 801c31c:	69ba      	ldr	r2, [r7, #24]
 801c31e:	4413      	add	r3, r2
 801c320:	2200      	movs	r2, #0
 801c322:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c324:	7ffb      	ldrb	r3, [r7, #31]
 801c326:	3301      	adds	r3, #1
 801c328:	77fb      	strb	r3, [r7, #31]
 801c32a:	7ffa      	ldrb	r2, [r7, #31]
 801c32c:	69bb      	ldr	r3, [r7, #24]
 801c32e:	68db      	ldr	r3, [r3, #12]
 801c330:	429a      	cmp	r2, r3
 801c332:	d3f2      	bcc.n	801c31a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c334:	69bb      	ldr	r3, [r7, #24]
 801c336:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c33a:	3b01      	subs	r3, #1
 801c33c:	0e1b      	lsrs	r3, r3, #24
 801c33e:	b2da      	uxtb	r2, r3
 801c340:	69bb      	ldr	r3, [r7, #24]
 801c342:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c344:	69bb      	ldr	r3, [r7, #24]
 801c346:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c34a:	3b01      	subs	r3, #1
 801c34c:	0c1b      	lsrs	r3, r3, #16
 801c34e:	b2da      	uxtb	r2, r3
 801c350:	69bb      	ldr	r3, [r7, #24]
 801c352:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c354:	69bb      	ldr	r3, [r7, #24]
 801c356:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c35a:	3b01      	subs	r3, #1
 801c35c:	0a1b      	lsrs	r3, r3, #8
 801c35e:	b2da      	uxtb	r2, r3
 801c360:	69bb      	ldr	r3, [r7, #24]
 801c362:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c364:	69bb      	ldr	r3, [r7, #24]
 801c366:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c36a:	b2db      	uxtb	r3, r3
 801c36c:	3b01      	subs	r3, #1
 801c36e:	b2da      	uxtb	r2, r3
 801c370:	69bb      	ldr	r3, [r7, #24]
 801c372:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c374:	69bb      	ldr	r3, [r7, #24]
 801c376:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c37a:	161b      	asrs	r3, r3, #24
 801c37c:	b2da      	uxtb	r2, r3
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c382:	69bb      	ldr	r3, [r7, #24]
 801c384:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c388:	141b      	asrs	r3, r3, #16
 801c38a:	b2da      	uxtb	r2, r3
 801c38c:	69bb      	ldr	r3, [r7, #24]
 801c38e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c390:	69bb      	ldr	r3, [r7, #24]
 801c392:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c396:	0a1b      	lsrs	r3, r3, #8
 801c398:	b29b      	uxth	r3, r3
 801c39a:	b2da      	uxtb	r2, r3
 801c39c:	69bb      	ldr	r3, [r7, #24]
 801c39e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c3a6:	b2da      	uxtb	r2, r3
 801c3a8:	69bb      	ldr	r3, [r7, #24]
 801c3aa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	330a      	adds	r3, #10
 801c3b0:	781b      	ldrb	r3, [r3, #0]
 801c3b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	330b      	adds	r3, #11
 801c3b8:	781b      	ldrb	r3, [r3, #0]
 801c3ba:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c3bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	330c      	adds	r3, #12
 801c3c2:	781b      	ldrb	r3, [r3, #0]
 801c3c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c3c6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c3c8:	687a      	ldr	r2, [r7, #4]
 801c3ca:	320d      	adds	r2, #13
 801c3cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c3ce:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c3d0:	69bb      	ldr	r3, [r7, #24]
 801c3d2:	60da      	str	r2, [r3, #12]

  return 0;
 801c3d4:	2300      	movs	r3, #0
}
 801c3d6:	4618      	mov	r0, r3
 801c3d8:	3720      	adds	r7, #32
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	bd80      	pop	{r7, pc}

0801c3de <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c3de:	b580      	push	{r7, lr}
 801c3e0:	b088      	sub	sp, #32
 801c3e2:	af00      	add	r7, sp, #0
 801c3e4:	60f8      	str	r0, [r7, #12]
 801c3e6:	460b      	mov	r3, r1
 801c3e8:	607a      	str	r2, [r7, #4]
 801c3ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c3f2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c3f4:	69bb      	ldr	r3, [r7, #24]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d102      	bne.n	801c400 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801c3fa:	f04f 33ff 	mov.w	r3, #4294967295
 801c3fe:	e05c      	b.n	801c4ba <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c406:	685b      	ldr	r3, [r3, #4]
 801c408:	f107 0214 	add.w	r2, r7, #20
 801c40c:	f107 0110 	add.w	r1, r7, #16
 801c410:	7af8      	ldrb	r0, [r7, #11]
 801c412:	4798      	blx	r3
 801c414:	4603      	mov	r3, r0
 801c416:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d104      	bne.n	801c42a <SCSI_ReadFormatCapacity+0x4c>
 801c420:	69bb      	ldr	r3, [r7, #24]
 801c422:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c426:	2b02      	cmp	r3, #2
 801c428:	d108      	bne.n	801c43c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c42a:	7af9      	ldrb	r1, [r7, #11]
 801c42c:	233a      	movs	r3, #58	; 0x3a
 801c42e:	2202      	movs	r2, #2
 801c430:	68f8      	ldr	r0, [r7, #12]
 801c432:	f000 f91e 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801c436:	f04f 33ff 	mov.w	r3, #4294967295
 801c43a:	e03e      	b.n	801c4ba <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801c43c:	2300      	movs	r3, #0
 801c43e:	83fb      	strh	r3, [r7, #30]
 801c440:	e007      	b.n	801c452 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801c442:	8bfb      	ldrh	r3, [r7, #30]
 801c444:	69ba      	ldr	r2, [r7, #24]
 801c446:	4413      	add	r3, r2
 801c448:	2200      	movs	r2, #0
 801c44a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801c44c:	8bfb      	ldrh	r3, [r7, #30]
 801c44e:	3301      	adds	r3, #1
 801c450:	83fb      	strh	r3, [r7, #30]
 801c452:	8bfb      	ldrh	r3, [r7, #30]
 801c454:	2b0b      	cmp	r3, #11
 801c456:	d9f4      	bls.n	801c442 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 801c458:	69bb      	ldr	r3, [r7, #24]
 801c45a:	2208      	movs	r2, #8
 801c45c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801c45e:	693b      	ldr	r3, [r7, #16]
 801c460:	3b01      	subs	r3, #1
 801c462:	0e1b      	lsrs	r3, r3, #24
 801c464:	b2da      	uxtb	r2, r3
 801c466:	69bb      	ldr	r3, [r7, #24]
 801c468:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801c46a:	693b      	ldr	r3, [r7, #16]
 801c46c:	3b01      	subs	r3, #1
 801c46e:	0c1b      	lsrs	r3, r3, #16
 801c470:	b2da      	uxtb	r2, r3
 801c472:	69bb      	ldr	r3, [r7, #24]
 801c474:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801c476:	693b      	ldr	r3, [r7, #16]
 801c478:	3b01      	subs	r3, #1
 801c47a:	0a1b      	lsrs	r3, r3, #8
 801c47c:	b2da      	uxtb	r2, r3
 801c47e:	69bb      	ldr	r3, [r7, #24]
 801c480:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801c482:	693b      	ldr	r3, [r7, #16]
 801c484:	b2db      	uxtb	r3, r3
 801c486:	3b01      	subs	r3, #1
 801c488:	b2da      	uxtb	r2, r3
 801c48a:	69bb      	ldr	r3, [r7, #24]
 801c48c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801c48e:	69bb      	ldr	r3, [r7, #24]
 801c490:	2202      	movs	r2, #2
 801c492:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801c494:	8abb      	ldrh	r3, [r7, #20]
 801c496:	141b      	asrs	r3, r3, #16
 801c498:	b2da      	uxtb	r2, r3
 801c49a:	69bb      	ldr	r3, [r7, #24]
 801c49c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801c49e:	8abb      	ldrh	r3, [r7, #20]
 801c4a0:	0a1b      	lsrs	r3, r3, #8
 801c4a2:	b29b      	uxth	r3, r3
 801c4a4:	b2da      	uxtb	r2, r3
 801c4a6:	69bb      	ldr	r3, [r7, #24]
 801c4a8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801c4aa:	8abb      	ldrh	r3, [r7, #20]
 801c4ac:	b2da      	uxtb	r2, r3
 801c4ae:	69bb      	ldr	r3, [r7, #24]
 801c4b0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801c4b2:	69bb      	ldr	r3, [r7, #24]
 801c4b4:	220c      	movs	r2, #12
 801c4b6:	60da      	str	r2, [r3, #12]

  return 0;
 801c4b8:	2300      	movs	r3, #0
}
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	3720      	adds	r7, #32
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	bd80      	pop	{r7, pc}
	...

0801c4c4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b086      	sub	sp, #24
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	60f8      	str	r0, [r7, #12]
 801c4cc:	460b      	mov	r3, r1
 801c4ce:	607a      	str	r2, [r7, #4]
 801c4d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c4d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801c4da:	2317      	movs	r3, #23
 801c4dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c4de:	693b      	ldr	r3, [r7, #16]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d102      	bne.n	801c4ea <SCSI_ModeSense6+0x26>
  {
    return -1;
 801c4e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c4e8:	e011      	b.n	801c50e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	3304      	adds	r3, #4
 801c4ee:	781b      	ldrb	r3, [r3, #0]
 801c4f0:	b29b      	uxth	r3, r3
 801c4f2:	8afa      	ldrh	r2, [r7, #22]
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	d303      	bcc.n	801c500 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	3304      	adds	r3, #4
 801c4fc:	781b      	ldrb	r3, [r3, #0]
 801c4fe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801c500:	8afb      	ldrh	r3, [r7, #22]
 801c502:	461a      	mov	r2, r3
 801c504:	4904      	ldr	r1, [pc, #16]	; (801c518 <SCSI_ModeSense6+0x54>)
 801c506:	6938      	ldr	r0, [r7, #16]
 801c508:	f000 fdbc 	bl	801d084 <SCSI_UpdateBotData>

  return 0;
 801c50c:	2300      	movs	r3, #0
}
 801c50e:	4618      	mov	r0, r3
 801c510:	3718      	adds	r7, #24
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	20000568 	.word	0x20000568

0801c51c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b086      	sub	sp, #24
 801c520:	af00      	add	r7, sp, #0
 801c522:	60f8      	str	r0, [r7, #12]
 801c524:	460b      	mov	r3, r1
 801c526:	607a      	str	r2, [r7, #4]
 801c528:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c530:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801c532:	231b      	movs	r3, #27
 801c534:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c536:	693b      	ldr	r3, [r7, #16]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d102      	bne.n	801c542 <SCSI_ModeSense10+0x26>
  {
    return -1;
 801c53c:	f04f 33ff 	mov.w	r3, #4294967295
 801c540:	e011      	b.n	801c566 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	3308      	adds	r3, #8
 801c546:	781b      	ldrb	r3, [r3, #0]
 801c548:	b29b      	uxth	r3, r3
 801c54a:	8afa      	ldrh	r2, [r7, #22]
 801c54c:	429a      	cmp	r2, r3
 801c54e:	d303      	bcc.n	801c558 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	3308      	adds	r3, #8
 801c554:	781b      	ldrb	r3, [r3, #0]
 801c556:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801c558:	8afb      	ldrh	r3, [r7, #22]
 801c55a:	461a      	mov	r2, r3
 801c55c:	4904      	ldr	r1, [pc, #16]	; (801c570 <SCSI_ModeSense10+0x54>)
 801c55e:	6938      	ldr	r0, [r7, #16]
 801c560:	f000 fd90 	bl	801d084 <SCSI_UpdateBotData>

  return 0;
 801c564:	2300      	movs	r3, #0
}
 801c566:	4618      	mov	r0, r3
 801c568:	3718      	adds	r7, #24
 801c56a:	46bd      	mov	sp, r7
 801c56c:	bd80      	pop	{r7, pc}
 801c56e:	bf00      	nop
 801c570:	20000580 	.word	0x20000580

0801c574 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b086      	sub	sp, #24
 801c578:	af00      	add	r7, sp, #0
 801c57a:	60f8      	str	r0, [r7, #12]
 801c57c:	460b      	mov	r3, r1
 801c57e:	607a      	str	r2, [r7, #4]
 801c580:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c588:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801c58a:	693b      	ldr	r3, [r7, #16]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d102      	bne.n	801c596 <SCSI_RequestSense+0x22>
  {
    return -1;
 801c590:	f04f 33ff 	mov.w	r3, #4294967295
 801c594:	e069      	b.n	801c66a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c596:	693b      	ldr	r3, [r7, #16]
 801c598:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d10a      	bne.n	801c5b6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c5a0:	693b      	ldr	r3, [r7, #16]
 801c5a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c5a6:	2320      	movs	r3, #32
 801c5a8:	2205      	movs	r2, #5
 801c5aa:	68f8      	ldr	r0, [r7, #12]
 801c5ac:	f000 f861 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801c5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5b4:	e059      	b.n	801c66a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	75fb      	strb	r3, [r7, #23]
 801c5ba:	e007      	b.n	801c5cc <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801c5bc:	7dfb      	ldrb	r3, [r7, #23]
 801c5be:	693a      	ldr	r2, [r7, #16]
 801c5c0:	4413      	add	r3, r2
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c5c6:	7dfb      	ldrb	r3, [r7, #23]
 801c5c8:	3301      	adds	r3, #1
 801c5ca:	75fb      	strb	r3, [r7, #23]
 801c5cc:	7dfb      	ldrb	r3, [r7, #23]
 801c5ce:	2b11      	cmp	r3, #17
 801c5d0:	d9f4      	bls.n	801c5bc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801c5d2:	693b      	ldr	r3, [r7, #16]
 801c5d4:	2270      	movs	r2, #112	; 0x70
 801c5d6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801c5d8:	693b      	ldr	r3, [r7, #16]
 801c5da:	220c      	movs	r2, #12
 801c5dc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801c5de:	693b      	ldr	r3, [r7, #16]
 801c5e0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801c5e4:	693b      	ldr	r3, [r7, #16]
 801c5e6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c5ea:	429a      	cmp	r2, r3
 801c5ec:	d02e      	beq.n	801c64c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801c5ee:	693b      	ldr	r3, [r7, #16]
 801c5f0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c5f4:	461a      	mov	r2, r3
 801c5f6:	693b      	ldr	r3, [r7, #16]
 801c5f8:	3248      	adds	r2, #72	; 0x48
 801c5fa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801c602:	693b      	ldr	r3, [r7, #16]
 801c604:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c608:	693a      	ldr	r2, [r7, #16]
 801c60a:	3348      	adds	r3, #72	; 0x48
 801c60c:	00db      	lsls	r3, r3, #3
 801c60e:	4413      	add	r3, r2
 801c610:	791a      	ldrb	r2, [r3, #4]
 801c612:	693b      	ldr	r3, [r7, #16]
 801c614:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801c616:	693b      	ldr	r3, [r7, #16]
 801c618:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c61c:	693a      	ldr	r2, [r7, #16]
 801c61e:	3348      	adds	r3, #72	; 0x48
 801c620:	00db      	lsls	r3, r3, #3
 801c622:	4413      	add	r3, r2
 801c624:	795a      	ldrb	r2, [r3, #5]
 801c626:	693b      	ldr	r3, [r7, #16]
 801c628:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801c62a:	693b      	ldr	r3, [r7, #16]
 801c62c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c630:	3301      	adds	r3, #1
 801c632:	b2da      	uxtb	r2, r3
 801c634:	693b      	ldr	r3, [r7, #16]
 801c636:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801c63a:	693b      	ldr	r3, [r7, #16]
 801c63c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c640:	2b04      	cmp	r3, #4
 801c642:	d103      	bne.n	801c64c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 801c644:	693b      	ldr	r3, [r7, #16]
 801c646:	2200      	movs	r2, #0
 801c648:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801c64c:	693b      	ldr	r3, [r7, #16]
 801c64e:	2212      	movs	r2, #18
 801c650:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	3304      	adds	r3, #4
 801c656:	781b      	ldrb	r3, [r3, #0]
 801c658:	2b12      	cmp	r3, #18
 801c65a:	d805      	bhi.n	801c668 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	3304      	adds	r3, #4
 801c660:	781b      	ldrb	r3, [r3, #0]
 801c662:	461a      	mov	r2, r3
 801c664:	693b      	ldr	r3, [r7, #16]
 801c666:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801c668:	2300      	movs	r3, #0
}
 801c66a:	4618      	mov	r0, r3
 801c66c:	3718      	adds	r7, #24
 801c66e:	46bd      	mov	sp, r7
 801c670:	bd80      	pop	{r7, pc}

0801c672 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801c672:	b480      	push	{r7}
 801c674:	b085      	sub	sp, #20
 801c676:	af00      	add	r7, sp, #0
 801c678:	6078      	str	r0, [r7, #4]
 801c67a:	4608      	mov	r0, r1
 801c67c:	4611      	mov	r1, r2
 801c67e:	461a      	mov	r2, r3
 801c680:	4603      	mov	r3, r0
 801c682:	70fb      	strb	r3, [r7, #3]
 801c684:	460b      	mov	r3, r1
 801c686:	70bb      	strb	r3, [r7, #2]
 801c688:	4613      	mov	r3, r2
 801c68a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c692:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d02c      	beq.n	801c6f4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	3248      	adds	r2, #72	; 0x48
 801c6a6:	78b9      	ldrb	r1, [r7, #2]
 801c6a8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c6b2:	68fa      	ldr	r2, [r7, #12]
 801c6b4:	3348      	adds	r3, #72	; 0x48
 801c6b6:	00db      	lsls	r3, r3, #3
 801c6b8:	4413      	add	r3, r2
 801c6ba:	787a      	ldrb	r2, [r7, #1]
 801c6bc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c6c4:	68fa      	ldr	r2, [r7, #12]
 801c6c6:	3348      	adds	r3, #72	; 0x48
 801c6c8:	00db      	lsls	r3, r3, #3
 801c6ca:	4413      	add	r3, r2
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c6d6:	3301      	adds	r3, #1
 801c6d8:	b2da      	uxtb	r2, r3
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c6e6:	2b04      	cmp	r3, #4
 801c6e8:	d105      	bne.n	801c6f6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801c6f2:	e000      	b.n	801c6f6 <SCSI_SenseCode+0x84>
    return;
 801c6f4:	bf00      	nop
  }
}
 801c6f6:	3714      	adds	r7, #20
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6fe:	4770      	bx	lr

0801c700 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b086      	sub	sp, #24
 801c704:	af00      	add	r7, sp, #0
 801c706:	60f8      	str	r0, [r7, #12]
 801c708:	460b      	mov	r3, r1
 801c70a:	607a      	str	r2, [r7, #4]
 801c70c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c714:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c716:	697b      	ldr	r3, [r7, #20]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d102      	bne.n	801c722 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801c71c:	f04f 33ff 	mov.w	r3, #4294967295
 801c720:	e03b      	b.n	801c79a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c728:	2b01      	cmp	r3, #1
 801c72a:	d10f      	bne.n	801c74c <SCSI_StartStopUnit+0x4c>
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	3304      	adds	r3, #4
 801c730:	781b      	ldrb	r3, [r3, #0]
 801c732:	f003 0303 	and.w	r3, r3, #3
 801c736:	2b02      	cmp	r3, #2
 801c738:	d108      	bne.n	801c74c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801c73a:	7af9      	ldrb	r1, [r7, #11]
 801c73c:	2324      	movs	r3, #36	; 0x24
 801c73e:	2205      	movs	r2, #5
 801c740:	68f8      	ldr	r0, [r7, #12]
 801c742:	f7ff ff96 	bl	801c672 <SCSI_SenseCode>

    return -1;
 801c746:	f04f 33ff 	mov.w	r3, #4294967295
 801c74a:	e026      	b.n	801c79a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	3304      	adds	r3, #4
 801c750:	781b      	ldrb	r3, [r3, #0]
 801c752:	f003 0303 	and.w	r3, r3, #3
 801c756:	2b01      	cmp	r3, #1
 801c758:	d104      	bne.n	801c764 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c75a:	697b      	ldr	r3, [r7, #20]
 801c75c:	2200      	movs	r2, #0
 801c75e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c762:	e016      	b.n	801c792 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	3304      	adds	r3, #4
 801c768:	781b      	ldrb	r3, [r3, #0]
 801c76a:	f003 0303 	and.w	r3, r3, #3
 801c76e:	2b02      	cmp	r3, #2
 801c770:	d104      	bne.n	801c77c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	2202      	movs	r2, #2
 801c776:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c77a:	e00a      	b.n	801c792 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	3304      	adds	r3, #4
 801c780:	781b      	ldrb	r3, [r3, #0]
 801c782:	f003 0303 	and.w	r3, r3, #3
 801c786:	2b03      	cmp	r3, #3
 801c788:	d103      	bne.n	801c792 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c78a:	697b      	ldr	r3, [r7, #20]
 801c78c:	2200      	movs	r2, #0
 801c78e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801c792:	697b      	ldr	r3, [r7, #20]
 801c794:	2200      	movs	r2, #0
 801c796:	60da      	str	r2, [r3, #12]

  return 0;
 801c798:	2300      	movs	r3, #0
}
 801c79a:	4618      	mov	r0, r3
 801c79c:	3718      	adds	r7, #24
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	bd80      	pop	{r7, pc}

0801c7a2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c7a2:	b480      	push	{r7}
 801c7a4:	b087      	sub	sp, #28
 801c7a6:	af00      	add	r7, sp, #0
 801c7a8:	60f8      	str	r0, [r7, #12]
 801c7aa:	460b      	mov	r3, r1
 801c7ac:	607a      	str	r2, [r7, #4]
 801c7ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c7b6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c7b8:	697b      	ldr	r3, [r7, #20]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d102      	bne.n	801c7c4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801c7be:	f04f 33ff 	mov.w	r3, #4294967295
 801c7c2:	e011      	b.n	801c7e8 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	3304      	adds	r3, #4
 801c7c8:	781b      	ldrb	r3, [r3, #0]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d104      	bne.n	801c7d8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	2200      	movs	r2, #0
 801c7d2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c7d6:	e003      	b.n	801c7e0 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801c7d8:	697b      	ldr	r3, [r7, #20]
 801c7da:	2201      	movs	r2, #1
 801c7dc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	2200      	movs	r2, #0
 801c7e4:	60da      	str	r2, [r3, #12]

  return 0;
 801c7e6:	2300      	movs	r3, #0
}
 801c7e8:	4618      	mov	r0, r3
 801c7ea:	371c      	adds	r7, #28
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7f2:	4770      	bx	lr

0801c7f4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b086      	sub	sp, #24
 801c7f8:	af00      	add	r7, sp, #0
 801c7fa:	60f8      	str	r0, [r7, #12]
 801c7fc:	460b      	mov	r3, r1
 801c7fe:	607a      	str	r2, [r7, #4]
 801c800:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c808:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c80a:	697b      	ldr	r3, [r7, #20]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d102      	bne.n	801c816 <SCSI_Read10+0x22>
  {
    return -1;
 801c810:	f04f 33ff 	mov.w	r3, #4294967295
 801c814:	e08a      	b.n	801c92c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c816:	697b      	ldr	r3, [r7, #20]
 801c818:	7a1b      	ldrb	r3, [r3, #8]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d17c      	bne.n	801c918 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c824:	b25b      	sxtb	r3, r3
 801c826:	2b00      	cmp	r3, #0
 801c828:	db0a      	blt.n	801c840 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c82a:	697b      	ldr	r3, [r7, #20]
 801c82c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c830:	2320      	movs	r3, #32
 801c832:	2205      	movs	r2, #5
 801c834:	68f8      	ldr	r0, [r7, #12]
 801c836:	f7ff ff1c 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801c83a:	f04f 33ff 	mov.w	r3, #4294967295
 801c83e:	e075      	b.n	801c92c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c840:	697b      	ldr	r3, [r7, #20]
 801c842:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c846:	2b02      	cmp	r3, #2
 801c848:	d108      	bne.n	801c85c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c84a:	7af9      	ldrb	r1, [r7, #11]
 801c84c:	233a      	movs	r3, #58	; 0x3a
 801c84e:	2202      	movs	r2, #2
 801c850:	68f8      	ldr	r0, [r7, #12]
 801c852:	f7ff ff0e 	bl	801c672 <SCSI_SenseCode>

      return -1;
 801c856:	f04f 33ff 	mov.w	r3, #4294967295
 801c85a:	e067      	b.n	801c92c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c862:	689b      	ldr	r3, [r3, #8]
 801c864:	7afa      	ldrb	r2, [r7, #11]
 801c866:	4610      	mov	r0, r2
 801c868:	4798      	blx	r3
 801c86a:	4603      	mov	r3, r0
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d008      	beq.n	801c882 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c870:	7af9      	ldrb	r1, [r7, #11]
 801c872:	233a      	movs	r3, #58	; 0x3a
 801c874:	2202      	movs	r2, #2
 801c876:	68f8      	ldr	r0, [r7, #12]
 801c878:	f7ff fefb 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801c87c:	f04f 33ff 	mov.w	r3, #4294967295
 801c880:	e054      	b.n	801c92c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	3302      	adds	r3, #2
 801c886:	781b      	ldrb	r3, [r3, #0]
 801c888:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	3303      	adds	r3, #3
 801c88e:	781b      	ldrb	r3, [r3, #0]
 801c890:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c892:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	3304      	adds	r3, #4
 801c898:	781b      	ldrb	r3, [r3, #0]
 801c89a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c89c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c89e:	687a      	ldr	r2, [r7, #4]
 801c8a0:	3205      	adds	r2, #5
 801c8a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c8a4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	3307      	adds	r3, #7
 801c8b0:	781b      	ldrb	r3, [r3, #0]
 801c8b2:	021b      	lsls	r3, r3, #8
 801c8b4:	687a      	ldr	r2, [r7, #4]
 801c8b6:	3208      	adds	r2, #8
 801c8b8:	7812      	ldrb	r2, [r2, #0]
 801c8ba:	431a      	orrs	r2, r3
 801c8bc:	697b      	ldr	r3, [r7, #20]
 801c8be:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c8c2:	697b      	ldr	r3, [r7, #20]
 801c8c4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c8c8:	697b      	ldr	r3, [r7, #20]
 801c8ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c8ce:	7af9      	ldrb	r1, [r7, #11]
 801c8d0:	68f8      	ldr	r0, [r7, #12]
 801c8d2:	f000 faad 	bl	801ce30 <SCSI_CheckAddressRange>
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	da02      	bge.n	801c8e2 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c8e0:	e024      	b.n	801c92c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c8e2:	697b      	ldr	r3, [r7, #20]
 801c8e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c8e8:	697b      	ldr	r3, [r7, #20]
 801c8ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c8ee:	6979      	ldr	r1, [r7, #20]
 801c8f0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c8f4:	fb01 f303 	mul.w	r3, r1, r3
 801c8f8:	429a      	cmp	r2, r3
 801c8fa:	d00a      	beq.n	801c912 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c8fc:	697b      	ldr	r3, [r7, #20]
 801c8fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c902:	2320      	movs	r3, #32
 801c904:	2205      	movs	r2, #5
 801c906:	68f8      	ldr	r0, [r7, #12]
 801c908:	f7ff feb3 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801c90c:	f04f 33ff 	mov.w	r3, #4294967295
 801c910:	e00c      	b.n	801c92c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c912:	697b      	ldr	r3, [r7, #20]
 801c914:	2202      	movs	r2, #2
 801c916:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c918:	697b      	ldr	r3, [r7, #20]
 801c91a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c91e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c920:	7afb      	ldrb	r3, [r7, #11]
 801c922:	4619      	mov	r1, r3
 801c924:	68f8      	ldr	r0, [r7, #12]
 801c926:	f000 faab 	bl	801ce80 <SCSI_ProcessRead>
 801c92a:	4603      	mov	r3, r0
}
 801c92c:	4618      	mov	r0, r3
 801c92e:	3718      	adds	r7, #24
 801c930:	46bd      	mov	sp, r7
 801c932:	bd80      	pop	{r7, pc}

0801c934 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b086      	sub	sp, #24
 801c938:	af00      	add	r7, sp, #0
 801c93a:	60f8      	str	r0, [r7, #12]
 801c93c:	460b      	mov	r3, r1
 801c93e:	607a      	str	r2, [r7, #4]
 801c940:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c948:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c94a:	697b      	ldr	r3, [r7, #20]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d102      	bne.n	801c956 <SCSI_Read12+0x22>
  {
    return -1;
 801c950:	f04f 33ff 	mov.w	r3, #4294967295
 801c954:	e095      	b.n	801ca82 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	7a1b      	ldrb	r3, [r3, #8]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	f040 8087 	bne.w	801ca6e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c960:	697b      	ldr	r3, [r7, #20]
 801c962:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c966:	b25b      	sxtb	r3, r3
 801c968:	2b00      	cmp	r3, #0
 801c96a:	db0a      	blt.n	801c982 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c96c:	697b      	ldr	r3, [r7, #20]
 801c96e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c972:	2320      	movs	r3, #32
 801c974:	2205      	movs	r2, #5
 801c976:	68f8      	ldr	r0, [r7, #12]
 801c978:	f7ff fe7b 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801c97c:	f04f 33ff 	mov.w	r3, #4294967295
 801c980:	e07f      	b.n	801ca82 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c982:	697b      	ldr	r3, [r7, #20]
 801c984:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c988:	2b02      	cmp	r3, #2
 801c98a:	d108      	bne.n	801c99e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c98c:	7af9      	ldrb	r1, [r7, #11]
 801c98e:	233a      	movs	r3, #58	; 0x3a
 801c990:	2202      	movs	r2, #2
 801c992:	68f8      	ldr	r0, [r7, #12]
 801c994:	f7ff fe6d 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801c998:	f04f 33ff 	mov.w	r3, #4294967295
 801c99c:	e071      	b.n	801ca82 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c9a4:	689b      	ldr	r3, [r3, #8]
 801c9a6:	7afa      	ldrb	r2, [r7, #11]
 801c9a8:	4610      	mov	r0, r2
 801c9aa:	4798      	blx	r3
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d008      	beq.n	801c9c4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c9b2:	7af9      	ldrb	r1, [r7, #11]
 801c9b4:	233a      	movs	r3, #58	; 0x3a
 801c9b6:	2202      	movs	r2, #2
 801c9b8:	68f8      	ldr	r0, [r7, #12]
 801c9ba:	f7ff fe5a 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801c9be:	f04f 33ff 	mov.w	r3, #4294967295
 801c9c2:	e05e      	b.n	801ca82 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	3302      	adds	r3, #2
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	3303      	adds	r3, #3
 801c9d0:	781b      	ldrb	r3, [r3, #0]
 801c9d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c9d4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	3304      	adds	r3, #4
 801c9da:	781b      	ldrb	r3, [r3, #0]
 801c9dc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c9de:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c9e0:	687a      	ldr	r2, [r7, #4]
 801c9e2:	3205      	adds	r2, #5
 801c9e4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c9e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c9e8:	697b      	ldr	r3, [r7, #20]
 801c9ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	3306      	adds	r3, #6
 801c9f2:	781b      	ldrb	r3, [r3, #0]
 801c9f4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	3307      	adds	r3, #7
 801c9fa:	781b      	ldrb	r3, [r3, #0]
 801c9fc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c9fe:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	3308      	adds	r3, #8
 801ca04:	781b      	ldrb	r3, [r3, #0]
 801ca06:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801ca08:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801ca0a:	687a      	ldr	r2, [r7, #4]
 801ca0c:	3209      	adds	r2, #9
 801ca0e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801ca10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801ca12:	697b      	ldr	r3, [r7, #20]
 801ca14:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801ca18:	697b      	ldr	r3, [r7, #20]
 801ca1a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ca24:	7af9      	ldrb	r1, [r7, #11]
 801ca26:	68f8      	ldr	r0, [r7, #12]
 801ca28:	f000 fa02 	bl	801ce30 <SCSI_CheckAddressRange>
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	da02      	bge.n	801ca38 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801ca32:	f04f 33ff 	mov.w	r3, #4294967295
 801ca36:	e024      	b.n	801ca82 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801ca38:	697b      	ldr	r3, [r7, #20]
 801ca3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ca44:	6979      	ldr	r1, [r7, #20]
 801ca46:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801ca4a:	fb01 f303 	mul.w	r3, r1, r3
 801ca4e:	429a      	cmp	r2, r3
 801ca50:	d00a      	beq.n	801ca68 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ca58:	2320      	movs	r3, #32
 801ca5a:	2205      	movs	r2, #5
 801ca5c:	68f8      	ldr	r0, [r7, #12]
 801ca5e:	f7ff fe08 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801ca62:	f04f 33ff 	mov.w	r3, #4294967295
 801ca66:	e00c      	b.n	801ca82 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	2202      	movs	r2, #2
 801ca6c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801ca6e:	697b      	ldr	r3, [r7, #20]
 801ca70:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ca74:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801ca76:	7afb      	ldrb	r3, [r7, #11]
 801ca78:	4619      	mov	r1, r3
 801ca7a:	68f8      	ldr	r0, [r7, #12]
 801ca7c:	f000 fa00 	bl	801ce80 <SCSI_ProcessRead>
 801ca80:	4603      	mov	r3, r0
}
 801ca82:	4618      	mov	r0, r3
 801ca84:	3718      	adds	r7, #24
 801ca86:	46bd      	mov	sp, r7
 801ca88:	bd80      	pop	{r7, pc}

0801ca8a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ca8a:	b580      	push	{r7, lr}
 801ca8c:	b086      	sub	sp, #24
 801ca8e:	af00      	add	r7, sp, #0
 801ca90:	60f8      	str	r0, [r7, #12]
 801ca92:	460b      	mov	r3, r1
 801ca94:	607a      	str	r2, [r7, #4]
 801ca96:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ca9e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801caa0:	697b      	ldr	r3, [r7, #20]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d102      	bne.n	801caac <SCSI_Write10+0x22>
  {
    return -1;
 801caa6:	f04f 33ff 	mov.w	r3, #4294967295
 801caaa:	e0af      	b.n	801cc0c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801caac:	697b      	ldr	r3, [r7, #20]
 801caae:	7a1b      	ldrb	r3, [r3, #8]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	f040 80a5 	bne.w	801cc00 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d10a      	bne.n	801cad6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cac0:	697b      	ldr	r3, [r7, #20]
 801cac2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cac6:	2320      	movs	r3, #32
 801cac8:	2205      	movs	r2, #5
 801caca:	68f8      	ldr	r0, [r7, #12]
 801cacc:	f7ff fdd1 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cad0:	f04f 33ff 	mov.w	r3, #4294967295
 801cad4:	e09a      	b.n	801cc0c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801cad6:	697b      	ldr	r3, [r7, #20]
 801cad8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801cadc:	b25b      	sxtb	r3, r3
 801cade:	2b00      	cmp	r3, #0
 801cae0:	da0a      	bge.n	801caf8 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cae2:	697b      	ldr	r3, [r7, #20]
 801cae4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cae8:	2320      	movs	r3, #32
 801caea:	2205      	movs	r2, #5
 801caec:	68f8      	ldr	r0, [r7, #12]
 801caee:	f7ff fdc0 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801caf2:	f04f 33ff 	mov.w	r3, #4294967295
 801caf6:	e089      	b.n	801cc0c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cafe:	689b      	ldr	r3, [r3, #8]
 801cb00:	7afa      	ldrb	r2, [r7, #11]
 801cb02:	4610      	mov	r0, r2
 801cb04:	4798      	blx	r3
 801cb06:	4603      	mov	r3, r0
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d008      	beq.n	801cb1e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801cb0c:	7af9      	ldrb	r1, [r7, #11]
 801cb0e:	233a      	movs	r3, #58	; 0x3a
 801cb10:	2202      	movs	r2, #2
 801cb12:	68f8      	ldr	r0, [r7, #12]
 801cb14:	f7ff fdad 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cb18:	f04f 33ff 	mov.w	r3, #4294967295
 801cb1c:	e076      	b.n	801cc0c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cb24:	68db      	ldr	r3, [r3, #12]
 801cb26:	7afa      	ldrb	r2, [r7, #11]
 801cb28:	4610      	mov	r0, r2
 801cb2a:	4798      	blx	r3
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d008      	beq.n	801cb44 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801cb32:	7af9      	ldrb	r1, [r7, #11]
 801cb34:	2327      	movs	r3, #39	; 0x27
 801cb36:	2202      	movs	r2, #2
 801cb38:	68f8      	ldr	r0, [r7, #12]
 801cb3a:	f7ff fd9a 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cb3e:	f04f 33ff 	mov.w	r3, #4294967295
 801cb42:	e063      	b.n	801cc0c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	3302      	adds	r3, #2
 801cb48:	781b      	ldrb	r3, [r3, #0]
 801cb4a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	3303      	adds	r3, #3
 801cb50:	781b      	ldrb	r3, [r3, #0]
 801cb52:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cb54:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	3304      	adds	r3, #4
 801cb5a:	781b      	ldrb	r3, [r3, #0]
 801cb5c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801cb5e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801cb60:	687a      	ldr	r2, [r7, #4]
 801cb62:	3205      	adds	r2, #5
 801cb64:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801cb66:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cb68:	697b      	ldr	r3, [r7, #20]
 801cb6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	3307      	adds	r3, #7
 801cb72:	781b      	ldrb	r3, [r3, #0]
 801cb74:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801cb76:	687a      	ldr	r2, [r7, #4]
 801cb78:	3208      	adds	r2, #8
 801cb7a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801cb7c:	431a      	orrs	r2, r3
 801cb7e:	697b      	ldr	r3, [r7, #20]
 801cb80:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cb84:	697b      	ldr	r3, [r7, #20]
 801cb86:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cb8a:	697b      	ldr	r3, [r7, #20]
 801cb8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cb90:	7af9      	ldrb	r1, [r7, #11]
 801cb92:	68f8      	ldr	r0, [r7, #12]
 801cb94:	f000 f94c 	bl	801ce30 <SCSI_CheckAddressRange>
 801cb98:	4603      	mov	r3, r0
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	da02      	bge.n	801cba4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801cb9e:	f04f 33ff 	mov.w	r3, #4294967295
 801cba2:	e033      	b.n	801cc0c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cba4:	697b      	ldr	r3, [r7, #20]
 801cba6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cbaa:	697a      	ldr	r2, [r7, #20]
 801cbac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cbb0:	fb02 f303 	mul.w	r3, r2, r3
 801cbb4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cbb6:	697b      	ldr	r3, [r7, #20]
 801cbb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cbbc:	693a      	ldr	r2, [r7, #16]
 801cbbe:	429a      	cmp	r2, r3
 801cbc0:	d00a      	beq.n	801cbd8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cbc2:	697b      	ldr	r3, [r7, #20]
 801cbc4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cbc8:	2320      	movs	r3, #32
 801cbca:	2205      	movs	r2, #5
 801cbcc:	68f8      	ldr	r0, [r7, #12]
 801cbce:	f7ff fd50 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cbd2:	f04f 33ff 	mov.w	r3, #4294967295
 801cbd6:	e019      	b.n	801cc0c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cbd8:	693b      	ldr	r3, [r7, #16]
 801cbda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cbde:	bf28      	it	cs
 801cbe0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cbe4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cbe6:	697b      	ldr	r3, [r7, #20]
 801cbe8:	2201      	movs	r2, #1
 801cbea:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cbec:	697b      	ldr	r3, [r7, #20]
 801cbee:	f103 0210 	add.w	r2, r3, #16
 801cbf2:	693b      	ldr	r3, [r7, #16]
 801cbf4:	2101      	movs	r1, #1
 801cbf6:	68f8      	ldr	r0, [r7, #12]
 801cbf8:	f7fd f95a 	bl	8019eb0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	e005      	b.n	801cc0c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 801cc00:	7afb      	ldrb	r3, [r7, #11]
 801cc02:	4619      	mov	r1, r3
 801cc04:	68f8      	ldr	r0, [r7, #12]
 801cc06:	f000 f9b4 	bl	801cf72 <SCSI_ProcessWrite>
 801cc0a:	4603      	mov	r3, r0
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	3718      	adds	r7, #24
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}

0801cc14 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b086      	sub	sp, #24
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	60f8      	str	r0, [r7, #12]
 801cc1c:	460b      	mov	r3, r1
 801cc1e:	607a      	str	r2, [r7, #4]
 801cc20:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cc28:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801cc2a:	697b      	ldr	r3, [r7, #20]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d102      	bne.n	801cc36 <SCSI_Write12+0x22>
  {
    return -1;
 801cc30:	f04f 33ff 	mov.w	r3, #4294967295
 801cc34:	e0bf      	b.n	801cdb6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	7a1b      	ldrb	r3, [r3, #8]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	f040 80b5 	bne.w	801cdaa <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801cc40:	697b      	ldr	r3, [r7, #20]
 801cc42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d10a      	bne.n	801cc60 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cc4a:	697b      	ldr	r3, [r7, #20]
 801cc4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cc50:	2320      	movs	r3, #32
 801cc52:	2205      	movs	r2, #5
 801cc54:	68f8      	ldr	r0, [r7, #12]
 801cc56:	f7ff fd0c 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cc5a:	f04f 33ff 	mov.w	r3, #4294967295
 801cc5e:	e0aa      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801cc60:	697b      	ldr	r3, [r7, #20]
 801cc62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801cc66:	b25b      	sxtb	r3, r3
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	da0a      	bge.n	801cc82 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cc6c:	697b      	ldr	r3, [r7, #20]
 801cc6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cc72:	2320      	movs	r3, #32
 801cc74:	2205      	movs	r2, #5
 801cc76:	68f8      	ldr	r0, [r7, #12]
 801cc78:	f7ff fcfb 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cc7c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc80:	e099      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cc88:	689b      	ldr	r3, [r3, #8]
 801cc8a:	7afa      	ldrb	r2, [r7, #11]
 801cc8c:	4610      	mov	r0, r2
 801cc8e:	4798      	blx	r3
 801cc90:	4603      	mov	r3, r0
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d00b      	beq.n	801ccae <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801cc96:	7af9      	ldrb	r1, [r7, #11]
 801cc98:	233a      	movs	r3, #58	; 0x3a
 801cc9a:	2202      	movs	r2, #2
 801cc9c:	68f8      	ldr	r0, [r7, #12]
 801cc9e:	f7ff fce8 	bl	801c672 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cca2:	697b      	ldr	r3, [r7, #20]
 801cca4:	2205      	movs	r2, #5
 801cca6:	721a      	strb	r2, [r3, #8]
      return -1;
 801cca8:	f04f 33ff 	mov.w	r3, #4294967295
 801ccac:	e083      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ccb4:	68db      	ldr	r3, [r3, #12]
 801ccb6:	7afa      	ldrb	r2, [r7, #11]
 801ccb8:	4610      	mov	r0, r2
 801ccba:	4798      	blx	r3
 801ccbc:	4603      	mov	r3, r0
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d00b      	beq.n	801ccda <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801ccc2:	7af9      	ldrb	r1, [r7, #11]
 801ccc4:	2327      	movs	r3, #39	; 0x27
 801ccc6:	2202      	movs	r2, #2
 801ccc8:	68f8      	ldr	r0, [r7, #12]
 801ccca:	f7ff fcd2 	bl	801c672 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801ccce:	697b      	ldr	r3, [r7, #20]
 801ccd0:	2205      	movs	r2, #5
 801ccd2:	721a      	strb	r2, [r3, #8]
      return -1;
 801ccd4:	f04f 33ff 	mov.w	r3, #4294967295
 801ccd8:	e06d      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	3302      	adds	r3, #2
 801ccde:	781b      	ldrb	r3, [r3, #0]
 801cce0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	3303      	adds	r3, #3
 801cce6:	781b      	ldrb	r3, [r3, #0]
 801cce8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ccea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	3304      	adds	r3, #4
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801ccf4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801ccf6:	687a      	ldr	r2, [r7, #4]
 801ccf8:	3205      	adds	r2, #5
 801ccfa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801ccfc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ccfe:	697b      	ldr	r3, [r7, #20]
 801cd00:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	3306      	adds	r3, #6
 801cd08:	781b      	ldrb	r3, [r3, #0]
 801cd0a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	3307      	adds	r3, #7
 801cd10:	781b      	ldrb	r3, [r3, #0]
 801cd12:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cd14:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	3308      	adds	r3, #8
 801cd1a:	781b      	ldrb	r3, [r3, #0]
 801cd1c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801cd1e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801cd20:	687a      	ldr	r2, [r7, #4]
 801cd22:	3209      	adds	r2, #9
 801cd24:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801cd26:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cd28:	697b      	ldr	r3, [r7, #20]
 801cd2a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cd2e:	697b      	ldr	r3, [r7, #20]
 801cd30:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd3a:	7af9      	ldrb	r1, [r7, #11]
 801cd3c:	68f8      	ldr	r0, [r7, #12]
 801cd3e:	f000 f877 	bl	801ce30 <SCSI_CheckAddressRange>
 801cd42:	4603      	mov	r3, r0
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	da02      	bge.n	801cd4e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801cd48:	f04f 33ff 	mov.w	r3, #4294967295
 801cd4c:	e033      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cd4e:	697b      	ldr	r3, [r7, #20]
 801cd50:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd54:	697a      	ldr	r2, [r7, #20]
 801cd56:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cd5a:	fb02 f303 	mul.w	r3, r2, r3
 801cd5e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cd60:	697b      	ldr	r3, [r7, #20]
 801cd62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cd66:	693a      	ldr	r2, [r7, #16]
 801cd68:	429a      	cmp	r2, r3
 801cd6a:	d00a      	beq.n	801cd82 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cd6c:	697b      	ldr	r3, [r7, #20]
 801cd6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cd72:	2320      	movs	r3, #32
 801cd74:	2205      	movs	r2, #5
 801cd76:	68f8      	ldr	r0, [r7, #12]
 801cd78:	f7ff fc7b 	bl	801c672 <SCSI_SenseCode>
      return -1;
 801cd7c:	f04f 33ff 	mov.w	r3, #4294967295
 801cd80:	e019      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cd82:	693b      	ldr	r3, [r7, #16]
 801cd84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd88:	bf28      	it	cs
 801cd8a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cd8e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cd90:	697b      	ldr	r3, [r7, #20]
 801cd92:	2201      	movs	r2, #1
 801cd94:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cd96:	697b      	ldr	r3, [r7, #20]
 801cd98:	f103 0210 	add.w	r2, r3, #16
 801cd9c:	693b      	ldr	r3, [r7, #16]
 801cd9e:	2101      	movs	r1, #1
 801cda0:	68f8      	ldr	r0, [r7, #12]
 801cda2:	f7fd f885 	bl	8019eb0 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cda6:	2300      	movs	r3, #0
 801cda8:	e005      	b.n	801cdb6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801cdaa:	7afb      	ldrb	r3, [r7, #11]
 801cdac:	4619      	mov	r1, r3
 801cdae:	68f8      	ldr	r0, [r7, #12]
 801cdb0:	f000 f8df 	bl	801cf72 <SCSI_ProcessWrite>
 801cdb4:	4603      	mov	r3, r0
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	3718      	adds	r7, #24
 801cdba:	46bd      	mov	sp, r7
 801cdbc:	bd80      	pop	{r7, pc}

0801cdbe <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cdbe:	b580      	push	{r7, lr}
 801cdc0:	b086      	sub	sp, #24
 801cdc2:	af00      	add	r7, sp, #0
 801cdc4:	60f8      	str	r0, [r7, #12]
 801cdc6:	460b      	mov	r3, r1
 801cdc8:	607a      	str	r2, [r7, #4]
 801cdca:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cdd2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cdd4:	697b      	ldr	r3, [r7, #20]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d102      	bne.n	801cde0 <SCSI_Verify10+0x22>
  {
    return -1;
 801cdda:	f04f 33ff 	mov.w	r3, #4294967295
 801cdde:	e023      	b.n	801ce28 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	3301      	adds	r3, #1
 801cde4:	781b      	ldrb	r3, [r3, #0]
 801cde6:	f003 0302 	and.w	r3, r3, #2
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d008      	beq.n	801ce00 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801cdee:	7af9      	ldrb	r1, [r7, #11]
 801cdf0:	2324      	movs	r3, #36	; 0x24
 801cdf2:	2205      	movs	r2, #5
 801cdf4:	68f8      	ldr	r0, [r7, #12]
 801cdf6:	f7ff fc3c 	bl	801c672 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801cdfa:	f04f 33ff 	mov.w	r3, #4294967295
 801cdfe:	e013      	b.n	801ce28 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801ce00:	697b      	ldr	r3, [r7, #20]
 801ce02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ce06:	697b      	ldr	r3, [r7, #20]
 801ce08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce0c:	7af9      	ldrb	r1, [r7, #11]
 801ce0e:	68f8      	ldr	r0, [r7, #12]
 801ce10:	f000 f80e 	bl	801ce30 <SCSI_CheckAddressRange>
 801ce14:	4603      	mov	r3, r0
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	da02      	bge.n	801ce20 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801ce1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce1e:	e003      	b.n	801ce28 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801ce20:	697b      	ldr	r3, [r7, #20]
 801ce22:	2200      	movs	r2, #0
 801ce24:	60da      	str	r2, [r3, #12]

  return 0;
 801ce26:	2300      	movs	r3, #0
}
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3718      	adds	r7, #24
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}

0801ce30 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b086      	sub	sp, #24
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	60f8      	str	r0, [r7, #12]
 801ce38:	607a      	str	r2, [r7, #4]
 801ce3a:	603b      	str	r3, [r7, #0]
 801ce3c:	460b      	mov	r3, r1
 801ce3e:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ce46:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801ce48:	697b      	ldr	r3, [r7, #20]
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d102      	bne.n	801ce54 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801ce4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce52:	e011      	b.n	801ce78 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801ce54:	687a      	ldr	r2, [r7, #4]
 801ce56:	683b      	ldr	r3, [r7, #0]
 801ce58:	441a      	add	r2, r3
 801ce5a:	697b      	ldr	r3, [r7, #20]
 801ce5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ce60:	429a      	cmp	r2, r3
 801ce62:	d908      	bls.n	801ce76 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801ce64:	7af9      	ldrb	r1, [r7, #11]
 801ce66:	2321      	movs	r3, #33	; 0x21
 801ce68:	2205      	movs	r2, #5
 801ce6a:	68f8      	ldr	r0, [r7, #12]
 801ce6c:	f7ff fc01 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801ce70:	f04f 33ff 	mov.w	r3, #4294967295
 801ce74:	e000      	b.n	801ce78 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 801ce76:	2300      	movs	r3, #0
}
 801ce78:	4618      	mov	r0, r3
 801ce7a:	3718      	adds	r7, #24
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	bd80      	pop	{r7, pc}

0801ce80 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801ce80:	b590      	push	{r4, r7, lr}
 801ce82:	b085      	sub	sp, #20
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
 801ce88:	460b      	mov	r3, r1
 801ce8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ce92:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce9a:	68fa      	ldr	r2, [r7, #12]
 801ce9c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cea0:	fb02 f303 	mul.w	r3, r2, r3
 801cea4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d102      	bne.n	801ceb2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801ceac:	f04f 33ff 	mov.w	r3, #4294967295
 801ceb0:	e05b      	b.n	801cf6a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801ceb2:	68bb      	ldr	r3, [r7, #8]
 801ceb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ceb8:	bf28      	it	cs
 801ceba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cebe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cec6:	691c      	ldr	r4, [r3, #16]
 801cec8:	68fb      	ldr	r3, [r7, #12]
 801ceca:	f103 0110 	add.w	r1, r3, #16
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ceda:	4618      	mov	r0, r3
 801cedc:	68bb      	ldr	r3, [r7, #8]
 801cede:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cee2:	b29b      	uxth	r3, r3
 801cee4:	78f8      	ldrb	r0, [r7, #3]
 801cee6:	47a0      	blx	r4
 801cee8:	4603      	mov	r3, r0
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	da08      	bge.n	801cf00 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801ceee:	78f9      	ldrb	r1, [r7, #3]
 801cef0:	2311      	movs	r3, #17
 801cef2:	2204      	movs	r2, #4
 801cef4:	6878      	ldr	r0, [r7, #4]
 801cef6:	f7ff fbbc 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801cefa:	f04f 33ff 	mov.w	r3, #4294967295
 801cefe:	e034      	b.n	801cf6a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	f103 0210 	add.w	r2, r3, #16
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	2181      	movs	r1, #129	; 0x81
 801cf0a:	6878      	ldr	r0, [r7, #4]
 801cf0c:	f7fc ff98 	bl	8019e40 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cf1c:	4619      	mov	r1, r3
 801cf1e:	68bb      	ldr	r3, [r7, #8]
 801cf20:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf24:	441a      	add	r2, r3
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cf38:	4619      	mov	r1, r3
 801cf3a:	68bb      	ldr	r3, [r7, #8]
 801cf3c:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf40:	1ad2      	subs	r2, r2, r3
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801cf4e:	68bb      	ldr	r3, [r7, #8]
 801cf50:	1ad2      	subs	r2, r2, r3
 801cf52:	68fb      	ldr	r3, [r7, #12]
 801cf54:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d102      	bne.n	801cf68 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	2203      	movs	r2, #3
 801cf66:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801cf68:	2300      	movs	r3, #0
}
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	3714      	adds	r7, #20
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	bd90      	pop	{r4, r7, pc}

0801cf72 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cf72:	b590      	push	{r4, r7, lr}
 801cf74:	b085      	sub	sp, #20
 801cf76:	af00      	add	r7, sp, #0
 801cf78:	6078      	str	r0, [r7, #4]
 801cf7a:	460b      	mov	r3, r1
 801cf7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cf84:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cf8c:	68fa      	ldr	r2, [r7, #12]
 801cf8e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cf92:	fb02 f303 	mul.w	r3, r2, r3
 801cf96:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d102      	bne.n	801cfa4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801cf9e:	f04f 33ff 	mov.w	r3, #4294967295
 801cfa2:	e06b      	b.n	801d07c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cfa4:	68bb      	ldr	r3, [r7, #8]
 801cfa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cfaa:	bf28      	it	cs
 801cfac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cfb0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cfb8:	695c      	ldr	r4, [r3, #20]
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	f103 0110 	add.w	r1, r3, #16
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cfcc:	4618      	mov	r0, r3
 801cfce:	68bb      	ldr	r3, [r7, #8]
 801cfd0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cfd4:	b29b      	uxth	r3, r3
 801cfd6:	78f8      	ldrb	r0, [r7, #3]
 801cfd8:	47a0      	blx	r4
 801cfda:	4603      	mov	r3, r0
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	da08      	bge.n	801cff2 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801cfe0:	78f9      	ldrb	r1, [r7, #3]
 801cfe2:	2303      	movs	r3, #3
 801cfe4:	2204      	movs	r2, #4
 801cfe6:	6878      	ldr	r0, [r7, #4]
 801cfe8:	f7ff fb43 	bl	801c672 <SCSI_SenseCode>
    return -1;
 801cfec:	f04f 33ff 	mov.w	r3, #4294967295
 801cff0:	e044      	b.n	801d07c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cffe:	4619      	mov	r1, r3
 801d000:	68bb      	ldr	r3, [r7, #8]
 801d002:	fbb3 f3f1 	udiv	r3, r3, r1
 801d006:	441a      	add	r2, r3
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801d01a:	4619      	mov	r1, r3
 801d01c:	68bb      	ldr	r3, [r7, #8]
 801d01e:	fbb3 f3f1 	udiv	r3, r3, r1
 801d022:	1ad2      	subs	r2, r2, r3
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801d030:	68bb      	ldr	r3, [r7, #8]
 801d032:	1ad2      	subs	r2, r2, r3
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801d040:	2b00      	cmp	r3, #0
 801d042:	d104      	bne.n	801d04e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801d044:	2100      	movs	r1, #0
 801d046:	6878      	ldr	r0, [r7, #4]
 801d048:	f7fe fdd8 	bl	801bbfc <MSC_BOT_SendCSW>
 801d04c:	e015      	b.n	801d07a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801d054:	68fa      	ldr	r2, [r7, #12]
 801d056:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801d05a:	fb02 f303 	mul.w	r3, r2, r3
 801d05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d062:	bf28      	it	cs
 801d064:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801d068:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	f103 0210 	add.w	r2, r3, #16
 801d070:	68bb      	ldr	r3, [r7, #8]
 801d072:	2101      	movs	r1, #1
 801d074:	6878      	ldr	r0, [r7, #4]
 801d076:	f7fc ff1b 	bl	8019eb0 <USBD_LL_PrepareReceive>
  }

  return 0;
 801d07a:	2300      	movs	r3, #0
}
 801d07c:	4618      	mov	r0, r3
 801d07e:	3714      	adds	r7, #20
 801d080:	46bd      	mov	sp, r7
 801d082:	bd90      	pop	{r4, r7, pc}

0801d084 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_CDCMSC_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801d084:	b480      	push	{r7}
 801d086:	b087      	sub	sp, #28
 801d088:	af00      	add	r7, sp, #0
 801d08a:	60f8      	str	r0, [r7, #12]
 801d08c:	60b9      	str	r1, [r7, #8]
 801d08e:	4613      	mov	r3, r2
 801d090:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801d092:	88fb      	ldrh	r3, [r7, #6]
 801d094:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d102      	bne.n	801d0a2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801d09c:	f04f 33ff 	mov.w	r3, #4294967295
 801d0a0:	e013      	b.n	801d0ca <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801d0a2:	8afa      	ldrh	r2, [r7, #22]
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801d0a8:	e00b      	b.n	801d0c2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801d0aa:	8afb      	ldrh	r3, [r7, #22]
 801d0ac:	3b01      	subs	r3, #1
 801d0ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801d0b0:	8afb      	ldrh	r3, [r7, #22]
 801d0b2:	68ba      	ldr	r2, [r7, #8]
 801d0b4:	441a      	add	r2, r3
 801d0b6:	8afb      	ldrh	r3, [r7, #22]
 801d0b8:	7811      	ldrb	r1, [r2, #0]
 801d0ba:	68fa      	ldr	r2, [r7, #12]
 801d0bc:	4413      	add	r3, r2
 801d0be:	460a      	mov	r2, r1
 801d0c0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801d0c2:	8afb      	ldrh	r3, [r7, #22]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d1f0      	bne.n	801d0aa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801d0c8:	2300      	movs	r3, #0
}
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	371c      	adds	r7, #28
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d4:	4770      	bx	lr

0801d0d6 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801d0d6:	b480      	push	{r7}
 801d0d8:	b083      	sub	sp, #12
 801d0da:	af00      	add	r7, sp, #0
 801d0dc:	4603      	mov	r3, r0
 801d0de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801d0e0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	370c      	adds	r7, #12
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ec:	4770      	bx	lr

0801d0ee <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801d0ee:	b480      	push	{r7}
 801d0f0:	b085      	sub	sp, #20
 801d0f2:	af00      	add	r7, sp, #0
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	60b9      	str	r1, [r7, #8]
 801d0f8:	607a      	str	r2, [r7, #4]
 801d0fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801d0fc:	68bb      	ldr	r3, [r7, #8]
 801d0fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d102:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d10a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801d10c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d10e:	4618      	mov	r0, r3
 801d110:	3714      	adds	r7, #20
 801d112:	46bd      	mov	sp, r7
 801d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d118:	4770      	bx	lr

0801d11a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801d11a:	b480      	push	{r7}
 801d11c:	b083      	sub	sp, #12
 801d11e:	af00      	add	r7, sp, #0
 801d120:	4603      	mov	r3, r0
 801d122:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d126:	4618      	mov	r0, r3
 801d128:	370c      	adds	r7, #12
 801d12a:	46bd      	mov	sp, r7
 801d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d130:	4770      	bx	lr

0801d132 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d132:	b480      	push	{r7}
 801d134:	b083      	sub	sp, #12
 801d136:	af00      	add	r7, sp, #0
 801d138:	4603      	mov	r3, r0
 801d13a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801d13c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d13e:	4618      	mov	r0, r3
 801d140:	370c      	adds	r7, #12
 801d142:	46bd      	mov	sp, r7
 801d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d148:	4770      	bx	lr

0801d14a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d14a:	b580      	push	{r7, lr}
 801d14c:	b086      	sub	sp, #24
 801d14e:	af00      	add	r7, sp, #0
 801d150:	60b9      	str	r1, [r7, #8]
 801d152:	607a      	str	r2, [r7, #4]
 801d154:	461a      	mov	r2, r3
 801d156:	4603      	mov	r3, r0
 801d158:	73fb      	strb	r3, [r7, #15]
 801d15a:	4613      	mov	r3, r2
 801d15c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	uint16_t block_cntr=0;
 801d15e:	2300      	movs	r3, #0
 801d160:	82fb      	strh	r3, [r7, #22]
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d162:	2300      	movs	r3, #0
 801d164:	82fb      	strh	r3, [r7, #22]
 801d166:	e00f      	b.n	801d188 <STORAGE_Read_FS+0x3e>
				W25_ReadBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801d168:	8afb      	ldrh	r3, [r7, #22]
 801d16a:	025b      	lsls	r3, r3, #9
 801d16c:	461a      	mov	r2, r3
 801d16e:	68bb      	ldr	r3, [r7, #8]
 801d170:	1898      	adds	r0, r3, r2
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	b29a      	uxth	r2, r3
 801d176:	8afb      	ldrh	r3, [r7, #22]
 801d178:	4413      	add	r3, r2
 801d17a:	b29b      	uxth	r3, r3
 801d17c:	4619      	mov	r1, r3
 801d17e:	f7e7 fb19 	bl	80047b4 <W25_ReadBuf>
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d182:	8afb      	ldrh	r3, [r7, #22]
 801d184:	3301      	adds	r3, #1
 801d186:	82fb      	strh	r3, [r7, #22]
 801d188:	8afa      	ldrh	r2, [r7, #22]
 801d18a:	89bb      	ldrh	r3, [r7, #12]
 801d18c:	429a      	cmp	r2, r3
 801d18e:	d3eb      	bcc.n	801d168 <STORAGE_Read_FS+0x1e>
	  return (USBD_OK);
 801d190:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d192:	4618      	mov	r0, r3
 801d194:	3718      	adds	r7, #24
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}

0801d19a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d19a:	b580      	push	{r7, lr}
 801d19c:	b086      	sub	sp, #24
 801d19e:	af00      	add	r7, sp, #0
 801d1a0:	60b9      	str	r1, [r7, #8]
 801d1a2:	607a      	str	r2, [r7, #4]
 801d1a4:	461a      	mov	r2, r3
 801d1a6:	4603      	mov	r3, r0
 801d1a8:	73fb      	strb	r3, [r7, #15]
 801d1aa:	4613      	mov	r3, r2
 801d1ac:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint16_t block_cntr=0;
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	82fb      	strh	r3, [r7, #22]
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	82fb      	strh	r3, [r7, #22]
 801d1b6:	e00f      	b.n	801d1d8 <STORAGE_Write_FS+0x3e>
					W25_WriteBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801d1b8:	8afb      	ldrh	r3, [r7, #22]
 801d1ba:	025b      	lsls	r3, r3, #9
 801d1bc:	461a      	mov	r2, r3
 801d1be:	68bb      	ldr	r3, [r7, #8]
 801d1c0:	1898      	adds	r0, r3, r2
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	b29a      	uxth	r2, r3
 801d1c6:	8afb      	ldrh	r3, [r7, #22]
 801d1c8:	4413      	add	r3, r2
 801d1ca:	b29b      	uxth	r3, r3
 801d1cc:	4619      	mov	r1, r3
 801d1ce:	f7e7 fb61 	bl	8004894 <W25_WriteBuf>
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d1d2:	8afb      	ldrh	r3, [r7, #22]
 801d1d4:	3301      	adds	r3, #1
 801d1d6:	82fb      	strh	r3, [r7, #22]
 801d1d8:	8afa      	ldrh	r2, [r7, #22]
 801d1da:	89bb      	ldrh	r3, [r7, #12]
 801d1dc:	429a      	cmp	r2, r3
 801d1de:	d3eb      	bcc.n	801d1b8 <STORAGE_Write_FS+0x1e>
	  return (USBD_OK);
 801d1e0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	3718      	adds	r7, #24
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}

0801d1ea <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d1ea:	b480      	push	{r7}
 801d1ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d1ee:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d1f0:	4618      	mov	r0, r3
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1f8:	4770      	bx	lr
	...

0801d1fc <__errno>:
 801d1fc:	4b01      	ldr	r3, [pc, #4]	; (801d204 <__errno+0x8>)
 801d1fe:	6818      	ldr	r0, [r3, #0]
 801d200:	4770      	bx	lr
 801d202:	bf00      	nop
 801d204:	200005bc 	.word	0x200005bc

0801d208 <__libc_init_array>:
 801d208:	b570      	push	{r4, r5, r6, lr}
 801d20a:	4d0d      	ldr	r5, [pc, #52]	; (801d240 <__libc_init_array+0x38>)
 801d20c:	4c0d      	ldr	r4, [pc, #52]	; (801d244 <__libc_init_array+0x3c>)
 801d20e:	1b64      	subs	r4, r4, r5
 801d210:	10a4      	asrs	r4, r4, #2
 801d212:	2600      	movs	r6, #0
 801d214:	42a6      	cmp	r6, r4
 801d216:	d109      	bne.n	801d22c <__libc_init_array+0x24>
 801d218:	4d0b      	ldr	r5, [pc, #44]	; (801d248 <__libc_init_array+0x40>)
 801d21a:	4c0c      	ldr	r4, [pc, #48]	; (801d24c <__libc_init_array+0x44>)
 801d21c:	f004 fd40 	bl	8021ca0 <_init>
 801d220:	1b64      	subs	r4, r4, r5
 801d222:	10a4      	asrs	r4, r4, #2
 801d224:	2600      	movs	r6, #0
 801d226:	42a6      	cmp	r6, r4
 801d228:	d105      	bne.n	801d236 <__libc_init_array+0x2e>
 801d22a:	bd70      	pop	{r4, r5, r6, pc}
 801d22c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d230:	4798      	blx	r3
 801d232:	3601      	adds	r6, #1
 801d234:	e7ee      	b.n	801d214 <__libc_init_array+0xc>
 801d236:	f855 3b04 	ldr.w	r3, [r5], #4
 801d23a:	4798      	blx	r3
 801d23c:	3601      	adds	r6, #1
 801d23e:	e7f2      	b.n	801d226 <__libc_init_array+0x1e>
 801d240:	08029d44 	.word	0x08029d44
 801d244:	08029d44 	.word	0x08029d44
 801d248:	08029d44 	.word	0x08029d44
 801d24c:	08029d48 	.word	0x08029d48

0801d250 <memset>:
 801d250:	4402      	add	r2, r0
 801d252:	4603      	mov	r3, r0
 801d254:	4293      	cmp	r3, r2
 801d256:	d100      	bne.n	801d25a <memset+0xa>
 801d258:	4770      	bx	lr
 801d25a:	f803 1b01 	strb.w	r1, [r3], #1
 801d25e:	e7f9      	b.n	801d254 <memset+0x4>

0801d260 <__cvt>:
 801d260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d264:	ec55 4b10 	vmov	r4, r5, d0
 801d268:	2d00      	cmp	r5, #0
 801d26a:	460e      	mov	r6, r1
 801d26c:	4619      	mov	r1, r3
 801d26e:	462b      	mov	r3, r5
 801d270:	bfbb      	ittet	lt
 801d272:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d276:	461d      	movlt	r5, r3
 801d278:	2300      	movge	r3, #0
 801d27a:	232d      	movlt	r3, #45	; 0x2d
 801d27c:	700b      	strb	r3, [r1, #0]
 801d27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d280:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d284:	4691      	mov	r9, r2
 801d286:	f023 0820 	bic.w	r8, r3, #32
 801d28a:	bfbc      	itt	lt
 801d28c:	4622      	movlt	r2, r4
 801d28e:	4614      	movlt	r4, r2
 801d290:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d294:	d005      	beq.n	801d2a2 <__cvt+0x42>
 801d296:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d29a:	d100      	bne.n	801d29e <__cvt+0x3e>
 801d29c:	3601      	adds	r6, #1
 801d29e:	2102      	movs	r1, #2
 801d2a0:	e000      	b.n	801d2a4 <__cvt+0x44>
 801d2a2:	2103      	movs	r1, #3
 801d2a4:	ab03      	add	r3, sp, #12
 801d2a6:	9301      	str	r3, [sp, #4]
 801d2a8:	ab02      	add	r3, sp, #8
 801d2aa:	9300      	str	r3, [sp, #0]
 801d2ac:	ec45 4b10 	vmov	d0, r4, r5
 801d2b0:	4653      	mov	r3, sl
 801d2b2:	4632      	mov	r2, r6
 801d2b4:	f001 fdc8 	bl	801ee48 <_dtoa_r>
 801d2b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d2bc:	4607      	mov	r7, r0
 801d2be:	d102      	bne.n	801d2c6 <__cvt+0x66>
 801d2c0:	f019 0f01 	tst.w	r9, #1
 801d2c4:	d022      	beq.n	801d30c <__cvt+0xac>
 801d2c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d2ca:	eb07 0906 	add.w	r9, r7, r6
 801d2ce:	d110      	bne.n	801d2f2 <__cvt+0x92>
 801d2d0:	783b      	ldrb	r3, [r7, #0]
 801d2d2:	2b30      	cmp	r3, #48	; 0x30
 801d2d4:	d10a      	bne.n	801d2ec <__cvt+0x8c>
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	2300      	movs	r3, #0
 801d2da:	4620      	mov	r0, r4
 801d2dc:	4629      	mov	r1, r5
 801d2de:	f7e3 fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 801d2e2:	b918      	cbnz	r0, 801d2ec <__cvt+0x8c>
 801d2e4:	f1c6 0601 	rsb	r6, r6, #1
 801d2e8:	f8ca 6000 	str.w	r6, [sl]
 801d2ec:	f8da 3000 	ldr.w	r3, [sl]
 801d2f0:	4499      	add	r9, r3
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	4620      	mov	r0, r4
 801d2f8:	4629      	mov	r1, r5
 801d2fa:	f7e3 fbf5 	bl	8000ae8 <__aeabi_dcmpeq>
 801d2fe:	b108      	cbz	r0, 801d304 <__cvt+0xa4>
 801d300:	f8cd 900c 	str.w	r9, [sp, #12]
 801d304:	2230      	movs	r2, #48	; 0x30
 801d306:	9b03      	ldr	r3, [sp, #12]
 801d308:	454b      	cmp	r3, r9
 801d30a:	d307      	bcc.n	801d31c <__cvt+0xbc>
 801d30c:	9b03      	ldr	r3, [sp, #12]
 801d30e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d310:	1bdb      	subs	r3, r3, r7
 801d312:	4638      	mov	r0, r7
 801d314:	6013      	str	r3, [r2, #0]
 801d316:	b004      	add	sp, #16
 801d318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d31c:	1c59      	adds	r1, r3, #1
 801d31e:	9103      	str	r1, [sp, #12]
 801d320:	701a      	strb	r2, [r3, #0]
 801d322:	e7f0      	b.n	801d306 <__cvt+0xa6>

0801d324 <__exponent>:
 801d324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d326:	4603      	mov	r3, r0
 801d328:	2900      	cmp	r1, #0
 801d32a:	bfb8      	it	lt
 801d32c:	4249      	neglt	r1, r1
 801d32e:	f803 2b02 	strb.w	r2, [r3], #2
 801d332:	bfb4      	ite	lt
 801d334:	222d      	movlt	r2, #45	; 0x2d
 801d336:	222b      	movge	r2, #43	; 0x2b
 801d338:	2909      	cmp	r1, #9
 801d33a:	7042      	strb	r2, [r0, #1]
 801d33c:	dd2a      	ble.n	801d394 <__exponent+0x70>
 801d33e:	f10d 0407 	add.w	r4, sp, #7
 801d342:	46a4      	mov	ip, r4
 801d344:	270a      	movs	r7, #10
 801d346:	46a6      	mov	lr, r4
 801d348:	460a      	mov	r2, r1
 801d34a:	fb91 f6f7 	sdiv	r6, r1, r7
 801d34e:	fb07 1516 	mls	r5, r7, r6, r1
 801d352:	3530      	adds	r5, #48	; 0x30
 801d354:	2a63      	cmp	r2, #99	; 0x63
 801d356:	f104 34ff 	add.w	r4, r4, #4294967295
 801d35a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d35e:	4631      	mov	r1, r6
 801d360:	dcf1      	bgt.n	801d346 <__exponent+0x22>
 801d362:	3130      	adds	r1, #48	; 0x30
 801d364:	f1ae 0502 	sub.w	r5, lr, #2
 801d368:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d36c:	1c44      	adds	r4, r0, #1
 801d36e:	4629      	mov	r1, r5
 801d370:	4561      	cmp	r1, ip
 801d372:	d30a      	bcc.n	801d38a <__exponent+0x66>
 801d374:	f10d 0209 	add.w	r2, sp, #9
 801d378:	eba2 020e 	sub.w	r2, r2, lr
 801d37c:	4565      	cmp	r5, ip
 801d37e:	bf88      	it	hi
 801d380:	2200      	movhi	r2, #0
 801d382:	4413      	add	r3, r2
 801d384:	1a18      	subs	r0, r3, r0
 801d386:	b003      	add	sp, #12
 801d388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d38e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d392:	e7ed      	b.n	801d370 <__exponent+0x4c>
 801d394:	2330      	movs	r3, #48	; 0x30
 801d396:	3130      	adds	r1, #48	; 0x30
 801d398:	7083      	strb	r3, [r0, #2]
 801d39a:	70c1      	strb	r1, [r0, #3]
 801d39c:	1d03      	adds	r3, r0, #4
 801d39e:	e7f1      	b.n	801d384 <__exponent+0x60>

0801d3a0 <_printf_float>:
 801d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a4:	ed2d 8b02 	vpush	{d8}
 801d3a8:	b08d      	sub	sp, #52	; 0x34
 801d3aa:	460c      	mov	r4, r1
 801d3ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d3b0:	4616      	mov	r6, r2
 801d3b2:	461f      	mov	r7, r3
 801d3b4:	4605      	mov	r5, r0
 801d3b6:	f002 ff97 	bl	80202e8 <_localeconv_r>
 801d3ba:	f8d0 a000 	ldr.w	sl, [r0]
 801d3be:	4650      	mov	r0, sl
 801d3c0:	f7e2 ff16 	bl	80001f0 <strlen>
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	930a      	str	r3, [sp, #40]	; 0x28
 801d3c8:	6823      	ldr	r3, [r4, #0]
 801d3ca:	9305      	str	r3, [sp, #20]
 801d3cc:	f8d8 3000 	ldr.w	r3, [r8]
 801d3d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d3d4:	3307      	adds	r3, #7
 801d3d6:	f023 0307 	bic.w	r3, r3, #7
 801d3da:	f103 0208 	add.w	r2, r3, #8
 801d3de:	f8c8 2000 	str.w	r2, [r8]
 801d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d3ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d3ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d3f2:	9307      	str	r3, [sp, #28]
 801d3f4:	f8cd 8018 	str.w	r8, [sp, #24]
 801d3f8:	ee08 0a10 	vmov	s16, r0
 801d3fc:	4b9f      	ldr	r3, [pc, #636]	; (801d67c <_printf_float+0x2dc>)
 801d3fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d402:	f04f 32ff 	mov.w	r2, #4294967295
 801d406:	f7e3 fba1 	bl	8000b4c <__aeabi_dcmpun>
 801d40a:	bb88      	cbnz	r0, 801d470 <_printf_float+0xd0>
 801d40c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d410:	4b9a      	ldr	r3, [pc, #616]	; (801d67c <_printf_float+0x2dc>)
 801d412:	f04f 32ff 	mov.w	r2, #4294967295
 801d416:	f7e3 fb7b 	bl	8000b10 <__aeabi_dcmple>
 801d41a:	bb48      	cbnz	r0, 801d470 <_printf_float+0xd0>
 801d41c:	2200      	movs	r2, #0
 801d41e:	2300      	movs	r3, #0
 801d420:	4640      	mov	r0, r8
 801d422:	4649      	mov	r1, r9
 801d424:	f7e3 fb6a 	bl	8000afc <__aeabi_dcmplt>
 801d428:	b110      	cbz	r0, 801d430 <_printf_float+0x90>
 801d42a:	232d      	movs	r3, #45	; 0x2d
 801d42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d430:	4b93      	ldr	r3, [pc, #588]	; (801d680 <_printf_float+0x2e0>)
 801d432:	4894      	ldr	r0, [pc, #592]	; (801d684 <_printf_float+0x2e4>)
 801d434:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d438:	bf94      	ite	ls
 801d43a:	4698      	movls	r8, r3
 801d43c:	4680      	movhi	r8, r0
 801d43e:	2303      	movs	r3, #3
 801d440:	6123      	str	r3, [r4, #16]
 801d442:	9b05      	ldr	r3, [sp, #20]
 801d444:	f023 0204 	bic.w	r2, r3, #4
 801d448:	6022      	str	r2, [r4, #0]
 801d44a:	f04f 0900 	mov.w	r9, #0
 801d44e:	9700      	str	r7, [sp, #0]
 801d450:	4633      	mov	r3, r6
 801d452:	aa0b      	add	r2, sp, #44	; 0x2c
 801d454:	4621      	mov	r1, r4
 801d456:	4628      	mov	r0, r5
 801d458:	f000 f9d8 	bl	801d80c <_printf_common>
 801d45c:	3001      	adds	r0, #1
 801d45e:	f040 8090 	bne.w	801d582 <_printf_float+0x1e2>
 801d462:	f04f 30ff 	mov.w	r0, #4294967295
 801d466:	b00d      	add	sp, #52	; 0x34
 801d468:	ecbd 8b02 	vpop	{d8}
 801d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d470:	4642      	mov	r2, r8
 801d472:	464b      	mov	r3, r9
 801d474:	4640      	mov	r0, r8
 801d476:	4649      	mov	r1, r9
 801d478:	f7e3 fb68 	bl	8000b4c <__aeabi_dcmpun>
 801d47c:	b140      	cbz	r0, 801d490 <_printf_float+0xf0>
 801d47e:	464b      	mov	r3, r9
 801d480:	2b00      	cmp	r3, #0
 801d482:	bfbc      	itt	lt
 801d484:	232d      	movlt	r3, #45	; 0x2d
 801d486:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d48a:	487f      	ldr	r0, [pc, #508]	; (801d688 <_printf_float+0x2e8>)
 801d48c:	4b7f      	ldr	r3, [pc, #508]	; (801d68c <_printf_float+0x2ec>)
 801d48e:	e7d1      	b.n	801d434 <_printf_float+0x94>
 801d490:	6863      	ldr	r3, [r4, #4]
 801d492:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d496:	9206      	str	r2, [sp, #24]
 801d498:	1c5a      	adds	r2, r3, #1
 801d49a:	d13f      	bne.n	801d51c <_printf_float+0x17c>
 801d49c:	2306      	movs	r3, #6
 801d49e:	6063      	str	r3, [r4, #4]
 801d4a0:	9b05      	ldr	r3, [sp, #20]
 801d4a2:	6861      	ldr	r1, [r4, #4]
 801d4a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	9303      	str	r3, [sp, #12]
 801d4ac:	ab0a      	add	r3, sp, #40	; 0x28
 801d4ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d4b2:	ab09      	add	r3, sp, #36	; 0x24
 801d4b4:	ec49 8b10 	vmov	d0, r8, r9
 801d4b8:	9300      	str	r3, [sp, #0]
 801d4ba:	6022      	str	r2, [r4, #0]
 801d4bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d4c0:	4628      	mov	r0, r5
 801d4c2:	f7ff fecd 	bl	801d260 <__cvt>
 801d4c6:	9b06      	ldr	r3, [sp, #24]
 801d4c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d4ca:	2b47      	cmp	r3, #71	; 0x47
 801d4cc:	4680      	mov	r8, r0
 801d4ce:	d108      	bne.n	801d4e2 <_printf_float+0x142>
 801d4d0:	1cc8      	adds	r0, r1, #3
 801d4d2:	db02      	blt.n	801d4da <_printf_float+0x13a>
 801d4d4:	6863      	ldr	r3, [r4, #4]
 801d4d6:	4299      	cmp	r1, r3
 801d4d8:	dd41      	ble.n	801d55e <_printf_float+0x1be>
 801d4da:	f1ab 0b02 	sub.w	fp, fp, #2
 801d4de:	fa5f fb8b 	uxtb.w	fp, fp
 801d4e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d4e6:	d820      	bhi.n	801d52a <_printf_float+0x18a>
 801d4e8:	3901      	subs	r1, #1
 801d4ea:	465a      	mov	r2, fp
 801d4ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d4f0:	9109      	str	r1, [sp, #36]	; 0x24
 801d4f2:	f7ff ff17 	bl	801d324 <__exponent>
 801d4f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4f8:	1813      	adds	r3, r2, r0
 801d4fa:	2a01      	cmp	r2, #1
 801d4fc:	4681      	mov	r9, r0
 801d4fe:	6123      	str	r3, [r4, #16]
 801d500:	dc02      	bgt.n	801d508 <_printf_float+0x168>
 801d502:	6822      	ldr	r2, [r4, #0]
 801d504:	07d2      	lsls	r2, r2, #31
 801d506:	d501      	bpl.n	801d50c <_printf_float+0x16c>
 801d508:	3301      	adds	r3, #1
 801d50a:	6123      	str	r3, [r4, #16]
 801d50c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d510:	2b00      	cmp	r3, #0
 801d512:	d09c      	beq.n	801d44e <_printf_float+0xae>
 801d514:	232d      	movs	r3, #45	; 0x2d
 801d516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d51a:	e798      	b.n	801d44e <_printf_float+0xae>
 801d51c:	9a06      	ldr	r2, [sp, #24]
 801d51e:	2a47      	cmp	r2, #71	; 0x47
 801d520:	d1be      	bne.n	801d4a0 <_printf_float+0x100>
 801d522:	2b00      	cmp	r3, #0
 801d524:	d1bc      	bne.n	801d4a0 <_printf_float+0x100>
 801d526:	2301      	movs	r3, #1
 801d528:	e7b9      	b.n	801d49e <_printf_float+0xfe>
 801d52a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d52e:	d118      	bne.n	801d562 <_printf_float+0x1c2>
 801d530:	2900      	cmp	r1, #0
 801d532:	6863      	ldr	r3, [r4, #4]
 801d534:	dd0b      	ble.n	801d54e <_printf_float+0x1ae>
 801d536:	6121      	str	r1, [r4, #16]
 801d538:	b913      	cbnz	r3, 801d540 <_printf_float+0x1a0>
 801d53a:	6822      	ldr	r2, [r4, #0]
 801d53c:	07d0      	lsls	r0, r2, #31
 801d53e:	d502      	bpl.n	801d546 <_printf_float+0x1a6>
 801d540:	3301      	adds	r3, #1
 801d542:	440b      	add	r3, r1
 801d544:	6123      	str	r3, [r4, #16]
 801d546:	65a1      	str	r1, [r4, #88]	; 0x58
 801d548:	f04f 0900 	mov.w	r9, #0
 801d54c:	e7de      	b.n	801d50c <_printf_float+0x16c>
 801d54e:	b913      	cbnz	r3, 801d556 <_printf_float+0x1b6>
 801d550:	6822      	ldr	r2, [r4, #0]
 801d552:	07d2      	lsls	r2, r2, #31
 801d554:	d501      	bpl.n	801d55a <_printf_float+0x1ba>
 801d556:	3302      	adds	r3, #2
 801d558:	e7f4      	b.n	801d544 <_printf_float+0x1a4>
 801d55a:	2301      	movs	r3, #1
 801d55c:	e7f2      	b.n	801d544 <_printf_float+0x1a4>
 801d55e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d564:	4299      	cmp	r1, r3
 801d566:	db05      	blt.n	801d574 <_printf_float+0x1d4>
 801d568:	6823      	ldr	r3, [r4, #0]
 801d56a:	6121      	str	r1, [r4, #16]
 801d56c:	07d8      	lsls	r0, r3, #31
 801d56e:	d5ea      	bpl.n	801d546 <_printf_float+0x1a6>
 801d570:	1c4b      	adds	r3, r1, #1
 801d572:	e7e7      	b.n	801d544 <_printf_float+0x1a4>
 801d574:	2900      	cmp	r1, #0
 801d576:	bfd4      	ite	le
 801d578:	f1c1 0202 	rsble	r2, r1, #2
 801d57c:	2201      	movgt	r2, #1
 801d57e:	4413      	add	r3, r2
 801d580:	e7e0      	b.n	801d544 <_printf_float+0x1a4>
 801d582:	6823      	ldr	r3, [r4, #0]
 801d584:	055a      	lsls	r2, r3, #21
 801d586:	d407      	bmi.n	801d598 <_printf_float+0x1f8>
 801d588:	6923      	ldr	r3, [r4, #16]
 801d58a:	4642      	mov	r2, r8
 801d58c:	4631      	mov	r1, r6
 801d58e:	4628      	mov	r0, r5
 801d590:	47b8      	blx	r7
 801d592:	3001      	adds	r0, #1
 801d594:	d12c      	bne.n	801d5f0 <_printf_float+0x250>
 801d596:	e764      	b.n	801d462 <_printf_float+0xc2>
 801d598:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d59c:	f240 80e0 	bls.w	801d760 <_printf_float+0x3c0>
 801d5a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	2300      	movs	r3, #0
 801d5a8:	f7e3 fa9e 	bl	8000ae8 <__aeabi_dcmpeq>
 801d5ac:	2800      	cmp	r0, #0
 801d5ae:	d034      	beq.n	801d61a <_printf_float+0x27a>
 801d5b0:	4a37      	ldr	r2, [pc, #220]	; (801d690 <_printf_float+0x2f0>)
 801d5b2:	2301      	movs	r3, #1
 801d5b4:	4631      	mov	r1, r6
 801d5b6:	4628      	mov	r0, r5
 801d5b8:	47b8      	blx	r7
 801d5ba:	3001      	adds	r0, #1
 801d5bc:	f43f af51 	beq.w	801d462 <_printf_float+0xc2>
 801d5c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d5c4:	429a      	cmp	r2, r3
 801d5c6:	db02      	blt.n	801d5ce <_printf_float+0x22e>
 801d5c8:	6823      	ldr	r3, [r4, #0]
 801d5ca:	07d8      	lsls	r0, r3, #31
 801d5cc:	d510      	bpl.n	801d5f0 <_printf_float+0x250>
 801d5ce:	ee18 3a10 	vmov	r3, s16
 801d5d2:	4652      	mov	r2, sl
 801d5d4:	4631      	mov	r1, r6
 801d5d6:	4628      	mov	r0, r5
 801d5d8:	47b8      	blx	r7
 801d5da:	3001      	adds	r0, #1
 801d5dc:	f43f af41 	beq.w	801d462 <_printf_float+0xc2>
 801d5e0:	f04f 0800 	mov.w	r8, #0
 801d5e4:	f104 091a 	add.w	r9, r4, #26
 801d5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5ea:	3b01      	subs	r3, #1
 801d5ec:	4543      	cmp	r3, r8
 801d5ee:	dc09      	bgt.n	801d604 <_printf_float+0x264>
 801d5f0:	6823      	ldr	r3, [r4, #0]
 801d5f2:	079b      	lsls	r3, r3, #30
 801d5f4:	f100 8105 	bmi.w	801d802 <_printf_float+0x462>
 801d5f8:	68e0      	ldr	r0, [r4, #12]
 801d5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5fc:	4298      	cmp	r0, r3
 801d5fe:	bfb8      	it	lt
 801d600:	4618      	movlt	r0, r3
 801d602:	e730      	b.n	801d466 <_printf_float+0xc6>
 801d604:	2301      	movs	r3, #1
 801d606:	464a      	mov	r2, r9
 801d608:	4631      	mov	r1, r6
 801d60a:	4628      	mov	r0, r5
 801d60c:	47b8      	blx	r7
 801d60e:	3001      	adds	r0, #1
 801d610:	f43f af27 	beq.w	801d462 <_printf_float+0xc2>
 801d614:	f108 0801 	add.w	r8, r8, #1
 801d618:	e7e6      	b.n	801d5e8 <_printf_float+0x248>
 801d61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	dc39      	bgt.n	801d694 <_printf_float+0x2f4>
 801d620:	4a1b      	ldr	r2, [pc, #108]	; (801d690 <_printf_float+0x2f0>)
 801d622:	2301      	movs	r3, #1
 801d624:	4631      	mov	r1, r6
 801d626:	4628      	mov	r0, r5
 801d628:	47b8      	blx	r7
 801d62a:	3001      	adds	r0, #1
 801d62c:	f43f af19 	beq.w	801d462 <_printf_float+0xc2>
 801d630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d634:	4313      	orrs	r3, r2
 801d636:	d102      	bne.n	801d63e <_printf_float+0x29e>
 801d638:	6823      	ldr	r3, [r4, #0]
 801d63a:	07d9      	lsls	r1, r3, #31
 801d63c:	d5d8      	bpl.n	801d5f0 <_printf_float+0x250>
 801d63e:	ee18 3a10 	vmov	r3, s16
 801d642:	4652      	mov	r2, sl
 801d644:	4631      	mov	r1, r6
 801d646:	4628      	mov	r0, r5
 801d648:	47b8      	blx	r7
 801d64a:	3001      	adds	r0, #1
 801d64c:	f43f af09 	beq.w	801d462 <_printf_float+0xc2>
 801d650:	f04f 0900 	mov.w	r9, #0
 801d654:	f104 0a1a 	add.w	sl, r4, #26
 801d658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d65a:	425b      	negs	r3, r3
 801d65c:	454b      	cmp	r3, r9
 801d65e:	dc01      	bgt.n	801d664 <_printf_float+0x2c4>
 801d660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d662:	e792      	b.n	801d58a <_printf_float+0x1ea>
 801d664:	2301      	movs	r3, #1
 801d666:	4652      	mov	r2, sl
 801d668:	4631      	mov	r1, r6
 801d66a:	4628      	mov	r0, r5
 801d66c:	47b8      	blx	r7
 801d66e:	3001      	adds	r0, #1
 801d670:	f43f aef7 	beq.w	801d462 <_printf_float+0xc2>
 801d674:	f109 0901 	add.w	r9, r9, #1
 801d678:	e7ee      	b.n	801d658 <_printf_float+0x2b8>
 801d67a:	bf00      	nop
 801d67c:	7fefffff 	.word	0x7fefffff
 801d680:	0802988c 	.word	0x0802988c
 801d684:	08029890 	.word	0x08029890
 801d688:	08029898 	.word	0x08029898
 801d68c:	08029894 	.word	0x08029894
 801d690:	0802989c 	.word	0x0802989c
 801d694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d698:	429a      	cmp	r2, r3
 801d69a:	bfa8      	it	ge
 801d69c:	461a      	movge	r2, r3
 801d69e:	2a00      	cmp	r2, #0
 801d6a0:	4691      	mov	r9, r2
 801d6a2:	dc37      	bgt.n	801d714 <_printf_float+0x374>
 801d6a4:	f04f 0b00 	mov.w	fp, #0
 801d6a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d6ac:	f104 021a 	add.w	r2, r4, #26
 801d6b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d6b2:	9305      	str	r3, [sp, #20]
 801d6b4:	eba3 0309 	sub.w	r3, r3, r9
 801d6b8:	455b      	cmp	r3, fp
 801d6ba:	dc33      	bgt.n	801d724 <_printf_float+0x384>
 801d6bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d6c0:	429a      	cmp	r2, r3
 801d6c2:	db3b      	blt.n	801d73c <_printf_float+0x39c>
 801d6c4:	6823      	ldr	r3, [r4, #0]
 801d6c6:	07da      	lsls	r2, r3, #31
 801d6c8:	d438      	bmi.n	801d73c <_printf_float+0x39c>
 801d6ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d6cc:	9b05      	ldr	r3, [sp, #20]
 801d6ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d6d0:	1ad3      	subs	r3, r2, r3
 801d6d2:	eba2 0901 	sub.w	r9, r2, r1
 801d6d6:	4599      	cmp	r9, r3
 801d6d8:	bfa8      	it	ge
 801d6da:	4699      	movge	r9, r3
 801d6dc:	f1b9 0f00 	cmp.w	r9, #0
 801d6e0:	dc35      	bgt.n	801d74e <_printf_float+0x3ae>
 801d6e2:	f04f 0800 	mov.w	r8, #0
 801d6e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d6ea:	f104 0a1a 	add.w	sl, r4, #26
 801d6ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d6f2:	1a9b      	subs	r3, r3, r2
 801d6f4:	eba3 0309 	sub.w	r3, r3, r9
 801d6f8:	4543      	cmp	r3, r8
 801d6fa:	f77f af79 	ble.w	801d5f0 <_printf_float+0x250>
 801d6fe:	2301      	movs	r3, #1
 801d700:	4652      	mov	r2, sl
 801d702:	4631      	mov	r1, r6
 801d704:	4628      	mov	r0, r5
 801d706:	47b8      	blx	r7
 801d708:	3001      	adds	r0, #1
 801d70a:	f43f aeaa 	beq.w	801d462 <_printf_float+0xc2>
 801d70e:	f108 0801 	add.w	r8, r8, #1
 801d712:	e7ec      	b.n	801d6ee <_printf_float+0x34e>
 801d714:	4613      	mov	r3, r2
 801d716:	4631      	mov	r1, r6
 801d718:	4642      	mov	r2, r8
 801d71a:	4628      	mov	r0, r5
 801d71c:	47b8      	blx	r7
 801d71e:	3001      	adds	r0, #1
 801d720:	d1c0      	bne.n	801d6a4 <_printf_float+0x304>
 801d722:	e69e      	b.n	801d462 <_printf_float+0xc2>
 801d724:	2301      	movs	r3, #1
 801d726:	4631      	mov	r1, r6
 801d728:	4628      	mov	r0, r5
 801d72a:	9205      	str	r2, [sp, #20]
 801d72c:	47b8      	blx	r7
 801d72e:	3001      	adds	r0, #1
 801d730:	f43f ae97 	beq.w	801d462 <_printf_float+0xc2>
 801d734:	9a05      	ldr	r2, [sp, #20]
 801d736:	f10b 0b01 	add.w	fp, fp, #1
 801d73a:	e7b9      	b.n	801d6b0 <_printf_float+0x310>
 801d73c:	ee18 3a10 	vmov	r3, s16
 801d740:	4652      	mov	r2, sl
 801d742:	4631      	mov	r1, r6
 801d744:	4628      	mov	r0, r5
 801d746:	47b8      	blx	r7
 801d748:	3001      	adds	r0, #1
 801d74a:	d1be      	bne.n	801d6ca <_printf_float+0x32a>
 801d74c:	e689      	b.n	801d462 <_printf_float+0xc2>
 801d74e:	9a05      	ldr	r2, [sp, #20]
 801d750:	464b      	mov	r3, r9
 801d752:	4442      	add	r2, r8
 801d754:	4631      	mov	r1, r6
 801d756:	4628      	mov	r0, r5
 801d758:	47b8      	blx	r7
 801d75a:	3001      	adds	r0, #1
 801d75c:	d1c1      	bne.n	801d6e2 <_printf_float+0x342>
 801d75e:	e680      	b.n	801d462 <_printf_float+0xc2>
 801d760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d762:	2a01      	cmp	r2, #1
 801d764:	dc01      	bgt.n	801d76a <_printf_float+0x3ca>
 801d766:	07db      	lsls	r3, r3, #31
 801d768:	d538      	bpl.n	801d7dc <_printf_float+0x43c>
 801d76a:	2301      	movs	r3, #1
 801d76c:	4642      	mov	r2, r8
 801d76e:	4631      	mov	r1, r6
 801d770:	4628      	mov	r0, r5
 801d772:	47b8      	blx	r7
 801d774:	3001      	adds	r0, #1
 801d776:	f43f ae74 	beq.w	801d462 <_printf_float+0xc2>
 801d77a:	ee18 3a10 	vmov	r3, s16
 801d77e:	4652      	mov	r2, sl
 801d780:	4631      	mov	r1, r6
 801d782:	4628      	mov	r0, r5
 801d784:	47b8      	blx	r7
 801d786:	3001      	adds	r0, #1
 801d788:	f43f ae6b 	beq.w	801d462 <_printf_float+0xc2>
 801d78c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d790:	2200      	movs	r2, #0
 801d792:	2300      	movs	r3, #0
 801d794:	f7e3 f9a8 	bl	8000ae8 <__aeabi_dcmpeq>
 801d798:	b9d8      	cbnz	r0, 801d7d2 <_printf_float+0x432>
 801d79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d79c:	f108 0201 	add.w	r2, r8, #1
 801d7a0:	3b01      	subs	r3, #1
 801d7a2:	4631      	mov	r1, r6
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	47b8      	blx	r7
 801d7a8:	3001      	adds	r0, #1
 801d7aa:	d10e      	bne.n	801d7ca <_printf_float+0x42a>
 801d7ac:	e659      	b.n	801d462 <_printf_float+0xc2>
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	4652      	mov	r2, sl
 801d7b2:	4631      	mov	r1, r6
 801d7b4:	4628      	mov	r0, r5
 801d7b6:	47b8      	blx	r7
 801d7b8:	3001      	adds	r0, #1
 801d7ba:	f43f ae52 	beq.w	801d462 <_printf_float+0xc2>
 801d7be:	f108 0801 	add.w	r8, r8, #1
 801d7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7c4:	3b01      	subs	r3, #1
 801d7c6:	4543      	cmp	r3, r8
 801d7c8:	dcf1      	bgt.n	801d7ae <_printf_float+0x40e>
 801d7ca:	464b      	mov	r3, r9
 801d7cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d7d0:	e6dc      	b.n	801d58c <_printf_float+0x1ec>
 801d7d2:	f04f 0800 	mov.w	r8, #0
 801d7d6:	f104 0a1a 	add.w	sl, r4, #26
 801d7da:	e7f2      	b.n	801d7c2 <_printf_float+0x422>
 801d7dc:	2301      	movs	r3, #1
 801d7de:	4642      	mov	r2, r8
 801d7e0:	e7df      	b.n	801d7a2 <_printf_float+0x402>
 801d7e2:	2301      	movs	r3, #1
 801d7e4:	464a      	mov	r2, r9
 801d7e6:	4631      	mov	r1, r6
 801d7e8:	4628      	mov	r0, r5
 801d7ea:	47b8      	blx	r7
 801d7ec:	3001      	adds	r0, #1
 801d7ee:	f43f ae38 	beq.w	801d462 <_printf_float+0xc2>
 801d7f2:	f108 0801 	add.w	r8, r8, #1
 801d7f6:	68e3      	ldr	r3, [r4, #12]
 801d7f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d7fa:	1a5b      	subs	r3, r3, r1
 801d7fc:	4543      	cmp	r3, r8
 801d7fe:	dcf0      	bgt.n	801d7e2 <_printf_float+0x442>
 801d800:	e6fa      	b.n	801d5f8 <_printf_float+0x258>
 801d802:	f04f 0800 	mov.w	r8, #0
 801d806:	f104 0919 	add.w	r9, r4, #25
 801d80a:	e7f4      	b.n	801d7f6 <_printf_float+0x456>

0801d80c <_printf_common>:
 801d80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d810:	4616      	mov	r6, r2
 801d812:	4699      	mov	r9, r3
 801d814:	688a      	ldr	r2, [r1, #8]
 801d816:	690b      	ldr	r3, [r1, #16]
 801d818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d81c:	4293      	cmp	r3, r2
 801d81e:	bfb8      	it	lt
 801d820:	4613      	movlt	r3, r2
 801d822:	6033      	str	r3, [r6, #0]
 801d824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d828:	4607      	mov	r7, r0
 801d82a:	460c      	mov	r4, r1
 801d82c:	b10a      	cbz	r2, 801d832 <_printf_common+0x26>
 801d82e:	3301      	adds	r3, #1
 801d830:	6033      	str	r3, [r6, #0]
 801d832:	6823      	ldr	r3, [r4, #0]
 801d834:	0699      	lsls	r1, r3, #26
 801d836:	bf42      	ittt	mi
 801d838:	6833      	ldrmi	r3, [r6, #0]
 801d83a:	3302      	addmi	r3, #2
 801d83c:	6033      	strmi	r3, [r6, #0]
 801d83e:	6825      	ldr	r5, [r4, #0]
 801d840:	f015 0506 	ands.w	r5, r5, #6
 801d844:	d106      	bne.n	801d854 <_printf_common+0x48>
 801d846:	f104 0a19 	add.w	sl, r4, #25
 801d84a:	68e3      	ldr	r3, [r4, #12]
 801d84c:	6832      	ldr	r2, [r6, #0]
 801d84e:	1a9b      	subs	r3, r3, r2
 801d850:	42ab      	cmp	r3, r5
 801d852:	dc26      	bgt.n	801d8a2 <_printf_common+0x96>
 801d854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d858:	1e13      	subs	r3, r2, #0
 801d85a:	6822      	ldr	r2, [r4, #0]
 801d85c:	bf18      	it	ne
 801d85e:	2301      	movne	r3, #1
 801d860:	0692      	lsls	r2, r2, #26
 801d862:	d42b      	bmi.n	801d8bc <_printf_common+0xb0>
 801d864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d868:	4649      	mov	r1, r9
 801d86a:	4638      	mov	r0, r7
 801d86c:	47c0      	blx	r8
 801d86e:	3001      	adds	r0, #1
 801d870:	d01e      	beq.n	801d8b0 <_printf_common+0xa4>
 801d872:	6823      	ldr	r3, [r4, #0]
 801d874:	68e5      	ldr	r5, [r4, #12]
 801d876:	6832      	ldr	r2, [r6, #0]
 801d878:	f003 0306 	and.w	r3, r3, #6
 801d87c:	2b04      	cmp	r3, #4
 801d87e:	bf08      	it	eq
 801d880:	1aad      	subeq	r5, r5, r2
 801d882:	68a3      	ldr	r3, [r4, #8]
 801d884:	6922      	ldr	r2, [r4, #16]
 801d886:	bf0c      	ite	eq
 801d888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d88c:	2500      	movne	r5, #0
 801d88e:	4293      	cmp	r3, r2
 801d890:	bfc4      	itt	gt
 801d892:	1a9b      	subgt	r3, r3, r2
 801d894:	18ed      	addgt	r5, r5, r3
 801d896:	2600      	movs	r6, #0
 801d898:	341a      	adds	r4, #26
 801d89a:	42b5      	cmp	r5, r6
 801d89c:	d11a      	bne.n	801d8d4 <_printf_common+0xc8>
 801d89e:	2000      	movs	r0, #0
 801d8a0:	e008      	b.n	801d8b4 <_printf_common+0xa8>
 801d8a2:	2301      	movs	r3, #1
 801d8a4:	4652      	mov	r2, sl
 801d8a6:	4649      	mov	r1, r9
 801d8a8:	4638      	mov	r0, r7
 801d8aa:	47c0      	blx	r8
 801d8ac:	3001      	adds	r0, #1
 801d8ae:	d103      	bne.n	801d8b8 <_printf_common+0xac>
 801d8b0:	f04f 30ff 	mov.w	r0, #4294967295
 801d8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8b8:	3501      	adds	r5, #1
 801d8ba:	e7c6      	b.n	801d84a <_printf_common+0x3e>
 801d8bc:	18e1      	adds	r1, r4, r3
 801d8be:	1c5a      	adds	r2, r3, #1
 801d8c0:	2030      	movs	r0, #48	; 0x30
 801d8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d8c6:	4422      	add	r2, r4
 801d8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d8d0:	3302      	adds	r3, #2
 801d8d2:	e7c7      	b.n	801d864 <_printf_common+0x58>
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	4622      	mov	r2, r4
 801d8d8:	4649      	mov	r1, r9
 801d8da:	4638      	mov	r0, r7
 801d8dc:	47c0      	blx	r8
 801d8de:	3001      	adds	r0, #1
 801d8e0:	d0e6      	beq.n	801d8b0 <_printf_common+0xa4>
 801d8e2:	3601      	adds	r6, #1
 801d8e4:	e7d9      	b.n	801d89a <_printf_common+0x8e>
	...

0801d8e8 <_printf_i>:
 801d8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d8ec:	460c      	mov	r4, r1
 801d8ee:	4691      	mov	r9, r2
 801d8f0:	7e27      	ldrb	r7, [r4, #24]
 801d8f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d8f4:	2f78      	cmp	r7, #120	; 0x78
 801d8f6:	4680      	mov	r8, r0
 801d8f8:	469a      	mov	sl, r3
 801d8fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d8fe:	d807      	bhi.n	801d910 <_printf_i+0x28>
 801d900:	2f62      	cmp	r7, #98	; 0x62
 801d902:	d80a      	bhi.n	801d91a <_printf_i+0x32>
 801d904:	2f00      	cmp	r7, #0
 801d906:	f000 80d8 	beq.w	801daba <_printf_i+0x1d2>
 801d90a:	2f58      	cmp	r7, #88	; 0x58
 801d90c:	f000 80a3 	beq.w	801da56 <_printf_i+0x16e>
 801d910:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d918:	e03a      	b.n	801d990 <_printf_i+0xa8>
 801d91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d91e:	2b15      	cmp	r3, #21
 801d920:	d8f6      	bhi.n	801d910 <_printf_i+0x28>
 801d922:	a001      	add	r0, pc, #4	; (adr r0, 801d928 <_printf_i+0x40>)
 801d924:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d928:	0801d981 	.word	0x0801d981
 801d92c:	0801d995 	.word	0x0801d995
 801d930:	0801d911 	.word	0x0801d911
 801d934:	0801d911 	.word	0x0801d911
 801d938:	0801d911 	.word	0x0801d911
 801d93c:	0801d911 	.word	0x0801d911
 801d940:	0801d995 	.word	0x0801d995
 801d944:	0801d911 	.word	0x0801d911
 801d948:	0801d911 	.word	0x0801d911
 801d94c:	0801d911 	.word	0x0801d911
 801d950:	0801d911 	.word	0x0801d911
 801d954:	0801daa1 	.word	0x0801daa1
 801d958:	0801d9c5 	.word	0x0801d9c5
 801d95c:	0801da83 	.word	0x0801da83
 801d960:	0801d911 	.word	0x0801d911
 801d964:	0801d911 	.word	0x0801d911
 801d968:	0801dac3 	.word	0x0801dac3
 801d96c:	0801d911 	.word	0x0801d911
 801d970:	0801d9c5 	.word	0x0801d9c5
 801d974:	0801d911 	.word	0x0801d911
 801d978:	0801d911 	.word	0x0801d911
 801d97c:	0801da8b 	.word	0x0801da8b
 801d980:	680b      	ldr	r3, [r1, #0]
 801d982:	1d1a      	adds	r2, r3, #4
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	600a      	str	r2, [r1, #0]
 801d988:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d990:	2301      	movs	r3, #1
 801d992:	e0a3      	b.n	801dadc <_printf_i+0x1f4>
 801d994:	6825      	ldr	r5, [r4, #0]
 801d996:	6808      	ldr	r0, [r1, #0]
 801d998:	062e      	lsls	r6, r5, #24
 801d99a:	f100 0304 	add.w	r3, r0, #4
 801d99e:	d50a      	bpl.n	801d9b6 <_printf_i+0xce>
 801d9a0:	6805      	ldr	r5, [r0, #0]
 801d9a2:	600b      	str	r3, [r1, #0]
 801d9a4:	2d00      	cmp	r5, #0
 801d9a6:	da03      	bge.n	801d9b0 <_printf_i+0xc8>
 801d9a8:	232d      	movs	r3, #45	; 0x2d
 801d9aa:	426d      	negs	r5, r5
 801d9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d9b0:	485e      	ldr	r0, [pc, #376]	; (801db2c <_printf_i+0x244>)
 801d9b2:	230a      	movs	r3, #10
 801d9b4:	e019      	b.n	801d9ea <_printf_i+0x102>
 801d9b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d9ba:	6805      	ldr	r5, [r0, #0]
 801d9bc:	600b      	str	r3, [r1, #0]
 801d9be:	bf18      	it	ne
 801d9c0:	b22d      	sxthne	r5, r5
 801d9c2:	e7ef      	b.n	801d9a4 <_printf_i+0xbc>
 801d9c4:	680b      	ldr	r3, [r1, #0]
 801d9c6:	6825      	ldr	r5, [r4, #0]
 801d9c8:	1d18      	adds	r0, r3, #4
 801d9ca:	6008      	str	r0, [r1, #0]
 801d9cc:	0628      	lsls	r0, r5, #24
 801d9ce:	d501      	bpl.n	801d9d4 <_printf_i+0xec>
 801d9d0:	681d      	ldr	r5, [r3, #0]
 801d9d2:	e002      	b.n	801d9da <_printf_i+0xf2>
 801d9d4:	0669      	lsls	r1, r5, #25
 801d9d6:	d5fb      	bpl.n	801d9d0 <_printf_i+0xe8>
 801d9d8:	881d      	ldrh	r5, [r3, #0]
 801d9da:	4854      	ldr	r0, [pc, #336]	; (801db2c <_printf_i+0x244>)
 801d9dc:	2f6f      	cmp	r7, #111	; 0x6f
 801d9de:	bf0c      	ite	eq
 801d9e0:	2308      	moveq	r3, #8
 801d9e2:	230a      	movne	r3, #10
 801d9e4:	2100      	movs	r1, #0
 801d9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d9ea:	6866      	ldr	r6, [r4, #4]
 801d9ec:	60a6      	str	r6, [r4, #8]
 801d9ee:	2e00      	cmp	r6, #0
 801d9f0:	bfa2      	ittt	ge
 801d9f2:	6821      	ldrge	r1, [r4, #0]
 801d9f4:	f021 0104 	bicge.w	r1, r1, #4
 801d9f8:	6021      	strge	r1, [r4, #0]
 801d9fa:	b90d      	cbnz	r5, 801da00 <_printf_i+0x118>
 801d9fc:	2e00      	cmp	r6, #0
 801d9fe:	d04d      	beq.n	801da9c <_printf_i+0x1b4>
 801da00:	4616      	mov	r6, r2
 801da02:	fbb5 f1f3 	udiv	r1, r5, r3
 801da06:	fb03 5711 	mls	r7, r3, r1, r5
 801da0a:	5dc7      	ldrb	r7, [r0, r7]
 801da0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801da10:	462f      	mov	r7, r5
 801da12:	42bb      	cmp	r3, r7
 801da14:	460d      	mov	r5, r1
 801da16:	d9f4      	bls.n	801da02 <_printf_i+0x11a>
 801da18:	2b08      	cmp	r3, #8
 801da1a:	d10b      	bne.n	801da34 <_printf_i+0x14c>
 801da1c:	6823      	ldr	r3, [r4, #0]
 801da1e:	07df      	lsls	r7, r3, #31
 801da20:	d508      	bpl.n	801da34 <_printf_i+0x14c>
 801da22:	6923      	ldr	r3, [r4, #16]
 801da24:	6861      	ldr	r1, [r4, #4]
 801da26:	4299      	cmp	r1, r3
 801da28:	bfde      	ittt	le
 801da2a:	2330      	movle	r3, #48	; 0x30
 801da2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801da30:	f106 36ff 	addle.w	r6, r6, #4294967295
 801da34:	1b92      	subs	r2, r2, r6
 801da36:	6122      	str	r2, [r4, #16]
 801da38:	f8cd a000 	str.w	sl, [sp]
 801da3c:	464b      	mov	r3, r9
 801da3e:	aa03      	add	r2, sp, #12
 801da40:	4621      	mov	r1, r4
 801da42:	4640      	mov	r0, r8
 801da44:	f7ff fee2 	bl	801d80c <_printf_common>
 801da48:	3001      	adds	r0, #1
 801da4a:	d14c      	bne.n	801dae6 <_printf_i+0x1fe>
 801da4c:	f04f 30ff 	mov.w	r0, #4294967295
 801da50:	b004      	add	sp, #16
 801da52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da56:	4835      	ldr	r0, [pc, #212]	; (801db2c <_printf_i+0x244>)
 801da58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801da5c:	6823      	ldr	r3, [r4, #0]
 801da5e:	680e      	ldr	r6, [r1, #0]
 801da60:	061f      	lsls	r7, r3, #24
 801da62:	f856 5b04 	ldr.w	r5, [r6], #4
 801da66:	600e      	str	r6, [r1, #0]
 801da68:	d514      	bpl.n	801da94 <_printf_i+0x1ac>
 801da6a:	07d9      	lsls	r1, r3, #31
 801da6c:	bf44      	itt	mi
 801da6e:	f043 0320 	orrmi.w	r3, r3, #32
 801da72:	6023      	strmi	r3, [r4, #0]
 801da74:	b91d      	cbnz	r5, 801da7e <_printf_i+0x196>
 801da76:	6823      	ldr	r3, [r4, #0]
 801da78:	f023 0320 	bic.w	r3, r3, #32
 801da7c:	6023      	str	r3, [r4, #0]
 801da7e:	2310      	movs	r3, #16
 801da80:	e7b0      	b.n	801d9e4 <_printf_i+0xfc>
 801da82:	6823      	ldr	r3, [r4, #0]
 801da84:	f043 0320 	orr.w	r3, r3, #32
 801da88:	6023      	str	r3, [r4, #0]
 801da8a:	2378      	movs	r3, #120	; 0x78
 801da8c:	4828      	ldr	r0, [pc, #160]	; (801db30 <_printf_i+0x248>)
 801da8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801da92:	e7e3      	b.n	801da5c <_printf_i+0x174>
 801da94:	065e      	lsls	r6, r3, #25
 801da96:	bf48      	it	mi
 801da98:	b2ad      	uxthmi	r5, r5
 801da9a:	e7e6      	b.n	801da6a <_printf_i+0x182>
 801da9c:	4616      	mov	r6, r2
 801da9e:	e7bb      	b.n	801da18 <_printf_i+0x130>
 801daa0:	680b      	ldr	r3, [r1, #0]
 801daa2:	6826      	ldr	r6, [r4, #0]
 801daa4:	6960      	ldr	r0, [r4, #20]
 801daa6:	1d1d      	adds	r5, r3, #4
 801daa8:	600d      	str	r5, [r1, #0]
 801daaa:	0635      	lsls	r5, r6, #24
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	d501      	bpl.n	801dab4 <_printf_i+0x1cc>
 801dab0:	6018      	str	r0, [r3, #0]
 801dab2:	e002      	b.n	801daba <_printf_i+0x1d2>
 801dab4:	0671      	lsls	r1, r6, #25
 801dab6:	d5fb      	bpl.n	801dab0 <_printf_i+0x1c8>
 801dab8:	8018      	strh	r0, [r3, #0]
 801daba:	2300      	movs	r3, #0
 801dabc:	6123      	str	r3, [r4, #16]
 801dabe:	4616      	mov	r6, r2
 801dac0:	e7ba      	b.n	801da38 <_printf_i+0x150>
 801dac2:	680b      	ldr	r3, [r1, #0]
 801dac4:	1d1a      	adds	r2, r3, #4
 801dac6:	600a      	str	r2, [r1, #0]
 801dac8:	681e      	ldr	r6, [r3, #0]
 801daca:	6862      	ldr	r2, [r4, #4]
 801dacc:	2100      	movs	r1, #0
 801dace:	4630      	mov	r0, r6
 801dad0:	f7e2 fb96 	bl	8000200 <memchr>
 801dad4:	b108      	cbz	r0, 801dada <_printf_i+0x1f2>
 801dad6:	1b80      	subs	r0, r0, r6
 801dad8:	6060      	str	r0, [r4, #4]
 801dada:	6863      	ldr	r3, [r4, #4]
 801dadc:	6123      	str	r3, [r4, #16]
 801dade:	2300      	movs	r3, #0
 801dae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dae4:	e7a8      	b.n	801da38 <_printf_i+0x150>
 801dae6:	6923      	ldr	r3, [r4, #16]
 801dae8:	4632      	mov	r2, r6
 801daea:	4649      	mov	r1, r9
 801daec:	4640      	mov	r0, r8
 801daee:	47d0      	blx	sl
 801daf0:	3001      	adds	r0, #1
 801daf2:	d0ab      	beq.n	801da4c <_printf_i+0x164>
 801daf4:	6823      	ldr	r3, [r4, #0]
 801daf6:	079b      	lsls	r3, r3, #30
 801daf8:	d413      	bmi.n	801db22 <_printf_i+0x23a>
 801dafa:	68e0      	ldr	r0, [r4, #12]
 801dafc:	9b03      	ldr	r3, [sp, #12]
 801dafe:	4298      	cmp	r0, r3
 801db00:	bfb8      	it	lt
 801db02:	4618      	movlt	r0, r3
 801db04:	e7a4      	b.n	801da50 <_printf_i+0x168>
 801db06:	2301      	movs	r3, #1
 801db08:	4632      	mov	r2, r6
 801db0a:	4649      	mov	r1, r9
 801db0c:	4640      	mov	r0, r8
 801db0e:	47d0      	blx	sl
 801db10:	3001      	adds	r0, #1
 801db12:	d09b      	beq.n	801da4c <_printf_i+0x164>
 801db14:	3501      	adds	r5, #1
 801db16:	68e3      	ldr	r3, [r4, #12]
 801db18:	9903      	ldr	r1, [sp, #12]
 801db1a:	1a5b      	subs	r3, r3, r1
 801db1c:	42ab      	cmp	r3, r5
 801db1e:	dcf2      	bgt.n	801db06 <_printf_i+0x21e>
 801db20:	e7eb      	b.n	801dafa <_printf_i+0x212>
 801db22:	2500      	movs	r5, #0
 801db24:	f104 0619 	add.w	r6, r4, #25
 801db28:	e7f5      	b.n	801db16 <_printf_i+0x22e>
 801db2a:	bf00      	nop
 801db2c:	0802989e 	.word	0x0802989e
 801db30:	080298af 	.word	0x080298af

0801db34 <_scanf_float>:
 801db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db38:	b087      	sub	sp, #28
 801db3a:	4617      	mov	r7, r2
 801db3c:	9303      	str	r3, [sp, #12]
 801db3e:	688b      	ldr	r3, [r1, #8]
 801db40:	1e5a      	subs	r2, r3, #1
 801db42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801db46:	bf83      	ittte	hi
 801db48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801db4c:	195b      	addhi	r3, r3, r5
 801db4e:	9302      	strhi	r3, [sp, #8]
 801db50:	2300      	movls	r3, #0
 801db52:	bf86      	itte	hi
 801db54:	f240 135d 	movwhi	r3, #349	; 0x15d
 801db58:	608b      	strhi	r3, [r1, #8]
 801db5a:	9302      	strls	r3, [sp, #8]
 801db5c:	680b      	ldr	r3, [r1, #0]
 801db5e:	468b      	mov	fp, r1
 801db60:	2500      	movs	r5, #0
 801db62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801db66:	f84b 3b1c 	str.w	r3, [fp], #28
 801db6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801db6e:	4680      	mov	r8, r0
 801db70:	460c      	mov	r4, r1
 801db72:	465e      	mov	r6, fp
 801db74:	46aa      	mov	sl, r5
 801db76:	46a9      	mov	r9, r5
 801db78:	9501      	str	r5, [sp, #4]
 801db7a:	68a2      	ldr	r2, [r4, #8]
 801db7c:	b152      	cbz	r2, 801db94 <_scanf_float+0x60>
 801db7e:	683b      	ldr	r3, [r7, #0]
 801db80:	781b      	ldrb	r3, [r3, #0]
 801db82:	2b4e      	cmp	r3, #78	; 0x4e
 801db84:	d864      	bhi.n	801dc50 <_scanf_float+0x11c>
 801db86:	2b40      	cmp	r3, #64	; 0x40
 801db88:	d83c      	bhi.n	801dc04 <_scanf_float+0xd0>
 801db8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801db8e:	b2c8      	uxtb	r0, r1
 801db90:	280e      	cmp	r0, #14
 801db92:	d93a      	bls.n	801dc0a <_scanf_float+0xd6>
 801db94:	f1b9 0f00 	cmp.w	r9, #0
 801db98:	d003      	beq.n	801dba2 <_scanf_float+0x6e>
 801db9a:	6823      	ldr	r3, [r4, #0]
 801db9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801dba0:	6023      	str	r3, [r4, #0]
 801dba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dba6:	f1ba 0f01 	cmp.w	sl, #1
 801dbaa:	f200 8113 	bhi.w	801ddd4 <_scanf_float+0x2a0>
 801dbae:	455e      	cmp	r6, fp
 801dbb0:	f200 8105 	bhi.w	801ddbe <_scanf_float+0x28a>
 801dbb4:	2501      	movs	r5, #1
 801dbb6:	4628      	mov	r0, r5
 801dbb8:	b007      	add	sp, #28
 801dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801dbc2:	2a0d      	cmp	r2, #13
 801dbc4:	d8e6      	bhi.n	801db94 <_scanf_float+0x60>
 801dbc6:	a101      	add	r1, pc, #4	; (adr r1, 801dbcc <_scanf_float+0x98>)
 801dbc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801dbcc:	0801dd0b 	.word	0x0801dd0b
 801dbd0:	0801db95 	.word	0x0801db95
 801dbd4:	0801db95 	.word	0x0801db95
 801dbd8:	0801db95 	.word	0x0801db95
 801dbdc:	0801dd6b 	.word	0x0801dd6b
 801dbe0:	0801dd43 	.word	0x0801dd43
 801dbe4:	0801db95 	.word	0x0801db95
 801dbe8:	0801db95 	.word	0x0801db95
 801dbec:	0801dd19 	.word	0x0801dd19
 801dbf0:	0801db95 	.word	0x0801db95
 801dbf4:	0801db95 	.word	0x0801db95
 801dbf8:	0801db95 	.word	0x0801db95
 801dbfc:	0801db95 	.word	0x0801db95
 801dc00:	0801dcd1 	.word	0x0801dcd1
 801dc04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801dc08:	e7db      	b.n	801dbc2 <_scanf_float+0x8e>
 801dc0a:	290e      	cmp	r1, #14
 801dc0c:	d8c2      	bhi.n	801db94 <_scanf_float+0x60>
 801dc0e:	a001      	add	r0, pc, #4	; (adr r0, 801dc14 <_scanf_float+0xe0>)
 801dc10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801dc14:	0801dcc3 	.word	0x0801dcc3
 801dc18:	0801db95 	.word	0x0801db95
 801dc1c:	0801dcc3 	.word	0x0801dcc3
 801dc20:	0801dd57 	.word	0x0801dd57
 801dc24:	0801db95 	.word	0x0801db95
 801dc28:	0801dc71 	.word	0x0801dc71
 801dc2c:	0801dcad 	.word	0x0801dcad
 801dc30:	0801dcad 	.word	0x0801dcad
 801dc34:	0801dcad 	.word	0x0801dcad
 801dc38:	0801dcad 	.word	0x0801dcad
 801dc3c:	0801dcad 	.word	0x0801dcad
 801dc40:	0801dcad 	.word	0x0801dcad
 801dc44:	0801dcad 	.word	0x0801dcad
 801dc48:	0801dcad 	.word	0x0801dcad
 801dc4c:	0801dcad 	.word	0x0801dcad
 801dc50:	2b6e      	cmp	r3, #110	; 0x6e
 801dc52:	d809      	bhi.n	801dc68 <_scanf_float+0x134>
 801dc54:	2b60      	cmp	r3, #96	; 0x60
 801dc56:	d8b2      	bhi.n	801dbbe <_scanf_float+0x8a>
 801dc58:	2b54      	cmp	r3, #84	; 0x54
 801dc5a:	d077      	beq.n	801dd4c <_scanf_float+0x218>
 801dc5c:	2b59      	cmp	r3, #89	; 0x59
 801dc5e:	d199      	bne.n	801db94 <_scanf_float+0x60>
 801dc60:	2d07      	cmp	r5, #7
 801dc62:	d197      	bne.n	801db94 <_scanf_float+0x60>
 801dc64:	2508      	movs	r5, #8
 801dc66:	e029      	b.n	801dcbc <_scanf_float+0x188>
 801dc68:	2b74      	cmp	r3, #116	; 0x74
 801dc6a:	d06f      	beq.n	801dd4c <_scanf_float+0x218>
 801dc6c:	2b79      	cmp	r3, #121	; 0x79
 801dc6e:	e7f6      	b.n	801dc5e <_scanf_float+0x12a>
 801dc70:	6821      	ldr	r1, [r4, #0]
 801dc72:	05c8      	lsls	r0, r1, #23
 801dc74:	d51a      	bpl.n	801dcac <_scanf_float+0x178>
 801dc76:	9b02      	ldr	r3, [sp, #8]
 801dc78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801dc7c:	6021      	str	r1, [r4, #0]
 801dc7e:	f109 0901 	add.w	r9, r9, #1
 801dc82:	b11b      	cbz	r3, 801dc8c <_scanf_float+0x158>
 801dc84:	3b01      	subs	r3, #1
 801dc86:	3201      	adds	r2, #1
 801dc88:	9302      	str	r3, [sp, #8]
 801dc8a:	60a2      	str	r2, [r4, #8]
 801dc8c:	68a3      	ldr	r3, [r4, #8]
 801dc8e:	3b01      	subs	r3, #1
 801dc90:	60a3      	str	r3, [r4, #8]
 801dc92:	6923      	ldr	r3, [r4, #16]
 801dc94:	3301      	adds	r3, #1
 801dc96:	6123      	str	r3, [r4, #16]
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	3b01      	subs	r3, #1
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	607b      	str	r3, [r7, #4]
 801dca0:	f340 8084 	ble.w	801ddac <_scanf_float+0x278>
 801dca4:	683b      	ldr	r3, [r7, #0]
 801dca6:	3301      	adds	r3, #1
 801dca8:	603b      	str	r3, [r7, #0]
 801dcaa:	e766      	b.n	801db7a <_scanf_float+0x46>
 801dcac:	eb1a 0f05 	cmn.w	sl, r5
 801dcb0:	f47f af70 	bne.w	801db94 <_scanf_float+0x60>
 801dcb4:	6822      	ldr	r2, [r4, #0]
 801dcb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801dcba:	6022      	str	r2, [r4, #0]
 801dcbc:	f806 3b01 	strb.w	r3, [r6], #1
 801dcc0:	e7e4      	b.n	801dc8c <_scanf_float+0x158>
 801dcc2:	6822      	ldr	r2, [r4, #0]
 801dcc4:	0610      	lsls	r0, r2, #24
 801dcc6:	f57f af65 	bpl.w	801db94 <_scanf_float+0x60>
 801dcca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801dcce:	e7f4      	b.n	801dcba <_scanf_float+0x186>
 801dcd0:	f1ba 0f00 	cmp.w	sl, #0
 801dcd4:	d10e      	bne.n	801dcf4 <_scanf_float+0x1c0>
 801dcd6:	f1b9 0f00 	cmp.w	r9, #0
 801dcda:	d10e      	bne.n	801dcfa <_scanf_float+0x1c6>
 801dcdc:	6822      	ldr	r2, [r4, #0]
 801dcde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dce2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dce6:	d108      	bne.n	801dcfa <_scanf_float+0x1c6>
 801dce8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dcec:	6022      	str	r2, [r4, #0]
 801dcee:	f04f 0a01 	mov.w	sl, #1
 801dcf2:	e7e3      	b.n	801dcbc <_scanf_float+0x188>
 801dcf4:	f1ba 0f02 	cmp.w	sl, #2
 801dcf8:	d055      	beq.n	801dda6 <_scanf_float+0x272>
 801dcfa:	2d01      	cmp	r5, #1
 801dcfc:	d002      	beq.n	801dd04 <_scanf_float+0x1d0>
 801dcfe:	2d04      	cmp	r5, #4
 801dd00:	f47f af48 	bne.w	801db94 <_scanf_float+0x60>
 801dd04:	3501      	adds	r5, #1
 801dd06:	b2ed      	uxtb	r5, r5
 801dd08:	e7d8      	b.n	801dcbc <_scanf_float+0x188>
 801dd0a:	f1ba 0f01 	cmp.w	sl, #1
 801dd0e:	f47f af41 	bne.w	801db94 <_scanf_float+0x60>
 801dd12:	f04f 0a02 	mov.w	sl, #2
 801dd16:	e7d1      	b.n	801dcbc <_scanf_float+0x188>
 801dd18:	b97d      	cbnz	r5, 801dd3a <_scanf_float+0x206>
 801dd1a:	f1b9 0f00 	cmp.w	r9, #0
 801dd1e:	f47f af3c 	bne.w	801db9a <_scanf_float+0x66>
 801dd22:	6822      	ldr	r2, [r4, #0]
 801dd24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dd28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dd2c:	f47f af39 	bne.w	801dba2 <_scanf_float+0x6e>
 801dd30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dd34:	6022      	str	r2, [r4, #0]
 801dd36:	2501      	movs	r5, #1
 801dd38:	e7c0      	b.n	801dcbc <_scanf_float+0x188>
 801dd3a:	2d03      	cmp	r5, #3
 801dd3c:	d0e2      	beq.n	801dd04 <_scanf_float+0x1d0>
 801dd3e:	2d05      	cmp	r5, #5
 801dd40:	e7de      	b.n	801dd00 <_scanf_float+0x1cc>
 801dd42:	2d02      	cmp	r5, #2
 801dd44:	f47f af26 	bne.w	801db94 <_scanf_float+0x60>
 801dd48:	2503      	movs	r5, #3
 801dd4a:	e7b7      	b.n	801dcbc <_scanf_float+0x188>
 801dd4c:	2d06      	cmp	r5, #6
 801dd4e:	f47f af21 	bne.w	801db94 <_scanf_float+0x60>
 801dd52:	2507      	movs	r5, #7
 801dd54:	e7b2      	b.n	801dcbc <_scanf_float+0x188>
 801dd56:	6822      	ldr	r2, [r4, #0]
 801dd58:	0591      	lsls	r1, r2, #22
 801dd5a:	f57f af1b 	bpl.w	801db94 <_scanf_float+0x60>
 801dd5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801dd62:	6022      	str	r2, [r4, #0]
 801dd64:	f8cd 9004 	str.w	r9, [sp, #4]
 801dd68:	e7a8      	b.n	801dcbc <_scanf_float+0x188>
 801dd6a:	6822      	ldr	r2, [r4, #0]
 801dd6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801dd70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801dd74:	d006      	beq.n	801dd84 <_scanf_float+0x250>
 801dd76:	0550      	lsls	r0, r2, #21
 801dd78:	f57f af0c 	bpl.w	801db94 <_scanf_float+0x60>
 801dd7c:	f1b9 0f00 	cmp.w	r9, #0
 801dd80:	f43f af0f 	beq.w	801dba2 <_scanf_float+0x6e>
 801dd84:	0591      	lsls	r1, r2, #22
 801dd86:	bf58      	it	pl
 801dd88:	9901      	ldrpl	r1, [sp, #4]
 801dd8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dd8e:	bf58      	it	pl
 801dd90:	eba9 0101 	subpl.w	r1, r9, r1
 801dd94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801dd98:	bf58      	it	pl
 801dd9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801dd9e:	6022      	str	r2, [r4, #0]
 801dda0:	f04f 0900 	mov.w	r9, #0
 801dda4:	e78a      	b.n	801dcbc <_scanf_float+0x188>
 801dda6:	f04f 0a03 	mov.w	sl, #3
 801ddaa:	e787      	b.n	801dcbc <_scanf_float+0x188>
 801ddac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ddb0:	4639      	mov	r1, r7
 801ddb2:	4640      	mov	r0, r8
 801ddb4:	4798      	blx	r3
 801ddb6:	2800      	cmp	r0, #0
 801ddb8:	f43f aedf 	beq.w	801db7a <_scanf_float+0x46>
 801ddbc:	e6ea      	b.n	801db94 <_scanf_float+0x60>
 801ddbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ddc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ddc6:	463a      	mov	r2, r7
 801ddc8:	4640      	mov	r0, r8
 801ddca:	4798      	blx	r3
 801ddcc:	6923      	ldr	r3, [r4, #16]
 801ddce:	3b01      	subs	r3, #1
 801ddd0:	6123      	str	r3, [r4, #16]
 801ddd2:	e6ec      	b.n	801dbae <_scanf_float+0x7a>
 801ddd4:	1e6b      	subs	r3, r5, #1
 801ddd6:	2b06      	cmp	r3, #6
 801ddd8:	d825      	bhi.n	801de26 <_scanf_float+0x2f2>
 801ddda:	2d02      	cmp	r5, #2
 801dddc:	d836      	bhi.n	801de4c <_scanf_float+0x318>
 801ddde:	455e      	cmp	r6, fp
 801dde0:	f67f aee8 	bls.w	801dbb4 <_scanf_float+0x80>
 801dde4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dde8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ddec:	463a      	mov	r2, r7
 801ddee:	4640      	mov	r0, r8
 801ddf0:	4798      	blx	r3
 801ddf2:	6923      	ldr	r3, [r4, #16]
 801ddf4:	3b01      	subs	r3, #1
 801ddf6:	6123      	str	r3, [r4, #16]
 801ddf8:	e7f1      	b.n	801ddde <_scanf_float+0x2aa>
 801ddfa:	9802      	ldr	r0, [sp, #8]
 801ddfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801de00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801de04:	9002      	str	r0, [sp, #8]
 801de06:	463a      	mov	r2, r7
 801de08:	4640      	mov	r0, r8
 801de0a:	4798      	blx	r3
 801de0c:	6923      	ldr	r3, [r4, #16]
 801de0e:	3b01      	subs	r3, #1
 801de10:	6123      	str	r3, [r4, #16]
 801de12:	f10a 3aff 	add.w	sl, sl, #4294967295
 801de16:	fa5f fa8a 	uxtb.w	sl, sl
 801de1a:	f1ba 0f02 	cmp.w	sl, #2
 801de1e:	d1ec      	bne.n	801ddfa <_scanf_float+0x2c6>
 801de20:	3d03      	subs	r5, #3
 801de22:	b2ed      	uxtb	r5, r5
 801de24:	1b76      	subs	r6, r6, r5
 801de26:	6823      	ldr	r3, [r4, #0]
 801de28:	05da      	lsls	r2, r3, #23
 801de2a:	d52f      	bpl.n	801de8c <_scanf_float+0x358>
 801de2c:	055b      	lsls	r3, r3, #21
 801de2e:	d510      	bpl.n	801de52 <_scanf_float+0x31e>
 801de30:	455e      	cmp	r6, fp
 801de32:	f67f aebf 	bls.w	801dbb4 <_scanf_float+0x80>
 801de36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801de3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801de3e:	463a      	mov	r2, r7
 801de40:	4640      	mov	r0, r8
 801de42:	4798      	blx	r3
 801de44:	6923      	ldr	r3, [r4, #16]
 801de46:	3b01      	subs	r3, #1
 801de48:	6123      	str	r3, [r4, #16]
 801de4a:	e7f1      	b.n	801de30 <_scanf_float+0x2fc>
 801de4c:	46aa      	mov	sl, r5
 801de4e:	9602      	str	r6, [sp, #8]
 801de50:	e7df      	b.n	801de12 <_scanf_float+0x2de>
 801de52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801de56:	6923      	ldr	r3, [r4, #16]
 801de58:	2965      	cmp	r1, #101	; 0x65
 801de5a:	f103 33ff 	add.w	r3, r3, #4294967295
 801de5e:	f106 35ff 	add.w	r5, r6, #4294967295
 801de62:	6123      	str	r3, [r4, #16]
 801de64:	d00c      	beq.n	801de80 <_scanf_float+0x34c>
 801de66:	2945      	cmp	r1, #69	; 0x45
 801de68:	d00a      	beq.n	801de80 <_scanf_float+0x34c>
 801de6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801de6e:	463a      	mov	r2, r7
 801de70:	4640      	mov	r0, r8
 801de72:	4798      	blx	r3
 801de74:	6923      	ldr	r3, [r4, #16]
 801de76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801de7a:	3b01      	subs	r3, #1
 801de7c:	1eb5      	subs	r5, r6, #2
 801de7e:	6123      	str	r3, [r4, #16]
 801de80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801de84:	463a      	mov	r2, r7
 801de86:	4640      	mov	r0, r8
 801de88:	4798      	blx	r3
 801de8a:	462e      	mov	r6, r5
 801de8c:	6825      	ldr	r5, [r4, #0]
 801de8e:	f015 0510 	ands.w	r5, r5, #16
 801de92:	d158      	bne.n	801df46 <_scanf_float+0x412>
 801de94:	7035      	strb	r5, [r6, #0]
 801de96:	6823      	ldr	r3, [r4, #0]
 801de98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801de9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dea0:	d11c      	bne.n	801dedc <_scanf_float+0x3a8>
 801dea2:	9b01      	ldr	r3, [sp, #4]
 801dea4:	454b      	cmp	r3, r9
 801dea6:	eba3 0209 	sub.w	r2, r3, r9
 801deaa:	d124      	bne.n	801def6 <_scanf_float+0x3c2>
 801deac:	2200      	movs	r2, #0
 801deae:	4659      	mov	r1, fp
 801deb0:	4640      	mov	r0, r8
 801deb2:	f000 feaf 	bl	801ec14 <_strtod_r>
 801deb6:	9b03      	ldr	r3, [sp, #12]
 801deb8:	6821      	ldr	r1, [r4, #0]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	f011 0f02 	tst.w	r1, #2
 801dec0:	ec57 6b10 	vmov	r6, r7, d0
 801dec4:	f103 0204 	add.w	r2, r3, #4
 801dec8:	d020      	beq.n	801df0c <_scanf_float+0x3d8>
 801deca:	9903      	ldr	r1, [sp, #12]
 801decc:	600a      	str	r2, [r1, #0]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	e9c3 6700 	strd	r6, r7, [r3]
 801ded4:	68e3      	ldr	r3, [r4, #12]
 801ded6:	3301      	adds	r3, #1
 801ded8:	60e3      	str	r3, [r4, #12]
 801deda:	e66c      	b.n	801dbb6 <_scanf_float+0x82>
 801dedc:	9b04      	ldr	r3, [sp, #16]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d0e4      	beq.n	801deac <_scanf_float+0x378>
 801dee2:	9905      	ldr	r1, [sp, #20]
 801dee4:	230a      	movs	r3, #10
 801dee6:	462a      	mov	r2, r5
 801dee8:	3101      	adds	r1, #1
 801deea:	4640      	mov	r0, r8
 801deec:	f000 ff1c 	bl	801ed28 <_strtol_r>
 801def0:	9b04      	ldr	r3, [sp, #16]
 801def2:	9e05      	ldr	r6, [sp, #20]
 801def4:	1ac2      	subs	r2, r0, r3
 801def6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801defa:	429e      	cmp	r6, r3
 801defc:	bf28      	it	cs
 801defe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801df02:	4912      	ldr	r1, [pc, #72]	; (801df4c <_scanf_float+0x418>)
 801df04:	4630      	mov	r0, r6
 801df06:	f000 f82b 	bl	801df60 <siprintf>
 801df0a:	e7cf      	b.n	801deac <_scanf_float+0x378>
 801df0c:	f011 0f04 	tst.w	r1, #4
 801df10:	9903      	ldr	r1, [sp, #12]
 801df12:	600a      	str	r2, [r1, #0]
 801df14:	d1db      	bne.n	801dece <_scanf_float+0x39a>
 801df16:	f8d3 8000 	ldr.w	r8, [r3]
 801df1a:	ee10 2a10 	vmov	r2, s0
 801df1e:	ee10 0a10 	vmov	r0, s0
 801df22:	463b      	mov	r3, r7
 801df24:	4639      	mov	r1, r7
 801df26:	f7e2 fe11 	bl	8000b4c <__aeabi_dcmpun>
 801df2a:	b128      	cbz	r0, 801df38 <_scanf_float+0x404>
 801df2c:	4808      	ldr	r0, [pc, #32]	; (801df50 <_scanf_float+0x41c>)
 801df2e:	f000 f811 	bl	801df54 <nanf>
 801df32:	ed88 0a00 	vstr	s0, [r8]
 801df36:	e7cd      	b.n	801ded4 <_scanf_float+0x3a0>
 801df38:	4630      	mov	r0, r6
 801df3a:	4639      	mov	r1, r7
 801df3c:	f7e2 fe64 	bl	8000c08 <__aeabi_d2f>
 801df40:	f8c8 0000 	str.w	r0, [r8]
 801df44:	e7c6      	b.n	801ded4 <_scanf_float+0x3a0>
 801df46:	2500      	movs	r5, #0
 801df48:	e635      	b.n	801dbb6 <_scanf_float+0x82>
 801df4a:	bf00      	nop
 801df4c:	080298c0 	.word	0x080298c0
 801df50:	08029d38 	.word	0x08029d38

0801df54 <nanf>:
 801df54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801df5c <nanf+0x8>
 801df58:	4770      	bx	lr
 801df5a:	bf00      	nop
 801df5c:	7fc00000 	.word	0x7fc00000

0801df60 <siprintf>:
 801df60:	b40e      	push	{r1, r2, r3}
 801df62:	b500      	push	{lr}
 801df64:	b09c      	sub	sp, #112	; 0x70
 801df66:	ab1d      	add	r3, sp, #116	; 0x74
 801df68:	9002      	str	r0, [sp, #8]
 801df6a:	9006      	str	r0, [sp, #24]
 801df6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801df70:	4809      	ldr	r0, [pc, #36]	; (801df98 <siprintf+0x38>)
 801df72:	9107      	str	r1, [sp, #28]
 801df74:	9104      	str	r1, [sp, #16]
 801df76:	4909      	ldr	r1, [pc, #36]	; (801df9c <siprintf+0x3c>)
 801df78:	f853 2b04 	ldr.w	r2, [r3], #4
 801df7c:	9105      	str	r1, [sp, #20]
 801df7e:	6800      	ldr	r0, [r0, #0]
 801df80:	9301      	str	r3, [sp, #4]
 801df82:	a902      	add	r1, sp, #8
 801df84:	f002 ffb0 	bl	8020ee8 <_svfiprintf_r>
 801df88:	9b02      	ldr	r3, [sp, #8]
 801df8a:	2200      	movs	r2, #0
 801df8c:	701a      	strb	r2, [r3, #0]
 801df8e:	b01c      	add	sp, #112	; 0x70
 801df90:	f85d eb04 	ldr.w	lr, [sp], #4
 801df94:	b003      	add	sp, #12
 801df96:	4770      	bx	lr
 801df98:	200005bc 	.word	0x200005bc
 801df9c:	ffff0208 	.word	0xffff0208

0801dfa0 <strncpy>:
 801dfa0:	b510      	push	{r4, lr}
 801dfa2:	3901      	subs	r1, #1
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	b132      	cbz	r2, 801dfb6 <strncpy+0x16>
 801dfa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dfac:	f803 4b01 	strb.w	r4, [r3], #1
 801dfb0:	3a01      	subs	r2, #1
 801dfb2:	2c00      	cmp	r4, #0
 801dfb4:	d1f7      	bne.n	801dfa6 <strncpy+0x6>
 801dfb6:	441a      	add	r2, r3
 801dfb8:	2100      	movs	r1, #0
 801dfba:	4293      	cmp	r3, r2
 801dfbc:	d100      	bne.n	801dfc0 <strncpy+0x20>
 801dfbe:	bd10      	pop	{r4, pc}
 801dfc0:	f803 1b01 	strb.w	r1, [r3], #1
 801dfc4:	e7f9      	b.n	801dfba <strncpy+0x1a>

0801dfc6 <sulp>:
 801dfc6:	b570      	push	{r4, r5, r6, lr}
 801dfc8:	4604      	mov	r4, r0
 801dfca:	460d      	mov	r5, r1
 801dfcc:	ec45 4b10 	vmov	d0, r4, r5
 801dfd0:	4616      	mov	r6, r2
 801dfd2:	f002 fd25 	bl	8020a20 <__ulp>
 801dfd6:	ec51 0b10 	vmov	r0, r1, d0
 801dfda:	b17e      	cbz	r6, 801dffc <sulp+0x36>
 801dfdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dfe0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	dd09      	ble.n	801dffc <sulp+0x36>
 801dfe8:	051b      	lsls	r3, r3, #20
 801dfea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dfee:	2400      	movs	r4, #0
 801dff0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801dff4:	4622      	mov	r2, r4
 801dff6:	462b      	mov	r3, r5
 801dff8:	f7e2 fb0e 	bl	8000618 <__aeabi_dmul>
 801dffc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e000 <_strtod_l>:
 801e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e004:	b0a3      	sub	sp, #140	; 0x8c
 801e006:	461f      	mov	r7, r3
 801e008:	2300      	movs	r3, #0
 801e00a:	931e      	str	r3, [sp, #120]	; 0x78
 801e00c:	4ba4      	ldr	r3, [pc, #656]	; (801e2a0 <_strtod_l+0x2a0>)
 801e00e:	9219      	str	r2, [sp, #100]	; 0x64
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	9307      	str	r3, [sp, #28]
 801e014:	4604      	mov	r4, r0
 801e016:	4618      	mov	r0, r3
 801e018:	4688      	mov	r8, r1
 801e01a:	f7e2 f8e9 	bl	80001f0 <strlen>
 801e01e:	f04f 0a00 	mov.w	sl, #0
 801e022:	4605      	mov	r5, r0
 801e024:	f04f 0b00 	mov.w	fp, #0
 801e028:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e02c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e02e:	781a      	ldrb	r2, [r3, #0]
 801e030:	2a2b      	cmp	r2, #43	; 0x2b
 801e032:	d04c      	beq.n	801e0ce <_strtod_l+0xce>
 801e034:	d839      	bhi.n	801e0aa <_strtod_l+0xaa>
 801e036:	2a0d      	cmp	r2, #13
 801e038:	d832      	bhi.n	801e0a0 <_strtod_l+0xa0>
 801e03a:	2a08      	cmp	r2, #8
 801e03c:	d832      	bhi.n	801e0a4 <_strtod_l+0xa4>
 801e03e:	2a00      	cmp	r2, #0
 801e040:	d03c      	beq.n	801e0bc <_strtod_l+0xbc>
 801e042:	2300      	movs	r3, #0
 801e044:	930e      	str	r3, [sp, #56]	; 0x38
 801e046:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e048:	7833      	ldrb	r3, [r6, #0]
 801e04a:	2b30      	cmp	r3, #48	; 0x30
 801e04c:	f040 80b4 	bne.w	801e1b8 <_strtod_l+0x1b8>
 801e050:	7873      	ldrb	r3, [r6, #1]
 801e052:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e056:	2b58      	cmp	r3, #88	; 0x58
 801e058:	d16c      	bne.n	801e134 <_strtod_l+0x134>
 801e05a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e05c:	9301      	str	r3, [sp, #4]
 801e05e:	ab1e      	add	r3, sp, #120	; 0x78
 801e060:	9702      	str	r7, [sp, #8]
 801e062:	9300      	str	r3, [sp, #0]
 801e064:	4a8f      	ldr	r2, [pc, #572]	; (801e2a4 <_strtod_l+0x2a4>)
 801e066:	ab1f      	add	r3, sp, #124	; 0x7c
 801e068:	a91d      	add	r1, sp, #116	; 0x74
 801e06a:	4620      	mov	r0, r4
 801e06c:	f001 fe34 	bl	801fcd8 <__gethex>
 801e070:	f010 0707 	ands.w	r7, r0, #7
 801e074:	4605      	mov	r5, r0
 801e076:	d005      	beq.n	801e084 <_strtod_l+0x84>
 801e078:	2f06      	cmp	r7, #6
 801e07a:	d12a      	bne.n	801e0d2 <_strtod_l+0xd2>
 801e07c:	3601      	adds	r6, #1
 801e07e:	2300      	movs	r3, #0
 801e080:	961d      	str	r6, [sp, #116]	; 0x74
 801e082:	930e      	str	r3, [sp, #56]	; 0x38
 801e084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e086:	2b00      	cmp	r3, #0
 801e088:	f040 8596 	bne.w	801ebb8 <_strtod_l+0xbb8>
 801e08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e08e:	b1db      	cbz	r3, 801e0c8 <_strtod_l+0xc8>
 801e090:	4652      	mov	r2, sl
 801e092:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801e096:	ec43 2b10 	vmov	d0, r2, r3
 801e09a:	b023      	add	sp, #140	; 0x8c
 801e09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0a0:	2a20      	cmp	r2, #32
 801e0a2:	d1ce      	bne.n	801e042 <_strtod_l+0x42>
 801e0a4:	3301      	adds	r3, #1
 801e0a6:	931d      	str	r3, [sp, #116]	; 0x74
 801e0a8:	e7c0      	b.n	801e02c <_strtod_l+0x2c>
 801e0aa:	2a2d      	cmp	r2, #45	; 0x2d
 801e0ac:	d1c9      	bne.n	801e042 <_strtod_l+0x42>
 801e0ae:	2201      	movs	r2, #1
 801e0b0:	920e      	str	r2, [sp, #56]	; 0x38
 801e0b2:	1c5a      	adds	r2, r3, #1
 801e0b4:	921d      	str	r2, [sp, #116]	; 0x74
 801e0b6:	785b      	ldrb	r3, [r3, #1]
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d1c4      	bne.n	801e046 <_strtod_l+0x46>
 801e0bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e0be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	f040 8576 	bne.w	801ebb4 <_strtod_l+0xbb4>
 801e0c8:	4652      	mov	r2, sl
 801e0ca:	465b      	mov	r3, fp
 801e0cc:	e7e3      	b.n	801e096 <_strtod_l+0x96>
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	e7ee      	b.n	801e0b0 <_strtod_l+0xb0>
 801e0d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e0d4:	b13a      	cbz	r2, 801e0e6 <_strtod_l+0xe6>
 801e0d6:	2135      	movs	r1, #53	; 0x35
 801e0d8:	a820      	add	r0, sp, #128	; 0x80
 801e0da:	f002 fdac 	bl	8020c36 <__copybits>
 801e0de:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e0e0:	4620      	mov	r0, r4
 801e0e2:	f002 f971 	bl	80203c8 <_Bfree>
 801e0e6:	3f01      	subs	r7, #1
 801e0e8:	2f05      	cmp	r7, #5
 801e0ea:	d807      	bhi.n	801e0fc <_strtod_l+0xfc>
 801e0ec:	e8df f007 	tbb	[pc, r7]
 801e0f0:	1d180b0e 	.word	0x1d180b0e
 801e0f4:	030e      	.short	0x030e
 801e0f6:	f04f 0b00 	mov.w	fp, #0
 801e0fa:	46da      	mov	sl, fp
 801e0fc:	0728      	lsls	r0, r5, #28
 801e0fe:	d5c1      	bpl.n	801e084 <_strtod_l+0x84>
 801e100:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801e104:	e7be      	b.n	801e084 <_strtod_l+0x84>
 801e106:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801e10a:	e7f7      	b.n	801e0fc <_strtod_l+0xfc>
 801e10c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801e110:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e112:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801e116:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801e11a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801e11e:	e7ed      	b.n	801e0fc <_strtod_l+0xfc>
 801e120:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e2a8 <_strtod_l+0x2a8>
 801e124:	f04f 0a00 	mov.w	sl, #0
 801e128:	e7e8      	b.n	801e0fc <_strtod_l+0xfc>
 801e12a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801e12e:	f04f 3aff 	mov.w	sl, #4294967295
 801e132:	e7e3      	b.n	801e0fc <_strtod_l+0xfc>
 801e134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e136:	1c5a      	adds	r2, r3, #1
 801e138:	921d      	str	r2, [sp, #116]	; 0x74
 801e13a:	785b      	ldrb	r3, [r3, #1]
 801e13c:	2b30      	cmp	r3, #48	; 0x30
 801e13e:	d0f9      	beq.n	801e134 <_strtod_l+0x134>
 801e140:	2b00      	cmp	r3, #0
 801e142:	d09f      	beq.n	801e084 <_strtod_l+0x84>
 801e144:	2301      	movs	r3, #1
 801e146:	f04f 0900 	mov.w	r9, #0
 801e14a:	9304      	str	r3, [sp, #16]
 801e14c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e14e:	930a      	str	r3, [sp, #40]	; 0x28
 801e150:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e154:	464f      	mov	r7, r9
 801e156:	220a      	movs	r2, #10
 801e158:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e15a:	7806      	ldrb	r6, [r0, #0]
 801e15c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801e160:	b2d9      	uxtb	r1, r3
 801e162:	2909      	cmp	r1, #9
 801e164:	d92a      	bls.n	801e1bc <_strtod_l+0x1bc>
 801e166:	9907      	ldr	r1, [sp, #28]
 801e168:	462a      	mov	r2, r5
 801e16a:	f003 f818 	bl	802119e <strncmp>
 801e16e:	b398      	cbz	r0, 801e1d8 <_strtod_l+0x1d8>
 801e170:	2000      	movs	r0, #0
 801e172:	4633      	mov	r3, r6
 801e174:	463d      	mov	r5, r7
 801e176:	9007      	str	r0, [sp, #28]
 801e178:	4602      	mov	r2, r0
 801e17a:	2b65      	cmp	r3, #101	; 0x65
 801e17c:	d001      	beq.n	801e182 <_strtod_l+0x182>
 801e17e:	2b45      	cmp	r3, #69	; 0x45
 801e180:	d118      	bne.n	801e1b4 <_strtod_l+0x1b4>
 801e182:	b91d      	cbnz	r5, 801e18c <_strtod_l+0x18c>
 801e184:	9b04      	ldr	r3, [sp, #16]
 801e186:	4303      	orrs	r3, r0
 801e188:	d098      	beq.n	801e0bc <_strtod_l+0xbc>
 801e18a:	2500      	movs	r5, #0
 801e18c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801e190:	f108 0301 	add.w	r3, r8, #1
 801e194:	931d      	str	r3, [sp, #116]	; 0x74
 801e196:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e19a:	2b2b      	cmp	r3, #43	; 0x2b
 801e19c:	d075      	beq.n	801e28a <_strtod_l+0x28a>
 801e19e:	2b2d      	cmp	r3, #45	; 0x2d
 801e1a0:	d07b      	beq.n	801e29a <_strtod_l+0x29a>
 801e1a2:	f04f 0c00 	mov.w	ip, #0
 801e1a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801e1aa:	2909      	cmp	r1, #9
 801e1ac:	f240 8082 	bls.w	801e2b4 <_strtod_l+0x2b4>
 801e1b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e1b4:	2600      	movs	r6, #0
 801e1b6:	e09d      	b.n	801e2f4 <_strtod_l+0x2f4>
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	e7c4      	b.n	801e146 <_strtod_l+0x146>
 801e1bc:	2f08      	cmp	r7, #8
 801e1be:	bfd8      	it	le
 801e1c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801e1c2:	f100 0001 	add.w	r0, r0, #1
 801e1c6:	bfda      	itte	le
 801e1c8:	fb02 3301 	mlale	r3, r2, r1, r3
 801e1cc:	9309      	strle	r3, [sp, #36]	; 0x24
 801e1ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 801e1d2:	3701      	adds	r7, #1
 801e1d4:	901d      	str	r0, [sp, #116]	; 0x74
 801e1d6:	e7bf      	b.n	801e158 <_strtod_l+0x158>
 801e1d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1da:	195a      	adds	r2, r3, r5
 801e1dc:	921d      	str	r2, [sp, #116]	; 0x74
 801e1de:	5d5b      	ldrb	r3, [r3, r5]
 801e1e0:	2f00      	cmp	r7, #0
 801e1e2:	d037      	beq.n	801e254 <_strtod_l+0x254>
 801e1e4:	9007      	str	r0, [sp, #28]
 801e1e6:	463d      	mov	r5, r7
 801e1e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801e1ec:	2a09      	cmp	r2, #9
 801e1ee:	d912      	bls.n	801e216 <_strtod_l+0x216>
 801e1f0:	2201      	movs	r2, #1
 801e1f2:	e7c2      	b.n	801e17a <_strtod_l+0x17a>
 801e1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1f6:	1c5a      	adds	r2, r3, #1
 801e1f8:	921d      	str	r2, [sp, #116]	; 0x74
 801e1fa:	785b      	ldrb	r3, [r3, #1]
 801e1fc:	3001      	adds	r0, #1
 801e1fe:	2b30      	cmp	r3, #48	; 0x30
 801e200:	d0f8      	beq.n	801e1f4 <_strtod_l+0x1f4>
 801e202:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801e206:	2a08      	cmp	r2, #8
 801e208:	f200 84db 	bhi.w	801ebc2 <_strtod_l+0xbc2>
 801e20c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e20e:	9007      	str	r0, [sp, #28]
 801e210:	2000      	movs	r0, #0
 801e212:	920a      	str	r2, [sp, #40]	; 0x28
 801e214:	4605      	mov	r5, r0
 801e216:	3b30      	subs	r3, #48	; 0x30
 801e218:	f100 0201 	add.w	r2, r0, #1
 801e21c:	d014      	beq.n	801e248 <_strtod_l+0x248>
 801e21e:	9907      	ldr	r1, [sp, #28]
 801e220:	4411      	add	r1, r2
 801e222:	9107      	str	r1, [sp, #28]
 801e224:	462a      	mov	r2, r5
 801e226:	eb00 0e05 	add.w	lr, r0, r5
 801e22a:	210a      	movs	r1, #10
 801e22c:	4572      	cmp	r2, lr
 801e22e:	d113      	bne.n	801e258 <_strtod_l+0x258>
 801e230:	182a      	adds	r2, r5, r0
 801e232:	2a08      	cmp	r2, #8
 801e234:	f105 0501 	add.w	r5, r5, #1
 801e238:	4405      	add	r5, r0
 801e23a:	dc1c      	bgt.n	801e276 <_strtod_l+0x276>
 801e23c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e23e:	220a      	movs	r2, #10
 801e240:	fb02 3301 	mla	r3, r2, r1, r3
 801e244:	9309      	str	r3, [sp, #36]	; 0x24
 801e246:	2200      	movs	r2, #0
 801e248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e24a:	1c59      	adds	r1, r3, #1
 801e24c:	911d      	str	r1, [sp, #116]	; 0x74
 801e24e:	785b      	ldrb	r3, [r3, #1]
 801e250:	4610      	mov	r0, r2
 801e252:	e7c9      	b.n	801e1e8 <_strtod_l+0x1e8>
 801e254:	4638      	mov	r0, r7
 801e256:	e7d2      	b.n	801e1fe <_strtod_l+0x1fe>
 801e258:	2a08      	cmp	r2, #8
 801e25a:	dc04      	bgt.n	801e266 <_strtod_l+0x266>
 801e25c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e25e:	434e      	muls	r6, r1
 801e260:	9609      	str	r6, [sp, #36]	; 0x24
 801e262:	3201      	adds	r2, #1
 801e264:	e7e2      	b.n	801e22c <_strtod_l+0x22c>
 801e266:	f102 0c01 	add.w	ip, r2, #1
 801e26a:	f1bc 0f10 	cmp.w	ip, #16
 801e26e:	bfd8      	it	le
 801e270:	fb01 f909 	mulle.w	r9, r1, r9
 801e274:	e7f5      	b.n	801e262 <_strtod_l+0x262>
 801e276:	2d10      	cmp	r5, #16
 801e278:	bfdc      	itt	le
 801e27a:	220a      	movle	r2, #10
 801e27c:	fb02 3909 	mlale	r9, r2, r9, r3
 801e280:	e7e1      	b.n	801e246 <_strtod_l+0x246>
 801e282:	2300      	movs	r3, #0
 801e284:	9307      	str	r3, [sp, #28]
 801e286:	2201      	movs	r2, #1
 801e288:	e77c      	b.n	801e184 <_strtod_l+0x184>
 801e28a:	f04f 0c00 	mov.w	ip, #0
 801e28e:	f108 0302 	add.w	r3, r8, #2
 801e292:	931d      	str	r3, [sp, #116]	; 0x74
 801e294:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e298:	e785      	b.n	801e1a6 <_strtod_l+0x1a6>
 801e29a:	f04f 0c01 	mov.w	ip, #1
 801e29e:	e7f6      	b.n	801e28e <_strtod_l+0x28e>
 801e2a0:	08029b7c 	.word	0x08029b7c
 801e2a4:	080298c8 	.word	0x080298c8
 801e2a8:	7ff00000 	.word	0x7ff00000
 801e2ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e2ae:	1c59      	adds	r1, r3, #1
 801e2b0:	911d      	str	r1, [sp, #116]	; 0x74
 801e2b2:	785b      	ldrb	r3, [r3, #1]
 801e2b4:	2b30      	cmp	r3, #48	; 0x30
 801e2b6:	d0f9      	beq.n	801e2ac <_strtod_l+0x2ac>
 801e2b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e2bc:	2908      	cmp	r1, #8
 801e2be:	f63f af79 	bhi.w	801e1b4 <_strtod_l+0x1b4>
 801e2c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e2c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e2c8:	9308      	str	r3, [sp, #32]
 801e2ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e2cc:	1c59      	adds	r1, r3, #1
 801e2ce:	911d      	str	r1, [sp, #116]	; 0x74
 801e2d0:	785b      	ldrb	r3, [r3, #1]
 801e2d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e2d6:	2e09      	cmp	r6, #9
 801e2d8:	d937      	bls.n	801e34a <_strtod_l+0x34a>
 801e2da:	9e08      	ldr	r6, [sp, #32]
 801e2dc:	1b89      	subs	r1, r1, r6
 801e2de:	2908      	cmp	r1, #8
 801e2e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e2e4:	dc02      	bgt.n	801e2ec <_strtod_l+0x2ec>
 801e2e6:	4576      	cmp	r6, lr
 801e2e8:	bfa8      	it	ge
 801e2ea:	4676      	movge	r6, lr
 801e2ec:	f1bc 0f00 	cmp.w	ip, #0
 801e2f0:	d000      	beq.n	801e2f4 <_strtod_l+0x2f4>
 801e2f2:	4276      	negs	r6, r6
 801e2f4:	2d00      	cmp	r5, #0
 801e2f6:	d14f      	bne.n	801e398 <_strtod_l+0x398>
 801e2f8:	9904      	ldr	r1, [sp, #16]
 801e2fa:	4301      	orrs	r1, r0
 801e2fc:	f47f aec2 	bne.w	801e084 <_strtod_l+0x84>
 801e300:	2a00      	cmp	r2, #0
 801e302:	f47f aedb 	bne.w	801e0bc <_strtod_l+0xbc>
 801e306:	2b69      	cmp	r3, #105	; 0x69
 801e308:	d027      	beq.n	801e35a <_strtod_l+0x35a>
 801e30a:	dc24      	bgt.n	801e356 <_strtod_l+0x356>
 801e30c:	2b49      	cmp	r3, #73	; 0x49
 801e30e:	d024      	beq.n	801e35a <_strtod_l+0x35a>
 801e310:	2b4e      	cmp	r3, #78	; 0x4e
 801e312:	f47f aed3 	bne.w	801e0bc <_strtod_l+0xbc>
 801e316:	499e      	ldr	r1, [pc, #632]	; (801e590 <_strtod_l+0x590>)
 801e318:	a81d      	add	r0, sp, #116	; 0x74
 801e31a:	f001 ff35 	bl	8020188 <__match>
 801e31e:	2800      	cmp	r0, #0
 801e320:	f43f aecc 	beq.w	801e0bc <_strtod_l+0xbc>
 801e324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e326:	781b      	ldrb	r3, [r3, #0]
 801e328:	2b28      	cmp	r3, #40	; 0x28
 801e32a:	d12d      	bne.n	801e388 <_strtod_l+0x388>
 801e32c:	4999      	ldr	r1, [pc, #612]	; (801e594 <_strtod_l+0x594>)
 801e32e:	aa20      	add	r2, sp, #128	; 0x80
 801e330:	a81d      	add	r0, sp, #116	; 0x74
 801e332:	f001 ff3d 	bl	80201b0 <__hexnan>
 801e336:	2805      	cmp	r0, #5
 801e338:	d126      	bne.n	801e388 <_strtod_l+0x388>
 801e33a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e33c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e340:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e344:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e348:	e69c      	b.n	801e084 <_strtod_l+0x84>
 801e34a:	210a      	movs	r1, #10
 801e34c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e350:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e354:	e7b9      	b.n	801e2ca <_strtod_l+0x2ca>
 801e356:	2b6e      	cmp	r3, #110	; 0x6e
 801e358:	e7db      	b.n	801e312 <_strtod_l+0x312>
 801e35a:	498f      	ldr	r1, [pc, #572]	; (801e598 <_strtod_l+0x598>)
 801e35c:	a81d      	add	r0, sp, #116	; 0x74
 801e35e:	f001 ff13 	bl	8020188 <__match>
 801e362:	2800      	cmp	r0, #0
 801e364:	f43f aeaa 	beq.w	801e0bc <_strtod_l+0xbc>
 801e368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e36a:	498c      	ldr	r1, [pc, #560]	; (801e59c <_strtod_l+0x59c>)
 801e36c:	3b01      	subs	r3, #1
 801e36e:	a81d      	add	r0, sp, #116	; 0x74
 801e370:	931d      	str	r3, [sp, #116]	; 0x74
 801e372:	f001 ff09 	bl	8020188 <__match>
 801e376:	b910      	cbnz	r0, 801e37e <_strtod_l+0x37e>
 801e378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e37a:	3301      	adds	r3, #1
 801e37c:	931d      	str	r3, [sp, #116]	; 0x74
 801e37e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e5ac <_strtod_l+0x5ac>
 801e382:	f04f 0a00 	mov.w	sl, #0
 801e386:	e67d      	b.n	801e084 <_strtod_l+0x84>
 801e388:	4885      	ldr	r0, [pc, #532]	; (801e5a0 <_strtod_l+0x5a0>)
 801e38a:	f002 fead 	bl	80210e8 <nan>
 801e38e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e392:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e396:	e675      	b.n	801e084 <_strtod_l+0x84>
 801e398:	9b07      	ldr	r3, [sp, #28]
 801e39a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e39c:	1af3      	subs	r3, r6, r3
 801e39e:	2f00      	cmp	r7, #0
 801e3a0:	bf08      	it	eq
 801e3a2:	462f      	moveq	r7, r5
 801e3a4:	2d10      	cmp	r5, #16
 801e3a6:	9308      	str	r3, [sp, #32]
 801e3a8:	46a8      	mov	r8, r5
 801e3aa:	bfa8      	it	ge
 801e3ac:	f04f 0810 	movge.w	r8, #16
 801e3b0:	f7e2 f8b8 	bl	8000524 <__aeabi_ui2d>
 801e3b4:	2d09      	cmp	r5, #9
 801e3b6:	4682      	mov	sl, r0
 801e3b8:	468b      	mov	fp, r1
 801e3ba:	dd13      	ble.n	801e3e4 <_strtod_l+0x3e4>
 801e3bc:	4b79      	ldr	r3, [pc, #484]	; (801e5a4 <_strtod_l+0x5a4>)
 801e3be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e3c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e3c6:	f7e2 f927 	bl	8000618 <__aeabi_dmul>
 801e3ca:	4682      	mov	sl, r0
 801e3cc:	4648      	mov	r0, r9
 801e3ce:	468b      	mov	fp, r1
 801e3d0:	f7e2 f8a8 	bl	8000524 <__aeabi_ui2d>
 801e3d4:	4602      	mov	r2, r0
 801e3d6:	460b      	mov	r3, r1
 801e3d8:	4650      	mov	r0, sl
 801e3da:	4659      	mov	r1, fp
 801e3dc:	f7e1 ff66 	bl	80002ac <__adddf3>
 801e3e0:	4682      	mov	sl, r0
 801e3e2:	468b      	mov	fp, r1
 801e3e4:	2d0f      	cmp	r5, #15
 801e3e6:	dc38      	bgt.n	801e45a <_strtod_l+0x45a>
 801e3e8:	9b08      	ldr	r3, [sp, #32]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	f43f ae4a 	beq.w	801e084 <_strtod_l+0x84>
 801e3f0:	dd24      	ble.n	801e43c <_strtod_l+0x43c>
 801e3f2:	2b16      	cmp	r3, #22
 801e3f4:	dc0b      	bgt.n	801e40e <_strtod_l+0x40e>
 801e3f6:	4d6b      	ldr	r5, [pc, #428]	; (801e5a4 <_strtod_l+0x5a4>)
 801e3f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e3fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e400:	4652      	mov	r2, sl
 801e402:	465b      	mov	r3, fp
 801e404:	f7e2 f908 	bl	8000618 <__aeabi_dmul>
 801e408:	4682      	mov	sl, r0
 801e40a:	468b      	mov	fp, r1
 801e40c:	e63a      	b.n	801e084 <_strtod_l+0x84>
 801e40e:	9a08      	ldr	r2, [sp, #32]
 801e410:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e414:	4293      	cmp	r3, r2
 801e416:	db20      	blt.n	801e45a <_strtod_l+0x45a>
 801e418:	4c62      	ldr	r4, [pc, #392]	; (801e5a4 <_strtod_l+0x5a4>)
 801e41a:	f1c5 050f 	rsb	r5, r5, #15
 801e41e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e422:	4652      	mov	r2, sl
 801e424:	465b      	mov	r3, fp
 801e426:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e42a:	f7e2 f8f5 	bl	8000618 <__aeabi_dmul>
 801e42e:	9b08      	ldr	r3, [sp, #32]
 801e430:	1b5d      	subs	r5, r3, r5
 801e432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e436:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e43a:	e7e3      	b.n	801e404 <_strtod_l+0x404>
 801e43c:	9b08      	ldr	r3, [sp, #32]
 801e43e:	3316      	adds	r3, #22
 801e440:	db0b      	blt.n	801e45a <_strtod_l+0x45a>
 801e442:	9b07      	ldr	r3, [sp, #28]
 801e444:	4a57      	ldr	r2, [pc, #348]	; (801e5a4 <_strtod_l+0x5a4>)
 801e446:	1b9e      	subs	r6, r3, r6
 801e448:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e44c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e450:	4650      	mov	r0, sl
 801e452:	4659      	mov	r1, fp
 801e454:	f7e2 fa0a 	bl	800086c <__aeabi_ddiv>
 801e458:	e7d6      	b.n	801e408 <_strtod_l+0x408>
 801e45a:	9b08      	ldr	r3, [sp, #32]
 801e45c:	eba5 0808 	sub.w	r8, r5, r8
 801e460:	4498      	add	r8, r3
 801e462:	f1b8 0f00 	cmp.w	r8, #0
 801e466:	dd71      	ble.n	801e54c <_strtod_l+0x54c>
 801e468:	f018 030f 	ands.w	r3, r8, #15
 801e46c:	d00a      	beq.n	801e484 <_strtod_l+0x484>
 801e46e:	494d      	ldr	r1, [pc, #308]	; (801e5a4 <_strtod_l+0x5a4>)
 801e470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e474:	4652      	mov	r2, sl
 801e476:	465b      	mov	r3, fp
 801e478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e47c:	f7e2 f8cc 	bl	8000618 <__aeabi_dmul>
 801e480:	4682      	mov	sl, r0
 801e482:	468b      	mov	fp, r1
 801e484:	f038 080f 	bics.w	r8, r8, #15
 801e488:	d04d      	beq.n	801e526 <_strtod_l+0x526>
 801e48a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e48e:	dd22      	ble.n	801e4d6 <_strtod_l+0x4d6>
 801e490:	2500      	movs	r5, #0
 801e492:	462e      	mov	r6, r5
 801e494:	9509      	str	r5, [sp, #36]	; 0x24
 801e496:	9507      	str	r5, [sp, #28]
 801e498:	2322      	movs	r3, #34	; 0x22
 801e49a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e5ac <_strtod_l+0x5ac>
 801e49e:	6023      	str	r3, [r4, #0]
 801e4a0:	f04f 0a00 	mov.w	sl, #0
 801e4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	f43f adec 	beq.w	801e084 <_strtod_l+0x84>
 801e4ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e4ae:	4620      	mov	r0, r4
 801e4b0:	f001 ff8a 	bl	80203c8 <_Bfree>
 801e4b4:	9907      	ldr	r1, [sp, #28]
 801e4b6:	4620      	mov	r0, r4
 801e4b8:	f001 ff86 	bl	80203c8 <_Bfree>
 801e4bc:	4631      	mov	r1, r6
 801e4be:	4620      	mov	r0, r4
 801e4c0:	f001 ff82 	bl	80203c8 <_Bfree>
 801e4c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	f001 ff7e 	bl	80203c8 <_Bfree>
 801e4cc:	4629      	mov	r1, r5
 801e4ce:	4620      	mov	r0, r4
 801e4d0:	f001 ff7a 	bl	80203c8 <_Bfree>
 801e4d4:	e5d6      	b.n	801e084 <_strtod_l+0x84>
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e4dc:	4650      	mov	r0, sl
 801e4de:	4659      	mov	r1, fp
 801e4e0:	4699      	mov	r9, r3
 801e4e2:	f1b8 0f01 	cmp.w	r8, #1
 801e4e6:	dc21      	bgt.n	801e52c <_strtod_l+0x52c>
 801e4e8:	b10b      	cbz	r3, 801e4ee <_strtod_l+0x4ee>
 801e4ea:	4682      	mov	sl, r0
 801e4ec:	468b      	mov	fp, r1
 801e4ee:	4b2e      	ldr	r3, [pc, #184]	; (801e5a8 <_strtod_l+0x5a8>)
 801e4f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e4f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e4f8:	4652      	mov	r2, sl
 801e4fa:	465b      	mov	r3, fp
 801e4fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e500:	f7e2 f88a 	bl	8000618 <__aeabi_dmul>
 801e504:	4b29      	ldr	r3, [pc, #164]	; (801e5ac <_strtod_l+0x5ac>)
 801e506:	460a      	mov	r2, r1
 801e508:	400b      	ands	r3, r1
 801e50a:	4929      	ldr	r1, [pc, #164]	; (801e5b0 <_strtod_l+0x5b0>)
 801e50c:	428b      	cmp	r3, r1
 801e50e:	4682      	mov	sl, r0
 801e510:	d8be      	bhi.n	801e490 <_strtod_l+0x490>
 801e512:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e516:	428b      	cmp	r3, r1
 801e518:	bf86      	itte	hi
 801e51a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e5b4 <_strtod_l+0x5b4>
 801e51e:	f04f 3aff 	movhi.w	sl, #4294967295
 801e522:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e526:	2300      	movs	r3, #0
 801e528:	9304      	str	r3, [sp, #16]
 801e52a:	e081      	b.n	801e630 <_strtod_l+0x630>
 801e52c:	f018 0f01 	tst.w	r8, #1
 801e530:	d007      	beq.n	801e542 <_strtod_l+0x542>
 801e532:	4b1d      	ldr	r3, [pc, #116]	; (801e5a8 <_strtod_l+0x5a8>)
 801e534:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53c:	f7e2 f86c 	bl	8000618 <__aeabi_dmul>
 801e540:	2301      	movs	r3, #1
 801e542:	f109 0901 	add.w	r9, r9, #1
 801e546:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e54a:	e7ca      	b.n	801e4e2 <_strtod_l+0x4e2>
 801e54c:	d0eb      	beq.n	801e526 <_strtod_l+0x526>
 801e54e:	f1c8 0800 	rsb	r8, r8, #0
 801e552:	f018 020f 	ands.w	r2, r8, #15
 801e556:	d00a      	beq.n	801e56e <_strtod_l+0x56e>
 801e558:	4b12      	ldr	r3, [pc, #72]	; (801e5a4 <_strtod_l+0x5a4>)
 801e55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e55e:	4650      	mov	r0, sl
 801e560:	4659      	mov	r1, fp
 801e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e566:	f7e2 f981 	bl	800086c <__aeabi_ddiv>
 801e56a:	4682      	mov	sl, r0
 801e56c:	468b      	mov	fp, r1
 801e56e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e572:	d0d8      	beq.n	801e526 <_strtod_l+0x526>
 801e574:	f1b8 0f1f 	cmp.w	r8, #31
 801e578:	dd1e      	ble.n	801e5b8 <_strtod_l+0x5b8>
 801e57a:	2500      	movs	r5, #0
 801e57c:	462e      	mov	r6, r5
 801e57e:	9509      	str	r5, [sp, #36]	; 0x24
 801e580:	9507      	str	r5, [sp, #28]
 801e582:	2322      	movs	r3, #34	; 0x22
 801e584:	f04f 0a00 	mov.w	sl, #0
 801e588:	f04f 0b00 	mov.w	fp, #0
 801e58c:	6023      	str	r3, [r4, #0]
 801e58e:	e789      	b.n	801e4a4 <_strtod_l+0x4a4>
 801e590:	08029899 	.word	0x08029899
 801e594:	080298dc 	.word	0x080298dc
 801e598:	08029891 	.word	0x08029891
 801e59c:	08029a1c 	.word	0x08029a1c
 801e5a0:	08029d38 	.word	0x08029d38
 801e5a4:	08029c18 	.word	0x08029c18
 801e5a8:	08029bf0 	.word	0x08029bf0
 801e5ac:	7ff00000 	.word	0x7ff00000
 801e5b0:	7ca00000 	.word	0x7ca00000
 801e5b4:	7fefffff 	.word	0x7fefffff
 801e5b8:	f018 0310 	ands.w	r3, r8, #16
 801e5bc:	bf18      	it	ne
 801e5be:	236a      	movne	r3, #106	; 0x6a
 801e5c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e978 <_strtod_l+0x978>
 801e5c4:	9304      	str	r3, [sp, #16]
 801e5c6:	4650      	mov	r0, sl
 801e5c8:	4659      	mov	r1, fp
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	f018 0f01 	tst.w	r8, #1
 801e5d0:	d004      	beq.n	801e5dc <_strtod_l+0x5dc>
 801e5d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e5d6:	f7e2 f81f 	bl	8000618 <__aeabi_dmul>
 801e5da:	2301      	movs	r3, #1
 801e5dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e5e0:	f109 0908 	add.w	r9, r9, #8
 801e5e4:	d1f2      	bne.n	801e5cc <_strtod_l+0x5cc>
 801e5e6:	b10b      	cbz	r3, 801e5ec <_strtod_l+0x5ec>
 801e5e8:	4682      	mov	sl, r0
 801e5ea:	468b      	mov	fp, r1
 801e5ec:	9b04      	ldr	r3, [sp, #16]
 801e5ee:	b1bb      	cbz	r3, 801e620 <_strtod_l+0x620>
 801e5f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e5f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	4659      	mov	r1, fp
 801e5fc:	dd10      	ble.n	801e620 <_strtod_l+0x620>
 801e5fe:	2b1f      	cmp	r3, #31
 801e600:	f340 8128 	ble.w	801e854 <_strtod_l+0x854>
 801e604:	2b34      	cmp	r3, #52	; 0x34
 801e606:	bfde      	ittt	le
 801e608:	3b20      	suble	r3, #32
 801e60a:	f04f 32ff 	movle.w	r2, #4294967295
 801e60e:	fa02 f303 	lslle.w	r3, r2, r3
 801e612:	f04f 0a00 	mov.w	sl, #0
 801e616:	bfcc      	ite	gt
 801e618:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e61c:	ea03 0b01 	andle.w	fp, r3, r1
 801e620:	2200      	movs	r2, #0
 801e622:	2300      	movs	r3, #0
 801e624:	4650      	mov	r0, sl
 801e626:	4659      	mov	r1, fp
 801e628:	f7e2 fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801e62c:	2800      	cmp	r0, #0
 801e62e:	d1a4      	bne.n	801e57a <_strtod_l+0x57a>
 801e630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e632:	9300      	str	r3, [sp, #0]
 801e634:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e636:	462b      	mov	r3, r5
 801e638:	463a      	mov	r2, r7
 801e63a:	4620      	mov	r0, r4
 801e63c:	f001 ff30 	bl	80204a0 <__s2b>
 801e640:	9009      	str	r0, [sp, #36]	; 0x24
 801e642:	2800      	cmp	r0, #0
 801e644:	f43f af24 	beq.w	801e490 <_strtod_l+0x490>
 801e648:	9b07      	ldr	r3, [sp, #28]
 801e64a:	1b9e      	subs	r6, r3, r6
 801e64c:	9b08      	ldr	r3, [sp, #32]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	bfb4      	ite	lt
 801e652:	4633      	movlt	r3, r6
 801e654:	2300      	movge	r3, #0
 801e656:	9310      	str	r3, [sp, #64]	; 0x40
 801e658:	9b08      	ldr	r3, [sp, #32]
 801e65a:	2500      	movs	r5, #0
 801e65c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e660:	9318      	str	r3, [sp, #96]	; 0x60
 801e662:	462e      	mov	r6, r5
 801e664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e666:	4620      	mov	r0, r4
 801e668:	6859      	ldr	r1, [r3, #4]
 801e66a:	f001 fe6d 	bl	8020348 <_Balloc>
 801e66e:	9007      	str	r0, [sp, #28]
 801e670:	2800      	cmp	r0, #0
 801e672:	f43f af11 	beq.w	801e498 <_strtod_l+0x498>
 801e676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e678:	691a      	ldr	r2, [r3, #16]
 801e67a:	3202      	adds	r2, #2
 801e67c:	f103 010c 	add.w	r1, r3, #12
 801e680:	0092      	lsls	r2, r2, #2
 801e682:	300c      	adds	r0, #12
 801e684:	f001 fe52 	bl	802032c <memcpy>
 801e688:	ec4b ab10 	vmov	d0, sl, fp
 801e68c:	aa20      	add	r2, sp, #128	; 0x80
 801e68e:	a91f      	add	r1, sp, #124	; 0x7c
 801e690:	4620      	mov	r0, r4
 801e692:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e696:	f002 fa3f 	bl	8020b18 <__d2b>
 801e69a:	901e      	str	r0, [sp, #120]	; 0x78
 801e69c:	2800      	cmp	r0, #0
 801e69e:	f43f aefb 	beq.w	801e498 <_strtod_l+0x498>
 801e6a2:	2101      	movs	r1, #1
 801e6a4:	4620      	mov	r0, r4
 801e6a6:	f001 ff95 	bl	80205d4 <__i2b>
 801e6aa:	4606      	mov	r6, r0
 801e6ac:	2800      	cmp	r0, #0
 801e6ae:	f43f aef3 	beq.w	801e498 <_strtod_l+0x498>
 801e6b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e6b4:	9904      	ldr	r1, [sp, #16]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	bfab      	itete	ge
 801e6ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e6bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e6be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e6c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e6c4:	bfac      	ite	ge
 801e6c6:	eb03 0902 	addge.w	r9, r3, r2
 801e6ca:	1ad7      	sublt	r7, r2, r3
 801e6cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e6ce:	eba3 0801 	sub.w	r8, r3, r1
 801e6d2:	4490      	add	r8, r2
 801e6d4:	4ba3      	ldr	r3, [pc, #652]	; (801e964 <_strtod_l+0x964>)
 801e6d6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e6da:	4598      	cmp	r8, r3
 801e6dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e6e0:	f280 80cc 	bge.w	801e87c <_strtod_l+0x87c>
 801e6e4:	eba3 0308 	sub.w	r3, r3, r8
 801e6e8:	2b1f      	cmp	r3, #31
 801e6ea:	eba2 0203 	sub.w	r2, r2, r3
 801e6ee:	f04f 0101 	mov.w	r1, #1
 801e6f2:	f300 80b6 	bgt.w	801e862 <_strtod_l+0x862>
 801e6f6:	fa01 f303 	lsl.w	r3, r1, r3
 801e6fa:	9311      	str	r3, [sp, #68]	; 0x44
 801e6fc:	2300      	movs	r3, #0
 801e6fe:	930c      	str	r3, [sp, #48]	; 0x30
 801e700:	eb09 0802 	add.w	r8, r9, r2
 801e704:	9b04      	ldr	r3, [sp, #16]
 801e706:	45c1      	cmp	r9, r8
 801e708:	4417      	add	r7, r2
 801e70a:	441f      	add	r7, r3
 801e70c:	464b      	mov	r3, r9
 801e70e:	bfa8      	it	ge
 801e710:	4643      	movge	r3, r8
 801e712:	42bb      	cmp	r3, r7
 801e714:	bfa8      	it	ge
 801e716:	463b      	movge	r3, r7
 801e718:	2b00      	cmp	r3, #0
 801e71a:	bfc2      	ittt	gt
 801e71c:	eba8 0803 	subgt.w	r8, r8, r3
 801e720:	1aff      	subgt	r7, r7, r3
 801e722:	eba9 0903 	subgt.w	r9, r9, r3
 801e726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e728:	2b00      	cmp	r3, #0
 801e72a:	dd17      	ble.n	801e75c <_strtod_l+0x75c>
 801e72c:	4631      	mov	r1, r6
 801e72e:	461a      	mov	r2, r3
 801e730:	4620      	mov	r0, r4
 801e732:	f002 f80b 	bl	802074c <__pow5mult>
 801e736:	4606      	mov	r6, r0
 801e738:	2800      	cmp	r0, #0
 801e73a:	f43f aead 	beq.w	801e498 <_strtod_l+0x498>
 801e73e:	4601      	mov	r1, r0
 801e740:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e742:	4620      	mov	r0, r4
 801e744:	f001 ff5c 	bl	8020600 <__multiply>
 801e748:	900f      	str	r0, [sp, #60]	; 0x3c
 801e74a:	2800      	cmp	r0, #0
 801e74c:	f43f aea4 	beq.w	801e498 <_strtod_l+0x498>
 801e750:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e752:	4620      	mov	r0, r4
 801e754:	f001 fe38 	bl	80203c8 <_Bfree>
 801e758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e75a:	931e      	str	r3, [sp, #120]	; 0x78
 801e75c:	f1b8 0f00 	cmp.w	r8, #0
 801e760:	f300 8091 	bgt.w	801e886 <_strtod_l+0x886>
 801e764:	9b08      	ldr	r3, [sp, #32]
 801e766:	2b00      	cmp	r3, #0
 801e768:	dd08      	ble.n	801e77c <_strtod_l+0x77c>
 801e76a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e76c:	9907      	ldr	r1, [sp, #28]
 801e76e:	4620      	mov	r0, r4
 801e770:	f001 ffec 	bl	802074c <__pow5mult>
 801e774:	9007      	str	r0, [sp, #28]
 801e776:	2800      	cmp	r0, #0
 801e778:	f43f ae8e 	beq.w	801e498 <_strtod_l+0x498>
 801e77c:	2f00      	cmp	r7, #0
 801e77e:	dd08      	ble.n	801e792 <_strtod_l+0x792>
 801e780:	9907      	ldr	r1, [sp, #28]
 801e782:	463a      	mov	r2, r7
 801e784:	4620      	mov	r0, r4
 801e786:	f002 f83b 	bl	8020800 <__lshift>
 801e78a:	9007      	str	r0, [sp, #28]
 801e78c:	2800      	cmp	r0, #0
 801e78e:	f43f ae83 	beq.w	801e498 <_strtod_l+0x498>
 801e792:	f1b9 0f00 	cmp.w	r9, #0
 801e796:	dd08      	ble.n	801e7aa <_strtod_l+0x7aa>
 801e798:	4631      	mov	r1, r6
 801e79a:	464a      	mov	r2, r9
 801e79c:	4620      	mov	r0, r4
 801e79e:	f002 f82f 	bl	8020800 <__lshift>
 801e7a2:	4606      	mov	r6, r0
 801e7a4:	2800      	cmp	r0, #0
 801e7a6:	f43f ae77 	beq.w	801e498 <_strtod_l+0x498>
 801e7aa:	9a07      	ldr	r2, [sp, #28]
 801e7ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	f002 f8ae 	bl	8020910 <__mdiff>
 801e7b4:	4605      	mov	r5, r0
 801e7b6:	2800      	cmp	r0, #0
 801e7b8:	f43f ae6e 	beq.w	801e498 <_strtod_l+0x498>
 801e7bc:	68c3      	ldr	r3, [r0, #12]
 801e7be:	930f      	str	r3, [sp, #60]	; 0x3c
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	60c3      	str	r3, [r0, #12]
 801e7c4:	4631      	mov	r1, r6
 801e7c6:	f002 f887 	bl	80208d8 <__mcmp>
 801e7ca:	2800      	cmp	r0, #0
 801e7cc:	da65      	bge.n	801e89a <_strtod_l+0x89a>
 801e7ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e7d0:	ea53 030a 	orrs.w	r3, r3, sl
 801e7d4:	f040 8087 	bne.w	801e8e6 <_strtod_l+0x8e6>
 801e7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	f040 8082 	bne.w	801e8e6 <_strtod_l+0x8e6>
 801e7e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e7e6:	0d1b      	lsrs	r3, r3, #20
 801e7e8:	051b      	lsls	r3, r3, #20
 801e7ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e7ee:	d97a      	bls.n	801e8e6 <_strtod_l+0x8e6>
 801e7f0:	696b      	ldr	r3, [r5, #20]
 801e7f2:	b913      	cbnz	r3, 801e7fa <_strtod_l+0x7fa>
 801e7f4:	692b      	ldr	r3, [r5, #16]
 801e7f6:	2b01      	cmp	r3, #1
 801e7f8:	dd75      	ble.n	801e8e6 <_strtod_l+0x8e6>
 801e7fa:	4629      	mov	r1, r5
 801e7fc:	2201      	movs	r2, #1
 801e7fe:	4620      	mov	r0, r4
 801e800:	f001 fffe 	bl	8020800 <__lshift>
 801e804:	4631      	mov	r1, r6
 801e806:	4605      	mov	r5, r0
 801e808:	f002 f866 	bl	80208d8 <__mcmp>
 801e80c:	2800      	cmp	r0, #0
 801e80e:	dd6a      	ble.n	801e8e6 <_strtod_l+0x8e6>
 801e810:	9904      	ldr	r1, [sp, #16]
 801e812:	4a55      	ldr	r2, [pc, #340]	; (801e968 <_strtod_l+0x968>)
 801e814:	465b      	mov	r3, fp
 801e816:	2900      	cmp	r1, #0
 801e818:	f000 8085 	beq.w	801e926 <_strtod_l+0x926>
 801e81c:	ea02 010b 	and.w	r1, r2, fp
 801e820:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e824:	dc7f      	bgt.n	801e926 <_strtod_l+0x926>
 801e826:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e82a:	f77f aeaa 	ble.w	801e582 <_strtod_l+0x582>
 801e82e:	4a4f      	ldr	r2, [pc, #316]	; (801e96c <_strtod_l+0x96c>)
 801e830:	2300      	movs	r3, #0
 801e832:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e836:	4650      	mov	r0, sl
 801e838:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e83c:	4659      	mov	r1, fp
 801e83e:	f7e1 feeb 	bl	8000618 <__aeabi_dmul>
 801e842:	460b      	mov	r3, r1
 801e844:	4303      	orrs	r3, r0
 801e846:	bf08      	it	eq
 801e848:	2322      	moveq	r3, #34	; 0x22
 801e84a:	4682      	mov	sl, r0
 801e84c:	468b      	mov	fp, r1
 801e84e:	bf08      	it	eq
 801e850:	6023      	streq	r3, [r4, #0]
 801e852:	e62b      	b.n	801e4ac <_strtod_l+0x4ac>
 801e854:	f04f 32ff 	mov.w	r2, #4294967295
 801e858:	fa02 f303 	lsl.w	r3, r2, r3
 801e85c:	ea03 0a0a 	and.w	sl, r3, sl
 801e860:	e6de      	b.n	801e620 <_strtod_l+0x620>
 801e862:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e866:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e86a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e86e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e872:	fa01 f308 	lsl.w	r3, r1, r8
 801e876:	930c      	str	r3, [sp, #48]	; 0x30
 801e878:	9111      	str	r1, [sp, #68]	; 0x44
 801e87a:	e741      	b.n	801e700 <_strtod_l+0x700>
 801e87c:	2300      	movs	r3, #0
 801e87e:	930c      	str	r3, [sp, #48]	; 0x30
 801e880:	2301      	movs	r3, #1
 801e882:	9311      	str	r3, [sp, #68]	; 0x44
 801e884:	e73c      	b.n	801e700 <_strtod_l+0x700>
 801e886:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e888:	4642      	mov	r2, r8
 801e88a:	4620      	mov	r0, r4
 801e88c:	f001 ffb8 	bl	8020800 <__lshift>
 801e890:	901e      	str	r0, [sp, #120]	; 0x78
 801e892:	2800      	cmp	r0, #0
 801e894:	f47f af66 	bne.w	801e764 <_strtod_l+0x764>
 801e898:	e5fe      	b.n	801e498 <_strtod_l+0x498>
 801e89a:	465f      	mov	r7, fp
 801e89c:	d16e      	bne.n	801e97c <_strtod_l+0x97c>
 801e89e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e8a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e8a4:	b342      	cbz	r2, 801e8f8 <_strtod_l+0x8f8>
 801e8a6:	4a32      	ldr	r2, [pc, #200]	; (801e970 <_strtod_l+0x970>)
 801e8a8:	4293      	cmp	r3, r2
 801e8aa:	d128      	bne.n	801e8fe <_strtod_l+0x8fe>
 801e8ac:	9b04      	ldr	r3, [sp, #16]
 801e8ae:	4650      	mov	r0, sl
 801e8b0:	b1eb      	cbz	r3, 801e8ee <_strtod_l+0x8ee>
 801e8b2:	4a2d      	ldr	r2, [pc, #180]	; (801e968 <_strtod_l+0x968>)
 801e8b4:	403a      	ands	r2, r7
 801e8b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e8ba:	f04f 31ff 	mov.w	r1, #4294967295
 801e8be:	d819      	bhi.n	801e8f4 <_strtod_l+0x8f4>
 801e8c0:	0d12      	lsrs	r2, r2, #20
 801e8c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e8c6:	fa01 f303 	lsl.w	r3, r1, r3
 801e8ca:	4298      	cmp	r0, r3
 801e8cc:	d117      	bne.n	801e8fe <_strtod_l+0x8fe>
 801e8ce:	4b29      	ldr	r3, [pc, #164]	; (801e974 <_strtod_l+0x974>)
 801e8d0:	429f      	cmp	r7, r3
 801e8d2:	d102      	bne.n	801e8da <_strtod_l+0x8da>
 801e8d4:	3001      	adds	r0, #1
 801e8d6:	f43f addf 	beq.w	801e498 <_strtod_l+0x498>
 801e8da:	4b23      	ldr	r3, [pc, #140]	; (801e968 <_strtod_l+0x968>)
 801e8dc:	403b      	ands	r3, r7
 801e8de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e8e2:	f04f 0a00 	mov.w	sl, #0
 801e8e6:	9b04      	ldr	r3, [sp, #16]
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	d1a0      	bne.n	801e82e <_strtod_l+0x82e>
 801e8ec:	e5de      	b.n	801e4ac <_strtod_l+0x4ac>
 801e8ee:	f04f 33ff 	mov.w	r3, #4294967295
 801e8f2:	e7ea      	b.n	801e8ca <_strtod_l+0x8ca>
 801e8f4:	460b      	mov	r3, r1
 801e8f6:	e7e8      	b.n	801e8ca <_strtod_l+0x8ca>
 801e8f8:	ea53 030a 	orrs.w	r3, r3, sl
 801e8fc:	d088      	beq.n	801e810 <_strtod_l+0x810>
 801e8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e900:	b1db      	cbz	r3, 801e93a <_strtod_l+0x93a>
 801e902:	423b      	tst	r3, r7
 801e904:	d0ef      	beq.n	801e8e6 <_strtod_l+0x8e6>
 801e906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e908:	9a04      	ldr	r2, [sp, #16]
 801e90a:	4650      	mov	r0, sl
 801e90c:	4659      	mov	r1, fp
 801e90e:	b1c3      	cbz	r3, 801e942 <_strtod_l+0x942>
 801e910:	f7ff fb59 	bl	801dfc6 <sulp>
 801e914:	4602      	mov	r2, r0
 801e916:	460b      	mov	r3, r1
 801e918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e91c:	f7e1 fcc6 	bl	80002ac <__adddf3>
 801e920:	4682      	mov	sl, r0
 801e922:	468b      	mov	fp, r1
 801e924:	e7df      	b.n	801e8e6 <_strtod_l+0x8e6>
 801e926:	4013      	ands	r3, r2
 801e928:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e92c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e930:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e934:	f04f 3aff 	mov.w	sl, #4294967295
 801e938:	e7d5      	b.n	801e8e6 <_strtod_l+0x8e6>
 801e93a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e93c:	ea13 0f0a 	tst.w	r3, sl
 801e940:	e7e0      	b.n	801e904 <_strtod_l+0x904>
 801e942:	f7ff fb40 	bl	801dfc6 <sulp>
 801e946:	4602      	mov	r2, r0
 801e948:	460b      	mov	r3, r1
 801e94a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e94e:	f7e1 fcab 	bl	80002a8 <__aeabi_dsub>
 801e952:	2200      	movs	r2, #0
 801e954:	2300      	movs	r3, #0
 801e956:	4682      	mov	sl, r0
 801e958:	468b      	mov	fp, r1
 801e95a:	f7e2 f8c5 	bl	8000ae8 <__aeabi_dcmpeq>
 801e95e:	2800      	cmp	r0, #0
 801e960:	d0c1      	beq.n	801e8e6 <_strtod_l+0x8e6>
 801e962:	e60e      	b.n	801e582 <_strtod_l+0x582>
 801e964:	fffffc02 	.word	0xfffffc02
 801e968:	7ff00000 	.word	0x7ff00000
 801e96c:	39500000 	.word	0x39500000
 801e970:	000fffff 	.word	0x000fffff
 801e974:	7fefffff 	.word	0x7fefffff
 801e978:	080298f0 	.word	0x080298f0
 801e97c:	4631      	mov	r1, r6
 801e97e:	4628      	mov	r0, r5
 801e980:	f002 f926 	bl	8020bd0 <__ratio>
 801e984:	ec59 8b10 	vmov	r8, r9, d0
 801e988:	ee10 0a10 	vmov	r0, s0
 801e98c:	2200      	movs	r2, #0
 801e98e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e992:	4649      	mov	r1, r9
 801e994:	f7e2 f8bc 	bl	8000b10 <__aeabi_dcmple>
 801e998:	2800      	cmp	r0, #0
 801e99a:	d07c      	beq.n	801ea96 <_strtod_l+0xa96>
 801e99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d04c      	beq.n	801ea3c <_strtod_l+0xa3c>
 801e9a2:	4b95      	ldr	r3, [pc, #596]	; (801ebf8 <_strtod_l+0xbf8>)
 801e9a4:	2200      	movs	r2, #0
 801e9a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e9aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ebf8 <_strtod_l+0xbf8>
 801e9ae:	f04f 0800 	mov.w	r8, #0
 801e9b2:	4b92      	ldr	r3, [pc, #584]	; (801ebfc <_strtod_l+0xbfc>)
 801e9b4:	403b      	ands	r3, r7
 801e9b6:	9311      	str	r3, [sp, #68]	; 0x44
 801e9b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9ba:	4b91      	ldr	r3, [pc, #580]	; (801ec00 <_strtod_l+0xc00>)
 801e9bc:	429a      	cmp	r2, r3
 801e9be:	f040 80b2 	bne.w	801eb26 <_strtod_l+0xb26>
 801e9c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e9c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e9ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e9ce:	ec4b ab10 	vmov	d0, sl, fp
 801e9d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e9d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e9da:	f002 f821 	bl	8020a20 <__ulp>
 801e9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e9e2:	ec53 2b10 	vmov	r2, r3, d0
 801e9e6:	f7e1 fe17 	bl	8000618 <__aeabi_dmul>
 801e9ea:	4652      	mov	r2, sl
 801e9ec:	465b      	mov	r3, fp
 801e9ee:	f7e1 fc5d 	bl	80002ac <__adddf3>
 801e9f2:	460b      	mov	r3, r1
 801e9f4:	4981      	ldr	r1, [pc, #516]	; (801ebfc <_strtod_l+0xbfc>)
 801e9f6:	4a83      	ldr	r2, [pc, #524]	; (801ec04 <_strtod_l+0xc04>)
 801e9f8:	4019      	ands	r1, r3
 801e9fa:	4291      	cmp	r1, r2
 801e9fc:	4682      	mov	sl, r0
 801e9fe:	d95e      	bls.n	801eabe <_strtod_l+0xabe>
 801ea00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ea06:	4293      	cmp	r3, r2
 801ea08:	d103      	bne.n	801ea12 <_strtod_l+0xa12>
 801ea0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea0c:	3301      	adds	r3, #1
 801ea0e:	f43f ad43 	beq.w	801e498 <_strtod_l+0x498>
 801ea12:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ec10 <_strtod_l+0xc10>
 801ea16:	f04f 3aff 	mov.w	sl, #4294967295
 801ea1a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	f001 fcd3 	bl	80203c8 <_Bfree>
 801ea22:	9907      	ldr	r1, [sp, #28]
 801ea24:	4620      	mov	r0, r4
 801ea26:	f001 fccf 	bl	80203c8 <_Bfree>
 801ea2a:	4631      	mov	r1, r6
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	f001 fccb 	bl	80203c8 <_Bfree>
 801ea32:	4629      	mov	r1, r5
 801ea34:	4620      	mov	r0, r4
 801ea36:	f001 fcc7 	bl	80203c8 <_Bfree>
 801ea3a:	e613      	b.n	801e664 <_strtod_l+0x664>
 801ea3c:	f1ba 0f00 	cmp.w	sl, #0
 801ea40:	d11b      	bne.n	801ea7a <_strtod_l+0xa7a>
 801ea42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ea46:	b9f3      	cbnz	r3, 801ea86 <_strtod_l+0xa86>
 801ea48:	4b6b      	ldr	r3, [pc, #428]	; (801ebf8 <_strtod_l+0xbf8>)
 801ea4a:	2200      	movs	r2, #0
 801ea4c:	4640      	mov	r0, r8
 801ea4e:	4649      	mov	r1, r9
 801ea50:	f7e2 f854 	bl	8000afc <__aeabi_dcmplt>
 801ea54:	b9d0      	cbnz	r0, 801ea8c <_strtod_l+0xa8c>
 801ea56:	4640      	mov	r0, r8
 801ea58:	4649      	mov	r1, r9
 801ea5a:	4b6b      	ldr	r3, [pc, #428]	; (801ec08 <_strtod_l+0xc08>)
 801ea5c:	2200      	movs	r2, #0
 801ea5e:	f7e1 fddb 	bl	8000618 <__aeabi_dmul>
 801ea62:	4680      	mov	r8, r0
 801ea64:	4689      	mov	r9, r1
 801ea66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ea6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ea6e:	931b      	str	r3, [sp, #108]	; 0x6c
 801ea70:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ea74:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ea78:	e79b      	b.n	801e9b2 <_strtod_l+0x9b2>
 801ea7a:	f1ba 0f01 	cmp.w	sl, #1
 801ea7e:	d102      	bne.n	801ea86 <_strtod_l+0xa86>
 801ea80:	2f00      	cmp	r7, #0
 801ea82:	f43f ad7e 	beq.w	801e582 <_strtod_l+0x582>
 801ea86:	4b61      	ldr	r3, [pc, #388]	; (801ec0c <_strtod_l+0xc0c>)
 801ea88:	2200      	movs	r2, #0
 801ea8a:	e78c      	b.n	801e9a6 <_strtod_l+0x9a6>
 801ea8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ec08 <_strtod_l+0xc08>
 801ea90:	f04f 0800 	mov.w	r8, #0
 801ea94:	e7e7      	b.n	801ea66 <_strtod_l+0xa66>
 801ea96:	4b5c      	ldr	r3, [pc, #368]	; (801ec08 <_strtod_l+0xc08>)
 801ea98:	4640      	mov	r0, r8
 801ea9a:	4649      	mov	r1, r9
 801ea9c:	2200      	movs	r2, #0
 801ea9e:	f7e1 fdbb 	bl	8000618 <__aeabi_dmul>
 801eaa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eaa4:	4680      	mov	r8, r0
 801eaa6:	4689      	mov	r9, r1
 801eaa8:	b933      	cbnz	r3, 801eab8 <_strtod_l+0xab8>
 801eaaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eaae:	9012      	str	r0, [sp, #72]	; 0x48
 801eab0:	9313      	str	r3, [sp, #76]	; 0x4c
 801eab2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801eab6:	e7dd      	b.n	801ea74 <_strtod_l+0xa74>
 801eab8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801eabc:	e7f9      	b.n	801eab2 <_strtod_l+0xab2>
 801eabe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801eac2:	9b04      	ldr	r3, [sp, #16]
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d1a8      	bne.n	801ea1a <_strtod_l+0xa1a>
 801eac8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801eacc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eace:	0d1b      	lsrs	r3, r3, #20
 801ead0:	051b      	lsls	r3, r3, #20
 801ead2:	429a      	cmp	r2, r3
 801ead4:	d1a1      	bne.n	801ea1a <_strtod_l+0xa1a>
 801ead6:	4640      	mov	r0, r8
 801ead8:	4649      	mov	r1, r9
 801eada:	f7e2 f94d 	bl	8000d78 <__aeabi_d2lz>
 801eade:	f7e1 fd6d 	bl	80005bc <__aeabi_l2d>
 801eae2:	4602      	mov	r2, r0
 801eae4:	460b      	mov	r3, r1
 801eae6:	4640      	mov	r0, r8
 801eae8:	4649      	mov	r1, r9
 801eaea:	f7e1 fbdd 	bl	80002a8 <__aeabi_dsub>
 801eaee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eaf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801eaf4:	ea43 030a 	orr.w	r3, r3, sl
 801eaf8:	4313      	orrs	r3, r2
 801eafa:	4680      	mov	r8, r0
 801eafc:	4689      	mov	r9, r1
 801eafe:	d053      	beq.n	801eba8 <_strtod_l+0xba8>
 801eb00:	a335      	add	r3, pc, #212	; (adr r3, 801ebd8 <_strtod_l+0xbd8>)
 801eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb06:	f7e1 fff9 	bl	8000afc <__aeabi_dcmplt>
 801eb0a:	2800      	cmp	r0, #0
 801eb0c:	f47f acce 	bne.w	801e4ac <_strtod_l+0x4ac>
 801eb10:	a333      	add	r3, pc, #204	; (adr r3, 801ebe0 <_strtod_l+0xbe0>)
 801eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb16:	4640      	mov	r0, r8
 801eb18:	4649      	mov	r1, r9
 801eb1a:	f7e2 f80d 	bl	8000b38 <__aeabi_dcmpgt>
 801eb1e:	2800      	cmp	r0, #0
 801eb20:	f43f af7b 	beq.w	801ea1a <_strtod_l+0xa1a>
 801eb24:	e4c2      	b.n	801e4ac <_strtod_l+0x4ac>
 801eb26:	9b04      	ldr	r3, [sp, #16]
 801eb28:	b333      	cbz	r3, 801eb78 <_strtod_l+0xb78>
 801eb2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801eb30:	d822      	bhi.n	801eb78 <_strtod_l+0xb78>
 801eb32:	a32d      	add	r3, pc, #180	; (adr r3, 801ebe8 <_strtod_l+0xbe8>)
 801eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb38:	4640      	mov	r0, r8
 801eb3a:	4649      	mov	r1, r9
 801eb3c:	f7e1 ffe8 	bl	8000b10 <__aeabi_dcmple>
 801eb40:	b1a0      	cbz	r0, 801eb6c <_strtod_l+0xb6c>
 801eb42:	4649      	mov	r1, r9
 801eb44:	4640      	mov	r0, r8
 801eb46:	f7e2 f83f 	bl	8000bc8 <__aeabi_d2uiz>
 801eb4a:	2801      	cmp	r0, #1
 801eb4c:	bf38      	it	cc
 801eb4e:	2001      	movcc	r0, #1
 801eb50:	f7e1 fce8 	bl	8000524 <__aeabi_ui2d>
 801eb54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb56:	4680      	mov	r8, r0
 801eb58:	4689      	mov	r9, r1
 801eb5a:	bb13      	cbnz	r3, 801eba2 <_strtod_l+0xba2>
 801eb5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb60:	9014      	str	r0, [sp, #80]	; 0x50
 801eb62:	9315      	str	r3, [sp, #84]	; 0x54
 801eb64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801eb68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801eb6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eb70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801eb74:	1a9b      	subs	r3, r3, r2
 801eb76:	930d      	str	r3, [sp, #52]	; 0x34
 801eb78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801eb7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801eb80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801eb84:	f001 ff4c 	bl	8020a20 <__ulp>
 801eb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801eb8c:	ec53 2b10 	vmov	r2, r3, d0
 801eb90:	f7e1 fd42 	bl	8000618 <__aeabi_dmul>
 801eb94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801eb98:	f7e1 fb88 	bl	80002ac <__adddf3>
 801eb9c:	4682      	mov	sl, r0
 801eb9e:	468b      	mov	fp, r1
 801eba0:	e78f      	b.n	801eac2 <_strtod_l+0xac2>
 801eba2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801eba6:	e7dd      	b.n	801eb64 <_strtod_l+0xb64>
 801eba8:	a311      	add	r3, pc, #68	; (adr r3, 801ebf0 <_strtod_l+0xbf0>)
 801ebaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebae:	f7e1 ffa5 	bl	8000afc <__aeabi_dcmplt>
 801ebb2:	e7b4      	b.n	801eb1e <_strtod_l+0xb1e>
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	930e      	str	r3, [sp, #56]	; 0x38
 801ebb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ebba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ebbc:	6013      	str	r3, [r2, #0]
 801ebbe:	f7ff ba65 	b.w	801e08c <_strtod_l+0x8c>
 801ebc2:	2b65      	cmp	r3, #101	; 0x65
 801ebc4:	f43f ab5d 	beq.w	801e282 <_strtod_l+0x282>
 801ebc8:	2b45      	cmp	r3, #69	; 0x45
 801ebca:	f43f ab5a 	beq.w	801e282 <_strtod_l+0x282>
 801ebce:	2201      	movs	r2, #1
 801ebd0:	f7ff bb92 	b.w	801e2f8 <_strtod_l+0x2f8>
 801ebd4:	f3af 8000 	nop.w
 801ebd8:	94a03595 	.word	0x94a03595
 801ebdc:	3fdfffff 	.word	0x3fdfffff
 801ebe0:	35afe535 	.word	0x35afe535
 801ebe4:	3fe00000 	.word	0x3fe00000
 801ebe8:	ffc00000 	.word	0xffc00000
 801ebec:	41dfffff 	.word	0x41dfffff
 801ebf0:	94a03595 	.word	0x94a03595
 801ebf4:	3fcfffff 	.word	0x3fcfffff
 801ebf8:	3ff00000 	.word	0x3ff00000
 801ebfc:	7ff00000 	.word	0x7ff00000
 801ec00:	7fe00000 	.word	0x7fe00000
 801ec04:	7c9fffff 	.word	0x7c9fffff
 801ec08:	3fe00000 	.word	0x3fe00000
 801ec0c:	bff00000 	.word	0xbff00000
 801ec10:	7fefffff 	.word	0x7fefffff

0801ec14 <_strtod_r>:
 801ec14:	4b01      	ldr	r3, [pc, #4]	; (801ec1c <_strtod_r+0x8>)
 801ec16:	f7ff b9f3 	b.w	801e000 <_strtod_l>
 801ec1a:	bf00      	nop
 801ec1c:	20000624 	.word	0x20000624

0801ec20 <_strtol_l.isra.0>:
 801ec20:	2b01      	cmp	r3, #1
 801ec22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec26:	d001      	beq.n	801ec2c <_strtol_l.isra.0+0xc>
 801ec28:	2b24      	cmp	r3, #36	; 0x24
 801ec2a:	d906      	bls.n	801ec3a <_strtol_l.isra.0+0x1a>
 801ec2c:	f7fe fae6 	bl	801d1fc <__errno>
 801ec30:	2316      	movs	r3, #22
 801ec32:	6003      	str	r3, [r0, #0]
 801ec34:	2000      	movs	r0, #0
 801ec36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec3a:	4f3a      	ldr	r7, [pc, #232]	; (801ed24 <_strtol_l.isra.0+0x104>)
 801ec3c:	468e      	mov	lr, r1
 801ec3e:	4676      	mov	r6, lr
 801ec40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ec44:	5de5      	ldrb	r5, [r4, r7]
 801ec46:	f015 0508 	ands.w	r5, r5, #8
 801ec4a:	d1f8      	bne.n	801ec3e <_strtol_l.isra.0+0x1e>
 801ec4c:	2c2d      	cmp	r4, #45	; 0x2d
 801ec4e:	d134      	bne.n	801ecba <_strtol_l.isra.0+0x9a>
 801ec50:	f89e 4000 	ldrb.w	r4, [lr]
 801ec54:	f04f 0801 	mov.w	r8, #1
 801ec58:	f106 0e02 	add.w	lr, r6, #2
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d05c      	beq.n	801ed1a <_strtol_l.isra.0+0xfa>
 801ec60:	2b10      	cmp	r3, #16
 801ec62:	d10c      	bne.n	801ec7e <_strtol_l.isra.0+0x5e>
 801ec64:	2c30      	cmp	r4, #48	; 0x30
 801ec66:	d10a      	bne.n	801ec7e <_strtol_l.isra.0+0x5e>
 801ec68:	f89e 4000 	ldrb.w	r4, [lr]
 801ec6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ec70:	2c58      	cmp	r4, #88	; 0x58
 801ec72:	d14d      	bne.n	801ed10 <_strtol_l.isra.0+0xf0>
 801ec74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ec78:	2310      	movs	r3, #16
 801ec7a:	f10e 0e02 	add.w	lr, lr, #2
 801ec7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ec82:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ec86:	2600      	movs	r6, #0
 801ec88:	fbbc f9f3 	udiv	r9, ip, r3
 801ec8c:	4635      	mov	r5, r6
 801ec8e:	fb03 ca19 	mls	sl, r3, r9, ip
 801ec92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ec96:	2f09      	cmp	r7, #9
 801ec98:	d818      	bhi.n	801eccc <_strtol_l.isra.0+0xac>
 801ec9a:	463c      	mov	r4, r7
 801ec9c:	42a3      	cmp	r3, r4
 801ec9e:	dd24      	ble.n	801ecea <_strtol_l.isra.0+0xca>
 801eca0:	2e00      	cmp	r6, #0
 801eca2:	db1f      	blt.n	801ece4 <_strtol_l.isra.0+0xc4>
 801eca4:	45a9      	cmp	r9, r5
 801eca6:	d31d      	bcc.n	801ece4 <_strtol_l.isra.0+0xc4>
 801eca8:	d101      	bne.n	801ecae <_strtol_l.isra.0+0x8e>
 801ecaa:	45a2      	cmp	sl, r4
 801ecac:	db1a      	blt.n	801ece4 <_strtol_l.isra.0+0xc4>
 801ecae:	fb05 4503 	mla	r5, r5, r3, r4
 801ecb2:	2601      	movs	r6, #1
 801ecb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ecb8:	e7eb      	b.n	801ec92 <_strtol_l.isra.0+0x72>
 801ecba:	2c2b      	cmp	r4, #43	; 0x2b
 801ecbc:	bf08      	it	eq
 801ecbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ecc2:	46a8      	mov	r8, r5
 801ecc4:	bf08      	it	eq
 801ecc6:	f106 0e02 	addeq.w	lr, r6, #2
 801ecca:	e7c7      	b.n	801ec5c <_strtol_l.isra.0+0x3c>
 801eccc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ecd0:	2f19      	cmp	r7, #25
 801ecd2:	d801      	bhi.n	801ecd8 <_strtol_l.isra.0+0xb8>
 801ecd4:	3c37      	subs	r4, #55	; 0x37
 801ecd6:	e7e1      	b.n	801ec9c <_strtol_l.isra.0+0x7c>
 801ecd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ecdc:	2f19      	cmp	r7, #25
 801ecde:	d804      	bhi.n	801ecea <_strtol_l.isra.0+0xca>
 801ece0:	3c57      	subs	r4, #87	; 0x57
 801ece2:	e7db      	b.n	801ec9c <_strtol_l.isra.0+0x7c>
 801ece4:	f04f 36ff 	mov.w	r6, #4294967295
 801ece8:	e7e4      	b.n	801ecb4 <_strtol_l.isra.0+0x94>
 801ecea:	2e00      	cmp	r6, #0
 801ecec:	da05      	bge.n	801ecfa <_strtol_l.isra.0+0xda>
 801ecee:	2322      	movs	r3, #34	; 0x22
 801ecf0:	6003      	str	r3, [r0, #0]
 801ecf2:	4665      	mov	r5, ip
 801ecf4:	b942      	cbnz	r2, 801ed08 <_strtol_l.isra.0+0xe8>
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	e79d      	b.n	801ec36 <_strtol_l.isra.0+0x16>
 801ecfa:	f1b8 0f00 	cmp.w	r8, #0
 801ecfe:	d000      	beq.n	801ed02 <_strtol_l.isra.0+0xe2>
 801ed00:	426d      	negs	r5, r5
 801ed02:	2a00      	cmp	r2, #0
 801ed04:	d0f7      	beq.n	801ecf6 <_strtol_l.isra.0+0xd6>
 801ed06:	b10e      	cbz	r6, 801ed0c <_strtol_l.isra.0+0xec>
 801ed08:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ed0c:	6011      	str	r1, [r2, #0]
 801ed0e:	e7f2      	b.n	801ecf6 <_strtol_l.isra.0+0xd6>
 801ed10:	2430      	movs	r4, #48	; 0x30
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d1b3      	bne.n	801ec7e <_strtol_l.isra.0+0x5e>
 801ed16:	2308      	movs	r3, #8
 801ed18:	e7b1      	b.n	801ec7e <_strtol_l.isra.0+0x5e>
 801ed1a:	2c30      	cmp	r4, #48	; 0x30
 801ed1c:	d0a4      	beq.n	801ec68 <_strtol_l.isra.0+0x48>
 801ed1e:	230a      	movs	r3, #10
 801ed20:	e7ad      	b.n	801ec7e <_strtol_l.isra.0+0x5e>
 801ed22:	bf00      	nop
 801ed24:	08029919 	.word	0x08029919

0801ed28 <_strtol_r>:
 801ed28:	f7ff bf7a 	b.w	801ec20 <_strtol_l.isra.0>

0801ed2c <quorem>:
 801ed2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed30:	6903      	ldr	r3, [r0, #16]
 801ed32:	690c      	ldr	r4, [r1, #16]
 801ed34:	42a3      	cmp	r3, r4
 801ed36:	4607      	mov	r7, r0
 801ed38:	f2c0 8081 	blt.w	801ee3e <quorem+0x112>
 801ed3c:	3c01      	subs	r4, #1
 801ed3e:	f101 0814 	add.w	r8, r1, #20
 801ed42:	f100 0514 	add.w	r5, r0, #20
 801ed46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ed4a:	9301      	str	r3, [sp, #4]
 801ed4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ed50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ed54:	3301      	adds	r3, #1
 801ed56:	429a      	cmp	r2, r3
 801ed58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ed5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ed60:	fbb2 f6f3 	udiv	r6, r2, r3
 801ed64:	d331      	bcc.n	801edca <quorem+0x9e>
 801ed66:	f04f 0e00 	mov.w	lr, #0
 801ed6a:	4640      	mov	r0, r8
 801ed6c:	46ac      	mov	ip, r5
 801ed6e:	46f2      	mov	sl, lr
 801ed70:	f850 2b04 	ldr.w	r2, [r0], #4
 801ed74:	b293      	uxth	r3, r2
 801ed76:	fb06 e303 	mla	r3, r6, r3, lr
 801ed7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ed7e:	b29b      	uxth	r3, r3
 801ed80:	ebaa 0303 	sub.w	r3, sl, r3
 801ed84:	0c12      	lsrs	r2, r2, #16
 801ed86:	f8dc a000 	ldr.w	sl, [ip]
 801ed8a:	fb06 e202 	mla	r2, r6, r2, lr
 801ed8e:	fa13 f38a 	uxtah	r3, r3, sl
 801ed92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ed96:	fa1f fa82 	uxth.w	sl, r2
 801ed9a:	f8dc 2000 	ldr.w	r2, [ip]
 801ed9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801eda2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801eda6:	b29b      	uxth	r3, r3
 801eda8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801edac:	4581      	cmp	r9, r0
 801edae:	f84c 3b04 	str.w	r3, [ip], #4
 801edb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801edb6:	d2db      	bcs.n	801ed70 <quorem+0x44>
 801edb8:	f855 300b 	ldr.w	r3, [r5, fp]
 801edbc:	b92b      	cbnz	r3, 801edca <quorem+0x9e>
 801edbe:	9b01      	ldr	r3, [sp, #4]
 801edc0:	3b04      	subs	r3, #4
 801edc2:	429d      	cmp	r5, r3
 801edc4:	461a      	mov	r2, r3
 801edc6:	d32e      	bcc.n	801ee26 <quorem+0xfa>
 801edc8:	613c      	str	r4, [r7, #16]
 801edca:	4638      	mov	r0, r7
 801edcc:	f001 fd84 	bl	80208d8 <__mcmp>
 801edd0:	2800      	cmp	r0, #0
 801edd2:	db24      	blt.n	801ee1e <quorem+0xf2>
 801edd4:	3601      	adds	r6, #1
 801edd6:	4628      	mov	r0, r5
 801edd8:	f04f 0c00 	mov.w	ip, #0
 801eddc:	f858 2b04 	ldr.w	r2, [r8], #4
 801ede0:	f8d0 e000 	ldr.w	lr, [r0]
 801ede4:	b293      	uxth	r3, r2
 801ede6:	ebac 0303 	sub.w	r3, ip, r3
 801edea:	0c12      	lsrs	r2, r2, #16
 801edec:	fa13 f38e 	uxtah	r3, r3, lr
 801edf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801edf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801edf8:	b29b      	uxth	r3, r3
 801edfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801edfe:	45c1      	cmp	r9, r8
 801ee00:	f840 3b04 	str.w	r3, [r0], #4
 801ee04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ee08:	d2e8      	bcs.n	801eddc <quorem+0xb0>
 801ee0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ee0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ee12:	b922      	cbnz	r2, 801ee1e <quorem+0xf2>
 801ee14:	3b04      	subs	r3, #4
 801ee16:	429d      	cmp	r5, r3
 801ee18:	461a      	mov	r2, r3
 801ee1a:	d30a      	bcc.n	801ee32 <quorem+0x106>
 801ee1c:	613c      	str	r4, [r7, #16]
 801ee1e:	4630      	mov	r0, r6
 801ee20:	b003      	add	sp, #12
 801ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee26:	6812      	ldr	r2, [r2, #0]
 801ee28:	3b04      	subs	r3, #4
 801ee2a:	2a00      	cmp	r2, #0
 801ee2c:	d1cc      	bne.n	801edc8 <quorem+0x9c>
 801ee2e:	3c01      	subs	r4, #1
 801ee30:	e7c7      	b.n	801edc2 <quorem+0x96>
 801ee32:	6812      	ldr	r2, [r2, #0]
 801ee34:	3b04      	subs	r3, #4
 801ee36:	2a00      	cmp	r2, #0
 801ee38:	d1f0      	bne.n	801ee1c <quorem+0xf0>
 801ee3a:	3c01      	subs	r4, #1
 801ee3c:	e7eb      	b.n	801ee16 <quorem+0xea>
 801ee3e:	2000      	movs	r0, #0
 801ee40:	e7ee      	b.n	801ee20 <quorem+0xf4>
 801ee42:	0000      	movs	r0, r0
 801ee44:	0000      	movs	r0, r0
	...

0801ee48 <_dtoa_r>:
 801ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee4c:	ed2d 8b02 	vpush	{d8}
 801ee50:	ec57 6b10 	vmov	r6, r7, d0
 801ee54:	b095      	sub	sp, #84	; 0x54
 801ee56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ee58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ee5c:	9105      	str	r1, [sp, #20]
 801ee5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ee62:	4604      	mov	r4, r0
 801ee64:	9209      	str	r2, [sp, #36]	; 0x24
 801ee66:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee68:	b975      	cbnz	r5, 801ee88 <_dtoa_r+0x40>
 801ee6a:	2010      	movs	r0, #16
 801ee6c:	f001 fa44 	bl	80202f8 <malloc>
 801ee70:	4602      	mov	r2, r0
 801ee72:	6260      	str	r0, [r4, #36]	; 0x24
 801ee74:	b920      	cbnz	r0, 801ee80 <_dtoa_r+0x38>
 801ee76:	4bb2      	ldr	r3, [pc, #712]	; (801f140 <_dtoa_r+0x2f8>)
 801ee78:	21ea      	movs	r1, #234	; 0xea
 801ee7a:	48b2      	ldr	r0, [pc, #712]	; (801f144 <_dtoa_r+0x2fc>)
 801ee7c:	f002 fa82 	bl	8021384 <__assert_func>
 801ee80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ee84:	6005      	str	r5, [r0, #0]
 801ee86:	60c5      	str	r5, [r0, #12]
 801ee88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ee8a:	6819      	ldr	r1, [r3, #0]
 801ee8c:	b151      	cbz	r1, 801eea4 <_dtoa_r+0x5c>
 801ee8e:	685a      	ldr	r2, [r3, #4]
 801ee90:	604a      	str	r2, [r1, #4]
 801ee92:	2301      	movs	r3, #1
 801ee94:	4093      	lsls	r3, r2
 801ee96:	608b      	str	r3, [r1, #8]
 801ee98:	4620      	mov	r0, r4
 801ee9a:	f001 fa95 	bl	80203c8 <_Bfree>
 801ee9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eea0:	2200      	movs	r2, #0
 801eea2:	601a      	str	r2, [r3, #0]
 801eea4:	1e3b      	subs	r3, r7, #0
 801eea6:	bfb9      	ittee	lt
 801eea8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801eeac:	9303      	strlt	r3, [sp, #12]
 801eeae:	2300      	movge	r3, #0
 801eeb0:	f8c8 3000 	strge.w	r3, [r8]
 801eeb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801eeb8:	4ba3      	ldr	r3, [pc, #652]	; (801f148 <_dtoa_r+0x300>)
 801eeba:	bfbc      	itt	lt
 801eebc:	2201      	movlt	r2, #1
 801eebe:	f8c8 2000 	strlt.w	r2, [r8]
 801eec2:	ea33 0309 	bics.w	r3, r3, r9
 801eec6:	d11b      	bne.n	801ef00 <_dtoa_r+0xb8>
 801eec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eeca:	f242 730f 	movw	r3, #9999	; 0x270f
 801eece:	6013      	str	r3, [r2, #0]
 801eed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eed4:	4333      	orrs	r3, r6
 801eed6:	f000 857a 	beq.w	801f9ce <_dtoa_r+0xb86>
 801eeda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eedc:	b963      	cbnz	r3, 801eef8 <_dtoa_r+0xb0>
 801eede:	4b9b      	ldr	r3, [pc, #620]	; (801f14c <_dtoa_r+0x304>)
 801eee0:	e024      	b.n	801ef2c <_dtoa_r+0xe4>
 801eee2:	4b9b      	ldr	r3, [pc, #620]	; (801f150 <_dtoa_r+0x308>)
 801eee4:	9300      	str	r3, [sp, #0]
 801eee6:	3308      	adds	r3, #8
 801eee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801eeea:	6013      	str	r3, [r2, #0]
 801eeec:	9800      	ldr	r0, [sp, #0]
 801eeee:	b015      	add	sp, #84	; 0x54
 801eef0:	ecbd 8b02 	vpop	{d8}
 801eef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eef8:	4b94      	ldr	r3, [pc, #592]	; (801f14c <_dtoa_r+0x304>)
 801eefa:	9300      	str	r3, [sp, #0]
 801eefc:	3303      	adds	r3, #3
 801eefe:	e7f3      	b.n	801eee8 <_dtoa_r+0xa0>
 801ef00:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef04:	2200      	movs	r2, #0
 801ef06:	ec51 0b17 	vmov	r0, r1, d7
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ef10:	f7e1 fdea 	bl	8000ae8 <__aeabi_dcmpeq>
 801ef14:	4680      	mov	r8, r0
 801ef16:	b158      	cbz	r0, 801ef30 <_dtoa_r+0xe8>
 801ef18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef1a:	2301      	movs	r3, #1
 801ef1c:	6013      	str	r3, [r2, #0]
 801ef1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	f000 8551 	beq.w	801f9c8 <_dtoa_r+0xb80>
 801ef26:	488b      	ldr	r0, [pc, #556]	; (801f154 <_dtoa_r+0x30c>)
 801ef28:	6018      	str	r0, [r3, #0]
 801ef2a:	1e43      	subs	r3, r0, #1
 801ef2c:	9300      	str	r3, [sp, #0]
 801ef2e:	e7dd      	b.n	801eeec <_dtoa_r+0xa4>
 801ef30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ef34:	aa12      	add	r2, sp, #72	; 0x48
 801ef36:	a913      	add	r1, sp, #76	; 0x4c
 801ef38:	4620      	mov	r0, r4
 801ef3a:	f001 fded 	bl	8020b18 <__d2b>
 801ef3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ef42:	4683      	mov	fp, r0
 801ef44:	2d00      	cmp	r5, #0
 801ef46:	d07c      	beq.n	801f042 <_dtoa_r+0x1fa>
 801ef48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ef4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ef52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ef56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ef5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ef5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ef62:	4b7d      	ldr	r3, [pc, #500]	; (801f158 <_dtoa_r+0x310>)
 801ef64:	2200      	movs	r2, #0
 801ef66:	4630      	mov	r0, r6
 801ef68:	4639      	mov	r1, r7
 801ef6a:	f7e1 f99d 	bl	80002a8 <__aeabi_dsub>
 801ef6e:	a36e      	add	r3, pc, #440	; (adr r3, 801f128 <_dtoa_r+0x2e0>)
 801ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef74:	f7e1 fb50 	bl	8000618 <__aeabi_dmul>
 801ef78:	a36d      	add	r3, pc, #436	; (adr r3, 801f130 <_dtoa_r+0x2e8>)
 801ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef7e:	f7e1 f995 	bl	80002ac <__adddf3>
 801ef82:	4606      	mov	r6, r0
 801ef84:	4628      	mov	r0, r5
 801ef86:	460f      	mov	r7, r1
 801ef88:	f7e1 fadc 	bl	8000544 <__aeabi_i2d>
 801ef8c:	a36a      	add	r3, pc, #424	; (adr r3, 801f138 <_dtoa_r+0x2f0>)
 801ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef92:	f7e1 fb41 	bl	8000618 <__aeabi_dmul>
 801ef96:	4602      	mov	r2, r0
 801ef98:	460b      	mov	r3, r1
 801ef9a:	4630      	mov	r0, r6
 801ef9c:	4639      	mov	r1, r7
 801ef9e:	f7e1 f985 	bl	80002ac <__adddf3>
 801efa2:	4606      	mov	r6, r0
 801efa4:	460f      	mov	r7, r1
 801efa6:	f7e1 fde7 	bl	8000b78 <__aeabi_d2iz>
 801efaa:	2200      	movs	r2, #0
 801efac:	4682      	mov	sl, r0
 801efae:	2300      	movs	r3, #0
 801efb0:	4630      	mov	r0, r6
 801efb2:	4639      	mov	r1, r7
 801efb4:	f7e1 fda2 	bl	8000afc <__aeabi_dcmplt>
 801efb8:	b148      	cbz	r0, 801efce <_dtoa_r+0x186>
 801efba:	4650      	mov	r0, sl
 801efbc:	f7e1 fac2 	bl	8000544 <__aeabi_i2d>
 801efc0:	4632      	mov	r2, r6
 801efc2:	463b      	mov	r3, r7
 801efc4:	f7e1 fd90 	bl	8000ae8 <__aeabi_dcmpeq>
 801efc8:	b908      	cbnz	r0, 801efce <_dtoa_r+0x186>
 801efca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801efce:	f1ba 0f16 	cmp.w	sl, #22
 801efd2:	d854      	bhi.n	801f07e <_dtoa_r+0x236>
 801efd4:	4b61      	ldr	r3, [pc, #388]	; (801f15c <_dtoa_r+0x314>)
 801efd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801efe2:	f7e1 fd8b 	bl	8000afc <__aeabi_dcmplt>
 801efe6:	2800      	cmp	r0, #0
 801efe8:	d04b      	beq.n	801f082 <_dtoa_r+0x23a>
 801efea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801efee:	2300      	movs	r3, #0
 801eff0:	930e      	str	r3, [sp, #56]	; 0x38
 801eff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eff4:	1b5d      	subs	r5, r3, r5
 801eff6:	1e6b      	subs	r3, r5, #1
 801eff8:	9304      	str	r3, [sp, #16]
 801effa:	bf43      	ittte	mi
 801effc:	2300      	movmi	r3, #0
 801effe:	f1c5 0801 	rsbmi	r8, r5, #1
 801f002:	9304      	strmi	r3, [sp, #16]
 801f004:	f04f 0800 	movpl.w	r8, #0
 801f008:	f1ba 0f00 	cmp.w	sl, #0
 801f00c:	db3b      	blt.n	801f086 <_dtoa_r+0x23e>
 801f00e:	9b04      	ldr	r3, [sp, #16]
 801f010:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f014:	4453      	add	r3, sl
 801f016:	9304      	str	r3, [sp, #16]
 801f018:	2300      	movs	r3, #0
 801f01a:	9306      	str	r3, [sp, #24]
 801f01c:	9b05      	ldr	r3, [sp, #20]
 801f01e:	2b09      	cmp	r3, #9
 801f020:	d869      	bhi.n	801f0f6 <_dtoa_r+0x2ae>
 801f022:	2b05      	cmp	r3, #5
 801f024:	bfc4      	itt	gt
 801f026:	3b04      	subgt	r3, #4
 801f028:	9305      	strgt	r3, [sp, #20]
 801f02a:	9b05      	ldr	r3, [sp, #20]
 801f02c:	f1a3 0302 	sub.w	r3, r3, #2
 801f030:	bfcc      	ite	gt
 801f032:	2500      	movgt	r5, #0
 801f034:	2501      	movle	r5, #1
 801f036:	2b03      	cmp	r3, #3
 801f038:	d869      	bhi.n	801f10e <_dtoa_r+0x2c6>
 801f03a:	e8df f003 	tbb	[pc, r3]
 801f03e:	4e2c      	.short	0x4e2c
 801f040:	5a4c      	.short	0x5a4c
 801f042:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801f046:	441d      	add	r5, r3
 801f048:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801f04c:	2b20      	cmp	r3, #32
 801f04e:	bfc1      	itttt	gt
 801f050:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801f054:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801f058:	fa09 f303 	lslgt.w	r3, r9, r3
 801f05c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801f060:	bfda      	itte	le
 801f062:	f1c3 0320 	rsble	r3, r3, #32
 801f066:	fa06 f003 	lslle.w	r0, r6, r3
 801f06a:	4318      	orrgt	r0, r3
 801f06c:	f7e1 fa5a 	bl	8000524 <__aeabi_ui2d>
 801f070:	2301      	movs	r3, #1
 801f072:	4606      	mov	r6, r0
 801f074:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801f078:	3d01      	subs	r5, #1
 801f07a:	9310      	str	r3, [sp, #64]	; 0x40
 801f07c:	e771      	b.n	801ef62 <_dtoa_r+0x11a>
 801f07e:	2301      	movs	r3, #1
 801f080:	e7b6      	b.n	801eff0 <_dtoa_r+0x1a8>
 801f082:	900e      	str	r0, [sp, #56]	; 0x38
 801f084:	e7b5      	b.n	801eff2 <_dtoa_r+0x1aa>
 801f086:	f1ca 0300 	rsb	r3, sl, #0
 801f08a:	9306      	str	r3, [sp, #24]
 801f08c:	2300      	movs	r3, #0
 801f08e:	eba8 080a 	sub.w	r8, r8, sl
 801f092:	930d      	str	r3, [sp, #52]	; 0x34
 801f094:	e7c2      	b.n	801f01c <_dtoa_r+0x1d4>
 801f096:	2300      	movs	r3, #0
 801f098:	9308      	str	r3, [sp, #32]
 801f09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	dc39      	bgt.n	801f114 <_dtoa_r+0x2cc>
 801f0a0:	f04f 0901 	mov.w	r9, #1
 801f0a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801f0a8:	464b      	mov	r3, r9
 801f0aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f0ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f0b0:	2200      	movs	r2, #0
 801f0b2:	6042      	str	r2, [r0, #4]
 801f0b4:	2204      	movs	r2, #4
 801f0b6:	f102 0614 	add.w	r6, r2, #20
 801f0ba:	429e      	cmp	r6, r3
 801f0bc:	6841      	ldr	r1, [r0, #4]
 801f0be:	d92f      	bls.n	801f120 <_dtoa_r+0x2d8>
 801f0c0:	4620      	mov	r0, r4
 801f0c2:	f001 f941 	bl	8020348 <_Balloc>
 801f0c6:	9000      	str	r0, [sp, #0]
 801f0c8:	2800      	cmp	r0, #0
 801f0ca:	d14b      	bne.n	801f164 <_dtoa_r+0x31c>
 801f0cc:	4b24      	ldr	r3, [pc, #144]	; (801f160 <_dtoa_r+0x318>)
 801f0ce:	4602      	mov	r2, r0
 801f0d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f0d4:	e6d1      	b.n	801ee7a <_dtoa_r+0x32>
 801f0d6:	2301      	movs	r3, #1
 801f0d8:	e7de      	b.n	801f098 <_dtoa_r+0x250>
 801f0da:	2300      	movs	r3, #0
 801f0dc:	9308      	str	r3, [sp, #32]
 801f0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0e0:	eb0a 0903 	add.w	r9, sl, r3
 801f0e4:	f109 0301 	add.w	r3, r9, #1
 801f0e8:	2b01      	cmp	r3, #1
 801f0ea:	9301      	str	r3, [sp, #4]
 801f0ec:	bfb8      	it	lt
 801f0ee:	2301      	movlt	r3, #1
 801f0f0:	e7dd      	b.n	801f0ae <_dtoa_r+0x266>
 801f0f2:	2301      	movs	r3, #1
 801f0f4:	e7f2      	b.n	801f0dc <_dtoa_r+0x294>
 801f0f6:	2501      	movs	r5, #1
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	9305      	str	r3, [sp, #20]
 801f0fc:	9508      	str	r5, [sp, #32]
 801f0fe:	f04f 39ff 	mov.w	r9, #4294967295
 801f102:	2200      	movs	r2, #0
 801f104:	f8cd 9004 	str.w	r9, [sp, #4]
 801f108:	2312      	movs	r3, #18
 801f10a:	9209      	str	r2, [sp, #36]	; 0x24
 801f10c:	e7cf      	b.n	801f0ae <_dtoa_r+0x266>
 801f10e:	2301      	movs	r3, #1
 801f110:	9308      	str	r3, [sp, #32]
 801f112:	e7f4      	b.n	801f0fe <_dtoa_r+0x2b6>
 801f114:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f118:	f8cd 9004 	str.w	r9, [sp, #4]
 801f11c:	464b      	mov	r3, r9
 801f11e:	e7c6      	b.n	801f0ae <_dtoa_r+0x266>
 801f120:	3101      	adds	r1, #1
 801f122:	6041      	str	r1, [r0, #4]
 801f124:	0052      	lsls	r2, r2, #1
 801f126:	e7c6      	b.n	801f0b6 <_dtoa_r+0x26e>
 801f128:	636f4361 	.word	0x636f4361
 801f12c:	3fd287a7 	.word	0x3fd287a7
 801f130:	8b60c8b3 	.word	0x8b60c8b3
 801f134:	3fc68a28 	.word	0x3fc68a28
 801f138:	509f79fb 	.word	0x509f79fb
 801f13c:	3fd34413 	.word	0x3fd34413
 801f140:	08029a26 	.word	0x08029a26
 801f144:	08029a3d 	.word	0x08029a3d
 801f148:	7ff00000 	.word	0x7ff00000
 801f14c:	08029a22 	.word	0x08029a22
 801f150:	08029a19 	.word	0x08029a19
 801f154:	0802989d 	.word	0x0802989d
 801f158:	3ff80000 	.word	0x3ff80000
 801f15c:	08029c18 	.word	0x08029c18
 801f160:	08029a9c 	.word	0x08029a9c
 801f164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f166:	9a00      	ldr	r2, [sp, #0]
 801f168:	601a      	str	r2, [r3, #0]
 801f16a:	9b01      	ldr	r3, [sp, #4]
 801f16c:	2b0e      	cmp	r3, #14
 801f16e:	f200 80ad 	bhi.w	801f2cc <_dtoa_r+0x484>
 801f172:	2d00      	cmp	r5, #0
 801f174:	f000 80aa 	beq.w	801f2cc <_dtoa_r+0x484>
 801f178:	f1ba 0f00 	cmp.w	sl, #0
 801f17c:	dd36      	ble.n	801f1ec <_dtoa_r+0x3a4>
 801f17e:	4ac3      	ldr	r2, [pc, #780]	; (801f48c <_dtoa_r+0x644>)
 801f180:	f00a 030f 	and.w	r3, sl, #15
 801f184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f188:	ed93 7b00 	vldr	d7, [r3]
 801f18c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f190:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f194:	eeb0 8a47 	vmov.f32	s16, s14
 801f198:	eef0 8a67 	vmov.f32	s17, s15
 801f19c:	d016      	beq.n	801f1cc <_dtoa_r+0x384>
 801f19e:	4bbc      	ldr	r3, [pc, #752]	; (801f490 <_dtoa_r+0x648>)
 801f1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f1a8:	f7e1 fb60 	bl	800086c <__aeabi_ddiv>
 801f1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1b0:	f007 070f 	and.w	r7, r7, #15
 801f1b4:	2503      	movs	r5, #3
 801f1b6:	4eb6      	ldr	r6, [pc, #728]	; (801f490 <_dtoa_r+0x648>)
 801f1b8:	b957      	cbnz	r7, 801f1d0 <_dtoa_r+0x388>
 801f1ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f1be:	ec53 2b18 	vmov	r2, r3, d8
 801f1c2:	f7e1 fb53 	bl	800086c <__aeabi_ddiv>
 801f1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1ca:	e029      	b.n	801f220 <_dtoa_r+0x3d8>
 801f1cc:	2502      	movs	r5, #2
 801f1ce:	e7f2      	b.n	801f1b6 <_dtoa_r+0x36e>
 801f1d0:	07f9      	lsls	r1, r7, #31
 801f1d2:	d508      	bpl.n	801f1e6 <_dtoa_r+0x39e>
 801f1d4:	ec51 0b18 	vmov	r0, r1, d8
 801f1d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f1dc:	f7e1 fa1c 	bl	8000618 <__aeabi_dmul>
 801f1e0:	ec41 0b18 	vmov	d8, r0, r1
 801f1e4:	3501      	adds	r5, #1
 801f1e6:	107f      	asrs	r7, r7, #1
 801f1e8:	3608      	adds	r6, #8
 801f1ea:	e7e5      	b.n	801f1b8 <_dtoa_r+0x370>
 801f1ec:	f000 80a6 	beq.w	801f33c <_dtoa_r+0x4f4>
 801f1f0:	f1ca 0600 	rsb	r6, sl, #0
 801f1f4:	4ba5      	ldr	r3, [pc, #660]	; (801f48c <_dtoa_r+0x644>)
 801f1f6:	4fa6      	ldr	r7, [pc, #664]	; (801f490 <_dtoa_r+0x648>)
 801f1f8:	f006 020f 	and.w	r2, r6, #15
 801f1fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f204:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f208:	f7e1 fa06 	bl	8000618 <__aeabi_dmul>
 801f20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f210:	1136      	asrs	r6, r6, #4
 801f212:	2300      	movs	r3, #0
 801f214:	2502      	movs	r5, #2
 801f216:	2e00      	cmp	r6, #0
 801f218:	f040 8085 	bne.w	801f326 <_dtoa_r+0x4de>
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d1d2      	bne.n	801f1c6 <_dtoa_r+0x37e>
 801f220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f222:	2b00      	cmp	r3, #0
 801f224:	f000 808c 	beq.w	801f340 <_dtoa_r+0x4f8>
 801f228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f22c:	4b99      	ldr	r3, [pc, #612]	; (801f494 <_dtoa_r+0x64c>)
 801f22e:	2200      	movs	r2, #0
 801f230:	4630      	mov	r0, r6
 801f232:	4639      	mov	r1, r7
 801f234:	f7e1 fc62 	bl	8000afc <__aeabi_dcmplt>
 801f238:	2800      	cmp	r0, #0
 801f23a:	f000 8081 	beq.w	801f340 <_dtoa_r+0x4f8>
 801f23e:	9b01      	ldr	r3, [sp, #4]
 801f240:	2b00      	cmp	r3, #0
 801f242:	d07d      	beq.n	801f340 <_dtoa_r+0x4f8>
 801f244:	f1b9 0f00 	cmp.w	r9, #0
 801f248:	dd3c      	ble.n	801f2c4 <_dtoa_r+0x47c>
 801f24a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f24e:	9307      	str	r3, [sp, #28]
 801f250:	2200      	movs	r2, #0
 801f252:	4b91      	ldr	r3, [pc, #580]	; (801f498 <_dtoa_r+0x650>)
 801f254:	4630      	mov	r0, r6
 801f256:	4639      	mov	r1, r7
 801f258:	f7e1 f9de 	bl	8000618 <__aeabi_dmul>
 801f25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f260:	3501      	adds	r5, #1
 801f262:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f266:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f26a:	4628      	mov	r0, r5
 801f26c:	f7e1 f96a 	bl	8000544 <__aeabi_i2d>
 801f270:	4632      	mov	r2, r6
 801f272:	463b      	mov	r3, r7
 801f274:	f7e1 f9d0 	bl	8000618 <__aeabi_dmul>
 801f278:	4b88      	ldr	r3, [pc, #544]	; (801f49c <_dtoa_r+0x654>)
 801f27a:	2200      	movs	r2, #0
 801f27c:	f7e1 f816 	bl	80002ac <__adddf3>
 801f280:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f288:	9303      	str	r3, [sp, #12]
 801f28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d15c      	bne.n	801f34a <_dtoa_r+0x502>
 801f290:	4b83      	ldr	r3, [pc, #524]	; (801f4a0 <_dtoa_r+0x658>)
 801f292:	2200      	movs	r2, #0
 801f294:	4630      	mov	r0, r6
 801f296:	4639      	mov	r1, r7
 801f298:	f7e1 f806 	bl	80002a8 <__aeabi_dsub>
 801f29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f2a0:	4606      	mov	r6, r0
 801f2a2:	460f      	mov	r7, r1
 801f2a4:	f7e1 fc48 	bl	8000b38 <__aeabi_dcmpgt>
 801f2a8:	2800      	cmp	r0, #0
 801f2aa:	f040 8296 	bne.w	801f7da <_dtoa_r+0x992>
 801f2ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f2b2:	4630      	mov	r0, r6
 801f2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f2b8:	4639      	mov	r1, r7
 801f2ba:	f7e1 fc1f 	bl	8000afc <__aeabi_dcmplt>
 801f2be:	2800      	cmp	r0, #0
 801f2c0:	f040 8288 	bne.w	801f7d4 <_dtoa_r+0x98c>
 801f2c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f2c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f2cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	f2c0 8158 	blt.w	801f584 <_dtoa_r+0x73c>
 801f2d4:	f1ba 0f0e 	cmp.w	sl, #14
 801f2d8:	f300 8154 	bgt.w	801f584 <_dtoa_r+0x73c>
 801f2dc:	4b6b      	ldr	r3, [pc, #428]	; (801f48c <_dtoa_r+0x644>)
 801f2de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f2e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	f280 80e3 	bge.w	801f4b4 <_dtoa_r+0x66c>
 801f2ee:	9b01      	ldr	r3, [sp, #4]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	f300 80df 	bgt.w	801f4b4 <_dtoa_r+0x66c>
 801f2f6:	f040 826d 	bne.w	801f7d4 <_dtoa_r+0x98c>
 801f2fa:	4b69      	ldr	r3, [pc, #420]	; (801f4a0 <_dtoa_r+0x658>)
 801f2fc:	2200      	movs	r2, #0
 801f2fe:	4640      	mov	r0, r8
 801f300:	4649      	mov	r1, r9
 801f302:	f7e1 f989 	bl	8000618 <__aeabi_dmul>
 801f306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f30a:	f7e1 fc0b 	bl	8000b24 <__aeabi_dcmpge>
 801f30e:	9e01      	ldr	r6, [sp, #4]
 801f310:	4637      	mov	r7, r6
 801f312:	2800      	cmp	r0, #0
 801f314:	f040 8243 	bne.w	801f79e <_dtoa_r+0x956>
 801f318:	9d00      	ldr	r5, [sp, #0]
 801f31a:	2331      	movs	r3, #49	; 0x31
 801f31c:	f805 3b01 	strb.w	r3, [r5], #1
 801f320:	f10a 0a01 	add.w	sl, sl, #1
 801f324:	e23f      	b.n	801f7a6 <_dtoa_r+0x95e>
 801f326:	07f2      	lsls	r2, r6, #31
 801f328:	d505      	bpl.n	801f336 <_dtoa_r+0x4ee>
 801f32a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f32e:	f7e1 f973 	bl	8000618 <__aeabi_dmul>
 801f332:	3501      	adds	r5, #1
 801f334:	2301      	movs	r3, #1
 801f336:	1076      	asrs	r6, r6, #1
 801f338:	3708      	adds	r7, #8
 801f33a:	e76c      	b.n	801f216 <_dtoa_r+0x3ce>
 801f33c:	2502      	movs	r5, #2
 801f33e:	e76f      	b.n	801f220 <_dtoa_r+0x3d8>
 801f340:	9b01      	ldr	r3, [sp, #4]
 801f342:	f8cd a01c 	str.w	sl, [sp, #28]
 801f346:	930c      	str	r3, [sp, #48]	; 0x30
 801f348:	e78d      	b.n	801f266 <_dtoa_r+0x41e>
 801f34a:	9900      	ldr	r1, [sp, #0]
 801f34c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f34e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f350:	4b4e      	ldr	r3, [pc, #312]	; (801f48c <_dtoa_r+0x644>)
 801f352:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f356:	4401      	add	r1, r0
 801f358:	9102      	str	r1, [sp, #8]
 801f35a:	9908      	ldr	r1, [sp, #32]
 801f35c:	eeb0 8a47 	vmov.f32	s16, s14
 801f360:	eef0 8a67 	vmov.f32	s17, s15
 801f364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f36c:	2900      	cmp	r1, #0
 801f36e:	d045      	beq.n	801f3fc <_dtoa_r+0x5b4>
 801f370:	494c      	ldr	r1, [pc, #304]	; (801f4a4 <_dtoa_r+0x65c>)
 801f372:	2000      	movs	r0, #0
 801f374:	f7e1 fa7a 	bl	800086c <__aeabi_ddiv>
 801f378:	ec53 2b18 	vmov	r2, r3, d8
 801f37c:	f7e0 ff94 	bl	80002a8 <__aeabi_dsub>
 801f380:	9d00      	ldr	r5, [sp, #0]
 801f382:	ec41 0b18 	vmov	d8, r0, r1
 801f386:	4639      	mov	r1, r7
 801f388:	4630      	mov	r0, r6
 801f38a:	f7e1 fbf5 	bl	8000b78 <__aeabi_d2iz>
 801f38e:	900c      	str	r0, [sp, #48]	; 0x30
 801f390:	f7e1 f8d8 	bl	8000544 <__aeabi_i2d>
 801f394:	4602      	mov	r2, r0
 801f396:	460b      	mov	r3, r1
 801f398:	4630      	mov	r0, r6
 801f39a:	4639      	mov	r1, r7
 801f39c:	f7e0 ff84 	bl	80002a8 <__aeabi_dsub>
 801f3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3a2:	3330      	adds	r3, #48	; 0x30
 801f3a4:	f805 3b01 	strb.w	r3, [r5], #1
 801f3a8:	ec53 2b18 	vmov	r2, r3, d8
 801f3ac:	4606      	mov	r6, r0
 801f3ae:	460f      	mov	r7, r1
 801f3b0:	f7e1 fba4 	bl	8000afc <__aeabi_dcmplt>
 801f3b4:	2800      	cmp	r0, #0
 801f3b6:	d165      	bne.n	801f484 <_dtoa_r+0x63c>
 801f3b8:	4632      	mov	r2, r6
 801f3ba:	463b      	mov	r3, r7
 801f3bc:	4935      	ldr	r1, [pc, #212]	; (801f494 <_dtoa_r+0x64c>)
 801f3be:	2000      	movs	r0, #0
 801f3c0:	f7e0 ff72 	bl	80002a8 <__aeabi_dsub>
 801f3c4:	ec53 2b18 	vmov	r2, r3, d8
 801f3c8:	f7e1 fb98 	bl	8000afc <__aeabi_dcmplt>
 801f3cc:	2800      	cmp	r0, #0
 801f3ce:	f040 80b9 	bne.w	801f544 <_dtoa_r+0x6fc>
 801f3d2:	9b02      	ldr	r3, [sp, #8]
 801f3d4:	429d      	cmp	r5, r3
 801f3d6:	f43f af75 	beq.w	801f2c4 <_dtoa_r+0x47c>
 801f3da:	4b2f      	ldr	r3, [pc, #188]	; (801f498 <_dtoa_r+0x650>)
 801f3dc:	ec51 0b18 	vmov	r0, r1, d8
 801f3e0:	2200      	movs	r2, #0
 801f3e2:	f7e1 f919 	bl	8000618 <__aeabi_dmul>
 801f3e6:	4b2c      	ldr	r3, [pc, #176]	; (801f498 <_dtoa_r+0x650>)
 801f3e8:	ec41 0b18 	vmov	d8, r0, r1
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	4630      	mov	r0, r6
 801f3f0:	4639      	mov	r1, r7
 801f3f2:	f7e1 f911 	bl	8000618 <__aeabi_dmul>
 801f3f6:	4606      	mov	r6, r0
 801f3f8:	460f      	mov	r7, r1
 801f3fa:	e7c4      	b.n	801f386 <_dtoa_r+0x53e>
 801f3fc:	ec51 0b17 	vmov	r0, r1, d7
 801f400:	f7e1 f90a 	bl	8000618 <__aeabi_dmul>
 801f404:	9b02      	ldr	r3, [sp, #8]
 801f406:	9d00      	ldr	r5, [sp, #0]
 801f408:	930c      	str	r3, [sp, #48]	; 0x30
 801f40a:	ec41 0b18 	vmov	d8, r0, r1
 801f40e:	4639      	mov	r1, r7
 801f410:	4630      	mov	r0, r6
 801f412:	f7e1 fbb1 	bl	8000b78 <__aeabi_d2iz>
 801f416:	9011      	str	r0, [sp, #68]	; 0x44
 801f418:	f7e1 f894 	bl	8000544 <__aeabi_i2d>
 801f41c:	4602      	mov	r2, r0
 801f41e:	460b      	mov	r3, r1
 801f420:	4630      	mov	r0, r6
 801f422:	4639      	mov	r1, r7
 801f424:	f7e0 ff40 	bl	80002a8 <__aeabi_dsub>
 801f428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f42a:	3330      	adds	r3, #48	; 0x30
 801f42c:	f805 3b01 	strb.w	r3, [r5], #1
 801f430:	9b02      	ldr	r3, [sp, #8]
 801f432:	429d      	cmp	r5, r3
 801f434:	4606      	mov	r6, r0
 801f436:	460f      	mov	r7, r1
 801f438:	f04f 0200 	mov.w	r2, #0
 801f43c:	d134      	bne.n	801f4a8 <_dtoa_r+0x660>
 801f43e:	4b19      	ldr	r3, [pc, #100]	; (801f4a4 <_dtoa_r+0x65c>)
 801f440:	ec51 0b18 	vmov	r0, r1, d8
 801f444:	f7e0 ff32 	bl	80002ac <__adddf3>
 801f448:	4602      	mov	r2, r0
 801f44a:	460b      	mov	r3, r1
 801f44c:	4630      	mov	r0, r6
 801f44e:	4639      	mov	r1, r7
 801f450:	f7e1 fb72 	bl	8000b38 <__aeabi_dcmpgt>
 801f454:	2800      	cmp	r0, #0
 801f456:	d175      	bne.n	801f544 <_dtoa_r+0x6fc>
 801f458:	ec53 2b18 	vmov	r2, r3, d8
 801f45c:	4911      	ldr	r1, [pc, #68]	; (801f4a4 <_dtoa_r+0x65c>)
 801f45e:	2000      	movs	r0, #0
 801f460:	f7e0 ff22 	bl	80002a8 <__aeabi_dsub>
 801f464:	4602      	mov	r2, r0
 801f466:	460b      	mov	r3, r1
 801f468:	4630      	mov	r0, r6
 801f46a:	4639      	mov	r1, r7
 801f46c:	f7e1 fb46 	bl	8000afc <__aeabi_dcmplt>
 801f470:	2800      	cmp	r0, #0
 801f472:	f43f af27 	beq.w	801f2c4 <_dtoa_r+0x47c>
 801f476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f478:	1e6b      	subs	r3, r5, #1
 801f47a:	930c      	str	r3, [sp, #48]	; 0x30
 801f47c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f480:	2b30      	cmp	r3, #48	; 0x30
 801f482:	d0f8      	beq.n	801f476 <_dtoa_r+0x62e>
 801f484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f488:	e04a      	b.n	801f520 <_dtoa_r+0x6d8>
 801f48a:	bf00      	nop
 801f48c:	08029c18 	.word	0x08029c18
 801f490:	08029bf0 	.word	0x08029bf0
 801f494:	3ff00000 	.word	0x3ff00000
 801f498:	40240000 	.word	0x40240000
 801f49c:	401c0000 	.word	0x401c0000
 801f4a0:	40140000 	.word	0x40140000
 801f4a4:	3fe00000 	.word	0x3fe00000
 801f4a8:	4baf      	ldr	r3, [pc, #700]	; (801f768 <_dtoa_r+0x920>)
 801f4aa:	f7e1 f8b5 	bl	8000618 <__aeabi_dmul>
 801f4ae:	4606      	mov	r6, r0
 801f4b0:	460f      	mov	r7, r1
 801f4b2:	e7ac      	b.n	801f40e <_dtoa_r+0x5c6>
 801f4b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f4b8:	9d00      	ldr	r5, [sp, #0]
 801f4ba:	4642      	mov	r2, r8
 801f4bc:	464b      	mov	r3, r9
 801f4be:	4630      	mov	r0, r6
 801f4c0:	4639      	mov	r1, r7
 801f4c2:	f7e1 f9d3 	bl	800086c <__aeabi_ddiv>
 801f4c6:	f7e1 fb57 	bl	8000b78 <__aeabi_d2iz>
 801f4ca:	9002      	str	r0, [sp, #8]
 801f4cc:	f7e1 f83a 	bl	8000544 <__aeabi_i2d>
 801f4d0:	4642      	mov	r2, r8
 801f4d2:	464b      	mov	r3, r9
 801f4d4:	f7e1 f8a0 	bl	8000618 <__aeabi_dmul>
 801f4d8:	4602      	mov	r2, r0
 801f4da:	460b      	mov	r3, r1
 801f4dc:	4630      	mov	r0, r6
 801f4de:	4639      	mov	r1, r7
 801f4e0:	f7e0 fee2 	bl	80002a8 <__aeabi_dsub>
 801f4e4:	9e02      	ldr	r6, [sp, #8]
 801f4e6:	9f01      	ldr	r7, [sp, #4]
 801f4e8:	3630      	adds	r6, #48	; 0x30
 801f4ea:	f805 6b01 	strb.w	r6, [r5], #1
 801f4ee:	9e00      	ldr	r6, [sp, #0]
 801f4f0:	1bae      	subs	r6, r5, r6
 801f4f2:	42b7      	cmp	r7, r6
 801f4f4:	4602      	mov	r2, r0
 801f4f6:	460b      	mov	r3, r1
 801f4f8:	d137      	bne.n	801f56a <_dtoa_r+0x722>
 801f4fa:	f7e0 fed7 	bl	80002ac <__adddf3>
 801f4fe:	4642      	mov	r2, r8
 801f500:	464b      	mov	r3, r9
 801f502:	4606      	mov	r6, r0
 801f504:	460f      	mov	r7, r1
 801f506:	f7e1 fb17 	bl	8000b38 <__aeabi_dcmpgt>
 801f50a:	b9c8      	cbnz	r0, 801f540 <_dtoa_r+0x6f8>
 801f50c:	4642      	mov	r2, r8
 801f50e:	464b      	mov	r3, r9
 801f510:	4630      	mov	r0, r6
 801f512:	4639      	mov	r1, r7
 801f514:	f7e1 fae8 	bl	8000ae8 <__aeabi_dcmpeq>
 801f518:	b110      	cbz	r0, 801f520 <_dtoa_r+0x6d8>
 801f51a:	9b02      	ldr	r3, [sp, #8]
 801f51c:	07d9      	lsls	r1, r3, #31
 801f51e:	d40f      	bmi.n	801f540 <_dtoa_r+0x6f8>
 801f520:	4620      	mov	r0, r4
 801f522:	4659      	mov	r1, fp
 801f524:	f000 ff50 	bl	80203c8 <_Bfree>
 801f528:	2300      	movs	r3, #0
 801f52a:	702b      	strb	r3, [r5, #0]
 801f52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f52e:	f10a 0001 	add.w	r0, sl, #1
 801f532:	6018      	str	r0, [r3, #0]
 801f534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f536:	2b00      	cmp	r3, #0
 801f538:	f43f acd8 	beq.w	801eeec <_dtoa_r+0xa4>
 801f53c:	601d      	str	r5, [r3, #0]
 801f53e:	e4d5      	b.n	801eeec <_dtoa_r+0xa4>
 801f540:	f8cd a01c 	str.w	sl, [sp, #28]
 801f544:	462b      	mov	r3, r5
 801f546:	461d      	mov	r5, r3
 801f548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f54c:	2a39      	cmp	r2, #57	; 0x39
 801f54e:	d108      	bne.n	801f562 <_dtoa_r+0x71a>
 801f550:	9a00      	ldr	r2, [sp, #0]
 801f552:	429a      	cmp	r2, r3
 801f554:	d1f7      	bne.n	801f546 <_dtoa_r+0x6fe>
 801f556:	9a07      	ldr	r2, [sp, #28]
 801f558:	9900      	ldr	r1, [sp, #0]
 801f55a:	3201      	adds	r2, #1
 801f55c:	9207      	str	r2, [sp, #28]
 801f55e:	2230      	movs	r2, #48	; 0x30
 801f560:	700a      	strb	r2, [r1, #0]
 801f562:	781a      	ldrb	r2, [r3, #0]
 801f564:	3201      	adds	r2, #1
 801f566:	701a      	strb	r2, [r3, #0]
 801f568:	e78c      	b.n	801f484 <_dtoa_r+0x63c>
 801f56a:	4b7f      	ldr	r3, [pc, #508]	; (801f768 <_dtoa_r+0x920>)
 801f56c:	2200      	movs	r2, #0
 801f56e:	f7e1 f853 	bl	8000618 <__aeabi_dmul>
 801f572:	2200      	movs	r2, #0
 801f574:	2300      	movs	r3, #0
 801f576:	4606      	mov	r6, r0
 801f578:	460f      	mov	r7, r1
 801f57a:	f7e1 fab5 	bl	8000ae8 <__aeabi_dcmpeq>
 801f57e:	2800      	cmp	r0, #0
 801f580:	d09b      	beq.n	801f4ba <_dtoa_r+0x672>
 801f582:	e7cd      	b.n	801f520 <_dtoa_r+0x6d8>
 801f584:	9a08      	ldr	r2, [sp, #32]
 801f586:	2a00      	cmp	r2, #0
 801f588:	f000 80c4 	beq.w	801f714 <_dtoa_r+0x8cc>
 801f58c:	9a05      	ldr	r2, [sp, #20]
 801f58e:	2a01      	cmp	r2, #1
 801f590:	f300 80a8 	bgt.w	801f6e4 <_dtoa_r+0x89c>
 801f594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f596:	2a00      	cmp	r2, #0
 801f598:	f000 80a0 	beq.w	801f6dc <_dtoa_r+0x894>
 801f59c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f5a0:	9e06      	ldr	r6, [sp, #24]
 801f5a2:	4645      	mov	r5, r8
 801f5a4:	9a04      	ldr	r2, [sp, #16]
 801f5a6:	2101      	movs	r1, #1
 801f5a8:	441a      	add	r2, r3
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	4498      	add	r8, r3
 801f5ae:	9204      	str	r2, [sp, #16]
 801f5b0:	f001 f810 	bl	80205d4 <__i2b>
 801f5b4:	4607      	mov	r7, r0
 801f5b6:	2d00      	cmp	r5, #0
 801f5b8:	dd0b      	ble.n	801f5d2 <_dtoa_r+0x78a>
 801f5ba:	9b04      	ldr	r3, [sp, #16]
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	dd08      	ble.n	801f5d2 <_dtoa_r+0x78a>
 801f5c0:	42ab      	cmp	r3, r5
 801f5c2:	9a04      	ldr	r2, [sp, #16]
 801f5c4:	bfa8      	it	ge
 801f5c6:	462b      	movge	r3, r5
 801f5c8:	eba8 0803 	sub.w	r8, r8, r3
 801f5cc:	1aed      	subs	r5, r5, r3
 801f5ce:	1ad3      	subs	r3, r2, r3
 801f5d0:	9304      	str	r3, [sp, #16]
 801f5d2:	9b06      	ldr	r3, [sp, #24]
 801f5d4:	b1fb      	cbz	r3, 801f616 <_dtoa_r+0x7ce>
 801f5d6:	9b08      	ldr	r3, [sp, #32]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	f000 809f 	beq.w	801f71c <_dtoa_r+0x8d4>
 801f5de:	2e00      	cmp	r6, #0
 801f5e0:	dd11      	ble.n	801f606 <_dtoa_r+0x7be>
 801f5e2:	4639      	mov	r1, r7
 801f5e4:	4632      	mov	r2, r6
 801f5e6:	4620      	mov	r0, r4
 801f5e8:	f001 f8b0 	bl	802074c <__pow5mult>
 801f5ec:	465a      	mov	r2, fp
 801f5ee:	4601      	mov	r1, r0
 801f5f0:	4607      	mov	r7, r0
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	f001 f804 	bl	8020600 <__multiply>
 801f5f8:	4659      	mov	r1, fp
 801f5fa:	9007      	str	r0, [sp, #28]
 801f5fc:	4620      	mov	r0, r4
 801f5fe:	f000 fee3 	bl	80203c8 <_Bfree>
 801f602:	9b07      	ldr	r3, [sp, #28]
 801f604:	469b      	mov	fp, r3
 801f606:	9b06      	ldr	r3, [sp, #24]
 801f608:	1b9a      	subs	r2, r3, r6
 801f60a:	d004      	beq.n	801f616 <_dtoa_r+0x7ce>
 801f60c:	4659      	mov	r1, fp
 801f60e:	4620      	mov	r0, r4
 801f610:	f001 f89c 	bl	802074c <__pow5mult>
 801f614:	4683      	mov	fp, r0
 801f616:	2101      	movs	r1, #1
 801f618:	4620      	mov	r0, r4
 801f61a:	f000 ffdb 	bl	80205d4 <__i2b>
 801f61e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f620:	2b00      	cmp	r3, #0
 801f622:	4606      	mov	r6, r0
 801f624:	dd7c      	ble.n	801f720 <_dtoa_r+0x8d8>
 801f626:	461a      	mov	r2, r3
 801f628:	4601      	mov	r1, r0
 801f62a:	4620      	mov	r0, r4
 801f62c:	f001 f88e 	bl	802074c <__pow5mult>
 801f630:	9b05      	ldr	r3, [sp, #20]
 801f632:	2b01      	cmp	r3, #1
 801f634:	4606      	mov	r6, r0
 801f636:	dd76      	ble.n	801f726 <_dtoa_r+0x8de>
 801f638:	2300      	movs	r3, #0
 801f63a:	9306      	str	r3, [sp, #24]
 801f63c:	6933      	ldr	r3, [r6, #16]
 801f63e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f642:	6918      	ldr	r0, [r3, #16]
 801f644:	f000 ff76 	bl	8020534 <__hi0bits>
 801f648:	f1c0 0020 	rsb	r0, r0, #32
 801f64c:	9b04      	ldr	r3, [sp, #16]
 801f64e:	4418      	add	r0, r3
 801f650:	f010 001f 	ands.w	r0, r0, #31
 801f654:	f000 8086 	beq.w	801f764 <_dtoa_r+0x91c>
 801f658:	f1c0 0320 	rsb	r3, r0, #32
 801f65c:	2b04      	cmp	r3, #4
 801f65e:	dd7f      	ble.n	801f760 <_dtoa_r+0x918>
 801f660:	f1c0 001c 	rsb	r0, r0, #28
 801f664:	9b04      	ldr	r3, [sp, #16]
 801f666:	4403      	add	r3, r0
 801f668:	4480      	add	r8, r0
 801f66a:	4405      	add	r5, r0
 801f66c:	9304      	str	r3, [sp, #16]
 801f66e:	f1b8 0f00 	cmp.w	r8, #0
 801f672:	dd05      	ble.n	801f680 <_dtoa_r+0x838>
 801f674:	4659      	mov	r1, fp
 801f676:	4642      	mov	r2, r8
 801f678:	4620      	mov	r0, r4
 801f67a:	f001 f8c1 	bl	8020800 <__lshift>
 801f67e:	4683      	mov	fp, r0
 801f680:	9b04      	ldr	r3, [sp, #16]
 801f682:	2b00      	cmp	r3, #0
 801f684:	dd05      	ble.n	801f692 <_dtoa_r+0x84a>
 801f686:	4631      	mov	r1, r6
 801f688:	461a      	mov	r2, r3
 801f68a:	4620      	mov	r0, r4
 801f68c:	f001 f8b8 	bl	8020800 <__lshift>
 801f690:	4606      	mov	r6, r0
 801f692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f694:	2b00      	cmp	r3, #0
 801f696:	d069      	beq.n	801f76c <_dtoa_r+0x924>
 801f698:	4631      	mov	r1, r6
 801f69a:	4658      	mov	r0, fp
 801f69c:	f001 f91c 	bl	80208d8 <__mcmp>
 801f6a0:	2800      	cmp	r0, #0
 801f6a2:	da63      	bge.n	801f76c <_dtoa_r+0x924>
 801f6a4:	2300      	movs	r3, #0
 801f6a6:	4659      	mov	r1, fp
 801f6a8:	220a      	movs	r2, #10
 801f6aa:	4620      	mov	r0, r4
 801f6ac:	f000 feae 	bl	802040c <__multadd>
 801f6b0:	9b08      	ldr	r3, [sp, #32]
 801f6b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f6b6:	4683      	mov	fp, r0
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	f000 818f 	beq.w	801f9dc <_dtoa_r+0xb94>
 801f6be:	4639      	mov	r1, r7
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	220a      	movs	r2, #10
 801f6c4:	4620      	mov	r0, r4
 801f6c6:	f000 fea1 	bl	802040c <__multadd>
 801f6ca:	f1b9 0f00 	cmp.w	r9, #0
 801f6ce:	4607      	mov	r7, r0
 801f6d0:	f300 808e 	bgt.w	801f7f0 <_dtoa_r+0x9a8>
 801f6d4:	9b05      	ldr	r3, [sp, #20]
 801f6d6:	2b02      	cmp	r3, #2
 801f6d8:	dc50      	bgt.n	801f77c <_dtoa_r+0x934>
 801f6da:	e089      	b.n	801f7f0 <_dtoa_r+0x9a8>
 801f6dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f6e2:	e75d      	b.n	801f5a0 <_dtoa_r+0x758>
 801f6e4:	9b01      	ldr	r3, [sp, #4]
 801f6e6:	1e5e      	subs	r6, r3, #1
 801f6e8:	9b06      	ldr	r3, [sp, #24]
 801f6ea:	42b3      	cmp	r3, r6
 801f6ec:	bfbf      	itttt	lt
 801f6ee:	9b06      	ldrlt	r3, [sp, #24]
 801f6f0:	9606      	strlt	r6, [sp, #24]
 801f6f2:	1af2      	sublt	r2, r6, r3
 801f6f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f6f6:	bfb6      	itet	lt
 801f6f8:	189b      	addlt	r3, r3, r2
 801f6fa:	1b9e      	subge	r6, r3, r6
 801f6fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f6fe:	9b01      	ldr	r3, [sp, #4]
 801f700:	bfb8      	it	lt
 801f702:	2600      	movlt	r6, #0
 801f704:	2b00      	cmp	r3, #0
 801f706:	bfb5      	itete	lt
 801f708:	eba8 0503 	sublt.w	r5, r8, r3
 801f70c:	9b01      	ldrge	r3, [sp, #4]
 801f70e:	2300      	movlt	r3, #0
 801f710:	4645      	movge	r5, r8
 801f712:	e747      	b.n	801f5a4 <_dtoa_r+0x75c>
 801f714:	9e06      	ldr	r6, [sp, #24]
 801f716:	9f08      	ldr	r7, [sp, #32]
 801f718:	4645      	mov	r5, r8
 801f71a:	e74c      	b.n	801f5b6 <_dtoa_r+0x76e>
 801f71c:	9a06      	ldr	r2, [sp, #24]
 801f71e:	e775      	b.n	801f60c <_dtoa_r+0x7c4>
 801f720:	9b05      	ldr	r3, [sp, #20]
 801f722:	2b01      	cmp	r3, #1
 801f724:	dc18      	bgt.n	801f758 <_dtoa_r+0x910>
 801f726:	9b02      	ldr	r3, [sp, #8]
 801f728:	b9b3      	cbnz	r3, 801f758 <_dtoa_r+0x910>
 801f72a:	9b03      	ldr	r3, [sp, #12]
 801f72c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f730:	b9a3      	cbnz	r3, 801f75c <_dtoa_r+0x914>
 801f732:	9b03      	ldr	r3, [sp, #12]
 801f734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f738:	0d1b      	lsrs	r3, r3, #20
 801f73a:	051b      	lsls	r3, r3, #20
 801f73c:	b12b      	cbz	r3, 801f74a <_dtoa_r+0x902>
 801f73e:	9b04      	ldr	r3, [sp, #16]
 801f740:	3301      	adds	r3, #1
 801f742:	9304      	str	r3, [sp, #16]
 801f744:	f108 0801 	add.w	r8, r8, #1
 801f748:	2301      	movs	r3, #1
 801f74a:	9306      	str	r3, [sp, #24]
 801f74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f74e:	2b00      	cmp	r3, #0
 801f750:	f47f af74 	bne.w	801f63c <_dtoa_r+0x7f4>
 801f754:	2001      	movs	r0, #1
 801f756:	e779      	b.n	801f64c <_dtoa_r+0x804>
 801f758:	2300      	movs	r3, #0
 801f75a:	e7f6      	b.n	801f74a <_dtoa_r+0x902>
 801f75c:	9b02      	ldr	r3, [sp, #8]
 801f75e:	e7f4      	b.n	801f74a <_dtoa_r+0x902>
 801f760:	d085      	beq.n	801f66e <_dtoa_r+0x826>
 801f762:	4618      	mov	r0, r3
 801f764:	301c      	adds	r0, #28
 801f766:	e77d      	b.n	801f664 <_dtoa_r+0x81c>
 801f768:	40240000 	.word	0x40240000
 801f76c:	9b01      	ldr	r3, [sp, #4]
 801f76e:	2b00      	cmp	r3, #0
 801f770:	dc38      	bgt.n	801f7e4 <_dtoa_r+0x99c>
 801f772:	9b05      	ldr	r3, [sp, #20]
 801f774:	2b02      	cmp	r3, #2
 801f776:	dd35      	ble.n	801f7e4 <_dtoa_r+0x99c>
 801f778:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f77c:	f1b9 0f00 	cmp.w	r9, #0
 801f780:	d10d      	bne.n	801f79e <_dtoa_r+0x956>
 801f782:	4631      	mov	r1, r6
 801f784:	464b      	mov	r3, r9
 801f786:	2205      	movs	r2, #5
 801f788:	4620      	mov	r0, r4
 801f78a:	f000 fe3f 	bl	802040c <__multadd>
 801f78e:	4601      	mov	r1, r0
 801f790:	4606      	mov	r6, r0
 801f792:	4658      	mov	r0, fp
 801f794:	f001 f8a0 	bl	80208d8 <__mcmp>
 801f798:	2800      	cmp	r0, #0
 801f79a:	f73f adbd 	bgt.w	801f318 <_dtoa_r+0x4d0>
 801f79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7a0:	9d00      	ldr	r5, [sp, #0]
 801f7a2:	ea6f 0a03 	mvn.w	sl, r3
 801f7a6:	f04f 0800 	mov.w	r8, #0
 801f7aa:	4631      	mov	r1, r6
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	f000 fe0b 	bl	80203c8 <_Bfree>
 801f7b2:	2f00      	cmp	r7, #0
 801f7b4:	f43f aeb4 	beq.w	801f520 <_dtoa_r+0x6d8>
 801f7b8:	f1b8 0f00 	cmp.w	r8, #0
 801f7bc:	d005      	beq.n	801f7ca <_dtoa_r+0x982>
 801f7be:	45b8      	cmp	r8, r7
 801f7c0:	d003      	beq.n	801f7ca <_dtoa_r+0x982>
 801f7c2:	4641      	mov	r1, r8
 801f7c4:	4620      	mov	r0, r4
 801f7c6:	f000 fdff 	bl	80203c8 <_Bfree>
 801f7ca:	4639      	mov	r1, r7
 801f7cc:	4620      	mov	r0, r4
 801f7ce:	f000 fdfb 	bl	80203c8 <_Bfree>
 801f7d2:	e6a5      	b.n	801f520 <_dtoa_r+0x6d8>
 801f7d4:	2600      	movs	r6, #0
 801f7d6:	4637      	mov	r7, r6
 801f7d8:	e7e1      	b.n	801f79e <_dtoa_r+0x956>
 801f7da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f7dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f7e0:	4637      	mov	r7, r6
 801f7e2:	e599      	b.n	801f318 <_dtoa_r+0x4d0>
 801f7e4:	9b08      	ldr	r3, [sp, #32]
 801f7e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	f000 80fd 	beq.w	801f9ea <_dtoa_r+0xba2>
 801f7f0:	2d00      	cmp	r5, #0
 801f7f2:	dd05      	ble.n	801f800 <_dtoa_r+0x9b8>
 801f7f4:	4639      	mov	r1, r7
 801f7f6:	462a      	mov	r2, r5
 801f7f8:	4620      	mov	r0, r4
 801f7fa:	f001 f801 	bl	8020800 <__lshift>
 801f7fe:	4607      	mov	r7, r0
 801f800:	9b06      	ldr	r3, [sp, #24]
 801f802:	2b00      	cmp	r3, #0
 801f804:	d05c      	beq.n	801f8c0 <_dtoa_r+0xa78>
 801f806:	6879      	ldr	r1, [r7, #4]
 801f808:	4620      	mov	r0, r4
 801f80a:	f000 fd9d 	bl	8020348 <_Balloc>
 801f80e:	4605      	mov	r5, r0
 801f810:	b928      	cbnz	r0, 801f81e <_dtoa_r+0x9d6>
 801f812:	4b80      	ldr	r3, [pc, #512]	; (801fa14 <_dtoa_r+0xbcc>)
 801f814:	4602      	mov	r2, r0
 801f816:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f81a:	f7ff bb2e 	b.w	801ee7a <_dtoa_r+0x32>
 801f81e:	693a      	ldr	r2, [r7, #16]
 801f820:	3202      	adds	r2, #2
 801f822:	0092      	lsls	r2, r2, #2
 801f824:	f107 010c 	add.w	r1, r7, #12
 801f828:	300c      	adds	r0, #12
 801f82a:	f000 fd7f 	bl	802032c <memcpy>
 801f82e:	2201      	movs	r2, #1
 801f830:	4629      	mov	r1, r5
 801f832:	4620      	mov	r0, r4
 801f834:	f000 ffe4 	bl	8020800 <__lshift>
 801f838:	9b00      	ldr	r3, [sp, #0]
 801f83a:	3301      	adds	r3, #1
 801f83c:	9301      	str	r3, [sp, #4]
 801f83e:	9b00      	ldr	r3, [sp, #0]
 801f840:	444b      	add	r3, r9
 801f842:	9307      	str	r3, [sp, #28]
 801f844:	9b02      	ldr	r3, [sp, #8]
 801f846:	f003 0301 	and.w	r3, r3, #1
 801f84a:	46b8      	mov	r8, r7
 801f84c:	9306      	str	r3, [sp, #24]
 801f84e:	4607      	mov	r7, r0
 801f850:	9b01      	ldr	r3, [sp, #4]
 801f852:	4631      	mov	r1, r6
 801f854:	3b01      	subs	r3, #1
 801f856:	4658      	mov	r0, fp
 801f858:	9302      	str	r3, [sp, #8]
 801f85a:	f7ff fa67 	bl	801ed2c <quorem>
 801f85e:	4603      	mov	r3, r0
 801f860:	3330      	adds	r3, #48	; 0x30
 801f862:	9004      	str	r0, [sp, #16]
 801f864:	4641      	mov	r1, r8
 801f866:	4658      	mov	r0, fp
 801f868:	9308      	str	r3, [sp, #32]
 801f86a:	f001 f835 	bl	80208d8 <__mcmp>
 801f86e:	463a      	mov	r2, r7
 801f870:	4681      	mov	r9, r0
 801f872:	4631      	mov	r1, r6
 801f874:	4620      	mov	r0, r4
 801f876:	f001 f84b 	bl	8020910 <__mdiff>
 801f87a:	68c2      	ldr	r2, [r0, #12]
 801f87c:	9b08      	ldr	r3, [sp, #32]
 801f87e:	4605      	mov	r5, r0
 801f880:	bb02      	cbnz	r2, 801f8c4 <_dtoa_r+0xa7c>
 801f882:	4601      	mov	r1, r0
 801f884:	4658      	mov	r0, fp
 801f886:	f001 f827 	bl	80208d8 <__mcmp>
 801f88a:	9b08      	ldr	r3, [sp, #32]
 801f88c:	4602      	mov	r2, r0
 801f88e:	4629      	mov	r1, r5
 801f890:	4620      	mov	r0, r4
 801f892:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f896:	f000 fd97 	bl	80203c8 <_Bfree>
 801f89a:	9b05      	ldr	r3, [sp, #20]
 801f89c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f89e:	9d01      	ldr	r5, [sp, #4]
 801f8a0:	ea43 0102 	orr.w	r1, r3, r2
 801f8a4:	9b06      	ldr	r3, [sp, #24]
 801f8a6:	430b      	orrs	r3, r1
 801f8a8:	9b08      	ldr	r3, [sp, #32]
 801f8aa:	d10d      	bne.n	801f8c8 <_dtoa_r+0xa80>
 801f8ac:	2b39      	cmp	r3, #57	; 0x39
 801f8ae:	d029      	beq.n	801f904 <_dtoa_r+0xabc>
 801f8b0:	f1b9 0f00 	cmp.w	r9, #0
 801f8b4:	dd01      	ble.n	801f8ba <_dtoa_r+0xa72>
 801f8b6:	9b04      	ldr	r3, [sp, #16]
 801f8b8:	3331      	adds	r3, #49	; 0x31
 801f8ba:	9a02      	ldr	r2, [sp, #8]
 801f8bc:	7013      	strb	r3, [r2, #0]
 801f8be:	e774      	b.n	801f7aa <_dtoa_r+0x962>
 801f8c0:	4638      	mov	r0, r7
 801f8c2:	e7b9      	b.n	801f838 <_dtoa_r+0x9f0>
 801f8c4:	2201      	movs	r2, #1
 801f8c6:	e7e2      	b.n	801f88e <_dtoa_r+0xa46>
 801f8c8:	f1b9 0f00 	cmp.w	r9, #0
 801f8cc:	db06      	blt.n	801f8dc <_dtoa_r+0xa94>
 801f8ce:	9905      	ldr	r1, [sp, #20]
 801f8d0:	ea41 0909 	orr.w	r9, r1, r9
 801f8d4:	9906      	ldr	r1, [sp, #24]
 801f8d6:	ea59 0101 	orrs.w	r1, r9, r1
 801f8da:	d120      	bne.n	801f91e <_dtoa_r+0xad6>
 801f8dc:	2a00      	cmp	r2, #0
 801f8de:	ddec      	ble.n	801f8ba <_dtoa_r+0xa72>
 801f8e0:	4659      	mov	r1, fp
 801f8e2:	2201      	movs	r2, #1
 801f8e4:	4620      	mov	r0, r4
 801f8e6:	9301      	str	r3, [sp, #4]
 801f8e8:	f000 ff8a 	bl	8020800 <__lshift>
 801f8ec:	4631      	mov	r1, r6
 801f8ee:	4683      	mov	fp, r0
 801f8f0:	f000 fff2 	bl	80208d8 <__mcmp>
 801f8f4:	2800      	cmp	r0, #0
 801f8f6:	9b01      	ldr	r3, [sp, #4]
 801f8f8:	dc02      	bgt.n	801f900 <_dtoa_r+0xab8>
 801f8fa:	d1de      	bne.n	801f8ba <_dtoa_r+0xa72>
 801f8fc:	07da      	lsls	r2, r3, #31
 801f8fe:	d5dc      	bpl.n	801f8ba <_dtoa_r+0xa72>
 801f900:	2b39      	cmp	r3, #57	; 0x39
 801f902:	d1d8      	bne.n	801f8b6 <_dtoa_r+0xa6e>
 801f904:	9a02      	ldr	r2, [sp, #8]
 801f906:	2339      	movs	r3, #57	; 0x39
 801f908:	7013      	strb	r3, [r2, #0]
 801f90a:	462b      	mov	r3, r5
 801f90c:	461d      	mov	r5, r3
 801f90e:	3b01      	subs	r3, #1
 801f910:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f914:	2a39      	cmp	r2, #57	; 0x39
 801f916:	d050      	beq.n	801f9ba <_dtoa_r+0xb72>
 801f918:	3201      	adds	r2, #1
 801f91a:	701a      	strb	r2, [r3, #0]
 801f91c:	e745      	b.n	801f7aa <_dtoa_r+0x962>
 801f91e:	2a00      	cmp	r2, #0
 801f920:	dd03      	ble.n	801f92a <_dtoa_r+0xae2>
 801f922:	2b39      	cmp	r3, #57	; 0x39
 801f924:	d0ee      	beq.n	801f904 <_dtoa_r+0xabc>
 801f926:	3301      	adds	r3, #1
 801f928:	e7c7      	b.n	801f8ba <_dtoa_r+0xa72>
 801f92a:	9a01      	ldr	r2, [sp, #4]
 801f92c:	9907      	ldr	r1, [sp, #28]
 801f92e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f932:	428a      	cmp	r2, r1
 801f934:	d02a      	beq.n	801f98c <_dtoa_r+0xb44>
 801f936:	4659      	mov	r1, fp
 801f938:	2300      	movs	r3, #0
 801f93a:	220a      	movs	r2, #10
 801f93c:	4620      	mov	r0, r4
 801f93e:	f000 fd65 	bl	802040c <__multadd>
 801f942:	45b8      	cmp	r8, r7
 801f944:	4683      	mov	fp, r0
 801f946:	f04f 0300 	mov.w	r3, #0
 801f94a:	f04f 020a 	mov.w	r2, #10
 801f94e:	4641      	mov	r1, r8
 801f950:	4620      	mov	r0, r4
 801f952:	d107      	bne.n	801f964 <_dtoa_r+0xb1c>
 801f954:	f000 fd5a 	bl	802040c <__multadd>
 801f958:	4680      	mov	r8, r0
 801f95a:	4607      	mov	r7, r0
 801f95c:	9b01      	ldr	r3, [sp, #4]
 801f95e:	3301      	adds	r3, #1
 801f960:	9301      	str	r3, [sp, #4]
 801f962:	e775      	b.n	801f850 <_dtoa_r+0xa08>
 801f964:	f000 fd52 	bl	802040c <__multadd>
 801f968:	4639      	mov	r1, r7
 801f96a:	4680      	mov	r8, r0
 801f96c:	2300      	movs	r3, #0
 801f96e:	220a      	movs	r2, #10
 801f970:	4620      	mov	r0, r4
 801f972:	f000 fd4b 	bl	802040c <__multadd>
 801f976:	4607      	mov	r7, r0
 801f978:	e7f0      	b.n	801f95c <_dtoa_r+0xb14>
 801f97a:	f1b9 0f00 	cmp.w	r9, #0
 801f97e:	9a00      	ldr	r2, [sp, #0]
 801f980:	bfcc      	ite	gt
 801f982:	464d      	movgt	r5, r9
 801f984:	2501      	movle	r5, #1
 801f986:	4415      	add	r5, r2
 801f988:	f04f 0800 	mov.w	r8, #0
 801f98c:	4659      	mov	r1, fp
 801f98e:	2201      	movs	r2, #1
 801f990:	4620      	mov	r0, r4
 801f992:	9301      	str	r3, [sp, #4]
 801f994:	f000 ff34 	bl	8020800 <__lshift>
 801f998:	4631      	mov	r1, r6
 801f99a:	4683      	mov	fp, r0
 801f99c:	f000 ff9c 	bl	80208d8 <__mcmp>
 801f9a0:	2800      	cmp	r0, #0
 801f9a2:	dcb2      	bgt.n	801f90a <_dtoa_r+0xac2>
 801f9a4:	d102      	bne.n	801f9ac <_dtoa_r+0xb64>
 801f9a6:	9b01      	ldr	r3, [sp, #4]
 801f9a8:	07db      	lsls	r3, r3, #31
 801f9aa:	d4ae      	bmi.n	801f90a <_dtoa_r+0xac2>
 801f9ac:	462b      	mov	r3, r5
 801f9ae:	461d      	mov	r5, r3
 801f9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f9b4:	2a30      	cmp	r2, #48	; 0x30
 801f9b6:	d0fa      	beq.n	801f9ae <_dtoa_r+0xb66>
 801f9b8:	e6f7      	b.n	801f7aa <_dtoa_r+0x962>
 801f9ba:	9a00      	ldr	r2, [sp, #0]
 801f9bc:	429a      	cmp	r2, r3
 801f9be:	d1a5      	bne.n	801f90c <_dtoa_r+0xac4>
 801f9c0:	f10a 0a01 	add.w	sl, sl, #1
 801f9c4:	2331      	movs	r3, #49	; 0x31
 801f9c6:	e779      	b.n	801f8bc <_dtoa_r+0xa74>
 801f9c8:	4b13      	ldr	r3, [pc, #76]	; (801fa18 <_dtoa_r+0xbd0>)
 801f9ca:	f7ff baaf 	b.w	801ef2c <_dtoa_r+0xe4>
 801f9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	f47f aa86 	bne.w	801eee2 <_dtoa_r+0x9a>
 801f9d6:	4b11      	ldr	r3, [pc, #68]	; (801fa1c <_dtoa_r+0xbd4>)
 801f9d8:	f7ff baa8 	b.w	801ef2c <_dtoa_r+0xe4>
 801f9dc:	f1b9 0f00 	cmp.w	r9, #0
 801f9e0:	dc03      	bgt.n	801f9ea <_dtoa_r+0xba2>
 801f9e2:	9b05      	ldr	r3, [sp, #20]
 801f9e4:	2b02      	cmp	r3, #2
 801f9e6:	f73f aec9 	bgt.w	801f77c <_dtoa_r+0x934>
 801f9ea:	9d00      	ldr	r5, [sp, #0]
 801f9ec:	4631      	mov	r1, r6
 801f9ee:	4658      	mov	r0, fp
 801f9f0:	f7ff f99c 	bl	801ed2c <quorem>
 801f9f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f9f8:	f805 3b01 	strb.w	r3, [r5], #1
 801f9fc:	9a00      	ldr	r2, [sp, #0]
 801f9fe:	1aaa      	subs	r2, r5, r2
 801fa00:	4591      	cmp	r9, r2
 801fa02:	ddba      	ble.n	801f97a <_dtoa_r+0xb32>
 801fa04:	4659      	mov	r1, fp
 801fa06:	2300      	movs	r3, #0
 801fa08:	220a      	movs	r2, #10
 801fa0a:	4620      	mov	r0, r4
 801fa0c:	f000 fcfe 	bl	802040c <__multadd>
 801fa10:	4683      	mov	fp, r0
 801fa12:	e7eb      	b.n	801f9ec <_dtoa_r+0xba4>
 801fa14:	08029a9c 	.word	0x08029a9c
 801fa18:	0802989c 	.word	0x0802989c
 801fa1c:	08029a19 	.word	0x08029a19

0801fa20 <std>:
 801fa20:	2300      	movs	r3, #0
 801fa22:	b510      	push	{r4, lr}
 801fa24:	4604      	mov	r4, r0
 801fa26:	e9c0 3300 	strd	r3, r3, [r0]
 801fa2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fa2e:	6083      	str	r3, [r0, #8]
 801fa30:	8181      	strh	r1, [r0, #12]
 801fa32:	6643      	str	r3, [r0, #100]	; 0x64
 801fa34:	81c2      	strh	r2, [r0, #14]
 801fa36:	6183      	str	r3, [r0, #24]
 801fa38:	4619      	mov	r1, r3
 801fa3a:	2208      	movs	r2, #8
 801fa3c:	305c      	adds	r0, #92	; 0x5c
 801fa3e:	f7fd fc07 	bl	801d250 <memset>
 801fa42:	4b05      	ldr	r3, [pc, #20]	; (801fa58 <std+0x38>)
 801fa44:	6263      	str	r3, [r4, #36]	; 0x24
 801fa46:	4b05      	ldr	r3, [pc, #20]	; (801fa5c <std+0x3c>)
 801fa48:	62a3      	str	r3, [r4, #40]	; 0x28
 801fa4a:	4b05      	ldr	r3, [pc, #20]	; (801fa60 <std+0x40>)
 801fa4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fa4e:	4b05      	ldr	r3, [pc, #20]	; (801fa64 <std+0x44>)
 801fa50:	6224      	str	r4, [r4, #32]
 801fa52:	6323      	str	r3, [r4, #48]	; 0x30
 801fa54:	bd10      	pop	{r4, pc}
 801fa56:	bf00      	nop
 801fa58:	08021119 	.word	0x08021119
 801fa5c:	0802113b 	.word	0x0802113b
 801fa60:	08021173 	.word	0x08021173
 801fa64:	08021197 	.word	0x08021197

0801fa68 <_cleanup_r>:
 801fa68:	4901      	ldr	r1, [pc, #4]	; (801fa70 <_cleanup_r+0x8>)
 801fa6a:	f000 b8af 	b.w	801fbcc <_fwalk_reent>
 801fa6e:	bf00      	nop
 801fa70:	080214ed 	.word	0x080214ed

0801fa74 <__sfmoreglue>:
 801fa74:	b570      	push	{r4, r5, r6, lr}
 801fa76:	1e4a      	subs	r2, r1, #1
 801fa78:	2568      	movs	r5, #104	; 0x68
 801fa7a:	4355      	muls	r5, r2
 801fa7c:	460e      	mov	r6, r1
 801fa7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fa82:	f001 f97b 	bl	8020d7c <_malloc_r>
 801fa86:	4604      	mov	r4, r0
 801fa88:	b140      	cbz	r0, 801fa9c <__sfmoreglue+0x28>
 801fa8a:	2100      	movs	r1, #0
 801fa8c:	e9c0 1600 	strd	r1, r6, [r0]
 801fa90:	300c      	adds	r0, #12
 801fa92:	60a0      	str	r0, [r4, #8]
 801fa94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fa98:	f7fd fbda 	bl	801d250 <memset>
 801fa9c:	4620      	mov	r0, r4
 801fa9e:	bd70      	pop	{r4, r5, r6, pc}

0801faa0 <__sfp_lock_acquire>:
 801faa0:	4801      	ldr	r0, [pc, #4]	; (801faa8 <__sfp_lock_acquire+0x8>)
 801faa2:	f000 bc26 	b.w	80202f2 <__retarget_lock_acquire_recursive>
 801faa6:	bf00      	nop
 801faa8:	20009fbc 	.word	0x20009fbc

0801faac <__sfp_lock_release>:
 801faac:	4801      	ldr	r0, [pc, #4]	; (801fab4 <__sfp_lock_release+0x8>)
 801faae:	f000 bc21 	b.w	80202f4 <__retarget_lock_release_recursive>
 801fab2:	bf00      	nop
 801fab4:	20009fbc 	.word	0x20009fbc

0801fab8 <__sinit_lock_acquire>:
 801fab8:	4801      	ldr	r0, [pc, #4]	; (801fac0 <__sinit_lock_acquire+0x8>)
 801faba:	f000 bc1a 	b.w	80202f2 <__retarget_lock_acquire_recursive>
 801fabe:	bf00      	nop
 801fac0:	20009fbb 	.word	0x20009fbb

0801fac4 <__sinit_lock_release>:
 801fac4:	4801      	ldr	r0, [pc, #4]	; (801facc <__sinit_lock_release+0x8>)
 801fac6:	f000 bc15 	b.w	80202f4 <__retarget_lock_release_recursive>
 801faca:	bf00      	nop
 801facc:	20009fbb 	.word	0x20009fbb

0801fad0 <__sinit>:
 801fad0:	b510      	push	{r4, lr}
 801fad2:	4604      	mov	r4, r0
 801fad4:	f7ff fff0 	bl	801fab8 <__sinit_lock_acquire>
 801fad8:	69a3      	ldr	r3, [r4, #24]
 801fada:	b11b      	cbz	r3, 801fae4 <__sinit+0x14>
 801fadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fae0:	f7ff bff0 	b.w	801fac4 <__sinit_lock_release>
 801fae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fae8:	6523      	str	r3, [r4, #80]	; 0x50
 801faea:	4b13      	ldr	r3, [pc, #76]	; (801fb38 <__sinit+0x68>)
 801faec:	4a13      	ldr	r2, [pc, #76]	; (801fb3c <__sinit+0x6c>)
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	62a2      	str	r2, [r4, #40]	; 0x28
 801faf2:	42a3      	cmp	r3, r4
 801faf4:	bf04      	itt	eq
 801faf6:	2301      	moveq	r3, #1
 801faf8:	61a3      	streq	r3, [r4, #24]
 801fafa:	4620      	mov	r0, r4
 801fafc:	f000 f820 	bl	801fb40 <__sfp>
 801fb00:	6060      	str	r0, [r4, #4]
 801fb02:	4620      	mov	r0, r4
 801fb04:	f000 f81c 	bl	801fb40 <__sfp>
 801fb08:	60a0      	str	r0, [r4, #8]
 801fb0a:	4620      	mov	r0, r4
 801fb0c:	f000 f818 	bl	801fb40 <__sfp>
 801fb10:	2200      	movs	r2, #0
 801fb12:	60e0      	str	r0, [r4, #12]
 801fb14:	2104      	movs	r1, #4
 801fb16:	6860      	ldr	r0, [r4, #4]
 801fb18:	f7ff ff82 	bl	801fa20 <std>
 801fb1c:	68a0      	ldr	r0, [r4, #8]
 801fb1e:	2201      	movs	r2, #1
 801fb20:	2109      	movs	r1, #9
 801fb22:	f7ff ff7d 	bl	801fa20 <std>
 801fb26:	68e0      	ldr	r0, [r4, #12]
 801fb28:	2202      	movs	r2, #2
 801fb2a:	2112      	movs	r1, #18
 801fb2c:	f7ff ff78 	bl	801fa20 <std>
 801fb30:	2301      	movs	r3, #1
 801fb32:	61a3      	str	r3, [r4, #24]
 801fb34:	e7d2      	b.n	801fadc <__sinit+0xc>
 801fb36:	bf00      	nop
 801fb38:	08029888 	.word	0x08029888
 801fb3c:	0801fa69 	.word	0x0801fa69

0801fb40 <__sfp>:
 801fb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb42:	4607      	mov	r7, r0
 801fb44:	f7ff ffac 	bl	801faa0 <__sfp_lock_acquire>
 801fb48:	4b1e      	ldr	r3, [pc, #120]	; (801fbc4 <__sfp+0x84>)
 801fb4a:	681e      	ldr	r6, [r3, #0]
 801fb4c:	69b3      	ldr	r3, [r6, #24]
 801fb4e:	b913      	cbnz	r3, 801fb56 <__sfp+0x16>
 801fb50:	4630      	mov	r0, r6
 801fb52:	f7ff ffbd 	bl	801fad0 <__sinit>
 801fb56:	3648      	adds	r6, #72	; 0x48
 801fb58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fb5c:	3b01      	subs	r3, #1
 801fb5e:	d503      	bpl.n	801fb68 <__sfp+0x28>
 801fb60:	6833      	ldr	r3, [r6, #0]
 801fb62:	b30b      	cbz	r3, 801fba8 <__sfp+0x68>
 801fb64:	6836      	ldr	r6, [r6, #0]
 801fb66:	e7f7      	b.n	801fb58 <__sfp+0x18>
 801fb68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fb6c:	b9d5      	cbnz	r5, 801fba4 <__sfp+0x64>
 801fb6e:	4b16      	ldr	r3, [pc, #88]	; (801fbc8 <__sfp+0x88>)
 801fb70:	60e3      	str	r3, [r4, #12]
 801fb72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fb76:	6665      	str	r5, [r4, #100]	; 0x64
 801fb78:	f000 fbba 	bl	80202f0 <__retarget_lock_init_recursive>
 801fb7c:	f7ff ff96 	bl	801faac <__sfp_lock_release>
 801fb80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fb84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fb88:	6025      	str	r5, [r4, #0]
 801fb8a:	61a5      	str	r5, [r4, #24]
 801fb8c:	2208      	movs	r2, #8
 801fb8e:	4629      	mov	r1, r5
 801fb90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fb94:	f7fd fb5c 	bl	801d250 <memset>
 801fb98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fb9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fba0:	4620      	mov	r0, r4
 801fba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fba4:	3468      	adds	r4, #104	; 0x68
 801fba6:	e7d9      	b.n	801fb5c <__sfp+0x1c>
 801fba8:	2104      	movs	r1, #4
 801fbaa:	4638      	mov	r0, r7
 801fbac:	f7ff ff62 	bl	801fa74 <__sfmoreglue>
 801fbb0:	4604      	mov	r4, r0
 801fbb2:	6030      	str	r0, [r6, #0]
 801fbb4:	2800      	cmp	r0, #0
 801fbb6:	d1d5      	bne.n	801fb64 <__sfp+0x24>
 801fbb8:	f7ff ff78 	bl	801faac <__sfp_lock_release>
 801fbbc:	230c      	movs	r3, #12
 801fbbe:	603b      	str	r3, [r7, #0]
 801fbc0:	e7ee      	b.n	801fba0 <__sfp+0x60>
 801fbc2:	bf00      	nop
 801fbc4:	08029888 	.word	0x08029888
 801fbc8:	ffff0001 	.word	0xffff0001

0801fbcc <_fwalk_reent>:
 801fbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbd0:	4606      	mov	r6, r0
 801fbd2:	4688      	mov	r8, r1
 801fbd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fbd8:	2700      	movs	r7, #0
 801fbda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fbde:	f1b9 0901 	subs.w	r9, r9, #1
 801fbe2:	d505      	bpl.n	801fbf0 <_fwalk_reent+0x24>
 801fbe4:	6824      	ldr	r4, [r4, #0]
 801fbe6:	2c00      	cmp	r4, #0
 801fbe8:	d1f7      	bne.n	801fbda <_fwalk_reent+0xe>
 801fbea:	4638      	mov	r0, r7
 801fbec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fbf0:	89ab      	ldrh	r3, [r5, #12]
 801fbf2:	2b01      	cmp	r3, #1
 801fbf4:	d907      	bls.n	801fc06 <_fwalk_reent+0x3a>
 801fbf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fbfa:	3301      	adds	r3, #1
 801fbfc:	d003      	beq.n	801fc06 <_fwalk_reent+0x3a>
 801fbfe:	4629      	mov	r1, r5
 801fc00:	4630      	mov	r0, r6
 801fc02:	47c0      	blx	r8
 801fc04:	4307      	orrs	r7, r0
 801fc06:	3568      	adds	r5, #104	; 0x68
 801fc08:	e7e9      	b.n	801fbde <_fwalk_reent+0x12>

0801fc0a <rshift>:
 801fc0a:	6903      	ldr	r3, [r0, #16]
 801fc0c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801fc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc14:	ea4f 1261 	mov.w	r2, r1, asr #5
 801fc18:	f100 0414 	add.w	r4, r0, #20
 801fc1c:	dd45      	ble.n	801fcaa <rshift+0xa0>
 801fc1e:	f011 011f 	ands.w	r1, r1, #31
 801fc22:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fc26:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fc2a:	d10c      	bne.n	801fc46 <rshift+0x3c>
 801fc2c:	f100 0710 	add.w	r7, r0, #16
 801fc30:	4629      	mov	r1, r5
 801fc32:	42b1      	cmp	r1, r6
 801fc34:	d334      	bcc.n	801fca0 <rshift+0x96>
 801fc36:	1a9b      	subs	r3, r3, r2
 801fc38:	009b      	lsls	r3, r3, #2
 801fc3a:	1eea      	subs	r2, r5, #3
 801fc3c:	4296      	cmp	r6, r2
 801fc3e:	bf38      	it	cc
 801fc40:	2300      	movcc	r3, #0
 801fc42:	4423      	add	r3, r4
 801fc44:	e015      	b.n	801fc72 <rshift+0x68>
 801fc46:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fc4a:	f1c1 0820 	rsb	r8, r1, #32
 801fc4e:	40cf      	lsrs	r7, r1
 801fc50:	f105 0e04 	add.w	lr, r5, #4
 801fc54:	46a1      	mov	r9, r4
 801fc56:	4576      	cmp	r6, lr
 801fc58:	46f4      	mov	ip, lr
 801fc5a:	d815      	bhi.n	801fc88 <rshift+0x7e>
 801fc5c:	1a9b      	subs	r3, r3, r2
 801fc5e:	009a      	lsls	r2, r3, #2
 801fc60:	3a04      	subs	r2, #4
 801fc62:	3501      	adds	r5, #1
 801fc64:	42ae      	cmp	r6, r5
 801fc66:	bf38      	it	cc
 801fc68:	2200      	movcc	r2, #0
 801fc6a:	18a3      	adds	r3, r4, r2
 801fc6c:	50a7      	str	r7, [r4, r2]
 801fc6e:	b107      	cbz	r7, 801fc72 <rshift+0x68>
 801fc70:	3304      	adds	r3, #4
 801fc72:	1b1a      	subs	r2, r3, r4
 801fc74:	42a3      	cmp	r3, r4
 801fc76:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801fc7a:	bf08      	it	eq
 801fc7c:	2300      	moveq	r3, #0
 801fc7e:	6102      	str	r2, [r0, #16]
 801fc80:	bf08      	it	eq
 801fc82:	6143      	streq	r3, [r0, #20]
 801fc84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fc88:	f8dc c000 	ldr.w	ip, [ip]
 801fc8c:	fa0c fc08 	lsl.w	ip, ip, r8
 801fc90:	ea4c 0707 	orr.w	r7, ip, r7
 801fc94:	f849 7b04 	str.w	r7, [r9], #4
 801fc98:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fc9c:	40cf      	lsrs	r7, r1
 801fc9e:	e7da      	b.n	801fc56 <rshift+0x4c>
 801fca0:	f851 cb04 	ldr.w	ip, [r1], #4
 801fca4:	f847 cf04 	str.w	ip, [r7, #4]!
 801fca8:	e7c3      	b.n	801fc32 <rshift+0x28>
 801fcaa:	4623      	mov	r3, r4
 801fcac:	e7e1      	b.n	801fc72 <rshift+0x68>

0801fcae <__hexdig_fun>:
 801fcae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fcb2:	2b09      	cmp	r3, #9
 801fcb4:	d802      	bhi.n	801fcbc <__hexdig_fun+0xe>
 801fcb6:	3820      	subs	r0, #32
 801fcb8:	b2c0      	uxtb	r0, r0
 801fcba:	4770      	bx	lr
 801fcbc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801fcc0:	2b05      	cmp	r3, #5
 801fcc2:	d801      	bhi.n	801fcc8 <__hexdig_fun+0x1a>
 801fcc4:	3847      	subs	r0, #71	; 0x47
 801fcc6:	e7f7      	b.n	801fcb8 <__hexdig_fun+0xa>
 801fcc8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fccc:	2b05      	cmp	r3, #5
 801fcce:	d801      	bhi.n	801fcd4 <__hexdig_fun+0x26>
 801fcd0:	3827      	subs	r0, #39	; 0x27
 801fcd2:	e7f1      	b.n	801fcb8 <__hexdig_fun+0xa>
 801fcd4:	2000      	movs	r0, #0
 801fcd6:	4770      	bx	lr

0801fcd8 <__gethex>:
 801fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcdc:	ed2d 8b02 	vpush	{d8}
 801fce0:	b089      	sub	sp, #36	; 0x24
 801fce2:	ee08 0a10 	vmov	s16, r0
 801fce6:	9304      	str	r3, [sp, #16]
 801fce8:	4bbc      	ldr	r3, [pc, #752]	; (801ffdc <__gethex+0x304>)
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	9301      	str	r3, [sp, #4]
 801fcee:	4618      	mov	r0, r3
 801fcf0:	468b      	mov	fp, r1
 801fcf2:	4690      	mov	r8, r2
 801fcf4:	f7e0 fa7c 	bl	80001f0 <strlen>
 801fcf8:	9b01      	ldr	r3, [sp, #4]
 801fcfa:	f8db 2000 	ldr.w	r2, [fp]
 801fcfe:	4403      	add	r3, r0
 801fd00:	4682      	mov	sl, r0
 801fd02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fd06:	9305      	str	r3, [sp, #20]
 801fd08:	1c93      	adds	r3, r2, #2
 801fd0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fd0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fd12:	32fe      	adds	r2, #254	; 0xfe
 801fd14:	18d1      	adds	r1, r2, r3
 801fd16:	461f      	mov	r7, r3
 801fd18:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fd1c:	9100      	str	r1, [sp, #0]
 801fd1e:	2830      	cmp	r0, #48	; 0x30
 801fd20:	d0f8      	beq.n	801fd14 <__gethex+0x3c>
 801fd22:	f7ff ffc4 	bl	801fcae <__hexdig_fun>
 801fd26:	4604      	mov	r4, r0
 801fd28:	2800      	cmp	r0, #0
 801fd2a:	d13a      	bne.n	801fda2 <__gethex+0xca>
 801fd2c:	9901      	ldr	r1, [sp, #4]
 801fd2e:	4652      	mov	r2, sl
 801fd30:	4638      	mov	r0, r7
 801fd32:	f001 fa34 	bl	802119e <strncmp>
 801fd36:	4605      	mov	r5, r0
 801fd38:	2800      	cmp	r0, #0
 801fd3a:	d168      	bne.n	801fe0e <__gethex+0x136>
 801fd3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801fd40:	eb07 060a 	add.w	r6, r7, sl
 801fd44:	f7ff ffb3 	bl	801fcae <__hexdig_fun>
 801fd48:	2800      	cmp	r0, #0
 801fd4a:	d062      	beq.n	801fe12 <__gethex+0x13a>
 801fd4c:	4633      	mov	r3, r6
 801fd4e:	7818      	ldrb	r0, [r3, #0]
 801fd50:	2830      	cmp	r0, #48	; 0x30
 801fd52:	461f      	mov	r7, r3
 801fd54:	f103 0301 	add.w	r3, r3, #1
 801fd58:	d0f9      	beq.n	801fd4e <__gethex+0x76>
 801fd5a:	f7ff ffa8 	bl	801fcae <__hexdig_fun>
 801fd5e:	2301      	movs	r3, #1
 801fd60:	fab0 f480 	clz	r4, r0
 801fd64:	0964      	lsrs	r4, r4, #5
 801fd66:	4635      	mov	r5, r6
 801fd68:	9300      	str	r3, [sp, #0]
 801fd6a:	463a      	mov	r2, r7
 801fd6c:	4616      	mov	r6, r2
 801fd6e:	3201      	adds	r2, #1
 801fd70:	7830      	ldrb	r0, [r6, #0]
 801fd72:	f7ff ff9c 	bl	801fcae <__hexdig_fun>
 801fd76:	2800      	cmp	r0, #0
 801fd78:	d1f8      	bne.n	801fd6c <__gethex+0x94>
 801fd7a:	9901      	ldr	r1, [sp, #4]
 801fd7c:	4652      	mov	r2, sl
 801fd7e:	4630      	mov	r0, r6
 801fd80:	f001 fa0d 	bl	802119e <strncmp>
 801fd84:	b980      	cbnz	r0, 801fda8 <__gethex+0xd0>
 801fd86:	b94d      	cbnz	r5, 801fd9c <__gethex+0xc4>
 801fd88:	eb06 050a 	add.w	r5, r6, sl
 801fd8c:	462a      	mov	r2, r5
 801fd8e:	4616      	mov	r6, r2
 801fd90:	3201      	adds	r2, #1
 801fd92:	7830      	ldrb	r0, [r6, #0]
 801fd94:	f7ff ff8b 	bl	801fcae <__hexdig_fun>
 801fd98:	2800      	cmp	r0, #0
 801fd9a:	d1f8      	bne.n	801fd8e <__gethex+0xb6>
 801fd9c:	1bad      	subs	r5, r5, r6
 801fd9e:	00ad      	lsls	r5, r5, #2
 801fda0:	e004      	b.n	801fdac <__gethex+0xd4>
 801fda2:	2400      	movs	r4, #0
 801fda4:	4625      	mov	r5, r4
 801fda6:	e7e0      	b.n	801fd6a <__gethex+0x92>
 801fda8:	2d00      	cmp	r5, #0
 801fdaa:	d1f7      	bne.n	801fd9c <__gethex+0xc4>
 801fdac:	7833      	ldrb	r3, [r6, #0]
 801fdae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fdb2:	2b50      	cmp	r3, #80	; 0x50
 801fdb4:	d13b      	bne.n	801fe2e <__gethex+0x156>
 801fdb6:	7873      	ldrb	r3, [r6, #1]
 801fdb8:	2b2b      	cmp	r3, #43	; 0x2b
 801fdba:	d02c      	beq.n	801fe16 <__gethex+0x13e>
 801fdbc:	2b2d      	cmp	r3, #45	; 0x2d
 801fdbe:	d02e      	beq.n	801fe1e <__gethex+0x146>
 801fdc0:	1c71      	adds	r1, r6, #1
 801fdc2:	f04f 0900 	mov.w	r9, #0
 801fdc6:	7808      	ldrb	r0, [r1, #0]
 801fdc8:	f7ff ff71 	bl	801fcae <__hexdig_fun>
 801fdcc:	1e43      	subs	r3, r0, #1
 801fdce:	b2db      	uxtb	r3, r3
 801fdd0:	2b18      	cmp	r3, #24
 801fdd2:	d82c      	bhi.n	801fe2e <__gethex+0x156>
 801fdd4:	f1a0 0210 	sub.w	r2, r0, #16
 801fdd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fddc:	f7ff ff67 	bl	801fcae <__hexdig_fun>
 801fde0:	1e43      	subs	r3, r0, #1
 801fde2:	b2db      	uxtb	r3, r3
 801fde4:	2b18      	cmp	r3, #24
 801fde6:	d91d      	bls.n	801fe24 <__gethex+0x14c>
 801fde8:	f1b9 0f00 	cmp.w	r9, #0
 801fdec:	d000      	beq.n	801fdf0 <__gethex+0x118>
 801fdee:	4252      	negs	r2, r2
 801fdf0:	4415      	add	r5, r2
 801fdf2:	f8cb 1000 	str.w	r1, [fp]
 801fdf6:	b1e4      	cbz	r4, 801fe32 <__gethex+0x15a>
 801fdf8:	9b00      	ldr	r3, [sp, #0]
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	bf14      	ite	ne
 801fdfe:	2700      	movne	r7, #0
 801fe00:	2706      	moveq	r7, #6
 801fe02:	4638      	mov	r0, r7
 801fe04:	b009      	add	sp, #36	; 0x24
 801fe06:	ecbd 8b02 	vpop	{d8}
 801fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe0e:	463e      	mov	r6, r7
 801fe10:	4625      	mov	r5, r4
 801fe12:	2401      	movs	r4, #1
 801fe14:	e7ca      	b.n	801fdac <__gethex+0xd4>
 801fe16:	f04f 0900 	mov.w	r9, #0
 801fe1a:	1cb1      	adds	r1, r6, #2
 801fe1c:	e7d3      	b.n	801fdc6 <__gethex+0xee>
 801fe1e:	f04f 0901 	mov.w	r9, #1
 801fe22:	e7fa      	b.n	801fe1a <__gethex+0x142>
 801fe24:	230a      	movs	r3, #10
 801fe26:	fb03 0202 	mla	r2, r3, r2, r0
 801fe2a:	3a10      	subs	r2, #16
 801fe2c:	e7d4      	b.n	801fdd8 <__gethex+0x100>
 801fe2e:	4631      	mov	r1, r6
 801fe30:	e7df      	b.n	801fdf2 <__gethex+0x11a>
 801fe32:	1bf3      	subs	r3, r6, r7
 801fe34:	3b01      	subs	r3, #1
 801fe36:	4621      	mov	r1, r4
 801fe38:	2b07      	cmp	r3, #7
 801fe3a:	dc0b      	bgt.n	801fe54 <__gethex+0x17c>
 801fe3c:	ee18 0a10 	vmov	r0, s16
 801fe40:	f000 fa82 	bl	8020348 <_Balloc>
 801fe44:	4604      	mov	r4, r0
 801fe46:	b940      	cbnz	r0, 801fe5a <__gethex+0x182>
 801fe48:	4b65      	ldr	r3, [pc, #404]	; (801ffe0 <__gethex+0x308>)
 801fe4a:	4602      	mov	r2, r0
 801fe4c:	21de      	movs	r1, #222	; 0xde
 801fe4e:	4865      	ldr	r0, [pc, #404]	; (801ffe4 <__gethex+0x30c>)
 801fe50:	f001 fa98 	bl	8021384 <__assert_func>
 801fe54:	3101      	adds	r1, #1
 801fe56:	105b      	asrs	r3, r3, #1
 801fe58:	e7ee      	b.n	801fe38 <__gethex+0x160>
 801fe5a:	f100 0914 	add.w	r9, r0, #20
 801fe5e:	f04f 0b00 	mov.w	fp, #0
 801fe62:	f1ca 0301 	rsb	r3, sl, #1
 801fe66:	f8cd 9008 	str.w	r9, [sp, #8]
 801fe6a:	f8cd b000 	str.w	fp, [sp]
 801fe6e:	9306      	str	r3, [sp, #24]
 801fe70:	42b7      	cmp	r7, r6
 801fe72:	d340      	bcc.n	801fef6 <__gethex+0x21e>
 801fe74:	9802      	ldr	r0, [sp, #8]
 801fe76:	9b00      	ldr	r3, [sp, #0]
 801fe78:	f840 3b04 	str.w	r3, [r0], #4
 801fe7c:	eba0 0009 	sub.w	r0, r0, r9
 801fe80:	1080      	asrs	r0, r0, #2
 801fe82:	0146      	lsls	r6, r0, #5
 801fe84:	6120      	str	r0, [r4, #16]
 801fe86:	4618      	mov	r0, r3
 801fe88:	f000 fb54 	bl	8020534 <__hi0bits>
 801fe8c:	1a30      	subs	r0, r6, r0
 801fe8e:	f8d8 6000 	ldr.w	r6, [r8]
 801fe92:	42b0      	cmp	r0, r6
 801fe94:	dd63      	ble.n	801ff5e <__gethex+0x286>
 801fe96:	1b87      	subs	r7, r0, r6
 801fe98:	4639      	mov	r1, r7
 801fe9a:	4620      	mov	r0, r4
 801fe9c:	f000 feee 	bl	8020c7c <__any_on>
 801fea0:	4682      	mov	sl, r0
 801fea2:	b1a8      	cbz	r0, 801fed0 <__gethex+0x1f8>
 801fea4:	1e7b      	subs	r3, r7, #1
 801fea6:	1159      	asrs	r1, r3, #5
 801fea8:	f003 021f 	and.w	r2, r3, #31
 801feac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801feb0:	f04f 0a01 	mov.w	sl, #1
 801feb4:	fa0a f202 	lsl.w	r2, sl, r2
 801feb8:	420a      	tst	r2, r1
 801feba:	d009      	beq.n	801fed0 <__gethex+0x1f8>
 801febc:	4553      	cmp	r3, sl
 801febe:	dd05      	ble.n	801fecc <__gethex+0x1f4>
 801fec0:	1eb9      	subs	r1, r7, #2
 801fec2:	4620      	mov	r0, r4
 801fec4:	f000 feda 	bl	8020c7c <__any_on>
 801fec8:	2800      	cmp	r0, #0
 801feca:	d145      	bne.n	801ff58 <__gethex+0x280>
 801fecc:	f04f 0a02 	mov.w	sl, #2
 801fed0:	4639      	mov	r1, r7
 801fed2:	4620      	mov	r0, r4
 801fed4:	f7ff fe99 	bl	801fc0a <rshift>
 801fed8:	443d      	add	r5, r7
 801feda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fede:	42ab      	cmp	r3, r5
 801fee0:	da4c      	bge.n	801ff7c <__gethex+0x2a4>
 801fee2:	ee18 0a10 	vmov	r0, s16
 801fee6:	4621      	mov	r1, r4
 801fee8:	f000 fa6e 	bl	80203c8 <_Bfree>
 801feec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801feee:	2300      	movs	r3, #0
 801fef0:	6013      	str	r3, [r2, #0]
 801fef2:	27a3      	movs	r7, #163	; 0xa3
 801fef4:	e785      	b.n	801fe02 <__gethex+0x12a>
 801fef6:	1e73      	subs	r3, r6, #1
 801fef8:	9a05      	ldr	r2, [sp, #20]
 801fefa:	9303      	str	r3, [sp, #12]
 801fefc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ff00:	4293      	cmp	r3, r2
 801ff02:	d019      	beq.n	801ff38 <__gethex+0x260>
 801ff04:	f1bb 0f20 	cmp.w	fp, #32
 801ff08:	d107      	bne.n	801ff1a <__gethex+0x242>
 801ff0a:	9b02      	ldr	r3, [sp, #8]
 801ff0c:	9a00      	ldr	r2, [sp, #0]
 801ff0e:	f843 2b04 	str.w	r2, [r3], #4
 801ff12:	9302      	str	r3, [sp, #8]
 801ff14:	2300      	movs	r3, #0
 801ff16:	9300      	str	r3, [sp, #0]
 801ff18:	469b      	mov	fp, r3
 801ff1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ff1e:	f7ff fec6 	bl	801fcae <__hexdig_fun>
 801ff22:	9b00      	ldr	r3, [sp, #0]
 801ff24:	f000 000f 	and.w	r0, r0, #15
 801ff28:	fa00 f00b 	lsl.w	r0, r0, fp
 801ff2c:	4303      	orrs	r3, r0
 801ff2e:	9300      	str	r3, [sp, #0]
 801ff30:	f10b 0b04 	add.w	fp, fp, #4
 801ff34:	9b03      	ldr	r3, [sp, #12]
 801ff36:	e00d      	b.n	801ff54 <__gethex+0x27c>
 801ff38:	9b03      	ldr	r3, [sp, #12]
 801ff3a:	9a06      	ldr	r2, [sp, #24]
 801ff3c:	4413      	add	r3, r2
 801ff3e:	42bb      	cmp	r3, r7
 801ff40:	d3e0      	bcc.n	801ff04 <__gethex+0x22c>
 801ff42:	4618      	mov	r0, r3
 801ff44:	9901      	ldr	r1, [sp, #4]
 801ff46:	9307      	str	r3, [sp, #28]
 801ff48:	4652      	mov	r2, sl
 801ff4a:	f001 f928 	bl	802119e <strncmp>
 801ff4e:	9b07      	ldr	r3, [sp, #28]
 801ff50:	2800      	cmp	r0, #0
 801ff52:	d1d7      	bne.n	801ff04 <__gethex+0x22c>
 801ff54:	461e      	mov	r6, r3
 801ff56:	e78b      	b.n	801fe70 <__gethex+0x198>
 801ff58:	f04f 0a03 	mov.w	sl, #3
 801ff5c:	e7b8      	b.n	801fed0 <__gethex+0x1f8>
 801ff5e:	da0a      	bge.n	801ff76 <__gethex+0x29e>
 801ff60:	1a37      	subs	r7, r6, r0
 801ff62:	4621      	mov	r1, r4
 801ff64:	ee18 0a10 	vmov	r0, s16
 801ff68:	463a      	mov	r2, r7
 801ff6a:	f000 fc49 	bl	8020800 <__lshift>
 801ff6e:	1bed      	subs	r5, r5, r7
 801ff70:	4604      	mov	r4, r0
 801ff72:	f100 0914 	add.w	r9, r0, #20
 801ff76:	f04f 0a00 	mov.w	sl, #0
 801ff7a:	e7ae      	b.n	801feda <__gethex+0x202>
 801ff7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ff80:	42a8      	cmp	r0, r5
 801ff82:	dd72      	ble.n	802006a <__gethex+0x392>
 801ff84:	1b45      	subs	r5, r0, r5
 801ff86:	42ae      	cmp	r6, r5
 801ff88:	dc36      	bgt.n	801fff8 <__gethex+0x320>
 801ff8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ff8e:	2b02      	cmp	r3, #2
 801ff90:	d02a      	beq.n	801ffe8 <__gethex+0x310>
 801ff92:	2b03      	cmp	r3, #3
 801ff94:	d02c      	beq.n	801fff0 <__gethex+0x318>
 801ff96:	2b01      	cmp	r3, #1
 801ff98:	d115      	bne.n	801ffc6 <__gethex+0x2ee>
 801ff9a:	42ae      	cmp	r6, r5
 801ff9c:	d113      	bne.n	801ffc6 <__gethex+0x2ee>
 801ff9e:	2e01      	cmp	r6, #1
 801ffa0:	d10b      	bne.n	801ffba <__gethex+0x2e2>
 801ffa2:	9a04      	ldr	r2, [sp, #16]
 801ffa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ffa8:	6013      	str	r3, [r2, #0]
 801ffaa:	2301      	movs	r3, #1
 801ffac:	6123      	str	r3, [r4, #16]
 801ffae:	f8c9 3000 	str.w	r3, [r9]
 801ffb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ffb4:	2762      	movs	r7, #98	; 0x62
 801ffb6:	601c      	str	r4, [r3, #0]
 801ffb8:	e723      	b.n	801fe02 <__gethex+0x12a>
 801ffba:	1e71      	subs	r1, r6, #1
 801ffbc:	4620      	mov	r0, r4
 801ffbe:	f000 fe5d 	bl	8020c7c <__any_on>
 801ffc2:	2800      	cmp	r0, #0
 801ffc4:	d1ed      	bne.n	801ffa2 <__gethex+0x2ca>
 801ffc6:	ee18 0a10 	vmov	r0, s16
 801ffca:	4621      	mov	r1, r4
 801ffcc:	f000 f9fc 	bl	80203c8 <_Bfree>
 801ffd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ffd2:	2300      	movs	r3, #0
 801ffd4:	6013      	str	r3, [r2, #0]
 801ffd6:	2750      	movs	r7, #80	; 0x50
 801ffd8:	e713      	b.n	801fe02 <__gethex+0x12a>
 801ffda:	bf00      	nop
 801ffdc:	08029b7c 	.word	0x08029b7c
 801ffe0:	08029a9c 	.word	0x08029a9c
 801ffe4:	08029b10 	.word	0x08029b10
 801ffe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d1eb      	bne.n	801ffc6 <__gethex+0x2ee>
 801ffee:	e7d8      	b.n	801ffa2 <__gethex+0x2ca>
 801fff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d1d5      	bne.n	801ffa2 <__gethex+0x2ca>
 801fff6:	e7e6      	b.n	801ffc6 <__gethex+0x2ee>
 801fff8:	1e6f      	subs	r7, r5, #1
 801fffa:	f1ba 0f00 	cmp.w	sl, #0
 801fffe:	d131      	bne.n	8020064 <__gethex+0x38c>
 8020000:	b127      	cbz	r7, 802000c <__gethex+0x334>
 8020002:	4639      	mov	r1, r7
 8020004:	4620      	mov	r0, r4
 8020006:	f000 fe39 	bl	8020c7c <__any_on>
 802000a:	4682      	mov	sl, r0
 802000c:	117b      	asrs	r3, r7, #5
 802000e:	2101      	movs	r1, #1
 8020010:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020014:	f007 071f 	and.w	r7, r7, #31
 8020018:	fa01 f707 	lsl.w	r7, r1, r7
 802001c:	421f      	tst	r7, r3
 802001e:	4629      	mov	r1, r5
 8020020:	4620      	mov	r0, r4
 8020022:	bf18      	it	ne
 8020024:	f04a 0a02 	orrne.w	sl, sl, #2
 8020028:	1b76      	subs	r6, r6, r5
 802002a:	f7ff fdee 	bl	801fc0a <rshift>
 802002e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020032:	2702      	movs	r7, #2
 8020034:	f1ba 0f00 	cmp.w	sl, #0
 8020038:	d048      	beq.n	80200cc <__gethex+0x3f4>
 802003a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802003e:	2b02      	cmp	r3, #2
 8020040:	d015      	beq.n	802006e <__gethex+0x396>
 8020042:	2b03      	cmp	r3, #3
 8020044:	d017      	beq.n	8020076 <__gethex+0x39e>
 8020046:	2b01      	cmp	r3, #1
 8020048:	d109      	bne.n	802005e <__gethex+0x386>
 802004a:	f01a 0f02 	tst.w	sl, #2
 802004e:	d006      	beq.n	802005e <__gethex+0x386>
 8020050:	f8d9 0000 	ldr.w	r0, [r9]
 8020054:	ea4a 0a00 	orr.w	sl, sl, r0
 8020058:	f01a 0f01 	tst.w	sl, #1
 802005c:	d10e      	bne.n	802007c <__gethex+0x3a4>
 802005e:	f047 0710 	orr.w	r7, r7, #16
 8020062:	e033      	b.n	80200cc <__gethex+0x3f4>
 8020064:	f04f 0a01 	mov.w	sl, #1
 8020068:	e7d0      	b.n	802000c <__gethex+0x334>
 802006a:	2701      	movs	r7, #1
 802006c:	e7e2      	b.n	8020034 <__gethex+0x35c>
 802006e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020070:	f1c3 0301 	rsb	r3, r3, #1
 8020074:	9315      	str	r3, [sp, #84]	; 0x54
 8020076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020078:	2b00      	cmp	r3, #0
 802007a:	d0f0      	beq.n	802005e <__gethex+0x386>
 802007c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020080:	f104 0314 	add.w	r3, r4, #20
 8020084:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020088:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802008c:	f04f 0c00 	mov.w	ip, #0
 8020090:	4618      	mov	r0, r3
 8020092:	f853 2b04 	ldr.w	r2, [r3], #4
 8020096:	f1b2 3fff 	cmp.w	r2, #4294967295
 802009a:	d01c      	beq.n	80200d6 <__gethex+0x3fe>
 802009c:	3201      	adds	r2, #1
 802009e:	6002      	str	r2, [r0, #0]
 80200a0:	2f02      	cmp	r7, #2
 80200a2:	f104 0314 	add.w	r3, r4, #20
 80200a6:	d13f      	bne.n	8020128 <__gethex+0x450>
 80200a8:	f8d8 2000 	ldr.w	r2, [r8]
 80200ac:	3a01      	subs	r2, #1
 80200ae:	42b2      	cmp	r2, r6
 80200b0:	d10a      	bne.n	80200c8 <__gethex+0x3f0>
 80200b2:	1171      	asrs	r1, r6, #5
 80200b4:	2201      	movs	r2, #1
 80200b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80200ba:	f006 061f 	and.w	r6, r6, #31
 80200be:	fa02 f606 	lsl.w	r6, r2, r6
 80200c2:	421e      	tst	r6, r3
 80200c4:	bf18      	it	ne
 80200c6:	4617      	movne	r7, r2
 80200c8:	f047 0720 	orr.w	r7, r7, #32
 80200cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80200ce:	601c      	str	r4, [r3, #0]
 80200d0:	9b04      	ldr	r3, [sp, #16]
 80200d2:	601d      	str	r5, [r3, #0]
 80200d4:	e695      	b.n	801fe02 <__gethex+0x12a>
 80200d6:	4299      	cmp	r1, r3
 80200d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80200dc:	d8d8      	bhi.n	8020090 <__gethex+0x3b8>
 80200de:	68a3      	ldr	r3, [r4, #8]
 80200e0:	459b      	cmp	fp, r3
 80200e2:	db19      	blt.n	8020118 <__gethex+0x440>
 80200e4:	6861      	ldr	r1, [r4, #4]
 80200e6:	ee18 0a10 	vmov	r0, s16
 80200ea:	3101      	adds	r1, #1
 80200ec:	f000 f92c 	bl	8020348 <_Balloc>
 80200f0:	4681      	mov	r9, r0
 80200f2:	b918      	cbnz	r0, 80200fc <__gethex+0x424>
 80200f4:	4b1a      	ldr	r3, [pc, #104]	; (8020160 <__gethex+0x488>)
 80200f6:	4602      	mov	r2, r0
 80200f8:	2184      	movs	r1, #132	; 0x84
 80200fa:	e6a8      	b.n	801fe4e <__gethex+0x176>
 80200fc:	6922      	ldr	r2, [r4, #16]
 80200fe:	3202      	adds	r2, #2
 8020100:	f104 010c 	add.w	r1, r4, #12
 8020104:	0092      	lsls	r2, r2, #2
 8020106:	300c      	adds	r0, #12
 8020108:	f000 f910 	bl	802032c <memcpy>
 802010c:	4621      	mov	r1, r4
 802010e:	ee18 0a10 	vmov	r0, s16
 8020112:	f000 f959 	bl	80203c8 <_Bfree>
 8020116:	464c      	mov	r4, r9
 8020118:	6923      	ldr	r3, [r4, #16]
 802011a:	1c5a      	adds	r2, r3, #1
 802011c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020120:	6122      	str	r2, [r4, #16]
 8020122:	2201      	movs	r2, #1
 8020124:	615a      	str	r2, [r3, #20]
 8020126:	e7bb      	b.n	80200a0 <__gethex+0x3c8>
 8020128:	6922      	ldr	r2, [r4, #16]
 802012a:	455a      	cmp	r2, fp
 802012c:	dd0b      	ble.n	8020146 <__gethex+0x46e>
 802012e:	2101      	movs	r1, #1
 8020130:	4620      	mov	r0, r4
 8020132:	f7ff fd6a 	bl	801fc0a <rshift>
 8020136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802013a:	3501      	adds	r5, #1
 802013c:	42ab      	cmp	r3, r5
 802013e:	f6ff aed0 	blt.w	801fee2 <__gethex+0x20a>
 8020142:	2701      	movs	r7, #1
 8020144:	e7c0      	b.n	80200c8 <__gethex+0x3f0>
 8020146:	f016 061f 	ands.w	r6, r6, #31
 802014a:	d0fa      	beq.n	8020142 <__gethex+0x46a>
 802014c:	449a      	add	sl, r3
 802014e:	f1c6 0620 	rsb	r6, r6, #32
 8020152:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020156:	f000 f9ed 	bl	8020534 <__hi0bits>
 802015a:	42b0      	cmp	r0, r6
 802015c:	dbe7      	blt.n	802012e <__gethex+0x456>
 802015e:	e7f0      	b.n	8020142 <__gethex+0x46a>
 8020160:	08029a9c 	.word	0x08029a9c

08020164 <L_shift>:
 8020164:	f1c2 0208 	rsb	r2, r2, #8
 8020168:	0092      	lsls	r2, r2, #2
 802016a:	b570      	push	{r4, r5, r6, lr}
 802016c:	f1c2 0620 	rsb	r6, r2, #32
 8020170:	6843      	ldr	r3, [r0, #4]
 8020172:	6804      	ldr	r4, [r0, #0]
 8020174:	fa03 f506 	lsl.w	r5, r3, r6
 8020178:	432c      	orrs	r4, r5
 802017a:	40d3      	lsrs	r3, r2
 802017c:	6004      	str	r4, [r0, #0]
 802017e:	f840 3f04 	str.w	r3, [r0, #4]!
 8020182:	4288      	cmp	r0, r1
 8020184:	d3f4      	bcc.n	8020170 <L_shift+0xc>
 8020186:	bd70      	pop	{r4, r5, r6, pc}

08020188 <__match>:
 8020188:	b530      	push	{r4, r5, lr}
 802018a:	6803      	ldr	r3, [r0, #0]
 802018c:	3301      	adds	r3, #1
 802018e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020192:	b914      	cbnz	r4, 802019a <__match+0x12>
 8020194:	6003      	str	r3, [r0, #0]
 8020196:	2001      	movs	r0, #1
 8020198:	bd30      	pop	{r4, r5, pc}
 802019a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802019e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80201a2:	2d19      	cmp	r5, #25
 80201a4:	bf98      	it	ls
 80201a6:	3220      	addls	r2, #32
 80201a8:	42a2      	cmp	r2, r4
 80201aa:	d0f0      	beq.n	802018e <__match+0x6>
 80201ac:	2000      	movs	r0, #0
 80201ae:	e7f3      	b.n	8020198 <__match+0x10>

080201b0 <__hexnan>:
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	680b      	ldr	r3, [r1, #0]
 80201b6:	6801      	ldr	r1, [r0, #0]
 80201b8:	115e      	asrs	r6, r3, #5
 80201ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80201be:	f013 031f 	ands.w	r3, r3, #31
 80201c2:	b087      	sub	sp, #28
 80201c4:	bf18      	it	ne
 80201c6:	3604      	addne	r6, #4
 80201c8:	2500      	movs	r5, #0
 80201ca:	1f37      	subs	r7, r6, #4
 80201cc:	4682      	mov	sl, r0
 80201ce:	4690      	mov	r8, r2
 80201d0:	9301      	str	r3, [sp, #4]
 80201d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80201d6:	46b9      	mov	r9, r7
 80201d8:	463c      	mov	r4, r7
 80201da:	9502      	str	r5, [sp, #8]
 80201dc:	46ab      	mov	fp, r5
 80201de:	784a      	ldrb	r2, [r1, #1]
 80201e0:	1c4b      	adds	r3, r1, #1
 80201e2:	9303      	str	r3, [sp, #12]
 80201e4:	b342      	cbz	r2, 8020238 <__hexnan+0x88>
 80201e6:	4610      	mov	r0, r2
 80201e8:	9105      	str	r1, [sp, #20]
 80201ea:	9204      	str	r2, [sp, #16]
 80201ec:	f7ff fd5f 	bl	801fcae <__hexdig_fun>
 80201f0:	2800      	cmp	r0, #0
 80201f2:	d14f      	bne.n	8020294 <__hexnan+0xe4>
 80201f4:	9a04      	ldr	r2, [sp, #16]
 80201f6:	9905      	ldr	r1, [sp, #20]
 80201f8:	2a20      	cmp	r2, #32
 80201fa:	d818      	bhi.n	802022e <__hexnan+0x7e>
 80201fc:	9b02      	ldr	r3, [sp, #8]
 80201fe:	459b      	cmp	fp, r3
 8020200:	dd13      	ble.n	802022a <__hexnan+0x7a>
 8020202:	454c      	cmp	r4, r9
 8020204:	d206      	bcs.n	8020214 <__hexnan+0x64>
 8020206:	2d07      	cmp	r5, #7
 8020208:	dc04      	bgt.n	8020214 <__hexnan+0x64>
 802020a:	462a      	mov	r2, r5
 802020c:	4649      	mov	r1, r9
 802020e:	4620      	mov	r0, r4
 8020210:	f7ff ffa8 	bl	8020164 <L_shift>
 8020214:	4544      	cmp	r4, r8
 8020216:	d950      	bls.n	80202ba <__hexnan+0x10a>
 8020218:	2300      	movs	r3, #0
 802021a:	f1a4 0904 	sub.w	r9, r4, #4
 802021e:	f844 3c04 	str.w	r3, [r4, #-4]
 8020222:	f8cd b008 	str.w	fp, [sp, #8]
 8020226:	464c      	mov	r4, r9
 8020228:	461d      	mov	r5, r3
 802022a:	9903      	ldr	r1, [sp, #12]
 802022c:	e7d7      	b.n	80201de <__hexnan+0x2e>
 802022e:	2a29      	cmp	r2, #41	; 0x29
 8020230:	d156      	bne.n	80202e0 <__hexnan+0x130>
 8020232:	3102      	adds	r1, #2
 8020234:	f8ca 1000 	str.w	r1, [sl]
 8020238:	f1bb 0f00 	cmp.w	fp, #0
 802023c:	d050      	beq.n	80202e0 <__hexnan+0x130>
 802023e:	454c      	cmp	r4, r9
 8020240:	d206      	bcs.n	8020250 <__hexnan+0xa0>
 8020242:	2d07      	cmp	r5, #7
 8020244:	dc04      	bgt.n	8020250 <__hexnan+0xa0>
 8020246:	462a      	mov	r2, r5
 8020248:	4649      	mov	r1, r9
 802024a:	4620      	mov	r0, r4
 802024c:	f7ff ff8a 	bl	8020164 <L_shift>
 8020250:	4544      	cmp	r4, r8
 8020252:	d934      	bls.n	80202be <__hexnan+0x10e>
 8020254:	f1a8 0204 	sub.w	r2, r8, #4
 8020258:	4623      	mov	r3, r4
 802025a:	f853 1b04 	ldr.w	r1, [r3], #4
 802025e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020262:	429f      	cmp	r7, r3
 8020264:	d2f9      	bcs.n	802025a <__hexnan+0xaa>
 8020266:	1b3b      	subs	r3, r7, r4
 8020268:	f023 0303 	bic.w	r3, r3, #3
 802026c:	3304      	adds	r3, #4
 802026e:	3401      	adds	r4, #1
 8020270:	3e03      	subs	r6, #3
 8020272:	42b4      	cmp	r4, r6
 8020274:	bf88      	it	hi
 8020276:	2304      	movhi	r3, #4
 8020278:	4443      	add	r3, r8
 802027a:	2200      	movs	r2, #0
 802027c:	f843 2b04 	str.w	r2, [r3], #4
 8020280:	429f      	cmp	r7, r3
 8020282:	d2fb      	bcs.n	802027c <__hexnan+0xcc>
 8020284:	683b      	ldr	r3, [r7, #0]
 8020286:	b91b      	cbnz	r3, 8020290 <__hexnan+0xe0>
 8020288:	4547      	cmp	r7, r8
 802028a:	d127      	bne.n	80202dc <__hexnan+0x12c>
 802028c:	2301      	movs	r3, #1
 802028e:	603b      	str	r3, [r7, #0]
 8020290:	2005      	movs	r0, #5
 8020292:	e026      	b.n	80202e2 <__hexnan+0x132>
 8020294:	3501      	adds	r5, #1
 8020296:	2d08      	cmp	r5, #8
 8020298:	f10b 0b01 	add.w	fp, fp, #1
 802029c:	dd06      	ble.n	80202ac <__hexnan+0xfc>
 802029e:	4544      	cmp	r4, r8
 80202a0:	d9c3      	bls.n	802022a <__hexnan+0x7a>
 80202a2:	2300      	movs	r3, #0
 80202a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80202a8:	2501      	movs	r5, #1
 80202aa:	3c04      	subs	r4, #4
 80202ac:	6822      	ldr	r2, [r4, #0]
 80202ae:	f000 000f 	and.w	r0, r0, #15
 80202b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80202b6:	6022      	str	r2, [r4, #0]
 80202b8:	e7b7      	b.n	802022a <__hexnan+0x7a>
 80202ba:	2508      	movs	r5, #8
 80202bc:	e7b5      	b.n	802022a <__hexnan+0x7a>
 80202be:	9b01      	ldr	r3, [sp, #4]
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d0df      	beq.n	8020284 <__hexnan+0xd4>
 80202c4:	f04f 32ff 	mov.w	r2, #4294967295
 80202c8:	f1c3 0320 	rsb	r3, r3, #32
 80202cc:	fa22 f303 	lsr.w	r3, r2, r3
 80202d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80202d4:	401a      	ands	r2, r3
 80202d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80202da:	e7d3      	b.n	8020284 <__hexnan+0xd4>
 80202dc:	3f04      	subs	r7, #4
 80202de:	e7d1      	b.n	8020284 <__hexnan+0xd4>
 80202e0:	2004      	movs	r0, #4
 80202e2:	b007      	add	sp, #28
 80202e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080202e8 <_localeconv_r>:
 80202e8:	4800      	ldr	r0, [pc, #0]	; (80202ec <_localeconv_r+0x4>)
 80202ea:	4770      	bx	lr
 80202ec:	20000714 	.word	0x20000714

080202f0 <__retarget_lock_init_recursive>:
 80202f0:	4770      	bx	lr

080202f2 <__retarget_lock_acquire_recursive>:
 80202f2:	4770      	bx	lr

080202f4 <__retarget_lock_release_recursive>:
 80202f4:	4770      	bx	lr
	...

080202f8 <malloc>:
 80202f8:	4b02      	ldr	r3, [pc, #8]	; (8020304 <malloc+0xc>)
 80202fa:	4601      	mov	r1, r0
 80202fc:	6818      	ldr	r0, [r3, #0]
 80202fe:	f000 bd3d 	b.w	8020d7c <_malloc_r>
 8020302:	bf00      	nop
 8020304:	200005bc 	.word	0x200005bc

08020308 <__ascii_mbtowc>:
 8020308:	b082      	sub	sp, #8
 802030a:	b901      	cbnz	r1, 802030e <__ascii_mbtowc+0x6>
 802030c:	a901      	add	r1, sp, #4
 802030e:	b142      	cbz	r2, 8020322 <__ascii_mbtowc+0x1a>
 8020310:	b14b      	cbz	r3, 8020326 <__ascii_mbtowc+0x1e>
 8020312:	7813      	ldrb	r3, [r2, #0]
 8020314:	600b      	str	r3, [r1, #0]
 8020316:	7812      	ldrb	r2, [r2, #0]
 8020318:	1e10      	subs	r0, r2, #0
 802031a:	bf18      	it	ne
 802031c:	2001      	movne	r0, #1
 802031e:	b002      	add	sp, #8
 8020320:	4770      	bx	lr
 8020322:	4610      	mov	r0, r2
 8020324:	e7fb      	b.n	802031e <__ascii_mbtowc+0x16>
 8020326:	f06f 0001 	mvn.w	r0, #1
 802032a:	e7f8      	b.n	802031e <__ascii_mbtowc+0x16>

0802032c <memcpy>:
 802032c:	440a      	add	r2, r1
 802032e:	4291      	cmp	r1, r2
 8020330:	f100 33ff 	add.w	r3, r0, #4294967295
 8020334:	d100      	bne.n	8020338 <memcpy+0xc>
 8020336:	4770      	bx	lr
 8020338:	b510      	push	{r4, lr}
 802033a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802033e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020342:	4291      	cmp	r1, r2
 8020344:	d1f9      	bne.n	802033a <memcpy+0xe>
 8020346:	bd10      	pop	{r4, pc}

08020348 <_Balloc>:
 8020348:	b570      	push	{r4, r5, r6, lr}
 802034a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802034c:	4604      	mov	r4, r0
 802034e:	460d      	mov	r5, r1
 8020350:	b976      	cbnz	r6, 8020370 <_Balloc+0x28>
 8020352:	2010      	movs	r0, #16
 8020354:	f7ff ffd0 	bl	80202f8 <malloc>
 8020358:	4602      	mov	r2, r0
 802035a:	6260      	str	r0, [r4, #36]	; 0x24
 802035c:	b920      	cbnz	r0, 8020368 <_Balloc+0x20>
 802035e:	4b18      	ldr	r3, [pc, #96]	; (80203c0 <_Balloc+0x78>)
 8020360:	4818      	ldr	r0, [pc, #96]	; (80203c4 <_Balloc+0x7c>)
 8020362:	2166      	movs	r1, #102	; 0x66
 8020364:	f001 f80e 	bl	8021384 <__assert_func>
 8020368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802036c:	6006      	str	r6, [r0, #0]
 802036e:	60c6      	str	r6, [r0, #12]
 8020370:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020372:	68f3      	ldr	r3, [r6, #12]
 8020374:	b183      	cbz	r3, 8020398 <_Balloc+0x50>
 8020376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020378:	68db      	ldr	r3, [r3, #12]
 802037a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802037e:	b9b8      	cbnz	r0, 80203b0 <_Balloc+0x68>
 8020380:	2101      	movs	r1, #1
 8020382:	fa01 f605 	lsl.w	r6, r1, r5
 8020386:	1d72      	adds	r2, r6, #5
 8020388:	0092      	lsls	r2, r2, #2
 802038a:	4620      	mov	r0, r4
 802038c:	f000 fc97 	bl	8020cbe <_calloc_r>
 8020390:	b160      	cbz	r0, 80203ac <_Balloc+0x64>
 8020392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020396:	e00e      	b.n	80203b6 <_Balloc+0x6e>
 8020398:	2221      	movs	r2, #33	; 0x21
 802039a:	2104      	movs	r1, #4
 802039c:	4620      	mov	r0, r4
 802039e:	f000 fc8e 	bl	8020cbe <_calloc_r>
 80203a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80203a4:	60f0      	str	r0, [r6, #12]
 80203a6:	68db      	ldr	r3, [r3, #12]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d1e4      	bne.n	8020376 <_Balloc+0x2e>
 80203ac:	2000      	movs	r0, #0
 80203ae:	bd70      	pop	{r4, r5, r6, pc}
 80203b0:	6802      	ldr	r2, [r0, #0]
 80203b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80203b6:	2300      	movs	r3, #0
 80203b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80203bc:	e7f7      	b.n	80203ae <_Balloc+0x66>
 80203be:	bf00      	nop
 80203c0:	08029a26 	.word	0x08029a26
 80203c4:	08029b90 	.word	0x08029b90

080203c8 <_Bfree>:
 80203c8:	b570      	push	{r4, r5, r6, lr}
 80203ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80203cc:	4605      	mov	r5, r0
 80203ce:	460c      	mov	r4, r1
 80203d0:	b976      	cbnz	r6, 80203f0 <_Bfree+0x28>
 80203d2:	2010      	movs	r0, #16
 80203d4:	f7ff ff90 	bl	80202f8 <malloc>
 80203d8:	4602      	mov	r2, r0
 80203da:	6268      	str	r0, [r5, #36]	; 0x24
 80203dc:	b920      	cbnz	r0, 80203e8 <_Bfree+0x20>
 80203de:	4b09      	ldr	r3, [pc, #36]	; (8020404 <_Bfree+0x3c>)
 80203e0:	4809      	ldr	r0, [pc, #36]	; (8020408 <_Bfree+0x40>)
 80203e2:	218a      	movs	r1, #138	; 0x8a
 80203e4:	f000 ffce 	bl	8021384 <__assert_func>
 80203e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80203ec:	6006      	str	r6, [r0, #0]
 80203ee:	60c6      	str	r6, [r0, #12]
 80203f0:	b13c      	cbz	r4, 8020402 <_Bfree+0x3a>
 80203f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80203f4:	6862      	ldr	r2, [r4, #4]
 80203f6:	68db      	ldr	r3, [r3, #12]
 80203f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80203fc:	6021      	str	r1, [r4, #0]
 80203fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020402:	bd70      	pop	{r4, r5, r6, pc}
 8020404:	08029a26 	.word	0x08029a26
 8020408:	08029b90 	.word	0x08029b90

0802040c <__multadd>:
 802040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020410:	690e      	ldr	r6, [r1, #16]
 8020412:	4607      	mov	r7, r0
 8020414:	4698      	mov	r8, r3
 8020416:	460c      	mov	r4, r1
 8020418:	f101 0014 	add.w	r0, r1, #20
 802041c:	2300      	movs	r3, #0
 802041e:	6805      	ldr	r5, [r0, #0]
 8020420:	b2a9      	uxth	r1, r5
 8020422:	fb02 8101 	mla	r1, r2, r1, r8
 8020426:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802042a:	0c2d      	lsrs	r5, r5, #16
 802042c:	fb02 c505 	mla	r5, r2, r5, ip
 8020430:	b289      	uxth	r1, r1
 8020432:	3301      	adds	r3, #1
 8020434:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020438:	429e      	cmp	r6, r3
 802043a:	f840 1b04 	str.w	r1, [r0], #4
 802043e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020442:	dcec      	bgt.n	802041e <__multadd+0x12>
 8020444:	f1b8 0f00 	cmp.w	r8, #0
 8020448:	d022      	beq.n	8020490 <__multadd+0x84>
 802044a:	68a3      	ldr	r3, [r4, #8]
 802044c:	42b3      	cmp	r3, r6
 802044e:	dc19      	bgt.n	8020484 <__multadd+0x78>
 8020450:	6861      	ldr	r1, [r4, #4]
 8020452:	4638      	mov	r0, r7
 8020454:	3101      	adds	r1, #1
 8020456:	f7ff ff77 	bl	8020348 <_Balloc>
 802045a:	4605      	mov	r5, r0
 802045c:	b928      	cbnz	r0, 802046a <__multadd+0x5e>
 802045e:	4602      	mov	r2, r0
 8020460:	4b0d      	ldr	r3, [pc, #52]	; (8020498 <__multadd+0x8c>)
 8020462:	480e      	ldr	r0, [pc, #56]	; (802049c <__multadd+0x90>)
 8020464:	21b5      	movs	r1, #181	; 0xb5
 8020466:	f000 ff8d 	bl	8021384 <__assert_func>
 802046a:	6922      	ldr	r2, [r4, #16]
 802046c:	3202      	adds	r2, #2
 802046e:	f104 010c 	add.w	r1, r4, #12
 8020472:	0092      	lsls	r2, r2, #2
 8020474:	300c      	adds	r0, #12
 8020476:	f7ff ff59 	bl	802032c <memcpy>
 802047a:	4621      	mov	r1, r4
 802047c:	4638      	mov	r0, r7
 802047e:	f7ff ffa3 	bl	80203c8 <_Bfree>
 8020482:	462c      	mov	r4, r5
 8020484:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020488:	3601      	adds	r6, #1
 802048a:	f8c3 8014 	str.w	r8, [r3, #20]
 802048e:	6126      	str	r6, [r4, #16]
 8020490:	4620      	mov	r0, r4
 8020492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020496:	bf00      	nop
 8020498:	08029a9c 	.word	0x08029a9c
 802049c:	08029b90 	.word	0x08029b90

080204a0 <__s2b>:
 80204a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204a4:	460c      	mov	r4, r1
 80204a6:	4615      	mov	r5, r2
 80204a8:	461f      	mov	r7, r3
 80204aa:	2209      	movs	r2, #9
 80204ac:	3308      	adds	r3, #8
 80204ae:	4606      	mov	r6, r0
 80204b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80204b4:	2100      	movs	r1, #0
 80204b6:	2201      	movs	r2, #1
 80204b8:	429a      	cmp	r2, r3
 80204ba:	db09      	blt.n	80204d0 <__s2b+0x30>
 80204bc:	4630      	mov	r0, r6
 80204be:	f7ff ff43 	bl	8020348 <_Balloc>
 80204c2:	b940      	cbnz	r0, 80204d6 <__s2b+0x36>
 80204c4:	4602      	mov	r2, r0
 80204c6:	4b19      	ldr	r3, [pc, #100]	; (802052c <__s2b+0x8c>)
 80204c8:	4819      	ldr	r0, [pc, #100]	; (8020530 <__s2b+0x90>)
 80204ca:	21ce      	movs	r1, #206	; 0xce
 80204cc:	f000 ff5a 	bl	8021384 <__assert_func>
 80204d0:	0052      	lsls	r2, r2, #1
 80204d2:	3101      	adds	r1, #1
 80204d4:	e7f0      	b.n	80204b8 <__s2b+0x18>
 80204d6:	9b08      	ldr	r3, [sp, #32]
 80204d8:	6143      	str	r3, [r0, #20]
 80204da:	2d09      	cmp	r5, #9
 80204dc:	f04f 0301 	mov.w	r3, #1
 80204e0:	6103      	str	r3, [r0, #16]
 80204e2:	dd16      	ble.n	8020512 <__s2b+0x72>
 80204e4:	f104 0909 	add.w	r9, r4, #9
 80204e8:	46c8      	mov	r8, r9
 80204ea:	442c      	add	r4, r5
 80204ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80204f0:	4601      	mov	r1, r0
 80204f2:	3b30      	subs	r3, #48	; 0x30
 80204f4:	220a      	movs	r2, #10
 80204f6:	4630      	mov	r0, r6
 80204f8:	f7ff ff88 	bl	802040c <__multadd>
 80204fc:	45a0      	cmp	r8, r4
 80204fe:	d1f5      	bne.n	80204ec <__s2b+0x4c>
 8020500:	f1a5 0408 	sub.w	r4, r5, #8
 8020504:	444c      	add	r4, r9
 8020506:	1b2d      	subs	r5, r5, r4
 8020508:	1963      	adds	r3, r4, r5
 802050a:	42bb      	cmp	r3, r7
 802050c:	db04      	blt.n	8020518 <__s2b+0x78>
 802050e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020512:	340a      	adds	r4, #10
 8020514:	2509      	movs	r5, #9
 8020516:	e7f6      	b.n	8020506 <__s2b+0x66>
 8020518:	f814 3b01 	ldrb.w	r3, [r4], #1
 802051c:	4601      	mov	r1, r0
 802051e:	3b30      	subs	r3, #48	; 0x30
 8020520:	220a      	movs	r2, #10
 8020522:	4630      	mov	r0, r6
 8020524:	f7ff ff72 	bl	802040c <__multadd>
 8020528:	e7ee      	b.n	8020508 <__s2b+0x68>
 802052a:	bf00      	nop
 802052c:	08029a9c 	.word	0x08029a9c
 8020530:	08029b90 	.word	0x08029b90

08020534 <__hi0bits>:
 8020534:	0c03      	lsrs	r3, r0, #16
 8020536:	041b      	lsls	r3, r3, #16
 8020538:	b9d3      	cbnz	r3, 8020570 <__hi0bits+0x3c>
 802053a:	0400      	lsls	r0, r0, #16
 802053c:	2310      	movs	r3, #16
 802053e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020542:	bf04      	itt	eq
 8020544:	0200      	lsleq	r0, r0, #8
 8020546:	3308      	addeq	r3, #8
 8020548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802054c:	bf04      	itt	eq
 802054e:	0100      	lsleq	r0, r0, #4
 8020550:	3304      	addeq	r3, #4
 8020552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020556:	bf04      	itt	eq
 8020558:	0080      	lsleq	r0, r0, #2
 802055a:	3302      	addeq	r3, #2
 802055c:	2800      	cmp	r0, #0
 802055e:	db05      	blt.n	802056c <__hi0bits+0x38>
 8020560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020564:	f103 0301 	add.w	r3, r3, #1
 8020568:	bf08      	it	eq
 802056a:	2320      	moveq	r3, #32
 802056c:	4618      	mov	r0, r3
 802056e:	4770      	bx	lr
 8020570:	2300      	movs	r3, #0
 8020572:	e7e4      	b.n	802053e <__hi0bits+0xa>

08020574 <__lo0bits>:
 8020574:	6803      	ldr	r3, [r0, #0]
 8020576:	f013 0207 	ands.w	r2, r3, #7
 802057a:	4601      	mov	r1, r0
 802057c:	d00b      	beq.n	8020596 <__lo0bits+0x22>
 802057e:	07da      	lsls	r2, r3, #31
 8020580:	d424      	bmi.n	80205cc <__lo0bits+0x58>
 8020582:	0798      	lsls	r0, r3, #30
 8020584:	bf49      	itett	mi
 8020586:	085b      	lsrmi	r3, r3, #1
 8020588:	089b      	lsrpl	r3, r3, #2
 802058a:	2001      	movmi	r0, #1
 802058c:	600b      	strmi	r3, [r1, #0]
 802058e:	bf5c      	itt	pl
 8020590:	600b      	strpl	r3, [r1, #0]
 8020592:	2002      	movpl	r0, #2
 8020594:	4770      	bx	lr
 8020596:	b298      	uxth	r0, r3
 8020598:	b9b0      	cbnz	r0, 80205c8 <__lo0bits+0x54>
 802059a:	0c1b      	lsrs	r3, r3, #16
 802059c:	2010      	movs	r0, #16
 802059e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80205a2:	bf04      	itt	eq
 80205a4:	0a1b      	lsreq	r3, r3, #8
 80205a6:	3008      	addeq	r0, #8
 80205a8:	071a      	lsls	r2, r3, #28
 80205aa:	bf04      	itt	eq
 80205ac:	091b      	lsreq	r3, r3, #4
 80205ae:	3004      	addeq	r0, #4
 80205b0:	079a      	lsls	r2, r3, #30
 80205b2:	bf04      	itt	eq
 80205b4:	089b      	lsreq	r3, r3, #2
 80205b6:	3002      	addeq	r0, #2
 80205b8:	07da      	lsls	r2, r3, #31
 80205ba:	d403      	bmi.n	80205c4 <__lo0bits+0x50>
 80205bc:	085b      	lsrs	r3, r3, #1
 80205be:	f100 0001 	add.w	r0, r0, #1
 80205c2:	d005      	beq.n	80205d0 <__lo0bits+0x5c>
 80205c4:	600b      	str	r3, [r1, #0]
 80205c6:	4770      	bx	lr
 80205c8:	4610      	mov	r0, r2
 80205ca:	e7e8      	b.n	802059e <__lo0bits+0x2a>
 80205cc:	2000      	movs	r0, #0
 80205ce:	4770      	bx	lr
 80205d0:	2020      	movs	r0, #32
 80205d2:	4770      	bx	lr

080205d4 <__i2b>:
 80205d4:	b510      	push	{r4, lr}
 80205d6:	460c      	mov	r4, r1
 80205d8:	2101      	movs	r1, #1
 80205da:	f7ff feb5 	bl	8020348 <_Balloc>
 80205de:	4602      	mov	r2, r0
 80205e0:	b928      	cbnz	r0, 80205ee <__i2b+0x1a>
 80205e2:	4b05      	ldr	r3, [pc, #20]	; (80205f8 <__i2b+0x24>)
 80205e4:	4805      	ldr	r0, [pc, #20]	; (80205fc <__i2b+0x28>)
 80205e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80205ea:	f000 fecb 	bl	8021384 <__assert_func>
 80205ee:	2301      	movs	r3, #1
 80205f0:	6144      	str	r4, [r0, #20]
 80205f2:	6103      	str	r3, [r0, #16]
 80205f4:	bd10      	pop	{r4, pc}
 80205f6:	bf00      	nop
 80205f8:	08029a9c 	.word	0x08029a9c
 80205fc:	08029b90 	.word	0x08029b90

08020600 <__multiply>:
 8020600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020604:	4614      	mov	r4, r2
 8020606:	690a      	ldr	r2, [r1, #16]
 8020608:	6923      	ldr	r3, [r4, #16]
 802060a:	429a      	cmp	r2, r3
 802060c:	bfb8      	it	lt
 802060e:	460b      	movlt	r3, r1
 8020610:	460d      	mov	r5, r1
 8020612:	bfbc      	itt	lt
 8020614:	4625      	movlt	r5, r4
 8020616:	461c      	movlt	r4, r3
 8020618:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802061c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020620:	68ab      	ldr	r3, [r5, #8]
 8020622:	6869      	ldr	r1, [r5, #4]
 8020624:	eb0a 0709 	add.w	r7, sl, r9
 8020628:	42bb      	cmp	r3, r7
 802062a:	b085      	sub	sp, #20
 802062c:	bfb8      	it	lt
 802062e:	3101      	addlt	r1, #1
 8020630:	f7ff fe8a 	bl	8020348 <_Balloc>
 8020634:	b930      	cbnz	r0, 8020644 <__multiply+0x44>
 8020636:	4602      	mov	r2, r0
 8020638:	4b42      	ldr	r3, [pc, #264]	; (8020744 <__multiply+0x144>)
 802063a:	4843      	ldr	r0, [pc, #268]	; (8020748 <__multiply+0x148>)
 802063c:	f240 115d 	movw	r1, #349	; 0x15d
 8020640:	f000 fea0 	bl	8021384 <__assert_func>
 8020644:	f100 0614 	add.w	r6, r0, #20
 8020648:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802064c:	4633      	mov	r3, r6
 802064e:	2200      	movs	r2, #0
 8020650:	4543      	cmp	r3, r8
 8020652:	d31e      	bcc.n	8020692 <__multiply+0x92>
 8020654:	f105 0c14 	add.w	ip, r5, #20
 8020658:	f104 0314 	add.w	r3, r4, #20
 802065c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020660:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020664:	9202      	str	r2, [sp, #8]
 8020666:	ebac 0205 	sub.w	r2, ip, r5
 802066a:	3a15      	subs	r2, #21
 802066c:	f022 0203 	bic.w	r2, r2, #3
 8020670:	3204      	adds	r2, #4
 8020672:	f105 0115 	add.w	r1, r5, #21
 8020676:	458c      	cmp	ip, r1
 8020678:	bf38      	it	cc
 802067a:	2204      	movcc	r2, #4
 802067c:	9201      	str	r2, [sp, #4]
 802067e:	9a02      	ldr	r2, [sp, #8]
 8020680:	9303      	str	r3, [sp, #12]
 8020682:	429a      	cmp	r2, r3
 8020684:	d808      	bhi.n	8020698 <__multiply+0x98>
 8020686:	2f00      	cmp	r7, #0
 8020688:	dc55      	bgt.n	8020736 <__multiply+0x136>
 802068a:	6107      	str	r7, [r0, #16]
 802068c:	b005      	add	sp, #20
 802068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020692:	f843 2b04 	str.w	r2, [r3], #4
 8020696:	e7db      	b.n	8020650 <__multiply+0x50>
 8020698:	f8b3 a000 	ldrh.w	sl, [r3]
 802069c:	f1ba 0f00 	cmp.w	sl, #0
 80206a0:	d020      	beq.n	80206e4 <__multiply+0xe4>
 80206a2:	f105 0e14 	add.w	lr, r5, #20
 80206a6:	46b1      	mov	r9, r6
 80206a8:	2200      	movs	r2, #0
 80206aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80206ae:	f8d9 b000 	ldr.w	fp, [r9]
 80206b2:	b2a1      	uxth	r1, r4
 80206b4:	fa1f fb8b 	uxth.w	fp, fp
 80206b8:	fb0a b101 	mla	r1, sl, r1, fp
 80206bc:	4411      	add	r1, r2
 80206be:	f8d9 2000 	ldr.w	r2, [r9]
 80206c2:	0c24      	lsrs	r4, r4, #16
 80206c4:	0c12      	lsrs	r2, r2, #16
 80206c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80206ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80206ce:	b289      	uxth	r1, r1
 80206d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80206d4:	45f4      	cmp	ip, lr
 80206d6:	f849 1b04 	str.w	r1, [r9], #4
 80206da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80206de:	d8e4      	bhi.n	80206aa <__multiply+0xaa>
 80206e0:	9901      	ldr	r1, [sp, #4]
 80206e2:	5072      	str	r2, [r6, r1]
 80206e4:	9a03      	ldr	r2, [sp, #12]
 80206e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80206ea:	3304      	adds	r3, #4
 80206ec:	f1b9 0f00 	cmp.w	r9, #0
 80206f0:	d01f      	beq.n	8020732 <__multiply+0x132>
 80206f2:	6834      	ldr	r4, [r6, #0]
 80206f4:	f105 0114 	add.w	r1, r5, #20
 80206f8:	46b6      	mov	lr, r6
 80206fa:	f04f 0a00 	mov.w	sl, #0
 80206fe:	880a      	ldrh	r2, [r1, #0]
 8020700:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020704:	fb09 b202 	mla	r2, r9, r2, fp
 8020708:	4492      	add	sl, r2
 802070a:	b2a4      	uxth	r4, r4
 802070c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020710:	f84e 4b04 	str.w	r4, [lr], #4
 8020714:	f851 4b04 	ldr.w	r4, [r1], #4
 8020718:	f8be 2000 	ldrh.w	r2, [lr]
 802071c:	0c24      	lsrs	r4, r4, #16
 802071e:	fb09 2404 	mla	r4, r9, r4, r2
 8020722:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020726:	458c      	cmp	ip, r1
 8020728:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802072c:	d8e7      	bhi.n	80206fe <__multiply+0xfe>
 802072e:	9a01      	ldr	r2, [sp, #4]
 8020730:	50b4      	str	r4, [r6, r2]
 8020732:	3604      	adds	r6, #4
 8020734:	e7a3      	b.n	802067e <__multiply+0x7e>
 8020736:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802073a:	2b00      	cmp	r3, #0
 802073c:	d1a5      	bne.n	802068a <__multiply+0x8a>
 802073e:	3f01      	subs	r7, #1
 8020740:	e7a1      	b.n	8020686 <__multiply+0x86>
 8020742:	bf00      	nop
 8020744:	08029a9c 	.word	0x08029a9c
 8020748:	08029b90 	.word	0x08029b90

0802074c <__pow5mult>:
 802074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020750:	4615      	mov	r5, r2
 8020752:	f012 0203 	ands.w	r2, r2, #3
 8020756:	4606      	mov	r6, r0
 8020758:	460f      	mov	r7, r1
 802075a:	d007      	beq.n	802076c <__pow5mult+0x20>
 802075c:	4c25      	ldr	r4, [pc, #148]	; (80207f4 <__pow5mult+0xa8>)
 802075e:	3a01      	subs	r2, #1
 8020760:	2300      	movs	r3, #0
 8020762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020766:	f7ff fe51 	bl	802040c <__multadd>
 802076a:	4607      	mov	r7, r0
 802076c:	10ad      	asrs	r5, r5, #2
 802076e:	d03d      	beq.n	80207ec <__pow5mult+0xa0>
 8020770:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020772:	b97c      	cbnz	r4, 8020794 <__pow5mult+0x48>
 8020774:	2010      	movs	r0, #16
 8020776:	f7ff fdbf 	bl	80202f8 <malloc>
 802077a:	4602      	mov	r2, r0
 802077c:	6270      	str	r0, [r6, #36]	; 0x24
 802077e:	b928      	cbnz	r0, 802078c <__pow5mult+0x40>
 8020780:	4b1d      	ldr	r3, [pc, #116]	; (80207f8 <__pow5mult+0xac>)
 8020782:	481e      	ldr	r0, [pc, #120]	; (80207fc <__pow5mult+0xb0>)
 8020784:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020788:	f000 fdfc 	bl	8021384 <__assert_func>
 802078c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020790:	6004      	str	r4, [r0, #0]
 8020792:	60c4      	str	r4, [r0, #12]
 8020794:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802079c:	b94c      	cbnz	r4, 80207b2 <__pow5mult+0x66>
 802079e:	f240 2171 	movw	r1, #625	; 0x271
 80207a2:	4630      	mov	r0, r6
 80207a4:	f7ff ff16 	bl	80205d4 <__i2b>
 80207a8:	2300      	movs	r3, #0
 80207aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80207ae:	4604      	mov	r4, r0
 80207b0:	6003      	str	r3, [r0, #0]
 80207b2:	f04f 0900 	mov.w	r9, #0
 80207b6:	07eb      	lsls	r3, r5, #31
 80207b8:	d50a      	bpl.n	80207d0 <__pow5mult+0x84>
 80207ba:	4639      	mov	r1, r7
 80207bc:	4622      	mov	r2, r4
 80207be:	4630      	mov	r0, r6
 80207c0:	f7ff ff1e 	bl	8020600 <__multiply>
 80207c4:	4639      	mov	r1, r7
 80207c6:	4680      	mov	r8, r0
 80207c8:	4630      	mov	r0, r6
 80207ca:	f7ff fdfd 	bl	80203c8 <_Bfree>
 80207ce:	4647      	mov	r7, r8
 80207d0:	106d      	asrs	r5, r5, #1
 80207d2:	d00b      	beq.n	80207ec <__pow5mult+0xa0>
 80207d4:	6820      	ldr	r0, [r4, #0]
 80207d6:	b938      	cbnz	r0, 80207e8 <__pow5mult+0x9c>
 80207d8:	4622      	mov	r2, r4
 80207da:	4621      	mov	r1, r4
 80207dc:	4630      	mov	r0, r6
 80207de:	f7ff ff0f 	bl	8020600 <__multiply>
 80207e2:	6020      	str	r0, [r4, #0]
 80207e4:	f8c0 9000 	str.w	r9, [r0]
 80207e8:	4604      	mov	r4, r0
 80207ea:	e7e4      	b.n	80207b6 <__pow5mult+0x6a>
 80207ec:	4638      	mov	r0, r7
 80207ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207f2:	bf00      	nop
 80207f4:	08029ce0 	.word	0x08029ce0
 80207f8:	08029a26 	.word	0x08029a26
 80207fc:	08029b90 	.word	0x08029b90

08020800 <__lshift>:
 8020800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020804:	460c      	mov	r4, r1
 8020806:	6849      	ldr	r1, [r1, #4]
 8020808:	6923      	ldr	r3, [r4, #16]
 802080a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802080e:	68a3      	ldr	r3, [r4, #8]
 8020810:	4607      	mov	r7, r0
 8020812:	4691      	mov	r9, r2
 8020814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020818:	f108 0601 	add.w	r6, r8, #1
 802081c:	42b3      	cmp	r3, r6
 802081e:	db0b      	blt.n	8020838 <__lshift+0x38>
 8020820:	4638      	mov	r0, r7
 8020822:	f7ff fd91 	bl	8020348 <_Balloc>
 8020826:	4605      	mov	r5, r0
 8020828:	b948      	cbnz	r0, 802083e <__lshift+0x3e>
 802082a:	4602      	mov	r2, r0
 802082c:	4b28      	ldr	r3, [pc, #160]	; (80208d0 <__lshift+0xd0>)
 802082e:	4829      	ldr	r0, [pc, #164]	; (80208d4 <__lshift+0xd4>)
 8020830:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020834:	f000 fda6 	bl	8021384 <__assert_func>
 8020838:	3101      	adds	r1, #1
 802083a:	005b      	lsls	r3, r3, #1
 802083c:	e7ee      	b.n	802081c <__lshift+0x1c>
 802083e:	2300      	movs	r3, #0
 8020840:	f100 0114 	add.w	r1, r0, #20
 8020844:	f100 0210 	add.w	r2, r0, #16
 8020848:	4618      	mov	r0, r3
 802084a:	4553      	cmp	r3, sl
 802084c:	db33      	blt.n	80208b6 <__lshift+0xb6>
 802084e:	6920      	ldr	r0, [r4, #16]
 8020850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020854:	f104 0314 	add.w	r3, r4, #20
 8020858:	f019 091f 	ands.w	r9, r9, #31
 802085c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020864:	d02b      	beq.n	80208be <__lshift+0xbe>
 8020866:	f1c9 0e20 	rsb	lr, r9, #32
 802086a:	468a      	mov	sl, r1
 802086c:	2200      	movs	r2, #0
 802086e:	6818      	ldr	r0, [r3, #0]
 8020870:	fa00 f009 	lsl.w	r0, r0, r9
 8020874:	4302      	orrs	r2, r0
 8020876:	f84a 2b04 	str.w	r2, [sl], #4
 802087a:	f853 2b04 	ldr.w	r2, [r3], #4
 802087e:	459c      	cmp	ip, r3
 8020880:	fa22 f20e 	lsr.w	r2, r2, lr
 8020884:	d8f3      	bhi.n	802086e <__lshift+0x6e>
 8020886:	ebac 0304 	sub.w	r3, ip, r4
 802088a:	3b15      	subs	r3, #21
 802088c:	f023 0303 	bic.w	r3, r3, #3
 8020890:	3304      	adds	r3, #4
 8020892:	f104 0015 	add.w	r0, r4, #21
 8020896:	4584      	cmp	ip, r0
 8020898:	bf38      	it	cc
 802089a:	2304      	movcc	r3, #4
 802089c:	50ca      	str	r2, [r1, r3]
 802089e:	b10a      	cbz	r2, 80208a4 <__lshift+0xa4>
 80208a0:	f108 0602 	add.w	r6, r8, #2
 80208a4:	3e01      	subs	r6, #1
 80208a6:	4638      	mov	r0, r7
 80208a8:	612e      	str	r6, [r5, #16]
 80208aa:	4621      	mov	r1, r4
 80208ac:	f7ff fd8c 	bl	80203c8 <_Bfree>
 80208b0:	4628      	mov	r0, r5
 80208b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80208ba:	3301      	adds	r3, #1
 80208bc:	e7c5      	b.n	802084a <__lshift+0x4a>
 80208be:	3904      	subs	r1, #4
 80208c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80208c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80208c8:	459c      	cmp	ip, r3
 80208ca:	d8f9      	bhi.n	80208c0 <__lshift+0xc0>
 80208cc:	e7ea      	b.n	80208a4 <__lshift+0xa4>
 80208ce:	bf00      	nop
 80208d0:	08029a9c 	.word	0x08029a9c
 80208d4:	08029b90 	.word	0x08029b90

080208d8 <__mcmp>:
 80208d8:	b530      	push	{r4, r5, lr}
 80208da:	6902      	ldr	r2, [r0, #16]
 80208dc:	690c      	ldr	r4, [r1, #16]
 80208de:	1b12      	subs	r2, r2, r4
 80208e0:	d10e      	bne.n	8020900 <__mcmp+0x28>
 80208e2:	f100 0314 	add.w	r3, r0, #20
 80208e6:	3114      	adds	r1, #20
 80208e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80208ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80208f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80208f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80208f8:	42a5      	cmp	r5, r4
 80208fa:	d003      	beq.n	8020904 <__mcmp+0x2c>
 80208fc:	d305      	bcc.n	802090a <__mcmp+0x32>
 80208fe:	2201      	movs	r2, #1
 8020900:	4610      	mov	r0, r2
 8020902:	bd30      	pop	{r4, r5, pc}
 8020904:	4283      	cmp	r3, r0
 8020906:	d3f3      	bcc.n	80208f0 <__mcmp+0x18>
 8020908:	e7fa      	b.n	8020900 <__mcmp+0x28>
 802090a:	f04f 32ff 	mov.w	r2, #4294967295
 802090e:	e7f7      	b.n	8020900 <__mcmp+0x28>

08020910 <__mdiff>:
 8020910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020914:	460c      	mov	r4, r1
 8020916:	4606      	mov	r6, r0
 8020918:	4611      	mov	r1, r2
 802091a:	4620      	mov	r0, r4
 802091c:	4617      	mov	r7, r2
 802091e:	f7ff ffdb 	bl	80208d8 <__mcmp>
 8020922:	1e05      	subs	r5, r0, #0
 8020924:	d110      	bne.n	8020948 <__mdiff+0x38>
 8020926:	4629      	mov	r1, r5
 8020928:	4630      	mov	r0, r6
 802092a:	f7ff fd0d 	bl	8020348 <_Balloc>
 802092e:	b930      	cbnz	r0, 802093e <__mdiff+0x2e>
 8020930:	4b39      	ldr	r3, [pc, #228]	; (8020a18 <__mdiff+0x108>)
 8020932:	4602      	mov	r2, r0
 8020934:	f240 2132 	movw	r1, #562	; 0x232
 8020938:	4838      	ldr	r0, [pc, #224]	; (8020a1c <__mdiff+0x10c>)
 802093a:	f000 fd23 	bl	8021384 <__assert_func>
 802093e:	2301      	movs	r3, #1
 8020940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020948:	bfa4      	itt	ge
 802094a:	463b      	movge	r3, r7
 802094c:	4627      	movge	r7, r4
 802094e:	4630      	mov	r0, r6
 8020950:	6879      	ldr	r1, [r7, #4]
 8020952:	bfa6      	itte	ge
 8020954:	461c      	movge	r4, r3
 8020956:	2500      	movge	r5, #0
 8020958:	2501      	movlt	r5, #1
 802095a:	f7ff fcf5 	bl	8020348 <_Balloc>
 802095e:	b920      	cbnz	r0, 802096a <__mdiff+0x5a>
 8020960:	4b2d      	ldr	r3, [pc, #180]	; (8020a18 <__mdiff+0x108>)
 8020962:	4602      	mov	r2, r0
 8020964:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020968:	e7e6      	b.n	8020938 <__mdiff+0x28>
 802096a:	693e      	ldr	r6, [r7, #16]
 802096c:	60c5      	str	r5, [r0, #12]
 802096e:	6925      	ldr	r5, [r4, #16]
 8020970:	f107 0114 	add.w	r1, r7, #20
 8020974:	f104 0914 	add.w	r9, r4, #20
 8020978:	f100 0e14 	add.w	lr, r0, #20
 802097c:	f107 0210 	add.w	r2, r7, #16
 8020980:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020984:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020988:	46f2      	mov	sl, lr
 802098a:	2700      	movs	r7, #0
 802098c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020990:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020994:	fa1f f883 	uxth.w	r8, r3
 8020998:	fa17 f78b 	uxtah	r7, r7, fp
 802099c:	0c1b      	lsrs	r3, r3, #16
 802099e:	eba7 0808 	sub.w	r8, r7, r8
 80209a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80209a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80209aa:	fa1f f888 	uxth.w	r8, r8
 80209ae:	141f      	asrs	r7, r3, #16
 80209b0:	454d      	cmp	r5, r9
 80209b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80209b6:	f84a 3b04 	str.w	r3, [sl], #4
 80209ba:	d8e7      	bhi.n	802098c <__mdiff+0x7c>
 80209bc:	1b2b      	subs	r3, r5, r4
 80209be:	3b15      	subs	r3, #21
 80209c0:	f023 0303 	bic.w	r3, r3, #3
 80209c4:	3304      	adds	r3, #4
 80209c6:	3415      	adds	r4, #21
 80209c8:	42a5      	cmp	r5, r4
 80209ca:	bf38      	it	cc
 80209cc:	2304      	movcc	r3, #4
 80209ce:	4419      	add	r1, r3
 80209d0:	4473      	add	r3, lr
 80209d2:	469e      	mov	lr, r3
 80209d4:	460d      	mov	r5, r1
 80209d6:	4565      	cmp	r5, ip
 80209d8:	d30e      	bcc.n	80209f8 <__mdiff+0xe8>
 80209da:	f10c 0203 	add.w	r2, ip, #3
 80209de:	1a52      	subs	r2, r2, r1
 80209e0:	f022 0203 	bic.w	r2, r2, #3
 80209e4:	3903      	subs	r1, #3
 80209e6:	458c      	cmp	ip, r1
 80209e8:	bf38      	it	cc
 80209ea:	2200      	movcc	r2, #0
 80209ec:	441a      	add	r2, r3
 80209ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80209f2:	b17b      	cbz	r3, 8020a14 <__mdiff+0x104>
 80209f4:	6106      	str	r6, [r0, #16]
 80209f6:	e7a5      	b.n	8020944 <__mdiff+0x34>
 80209f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80209fc:	fa17 f488 	uxtah	r4, r7, r8
 8020a00:	1422      	asrs	r2, r4, #16
 8020a02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020a06:	b2a4      	uxth	r4, r4
 8020a08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020a0c:	f84e 4b04 	str.w	r4, [lr], #4
 8020a10:	1417      	asrs	r7, r2, #16
 8020a12:	e7e0      	b.n	80209d6 <__mdiff+0xc6>
 8020a14:	3e01      	subs	r6, #1
 8020a16:	e7ea      	b.n	80209ee <__mdiff+0xde>
 8020a18:	08029a9c 	.word	0x08029a9c
 8020a1c:	08029b90 	.word	0x08029b90

08020a20 <__ulp>:
 8020a20:	b082      	sub	sp, #8
 8020a22:	ed8d 0b00 	vstr	d0, [sp]
 8020a26:	9b01      	ldr	r3, [sp, #4]
 8020a28:	4912      	ldr	r1, [pc, #72]	; (8020a74 <__ulp+0x54>)
 8020a2a:	4019      	ands	r1, r3
 8020a2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020a30:	2900      	cmp	r1, #0
 8020a32:	dd05      	ble.n	8020a40 <__ulp+0x20>
 8020a34:	2200      	movs	r2, #0
 8020a36:	460b      	mov	r3, r1
 8020a38:	ec43 2b10 	vmov	d0, r2, r3
 8020a3c:	b002      	add	sp, #8
 8020a3e:	4770      	bx	lr
 8020a40:	4249      	negs	r1, r1
 8020a42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8020a46:	ea4f 5021 	mov.w	r0, r1, asr #20
 8020a4a:	f04f 0200 	mov.w	r2, #0
 8020a4e:	f04f 0300 	mov.w	r3, #0
 8020a52:	da04      	bge.n	8020a5e <__ulp+0x3e>
 8020a54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8020a58:	fa41 f300 	asr.w	r3, r1, r0
 8020a5c:	e7ec      	b.n	8020a38 <__ulp+0x18>
 8020a5e:	f1a0 0114 	sub.w	r1, r0, #20
 8020a62:	291e      	cmp	r1, #30
 8020a64:	bfda      	itte	le
 8020a66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8020a6a:	fa20 f101 	lsrle.w	r1, r0, r1
 8020a6e:	2101      	movgt	r1, #1
 8020a70:	460a      	mov	r2, r1
 8020a72:	e7e1      	b.n	8020a38 <__ulp+0x18>
 8020a74:	7ff00000 	.word	0x7ff00000

08020a78 <__b2d>:
 8020a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a7a:	6905      	ldr	r5, [r0, #16]
 8020a7c:	f100 0714 	add.w	r7, r0, #20
 8020a80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8020a84:	1f2e      	subs	r6, r5, #4
 8020a86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8020a8a:	4620      	mov	r0, r4
 8020a8c:	f7ff fd52 	bl	8020534 <__hi0bits>
 8020a90:	f1c0 0320 	rsb	r3, r0, #32
 8020a94:	280a      	cmp	r0, #10
 8020a96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020b14 <__b2d+0x9c>
 8020a9a:	600b      	str	r3, [r1, #0]
 8020a9c:	dc14      	bgt.n	8020ac8 <__b2d+0x50>
 8020a9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8020aa2:	fa24 f10e 	lsr.w	r1, r4, lr
 8020aa6:	42b7      	cmp	r7, r6
 8020aa8:	ea41 030c 	orr.w	r3, r1, ip
 8020aac:	bf34      	ite	cc
 8020aae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020ab2:	2100      	movcs	r1, #0
 8020ab4:	3015      	adds	r0, #21
 8020ab6:	fa04 f000 	lsl.w	r0, r4, r0
 8020aba:	fa21 f10e 	lsr.w	r1, r1, lr
 8020abe:	ea40 0201 	orr.w	r2, r0, r1
 8020ac2:	ec43 2b10 	vmov	d0, r2, r3
 8020ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ac8:	42b7      	cmp	r7, r6
 8020aca:	bf3a      	itte	cc
 8020acc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020ad0:	f1a5 0608 	subcc.w	r6, r5, #8
 8020ad4:	2100      	movcs	r1, #0
 8020ad6:	380b      	subs	r0, #11
 8020ad8:	d017      	beq.n	8020b0a <__b2d+0x92>
 8020ada:	f1c0 0c20 	rsb	ip, r0, #32
 8020ade:	fa04 f500 	lsl.w	r5, r4, r0
 8020ae2:	42be      	cmp	r6, r7
 8020ae4:	fa21 f40c 	lsr.w	r4, r1, ip
 8020ae8:	ea45 0504 	orr.w	r5, r5, r4
 8020aec:	bf8c      	ite	hi
 8020aee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020af2:	2400      	movls	r4, #0
 8020af4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8020af8:	fa01 f000 	lsl.w	r0, r1, r0
 8020afc:	fa24 f40c 	lsr.w	r4, r4, ip
 8020b00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020b04:	ea40 0204 	orr.w	r2, r0, r4
 8020b08:	e7db      	b.n	8020ac2 <__b2d+0x4a>
 8020b0a:	ea44 030c 	orr.w	r3, r4, ip
 8020b0e:	460a      	mov	r2, r1
 8020b10:	e7d7      	b.n	8020ac2 <__b2d+0x4a>
 8020b12:	bf00      	nop
 8020b14:	3ff00000 	.word	0x3ff00000

08020b18 <__d2b>:
 8020b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020b1c:	4689      	mov	r9, r1
 8020b1e:	2101      	movs	r1, #1
 8020b20:	ec57 6b10 	vmov	r6, r7, d0
 8020b24:	4690      	mov	r8, r2
 8020b26:	f7ff fc0f 	bl	8020348 <_Balloc>
 8020b2a:	4604      	mov	r4, r0
 8020b2c:	b930      	cbnz	r0, 8020b3c <__d2b+0x24>
 8020b2e:	4602      	mov	r2, r0
 8020b30:	4b25      	ldr	r3, [pc, #148]	; (8020bc8 <__d2b+0xb0>)
 8020b32:	4826      	ldr	r0, [pc, #152]	; (8020bcc <__d2b+0xb4>)
 8020b34:	f240 310a 	movw	r1, #778	; 0x30a
 8020b38:	f000 fc24 	bl	8021384 <__assert_func>
 8020b3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020b44:	bb35      	cbnz	r5, 8020b94 <__d2b+0x7c>
 8020b46:	2e00      	cmp	r6, #0
 8020b48:	9301      	str	r3, [sp, #4]
 8020b4a:	d028      	beq.n	8020b9e <__d2b+0x86>
 8020b4c:	4668      	mov	r0, sp
 8020b4e:	9600      	str	r6, [sp, #0]
 8020b50:	f7ff fd10 	bl	8020574 <__lo0bits>
 8020b54:	9900      	ldr	r1, [sp, #0]
 8020b56:	b300      	cbz	r0, 8020b9a <__d2b+0x82>
 8020b58:	9a01      	ldr	r2, [sp, #4]
 8020b5a:	f1c0 0320 	rsb	r3, r0, #32
 8020b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8020b62:	430b      	orrs	r3, r1
 8020b64:	40c2      	lsrs	r2, r0
 8020b66:	6163      	str	r3, [r4, #20]
 8020b68:	9201      	str	r2, [sp, #4]
 8020b6a:	9b01      	ldr	r3, [sp, #4]
 8020b6c:	61a3      	str	r3, [r4, #24]
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	bf14      	ite	ne
 8020b72:	2202      	movne	r2, #2
 8020b74:	2201      	moveq	r2, #1
 8020b76:	6122      	str	r2, [r4, #16]
 8020b78:	b1d5      	cbz	r5, 8020bb0 <__d2b+0x98>
 8020b7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020b7e:	4405      	add	r5, r0
 8020b80:	f8c9 5000 	str.w	r5, [r9]
 8020b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020b88:	f8c8 0000 	str.w	r0, [r8]
 8020b8c:	4620      	mov	r0, r4
 8020b8e:	b003      	add	sp, #12
 8020b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020b98:	e7d5      	b.n	8020b46 <__d2b+0x2e>
 8020b9a:	6161      	str	r1, [r4, #20]
 8020b9c:	e7e5      	b.n	8020b6a <__d2b+0x52>
 8020b9e:	a801      	add	r0, sp, #4
 8020ba0:	f7ff fce8 	bl	8020574 <__lo0bits>
 8020ba4:	9b01      	ldr	r3, [sp, #4]
 8020ba6:	6163      	str	r3, [r4, #20]
 8020ba8:	2201      	movs	r2, #1
 8020baa:	6122      	str	r2, [r4, #16]
 8020bac:	3020      	adds	r0, #32
 8020bae:	e7e3      	b.n	8020b78 <__d2b+0x60>
 8020bb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020bb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020bb8:	f8c9 0000 	str.w	r0, [r9]
 8020bbc:	6918      	ldr	r0, [r3, #16]
 8020bbe:	f7ff fcb9 	bl	8020534 <__hi0bits>
 8020bc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020bc6:	e7df      	b.n	8020b88 <__d2b+0x70>
 8020bc8:	08029a9c 	.word	0x08029a9c
 8020bcc:	08029b90 	.word	0x08029b90

08020bd0 <__ratio>:
 8020bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bd4:	4688      	mov	r8, r1
 8020bd6:	4669      	mov	r1, sp
 8020bd8:	4681      	mov	r9, r0
 8020bda:	f7ff ff4d 	bl	8020a78 <__b2d>
 8020bde:	a901      	add	r1, sp, #4
 8020be0:	4640      	mov	r0, r8
 8020be2:	ec55 4b10 	vmov	r4, r5, d0
 8020be6:	f7ff ff47 	bl	8020a78 <__b2d>
 8020bea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020bee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020bf2:	eba3 0c02 	sub.w	ip, r3, r2
 8020bf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020bfa:	1a9b      	subs	r3, r3, r2
 8020bfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020c00:	ec51 0b10 	vmov	r0, r1, d0
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	bfd6      	itet	le
 8020c08:	460a      	movle	r2, r1
 8020c0a:	462a      	movgt	r2, r5
 8020c0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020c10:	468b      	mov	fp, r1
 8020c12:	462f      	mov	r7, r5
 8020c14:	bfd4      	ite	le
 8020c16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020c1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020c1e:	4620      	mov	r0, r4
 8020c20:	ee10 2a10 	vmov	r2, s0
 8020c24:	465b      	mov	r3, fp
 8020c26:	4639      	mov	r1, r7
 8020c28:	f7df fe20 	bl	800086c <__aeabi_ddiv>
 8020c2c:	ec41 0b10 	vmov	d0, r0, r1
 8020c30:	b003      	add	sp, #12
 8020c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c36 <__copybits>:
 8020c36:	3901      	subs	r1, #1
 8020c38:	b570      	push	{r4, r5, r6, lr}
 8020c3a:	1149      	asrs	r1, r1, #5
 8020c3c:	6914      	ldr	r4, [r2, #16]
 8020c3e:	3101      	adds	r1, #1
 8020c40:	f102 0314 	add.w	r3, r2, #20
 8020c44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020c48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020c4c:	1f05      	subs	r5, r0, #4
 8020c4e:	42a3      	cmp	r3, r4
 8020c50:	d30c      	bcc.n	8020c6c <__copybits+0x36>
 8020c52:	1aa3      	subs	r3, r4, r2
 8020c54:	3b11      	subs	r3, #17
 8020c56:	f023 0303 	bic.w	r3, r3, #3
 8020c5a:	3211      	adds	r2, #17
 8020c5c:	42a2      	cmp	r2, r4
 8020c5e:	bf88      	it	hi
 8020c60:	2300      	movhi	r3, #0
 8020c62:	4418      	add	r0, r3
 8020c64:	2300      	movs	r3, #0
 8020c66:	4288      	cmp	r0, r1
 8020c68:	d305      	bcc.n	8020c76 <__copybits+0x40>
 8020c6a:	bd70      	pop	{r4, r5, r6, pc}
 8020c6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8020c70:	f845 6f04 	str.w	r6, [r5, #4]!
 8020c74:	e7eb      	b.n	8020c4e <__copybits+0x18>
 8020c76:	f840 3b04 	str.w	r3, [r0], #4
 8020c7a:	e7f4      	b.n	8020c66 <__copybits+0x30>

08020c7c <__any_on>:
 8020c7c:	f100 0214 	add.w	r2, r0, #20
 8020c80:	6900      	ldr	r0, [r0, #16]
 8020c82:	114b      	asrs	r3, r1, #5
 8020c84:	4298      	cmp	r0, r3
 8020c86:	b510      	push	{r4, lr}
 8020c88:	db11      	blt.n	8020cae <__any_on+0x32>
 8020c8a:	dd0a      	ble.n	8020ca2 <__any_on+0x26>
 8020c8c:	f011 011f 	ands.w	r1, r1, #31
 8020c90:	d007      	beq.n	8020ca2 <__any_on+0x26>
 8020c92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020c96:	fa24 f001 	lsr.w	r0, r4, r1
 8020c9a:	fa00 f101 	lsl.w	r1, r0, r1
 8020c9e:	428c      	cmp	r4, r1
 8020ca0:	d10b      	bne.n	8020cba <__any_on+0x3e>
 8020ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020ca6:	4293      	cmp	r3, r2
 8020ca8:	d803      	bhi.n	8020cb2 <__any_on+0x36>
 8020caa:	2000      	movs	r0, #0
 8020cac:	bd10      	pop	{r4, pc}
 8020cae:	4603      	mov	r3, r0
 8020cb0:	e7f7      	b.n	8020ca2 <__any_on+0x26>
 8020cb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020cb6:	2900      	cmp	r1, #0
 8020cb8:	d0f5      	beq.n	8020ca6 <__any_on+0x2a>
 8020cba:	2001      	movs	r0, #1
 8020cbc:	e7f6      	b.n	8020cac <__any_on+0x30>

08020cbe <_calloc_r>:
 8020cbe:	b513      	push	{r0, r1, r4, lr}
 8020cc0:	434a      	muls	r2, r1
 8020cc2:	4611      	mov	r1, r2
 8020cc4:	9201      	str	r2, [sp, #4]
 8020cc6:	f000 f859 	bl	8020d7c <_malloc_r>
 8020cca:	4604      	mov	r4, r0
 8020ccc:	b118      	cbz	r0, 8020cd6 <_calloc_r+0x18>
 8020cce:	9a01      	ldr	r2, [sp, #4]
 8020cd0:	2100      	movs	r1, #0
 8020cd2:	f7fc fabd 	bl	801d250 <memset>
 8020cd6:	4620      	mov	r0, r4
 8020cd8:	b002      	add	sp, #8
 8020cda:	bd10      	pop	{r4, pc}

08020cdc <_free_r>:
 8020cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020cde:	2900      	cmp	r1, #0
 8020ce0:	d048      	beq.n	8020d74 <_free_r+0x98>
 8020ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ce6:	9001      	str	r0, [sp, #4]
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	f1a1 0404 	sub.w	r4, r1, #4
 8020cee:	bfb8      	it	lt
 8020cf0:	18e4      	addlt	r4, r4, r3
 8020cf2:	f000 fcd9 	bl	80216a8 <__malloc_lock>
 8020cf6:	4a20      	ldr	r2, [pc, #128]	; (8020d78 <_free_r+0x9c>)
 8020cf8:	9801      	ldr	r0, [sp, #4]
 8020cfa:	6813      	ldr	r3, [r2, #0]
 8020cfc:	4615      	mov	r5, r2
 8020cfe:	b933      	cbnz	r3, 8020d0e <_free_r+0x32>
 8020d00:	6063      	str	r3, [r4, #4]
 8020d02:	6014      	str	r4, [r2, #0]
 8020d04:	b003      	add	sp, #12
 8020d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020d0a:	f000 bcd3 	b.w	80216b4 <__malloc_unlock>
 8020d0e:	42a3      	cmp	r3, r4
 8020d10:	d90b      	bls.n	8020d2a <_free_r+0x4e>
 8020d12:	6821      	ldr	r1, [r4, #0]
 8020d14:	1862      	adds	r2, r4, r1
 8020d16:	4293      	cmp	r3, r2
 8020d18:	bf04      	itt	eq
 8020d1a:	681a      	ldreq	r2, [r3, #0]
 8020d1c:	685b      	ldreq	r3, [r3, #4]
 8020d1e:	6063      	str	r3, [r4, #4]
 8020d20:	bf04      	itt	eq
 8020d22:	1852      	addeq	r2, r2, r1
 8020d24:	6022      	streq	r2, [r4, #0]
 8020d26:	602c      	str	r4, [r5, #0]
 8020d28:	e7ec      	b.n	8020d04 <_free_r+0x28>
 8020d2a:	461a      	mov	r2, r3
 8020d2c:	685b      	ldr	r3, [r3, #4]
 8020d2e:	b10b      	cbz	r3, 8020d34 <_free_r+0x58>
 8020d30:	42a3      	cmp	r3, r4
 8020d32:	d9fa      	bls.n	8020d2a <_free_r+0x4e>
 8020d34:	6811      	ldr	r1, [r2, #0]
 8020d36:	1855      	adds	r5, r2, r1
 8020d38:	42a5      	cmp	r5, r4
 8020d3a:	d10b      	bne.n	8020d54 <_free_r+0x78>
 8020d3c:	6824      	ldr	r4, [r4, #0]
 8020d3e:	4421      	add	r1, r4
 8020d40:	1854      	adds	r4, r2, r1
 8020d42:	42a3      	cmp	r3, r4
 8020d44:	6011      	str	r1, [r2, #0]
 8020d46:	d1dd      	bne.n	8020d04 <_free_r+0x28>
 8020d48:	681c      	ldr	r4, [r3, #0]
 8020d4a:	685b      	ldr	r3, [r3, #4]
 8020d4c:	6053      	str	r3, [r2, #4]
 8020d4e:	4421      	add	r1, r4
 8020d50:	6011      	str	r1, [r2, #0]
 8020d52:	e7d7      	b.n	8020d04 <_free_r+0x28>
 8020d54:	d902      	bls.n	8020d5c <_free_r+0x80>
 8020d56:	230c      	movs	r3, #12
 8020d58:	6003      	str	r3, [r0, #0]
 8020d5a:	e7d3      	b.n	8020d04 <_free_r+0x28>
 8020d5c:	6825      	ldr	r5, [r4, #0]
 8020d5e:	1961      	adds	r1, r4, r5
 8020d60:	428b      	cmp	r3, r1
 8020d62:	bf04      	itt	eq
 8020d64:	6819      	ldreq	r1, [r3, #0]
 8020d66:	685b      	ldreq	r3, [r3, #4]
 8020d68:	6063      	str	r3, [r4, #4]
 8020d6a:	bf04      	itt	eq
 8020d6c:	1949      	addeq	r1, r1, r5
 8020d6e:	6021      	streq	r1, [r4, #0]
 8020d70:	6054      	str	r4, [r2, #4]
 8020d72:	e7c7      	b.n	8020d04 <_free_r+0x28>
 8020d74:	b003      	add	sp, #12
 8020d76:	bd30      	pop	{r4, r5, pc}
 8020d78:	20001ec4 	.word	0x20001ec4

08020d7c <_malloc_r>:
 8020d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d7e:	1ccd      	adds	r5, r1, #3
 8020d80:	f025 0503 	bic.w	r5, r5, #3
 8020d84:	3508      	adds	r5, #8
 8020d86:	2d0c      	cmp	r5, #12
 8020d88:	bf38      	it	cc
 8020d8a:	250c      	movcc	r5, #12
 8020d8c:	2d00      	cmp	r5, #0
 8020d8e:	4606      	mov	r6, r0
 8020d90:	db01      	blt.n	8020d96 <_malloc_r+0x1a>
 8020d92:	42a9      	cmp	r1, r5
 8020d94:	d903      	bls.n	8020d9e <_malloc_r+0x22>
 8020d96:	230c      	movs	r3, #12
 8020d98:	6033      	str	r3, [r6, #0]
 8020d9a:	2000      	movs	r0, #0
 8020d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d9e:	f000 fc83 	bl	80216a8 <__malloc_lock>
 8020da2:	4921      	ldr	r1, [pc, #132]	; (8020e28 <_malloc_r+0xac>)
 8020da4:	680a      	ldr	r2, [r1, #0]
 8020da6:	4614      	mov	r4, r2
 8020da8:	b99c      	cbnz	r4, 8020dd2 <_malloc_r+0x56>
 8020daa:	4f20      	ldr	r7, [pc, #128]	; (8020e2c <_malloc_r+0xb0>)
 8020dac:	683b      	ldr	r3, [r7, #0]
 8020dae:	b923      	cbnz	r3, 8020dba <_malloc_r+0x3e>
 8020db0:	4621      	mov	r1, r4
 8020db2:	4630      	mov	r0, r6
 8020db4:	f000 f9a0 	bl	80210f8 <_sbrk_r>
 8020db8:	6038      	str	r0, [r7, #0]
 8020dba:	4629      	mov	r1, r5
 8020dbc:	4630      	mov	r0, r6
 8020dbe:	f000 f99b 	bl	80210f8 <_sbrk_r>
 8020dc2:	1c43      	adds	r3, r0, #1
 8020dc4:	d123      	bne.n	8020e0e <_malloc_r+0x92>
 8020dc6:	230c      	movs	r3, #12
 8020dc8:	6033      	str	r3, [r6, #0]
 8020dca:	4630      	mov	r0, r6
 8020dcc:	f000 fc72 	bl	80216b4 <__malloc_unlock>
 8020dd0:	e7e3      	b.n	8020d9a <_malloc_r+0x1e>
 8020dd2:	6823      	ldr	r3, [r4, #0]
 8020dd4:	1b5b      	subs	r3, r3, r5
 8020dd6:	d417      	bmi.n	8020e08 <_malloc_r+0x8c>
 8020dd8:	2b0b      	cmp	r3, #11
 8020dda:	d903      	bls.n	8020de4 <_malloc_r+0x68>
 8020ddc:	6023      	str	r3, [r4, #0]
 8020dde:	441c      	add	r4, r3
 8020de0:	6025      	str	r5, [r4, #0]
 8020de2:	e004      	b.n	8020dee <_malloc_r+0x72>
 8020de4:	6863      	ldr	r3, [r4, #4]
 8020de6:	42a2      	cmp	r2, r4
 8020de8:	bf0c      	ite	eq
 8020dea:	600b      	streq	r3, [r1, #0]
 8020dec:	6053      	strne	r3, [r2, #4]
 8020dee:	4630      	mov	r0, r6
 8020df0:	f000 fc60 	bl	80216b4 <__malloc_unlock>
 8020df4:	f104 000b 	add.w	r0, r4, #11
 8020df8:	1d23      	adds	r3, r4, #4
 8020dfa:	f020 0007 	bic.w	r0, r0, #7
 8020dfe:	1ac2      	subs	r2, r0, r3
 8020e00:	d0cc      	beq.n	8020d9c <_malloc_r+0x20>
 8020e02:	1a1b      	subs	r3, r3, r0
 8020e04:	50a3      	str	r3, [r4, r2]
 8020e06:	e7c9      	b.n	8020d9c <_malloc_r+0x20>
 8020e08:	4622      	mov	r2, r4
 8020e0a:	6864      	ldr	r4, [r4, #4]
 8020e0c:	e7cc      	b.n	8020da8 <_malloc_r+0x2c>
 8020e0e:	1cc4      	adds	r4, r0, #3
 8020e10:	f024 0403 	bic.w	r4, r4, #3
 8020e14:	42a0      	cmp	r0, r4
 8020e16:	d0e3      	beq.n	8020de0 <_malloc_r+0x64>
 8020e18:	1a21      	subs	r1, r4, r0
 8020e1a:	4630      	mov	r0, r6
 8020e1c:	f000 f96c 	bl	80210f8 <_sbrk_r>
 8020e20:	3001      	adds	r0, #1
 8020e22:	d1dd      	bne.n	8020de0 <_malloc_r+0x64>
 8020e24:	e7cf      	b.n	8020dc6 <_malloc_r+0x4a>
 8020e26:	bf00      	nop
 8020e28:	20001ec4 	.word	0x20001ec4
 8020e2c:	20001ec8 	.word	0x20001ec8

08020e30 <__ssputs_r>:
 8020e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020e34:	688e      	ldr	r6, [r1, #8]
 8020e36:	429e      	cmp	r6, r3
 8020e38:	4682      	mov	sl, r0
 8020e3a:	460c      	mov	r4, r1
 8020e3c:	4690      	mov	r8, r2
 8020e3e:	461f      	mov	r7, r3
 8020e40:	d838      	bhi.n	8020eb4 <__ssputs_r+0x84>
 8020e42:	898a      	ldrh	r2, [r1, #12]
 8020e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020e48:	d032      	beq.n	8020eb0 <__ssputs_r+0x80>
 8020e4a:	6825      	ldr	r5, [r4, #0]
 8020e4c:	6909      	ldr	r1, [r1, #16]
 8020e4e:	eba5 0901 	sub.w	r9, r5, r1
 8020e52:	6965      	ldr	r5, [r4, #20]
 8020e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020e5c:	3301      	adds	r3, #1
 8020e5e:	444b      	add	r3, r9
 8020e60:	106d      	asrs	r5, r5, #1
 8020e62:	429d      	cmp	r5, r3
 8020e64:	bf38      	it	cc
 8020e66:	461d      	movcc	r5, r3
 8020e68:	0553      	lsls	r3, r2, #21
 8020e6a:	d531      	bpl.n	8020ed0 <__ssputs_r+0xa0>
 8020e6c:	4629      	mov	r1, r5
 8020e6e:	f7ff ff85 	bl	8020d7c <_malloc_r>
 8020e72:	4606      	mov	r6, r0
 8020e74:	b950      	cbnz	r0, 8020e8c <__ssputs_r+0x5c>
 8020e76:	230c      	movs	r3, #12
 8020e78:	f8ca 3000 	str.w	r3, [sl]
 8020e7c:	89a3      	ldrh	r3, [r4, #12]
 8020e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020e82:	81a3      	strh	r3, [r4, #12]
 8020e84:	f04f 30ff 	mov.w	r0, #4294967295
 8020e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e8c:	6921      	ldr	r1, [r4, #16]
 8020e8e:	464a      	mov	r2, r9
 8020e90:	f7ff fa4c 	bl	802032c <memcpy>
 8020e94:	89a3      	ldrh	r3, [r4, #12]
 8020e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020e9e:	81a3      	strh	r3, [r4, #12]
 8020ea0:	6126      	str	r6, [r4, #16]
 8020ea2:	6165      	str	r5, [r4, #20]
 8020ea4:	444e      	add	r6, r9
 8020ea6:	eba5 0509 	sub.w	r5, r5, r9
 8020eaa:	6026      	str	r6, [r4, #0]
 8020eac:	60a5      	str	r5, [r4, #8]
 8020eae:	463e      	mov	r6, r7
 8020eb0:	42be      	cmp	r6, r7
 8020eb2:	d900      	bls.n	8020eb6 <__ssputs_r+0x86>
 8020eb4:	463e      	mov	r6, r7
 8020eb6:	4632      	mov	r2, r6
 8020eb8:	6820      	ldr	r0, [r4, #0]
 8020eba:	4641      	mov	r1, r8
 8020ebc:	f000 fbda 	bl	8021674 <memmove>
 8020ec0:	68a3      	ldr	r3, [r4, #8]
 8020ec2:	6822      	ldr	r2, [r4, #0]
 8020ec4:	1b9b      	subs	r3, r3, r6
 8020ec6:	4432      	add	r2, r6
 8020ec8:	60a3      	str	r3, [r4, #8]
 8020eca:	6022      	str	r2, [r4, #0]
 8020ecc:	2000      	movs	r0, #0
 8020ece:	e7db      	b.n	8020e88 <__ssputs_r+0x58>
 8020ed0:	462a      	mov	r2, r5
 8020ed2:	f000 fbf5 	bl	80216c0 <_realloc_r>
 8020ed6:	4606      	mov	r6, r0
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	d1e1      	bne.n	8020ea0 <__ssputs_r+0x70>
 8020edc:	6921      	ldr	r1, [r4, #16]
 8020ede:	4650      	mov	r0, sl
 8020ee0:	f7ff fefc 	bl	8020cdc <_free_r>
 8020ee4:	e7c7      	b.n	8020e76 <__ssputs_r+0x46>
	...

08020ee8 <_svfiprintf_r>:
 8020ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eec:	4698      	mov	r8, r3
 8020eee:	898b      	ldrh	r3, [r1, #12]
 8020ef0:	061b      	lsls	r3, r3, #24
 8020ef2:	b09d      	sub	sp, #116	; 0x74
 8020ef4:	4607      	mov	r7, r0
 8020ef6:	460d      	mov	r5, r1
 8020ef8:	4614      	mov	r4, r2
 8020efa:	d50e      	bpl.n	8020f1a <_svfiprintf_r+0x32>
 8020efc:	690b      	ldr	r3, [r1, #16]
 8020efe:	b963      	cbnz	r3, 8020f1a <_svfiprintf_r+0x32>
 8020f00:	2140      	movs	r1, #64	; 0x40
 8020f02:	f7ff ff3b 	bl	8020d7c <_malloc_r>
 8020f06:	6028      	str	r0, [r5, #0]
 8020f08:	6128      	str	r0, [r5, #16]
 8020f0a:	b920      	cbnz	r0, 8020f16 <_svfiprintf_r+0x2e>
 8020f0c:	230c      	movs	r3, #12
 8020f0e:	603b      	str	r3, [r7, #0]
 8020f10:	f04f 30ff 	mov.w	r0, #4294967295
 8020f14:	e0d1      	b.n	80210ba <_svfiprintf_r+0x1d2>
 8020f16:	2340      	movs	r3, #64	; 0x40
 8020f18:	616b      	str	r3, [r5, #20]
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8020f1e:	2320      	movs	r3, #32
 8020f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8020f28:	2330      	movs	r3, #48	; 0x30
 8020f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80210d4 <_svfiprintf_r+0x1ec>
 8020f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020f32:	f04f 0901 	mov.w	r9, #1
 8020f36:	4623      	mov	r3, r4
 8020f38:	469a      	mov	sl, r3
 8020f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f3e:	b10a      	cbz	r2, 8020f44 <_svfiprintf_r+0x5c>
 8020f40:	2a25      	cmp	r2, #37	; 0x25
 8020f42:	d1f9      	bne.n	8020f38 <_svfiprintf_r+0x50>
 8020f44:	ebba 0b04 	subs.w	fp, sl, r4
 8020f48:	d00b      	beq.n	8020f62 <_svfiprintf_r+0x7a>
 8020f4a:	465b      	mov	r3, fp
 8020f4c:	4622      	mov	r2, r4
 8020f4e:	4629      	mov	r1, r5
 8020f50:	4638      	mov	r0, r7
 8020f52:	f7ff ff6d 	bl	8020e30 <__ssputs_r>
 8020f56:	3001      	adds	r0, #1
 8020f58:	f000 80aa 	beq.w	80210b0 <_svfiprintf_r+0x1c8>
 8020f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f5e:	445a      	add	r2, fp
 8020f60:	9209      	str	r2, [sp, #36]	; 0x24
 8020f62:	f89a 3000 	ldrb.w	r3, [sl]
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	f000 80a2 	beq.w	80210b0 <_svfiprintf_r+0x1c8>
 8020f6c:	2300      	movs	r3, #0
 8020f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8020f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020f76:	f10a 0a01 	add.w	sl, sl, #1
 8020f7a:	9304      	str	r3, [sp, #16]
 8020f7c:	9307      	str	r3, [sp, #28]
 8020f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020f82:	931a      	str	r3, [sp, #104]	; 0x68
 8020f84:	4654      	mov	r4, sl
 8020f86:	2205      	movs	r2, #5
 8020f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f8c:	4851      	ldr	r0, [pc, #324]	; (80210d4 <_svfiprintf_r+0x1ec>)
 8020f8e:	f7df f937 	bl	8000200 <memchr>
 8020f92:	9a04      	ldr	r2, [sp, #16]
 8020f94:	b9d8      	cbnz	r0, 8020fce <_svfiprintf_r+0xe6>
 8020f96:	06d0      	lsls	r0, r2, #27
 8020f98:	bf44      	itt	mi
 8020f9a:	2320      	movmi	r3, #32
 8020f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020fa0:	0711      	lsls	r1, r2, #28
 8020fa2:	bf44      	itt	mi
 8020fa4:	232b      	movmi	r3, #43	; 0x2b
 8020fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020faa:	f89a 3000 	ldrb.w	r3, [sl]
 8020fae:	2b2a      	cmp	r3, #42	; 0x2a
 8020fb0:	d015      	beq.n	8020fde <_svfiprintf_r+0xf6>
 8020fb2:	9a07      	ldr	r2, [sp, #28]
 8020fb4:	4654      	mov	r4, sl
 8020fb6:	2000      	movs	r0, #0
 8020fb8:	f04f 0c0a 	mov.w	ip, #10
 8020fbc:	4621      	mov	r1, r4
 8020fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020fc2:	3b30      	subs	r3, #48	; 0x30
 8020fc4:	2b09      	cmp	r3, #9
 8020fc6:	d94e      	bls.n	8021066 <_svfiprintf_r+0x17e>
 8020fc8:	b1b0      	cbz	r0, 8020ff8 <_svfiprintf_r+0x110>
 8020fca:	9207      	str	r2, [sp, #28]
 8020fcc:	e014      	b.n	8020ff8 <_svfiprintf_r+0x110>
 8020fce:	eba0 0308 	sub.w	r3, r0, r8
 8020fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8020fd6:	4313      	orrs	r3, r2
 8020fd8:	9304      	str	r3, [sp, #16]
 8020fda:	46a2      	mov	sl, r4
 8020fdc:	e7d2      	b.n	8020f84 <_svfiprintf_r+0x9c>
 8020fde:	9b03      	ldr	r3, [sp, #12]
 8020fe0:	1d19      	adds	r1, r3, #4
 8020fe2:	681b      	ldr	r3, [r3, #0]
 8020fe4:	9103      	str	r1, [sp, #12]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	bfbb      	ittet	lt
 8020fea:	425b      	neglt	r3, r3
 8020fec:	f042 0202 	orrlt.w	r2, r2, #2
 8020ff0:	9307      	strge	r3, [sp, #28]
 8020ff2:	9307      	strlt	r3, [sp, #28]
 8020ff4:	bfb8      	it	lt
 8020ff6:	9204      	strlt	r2, [sp, #16]
 8020ff8:	7823      	ldrb	r3, [r4, #0]
 8020ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8020ffc:	d10c      	bne.n	8021018 <_svfiprintf_r+0x130>
 8020ffe:	7863      	ldrb	r3, [r4, #1]
 8021000:	2b2a      	cmp	r3, #42	; 0x2a
 8021002:	d135      	bne.n	8021070 <_svfiprintf_r+0x188>
 8021004:	9b03      	ldr	r3, [sp, #12]
 8021006:	1d1a      	adds	r2, r3, #4
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	9203      	str	r2, [sp, #12]
 802100c:	2b00      	cmp	r3, #0
 802100e:	bfb8      	it	lt
 8021010:	f04f 33ff 	movlt.w	r3, #4294967295
 8021014:	3402      	adds	r4, #2
 8021016:	9305      	str	r3, [sp, #20]
 8021018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80210e4 <_svfiprintf_r+0x1fc>
 802101c:	7821      	ldrb	r1, [r4, #0]
 802101e:	2203      	movs	r2, #3
 8021020:	4650      	mov	r0, sl
 8021022:	f7df f8ed 	bl	8000200 <memchr>
 8021026:	b140      	cbz	r0, 802103a <_svfiprintf_r+0x152>
 8021028:	2340      	movs	r3, #64	; 0x40
 802102a:	eba0 000a 	sub.w	r0, r0, sl
 802102e:	fa03 f000 	lsl.w	r0, r3, r0
 8021032:	9b04      	ldr	r3, [sp, #16]
 8021034:	4303      	orrs	r3, r0
 8021036:	3401      	adds	r4, #1
 8021038:	9304      	str	r3, [sp, #16]
 802103a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802103e:	4826      	ldr	r0, [pc, #152]	; (80210d8 <_svfiprintf_r+0x1f0>)
 8021040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021044:	2206      	movs	r2, #6
 8021046:	f7df f8db 	bl	8000200 <memchr>
 802104a:	2800      	cmp	r0, #0
 802104c:	d038      	beq.n	80210c0 <_svfiprintf_r+0x1d8>
 802104e:	4b23      	ldr	r3, [pc, #140]	; (80210dc <_svfiprintf_r+0x1f4>)
 8021050:	bb1b      	cbnz	r3, 802109a <_svfiprintf_r+0x1b2>
 8021052:	9b03      	ldr	r3, [sp, #12]
 8021054:	3307      	adds	r3, #7
 8021056:	f023 0307 	bic.w	r3, r3, #7
 802105a:	3308      	adds	r3, #8
 802105c:	9303      	str	r3, [sp, #12]
 802105e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021060:	4433      	add	r3, r6
 8021062:	9309      	str	r3, [sp, #36]	; 0x24
 8021064:	e767      	b.n	8020f36 <_svfiprintf_r+0x4e>
 8021066:	fb0c 3202 	mla	r2, ip, r2, r3
 802106a:	460c      	mov	r4, r1
 802106c:	2001      	movs	r0, #1
 802106e:	e7a5      	b.n	8020fbc <_svfiprintf_r+0xd4>
 8021070:	2300      	movs	r3, #0
 8021072:	3401      	adds	r4, #1
 8021074:	9305      	str	r3, [sp, #20]
 8021076:	4619      	mov	r1, r3
 8021078:	f04f 0c0a 	mov.w	ip, #10
 802107c:	4620      	mov	r0, r4
 802107e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021082:	3a30      	subs	r2, #48	; 0x30
 8021084:	2a09      	cmp	r2, #9
 8021086:	d903      	bls.n	8021090 <_svfiprintf_r+0x1a8>
 8021088:	2b00      	cmp	r3, #0
 802108a:	d0c5      	beq.n	8021018 <_svfiprintf_r+0x130>
 802108c:	9105      	str	r1, [sp, #20]
 802108e:	e7c3      	b.n	8021018 <_svfiprintf_r+0x130>
 8021090:	fb0c 2101 	mla	r1, ip, r1, r2
 8021094:	4604      	mov	r4, r0
 8021096:	2301      	movs	r3, #1
 8021098:	e7f0      	b.n	802107c <_svfiprintf_r+0x194>
 802109a:	ab03      	add	r3, sp, #12
 802109c:	9300      	str	r3, [sp, #0]
 802109e:	462a      	mov	r2, r5
 80210a0:	4b0f      	ldr	r3, [pc, #60]	; (80210e0 <_svfiprintf_r+0x1f8>)
 80210a2:	a904      	add	r1, sp, #16
 80210a4:	4638      	mov	r0, r7
 80210a6:	f7fc f97b 	bl	801d3a0 <_printf_float>
 80210aa:	1c42      	adds	r2, r0, #1
 80210ac:	4606      	mov	r6, r0
 80210ae:	d1d6      	bne.n	802105e <_svfiprintf_r+0x176>
 80210b0:	89ab      	ldrh	r3, [r5, #12]
 80210b2:	065b      	lsls	r3, r3, #25
 80210b4:	f53f af2c 	bmi.w	8020f10 <_svfiprintf_r+0x28>
 80210b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80210ba:	b01d      	add	sp, #116	; 0x74
 80210bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210c0:	ab03      	add	r3, sp, #12
 80210c2:	9300      	str	r3, [sp, #0]
 80210c4:	462a      	mov	r2, r5
 80210c6:	4b06      	ldr	r3, [pc, #24]	; (80210e0 <_svfiprintf_r+0x1f8>)
 80210c8:	a904      	add	r1, sp, #16
 80210ca:	4638      	mov	r0, r7
 80210cc:	f7fc fc0c 	bl	801d8e8 <_printf_i>
 80210d0:	e7eb      	b.n	80210aa <_svfiprintf_r+0x1c2>
 80210d2:	bf00      	nop
 80210d4:	08029cec 	.word	0x08029cec
 80210d8:	08029cf6 	.word	0x08029cf6
 80210dc:	0801d3a1 	.word	0x0801d3a1
 80210e0:	08020e31 	.word	0x08020e31
 80210e4:	08029cf2 	.word	0x08029cf2

080210e8 <nan>:
 80210e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80210f0 <nan+0x8>
 80210ec:	4770      	bx	lr
 80210ee:	bf00      	nop
 80210f0:	00000000 	.word	0x00000000
 80210f4:	7ff80000 	.word	0x7ff80000

080210f8 <_sbrk_r>:
 80210f8:	b538      	push	{r3, r4, r5, lr}
 80210fa:	4d06      	ldr	r5, [pc, #24]	; (8021114 <_sbrk_r+0x1c>)
 80210fc:	2300      	movs	r3, #0
 80210fe:	4604      	mov	r4, r0
 8021100:	4608      	mov	r0, r1
 8021102:	602b      	str	r3, [r5, #0]
 8021104:	f7e6 fadc 	bl	80076c0 <_sbrk>
 8021108:	1c43      	adds	r3, r0, #1
 802110a:	d102      	bne.n	8021112 <_sbrk_r+0x1a>
 802110c:	682b      	ldr	r3, [r5, #0]
 802110e:	b103      	cbz	r3, 8021112 <_sbrk_r+0x1a>
 8021110:	6023      	str	r3, [r4, #0]
 8021112:	bd38      	pop	{r3, r4, r5, pc}
 8021114:	20009fc4 	.word	0x20009fc4

08021118 <__sread>:
 8021118:	b510      	push	{r4, lr}
 802111a:	460c      	mov	r4, r1
 802111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021120:	f000 fc4e 	bl	80219c0 <_read_r>
 8021124:	2800      	cmp	r0, #0
 8021126:	bfab      	itete	ge
 8021128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802112a:	89a3      	ldrhlt	r3, [r4, #12]
 802112c:	181b      	addge	r3, r3, r0
 802112e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021132:	bfac      	ite	ge
 8021134:	6563      	strge	r3, [r4, #84]	; 0x54
 8021136:	81a3      	strhlt	r3, [r4, #12]
 8021138:	bd10      	pop	{r4, pc}

0802113a <__swrite>:
 802113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802113e:	461f      	mov	r7, r3
 8021140:	898b      	ldrh	r3, [r1, #12]
 8021142:	05db      	lsls	r3, r3, #23
 8021144:	4605      	mov	r5, r0
 8021146:	460c      	mov	r4, r1
 8021148:	4616      	mov	r6, r2
 802114a:	d505      	bpl.n	8021158 <__swrite+0x1e>
 802114c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021150:	2302      	movs	r3, #2
 8021152:	2200      	movs	r2, #0
 8021154:	f000 fa18 	bl	8021588 <_lseek_r>
 8021158:	89a3      	ldrh	r3, [r4, #12]
 802115a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802115e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021162:	81a3      	strh	r3, [r4, #12]
 8021164:	4632      	mov	r2, r6
 8021166:	463b      	mov	r3, r7
 8021168:	4628      	mov	r0, r5
 802116a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802116e:	f000 b889 	b.w	8021284 <_write_r>

08021172 <__sseek>:
 8021172:	b510      	push	{r4, lr}
 8021174:	460c      	mov	r4, r1
 8021176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802117a:	f000 fa05 	bl	8021588 <_lseek_r>
 802117e:	1c43      	adds	r3, r0, #1
 8021180:	89a3      	ldrh	r3, [r4, #12]
 8021182:	bf15      	itete	ne
 8021184:	6560      	strne	r0, [r4, #84]	; 0x54
 8021186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802118a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802118e:	81a3      	strheq	r3, [r4, #12]
 8021190:	bf18      	it	ne
 8021192:	81a3      	strhne	r3, [r4, #12]
 8021194:	bd10      	pop	{r4, pc}

08021196 <__sclose>:
 8021196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802119a:	f000 b911 	b.w	80213c0 <_close_r>

0802119e <strncmp>:
 802119e:	b510      	push	{r4, lr}
 80211a0:	b16a      	cbz	r2, 80211be <strncmp+0x20>
 80211a2:	3901      	subs	r1, #1
 80211a4:	1884      	adds	r4, r0, r2
 80211a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80211aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80211ae:	4293      	cmp	r3, r2
 80211b0:	d103      	bne.n	80211ba <strncmp+0x1c>
 80211b2:	42a0      	cmp	r0, r4
 80211b4:	d001      	beq.n	80211ba <strncmp+0x1c>
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d1f5      	bne.n	80211a6 <strncmp+0x8>
 80211ba:	1a98      	subs	r0, r3, r2
 80211bc:	bd10      	pop	{r4, pc}
 80211be:	4610      	mov	r0, r2
 80211c0:	e7fc      	b.n	80211bc <strncmp+0x1e>
	...

080211c4 <__swbuf_r>:
 80211c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211c6:	460e      	mov	r6, r1
 80211c8:	4614      	mov	r4, r2
 80211ca:	4605      	mov	r5, r0
 80211cc:	b118      	cbz	r0, 80211d6 <__swbuf_r+0x12>
 80211ce:	6983      	ldr	r3, [r0, #24]
 80211d0:	b90b      	cbnz	r3, 80211d6 <__swbuf_r+0x12>
 80211d2:	f7fe fc7d 	bl	801fad0 <__sinit>
 80211d6:	4b21      	ldr	r3, [pc, #132]	; (802125c <__swbuf_r+0x98>)
 80211d8:	429c      	cmp	r4, r3
 80211da:	d12b      	bne.n	8021234 <__swbuf_r+0x70>
 80211dc:	686c      	ldr	r4, [r5, #4]
 80211de:	69a3      	ldr	r3, [r4, #24]
 80211e0:	60a3      	str	r3, [r4, #8]
 80211e2:	89a3      	ldrh	r3, [r4, #12]
 80211e4:	071a      	lsls	r2, r3, #28
 80211e6:	d52f      	bpl.n	8021248 <__swbuf_r+0x84>
 80211e8:	6923      	ldr	r3, [r4, #16]
 80211ea:	b36b      	cbz	r3, 8021248 <__swbuf_r+0x84>
 80211ec:	6923      	ldr	r3, [r4, #16]
 80211ee:	6820      	ldr	r0, [r4, #0]
 80211f0:	1ac0      	subs	r0, r0, r3
 80211f2:	6963      	ldr	r3, [r4, #20]
 80211f4:	b2f6      	uxtb	r6, r6
 80211f6:	4283      	cmp	r3, r0
 80211f8:	4637      	mov	r7, r6
 80211fa:	dc04      	bgt.n	8021206 <__swbuf_r+0x42>
 80211fc:	4621      	mov	r1, r4
 80211fe:	4628      	mov	r0, r5
 8021200:	f000 f974 	bl	80214ec <_fflush_r>
 8021204:	bb30      	cbnz	r0, 8021254 <__swbuf_r+0x90>
 8021206:	68a3      	ldr	r3, [r4, #8]
 8021208:	3b01      	subs	r3, #1
 802120a:	60a3      	str	r3, [r4, #8]
 802120c:	6823      	ldr	r3, [r4, #0]
 802120e:	1c5a      	adds	r2, r3, #1
 8021210:	6022      	str	r2, [r4, #0]
 8021212:	701e      	strb	r6, [r3, #0]
 8021214:	6963      	ldr	r3, [r4, #20]
 8021216:	3001      	adds	r0, #1
 8021218:	4283      	cmp	r3, r0
 802121a:	d004      	beq.n	8021226 <__swbuf_r+0x62>
 802121c:	89a3      	ldrh	r3, [r4, #12]
 802121e:	07db      	lsls	r3, r3, #31
 8021220:	d506      	bpl.n	8021230 <__swbuf_r+0x6c>
 8021222:	2e0a      	cmp	r6, #10
 8021224:	d104      	bne.n	8021230 <__swbuf_r+0x6c>
 8021226:	4621      	mov	r1, r4
 8021228:	4628      	mov	r0, r5
 802122a:	f000 f95f 	bl	80214ec <_fflush_r>
 802122e:	b988      	cbnz	r0, 8021254 <__swbuf_r+0x90>
 8021230:	4638      	mov	r0, r7
 8021232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021234:	4b0a      	ldr	r3, [pc, #40]	; (8021260 <__swbuf_r+0x9c>)
 8021236:	429c      	cmp	r4, r3
 8021238:	d101      	bne.n	802123e <__swbuf_r+0x7a>
 802123a:	68ac      	ldr	r4, [r5, #8]
 802123c:	e7cf      	b.n	80211de <__swbuf_r+0x1a>
 802123e:	4b09      	ldr	r3, [pc, #36]	; (8021264 <__swbuf_r+0xa0>)
 8021240:	429c      	cmp	r4, r3
 8021242:	bf08      	it	eq
 8021244:	68ec      	ldreq	r4, [r5, #12]
 8021246:	e7ca      	b.n	80211de <__swbuf_r+0x1a>
 8021248:	4621      	mov	r1, r4
 802124a:	4628      	mov	r0, r5
 802124c:	f000 f82c 	bl	80212a8 <__swsetup_r>
 8021250:	2800      	cmp	r0, #0
 8021252:	d0cb      	beq.n	80211ec <__swbuf_r+0x28>
 8021254:	f04f 37ff 	mov.w	r7, #4294967295
 8021258:	e7ea      	b.n	8021230 <__swbuf_r+0x6c>
 802125a:	bf00      	nop
 802125c:	08029ad0 	.word	0x08029ad0
 8021260:	08029af0 	.word	0x08029af0
 8021264:	08029ab0 	.word	0x08029ab0

08021268 <__ascii_wctomb>:
 8021268:	b149      	cbz	r1, 802127e <__ascii_wctomb+0x16>
 802126a:	2aff      	cmp	r2, #255	; 0xff
 802126c:	bf85      	ittet	hi
 802126e:	238a      	movhi	r3, #138	; 0x8a
 8021270:	6003      	strhi	r3, [r0, #0]
 8021272:	700a      	strbls	r2, [r1, #0]
 8021274:	f04f 30ff 	movhi.w	r0, #4294967295
 8021278:	bf98      	it	ls
 802127a:	2001      	movls	r0, #1
 802127c:	4770      	bx	lr
 802127e:	4608      	mov	r0, r1
 8021280:	4770      	bx	lr
	...

08021284 <_write_r>:
 8021284:	b538      	push	{r3, r4, r5, lr}
 8021286:	4d07      	ldr	r5, [pc, #28]	; (80212a4 <_write_r+0x20>)
 8021288:	4604      	mov	r4, r0
 802128a:	4608      	mov	r0, r1
 802128c:	4611      	mov	r1, r2
 802128e:	2200      	movs	r2, #0
 8021290:	602a      	str	r2, [r5, #0]
 8021292:	461a      	mov	r2, r3
 8021294:	f7e6 f9c3 	bl	800761e <_write>
 8021298:	1c43      	adds	r3, r0, #1
 802129a:	d102      	bne.n	80212a2 <_write_r+0x1e>
 802129c:	682b      	ldr	r3, [r5, #0]
 802129e:	b103      	cbz	r3, 80212a2 <_write_r+0x1e>
 80212a0:	6023      	str	r3, [r4, #0]
 80212a2:	bd38      	pop	{r3, r4, r5, pc}
 80212a4:	20009fc4 	.word	0x20009fc4

080212a8 <__swsetup_r>:
 80212a8:	4b32      	ldr	r3, [pc, #200]	; (8021374 <__swsetup_r+0xcc>)
 80212aa:	b570      	push	{r4, r5, r6, lr}
 80212ac:	681d      	ldr	r5, [r3, #0]
 80212ae:	4606      	mov	r6, r0
 80212b0:	460c      	mov	r4, r1
 80212b2:	b125      	cbz	r5, 80212be <__swsetup_r+0x16>
 80212b4:	69ab      	ldr	r3, [r5, #24]
 80212b6:	b913      	cbnz	r3, 80212be <__swsetup_r+0x16>
 80212b8:	4628      	mov	r0, r5
 80212ba:	f7fe fc09 	bl	801fad0 <__sinit>
 80212be:	4b2e      	ldr	r3, [pc, #184]	; (8021378 <__swsetup_r+0xd0>)
 80212c0:	429c      	cmp	r4, r3
 80212c2:	d10f      	bne.n	80212e4 <__swsetup_r+0x3c>
 80212c4:	686c      	ldr	r4, [r5, #4]
 80212c6:	89a3      	ldrh	r3, [r4, #12]
 80212c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80212cc:	0719      	lsls	r1, r3, #28
 80212ce:	d42c      	bmi.n	802132a <__swsetup_r+0x82>
 80212d0:	06dd      	lsls	r5, r3, #27
 80212d2:	d411      	bmi.n	80212f8 <__swsetup_r+0x50>
 80212d4:	2309      	movs	r3, #9
 80212d6:	6033      	str	r3, [r6, #0]
 80212d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80212dc:	81a3      	strh	r3, [r4, #12]
 80212de:	f04f 30ff 	mov.w	r0, #4294967295
 80212e2:	e03e      	b.n	8021362 <__swsetup_r+0xba>
 80212e4:	4b25      	ldr	r3, [pc, #148]	; (802137c <__swsetup_r+0xd4>)
 80212e6:	429c      	cmp	r4, r3
 80212e8:	d101      	bne.n	80212ee <__swsetup_r+0x46>
 80212ea:	68ac      	ldr	r4, [r5, #8]
 80212ec:	e7eb      	b.n	80212c6 <__swsetup_r+0x1e>
 80212ee:	4b24      	ldr	r3, [pc, #144]	; (8021380 <__swsetup_r+0xd8>)
 80212f0:	429c      	cmp	r4, r3
 80212f2:	bf08      	it	eq
 80212f4:	68ec      	ldreq	r4, [r5, #12]
 80212f6:	e7e6      	b.n	80212c6 <__swsetup_r+0x1e>
 80212f8:	0758      	lsls	r0, r3, #29
 80212fa:	d512      	bpl.n	8021322 <__swsetup_r+0x7a>
 80212fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80212fe:	b141      	cbz	r1, 8021312 <__swsetup_r+0x6a>
 8021300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021304:	4299      	cmp	r1, r3
 8021306:	d002      	beq.n	802130e <__swsetup_r+0x66>
 8021308:	4630      	mov	r0, r6
 802130a:	f7ff fce7 	bl	8020cdc <_free_r>
 802130e:	2300      	movs	r3, #0
 8021310:	6363      	str	r3, [r4, #52]	; 0x34
 8021312:	89a3      	ldrh	r3, [r4, #12]
 8021314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021318:	81a3      	strh	r3, [r4, #12]
 802131a:	2300      	movs	r3, #0
 802131c:	6063      	str	r3, [r4, #4]
 802131e:	6923      	ldr	r3, [r4, #16]
 8021320:	6023      	str	r3, [r4, #0]
 8021322:	89a3      	ldrh	r3, [r4, #12]
 8021324:	f043 0308 	orr.w	r3, r3, #8
 8021328:	81a3      	strh	r3, [r4, #12]
 802132a:	6923      	ldr	r3, [r4, #16]
 802132c:	b94b      	cbnz	r3, 8021342 <__swsetup_r+0x9a>
 802132e:	89a3      	ldrh	r3, [r4, #12]
 8021330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021338:	d003      	beq.n	8021342 <__swsetup_r+0x9a>
 802133a:	4621      	mov	r1, r4
 802133c:	4630      	mov	r0, r6
 802133e:	f000 f959 	bl	80215f4 <__smakebuf_r>
 8021342:	89a0      	ldrh	r0, [r4, #12]
 8021344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021348:	f010 0301 	ands.w	r3, r0, #1
 802134c:	d00a      	beq.n	8021364 <__swsetup_r+0xbc>
 802134e:	2300      	movs	r3, #0
 8021350:	60a3      	str	r3, [r4, #8]
 8021352:	6963      	ldr	r3, [r4, #20]
 8021354:	425b      	negs	r3, r3
 8021356:	61a3      	str	r3, [r4, #24]
 8021358:	6923      	ldr	r3, [r4, #16]
 802135a:	b943      	cbnz	r3, 802136e <__swsetup_r+0xc6>
 802135c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021360:	d1ba      	bne.n	80212d8 <__swsetup_r+0x30>
 8021362:	bd70      	pop	{r4, r5, r6, pc}
 8021364:	0781      	lsls	r1, r0, #30
 8021366:	bf58      	it	pl
 8021368:	6963      	ldrpl	r3, [r4, #20]
 802136a:	60a3      	str	r3, [r4, #8]
 802136c:	e7f4      	b.n	8021358 <__swsetup_r+0xb0>
 802136e:	2000      	movs	r0, #0
 8021370:	e7f7      	b.n	8021362 <__swsetup_r+0xba>
 8021372:	bf00      	nop
 8021374:	200005bc 	.word	0x200005bc
 8021378:	08029ad0 	.word	0x08029ad0
 802137c:	08029af0 	.word	0x08029af0
 8021380:	08029ab0 	.word	0x08029ab0

08021384 <__assert_func>:
 8021384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021386:	4614      	mov	r4, r2
 8021388:	461a      	mov	r2, r3
 802138a:	4b09      	ldr	r3, [pc, #36]	; (80213b0 <__assert_func+0x2c>)
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	4605      	mov	r5, r0
 8021390:	68d8      	ldr	r0, [r3, #12]
 8021392:	b14c      	cbz	r4, 80213a8 <__assert_func+0x24>
 8021394:	4b07      	ldr	r3, [pc, #28]	; (80213b4 <__assert_func+0x30>)
 8021396:	9100      	str	r1, [sp, #0]
 8021398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802139c:	4906      	ldr	r1, [pc, #24]	; (80213b8 <__assert_func+0x34>)
 802139e:	462b      	mov	r3, r5
 80213a0:	f000 f8e0 	bl	8021564 <fiprintf>
 80213a4:	f000 fb1e 	bl	80219e4 <abort>
 80213a8:	4b04      	ldr	r3, [pc, #16]	; (80213bc <__assert_func+0x38>)
 80213aa:	461c      	mov	r4, r3
 80213ac:	e7f3      	b.n	8021396 <__assert_func+0x12>
 80213ae:	bf00      	nop
 80213b0:	200005bc 	.word	0x200005bc
 80213b4:	08029cfd 	.word	0x08029cfd
 80213b8:	08029d0a 	.word	0x08029d0a
 80213bc:	08029d38 	.word	0x08029d38

080213c0 <_close_r>:
 80213c0:	b538      	push	{r3, r4, r5, lr}
 80213c2:	4d06      	ldr	r5, [pc, #24]	; (80213dc <_close_r+0x1c>)
 80213c4:	2300      	movs	r3, #0
 80213c6:	4604      	mov	r4, r0
 80213c8:	4608      	mov	r0, r1
 80213ca:	602b      	str	r3, [r5, #0]
 80213cc:	f7e6 f943 	bl	8007656 <_close>
 80213d0:	1c43      	adds	r3, r0, #1
 80213d2:	d102      	bne.n	80213da <_close_r+0x1a>
 80213d4:	682b      	ldr	r3, [r5, #0]
 80213d6:	b103      	cbz	r3, 80213da <_close_r+0x1a>
 80213d8:	6023      	str	r3, [r4, #0]
 80213da:	bd38      	pop	{r3, r4, r5, pc}
 80213dc:	20009fc4 	.word	0x20009fc4

080213e0 <__sflush_r>:
 80213e0:	898a      	ldrh	r2, [r1, #12]
 80213e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213e6:	4605      	mov	r5, r0
 80213e8:	0710      	lsls	r0, r2, #28
 80213ea:	460c      	mov	r4, r1
 80213ec:	d458      	bmi.n	80214a0 <__sflush_r+0xc0>
 80213ee:	684b      	ldr	r3, [r1, #4]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	dc05      	bgt.n	8021400 <__sflush_r+0x20>
 80213f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	dc02      	bgt.n	8021400 <__sflush_r+0x20>
 80213fa:	2000      	movs	r0, #0
 80213fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021402:	2e00      	cmp	r6, #0
 8021404:	d0f9      	beq.n	80213fa <__sflush_r+0x1a>
 8021406:	2300      	movs	r3, #0
 8021408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802140c:	682f      	ldr	r7, [r5, #0]
 802140e:	602b      	str	r3, [r5, #0]
 8021410:	d032      	beq.n	8021478 <__sflush_r+0x98>
 8021412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021414:	89a3      	ldrh	r3, [r4, #12]
 8021416:	075a      	lsls	r2, r3, #29
 8021418:	d505      	bpl.n	8021426 <__sflush_r+0x46>
 802141a:	6863      	ldr	r3, [r4, #4]
 802141c:	1ac0      	subs	r0, r0, r3
 802141e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021420:	b10b      	cbz	r3, 8021426 <__sflush_r+0x46>
 8021422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021424:	1ac0      	subs	r0, r0, r3
 8021426:	2300      	movs	r3, #0
 8021428:	4602      	mov	r2, r0
 802142a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802142c:	6a21      	ldr	r1, [r4, #32]
 802142e:	4628      	mov	r0, r5
 8021430:	47b0      	blx	r6
 8021432:	1c43      	adds	r3, r0, #1
 8021434:	89a3      	ldrh	r3, [r4, #12]
 8021436:	d106      	bne.n	8021446 <__sflush_r+0x66>
 8021438:	6829      	ldr	r1, [r5, #0]
 802143a:	291d      	cmp	r1, #29
 802143c:	d82c      	bhi.n	8021498 <__sflush_r+0xb8>
 802143e:	4a2a      	ldr	r2, [pc, #168]	; (80214e8 <__sflush_r+0x108>)
 8021440:	40ca      	lsrs	r2, r1
 8021442:	07d6      	lsls	r6, r2, #31
 8021444:	d528      	bpl.n	8021498 <__sflush_r+0xb8>
 8021446:	2200      	movs	r2, #0
 8021448:	6062      	str	r2, [r4, #4]
 802144a:	04d9      	lsls	r1, r3, #19
 802144c:	6922      	ldr	r2, [r4, #16]
 802144e:	6022      	str	r2, [r4, #0]
 8021450:	d504      	bpl.n	802145c <__sflush_r+0x7c>
 8021452:	1c42      	adds	r2, r0, #1
 8021454:	d101      	bne.n	802145a <__sflush_r+0x7a>
 8021456:	682b      	ldr	r3, [r5, #0]
 8021458:	b903      	cbnz	r3, 802145c <__sflush_r+0x7c>
 802145a:	6560      	str	r0, [r4, #84]	; 0x54
 802145c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802145e:	602f      	str	r7, [r5, #0]
 8021460:	2900      	cmp	r1, #0
 8021462:	d0ca      	beq.n	80213fa <__sflush_r+0x1a>
 8021464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021468:	4299      	cmp	r1, r3
 802146a:	d002      	beq.n	8021472 <__sflush_r+0x92>
 802146c:	4628      	mov	r0, r5
 802146e:	f7ff fc35 	bl	8020cdc <_free_r>
 8021472:	2000      	movs	r0, #0
 8021474:	6360      	str	r0, [r4, #52]	; 0x34
 8021476:	e7c1      	b.n	80213fc <__sflush_r+0x1c>
 8021478:	6a21      	ldr	r1, [r4, #32]
 802147a:	2301      	movs	r3, #1
 802147c:	4628      	mov	r0, r5
 802147e:	47b0      	blx	r6
 8021480:	1c41      	adds	r1, r0, #1
 8021482:	d1c7      	bne.n	8021414 <__sflush_r+0x34>
 8021484:	682b      	ldr	r3, [r5, #0]
 8021486:	2b00      	cmp	r3, #0
 8021488:	d0c4      	beq.n	8021414 <__sflush_r+0x34>
 802148a:	2b1d      	cmp	r3, #29
 802148c:	d001      	beq.n	8021492 <__sflush_r+0xb2>
 802148e:	2b16      	cmp	r3, #22
 8021490:	d101      	bne.n	8021496 <__sflush_r+0xb6>
 8021492:	602f      	str	r7, [r5, #0]
 8021494:	e7b1      	b.n	80213fa <__sflush_r+0x1a>
 8021496:	89a3      	ldrh	r3, [r4, #12]
 8021498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802149c:	81a3      	strh	r3, [r4, #12]
 802149e:	e7ad      	b.n	80213fc <__sflush_r+0x1c>
 80214a0:	690f      	ldr	r7, [r1, #16]
 80214a2:	2f00      	cmp	r7, #0
 80214a4:	d0a9      	beq.n	80213fa <__sflush_r+0x1a>
 80214a6:	0793      	lsls	r3, r2, #30
 80214a8:	680e      	ldr	r6, [r1, #0]
 80214aa:	bf08      	it	eq
 80214ac:	694b      	ldreq	r3, [r1, #20]
 80214ae:	600f      	str	r7, [r1, #0]
 80214b0:	bf18      	it	ne
 80214b2:	2300      	movne	r3, #0
 80214b4:	eba6 0807 	sub.w	r8, r6, r7
 80214b8:	608b      	str	r3, [r1, #8]
 80214ba:	f1b8 0f00 	cmp.w	r8, #0
 80214be:	dd9c      	ble.n	80213fa <__sflush_r+0x1a>
 80214c0:	6a21      	ldr	r1, [r4, #32]
 80214c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80214c4:	4643      	mov	r3, r8
 80214c6:	463a      	mov	r2, r7
 80214c8:	4628      	mov	r0, r5
 80214ca:	47b0      	blx	r6
 80214cc:	2800      	cmp	r0, #0
 80214ce:	dc06      	bgt.n	80214de <__sflush_r+0xfe>
 80214d0:	89a3      	ldrh	r3, [r4, #12]
 80214d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80214d6:	81a3      	strh	r3, [r4, #12]
 80214d8:	f04f 30ff 	mov.w	r0, #4294967295
 80214dc:	e78e      	b.n	80213fc <__sflush_r+0x1c>
 80214de:	4407      	add	r7, r0
 80214e0:	eba8 0800 	sub.w	r8, r8, r0
 80214e4:	e7e9      	b.n	80214ba <__sflush_r+0xda>
 80214e6:	bf00      	nop
 80214e8:	20400001 	.word	0x20400001

080214ec <_fflush_r>:
 80214ec:	b538      	push	{r3, r4, r5, lr}
 80214ee:	690b      	ldr	r3, [r1, #16]
 80214f0:	4605      	mov	r5, r0
 80214f2:	460c      	mov	r4, r1
 80214f4:	b913      	cbnz	r3, 80214fc <_fflush_r+0x10>
 80214f6:	2500      	movs	r5, #0
 80214f8:	4628      	mov	r0, r5
 80214fa:	bd38      	pop	{r3, r4, r5, pc}
 80214fc:	b118      	cbz	r0, 8021506 <_fflush_r+0x1a>
 80214fe:	6983      	ldr	r3, [r0, #24]
 8021500:	b90b      	cbnz	r3, 8021506 <_fflush_r+0x1a>
 8021502:	f7fe fae5 	bl	801fad0 <__sinit>
 8021506:	4b14      	ldr	r3, [pc, #80]	; (8021558 <_fflush_r+0x6c>)
 8021508:	429c      	cmp	r4, r3
 802150a:	d11b      	bne.n	8021544 <_fflush_r+0x58>
 802150c:	686c      	ldr	r4, [r5, #4]
 802150e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021512:	2b00      	cmp	r3, #0
 8021514:	d0ef      	beq.n	80214f6 <_fflush_r+0xa>
 8021516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021518:	07d0      	lsls	r0, r2, #31
 802151a:	d404      	bmi.n	8021526 <_fflush_r+0x3a>
 802151c:	0599      	lsls	r1, r3, #22
 802151e:	d402      	bmi.n	8021526 <_fflush_r+0x3a>
 8021520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021522:	f7fe fee6 	bl	80202f2 <__retarget_lock_acquire_recursive>
 8021526:	4628      	mov	r0, r5
 8021528:	4621      	mov	r1, r4
 802152a:	f7ff ff59 	bl	80213e0 <__sflush_r>
 802152e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021530:	07da      	lsls	r2, r3, #31
 8021532:	4605      	mov	r5, r0
 8021534:	d4e0      	bmi.n	80214f8 <_fflush_r+0xc>
 8021536:	89a3      	ldrh	r3, [r4, #12]
 8021538:	059b      	lsls	r3, r3, #22
 802153a:	d4dd      	bmi.n	80214f8 <_fflush_r+0xc>
 802153c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802153e:	f7fe fed9 	bl	80202f4 <__retarget_lock_release_recursive>
 8021542:	e7d9      	b.n	80214f8 <_fflush_r+0xc>
 8021544:	4b05      	ldr	r3, [pc, #20]	; (802155c <_fflush_r+0x70>)
 8021546:	429c      	cmp	r4, r3
 8021548:	d101      	bne.n	802154e <_fflush_r+0x62>
 802154a:	68ac      	ldr	r4, [r5, #8]
 802154c:	e7df      	b.n	802150e <_fflush_r+0x22>
 802154e:	4b04      	ldr	r3, [pc, #16]	; (8021560 <_fflush_r+0x74>)
 8021550:	429c      	cmp	r4, r3
 8021552:	bf08      	it	eq
 8021554:	68ec      	ldreq	r4, [r5, #12]
 8021556:	e7da      	b.n	802150e <_fflush_r+0x22>
 8021558:	08029ad0 	.word	0x08029ad0
 802155c:	08029af0 	.word	0x08029af0
 8021560:	08029ab0 	.word	0x08029ab0

08021564 <fiprintf>:
 8021564:	b40e      	push	{r1, r2, r3}
 8021566:	b503      	push	{r0, r1, lr}
 8021568:	4601      	mov	r1, r0
 802156a:	ab03      	add	r3, sp, #12
 802156c:	4805      	ldr	r0, [pc, #20]	; (8021584 <fiprintf+0x20>)
 802156e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021572:	6800      	ldr	r0, [r0, #0]
 8021574:	9301      	str	r3, [sp, #4]
 8021576:	f000 f8f3 	bl	8021760 <_vfiprintf_r>
 802157a:	b002      	add	sp, #8
 802157c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021580:	b003      	add	sp, #12
 8021582:	4770      	bx	lr
 8021584:	200005bc 	.word	0x200005bc

08021588 <_lseek_r>:
 8021588:	b538      	push	{r3, r4, r5, lr}
 802158a:	4d07      	ldr	r5, [pc, #28]	; (80215a8 <_lseek_r+0x20>)
 802158c:	4604      	mov	r4, r0
 802158e:	4608      	mov	r0, r1
 8021590:	4611      	mov	r1, r2
 8021592:	2200      	movs	r2, #0
 8021594:	602a      	str	r2, [r5, #0]
 8021596:	461a      	mov	r2, r3
 8021598:	f7e6 f884 	bl	80076a4 <_lseek>
 802159c:	1c43      	adds	r3, r0, #1
 802159e:	d102      	bne.n	80215a6 <_lseek_r+0x1e>
 80215a0:	682b      	ldr	r3, [r5, #0]
 80215a2:	b103      	cbz	r3, 80215a6 <_lseek_r+0x1e>
 80215a4:	6023      	str	r3, [r4, #0]
 80215a6:	bd38      	pop	{r3, r4, r5, pc}
 80215a8:	20009fc4 	.word	0x20009fc4

080215ac <__swhatbuf_r>:
 80215ac:	b570      	push	{r4, r5, r6, lr}
 80215ae:	460e      	mov	r6, r1
 80215b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80215b4:	2900      	cmp	r1, #0
 80215b6:	b096      	sub	sp, #88	; 0x58
 80215b8:	4614      	mov	r4, r2
 80215ba:	461d      	mov	r5, r3
 80215bc:	da07      	bge.n	80215ce <__swhatbuf_r+0x22>
 80215be:	2300      	movs	r3, #0
 80215c0:	602b      	str	r3, [r5, #0]
 80215c2:	89b3      	ldrh	r3, [r6, #12]
 80215c4:	061a      	lsls	r2, r3, #24
 80215c6:	d410      	bmi.n	80215ea <__swhatbuf_r+0x3e>
 80215c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80215cc:	e00e      	b.n	80215ec <__swhatbuf_r+0x40>
 80215ce:	466a      	mov	r2, sp
 80215d0:	f000 fa10 	bl	80219f4 <_fstat_r>
 80215d4:	2800      	cmp	r0, #0
 80215d6:	dbf2      	blt.n	80215be <__swhatbuf_r+0x12>
 80215d8:	9a01      	ldr	r2, [sp, #4]
 80215da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80215de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80215e2:	425a      	negs	r2, r3
 80215e4:	415a      	adcs	r2, r3
 80215e6:	602a      	str	r2, [r5, #0]
 80215e8:	e7ee      	b.n	80215c8 <__swhatbuf_r+0x1c>
 80215ea:	2340      	movs	r3, #64	; 0x40
 80215ec:	2000      	movs	r0, #0
 80215ee:	6023      	str	r3, [r4, #0]
 80215f0:	b016      	add	sp, #88	; 0x58
 80215f2:	bd70      	pop	{r4, r5, r6, pc}

080215f4 <__smakebuf_r>:
 80215f4:	898b      	ldrh	r3, [r1, #12]
 80215f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80215f8:	079d      	lsls	r5, r3, #30
 80215fa:	4606      	mov	r6, r0
 80215fc:	460c      	mov	r4, r1
 80215fe:	d507      	bpl.n	8021610 <__smakebuf_r+0x1c>
 8021600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021604:	6023      	str	r3, [r4, #0]
 8021606:	6123      	str	r3, [r4, #16]
 8021608:	2301      	movs	r3, #1
 802160a:	6163      	str	r3, [r4, #20]
 802160c:	b002      	add	sp, #8
 802160e:	bd70      	pop	{r4, r5, r6, pc}
 8021610:	ab01      	add	r3, sp, #4
 8021612:	466a      	mov	r2, sp
 8021614:	f7ff ffca 	bl	80215ac <__swhatbuf_r>
 8021618:	9900      	ldr	r1, [sp, #0]
 802161a:	4605      	mov	r5, r0
 802161c:	4630      	mov	r0, r6
 802161e:	f7ff fbad 	bl	8020d7c <_malloc_r>
 8021622:	b948      	cbnz	r0, 8021638 <__smakebuf_r+0x44>
 8021624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021628:	059a      	lsls	r2, r3, #22
 802162a:	d4ef      	bmi.n	802160c <__smakebuf_r+0x18>
 802162c:	f023 0303 	bic.w	r3, r3, #3
 8021630:	f043 0302 	orr.w	r3, r3, #2
 8021634:	81a3      	strh	r3, [r4, #12]
 8021636:	e7e3      	b.n	8021600 <__smakebuf_r+0xc>
 8021638:	4b0d      	ldr	r3, [pc, #52]	; (8021670 <__smakebuf_r+0x7c>)
 802163a:	62b3      	str	r3, [r6, #40]	; 0x28
 802163c:	89a3      	ldrh	r3, [r4, #12]
 802163e:	6020      	str	r0, [r4, #0]
 8021640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021644:	81a3      	strh	r3, [r4, #12]
 8021646:	9b00      	ldr	r3, [sp, #0]
 8021648:	6163      	str	r3, [r4, #20]
 802164a:	9b01      	ldr	r3, [sp, #4]
 802164c:	6120      	str	r0, [r4, #16]
 802164e:	b15b      	cbz	r3, 8021668 <__smakebuf_r+0x74>
 8021650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021654:	4630      	mov	r0, r6
 8021656:	f000 f9df 	bl	8021a18 <_isatty_r>
 802165a:	b128      	cbz	r0, 8021668 <__smakebuf_r+0x74>
 802165c:	89a3      	ldrh	r3, [r4, #12]
 802165e:	f023 0303 	bic.w	r3, r3, #3
 8021662:	f043 0301 	orr.w	r3, r3, #1
 8021666:	81a3      	strh	r3, [r4, #12]
 8021668:	89a0      	ldrh	r0, [r4, #12]
 802166a:	4305      	orrs	r5, r0
 802166c:	81a5      	strh	r5, [r4, #12]
 802166e:	e7cd      	b.n	802160c <__smakebuf_r+0x18>
 8021670:	0801fa69 	.word	0x0801fa69

08021674 <memmove>:
 8021674:	4288      	cmp	r0, r1
 8021676:	b510      	push	{r4, lr}
 8021678:	eb01 0402 	add.w	r4, r1, r2
 802167c:	d902      	bls.n	8021684 <memmove+0x10>
 802167e:	4284      	cmp	r4, r0
 8021680:	4623      	mov	r3, r4
 8021682:	d807      	bhi.n	8021694 <memmove+0x20>
 8021684:	1e43      	subs	r3, r0, #1
 8021686:	42a1      	cmp	r1, r4
 8021688:	d008      	beq.n	802169c <memmove+0x28>
 802168a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802168e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021692:	e7f8      	b.n	8021686 <memmove+0x12>
 8021694:	4402      	add	r2, r0
 8021696:	4601      	mov	r1, r0
 8021698:	428a      	cmp	r2, r1
 802169a:	d100      	bne.n	802169e <memmove+0x2a>
 802169c:	bd10      	pop	{r4, pc}
 802169e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80216a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80216a6:	e7f7      	b.n	8021698 <memmove+0x24>

080216a8 <__malloc_lock>:
 80216a8:	4801      	ldr	r0, [pc, #4]	; (80216b0 <__malloc_lock+0x8>)
 80216aa:	f7fe be22 	b.w	80202f2 <__retarget_lock_acquire_recursive>
 80216ae:	bf00      	nop
 80216b0:	20009fb8 	.word	0x20009fb8

080216b4 <__malloc_unlock>:
 80216b4:	4801      	ldr	r0, [pc, #4]	; (80216bc <__malloc_unlock+0x8>)
 80216b6:	f7fe be1d 	b.w	80202f4 <__retarget_lock_release_recursive>
 80216ba:	bf00      	nop
 80216bc:	20009fb8 	.word	0x20009fb8

080216c0 <_realloc_r>:
 80216c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216c2:	4607      	mov	r7, r0
 80216c4:	4614      	mov	r4, r2
 80216c6:	460e      	mov	r6, r1
 80216c8:	b921      	cbnz	r1, 80216d4 <_realloc_r+0x14>
 80216ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80216ce:	4611      	mov	r1, r2
 80216d0:	f7ff bb54 	b.w	8020d7c <_malloc_r>
 80216d4:	b922      	cbnz	r2, 80216e0 <_realloc_r+0x20>
 80216d6:	f7ff fb01 	bl	8020cdc <_free_r>
 80216da:	4625      	mov	r5, r4
 80216dc:	4628      	mov	r0, r5
 80216de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80216e0:	f000 f9aa 	bl	8021a38 <_malloc_usable_size_r>
 80216e4:	42a0      	cmp	r0, r4
 80216e6:	d20f      	bcs.n	8021708 <_realloc_r+0x48>
 80216e8:	4621      	mov	r1, r4
 80216ea:	4638      	mov	r0, r7
 80216ec:	f7ff fb46 	bl	8020d7c <_malloc_r>
 80216f0:	4605      	mov	r5, r0
 80216f2:	2800      	cmp	r0, #0
 80216f4:	d0f2      	beq.n	80216dc <_realloc_r+0x1c>
 80216f6:	4631      	mov	r1, r6
 80216f8:	4622      	mov	r2, r4
 80216fa:	f7fe fe17 	bl	802032c <memcpy>
 80216fe:	4631      	mov	r1, r6
 8021700:	4638      	mov	r0, r7
 8021702:	f7ff faeb 	bl	8020cdc <_free_r>
 8021706:	e7e9      	b.n	80216dc <_realloc_r+0x1c>
 8021708:	4635      	mov	r5, r6
 802170a:	e7e7      	b.n	80216dc <_realloc_r+0x1c>

0802170c <__sfputc_r>:
 802170c:	6893      	ldr	r3, [r2, #8]
 802170e:	3b01      	subs	r3, #1
 8021710:	2b00      	cmp	r3, #0
 8021712:	b410      	push	{r4}
 8021714:	6093      	str	r3, [r2, #8]
 8021716:	da08      	bge.n	802172a <__sfputc_r+0x1e>
 8021718:	6994      	ldr	r4, [r2, #24]
 802171a:	42a3      	cmp	r3, r4
 802171c:	db01      	blt.n	8021722 <__sfputc_r+0x16>
 802171e:	290a      	cmp	r1, #10
 8021720:	d103      	bne.n	802172a <__sfputc_r+0x1e>
 8021722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021726:	f7ff bd4d 	b.w	80211c4 <__swbuf_r>
 802172a:	6813      	ldr	r3, [r2, #0]
 802172c:	1c58      	adds	r0, r3, #1
 802172e:	6010      	str	r0, [r2, #0]
 8021730:	7019      	strb	r1, [r3, #0]
 8021732:	4608      	mov	r0, r1
 8021734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021738:	4770      	bx	lr

0802173a <__sfputs_r>:
 802173a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802173c:	4606      	mov	r6, r0
 802173e:	460f      	mov	r7, r1
 8021740:	4614      	mov	r4, r2
 8021742:	18d5      	adds	r5, r2, r3
 8021744:	42ac      	cmp	r4, r5
 8021746:	d101      	bne.n	802174c <__sfputs_r+0x12>
 8021748:	2000      	movs	r0, #0
 802174a:	e007      	b.n	802175c <__sfputs_r+0x22>
 802174c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021750:	463a      	mov	r2, r7
 8021752:	4630      	mov	r0, r6
 8021754:	f7ff ffda 	bl	802170c <__sfputc_r>
 8021758:	1c43      	adds	r3, r0, #1
 802175a:	d1f3      	bne.n	8021744 <__sfputs_r+0xa>
 802175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021760 <_vfiprintf_r>:
 8021760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021764:	460d      	mov	r5, r1
 8021766:	b09d      	sub	sp, #116	; 0x74
 8021768:	4614      	mov	r4, r2
 802176a:	4698      	mov	r8, r3
 802176c:	4606      	mov	r6, r0
 802176e:	b118      	cbz	r0, 8021778 <_vfiprintf_r+0x18>
 8021770:	6983      	ldr	r3, [r0, #24]
 8021772:	b90b      	cbnz	r3, 8021778 <_vfiprintf_r+0x18>
 8021774:	f7fe f9ac 	bl	801fad0 <__sinit>
 8021778:	4b89      	ldr	r3, [pc, #548]	; (80219a0 <_vfiprintf_r+0x240>)
 802177a:	429d      	cmp	r5, r3
 802177c:	d11b      	bne.n	80217b6 <_vfiprintf_r+0x56>
 802177e:	6875      	ldr	r5, [r6, #4]
 8021780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021782:	07d9      	lsls	r1, r3, #31
 8021784:	d405      	bmi.n	8021792 <_vfiprintf_r+0x32>
 8021786:	89ab      	ldrh	r3, [r5, #12]
 8021788:	059a      	lsls	r2, r3, #22
 802178a:	d402      	bmi.n	8021792 <_vfiprintf_r+0x32>
 802178c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802178e:	f7fe fdb0 	bl	80202f2 <__retarget_lock_acquire_recursive>
 8021792:	89ab      	ldrh	r3, [r5, #12]
 8021794:	071b      	lsls	r3, r3, #28
 8021796:	d501      	bpl.n	802179c <_vfiprintf_r+0x3c>
 8021798:	692b      	ldr	r3, [r5, #16]
 802179a:	b9eb      	cbnz	r3, 80217d8 <_vfiprintf_r+0x78>
 802179c:	4629      	mov	r1, r5
 802179e:	4630      	mov	r0, r6
 80217a0:	f7ff fd82 	bl	80212a8 <__swsetup_r>
 80217a4:	b1c0      	cbz	r0, 80217d8 <_vfiprintf_r+0x78>
 80217a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80217a8:	07dc      	lsls	r4, r3, #31
 80217aa:	d50e      	bpl.n	80217ca <_vfiprintf_r+0x6a>
 80217ac:	f04f 30ff 	mov.w	r0, #4294967295
 80217b0:	b01d      	add	sp, #116	; 0x74
 80217b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217b6:	4b7b      	ldr	r3, [pc, #492]	; (80219a4 <_vfiprintf_r+0x244>)
 80217b8:	429d      	cmp	r5, r3
 80217ba:	d101      	bne.n	80217c0 <_vfiprintf_r+0x60>
 80217bc:	68b5      	ldr	r5, [r6, #8]
 80217be:	e7df      	b.n	8021780 <_vfiprintf_r+0x20>
 80217c0:	4b79      	ldr	r3, [pc, #484]	; (80219a8 <_vfiprintf_r+0x248>)
 80217c2:	429d      	cmp	r5, r3
 80217c4:	bf08      	it	eq
 80217c6:	68f5      	ldreq	r5, [r6, #12]
 80217c8:	e7da      	b.n	8021780 <_vfiprintf_r+0x20>
 80217ca:	89ab      	ldrh	r3, [r5, #12]
 80217cc:	0598      	lsls	r0, r3, #22
 80217ce:	d4ed      	bmi.n	80217ac <_vfiprintf_r+0x4c>
 80217d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80217d2:	f7fe fd8f 	bl	80202f4 <__retarget_lock_release_recursive>
 80217d6:	e7e9      	b.n	80217ac <_vfiprintf_r+0x4c>
 80217d8:	2300      	movs	r3, #0
 80217da:	9309      	str	r3, [sp, #36]	; 0x24
 80217dc:	2320      	movs	r3, #32
 80217de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80217e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80217e6:	2330      	movs	r3, #48	; 0x30
 80217e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80219ac <_vfiprintf_r+0x24c>
 80217ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80217f0:	f04f 0901 	mov.w	r9, #1
 80217f4:	4623      	mov	r3, r4
 80217f6:	469a      	mov	sl, r3
 80217f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80217fc:	b10a      	cbz	r2, 8021802 <_vfiprintf_r+0xa2>
 80217fe:	2a25      	cmp	r2, #37	; 0x25
 8021800:	d1f9      	bne.n	80217f6 <_vfiprintf_r+0x96>
 8021802:	ebba 0b04 	subs.w	fp, sl, r4
 8021806:	d00b      	beq.n	8021820 <_vfiprintf_r+0xc0>
 8021808:	465b      	mov	r3, fp
 802180a:	4622      	mov	r2, r4
 802180c:	4629      	mov	r1, r5
 802180e:	4630      	mov	r0, r6
 8021810:	f7ff ff93 	bl	802173a <__sfputs_r>
 8021814:	3001      	adds	r0, #1
 8021816:	f000 80aa 	beq.w	802196e <_vfiprintf_r+0x20e>
 802181a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802181c:	445a      	add	r2, fp
 802181e:	9209      	str	r2, [sp, #36]	; 0x24
 8021820:	f89a 3000 	ldrb.w	r3, [sl]
 8021824:	2b00      	cmp	r3, #0
 8021826:	f000 80a2 	beq.w	802196e <_vfiprintf_r+0x20e>
 802182a:	2300      	movs	r3, #0
 802182c:	f04f 32ff 	mov.w	r2, #4294967295
 8021830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021834:	f10a 0a01 	add.w	sl, sl, #1
 8021838:	9304      	str	r3, [sp, #16]
 802183a:	9307      	str	r3, [sp, #28]
 802183c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021840:	931a      	str	r3, [sp, #104]	; 0x68
 8021842:	4654      	mov	r4, sl
 8021844:	2205      	movs	r2, #5
 8021846:	f814 1b01 	ldrb.w	r1, [r4], #1
 802184a:	4858      	ldr	r0, [pc, #352]	; (80219ac <_vfiprintf_r+0x24c>)
 802184c:	f7de fcd8 	bl	8000200 <memchr>
 8021850:	9a04      	ldr	r2, [sp, #16]
 8021852:	b9d8      	cbnz	r0, 802188c <_vfiprintf_r+0x12c>
 8021854:	06d1      	lsls	r1, r2, #27
 8021856:	bf44      	itt	mi
 8021858:	2320      	movmi	r3, #32
 802185a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802185e:	0713      	lsls	r3, r2, #28
 8021860:	bf44      	itt	mi
 8021862:	232b      	movmi	r3, #43	; 0x2b
 8021864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021868:	f89a 3000 	ldrb.w	r3, [sl]
 802186c:	2b2a      	cmp	r3, #42	; 0x2a
 802186e:	d015      	beq.n	802189c <_vfiprintf_r+0x13c>
 8021870:	9a07      	ldr	r2, [sp, #28]
 8021872:	4654      	mov	r4, sl
 8021874:	2000      	movs	r0, #0
 8021876:	f04f 0c0a 	mov.w	ip, #10
 802187a:	4621      	mov	r1, r4
 802187c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021880:	3b30      	subs	r3, #48	; 0x30
 8021882:	2b09      	cmp	r3, #9
 8021884:	d94e      	bls.n	8021924 <_vfiprintf_r+0x1c4>
 8021886:	b1b0      	cbz	r0, 80218b6 <_vfiprintf_r+0x156>
 8021888:	9207      	str	r2, [sp, #28]
 802188a:	e014      	b.n	80218b6 <_vfiprintf_r+0x156>
 802188c:	eba0 0308 	sub.w	r3, r0, r8
 8021890:	fa09 f303 	lsl.w	r3, r9, r3
 8021894:	4313      	orrs	r3, r2
 8021896:	9304      	str	r3, [sp, #16]
 8021898:	46a2      	mov	sl, r4
 802189a:	e7d2      	b.n	8021842 <_vfiprintf_r+0xe2>
 802189c:	9b03      	ldr	r3, [sp, #12]
 802189e:	1d19      	adds	r1, r3, #4
 80218a0:	681b      	ldr	r3, [r3, #0]
 80218a2:	9103      	str	r1, [sp, #12]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	bfbb      	ittet	lt
 80218a8:	425b      	neglt	r3, r3
 80218aa:	f042 0202 	orrlt.w	r2, r2, #2
 80218ae:	9307      	strge	r3, [sp, #28]
 80218b0:	9307      	strlt	r3, [sp, #28]
 80218b2:	bfb8      	it	lt
 80218b4:	9204      	strlt	r2, [sp, #16]
 80218b6:	7823      	ldrb	r3, [r4, #0]
 80218b8:	2b2e      	cmp	r3, #46	; 0x2e
 80218ba:	d10c      	bne.n	80218d6 <_vfiprintf_r+0x176>
 80218bc:	7863      	ldrb	r3, [r4, #1]
 80218be:	2b2a      	cmp	r3, #42	; 0x2a
 80218c0:	d135      	bne.n	802192e <_vfiprintf_r+0x1ce>
 80218c2:	9b03      	ldr	r3, [sp, #12]
 80218c4:	1d1a      	adds	r2, r3, #4
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	9203      	str	r2, [sp, #12]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	bfb8      	it	lt
 80218ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80218d2:	3402      	adds	r4, #2
 80218d4:	9305      	str	r3, [sp, #20]
 80218d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80219bc <_vfiprintf_r+0x25c>
 80218da:	7821      	ldrb	r1, [r4, #0]
 80218dc:	2203      	movs	r2, #3
 80218de:	4650      	mov	r0, sl
 80218e0:	f7de fc8e 	bl	8000200 <memchr>
 80218e4:	b140      	cbz	r0, 80218f8 <_vfiprintf_r+0x198>
 80218e6:	2340      	movs	r3, #64	; 0x40
 80218e8:	eba0 000a 	sub.w	r0, r0, sl
 80218ec:	fa03 f000 	lsl.w	r0, r3, r0
 80218f0:	9b04      	ldr	r3, [sp, #16]
 80218f2:	4303      	orrs	r3, r0
 80218f4:	3401      	adds	r4, #1
 80218f6:	9304      	str	r3, [sp, #16]
 80218f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80218fc:	482c      	ldr	r0, [pc, #176]	; (80219b0 <_vfiprintf_r+0x250>)
 80218fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021902:	2206      	movs	r2, #6
 8021904:	f7de fc7c 	bl	8000200 <memchr>
 8021908:	2800      	cmp	r0, #0
 802190a:	d03f      	beq.n	802198c <_vfiprintf_r+0x22c>
 802190c:	4b29      	ldr	r3, [pc, #164]	; (80219b4 <_vfiprintf_r+0x254>)
 802190e:	bb1b      	cbnz	r3, 8021958 <_vfiprintf_r+0x1f8>
 8021910:	9b03      	ldr	r3, [sp, #12]
 8021912:	3307      	adds	r3, #7
 8021914:	f023 0307 	bic.w	r3, r3, #7
 8021918:	3308      	adds	r3, #8
 802191a:	9303      	str	r3, [sp, #12]
 802191c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802191e:	443b      	add	r3, r7
 8021920:	9309      	str	r3, [sp, #36]	; 0x24
 8021922:	e767      	b.n	80217f4 <_vfiprintf_r+0x94>
 8021924:	fb0c 3202 	mla	r2, ip, r2, r3
 8021928:	460c      	mov	r4, r1
 802192a:	2001      	movs	r0, #1
 802192c:	e7a5      	b.n	802187a <_vfiprintf_r+0x11a>
 802192e:	2300      	movs	r3, #0
 8021930:	3401      	adds	r4, #1
 8021932:	9305      	str	r3, [sp, #20]
 8021934:	4619      	mov	r1, r3
 8021936:	f04f 0c0a 	mov.w	ip, #10
 802193a:	4620      	mov	r0, r4
 802193c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021940:	3a30      	subs	r2, #48	; 0x30
 8021942:	2a09      	cmp	r2, #9
 8021944:	d903      	bls.n	802194e <_vfiprintf_r+0x1ee>
 8021946:	2b00      	cmp	r3, #0
 8021948:	d0c5      	beq.n	80218d6 <_vfiprintf_r+0x176>
 802194a:	9105      	str	r1, [sp, #20]
 802194c:	e7c3      	b.n	80218d6 <_vfiprintf_r+0x176>
 802194e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021952:	4604      	mov	r4, r0
 8021954:	2301      	movs	r3, #1
 8021956:	e7f0      	b.n	802193a <_vfiprintf_r+0x1da>
 8021958:	ab03      	add	r3, sp, #12
 802195a:	9300      	str	r3, [sp, #0]
 802195c:	462a      	mov	r2, r5
 802195e:	4b16      	ldr	r3, [pc, #88]	; (80219b8 <_vfiprintf_r+0x258>)
 8021960:	a904      	add	r1, sp, #16
 8021962:	4630      	mov	r0, r6
 8021964:	f7fb fd1c 	bl	801d3a0 <_printf_float>
 8021968:	4607      	mov	r7, r0
 802196a:	1c78      	adds	r0, r7, #1
 802196c:	d1d6      	bne.n	802191c <_vfiprintf_r+0x1bc>
 802196e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021970:	07d9      	lsls	r1, r3, #31
 8021972:	d405      	bmi.n	8021980 <_vfiprintf_r+0x220>
 8021974:	89ab      	ldrh	r3, [r5, #12]
 8021976:	059a      	lsls	r2, r3, #22
 8021978:	d402      	bmi.n	8021980 <_vfiprintf_r+0x220>
 802197a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802197c:	f7fe fcba 	bl	80202f4 <__retarget_lock_release_recursive>
 8021980:	89ab      	ldrh	r3, [r5, #12]
 8021982:	065b      	lsls	r3, r3, #25
 8021984:	f53f af12 	bmi.w	80217ac <_vfiprintf_r+0x4c>
 8021988:	9809      	ldr	r0, [sp, #36]	; 0x24
 802198a:	e711      	b.n	80217b0 <_vfiprintf_r+0x50>
 802198c:	ab03      	add	r3, sp, #12
 802198e:	9300      	str	r3, [sp, #0]
 8021990:	462a      	mov	r2, r5
 8021992:	4b09      	ldr	r3, [pc, #36]	; (80219b8 <_vfiprintf_r+0x258>)
 8021994:	a904      	add	r1, sp, #16
 8021996:	4630      	mov	r0, r6
 8021998:	f7fb ffa6 	bl	801d8e8 <_printf_i>
 802199c:	e7e4      	b.n	8021968 <_vfiprintf_r+0x208>
 802199e:	bf00      	nop
 80219a0:	08029ad0 	.word	0x08029ad0
 80219a4:	08029af0 	.word	0x08029af0
 80219a8:	08029ab0 	.word	0x08029ab0
 80219ac:	08029cec 	.word	0x08029cec
 80219b0:	08029cf6 	.word	0x08029cf6
 80219b4:	0801d3a1 	.word	0x0801d3a1
 80219b8:	0802173b 	.word	0x0802173b
 80219bc:	08029cf2 	.word	0x08029cf2

080219c0 <_read_r>:
 80219c0:	b538      	push	{r3, r4, r5, lr}
 80219c2:	4d07      	ldr	r5, [pc, #28]	; (80219e0 <_read_r+0x20>)
 80219c4:	4604      	mov	r4, r0
 80219c6:	4608      	mov	r0, r1
 80219c8:	4611      	mov	r1, r2
 80219ca:	2200      	movs	r2, #0
 80219cc:	602a      	str	r2, [r5, #0]
 80219ce:	461a      	mov	r2, r3
 80219d0:	f7e5 fe08 	bl	80075e4 <_read>
 80219d4:	1c43      	adds	r3, r0, #1
 80219d6:	d102      	bne.n	80219de <_read_r+0x1e>
 80219d8:	682b      	ldr	r3, [r5, #0]
 80219da:	b103      	cbz	r3, 80219de <_read_r+0x1e>
 80219dc:	6023      	str	r3, [r4, #0]
 80219de:	bd38      	pop	{r3, r4, r5, pc}
 80219e0:	20009fc4 	.word	0x20009fc4

080219e4 <abort>:
 80219e4:	b508      	push	{r3, lr}
 80219e6:	2006      	movs	r0, #6
 80219e8:	f000 f856 	bl	8021a98 <raise>
 80219ec:	2001      	movs	r0, #1
 80219ee:	f7e5 fdef 	bl	80075d0 <_exit>
	...

080219f4 <_fstat_r>:
 80219f4:	b538      	push	{r3, r4, r5, lr}
 80219f6:	4d07      	ldr	r5, [pc, #28]	; (8021a14 <_fstat_r+0x20>)
 80219f8:	2300      	movs	r3, #0
 80219fa:	4604      	mov	r4, r0
 80219fc:	4608      	mov	r0, r1
 80219fe:	4611      	mov	r1, r2
 8021a00:	602b      	str	r3, [r5, #0]
 8021a02:	f7e5 fe34 	bl	800766e <_fstat>
 8021a06:	1c43      	adds	r3, r0, #1
 8021a08:	d102      	bne.n	8021a10 <_fstat_r+0x1c>
 8021a0a:	682b      	ldr	r3, [r5, #0]
 8021a0c:	b103      	cbz	r3, 8021a10 <_fstat_r+0x1c>
 8021a0e:	6023      	str	r3, [r4, #0]
 8021a10:	bd38      	pop	{r3, r4, r5, pc}
 8021a12:	bf00      	nop
 8021a14:	20009fc4 	.word	0x20009fc4

08021a18 <_isatty_r>:
 8021a18:	b538      	push	{r3, r4, r5, lr}
 8021a1a:	4d06      	ldr	r5, [pc, #24]	; (8021a34 <_isatty_r+0x1c>)
 8021a1c:	2300      	movs	r3, #0
 8021a1e:	4604      	mov	r4, r0
 8021a20:	4608      	mov	r0, r1
 8021a22:	602b      	str	r3, [r5, #0]
 8021a24:	f7e5 fe33 	bl	800768e <_isatty>
 8021a28:	1c43      	adds	r3, r0, #1
 8021a2a:	d102      	bne.n	8021a32 <_isatty_r+0x1a>
 8021a2c:	682b      	ldr	r3, [r5, #0]
 8021a2e:	b103      	cbz	r3, 8021a32 <_isatty_r+0x1a>
 8021a30:	6023      	str	r3, [r4, #0]
 8021a32:	bd38      	pop	{r3, r4, r5, pc}
 8021a34:	20009fc4 	.word	0x20009fc4

08021a38 <_malloc_usable_size_r>:
 8021a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a3c:	1f18      	subs	r0, r3, #4
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	bfbc      	itt	lt
 8021a42:	580b      	ldrlt	r3, [r1, r0]
 8021a44:	18c0      	addlt	r0, r0, r3
 8021a46:	4770      	bx	lr

08021a48 <_raise_r>:
 8021a48:	291f      	cmp	r1, #31
 8021a4a:	b538      	push	{r3, r4, r5, lr}
 8021a4c:	4604      	mov	r4, r0
 8021a4e:	460d      	mov	r5, r1
 8021a50:	d904      	bls.n	8021a5c <_raise_r+0x14>
 8021a52:	2316      	movs	r3, #22
 8021a54:	6003      	str	r3, [r0, #0]
 8021a56:	f04f 30ff 	mov.w	r0, #4294967295
 8021a5a:	bd38      	pop	{r3, r4, r5, pc}
 8021a5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021a5e:	b112      	cbz	r2, 8021a66 <_raise_r+0x1e>
 8021a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021a64:	b94b      	cbnz	r3, 8021a7a <_raise_r+0x32>
 8021a66:	4620      	mov	r0, r4
 8021a68:	f000 f830 	bl	8021acc <_getpid_r>
 8021a6c:	462a      	mov	r2, r5
 8021a6e:	4601      	mov	r1, r0
 8021a70:	4620      	mov	r0, r4
 8021a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a76:	f000 b817 	b.w	8021aa8 <_kill_r>
 8021a7a:	2b01      	cmp	r3, #1
 8021a7c:	d00a      	beq.n	8021a94 <_raise_r+0x4c>
 8021a7e:	1c59      	adds	r1, r3, #1
 8021a80:	d103      	bne.n	8021a8a <_raise_r+0x42>
 8021a82:	2316      	movs	r3, #22
 8021a84:	6003      	str	r3, [r0, #0]
 8021a86:	2001      	movs	r0, #1
 8021a88:	e7e7      	b.n	8021a5a <_raise_r+0x12>
 8021a8a:	2400      	movs	r4, #0
 8021a8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021a90:	4628      	mov	r0, r5
 8021a92:	4798      	blx	r3
 8021a94:	2000      	movs	r0, #0
 8021a96:	e7e0      	b.n	8021a5a <_raise_r+0x12>

08021a98 <raise>:
 8021a98:	4b02      	ldr	r3, [pc, #8]	; (8021aa4 <raise+0xc>)
 8021a9a:	4601      	mov	r1, r0
 8021a9c:	6818      	ldr	r0, [r3, #0]
 8021a9e:	f7ff bfd3 	b.w	8021a48 <_raise_r>
 8021aa2:	bf00      	nop
 8021aa4:	200005bc 	.word	0x200005bc

08021aa8 <_kill_r>:
 8021aa8:	b538      	push	{r3, r4, r5, lr}
 8021aaa:	4d07      	ldr	r5, [pc, #28]	; (8021ac8 <_kill_r+0x20>)
 8021aac:	2300      	movs	r3, #0
 8021aae:	4604      	mov	r4, r0
 8021ab0:	4608      	mov	r0, r1
 8021ab2:	4611      	mov	r1, r2
 8021ab4:	602b      	str	r3, [r5, #0]
 8021ab6:	f7e5 fd7b 	bl	80075b0 <_kill>
 8021aba:	1c43      	adds	r3, r0, #1
 8021abc:	d102      	bne.n	8021ac4 <_kill_r+0x1c>
 8021abe:	682b      	ldr	r3, [r5, #0]
 8021ac0:	b103      	cbz	r3, 8021ac4 <_kill_r+0x1c>
 8021ac2:	6023      	str	r3, [r4, #0]
 8021ac4:	bd38      	pop	{r3, r4, r5, pc}
 8021ac6:	bf00      	nop
 8021ac8:	20009fc4 	.word	0x20009fc4

08021acc <_getpid_r>:
 8021acc:	f7e5 bd68 	b.w	80075a0 <_getpid>

08021ad0 <sqrt>:
 8021ad0:	b538      	push	{r3, r4, r5, lr}
 8021ad2:	ed2d 8b02 	vpush	{d8}
 8021ad6:	ec55 4b10 	vmov	r4, r5, d0
 8021ada:	f000 f82d 	bl	8021b38 <__ieee754_sqrt>
 8021ade:	4b15      	ldr	r3, [pc, #84]	; (8021b34 <sqrt+0x64>)
 8021ae0:	eeb0 8a40 	vmov.f32	s16, s0
 8021ae4:	eef0 8a60 	vmov.f32	s17, s1
 8021ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8021aec:	3301      	adds	r3, #1
 8021aee:	d019      	beq.n	8021b24 <sqrt+0x54>
 8021af0:	4622      	mov	r2, r4
 8021af2:	462b      	mov	r3, r5
 8021af4:	4620      	mov	r0, r4
 8021af6:	4629      	mov	r1, r5
 8021af8:	f7df f828 	bl	8000b4c <__aeabi_dcmpun>
 8021afc:	b990      	cbnz	r0, 8021b24 <sqrt+0x54>
 8021afe:	2200      	movs	r2, #0
 8021b00:	2300      	movs	r3, #0
 8021b02:	4620      	mov	r0, r4
 8021b04:	4629      	mov	r1, r5
 8021b06:	f7de fff9 	bl	8000afc <__aeabi_dcmplt>
 8021b0a:	b158      	cbz	r0, 8021b24 <sqrt+0x54>
 8021b0c:	f7fb fb76 	bl	801d1fc <__errno>
 8021b10:	2321      	movs	r3, #33	; 0x21
 8021b12:	6003      	str	r3, [r0, #0]
 8021b14:	2200      	movs	r2, #0
 8021b16:	2300      	movs	r3, #0
 8021b18:	4610      	mov	r0, r2
 8021b1a:	4619      	mov	r1, r3
 8021b1c:	f7de fea6 	bl	800086c <__aeabi_ddiv>
 8021b20:	ec41 0b18 	vmov	d8, r0, r1
 8021b24:	eeb0 0a48 	vmov.f32	s0, s16
 8021b28:	eef0 0a68 	vmov.f32	s1, s17
 8021b2c:	ecbd 8b02 	vpop	{d8}
 8021b30:	bd38      	pop	{r3, r4, r5, pc}
 8021b32:	bf00      	nop
 8021b34:	20000790 	.word	0x20000790

08021b38 <__ieee754_sqrt>:
 8021b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b3c:	ec55 4b10 	vmov	r4, r5, d0
 8021b40:	4e56      	ldr	r6, [pc, #344]	; (8021c9c <__ieee754_sqrt+0x164>)
 8021b42:	43ae      	bics	r6, r5
 8021b44:	ee10 0a10 	vmov	r0, s0
 8021b48:	ee10 3a10 	vmov	r3, s0
 8021b4c:	4629      	mov	r1, r5
 8021b4e:	462a      	mov	r2, r5
 8021b50:	d110      	bne.n	8021b74 <__ieee754_sqrt+0x3c>
 8021b52:	ee10 2a10 	vmov	r2, s0
 8021b56:	462b      	mov	r3, r5
 8021b58:	f7de fd5e 	bl	8000618 <__aeabi_dmul>
 8021b5c:	4602      	mov	r2, r0
 8021b5e:	460b      	mov	r3, r1
 8021b60:	4620      	mov	r0, r4
 8021b62:	4629      	mov	r1, r5
 8021b64:	f7de fba2 	bl	80002ac <__adddf3>
 8021b68:	4604      	mov	r4, r0
 8021b6a:	460d      	mov	r5, r1
 8021b6c:	ec45 4b10 	vmov	d0, r4, r5
 8021b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b74:	2d00      	cmp	r5, #0
 8021b76:	dc10      	bgt.n	8021b9a <__ieee754_sqrt+0x62>
 8021b78:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021b7c:	4330      	orrs	r0, r6
 8021b7e:	d0f5      	beq.n	8021b6c <__ieee754_sqrt+0x34>
 8021b80:	b15d      	cbz	r5, 8021b9a <__ieee754_sqrt+0x62>
 8021b82:	ee10 2a10 	vmov	r2, s0
 8021b86:	462b      	mov	r3, r5
 8021b88:	ee10 0a10 	vmov	r0, s0
 8021b8c:	f7de fb8c 	bl	80002a8 <__aeabi_dsub>
 8021b90:	4602      	mov	r2, r0
 8021b92:	460b      	mov	r3, r1
 8021b94:	f7de fe6a 	bl	800086c <__aeabi_ddiv>
 8021b98:	e7e6      	b.n	8021b68 <__ieee754_sqrt+0x30>
 8021b9a:	1509      	asrs	r1, r1, #20
 8021b9c:	d076      	beq.n	8021c8c <__ieee754_sqrt+0x154>
 8021b9e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021ba2:	07ce      	lsls	r6, r1, #31
 8021ba4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8021ba8:	bf5e      	ittt	pl
 8021baa:	0fda      	lsrpl	r2, r3, #31
 8021bac:	005b      	lslpl	r3, r3, #1
 8021bae:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8021bb2:	0fda      	lsrs	r2, r3, #31
 8021bb4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8021bb8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021bbc:	2000      	movs	r0, #0
 8021bbe:	106d      	asrs	r5, r5, #1
 8021bc0:	005b      	lsls	r3, r3, #1
 8021bc2:	f04f 0e16 	mov.w	lr, #22
 8021bc6:	4684      	mov	ip, r0
 8021bc8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021bcc:	eb0c 0401 	add.w	r4, ip, r1
 8021bd0:	4294      	cmp	r4, r2
 8021bd2:	bfde      	ittt	le
 8021bd4:	1b12      	suble	r2, r2, r4
 8021bd6:	eb04 0c01 	addle.w	ip, r4, r1
 8021bda:	1840      	addle	r0, r0, r1
 8021bdc:	0052      	lsls	r2, r2, #1
 8021bde:	f1be 0e01 	subs.w	lr, lr, #1
 8021be2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021be6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021bea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021bee:	d1ed      	bne.n	8021bcc <__ieee754_sqrt+0x94>
 8021bf0:	4671      	mov	r1, lr
 8021bf2:	2720      	movs	r7, #32
 8021bf4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021bf8:	4562      	cmp	r2, ip
 8021bfa:	eb04 060e 	add.w	r6, r4, lr
 8021bfe:	dc02      	bgt.n	8021c06 <__ieee754_sqrt+0xce>
 8021c00:	d113      	bne.n	8021c2a <__ieee754_sqrt+0xf2>
 8021c02:	429e      	cmp	r6, r3
 8021c04:	d811      	bhi.n	8021c2a <__ieee754_sqrt+0xf2>
 8021c06:	2e00      	cmp	r6, #0
 8021c08:	eb06 0e04 	add.w	lr, r6, r4
 8021c0c:	da43      	bge.n	8021c96 <__ieee754_sqrt+0x15e>
 8021c0e:	f1be 0f00 	cmp.w	lr, #0
 8021c12:	db40      	blt.n	8021c96 <__ieee754_sqrt+0x15e>
 8021c14:	f10c 0801 	add.w	r8, ip, #1
 8021c18:	eba2 020c 	sub.w	r2, r2, ip
 8021c1c:	429e      	cmp	r6, r3
 8021c1e:	bf88      	it	hi
 8021c20:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021c24:	1b9b      	subs	r3, r3, r6
 8021c26:	4421      	add	r1, r4
 8021c28:	46c4      	mov	ip, r8
 8021c2a:	0052      	lsls	r2, r2, #1
 8021c2c:	3f01      	subs	r7, #1
 8021c2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021c32:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021c36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021c3a:	d1dd      	bne.n	8021bf8 <__ieee754_sqrt+0xc0>
 8021c3c:	4313      	orrs	r3, r2
 8021c3e:	d006      	beq.n	8021c4e <__ieee754_sqrt+0x116>
 8021c40:	1c4c      	adds	r4, r1, #1
 8021c42:	bf13      	iteet	ne
 8021c44:	3101      	addne	r1, #1
 8021c46:	3001      	addeq	r0, #1
 8021c48:	4639      	moveq	r1, r7
 8021c4a:	f021 0101 	bicne.w	r1, r1, #1
 8021c4e:	1043      	asrs	r3, r0, #1
 8021c50:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021c54:	0849      	lsrs	r1, r1, #1
 8021c56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021c5a:	07c2      	lsls	r2, r0, #31
 8021c5c:	bf48      	it	mi
 8021c5e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021c62:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8021c66:	460c      	mov	r4, r1
 8021c68:	463d      	mov	r5, r7
 8021c6a:	e77f      	b.n	8021b6c <__ieee754_sqrt+0x34>
 8021c6c:	0ada      	lsrs	r2, r3, #11
 8021c6e:	3815      	subs	r0, #21
 8021c70:	055b      	lsls	r3, r3, #21
 8021c72:	2a00      	cmp	r2, #0
 8021c74:	d0fa      	beq.n	8021c6c <__ieee754_sqrt+0x134>
 8021c76:	02d7      	lsls	r7, r2, #11
 8021c78:	d50a      	bpl.n	8021c90 <__ieee754_sqrt+0x158>
 8021c7a:	f1c1 0420 	rsb	r4, r1, #32
 8021c7e:	fa23 f404 	lsr.w	r4, r3, r4
 8021c82:	1e4d      	subs	r5, r1, #1
 8021c84:	408b      	lsls	r3, r1
 8021c86:	4322      	orrs	r2, r4
 8021c88:	1b41      	subs	r1, r0, r5
 8021c8a:	e788      	b.n	8021b9e <__ieee754_sqrt+0x66>
 8021c8c:	4608      	mov	r0, r1
 8021c8e:	e7f0      	b.n	8021c72 <__ieee754_sqrt+0x13a>
 8021c90:	0052      	lsls	r2, r2, #1
 8021c92:	3101      	adds	r1, #1
 8021c94:	e7ef      	b.n	8021c76 <__ieee754_sqrt+0x13e>
 8021c96:	46e0      	mov	r8, ip
 8021c98:	e7be      	b.n	8021c18 <__ieee754_sqrt+0xe0>
 8021c9a:	bf00      	nop
 8021c9c:	7ff00000 	.word	0x7ff00000

08021ca0 <_init>:
 8021ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ca2:	bf00      	nop
 8021ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ca6:	bc08      	pop	{r3}
 8021ca8:	469e      	mov	lr, r3
 8021caa:	4770      	bx	lr

08021cac <_fini>:
 8021cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cae:	bf00      	nop
 8021cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021cb2:	bc08      	pop	{r3}
 8021cb4:	469e      	mov	lr, r3
 8021cb6:	4770      	bx	lr
