
MC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000219e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009e3c  08021b98  08021b98  00031b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b9d4  0802b9d4  000408bc  2**0
                  CONTENTS
  4 .ARM          00000008  0802b9d4  0802b9d4  0003b9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b9dc  0802b9dc  000408bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b9dc  0802b9dc  0003b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b9e0  0802b9e0  0003b9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008bc  20000000  0802b9e4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009854  200008c0  0802c2a0  000408c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a114  0802c2a0  0004a114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000408bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   001f359d  00000000  00000000  000408ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cdc7  00000000  00000000  00233e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005348  00000000  00000000  00240c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004dc8  00000000  00000000  00245f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040741  00000000  00000000  0024ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005e2fd  00000000  00000000  0028b4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142734  00000000  00000000  002e979e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0042bed2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00017644  00000000  00000000  0042bf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200008c0 	.word	0x200008c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021b80 	.word	0x08021b80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200008c4 	.word	0x200008c4
 80001ec:	08021b80 	.word	0x08021b80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_Read_REG>:

void Measure_Kdiv(void);


uint32_t ADC_Read_REG(uint8_t REG, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	uint32_t RES;
	ADC_NCS_ACTIVE();
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <ADC_Read_REG+0x98>)
 80010c2:	f009 f89d 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((REG)<<1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b3f      	subs	r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	74bb      	strb	r3, [r7, #18]
	aTxBuffer[3] = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 0110 	add.w	r1, r7, #16
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <ADC_Read_REG+0x9c>)
 80010f6:	f00d f93e 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Read_REG+0x98>)
 8001100:	f009 f87e 	bl	800a200 <HAL_GPIO_WritePin>

	RES=aRxBuffer[1];
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[3];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
	RES = RES>>(8*(3-len));
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f1c3 0303 	rsb	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]

	return RES;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	2000793c 	.word	0x2000793c

0800114c <ADC_Conversion>:


void ADC_Conversion(uint8_t RATE)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	ADC_NCS_ACTIVE();
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <ADC_Conversion+0x44>)
 800115c:	f009 f850 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b50      	subs	r3, #80	; 0x50
 8001164:	b2db      	uxtb	r3, r3
 8001166:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Conversion+0x48>)
 800117a:	f00d f8fc 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ADC_Conversion+0x44>)
 8001184:	f009 f83c 	bl	800a200 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000800 	.word	0x48000800
 8001194:	2000793c 	.word	0x2000793c

08001198 <ADC_Read_DATA>:

int32_t ADC_Read_DATA(uint8_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <ADC_Read_DATA+0x98>)
 80011a8:	f009 f82a 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((14+Channel)<<1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	330e      	adds	r3, #14
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b3f      	subs	r3, #63	; 0x3f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f107 0110 	add.w	r1, r7, #16
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <ADC_Read_DATA+0x9c>)
 80011da:	f00d f8cc 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <ADC_Read_DATA+0x98>)
 80011e4:	f009 f80c 	bl	800a200 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[2];
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[3];
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
	if((data32>>23)==1) return -(8388608-(data32&0x7FFFFF));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0ddb      	lsrs	r3, r3, #23
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <ADC_Read_DATA+0x88>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800121a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800121e:	e002      	b.n	8001226 <ADC_Read_DATA+0x8e>
	else return (data32&0x7FFFFF);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800
 8001234:	2000793c 	.word	0x2000793c

08001238 <ADC_Read_STAT>:

uint32_t ADC_Read_STAT(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001244:	f008 ffdc 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((STAT_REG)<<1);
 8001248:	23c1      	movs	r3, #193	; 0xc1
 800124a:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	72bb      	strb	r3, [r7, #10]
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <ADC_Read_STAT+0x70>)
 8001268:	f00d f885 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001272:	f008 ffc5 	bl	800a200 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[2];
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[3];
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
	return data32;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	2000793c 	.word	0x2000793c

080012ac <ADC_Write_REG>:

void ADC_Write_REG(uint8_t REG, uint8_t*DATA, uint8_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[10], aRxBuffer[10];
	uint8_t i=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
	ADC_NCS_ACTIVE();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <ADC_Write_REG+0x84>)
 80012c6:	f008 ff9b 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC0+((REG)<<1);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	753b      	strb	r3, [r7, #20]
	for(i=0;i<len;i++)aTxBuffer[i+1] = DATA[i];
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e00d      	b.n	80012f8 <ADC_Write_REG+0x4c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	441a      	add	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ed      	bcc.n	80012dc <ADC_Write_REG+0x30>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	f107 0114 	add.w	r1, r7, #20
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	9000      	str	r0, [sp, #0]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ADC_Write_REG+0x88>)
 8001318:	f00d f82d 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ADC_Write_REG+0x84>)
 8001322:	f008 ff6d 	bl	800a200 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800
 8001334:	2000793c 	.word	0x2000793c

08001338 <Auto_System_Calibration>:
	ADC_NCS_NOT_ACTIVE();
}


void Auto_System_Calibration(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b095      	sub	sp, #84	; 0x54
 800133c:	af00      	add	r7, sp, #0
	uint16_t i,j;
	int32_t DYNAMIC_BAND_MAX[9]={0,0,0,0,0,0,0,0,0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01b fef2 	bl	801d130 <memset>
	int32_t DYNAMIC_BAND_MIN[9]={0,0,0,0,0,0,0,0,0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f01b feec 	bl	801d130 <memset>
	uint8_t RES=0;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	// Читаем калибровочные данные из внешнего регистра
//	aTxBuffer[0] = 0x10;
//	ADC_Write_REG(CTRL3_REG, aTxBuffer, 1);

	calibr_process=1;
 800135e:	4b53      	ldr	r3, [pc, #332]	; (80014ac <Auto_System_Calibration+0x174>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
//		DYNAMIC_BAND_MAX[i]=ADC_middle[5];
//		DYNAMIC_BAND_MIN[i]=ADC_middle[0];
//	}


	ADC_PGA_Set(PGA_GAIN128);
 8001364:	2008      	movs	r0, #8
 8001366:	f000 fa2f 	bl	80017c8 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <Auto_System_Calibration+0x178>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff feec 	bl	800114c <ADC_Conversion>
	ADC_Buff_size=256;
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <Auto_System_Calibration+0x17c>)
 8001376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137a:	801a      	strh	r2, [r3, #0]
	adc_full_buff=0;
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <Auto_System_Calibration+0x180>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
	while(adc_full_buff<ADC_Buff_size)
 8001382:	e00a      	b.n	800139a <Auto_System_Calibration+0x62>
	{
		Gauge_loading((uint8_t*)"Калибровка АЦП..",  (uint8_t)((adc_full_buff*100)/256));
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <Auto_System_Calibration+0x180>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2264      	movs	r2, #100	; 0x64
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	4849      	ldr	r0, [pc, #292]	; (80014bc <Auto_System_Calibration+0x184>)
 8001396:	f001 fbaf 	bl	8002af8 <Gauge_loading>
	while(adc_full_buff<ADC_Buff_size)
 800139a:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <Auto_System_Calibration+0x17c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <Auto_System_Calibration+0x180>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8ed      	bhi.n	8001384 <Auto_System_Calibration+0x4c>
//	OldData=ADC_middle[5];



	// Расчитываем коэффициенты для SYSTEM калибровки GAIN и OFFSET
	adc_mux[0]=1.0;
 80013a8:	4945      	ldr	r1, [pc, #276]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Auto_System_Calibration+0x18c>)
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]
	//for(i=1;i<9;i++)adc_mux[i]=(double)(DYNAMIC_BAND_MAX[0]*(1<<(i-1)))/(double)(DYNAMIC_BAND_MAX[i]-DYNAMIC_BAND_MIN[i]);
	for(i=1;i<9;i++)adc_mux[i]=(double)DYNAMIC_BAND_MAX[i]/(double)DYNAMIC_BAND_MAX[1];
 80013b4:	2301      	movs	r3, #1
 80013b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80013ba:	e024      	b.n	8001406 <Auto_System_Calibration+0xce>
 80013bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013c6:	4413      	add	r3, r2
 80013c8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8b9 	bl	8000544 <__aeabi_i2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8b3 	bl	8000544 <__aeabi_i2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	f8b7 604e 	ldrh.w	r6, [r7, #78]	; 0x4e
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7ff fa3f 	bl	800086c <__aeabi_ddiv>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4833      	ldr	r0, [pc, #204]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013f4:	00f1      	lsls	r1, r6, #3
 80013f6:	4401      	add	r1, r0
 80013f8:	e9c1 2300 	strd	r2, r3, [r1]
 80013fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001400:	3301      	adds	r3, #1
 8001402:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800140a:	2b08      	cmp	r3, #8
 800140c:	d9d6      	bls.n	80013bc <Auto_System_Calibration+0x84>
	for(i=0;i<9;i++)adc_system_offset[i]=DYNAMIC_BAND_MIN[i];
 800140e:	2300      	movs	r3, #0
 8001410:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001414:	e011      	b.n	800143a <Auto_System_Calibration+0x102>
 8001416:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800141a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001424:	440b      	add	r3, r1
 8001426:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800142a:	4927      	ldr	r1, [pc, #156]	; (80014c8 <Auto_System_Calibration+0x190>)
 800142c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8001430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001434:	3301      	adds	r3, #1
 8001436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800143a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800143e:	2b08      	cmp	r3, #8
 8001440:	d9e9      	bls.n	8001416 <Auto_System_Calibration+0xde>

	// Проверяем правильность показаний усиления
	for(i=2;i<9;i++) {if(DYNAMIC_BAND_MAX[i-1]<DYNAMIC_BAND_MAX[i])RES=1;}
 8001442:	2302      	movs	r3, #2
 8001444:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001448:	e01a      	b.n	8001480 <Auto_System_Calibration+0x148>
 800144a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800144e:	3b01      	subs	r3, #1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001456:	4413      	add	r3, r2
 8001458:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800145c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001466:	440b      	add	r3, r1
 8001468:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800146c:	429a      	cmp	r2, r3
 800146e:	da02      	bge.n	8001476 <Auto_System_Calibration+0x13e>
 8001470:	2301      	movs	r3, #1
 8001472:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800147a:	3301      	adds	r3, #1
 800147c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001480:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001484:	2b08      	cmp	r3, #8
 8001486:	d9e0      	bls.n	800144a <Auto_System_Calibration+0x112>
	if(RES==1)ERROR_REG|=(0x01<<ADC_cal_err);
 8001488:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <Auto_System_Calibration+0x164>
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <Auto_System_Calibration+0x194>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <Auto_System_Calibration+0x194>)
 800149a:	6013      	str	r3, [r2, #0]

	//OldData=(double)DYNAMIC_BAND_MAX[1];

	calibr_process=0;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <Auto_System_Calibration+0x174>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3754      	adds	r7, #84	; 0x54
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000909 	.word	0x20000909
 80014b0:	200000a3 	.word	0x200000a3
 80014b4:	200000a4 	.word	0x200000a4
 80014b8:	200008e0 	.word	0x200008e0
 80014bc:	08021b98 	.word	0x08021b98
 80014c0:	20000000 	.word	0x20000000
 80014c4:	3ff00000 	.word	0x3ff00000
 80014c8:	200008e4 	.word	0x200008e4
 80014cc:	20000950 	.word	0x20000950

080014d0 <ADC_Calibration>:


void ADC_Calibration(uint8_t CAL)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	aTxBuffer[0]=((CAL)<<6)+0x02;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3302      	adds	r3, #2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2201      	movs	r2, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fedc 	bl	80012ac <ADC_Write_REG>

	ADC_NCS_ACTIVE();
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <ADC_Calibration+0x5c>)
 80014fa:	f008 fe81 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xA0;
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001502:	f107 0208 	add.w	r2, r7, #8
 8001506:	f107 010c 	add.w	r1, r7, #12
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <ADC_Calibration+0x60>)
 8001514:	f00c ff2f 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <ADC_Calibration+0x5c>)
 800151e:	f008 fe6f 	bl	800a200 <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	48000800 	.word	0x48000800
 8001530:	2000793c 	.word	0x2000793c

08001534 <ADC_Start_Conversion>:

void ADC_Start_Conversion(uint8_t channel, uint8_t RATE)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	if(channel>6)channel=6;
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d901      	bls.n	800154e <ADC_Start_Conversion+0x1a>
 800154a:	2306      	movs	r3, #6
 800154c:	71fb      	strb	r3, [r7, #7]
	aTxBuffer[0]=channel<<5;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	b2db      	uxtb	r3, r3
 8001554:	733b      	strb	r3, [r7, #12]
	// Выбираем канал
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	2008      	movs	r0, #8
 8001560:	f7ff fea4 	bl	80012ac <ADC_Write_REG>
	// Запускаем преобразование
	ADC_NCS_ACTIVE();
 8001564:	2200      	movs	r2, #0
 8001566:	2110      	movs	r1, #16
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <ADC_Start_Conversion+0x6c>)
 800156a:	f008 fe49 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	3b50      	subs	r3, #80	; 0x50
 8001572:	b2db      	uxtb	r3, r3
 8001574:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001576:	f107 0208 	add.w	r2, r7, #8
 800157a:	f107 010c 	add.w	r1, r7, #12
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <ADC_Start_Conversion+0x70>)
 8001588:	f00c fef5 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800158c:	2201      	movs	r2, #1
 800158e:	2110      	movs	r1, #16
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <ADC_Start_Conversion+0x6c>)
 8001592:	f008 fe35 	bl	800a200 <HAL_GPIO_WritePin>

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	48000800 	.word	0x48000800
 80015a4:	2000793c 	.word	0x2000793c

080015a8 <ADC_init>:



void ADC_init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data=0xFFFFFFFF;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	60fb      	str	r3, [r7, #12]
	uint16_t i=0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	817b      	strh	r3, [r7, #10]

	// Reset
	aTxBuffer[0] = 0x30;
 80015b8:	2330      	movs	r3, #48	; 0x30
 80015ba:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2201      	movs	r2, #1
 80015c0:	4619      	mov	r1, r3
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fe72 	bl	80012ac <ADC_Write_REG>
	ADC_NCS_ACTIVE();
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	482e      	ldr	r0, [pc, #184]	; (8001688 <ADC_init+0xe0>)
 80015ce:	f008 fe17 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x90;
 80015d2:	2390      	movs	r3, #144	; 0x90
 80015d4:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 80015d6:	463a      	mov	r2, r7
 80015d8:	1d39      	adds	r1, r7, #4
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	482a      	ldr	r0, [pc, #168]	; (800168c <ADC_init+0xe4>)
 80015e4:	f00c fec7 	bl	800e376 <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80015e8:	2201      	movs	r2, #1
 80015ea:	2110      	movs	r1, #16
 80015ec:	4826      	ldr	r0, [pc, #152]	; (8001688 <ADC_init+0xe0>)
 80015ee:	f008 fe07 	bl	800a200 <HAL_GPIO_WritePin>

	while(i<1000)
 80015f2:	e005      	b.n	8001600 <ADC_init+0x58>
	{
		data=ADC_Read_STAT();
 80015f4:	f7ff fe20 	bl	8001238 <ADC_Read_STAT>
 80015f8:	60f8      	str	r0, [r7, #12]
		i++;
 80015fa:	897b      	ldrh	r3, [r7, #10]
 80015fc:	3301      	adds	r3, #1
 80015fe:	817b      	strh	r3, [r7, #10]
	while(i<1000)
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001606:	d3f5      	bcc.n	80015f4 <ADC_init+0x4c>
	}
	if(data!=152) ERROR_REG=(1<<ADC_err);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b98      	cmp	r3, #152	; 0x98
 800160c:	d002      	beq.n	8001614 <ADC_init+0x6c>
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <ADC_init+0xe8>)
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
//
//	aTxBuffer[0] = 0x02;
//	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);

	// Self calibration
	LED(1,0,0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2001      	movs	r0, #1
 800161a:	f000 fc61 	bl	8001ee0 <LED>
	aTxBuffer[0] = 0x01;
 800161e:	2301      	movs	r3, #1
 8001620:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	2008      	movs	r0, #8
 800162a:	f7ff fe3f 	bl	80012ac <ADC_Write_REG>
	ADC_Calibration(self_calibration);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff ff4e 	bl	80014d0 <ADC_Calibration>
	delay_ms(300);
 8001634:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001638:	f001 fce0 	bl	8002ffc <delay_ms>
	aTxBuffer[0] = 0x09;
 800163c:	2309      	movs	r3, #9
 800163e:	713b      	strb	r3, [r7, #4]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	2008      	movs	r0, #8
 8001648:	f7ff fe30 	bl	80012ac <ADC_Write_REG>


	delay_ms(1500);
 800164c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001650:	f001 fcd4 	bl	8002ffc <delay_ms>
	//Auto_System_Calibration();

//	ADC_PGA_Set(PGA_GAIN);
//	ADC_Conversion(ADC_SPS);

	LED(0,0,0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2000      	movs	r0, #0
 800165a:	f000 fc41 	bl	8001ee0 <LED>

	ADC_PGA_Set(PGA_GAIN[current_adc_channel]);
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <ADC_init+0xec>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <ADC_init+0xf0>)
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f8ad 	bl	80017c8 <ADC_PGA_Set>
		ADC_Start_Conversion(current_adc_channel, ADC_SPS);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <ADC_init+0xec>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <ADC_init+0xf4>)
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5b 	bl	8001534 <ADC_Start_Conversion>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	48000800 	.word	0x48000800
 800168c:	2000793c 	.word	0x2000793c
 8001690:	20000950 	.word	0x20000950
 8001694:	20000049 	.word	0x20000049
 8001698:	2000009c 	.word	0x2000009c
 800169c:	200000a3 	.word	0x200000a3

080016a0 <Continue_Converting>:



void Continue_Converting(void)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	71fb      	strb	r3, [r7, #7]

	// Сдвигаем буфер
	for(i=0;i<ADC_Buff_size-1;i++) ADC_channel[current_adc_channel][i]=ADC_channel[current_adc_channel][i+1];
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e015      	b.n	80016dc <Continue_Converting+0x3c>
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <Continue_Converting+0x10c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <Continue_Converting+0x10c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461c      	mov	r4, r3
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	483b      	ldr	r0, [pc, #236]	; (80017b0 <Continue_Converting+0x110>)
 80016c4:	0249      	lsls	r1, r1, #9
 80016c6:	440a      	add	r2, r1
 80016c8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80016cc:	4838      	ldr	r0, [pc, #224]	; (80017b0 <Continue_Converting+0x110>)
 80016ce:	0261      	lsls	r1, r4, #9
 80016d0:	440b      	add	r3, r1
 80016d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	3301      	adds	r3, #1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <Continue_Converting+0x114>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbe3      	blt.n	80016b0 <Continue_Converting+0x10>
	// Читаем значение
	if(current_adc_channel==6) ADC_channel[current_adc_channel][ADC_Buff_size-1]=ADC_Read_DATA(5);
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <Continue_Converting+0x10c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d10f      	bne.n	8001710 <Continue_Converting+0x70>
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <Continue_Converting+0x10c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461d      	mov	r5, r3
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <Continue_Converting+0x114>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	1e5c      	subs	r4, r3, #1
 80016fc:	2005      	movs	r0, #5
 80016fe:	f7ff fd4b 	bl	8001198 <ADC_Read_DATA>
 8001702:	4602      	mov	r2, r0
 8001704:	492a      	ldr	r1, [pc, #168]	; (80017b0 <Continue_Converting+0x110>)
 8001706:	026b      	lsls	r3, r5, #9
 8001708:	4423      	add	r3, r4
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800170e:	e010      	b.n	8001732 <Continue_Converting+0x92>
	else ADC_channel[current_adc_channel][ADC_Buff_size-1]=ADC_Read_DATA(current_adc_channel);
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <Continue_Converting+0x10c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4a25      	ldr	r2, [pc, #148]	; (80017ac <Continue_Converting+0x10c>)
 8001716:	7812      	ldrb	r2, [r2, #0]
 8001718:	4615      	mov	r5, r2
 800171a:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <Continue_Converting+0x114>)
 800171c:	8812      	ldrh	r2, [r2, #0]
 800171e:	1e54      	subs	r4, r2, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fd39 	bl	8001198 <ADC_Read_DATA>
 8001726:	4602      	mov	r2, r0
 8001728:	4921      	ldr	r1, [pc, #132]	; (80017b0 <Continue_Converting+0x110>)
 800172a:	026b      	lsls	r3, r5, #9
 800172c:	4423      	add	r3, r4
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Считаем заполнение буфера текущего канала
	if(++adc_full_buff==ADC_Buff_size)
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <Continue_Converting+0x118>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <Continue_Converting+0x118>)
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <Continue_Converting+0x118>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <Continue_Converting+0x114>)
 8001742:	8812      	ldrh	r2, [r2, #0]
 8001744:	4293      	cmp	r3, r2
 8001746:	d10f      	bne.n	8001768 <Continue_Converting+0xc8>
	{
		if(++current_adc_channel==7)current_adc_channel=0;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <Continue_Converting+0x10c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <Continue_Converting+0x10c>)
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <Continue_Converting+0x10c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b07      	cmp	r3, #7
 800175a:	d102      	bne.n	8001762 <Continue_Converting+0xc2>
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <Continue_Converting+0x10c>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		adc_full_buff=0;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <Continue_Converting+0x118>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	}

	// Стартуем преобразование
	ADC_PGA_Set(PGA_GAIN[current_adc_channel]);
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <Continue_Converting+0x10c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <Continue_Converting+0x11c>)
 8001770:	5c9b      	ldrb	r3, [r3, r2]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f828 	bl	80017c8 <ADC_PGA_Set>
	if(current_adc_channel==6) ADC_Start_Conversion(5, ADC_SPS);
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <Continue_Converting+0x10c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b06      	cmp	r3, #6
 800177e:	d106      	bne.n	800178e <Continue_Converting+0xee>
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <Continue_Converting+0x120>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	2005      	movs	r0, #5
 8001788:	f7ff fed4 	bl	8001534 <ADC_Start_Conversion>
 800178c:	e007      	b.n	800179e <Continue_Converting+0xfe>
	else ADC_Start_Conversion(current_adc_channel, ADC_SPS);
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <Continue_Converting+0x10c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <Continue_Converting+0x120>)
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fecb 	bl	8001534 <ADC_Start_Conversion>

	adc_timeout=adc_timeout_const;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <Continue_Converting+0x124>)
 80017a0:	2219      	movs	r2, #25
 80017a2:	701a      	strb	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}
 80017ac:	20000049 	.word	0x20000049
 80017b0:	200023c0 	.word	0x200023c0
 80017b4:	200000a4 	.word	0x200000a4
 80017b8:	200008e0 	.word	0x200008e0
 80017bc:	2000009c 	.word	0x2000009c
 80017c0:	200000a3 	.word	0x200000a3
 80017c4:	20000048 	.word	0x20000048

080017c8 <ADC_PGA_Set>:



void ADC_PGA_Set(uint8_t pga_data)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4];
	uint8_t CTRL=ADC_Read_REG(CTRL2_REG, 1);
 80017d2:	2101      	movs	r1, #1
 80017d4:	2002      	movs	r0, #2
 80017d6:	f7ff fc69 	bl	80010ac <ADC_Read_REG>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
	CTRL&=0xF0;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	f023 030f 	bic.w	r3, r3, #15
 80017e4:	73fb      	strb	r3, [r7, #15]
	if(pga_data==0) aTxBuffer[0]=CTRL;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <ADC_PGA_Set+0x2a>
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	723b      	strb	r3, [r7, #8]
 80017f0:	e006      	b.n	8001800 <ADC_PGA_Set+0x38>
	else aTxBuffer[0]=CTRL+0x08+(pga_data-1);
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4413      	add	r3, r2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	3307      	adds	r3, #7
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL2_REG, aTxBuffer, 1);
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	2201      	movs	r2, #1
 8001806:	4619      	mov	r1, r3
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff fd4f 	bl	80012ac <ADC_Write_REG>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <ADC_EXT>:


void ADC_EXT(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
	Continue_Converting();
 800181a:	f7ff ff41 	bl	80016a0 <Continue_Converting>
	new_cal_tim++;

	adc_timeout=adc_timeout_const;
	ADC_Conversion(ADC_SPS);
	*/
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <ADC_process>:




void ADC_process(void)
{
 8001824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001828:	b091      	sub	sp, #68	; 0x44
 800182a:	af00      	add	r7, sp, #0
	uint16_t i=0, j=0;
 800182c:	2300      	movs	r3, #0
 800182e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001830:	2300      	movs	r3, #0
 8001832:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint8_t aTxBuffer[4];
	int64_t SUM[7]={0,0,0,0,0,0};
 8001834:	463b      	mov	r3, r7
 8001836:	2238      	movs	r2, #56	; 0x38
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f01b fc78 	bl	801d130 <memset>


	// Скользящее среднее
	for(i=0;i<ADC_Buff_size;i++)
 8001840:	2300      	movs	r3, #0
 8001842:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001844:	e028      	b.n	8001898 <ADC_process+0x74>
	{ for(j=0;j<7;j++) SUM[j]+=ADC_channel[j][i]; }
 8001846:	2300      	movs	r3, #0
 8001848:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800184a:	e01f      	b.n	800188c <ADC_process+0x68>
 800184c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001854:	4413      	add	r3, r2
 8001856:	3b40      	subs	r3, #64	; 0x40
 8001858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800185e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001860:	4e6d      	ldr	r6, [pc, #436]	; (8001a18 <ADC_process+0x1f4>)
 8001862:	0252      	lsls	r2, r2, #9
 8001864:	4413      	add	r3, r2
 8001866:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800186a:	461a      	mov	r2, r3
 800186c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001870:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 8001872:	1884      	adds	r4, r0, r2
 8001874:	eb41 0503 	adc.w	r5, r1, r3
 8001878:	00f3      	lsls	r3, r6, #3
 800187a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800187e:	4413      	add	r3, r2
 8001880:	3b40      	subs	r3, #64	; 0x40
 8001882:	e9c3 4500 	strd	r4, r5, [r3]
 8001886:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001888:	3301      	adds	r3, #1
 800188a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800188c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800188e:	2b06      	cmp	r3, #6
 8001890:	d9dc      	bls.n	800184c <ADC_process+0x28>
	for(i=0;i<ADC_Buff_size;i++)
 8001892:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001894:	3301      	adds	r3, #1
 8001896:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001898:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <ADC_process+0x1f8>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800189e:	429a      	cmp	r2, r3
 80018a0:	d3d1      	bcc.n	8001846 <ADC_process+0x22>
	for(i=0;i<7;i++) ADC_middle[i]=(SUM[i]/ADC_Buff_size);
 80018a2:	2300      	movs	r3, #0
 80018a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80018a6:	e01a      	b.n	80018de <ADC_process+0xba>
 80018a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018b0:	4413      	add	r3, r2
 80018b2:	3b40      	subs	r3, #64	; 0x40
 80018b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <ADC_process+0x1f8>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f7ff f9f1 	bl	8000ca8 <__aeabi_ldivmod>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018d0:	4601      	mov	r1, r0
 80018d2:	4a53      	ldr	r2, [pc, #332]	; (8001a20 <ADC_process+0x1fc>)
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018da:	3301      	adds	r3, #1
 80018dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80018de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018e0:	2b06      	cmp	r3, #6
 80018e2:	d9e1      	bls.n	80018a8 <ADC_process+0x84>


		// Перезапуск АЦП если нет ответа в течении adc_timeout_const
		if(adc_timeout>0)adc_timeout--;
 80018e4:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <ADC_process+0x200>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <ADC_process+0xd6>
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <ADC_process+0x200>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <ADC_process+0x200>)
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e035      	b.n	8001966 <ADC_process+0x142>
//			aTxBuffer[2] = 0x12;
//			ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
//			aTxBuffer[0] = 0x02;
//			ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
			// Self calibration
			aTxBuffer[0] = 0x01;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	2008      	movs	r0, #8
 800190a:	f7ff fccf 	bl	80012ac <ADC_Write_REG>
			ADC_Calibration(adc_calibration_mode);
 800190e:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <ADC_process+0x204>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fddc 	bl	80014d0 <ADC_Calibration>
			delay_ms(300);
 8001918:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800191c:	f001 fb6e 	bl	8002ffc <delay_ms>
			aTxBuffer[0] = 0x09;
 8001920:	2309      	movs	r3, #9
 8001922:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	2008      	movs	r0, #8
 8001930:	f7ff fcbc 	bl	80012ac <ADC_Write_REG>

//			ADC_Conversion(ADC_SPS);
			adc_timeout=adc_timeout_const;
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <ADC_process+0x200>)
 8001936:	2219      	movs	r2, #25
 8001938:	701a      	strb	r2, [r3, #0]
			ADC_PGA_Set(PGA_GAIN[current_adc_channel]);
 800193a:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <ADC_process+0x208>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <ADC_process+0x20c>)
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff3f 	bl	80017c8 <ADC_PGA_Set>
			ADC_Start_Conversion(current_adc_channel, ADC_SPS);
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <ADC_process+0x208>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4a39      	ldr	r2, [pc, #228]	; (8001a34 <ADC_process+0x210>)
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fded 	bl	8001534 <ADC_Start_Conversion>
			ERROR_REG|=(0x01<<ADC_err);
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <ADC_process+0x214>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	4a35      	ldr	r2, [pc, #212]	; (8001a38 <ADC_process+0x214>)
 8001964:	6013      	str	r3, [r2, #0]
		}


		if(adc_start_calibration==0)
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <ADC_process+0x218>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d120      	bne.n	80019b0 <ADC_process+0x18c>
		{
			if(adc_timeout_cal>0)
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <ADC_process+0x21c>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d048      	beq.n	8001a08 <ADC_process+0x1e4>
			{
				adc_timeout_cal--;
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <ADC_process+0x21c>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <ADC_process+0x21c>)
 8001980:	801a      	strh	r2, [r3, #0]
				if(adc_timeout_cal==0)
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <ADC_process+0x21c>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13e      	bne.n	8001a08 <ADC_process+0x1e4>
				{
					// Стартуем преобразование
					aTxBuffer[0] = 0x09;
 800198a:	2309      	movs	r3, #9
 800198c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001990:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	2008      	movs	r0, #8
 800199a:	f7ff fc87 	bl	80012ac <ADC_Write_REG>
					ADC_Conversion(DATA_RATE_16SPS);
 800199e:	2003      	movs	r0, #3
 80019a0:	f7ff fbd4 	bl	800114c <ADC_Conversion>
					LED(0,0,0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 fa99 	bl	8001ee0 <LED>
 80019ae:	e02b      	b.n	8001a08 <ADC_process+0x1e4>
			}
		}
		// Калибровка
		else
		{
			LED(1,0,0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2001      	movs	r0, #1
 80019b6:	f000 fa93 	bl	8001ee0 <LED>
			adc_start_calibration=0;
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <ADC_process+0x218>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
			aTxBuffer[0] = 0x01;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			if(adc_calibration_mode==offset_calibration)aTxBuffer[0]+=(0<<5); 		// Ноль это канал по которому производится калибровка
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <ADC_process+0x204>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <ADC_process+0x1b2>
 80019ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			if(adc_calibration_mode==full_scale_calibration)aTxBuffer[0]+=(5<<5);	// Ноль это канал по которому производится калибровка
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <ADC_process+0x204>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d105      	bne.n	80019ea <ADC_process+0x1c6>
 80019de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019e2:	3b60      	subs	r3, #96	; 0x60
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 80019ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ee:	2201      	movs	r2, #1
 80019f0:	4619      	mov	r1, r3
 80019f2:	2008      	movs	r0, #8
 80019f4:	f7ff fc5a 	bl	80012ac <ADC_Write_REG>
			ADC_Calibration(adc_calibration_mode);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <ADC_process+0x204>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fd67 	bl	80014d0 <ADC_Calibration>
			adc_timeout_cal=50;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <ADC_process+0x21c>)
 8001a04:	2232      	movs	r2, #50	; 0x32
 8001a06:	801a      	strh	r2, [r3, #0]
		}
		// Делитель для PGA
		if(PGA_GAIN[0]==0)devider=1;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <ADC_process+0x20c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d11b      	bne.n	8001a48 <ADC_process+0x224>
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <ADC_process+0x220>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e020      	b.n	8001a5a <ADC_process+0x236>
 8001a18:	200023c0 	.word	0x200023c0
 8001a1c:	200000a4 	.word	0x200000a4
 8001a20:	200021b8 	.word	0x200021b8
 8001a24:	20000048 	.word	0x20000048
 8001a28:	20000968 	.word	0x20000968
 8001a2c:	20000049 	.word	0x20000049
 8001a30:	2000009c 	.word	0x2000009c
 8001a34:	200000a3 	.word	0x200000a3
 8001a38:	20000950 	.word	0x20000950
 8001a3c:	200008dc 	.word	0x200008dc
 8001a40:	200008de 	.word	0x200008de
 8001a44:	20000908 	.word	0x20000908
		else devider= (0x01<<(PGA_GAIN[0]-1));
 8001a48:	4baf      	ldr	r3, [pc, #700]	; (8001d08 <ADC_process+0x4e4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	2201      	movs	r2, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4bad      	ldr	r3, [pc, #692]	; (8001d0c <ADC_process+0x4e8>)
 8001a58:	701a      	strb	r2, [r3, #0]

		Kdiv=(double)ADC_middle[5]/(double)ADC_middle[6];
 8001a5a:	4bad      	ldr	r3, [pc, #692]	; (8001d10 <ADC_process+0x4ec>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd70 	bl	8000544 <__aeabi_i2d>
 8001a64:	4604      	mov	r4, r0
 8001a66:	460d      	mov	r5, r1
 8001a68:	4ba9      	ldr	r3, [pc, #676]	; (8001d10 <ADC_process+0x4ec>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd69 	bl	8000544 <__aeabi_i2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fef7 	bl	800086c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	49a4      	ldr	r1, [pc, #656]	; (8001d14 <ADC_process+0x4f0>)
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]

		ADC_volt[0]=ADC_middle[0]*((RefVoltage*1000)/(8388608*Kdiv));
 8001a88:	4ba1      	ldr	r3, [pc, #644]	; (8001d10 <ADC_process+0x4ec>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd59 	bl	8000544 <__aeabi_i2d>
 8001a92:	4604      	mov	r4, r0
 8001a94:	460d      	mov	r5, r1
 8001a96:	4ba0      	ldr	r3, [pc, #640]	; (8001d18 <ADC_process+0x4f4>)
 8001a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <ADC_process+0x4f8>)
 8001aa2:	f7fe fdb9 	bl	8000618 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	4b99      	ldr	r3, [pc, #612]	; (8001d14 <ADC_process+0x4f0>)
 8001ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <ADC_process+0x4fc>)
 8001aba:	f7fe fdad 	bl	8000618 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	f7fe fed1 	bl	800086c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fda1 	bl	8000618 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4992      	ldr	r1, [pc, #584]	; (8001d24 <ADC_process+0x500>)
 8001adc:	e9c1 2300 	strd	r2, r3, [r1]
		ADC_volt[1]=ADC_middle[1]*((RefVoltage*1000)/(8388608*Kdiv));
 8001ae0:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <ADC_process+0x4ec>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd2d 	bl	8000544 <__aeabi_i2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	4b8a      	ldr	r3, [pc, #552]	; (8001d18 <ADC_process+0x4f4>)
 8001af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <ADC_process+0x4f8>)
 8001afa:	f7fe fd8d 	bl	8000618 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	4b83      	ldr	r3, [pc, #524]	; (8001d14 <ADC_process+0x4f0>)
 8001b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <ADC_process+0x4fc>)
 8001b12:	f7fe fd81 	bl	8000618 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	f7fe fea5 	bl	800086c <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fd75 	bl	8000618 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	497c      	ldr	r1, [pc, #496]	; (8001d24 <ADC_process+0x500>)
 8001b34:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ADC_volt[2]=ADC_middle[2]*((RefVoltage*1000)/(8388608*Kdiv));
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <ADC_process+0x4ec>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd01 	bl	8000544 <__aeabi_i2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	4b74      	ldr	r3, [pc, #464]	; (8001d18 <ADC_process+0x4f4>)
 8001b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <ADC_process+0x4f8>)
 8001b52:	f7fe fd61 	bl	8000618 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	4699      	mov	r9, r3
 8001b5e:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <ADC_process+0x4f0>)
 8001b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <ADC_process+0x4fc>)
 8001b6a:	f7fe fd55 	bl	8000618 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	f7fe fe79 	bl	800086c <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fd49 	bl	8000618 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4966      	ldr	r1, [pc, #408]	; (8001d24 <ADC_process+0x500>)
 8001b8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		ADC_volt[3]=ADC_middle[3]*((RefVoltage*1000)/(8388608*Kdiv));
 8001b90:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <ADC_process+0x4ec>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcd5 	bl	8000544 <__aeabi_i2d>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	460d      	mov	r5, r1
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <ADC_process+0x4f4>)
 8001ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <ADC_process+0x4f8>)
 8001baa:	f7fe fd35 	bl	8000618 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <ADC_process+0x4f0>)
 8001bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <ADC_process+0x4fc>)
 8001bc2:	f7fe fd29 	bl	8000618 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4640      	mov	r0, r8
 8001bcc:	4649      	mov	r1, r9
 8001bce:	f7fe fe4d 	bl	800086c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	f7fe fd1d 	bl	8000618 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4950      	ldr	r1, [pc, #320]	; (8001d24 <ADC_process+0x500>)
 8001be4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ADC_volt[4]=ADC_middle[4]*((RefVoltage*1000)/(8388608*Kdiv));
 8001be8:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <ADC_process+0x4ec>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fca9 	bl	8000544 <__aeabi_i2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <ADC_process+0x4f4>)
 8001bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <ADC_process+0x4f8>)
 8001c02:	f7fe fd09 	bl	8000618 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4690      	mov	r8, r2
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <ADC_process+0x4f0>)
 8001c10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <ADC_process+0x4fc>)
 8001c1a:	f7fe fcfd 	bl	8000618 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4640      	mov	r0, r8
 8001c24:	4649      	mov	r1, r9
 8001c26:	f7fe fe21 	bl	800086c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fcf1 	bl	8000618 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	493a      	ldr	r1, [pc, #232]	; (8001d24 <ADC_process+0x500>)
 8001c3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ADC_volt[5]=ADC_middle[5]*((RefVoltage*1000)/(8388608*Kdiv));
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <ADC_process+0x4ec>)
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc7d 	bl	8000544 <__aeabi_i2d>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <ADC_process+0x4f4>)
 8001c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <ADC_process+0x4f8>)
 8001c5a:	f7fe fcdd 	bl	8000618 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4690      	mov	r8, r2
 8001c64:	4699      	mov	r9, r3
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <ADC_process+0x4f0>)
 8001c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <ADC_process+0x4fc>)
 8001c72:	f7fe fcd1 	bl	8000618 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	f7fe fdf5 	bl	800086c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4620      	mov	r0, r4
 8001c88:	4629      	mov	r1, r5
 8001c8a:	f7fe fcc5 	bl	8000618 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4924      	ldr	r1, [pc, #144]	; (8001d24 <ADC_process+0x500>)
 8001c94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		// Заводской номер 001
		current_4_20mA = calculate_current(ADC_volt[0]);
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <ADC_process+0x500>)
 8001c9a:	ed93 7b00 	vldr	d7, [r3]
 8001c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca2:	eef0 0a67 	vmov.f32	s1, s15
 8001ca6:	f003 fa5f 	bl	8005168 <calculate_current>
 8001caa:	eeb0 7a40 	vmov.f32	s14, s0
 8001cae:	eef0 7a60 	vmov.f32	s15, s1
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <ADC_process+0x504>)
 8001cb4:	ed83 7b00 	vstr	d7, [r3]
		voltage_measure = calculate_voltage(ADC_volt[1]);
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <ADC_process+0x500>)
 8001cba:	ed93 7b02 	vldr	d7, [r3, #8]
 8001cbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc2:	eef0 0a67 	vmov.f32	s1, s15
 8001cc6:	f003 fabb 	bl	8005240 <calculate_voltage>
 8001cca:	eeb0 7a40 	vmov.f32	s14, s0
 8001cce:	eef0 7a60 	vmov.f32	s15, s1
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <ADC_process+0x508>)
 8001cd4:	ed83 7b00 	vstr	d7, [r3]

		Approximation_MC110(ADC_middle[3], ADC_middle[4]);
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <ADC_process+0x4ec>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <ADC_process+0x4ec>)
 8001cde:	6912      	ldr	r2, [r2, #16]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fecc 	bl	8004a80 <Approximation_MC110>
		Calculate(ADC_middle[3], ADC_middle[4]);
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <ADC_process+0x4ec>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <ADC_process+0x4ec>)
 8001cee:	6912      	ldr	r2, [r2, #16]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 ff50 	bl	8004b98 <Calculate>

	sleep(50);
 8001cf8:	2032      	movs	r0, #50	; 0x32
 8001cfa:	f001 f933 	bl	8002f64 <sleep>
}
 8001cfe:	bf00      	nop
 8001d00:	3744      	adds	r7, #68	; 0x44
 8001d02:	46bd      	mov	sp, r7
 8001d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d08:	2000009c 	.word	0x2000009c
 8001d0c:	20000908 	.word	0x20000908
 8001d10:	200021b8 	.word	0x200021b8
 8001d14:	20000090 	.word	0x20000090
 8001d18:	20000088 	.word	0x20000088
 8001d1c:	408f4000 	.word	0x408f4000
 8001d20:	41600000 	.word	0x41600000
 8001d24:	20002390 	.word	0x20002390
 8001d28:	20002388 	.word	0x20002388
 8001d2c:	20002240 	.word	0x20002240

08001d30 <Buttons_init>:
//--------------------------------------------------------------------------------------------------------
//									Инициализация расширителя
//--------------------------------------------------------------------------------------------------------

void Buttons_init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2], rx_buf[2];

	// Reset
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	2120      	movs	r1, #32
 8001d3a:	483c      	ldr	r0, [pc, #240]	; (8001e2c <Buttons_init+0xfc>)
 8001d3c:	f008 fa60 	bl	800a200 <HAL_GPIO_WritePin>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001d40:	2303      	movs	r3, #3
 8001d42:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x18;
 8001d44:	2318      	movs	r3, #24
 8001d46:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 1000);
 8001d48:	1d3a      	adds	r2, r7, #4
 8001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4836      	ldr	r0, [pc, #216]	; (8001e30 <Buttons_init+0x100>)
 8001d56:	f008 fb1d 	bl	800a394 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT0; // rd from out-reg port0
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001d5e:	1d3a      	adds	r2, r7, #4
 8001d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2301      	movs	r3, #1
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	4831      	ldr	r0, [pc, #196]	; (8001e30 <Buttons_init+0x100>)
 8001d6c:	f008 fb12 	bl	800a394 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, &rx_buf[0], 0x02, 1000);
 8001d70:	463a      	mov	r2, r7
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2302      	movs	r3, #2
 8001d7a:	2141      	movs	r1, #65	; 0x41
 8001d7c:	482c      	ldr	r0, [pc, #176]	; (8001e30 <Buttons_init+0x100>)
 8001d7e:	f008 fbfd 	bl	800a57c <HAL_I2C_Master_Receive>

	tx_buf[0] = PI4IOE5V6416_REG_IO_DIR1; // set pin dir to be out
 8001d82:	2307      	movs	r3, #7
 8001d84:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x07;
 8001d86:	2307      	movs	r3, #7
 8001d88:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001d8a:	1d3a      	adds	r2, r7, #4
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2302      	movs	r3, #2
 8001d94:	2140      	movs	r1, #64	; 0x40
 8001d96:	4826      	ldr	r0, [pc, #152]	; (8001e30 <Buttons_init+0x100>)
 8001d98:	f008 fafc 	bl	800a394 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD0; // pull-up port0
 8001d9c:	2348      	movs	r3, #72	; 0x48
 8001d9e:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001da0:	23ff      	movs	r3, #255	; 0xff
 8001da2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001da4:	1d3a      	adds	r2, r7, #4
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2302      	movs	r3, #2
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	481f      	ldr	r0, [pc, #124]	; (8001e30 <Buttons_init+0x100>)
 8001db2:	f008 faef 	bl	800a394 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD1; // pull-up port1
 8001db6:	2349      	movs	r3, #73	; 0x49
 8001db8:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001dba:	23ff      	movs	r3, #255	; 0xff
 8001dbc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001dbe:	1d3a      	adds	r2, r7, #4
 8001dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <Buttons_init+0x100>)
 8001dcc:	f008 fae2 	bl	800a394 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN0; // pull-up enable on port0
 8001dd0:	2346      	movs	r3, #70	; 0x46
 8001dd2:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001dd4:	23ff      	movs	r3, #255	; 0xff
 8001dd6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001dd8:	1d3a      	adds	r2, r7, #4
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2302      	movs	r3, #2
 8001de2:	2140      	movs	r1, #64	; 0x40
 8001de4:	4812      	ldr	r0, [pc, #72]	; (8001e30 <Buttons_init+0x100>)
 8001de6:	f008 fad5 	bl	800a394 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN1; // pull-up enable on port1
 8001dea:	2347      	movs	r3, #71	; 0x47
 8001dec:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8001dee:	23ff      	movs	r3, #255	; 0xff
 8001df0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8001df2:	1d3a      	adds	r2, r7, #4
 8001df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	480c      	ldr	r0, [pc, #48]	; (8001e30 <Buttons_init+0x100>)
 8001e00:	f008 fac8 	bl	800a394 <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_MNTR0; // rd pins state port0
 8001e04:	2300      	movs	r3, #0
 8001e06:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001e08:	1d3a      	adds	r2, r7, #4
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2301      	movs	r3, #1
 8001e12:	2140      	movs	r1, #64	; 0x40
 8001e14:	4806      	ldr	r0, [pc, #24]	; (8001e30 <Buttons_init+0x100>)
 8001e16:	f008 fabd 	bl	800a394 <HAL_I2C_Master_Transmit>

	LED(0,0,0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f85e 	bl	8001ee0 <LED>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	200079ec 	.word	0x200079ec

08001e34 <BLueTooth_Configuration>:
//--------------------------------------------------------------------------------------------------------
//										Выбор режима работы блютус
//--------------------------------------------------------------------------------------------------------

void BLueTooth_Configuration(uint8_t state)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint8_t BlueTooth_State = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]
	// Читаем порт P1
	aTxBuffer[0] = 0x01;
 8001e42:	2301      	movs	r3, #1
 8001e44:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 8001e46:	f107 0210 	add.w	r2, r7, #16
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4821      	ldr	r0, [pc, #132]	; (8001edc <BLueTooth_Configuration+0xa8>)
 8001e56:	f008 fa9d 	bl	800a394 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8001e5a:	f107 020c 	add.w	r2, r7, #12
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	2141      	movs	r1, #65	; 0x41
 8001e68:	481c      	ldr	r0, [pc, #112]	; (8001edc <BLueTooth_Configuration+0xa8>)
 8001e6a:	f008 fb87 	bl	800a57c <HAL_I2C_Master_Receive>
	BlueTooth_State=aRxBuffer[0];
 8001e6e:	7b3b      	ldrb	r3, [r7, #12]
 8001e70:	75fb      	strb	r3, [r7, #23]

	// Очищаем P1_3 и P1_4
	BlueTooth_State&=0xE7;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	f023 0318 	bic.w	r3, r3, #24
 8001e78:	75fb      	strb	r3, [r7, #23]
	// Записываем значение config
	BlueTooth_State|=(state<<4);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	b25a      	sxtb	r2, r3
 8001e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8001e92:	f107 0210 	add.w	r2, r7, #16
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2140      	movs	r1, #64	; 0x40
 8001ea0:	480e      	ldr	r0, [pc, #56]	; (8001edc <BLueTooth_Configuration+0xa8>)
 8001ea2:	f008 fa77 	bl	800a394 <HAL_I2C_Master_Transmit>

	delay_ms(500);
 8001ea6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eaa:	f001 f8a7 	bl	8002ffc <delay_ms>

	// Reset
	BlueTooth_State|=(0x01<<5);
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8001ebe:	f107 0210 	add.w	r2, r7, #16
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2302      	movs	r3, #2
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <BLueTooth_Configuration+0xa8>)
 8001ece:	f008 fa61 	bl	800a394 <HAL_I2C_Master_Transmit>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200079ec 	.word	0x200079ec

08001ee0 <LED>:
//--------------------------------------------------------------------------------------------------------
//											Управление светодиодом
//--------------------------------------------------------------------------------------------------------

void LED(uint8_t RED, uint8_t GREEN, uint8_t BLUE)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	460b      	mov	r3, r1
 8001eec:	71bb      	strb	r3, [r7, #6]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	717b      	strb	r3, [r7, #5]
	uint8_t color=0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[4];
	color=(RED<<7)+(GREEN<<6)+(BLUE<<5)+0x1F;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	01db      	lsls	r3, r3, #7
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	019b      	lsls	r3, r3, #6
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	797b      	ldrb	r3, [r7, #5]
 8001f08:	015b      	lsls	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	331f      	adds	r3, #31
 8001f12:	73fb      	strb	r3, [r7, #15]
	color=~color;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	73fb      	strb	r3, [r7, #15]
	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = color;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 10000);
 8001f22:	f107 0208 	add.w	r2, r7, #8
 8001f26:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	2140      	movs	r1, #64	; 0x40
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <LED+0x60>)
 8001f32:	f008 fa2f 	bl	800a394 <HAL_I2C_Master_Transmit>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200079ec 	.word	0x200079ec

08001f44 <Button_S1_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										ON / OFF
//--------------------------------------------------------------------------------------------------------

void Button_S1_press_callback(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	if(OnOffCntr==-1)
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <Button_S1_press_callback+0x34>)
 8001f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f52:	d10f      	bne.n	8001f74 <Button_S1_press_callback+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==1)
 8001f54:	2140      	movs	r1, #64	; 0x40
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <Button_S1_press_callback+0x38>)
 8001f58:	f008 f93a 	bl	800a1d0 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <Button_S1_press_callback+0x30>
		{
			old_active_string=0xFF; OnOffCntr=on_off_time; screen=Off_screen;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <Button_S1_press_callback+0x3c>)
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <Button_S1_press_callback+0x34>)
 8001f6a:	22c8      	movs	r2, #200	; 0xc8
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <Button_S1_press_callback+0x40>)
 8001f70:	2203      	movs	r2, #3
 8001f72:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000004a 	.word	0x2000004a
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	20000458 	.word	0x20000458
 8001f84:	2000004c 	.word	0x2000004c

08001f88 <Button_S2_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										P zero
//--------------------------------------------------------------------------------------------------------

void Button_S2_press_callback(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <Button_S2_press_callback+0x70>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <Button_S2_press_callback+0x70>)
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <Button_S2_press_callback+0x74>)
 8001f98:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <Button_S2_press_callback+0x78>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <Button_S2_press_callback+0x78>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <Button_S2_press_callback+0x7c>)
 8001fa6:	701a      	strb	r2, [r3, #0]
	// Таррирование давления
	if(Pressure_zero==0)Pressure_zero=Pressure;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <Button_S2_press_callback+0x80>)
 8001faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	f7fe fd97 	bl	8000ae8 <__aeabi_dcmpeq>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <Button_S2_press_callback+0x46>
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <Button_S2_press_callback+0x84>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	4910      	ldr	r1, [pc, #64]	; (8002008 <Button_S2_press_callback+0x80>)
 8001fc8:	e9c1 2300 	strd	r2, r3, [r1]
 8001fcc:	e006      	b.n	8001fdc <Button_S2_press_callback+0x54>
	else Pressure_zero=0;
 8001fce:	490e      	ldr	r1, [pc, #56]	; (8002008 <Button_S2_press_callback+0x80>)
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9c1 2300 	strd	r2, r3, [r1]

	// Обнуление АЦП
	if(zero_ADC[0]==0)zero_ADC[0]=ADC_middle[3];
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <Button_S2_press_callback+0x88>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <Button_S2_press_callback+0x66>
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <Button_S2_press_callback+0x8c>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <Button_S2_press_callback+0x88>)
 8001fea:	6013      	str	r3, [r2, #0]
		else zero_ADC[0]=0;

}
 8001fec:	e002      	b.n	8001ff4 <Button_S2_press_callback+0x6c>
		else zero_ADC[0]=0;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <Button_S2_press_callback+0x88>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20001d06 	.word	0x20001d06
 8001ffc:	20001d04 	.word	0x20001d04
 8002000:	20001d09 	.word	0x20001d09
 8002004:	20001d08 	.word	0x20001d08
 8002008:	20000930 	.word	0x20000930
 800200c:	20002360 	.word	0x20002360
 8002010:	20002348 	.word	0x20002348
 8002014:	200021b8 	.word	0x200021b8

08002018 <Button_S3_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E zero
//--------------------------------------------------------------------------------------------------------

void Button_S3_press_callback(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <Button_S3_press_callback+0xa0>)
 800201e:	2200      	movs	r2, #0
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <Button_S3_press_callback+0xa0>)
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <Button_S3_press_callback+0xa4>)
 8002028:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <Button_S3_press_callback+0xa8>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <Button_S3_press_callback+0xa8>)
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <Button_S3_press_callback+0xac>)
 8002036:	701a      	strb	r2, [r3, #0]
	// Таррирование электрики
	switch(E_fun)
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <Button_S3_press_callback+0xb0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <Button_S3_press_callback+0x2e>
 8002040:	2b01      	cmp	r3, #1
 8002042:	d01b      	beq.n	800207c <Button_S3_press_callback+0x64>
			else Current_zero=0;
			break;
		case V: if(Voltage_zero==0)Voltage_zero=voltage_measure;
		else Voltage_zero=0; break;
	}
}
 8002044:	e035      	b.n	80020b2 <Button_S3_press_callback+0x9a>
			if(Current_zero==0) Current_zero=current_4_20mA;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <Button_S3_press_callback+0xb4>)
 8002048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	f7fe fd48 	bl	8000ae8 <__aeabi_dcmpeq>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <Button_S3_press_callback+0x54>
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <Button_S3_press_callback+0xb8>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	4919      	ldr	r1, [pc, #100]	; (80020cc <Button_S3_press_callback+0xb4>)
 8002066:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800206a:	e022      	b.n	80020b2 <Button_S3_press_callback+0x9a>
			else Current_zero=0;
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <Button_S3_press_callback+0xb4>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800207a:	e01a      	b.n	80020b2 <Button_S3_press_callback+0x9a>
		case V: if(Voltage_zero==0)Voltage_zero=voltage_measure;
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <Button_S3_press_callback+0xbc>)
 800207e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f7fe fd2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <Button_S3_press_callback+0x8a>
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <Button_S3_press_callback+0xc0>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <Button_S3_press_callback+0xbc>)
 800209c:	e9c1 2300 	strd	r2, r3, [r1]
		else Voltage_zero=0; break;
 80020a0:	e006      	b.n	80020b0 <Button_S3_press_callback+0x98>
 80020a2:	490c      	ldr	r1, [pc, #48]	; (80020d4 <Button_S3_press_callback+0xbc>)
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9c1 2300 	strd	r2, r3, [r1]
 80020b0:	bf00      	nop
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20001d06 	.word	0x20001d06
 80020bc:	20001d04 	.word	0x20001d04
 80020c0:	20001d09 	.word	0x20001d09
 80020c4:	20001d08 	.word	0x20001d08
 80020c8:	20000960 	.word	0x20000960
 80020cc:	20000940 	.word	0x20000940
 80020d0:	20002388 	.word	0x20002388
 80020d4:	20000938 	.word	0x20000938
 80020d8:	20002240 	.word	0x20002240

080020dc <Button_S4_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											ENTER
//--------------------------------------------------------------------------------------------------------

void Button_S4_press_callback(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	 switch(screen)
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <Button_S4_press_callback+0x6c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	3b04      	subs	r3, #4
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d81d      	bhi.n	8002126 <Button_S4_press_callback+0x4a>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <Button_S4_press_callback+0x14>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	0800210f 	.word	0x0800210f
 80020f4:	08002121 	.word	0x08002121
 80020f8:	0800211b 	.word	0x0800211b
 80020fc:	08002127 	.word	0x08002127
 8002100:	08002109 	.word	0x08002109
 8002104:	08002115 	.word	0x08002115
	 {
	 	 case Parameter_screen: Parameter_screen_S4(); break;
 8002108:	f016 fc4a 	bl	80189a0 <Parameter_screen_S4>
 800210c:	e00b      	b.n	8002126 <Button_S4_press_callback+0x4a>
	 	 case Option_screen: Option_screen_S4(); break;
 800210e:	f016 fd15 	bl	8018b3c <Option_screen_S4>
 8002112:	e008      	b.n	8002126 <Button_S4_press_callback+0x4a>
	 	 case RTC_screen: RTC_screen_S4(); break;
 8002114:	f016 f8cc 	bl	80182b0 <RTC_screen_S4>
 8002118:	e005      	b.n	8002126 <Button_S4_press_callback+0x4a>
	 	 case ADC_options_screen: ADC_options_screen_S4(); break;
 800211a:	f014 fd33 	bl	8016b84 <ADC_options_screen_S4>
 800211e:	e002      	b.n	8002126 <Button_S4_press_callback+0x4a>
	 	 case Display_options_screen: Display_options_screen_S4(); break;
 8002120:	f015 f82a 	bl	8017178 <Display_options_screen_S4>
 8002124:	bf00      	nop
	 }
	 off_sec=off_min=0;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <Button_S4_press_callback+0x70>)
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <Button_S4_press_callback+0x70>)
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <Button_S4_press_callback+0x74>)
 8002132:	801a      	strh	r2, [r3, #0]
	 light_sec=light_min=0;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <Button_S4_press_callback+0x78>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <Button_S4_press_callback+0x78>)
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <Button_S4_press_callback+0x7c>)
 8002140:	701a      	strb	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000004c 	.word	0x2000004c
 800214c:	20001d06 	.word	0x20001d06
 8002150:	20001d04 	.word	0x20001d04
 8002154:	20001d09 	.word	0x20001d09
 8002158:	20001d08 	.word	0x20001d08

0800215c <Button_S5_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											FORWARD
//--------------------------------------------------------------------------------------------------------

void Button_S5_press_callback(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	switch(screen)
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <Button_S5_press_callback+0x78>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	3b05      	subs	r3, #5
 8002166:	2b07      	cmp	r3, #7
 8002168:	d824      	bhi.n	80021b4 <Button_S5_press_callback+0x58>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <Button_S5_press_callback+0x14>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	08002197 	.word	0x08002197
 8002174:	08002191 	.word	0x08002191
 8002178:	0800219d 	.word	0x0800219d
 800217c:	080021b5 	.word	0x080021b5
 8002180:	080021a3 	.word	0x080021a3
 8002184:	080021a9 	.word	0x080021a9
 8002188:	080021b5 	.word	0x080021b5
 800218c:	080021af 	.word	0x080021af
	{
		case ADC_options_screen: ADC_options_screen_S5(); break;
 8002190:	f014 fdc2 	bl	8016d18 <ADC_options_screen_S5>
 8002194:	e00e      	b.n	80021b4 <Button_S5_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S5(); break;
 8002196:	f015 f85b 	bl	8017250 <Display_options_screen_S5>
 800219a:	e00b      	b.n	80021b4 <Button_S5_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S5(); break;
 800219c:	f015 fad6 	bl	801774c <Measure_options_screen_S5>
 80021a0:	e008      	b.n	80021b4 <Button_S5_press_callback+0x58>
		case RTC_screen: RTC_screen_S5(); break;
 80021a2:	f015 ff71 	bl	8018088 <RTC_screen_S5>
 80021a6:	e005      	b.n	80021b4 <Button_S5_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S5(); break;
 80021a8:	f014 fe94 	bl	8016ed4 <Auto_Off_option_screen_S5>
 80021ac:	e002      	b.n	80021b4 <Button_S5_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S5(); break;
 80021ae:	f016 fab7 	bl	8018720 <Logging_options_screen_S5>
 80021b2:	bf00      	nop
	}
	off_sec=off_min=0;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <Button_S5_press_callback+0x7c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <Button_S5_press_callback+0x7c>)
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <Button_S5_press_callback+0x80>)
 80021c0:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <Button_S5_press_callback+0x84>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <Button_S5_press_callback+0x84>)
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <Button_S5_press_callback+0x88>)
 80021ce:	701a      	strb	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000004c 	.word	0x2000004c
 80021d8:	20001d06 	.word	0x20001d06
 80021dc:	20001d04 	.word	0x20001d04
 80021e0:	20001d09 	.word	0x20001d09
 80021e4:	20001d08 	.word	0x20001d08

080021e8 <Button_S6_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											UP
//--------------------------------------------------------------------------------------------------------

void Button_S6_press_callback(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	switch(screen)
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <Button_S6_press_callback+0x84>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	3b04      	subs	r3, #4
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d829      	bhi.n	800224a <Button_S6_press_callback+0x62>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <Button_S6_press_callback+0x14>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002227 	.word	0x08002227
 8002200:	08002233 	.word	0x08002233
 8002204:	0800222d 	.word	0x0800222d
 8002208:	08002239 	.word	0x08002239
 800220c:	08002221 	.word	0x08002221
 8002210:	0800223f 	.word	0x0800223f
 8002214:	0800224b 	.word	0x0800224b
 8002218:	0800224b 	.word	0x0800224b
 800221c:	08002245 	.word	0x08002245
	{
		case Parameter_screen: Parameter_screen_S6(); break;
 8002220:	f016 fc1a 	bl	8018a58 <Parameter_screen_S6>
 8002224:	e011      	b.n	800224a <Button_S6_press_callback+0x62>
		case Option_screen: Option_screen_S6(); break;
 8002226:	f016 fc73 	bl	8018b10 <Option_screen_S6>
 800222a:	e00e      	b.n	800224a <Button_S6_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S6(); break;
 800222c:	f014 fc6c 	bl	8016b08 <ADC_options_screen_S6>
 8002230:	e00b      	b.n	800224a <Button_S6_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S6(); break;
 8002232:	f014 ff79 	bl	8017128 <Display_options_screen_S6>
 8002236:	e008      	b.n	800224a <Button_S6_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S6(); break;
 8002238:	f015 f9e4 	bl	8017604 <Measure_options_screen_S6>
 800223c:	e005      	b.n	800224a <Button_S6_press_callback+0x62>
		case RTC_screen: RTC_screen_S6(); break;
 800223e:	f015 ff4b 	bl	80180d8 <RTC_screen_S6>
 8002242:	e002      	b.n	800224a <Button_S6_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S6(); break;
 8002244:	f016 f9b8 	bl	80185b8 <Logging_options_screen_S6>
 8002248:	bf00      	nop
	}
	off_sec=off_min=0;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <Button_S6_press_callback+0x88>)
 800224c:	2200      	movs	r2, #0
 800224e:	801a      	strh	r2, [r3, #0]
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <Button_S6_press_callback+0x88>)
 8002252:	881a      	ldrh	r2, [r3, #0]
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <Button_S6_press_callback+0x8c>)
 8002256:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <Button_S6_press_callback+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <Button_S6_press_callback+0x90>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <Button_S6_press_callback+0x94>)
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000004c 	.word	0x2000004c
 8002270:	20001d06 	.word	0x20001d06
 8002274:	20001d04 	.word	0x20001d04
 8002278:	20001d09 	.word	0x20001d09
 800227c:	20001d08 	.word	0x20001d08

08002280 <Button_S7_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										DOWN
//--------------------------------------------------------------------------------------------------------

void Button_S7_press_callback(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	switch(screen)
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <Button_S7_press_callback+0x84>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3b04      	subs	r3, #4
 800228a:	2b08      	cmp	r3, #8
 800228c:	d829      	bhi.n	80022e2 <Button_S7_press_callback+0x62>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <Button_S7_press_callback+0x14>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022bf 	.word	0x080022bf
 8002298:	080022cb 	.word	0x080022cb
 800229c:	080022c5 	.word	0x080022c5
 80022a0:	080022d1 	.word	0x080022d1
 80022a4:	080022b9 	.word	0x080022b9
 80022a8:	080022d7 	.word	0x080022d7
 80022ac:	080022e3 	.word	0x080022e3
 80022b0:	080022e3 	.word	0x080022e3
 80022b4:	080022dd 	.word	0x080022dd
	{
		case Parameter_screen: Parameter_screen_S7(); break;
 80022b8:	f016 fbb6 	bl	8018a28 <Parameter_screen_S7>
 80022bc:	e011      	b.n	80022e2 <Button_S7_press_callback+0x62>
		case Option_screen: Option_screen_S7(); break;
 80022be:	f016 fc0f 	bl	8018ae0 <Option_screen_S7>
 80022c2:	e00e      	b.n	80022e2 <Button_S7_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S7(); break;
 80022c4:	f014 fc34 	bl	8016b30 <ADC_options_screen_S7>
 80022c8:	e00b      	b.n	80022e2 <Button_S7_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S7(); break;
 80022ca:	f014 ff41 	bl	8017150 <Display_options_screen_S7>
 80022ce:	e008      	b.n	80022e2 <Button_S7_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S7(); break;
 80022d0:	f015 f9ac 	bl	801762c <Measure_options_screen_S7>
 80022d4:	e005      	b.n	80022e2 <Button_S7_press_callback+0x62>
		case RTC_screen: RTC_screen_S7(); break;
 80022d6:	f015 ff75 	bl	80181c4 <RTC_screen_S7>
 80022da:	e002      	b.n	80022e2 <Button_S7_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S7(); break;
 80022dc:	f016 f980 	bl	80185e0 <Logging_options_screen_S7>
 80022e0:	bf00      	nop
	}
	off_sec=off_min=0;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <Button_S7_press_callback+0x88>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	801a      	strh	r2, [r3, #0]
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <Button_S7_press_callback+0x88>)
 80022ea:	881a      	ldrh	r2, [r3, #0]
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <Button_S7_press_callback+0x8c>)
 80022ee:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <Button_S7_press_callback+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <Button_S7_press_callback+0x90>)
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <Button_S7_press_callback+0x94>)
 80022fc:	701a      	strb	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000004c 	.word	0x2000004c
 8002308:	20001d06 	.word	0x20001d06
 800230c:	20001d04 	.word	0x20001d04
 8002310:	20001d09 	.word	0x20001d09
 8002314:	20001d08 	.word	0x20001d08

08002318 <Button_S8_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											BACKWARD
//--------------------------------------------------------------------------------------------------------

void Button_S8_press_callback(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	switch(screen)
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <Button_S8_press_callback+0x78>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3b05      	subs	r3, #5
 8002322:	2b07      	cmp	r3, #7
 8002324:	d824      	bhi.n	8002370 <Button_S8_press_callback+0x58>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <Button_S8_press_callback+0x14>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	08002353 	.word	0x08002353
 8002330:	0800234d 	.word	0x0800234d
 8002334:	08002359 	.word	0x08002359
 8002338:	08002371 	.word	0x08002371
 800233c:	0800235f 	.word	0x0800235f
 8002340:	08002365 	.word	0x08002365
 8002344:	08002371 	.word	0x08002371
 8002348:	0800236b 	.word	0x0800236b
	{
		case ADC_options_screen: ADC_options_screen_S8(); break;
 800234c:	f014 fc68 	bl	8016c20 <ADC_options_screen_S8>
 8002350:	e00e      	b.n	8002370 <Button_S8_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S8(); break;
 8002352:	f014 ff3d 	bl	80171d0 <Display_options_screen_S8>
 8002356:	e00b      	b.n	8002370 <Button_S8_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S8(); break;
 8002358:	f015 f992 	bl	8017680 <Measure_options_screen_S8>
 800235c:	e008      	b.n	8002370 <Button_S8_press_callback+0x58>
		case RTC_screen: RTC_screen_S8(); break;
 800235e:	f015 fea7 	bl	80180b0 <RTC_screen_S8>
 8002362:	e005      	b.n	8002370 <Button_S8_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S8(); break;
 8002364:	f014 fda2 	bl	8016eac <Auto_Off_option_screen_S8>
 8002368:	e002      	b.n	8002370 <Button_S8_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S8(); break;
 800236a:	f016 f963 	bl	8018634 <Logging_options_screen_S8>
 800236e:	bf00      	nop
	}
	off_sec=off_min=0;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <Button_S8_press_callback+0x7c>)
 8002372:	2200      	movs	r2, #0
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <Button_S8_press_callback+0x7c>)
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <Button_S8_press_callback+0x80>)
 800237c:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <Button_S8_press_callback+0x84>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <Button_S8_press_callback+0x84>)
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <Button_S8_press_callback+0x88>)
 800238a:	701a      	strb	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000004c 	.word	0x2000004c
 8002394:	20001d06 	.word	0x20001d06
 8002398:	20001d04 	.word	0x20001d04
 800239c:	20001d09 	.word	0x20001d09
 80023a0:	20001d08 	.word	0x20001d08

080023a4 <Button_S9_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											MENU
//--------------------------------------------------------------------------------------------------------

void Button_S9_press_callback(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	switch(screen)
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <Button_S9_press_callback+0xa0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	2b0b      	cmp	r3, #11
 80023b0:	d838      	bhi.n	8002424 <Button_S9_press_callback+0x80>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <Button_S9_press_callback+0x14>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	08002407 	.word	0x08002407
 80023bc:	08002425 	.word	0x08002425
 80023c0:	08002425 	.word	0x08002425
 80023c4:	080023ef 	.word	0x080023ef
 80023c8:	080023fb 	.word	0x080023fb
 80023cc:	080023f5 	.word	0x080023f5
 80023d0:	08002401 	.word	0x08002401
 80023d4:	080023e9 	.word	0x080023e9
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	08002413 	.word	0x08002413
 80023e0:	08002419 	.word	0x08002419
 80023e4:	0800241f 	.word	0x0800241f
	{
		case Parameter_screen: Parameter_screen_S9(); break;
 80023e8:	f016 fac4 	bl	8018974 <Parameter_screen_S9>
 80023ec:	e01a      	b.n	8002424 <Button_S9_press_callback+0x80>
		case Option_screen: Option_screen_S9(); break;
 80023ee:	f016 fb65 	bl	8018abc <Option_screen_S9>
 80023f2:	e017      	b.n	8002424 <Button_S9_press_callback+0x80>
		case ADC_options_screen: ADC_options_screen_S9(); break;
 80023f4:	f014 fbb0 	bl	8016b58 <ADC_options_screen_S9>
 80023f8:	e014      	b.n	8002424 <Button_S9_press_callback+0x80>
		case Display_options_screen: Display_options_screen_S9(); break;
 80023fa:	f014 fe7f 	bl	80170fc <Display_options_screen_S9>
 80023fe:	e011      	b.n	8002424 <Button_S9_press_callback+0x80>
		case Measure_options_screen: Measure_options_screen_S9(); break;
 8002400:	f015 f928 	bl	8017654 <Measure_options_screen_S9>
 8002404:	e00e      	b.n	8002424 <Button_S9_press_callback+0x80>
		case Main_screen: Main_screen_S9(); break;
 8002406:	f015 fb63 	bl	8017ad0 <Main_screen_S9>
 800240a:	e00b      	b.n	8002424 <Button_S9_press_callback+0x80>
		case RTC_screen: RTC_screen_S9(); break;
 800240c:	f015 fe26 	bl	801805c <RTC_screen_S9>
 8002410:	e008      	b.n	8002424 <Button_S9_press_callback+0x80>
		case Auto_Off_option_screen: Auto_Off_option_screen_S9(); break;
 8002412:	f014 fd35 	bl	8016e80 <Auto_Off_option_screen_S9>
 8002416:	e005      	b.n	8002424 <Button_S9_press_callback+0x80>
		case About_options_screen: About_options_screen_S9(); break;
 8002418:	f015 ffe6 	bl	80183e8 <About_options_screen_S9>
 800241c:	e002      	b.n	8002424 <Button_S9_press_callback+0x80>
		case Logging_options_screen: Logging_options_screen_S9(); break;
 800241e:	f016 f8f3 	bl	8018608 <Logging_options_screen_S9>
 8002422:	bf00      	nop
	}
	off_sec=off_min=0;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <Button_S9_press_callback+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <Button_S9_press_callback+0xa4>)
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <Button_S9_press_callback+0xa8>)
 8002430:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <Button_S9_press_callback+0xac>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <Button_S9_press_callback+0xac>)
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <Button_S9_press_callback+0xb0>)
 800243e:	701a      	strb	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000004c 	.word	0x2000004c
 8002448:	20001d06 	.word	0x20001d06
 800244c:	20001d04 	.word	0x20001d04
 8002450:	20001d09 	.word	0x20001d09
 8002454:	20001d08 	.word	0x20001d08

08002458 <Button_S10_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E func
//--------------------------------------------------------------------------------------------------------

void Button_S10_press_callback(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <Button_S10_press_callback+0x44>)
 800245e:	2200      	movs	r2, #0
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <Button_S10_press_callback+0x44>)
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <Button_S10_press_callback+0x48>)
 8002468:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <Button_S10_press_callback+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <Button_S10_press_callback+0x4c>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <Button_S10_press_callback+0x50>)
 8002476:	701a      	strb	r2, [r3, #0]
	// Переключение отображения второй строки
	if(++E_fun==3)E_fun=0;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <Button_S10_press_callback+0x54>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <Button_S10_press_callback+0x54>)
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <Button_S10_press_callback+0x54>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d102      	bne.n	8002492 <Button_S10_press_callback+0x3a>
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <Button_S10_press_callback+0x54>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	20001d06 	.word	0x20001d06
 80024a0:	20001d04 	.word	0x20001d04
 80024a4:	20001d09 	.word	0x20001d09
 80024a8:	20001d08 	.word	0x20001d08
 80024ac:	20000960 	.word	0x20000960

080024b0 <Button_S11_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											P units
//--------------------------------------------------------------------------------------------------------

void Button_S11_press_callback(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	if(screen==Main_screen) screen=Test_screen;
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <Button_S11_press_callback+0x50>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d103      	bne.n	80024c4 <Button_S11_press_callback+0x14>
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <Button_S11_press_callback+0x50>)
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e00a      	b.n	80024da <Button_S11_press_callback+0x2a>
	else if(screen==Test_screen)screen=ADC_options_screen;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <Button_S11_press_callback+0x50>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d103      	bne.n	80024d4 <Button_S11_press_callback+0x24>
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <Button_S11_press_callback+0x50>)
 80024ce:	2206      	movs	r2, #6
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e002      	b.n	80024da <Button_S11_press_callback+0x2a>
	else screen=Main_screen;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <Button_S11_press_callback+0x50>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]

	off_sec=off_min=0;
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <Button_S11_press_callback+0x54>)
 80024dc:	2200      	movs	r2, #0
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <Button_S11_press_callback+0x54>)
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <Button_S11_press_callback+0x58>)
 80024e6:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <Button_S11_press_callback+0x5c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <Button_S11_press_callback+0x5c>)
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <Button_S11_press_callback+0x60>)
 80024f4:	701a      	strb	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	2000004c 	.word	0x2000004c
 8002504:	20001d06 	.word	0x20001d06
 8002508:	20001d04 	.word	0x20001d04
 800250c:	20001d09 	.word	0x20001d09
 8002510:	20001d08 	.word	0x20001d08

08002514 <Buttons_process>:
//--------------------------------------------------------------------------------------------------------
//											Обработчик кнопок
//--------------------------------------------------------------------------------------------------------

void Buttons_process(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
	uint16_t keypad = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	81fb      	strh	r3, [r7, #14]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	// reset if bug
	aTxBuffer[0] = PI4IOE5V6416_REG_INT_MSK0;
 800251e:	234a      	movs	r3, #74	; 0x4a
 8002520:	723b      	strb	r3, [r7, #8]
	aRxBuffer[0] = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 8002526:	f107 0208 	add.w	r2, r7, #8
 800252a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2301      	movs	r3, #1
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	48a0      	ldr	r0, [pc, #640]	; (80027b8 <Buttons_process+0x2a4>)
 8002536:	f007 ff2d 	bl	800a394 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 800253a:	1d3a      	adds	r2, r7, #4
 800253c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2301      	movs	r3, #1
 8002544:	2141      	movs	r1, #65	; 0x41
 8002546:	489c      	ldr	r0, [pc, #624]	; (80027b8 <Buttons_process+0x2a4>)
 8002548:	f008 f818 	bl	800a57c <HAL_I2C_Master_Receive>
	if(aRxBuffer[0] == 0x00){ERROR_REG|=(1<<KeyPad_err);HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); delay_us(100); HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);}
 800254c:	793b      	ldrb	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d112      	bne.n	8002578 <Buttons_process+0x64>
 8002552:	4b9a      	ldr	r3, [pc, #616]	; (80027bc <Buttons_process+0x2a8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f043 0310 	orr.w	r3, r3, #16
 800255a:	4a98      	ldr	r2, [pc, #608]	; (80027bc <Buttons_process+0x2a8>)
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	2120      	movs	r1, #32
 8002562:	4897      	ldr	r0, [pc, #604]	; (80027c0 <Buttons_process+0x2ac>)
 8002564:	f007 fe4c 	bl	800a200 <HAL_GPIO_WritePin>
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f000 fd5d 	bl	8003028 <delay_us>
 800256e:	2201      	movs	r2, #1
 8002570:	2120      	movs	r1, #32
 8002572:	4893      	ldr	r0, [pc, #588]	; (80027c0 <Buttons_process+0x2ac>)
 8002574:	f007 fe44 	bl	800a200 <HAL_GPIO_WritePin>

	aTxBuffer[0] = 0x00;
 8002578:	2300      	movs	r3, #0
 800257a:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 800257c:	f107 0208 	add.w	r2, r7, #8
 8002580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2301      	movs	r3, #1
 8002588:	2140      	movs	r1, #64	; 0x40
 800258a:	488b      	ldr	r0, [pc, #556]	; (80027b8 <Buttons_process+0x2a4>)
 800258c:	f007 ff02 	bl	800a394 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002590:	1d3a      	adds	r2, r7, #4
 8002592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2301      	movs	r3, #1
 800259a:	2141      	movs	r1, #65	; 0x41
 800259c:	4886      	ldr	r0, [pc, #536]	; (80027b8 <Buttons_process+0x2a4>)
 800259e:	f007 ffed 	bl	800a57c <HAL_I2C_Master_Receive>
	keypad=aRxBuffer[0];
 80025a2:	793b      	ldrb	r3, [r7, #4]
 80025a4:	81fb      	strh	r3, [r7, #14]
	keypad<<=8;
 80025a6:	89fb      	ldrh	r3, [r7, #14]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	81fb      	strh	r3, [r7, #14]
	aTxBuffer[0] = 0x01;
 80025ac:	2301      	movs	r3, #1
 80025ae:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80025b0:	f107 0208 	add.w	r2, r7, #8
 80025b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2301      	movs	r3, #1
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	487e      	ldr	r0, [pc, #504]	; (80027b8 <Buttons_process+0x2a4>)
 80025c0:	f007 fee8 	bl	800a394 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80025c4:	1d3a      	adds	r2, r7, #4
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	2141      	movs	r1, #65	; 0x41
 80025d0:	4879      	ldr	r0, [pc, #484]	; (80027b8 <Buttons_process+0x2a4>)
 80025d2:	f007 ffd3 	bl	800a57c <HAL_I2C_Master_Receive>
	keypad+=(aRxBuffer[0]&0x07);
 80025d6:	793b      	ldrb	r3, [r7, #4]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	b29a      	uxth	r2, r3
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	4413      	add	r3, r2
 80025e4:	81fb      	strh	r3, [r7, #14]

	keypad_code=keypad;
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <Buttons_process+0x2b0>)
 80025e8:	89fb      	ldrh	r3, [r7, #14]
 80025ea:	8013      	strh	r3, [r2, #0]
	switch(keypad)
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	f64f 7207 	movw	r2, #65287	; 0xff07
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f000 80bb 	beq.w	800276e <Buttons_process+0x25a>
 80025f8:	f64f 7207 	movw	r2, #65287	; 0xff07
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f300 80c0 	bgt.w	8002782 <Buttons_process+0x26e>
 8002602:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002606:	4293      	cmp	r3, r2
 8002608:	f000 8093 	beq.w	8002732 <Buttons_process+0x21e>
 800260c:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002610:	4293      	cmp	r3, r2
 8002612:	f300 80b6 	bgt.w	8002782 <Buttons_process+0x26e>
 8002616:	f64f 6205 	movw	r2, #65029	; 0xfe05
 800261a:	4293      	cmp	r3, r2
 800261c:	f000 8093 	beq.w	8002746 <Buttons_process+0x232>
 8002620:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002624:	4293      	cmp	r3, r2
 8002626:	f300 80ac 	bgt.w	8002782 <Buttons_process+0x26e>
 800262a:	f64f 6203 	movw	r2, #65027	; 0xfe03
 800262e:	4293      	cmp	r3, r2
 8002630:	f000 8093 	beq.w	800275a <Buttons_process+0x246>
 8002634:	f64f 6203 	movw	r2, #65027	; 0xfe03
 8002638:	4293      	cmp	r3, r2
 800263a:	f300 80a2 	bgt.w	8002782 <Buttons_process+0x26e>
 800263e:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002642:	4293      	cmp	r3, r2
 8002644:	d02f      	beq.n	80026a6 <Buttons_process+0x192>
 8002646:	f64f 4207 	movw	r2, #64519	; 0xfc07
 800264a:	4293      	cmp	r3, r2
 800264c:	f300 8099 	bgt.w	8002782 <Buttons_process+0x26e>
 8002650:	f64f 2207 	movw	r2, #64007	; 0xfa07
 8002654:	4293      	cmp	r3, r2
 8002656:	d030      	beq.n	80026ba <Buttons_process+0x1a6>
 8002658:	f64f 2207 	movw	r2, #64007	; 0xfa07
 800265c:	4293      	cmp	r3, r2
 800265e:	f300 8090 	bgt.w	8002782 <Buttons_process+0x26e>
 8002662:	f24f 6207 	movw	r2, #62983	; 0xf607
 8002666:	4293      	cmp	r3, r2
 8002668:	d031      	beq.n	80026ce <Buttons_process+0x1ba>
 800266a:	f24f 6207 	movw	r2, #62983	; 0xf607
 800266e:	4293      	cmp	r3, r2
 8002670:	f300 8087 	bgt.w	8002782 <Buttons_process+0x26e>
 8002674:	f64e 6207 	movw	r2, #60935	; 0xee07
 8002678:	4293      	cmp	r3, r2
 800267a:	d032      	beq.n	80026e2 <Buttons_process+0x1ce>
 800267c:	f64e 6207 	movw	r2, #60935	; 0xee07
 8002680:	4293      	cmp	r3, r2
 8002682:	dc7e      	bgt.n	8002782 <Buttons_process+0x26e>
 8002684:	f64d 6207 	movw	r2, #56839	; 0xde07
 8002688:	4293      	cmp	r3, r2
 800268a:	d034      	beq.n	80026f6 <Buttons_process+0x1e2>
 800268c:	f64d 6207 	movw	r2, #56839	; 0xde07
 8002690:	4293      	cmp	r3, r2
 8002692:	dc76      	bgt.n	8002782 <Buttons_process+0x26e>
 8002694:	f647 6207 	movw	r2, #32263	; 0x7e07
 8002698:	4293      	cmp	r3, r2
 800269a:	d040      	beq.n	800271e <Buttons_process+0x20a>
 800269c:	f64b 6207 	movw	r2, #48647	; 0xbe07
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d032      	beq.n	800270a <Buttons_process+0x1f6>
 80026a4:	e06d      	b.n	8002782 <Buttons_process+0x26e>
	{
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <Buttons_process+0x2b4>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d170      	bne.n	8002790 <Buttons_process+0x27c>
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <Buttons_process+0x2b4>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	f7ff fc68 	bl	8001f88 <Button_S2_press_callback>
 80026b8:	e06a      	b.n	8002790 <Buttons_process+0x27c>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <Buttons_process+0x2b4>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d168      	bne.n	8002794 <Buttons_process+0x280>
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <Buttons_process+0x2b4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	f7ff fca6 	bl	8002018 <Button_S3_press_callback>
 80026cc:	e062      	b.n	8002794 <Buttons_process+0x280>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <Buttons_process+0x2b4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d160      	bne.n	8002798 <Buttons_process+0x284>
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <Buttons_process+0x2b4>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	f7ff fcfe 	bl	80020dc <Button_S4_press_callback>
 80026e0:	e05a      	b.n	8002798 <Buttons_process+0x284>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <Buttons_process+0x2b4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d158      	bne.n	800279c <Buttons_process+0x288>
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <Buttons_process+0x2b4>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	f7ff fd34 	bl	800215c <Button_S5_press_callback>
 80026f4:	e052      	b.n	800279c <Buttons_process+0x288>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <Buttons_process+0x2b4>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d150      	bne.n	80027a0 <Buttons_process+0x28c>
 80026fe:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <Buttons_process+0x2b4>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	f7ff fd70 	bl	80021e8 <Button_S6_press_callback>
 8002708:	e04a      	b.n	80027a0 <Buttons_process+0x28c>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <Buttons_process+0x2b4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d148      	bne.n	80027a4 <Buttons_process+0x290>
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <Buttons_process+0x2b4>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	f7ff fdb2 	bl	8002280 <Button_S7_press_callback>
 800271c:	e042      	b.n	80027a4 <Buttons_process+0x290>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <Buttons_process+0x2b4>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d140      	bne.n	80027a8 <Buttons_process+0x294>
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <Buttons_process+0x2b4>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	f7ff fdf4 	bl	8002318 <Button_S8_press_callback>
 8002730:	e03a      	b.n	80027a8 <Buttons_process+0x294>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <Buttons_process+0x2b4>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d138      	bne.n	80027ac <Buttons_process+0x298>
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <Buttons_process+0x2b4>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	f7ff fe30 	bl	80023a4 <Button_S9_press_callback>
 8002744:	e032      	b.n	80027ac <Buttons_process+0x298>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <Buttons_process+0x2b4>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d130      	bne.n	80027b0 <Buttons_process+0x29c>
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <Buttons_process+0x2b4>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	f7ff fe80 	bl	8002458 <Button_S10_press_callback>
 8002758:	e02a      	b.n	80027b0 <Buttons_process+0x29c>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <Buttons_process+0x2b4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d128      	bne.n	80027b4 <Buttons_process+0x2a0>
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <Buttons_process+0x2b4>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	f7ff fea2 	bl	80024b0 <Button_S11_press_callback>
 800276c:	e022      	b.n	80027b4 <Buttons_process+0x2a0>
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <Buttons_process+0x2b4>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d12c      	bne.n	80027d0 <Buttons_process+0x2bc>
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <Buttons_process+0x2b4>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	f7ff fbe2 	bl	8001f44 <Button_S1_press_callback>
 8002780:	e026      	b.n	80027d0 <Buttons_process+0x2bc>
		default: buttons_press=Button_State=0; break;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <Buttons_process+0x2b4>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <Buttons_process+0x2b8>)
 800278a:	2200      	movs	r2, #0
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	e020      	b.n	80027d2 <Buttons_process+0x2be>
		case 64519: if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 8002790:	bf00      	nop
 8002792:	e01e      	b.n	80027d2 <Buttons_process+0x2be>
		case 64007: if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002794:	bf00      	nop
 8002796:	e01c      	b.n	80027d2 <Buttons_process+0x2be>
		case 62983: if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002798:	bf00      	nop
 800279a:	e01a      	b.n	80027d2 <Buttons_process+0x2be>
		case 60935: if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 800279c:	bf00      	nop
 800279e:	e018      	b.n	80027d2 <Buttons_process+0x2be>
		case 56839: if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 80027a0:	bf00      	nop
 80027a2:	e016      	b.n	80027d2 <Buttons_process+0x2be>
		case 48647: if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 80027a4:	bf00      	nop
 80027a6:	e014      	b.n	80027d2 <Buttons_process+0x2be>
		case 32263: if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 80027a8:	bf00      	nop
 80027aa:	e012      	b.n	80027d2 <Buttons_process+0x2be>
		case 65030: if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 80027ac:	bf00      	nop
 80027ae:	e010      	b.n	80027d2 <Buttons_process+0x2be>
		case 65029: if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 80027b0:	bf00      	nop
 80027b2:	e00e      	b.n	80027d2 <Buttons_process+0x2be>
		case 65027: if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 80027b4:	bf00      	nop
 80027b6:	e00c      	b.n	80027d2 <Buttons_process+0x2be>
 80027b8:	200079ec 	.word	0x200079ec
 80027bc:	20000950 	.word	0x20000950
 80027c0:	48000400 	.word	0x48000400
 80027c4:	20000910 	.word	0x20000910
 80027c8:	2000090a 	.word	0x2000090a
 80027cc:	2000090c 	.word	0x2000090c
		case 65287: if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 80027d0:	bf00      	nop
	}

	if((Button_State==1)&&(buttons_press<20))buttons_press++;
 80027d2:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <Buttons_process+0x37c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d109      	bne.n	80027ee <Buttons_process+0x2da>
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <Buttons_process+0x380>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b13      	cmp	r3, #19
 80027e0:	d805      	bhi.n	80027ee <Buttons_process+0x2da>
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <Buttons_process+0x380>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <Buttons_process+0x380>)
 80027ec:	801a      	strh	r2, [r3, #0]

	// Задержка на обработку кнопки включения
	if(OnOffCntr>on_off_time){ if(--OnOffCntr==on_off_time) OnOffCntr=-1; }
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <Buttons_process+0x384>)
 80027f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f4:	2bc8      	cmp	r3, #200	; 0xc8
 80027f6:	dd11      	ble.n	800281c <Buttons_process+0x308>
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <Buttons_process+0x384>)
 80027fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21a      	sxth	r2, r3
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <Buttons_process+0x384>)
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <Buttons_process+0x384>)
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	2bc8      	cmp	r3, #200	; 0xc8
 8002812:	d103      	bne.n	800281c <Buttons_process+0x308>
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <Buttons_process+0x384>)
 8002816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281a:	801a      	strh	r2, [r3, #0]
	if((OnOffCntr>0)&&(OnOffCntr<=on_off_time)) if(--OnOffCntr==0)
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <Buttons_process+0x384>)
 800281e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002822:	2b00      	cmp	r3, #0
 8002824:	dd2c      	ble.n	8002880 <Buttons_process+0x36c>
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <Buttons_process+0x384>)
 8002828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282c:	2bc8      	cmp	r3, #200	; 0xc8
 800282e:	dc27      	bgt.n	8002880 <Buttons_process+0x36c>
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <Buttons_process+0x384>)
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21a      	sxth	r2, r3
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <Buttons_process+0x384>)
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <Buttons_process+0x384>)
 8002844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d119      	bne.n	8002880 <Buttons_process+0x36c>
	{
		// Выключение
		TURN_OFF_ADC_POWER();
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	4812      	ldr	r0, [pc, #72]	; (800289c <Buttons_process+0x388>)
 8002852:	f007 fcd5 	bl	800a200 <HAL_GPIO_WritePin>
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285c:	4810      	ldr	r0, [pc, #64]	; (80028a0 <Buttons_process+0x38c>)
 800285e:	f007 fccf 	bl	800a200 <HAL_GPIO_WritePin>
		delay_ms(200);
 8002862:	20c8      	movs	r0, #200	; 0xc8
 8002864:	f000 fbca 	bl	8002ffc <delay_ms>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800286e:	480b      	ldr	r0, [pc, #44]	; (800289c <Buttons_process+0x388>)
 8002870:	f007 fcc6 	bl	800a200 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LCD_reserv_GPIO_Port, EN_LCD_reserv_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800287a:	4809      	ldr	r0, [pc, #36]	; (80028a0 <Buttons_process+0x38c>)
 800287c:	f007 fcc0 	bl	800a200 <HAL_GPIO_WritePin>
	}

	sleep(5);
 8002880:	2005      	movs	r0, #5
 8002882:	f000 fb6f 	bl	8002f64 <sleep>
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	2000090a 	.word	0x2000090a
 8002894:	2000090c 	.word	0x2000090c
 8002898:	2000004a 	.word	0x2000004a
 800289c:	48000800 	.word	0x48000800
 80028a0:	48000c00 	.word	0x48000c00

080028a4 <Buttons_timer>:
//--------------------------------------------------------------------------------------------------------
//											Таймер долгого нажатия
//--------------------------------------------------------------------------------------------------------

void Buttons_timer(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
	if(buttons_press==20)
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <Buttons_timer+0x44>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b14      	cmp	r3, #20
 80028ae:	d112      	bne.n	80028d6 <Buttons_timer+0x32>
	{
		if(++buttons_ms>=1000)
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <Buttons_timer+0x48>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <Buttons_timer+0x48>)
 80028ba:	801a      	strh	r2, [r3, #0]
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <Buttons_timer+0x48>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c4:	d30a      	bcc.n	80028dc <Buttons_timer+0x38>
		{
			buttons_ms=1000-100;
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <Buttons_timer+0x48>)
 80028c8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80028cc:	801a      	strh	r2, [r3, #0]
			Button_State=0;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <Buttons_timer+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
		}
	}
	else {buttons_ms=0;}
}
 80028d4:	e002      	b.n	80028dc <Buttons_timer+0x38>
	else {buttons_ms=0;}
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <Buttons_timer+0x48>)
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2000090c 	.word	0x2000090c
 80028ec:	2000090e 	.word	0x2000090e
 80028f0:	2000090a 	.word	0x2000090a

080028f4 <DrawImage>:
const char *PGA_name[9]={ "PGA OFF", "PGA 1", "PGA 2", "PGA 4", "PGA 8", "PGA 16", "PGA 32", "PGA 64", "PGA 128" };



void DrawImage(const uint8_t *image, uint16_t x, uint16_t y, uint8_t inverse)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	460b      	mov	r3, r1
 8002908:	813b      	strh	r3, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	71fb      	strb	r3, [r7, #7]
	uint16_t xi = 0, yi = 0, bitnum=0;
 800290e:	2300      	movs	r3, #0
 8002910:	83fb      	strh	r3, [r7, #30]
 8002912:	2300      	movs	r3, #0
 8002914:	83bb      	strh	r3, [r7, #28]
 8002916:	2300      	movs	r3, #0
 8002918:	837b      	strh	r3, [r7, #26]
	uint8_t color;
	uint16_t SIZE_X, SIZE_Y;
	// Размер картинки
	SIZE_X = (uint16_t)(((image[0]<<8) + image[1])>>3);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	3201      	adds	r2, #1
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	4413      	add	r3, r2
 8002928:	10db      	asrs	r3, r3, #3
 800292a:	833b      	strh	r3, [r7, #24]
	SIZE_Y = (uint16_t)(image[2]<<8) + image[3];
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3302      	adds	r3, #2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3303      	adds	r3, #3
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4413      	add	r3, r2
 8002942:	82fb      	strh	r3, [r7, #22]
	for(yi = 0; yi < SIZE_Y; yi++)
 8002944:	2300      	movs	r3, #0
 8002946:	83bb      	strh	r3, [r7, #28]
 8002948:	e03e      	b.n	80029c8 <DrawImage+0xd4>
	{
		for(xi = 0; xi < SIZE_X; xi++)
 800294a:	2300      	movs	r3, #0
 800294c:	83fb      	strh	r3, [r7, #30]
 800294e:	e034      	b.n	80029ba <DrawImage+0xc6>
		{
			for(bitnum=0;bitnum<8;bitnum++)
 8002950:	2300      	movs	r3, #0
 8002952:	837b      	strh	r3, [r7, #26]
 8002954:	e02b      	b.n	80029ae <DrawImage+0xba>
			{
				color=((image[xi+yi*SIZE_X+4])>>(7-bitnum))&0x01;
 8002956:	8bfa      	ldrh	r2, [r7, #30]
 8002958:	8bbb      	ldrh	r3, [r7, #28]
 800295a:	8b39      	ldrh	r1, [r7, #24]
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	8b7b      	ldrh	r3, [r7, #26]
 800296e:	f1c3 0307 	rsb	r3, r3, #7
 8002972:	fa42 f303 	asr.w	r3, r2, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	757b      	strb	r3, [r7, #21]
				if(color==inverse)u8g2_DrawPixel(&u8g2, x+(xi*8)+bitnum, y+yi);
 800297e:	7d7a      	ldrb	r2, [r7, #21]
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	429a      	cmp	r2, r3
 8002984:	d110      	bne.n	80029a8 <DrawImage+0xb4>
 8002986:	8bfb      	ldrh	r3, [r7, #30]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	b29a      	uxth	r2, r3
 800298c:	897b      	ldrh	r3, [r7, #10]
 800298e:	4413      	add	r3, r2
 8002990:	b29a      	uxth	r2, r3
 8002992:	8b7b      	ldrh	r3, [r7, #26]
 8002994:	4413      	add	r3, r2
 8002996:	b299      	uxth	r1, r3
 8002998:	893a      	ldrh	r2, [r7, #8]
 800299a:	8bbb      	ldrh	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	480e      	ldr	r0, [pc, #56]	; (80029dc <DrawImage+0xe8>)
 80029a4:	f013 f9a2 	bl	8015cec <u8g2_DrawPixel>
			for(bitnum=0;bitnum<8;bitnum++)
 80029a8:	8b7b      	ldrh	r3, [r7, #26]
 80029aa:	3301      	adds	r3, #1
 80029ac:	837b      	strh	r3, [r7, #26]
 80029ae:	8b7b      	ldrh	r3, [r7, #26]
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	d9d0      	bls.n	8002956 <DrawImage+0x62>
		for(xi = 0; xi < SIZE_X; xi++)
 80029b4:	8bfb      	ldrh	r3, [r7, #30]
 80029b6:	3301      	adds	r3, #1
 80029b8:	83fb      	strh	r3, [r7, #30]
 80029ba:	8bfa      	ldrh	r2, [r7, #30]
 80029bc:	8b3b      	ldrh	r3, [r7, #24]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d3c6      	bcc.n	8002950 <DrawImage+0x5c>
	for(yi = 0; yi < SIZE_Y; yi++)
 80029c2:	8bbb      	ldrh	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	83bb      	strh	r3, [r7, #28]
 80029c8:	8bba      	ldrh	r2, [r7, #28]
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d3bc      	bcc.n	800294a <DrawImage+0x56>
			}
		}
	}
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20002090 	.word	0x20002090

080029e0 <Display_init>:




void Display_init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	u8g2_Setup_uc1638_240x160_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_cb_stm32l4);
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <Display_init+0xe8>)
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <Display_init+0xec>)
 80029ea:	4939      	ldr	r1, [pc, #228]	; (8002ad0 <Display_init+0xf0>)
 80029ec:	4839      	ldr	r0, [pc, #228]	; (8002ad4 <Display_init+0xf4>)
 80029ee:	f012 fab9 	bl	8014f64 <u8g2_Setup_uc1638_240x160_f>
	u8g2_InitDisplay(&u8g2);
 80029f2:	4838      	ldr	r0, [pc, #224]	; (8002ad4 <Display_init+0xf4>)
 80029f4:	f013 ff32 	bl	801685c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80029f8:	2100      	movs	r1, #0
 80029fa:	4836      	ldr	r0, [pc, #216]	; (8002ad4 <Display_init+0xf4>)
 80029fc:	f013 ff3d 	bl	801687a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 8002a00:	4834      	ldr	r0, [pc, #208]	; (8002ad4 <Display_init+0xf4>)
 8002a02:	f012 fa8a 	bl	8014f1a <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002a06:	4934      	ldr	r1, [pc, #208]	; (8002ad8 <Display_init+0xf8>)
 8002a08:	4832      	ldr	r0, [pc, #200]	; (8002ad4 <Display_init+0xf4>)
 8002a0a:	f013 f85b 	bl	8015ac4 <u8g2_SetFont>

	//Подсветка
	temp_light=display_brightness;
 8002a0e:	4b33      	ldr	r3, [pc, #204]	; (8002adc <Display_init+0xfc>)
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <Display_init+0x100>)
 8002a14:	701a      	strb	r2, [r3, #0]
	TIM2->CCR1=display_brightness;
 8002a16:	4b31      	ldr	r3, [pc, #196]	; (8002adc <Display_init+0xfc>)
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a1e:	635a      	str	r2, [r3, #52]	; 0x34

	// Контрастность
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8002a20:	2200      	movs	r2, #0
 8002a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a26:	482f      	ldr	r0, [pc, #188]	; (8002ae4 <Display_init+0x104>)
 8002a28:	f007 fbea 	bl	800a200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2101      	movs	r1, #1
 8002a30:	482d      	ldr	r0, [pc, #180]	; (8002ae8 <Display_init+0x108>)
 8002a32:	f007 fbe5 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+1;
 8002a36:	23e9      	movs	r3, #233	; 0xe9
 8002a38:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002a3a:	463a      	mov	r2, r7
 8002a3c:	1d39      	adds	r1, r7, #4
 8002a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	4829      	ldr	r0, [pc, #164]	; (8002aec <Display_init+0x10c>)
 8002a48:	f00b fc95 	bl	800e376 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4825      	ldr	r0, [pc, #148]	; (8002ae8 <Display_init+0x108>)
 8002a52:	f007 fbd5 	bl	800a200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4823      	ldr	r0, [pc, #140]	; (8002ae8 <Display_init+0x108>)
 8002a5c:	f007 fbd0 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8002a60:	2381      	movs	r3, #129	; 0x81
 8002a62:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002a64:	463a      	mov	r2, r7
 8002a66:	1d39      	adds	r1, r7, #4
 8002a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	481e      	ldr	r0, [pc, #120]	; (8002aec <Display_init+0x10c>)
 8002a72:	f00b fc80 	bl	800e376 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a7c:	4819      	ldr	r0, [pc, #100]	; (8002ae4 <Display_init+0x104>)
 8002a7e:	f007 fbbf 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <Display_init+0x110>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	337d      	adds	r3, #125	; 0x7d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002a8c:	463a      	mov	r2, r7
 8002a8e:	1d39      	adds	r1, r7, #4
 8002a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2301      	movs	r3, #1
 8002a98:	4814      	ldr	r0, [pc, #80]	; (8002aec <Display_init+0x10c>)
 8002a9a:	f00b fc6c 	bl	800e376 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4811      	ldr	r0, [pc, #68]	; (8002ae8 <Display_init+0x108>)
 8002aa4:	f007 fbac 	bl	800a200 <HAL_GPIO_WritePin>

	DrawImage(img1, 16, 61, 1);
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	223d      	movs	r2, #61	; 0x3d
 8002aac:	2110      	movs	r1, #16
 8002aae:	4811      	ldr	r0, [pc, #68]	; (8002af4 <Display_init+0x114>)
 8002ab0:	f7ff ff20 	bl	80028f4 <DrawImage>
	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <Display_init+0xf4>)
 8002ab6:	f012 f9c8 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002aba:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <Display_init+0xf4>)
 8002abc:	f012 f952 	bl	8014d64 <u8g2_ClearBuffer>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	080078d9 	.word	0x080078d9
 8002acc:	080079f9 	.word	0x080079f9
 8002ad0:	0802afac 	.word	0x0802afac
 8002ad4:	20002090 	.word	0x20002090
 8002ad8:	08027144 	.word	0x08027144
 8002adc:	20000098 	.word	0x20000098
 8002ae0:	20001d0c 	.word	0x20001d0c
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48001000 	.word	0x48001000
 8002aec:	2000202c 	.word	0x2000202c
 8002af0:	20000099 	.word	0x20000099
 8002af4:	080226a0 	.word	0x080226a0

08002af8 <Gauge_loading>:



void Gauge_loading(uint8_t*text, uint8_t percent)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
	DrawImage(img1, 16, 61, 1);
 8002b04:	2301      	movs	r3, #1
 8002b06:	223d      	movs	r2, #61	; 0x3d
 8002b08:	2110      	movs	r1, #16
 8002b0a:	481d      	ldr	r0, [pc, #116]	; (8002b80 <Gauge_loading+0x88>)
 8002b0c:	f7ff fef2 	bl	80028f4 <DrawImage>

	u8g2_DrawFrame(&u8g2, 40, 120, 160, 12);
 8002b10:	230c      	movs	r3, #12
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	23a0      	movs	r3, #160	; 0xa0
 8002b16:	2278      	movs	r2, #120	; 0x78
 8002b18:	2128      	movs	r1, #40	; 0x28
 8002b1a:	481a      	ldr	r0, [pc, #104]	; (8002b84 <Gauge_loading+0x8c>)
 8002b1c:	f012 f8c5 	bl	8014caa <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, 40,120, percent*1.6, 12);
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd0e 	bl	8000544 <__aeabi_i2d>
 8002b28:	a313      	add	r3, pc, #76	; (adr r3, 8002b78 <Gauge_loading+0x80>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fd73 	bl	8000618 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fe f845 	bl	8000bc8 <__aeabi_d2uiz>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	220c      	movs	r2, #12
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	2278      	movs	r2, #120	; 0x78
 8002b48:	2128      	movs	r1, #40	; 0x28
 8002b4a:	480e      	ldr	r0, [pc, #56]	; (8002b84 <Gauge_loading+0x8c>)
 8002b4c:	f012 f877 	bl	8014c3e <u8g2_DrawBox>

	//sprintf(RAM,"%d", percent);
	//u8g2_DrawUTF8(&u8g2, 50, 120, RAM);
	u8g2_SetFont(&u8g2, u8g2_font_8x13_t_cyrillic);
 8002b50:	490d      	ldr	r1, [pc, #52]	; (8002b88 <Gauge_loading+0x90>)
 8002b52:	480c      	ldr	r0, [pc, #48]	; (8002b84 <Gauge_loading+0x8c>)
 8002b54:	f012 ffb6 	bl	8015ac4 <u8g2_SetFont>
	u8g2_DrawUTF8(&u8g2, 40, 145, (char *)text);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2291      	movs	r2, #145	; 0x91
 8002b5c:	2128      	movs	r1, #40	; 0x28
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <Gauge_loading+0x8c>)
 8002b60:	f012 ff0e 	bl	8015980 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <Gauge_loading+0x8c>)
 8002b66:	f012 f970 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <Gauge_loading+0x8c>)
 8002b6c:	f012 f8fa 	bl	8014d64 <u8g2_ClearBuffer>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	9999999a 	.word	0x9999999a
 8002b7c:	3ff99999 	.word	0x3ff99999
 8002b80:	080226a0 	.word	0x080226a0
 8002b84:	20002090 	.word	0x20002090
 8002b88:	080246e8 	.word	0x080246e8

08002b8c <Off_screen_func>:




void Off_screen_func(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	// static
	if(old_active_string==0xFF)
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <Off_screen_func+0x30>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2bff      	cmp	r3, #255	; 0xff
 8002b96:	d10e      	bne.n	8002bb6 <Off_screen_func+0x2a>
	{
		DrawImage(img2, 0, 0, 0);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4808      	ldr	r0, [pc, #32]	; (8002bc0 <Off_screen_func+0x34>)
 8002ba0:	f7ff fea8 	bl	80028f4 <DrawImage>
		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8002ba4:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <Off_screen_func+0x38>)
 8002ba6:	f012 f950 	bl	8014e4a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8002baa:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <Off_screen_func+0x38>)
 8002bac:	f012 f8da 	bl	8014d64 <u8g2_ClearBuffer>
		old_active_string=0;
 8002bb0:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <Off_screen_func+0x30>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
	}
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000458 	.word	0x20000458
 8002bc0:	08022a80 	.word	0x08022a80
 8002bc4:	20002090 	.word	0x20002090

08002bc8 <Blink_Edit_Parameter_timer>:

uint16_t blink_timer=0;
uint8_t blink_trig=0;
void Blink_Edit_Parameter_timer(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
	if(++blink_timer==200)blink_trig=1;
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <Blink_Edit_Parameter_timer+0x40>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <Blink_Edit_Parameter_timer+0x40>)
 8002bd6:	801a      	strh	r2, [r3, #0]
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <Blink_Edit_Parameter_timer+0x40>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2bc8      	cmp	r3, #200	; 0xc8
 8002bde:	d102      	bne.n	8002be6 <Blink_Edit_Parameter_timer+0x1e>
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <Blink_Edit_Parameter_timer+0x44>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
	if(blink_timer>=500){blink_timer=blink_trig=0;}
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <Blink_Edit_Parameter_timer+0x40>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bee:	d305      	bcc.n	8002bfc <Blink_Edit_Parameter_timer+0x34>
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <Blink_Edit_Parameter_timer+0x44>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <Blink_Edit_Parameter_timer+0x40>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	801a      	strh	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000914 	.word	0x20000914
 8002c0c:	20000916 	.word	0x20000916

08002c10 <Blink_Edit_Parameter>:


void Blink_Edit_Parameter(uint8_t x, uint8_t y, const char* text, uint8_t param_num, uint8_t curr_param)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	603a      	str	r2, [r7, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	71bb      	strb	r3, [r7, #6]
 8002c22:	4613      	mov	r3, r2
 8002c24:	717b      	strb	r3, [r7, #5]
	if(param_num==curr_param)
 8002c26:	797a      	ldrb	r2, [r7, #5]
 8002c28:	7c3b      	ldrb	r3, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d10c      	bne.n	8002c48 <Blink_Edit_Parameter+0x38>
	{if(blink_trig==1)u8g2_DrawUTF8(&u8g2, x, y, text);}
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <Blink_Edit_Parameter+0x50>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d110      	bne.n	8002c58 <Blink_Edit_Parameter+0x48>
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	4808      	ldr	r0, [pc, #32]	; (8002c64 <Blink_Edit_Parameter+0x54>)
 8002c42:	f012 fe9d 	bl	8015980 <u8g2_DrawUTF8>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
}
 8002c46:	e007      	b.n	8002c58 <Blink_Edit_Parameter+0x48>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	79bb      	ldrb	r3, [r7, #6]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <Blink_Edit_Parameter+0x54>)
 8002c54:	f012 fe94 	bl	8015980 <u8g2_DrawUTF8>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000916 	.word	0x20000916
 8002c64:	20002090 	.word	0x20002090

08002c68 <Test_screen_func>:


void Test_screen_func(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	71fb      	strb	r3, [r7, #7]
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002c72:	4942      	ldr	r1, [pc, #264]	; (8002d7c <Test_screen_func+0x114>)
 8002c74:	4842      	ldr	r0, [pc, #264]	; (8002d80 <Test_screen_func+0x118>)
 8002c76:	f012 ff25 	bl	8015ac4 <u8g2_SetFont>

	// Индикация напряжения
	for(i=0;i<6;i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	e019      	b.n	8002cb4 <Test_screen_func+0x4c>
	{
		sprintf((char *)RAM,"%+fmV", ADC_volt[i]);
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <Test_screen_func+0x11c>)
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	493e      	ldr	r1, [pc, #248]	; (8002d88 <Test_screen_func+0x120>)
 8002c8e:	483f      	ldr	r0, [pc, #252]	; (8002d8c <Test_screen_func+0x124>)
 8002c90:	f01b f8d6 	bl	801de40 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 30+i*15, (char *)RAM);
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	331e      	adds	r3, #30
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <Test_screen_func+0x124>)
 8002ca6:	2178      	movs	r1, #120	; 0x78
 8002ca8:	4835      	ldr	r0, [pc, #212]	; (8002d80 <Test_screen_func+0x118>)
 8002caa:	f012 fe69 	bl	8015980 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	71fb      	strb	r3, [r7, #7]
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d9e2      	bls.n	8002c80 <Test_screen_func+0x18>
	}

	// Индикация АЦП
	for(i=0;i<7;i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	e018      	b.n	8002cf2 <Test_screen_func+0x8a>
	{
		//sprintf(RAM,"%d %+d", i, ADC_channel_0[i]);
		sprintf((char *)RAM,"%d %+d", i, ADC_middle[i]);
 8002cc0:	79fa      	ldrb	r2, [r7, #7]
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	4932      	ldr	r1, [pc, #200]	; (8002d90 <Test_screen_func+0x128>)
 8002cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cca:	4932      	ldr	r1, [pc, #200]	; (8002d94 <Test_screen_func+0x12c>)
 8002ccc:	482f      	ldr	r0, [pc, #188]	; (8002d8c <Test_screen_func+0x124>)
 8002cce:	f01b f8b7 	bl	801de40 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 30+i*15, (char *)RAM);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	331e      	adds	r3, #30
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <Test_screen_func+0x124>)
 8002ce4:	2105      	movs	r1, #5
 8002ce6:	4826      	ldr	r0, [pc, #152]	; (8002d80 <Test_screen_func+0x118>)
 8002ce8:	f012 fe4a 	bl	8015980 <u8g2_DrawUTF8>
	for(i=0;i<7;i++)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d9e3      	bls.n	8002cc0 <Test_screen_func+0x58>
	}

	switch(adc_calibration_mode)
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <Test_screen_func+0x130>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d014      	beq.n	8002d2a <Test_screen_func+0xc2>
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	dc19      	bgt.n	8002d38 <Test_screen_func+0xd0>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <Test_screen_func+0xa6>
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d007      	beq.n	8002d1c <Test_screen_func+0xb4>
 8002d0c:	e014      	b.n	8002d38 <Test_screen_func+0xd0>
	{
		case 0: u8g2_DrawUTF8(&u8g2, 5, 140, "SC"); break;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <Test_screen_func+0x134>)
 8002d10:	228c      	movs	r2, #140	; 0x8c
 8002d12:	2105      	movs	r1, #5
 8002d14:	481a      	ldr	r0, [pc, #104]	; (8002d80 <Test_screen_func+0x118>)
 8002d16:	f012 fe33 	bl	8015980 <u8g2_DrawUTF8>
 8002d1a:	e00d      	b.n	8002d38 <Test_screen_func+0xd0>
		case 1: u8g2_DrawUTF8(&u8g2, 5, 140, "OC"); break;
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <Test_screen_func+0x138>)
 8002d1e:	228c      	movs	r2, #140	; 0x8c
 8002d20:	2105      	movs	r1, #5
 8002d22:	4817      	ldr	r0, [pc, #92]	; (8002d80 <Test_screen_func+0x118>)
 8002d24:	f012 fe2c 	bl	8015980 <u8g2_DrawUTF8>
 8002d28:	e006      	b.n	8002d38 <Test_screen_func+0xd0>
		case 2: u8g2_DrawUTF8(&u8g2, 5, 140, "FSC"); break;
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <Test_screen_func+0x13c>)
 8002d2c:	228c      	movs	r2, #140	; 0x8c
 8002d2e:	2105      	movs	r1, #5
 8002d30:	4813      	ldr	r0, [pc, #76]	; (8002d80 <Test_screen_func+0x118>)
 8002d32:	f012 fe25 	bl	8015980 <u8g2_DrawUTF8>
 8002d36:	bf00      	nop
	}

	// �?ндикация PGA
	u8g2_DrawUTF8(&u8g2, 5, 155, PGA_name[PGA_GAIN[0]]);
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <Test_screen_func+0x140>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <Test_screen_func+0x144>)
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	229b      	movs	r2, #155	; 0x9b
 8002d46:	2105      	movs	r1, #5
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <Test_screen_func+0x118>)
 8002d4a:	f012 fe19 	bl	8015980 <u8g2_DrawUTF8>

	sprintf((char *)RAM,"%f", Kdiv);
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <Test_screen_func+0x148>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	4917      	ldr	r1, [pc, #92]	; (8002db4 <Test_screen_func+0x14c>)
 8002d56:	480d      	ldr	r0, [pc, #52]	; (8002d8c <Test_screen_func+0x124>)
 8002d58:	f01b f872 	bl	801de40 <siprintf>
	u8g2_DrawUTF8(&u8g2, 120, 155, (char *)RAM);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <Test_screen_func+0x124>)
 8002d5e:	229b      	movs	r2, #155	; 0x9b
 8002d60:	2178      	movs	r1, #120	; 0x78
 8002d62:	4807      	ldr	r0, [pc, #28]	; (8002d80 <Test_screen_func+0x118>)
 8002d64:	f012 fe0c 	bl	8015980 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <Test_screen_func+0x118>)
 8002d6a:	f012 f86e 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002d6e:	4804      	ldr	r0, [pc, #16]	; (8002d80 <Test_screen_func+0x118>)
 8002d70:	f011 fff8 	bl	8014d64 <u8g2_ClearBuffer>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	08027144 	.word	0x08027144
 8002d80:	20002090 	.word	0x20002090
 8002d84:	20002390 	.word	0x20002390
 8002d88:	08021c00 	.word	0x08021c00
 8002d8c:	20002150 	.word	0x20002150
 8002d90:	200021b8 	.word	0x200021b8
 8002d94:	08021c08 	.word	0x08021c08
 8002d98:	20000968 	.word	0x20000968
 8002d9c:	08021c10 	.word	0x08021c10
 8002da0:	08021c14 	.word	0x08021c14
 8002da4:	08021c18 	.word	0x08021c18
 8002da8:	2000009c 	.word	0x2000009c
 8002dac:	20000050 	.word	0x20000050
 8002db0:	20000090 	.word	0x20000090
 8002db4:	08021c1c 	.word	0x08021c1c

08002db8 <Display_process>:




void Display_process(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	switch(screen)
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <Display_process+0x98>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	2b0b      	cmp	r3, #11
 8002dc4:	d83e      	bhi.n	8002e44 <Display_process+0x8c>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <Display_process+0x14>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002e03 	.word	0x08002e03
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002e15 	.word	0x08002e15
 8002de0:	08002e1b 	.word	0x08002e1b
 8002de4:	08002e21 	.word	0x08002e21
 8002de8:	08002e27 	.word	0x08002e27
 8002dec:	08002e2d 	.word	0x08002e2d
 8002df0:	08002e33 	.word	0x08002e33
 8002df4:	08002e39 	.word	0x08002e39
 8002df8:	08002e3f 	.word	0x08002e3f
	{
		case Main_screen: Main_screen_func(); break;
 8002dfc:	f014 fd0c 	bl	8017818 <Main_screen_func>
 8002e00:	e020      	b.n	8002e44 <Display_process+0x8c>
		case Test_screen: Test_screen_func(); break;
 8002e02:	f7ff ff31 	bl	8002c68 <Test_screen_func>
 8002e06:	e01d      	b.n	8002e44 <Display_process+0x8c>
		case Off_screen: Off_screen_func(); break;
 8002e08:	f7ff fec0 	bl	8002b8c <Off_screen_func>
 8002e0c:	e01a      	b.n	8002e44 <Display_process+0x8c>
		case Option_screen: Option_screen_func(); break;
 8002e0e:	f015 fe3b 	bl	8018a88 <Option_screen_func>
 8002e12:	e017      	b.n	8002e44 <Display_process+0x8c>
		case Display_options_screen: Display_options_screen_func(); break;
 8002e14:	f014 f8b0 	bl	8016f78 <Display_options_screen_func>
 8002e18:	e014      	b.n	8002e44 <Display_process+0x8c>
		case ADC_options_screen: ADC_options_screen_func(); break;
 8002e1a:	f013 fdbd 	bl	8016998 <ADC_options_screen_func>
 8002e1e:	e011      	b.n	8002e44 <Display_process+0x8c>
		case Measure_options_screen: Measure_options_screen_func(); break;
 8002e20:	f014 fad6 	bl	80173d0 <Measure_options_screen_func>
 8002e24:	e00e      	b.n	8002e44 <Display_process+0x8c>
		case Parameter_screen: Parameter_screen_func(); break;
 8002e26:	f015 fd8b 	bl	8018940 <Parameter_screen_func>
 8002e2a:	e00b      	b.n	8002e44 <Display_process+0x8c>
		case RTC_screen: RTC_screen_func(); break;
 8002e2c:	f015 f84c 	bl	8017ec8 <RTC_screen_func>
 8002e30:	e008      	b.n	8002e44 <Display_process+0x8c>
		case Auto_Off_option_screen: Auto_Off_option_screen_func(); break;
 8002e32:	f013 ffef 	bl	8016e14 <Auto_Off_option_screen_func>
 8002e36:	e005      	b.n	8002e44 <Display_process+0x8c>
		case About_options_screen: About_options_screen_func(); break;
 8002e38:	f015 fa5e 	bl	80182f8 <About_options_screen_func>
 8002e3c:	e002      	b.n	8002e44 <Display_process+0x8c>
		case Logging_options_screen: Logging_options_screen_func(); break;
 8002e3e:	f015 fae9 	bl	8018414 <Logging_options_screen_func>
 8002e42:	bf00      	nop
	}
	sleep(10);
 8002e44:	200a      	movs	r0, #10
 8002e46:	f000 f88d 	bl	8002f64 <sleep>
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000004c 	.word	0x2000004c

08002e54 <wait_scheduler>:
unsigned int delay_count=0;
unsigned char RAM[100];
unsigned int j=0;

void wait_scheduler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	if(tasks_timer[task_ready_cnt]==0)task=task_ready_cnt+1;
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <wait_scheduler+0x44>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <wait_scheduler+0x48>)
 8002e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <wait_scheduler+0x20>
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <wait_scheduler+0x44>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <wait_scheduler+0x4c>)
 8002e72:	701a      	strb	r2, [r3, #0]
	if(++task_ready_cnt==num_of_tasks)task_ready_cnt=0;
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <wait_scheduler+0x44>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <wait_scheduler+0x44>)
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <wait_scheduler+0x44>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b0b      	cmp	r3, #11
 8002e86:	d102      	bne.n	8002e8e <wait_scheduler+0x3a>
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <wait_scheduler+0x44>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	20000918 	.word	0x20000918
 8002e9c:	20002124 	.word	0x20002124
 8002ea0:	20000917 	.word	0x20000917

08002ea4 <ELSPIRE_OS_KERNEL>:

void ELSPIRE_OS_KERNEL(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	new_task[0]=wait_scheduler;
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <ELSPIRE_OS_KERNEL+0x40>)
 8002eaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <ELSPIRE_OS_KERNEL+0x44>)
 8002eac:	601a      	str	r2, [r3, #0]
	while (1) for(j=0;j<=num_of_tasks;j++)if(task==j)new_task[j]();
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <ELSPIRE_OS_KERNEL+0x48>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e011      	b.n	8002eda <ELSPIRE_OS_KERNEL+0x36>
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <ELSPIRE_OS_KERNEL+0x4c>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <ELSPIRE_OS_KERNEL+0x48>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d105      	bne.n	8002ed0 <ELSPIRE_OS_KERNEL+0x2c>
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <ELSPIRE_OS_KERNEL+0x48>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <ELSPIRE_OS_KERNEL+0x40>)
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	4798      	blx	r3
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <ELSPIRE_OS_KERNEL+0x48>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <ELSPIRE_OS_KERNEL+0x48>)
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <ELSPIRE_OS_KERNEL+0x48>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b0b      	cmp	r3, #11
 8002ee0:	d9e9      	bls.n	8002eb6 <ELSPIRE_OS_KERNEL+0x12>
 8002ee2:	e7e4      	b.n	8002eae <ELSPIRE_OS_KERNEL+0xa>
 8002ee4:	20001ffc 	.word	0x20001ffc
 8002ee8:	08002e55 	.word	0x08002e55
 8002eec:	20000920 	.word	0x20000920
 8002ef0:	20000917 	.word	0x20000917

08002ef4 <ELSPIRE_OS_TIMER>:
	for(i=1;i<=num_of_tasks;i++)
	tasks_timer[i]=0xFFFF;
}

void ELSPIRE_OS_TIMER(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<num_of_tasks;i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	71fb      	strb	r3, [r7, #7]
 8002f02:	e018      	b.n	8002f36 <ELSPIRE_OS_TIMER+0x42>
	{
		if(tasks_timer[i]>0)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <ELSPIRE_OS_TIMER+0x68>)
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00f      	beq.n	8002f30 <ELSPIRE_OS_TIMER+0x3c>
		{
			if(tasks_timer[i]!=0xFFFF) tasks_timer[i]--;
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <ELSPIRE_OS_TIMER+0x68>)
 8002f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <ELSPIRE_OS_TIMER+0x3c>
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <ELSPIRE_OS_TIMER+0x68>)
 8002f24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f28:	3a01      	subs	r2, #1
 8002f2a:	490c      	ldr	r1, [pc, #48]	; (8002f5c <ELSPIRE_OS_TIMER+0x68>)
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<num_of_tasks;i++)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	3301      	adds	r3, #1
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b0a      	cmp	r3, #10
 8002f3a:	d9e3      	bls.n	8002f04 <ELSPIRE_OS_TIMER+0x10>
		}
	}
	// Задержка
	if (delay_count > 0)
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <ELSPIRE_OS_TIMER+0x6c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <ELSPIRE_OS_TIMER+0x5a>
	{ delay_count--; }
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <ELSPIRE_OS_TIMER+0x6c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <ELSPIRE_OS_TIMER+0x6c>)
 8002f4c:	6013      	str	r3, [r2, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20002124 	.word	0x20002124
 8002f60:	2000091c 	.word	0x2000091c

08002f64 <sleep>:

void sleep(unsigned int ms)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	tasks_timer[task-1] = ms;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <sleep+0x28>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	4907      	ldr	r1, [pc, #28]	; (8002f90 <sleep+0x2c>)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task = wait;
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <sleep+0x28>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	20000917 	.word	0x20000917
 8002f90:	20002124 	.word	0x20002124

08002f94 <Task_STOP>:

void Task_STOP(unsigned char task_num)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=0xFFFF;
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <Task_STOP+0x2c>)
 8002fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	task=wait;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <Task_STOP+0x30>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20002124 	.word	0x20002124
 8002fc4:	20000917 	.word	0x20000917

08002fc8 <Task_RUN>:

void Task_RUN(unsigned char task_num, unsigned int del)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
	tasks_timer[task_num-1]=del;
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	4906      	ldr	r1, [pc, #24]	; (8002ff4 <Task_RUN+0x2c>)
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task=wait;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <Task_RUN+0x30>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20002124 	.word	0x20002124
 8002ff8:	20000917 	.word	0x20000917

08002ffc <delay_ms>:

void delay_ms(unsigned int ms)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <delay_ms+0x28>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
	while (delay_count){}
 800300a:	bf00      	nop
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <delay_ms+0x28>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1fb      	bne.n	800300c <delay_ms+0x10>
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000091c 	.word	0x2000091c

08003028 <delay_us>:

void delay_us(unsigned long int us)
{ while (us--); }
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	bf00      	nop
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1fa      	bne.n	8003032 <delay_us+0xa>
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <MAX77960_Read_Reg>:

extern I2C_HandleTypeDef hi2c2;


uint8_t MAX77960_Read_Reg(uint8_t REG)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[1], rx_buf[1];
	tx_buf[0]=REG;
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	733b      	strb	r3, [r7, #12]
	rx_buf[0]=0xFF;
 800305a:	23ff      	movs	r3, #255	; 0xff
 800305c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, 0xDE, tx_buf, 1, 10000);
 800305e:	f107 020c 	add.w	r2, r7, #12
 8003062:	f242 7310 	movw	r3, #10000	; 0x2710
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2301      	movs	r3, #1
 800306a:	21de      	movs	r1, #222	; 0xde
 800306c:	4808      	ldr	r0, [pc, #32]	; (8003090 <MAX77960_Read_Reg+0x44>)
 800306e:	f007 f991 	bl	800a394 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xDE, (uint8_t *)rx_buf, 1, 10000);
 8003072:	f107 0208 	add.w	r2, r7, #8
 8003076:	f242 7310 	movw	r3, #10000	; 0x2710
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2301      	movs	r3, #1
 800307e:	21de      	movs	r1, #222	; 0xde
 8003080:	4803      	ldr	r0, [pc, #12]	; (8003090 <MAX77960_Read_Reg+0x44>)
 8003082:	f007 fa7b 	bl	800a57c <HAL_I2C_Master_Receive>
	return rx_buf[0];
 8003086:	7a3b      	ldrb	r3, [r7, #8]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200079a0 	.word	0x200079a0

08003094 <clear_buf>:
uint16_t ANSWER=0xFFFF;
uint8_t BSFlag=0;


void clear_buf(void)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<APP_RX_DATA_SIZE;i++)rx_buf[i]=0;
 800309a:	2300      	movs	r3, #0
 800309c:	80fb      	strh	r3, [r7, #6]
 800309e:	e006      	b.n	80030ae <clear_buf+0x1a>
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <clear_buf+0x3c>)
 80030a4:	2100      	movs	r1, #0
 80030a6:	54d1      	strb	r1, [r2, r3]
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	3301      	adds	r3, #1
 80030ac:	80fb      	strh	r3, [r7, #6]
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	d3f4      	bcc.n	80030a0 <clear_buf+0xc>
	rxcntr=0;
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <clear_buf+0x40>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	801a      	strh	r2, [r3, #0]
	ANSWER=0xFFFF;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <clear_buf+0x44>)
 80030be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c2:	801a      	strh	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20005c2c 	.word	0x20005c2c
 80030d4:	2000097a 	.word	0x2000097a
 80030d8:	20000236 	.word	0x20000236

080030dc <scan_num32>:

int64_t scan_num32(uint8_t offset)
{
 80030dc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80030e0:	b089      	sub	sp, #36	; 0x24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
	int64_t res=0;
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t i=0,sign=0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]
 80030f8:	2300      	movs	r3, #0
 80030fa:	75bb      	strb	r3, [r7, #22]
	if(rx_buf[offset]=='-')sign=1;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <scan_num32+0xf4>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	2b2d      	cmp	r3, #45	; 0x2d
 8003104:	d101      	bne.n	800310a <scan_num32+0x2e>
 8003106:	2301      	movs	r3, #1
 8003108:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<15;i++){
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
 800310e:	e049      	b.n	80031a4 <scan_num32+0xc8>
	if((rx_buf[offset+i+sign]>=48)&&(rx_buf[offset+i+sign]<=58))res=(rx_buf[offset+i+sign]-48)+res*10;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	441a      	add	r2, r3
 8003116:	7dbb      	ldrb	r3, [r7, #22]
 8003118:	4413      	add	r3, r2
 800311a:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <scan_num32+0xf4>)
 800311c:	5cd3      	ldrb	r3, [r2, r3]
 800311e:	2b2f      	cmp	r3, #47	; 0x2f
 8003120:	d934      	bls.n	800318c <scan_num32+0xb0>
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	441a      	add	r2, r3
 8003128:	7dbb      	ldrb	r3, [r7, #22]
 800312a:	4413      	add	r3, r2
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <scan_num32+0xf4>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	2b3a      	cmp	r3, #58	; 0x3a
 8003132:	d82b      	bhi.n	800318c <scan_num32+0xb0>
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	441a      	add	r2, r3
 800313a:	7dbb      	ldrb	r3, [r7, #22]
 800313c:	4413      	add	r3, r2
 800313e:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <scan_num32+0xf4>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	3b30      	subs	r3, #48	; 0x30
 8003144:	4698      	mov	r8, r3
 8003146:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800314a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800314e:	4622      	mov	r2, r4
 8003150:	462b      	mov	r3, r5
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003160:	0090      	lsls	r0, r2, #2
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	1912      	adds	r2, r2, r4
 8003168:	eb45 0303 	adc.w	r3, r5, r3
 800316c:	1891      	adds	r1, r2, r2
 800316e:	6039      	str	r1, [r7, #0]
 8003170:	415b      	adcs	r3, r3
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003178:	eb18 0a02 	adds.w	sl, r8, r2
 800317c:	eb49 0b03 	adc.w	fp, r9, r3
 8003180:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i=0;i<15;i++){
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	3301      	adds	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
 800318a:	e00b      	b.n	80031a4 <scan_num32+0xc8>
	else {if(sign==1)return -res; else return res;}}
 800318c:	7dbb      	ldrb	r3, [r7, #22]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <scan_num32+0xc2>
 8003192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003196:	4252      	negs	r2, r2
 8003198:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800319c:	e010      	b.n	80031c0 <scan_num32+0xe4>
 800319e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a2:	e00d      	b.n	80031c0 <scan_num32+0xe4>
	for(i=0;i<15;i++){
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b0e      	cmp	r3, #14
 80031a8:	d9b2      	bls.n	8003110 <scan_num32+0x34>
	if(sign==1)return -res;
 80031aa:	7dbb      	ldrb	r3, [r7, #22]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <scan_num32+0xe0>
 80031b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b4:	4252      	negs	r2, r2
 80031b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80031ba:	e001      	b.n	80031c0 <scan_num32+0xe4>
	else return res;
 80031bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20005c2c 	.word	0x20005c2c

080031d4 <scan_float>:

float scan_float(uint8_t offset)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
//	if(devider==0)devider=1;
//	RES = (float)res32/devider;
//	if(sign==1) return (float)-RES;
//	else return RES;

	return scan_double(offset, (uint8_t*)rx_buf);
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4909      	ldr	r1, [pc, #36]	; (8003208 <scan_float+0x34>)
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 f95b 	bl	80054a0 <scan_double>
 80031ea:	ec53 2b10 	vmov	r2, r3, d0
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f7fd fd09 	bl	8000c08 <__aeabi_d2f>
 80031f6:	4603      	mov	r3, r0
 80031f8:	ee07 3a90 	vmov	s15, r3
}
 80031fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20005c2c 	.word	0x20005c2c

0800320c <scan_num16>:

uint16_t scan_num16(uint8_t offset)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0,i=0;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	2300      	movs	r3, #0
 800321c:	73bb      	strb	r3, [r7, #14]
	if((rx_buf[offset]=='A')&&(rx_buf[offset+1]=='L')&&(rx_buf[offset+2]=='L'))return 0xFFFF;
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <scan_num16+0xa0>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	2b41      	cmp	r3, #65	; 0x41
 8003226:	d10e      	bne.n	8003246 <scan_num16+0x3a>
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	3301      	adds	r3, #1
 800322c:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <scan_num16+0xa0>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	2b4c      	cmp	r3, #76	; 0x4c
 8003232:	d108      	bne.n	8003246 <scan_num16+0x3a>
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	3302      	adds	r3, #2
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <scan_num16+0xa0>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	2b4c      	cmp	r3, #76	; 0x4c
 800323e:	d102      	bne.n	8003246 <scan_num16+0x3a>
 8003240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003244:	e02b      	b.n	800329e <scan_num16+0x92>
	for(i=0;i<10;i++){
 8003246:	2300      	movs	r3, #0
 8003248:	73bb      	strb	r3, [r7, #14]
 800324a:	e023      	b.n	8003294 <scan_num16+0x88>
	if((rx_buf[offset+i]>=48)&&(rx_buf[offset+i]<=58))res=(rx_buf[offset+i]-48)+res*10;
 800324c:	79fa      	ldrb	r2, [r7, #7]
 800324e:	7bbb      	ldrb	r3, [r7, #14]
 8003250:	4413      	add	r3, r2
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <scan_num16+0xa0>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	2b2f      	cmp	r3, #47	; 0x2f
 8003258:	d919      	bls.n	800328e <scan_num16+0x82>
 800325a:	79fa      	ldrb	r2, [r7, #7]
 800325c:	7bbb      	ldrb	r3, [r7, #14]
 800325e:	4413      	add	r3, r2
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <scan_num16+0xa0>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	2b3a      	cmp	r3, #58	; 0x3a
 8003266:	d812      	bhi.n	800328e <scan_num16+0x82>
 8003268:	79fa      	ldrb	r2, [r7, #7]
 800326a:	7bbb      	ldrb	r3, [r7, #14]
 800326c:	4413      	add	r3, r2
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <scan_num16+0xa0>)
 8003270:	5cd2      	ldrb	r2, [r2, r3]
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	4619      	mov	r1, r3
 8003276:	0089      	lsls	r1, r1, #2
 8003278:	440b      	add	r3, r1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4413      	add	r3, r2
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3b30      	subs	r3, #48	; 0x30
 8003284:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<10;i++){
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	3301      	adds	r3, #1
 800328a:	73bb      	strb	r3, [r7, #14]
 800328c:	e002      	b.n	8003294 <scan_num16+0x88>
	else return res;}
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	b29b      	uxth	r3, r3
 8003292:	e004      	b.n	800329e <scan_num16+0x92>
	for(i=0;i<10;i++){
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	2b09      	cmp	r3, #9
 8003298:	d9d8      	bls.n	800324c <scan_num16+0x40>
	return res;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	b29b      	uxth	r3, r3
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20005c2c 	.word	0x20005c2c

080032b0 <OneCommParseCycle>:

void OneCommParseCycle(uint8_t com, const char* compare, uint8_t offset, uint8_t len)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6039      	str	r1, [r7, #0]
 80032b8:	4611      	mov	r1, r2
 80032ba:	461a      	mov	r2, r3
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]
 80032c0:	460b      	mov	r3, r1
 80032c2:	71bb      	strb	r3, [r7, #6]
 80032c4:	4613      	mov	r3, r2
 80032c6:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	if(ANSWER==0xFFFF){
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <OneCommParseCycle+0x70>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d11f      	bne.n	8003314 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e018      	b.n	800330c <OneCommParseCycle+0x5c>
	{
		if(rx_buf[i+offset]==compare[i]) ANSWER = com;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	79bb      	ldrb	r3, [r7, #6]
 80032de:	4413      	add	r3, r2
 80032e0:	4a10      	ldr	r2, [pc, #64]	; (8003324 <OneCommParseCycle+0x74>)
 80032e2:	5cd2      	ldrb	r2, [r2, r3]
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	440b      	add	r3, r1
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d104      	bne.n	80032fa <OneCommParseCycle+0x4a>
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <OneCommParseCycle+0x70>)
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	e005      	b.n	8003306 <OneCommParseCycle+0x56>
		else {ANSWER=0xFFFF; break;}
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <OneCommParseCycle+0x70>)
 80032fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003300:	801a      	strh	r2, [r3, #0]
 8003302:	bf00      	nop
	}}
}
 8003304:	e006      	b.n	8003314 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	3301      	adds	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	797b      	ldrb	r3, [r7, #5]
 8003310:	429a      	cmp	r2, r3
 8003312:	d3e2      	bcc.n	80032da <OneCommParseCycle+0x2a>
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20000236 	.word	0x20000236
 8003324:	20005c2c 	.word	0x20005c2c

08003328 <parser>:

uint16_t parser(uint8_t offset)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	ANSWER=0xFFFF;
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <parser+0x8c>)
 8003334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003338:	801a      	strh	r2, [r3, #0]
	// Commands
	for(i=2;i<NUMBER_OF_COMMANDS;i++) OneCommParseCycle(i, COMMAND_STRING[i], offset, COMMAND_NUM_OF_SYM[i]);
 800333a:	2302      	movs	r3, #2
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e00d      	b.n	800335c <parser+0x34>
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <parser+0x90>)
 8003344:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <parser+0x94>)
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	79fa      	ldrb	r2, [r7, #7]
 8003350:	7bf8      	ldrb	r0, [r7, #15]
 8003352:	f7ff ffad 	bl	80032b0 <OneCommParseCycle>
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	3301      	adds	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b25      	cmp	r3, #37	; 0x25
 8003360:	d9ee      	bls.n	8003340 <parser+0x18>
	// Variables
	for(i=0;i<NUMBER_OF_VARIABLES;i++) OneCommParseCycle(i, GV_STRING[i], offset, GV_NUM_OF_SYM[i]);
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e00d      	b.n	8003384 <parser+0x5c>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <parser+0x98>)
 800336c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <parser+0x9c>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	79fa      	ldrb	r2, [r7, #7]
 8003378:	7bf8      	ldrb	r0, [r7, #15]
 800337a:	f7ff ff99 	bl	80032b0 <OneCommParseCycle>
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	3301      	adds	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b10      	cmp	r3, #16
 8003388:	d9ee      	bls.n	8003368 <parser+0x40>
	// UNKNOWING_CMD
	if((rx_buf[offset]!=0)&&(ANSWER==0xFFFF))ANSWER=0xFFFE;
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <parser+0xa0>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <parser+0x80>
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <parser+0x8c>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800339c:	4293      	cmp	r3, r2
 800339e:	d103      	bne.n	80033a8 <parser+0x80>
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <parser+0x8c>)
 80033a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80033a6:	801a      	strh	r2, [r3, #0]
	return ANSWER;
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <parser+0x8c>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000236 	.word	0x20000236
 80033b8:	2000019c 	.word	0x2000019c
 80033bc:	08023d90 	.word	0x08023d90
 80033c0:	20000100 	.word	0x20000100
 80033c4:	08023d44 	.word	0x08023d44
 80033c8:	20005c2c 	.word	0x20005c2c

080033cc <Set_uint8>:


void Set_uint8(uint8_t*arr, uint8_t offset)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff ff16 	bl	800320c <scan_num16>
 80033e0:	4603      	mov	r3, r0
 80033e2:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80033e4:	2300      	movs	r3, #0
 80033e6:	82fb      	strh	r3, [r7, #22]
 80033e8:	e019      	b.n	800341e <Set_uint8+0x52>
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	8afb      	ldrh	r3, [r7, #22]
 80033ee:	4413      	add	r3, r2
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <Set_uint8+0x98>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d006      	beq.n	8003406 <Set_uint8+0x3a>
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	4413      	add	r3, r2
 80033fe:	4a19      	ldr	r2, [pc, #100]	; (8003464 <Set_uint8+0x98>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	2b3d      	cmp	r3, #61	; 0x3d
 8003404:	d108      	bne.n	8003418 <Set_uint8+0x4c>
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	b29a      	uxth	r2, r3
 800340a:	8afb      	ldrh	r3, [r7, #22]
 800340c:	4413      	add	r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	82bb      	strh	r3, [r7, #20]
 8003414:	2364      	movs	r3, #100	; 0x64
 8003416:	82fb      	strh	r3, [r7, #22]
 8003418:	8afb      	ldrh	r3, [r7, #22]
 800341a:	3301      	adds	r3, #1
 800341c:	82fb      	strh	r3, [r7, #22]
 800341e:	8afb      	ldrh	r3, [r7, #22]
 8003420:	2b63      	cmp	r3, #99	; 0x63
 8003422:	d9e2      	bls.n	80033ea <Set_uint8+0x1e>
	data=scan_num32(equal);
 8003424:	8abb      	ldrh	r3, [r7, #20]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fe57 	bl	80030dc <scan_num32>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4613      	mov	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
	if(data>255)CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2bff      	cmp	r3, #255	; 0xff
 800343a:	d904      	bls.n	8003446 <Set_uint8+0x7a>
 800343c:	2117      	movs	r1, #23
 800343e:	480a      	ldr	r0, [pc, #40]	; (8003468 <Set_uint8+0x9c>)
 8003440:	f016 f888 	bl	8019554 <CDC_Transmit_FS>
	else
	{
		arr[index]=data;
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}
 8003444:	e009      	b.n	800345a <Set_uint8+0x8e>
		arr[index]=data;
 8003446:	8a7b      	ldrh	r3, [r7, #18]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003452:	2104      	movs	r1, #4
 8003454:	4805      	ldr	r0, [pc, #20]	; (800346c <Set_uint8+0xa0>)
 8003456:	f016 f87d 	bl	8019554 <CDC_Transmit_FS>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20005c2c 	.word	0x20005c2c
 8003468:	08021ef4 	.word	0x08021ef4
 800346c:	08021f0c 	.word	0x08021f0c

08003470 <Set_int8>:
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}

void Set_int8(int8_t*arr, uint8_t offset)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fec4 	bl	800320c <scan_num16>
 8003484:	4603      	mov	r3, r0
 8003486:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003488:	2300      	movs	r3, #0
 800348a:	82fb      	strh	r3, [r7, #22]
 800348c:	e019      	b.n	80034c2 <Set_int8+0x52>
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	8afb      	ldrh	r3, [r7, #22]
 8003492:	4413      	add	r3, r2
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <Set_int8+0xa0>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	2b20      	cmp	r3, #32
 800349a:	d006      	beq.n	80034aa <Set_int8+0x3a>
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	8afb      	ldrh	r3, [r7, #22]
 80034a0:	4413      	add	r3, r2
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <Set_int8+0xa0>)
 80034a4:	5cd3      	ldrb	r3, [r2, r3]
 80034a6:	2b3d      	cmp	r3, #61	; 0x3d
 80034a8:	d108      	bne.n	80034bc <Set_int8+0x4c>
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	4413      	add	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	82bb      	strh	r3, [r7, #20]
 80034b8:	2364      	movs	r3, #100	; 0x64
 80034ba:	82fb      	strh	r3, [r7, #22]
 80034bc:	8afb      	ldrh	r3, [r7, #22]
 80034be:	3301      	adds	r3, #1
 80034c0:	82fb      	strh	r3, [r7, #22]
 80034c2:	8afb      	ldrh	r3, [r7, #22]
 80034c4:	2b63      	cmp	r3, #99	; 0x63
 80034c6:	d9e2      	bls.n	800348e <Set_int8+0x1e>
	data=scan_num32(equal);
 80034c8:	8abb      	ldrh	r3, [r7, #20]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fe05 	bl	80030dc <scan_num32>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4613      	mov	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
	if((data>127)||(data<-127))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b7f      	cmp	r3, #127	; 0x7f
 80034de:	d803      	bhi.n	80034e8 <Set_int8+0x78>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80034e6:	d804      	bhi.n	80034f2 <Set_int8+0x82>
 80034e8:	2117      	movs	r1, #23
 80034ea:	480a      	ldr	r0, [pc, #40]	; (8003514 <Set_int8+0xa4>)
 80034ec:	f016 f832 	bl	8019554 <CDC_Transmit_FS>
 80034f0:	e00a      	b.n	8003508 <Set_int8+0x98>
	else
	{
		arr[index]=data;
 80034f2:	8a7b      	ldrh	r3, [r7, #18]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	b252      	sxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80034fe:	2104      	movs	r1, #4
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <Set_int8+0xa8>)
 8003502:	f016 f827 	bl	8019554 <CDC_Transmit_FS>
	}
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20005c2c 	.word	0x20005c2c
 8003514:	08021ef4 	.word	0x08021ef4
 8003518:	08021f0c 	.word	0x08021f0c

0800351c <Set_int16>:

void Set_int16(int16_t*arr, uint8_t offset)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fe6e 	bl	800320c <scan_num16>
 8003530:	4603      	mov	r3, r0
 8003532:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003534:	2300      	movs	r3, #0
 8003536:	82fb      	strh	r3, [r7, #22]
 8003538:	e019      	b.n	800356e <Set_int16+0x52>
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	8afb      	ldrh	r3, [r7, #22]
 800353e:	4413      	add	r3, r2
 8003540:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <Set_int16+0xa4>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	2b20      	cmp	r3, #32
 8003546:	d006      	beq.n	8003556 <Set_int16+0x3a>
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	8afb      	ldrh	r3, [r7, #22]
 800354c:	4413      	add	r3, r2
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <Set_int16+0xa4>)
 8003550:	5cd3      	ldrb	r3, [r2, r3]
 8003552:	2b3d      	cmp	r3, #61	; 0x3d
 8003554:	d108      	bne.n	8003568 <Set_int16+0x4c>
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	b29a      	uxth	r2, r3
 800355a:	8afb      	ldrh	r3, [r7, #22]
 800355c:	4413      	add	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	82bb      	strh	r3, [r7, #20]
 8003564:	2364      	movs	r3, #100	; 0x64
 8003566:	82fb      	strh	r3, [r7, #22]
 8003568:	8afb      	ldrh	r3, [r7, #22]
 800356a:	3301      	adds	r3, #1
 800356c:	82fb      	strh	r3, [r7, #22]
 800356e:	8afb      	ldrh	r3, [r7, #22]
 8003570:	2b63      	cmp	r3, #99	; 0x63
 8003572:	d9e2      	bls.n	800353a <Set_int16+0x1e>
	data=scan_num32(equal);
 8003574:	8abb      	ldrh	r3, [r7, #20]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fdaf 	bl	80030dc <scan_num32>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4613      	mov	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
	if((data>32767)||(data<-32767))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d203      	bcs.n	8003596 <Set_int16+0x7a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003594:	d804      	bhi.n	80035a0 <Set_int16+0x84>
 8003596:	2117      	movs	r1, #23
 8003598:	480a      	ldr	r0, [pc, #40]	; (80035c4 <Set_int16+0xa8>)
 800359a:	f015 ffdb 	bl	8019554 <CDC_Transmit_FS>
 800359e:	e00b      	b.n	80035b8 <Set_int16+0x9c>
	else
	{
		arr[index]=data;
 80035a0:	8a7b      	ldrh	r3, [r7, #18]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	b212      	sxth	r2, r2
 80035ac:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80035ae:	2104      	movs	r1, #4
 80035b0:	4805      	ldr	r0, [pc, #20]	; (80035c8 <Set_int16+0xac>)
 80035b2:	f015 ffcf 	bl	8019554 <CDC_Transmit_FS>
	}
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20005c2c 	.word	0x20005c2c
 80035c4:	08021ef4 	.word	0x08021ef4
 80035c8:	08021f0c 	.word	0x08021f0c

080035cc <Set_int32>:

void Set_int32(int32_t*arr, uint8_t offset)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int64_t data;
	index=scan_num16(offset);
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe16 	bl	800320c <scan_num16>
 80035e0:	4603      	mov	r3, r0
 80035e2:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80035e4:	2300      	movs	r3, #0
 80035e6:	82fb      	strh	r3, [r7, #22]
 80035e8:	e019      	b.n	800361e <Set_int32+0x52>
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	8afb      	ldrh	r3, [r7, #22]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a24      	ldr	r2, [pc, #144]	; (8003684 <Set_int32+0xb8>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d006      	beq.n	8003606 <Set_int32+0x3a>
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	8afb      	ldrh	r3, [r7, #22]
 80035fc:	4413      	add	r3, r2
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <Set_int32+0xb8>)
 8003600:	5cd3      	ldrb	r3, [r2, r3]
 8003602:	2b3d      	cmp	r3, #61	; 0x3d
 8003604:	d108      	bne.n	8003618 <Set_int32+0x4c>
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	b29a      	uxth	r2, r3
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	4413      	add	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	82bb      	strh	r3, [r7, #20]
 8003614:	2364      	movs	r3, #100	; 0x64
 8003616:	82fb      	strh	r3, [r7, #22]
 8003618:	8afb      	ldrh	r3, [r7, #22]
 800361a:	3301      	adds	r3, #1
 800361c:	82fb      	strh	r3, [r7, #22]
 800361e:	8afb      	ldrh	r3, [r7, #22]
 8003620:	2b63      	cmp	r3, #99	; 0x63
 8003622:	d9e2      	bls.n	80035ea <Set_int32+0x1e>
	data=scan_num32(equal);
 8003624:	8abb      	ldrh	r3, [r7, #20]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fd57 	bl	80030dc <scan_num32>
 800362e:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if((data>2147483647)||(data<-2147483647))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003636:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	4290      	cmp	r0, r2
 8003640:	eb71 0303 	sbcs.w	r3, r1, r3
 8003644:	db09      	blt.n	800365a <Set_int32+0x8e>
 8003646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800364a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800364e:	f04f 31ff 	mov.w	r1, #4294967295
 8003652:	4290      	cmp	r0, r2
 8003654:	eb71 0303 	sbcs.w	r3, r1, r3
 8003658:	db04      	blt.n	8003664 <Set_int32+0x98>
 800365a:	2117      	movs	r1, #23
 800365c:	480a      	ldr	r0, [pc, #40]	; (8003688 <Set_int32+0xbc>)
 800365e:	f015 ff79 	bl	8019554 <CDC_Transmit_FS>
 8003662:	e00a      	b.n	800367a <Set_int32+0xae>
	else
	{
		arr[index]=(int32_t)data;
 8003664:	8a7b      	ldrh	r3, [r7, #18]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003670:	2104      	movs	r1, #4
 8003672:	4806      	ldr	r0, [pc, #24]	; (800368c <Set_int32+0xc0>)
 8003674:	f015 ff6e 	bl	8019554 <CDC_Transmit_FS>
	}

//	arr[index]=data;
//	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20005c2c 	.word	0x20005c2c
 8003688:	08021ef4 	.word	0x08021ef4
 800368c:	08021f0c 	.word	0x08021f0c

08003690 <Set_uint32>:

void Set_uint32(uint32_t*arr, uint8_t offset)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int32_t data;
	index=scan_num16(offset);
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fdb4 	bl	800320c <scan_num16>
 80036a4:	4603      	mov	r3, r0
 80036a6:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80036a8:	2300      	movs	r3, #0
 80036aa:	82fb      	strh	r3, [r7, #22]
 80036ac:	e019      	b.n	80036e2 <Set_uint32+0x52>
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	8afb      	ldrh	r3, [r7, #22]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <Set_uint32+0x88>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d006      	beq.n	80036ca <Set_uint32+0x3a>
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	8afb      	ldrh	r3, [r7, #22]
 80036c0:	4413      	add	r3, r2
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <Set_uint32+0x88>)
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	2b3d      	cmp	r3, #61	; 0x3d
 80036c8:	d108      	bne.n	80036dc <Set_uint32+0x4c>
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	8afb      	ldrh	r3, [r7, #22]
 80036d0:	4413      	add	r3, r2
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	82bb      	strh	r3, [r7, #20]
 80036d8:	2364      	movs	r3, #100	; 0x64
 80036da:	82fb      	strh	r3, [r7, #22]
 80036dc:	8afb      	ldrh	r3, [r7, #22]
 80036de:	3301      	adds	r3, #1
 80036e0:	82fb      	strh	r3, [r7, #22]
 80036e2:	8afb      	ldrh	r3, [r7, #22]
 80036e4:	2b63      	cmp	r3, #99	; 0x63
 80036e6:	d9e2      	bls.n	80036ae <Set_uint32+0x1e>
	data=scan_num32(equal);
 80036e8:	8abb      	ldrh	r3, [r7, #20]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fcf5 	bl	80030dc <scan_num32>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4613      	mov	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
	arr[index]=data;
 80036fa:	8a7b      	ldrh	r3, [r7, #18]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003706:	2104      	movs	r1, #4
 8003708:	4804      	ldr	r0, [pc, #16]	; (800371c <Set_uint32+0x8c>)
 800370a:	f015 ff23 	bl	8019554 <CDC_Transmit_FS>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20005c2c 	.word	0x20005c2c
 800371c:	08021f0c 	.word	0x08021f0c

08003720 <Set_float>:

void Set_float(float*arr, uint8_t offset)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	float data;
	index=scan_num16(offset);
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fd6c 	bl	800320c <scan_num16>
 8003734:	4603      	mov	r3, r0
 8003736:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003738:	2300      	movs	r3, #0
 800373a:	82fb      	strh	r3, [r7, #22]
 800373c:	e019      	b.n	8003772 <Set_float+0x52>
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	8afb      	ldrh	r3, [r7, #22]
 8003742:	4413      	add	r3, r2
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <Set_float+0x94>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	2b20      	cmp	r3, #32
 800374a:	d006      	beq.n	800375a <Set_float+0x3a>
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	8afb      	ldrh	r3, [r7, #22]
 8003750:	4413      	add	r3, r2
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <Set_float+0x94>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	2b3d      	cmp	r3, #61	; 0x3d
 8003758:	d108      	bne.n	800376c <Set_float+0x4c>
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	b29a      	uxth	r2, r3
 800375e:	8afb      	ldrh	r3, [r7, #22]
 8003760:	4413      	add	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	82bb      	strh	r3, [r7, #20]
 8003768:	2364      	movs	r3, #100	; 0x64
 800376a:	82fb      	strh	r3, [r7, #22]
 800376c:	8afb      	ldrh	r3, [r7, #22]
 800376e:	3301      	adds	r3, #1
 8003770:	82fb      	strh	r3, [r7, #22]
 8003772:	8afb      	ldrh	r3, [r7, #22]
 8003774:	2b63      	cmp	r3, #99	; 0x63
 8003776:	d9e2      	bls.n	800373e <Set_float+0x1e>
	data=scan_float(equal);
 8003778:	8abb      	ldrh	r3, [r7, #20]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fd29 	bl	80031d4 <scan_float>
 8003782:	ed87 0a03 	vstr	s0, [r7, #12]
	if(!BSFlag){
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <Set_float+0x98>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <Set_float+0x84>
	arr[index]=data;
 800378e:	8a7b      	ldrh	r3, [r7, #18]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);}
 800379a:	2104      	movs	r1, #4
 800379c:	4807      	ldr	r0, [pc, #28]	; (80037bc <Set_float+0x9c>)
 800379e:	f015 fed9 	bl	8019554 <CDC_Transmit_FS>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
}
 80037a2:	e003      	b.n	80037ac <Set_float+0x8c>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80037a4:	2117      	movs	r1, #23
 80037a6:	4806      	ldr	r0, [pc, #24]	; (80037c0 <Set_float+0xa0>)
 80037a8:	f015 fed4 	bl	8019554 <CDC_Transmit_FS>
}
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20005c2c 	.word	0x20005c2c
 80037b8:	2000097c 	.word	0x2000097c
 80037bc:	08021f0c 	.word	0x08021f0c
 80037c0:	08021ef4 	.word	0x08021ef4

080037c4 <Get_uint8>:




void Get_uint8(uint8_t*arr, uint8_t offset, uint16_t size)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
 80037d0:	4613      	mov	r3, r2
 80037d2:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 80037d4:	2300      	movs	r3, #0
 80037d6:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fd16 	bl	800320c <scan_num16>
 80037e0:	4603      	mov	r3, r0
 80037e2:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 80037e4:	89bb      	ldrh	r3, [r7, #12]
 80037e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d132      	bne.n	8003854 <Get_uint8+0x90>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 80037ee:	210e      	movs	r1, #14
 80037f0:	482a      	ldr	r0, [pc, #168]	; (800389c <Get_uint8+0xd8>)
 80037f2:	f015 feaf 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	81fb      	strh	r3, [r7, #14]
 80037fa:	e022      	b.n	8003842 <Get_uint8+0x7e>
		{
			if(!CSV_format)sprintf(RAM, "%d\t", arr[i]);
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <Get_uint8+0xdc>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <Get_uint8+0x54>
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4925      	ldr	r1, [pc, #148]	; (80038a4 <Get_uint8+0xe0>)
 8003810:	4825      	ldr	r0, [pc, #148]	; (80038a8 <Get_uint8+0xe4>)
 8003812:	f01a fb15 	bl	801de40 <siprintf>
 8003816:	e008      	b.n	800382a <Get_uint8+0x66>
			else sprintf(RAM, "%d;", arr[i]);
 8003818:	89fb      	ldrh	r3, [r7, #14]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4922      	ldr	r1, [pc, #136]	; (80038ac <Get_uint8+0xe8>)
 8003824:	4820      	ldr	r0, [pc, #128]	; (80038a8 <Get_uint8+0xe4>)
 8003826:	f01a fb0b 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800382a:	481f      	ldr	r0, [pc, #124]	; (80038a8 <Get_uint8+0xe4>)
 800382c:	f7fc fce0 	bl	80001f0 <strlen>
 8003830:	4603      	mov	r3, r0
 8003832:	b29b      	uxth	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	481c      	ldr	r0, [pc, #112]	; (80038a8 <Get_uint8+0xe4>)
 8003838:	f015 fe8c 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	3301      	adds	r3, #1
 8003840:	81fb      	strh	r3, [r7, #14]
 8003842:	89fa      	ldrh	r2, [r7, #14]
 8003844:	883b      	ldrh	r3, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3d8      	bcc.n	80037fc <Get_uint8+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 800384a:	2102      	movs	r1, #2
 800384c:	4818      	ldr	r0, [pc, #96]	; (80038b0 <Get_uint8+0xec>)
 800384e:	f015 fe81 	bl	8019554 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%d\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003852:	e01e      	b.n	8003892 <Get_uint8+0xce>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003854:	883a      	ldrh	r2, [r7, #0]
 8003856:	89bb      	ldrh	r3, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d808      	bhi.n	800386e <Get_uint8+0xaa>
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <Get_uint8+0xf0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2209      	movs	r2, #9
 8003862:	b292      	uxth	r2, r2
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f015 fe74 	bl	8019554 <CDC_Transmit_FS>
}
 800386c:	e011      	b.n	8003892 <Get_uint8+0xce>
			sprintf(RAM, "%d\r\n", arr[index]);
 800386e:	89bb      	ldrh	r3, [r7, #12]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	490f      	ldr	r1, [pc, #60]	; (80038b8 <Get_uint8+0xf4>)
 800387a:	480b      	ldr	r0, [pc, #44]	; (80038a8 <Get_uint8+0xe4>)
 800387c:	f01a fae0 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003880:	4809      	ldr	r0, [pc, #36]	; (80038a8 <Get_uint8+0xe4>)
 8003882:	f7fc fcb5 	bl	80001f0 <strlen>
 8003886:	4603      	mov	r3, r0
 8003888:	b29b      	uxth	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	4806      	ldr	r0, [pc, #24]	; (80038a8 <Get_uint8+0xe4>)
 800388e:	f015 fe61 	bl	8019554 <CDC_Transmit_FS>
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	08021f14 	.word	0x08021f14
 80038a0:	20000977 	.word	0x20000977
 80038a4:	08021f24 	.word	0x08021f24
 80038a8:	20002150 	.word	0x20002150
 80038ac:	08021f28 	.word	0x08021f28
 80038b0:	08021dc4 	.word	0x08021dc4
 80038b4:	2000019c 	.word	0x2000019c
 80038b8:	08021f2c 	.word	0x08021f2c

080038bc <Get_int32>:


void Get_int32(int32_t*arr, uint8_t offset, uint16_t size)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
 80038c8:	4613      	mov	r3, r2
 80038ca:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 80038cc:	2300      	movs	r3, #0
 80038ce:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fc9a 	bl	800320c <scan_num16>
 80038d8:	4603      	mov	r3, r0
 80038da:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 80038dc:	89bb      	ldrh	r3, [r7, #12]
 80038de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d134      	bne.n	8003950 <Get_int32+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 80038e6:	210e      	movs	r1, #14
 80038e8:	482b      	ldr	r0, [pc, #172]	; (8003998 <Get_int32+0xdc>)
 80038ea:	f015 fe33 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	81fb      	strh	r3, [r7, #14]
 80038f2:	e024      	b.n	800393e <Get_int32+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%i\t", arr[i]);
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <Get_int32+0xe0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <Get_int32+0x56>
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4925      	ldr	r1, [pc, #148]	; (80039a0 <Get_int32+0xe4>)
 800390a:	4826      	ldr	r0, [pc, #152]	; (80039a4 <Get_int32+0xe8>)
 800390c:	f01a fa98 	bl	801de40 <siprintf>
 8003910:	e009      	b.n	8003926 <Get_int32+0x6a>
			else sprintf(RAM, "%i;", arr[i]);
 8003912:	89fb      	ldrh	r3, [r7, #14]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4922      	ldr	r1, [pc, #136]	; (80039a8 <Get_int32+0xec>)
 8003920:	4820      	ldr	r0, [pc, #128]	; (80039a4 <Get_int32+0xe8>)
 8003922:	f01a fa8d 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003926:	481f      	ldr	r0, [pc, #124]	; (80039a4 <Get_int32+0xe8>)
 8003928:	f7fc fc62 	bl	80001f0 <strlen>
 800392c:	4603      	mov	r3, r0
 800392e:	b29b      	uxth	r3, r3
 8003930:	4619      	mov	r1, r3
 8003932:	481c      	ldr	r0, [pc, #112]	; (80039a4 <Get_int32+0xe8>)
 8003934:	f015 fe0e 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	3301      	adds	r3, #1
 800393c:	81fb      	strh	r3, [r7, #14]
 800393e:	89fa      	ldrh	r2, [r7, #14]
 8003940:	883b      	ldrh	r3, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d3d6      	bcc.n	80038f4 <Get_int32+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003946:	2102      	movs	r1, #2
 8003948:	4818      	ldr	r0, [pc, #96]	; (80039ac <Get_int32+0xf0>)
 800394a:	f015 fe03 	bl	8019554 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%i\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 800394e:	e01f      	b.n	8003990 <Get_int32+0xd4>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003950:	883a      	ldrh	r2, [r7, #0]
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d808      	bhi.n	800396a <Get_int32+0xae>
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <Get_int32+0xf4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2209      	movs	r2, #9
 800395e:	b292      	uxth	r2, r2
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f015 fdf6 	bl	8019554 <CDC_Transmit_FS>
}
 8003968:	e012      	b.n	8003990 <Get_int32+0xd4>
			sprintf(RAM, "%i\r\n", arr[index]);
 800396a:	89bb      	ldrh	r3, [r7, #12]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	490f      	ldr	r1, [pc, #60]	; (80039b4 <Get_int32+0xf8>)
 8003978:	480a      	ldr	r0, [pc, #40]	; (80039a4 <Get_int32+0xe8>)
 800397a:	f01a fa61 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800397e:	4809      	ldr	r0, [pc, #36]	; (80039a4 <Get_int32+0xe8>)
 8003980:	f7fc fc36 	bl	80001f0 <strlen>
 8003984:	4603      	mov	r3, r0
 8003986:	b29b      	uxth	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	4806      	ldr	r0, [pc, #24]	; (80039a4 <Get_int32+0xe8>)
 800398c:	f015 fde2 	bl	8019554 <CDC_Transmit_FS>
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	08021f14 	.word	0x08021f14
 800399c:	20000977 	.word	0x20000977
 80039a0:	08021f34 	.word	0x08021f34
 80039a4:	20002150 	.word	0x20002150
 80039a8:	08021f38 	.word	0x08021f38
 80039ac:	08021dc4 	.word	0x08021dc4
 80039b0:	2000019c 	.word	0x2000019c
 80039b4:	08021f3c 	.word	0x08021f3c

080039b8 <Get_float>:

void Get_float(float*arr, uint8_t offset, uint16_t size)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
 80039c4:	4613      	mov	r3, r2
 80039c6:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 80039c8:	2300      	movs	r3, #0
 80039ca:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fc1c 	bl	800320c <scan_num16>
 80039d4:	4603      	mov	r3, r0
 80039d6:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 80039d8:	89bb      	ldrh	r3, [r7, #12]
 80039da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039de:	4293      	cmp	r3, r2
 80039e0:	d13c      	bne.n	8003a5c <Get_float+0xa4>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 80039e2:	210e      	movs	r1, #14
 80039e4:	4831      	ldr	r0, [pc, #196]	; (8003aac <Get_float+0xf4>)
 80039e6:	f015 fdb5 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	81fb      	strh	r3, [r7, #14]
 80039ee:	e02c      	b.n	8003a4a <Get_float+0x92>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <Get_float+0xf8>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10e      	bne.n	8003a16 <Get_float+0x5e>
 80039f8:	89fb      	ldrh	r3, [r7, #14]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fdb0 	bl	8000568 <__aeabi_f2d>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4929      	ldr	r1, [pc, #164]	; (8003ab4 <Get_float+0xfc>)
 8003a0e:	482a      	ldr	r0, [pc, #168]	; (8003ab8 <Get_float+0x100>)
 8003a10:	f01a fa16 	bl	801de40 <siprintf>
 8003a14:	e00d      	b.n	8003a32 <Get_float+0x7a>
			else sprintf(RAM, "%f;", arr[i]);
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fda1 	bl	8000568 <__aeabi_f2d>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4924      	ldr	r1, [pc, #144]	; (8003abc <Get_float+0x104>)
 8003a2c:	4822      	ldr	r0, [pc, #136]	; (8003ab8 <Get_float+0x100>)
 8003a2e:	f01a fa07 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003a32:	4821      	ldr	r0, [pc, #132]	; (8003ab8 <Get_float+0x100>)
 8003a34:	f7fc fbdc 	bl	80001f0 <strlen>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	481e      	ldr	r0, [pc, #120]	; (8003ab8 <Get_float+0x100>)
 8003a40:	f015 fd88 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	3301      	adds	r3, #1
 8003a48:	81fb      	strh	r3, [r7, #14]
 8003a4a:	89fa      	ldrh	r2, [r7, #14]
 8003a4c:	883b      	ldrh	r3, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3ce      	bcc.n	80039f0 <Get_float+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003a52:	2102      	movs	r1, #2
 8003a54:	481a      	ldr	r0, [pc, #104]	; (8003ac0 <Get_float+0x108>)
 8003a56:	f015 fd7d 	bl	8019554 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003a5a:	e023      	b.n	8003aa4 <Get_float+0xec>
		if(index>size-1)
 8003a5c:	883a      	ldrh	r2, [r7, #0]
 8003a5e:	89bb      	ldrh	r3, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d808      	bhi.n	8003a76 <Get_float+0xbe>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <Get_float+0x10c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2209      	movs	r2, #9
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f015 fd70 	bl	8019554 <CDC_Transmit_FS>
}
 8003a74:	e016      	b.n	8003aa4 <Get_float+0xec>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003a76:	89bb      	ldrh	r3, [r7, #12]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fd71 	bl	8000568 <__aeabi_f2d>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	490f      	ldr	r1, [pc, #60]	; (8003ac8 <Get_float+0x110>)
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <Get_float+0x100>)
 8003a8e:	f01a f9d7 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003a92:	4809      	ldr	r0, [pc, #36]	; (8003ab8 <Get_float+0x100>)
 8003a94:	f7fc fbac 	bl	80001f0 <strlen>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <Get_float+0x100>)
 8003aa0:	f015 fd58 	bl	8019554 <CDC_Transmit_FS>
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	08021f14 	.word	0x08021f14
 8003ab0:	20000977 	.word	0x20000977
 8003ab4:	08021f44 	.word	0x08021f44
 8003ab8:	20002150 	.word	0x20002150
 8003abc:	08021f48 	.word	0x08021f48
 8003ac0:	08021dc4 	.word	0x08021dc4
 8003ac4:	2000019c 	.word	0x2000019c
 8003ac8:	08021f4c 	.word	0x08021f4c

08003acc <Get_double>:


void Get_double(double*arr, uint8_t offset, uint16_t size)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003adc:	2300      	movs	r3, #0
 8003ade:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fb92 	bl	800320c <scan_num16>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d134      	bne.n	8003b60 <Get_double+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003af6:	210e      	movs	r1, #14
 8003af8:	482b      	ldr	r0, [pc, #172]	; (8003ba8 <Get_double+0xdc>)
 8003afa:	f015 fd2b 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	81fb      	strh	r3, [r7, #14]
 8003b02:	e024      	b.n	8003b4e <Get_double+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003b04:	4b29      	ldr	r3, [pc, #164]	; (8003bac <Get_double+0xe0>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <Get_double+0x56>
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <Get_double+0xe4>)
 8003b1a:	4826      	ldr	r0, [pc, #152]	; (8003bb4 <Get_double+0xe8>)
 8003b1c:	f01a f990 	bl	801de40 <siprintf>
 8003b20:	e009      	b.n	8003b36 <Get_double+0x6a>
			else sprintf(RAM, "%f;", (double)arr[i]);
 8003b22:	89fb      	ldrh	r3, [r7, #14]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	4922      	ldr	r1, [pc, #136]	; (8003bb8 <Get_double+0xec>)
 8003b30:	4820      	ldr	r0, [pc, #128]	; (8003bb4 <Get_double+0xe8>)
 8003b32:	f01a f985 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b36:	481f      	ldr	r0, [pc, #124]	; (8003bb4 <Get_double+0xe8>)
 8003b38:	f7fc fb5a 	bl	80001f0 <strlen>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	481c      	ldr	r0, [pc, #112]	; (8003bb4 <Get_double+0xe8>)
 8003b44:	f015 fd06 	bl	8019554 <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	81fb      	strh	r3, [r7, #14]
 8003b4e:	89fa      	ldrh	r2, [r7, #14]
 8003b50:	883b      	ldrh	r3, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3d6      	bcc.n	8003b04 <Get_double+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003b56:	2102      	movs	r1, #2
 8003b58:	4818      	ldr	r0, [pc, #96]	; (8003bbc <Get_double+0xf0>)
 8003b5a:	f015 fcfb 	bl	8019554 <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003b5e:	e01f      	b.n	8003ba0 <Get_double+0xd4>
		if(index>size-1)
 8003b60:	883a      	ldrh	r2, [r7, #0]
 8003b62:	89bb      	ldrh	r3, [r7, #12]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d808      	bhi.n	8003b7a <Get_double+0xae>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003b68:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <Get_double+0xf4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2209      	movs	r2, #9
 8003b6e:	b292      	uxth	r2, r2
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f015 fcee 	bl	8019554 <CDC_Transmit_FS>
}
 8003b78:	e012      	b.n	8003ba0 <Get_double+0xd4>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003b7a:	89bb      	ldrh	r3, [r7, #12]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	490f      	ldr	r1, [pc, #60]	; (8003bc4 <Get_double+0xf8>)
 8003b88:	480a      	ldr	r0, [pc, #40]	; (8003bb4 <Get_double+0xe8>)
 8003b8a:	f01a f959 	bl	801de40 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b8e:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <Get_double+0xe8>)
 8003b90:	f7fc fb2e 	bl	80001f0 <strlen>
 8003b94:	4603      	mov	r3, r0
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4806      	ldr	r0, [pc, #24]	; (8003bb4 <Get_double+0xe8>)
 8003b9c:	f015 fcda 	bl	8019554 <CDC_Transmit_FS>
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	08021f14 	.word	0x08021f14
 8003bac:	20000977 	.word	0x20000977
 8003bb0:	08021f44 	.word	0x08021f44
 8003bb4:	20002150 	.word	0x20002150
 8003bb8:	08021f48 	.word	0x08021f48
 8003bbc:	08021dc4 	.word	0x08021dc4
 8003bc0:	2000019c 	.word	0x2000019c
 8003bc4:	08021f4c 	.word	0x08021f4c

08003bc8 <Parser_process>:




void Parser_process(void)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
	uint16_t RES=0,i;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	80bb      	strh	r3, [r7, #4]

	if(BLE_bridge!=0)
 8003bd2:	4bb4      	ldr	r3, [pc, #720]	; (8003ea4 <Parser_process+0x2dc>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d015      	beq.n	8003c06 <Parser_process+0x3e>
	{
		if(usart1_counter!=0)
 8003bda:	4bb3      	ldr	r3, [pc, #716]	; (8003ea8 <Parser_process+0x2e0>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d011      	beq.n	8003c06 <Parser_process+0x3e>
		{
			if(rx_cmplt==0)
 8003be2:	4bb2      	ldr	r3, [pc, #712]	; (8003eac <Parser_process+0x2e4>)
 8003be4:	f993 3000 	ldrsb.w	r3, [r3]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10c      	bne.n	8003c06 <Parser_process+0x3e>
			{
				CDC_Transmit_FS((unsigned char*)usart1_data, usart1_counter);
 8003bec:	4bae      	ldr	r3, [pc, #696]	; (8003ea8 <Parser_process+0x2e0>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	48ae      	ldr	r0, [pc, #696]	; (8003eb0 <Parser_process+0x2e8>)
 8003bf6:	f015 fcad 	bl	8019554 <CDC_Transmit_FS>
				usart1_counter=0;
 8003bfa:	4bab      	ldr	r3, [pc, #684]	; (8003ea8 <Parser_process+0x2e0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
				rx_cmplt=-1;
 8003c00:	4baa      	ldr	r3, [pc, #680]	; (8003eac <Parser_process+0x2e4>)
 8003c02:	22ff      	movs	r2, #255	; 0xff
 8003c04:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(USBTimeOutRX>0)USBTimeOutRX--;
 8003c06:	4bab      	ldr	r3, [pc, #684]	; (8003eb4 <Parser_process+0x2ec>)
 8003c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dd08      	ble.n	8003c22 <Parser_process+0x5a>
 8003c10:	4ba8      	ldr	r3, [pc, #672]	; (8003eb4 <Parser_process+0x2ec>)
 8003c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	4ba5      	ldr	r3, [pc, #660]	; (8003eb4 <Parser_process+0x2ec>)
 8003c20:	801a      	strh	r2, [r3, #0]
	if(USBTimeOutRX==0)
 8003c22:	4ba4      	ldr	r3, [pc, #656]	; (8003eb4 <Parser_process+0x2ec>)
 8003c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 848e 	bne.w	800454a <Parser_process+0x982>
	{
		// Bluetooth bridge
		if(BLE_bridge!=0)
 8003c2e:	4b9d      	ldr	r3, [pc, #628]	; (8003ea4 <Parser_process+0x2dc>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d025      	beq.n	8003c82 <Parser_process+0xba>
		{
			for(i=0;i<rxcntr;i++)bluetoothbuf[i]=rx_buf[i];
 8003c36:	2300      	movs	r3, #0
 8003c38:	80fb      	strh	r3, [r7, #6]
 8003c3a:	e008      	b.n	8003c4e <Parser_process+0x86>
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	499d      	ldr	r1, [pc, #628]	; (8003eb8 <Parser_process+0x2f0>)
 8003c42:	5c89      	ldrb	r1, [r1, r2]
 8003c44:	4a9d      	ldr	r2, [pc, #628]	; (8003ebc <Parser_process+0x2f4>)
 8003c46:	54d1      	strb	r1, [r2, r3]
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	80fb      	strh	r3, [r7, #6]
 8003c4e:	4b9c      	ldr	r3, [pc, #624]	; (8003ec0 <Parser_process+0x2f8>)
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3f1      	bcc.n	8003c3c <Parser_process+0x74>
			bluetoothcntr=rxcntr;
 8003c58:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <Parser_process+0x2f8>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b99      	ldr	r3, [pc, #612]	; (8003ec4 <Parser_process+0x2fc>)
 8003c60:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)rx_buf, rxcntr, 1000);
 8003c62:	4b97      	ldr	r3, [pc, #604]	; (8003ec0 <Parser_process+0x2f8>)
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6a:	4993      	ldr	r1, [pc, #588]	; (8003eb8 <Parser_process+0x2f0>)
 8003c6c:	4896      	ldr	r0, [pc, #600]	; (8003ec8 <Parser_process+0x300>)
 8003c6e:	f00c f8e5 	bl	800fe3c <HAL_UART_Transmit>
			clear_buf();
 8003c72:	f7ff fa0f 	bl	8003094 <clear_buf>
			USBTimeOutRX=-1;
 8003c76:	4b8f      	ldr	r3, [pc, #572]	; (8003eb4 <Parser_process+0x2ec>)
 8003c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	f000 bc64 	b.w	800454a <Parser_process+0x982>
		}
		// Parser
		else
		{
			LED(0,1,0);
 8003c82:	2200      	movs	r2, #0
 8003c84:	2101      	movs	r1, #1
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fe f92a 	bl	8001ee0 <LED>
			switch(parser(0))
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7ff fb4b 	bl	8003328 <parser>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	f000 844d 	beq.w	8004538 <Parser_process+0x970>
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	f280 8432 	bge.w	800450a <Parser_process+0x942>
 8003ca6:	2b25      	cmp	r3, #37	; 0x25
 8003ca8:	dc52      	bgt.n	8003d50 <Parser_process+0x188>
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	f2c0 842d 	blt.w	800450a <Parser_process+0x942>
 8003cb0:	3b02      	subs	r3, #2
 8003cb2:	2b23      	cmp	r3, #35	; 0x23
 8003cb4:	f200 8429 	bhi.w	800450a <Parser_process+0x942>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <Parser_process+0xf8>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08004239 	.word	0x08004239
 8003cc4:	080043b5 	.word	0x080043b5
 8003cc8:	080044fd 	.word	0x080044fd
 8003ccc:	080040ad 	.word	0x080040ad
 8003cd0:	08004069 	.word	0x08004069
 8003cd4:	0800408b 	.word	0x0800408b
 8003cd8:	0800450b 	.word	0x0800450b
 8003cdc:	0800401b 	.word	0x0800401b
 8003ce0:	08004035 	.word	0x08004035
 8003ce4:	08003fab 	.word	0x08003fab
 8003ce8:	08003fd1 	.word	0x08003fd1
 8003cec:	08003fcb 	.word	0x08003fcb
 8003cf0:	08003d71 	.word	0x08003d71
 8003cf4:	08003d7f 	.word	0x08003d7f
 8003cf8:	08003dcf 	.word	0x08003dcf
 8003cfc:	08003e73 	.word	0x08003e73
 8003d00:	08003f09 	.word	0x08003f09
 8003d04:	08003f39 	.word	0x08003f39
 8003d08:	08003f3f 	.word	0x08003f3f
 8003d0c:	08003f45 	.word	0x08003f45
 8003d10:	08003f4b 	.word	0x08003f4b
 8003d14:	08003f51 	.word	0x08003f51
 8003d18:	08003f57 	.word	0x08003f57
 8003d1c:	08003f5d 	.word	0x08003f5d
 8003d20:	08003f63 	.word	0x08003f63
 8003d24:	08003f69 	.word	0x08003f69
 8003d28:	08003f6f 	.word	0x08003f6f
 8003d2c:	08003f75 	.word	0x08003f75
 8003d30:	08003f7b 	.word	0x08003f7b
 8003d34:	08003f81 	.word	0x08003f81
 8003d38:	08003f87 	.word	0x08003f87
 8003d3c:	08003f8d 	.word	0x08003f8d
 8003d40:	08003f93 	.word	0x08003f93
 8003d44:	08003f99 	.word	0x08003f99
 8003d48:	08003f9f 	.word	0x08003f9f
 8003d4c:	08003fa5 	.word	0x08003fa5
 8003d50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d54:	4293      	cmp	r3, r2
 8003d56:	f040 83d8 	bne.w	800450a <Parser_process+0x942>
			{
				case 0xFFFF: break;
				case 0xFFFE: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], (uint8_t)COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <Parser_process+0x304>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2209      	movs	r2, #9
 8003d60:	b292      	uxth	r2, r2
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f015 fbf5 	bl	8019554 <CDC_Transmit_FS>
 8003d6a:	f7ff f993 	bl	8003094 <clear_buf>
 8003d6e:	e3e4      	b.n	800453a <Parser_process+0x972>

				// Информация о модели
				case ID_CMD: CDC_Transmit_FS((unsigned char*)"METROL 110 USB", 14); clear_buf(); break;
 8003d70:	210e      	movs	r1, #14
 8003d72:	4857      	ldr	r0, [pc, #348]	; (8003ed0 <Parser_process+0x308>)
 8003d74:	f015 fbee 	bl	8019554 <CDC_Transmit_FS>
 8003d78:	f7ff f98c 	bl	8003094 <clear_buf>
 8003d7c:	e3dd      	b.n	800453a <Parser_process+0x972>
				// Получить текущее значение давления
				case A_CMD: sprintf((char*)RAM, "%f ", Pressure);
 8003d7e:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <Parser_process+0x30c>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	4954      	ldr	r1, [pc, #336]	; (8003ed8 <Parser_process+0x310>)
 8003d86:	4855      	ldr	r0, [pc, #340]	; (8003edc <Parser_process+0x314>)
 8003d88:	f01a f85a 	bl	801de40 <siprintf>
				CDC_Transmit_FS((unsigned char*)RAM, strlen((char*)RAM));
 8003d8c:	4853      	ldr	r0, [pc, #332]	; (8003edc <Parser_process+0x314>)
 8003d8e:	f7fc fa2f 	bl	80001f0 <strlen>
 8003d92:	4603      	mov	r3, r0
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	4850      	ldr	r0, [pc, #320]	; (8003edc <Parser_process+0x314>)
 8003d9a:	f015 fbdb 	bl	8019554 <CDC_Transmit_FS>
				CDC_Transmit_FS((unsigned char*)UNITS_NAME[Units], strlen(UNITS_NAME[Units]));
 8003d9e:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <Parser_process+0x318>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <Parser_process+0x31c>)
 8003da6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003daa:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <Parser_process+0x318>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <Parser_process+0x31c>)
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fa1a 	bl	80001f0 <strlen>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f015 fbc6 	bl	8019554 <CDC_Transmit_FS>
				clear_buf(); break;
 8003dc8:	f7ff f964 	bl	8003094 <clear_buf>
 8003dcc:	e3b5      	b.n	800453a <Parser_process+0x972>
				// Получить текущее значение электрического параметра
				case B_CMD:
				switch(E_fun)
 8003dce:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <Parser_process+0x320>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d024      	beq.n	8003e20 <Parser_process+0x258>
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	dc2a      	bgt.n	8003e30 <Parser_process+0x268>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <Parser_process+0x21c>
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d00f      	beq.n	8003e02 <Parser_process+0x23a>
 8003de2:	e025      	b.n	8003e30 <Parser_process+0x268>
				{
					case mA: sprintf((char*)RAM, "%f ", current_4_20mA-Current_zero); break;
 8003de4:	4b41      	ldr	r3, [pc, #260]	; (8003eec <Parser_process+0x324>)
 8003de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <Parser_process+0x328>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fa5a 	bl	80002a8 <__aeabi_dsub>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4937      	ldr	r1, [pc, #220]	; (8003ed8 <Parser_process+0x310>)
 8003dfa:	4838      	ldr	r0, [pc, #224]	; (8003edc <Parser_process+0x314>)
 8003dfc:	f01a f820 	bl	801de40 <siprintf>
 8003e00:	e016      	b.n	8003e30 <Parser_process+0x268>
					case V: sprintf((char*)RAM, "%f ", voltage_measure-Voltage_zero); break;
 8003e02:	4b3c      	ldr	r3, [pc, #240]	; (8003ef4 <Parser_process+0x32c>)
 8003e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <Parser_process+0x330>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fa4b 	bl	80002a8 <__aeabi_dsub>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4930      	ldr	r1, [pc, #192]	; (8003ed8 <Parser_process+0x310>)
 8003e18:	4830      	ldr	r0, [pc, #192]	; (8003edc <Parser_process+0x314>)
 8003e1a:	f01a f811 	bl	801de40 <siprintf>
 8003e1e:	e007      	b.n	8003e30 <Parser_process+0x268>
					case SW: sprintf((char*)RAM, "%d ", SW_state); break;
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <Parser_process+0x334>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4936      	ldr	r1, [pc, #216]	; (8003f00 <Parser_process+0x338>)
 8003e28:	482c      	ldr	r0, [pc, #176]	; (8003edc <Parser_process+0x314>)
 8003e2a:	f01a f809 	bl	801de40 <siprintf>
 8003e2e:	bf00      	nop
				}
				CDC_Transmit_FS((unsigned char*)RAM, strlen((char*)RAM));
 8003e30:	482a      	ldr	r0, [pc, #168]	; (8003edc <Parser_process+0x314>)
 8003e32:	f7fc f9dd 	bl	80001f0 <strlen>
 8003e36:	4603      	mov	r3, r0
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4827      	ldr	r0, [pc, #156]	; (8003edc <Parser_process+0x314>)
 8003e3e:	f015 fb89 	bl	8019554 <CDC_Transmit_FS>
				CDC_Transmit_FS((unsigned char*)E_UNITS_NAME[E_fun], strlen(E_UNITS_NAME[E_fun]));
 8003e42:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <Parser_process+0x320>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <Parser_process+0x33c>)
 8003e4a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <Parser_process+0x320>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <Parser_process+0x33c>)
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc f9c8 	bl	80001f0 <strlen>
 8003e60:	4603      	mov	r3, r0
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	4620      	mov	r0, r4
 8003e68:	f015 fb74 	bl	8019554 <CDC_Transmit_FS>
				clear_buf(); break;
 8003e6c:	f7ff f912 	bl	8003094 <clear_buf>
 8003e70:	e363      	b.n	800453a <Parser_process+0x972>
				// Получить наименование электрического параметра
				case FUN_CMD:
					CDC_Transmit_FS((unsigned char*)E_UNITS_NAME[E_fun], strlen(E_UNITS_NAME[E_fun]));
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <Parser_process+0x320>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <Parser_process+0x33c>)
 8003e7a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <Parser_process+0x320>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <Parser_process+0x33c>)
 8003e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc f9b0 	bl	80001f0 <strlen>
 8003e90:	4603      	mov	r3, r0
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	4620      	mov	r0, r4
 8003e98:	f015 fb5c 	bl	8019554 <CDC_Transmit_FS>
					clear_buf(); break;
 8003e9c:	f7ff f8fa 	bl	8003094 <clear_buf>
 8003ea0:	e34b      	b.n	800453a <Parser_process+0x972>
 8003ea2:	bf00      	nop
 8003ea4:	20000954 	.word	0x20000954
 8003ea8:	20000955 	.word	0x20000955
 8003eac:	20000956 	.word	0x20000956
 8003eb0:	200021d8 	.word	0x200021d8
 8003eb4:	20000234 	.word	0x20000234
 8003eb8:	20005c2c 	.word	0x20005c2c
 8003ebc:	20005bc8 	.word	0x20005bc8
 8003ec0:	2000097a 	.word	0x2000097a
 8003ec4:	20000978 	.word	0x20000978
 8003ec8:	20007b10 	.word	0x20007b10
 8003ecc:	2000019c 	.word	0x2000019c
 8003ed0:	08021f54 	.word	0x08021f54
 8003ed4:	20002360 	.word	0x20002360
 8003ed8:	08021f64 	.word	0x08021f64
 8003edc:	20002150 	.word	0x20002150
 8003ee0:	200000ba 	.word	0x200000ba
 8003ee4:	20000164 	.word	0x20000164
 8003ee8:	20000960 	.word	0x20000960
 8003eec:	20002388 	.word	0x20002388
 8003ef0:	20000940 	.word	0x20000940
 8003ef4:	20002240 	.word	0x20002240
 8003ef8:	20000938 	.word	0x20000938
 8003efc:	20000961 	.word	0x20000961
 8003f00:	08021f68 	.word	0x08021f68
 8003f04:	20000190 	.word	0x20000190
				// Текущая единица измерения
				case UNITS_CMD:
					CDC_Transmit_FS((unsigned char*)UNITS_NAME[Units], strlen(UNITS_NAME[Units]));
 8003f08:	4bae      	ldr	r3, [pc, #696]	; (80041c4 <Parser_process+0x5fc>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4bae      	ldr	r3, [pc, #696]	; (80041c8 <Parser_process+0x600>)
 8003f10:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003f14:	4bab      	ldr	r3, [pc, #684]	; (80041c4 <Parser_process+0x5fc>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4bab      	ldr	r3, [pc, #684]	; (80041c8 <Parser_process+0x600>)
 8003f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc f965 	bl	80001f0 <strlen>
 8003f26:	4603      	mov	r3, r0
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f015 fb11 	bl	8019554 <CDC_Transmit_FS>
					clear_buf(); break;
 8003f32:	f7ff f8af 	bl	8003094 <clear_buf>
 8003f36:	e300      	b.n	800453a <Parser_process+0x972>
				// Получить количество диапазонов измерения давления и значения этих диапазонов
				case RANGE_CMD:

					clear_buf(); break;
 8003f38:	f7ff f8ac 	bl	8003094 <clear_buf>
 8003f3c:	e2fd      	b.n	800453a <Parser_process+0x972>
				// Смена единицы измерения давления
				case UNITSXX_CMD: clear_buf(); break;
 8003f3e:	f7ff f8a9 	bl	8003094 <clear_buf>
 8003f42:	e2fa      	b.n	800453a <Parser_process+0x972>
				// Смена функции измерения напряжения, тока, контроля внешних контактов
				case FUNXXY_CMD: clear_buf(); break;
 8003f44:	f7ff f8a6 	bl	8003094 <clear_buf>
 8003f48:	e2f7      	b.n	800453a <Parser_process+0x972>
				// Класс точности манометра
				case ACCURACYST_CMD: clear_buf(); break;
 8003f4a:	f7ff f8a3 	bl	8003094 <clear_buf>
 8003f4e:	e2f4      	b.n	800453a <Parser_process+0x972>
				// Обнуление показаний давления
				case ZERO_CMD: clear_buf(); break;
 8003f50:	f7ff f8a0 	bl	8003094 <clear_buf>
 8003f54:	e2f1      	b.n	800453a <Parser_process+0x972>
				// Обнуление показаний напряжения
				case ZEROV_CMD: clear_buf(); break;
 8003f56:	f7ff f89d 	bl	8003094 <clear_buf>
 8003f5a:	e2ee      	b.n	800453a <Parser_process+0x972>
				// Обнуление показаний тока
				case ZEROI_CMD: clear_buf(); break;
 8003f5c:	f7ff f89a 	bl	8003094 <clear_buf>
 8003f60:	e2eb      	b.n	800453a <Parser_process+0x972>
				// Показать смещение нуля давления
				case ZEROX_CMD: clear_buf(); break;
 8003f62:	f7ff f897 	bl	8003094 <clear_buf>
 8003f66:	e2e8      	b.n	800453a <Parser_process+0x972>
				// Показать смещение нуля напряжения
				case ZEROVX_CMD: clear_buf(); break;
 8003f68:	f7ff f894 	bl	8003094 <clear_buf>
 8003f6c:	e2e5      	b.n	800453a <Parser_process+0x972>
				// Показать смещение нуля тока
				case ZEROIX_CMD: clear_buf(); break;
 8003f6e:	f7ff f891 	bl	8003094 <clear_buf>
 8003f72:	e2e2      	b.n	800453a <Parser_process+0x972>
				// Сброс на заводские настройки
				case DEFAULT_CMD: clear_buf(); break;
 8003f74:	f7ff f88e 	bl	8003094 <clear_buf>
 8003f78:	e2df      	b.n	800453a <Parser_process+0x972>
				// Нижний предел измерения давления
				case RANGEMIN_CMD: clear_buf(); break;
 8003f7a:	f7ff f88b 	bl	8003094 <clear_buf>
 8003f7e:	e2dc      	b.n	800453a <Parser_process+0x972>
				// Верхний предел измерения давления
				case RANGEMAX_CMD: clear_buf(); break;
 8003f80:	f7ff f888 	bl	8003094 <clear_buf>
 8003f84:	e2d9      	b.n	800453a <Parser_process+0x972>
				// Включение функции относительного измерения давления
				case TAREON_CMD: clear_buf(); break;
 8003f86:	f7ff f885 	bl	8003094 <clear_buf>
 8003f8a:	e2d6      	b.n	800453a <Parser_process+0x972>
				// Выключение функции относительного измерения давления
				case TAREOFF_CMD: clear_buf(); break;
 8003f8c:	f7ff f882 	bl	8003094 <clear_buf>
 8003f90:	e2d3      	b.n	800453a <Parser_process+0x972>
				// Получить значение точки отсчета давления для функции TARE
				case TAREX_CMD: clear_buf(); break;
 8003f92:	f7ff f87f 	bl	8003094 <clear_buf>
 8003f96:	e2d0      	b.n	800453a <Parser_process+0x972>
				// Получить минимальное измеренное значение давления за сеанс
				case PEAKMIN_CMD: clear_buf(); break;
 8003f98:	f7ff f87c 	bl	8003094 <clear_buf>
 8003f9c:	e2cd      	b.n	800453a <Parser_process+0x972>
				// Получить максимальное измеренное значение давления за сеанс
				case PEAKMAX_CMD: clear_buf(); break;
 8003f9e:	f7ff f879 	bl	8003094 <clear_buf>
 8003fa2:	e2ca      	b.n	800453a <Parser_process+0x972>
				// Сбросить макс. и мин. значения давления за сеанс
				case PEAKRESET_CMD: clear_buf(); break;
 8003fa4:	f7ff f876 	bl	8003094 <clear_buf>
 8003fa8:	e2c7      	b.n	800453a <Parser_process+0x972>

				case BL_BRIDGE:
					CDC_Transmit_FS((unsigned char*)"BlueTooth Bridge Enabled", 24);
 8003faa:	2118      	movs	r1, #24
 8003fac:	4887      	ldr	r0, [pc, #540]	; (80041cc <Parser_process+0x604>)
 8003fae:	f015 fad1 	bl	8019554 <CDC_Transmit_FS>
					BLE_bridge=1;
 8003fb2:	4b87      	ldr	r3, [pc, #540]	; (80041d0 <Parser_process+0x608>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
					usart1_counter=0;
 8003fb8:	4b86      	ldr	r3, [pc, #536]	; (80041d4 <Parser_process+0x60c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
					rx_cmplt=-1;
 8003fbe:	4b86      	ldr	r3, [pc, #536]	; (80041d8 <Parser_process+0x610>)
 8003fc0:	22ff      	movs	r2, #255	; 0xff
 8003fc2:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003fc4:	f7ff f866 	bl	8003094 <clear_buf>
					break;
 8003fc8:	e2b7      	b.n	800453a <Parser_process+0x972>

				case CREATE:

					clear_buf();
 8003fca:	f7ff f863 	bl	8003094 <clear_buf>
					break;
 8003fce:	e2b4      	b.n	800453a <Parser_process+0x972>

				case BL_CONFIG:
					if(BLE_config==1)BLE_config=0;
 8003fd0:	4b82      	ldr	r3, [pc, #520]	; (80041dc <Parser_process+0x614>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d103      	bne.n	8003fe0 <Parser_process+0x418>
 8003fd8:	4b80      	ldr	r3, [pc, #512]	; (80041dc <Parser_process+0x614>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e002      	b.n	8003fe6 <Parser_process+0x41e>
					else BLE_config=1;
 8003fe0:	4b7e      	ldr	r3, [pc, #504]	; (80041dc <Parser_process+0x614>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
					BLueTooth_Configuration(BLE_config);
 8003fe6:	4b7d      	ldr	r3, [pc, #500]	; (80041dc <Parser_process+0x614>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd ff22 	bl	8001e34 <BLueTooth_Configuration>
					sprintf(RAM, "BlueTooth Config = %d", BLE_config);
 8003ff0:	4b7a      	ldr	r3, [pc, #488]	; (80041dc <Parser_process+0x614>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	497a      	ldr	r1, [pc, #488]	; (80041e0 <Parser_process+0x618>)
 8003ff8:	487a      	ldr	r0, [pc, #488]	; (80041e4 <Parser_process+0x61c>)
 8003ffa:	f019 ff21 	bl	801de40 <siprintf>
					CDC_Transmit_FS((unsigned char*)RAM, 20);
 8003ffe:	2114      	movs	r1, #20
 8004000:	4878      	ldr	r0, [pc, #480]	; (80041e4 <Parser_process+0x61c>)
 8004002:	f015 faa7 	bl	8019554 <CDC_Transmit_FS>
					HAL_UART_Transmit(&huart1, (unsigned char*)RAM, 20, 1000);
 8004006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400a:	2214      	movs	r2, #20
 800400c:	4975      	ldr	r1, [pc, #468]	; (80041e4 <Parser_process+0x61c>)
 800400e:	4876      	ldr	r0, [pc, #472]	; (80041e8 <Parser_process+0x620>)
 8004010:	f00b ff14 	bl	800fe3c <HAL_UART_Transmit>
					clear_buf();
 8004014:	f7ff f83e 	bl	8003094 <clear_buf>
					break;
 8004018:	e28f      	b.n	800453a <Parser_process+0x972>

				case SELF_CAL:
					clear_buf();
 800401a:	f7ff f83b 	bl	8003094 <clear_buf>
					adc_calibration_mode=self_calibration;
 800401e:	4b73      	ldr	r3, [pc, #460]	; (80041ec <Parser_process+0x624>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
					adc_start_calibration=1;
 8004024:	4b72      	ldr	r3, [pc, #456]	; (80041f0 <Parser_process+0x628>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 800402a:	2102      	movs	r1, #2
 800402c:	4871      	ldr	r0, [pc, #452]	; (80041f4 <Parser_process+0x62c>)
 800402e:	f015 fa91 	bl	8019554 <CDC_Transmit_FS>
				break;
 8004032:	e282      	b.n	800453a <Parser_process+0x972>
				case SYS_CAL:
					RES=screen;
 8004034:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <Parser_process+0x630>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	80bb      	strh	r3, [r7, #4]
					Auto_System_Calibration();
 800403a:	f7fd f97d 	bl	8001338 <Auto_System_Calibration>
						ADC_Conversion(ADC_SPS);
 800403e:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <Parser_process+0x634>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd f882 	bl	800114c <ADC_Conversion>
						LED(0,0,0);
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	2000      	movs	r0, #0
 800404e:	f7fd ff47 	bl	8001ee0 <LED>
						screen=RES;
 8004052:	88bb      	ldrh	r3, [r7, #4]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4b68      	ldr	r3, [pc, #416]	; (80041f8 <Parser_process+0x630>)
 8004058:	701a      	strb	r2, [r3, #0]
					clear_buf();
 800405a:	f7ff f81b 	bl	8003094 <clear_buf>
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 800405e:	2102      	movs	r1, #2
 8004060:	4864      	ldr	r0, [pc, #400]	; (80041f4 <Parser_process+0x62c>)
 8004062:	f015 fa77 	bl	8019554 <CDC_Transmit_FS>
					break;
 8004066:	e268      	b.n	800453a <Parser_process+0x972>

				case CSV_ON: CSV_format=1; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV enabled", 11); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV enabled", 11, 1000); break;
 8004068:	4b65      	ldr	r3, [pc, #404]	; (8004200 <Parser_process+0x638>)
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	f7ff f811 	bl	8003094 <clear_buf>
 8004072:	210b      	movs	r1, #11
 8004074:	4863      	ldr	r0, [pc, #396]	; (8004204 <Parser_process+0x63c>)
 8004076:	f015 fa6d 	bl	8019554 <CDC_Transmit_FS>
 800407a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800407e:	220b      	movs	r2, #11
 8004080:	4960      	ldr	r1, [pc, #384]	; (8004204 <Parser_process+0x63c>)
 8004082:	4859      	ldr	r0, [pc, #356]	; (80041e8 <Parser_process+0x620>)
 8004084:	f00b feda 	bl	800fe3c <HAL_UART_Transmit>
 8004088:	e257      	b.n	800453a <Parser_process+0x972>
				case CSV_OFF: CSV_format=0; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV disabled", 12); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV disabled", 12, 1000); break;
 800408a:	4b5d      	ldr	r3, [pc, #372]	; (8004200 <Parser_process+0x638>)
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	f7ff f800 	bl	8003094 <clear_buf>
 8004094:	210c      	movs	r1, #12
 8004096:	485c      	ldr	r0, [pc, #368]	; (8004208 <Parser_process+0x640>)
 8004098:	f015 fa5c 	bl	8019554 <CDC_Transmit_FS>
 800409c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a0:	220c      	movs	r2, #12
 80040a2:	4959      	ldr	r1, [pc, #356]	; (8004208 <Parser_process+0x640>)
 80040a4:	4850      	ldr	r0, [pc, #320]	; (80041e8 <Parser_process+0x620>)
 80040a6:	f00b fec9 	bl	800fe3c <HAL_UART_Transmit>
 80040aa:	e246      	b.n	800453a <Parser_process+0x972>

				case GV:
					if(CSV_format==0)
 80040ac:	4b54      	ldr	r3, [pc, #336]	; (8004200 <Parser_process+0x638>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d142      	bne.n	800413a <Parser_process+0x572>
					{
						CDC_Transmit_FS((unsigned char*)"Available Global Variables:\n", 28);
 80040b4:	211c      	movs	r1, #28
 80040b6:	4855      	ldr	r0, [pc, #340]	; (800420c <Parser_process+0x644>)
 80040b8:	f015 fa4c 	bl	8019554 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040bc:	2300      	movs	r3, #0
 80040be:	80fb      	strh	r3, [r7, #6]
 80040c0:	e037      	b.n	8004132 <Parser_process+0x56a>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	4a52      	ldr	r2, [pc, #328]	; (8004210 <Parser_process+0x648>)
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b52      	ldr	r3, [pc, #328]	; (8004214 <Parser_process+0x64c>)
 80040cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d0:	210b      	movs	r1, #11
 80040d2:	4618      	mov	r0, r3
 80040d4:	f015 fa3e 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 80040d8:	2101      	movs	r1, #1
 80040da:	484f      	ldr	r0, [pc, #316]	; (8004218 <Parser_process+0x650>)
 80040dc:	f015 fa3a 	bl	8019554 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	4a4e      	ldr	r2, [pc, #312]	; (800421c <Parser_process+0x654>)
 80040e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040e8:	461a      	mov	r2, r3
 80040ea:	494d      	ldr	r1, [pc, #308]	; (8004220 <Parser_process+0x658>)
 80040ec:	483d      	ldr	r0, [pc, #244]	; (80041e4 <Parser_process+0x61c>)
 80040ee:	f019 fea7 	bl	801de40 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80040f2:	483c      	ldr	r0, [pc, #240]	; (80041e4 <Parser_process+0x61c>)
 80040f4:	f7fc f87c 	bl	80001f0 <strlen>
 80040f8:	4603      	mov	r3, r0
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4619      	mov	r1, r3
 80040fe:	4839      	ldr	r0, [pc, #228]	; (80041e4 <Parser_process+0x61c>)
 8004100:	f015 fa28 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 8004104:	2101      	movs	r1, #1
 8004106:	4844      	ldr	r0, [pc, #272]	; (8004218 <Parser_process+0x650>)
 8004108:	f015 fa24 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	4a45      	ldr	r2, [pc, #276]	; (8004224 <Parser_process+0x65c>)
 8004110:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	4944      	ldr	r1, [pc, #272]	; (8004228 <Parser_process+0x660>)
 8004118:	5ccb      	ldrb	r3, [r1, r3]
 800411a:	b29b      	uxth	r3, r3
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f015 fa18 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 8004124:	2101      	movs	r1, #1
 8004126:	4841      	ldr	r0, [pc, #260]	; (800422c <Parser_process+0x664>)
 8004128:	f015 fa14 	bl	8019554 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	3301      	adds	r3, #1
 8004130:	80fb      	strh	r3, [r7, #6]
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d9c4      	bls.n	80040c2 <Parser_process+0x4fa>
 8004138:	e03d      	b.n	80041b6 <Parser_process+0x5ee>
						}
					}
					else
					{
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 800413a:	2300      	movs	r3, #0
 800413c:	80fb      	strh	r3, [r7, #6]
 800413e:	e037      	b.n	80041b0 <Parser_process+0x5e8>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	4a33      	ldr	r2, [pc, #204]	; (8004210 <Parser_process+0x648>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	461a      	mov	r2, r3
 8004148:	4b32      	ldr	r3, [pc, #200]	; (8004214 <Parser_process+0x64c>)
 800414a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414e:	210b      	movs	r1, #11
 8004150:	4618      	mov	r0, r3
 8004152:	f015 f9ff 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 8004156:	2101      	movs	r1, #1
 8004158:	4835      	ldr	r0, [pc, #212]	; (8004230 <Parser_process+0x668>)
 800415a:	f015 f9fb 	bl	8019554 <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4a2e      	ldr	r2, [pc, #184]	; (800421c <Parser_process+0x654>)
 8004162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004166:	461a      	mov	r2, r3
 8004168:	492d      	ldr	r1, [pc, #180]	; (8004220 <Parser_process+0x658>)
 800416a:	481e      	ldr	r0, [pc, #120]	; (80041e4 <Parser_process+0x61c>)
 800416c:	f019 fe68 	bl	801de40 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8004170:	481c      	ldr	r0, [pc, #112]	; (80041e4 <Parser_process+0x61c>)
 8004172:	f7fc f83d 	bl	80001f0 <strlen>
 8004176:	4603      	mov	r3, r0
 8004178:	b29b      	uxth	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	4819      	ldr	r0, [pc, #100]	; (80041e4 <Parser_process+0x61c>)
 800417e:	f015 f9e9 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 8004182:	2101      	movs	r1, #1
 8004184:	482a      	ldr	r0, [pc, #168]	; (8004230 <Parser_process+0x668>)
 8004186:	f015 f9e5 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	4a25      	ldr	r2, [pc, #148]	; (8004224 <Parser_process+0x65c>)
 800418e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	4924      	ldr	r1, [pc, #144]	; (8004228 <Parser_process+0x660>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	b29b      	uxth	r3, r3
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f015 f9d9 	bl	8019554 <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 80041a2:	2101      	movs	r1, #1
 80041a4:	4821      	ldr	r0, [pc, #132]	; (800422c <Parser_process+0x664>)
 80041a6:	f015 f9d5 	bl	8019554 <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	3301      	adds	r3, #1
 80041ae:	80fb      	strh	r3, [r7, #6]
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d9c4      	bls.n	8004140 <Parser_process+0x578>
						}
					}

					CDC_Transmit_FS((unsigned char*)"\r\n", 1);
 80041b6:	2101      	movs	r1, #1
 80041b8:	481e      	ldr	r0, [pc, #120]	; (8004234 <Parser_process+0x66c>)
 80041ba:	f015 f9cb 	bl	8019554 <CDC_Transmit_FS>
					clear_buf();
 80041be:	f7fe ff69 	bl	8003094 <clear_buf>
					break;
 80041c2:	e1ba      	b.n	800453a <Parser_process+0x972>
 80041c4:	200000ba 	.word	0x200000ba
 80041c8:	20000164 	.word	0x20000164
 80041cc:	08021f6c 	.word	0x08021f6c
 80041d0:	20000954 	.word	0x20000954
 80041d4:	20000955 	.word	0x20000955
 80041d8:	20000956 	.word	0x20000956
 80041dc:	20000080 	.word	0x20000080
 80041e0:	08021f88 	.word	0x08021f88
 80041e4:	20002150 	.word	0x20002150
 80041e8:	20007b10 	.word	0x20007b10
 80041ec:	20000968 	.word	0x20000968
 80041f0:	200008dc 	.word	0x200008dc
 80041f4:	08021fa0 	.word	0x08021fa0
 80041f8:	2000004c 	.word	0x2000004c
 80041fc:	200000a3 	.word	0x200000a3
 8004200:	20000977 	.word	0x20000977
 8004204:	08021fa4 	.word	0x08021fa4
 8004208:	08021fb0 	.word	0x08021fb0
 800420c:	08021fc0 	.word	0x08021fc0
 8004210:	08023d58 	.word	0x08023d58
 8004214:	20000144 	.word	0x20000144
 8004218:	08021fe0 	.word	0x08021fe0
 800421c:	08023d6c 	.word	0x08023d6c
 8004220:	08021fe4 	.word	0x08021fe4
 8004224:	20000100 	.word	0x20000100
 8004228:	08023d44 	.word	0x08023d44
 800422c:	08021fe8 	.word	0x08021fe8
 8004230:	08021fec 	.word	0x08021fec
 8004234:	08021dc4 	.word	0x08021dc4

				case GET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 8004238:	2303      	movs	r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f872 	bl	8003328 <parser>
 8004244:	4603      	mov	r3, r0
 8004246:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 8004248:	88bb      	ldrh	r3, [r7, #4]
 800424a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800424e:	4293      	cmp	r3, r2
 8004250:	f200 80a3 	bhi.w	800439a <Parser_process+0x7d2>
					{
						switch(GV_TYPE[RES])
 8004254:	88bb      	ldrh	r3, [r7, #4]
 8004256:	4ab2      	ldr	r2, [pc, #712]	; (8004520 <Parser_process+0x958>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	2b07      	cmp	r3, #7
 800425c:	f200 8092 	bhi.w	8004384 <Parser_process+0x7bc>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <Parser_process+0x6a0>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004289 	.word	0x08004289
 800426c:	080043ad 	.word	0x080043ad
 8004270:	080042b3 	.word	0x080042b3
 8004274:	080042dd 	.word	0x080042dd
 8004278:	080043ad 	.word	0x080043ad
 800427c:	08004307 	.word	0x08004307
 8004280:	0800435b 	.word	0x0800435b
 8004284:	08004331 	.word	0x08004331
						{
							case type_INT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004288:	88bb      	ldrh	r3, [r7, #4]
 800428a:	4aa6      	ldr	r2, [pc, #664]	; (8004524 <Parser_process+0x95c>)
 800428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004290:	4618      	mov	r0, r3
 8004292:	2203      	movs	r2, #3
 8004294:	88bb      	ldrh	r3, [r7, #4]
 8004296:	49a4      	ldr	r1, [pc, #656]	; (8004528 <Parser_process+0x960>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	4413      	add	r3, r2
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3302      	adds	r3, #2
 80042a0:	b2d9      	uxtb	r1, r3
 80042a2:	88bb      	ldrh	r3, [r7, #4]
 80042a4:	4aa1      	ldr	r2, [pc, #644]	; (800452c <Parser_process+0x964>)
 80042a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7ff fa8a 	bl	80037c4 <Get_uint8>
 80042b0:	e07d      	b.n	80043ae <Parser_process+0x7e6>
							case type_INT16: break;
							case type_INT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042b2:	88bb      	ldrh	r3, [r7, #4]
 80042b4:	4a9b      	ldr	r2, [pc, #620]	; (8004524 <Parser_process+0x95c>)
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	4618      	mov	r0, r3
 80042bc:	2203      	movs	r2, #3
 80042be:	88bb      	ldrh	r3, [r7, #4]
 80042c0:	4999      	ldr	r1, [pc, #612]	; (8004528 <Parser_process+0x960>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	4413      	add	r3, r2
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3302      	adds	r3, #2
 80042ca:	b2d9      	uxtb	r1, r3
 80042cc:	88bb      	ldrh	r3, [r7, #4]
 80042ce:	4a97      	ldr	r2, [pc, #604]	; (800452c <Parser_process+0x964>)
 80042d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d4:	461a      	mov	r2, r3
 80042d6:	f7ff faf1 	bl	80038bc <Get_int32>
 80042da:	e068      	b.n	80043ae <Parser_process+0x7e6>
							case type_UINT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042dc:	88bb      	ldrh	r3, [r7, #4]
 80042de:	4a91      	ldr	r2, [pc, #580]	; (8004524 <Parser_process+0x95c>)
 80042e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e4:	4618      	mov	r0, r3
 80042e6:	2203      	movs	r2, #3
 80042e8:	88bb      	ldrh	r3, [r7, #4]
 80042ea:	498f      	ldr	r1, [pc, #572]	; (8004528 <Parser_process+0x960>)
 80042ec:	5ccb      	ldrb	r3, [r1, r3]
 80042ee:	4413      	add	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	3302      	adds	r3, #2
 80042f4:	b2d9      	uxtb	r1, r3
 80042f6:	88bb      	ldrh	r3, [r7, #4]
 80042f8:	4a8c      	ldr	r2, [pc, #560]	; (800452c <Parser_process+0x964>)
 80042fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042fe:	461a      	mov	r2, r3
 8004300:	f7ff fa60 	bl	80037c4 <Get_uint8>
 8004304:	e053      	b.n	80043ae <Parser_process+0x7e6>
							case type_UINT16: break;
							case type_UINT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004306:	88bb      	ldrh	r3, [r7, #4]
 8004308:	4a86      	ldr	r2, [pc, #536]	; (8004524 <Parser_process+0x95c>)
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	4618      	mov	r0, r3
 8004310:	2203      	movs	r2, #3
 8004312:	88bb      	ldrh	r3, [r7, #4]
 8004314:	4984      	ldr	r1, [pc, #528]	; (8004528 <Parser_process+0x960>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	4413      	add	r3, r2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	3302      	adds	r3, #2
 800431e:	b2d9      	uxtb	r1, r3
 8004320:	88bb      	ldrh	r3, [r7, #4]
 8004322:	4a82      	ldr	r2, [pc, #520]	; (800452c <Parser_process+0x964>)
 8004324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004328:	461a      	mov	r2, r3
 800432a:	f7ff fac7 	bl	80038bc <Get_int32>
 800432e:	e03e      	b.n	80043ae <Parser_process+0x7e6>
							case type_DOUBLE: Get_double((double*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004330:	88bb      	ldrh	r3, [r7, #4]
 8004332:	4a7c      	ldr	r2, [pc, #496]	; (8004524 <Parser_process+0x95c>)
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	4618      	mov	r0, r3
 800433a:	2203      	movs	r2, #3
 800433c:	88bb      	ldrh	r3, [r7, #4]
 800433e:	497a      	ldr	r1, [pc, #488]	; (8004528 <Parser_process+0x960>)
 8004340:	5ccb      	ldrb	r3, [r1, r3]
 8004342:	4413      	add	r3, r2
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3302      	adds	r3, #2
 8004348:	b2d9      	uxtb	r1, r3
 800434a:	88bb      	ldrh	r3, [r7, #4]
 800434c:	4a77      	ldr	r2, [pc, #476]	; (800452c <Parser_process+0x964>)
 800434e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004352:	461a      	mov	r2, r3
 8004354:	f7ff fbba 	bl	8003acc <Get_double>
 8004358:	e029      	b.n	80043ae <Parser_process+0x7e6>
							case type_FLOAT:  Get_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800435a:	88bb      	ldrh	r3, [r7, #4]
 800435c:	4a71      	ldr	r2, [pc, #452]	; (8004524 <Parser_process+0x95c>)
 800435e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004362:	4618      	mov	r0, r3
 8004364:	2203      	movs	r2, #3
 8004366:	88bb      	ldrh	r3, [r7, #4]
 8004368:	496f      	ldr	r1, [pc, #444]	; (8004528 <Parser_process+0x960>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	4413      	add	r3, r2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3302      	adds	r3, #2
 8004372:	b2d9      	uxtb	r1, r3
 8004374:	88bb      	ldrh	r3, [r7, #4]
 8004376:	4a6d      	ldr	r2, [pc, #436]	; (800452c <Parser_process+0x964>)
 8004378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437c:	461a      	mov	r2, r3
 800437e:	f7ff fb1b 	bl	80039b8 <Get_float>
 8004382:	e014      	b.n	80043ae <Parser_process+0x7e6>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004384:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <Parser_process+0x968>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2209      	movs	r2, #9
 800438a:	b292      	uxth	r2, r2
 800438c:	4611      	mov	r1, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f015 f8e0 	bl	8019554 <CDC_Transmit_FS>
 8004394:	f7fe fe7e 	bl	8003094 <clear_buf>
 8004398:	e009      	b.n	80043ae <Parser_process+0x7e6>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <Parser_process+0x968>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2209      	movs	r2, #9
 80043a0:	b292      	uxth	r2, r2
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f015 f8d5 	bl	8019554 <CDC_Transmit_FS>
 80043aa:	e000      	b.n	80043ae <Parser_process+0x7e6>
							case type_INT16: break;
 80043ac:	bf00      	nop
					}
					clear_buf(); break;
 80043ae:	f7fe fe71 	bl	8003094 <clear_buf>
 80043b2:	e0c2      	b.n	800453a <Parser_process+0x972>


				case SET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 80043b4:	2303      	movs	r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe ffb4 	bl	8003328 <parser>
 80043c0:	4603      	mov	r3, r0
 80043c2:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 80043c4:	88bb      	ldrh	r3, [r7, #4]
 80043c6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80043ca:	4293      	cmp	r3, r2
 80043cc:	f200 8089 	bhi.w	80044e2 <Parser_process+0x91a>
					{
						switch(GV_TYPE[RES])
 80043d0:	88bb      	ldrh	r3, [r7, #4]
 80043d2:	4a53      	ldr	r2, [pc, #332]	; (8004520 <Parser_process+0x958>)
 80043d4:	5cd3      	ldrb	r3, [r2, r3]
 80043d6:	2b07      	cmp	r3, #7
 80043d8:	d878      	bhi.n	80044cc <Parser_process+0x904>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <Parser_process+0x818>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004401 	.word	0x08004401
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004445 	.word	0x08004445
 80043ec:	08004467 	.word	0x08004467
 80043f0:	080044f5 	.word	0x080044f5
 80043f4:	08004489 	.word	0x08004489
 80043f8:	080044ab 	.word	0x080044ab
 80043fc:	080044f5 	.word	0x080044f5
						{
							case type_INT8: Set_int8((int8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004400:	88bb      	ldrh	r3, [r7, #4]
 8004402:	4a48      	ldr	r2, [pc, #288]	; (8004524 <Parser_process+0x95c>)
 8004404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004408:	4618      	mov	r0, r3
 800440a:	2203      	movs	r2, #3
 800440c:	88bb      	ldrh	r3, [r7, #4]
 800440e:	4946      	ldr	r1, [pc, #280]	; (8004528 <Parser_process+0x960>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	4413      	add	r3, r2
 8004414:	b2db      	uxtb	r3, r3
 8004416:	3302      	adds	r3, #2
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4619      	mov	r1, r3
 800441c:	f7ff f828 	bl	8003470 <Set_int8>
 8004420:	e069      	b.n	80044f6 <Parser_process+0x92e>
							case type_INT16: Set_int16((int16_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004422:	88bb      	ldrh	r3, [r7, #4]
 8004424:	4a3f      	ldr	r2, [pc, #252]	; (8004524 <Parser_process+0x95c>)
 8004426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442a:	4618      	mov	r0, r3
 800442c:	2203      	movs	r2, #3
 800442e:	88bb      	ldrh	r3, [r7, #4]
 8004430:	493d      	ldr	r1, [pc, #244]	; (8004528 <Parser_process+0x960>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	4413      	add	r3, r2
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3302      	adds	r3, #2
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4619      	mov	r1, r3
 800443e:	f7ff f86d 	bl	800351c <Set_int16>
 8004442:	e058      	b.n	80044f6 <Parser_process+0x92e>
							case type_INT32: Set_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004444:	88bb      	ldrh	r3, [r7, #4]
 8004446:	4a37      	ldr	r2, [pc, #220]	; (8004524 <Parser_process+0x95c>)
 8004448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800444c:	4618      	mov	r0, r3
 800444e:	2203      	movs	r2, #3
 8004450:	88bb      	ldrh	r3, [r7, #4]
 8004452:	4935      	ldr	r1, [pc, #212]	; (8004528 <Parser_process+0x960>)
 8004454:	5ccb      	ldrb	r3, [r1, r3]
 8004456:	4413      	add	r3, r2
 8004458:	b2db      	uxtb	r3, r3
 800445a:	3302      	adds	r3, #2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4619      	mov	r1, r3
 8004460:	f7ff f8b4 	bl	80035cc <Set_int32>
 8004464:	e047      	b.n	80044f6 <Parser_process+0x92e>
							case type_UINT8: Set_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004466:	88bb      	ldrh	r3, [r7, #4]
 8004468:	4a2e      	ldr	r2, [pc, #184]	; (8004524 <Parser_process+0x95c>)
 800446a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446e:	4618      	mov	r0, r3
 8004470:	2203      	movs	r2, #3
 8004472:	88bb      	ldrh	r3, [r7, #4]
 8004474:	492c      	ldr	r1, [pc, #176]	; (8004528 <Parser_process+0x960>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	4413      	add	r3, r2
 800447a:	b2db      	uxtb	r3, r3
 800447c:	3302      	adds	r3, #2
 800447e:	b2db      	uxtb	r3, r3
 8004480:	4619      	mov	r1, r3
 8004482:	f7fe ffa3 	bl	80033cc <Set_uint8>
 8004486:	e036      	b.n	80044f6 <Parser_process+0x92e>
							case type_UINT16: break;
							case type_UINT32: Set_uint32((uint32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004488:	88bb      	ldrh	r3, [r7, #4]
 800448a:	4a26      	ldr	r2, [pc, #152]	; (8004524 <Parser_process+0x95c>)
 800448c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004490:	4618      	mov	r0, r3
 8004492:	2203      	movs	r2, #3
 8004494:	88bb      	ldrh	r3, [r7, #4]
 8004496:	4924      	ldr	r1, [pc, #144]	; (8004528 <Parser_process+0x960>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	4413      	add	r3, r2
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3302      	adds	r3, #2
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7ff f8f4 	bl	8003690 <Set_uint32>
 80044a8:	e025      	b.n	80044f6 <Parser_process+0x92e>
							case type_DOUBLE: break;
							case type_FLOAT: Set_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80044aa:	88bb      	ldrh	r3, [r7, #4]
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <Parser_process+0x95c>)
 80044ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b2:	4618      	mov	r0, r3
 80044b4:	2203      	movs	r2, #3
 80044b6:	88bb      	ldrh	r3, [r7, #4]
 80044b8:	491b      	ldr	r1, [pc, #108]	; (8004528 <Parser_process+0x960>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	4413      	add	r3, r2
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	3302      	adds	r3, #2
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	4619      	mov	r1, r3
 80044c6:	f7ff f92b 	bl	8003720 <Set_float>
 80044ca:	e014      	b.n	80044f6 <Parser_process+0x92e>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <Parser_process+0x968>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2209      	movs	r2, #9
 80044d2:	b292      	uxth	r2, r2
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f015 f83c 	bl	8019554 <CDC_Transmit_FS>
 80044dc:	f7fe fdda 	bl	8003094 <clear_buf>
 80044e0:	e009      	b.n	80044f6 <Parser_process+0x92e>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <Parser_process+0x968>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2209      	movs	r2, #9
 80044e8:	b292      	uxth	r2, r2
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f015 f831 	bl	8019554 <CDC_Transmit_FS>
 80044f2:	e000      	b.n	80044f6 <Parser_process+0x92e>
							case type_UINT16: break;
 80044f4:	bf00      	nop
					}
					clear_buf(); break;
 80044f6:	f7fe fdcd 	bl	8003094 <clear_buf>
 80044fa:	e01e      	b.n	800453a <Parser_process+0x972>


				case SAVE_CMD:
					CDC_Transmit_FS((unsigned char*)"FLASH MEMORY IS BROKEN!!", 24);
 80044fc:	2118      	movs	r1, #24
 80044fe:	480d      	ldr	r0, [pc, #52]	; (8004534 <Parser_process+0x96c>)
 8004500:	f015 f828 	bl	8019554 <CDC_Transmit_FS>
					clear_buf(); break;
 8004504:	f7fe fdc6 	bl	8003094 <clear_buf>
 8004508:	e017      	b.n	800453a <Parser_process+0x972>

				default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <Parser_process+0x968>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2209      	movs	r2, #9
 8004510:	b292      	uxth	r2, r2
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f015 f81d 	bl	8019554 <CDC_Transmit_FS>
 800451a:	f7fe fdbb 	bl	8003094 <clear_buf>
 800451e:	e00c      	b.n	800453a <Parser_process+0x972>
 8004520:	08023d58 	.word	0x08023d58
 8004524:	200000bc 	.word	0x200000bc
 8004528:	08023d44 	.word	0x08023d44
 800452c:	08023d6c 	.word	0x08023d6c
 8004530:	2000019c 	.word	0x2000019c
 8004534:	08021ff0 	.word	0x08021ff0
				case 0xFFFF: break;
 8004538:	bf00      	nop

			}
			CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 800453a:	2102      	movs	r1, #2
 800453c:	4806      	ldr	r0, [pc, #24]	; (8004558 <Parser_process+0x990>)
 800453e:	f015 f809 	bl	8019554 <CDC_Transmit_FS>
			USBTimeOutRX=-1;
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <Parser_process+0x994>)
 8004544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004548:	801a      	strh	r2, [r3, #0]
		}
	}
	sleep(5);
 800454a:	2005      	movs	r0, #5
 800454c:	f7fe fd0a 	bl	8002f64 <sleep>
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	08021dc4 	.word	0x08021dc4
 800455c:	20000234 	.word	0x20000234

08004560 <SPI1_Send>:
w25_info_t  w25_info;


//-------------------------------------------------------------
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi3, dt, cnt, 5000);
 800456c:	887a      	ldrh	r2, [r7, #2]
 800456e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4803      	ldr	r0, [pc, #12]	; (8004584 <SPI1_Send+0x24>)
 8004576:	f009 fc60 	bl	800de3a <HAL_SPI_Transmit>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	2000644c 	.word	0x2000644c

08004588 <SPI1_Recv>:
//-------------------------------------------------------------
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi3, dt, cnt, 5000);
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	f241 3388 	movw	r3, #5000	; 0x1388
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <SPI1_Recv+0x24>)
 800459e:	f009 fdba 	bl	800e116 <HAL_SPI_Receive>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	2000644c 	.word	0x2000644c

080045b0 <W25_WriteEnable>:
//-------------------------------------------------------------

void W25_WriteEnable(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
	uint8_t command[1];
	cs_set();
 80045b6:	2200      	movs	r2, #0
 80045b8:	2104      	movs	r1, #4
 80045ba:	4809      	ldr	r0, [pc, #36]	; (80045e0 <W25_WriteEnable+0x30>)
 80045bc:	f005 fe20 	bl	800a200 <HAL_GPIO_WritePin>
	command[0]=0x06;
 80045c0:	2306      	movs	r3, #6
 80045c2:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ffc9 	bl	8004560 <SPI1_Send>
	cs_reset();
 80045ce:	2201      	movs	r2, #1
 80045d0:	2104      	movs	r1, #4
 80045d2:	4803      	ldr	r0, [pc, #12]	; (80045e0 <W25_WriteEnable+0x30>)
 80045d4:	f005 fe14 	bl	800a200 <HAL_GPIO_WritePin>
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	48000c00 	.word	0x48000c00

080045e4 <W25_Reset>:
	SPI1_Send(command, 1);
	cs_reset();
}

void W25_Reset (void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
	uint8_t command[1];
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80045ea:	bf00      	nop
 80045ec:	20c0      	movs	r0, #192	; 0xc0
 80045ee:	f000 f81d 	bl	800462c <W25_Read_Status>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d0f7      	beq.n	80045ec <W25_Reset+0x8>
	cs_set();
 80045fc:	2200      	movs	r2, #0
 80045fe:	2104      	movs	r1, #4
 8004600:	4809      	ldr	r0, [pc, #36]	; (8004628 <W25_Reset+0x44>)
 8004602:	f005 fdfd 	bl	800a200 <HAL_GPIO_WritePin>
	command[0] = W25_RESET;
 8004606:	23ff      	movs	r3, #255	; 0xff
 8004608:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ffa6 	bl	8004560 <SPI1_Send>
	cs_reset();
 8004614:	2201      	movs	r2, #1
 8004616:	2104      	movs	r1, #4
 8004618:	4803      	ldr	r0, [pc, #12]	; (8004628 <W25_Reset+0x44>)
 800461a:	f005 fdf1 	bl	800a200 <HAL_GPIO_WritePin>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	48000c00 	.word	0x48000c00

0800462c <W25_Read_Status>:
//-------------------------------------------------------------

uint8_t W25_Read_Status(uint8_t StatusRegAdd)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint8_t data[1];
	command[0] = 0x0F; 		// Read Status Register
 8004636:	230f      	movs	r3, #15
 8004638:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	737b      	strb	r3, [r7, #13]
	cs_set();
 800463e:	2200      	movs	r2, #0
 8004640:	2104      	movs	r1, #4
 8004642:	480c      	ldr	r0, [pc, #48]	; (8004674 <W25_Read_Status+0x48>)
 8004644:	f005 fddc 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ff86 	bl	8004560 <SPI1_Send>
	SPI1_Recv(data, 1);
 8004654:	f107 0308 	add.w	r3, r7, #8
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff94 	bl	8004588 <SPI1_Recv>
	cs_reset();
 8004660:	2201      	movs	r2, #1
 8004662:	2104      	movs	r1, #4
 8004664:	4803      	ldr	r0, [pc, #12]	; (8004674 <W25_Read_Status+0x48>)
 8004666:	f005 fdcb 	bl	800a200 <HAL_GPIO_WritePin>
	return data[0];
 800466a:	7a3b      	ldrb	r3, [r7, #8]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	48000c00 	.word	0x48000c00

08004678 <W25_Write_Status>:

void W25_Write_Status(uint8_t StatusRegAdd, uint8_t data)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	460a      	mov	r2, r1
 8004682:	71fb      	strb	r3, [r7, #7]
 8004684:	4613      	mov	r3, r2
 8004686:	71bb      	strb	r3, [r7, #6]
	uint8_t command[3];
	command[0] = 0x1F; 		// Write Status Register
 8004688:	231f      	movs	r3, #31
 800468a:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	737b      	strb	r3, [r7, #13]
	command[2] = data;
 8004690:	79bb      	ldrb	r3, [r7, #6]
 8004692:	73bb      	strb	r3, [r7, #14]
	cs_set();
 8004694:	2200      	movs	r2, #0
 8004696:	2104      	movs	r1, #4
 8004698:	4808      	ldr	r0, [pc, #32]	; (80046bc <W25_Write_Status+0x44>)
 800469a:	f005 fdb1 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	2103      	movs	r1, #3
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff5b 	bl	8004560 <SPI1_Send>
	cs_reset();
 80046aa:	2201      	movs	r2, #1
 80046ac:	2104      	movs	r1, #4
 80046ae:	4803      	ldr	r0, [pc, #12]	; (80046bc <W25_Write_Status+0x44>)
 80046b0:	f005 fda6 	bl	800a200 <HAL_GPIO_WritePin>
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	48000c00 	.word	0x48000c00

080046c0 <W25_Block_Erase>:


void W25_Block_Erase(uint32_t page_addr)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	uint8_t command[4];

	W25_WriteEnable();
 80046c8:	f7ff ff72 	bl	80045b0 <W25_WriteEnable>

	command[0] = 0xD8;						// Block erase
 80046cc:	23d8      	movs	r3, #216	; 0xd8
 80046ce:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;						// Dummy byte
 80046d0:	2300      	movs	r3, #0
 80046d2:	737b      	strb	r3, [r7, #13]
	command[2] = (page_addr >> 8) & 0xFF;	// Start page address
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	73bb      	strb	r3, [r7, #14]
	command[3] = page_addr & 0xFF;			// Start page address
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	73fb      	strb	r3, [r7, #15]

	cs_set();
 80046e2:	2200      	movs	r2, #0
 80046e4:	2104      	movs	r1, #4
 80046e6:	480e      	ldr	r0, [pc, #56]	; (8004720 <W25_Block_Erase+0x60>)
 80046e8:	f005 fd8a 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80046ec:	f107 030c 	add.w	r3, r7, #12
 80046f0:	2104      	movs	r1, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ff34 	bl	8004560 <SPI1_Send>
	cs_reset();
 80046f8:	2201      	movs	r2, #1
 80046fa:	2104      	movs	r1, #4
 80046fc:	4808      	ldr	r0, [pc, #32]	; (8004720 <W25_Block_Erase+0x60>)
 80046fe:	f005 fd7f 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(3)&0x01)==1);
 8004702:	bf00      	nop
 8004704:	2003      	movs	r0, #3
 8004706:	f7ff ff91 	bl	800462c <W25_Read_Status>
 800470a:	4603      	mov	r3, r0
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d0f7      	beq.n	8004704 <W25_Block_Erase+0x44>
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	48000c00 	.word	0x48000c00

08004724 <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//-------------------------------------------------------------
uint32_t W25_Read_ID(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
	uint8_t command[4];
	uint8_t dt[3];
	command[0] = W25_GET_JEDEC_ID;
 800472a:	239f      	movs	r3, #159	; 0x9f
 800472c:	713b      	strb	r3, [r7, #4]
	command[1] = 0x00;
 800472e:	2300      	movs	r3, #0
 8004730:	717b      	strb	r3, [r7, #5]
	cs_set();
 8004732:	2200      	movs	r2, #0
 8004734:	2104      	movs	r1, #4
 8004736:	480e      	ldr	r0, [pc, #56]	; (8004770 <W25_Read_ID+0x4c>)
 8004738:	f005 fd62 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	2102      	movs	r1, #2
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff0d 	bl	8004560 <SPI1_Send>
	SPI1_Recv(dt,3);
 8004746:	463b      	mov	r3, r7
 8004748:	2103      	movs	r1, #3
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff1c 	bl	8004588 <SPI1_Recv>
	cs_reset();
 8004750:	2201      	movs	r2, #1
 8004752:	2104      	movs	r1, #4
 8004754:	4806      	ldr	r0, [pc, #24]	; (8004770 <W25_Read_ID+0x4c>)
 8004756:	f005 fd53 	bl	800a200 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800475a:	783b      	ldrb	r3, [r7, #0]
 800475c:	041a      	lsls	r2, r3, #16
 800475e:	787b      	ldrb	r3, [r7, #1]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4313      	orrs	r3, r2
 8004764:	78ba      	ldrb	r2, [r7, #2]
 8004766:	4313      	orrs	r3, r2
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	48000c00 	.word	0x48000c00

08004774 <W25_ReadBuf>:


void W25_ReadBuf(uint8_t*data, uint16_t blk_addr)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t address=(blk_addr>>2)*64;
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	b29b      	uxth	r3, r3
 8004786:	019b      	lsls	r3, r3, #6
 8004788:	81fb      	strh	r3, [r7, #14]
	uint16_t column=(blk_addr&0x03)*512;
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	b29b      	uxth	r3, r3
 8004792:	025b      	lsls	r3, r3, #9
 8004794:	81bb      	strh	r3, [r7, #12]

	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004796:	bf00      	nop
 8004798:	20c0      	movs	r0, #192	; 0xc0
 800479a:	f7ff ff47 	bl	800462c <W25_Read_Status>
 800479e:	4603      	mov	r3, r0
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d0f7      	beq.n	8004798 <W25_ReadBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 80047a8:	2313      	movs	r3, #19
 80047aa:	723b      	strb	r3, [r7, #8]
	command[1] = W25_DUMMY;
 80047ac:	2300      	movs	r3, #0
 80047ae:	727b      	strb	r3, [r7, #9]
	command[2] = (address >> 8) & 0xFF;
 80047b0:	89fb      	ldrh	r3, [r7, #14]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	72bb      	strb	r3, [r7, #10]
	command[3] = address & 0xFF;
 80047ba:	89fb      	ldrh	r3, [r7, #14]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	72fb      	strb	r3, [r7, #11]
	cs_set();
 80047c0:	2200      	movs	r2, #0
 80047c2:	2104      	movs	r1, #4
 80047c4:	4822      	ldr	r0, [pc, #136]	; (8004850 <W25_ReadBuf+0xdc>)
 80047c6:	f005 fd1b 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80047ca:	f107 0308 	add.w	r3, r7, #8
 80047ce:	2104      	movs	r1, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fec5 	bl	8004560 <SPI1_Send>
	cs_reset();
 80047d6:	2201      	movs	r2, #1
 80047d8:	2104      	movs	r1, #4
 80047da:	481d      	ldr	r0, [pc, #116]	; (8004850 <W25_ReadBuf+0xdc>)
 80047dc:	f005 fd10 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047e0:	bf00      	nop
 80047e2:	20c0      	movs	r0, #192	; 0xc0
 80047e4:	f7ff ff22 	bl	800462c <W25_Read_Status>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d0f7      	beq.n	80047e2 <W25_ReadBuf+0x6e>

	// Read from buffer
	command[0] = W25_FAST_READ;
 80047f2:	230b      	movs	r3, #11
 80047f4:	723b      	strb	r3, [r7, #8]
	command[1] = (column >> 8) & 0xFF;
 80047f6:	89bb      	ldrh	r3, [r7, #12]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	727b      	strb	r3, [r7, #9]
	command[2] = column & 0xFF;
 8004800:	89bb      	ldrh	r3, [r7, #12]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	72bb      	strb	r3, [r7, #10]
	command[3] = W25_DUMMY;
 8004806:	2300      	movs	r3, #0
 8004808:	72fb      	strb	r3, [r7, #11]
	cs_set();
 800480a:	2200      	movs	r2, #0
 800480c:	2104      	movs	r1, #4
 800480e:	4810      	ldr	r0, [pc, #64]	; (8004850 <W25_ReadBuf+0xdc>)
 8004810:	f005 fcf6 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004814:	f107 0308 	add.w	r3, r7, #8
 8004818:	2104      	movs	r1, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fea0 	bl	8004560 <SPI1_Send>
	SPI1_Recv(data, 512);
 8004820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff feaf 	bl	8004588 <SPI1_Recv>
	cs_reset();
 800482a:	2201      	movs	r2, #1
 800482c:	2104      	movs	r1, #4
 800482e:	4808      	ldr	r0, [pc, #32]	; (8004850 <W25_ReadBuf+0xdc>)
 8004830:	f005 fce6 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004834:	bf00      	nop
 8004836:	20c0      	movs	r0, #192	; 0xc0
 8004838:	f7ff fef8 	bl	800462c <W25_Read_Status>
 800483c:	4603      	mov	r3, r0
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d0f7      	beq.n	8004836 <W25_ReadBuf+0xc2>
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	48000c00 	.word	0x48000c00

08004854 <W25_WriteBuf>:

void W25_WriteBuf(uint8_t*data, uint16_t blk_addr)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t i;
	uint16_t address=(blk_addr>>2)*64;
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	b29b      	uxth	r3, r3
 8004866:	019b      	lsls	r3, r3, #6
 8004868:	82bb      	strh	r3, [r7, #20]
	uint16_t column=(blk_addr&0x03)*512;
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	b29b      	uxth	r3, r3
 8004872:	025b      	lsls	r3, r3, #9
 8004874:	827b      	strh	r3, [r7, #18]

	// Прочитаем блок 2048 прежде чем стереть
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004876:	bf00      	nop
 8004878:	20c0      	movs	r0, #192	; 0xc0
 800487a:	f7ff fed7 	bl	800462c <W25_Read_Status>
 800487e:	4603      	mov	r3, r0
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d0f7      	beq.n	8004878 <W25_WriteBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 8004888:	2313      	movs	r3, #19
 800488a:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 800488c:	2300      	movs	r3, #0
 800488e:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;
 8004890:	8abb      	ldrh	r3, [r7, #20]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	b29b      	uxth	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;
 800489a:	8abb      	ldrh	r3, [r7, #20]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80048a0:	2200      	movs	r2, #0
 80048a2:	2104      	movs	r1, #4
 80048a4:	4857      	ldr	r0, [pc, #348]	; (8004a04 <W25_WriteBuf+0x1b0>)
 80048a6:	f005 fcab 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80048aa:	f107 030c 	add.w	r3, r7, #12
 80048ae:	2104      	movs	r1, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fe55 	bl	8004560 <SPI1_Send>
	cs_reset();
 80048b6:	2201      	movs	r2, #1
 80048b8:	2104      	movs	r1, #4
 80048ba:	4852      	ldr	r0, [pc, #328]	; (8004a04 <W25_WriteBuf+0x1b0>)
 80048bc:	f005 fca0 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80048c0:	bf00      	nop
 80048c2:	20c0      	movs	r0, #192	; 0xc0
 80048c4:	f7ff feb2 	bl	800462c <W25_Read_Status>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d0f7      	beq.n	80048c2 <W25_WriteBuf+0x6e>
	// Read from buffer
	command[0] = W25_FAST_READ;
 80048d2:	230b      	movs	r3, #11
 80048d4:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	73bb      	strb	r3, [r7, #14]
	command[3] = W25_DUMMY;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80048e2:	2200      	movs	r2, #0
 80048e4:	2104      	movs	r1, #4
 80048e6:	4847      	ldr	r0, [pc, #284]	; (8004a04 <W25_WriteBuf+0x1b0>)
 80048e8:	f005 fc8a 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	2104      	movs	r1, #4
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fe34 	bl	8004560 <SPI1_Send>
	SPI1_Recv(buf, 2048);
 80048f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048fc:	4842      	ldr	r0, [pc, #264]	; (8004a08 <W25_WriteBuf+0x1b4>)
 80048fe:	f7ff fe43 	bl	8004588 <SPI1_Recv>
	cs_reset();
 8004902:	2201      	movs	r2, #1
 8004904:	2104      	movs	r1, #4
 8004906:	483f      	ldr	r0, [pc, #252]	; (8004a04 <W25_WriteBuf+0x1b0>)
 8004908:	f005 fc7a 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 800490c:	bf00      	nop
 800490e:	20c0      	movs	r0, #192	; 0xc0
 8004910:	f7ff fe8c 	bl	800462c <W25_Read_Status>
 8004914:	4603      	mov	r3, r0
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d0f7      	beq.n	800490e <W25_WriteBuf+0xba>

	for(i=0;i<512;i++)buf[column+i]=data[i];
 800491e:	2300      	movs	r3, #0
 8004920:	82fb      	strh	r3, [r7, #22]
 8004922:	e00b      	b.n	800493c <W25_WriteBuf+0xe8>
 8004924:	8afb      	ldrh	r3, [r7, #22]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	441a      	add	r2, r3
 800492a:	8a79      	ldrh	r1, [r7, #18]
 800492c:	8afb      	ldrh	r3, [r7, #22]
 800492e:	440b      	add	r3, r1
 8004930:	7811      	ldrb	r1, [r2, #0]
 8004932:	4a35      	ldr	r2, [pc, #212]	; (8004a08 <W25_WriteBuf+0x1b4>)
 8004934:	54d1      	strb	r1, [r2, r3]
 8004936:	8afb      	ldrh	r3, [r7, #22]
 8004938:	3301      	adds	r3, #1
 800493a:	82fb      	strh	r3, [r7, #22]
 800493c:	8afb      	ldrh	r3, [r7, #22]
 800493e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004942:	d3ef      	bcc.n	8004924 <W25_WriteBuf+0xd0>

	//memcpy(buf[column], data, 512);

	// Сотрем блок 128кБ
	W25_Block_Erase(address);
 8004944:	8abb      	ldrh	r3, [r7, #20]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff feba 	bl	80046c0 <W25_Block_Erase>

	while ((W25_Read_Status(0xC0)&0x01)==1);
 800494c:	bf00      	nop
 800494e:	20c0      	movs	r0, #192	; 0xc0
 8004950:	f7ff fe6c 	bl	800462c <W25_Read_Status>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d0f7      	beq.n	800494e <W25_WriteBuf+0xfa>
	// Пишем в буфер
	W25_WriteEnable();
 800495e:	f7ff fe27 	bl	80045b0 <W25_WriteEnable>
	command[0] = PROGRAM_DATA_LOAD;
 8004962:	2302      	movs	r3, #2
 8004964:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	73bb      	strb	r3, [r7, #14]
	cs_set();
 800496e:	2200      	movs	r2, #0
 8004970:	2104      	movs	r1, #4
 8004972:	4824      	ldr	r0, [pc, #144]	; (8004a04 <W25_WriteBuf+0x1b0>)
 8004974:	f005 fc44 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 8004978:	f107 030c 	add.w	r3, r7, #12
 800497c:	2103      	movs	r1, #3
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fdee 	bl	8004560 <SPI1_Send>
	SPI1_Send(buf, 2048);
 8004984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004988:	481f      	ldr	r0, [pc, #124]	; (8004a08 <W25_WriteBuf+0x1b4>)
 800498a:	f7ff fde9 	bl	8004560 <SPI1_Send>
	cs_reset();
 800498e:	2201      	movs	r2, #1
 8004990:	2104      	movs	r1, #4
 8004992:	481c      	ldr	r0, [pc, #112]	; (8004a04 <W25_WriteBuf+0x1b0>)
 8004994:	f005 fc34 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004998:	bf00      	nop
 800499a:	20c0      	movs	r0, #192	; 0xc0
 800499c:	f7ff fe46 	bl	800462c <W25_Read_Status>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d0f7      	beq.n	800499a <W25_WriteBuf+0x146>

	// Переносим во внутреннюю память
	W25_WriteEnable();
 80049aa:	f7ff fe01 	bl	80045b0 <W25_WriteEnable>
	command[0] = PROGRAM_EXECUTE;
 80049ae:	2310      	movs	r3, #16
 80049b0:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80049b2:	2300      	movs	r3, #0
 80049b4:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;	// Адрес страницы
 80049b6:	8abb      	ldrh	r3, [r7, #20]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;			// Адрес страницы
 80049c0:	8abb      	ldrh	r3, [r7, #20]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80049c6:	2200      	movs	r2, #0
 80049c8:	2104      	movs	r1, #4
 80049ca:	480e      	ldr	r0, [pc, #56]	; (8004a04 <W25_WriteBuf+0x1b0>)
 80049cc:	f005 fc18 	bl	800a200 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80049d0:	f107 030c 	add.w	r3, r7, #12
 80049d4:	2104      	movs	r1, #4
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fdc2 	bl	8004560 <SPI1_Send>
	cs_reset();
 80049dc:	2201      	movs	r2, #1
 80049de:	2104      	movs	r1, #4
 80049e0:	4808      	ldr	r0, [pc, #32]	; (8004a04 <W25_WriteBuf+0x1b0>)
 80049e2:	f005 fc0d 	bl	800a200 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80049e6:	bf00      	nop
 80049e8:	20c0      	movs	r0, #192	; 0xc0
 80049ea:	f7ff fe1f 	bl	800462c <W25_Read_Status>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d0f7      	beq.n	80049e8 <W25_WriteBuf+0x194>
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	48000c00 	.word	0x48000c00
 8004a08:	200064b0 	.word	0x200064b0

08004a0c <W25_Init>:

//-------------------------------------------------------------
void W25_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8004a12:	2064      	movs	r0, #100	; 0x64
 8004a14:	f003 f90a 	bl	8007c2c <HAL_Delay>
	W25_Reset();
 8004a18:	f7ff fde4 	bl	80045e4 <W25_Reset>
	HAL_Delay(100);
 8004a1c:	2064      	movs	r0, #100	; 0x64
 8004a1e:	f003 f905 	bl	8007c2c <HAL_Delay>
	unsigned int id = W25_Read_ID();
 8004a22:	f7ff fe7f 	bl	8004724 <W25_Read_ID>
 8004a26:	6078      	str	r0, [r7, #4]

	if(id!=0xEFAA21)ERROR_REG|=(0x01<<Memory_err);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <W25_Init+0x68>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d005      	beq.n	8004a3c <W25_Init+0x30>
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <W25_Init+0x6c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	4a0f      	ldr	r2, [pc, #60]	; (8004a78 <W25_Init+0x6c>)
 8004a3a:	6013      	str	r3, [r2, #0]

	w25_info.PageSize=2048;
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <W25_Init+0x70>)
 8004a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a42:	801a      	strh	r2, [r3, #0]
	w25_info.PageCount=0xFFFF;
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <W25_Init+0x70>)
 8004a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a4a:	605a      	str	r2, [r3, #4]
	w25_info.BlockSize=w25_info.PageSize*64;
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <W25_Init+0x70>)
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	019b      	lsls	r3, r3, #6
 8004a52:	461a      	mov	r2, r3
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <W25_Init+0x70>)
 8004a56:	611a      	str	r2, [r3, #16]
	w25_info.NumKB=(w25_info.BlockSize*128)/8;
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <W25_Init+0x70>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	01db      	lsls	r3, r3, #7
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	4a06      	ldr	r2, [pc, #24]	; (8004a7c <W25_Init+0x70>)
 8004a62:	6193      	str	r3, [r2, #24]

	W25_Write_Status(0xA0, 0x00);
 8004a64:	2100      	movs	r1, #0
 8004a66:	20a0      	movs	r0, #160	; 0xa0
 8004a68:	f7ff fe06 	bl	8004678 <W25_Write_Status>
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	00efaa21 	.word	0x00efaa21
 8004a78:	20000950 	.word	0x20000950
 8004a7c:	2000642c 	.word	0x2000642c

08004a80 <Approximation_MC110>:
double Temperature_correction(double uncorrect_Pressure, double affect_temp);



void Approximation_MC110(int32_t meas_data, int32_t power_data)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	double LSB;
	double temp_diff;

	int32_t ADC_MEAS_ZERO = meas_data-zero_ADC[0];
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <Approximation_MC110+0x108>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	61fb      	str	r3, [r7, #28]

	// Считаем LSB
	LSB=0.00000000028857241176*(double)ADC_MEAS_ZERO+1.41200835380823000000;
 8004a94:	69f8      	ldr	r0, [r7, #28]
 8004a96:	f7fb fd55 	bl	8000544 <__aeabi_i2d>
 8004a9a:	a32f      	add	r3, pc, #188	; (adr r3, 8004b58 <Approximation_MC110+0xd8>)
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f7fb fdba 	bl	8000618 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	a32c      	add	r3, pc, #176	; (adr r3, 8004b60 <Approximation_MC110+0xe0>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fb fbfb 	bl	80002ac <__adddf3>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим температуру
	Temperature2=0.000128471469464*(double)power_data-420.277295988542;
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f7fb fd40 	bl	8000544 <__aeabi_i2d>
 8004ac4:	a328      	add	r3, pc, #160	; (adr r3, 8004b68 <Approximation_MC110+0xe8>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fda5 	bl	8000618 <__aeabi_dmul>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	a326      	add	r3, pc, #152	; (adr r3, 8004b70 <Approximation_MC110+0xf0>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fbe4 	bl	80002a8 <__aeabi_dsub>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4929      	ldr	r1, [pc, #164]	; (8004b8c <Approximation_MC110+0x10c>)
 8004ae6:	e9c1 2300 	strd	r2, r3, [r1]
	// Дифференциал температуры
	temp_diff=Temperature2-cal_temperature;
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <Approximation_MC110+0x10c>)
 8004aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <Approximation_MC110+0x110>)
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f7fb fbd7 	bl	80002a8 <__aeabi_dsub>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Находим термостабилизированное LSB
	LSB=LSB-(temp_diff*0.0000418240259295);
 8004b02:	a31d      	add	r3, pc, #116	; (adr r3, 8004b78 <Approximation_MC110+0xf8>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b0c:	f7fb fd84 	bl	8000618 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b18:	f7fb fbc6 	bl	80002a8 <__aeabi_dsub>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим давление
	Pressure=(LSB*(double)ADC_MEAS_ZERO)/1000000.0;
 8004b24:	69f8      	ldr	r0, [r7, #28]
 8004b26:	f7fb fd0d 	bl	8000544 <__aeabi_i2d>
 8004b2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b2e:	f7fb fd73 	bl	8000618 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	a311      	add	r3, pc, #68	; (adr r3, 8004b80 <Approximation_MC110+0x100>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fe94 	bl	800086c <__aeabi_ddiv>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4912      	ldr	r1, [pc, #72]	; (8004b94 <Approximation_MC110+0x114>)
 8004b4a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b4e:	bf00      	nop
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	9b278484 	.word	0x9b278484
 8004b5c:	3df3d49e 	.word	0x3df3d49e
 8004b60:	12548ff4 	.word	0x12548ff4
 8004b64:	3ff69796 	.word	0x3ff69796
 8004b68:	8506b9ef 	.word	0x8506b9ef
 8004b6c:	3f20d6c9 	.word	0x3f20d6c9
 8004b70:	cdeb2199 	.word	0xcdeb2199
 8004b74:	407a446f 	.word	0x407a446f
 8004b78:	96a39d76 	.word	0x96a39d76
 8004b7c:	3f05ed86 	.word	0x3f05ed86
 8004b80:	00000000 	.word	0x00000000
 8004b84:	412e8480 	.word	0x412e8480
 8004b88:	20002348 	.word	0x20002348
 8004b8c:	20000928 	.word	0x20000928
 8004b90:	20000328 	.word	0x20000328
 8004b94:	20002360 	.word	0x20002360

08004b98 <Calculate>:



void Calculate(int32_t adc_press, int32_t adc_pow)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	static double Press_old=0;
	// Считаем давлени
	Test_Pressure = Approximation_pressure(adc_press);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f85a 	bl	8004c5c <Approximation_pressure>
 8004ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8004bac:	eef0 7a60 	vmov.f32	s15, s1
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <Calculate+0xb4>)
 8004bb2:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температурный коэффициент
	Temperature_coeff_25 = Approximation_Tcoef(adc_press, adc_pow);
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f921 	bl	8004e00 <Approximation_Tcoef>
 8004bbe:	eeb0 7a40 	vmov.f32	s14, s0
 8004bc2:	eef0 7a60 	vmov.f32	s15, s1
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <Calculate+0xb8>)
 8004bc8:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температуру
	Temperature = Approximation_temperature(Temperature_coeff_25);
 8004bcc:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <Calculate+0xb8>)
 8004bce:	ed93 7b00 	vldr	d7, [r3]
 8004bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bd6:	eef0 0a67 	vmov.f32	s1, s15
 8004bda:	f000 f9db 	bl	8004f94 <Approximation_temperature>
 8004bde:	eeb0 7a40 	vmov.f32	s14, s0
 8004be2:	eef0 7a60 	vmov.f32	s15, s1
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <Calculate+0xbc>)
 8004be8:	ed83 7b00 	vstr	d7, [r3]
	// Корректируем давление по температуре
	Test_Pressure = (Temperature_correction(Test_Pressure, Temperature) + Press_old)/2.0;
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <Calculate+0xb4>)
 8004bee:	ed93 7b00 	vldr	d7, [r3]
 8004bf2:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <Calculate+0xbc>)
 8004bf4:	ed93 6b00 	vldr	d6, [r3]
 8004bf8:	eeb0 1a46 	vmov.f32	s2, s12
 8004bfc:	eef0 1a66 	vmov.f32	s3, s13
 8004c00:	eeb0 0a47 	vmov.f32	s0, s14
 8004c04:	eef0 0a67 	vmov.f32	s1, s15
 8004c08:	f000 fa80 	bl	800510c <Temperature_correction>
 8004c0c:	ec51 0b10 	vmov	r0, r1, d0
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <Calculate+0xc0>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fb49 	bl	80002ac <__adddf3>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c2a:	f7fb fe1f 	bl	800086c <__aeabi_ddiv>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4906      	ldr	r1, [pc, #24]	; (8004c4c <Calculate+0xb4>)
 8004c34:	e9c1 2300 	strd	r2, r3, [r1]
	Press_old = Test_Pressure;
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <Calculate+0xb4>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	4906      	ldr	r1, [pc, #24]	; (8004c58 <Calculate+0xc0>)
 8004c40:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20002368 	.word	0x20002368
 8004c50:	20000078 	.word	0x20000078
 8004c54:	20000948 	.word	0x20000948
 8004c58:	20000988 	.word	0x20000988

08004c5c <Approximation_pressure>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация давления
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_pressure(int32_t current_ADC_measure)
{
 8004c5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c60:	b08c      	sub	sp, #48	; 0x30
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
	double RES=0, a, b;
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004c7a:	4b5e      	ldr	r3, [pc, #376]	; (8004df4 <Approximation_pressure+0x198>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <Approximation_pressure+0x38>
 8004c82:	4b5d      	ldr	r3, [pc, #372]	; (8004df8 <Approximation_pressure+0x19c>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	441a      	add	r2, r3
 8004c8a:	4b5a      	ldr	r3, [pc, #360]	; (8004df4 <Approximation_pressure+0x198>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	e001      	b.n	8004c98 <Approximation_pressure+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if(ADC_MEAS_ZERO>ADC_measure_cal_points[i])index++;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	e00c      	b.n	8004cb8 <Approximation_pressure+0x5c>
 8004c9e:	4a56      	ldr	r2, [pc, #344]	; (8004df8 <Approximation_pressure+0x19c>)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	dd02      	ble.n	8004cb2 <Approximation_pressure+0x56>
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	3301      	adds	r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	ddef      	ble.n	8004c9e <Approximation_pressure+0x42>

	if(index==0) a = (Pressure_cal_points[index+1] - Pressure_cal_points[index]) / (double)(ADC_measure_cal_points[index+1] - ADC_measure_cal_points[index]);
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d12a      	bne.n	8004d1a <Approximation_pressure+0xbe>
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	4a4c      	ldr	r2, [pc, #304]	; (8004dfc <Approximation_pressure+0x1a0>)
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cd2:	4a4a      	ldr	r2, [pc, #296]	; (8004dfc <Approximation_pressure+0x1a0>)
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f7fb fae3 	bl	80002a8 <__aeabi_dsub>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	461d      	mov	r5, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	3301      	adds	r3, #1
 8004cee:	4a42      	ldr	r2, [pc, #264]	; (8004df8 <Approximation_pressure+0x19c>)
 8004cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cf4:	4940      	ldr	r1, [pc, #256]	; (8004df8 <Approximation_pressure+0x19c>)
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fc20 	bl	8000544 <__aeabi_i2d>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f7fb fdae 	bl	800086c <__aeabi_ddiv>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004d18:	e033      	b.n	8004d82 <Approximation_pressure+0x126>
	else a = (Pressure_cal_points[index]-Pressure_cal_points[index-1]) / ((double)ADC_measure_cal_points[index]-(double)ADC_measure_cal_points[index-1]);
 8004d1a:	4a38      	ldr	r2, [pc, #224]	; (8004dfc <Approximation_pressure+0x1a0>)
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4a34      	ldr	r2, [pc, #208]	; (8004dfc <Approximation_pressure+0x1a0>)
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4413      	add	r3, r2
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f7fb fab8 	bl	80002a8 <__aeabi_dsub>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4690      	mov	r8, r2
 8004d3e:	4699      	mov	r9, r3
 8004d40:	4a2d      	ldr	r2, [pc, #180]	; (8004df8 <Approximation_pressure+0x19c>)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fb fbfb 	bl	8000544 <__aeabi_i2d>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3b01      	subs	r3, #1
 8004d56:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <Approximation_pressure+0x19c>)
 8004d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fbf1 	bl	8000544 <__aeabi_i2d>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7fb fa9d 	bl	80002a8 <__aeabi_dsub>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f7fb fd79 	bl	800086c <__aeabi_ddiv>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	b = (double)Pressure_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <Approximation_pressure+0x1a0>)
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d8e:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <Approximation_pressure+0x19c>)
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb fbd4 	bl	8000544 <__aeabi_i2d>
 8004d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004da0:	f7fb fc3a 	bl	8000618 <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb fa7c 	bl	80002a8 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004db8:	6a38      	ldr	r0, [r7, #32]
 8004dba:	f7fb fbc3 	bl	8000544 <__aeabi_i2d>
 8004dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc2:	f7fb fc29 	bl	8000618 <__aeabi_dmul>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dce:	f7fb fa6d 	bl	80002ac <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004dda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dde:	ec43 2b17 	vmov	d7, r2, r3
}
 8004de2:	eeb0 0a47 	vmov.f32	s0, s14
 8004de6:	eef0 0a67 	vmov.f32	s1, s15
 8004dea:	3730      	adds	r7, #48	; 0x30
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004df2:	bf00      	nop
 8004df4:	20002348 	.word	0x20002348
 8004df8:	20000290 	.word	0x20000290
 8004dfc:	20000238 	.word	0x20000238

08004e00 <Approximation_Tcoef>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температурного коэффициента
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_Tcoef(int32_t current_ADC_measure, int32_t current_ADC_power)
{
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	double RES = 0, a, b;
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004e1e:	4b5a      	ldr	r3, [pc, #360]	; (8004f88 <Approximation_Tcoef+0x188>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <Approximation_Tcoef+0x38>
 8004e26:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	4b56      	ldr	r3, [pc, #344]	; (8004f88 <Approximation_Tcoef+0x188>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	e001      	b.n	8004e3c <Approximation_Tcoef+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if (ADC_MEAS_ZERO > ADC_measure_cal_points[i]) index++;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	e00c      	b.n	8004e5c <Approximation_Tcoef+0x5c>
 8004e42:	4a52      	ldr	r2, [pc, #328]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	dd02      	ble.n	8004e56 <Approximation_Tcoef+0x56>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	3301      	adds	r3, #1
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	ddef      	ble.n	8004e42 <Approximation_Tcoef+0x42>

	if (index == 0) a = (double)(ADC_power_cal_points[index + 1] - ADC_power_cal_points[index]) / (double)(ADC_measure_cal_points[index + 1] - ADC_measure_cal_points[index]);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d126      	bne.n	8004eb6 <Approximation_Tcoef+0xb6>
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	4a48      	ldr	r2, [pc, #288]	; (8004f90 <Approximation_Tcoef+0x190>)
 8004e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e72:	4947      	ldr	r1, [pc, #284]	; (8004f90 <Approximation_Tcoef+0x190>)
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb61 	bl	8000544 <__aeabi_i2d>
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	3301      	adds	r3, #1
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e90:	493e      	ldr	r1, [pc, #248]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb fb52 	bl	8000544 <__aeabi_i2d>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f7fb fce0 	bl	800086c <__aeabi_ddiv>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004eb4:	e025      	b.n	8004f02 <Approximation_Tcoef+0x102>
	else a = (double)(ADC_power_cal_points[index] - ADC_power_cal_points[index - 1]) / (double)(ADC_measure_cal_points[index] - ADC_measure_cal_points[index - 1]);
 8004eb6:	4a36      	ldr	r2, [pc, #216]	; (8004f90 <Approximation_Tcoef+0x190>)
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4933      	ldr	r1, [pc, #204]	; (8004f90 <Approximation_Tcoef+0x190>)
 8004ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fb3a 	bl	8000544 <__aeabi_i2d>
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	492a      	ldr	r1, [pc, #168]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004ee2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb2b 	bl	8000544 <__aeabi_i2d>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f7fb fcb9 	bl	800086c <__aeabi_ddiv>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	b = (double)ADC_power_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004f02:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <Approximation_Tcoef+0x190>)
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fb1a 	bl	8000544 <__aeabi_i2d>
 8004f10:	4604      	mov	r4, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <Approximation_Tcoef+0x18c>)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb fb11 	bl	8000544 <__aeabi_i2d>
 8004f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f26:	f7fb fb77 	bl	8000618 <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f7fb f9b9 	bl	80002a8 <__aeabi_dsub>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004f3e:	6a38      	ldr	r0, [r7, #32]
 8004f40:	f7fb fb00 	bl	8000544 <__aeabi_i2d>
 8004f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f48:	f7fb fb66 	bl	8000618 <__aeabi_dmul>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f54:	f7fb f9aa 	bl	80002ac <__adddf3>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES/current_ADC_power;
 8004f60:	6838      	ldr	r0, [r7, #0]
 8004f62:	f7fb faef 	bl	8000544 <__aeabi_i2d>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f6e:	f7fb fc7d 	bl	800086c <__aeabi_ddiv>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f7e:	eef0 0a67 	vmov.f32	s1, s15
 8004f82:	3730      	adds	r7, #48	; 0x30
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bdb0      	pop	{r4, r5, r7, pc}
 8004f88:	20002348 	.word	0x20002348
 8004f8c:	20000290 	.word	0x20000290
 8004f90:	200002bc 	.word	0x200002bc

08004f94 <Approximation_temperature>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температуры
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_temperature(double T_coef)
{
 8004f94:	b5b0      	push	{r4, r5, r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	ed87 0b00 	vstr	d0, [r7]
	double RES = 0, a, b;
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < (num_of_temperature_cal_points-1); i++) if (T_coef > T_coef_cal[i]) index++;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e012      	b.n	8004fda <Approximation_temperature+0x46>
 8004fb4:	4a53      	ldr	r2, [pc, #332]	; (8005104 <Approximation_temperature+0x170>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc4:	f7fb fdb8 	bl	8000b38 <__aeabi_dcmpgt>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <Approximation_temperature+0x40>
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	dde9      	ble.n	8004fb4 <Approximation_temperature+0x20>

	if (index == 0) a = (double)(Temperature_cal_points[index + 1] - Temperature_cal_points[index]) / (double)(T_coef_cal[index + 1] - T_coef_cal[index]);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d12c      	bne.n	8005040 <Approximation_temperature+0xac>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	4a47      	ldr	r2, [pc, #284]	; (8005108 <Approximation_temperature+0x174>)
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ff4:	4a44      	ldr	r2, [pc, #272]	; (8005108 <Approximation_temperature+0x174>)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f952 	bl	80002a8 <__aeabi_dsub>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	3301      	adds	r3, #1
 8005010:	4a3c      	ldr	r2, [pc, #240]	; (8005104 <Approximation_temperature+0x170>)
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800501a:	4a3a      	ldr	r2, [pc, #232]	; (8005104 <Approximation_temperature+0x170>)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb f93f 	bl	80002a8 <__aeabi_dsub>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb fc1b 	bl	800086c <__aeabi_ddiv>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800503e:	e02b      	b.n	8005098 <Approximation_temperature+0x104>
	else a = (double)(Temperature_cal_points[index] - Temperature_cal_points[index - 1]) / (double)(T_coef_cal[index] - T_coef_cal[index - 1]);
 8005040:	4a31      	ldr	r2, [pc, #196]	; (8005108 <Approximation_temperature+0x174>)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3b01      	subs	r3, #1
 8005050:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <Approximation_temperature+0x174>)
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f7fb f925 	bl	80002a8 <__aeabi_dsub>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4614      	mov	r4, r2
 8005064:	461d      	mov	r5, r3
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <Approximation_temperature+0x170>)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3b01      	subs	r3, #1
 8005076:	4a23      	ldr	r2, [pc, #140]	; (8005104 <Approximation_temperature+0x170>)
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb f912 	bl	80002a8 <__aeabi_dsub>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4620      	mov	r0, r4
 800508a:	4629      	mov	r1, r5
 800508c:	f7fb fbee 	bl	800086c <__aeabi_ddiv>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = (double)Temperature_cal_points[index] - (double)T_coef_cal[index] * a;
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <Approximation_temperature+0x174>)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050a4:	4a17      	ldr	r2, [pc, #92]	; (8005104 <Approximation_temperature+0x170>)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4413      	add	r3, r2
 80050ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050b4:	f7fb fab0 	bl	8000618 <__aeabi_dmul>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4620      	mov	r0, r4
 80050be:	4629      	mov	r1, r5
 80050c0:	f7fb f8f2 	bl	80002a8 <__aeabi_dsub>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * T_coef;
 80050cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050d4:	f7fb faa0 	bl	8000618 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050e0:	f7fb f8e4 	bl	80002ac <__adddf3>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 80050ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80050f4:	eeb0 0a47 	vmov.f32	s0, s14
 80050f8:	eef0 0a67 	vmov.f32	s1, s15
 80050fc:	3728      	adds	r7, #40	; 0x28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bdb0      	pop	{r4, r5, r7, pc}
 8005102:	bf00      	nop
 8005104:	200002e8 	.word	0x200002e8
 8005108:	20000308 	.word	0x20000308

0800510c <Temperature_correction>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Коррекция давления по температуре
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Temperature_correction(double uncorrect_Pressure, double affect_temp)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	ed87 0b02 	vstr	d0, [r7, #8]
 8005116:	ed87 1b00 	vstr	d1, [r7]
	return (uncorrect_Pressure + (cal_temperature - affect_temp) * affect);
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <Temperature_correction+0x54>)
 800511c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005124:	f7fb f8c0 	bl	80002a8 <__aeabi_dsub>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <Temperature_correction+0x58>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb fa6f 	bl	8000618 <__aeabi_dmul>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005146:	f7fb f8b1 	bl	80002ac <__adddf3>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005152:	eeb0 0a47 	vmov.f32	s0, s14
 8005156:	eef0 0a67 	vmov.f32	s1, s15
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000328 	.word	0x20000328
 8005164:	20000980 	.word	0x20000980

08005168 <calculate_current>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Расчет тока и напряжения, формулы Тимура
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double calculate_current(double data)
{
 8005168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_current = -0.0000741921796439735;
	//b_current = 9.9684133071094100000;
	//c_current = 0.0080740815705555100;
	RES = (-b_current+(sqrt((b_current*b_current)-(4*a_current*(c_current-data)))))/(2*a_current);
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <calculate_current+0xc8>)
 8005176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <calculate_current+0xc8>)
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f7fb fa4a 	bl	8000618 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4b29      	ldr	r3, [pc, #164]	; (8005234 <calculate_current+0xcc>)
 800518e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	4b28      	ldr	r3, [pc, #160]	; (8005238 <calculate_current+0xd0>)
 8005198:	f7fb fa3e 	bl	8000618 <__aeabi_dmul>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4690      	mov	r8, r2
 80051a2:	4699      	mov	r9, r3
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <calculate_current+0xd4>)
 80051a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ae:	f7fb f87b 	bl	80002a8 <__aeabi_dsub>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb fa2d 	bl	8000618 <__aeabi_dmul>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4620      	mov	r0, r4
 80051c4:	4629      	mov	r1, r5
 80051c6:	f7fb f86f 	bl	80002a8 <__aeabi_dsub>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	ec43 2b17 	vmov	d7, r2, r3
 80051d2:	eeb0 0a47 	vmov.f32	s0, s14
 80051d6:	eef0 0a67 	vmov.f32	s1, s15
 80051da:	f01c fbe9 	bl	80219b0 <sqrt>
 80051de:	ec51 0b10 	vmov	r0, r1, d0
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <calculate_current+0xc8>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fb f85e 	bl	80002a8 <__aeabi_dsub>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4614      	mov	r4, r2
 80051f2:	461d      	mov	r5, r3
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <calculate_current+0xcc>)
 80051f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	f7fb f855 	bl	80002ac <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fb fb2f 	bl	800086c <__aeabi_ddiv>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 8005216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800521a:	ec43 2b17 	vmov	d7, r2, r3
}
 800521e:	eeb0 0a47 	vmov.f32	s0, s14
 8005222:	eef0 0a67 	vmov.f32	s1, s15
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800522e:	bf00      	nop
 8005230:	20006cd8 	.word	0x20006cd8
 8005234:	20006cc0 	.word	0x20006cc0
 8005238:	40100000 	.word	0x40100000
 800523c:	20006cb8 	.word	0x20006cb8

08005240 <calculate_voltage>:

double calculate_voltage(double data)
{
 8005240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_voltage = 0.0000160989032721161;
	//b_voltage = 9.6660275246403800000;
	//c_voltage = 0.0066157945677234600;
	RES = (-b_voltage+(sqrt((b_voltage*b_voltage)-(4*a_voltage*(c_voltage-data)))))/(2*a_voltage);
 800524c:	4b2e      	ldr	r3, [pc, #184]	; (8005308 <calculate_voltage+0xc8>)
 800524e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <calculate_voltage+0xc8>)
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f7fb f9de 	bl	8000618 <__aeabi_dmul>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4614      	mov	r4, r2
 8005262:	461d      	mov	r5, r3
 8005264:	4b29      	ldr	r3, [pc, #164]	; (800530c <calculate_voltage+0xcc>)
 8005266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	4b28      	ldr	r3, [pc, #160]	; (8005310 <calculate_voltage+0xd0>)
 8005270:	f7fb f9d2 	bl	8000618 <__aeabi_dmul>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4690      	mov	r8, r2
 800527a:	4699      	mov	r9, r3
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <calculate_voltage+0xd4>)
 800527e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005286:	f7fb f80f 	bl	80002a8 <__aeabi_dsub>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f7fb f9c1 	bl	8000618 <__aeabi_dmul>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f7fb f803 	bl	80002a8 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	ec43 2b17 	vmov	d7, r2, r3
 80052aa:	eeb0 0a47 	vmov.f32	s0, s14
 80052ae:	eef0 0a67 	vmov.f32	s1, s15
 80052b2:	f01c fb7d 	bl	80219b0 <sqrt>
 80052b6:	ec51 0b10 	vmov	r0, r1, d0
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <calculate_voltage+0xc8>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fa fff2 	bl	80002a8 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	461d      	mov	r5, r3
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <calculate_voltage+0xcc>)
 80052ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	f7fa ffe9 	bl	80002ac <__adddf3>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fb fac3 	bl	800086c <__aeabi_ddiv>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 80052ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052f6:	eeb0 0a47 	vmov.f32	s0, s14
 80052fa:	eef0 0a67 	vmov.f32	s1, s15
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005306:	bf00      	nop
 8005308:	20006cb0 	.word	0x20006cb0
 800530c:	20006cc8 	.word	0x20006cc8
 8005310:	40100000 	.word	0x40100000
 8005314:	20006cd0 	.word	0x20006cd0

08005318 <Logging_init>:
	[RefVoltage_tag]=10,
	[AutoGainCoef_period_tag]=19,
};

void Logging_init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
	disk_initialize(W25FatFs.drv);
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <Logging_init+0x14>)
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	4618      	mov	r0, r3
 8005322:	f00c ffa3 	bl	801226c <disk_initialize>
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	200076e0 	.word	0x200076e0

08005330 <Create_File>:



void Create_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	461a      	mov	r2, r3
 800533c:	460b      	mov	r3, r1
 800533e:	72fb      	strb	r3, [r7, #11]
 8005340:	4613      	mov	r3, r2
 8005342:	813b      	strh	r3, [r7, #8]
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005344:	2200      	movs	r2, #0
 8005346:	490b      	ldr	r1, [pc, #44]	; (8005374 <Create_File+0x44>)
 8005348:	480b      	ldr	r0, [pc, #44]	; (8005378 <Create_File+0x48>)
 800534a:	f00e fcb3 	bl	8013cb4 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_WRITE|FA_CREATE_ALWAYS);
 800534e:	220a      	movs	r2, #10
 8005350:	68f9      	ldr	r1, [r7, #12]
 8005352:	480a      	ldr	r0, [pc, #40]	; (800537c <Create_File+0x4c>)
 8005354:	f00e fcf4 	bl	8013d40 <f_open>
	f_write(&MyFile, FileText, FileSize, &testBytes);
 8005358:	893a      	ldrh	r2, [r7, #8]
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <Create_File+0x50>)
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4807      	ldr	r0, [pc, #28]	; (800537c <Create_File+0x4c>)
 8005360:	f00e ffeb 	bl	801433a <f_write>
	f_close(&MyFile);
 8005364:	4805      	ldr	r0, [pc, #20]	; (800537c <Create_File+0x4c>)
 8005366:	f00f f9db 	bl	8014720 <f_close>
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20008814 	.word	0x20008814
 8005378:	200076e0 	.word	0x200076e0
 800537c:	200074b0 	.word	0x200074b0
 8005380:	20007910 	.word	0x20007910

08005384 <Read_File>:



uint8_t Read_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	461a      	mov	r2, r3
 8005390:	460b      	mov	r3, r1
 8005392:	72fb      	strb	r3, [r7, #11]
 8005394:	4613      	mov	r3, r2
 8005396:	813b      	strh	r3, [r7, #8]
	uint8_t RES;
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005398:	2200      	movs	r2, #0
 800539a:	490c      	ldr	r1, [pc, #48]	; (80053cc <Read_File+0x48>)
 800539c:	480c      	ldr	r0, [pc, #48]	; (80053d0 <Read_File+0x4c>)
 800539e:	f00e fc89 	bl	8013cb4 <f_mount>
	f_open(&MyFile, (char*)FileName, FA_READ|FA_OPEN_ALWAYS);
 80053a2:	2211      	movs	r2, #17
 80053a4:	68f9      	ldr	r1, [r7, #12]
 80053a6:	480b      	ldr	r0, [pc, #44]	; (80053d4 <Read_File+0x50>)
 80053a8:	f00e fcca 	bl	8013d40 <f_open>
	RES=f_read(&MyFile, FileText, FileSize, &testBytes);
 80053ac:	893a      	ldrh	r2, [r7, #8]
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <Read_File+0x54>)
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4808      	ldr	r0, [pc, #32]	; (80053d4 <Read_File+0x50>)
 80053b4:	f00e fe82 	bl	80140bc <f_read>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
	f_close(&MyFile);
 80053bc:	4805      	ldr	r0, [pc, #20]	; (80053d4 <Read_File+0x50>)
 80053be:	f00f f9af 	bl	8014720 <f_close>
	return RES;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20008814 	.word	0x20008814
 80053d0:	200076e0 	.word	0x200076e0
 80053d4:	200074b0 	.word	0x200074b0
 80053d8:	20007910 	.word	0x20007910

080053dc <FileParser>:

uint16_t FileParser(uint8_t tag)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	81fb      	strh	r3, [r7, #14]
	uint16_t RES=0, Sym_cntr=0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	81bb      	strh	r3, [r7, #12]
 80053ee:	2300      	movs	r3, #0
 80053f0:	817b      	strh	r3, [r7, #10]

	for(i=0;i<file_size;i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	81fb      	strh	r3, [r7, #14]
 80053f6:	e042      	b.n	800547e <FileParser+0xa2>
	{
		if(ReadFileBuf[i]==TAG_STRING[tag][Sym_cntr])
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	4a26      	ldr	r2, [pc, #152]	; (8005494 <FileParser+0xb8>)
 80053fc:	5cd2      	ldrb	r2, [r2, r3]
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	4925      	ldr	r1, [pc, #148]	; (8005498 <FileParser+0xbc>)
 8005402:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	440b      	add	r3, r1
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d133      	bne.n	8005478 <FileParser+0x9c>
		{
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005410:	e013      	b.n	800543a <FileParser+0x5e>
			{
				if(ReadFileBuf[i+Sym_cntr]==TAG_STRING[tag][Sym_cntr])
 8005412:	89fa      	ldrh	r2, [r7, #14]
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	4413      	add	r3, r2
 8005418:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <FileParser+0xb8>)
 800541a:	5cd2      	ldrb	r2, [r2, r3]
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	491e      	ldr	r1, [pc, #120]	; (8005498 <FileParser+0xbc>)
 8005420:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005424:	897b      	ldrh	r3, [r7, #10]
 8005426:	440b      	add	r3, r1
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d102      	bne.n	8005434 <FileParser+0x58>
				{RES++;}
 800542e:	89bb      	ldrh	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	81bb      	strh	r3, [r7, #12]
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005434:	897b      	ldrh	r3, [r7, #10]
 8005436:	3301      	adds	r3, #1
 8005438:	817b      	strh	r3, [r7, #10]
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	4a17      	ldr	r2, [pc, #92]	; (800549c <FileParser+0xc0>)
 800543e:	5cd3      	ldrb	r3, [r2, r3]
 8005440:	b29b      	uxth	r3, r3
 8005442:	897a      	ldrh	r2, [r7, #10]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3e4      	bcc.n	8005412 <FileParser+0x36>
			}
			if(RES==TAG_NUM_OF_SYM[tag])
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	4a14      	ldr	r2, [pc, #80]	; (800549c <FileParser+0xc0>)
 800544c:	5cd3      	ldrb	r3, [r2, r3]
 800544e:	b29b      	uxth	r3, r3
 8005450:	89ba      	ldrh	r2, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d10c      	bne.n	8005470 <FileParser+0x94>
			{RES=i+TAG_NUM_OF_SYM[tag]+1; i=file_size;}
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	4a10      	ldr	r2, [pc, #64]	; (800549c <FileParser+0xc0>)
 800545a:	5cd3      	ldrb	r3, [r2, r3]
 800545c:	b29a      	uxth	r2, r3
 800545e:	89fb      	ldrh	r3, [r7, #14]
 8005460:	4413      	add	r3, r2
 8005462:	b29b      	uxth	r3, r3
 8005464:	3301      	adds	r3, #1
 8005466:	81bb      	strh	r3, [r7, #12]
 8005468:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800546c:	81fb      	strh	r3, [r7, #14]
 800546e:	e003      	b.n	8005478 <FileParser+0x9c>
			else {RES=Sym_cntr=0;}
 8005470:	2300      	movs	r3, #0
 8005472:	817b      	strh	r3, [r7, #10]
 8005474:	897b      	ldrh	r3, [r7, #10]
 8005476:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<file_size;i++)
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	3301      	adds	r3, #1
 800547c:	81fb      	strh	r3, [r7, #14]
 800547e:	89fb      	ldrh	r3, [r7, #14]
 8005480:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005484:	d3b8      	bcc.n	80053f8 <FileParser+0x1c>
		}
	}

	return RES;
 8005486:	89bb      	ldrh	r3, [r7, #12]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20006ce0 	.word	0x20006ce0
 8005498:	20000330 	.word	0x20000330
 800549c:	08023db8 	.word	0x08023db8

080054a0 <scan_double>:
	}
}


double scan_double(uint16_t offset, uint8_t *buff)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b088      	sub	sp, #32
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	6039      	str	r1, [r7, #0]
 80054ac:	80fb      	strh	r3, [r7, #6]
	uint64_t res64=0;
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i=0, point=0, sign=0, after_size=0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	82fb      	strh	r3, [r7, #22]
 80054be:	2300      	movs	r3, #0
 80054c0:	82bb      	strh	r3, [r7, #20]
 80054c2:	2300      	movs	r3, #0
 80054c4:	827b      	strh	r3, [r7, #18]
 80054c6:	2300      	movs	r3, #0
 80054c8:	823b      	strh	r3, [r7, #16]
	double RES=0;
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(buff[offset]=='-')sign=1;
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	4413      	add	r3, r2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b2d      	cmp	r3, #45	; 0x2d
 80054e0:	d101      	bne.n	80054e6 <scan_double+0x46>
 80054e2:	2301      	movs	r3, #1
 80054e4:	827b      	strh	r3, [r7, #18]

	// Find point
	for(i=0;i<30;i++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	82fb      	strh	r3, [r7, #22]
 80054ea:	e034      	b.n	8005556 <scan_double+0xb6>
	{
		if((buff[i+sign+offset]==',')||(buff[i+sign+offset]=='.')) point=i;
 80054ec:	8afa      	ldrh	r2, [r7, #22]
 80054ee:	8a7b      	ldrh	r3, [r7, #18]
 80054f0:	441a      	add	r2, r3
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4413      	add	r3, r2
 80054f6:	461a      	mov	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b2c      	cmp	r3, #44	; 0x2c
 8005500:	d00a      	beq.n	8005518 <scan_double+0x78>
 8005502:	8afa      	ldrh	r2, [r7, #22]
 8005504:	8a7b      	ldrh	r3, [r7, #18]
 8005506:	441a      	add	r2, r3
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	4413      	add	r3, r2
 800550c:	461a      	mov	r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b2e      	cmp	r3, #46	; 0x2e
 8005516:	d101      	bne.n	800551c <scan_double+0x7c>
 8005518:	8afb      	ldrh	r3, [r7, #22]
 800551a:	82bb      	strh	r3, [r7, #20]
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) {after_size=i; i=30;}
 800551c:	8afa      	ldrh	r2, [r7, #22]
 800551e:	8a7b      	ldrh	r3, [r7, #18]
 8005520:	441a      	add	r2, r3
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	4413      	add	r3, r2
 8005526:	461a      	mov	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b0d      	cmp	r3, #13
 8005530:	d00a      	beq.n	8005548 <scan_double+0xa8>
 8005532:	8afa      	ldrh	r2, [r7, #22]
 8005534:	8a7b      	ldrh	r3, [r7, #18]
 8005536:	441a      	add	r2, r3
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	4413      	add	r3, r2
 800553c:	461a      	mov	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	4413      	add	r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b0a      	cmp	r3, #10
 8005546:	d103      	bne.n	8005550 <scan_double+0xb0>
 8005548:	8afb      	ldrh	r3, [r7, #22]
 800554a:	823b      	strh	r3, [r7, #16]
 800554c:	231e      	movs	r3, #30
 800554e:	82fb      	strh	r3, [r7, #22]
	for(i=0;i<30;i++)
 8005550:	8afb      	ldrh	r3, [r7, #22]
 8005552:	3301      	adds	r3, #1
 8005554:	82fb      	strh	r3, [r7, #22]
 8005556:	8afb      	ldrh	r3, [r7, #22]
 8005558:	2b1d      	cmp	r3, #29
 800555a:	d9c7      	bls.n	80054ec <scan_double+0x4c>
	}

	if(after_size>19)after_size=19;
 800555c:	8a3b      	ldrh	r3, [r7, #16]
 800555e:	2b13      	cmp	r3, #19
 8005560:	d901      	bls.n	8005566 <scan_double+0xc6>
 8005562:	2313      	movs	r3, #19
 8005564:	823b      	strh	r3, [r7, #16]
	for(i=0;i<after_size;i++)
 8005566:	2300      	movs	r3, #0
 8005568:	82fb      	strh	r3, [r7, #22]
 800556a:	e04d      	b.n	8005608 <scan_double+0x168>
	{
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) break;
 800556c:	8afa      	ldrh	r2, [r7, #22]
 800556e:	8a7b      	ldrh	r3, [r7, #18]
 8005570:	441a      	add	r2, r3
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	4413      	add	r3, r2
 8005576:	461a      	mov	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4413      	add	r3, r2
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b0d      	cmp	r3, #13
 8005580:	d046      	beq.n	8005610 <scan_double+0x170>
 8005582:	8afa      	ldrh	r2, [r7, #22]
 8005584:	8a7b      	ldrh	r3, [r7, #18]
 8005586:	441a      	add	r2, r3
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	4413      	add	r3, r2
 800558c:	461a      	mov	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b0a      	cmp	r3, #10
 8005596:	d03b      	beq.n	8005610 <scan_double+0x170>
		if((i!=point)||(point==0))
 8005598:	8afa      	ldrh	r2, [r7, #22]
 800559a:	8abb      	ldrh	r3, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	d102      	bne.n	80055a6 <scan_double+0x106>
 80055a0:	8abb      	ldrh	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d12d      	bne.n	8005602 <scan_double+0x162>
		{
			res64*=10;
 80055a6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80055bc:	0090      	lsls	r0, r2, #2
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	1912      	adds	r2, r2, r4
 80055c4:	eb45 0303 	adc.w	r3, r5, r3
 80055c8:	eb12 0a02 	adds.w	sl, r2, r2
 80055cc:	eb43 0b03 	adc.w	fp, r3, r3
 80055d0:	4652      	mov	r2, sl
 80055d2:	465b      	mov	r3, fp
 80055d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			res64+=buff[i+sign+offset]-48;
 80055d8:	8afa      	ldrh	r2, [r7, #22]
 80055da:	8a7b      	ldrh	r3, [r7, #18]
 80055dc:	441a      	add	r2, r3
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	4413      	add	r3, r2
 80055e2:	461a      	mov	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	3b30      	subs	r3, #48	; 0x30
 80055ec:	461a      	mov	r2, r3
 80055ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055f6:	eb10 0802 	adds.w	r8, r0, r2
 80055fa:	eb41 0903 	adc.w	r9, r1, r3
 80055fe:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i=0;i<after_size;i++)
 8005602:	8afb      	ldrh	r3, [r7, #22]
 8005604:	3301      	adds	r3, #1
 8005606:	82fb      	strh	r3, [r7, #22]
 8005608:	8afa      	ldrh	r2, [r7, #22]
 800560a:	8a3b      	ldrh	r3, [r7, #16]
 800560c:	429a      	cmp	r2, r3
 800560e:	d3ad      	bcc.n	800556c <scan_double+0xcc>
		}
	}

	if(point!=0){after_size-=1;
 8005610:	8abb      	ldrh	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d022      	beq.n	800565c <scan_double+0x1bc>
 8005616:	8a3b      	ldrh	r3, [r7, #16]
 8005618:	3b01      	subs	r3, #1
 800561a:	823b      	strh	r3, [r7, #16]
	RES = (double)res64;
 800561c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005620:	f7fa ffc4 	bl	80005ac <__aeabi_ul2d>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<(after_size-point);i++)RES *= 0.1;}
 800562c:	2300      	movs	r3, #0
 800562e:	82fb      	strh	r3, [r7, #22]
 8005630:	e00d      	b.n	800564e <scan_double+0x1ae>
 8005632:	a319      	add	r3, pc, #100	; (adr r3, 8005698 <scan_double+0x1f8>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800563c:	f7fa ffec 	bl	8000618 <__aeabi_dmul>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	3301      	adds	r3, #1
 800564c:	82fb      	strh	r3, [r7, #22]
 800564e:	8afa      	ldrh	r2, [r7, #22]
 8005650:	8a39      	ldrh	r1, [r7, #16]
 8005652:	8abb      	ldrh	r3, [r7, #20]
 8005654:	1acb      	subs	r3, r1, r3
 8005656:	429a      	cmp	r2, r3
 8005658:	dbeb      	blt.n	8005632 <scan_double+0x192>
 800565a:	e007      	b.n	800566c <scan_double+0x1cc>
	else RES = (double)res64;
 800565c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005660:	f7fa ffa4 	bl	80005ac <__aeabi_ul2d>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(sign==1)RES=-RES;
 800566c:	8a7b      	ldrh	r3, [r7, #18]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <scan_double+0x1de>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800567c:	60fb      	str	r3, [r7, #12]
	return RES;
 800567e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005682:	ec43 2b17 	vmov	d7, r2, r3
}
 8005686:	eeb0 0a47 	vmov.f32	s0, s14
 800568a:	eef0 0a67 	vmov.f32	s1, s15
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005696:	bf00      	nop
 8005698:	9999999a 	.word	0x9999999a
 800569c:	3fb99999 	.word	0x3fb99999

080056a0 <Save_Settings>:

void Save_Settings(uint8_t TAG, int32_t data)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	6039      	str	r1, [r7, #0]
 80056aa:	71fb      	strb	r3, [r7, #7]
	uint8_t Name[11]="CONFIG.CSV\0";
 80056ac:	4a4c      	ldr	r2, [pc, #304]	; (80057e0 <Save_Settings+0x140>)
 80056ae:	f107 030c 	add.w	r3, r7, #12
 80056b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80056b4:	c303      	stmia	r3!, {r0, r1}
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	3302      	adds	r3, #2
 80056ba:	0c12      	lsrs	r2, r2, #16
 80056bc:	701a      	strb	r2, [r3, #0]
	uint16_t index, i, end_index;
	while(Read_File(Name, 11, ReadFileBuf, file_size)!=FR_OK){};
 80056be:	bf00      	nop
 80056c0:	f107 000c 	add.w	r0, r7, #12
 80056c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80056c8:	4a46      	ldr	r2, [pc, #280]	; (80057e4 <Save_Settings+0x144>)
 80056ca:	210b      	movs	r1, #11
 80056cc:	f7ff fe5a 	bl	8005384 <Read_File>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f4      	bne.n	80056c0 <Save_Settings+0x20>
	//{
		index=FileParser(TAG);
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fe7f 	bl	80053dc <FileParser>
 80056de:	4603      	mov	r3, r0
 80056e0:	837b      	strh	r3, [r7, #26]
		for(i=index;i<file_size-1;i++)
 80056e2:	8b7b      	ldrh	r3, [r7, #26]
 80056e4:	83fb      	strh	r3, [r7, #30]
 80056e6:	e013      	b.n	8005710 <Save_Settings+0x70>
		{
			if((ReadFileBuf[i]==0x0D)&&(ReadFileBuf[i+1]==0x0A))
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	4a3e      	ldr	r2, [pc, #248]	; (80057e4 <Save_Settings+0x144>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	2b0d      	cmp	r3, #13
 80056f0:	d10b      	bne.n	800570a <Save_Settings+0x6a>
 80056f2:	8bfb      	ldrh	r3, [r7, #30]
 80056f4:	3301      	adds	r3, #1
 80056f6:	4a3b      	ldr	r2, [pc, #236]	; (80057e4 <Save_Settings+0x144>)
 80056f8:	5cd3      	ldrb	r3, [r2, r3]
 80056fa:	2b0a      	cmp	r3, #10
 80056fc:	d105      	bne.n	800570a <Save_Settings+0x6a>
			{
				end_index=i+2;
 80056fe:	8bfb      	ldrh	r3, [r7, #30]
 8005700:	3302      	adds	r3, #2
 8005702:	83bb      	strh	r3, [r7, #28]
				i=file_size-1;
 8005704:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005708:	83fb      	strh	r3, [r7, #30]
		for(i=index;i<file_size-1;i++)
 800570a:	8bfb      	ldrh	r3, [r7, #30]
 800570c:	3301      	adds	r3, #1
 800570e:	83fb      	strh	r3, [r7, #30]
 8005710:	8bfb      	ldrh	r3, [r7, #30]
 8005712:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8005716:	4293      	cmp	r3, r2
 8005718:	d9e6      	bls.n	80056e8 <Save_Settings+0x48>
			}
		}

		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	4a32      	ldr	r2, [pc, #200]	; (80057e8 <Save_Settings+0x148>)
 800571e:	5cd3      	ldrb	r3, [r2, r3]
 8005720:	b29b      	uxth	r3, r3
 8005722:	8b7a      	ldrh	r2, [r7, #26]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	83fb      	strh	r3, [r7, #30]
 800572c:	e011      	b.n	8005752 <Save_Settings+0xb2>
		{
			ReadFileBuf[i]=ReadFileBuf[i+end_index-(index-TAG_NUM_OF_SYM[TAG]-1)];
 800572e:	8bfa      	ldrh	r2, [r7, #30]
 8005730:	8bbb      	ldrh	r3, [r7, #28]
 8005732:	441a      	add	r2, r3
 8005734:	8b7b      	ldrh	r3, [r7, #26]
 8005736:	79f9      	ldrb	r1, [r7, #7]
 8005738:	482b      	ldr	r0, [pc, #172]	; (80057e8 <Save_Settings+0x148>)
 800573a:	5c41      	ldrb	r1, [r0, r1]
 800573c:	1a5b      	subs	r3, r3, r1
 800573e:	3b01      	subs	r3, #1
 8005740:	1ad2      	subs	r2, r2, r3
 8005742:	8bfb      	ldrh	r3, [r7, #30]
 8005744:	4927      	ldr	r1, [pc, #156]	; (80057e4 <Save_Settings+0x144>)
 8005746:	5c89      	ldrb	r1, [r1, r2]
 8005748:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <Save_Settings+0x144>)
 800574a:	54d1      	strb	r1, [r2, r3]
		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800574c:	8bfb      	ldrh	r3, [r7, #30]
 800574e:	3301      	adds	r3, #1
 8005750:	83fb      	strh	r3, [r7, #30]
 8005752:	8bfa      	ldrh	r2, [r7, #30]
 8005754:	8bbb      	ldrh	r3, [r7, #28]
 8005756:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800575a:	429a      	cmp	r2, r3
 800575c:	dbe7      	blt.n	800572e <Save_Settings+0x8e>
		}

		index=FileParser(end_of_file_tag)-TAG_NUM_OF_SYM[end_of_file_tag]-1;
 800575e:	2000      	movs	r0, #0
 8005760:	f7ff fe3c 	bl	80053dc <FileParser>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
 8005768:	230b      	movs	r3, #11
 800576a:	b29b      	uxth	r3, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	837b      	strh	r3, [r7, #26]

		for(i=0;i<TAG_NUM_OF_SYM[TAG];i++)ReadFileBuf[i+index]=TAG_STRING[TAG][i];
 8005774:	2300      	movs	r3, #0
 8005776:	83fb      	strh	r3, [r7, #30]
 8005778:	e00e      	b.n	8005798 <Save_Settings+0xf8>
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <Save_Settings+0x14c>)
 800577e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005782:	8bfb      	ldrh	r3, [r7, #30]
 8005784:	441a      	add	r2, r3
 8005786:	8bf9      	ldrh	r1, [r7, #30]
 8005788:	8b7b      	ldrh	r3, [r7, #26]
 800578a:	440b      	add	r3, r1
 800578c:	7811      	ldrb	r1, [r2, #0]
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <Save_Settings+0x144>)
 8005790:	54d1      	strb	r1, [r2, r3]
 8005792:	8bfb      	ldrh	r3, [r7, #30]
 8005794:	3301      	adds	r3, #1
 8005796:	83fb      	strh	r3, [r7, #30]
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <Save_Settings+0x148>)
 800579c:	5cd3      	ldrb	r3, [r2, r3]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8bfa      	ldrh	r2, [r7, #30]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d3e9      	bcc.n	800577a <Save_Settings+0xda>
		sprintf(ReadFileBuf+index+TAG_NUM_OF_SYM[TAG],";%d\r\nend_of_file;\r\n", data);
 80057a6:	8b7b      	ldrh	r3, [r7, #26]
 80057a8:	79fa      	ldrb	r2, [r7, #7]
 80057aa:	490f      	ldr	r1, [pc, #60]	; (80057e8 <Save_Settings+0x148>)
 80057ac:	5c8a      	ldrb	r2, [r1, r2]
 80057ae:	4413      	add	r3, r2
 80057b0:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <Save_Settings+0x144>)
 80057b2:	4413      	add	r3, r2
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	490e      	ldr	r1, [pc, #56]	; (80057f0 <Save_Settings+0x150>)
 80057b8:	4618      	mov	r0, r3
 80057ba:	f018 fb41 	bl	801de40 <siprintf>
		ReadFileBuf[file_size-1]="\0";
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <Save_Settings+0x154>)
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <Save_Settings+0x144>)
 80057c4:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		Create_File(Name, 11, ReadFileBuf, file_size);
 80057c8:	f107 000c 	add.w	r0, r7, #12
 80057cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80057d0:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <Save_Settings+0x144>)
 80057d2:	210b      	movs	r1, #11
 80057d4:	f7ff fdac 	bl	8005330 <Create_File>
	//}
}
 80057d8:	bf00      	nop
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	080221fc 	.word	0x080221fc
 80057e4:	20006ce0 	.word	0x20006ce0
 80057e8:	08023db8 	.word	0x08023db8
 80057ec:	20000330 	.word	0x20000330
 80057f0:	080221e4 	.word	0x080221e4
 80057f4:	080221f8 	.word	0x080221f8

080057f8 <Read_Variable_From_File>:



double Read_Variable_From_File(uint8_t name)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	71fb      	strb	r3, [r7, #7]
	return scan_double(FileParser(name), ReadFileBuf);
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fde9 	bl	80053dc <FileParser>
 800580a:	4603      	mov	r3, r0
 800580c:	4907      	ldr	r1, [pc, #28]	; (800582c <Read_Variable_From_File+0x34>)
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fe46 	bl	80054a0 <scan_double>
 8005814:	eeb0 7a40 	vmov.f32	s14, s0
 8005818:	eef0 7a60 	vmov.f32	s15, s1
}
 800581c:	eeb0 0a47 	vmov.f32	s0, s14
 8005820:	eef0 0a67 	vmov.f32	s1, s15
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20006ce0 	.word	0x20006ce0

08005830 <Load_Settings>:



void Load_Settings(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
	uint8_t Name_settings[11]="CONFIG.CSV\0";
 8005836:	4ad2      	ldr	r2, [pc, #840]	; (8005b80 <Load_Settings+0x350>)
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	ca07      	ldmia	r2, {r0, r1, r2}
 800583e:	c303      	stmia	r3!, {r0, r1}
 8005840:	801a      	strh	r2, [r3, #0]
 8005842:	3302      	adds	r3, #2
 8005844:	0c12      	lsrs	r2, r2, #16
 8005846:	701a      	strb	r2, [r3, #0]
	uint8_t Name_calibr[8]="CAL.CSV\0";
 8005848:	4ace      	ldr	r2, [pc, #824]	; (8005b84 <Load_Settings+0x354>)
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005850:	e883 0003 	stmia.w	r3, {r0, r1}

	// Читаем конфигурационный файл
	while(Read_File(Name_settings, 11, ReadFileBuf, file_size)!=FR_OK){};
 8005854:	bf00      	nop
 8005856:	f107 000c 	add.w	r0, r7, #12
 800585a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800585e:	4aca      	ldr	r2, [pc, #808]	; (8005b88 <Load_Settings+0x358>)
 8005860:	210b      	movs	r1, #11
 8005862:	f7ff fd8f 	bl	8005384 <Read_File>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f4      	bne.n	8005856 <Load_Settings+0x26>
	//{
		gauge_error = Read_Variable_From_File(gauge_error_tag);
 800586c:	200f      	movs	r0, #15
 800586e:	f7ff ffc3 	bl	80057f8 <Read_Variable_From_File>
 8005872:	eeb0 7a40 	vmov.f32	s14, s0
 8005876:	eef0 7a60 	vmov.f32	s15, s1
 800587a:	4bc4      	ldr	r3, [pc, #784]	; (8005b8c <Load_Settings+0x35c>)
 800587c:	ed83 7b00 	vstr	d7, [r3]
		display_brightness = (uint16_t)Read_Variable_From_File(display_brightness_tag);
 8005880:	2001      	movs	r0, #1
 8005882:	f7ff ffb9 	bl	80057f8 <Read_Variable_From_File>
 8005886:	ec53 2b10 	vmov	r2, r3, d0
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	f7fb f99b 	bl	8000bc8 <__aeabi_d2uiz>
 8005892:	4603      	mov	r3, r0
 8005894:	b29b      	uxth	r3, r3
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4bbd      	ldr	r3, [pc, #756]	; (8005b90 <Load_Settings+0x360>)
 800589a:	701a      	strb	r2, [r3, #0]
		display_contrast = (uint16_t)Read_Variable_From_File(display_contrast_tag);
 800589c:	2002      	movs	r0, #2
 800589e:	f7ff ffab 	bl	80057f8 <Read_Variable_From_File>
 80058a2:	ec53 2b10 	vmov	r2, r3, d0
 80058a6:	4610      	mov	r0, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	f7fb f98d 	bl	8000bc8 <__aeabi_d2uiz>
 80058ae:	4603      	mov	r3, r0
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	4bb7      	ldr	r3, [pc, #732]	; (8005b94 <Load_Settings+0x364>)
 80058b6:	701a      	strb	r2, [r3, #0]
		mm_peak = (uint16_t)Read_Variable_From_File(mm_peak_tag);
 80058b8:	2003      	movs	r0, #3
 80058ba:	f7ff ff9d 	bl	80057f8 <Read_Variable_From_File>
 80058be:	ec53 2b10 	vmov	r2, r3, d0
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	f7fb f97f 	bl	8000bc8 <__aeabi_d2uiz>
 80058ca:	4603      	mov	r3, r0
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	4bb1      	ldr	r3, [pc, #708]	; (8005b98 <Load_Settings+0x368>)
 80058d2:	701a      	strb	r2, [r3, #0]
		leak_detect = (uint16_t)Read_Variable_From_File(leak_detect_tag);
 80058d4:	2004      	movs	r0, #4
 80058d6:	f7ff ff8f 	bl	80057f8 <Read_Variable_From_File>
 80058da:	ec53 2b10 	vmov	r2, r3, d0
 80058de:	4610      	mov	r0, r2
 80058e0:	4619      	mov	r1, r3
 80058e2:	f7fb f971 	bl	8000bc8 <__aeabi_d2uiz>
 80058e6:	4603      	mov	r3, r0
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	4bab      	ldr	r3, [pc, #684]	; (8005b9c <Load_Settings+0x36c>)
 80058ee:	701a      	strb	r2, [r3, #0]
		PV = (uint16_t)Read_Variable_From_File(PV_tag);
 80058f0:	2005      	movs	r0, #5
 80058f2:	f7ff ff81 	bl	80057f8 <Read_Variable_From_File>
 80058f6:	ec53 2b10 	vmov	r2, r3, d0
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	f7fb f963 	bl	8000bc8 <__aeabi_d2uiz>
 8005902:	4603      	mov	r3, r0
 8005904:	b29b      	uxth	r3, r3
 8005906:	b2da      	uxtb	r2, r3
 8005908:	4ba5      	ldr	r3, [pc, #660]	; (8005ba0 <Load_Settings+0x370>)
 800590a:	701a      	strb	r2, [r3, #0]
		PI = (uint16_t)Read_Variable_From_File(PI_tag);
 800590c:	2006      	movs	r0, #6
 800590e:	f7ff ff73 	bl	80057f8 <Read_Variable_From_File>
 8005912:	ec53 2b10 	vmov	r2, r3, d0
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	f7fb f955 	bl	8000bc8 <__aeabi_d2uiz>
 800591e:	4603      	mov	r3, r0
 8005920:	b29b      	uxth	r3, r3
 8005922:	b2da      	uxtb	r2, r3
 8005924:	4b9f      	ldr	r3, [pc, #636]	; (8005ba4 <Load_Settings+0x374>)
 8005926:	701a      	strb	r2, [r3, #0]
		PE = (uint16_t)Read_Variable_From_File(PE_tag);
 8005928:	2007      	movs	r0, #7
 800592a:	f7ff ff65 	bl	80057f8 <Read_Variable_From_File>
 800592e:	ec53 2b10 	vmov	r2, r3, d0
 8005932:	4610      	mov	r0, r2
 8005934:	4619      	mov	r1, r3
 8005936:	f7fb f947 	bl	8000bc8 <__aeabi_d2uiz>
 800593a:	4603      	mov	r3, r0
 800593c:	b29b      	uxth	r3, r3
 800593e:	b2da      	uxtb	r2, r3
 8005940:	4b99      	ldr	r3, [pc, #612]	; (8005ba8 <Load_Settings+0x378>)
 8005942:	701a      	strb	r2, [r3, #0]
		PGA_GAIN[0] = (uint16_t)Read_Variable_From_File(PGA_GAIN_tag);
 8005944:	2008      	movs	r0, #8
 8005946:	f7ff ff57 	bl	80057f8 <Read_Variable_From_File>
 800594a:	ec53 2b10 	vmov	r2, r3, d0
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	f7fb f939 	bl	8000bc8 <__aeabi_d2uiz>
 8005956:	4603      	mov	r3, r0
 8005958:	b29b      	uxth	r3, r3
 800595a:	b2da      	uxtb	r2, r3
 800595c:	4b93      	ldr	r3, [pc, #588]	; (8005bac <Load_Settings+0x37c>)
 800595e:	701a      	strb	r2, [r3, #0]
		ADC_SPS = (uint16_t)Read_Variable_From_File(ADC_SPS_tag);
 8005960:	2009      	movs	r0, #9
 8005962:	f7ff ff49 	bl	80057f8 <Read_Variable_From_File>
 8005966:	ec53 2b10 	vmov	r2, r3, d0
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	f7fb f92b 	bl	8000bc8 <__aeabi_d2uiz>
 8005972:	4603      	mov	r3, r0
 8005974:	b29b      	uxth	r3, r3
 8005976:	b2da      	uxtb	r2, r3
 8005978:	4b8d      	ldr	r3, [pc, #564]	; (8005bb0 <Load_Settings+0x380>)
 800597a:	701a      	strb	r2, [r3, #0]
		adc_calibration_mode = (uint16_t)Read_Variable_From_File(adc_calibration_mode_tag);
 800597c:	200a      	movs	r0, #10
 800597e:	f7ff ff3b 	bl	80057f8 <Read_Variable_From_File>
 8005982:	ec53 2b10 	vmov	r2, r3, d0
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	f7fb f91d 	bl	8000bc8 <__aeabi_d2uiz>
 800598e:	4603      	mov	r3, r0
 8005990:	b29b      	uxth	r3, r3
 8005992:	b2da      	uxtb	r2, r3
 8005994:	4b87      	ldr	r3, [pc, #540]	; (8005bb4 <Load_Settings+0x384>)
 8005996:	701a      	strb	r2, [r3, #0]
		ADC_Buff_size = (uint16_t)Read_Variable_From_File(ADC_Buff_size_tag);
 8005998:	200b      	movs	r0, #11
 800599a:	f7ff ff2d 	bl	80057f8 <Read_Variable_From_File>
 800599e:	ec53 2b10 	vmov	r2, r3, d0
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	f7fb f90f 	bl	8000bc8 <__aeabi_d2uiz>
 80059aa:	4603      	mov	r3, r0
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	4b82      	ldr	r3, [pc, #520]	; (8005bb8 <Load_Settings+0x388>)
 80059b0:	801a      	strh	r2, [r3, #0]
		Auto_Off_Time = (uint16_t)Read_Variable_From_File(Auto_Off_Time_tag);
 80059b2:	200c      	movs	r0, #12
 80059b4:	f7ff ff20 	bl	80057f8 <Read_Variable_From_File>
 80059b8:	ec53 2b10 	vmov	r2, r3, d0
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	f7fb f902 	bl	8000bc8 <__aeabi_d2uiz>
 80059c4:	4603      	mov	r3, r0
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	4b7c      	ldr	r3, [pc, #496]	; (8005bbc <Load_Settings+0x38c>)
 80059ca:	801a      	strh	r2, [r3, #0]
		serial_num = (uint16_t)Read_Variable_From_File(serial_num_tag);
 80059cc:	200d      	movs	r0, #13
 80059ce:	f7ff ff13 	bl	80057f8 <Read_Variable_From_File>
 80059d2:	ec53 2b10 	vmov	r2, r3, d0
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f7fb f8f5 	bl	8000bc8 <__aeabi_d2uiz>
 80059de:	4603      	mov	r3, r0
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	4b76      	ldr	r3, [pc, #472]	; (8005bc0 <Load_Settings+0x390>)
 80059e6:	601a      	str	r2, [r3, #0]
		gauge_range = (uint16_t)Read_Variable_From_File(gauge_range_tag);
 80059e8:	200e      	movs	r0, #14
 80059ea:	f7ff ff05 	bl	80057f8 <Read_Variable_From_File>
 80059ee:	ec53 2b10 	vmov	r2, r3, d0
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	f7fb f8e7 	bl	8000bc8 <__aeabi_d2uiz>
 80059fa:	4603      	mov	r3, r0
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	4b70      	ldr	r3, [pc, #448]	; (8005bc4 <Load_Settings+0x394>)
 8005a02:	601a      	str	r2, [r3, #0]
		light_delay = (uint16_t)Read_Variable_From_File(light_delay_tag);
 8005a04:	2010      	movs	r0, #16
 8005a06:	f7ff fef7 	bl	80057f8 <Read_Variable_From_File>
 8005a0a:	ec53 2b10 	vmov	r2, r3, d0
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	f7fb f8d9 	bl	8000bc8 <__aeabi_d2uiz>
 8005a16:	4603      	mov	r3, r0
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <Load_Settings+0x398>)
 8005a1c:	801a      	strh	r2, [r3, #0]
		logging = (uint16_t)Read_Variable_From_File(logging_tag);
 8005a1e:	2011      	movs	r0, #17
 8005a20:	f7ff feea 	bl	80057f8 <Read_Variable_From_File>
 8005a24:	ec53 2b10 	vmov	r2, r3, d0
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f7fb f8cc 	bl	8000bc8 <__aeabi_d2uiz>
 8005a30:	4603      	mov	r3, r0
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <Load_Settings+0x39c>)
 8005a38:	701a      	strb	r2, [r3, #0]
		logging_start_hour = (uint16_t)Read_Variable_From_File(logging_start_hour_tag);
 8005a3a:	2012      	movs	r0, #18
 8005a3c:	f7ff fedc 	bl	80057f8 <Read_Variable_From_File>
 8005a40:	ec53 2b10 	vmov	r2, r3, d0
 8005a44:	4610      	mov	r0, r2
 8005a46:	4619      	mov	r1, r3
 8005a48:	f7fb f8be 	bl	8000bc8 <__aeabi_d2uiz>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4b5f      	ldr	r3, [pc, #380]	; (8005bd0 <Load_Settings+0x3a0>)
 8005a54:	701a      	strb	r2, [r3, #0]
		logging_start_min = (uint16_t)Read_Variable_From_File(logging_start_min_tag);
 8005a56:	2013      	movs	r0, #19
 8005a58:	f7ff fece 	bl	80057f8 <Read_Variable_From_File>
 8005a5c:	ec53 2b10 	vmov	r2, r3, d0
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	f7fb f8b0 	bl	8000bc8 <__aeabi_d2uiz>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <Load_Settings+0x3a4>)
 8005a70:	701a      	strb	r2, [r3, #0]
		logging_start_sec = (uint16_t)Read_Variable_From_File(logging_start_sec_tag);
 8005a72:	2014      	movs	r0, #20
 8005a74:	f7ff fec0 	bl	80057f8 <Read_Variable_From_File>
 8005a78:	ec53 2b10 	vmov	r2, r3, d0
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f7fb f8a2 	bl	8000bc8 <__aeabi_d2uiz>
 8005a84:	4603      	mov	r3, r0
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <Load_Settings+0x3a8>)
 8005a8c:	701a      	strb	r2, [r3, #0]
		logging_period = (uint16_t)Read_Variable_From_File(logging_period_tag);
 8005a8e:	2015      	movs	r0, #21
 8005a90:	f7ff feb2 	bl	80057f8 <Read_Variable_From_File>
 8005a94:	ec53 2b10 	vmov	r2, r3, d0
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f7fb f894 	bl	8000bc8 <__aeabi_d2uiz>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <Load_Settings+0x3ac>)
 8005aa8:	701a      	strb	r2, [r3, #0]
		logging_len = (uint16_t)Read_Variable_From_File(logging_len_tag);
 8005aaa:	2016      	movs	r0, #22
 8005aac:	f7ff fea4 	bl	80057f8 <Read_Variable_From_File>
 8005ab0:	ec53 2b10 	vmov	r2, r3, d0
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7fb f886 	bl	8000bc8 <__aeabi_d2uiz>
 8005abc:	4603      	mov	r3, r0
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4b47      	ldr	r3, [pc, #284]	; (8005be0 <Load_Settings+0x3b0>)
 8005ac4:	701a      	strb	r2, [r3, #0]
		logging_num = (uint16_t)Read_Variable_From_File(logging_num_tag);
 8005ac6:	2017      	movs	r0, #23
 8005ac8:	f7ff fe96 	bl	80057f8 <Read_Variable_From_File>
 8005acc:	ec53 2b10 	vmov	r2, r3, d0
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f7fb f878 	bl	8000bc8 <__aeabi_d2uiz>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <Load_Settings+0x3b4>)
 8005ae0:	701a      	strb	r2, [r3, #0]
		AutoAmpCoef=(uint8_t)Read_Variable_From_File(AutoAmpCoef_tag);
 8005ae2:	201e      	movs	r0, #30
 8005ae4:	f7ff fe88 	bl	80057f8 <Read_Variable_From_File>
 8005ae8:	ec53 2b10 	vmov	r2, r3, d0
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	f7fb f86a 	bl	8000bc8 <__aeabi_d2uiz>
 8005af4:	4603      	mov	r3, r0
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <Load_Settings+0x3b8>)
 8005afa:	701a      	strb	r2, [r3, #0]
		AutoOffCoef_period=(uint16_t)Read_Variable_From_File(AutoOffCoef_period_tag);
 8005afc:	201f      	movs	r0, #31
 8005afe:	f7ff fe7b 	bl	80057f8 <Read_Variable_From_File>
 8005b02:	ec53 2b10 	vmov	r2, r3, d0
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f7fb f85d 	bl	8000bc8 <__aeabi_d2uiz>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	4b36      	ldr	r3, [pc, #216]	; (8005bec <Load_Settings+0x3bc>)
 8005b14:	801a      	strh	r2, [r3, #0]
		AutoGainCoef_period=(uint16_t)Read_Variable_From_File(AutoGainCoef_period_tag);
 8005b16:	2021      	movs	r0, #33	; 0x21
 8005b18:	f7ff fe6e 	bl	80057f8 <Read_Variable_From_File>
 8005b1c:	ec53 2b10 	vmov	r2, r3, d0
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	f7fb f850 	bl	8000bc8 <__aeabi_d2uiz>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <Load_Settings+0x3c0>)
 8005b2e:	801a      	strh	r2, [r3, #0]

	//}

		// Читаем калибровочный файл
		while(Read_File(Name_calibr, 8, ReadFileBuf, file_size)!=FR_OK){};
 8005b30:	bf00      	nop
 8005b32:	1d38      	adds	r0, r7, #4
 8005b34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b38:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <Load_Settings+0x358>)
 8005b3a:	2108      	movs	r1, #8
 8005b3c:	f7ff fc22 	bl	8005384 <Read_File>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f5      	bne.n	8005b32 <Load_Settings+0x302>
		a_current=Read_Variable_From_File(a_current_tag);
 8005b46:	2018      	movs	r0, #24
 8005b48:	f7ff fe56 	bl	80057f8 <Read_Variable_From_File>
 8005b4c:	eeb0 7a40 	vmov.f32	s14, s0
 8005b50:	eef0 7a60 	vmov.f32	s15, s1
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <Load_Settings+0x3c4>)
 8005b56:	ed83 7b00 	vstr	d7, [r3]
		b_current=Read_Variable_From_File(b_current_tag);
 8005b5a:	2019      	movs	r0, #25
 8005b5c:	f7ff fe4c 	bl	80057f8 <Read_Variable_From_File>
 8005b60:	eeb0 7a40 	vmov.f32	s14, s0
 8005b64:	eef0 7a60 	vmov.f32	s15, s1
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <Load_Settings+0x3c8>)
 8005b6a:	ed83 7b00 	vstr	d7, [r3]
		c_current=Read_Variable_From_File(c_current_tag);
 8005b6e:	201a      	movs	r0, #26
 8005b70:	f7ff fe42 	bl	80057f8 <Read_Variable_From_File>
 8005b74:	eeb0 7a40 	vmov.f32	s14, s0
 8005b78:	eef0 7a60 	vmov.f32	s15, s1
 8005b7c:	e03e      	b.n	8005bfc <Load_Settings+0x3cc>
 8005b7e:	bf00      	nop
 8005b80:	080221fc 	.word	0x080221fc
 8005b84:	08022208 	.word	0x08022208
 8005b88:	20006ce0 	.word	0x20006ce0
 8005b8c:	200000b0 	.word	0x200000b0
 8005b90:	20000098 	.word	0x20000098
 8005b94:	20000099 	.word	0x20000099
 8005b98:	20000963 	.word	0x20000963
 8005b9c:	20000964 	.word	0x20000964
 8005ba0:	20000965 	.word	0x20000965
 8005ba4:	20000966 	.word	0x20000966
 8005ba8:	20000967 	.word	0x20000967
 8005bac:	2000009c 	.word	0x2000009c
 8005bb0:	200000a3 	.word	0x200000a3
 8005bb4:	20000968 	.word	0x20000968
 8005bb8:	200000a4 	.word	0x200000a4
 8005bbc:	2000096a 	.word	0x2000096a
 8005bc0:	200000a8 	.word	0x200000a8
 8005bc4:	2000096c 	.word	0x2000096c
 8005bc8:	200000b8 	.word	0x200000b8
 8005bcc:	20000970 	.word	0x20000970
 8005bd0:	20000971 	.word	0x20000971
 8005bd4:	20000972 	.word	0x20000972
 8005bd8:	20000973 	.word	0x20000973
 8005bdc:	20000974 	.word	0x20000974
 8005be0:	20000975 	.word	0x20000975
 8005be4:	20000976 	.word	0x20000976
 8005be8:	20000962 	.word	0x20000962
 8005bec:	2000223c 	.word	0x2000223c
 8005bf0:	200021d4 	.word	0x200021d4
 8005bf4:	20006cc0 	.word	0x20006cc0
 8005bf8:	20006cd8 	.word	0x20006cd8
 8005bfc:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <Load_Settings+0x42c>)
 8005bfe:	ed83 7b00 	vstr	d7, [r3]
		a_voltage=Read_Variable_From_File(a_voltage_tag);
 8005c02:	201b      	movs	r0, #27
 8005c04:	f7ff fdf8 	bl	80057f8 <Read_Variable_From_File>
 8005c08:	eeb0 7a40 	vmov.f32	s14, s0
 8005c0c:	eef0 7a60 	vmov.f32	s15, s1
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <Load_Settings+0x430>)
 8005c12:	ed83 7b00 	vstr	d7, [r3]
		b_voltage=Read_Variable_From_File(b_voltage_tag);
 8005c16:	201c      	movs	r0, #28
 8005c18:	f7ff fdee 	bl	80057f8 <Read_Variable_From_File>
 8005c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c20:	eef0 7a60 	vmov.f32	s15, s1
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <Load_Settings+0x434>)
 8005c26:	ed83 7b00 	vstr	d7, [r3]
		c_voltage=Read_Variable_From_File(c_voltage_tag);
 8005c2a:	201d      	movs	r0, #29
 8005c2c:	f7ff fde4 	bl	80057f8 <Read_Variable_From_File>
 8005c30:	eeb0 7a40 	vmov.f32	s14, s0
 8005c34:	eef0 7a60 	vmov.f32	s15, s1
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <Load_Settings+0x438>)
 8005c3a:	ed83 7b00 	vstr	d7, [r3]
		RefVoltage=Read_Variable_From_File(RefVoltage_tag);
 8005c3e:	2020      	movs	r0, #32
 8005c40:	f7ff fdda 	bl	80057f8 <Read_Variable_From_File>
 8005c44:	eeb0 7a40 	vmov.f32	s14, s0
 8005c48:	eef0 7a60 	vmov.f32	s15, s1
 8005c4c:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <Load_Settings+0x43c>)
 8005c4e:	ed83 7b00 	vstr	d7, [r3]
//		my_itoa(123456.654321, RAM, 0, 20);
//		my_itoa(-654321.123456, RAM, 0, 20);
//		my_itoa(555555, RAM, 0, 20);
//		my_itoa(-444444, RAM, 0, 20);
//		RAM[0]=0;
}
 8005c52:	bf00      	nop
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20006cb8 	.word	0x20006cb8
 8005c60:	20006cc8 	.word	0x20006cc8
 8005c64:	20006cb0 	.word	0x20006cb0
 8005c68:	20006cd0 	.word	0x20006cd0
 8005c6c:	20000088 	.word	0x20000088

08005c70 <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	if(ERROR_REG!=0)LED(1,0,0);
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <led_on+0x28>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <led_on+0x16>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2001      	movs	r0, #1
 8005c82:	f7fc f92d 	bl	8001ee0 <LED>
	Task_STOP(9);
 8005c86:	2009      	movs	r0, #9
 8005c88:	f7fd f984 	bl	8002f94 <Task_STOP>
	Task_RUN(10, 250);
 8005c8c:	21fa      	movs	r1, #250	; 0xfa
 8005c8e:	200a      	movs	r0, #10
 8005c90:	f7fd f99a 	bl	8002fc8 <Task_RUN>
}
 8005c94:	bf00      	nop
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000950 	.word	0x20000950

08005c9c <led_off>:
void led_off(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
	LED(0,0,0);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f7fc f91b 	bl	8001ee0 <LED>
	Task_STOP(10);
 8005caa:	200a      	movs	r0, #10
 8005cac:	f7fd f972 	bl	8002f94 <Task_STOP>
	Task_RUN(9, 250);
 8005cb0:	21fa      	movs	r1, #250	; 0xfa
 8005cb2:	2009      	movs	r0, #9
 8005cb4:	f7fd f988 	bl	8002fc8 <Task_RUN>
}
 8005cb8:	bf00      	nop
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <test_task>:
void test_task(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
	uint8_t CID = MAX77960_Read_Reg(MAX77960_CID);
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	f7fd f9c2 	bl	800304c <MAX77960_Read_Reg>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	71fb      	strb	r3, [r7, #7]
	sleep(300);
 8005ccc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005cd0:	f7fd f948 	bl	8002f64 <sleep>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ce0:	f001 ff6b 	bl	8007bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ce4:	f000 f894 	bl	8005e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ce8:	f000 fcba 	bl	8006660 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005cec:	f000 fa00 	bl	80060f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005cf0:	f000 fa3e 	bl	8006170 <MX_I2C2_Init>
  MX_RTC_Init();
 8005cf4:	f000 fa7c 	bl	80061f0 <MX_RTC_Init>
  MX_SPI1_Init();
 8005cf8:	f000 faa6 	bl	8006248 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005cfc:	f000 fae2 	bl	80062c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8005d00:	f000 fb1e 	bl	8006340 <MX_SPI3_Init>
  MX_TIM2_Init();
 8005d04:	f000 fb5a 	bl	80063bc <MX_TIM2_Init>
  MX_TIM4_Init();
 8005d08:	f000 fbb4 	bl	8006474 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005d0c:	f000 fc42 	bl	8006594 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8005d10:	f00c f9b8 	bl	8012084 <MX_FATFS_Init>
  MX_DMA_Init();
 8005d14:	f000 fc76 	bl	8006604 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005d18:	f012 ff86 	bl	8018c28 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8005d1c:	f000 f952 	bl	8005fc4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8005d20:	f000 f8d6 	bl	8005ed0 <MX_ADC1_Init>
  MX_TIM6_Init();
 8005d24:	f000 fc00 	bl	8006528 <MX_TIM6_Init>
  MX_DAC1_Init();
 8005d28:	f000 f9b0 	bl	800608c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Таски
  new_task[1]=Parser_process;		// Парсинг команд через виртуальный компорт
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <main+0xf4>)
 8005d2e:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <main+0xf8>)
 8005d30:	605a      	str	r2, [r3, #4]
  new_task[2]=ADC_process;			// АЦП
 8005d32:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <main+0xf4>)
 8005d34:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <main+0xfc>)
 8005d36:	609a      	str	r2, [r3, #8]
  new_task[3]=Display_process;		// Дисплей
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <main+0xf4>)
 8005d3a:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <main+0x100>)
 8005d3c:	60da      	str	r2, [r3, #12]
  new_task[4]=Buttons_process;		// Кнопки
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <main+0xf4>)
 8005d40:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <main+0x104>)
 8005d42:	611a      	str	r2, [r3, #16]
  new_task[5]=RTC_process;			// Часы реального времени
 8005d44:	4b22      	ldr	r3, [pc, #136]	; (8005dd0 <main+0xf4>)
 8005d46:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <main+0x108>)
 8005d48:	615a      	str	r2, [r3, #20]
  new_task[6]=Auto_OFF_process;		// Автовыключение
 8005d4a:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <main+0xf4>)
 8005d4c:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <main+0x10c>)
 8005d4e:	619a      	str	r2, [r3, #24]
  new_task[7]=Temperature_process;	// Температура МКУ
 8005d50:	4b1f      	ldr	r3, [pc, #124]	; (8005dd0 <main+0xf4>)
 8005d52:	4a26      	ldr	r2, [pc, #152]	; (8005dec <main+0x110>)
 8005d54:	61da      	str	r2, [r3, #28]
  new_task[8]=Battery_process;		// Напряжение на батарее
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <main+0xf4>)
 8005d58:	4a25      	ldr	r2, [pc, #148]	; (8005df0 <main+0x114>)
 8005d5a:	621a      	str	r2, [r3, #32]
new_task[11]=test_task;
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <main+0xf4>)
 8005d5e:	4a25      	ldr	r2, [pc, #148]	; (8005df4 <main+0x118>)
 8005d60:	62da      	str	r2, [r3, #44]	; 0x2c

  Task_STOP(10);
 8005d62:	200a      	movs	r0, #10
 8005d64:	f7fd f916 	bl	8002f94 <Task_STOP>
  new_task[9]=led_on;
 8005d68:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <main+0xf4>)
 8005d6a:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <main+0x11c>)
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24
  new_task[10]=led_off;
 8005d6e:	4b18      	ldr	r3, [pc, #96]	; (8005dd0 <main+0xf4>)
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <main+0x120>)
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Питание на самоблокировку
 8005d74:	2201      	movs	r2, #1
 8005d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d7a:	4821      	ldr	r0, [pc, #132]	; (8005e00 <main+0x124>)
 8005d7c:	f004 fa40 	bl	800a200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Питание на самоблокировку
 8005d80:	2201      	movs	r2, #1
 8005d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d86:	481f      	ldr	r0, [pc, #124]	; (8005e04 <main+0x128>)
 8005d88:	f004 fa3a 	bl	800a200 <HAL_GPIO_WritePin>
  TURN_ON_ADC_POWER();
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	2140      	movs	r1, #64	; 0x40
 8005d90:	481b      	ldr	r0, [pc, #108]	; (8005e00 <main+0x124>)
 8005d92:	f004 fa35 	bl	800a200 <HAL_GPIO_WritePin>
 8005d96:	2201      	movs	r2, #1
 8005d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d9c:	4819      	ldr	r0, [pc, #100]	; (8005e04 <main+0x128>)
 8005d9e:	f004 fa2f 	bl	800a200 <HAL_GPIO_WritePin>

  Buttons_init();
 8005da2:	f7fb ffc5 	bl	8001d30 <Buttons_init>
  Display_init();
 8005da6:	f7fc fe1b 	bl	80029e0 <Display_init>
  ADC_init();
 8005daa:	f7fb fbfd 	bl	80015a8 <ADC_init>
  W25_Init();
 8005dae:	f7fe fe2d 	bl	8004a0c <W25_Init>
  BLueTooth_Configuration(BLE_config);
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <main+0x12c>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fc f83c 	bl	8001e34 <BLueTooth_Configuration>
  Logging_init();
 8005dbc:	f7ff faac 	bl	8005318 <Logging_init>
  Load_Settings();
 8005dc0:	f7ff fd36 	bl	8005830 <Load_Settings>



  Play_Sound((char*)"INTRO.WAV");
 8005dc4:	4811      	ldr	r0, [pc, #68]	; (8005e0c <main+0x130>)
 8005dc6:	f000 fd83 	bl	80068d0 <Play_Sound>
  ELSPIRE_OS_KERNEL();
 8005dca:	f7fd f86b 	bl	8002ea4 <ELSPIRE_OS_KERNEL>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005dce:	e7fe      	b.n	8005dce <main+0xf2>
 8005dd0:	20001ffc 	.word	0x20001ffc
 8005dd4:	08003bc9 	.word	0x08003bc9
 8005dd8:	08001825 	.word	0x08001825
 8005ddc:	08002db9 	.word	0x08002db9
 8005de0:	08002515 	.word	0x08002515
 8005de4:	08017d61 	.word	0x08017d61
 8005de8:	08016efd 	.word	0x08016efd
 8005dec:	080077c1 	.word	0x080077c1
 8005df0:	08017b3d 	.word	0x08017b3d
 8005df4:	08005cbd 	.word	0x08005cbd
 8005df8:	08005c71 	.word	0x08005c71
 8005dfc:	08005c9d 	.word	0x08005c9d
 8005e00:	48000800 	.word	0x48000800
 8005e04:	48000c00 	.word	0x48000c00
 8005e08:	20000080 	.word	0x20000080
 8005e0c:	08022210 	.word	0x08022210

08005e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b096      	sub	sp, #88	; 0x58
 8005e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e16:	f107 0314 	add.w	r3, r7, #20
 8005e1a:	2244      	movs	r2, #68	; 0x44
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f017 f986 	bl	801d130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e24:	463b      	mov	r3, r7
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	609a      	str	r2, [r3, #8]
 8005e2e:	60da      	str	r2, [r3, #12]
 8005e30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005e32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005e36:	f005 fff9 	bl	800be2c <HAL_PWREx_ControlVoltageScaling>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005e40:	f000 fd3a 	bl	80068b8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005e44:	f005 ffd4 	bl	800bdf0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <SystemClock_Config+0xbc>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <SystemClock_Config+0xbc>)
 8005e50:	f023 0318 	bic.w	r3, r3, #24
 8005e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005e58:	2305      	movs	r3, #5
 8005e5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005e62:	2301      	movs	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e66:	2302      	movs	r3, #2
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005e72:	2314      	movs	r3, #20
 8005e74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e76:	2302      	movs	r3, #2
 8005e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e82:	f107 0314 	add.w	r3, r7, #20
 8005e86:	4618      	mov	r0, r3
 8005e88:	f006 f836 	bl	800bef8 <HAL_RCC_OscConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005e92:	f000 fd11 	bl	80068b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e96:	230f      	movs	r3, #15
 8005e98:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005eaa:	463b      	mov	r3, r7
 8005eac:	2104      	movs	r1, #4
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f006 fc48 	bl	800c744 <HAL_RCC_ClockConfig>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005eba:	f000 fcfd 	bl	80068b8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005ebe:	f007 f975 	bl	800d1ac <HAL_RCCEx_EnableLSECSS>
}
 8005ec2:	bf00      	nop
 8005ec4:	3758      	adds	r7, #88	; 0x58
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000

08005ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005ed6:	f107 031c 	add.w	r3, r7, #28
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	60da      	str	r2, [r3, #12]
 8005eee:	611a      	str	r2, [r3, #16]
 8005ef0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005ef2:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005ef4:	4a31      	ldr	r2, [pc, #196]	; (8005fbc <MX_ADC1_Init+0xec>)
 8005ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005efe:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f04:	4b2c      	ldr	r3, [pc, #176]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f0a:	4b2b      	ldr	r3, [pc, #172]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f10:	4b29      	ldr	r3, [pc, #164]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f12:	2204      	movs	r2, #4
 8005f14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005f1c:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005f22:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f28:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f30:	4b21      	ldr	r3, [pc, #132]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f36:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005f44:	4b1c      	ldr	r3, [pc, #112]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f52:	4819      	ldr	r0, [pc, #100]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f54:	f002 f876 	bl	8008044 <HAL_ADC_Init>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005f5e:	f000 fcab 	bl	80068b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005f66:	f107 031c 	add.w	r3, r7, #28
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4812      	ldr	r0, [pc, #72]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f6e:	f003 f877 	bl	8009060 <HAL_ADCEx_MultiModeConfigChannel>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005f78:	f000 fc9e 	bl	80068b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <MX_ADC1_Init+0xf0>)
 8005f7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005f80:	2306      	movs	r3, #6
 8005f82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005f84:	2304      	movs	r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005f88:	237f      	movs	r3, #127	; 0x7f
 8005f8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	4619      	mov	r1, r3
 8005f98:	4807      	ldr	r0, [pc, #28]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005f9a:	f002 fb39 	bl	8008610 <HAL_ADC_ConfigChannel>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005fa4:	f000 fc88 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 8005fa8:	4803      	ldr	r0, [pc, #12]	; (8005fb8 <MX_ADC1_Init+0xe8>)
 8005faa:	f002 f9a5 	bl	80082f8 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8005fae:	bf00      	nop
 8005fb0:	3728      	adds	r7, #40	; 0x28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20007bfc 	.word	0x20007bfc
 8005fbc:	50040000 	.word	0x50040000
 8005fc0:	c7520000 	.word	0xc7520000

08005fc4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005fca:	463b      	mov	r3, r7
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	60da      	str	r2, [r3, #12]
 8005fd6:	611a      	str	r2, [r3, #16]
 8005fd8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8005fda:	4b29      	ldr	r3, [pc, #164]	; (8006080 <MX_ADC2_Init+0xbc>)
 8005fdc:	4a29      	ldr	r2, [pc, #164]	; (8006084 <MX_ADC2_Init+0xc0>)
 8005fde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <MX_ADC2_Init+0xbc>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005fe6:	4b26      	ldr	r3, [pc, #152]	; (8006080 <MX_ADC2_Init+0xbc>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <MX_ADC2_Init+0xbc>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <MX_ADC2_Init+0xbc>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ff8:	4b21      	ldr	r3, [pc, #132]	; (8006080 <MX_ADC2_Init+0xbc>)
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006000:	2200      	movs	r2, #0
 8006002:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006004:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006006:	2201      	movs	r2, #1
 8006008:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <MX_ADC2_Init+0xbc>)
 800600c:	2201      	movs	r2, #1
 800600e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006018:	4b19      	ldr	r3, [pc, #100]	; (8006080 <MX_ADC2_Init+0xbc>)
 800601a:	2200      	movs	r2, #0
 800601c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800601e:	4b18      	ldr	r3, [pc, #96]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006020:	2200      	movs	r2, #0
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006024:	4b16      	ldr	r3, [pc, #88]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800602c:	4b14      	ldr	r3, [pc, #80]	; (8006080 <MX_ADC2_Init+0xbc>)
 800602e:	2200      	movs	r2, #0
 8006030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800603a:	4811      	ldr	r0, [pc, #68]	; (8006080 <MX_ADC2_Init+0xbc>)
 800603c:	f002 f802 	bl	8008044 <HAL_ADC_Init>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8006046:	f000 fc37 	bl	80068b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800604a:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <MX_ADC2_Init+0xc4>)
 800604c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800604e:	2306      	movs	r3, #6
 8006050:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8006052:	2304      	movs	r3, #4
 8006054:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006056:	237f      	movs	r3, #127	; 0x7f
 8006058:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800605a:	2304      	movs	r3, #4
 800605c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006062:	463b      	mov	r3, r7
 8006064:	4619      	mov	r1, r3
 8006066:	4806      	ldr	r0, [pc, #24]	; (8006080 <MX_ADC2_Init+0xbc>)
 8006068:	f002 fad2 	bl	8008610 <HAL_ADC_ConfigChannel>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8006072:	f000 fc21 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006076:	bf00      	nop
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20007b94 	.word	0x20007b94
 8006084:	50040100 	.word	0x50040100
 8006088:	21800100 	.word	0x21800100

0800608c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	2224      	movs	r2, #36	; 0x24
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f017 f849 	bl	801d130 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800609e:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <MX_DAC1_Init+0x5c>)
 80060a0:	4a12      	ldr	r2, [pc, #72]	; (80060ec <MX_DAC1_Init+0x60>)
 80060a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80060a4:	4810      	ldr	r0, [pc, #64]	; (80060e8 <MX_DAC1_Init+0x5c>)
 80060a6:	f003 f96d 	bl	8009384 <HAL_DAC_Init>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80060b0:	f000 fc02 	bl	80068b8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80060b8:	2304      	movs	r3, #4
 80060ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80060c8:	1d3b      	adds	r3, r7, #4
 80060ca:	2210      	movs	r2, #16
 80060cc:	4619      	mov	r1, r3
 80060ce:	4806      	ldr	r0, [pc, #24]	; (80060e8 <MX_DAC1_Init+0x5c>)
 80060d0:	f003 fac8 	bl	8009664 <HAL_DAC_ConfigChannel>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80060da:	f000 fbed 	bl	80068b8 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf, 512, DAC_ALIGN_12B_R);
  /* USER CODE END DAC1_Init 2 */

}
 80060de:	bf00      	nop
 80060e0:	3728      	adds	r7, #40	; 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20007c64 	.word	0x20007c64
 80060ec:	40007400 	.word	0x40007400

080060f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <MX_I2C1_Init+0x74>)
 80060f6:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <MX_I2C1_Init+0x78>)
 80060f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <MX_I2C1_Init+0x74>)
 80060fc:	4a1b      	ldr	r2, [pc, #108]	; (800616c <MX_I2C1_Init+0x7c>)
 80060fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <MX_I2C1_Init+0x74>)
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <MX_I2C1_Init+0x74>)
 8006108:	2201      	movs	r2, #1
 800610a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <MX_I2C1_Init+0x74>)
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006112:	4b14      	ldr	r3, [pc, #80]	; (8006164 <MX_I2C1_Init+0x74>)
 8006114:	2200      	movs	r2, #0
 8006116:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006118:	4b12      	ldr	r3, [pc, #72]	; (8006164 <MX_I2C1_Init+0x74>)
 800611a:	2200      	movs	r2, #0
 800611c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800611e:	4b11      	ldr	r3, [pc, #68]	; (8006164 <MX_I2C1_Init+0x74>)
 8006120:	2200      	movs	r2, #0
 8006122:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <MX_I2C1_Init+0x74>)
 8006126:	2200      	movs	r2, #0
 8006128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800612a:	480e      	ldr	r0, [pc, #56]	; (8006164 <MX_I2C1_Init+0x74>)
 800612c:	f004 f8a3 	bl	800a276 <HAL_I2C_Init>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006136:	f000 fbbf 	bl	80068b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800613a:	2100      	movs	r1, #0
 800613c:	4809      	ldr	r0, [pc, #36]	; (8006164 <MX_I2C1_Init+0x74>)
 800613e:	f004 fcf3 	bl	800ab28 <HAL_I2CEx_ConfigAnalogFilter>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006148:	f000 fbb6 	bl	80068b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800614c:	2100      	movs	r1, #0
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <MX_I2C1_Init+0x74>)
 8006150:	f004 fd35 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800615a:	f000 fbad 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	200079ec 	.word	0x200079ec
 8006168:	40005400 	.word	0x40005400
 800616c:	10909cec 	.word	0x10909cec

08006170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <MX_I2C2_Init+0x74>)
 8006176:	4a1c      	ldr	r2, [pc, #112]	; (80061e8 <MX_I2C2_Init+0x78>)
 8006178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800617a:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <MX_I2C2_Init+0x74>)
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <MX_I2C2_Init+0x7c>)
 800617e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006180:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <MX_I2C2_Init+0x74>)
 8006182:	2200      	movs	r2, #0
 8006184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006186:	4b17      	ldr	r3, [pc, #92]	; (80061e4 <MX_I2C2_Init+0x74>)
 8006188:	2201      	movs	r2, #1
 800618a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800618c:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <MX_I2C2_Init+0x74>)
 800618e:	2200      	movs	r2, #0
 8006190:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <MX_I2C2_Init+0x74>)
 8006194:	2200      	movs	r2, #0
 8006196:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <MX_I2C2_Init+0x74>)
 800619a:	2200      	movs	r2, #0
 800619c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <MX_I2C2_Init+0x74>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <MX_I2C2_Init+0x74>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80061aa:	480e      	ldr	r0, [pc, #56]	; (80061e4 <MX_I2C2_Init+0x74>)
 80061ac:	f004 f863 	bl	800a276 <HAL_I2C_Init>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80061b6:	f000 fb7f 	bl	80068b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80061ba:	2100      	movs	r1, #0
 80061bc:	4809      	ldr	r0, [pc, #36]	; (80061e4 <MX_I2C2_Init+0x74>)
 80061be:	f004 fcb3 	bl	800ab28 <HAL_I2CEx_ConfigAnalogFilter>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80061c8:	f000 fb76 	bl	80068b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80061cc:	2100      	movs	r1, #0
 80061ce:	4805      	ldr	r0, [pc, #20]	; (80061e4 <MX_I2C2_Init+0x74>)
 80061d0:	f004 fcf5 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80061da:	f000 fb6d 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200079a0 	.word	0x200079a0
 80061e8:	40005800 	.word	0x40005800
 80061ec:	10909cec 	.word	0x10909cec

080061f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80061f4:	4b12      	ldr	r3, [pc, #72]	; (8006240 <MX_RTC_Init+0x50>)
 80061f6:	4a13      	ldr	r2, [pc, #76]	; (8006244 <MX_RTC_Init+0x54>)
 80061f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <MX_RTC_Init+0x50>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <MX_RTC_Init+0x50>)
 8006202:	227f      	movs	r2, #127	; 0x7f
 8006204:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <MX_RTC_Init+0x50>)
 8006208:	22ff      	movs	r2, #255	; 0xff
 800620a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <MX_RTC_Init+0x50>)
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <MX_RTC_Init+0x50>)
 8006214:	2200      	movs	r2, #0
 8006216:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006218:	4b09      	ldr	r3, [pc, #36]	; (8006240 <MX_RTC_Init+0x50>)
 800621a:	2200      	movs	r2, #0
 800621c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800621e:	4b08      	ldr	r3, [pc, #32]	; (8006240 <MX_RTC_Init+0x50>)
 8006220:	2200      	movs	r2, #0
 8006222:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006224:	4806      	ldr	r0, [pc, #24]	; (8006240 <MX_RTC_Init+0x50>)
 8006226:	f007 f9a1 	bl	800d56c <HAL_RTC_Init>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006230:	f000 fb42 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_EnableBypassShadow(&hrtc);
 8006234:	4802      	ldr	r0, [pc, #8]	; (8006240 <MX_RTC_Init+0x50>)
 8006236:	f007 fd27 	bl	800dc88 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_Init 2 */

}
 800623a:	bf00      	nop
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20007918 	.word	0x20007918
 8006244:	40002800 	.word	0x40002800

08006248 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <MX_SPI1_Init+0x74>)
 800624e:	4a1c      	ldr	r2, [pc, #112]	; (80062c0 <MX_SPI1_Init+0x78>)
 8006250:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006252:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <MX_SPI1_Init+0x74>)
 8006254:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006258:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800625a:	4b18      	ldr	r3, [pc, #96]	; (80062bc <MX_SPI1_Init+0x74>)
 800625c:	2200      	movs	r2, #0
 800625e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006260:	4b16      	ldr	r3, [pc, #88]	; (80062bc <MX_SPI1_Init+0x74>)
 8006262:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006266:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <MX_SPI1_Init+0x74>)
 800626a:	2200      	movs	r2, #0
 800626c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <MX_SPI1_Init+0x74>)
 8006270:	2200      	movs	r2, #0
 8006272:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <MX_SPI1_Init+0x74>)
 8006276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <MX_SPI1_Init+0x74>)
 800627e:	2228      	movs	r2, #40	; 0x28
 8006280:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006282:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <MX_SPI1_Init+0x74>)
 8006284:	2200      	movs	r2, #0
 8006286:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <MX_SPI1_Init+0x74>)
 800628a:	2200      	movs	r2, #0
 800628c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <MX_SPI1_Init+0x74>)
 8006290:	2200      	movs	r2, #0
 8006292:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <MX_SPI1_Init+0x74>)
 8006296:	2207      	movs	r2, #7
 8006298:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800629a:	4b08      	ldr	r3, [pc, #32]	; (80062bc <MX_SPI1_Init+0x74>)
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <MX_SPI1_Init+0x74>)
 80062a2:	2208      	movs	r2, #8
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80062a6:	4805      	ldr	r0, [pc, #20]	; (80062bc <MX_SPI1_Init+0x74>)
 80062a8:	f007 fd24 	bl	800dcf4 <HAL_SPI_Init>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80062b2:	f000 fb01 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80062b6:	bf00      	nop
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	2000793c 	.word	0x2000793c
 80062c0:	40013000 	.word	0x40013000

080062c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80062c8:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <MX_SPI2_Init+0x74>)
 80062ca:	4a1c      	ldr	r2, [pc, #112]	; (800633c <MX_SPI2_Init+0x78>)
 80062cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <MX_SPI2_Init+0x74>)
 80062d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <MX_SPI2_Init+0x74>)
 80062d8:	2200      	movs	r2, #0
 80062da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80062dc:	4b16      	ldr	r3, [pc, #88]	; (8006338 <MX_SPI2_Init+0x74>)
 80062de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80062e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <MX_SPI2_Init+0x74>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062ea:	4b13      	ldr	r3, [pc, #76]	; (8006338 <MX_SPI2_Init+0x74>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <MX_SPI2_Init+0x74>)
 80062f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80062f8:	4b0f      	ldr	r3, [pc, #60]	; (8006338 <MX_SPI2_Init+0x74>)
 80062fa:	2228      	movs	r2, #40	; 0x28
 80062fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062fe:	4b0e      	ldr	r3, [pc, #56]	; (8006338 <MX_SPI2_Init+0x74>)
 8006300:	2200      	movs	r2, #0
 8006302:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006304:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <MX_SPI2_Init+0x74>)
 8006306:	2200      	movs	r2, #0
 8006308:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <MX_SPI2_Init+0x74>)
 800630c:	2200      	movs	r2, #0
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006310:	4b09      	ldr	r3, [pc, #36]	; (8006338 <MX_SPI2_Init+0x74>)
 8006312:	2207      	movs	r2, #7
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <MX_SPI2_Init+0x74>)
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <MX_SPI2_Init+0x74>)
 800631e:	2208      	movs	r2, #8
 8006320:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006322:	4805      	ldr	r0, [pc, #20]	; (8006338 <MX_SPI2_Init+0x74>)
 8006324:	f007 fce6 	bl	800dcf4 <HAL_SPI_Init>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800632e:	f000 fac3 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	2000202c 	.word	0x2000202c
 800633c:	40003800 	.word	0x40003800

08006340 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006346:	4a1c      	ldr	r2, [pc, #112]	; (80063b8 <MX_SPI3_Init+0x78>)
 8006348:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800634a:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <MX_SPI3_Init+0x74>)
 800634c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006350:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006354:	2200      	movs	r2, #0
 8006356:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <MX_SPI3_Init+0x74>)
 800635a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800635e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006360:	4b14      	ldr	r3, [pc, #80]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006362:	2200      	movs	r2, #0
 8006364:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006366:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006368:	2200      	movs	r2, #0
 800636a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <MX_SPI3_Init+0x74>)
 800636e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006372:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006376:	2220      	movs	r2, #32
 8006378:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <MX_SPI3_Init+0x74>)
 800637c:	2200      	movs	r2, #0
 800637e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006382:	2200      	movs	r2, #0
 8006384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006388:	2200      	movs	r2, #0
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <MX_SPI3_Init+0x74>)
 800638e:	2207      	movs	r2, #7
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006392:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <MX_SPI3_Init+0x74>)
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <MX_SPI3_Init+0x74>)
 800639a:	2208      	movs	r2, #8
 800639c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800639e:	4805      	ldr	r0, [pc, #20]	; (80063b4 <MX_SPI3_Init+0x74>)
 80063a0:	f007 fca8 	bl	800dcf4 <HAL_SPI_Init>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80063aa:	f000 fa85 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2000644c 	.word	0x2000644c
 80063b8:	40003c00 	.word	0x40003c00

080063bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063c2:	f107 031c 	add.w	r3, r7, #28
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	605a      	str	r2, [r3, #4]
 80063cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063ce:	463b      	mov	r3, r7
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	609a      	str	r2, [r3, #8]
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	611a      	str	r2, [r3, #16]
 80063dc:	615a      	str	r2, [r3, #20]
 80063de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80063e0:	4b23      	ldr	r3, [pc, #140]	; (8006470 <MX_TIM2_Init+0xb4>)
 80063e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80063e8:	4b21      	ldr	r3, [pc, #132]	; (8006470 <MX_TIM2_Init+0xb4>)
 80063ea:	2202      	movs	r2, #2
 80063ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063ee:	4b20      	ldr	r3, [pc, #128]	; (8006470 <MX_TIM2_Init+0xb4>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80063f4:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <MX_TIM2_Init+0xb4>)
 80063f6:	2232      	movs	r2, #50	; 0x32
 80063f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <MX_TIM2_Init+0xb4>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006400:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <MX_TIM2_Init+0xb4>)
 8006402:	2200      	movs	r2, #0
 8006404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006406:	481a      	ldr	r0, [pc, #104]	; (8006470 <MX_TIM2_Init+0xb4>)
 8006408:	f008 fcd8 	bl	800edbc <HAL_TIM_PWM_Init>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8006412:	f000 fa51 	bl	80068b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800641a:	2300      	movs	r3, #0
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800641e:	f107 031c 	add.w	r3, r7, #28
 8006422:	4619      	mov	r1, r3
 8006424:	4812      	ldr	r0, [pc, #72]	; (8006470 <MX_TIM2_Init+0xb4>)
 8006426:	f009 fc15 	bl	800fc54 <HAL_TIMEx_MasterConfigSynchronization>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006430:	f000 fa42 	bl	80068b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006434:	2360      	movs	r3, #96	; 0x60
 8006436:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8006438:	2332      	movs	r3, #50	; 0x32
 800643a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800643c:	2300      	movs	r3, #0
 800643e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006444:	463b      	mov	r3, r7
 8006446:	2200      	movs	r2, #0
 8006448:	4619      	mov	r1, r3
 800644a:	4809      	ldr	r0, [pc, #36]	; (8006470 <MX_TIM2_Init+0xb4>)
 800644c:	f008 ff34 	bl	800f2b8 <HAL_TIM_PWM_ConfigChannel>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8006456:	f000 fa2f 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800645a:	2100      	movs	r1, #0
 800645c:	4804      	ldr	r0, [pc, #16]	; (8006470 <MX_TIM2_Init+0xb4>)
 800645e:	f008 fd05 	bl	800ee6c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006462:	4803      	ldr	r0, [pc, #12]	; (8006470 <MX_TIM2_Init+0xb4>)
 8006464:	f000 fef4 	bl	8007250 <HAL_TIM_MspPostInit>

}
 8006468:	bf00      	nop
 800646a:	3728      	adds	r7, #40	; 0x28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20007d10 	.word	0x20007d10

08006474 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800647a:	f107 031c 	add.w	r3, r7, #28
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006486:	463b      	mov	r3, r7
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	611a      	str	r2, [r3, #16]
 8006494:	615a      	str	r2, [r3, #20]
 8006496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <MX_TIM4_Init+0xac>)
 800649a:	4a22      	ldr	r2, [pc, #136]	; (8006524 <MX_TIM4_Init+0xb0>)
 800649c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <MX_TIM4_Init+0xac>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064a4:	4b1e      	ldr	r3, [pc, #120]	; (8006520 <MX_TIM4_Init+0xac>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80064aa:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <MX_TIM4_Init+0xac>)
 80064ac:	2264      	movs	r2, #100	; 0x64
 80064ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064b0:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <MX_TIM4_Init+0xac>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064b6:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <MX_TIM4_Init+0xac>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80064bc:	4818      	ldr	r0, [pc, #96]	; (8006520 <MX_TIM4_Init+0xac>)
 80064be:	f008 fc7d 	bl	800edbc <HAL_TIM_PWM_Init>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80064c8:	f000 f9f6 	bl	80068b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80064d4:	f107 031c 	add.w	r3, r7, #28
 80064d8:	4619      	mov	r1, r3
 80064da:	4811      	ldr	r0, [pc, #68]	; (8006520 <MX_TIM4_Init+0xac>)
 80064dc:	f009 fbba 	bl	800fc54 <HAL_TIMEx_MasterConfigSynchronization>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80064e6:	f000 f9e7 	bl	80068b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064ea:	2360      	movs	r3, #96	; 0x60
 80064ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064fa:	463b      	mov	r3, r7
 80064fc:	2204      	movs	r2, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4807      	ldr	r0, [pc, #28]	; (8006520 <MX_TIM4_Init+0xac>)
 8006502:	f008 fed9 	bl	800f2b8 <HAL_TIM_PWM_ConfigChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800650c:	f000 f9d4 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006510:	4803      	ldr	r0, [pc, #12]	; (8006520 <MX_TIM4_Init+0xac>)
 8006512:	f000 fe9d 	bl	8007250 <HAL_TIM_MspPostInit>

}
 8006516:	bf00      	nop
 8006518:	3728      	adds	r7, #40	; 0x28
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20007cc4 	.word	0x20007cc4
 8006524:	40000800 	.word	0x40000800

08006528 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006538:	4b14      	ldr	r3, [pc, #80]	; (800658c <MX_TIM6_Init+0x64>)
 800653a:	4a15      	ldr	r2, [pc, #84]	; (8006590 <MX_TIM6_Init+0x68>)
 800653c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <MX_TIM6_Init+0x64>)
 8006540:	2202      	movs	r2, #2
 8006542:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006544:	4b11      	ldr	r3, [pc, #68]	; (800658c <MX_TIM6_Init+0x64>)
 8006546:	2200      	movs	r2, #0
 8006548:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1666;
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <MX_TIM6_Init+0x64>)
 800654c:	f240 6282 	movw	r2, #1666	; 0x682
 8006550:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006552:	4b0e      	ldr	r3, [pc, #56]	; (800658c <MX_TIM6_Init+0x64>)
 8006554:	2200      	movs	r2, #0
 8006556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006558:	480c      	ldr	r0, [pc, #48]	; (800658c <MX_TIM6_Init+0x64>)
 800655a:	f008 fad7 	bl	800eb0c <HAL_TIM_Base_Init>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8006564:	f000 f9a8 	bl	80068b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006568:	2320      	movs	r3, #32
 800656a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4805      	ldr	r0, [pc, #20]	; (800658c <MX_TIM6_Init+0x64>)
 8006576:	f009 fb6d 	bl	800fc54 <HAL_TIMEx_MasterConfigSynchronization>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8006580:	f000 f99a 	bl	80068b8 <Error_Handler>
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//    HAL_TIM_Base_Start_IT(&htim6);
 //   HAL_TIM_Base_Start(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20007c78 	.word	0x20007c78
 8006590:	40001000 	.word	0x40001000

08006594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <MX_USART1_UART_Init+0x68>)
 800659a:	4a19      	ldr	r2, [pc, #100]	; (8006600 <MX_USART1_UART_Init+0x6c>)
 800659c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80065a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80065b2:	4b12      	ldr	r3, [pc, #72]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065ba:	220c      	movs	r2, #12
 80065bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065ca:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80065d6:	4809      	ldr	r0, [pc, #36]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065d8:	f009 fbe2 	bl	800fda0 <HAL_UART_Init>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80065e2:	f000 f969 	bl	80068b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <MX_USART1_UART_Init+0x68>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0220 	orr.w	r2, r2, #32
 80065f4:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20007b10 	.word	0x20007b10
 8006600:	40013800 	.word	0x40013800

08006604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <MX_DMA_Init+0x58>)
 800660c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660e:	4a13      	ldr	r2, [pc, #76]	; (800665c <MX_DMA_Init+0x58>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	6493      	str	r3, [r2, #72]	; 0x48
 8006616:	4b11      	ldr	r3, [pc, #68]	; (800665c <MX_DMA_Init+0x58>)
 8006618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	607b      	str	r3, [r7, #4]
 8006620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	200b      	movs	r0, #11
 8006628:	f002 fe82 	bl	8009330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800662c:	200b      	movs	r0, #11
 800662e:	f002 fe9b 	bl	8009368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	200c      	movs	r0, #12
 8006638:	f002 fe7a 	bl	8009330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800663c:	200c      	movs	r0, #12
 800663e:	f002 fe93 	bl	8009368 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	200e      	movs	r0, #14
 8006648:	f002 fe72 	bl	8009330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800664c:	200e      	movs	r0, #14
 800664e:	f002 fe8b 	bl	8009368 <HAL_NVIC_EnableIRQ>

}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40021000 	.word	0x40021000

08006660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08c      	sub	sp, #48	; 0x30
 8006664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006666:	f107 031c 	add.w	r3, r7, #28
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	609a      	str	r2, [r3, #8]
 8006672:	60da      	str	r2, [r3, #12]
 8006674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006676:	4b71      	ldr	r3, [pc, #452]	; (800683c <MX_GPIO_Init+0x1dc>)
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	4a70      	ldr	r2, [pc, #448]	; (800683c <MX_GPIO_Init+0x1dc>)
 800667c:	f043 0310 	orr.w	r3, r3, #16
 8006680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006682:	4b6e      	ldr	r3, [pc, #440]	; (800683c <MX_GPIO_Init+0x1dc>)
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800668e:	4b6b      	ldr	r3, [pc, #428]	; (800683c <MX_GPIO_Init+0x1dc>)
 8006690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006692:	4a6a      	ldr	r2, [pc, #424]	; (800683c <MX_GPIO_Init+0x1dc>)
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800669a:	4b68      	ldr	r3, [pc, #416]	; (800683c <MX_GPIO_Init+0x1dc>)
 800669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066a6:	4b65      	ldr	r3, [pc, #404]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066aa:	4a64      	ldr	r2, [pc, #400]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066b2:	4b62      	ldr	r3, [pc, #392]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066be:	4b5f      	ldr	r3, [pc, #380]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	4a5e      	ldr	r2, [pc, #376]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ca:	4b5c      	ldr	r3, [pc, #368]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066d6:	4b59      	ldr	r3, [pc, #356]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	4a58      	ldr	r2, [pc, #352]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066dc:	f043 0302 	orr.w	r3, r3, #2
 80066e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066e2:	4b56      	ldr	r3, [pc, #344]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ee:	4b53      	ldr	r3, [pc, #332]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f2:	4a52      	ldr	r2, [pc, #328]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066f4:	f043 0308 	orr.w	r3, r3, #8
 80066f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066fa:	4b50      	ldr	r3, [pc, #320]	; (800683c <MX_GPIO_Init+0x1dc>)
 80066fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8006706:	2200      	movs	r2, #0
 8006708:	2115      	movs	r1, #21
 800670a:	484d      	ldr	r0, [pc, #308]	; (8006840 <MX_GPIO_Init+0x1e0>)
 800670c:	f003 fd78 	bl	800a200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin, GPIO_PIN_RESET);
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8006716:	484b      	ldr	r0, [pc, #300]	; (8006844 <MX_GPIO_Init+0x1e4>)
 8006718:	f003 fd72 	bl	800a200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 800671c:	2200      	movs	r2, #0
 800671e:	f241 3126 	movw	r1, #4902	; 0x1326
 8006722:	4849      	ldr	r0, [pc, #292]	; (8006848 <MX_GPIO_Init+0x1e8>)
 8006724:	f003 fd6c 	bl	800a200 <HAL_GPIO_WritePin>
                          |I2C_ADDR_Pin|LCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 8006728:	2200      	movs	r2, #0
 800672a:	f24c 014c 	movw	r1, #49228	; 0xc04c
 800672e:	4847      	ldr	r0, [pc, #284]	; (800684c <MX_GPIO_Init+0x1ec>)
 8006730:	f003 fd66 	bl	800a200 <HAL_GPIO_WritePin>
                          |LCD_BL_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_ARK_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8006734:	2315      	movs	r3, #21
 8006736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006738:	2301      	movs	r3, #1
 800673a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006740:	2300      	movs	r3, #0
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006744:	f107 031c 	add.w	r3, r7, #28
 8006748:	4619      	mov	r1, r3
 800674a:	483d      	ldr	r0, [pc, #244]	; (8006840 <MX_GPIO_Init+0x1e0>)
 800674c:	f003 fbae 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pin : Reserved_Pin */
  GPIO_InitStruct.Pin = Reserved_Pin;
 8006750:	2308      	movs	r3, #8
 8006752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006754:	2300      	movs	r3, #0
 8006756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006758:	2300      	movs	r3, #0
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reserved_GPIO_Port, &GPIO_InitStruct);
 800675c:	f107 031c 	add.w	r3, r7, #28
 8006760:	4619      	mov	r1, r3
 8006762:	4837      	ldr	r0, [pc, #220]	; (8006840 <MX_GPIO_Init+0x1e0>)
 8006764:	f003 fba2 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800676c:	2300      	movs	r3, #0
 800676e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006770:	2302      	movs	r3, #2
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006774:	f107 031c 	add.w	r3, r7, #28
 8006778:	4619      	mov	r1, r3
 800677a:	4831      	ldr	r0, [pc, #196]	; (8006840 <MX_GPIO_Init+0x1e0>)
 800677c:	f003 fb96 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDYB_Pin */
  GPIO_InitStruct.Pin = ADC_RDYB_Pin;
 8006780:	2310      	movs	r3, #16
 8006782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006784:	4b32      	ldr	r3, [pc, #200]	; (8006850 <MX_GPIO_Init+0x1f0>)
 8006786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006788:	2300      	movs	r3, #0
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_RDYB_GPIO_Port, &GPIO_InitStruct);
 800678c:	f107 031c 	add.w	r3, r7, #28
 8006790:	4619      	mov	r1, r3
 8006792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006796:	f003 fb89 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin EN_AV6_Pin EN_V24_Pin EN_LCD_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin;
 800679a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800679e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067a0:	2301      	movs	r3, #1
 80067a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a8:	2300      	movs	r3, #0
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067ac:	f107 031c 	add.w	r3, r7, #28
 80067b0:	4619      	mov	r1, r3
 80067b2:	4824      	ldr	r0, [pc, #144]	; (8006844 <MX_GPIO_Init+0x1e4>)
 80067b4:	f003 fb7a 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_P_Pin */
  GPIO_InitStruct.Pin = SW_P_Pin;
 80067b8:	2320      	movs	r3, #32
 80067ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80067bc:	4b25      	ldr	r3, [pc, #148]	; (8006854 <MX_GPIO_Init+0x1f4>)
 80067be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_P_GPIO_Port, &GPIO_InitStruct);
 80067c4:	f107 031c 	add.w	r3, r7, #28
 80067c8:	4619      	mov	r1, r3
 80067ca:	481e      	ldr	r0, [pc, #120]	; (8006844 <MX_GPIO_Init+0x1e4>)
 80067cc:	f003 fb6e 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pin : I_P_ERROR_Pin */
  GPIO_InitStruct.Pin = I_P_ERROR_Pin;
 80067d0:	2301      	movs	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80067d4:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <MX_GPIO_Init+0x1f4>)
 80067d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I_P_ERROR_GPIO_Port, &GPIO_InitStruct);
 80067dc:	f107 031c 	add.w	r3, r7, #28
 80067e0:	4619      	mov	r1, r3
 80067e2:	4819      	ldr	r0, [pc, #100]	; (8006848 <MX_GPIO_Init+0x1e8>)
 80067e4:	f003 fb62 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_EN_Pin INT_CHARGER_Pin LCD_SPI_CS_Pin PB5
                           I2C_ADDR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 80067e8:	f241 3326 	movw	r3, #4902	; 0x1326
 80067ec:	61fb      	str	r3, [r7, #28]
                          |I2C_ADDR_Pin|LCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067ee:	2301      	movs	r3, #1
 80067f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067f6:	2300      	movs	r3, #0
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067fa:	f107 031c 	add.w	r3, r7, #28
 80067fe:	4619      	mov	r1, r3
 8006800:	4811      	ldr	r0, [pc, #68]	; (8006848 <MX_GPIO_Init+0x1e8>)
 8006802:	f003 fb53 	bl	8009eac <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LCD_reserv_Pin EN_AV6_reserv_Pin MEM1_CS_Pin MEM2_CS_Pin
                           LCD_BL_EN2_Pin */
  GPIO_InitStruct.Pin = EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 8006806:	f24c 034c 	movw	r3, #49228	; 0xc04c
 800680a:	61fb      	str	r3, [r7, #28]
                          |LCD_BL_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800680c:	2301      	movs	r3, #1
 800680e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006814:	2300      	movs	r3, #0
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006818:	f107 031c 	add.w	r3, r7, #28
 800681c:	4619      	mov	r1, r3
 800681e:	480b      	ldr	r0, [pc, #44]	; (800684c <MX_GPIO_Init+0x1ec>)
 8006820:	f003 fb44 	bl	8009eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006824:	2200      	movs	r2, #0
 8006826:	2100      	movs	r1, #0
 8006828:	200a      	movs	r0, #10
 800682a:	f002 fd81 	bl	8009330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800682e:	200a      	movs	r0, #10
 8006830:	f002 fd9a 	bl	8009368 <HAL_NVIC_EnableIRQ>

}
 8006834:	bf00      	nop
 8006836:	3730      	adds	r7, #48	; 0x30
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40021000 	.word	0x40021000
 8006840:	48001000 	.word	0x48001000
 8006844:	48000800 	.word	0x48000800
 8006848:	48000400 	.word	0x48000400
 800684c:	48000c00 	.word	0x48000c00
 8006850:	10210000 	.word	0x10210000
 8006854:	10110000 	.word	0x10110000

08006858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	ELSPIRE_OS_TIMER();
 8006860:	f7fc fb48 	bl	8002ef4 <ELSPIRE_OS_TIMER>

	Buttons_timer();
 8006864:	f7fc f81e 	bl	80028a4 <Buttons_timer>
	Blink_Edit_Parameter_timer();
 8006868:	f7fc f9ae 	bl	8002bc8 <Blink_Edit_Parameter_timer>
	menu_timer();
 800686c:	f012 f9a8 	bl	8018bc0 <menu_timer>
	Viewer_timer();
 8006870:	f011 f948 	bl	8017b04 <Viewer_timer>
	Light_OFF_process();
 8006874:	f010 fd2c 	bl	80172d0 <Light_OFF_process>
	if(rx_cmplt>0)rx_cmplt--;
 8006878:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800687a:	f993 3000 	ldrsb.w	r3, [r3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd08      	ble.n	8006894 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006884:	f993 3000 	ldrsb.w	r3, [r3]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	b25a      	sxtb	r2, r3
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006892:	701a      	strb	r2, [r3, #0]
	spi_timeout();
 8006894:	f001 f80a 	bl	80078ac <spi_timeout>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a05      	ldr	r2, [pc, #20]	; (80068b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 80068a2:	f001 f9a3 	bl	8007bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000956 	.word	0x20000956
 80068b4:	40012c00 	.word	0x40012c00

080068b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80068bc:	b672      	cpsid	i
}
 80068be:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // Если попали сюда, то делаем программный сброс контроллера
	  SCB->AIRCR = 0x05FA0004;
 80068c0:	4b01      	ldr	r3, [pc, #4]	; (80068c8 <Error_Handler+0x10>)
 80068c2:	4a02      	ldr	r2, [pc, #8]	; (80068cc <Error_Handler+0x14>)
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	e7fb      	b.n	80068c0 <Error_Handler+0x8>
 80068c8:	e000ed00 	.word	0xe000ed00
 80068cc:	05fa0004 	.word	0x05fa0004

080068d0 <Play_Sound>:
uint32_t wavcounter=0;



void Play_Sound(char*name)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
	//uint8_t path[11] = "AUDIO_5.WAV";
	uint16_t i;

	// Открываем файл

	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 80068d8:	2200      	movs	r2, #0
 80068da:	4934      	ldr	r1, [pc, #208]	; (80069ac <Play_Sound+0xdc>)
 80068dc:	4834      	ldr	r0, [pc, #208]	; (80069b0 <Play_Sound+0xe0>)
 80068de:	f00d f9e9 	bl	8013cb4 <f_mount>
	f_open(&MyFile, (char*)name, FA_READ|FA_OPEN_ALWAYS);
 80068e2:	2211      	movs	r2, #17
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4833      	ldr	r0, [pc, #204]	; (80069b4 <Play_Sound+0xe4>)
 80068e8:	f00d fa2a 	bl	8013d40 <f_open>
	f_read(&MyFile, sound_buf, WAV_BUF_SIZE, &testBytes);
 80068ec:	4b32      	ldr	r3, [pc, #200]	; (80069b8 <Play_Sound+0xe8>)
 80068ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f2:	4932      	ldr	r1, [pc, #200]	; (80069bc <Play_Sound+0xec>)
 80068f4:	482f      	ldr	r0, [pc, #188]	; (80069b4 <Play_Sound+0xe4>)
 80068f6:	f00d fbe1 	bl	80140bc <f_read>

	// Находим начало данных
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	81fb      	strh	r3, [r7, #14]
 80068fe:	e01f      	b.n	8006940 <Play_Sound+0x70>
	{
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 8006900:	89fb      	ldrh	r3, [r7, #14]
 8006902:	4a2e      	ldr	r2, [pc, #184]	; (80069bc <Play_Sound+0xec>)
 8006904:	5cd3      	ldrb	r3, [r2, r3]
 8006906:	2b64      	cmp	r3, #100	; 0x64
 8006908:	d117      	bne.n	800693a <Play_Sound+0x6a>
 800690a:	89fb      	ldrh	r3, [r7, #14]
 800690c:	3301      	adds	r3, #1
 800690e:	4a2b      	ldr	r2, [pc, #172]	; (80069bc <Play_Sound+0xec>)
 8006910:	5cd3      	ldrb	r3, [r2, r3]
 8006912:	2b61      	cmp	r3, #97	; 0x61
 8006914:	d111      	bne.n	800693a <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 8006916:	89fb      	ldrh	r3, [r7, #14]
 8006918:	3302      	adds	r3, #2
 800691a:	4a28      	ldr	r2, [pc, #160]	; (80069bc <Play_Sound+0xec>)
 800691c:	5cd3      	ldrb	r3, [r2, r3]
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 800691e:	2b74      	cmp	r3, #116	; 0x74
 8006920:	d10b      	bne.n	800693a <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	3303      	adds	r3, #3
 8006926:	4a25      	ldr	r2, [pc, #148]	; (80069bc <Play_Sound+0xec>)
 8006928:	5cd3      	ldrb	r3, [r2, r3]
 800692a:	2b61      	cmp	r3, #97	; 0x61
 800692c:	d105      	bne.n	800693a <Play_Sound+0x6a>
	    {
	        dataOffset = i + 8;
 800692e:	89fb      	ldrh	r3, [r7, #14]
 8006930:	3308      	adds	r3, #8
 8006932:	b29a      	uxth	r2, r3
 8006934:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <Play_Sound+0xf0>)
 8006936:	801a      	strh	r2, [r3, #0]
	        break;
 8006938:	e006      	b.n	8006948 <Play_Sound+0x78>
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	3301      	adds	r3, #1
 800693e:	81fb      	strh	r3, [r7, #14]
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8006946:	d9db      	bls.n	8006900 <Play_Sound+0x30>
	    }
	}

	//  перемещаем указатель FatFs
	f_lseek(&MyFile, dataOffset);
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <Play_Sound+0xf0>)
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	4619      	mov	r1, r3
 800694e:	4819      	ldr	r0, [pc, #100]	; (80069b4 <Play_Sound+0xe4>)
 8006950:	f00d ff10 	bl	8014774 <f_lseek>
	// определяем количество байт данных
	wavDataSize = f_size(&MyFile) - dataOffset;
 8006954:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <Play_Sound+0xe4>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <Play_Sound+0xf0>)
 800695a:	8812      	ldrh	r2, [r2, #0]
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <Play_Sound+0xf4>)
 8006960:	6013      	str	r3, [r2, #0]

	// Заполняем оба буфера данными
	f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <Play_Sound+0xe8>)
 8006964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006968:	4914      	ldr	r1, [pc, #80]	; (80069bc <Play_Sound+0xec>)
 800696a:	4812      	ldr	r0, [pc, #72]	; (80069b4 <Play_Sound+0xe4>)
 800696c:	f00d fba6 	bl	80140bc <f_read>

	ReadComplete=1;
 8006970:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <Play_Sound+0xf8>)
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]

	TURN_ON_SOUND();
 8006976:	2201      	movs	r2, #1
 8006978:	2102      	movs	r1, #2
 800697a:	4814      	ldr	r0, [pc, #80]	; (80069cc <Play_Sound+0xfc>)
 800697c:	f003 fc40 	bl	800a200 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim6);
 8006980:	4813      	ldr	r0, [pc, #76]	; (80069d0 <Play_Sound+0x100>)
 8006982:	f008 f91b 	bl	800ebbc <HAL_TIM_Base_Start>
	DMA1_Channel4->CCR |= (DMA_CCR_TCIE_Msk);
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <Play_Sound+0x104>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <Play_Sound+0x104>)
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	6013      	str	r3, [r2, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf[0], WAV_BUF_SIZE, DAC_ALIGN_8B_R);
 8006992:	2308      	movs	r3, #8
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699a:	4a08      	ldr	r2, [pc, #32]	; (80069bc <Play_Sound+0xec>)
 800699c:	2110      	movs	r1, #16
 800699e:	480e      	ldr	r0, [pc, #56]	; (80069d8 <Play_Sound+0x108>)
 80069a0:	f002 fd12 	bl	80093c8 <HAL_DAC_Start_DMA>
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20008814 	.word	0x20008814
 80069b0:	200076e0 	.word	0x200076e0
 80069b4:	200074b0 	.word	0x200074b0
 80069b8:	20007910 	.word	0x20007910
 80069bc:	20007d60 	.word	0x20007d60
 80069c0:	20000990 	.word	0x20000990
 80069c4:	20000994 	.word	0x20000994
 80069c8:	20000998 	.word	0x20000998
 80069cc:	48000400 	.word	0x48000400
 80069d0:	20007c78 	.word	0x20007c78
 80069d4:	40020044 	.word	0x40020044
 80069d8:	20007c64 	.word	0x20007c64

080069dc <StartReadNextSoundBuf>:


void StartReadNextSoundBuf(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
	if((DMA1->ISR&DMA_ISR_TCIF4_Msk)!=0)
 80069e0:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <StartReadNextSoundBuf+0x68>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d028      	beq.n	8006a3e <StartReadNextSoundBuf+0x62>
	{

		ReadComplete=0;
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <StartReadNextSoundBuf+0x6c>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
		if(buf_num==1)buf_num=0;
 80069f2:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <StartReadNextSoundBuf+0x70>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d103      	bne.n	8006a02 <StartReadNextSoundBuf+0x26>
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <StartReadNextSoundBuf+0x70>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e002      	b.n	8006a08 <StartReadNextSoundBuf+0x2c>
		else buf_num=1;
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <StartReadNextSoundBuf+0x70>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]

		DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <StartReadNextSoundBuf+0x74>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a10      	ldr	r2, [pc, #64]	; (8006a50 <StartReadNextSoundBuf+0x74>)
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CMAR=(uint32_t)sound_buf[buf_num];
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <StartReadNextSoundBuf+0x70>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	025b      	lsls	r3, r3, #9
 8006a1a:	4a0e      	ldr	r2, [pc, #56]	; (8006a54 <StartReadNextSoundBuf+0x78>)
 8006a1c:	441a      	add	r2, r3
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <StartReadNextSoundBuf+0x74>)
 8006a20:	60da      	str	r2, [r3, #12]
		//DMA1_Channel4->CNDTR=(uint32_t)WAV_BUF_SIZE;
		DMA1_Channel4->CCR |= (1 << DMA_CCR_EN_Pos);
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <StartReadNextSoundBuf+0x74>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <StartReadNextSoundBuf+0x74>)
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]

		wavcounter+=WAV_BUF_SIZE;
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <StartReadNextSoundBuf+0x7c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a36:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <StartReadNextSoundBuf+0x7c>)
 8006a38:	6013      	str	r3, [r2, #0]
		Sound_process();
 8006a3a:	f000 f80f 	bl	8006a5c <Sound_process>
	}
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40020000 	.word	0x40020000
 8006a48:	20000998 	.word	0x20000998
 8006a4c:	20000992 	.word	0x20000992
 8006a50:	40020044 	.word	0x40020044
 8006a54:	20007d60 	.word	0x20007d60
 8006a58:	2000099c 	.word	0x2000099c

08006a5c <Sound_process>:


void Sound_process(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	80fb      	strh	r3, [r7, #6]
	uint8_t sign=0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	717b      	strb	r3, [r7, #5]
	if(ReadComplete==0)
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <Sound_process+0x7c>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12d      	bne.n	8006ace <Sound_process+0x72>
	{
		if(wavDataSize>wavcounter)
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <Sound_process+0x80>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <Sound_process+0x84>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d913      	bls.n	8006aa6 <Sound_process+0x4a>
		{
			if(buf_num==0)
 8006a7e:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <Sound_process+0x88>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d107      	bne.n	8006a96 <Sound_process+0x3a>
			{
				f_read(&MyFile, sound_buf[1], WAV_BUF_SIZE, &testBytes);
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <Sound_process+0x8c>)
 8006a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8c:	4917      	ldr	r1, [pc, #92]	; (8006aec <Sound_process+0x90>)
 8006a8e:	4818      	ldr	r0, [pc, #96]	; (8006af0 <Sound_process+0x94>)
 8006a90:	f00d fb14 	bl	80140bc <f_read>
 8006a94:	e018      	b.n	8006ac8 <Sound_process+0x6c>
//					sound_buf[0][i]=(sound_buf[0][i])&0xFF;
//				}
			}
			else
			{
				f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <Sound_process+0x8c>)
 8006a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a9c:	4915      	ldr	r1, [pc, #84]	; (8006af4 <Sound_process+0x98>)
 8006a9e:	4814      	ldr	r0, [pc, #80]	; (8006af0 <Sound_process+0x94>)
 8006aa0:	f00d fb0c 	bl	80140bc <f_read>
 8006aa4:	e010      	b.n	8006ac8 <Sound_process+0x6c>
//				}
			}
		}
		else
		{
			TURN_OFF_SOUND();
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4813      	ldr	r0, [pc, #76]	; (8006af8 <Sound_process+0x9c>)
 8006aac:	f003 fba8 	bl	800a200 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop(&htim6);
 8006ab0:	4812      	ldr	r0, [pc, #72]	; (8006afc <Sound_process+0xa0>)
 8006ab2:	f008 f8eb 	bl	800ec8c <HAL_TIM_Base_Stop>
			DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <Sound_process+0xa4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <Sound_process+0xa4>)
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6013      	str	r3, [r2, #0]
			f_close(&MyFile);
 8006ac2:	480b      	ldr	r0, [pc, #44]	; (8006af0 <Sound_process+0x94>)
 8006ac4:	f00d fe2c 	bl	8014720 <f_close>
		}
		ReadComplete=1;
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <Sound_process+0x7c>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
	}

//	sleep(1);
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000998 	.word	0x20000998
 8006adc:	20000994 	.word	0x20000994
 8006ae0:	2000099c 	.word	0x2000099c
 8006ae4:	20000992 	.word	0x20000992
 8006ae8:	20007910 	.word	0x20007910
 8006aec:	20007f60 	.word	0x20007f60
 8006af0:	200074b0 	.word	0x200074b0
 8006af4:	20007d60 	.word	0x20007d60
 8006af8:	48000400 	.word	0x48000400
 8006afc:	20007c78 	.word	0x20007c78
 8006b00:	40020044 	.word	0x40020044

08006b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <HAL_MspInit+0x44>)
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0e:	4a0e      	ldr	r2, [pc, #56]	; (8006b48 <HAL_MspInit+0x44>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6613      	str	r3, [r2, #96]	; 0x60
 8006b16:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <HAL_MspInit+0x44>)
 8006b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b22:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <HAL_MspInit+0x44>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b26:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <HAL_MspInit+0x44>)
 8006b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_MspInit+0x44>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40021000 	.word	0x40021000

08006b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b0ae      	sub	sp, #184	; 0xb8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b64:	f107 0318 	add.w	r3, r7, #24
 8006b68:	228c      	movs	r2, #140	; 0x8c
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f016 fadf 	bl	801d130 <memset>
  if(hadc->Instance==ADC1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a66      	ldr	r2, [pc, #408]	; (8006d10 <HAL_ADC_MspInit+0x1c4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d152      	bne.n	8006c22 <HAL_ADC_MspInit+0xd6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006b7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006b82:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b8a:	f107 0318 	add.w	r3, r7, #24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f006 f810 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8006b9a:	f7ff fe8d 	bl	80068b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8006b9e:	4b5d      	ldr	r3, [pc, #372]	; (8006d14 <HAL_ADC_MspInit+0x1c8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a5b      	ldr	r2, [pc, #364]	; (8006d14 <HAL_ADC_MspInit+0x1c8>)
 8006ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006ba8:	4b5a      	ldr	r3, [pc, #360]	; (8006d14 <HAL_ADC_MspInit+0x1c8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10b      	bne.n	8006bc8 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006bb0:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb4:	4a58      	ldr	r2, [pc, #352]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006bb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bbc:	4b56      	ldr	r3, [pc, #344]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006bc8:	4b54      	ldr	r3, [pc, #336]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bca:	4a55      	ldr	r2, [pc, #340]	; (8006d20 <HAL_ADC_MspInit+0x1d4>)
 8006bcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006bce:	4b53      	ldr	r3, [pc, #332]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd4:	4b51      	ldr	r3, [pc, #324]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bda:	4b50      	ldr	r3, [pc, #320]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006be0:	4b4e      	ldr	r3, [pc, #312]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006be2:	2280      	movs	r2, #128	; 0x80
 8006be4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006be6:	4b4d      	ldr	r3, [pc, #308]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bee:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bf4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bf6:	4b49      	ldr	r3, [pc, #292]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bfc:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006c04:	4845      	ldr	r0, [pc, #276]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006c06:	f002 fedb 	bl	80099c0 <HAL_DMA_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8006c10:	f7ff fe52 	bl	80068b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a41      	ldr	r2, [pc, #260]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006c18:	651a      	str	r2, [r3, #80]	; 0x50
 8006c1a:	4a40      	ldr	r2, [pc, #256]	; (8006d1c <HAL_ADC_MspInit+0x1d0>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c20:	e072      	b.n	8006d08 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a3f      	ldr	r2, [pc, #252]	; (8006d24 <HAL_ADC_MspInit+0x1d8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d16d      	bne.n	8006d08 <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006c32:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c3a:	f107 0318 	add.w	r3, r7, #24
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f005 ffb8 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_ADC_MspInit+0x102>
      Error_Handler();
 8006c4a:	f7ff fe35 	bl	80068b8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006c4e:	4b31      	ldr	r3, [pc, #196]	; (8006d14 <HAL_ADC_MspInit+0x1c8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	4a2f      	ldr	r2, [pc, #188]	; (8006d14 <HAL_ADC_MspInit+0x1c8>)
 8006c56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006c58:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <HAL_ADC_MspInit+0x1c8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10b      	bne.n	8006c78 <HAL_ADC_MspInit+0x12c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006c60:	4b2d      	ldr	r3, [pc, #180]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006c66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c78:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7c:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c84:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <HAL_ADC_MspInit+0x1cc>)
 8006c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006c90:	2308      	movs	r3, #8
 8006c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006c96:	230b      	movs	r3, #11
 8006c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cac:	f003 f8fe 	bl	8009eac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8006cb0:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <HAL_ADC_MspInit+0x1e0>)
 8006cb4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006cc8:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cca:	2280      	movs	r2, #128	; 0x80
 8006ccc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cdc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006cde:	4b12      	ldr	r3, [pc, #72]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006ce4:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006cec:	480e      	ldr	r0, [pc, #56]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006cee:	f002 fe67 	bl	80099c0 <HAL_DMA_Init>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8006cf8:	f7ff fdde 	bl	80068b8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006d00:	651a      	str	r2, [r3, #80]	; 0x50
 8006d02:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <HAL_ADC_MspInit+0x1dc>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006d08:	bf00      	nop
 8006d0a:	37b8      	adds	r7, #184	; 0xb8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	50040000 	.word	0x50040000
 8006d14:	200009a0 	.word	0x200009a0
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	20007a38 	.word	0x20007a38
 8006d20:	40020008 	.word	0x40020008
 8006d24:	50040100 	.word	0x50040100
 8006d28:	20007a80 	.word	0x20007a80
 8006d2c:	4002001c 	.word	0x4002001c

08006d30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2e      	ldr	r2, [pc, #184]	; (8006e08 <HAL_DAC_MspInit+0xd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d156      	bne.n	8006e00 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006d52:	4b2e      	ldr	r3, [pc, #184]	; (8006e0c <HAL_DAC_MspInit+0xdc>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	4a2d      	ldr	r2, [pc, #180]	; (8006e0c <HAL_DAC_MspInit+0xdc>)
 8006d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d5e:	4b2b      	ldr	r3, [pc, #172]	; (8006e0c <HAL_DAC_MspInit+0xdc>)
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d6a:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <HAL_DAC_MspInit+0xdc>)
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6e:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <HAL_DAC_MspInit+0xdc>)
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d76:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <HAL_DAC_MspInit+0xdc>)
 8006d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 8006d82:	2320      	movs	r3, #32
 8006d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d86:	2303      	movs	r3, #3
 8006d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8006d8e:	f107 0314 	add.w	r3, r7, #20
 8006d92:	4619      	mov	r1, r3
 8006d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d98:	f003 f888 	bl	8009eac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006d9e:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <HAL_DAC_MspInit+0xe4>)
 8006da0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006da4:	2205      	movs	r2, #5
 8006da6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006daa:	2210      	movs	r2, #16
 8006dac:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006db6:	2280      	movs	r2, #128	; 0x80
 8006db8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dc0:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006dc8:	2220      	movs	r2, #32
 8006dca:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006dcc:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006dd4:	480e      	ldr	r0, [pc, #56]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006dd6:	f002 fdf3 	bl	80099c0 <HAL_DMA_Init>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8006de0:	f7ff fd6a 	bl	80068b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <HAL_DAC_MspInit+0xe0>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	2036      	movs	r0, #54	; 0x36
 8006df6:	f002 fa9b 	bl	8009330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006dfa:	2036      	movs	r0, #54	; 0x36
 8006dfc:	f002 fab4 	bl	8009368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006e00:	bf00      	nop
 8006e02:	3728      	adds	r7, #40	; 0x28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40007400 	.word	0x40007400
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	20007ac8 	.word	0x20007ac8
 8006e14:	40020044 	.word	0x40020044

08006e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b0ae      	sub	sp, #184	; 0xb8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	60da      	str	r2, [r3, #12]
 8006e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e30:	f107 0318 	add.w	r3, r7, #24
 8006e34:	228c      	movs	r2, #140	; 0x8c
 8006e36:	2100      	movs	r1, #0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f016 f979 	bl	801d130 <memset>
  if(hi2c->Instance==I2C1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a42      	ldr	r2, [pc, #264]	; (8006f4c <HAL_I2C_MspInit+0x134>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d13b      	bne.n	8006ec0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e50:	f107 0318 	add.w	r3, r7, #24
 8006e54:	4618      	mov	r0, r3
 8006e56:	f005 fead 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006e60:	f7ff fd2a 	bl	80068b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e64:	4b3a      	ldr	r3, [pc, #232]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e68:	4a39      	ldr	r2, [pc, #228]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006e6a:	f043 0302 	orr.w	r3, r3, #2
 8006e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e70:	4b37      	ldr	r3, [pc, #220]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = KEYPAD_SCL_Pin|KEYPAD_SDA_Pin;
 8006e7c:	23c0      	movs	r3, #192	; 0xc0
 8006e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e82:	2312      	movs	r3, #18
 8006e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e94:	2304      	movs	r3, #4
 8006e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	482c      	ldr	r0, [pc, #176]	; (8006f54 <HAL_I2C_MspInit+0x13c>)
 8006ea2:	f003 f803 	bl	8009eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ea6:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eaa:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8006eb2:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006ebe:	e040      	b.n	8006f42 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a24      	ldr	r2, [pc, #144]	; (8006f58 <HAL_I2C_MspInit+0x140>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d13b      	bne.n	8006f42 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006eca:	2380      	movs	r3, #128	; 0x80
 8006ecc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ed2:	f107 0318 	add.w	r3, r7, #24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f005 fe6c 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8006ee2:	f7ff fce9 	bl	80068b8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eea:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006eec:	f043 0302 	orr.w	r3, r3, #2
 8006ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ef2:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POWER_SCL_Pin|POWER_SDA_Pin;
 8006efe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f06:	2312      	movs	r3, #18
 8006f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f12:	2303      	movs	r3, #3
 8006f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006f18:	2304      	movs	r3, #4
 8006f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f22:	4619      	mov	r1, r3
 8006f24:	480b      	ldr	r0, [pc, #44]	; (8006f54 <HAL_I2C_MspInit+0x13c>)
 8006f26:	f002 ffc1 	bl	8009eac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f2a:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2e:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f34:	6593      	str	r3, [r2, #88]	; 0x58
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <HAL_I2C_MspInit+0x138>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	68bb      	ldr	r3, [r7, #8]
}
 8006f42:	bf00      	nop
 8006f44:	37b8      	adds	r7, #184	; 0xb8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40005400 	.word	0x40005400
 8006f50:	40021000 	.word	0x40021000
 8006f54:	48000400 	.word	0x48000400
 8006f58:	40005800 	.word	0x40005800

08006f5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b0a6      	sub	sp, #152	; 0x98
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f64:	f107 030c 	add.w	r3, r7, #12
 8006f68:	228c      	movs	r2, #140	; 0x8c
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f016 f8df 	bl	801d130 <memset>
  if(hrtc->Instance==RTC)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <HAL_RTC_MspInit+0x5c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d118      	bne.n	8006fae <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f8a:	f107 030c 	add.w	r3, r7, #12
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f005 fe10 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006f9a:	f7ff fc8d 	bl	80068b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <HAL_RTC_MspInit+0x60>)
 8006fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa4:	4a05      	ldr	r2, [pc, #20]	; (8006fbc <HAL_RTC_MspInit+0x60>)
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006fae:	bf00      	nop
 8006fb0:	3798      	adds	r7, #152	; 0x98
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40002800 	.word	0x40002800
 8006fbc:	40021000 	.word	0x40021000

08006fc0 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <HAL_RTC_MspDeInit+0x30>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RTC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <HAL_RTC_MspDeInit+0x34>)
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	4a06      	ldr	r2, [pc, #24]	; (8006ff4 <HAL_RTC_MspDeInit+0x34>)
 8006fda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40002800 	.word	0x40002800
 8006ff4:	40021000 	.word	0x40021000

08006ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08e      	sub	sp, #56	; 0x38
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	609a      	str	r2, [r3, #8]
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a5c      	ldr	r2, [pc, #368]	; (8007188 <HAL_SPI_MspInit+0x190>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d129      	bne.n	800706e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800701a:	4b5c      	ldr	r3, [pc, #368]	; (800718c <HAL_SPI_MspInit+0x194>)
 800701c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701e:	4a5b      	ldr	r2, [pc, #364]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007024:	6613      	str	r3, [r2, #96]	; 0x60
 8007026:	4b59      	ldr	r3, [pc, #356]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800702e:	623b      	str	r3, [r7, #32]
 8007030:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007032:	4b56      	ldr	r3, [pc, #344]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	4a55      	ldr	r2, [pc, #340]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800703e:	4b53      	ldr	r3, [pc, #332]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 800704a:	23c2      	movs	r3, #194	; 0xc2
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704e:	2302      	movs	r3, #2
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007052:	2300      	movs	r3, #0
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007056:	2303      	movs	r3, #3
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800705a:	2305      	movs	r3, #5
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007062:	4619      	mov	r1, r3
 8007064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007068:	f002 ff20 	bl	8009eac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800706c:	e088      	b.n	8007180 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a47      	ldr	r2, [pc, #284]	; (8007190 <HAL_SPI_MspInit+0x198>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d155      	bne.n	8007124 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007078:	4b44      	ldr	r3, [pc, #272]	; (800718c <HAL_SPI_MspInit+0x194>)
 800707a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707c:	4a43      	ldr	r2, [pc, #268]	; (800718c <HAL_SPI_MspInit+0x194>)
 800707e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007082:	6593      	str	r3, [r2, #88]	; 0x58
 8007084:	4b41      	ldr	r3, [pc, #260]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007090:	4b3e      	ldr	r3, [pc, #248]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	4a3d      	ldr	r2, [pc, #244]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007096:	f043 0304 	orr.w	r3, r3, #4
 800709a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800709c:	4b3b      	ldr	r3, [pc, #236]	; (800718c <HAL_SPI_MspInit+0x194>)
 800709e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070a8:	4b38      	ldr	r3, [pc, #224]	; (800718c <HAL_SPI_MspInit+0x194>)
 80070aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ac:	4a37      	ldr	r2, [pc, #220]	; (800718c <HAL_SPI_MspInit+0x194>)
 80070ae:	f043 0302 	orr.w	r3, r3, #2
 80070b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070b4:	4b35      	ldr	r3, [pc, #212]	; (800718c <HAL_SPI_MspInit+0x194>)
 80070b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80070c0:	2302      	movs	r3, #2
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c4:	2302      	movs	r3, #2
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070cc:	2303      	movs	r3, #3
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80070d0:	2303      	movs	r3, #3
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 80070d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d8:	4619      	mov	r1, r3
 80070da:	482e      	ldr	r0, [pc, #184]	; (8007194 <HAL_SPI_MspInit+0x19c>)
 80070dc:	f002 fee6 	bl	8009eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80070e0:	2304      	movs	r3, #4
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e4:	2302      	movs	r3, #2
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ec:	2303      	movs	r3, #3
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070f0:	2305      	movs	r3, #5
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80070f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070f8:	4619      	mov	r1, r3
 80070fa:	4826      	ldr	r0, [pc, #152]	; (8007194 <HAL_SPI_MspInit+0x19c>)
 80070fc:	f002 fed6 	bl	8009eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8007100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007106:	2302      	movs	r3, #2
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710a:	2300      	movs	r3, #0
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800710e:	2303      	movs	r3, #3
 8007110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007112:	2305      	movs	r3, #5
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8007116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800711a:	4619      	mov	r1, r3
 800711c:	481e      	ldr	r0, [pc, #120]	; (8007198 <HAL_SPI_MspInit+0x1a0>)
 800711e:	f002 fec5 	bl	8009eac <HAL_GPIO_Init>
}
 8007122:	e02d      	b.n	8007180 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI3)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <HAL_SPI_MspInit+0x1a4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d128      	bne.n	8007180 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	4a16      	ldr	r2, [pc, #88]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007138:	6593      	str	r3, [r2, #88]	; 0x58
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <HAL_SPI_MspInit+0x194>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007146:	4b11      	ldr	r3, [pc, #68]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	4a10      	ldr	r2, [pc, #64]	; (800718c <HAL_SPI_MspInit+0x194>)
 800714c:	f043 0304 	orr.w	r3, r3, #4
 8007150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007152:	4b0e      	ldr	r3, [pc, #56]	; (800718c <HAL_SPI_MspInit+0x194>)
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	60bb      	str	r3, [r7, #8]
 800715c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 800715e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007164:	2302      	movs	r3, #2
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007168:	2300      	movs	r3, #0
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800716c:	2303      	movs	r3, #3
 800716e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007170:	2306      	movs	r3, #6
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007178:	4619      	mov	r1, r3
 800717a:	4806      	ldr	r0, [pc, #24]	; (8007194 <HAL_SPI_MspInit+0x19c>)
 800717c:	f002 fe96 	bl	8009eac <HAL_GPIO_Init>
}
 8007180:	bf00      	nop
 8007182:	3738      	adds	r7, #56	; 0x38
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40013000 	.word	0x40013000
 800718c:	40021000 	.word	0x40021000
 8007190:	40003800 	.word	0x40003800
 8007194:	48000800 	.word	0x48000800
 8007198:	48000400 	.word	0x48000400
 800719c:	40003c00 	.word	0x40003c00

080071a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b0:	d10c      	bne.n	80071cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <HAL_TIM_PWM_MspInit+0x5c>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	4a11      	ldr	r2, [pc, #68]	; (80071fc <HAL_TIM_PWM_MspInit+0x5c>)
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	6593      	str	r3, [r2, #88]	; 0x58
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <HAL_TIM_PWM_MspInit+0x5c>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80071ca:	e010      	b.n	80071ee <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <HAL_TIM_PWM_MspInit+0x60>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d10b      	bne.n	80071ee <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <HAL_TIM_PWM_MspInit+0x5c>)
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	4a08      	ldr	r2, [pc, #32]	; (80071fc <HAL_TIM_PWM_MspInit+0x5c>)
 80071dc:	f043 0304 	orr.w	r3, r3, #4
 80071e0:	6593      	str	r3, [r2, #88]	; 0x58
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <HAL_TIM_PWM_MspInit+0x5c>)
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]
}
 80071ee:	bf00      	nop
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
 8007200:	40000800 	.word	0x40000800

08007204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a0d      	ldr	r2, [pc, #52]	; (8007248 <HAL_TIM_Base_MspInit+0x44>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d113      	bne.n	800723e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <HAL_TIM_Base_MspInit+0x48>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721a:	4a0c      	ldr	r2, [pc, #48]	; (800724c <HAL_TIM_Base_MspInit+0x48>)
 800721c:	f043 0310 	orr.w	r3, r3, #16
 8007220:	6593      	str	r3, [r2, #88]	; 0x58
 8007222:	4b0a      	ldr	r3, [pc, #40]	; (800724c <HAL_TIM_Base_MspInit+0x48>)
 8007224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	2036      	movs	r0, #54	; 0x36
 8007234:	f002 f87c 	bl	8009330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007238:	2036      	movs	r0, #54	; 0x36
 800723a:	f002 f895 	bl	8009368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40001000 	.word	0x40001000
 800724c:	40021000 	.word	0x40021000

08007250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007258:	f107 0314 	add.w	r3, r7, #20
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007270:	d11d      	bne.n	80072ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007272:	4b22      	ldr	r3, [pc, #136]	; (80072fc <HAL_TIM_MspPostInit+0xac>)
 8007274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007276:	4a21      	ldr	r2, [pc, #132]	; (80072fc <HAL_TIM_MspPostInit+0xac>)
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800727e:	4b1f      	ldr	r3, [pc, #124]	; (80072fc <HAL_TIM_MspPostInit+0xac>)
 8007280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 800728a:	2301      	movs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800728e:	2302      	movs	r3, #2
 8007290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007296:	2300      	movs	r3, #0
 8007298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800729a:	2301      	movs	r3, #1
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 800729e:	f107 0314 	add.w	r3, r7, #20
 80072a2:	4619      	mov	r1, r3
 80072a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072a8:	f002 fe00 	bl	8009eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80072ac:	e021      	b.n	80072f2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <HAL_TIM_MspPostInit+0xb0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d11c      	bne.n	80072f2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072b8:	4b10      	ldr	r3, [pc, #64]	; (80072fc <HAL_TIM_MspPostInit+0xac>)
 80072ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072bc:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <HAL_TIM_MspPostInit+0xac>)
 80072be:	f043 0308 	orr.w	r3, r3, #8
 80072c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <HAL_TIM_MspPostInit+0xac>)
 80072c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_meter_UGen_Pin;
 80072d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d6:	2302      	movs	r3, #2
 80072d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072de:	2300      	movs	r3, #0
 80072e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80072e2:	2302      	movs	r3, #2
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P_meter_UGen_GPIO_Port, &GPIO_InitStruct);
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	4619      	mov	r1, r3
 80072ec:	4805      	ldr	r0, [pc, #20]	; (8007304 <HAL_TIM_MspPostInit+0xb4>)
 80072ee:	f002 fddd 	bl	8009eac <HAL_GPIO_Init>
}
 80072f2:	bf00      	nop
 80072f4:	3728      	adds	r7, #40	; 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40021000 	.word	0x40021000
 8007300:	40000800 	.word	0x40000800
 8007304:	48000c00 	.word	0x48000c00

08007308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b0ac      	sub	sp, #176	; 0xb0
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	60da      	str	r2, [r3, #12]
 800731e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007320:	f107 0310 	add.w	r3, r7, #16
 8007324:	228c      	movs	r2, #140	; 0x8c
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f015 ff01 	bl	801d130 <memset>
  if(huart->Instance==USART1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a26      	ldr	r2, [pc, #152]	; (80073cc <HAL_UART_MspInit+0xc4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d144      	bne.n	80073c2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007338:	2301      	movs	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800733c:	2300      	movs	r3, #0
 800733e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007340:	f107 0310 	add.w	r3, r7, #16
 8007344:	4618      	mov	r0, r3
 8007346:	f005 fc35 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007350:	f7ff fab2 	bl	80068b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007354:	4b1e      	ldr	r3, [pc, #120]	; (80073d0 <HAL_UART_MspInit+0xc8>)
 8007356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007358:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <HAL_UART_MspInit+0xc8>)
 800735a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800735e:	6613      	str	r3, [r2, #96]	; 0x60
 8007360:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <HAL_UART_MspInit+0xc8>)
 8007362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800736c:	4b18      	ldr	r3, [pc, #96]	; (80073d0 <HAL_UART_MspInit+0xc8>)
 800736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <HAL_UART_MspInit+0xc8>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007378:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <HAL_UART_MspInit+0xc8>)
 800737a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007384:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738c:	2302      	movs	r3, #2
 800738e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007392:	2300      	movs	r3, #0
 8007394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007398:	2303      	movs	r3, #3
 800739a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800739e:	2307      	movs	r3, #7
 80073a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80073a8:	4619      	mov	r1, r3
 80073aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073ae:	f002 fd7d 	bl	8009eac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	2025      	movs	r0, #37	; 0x25
 80073b8:	f001 ffba 	bl	8009330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80073bc:	2025      	movs	r0, #37	; 0x25
 80073be:	f001 ffd3 	bl	8009368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80073c2:	bf00      	nop
 80073c4:	37b0      	adds	r7, #176	; 0xb0
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40013800 	.word	0x40013800
 80073d0:	40021000 	.word	0x40021000

080073d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08c      	sub	sp, #48	; 0x30
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80073e4:	2200      	movs	r2, #0
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	2019      	movs	r0, #25
 80073ea:	f001 ffa1 	bl	8009330 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80073ee:	2019      	movs	r0, #25
 80073f0:	f001 ffba 	bl	8009368 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <HAL_InitTick+0x9c>)
 80073f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f8:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <HAL_InitTick+0x9c>)
 80073fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073fe:	6613      	str	r3, [r2, #96]	; 0x60
 8007400:	4b1b      	ldr	r3, [pc, #108]	; (8007470 <HAL_InitTick+0x9c>)
 8007402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800740c:	f107 0210 	add.w	r2, r7, #16
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	4611      	mov	r1, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f005 fb3a 	bl	800ca90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800741c:	f005 fb22 	bl	800ca64 <HAL_RCC_GetPCLK2Freq>
 8007420:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	4a13      	ldr	r2, [pc, #76]	; (8007474 <HAL_InitTick+0xa0>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	0c9b      	lsrs	r3, r3, #18
 800742c:	3b01      	subs	r3, #1
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007430:	4b11      	ldr	r3, [pc, #68]	; (8007478 <HAL_InitTick+0xa4>)
 8007432:	4a12      	ldr	r2, [pc, #72]	; (800747c <HAL_InitTick+0xa8>)
 8007434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_InitTick+0xa4>)
 8007438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800743c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800743e:	4a0e      	ldr	r2, [pc, #56]	; (8007478 <HAL_InitTick+0xa4>)
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_InitTick+0xa4>)
 8007446:	2200      	movs	r2, #0
 8007448:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_InitTick+0xa4>)
 800744c:	2200      	movs	r2, #0
 800744e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007450:	4809      	ldr	r0, [pc, #36]	; (8007478 <HAL_InitTick+0xa4>)
 8007452:	f007 fb5b 	bl	800eb0c <HAL_TIM_Base_Init>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800745c:	4806      	ldr	r0, [pc, #24]	; (8007478 <HAL_InitTick+0xa4>)
 800745e:	f007 fc3d 	bl	800ecdc <HAL_TIM_Base_Start_IT>
 8007462:	4603      	mov	r3, r0
 8007464:	e000      	b.n	8007468 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
}
 8007468:	4618      	mov	r0, r3
 800746a:	3730      	adds	r7, #48	; 0x30
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40021000 	.word	0x40021000
 8007474:	431bde83 	.word	0x431bde83
 8007478:	20008160 	.word	0x20008160
 800747c:	40012c00 	.word	0x40012c00

08007480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007484:	e7fe      	b.n	8007484 <NMI_Handler+0x4>

08007486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007486:	b480      	push	{r7}
 8007488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800748a:	e7fe      	b.n	800748a <HardFault_Handler+0x4>

0800748c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007490:	e7fe      	b.n	8007490 <MemManage_Handler+0x4>

08007492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007496:	e7fe      	b.n	8007496 <BusFault_Handler+0x4>

08007498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800749c:	e7fe      	b.n	800749c <UsageFault_Handler+0x4>

0800749e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800749e:	b480      	push	{r7}
 80074a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074ba:	b480      	push	{r7}
 80074bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074be:	bf00      	nop
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074cc:	bf00      	nop
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  ADC_EXT();
 80074da:	f7fa f99c 	bl	8001816 <ADC_EXT>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80074de:	2010      	movs	r0, #16
 80074e0:	f002 fea6 	bl	800a230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80074e4:	bf00      	nop
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <DMA1_Channel1_IRQHandler+0x10>)
 80074ee:	f002 fbfe 	bl	8009cee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20007a38 	.word	0x20007a38

080074fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007500:	4802      	ldr	r0, [pc, #8]	; (800750c <DMA1_Channel2_IRQHandler+0x10>)
 8007502:	f002 fbf4 	bl	8009cee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20007a80 	.word	0x20007a80

08007510 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//
	StartReadNextSoundBuf();
 8007514:	f7ff fa62 	bl	80069dc <StartReadNextSoundBuf>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <DMA1_Channel4_IRQHandler+0x14>)
 800751a:	f002 fbe8 	bl	8009cee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20007ac8 	.word	0x20007ac8

08007528 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800752c:	4802      	ldr	r0, [pc, #8]	; (8007538 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800752e:	f007 fda3 	bl	800f078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007532:	bf00      	nop
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20008160 	.word	0x20008160

0800753c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1, UART_IT_RXNE)==SET)
 8007540:	4b11      	ldr	r3, [pc, #68]	; (8007588 <USART1_IRQHandler+0x4c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <USART1_IRQHandler+0x40>
	{
		usart1_data[usart1_counter]=(uint8_t)USART1->RDR;
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <USART1_IRQHandler+0x50>)
 8007550:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007552:	b299      	uxth	r1, r3
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <USART1_IRQHandler+0x54>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	b2c9      	uxtb	r1, r1
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <USART1_IRQHandler+0x58>)
 800755e:	5499      	strb	r1, [r3, r2]
		usart1_counter++;
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <USART1_IRQHandler+0x54>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <USART1_IRQHandler+0x54>)
 800756a:	701a      	strb	r2, [r3, #0]
		rx_cmplt=5;
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <USART1_IRQHandler+0x5c>)
 800756e:	2205      	movs	r2, #5
 8007570:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_IT_RXNE);
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <USART1_IRQHandler+0x4c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f240 5225 	movw	r2, #1317	; 0x525
 800757a:	621a      	str	r2, [r3, #32]
//		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800757c:	4802      	ldr	r0, [pc, #8]	; (8007588 <USART1_IRQHandler+0x4c>)
 800757e:	f008 fcf1 	bl	800ff64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007582:	bf00      	nop
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20007b10 	.word	0x20007b10
 800758c:	40013800 	.word	0x40013800
 8007590:	20000955 	.word	0x20000955
 8007594:	200021d8 	.word	0x200021d8
 8007598:	20000956 	.word	0x20000956

0800759c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StartReadNextSoundBuf();
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80075a0:	4803      	ldr	r0, [pc, #12]	; (80075b0 <TIM6_DAC_IRQHandler+0x14>)
 80075a2:	f007 fd69 	bl	800f078 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80075a6:	4803      	ldr	r0, [pc, #12]	; (80075b4 <TIM6_DAC_IRQHandler+0x18>)
 80075a8:	f001 ffda 	bl	8009560 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80075ac:	bf00      	nop
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20007c78 	.word	0x20007c78
 80075b4:	20007c64 	.word	0x20007c64

080075b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80075bc:	4802      	ldr	r0, [pc, #8]	; (80075c8 <OTG_FS_IRQHandler+0x10>)
 80075be:	f003 fc9d 	bl	800aefc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80075c2:	bf00      	nop
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20009afc 	.word	0x20009afc

080075cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
	return 1;
 80075d0:	2301      	movs	r3, #1
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <_kill>:

int _kill(int pid, int sig)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80075e6:	f015 fd79 	bl	801d0dc <__errno>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2216      	movs	r2, #22
 80075ee:	601a      	str	r2, [r3, #0]
	return -1;
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_exit>:

void _exit (int status)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007604:	f04f 31ff 	mov.w	r1, #4294967295
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ffe7 	bl	80075dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800760e:	e7fe      	b.n	800760e <_exit+0x12>

08007610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800761c:	2300      	movs	r3, #0
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	e00a      	b.n	8007638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007622:	f3af 8000 	nop.w
 8007626:	4601      	mov	r1, r0
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	60ba      	str	r2, [r7, #8]
 800762e:	b2ca      	uxtb	r2, r1
 8007630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3301      	adds	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	dbf0      	blt.n	8007622 <_read+0x12>
	}

return len;
 8007640:	687b      	ldr	r3, [r7, #4]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e009      	b.n	8007670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	60ba      	str	r2, [r7, #8]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	4618      	mov	r0, r3
 8007666:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	3301      	adds	r3, #1
 800766e:	617b      	str	r3, [r7, #20]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	429a      	cmp	r2, r3
 8007676:	dbf1      	blt.n	800765c <_write+0x12>
	}
	return len;
 8007678:	687b      	ldr	r3, [r7, #4]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <_close>:

int _close(int file)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
	return -1;
 800768a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076aa:	605a      	str	r2, [r3, #4]
	return 0;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <_isatty>:

int _isatty(int file)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
	return 1;
 80076c2:	2301      	movs	r3, #1
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
	return 0;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <_sbrk+0x5c>)
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <_sbrk+0x60>)
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <_sbrk+0x64>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <_sbrk+0x64>)
 800770a:	4a12      	ldr	r2, [pc, #72]	; (8007754 <_sbrk+0x68>)
 800770c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800770e:	4b10      	ldr	r3, [pc, #64]	; (8007750 <_sbrk+0x64>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	429a      	cmp	r2, r3
 800771a:	d207      	bcs.n	800772c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800771c:	f015 fcde 	bl	801d0dc <__errno>
 8007720:	4603      	mov	r3, r0
 8007722:	220c      	movs	r2, #12
 8007724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007726:	f04f 33ff 	mov.w	r3, #4294967295
 800772a:	e009      	b.n	8007740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800772c:	4b08      	ldr	r3, [pc, #32]	; (8007750 <_sbrk+0x64>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007732:	4b07      	ldr	r3, [pc, #28]	; (8007750 <_sbrk+0x64>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	4a05      	ldr	r2, [pc, #20]	; (8007750 <_sbrk+0x64>)
 800773c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800773e:	68fb      	ldr	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20040000 	.word	0x20040000
 800774c:	00000400 	.word	0x00000400
 8007750:	200009a4 	.word	0x200009a4
 8007754:	2000a118 	.word	0x2000a118

08007758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800775c:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <SystemInit+0x5c>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <SystemInit+0x5c>)
 8007764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <SystemInit+0x60>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a11      	ldr	r2, [pc, #68]	; (80077b8 <SystemInit+0x60>)
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <SystemInit+0x60>)
 800777a:	2200      	movs	r2, #0
 800777c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <SystemInit+0x60>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a0d      	ldr	r2, [pc, #52]	; (80077b8 <SystemInit+0x60>)
 8007784:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007788:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800778c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <SystemInit+0x60>)
 8007790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007794:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <SystemInit+0x60>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a07      	ldr	r2, [pc, #28]	; (80077b8 <SystemInit+0x60>)
 800779c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <SystemInit+0x60>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	619a      	str	r2, [r3, #24]
}
 80077a8:	bf00      	nop
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	e000ed00 	.word	0xe000ed00
 80077b8:	40021000 	.word	0x40021000
 80077bc:	00000000 	.word	0x00000000

080077c0 <Temperature_process>:
extern ADC_HandleTypeDef hadc1;

uint16_t temperature_buf[256];

void Temperature_process(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_sum=0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]
	uint16_t temperature_middle = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<128;i++)temp_sum+=temperature_buf[i];
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
 80077d6:	e00a      	b.n	80077ee <Temperature_process+0x2e>
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	4a2f      	ldr	r2, [pc, #188]	; (8007898 <Temperature_process+0xd8>)
 80077dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077e0:	461a      	mov	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	4413      	add	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	3301      	adds	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
 80077ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	daf0      	bge.n	80077d8 <Temperature_process+0x18>
	temperature_middle = (temp_sum>>7);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	09db      	lsrs	r3, r3, #7
 80077fa:	80fb      	strh	r3, [r7, #6]

	MCU_temp = (double)(temperature_middle/4096.0)*Vref;   // Напряжение в вольтах на датчике.
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7f8 fea0 	bl	8000544 <__aeabi_i2d>
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	4b24      	ldr	r3, [pc, #144]	; (800789c <Temperature_process+0xdc>)
 800780a:	f7f9 f82f 	bl	800086c <__aeabi_ddiv>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4610      	mov	r0, r2
 8007814:	4619      	mov	r1, r3
 8007816:	a31a      	add	r3, pc, #104	; (adr r3, 8007880 <Temperature_process+0xc0>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 fefc 	bl	8000618 <__aeabi_dmul>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	491e      	ldr	r1, [pc, #120]	; (80078a0 <Temperature_process+0xe0>)
 8007826:	e9c1 2300 	strd	r2, r3, [r1]
	MCU_temp = (tV_25-MCU_temp)/tSlope + 25.0;             // Температура в градусах.
 800782a:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <Temperature_process+0xe0>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	a115      	add	r1, pc, #84	; (adr r1, 8007888 <Temperature_process+0xc8>)
 8007832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007836:	f7f8 fd37 	bl	80002a8 <__aeabi_dsub>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	a313      	add	r3, pc, #76	; (adr r3, 8007890 <Temperature_process+0xd0>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f9 f810 	bl	800086c <__aeabi_ddiv>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <Temperature_process+0xe4>)
 800785a:	f7f8 fd27 	bl	80002ac <__adddf3>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	490f      	ldr	r1, [pc, #60]	; (80078a0 <Temperature_process+0xe0>)
 8007864:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &temperature_buf, 128);	// Запуск DMA на чтение температуры MCU
 8007868:	2280      	movs	r2, #128	; 0x80
 800786a:	490b      	ldr	r1, [pc, #44]	; (8007898 <Temperature_process+0xd8>)
 800786c:	480e      	ldr	r0, [pc, #56]	; (80078a8 <Temperature_process+0xe8>)
 800786e:	f000 fdfd 	bl	800846c <HAL_ADC_Start_DMA>

	sleep(100);
 8007872:	2064      	movs	r0, #100	; 0x64
 8007874:	f7fb fb76 	bl	8002f64 <sleep>
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	66666666 	.word	0x66666666
 8007884:	400a6666 	.word	0x400a6666
 8007888:	22d0e560 	.word	0x22d0e560
 800788c:	3ff2f9db 	.word	0x3ff2f9db
 8007890:	75f6fd22 	.word	0x75f6fd22
 8007894:	3f719ce0 	.word	0x3f719ce0
 8007898:	200081ac 	.word	0x200081ac
 800789c:	40b00000 	.word	0x40b00000
 80078a0:	20000958 	.word	0x20000958
 80078a4:	40390000 	.word	0x40390000
 80078a8:	20007bfc 	.word	0x20007bfc

080078ac <spi_timeout>:
static SPI_HandleTypeDef hdisplayspi;



uint8_t spi_timeout(void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
	if(++spitimeout==100) return 1;
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <spi_timeout+0x28>)
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <spi_timeout+0x28>)
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <spi_timeout+0x28>)
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	2b64      	cmp	r3, #100	; 0x64
 80078c2:	d101      	bne.n	80078c8 <spi_timeout+0x1c>
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <spi_timeout+0x1e>
	else return 0;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	200009a8 	.word	0x200009a8

080078d8 <u8x8_gpio_and_delay_cb_stm32l4>:
/** @addtogroup _Exported_Functions
  * @{
  */
uint8_t u8x8_gpio_and_delay_cb_stm32l4 (U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
		U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	72fb      	strb	r3, [r7, #11]
 80078e6:	4613      	mov	r3, r2
 80078e8:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	609a      	str	r2, [r3, #8]
 80078f6:	60da      	str	r2, [r3, #12]
 80078f8:	611a      	str	r2, [r3, #16]
	  switch (msg)
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	3b28      	subs	r3, #40	; 0x28
 80078fe:	2b23      	cmp	r3, #35	; 0x23
 8007900:	d870      	bhi.n	80079e4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <u8x8_gpio_and_delay_cb_stm32l4+0x30>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007999 	.word	0x08007999
 800790c:	080079af 	.word	0x080079af
 8007910:	080079e5 	.word	0x080079e5
 8007914:	080079e5 	.word	0x080079e5
 8007918:	080079e5 	.word	0x080079e5
 800791c:	080079e5 	.word	0x080079e5
 8007920:	080079e5 	.word	0x080079e5
 8007924:	080079e5 	.word	0x080079e5
 8007928:	080079e5 	.word	0x080079e5
 800792c:	080079e5 	.word	0x080079e5
 8007930:	080079e5 	.word	0x080079e5
 8007934:	080079e5 	.word	0x080079e5
 8007938:	080079e5 	.word	0x080079e5
 800793c:	080079e5 	.word	0x080079e5
 8007940:	080079e5 	.word	0x080079e5
 8007944:	080079e5 	.word	0x080079e5
 8007948:	080079e5 	.word	0x080079e5
 800794c:	080079e5 	.word	0x080079e5
 8007950:	080079e5 	.word	0x080079e5
 8007954:	080079e5 	.word	0x080079e5
 8007958:	080079e5 	.word	0x080079e5
 800795c:	080079e5 	.word	0x080079e5
 8007960:	080079e5 	.word	0x080079e5
 8007964:	080079e5 	.word	0x080079e5
 8007968:	080079e5 	.word	0x080079e5
 800796c:	080079e5 	.word	0x080079e5
 8007970:	080079e5 	.word	0x080079e5
 8007974:	080079e5 	.word	0x080079e5
 8007978:	080079e5 	.word	0x080079e5
 800797c:	080079e5 	.word	0x080079e5
 8007980:	080079e5 	.word	0x080079e5
 8007984:	080079e5 	.word	0x080079e5
 8007988:	080079e5 	.word	0x080079e5
 800798c:	080079c9 	.word	0x080079c9
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079d7 	.word	0x080079d7
	  {
	  case U8X8_MSG_GPIO_AND_DELAY_INIT:
		  LCD_NRST_NOT_ACTIVE();
 8007998:	2201      	movs	r2, #1
 800799a:	2110      	movs	r1, #16
 800799c:	4814      	ldr	r0, [pc, #80]	; (80079f0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 800799e:	f002 fc2f 	bl	800a200 <HAL_GPIO_WritePin>
		  LCD_NCS_NOT_ACTIVE();
 80079a2:	2201      	movs	r2, #1
 80079a4:	2101      	movs	r1, #1
 80079a6:	4812      	ldr	r0, [pc, #72]	; (80079f0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079a8:	f002 fc2a 	bl	800a200 <HAL_GPIO_WritePin>
	    break;
 80079ac:	e01a      	b.n	80079e4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_DELAY_MILLI:
		  delay_ms(arg_int);
 80079ae:	7abb      	ldrb	r3, [r7, #10]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fb fb23 	bl	8002ffc <delay_ms>
	    break;
 80079b6:	e015      	b.n	80079e4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_DC:
	    HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, arg_int); //?
 80079b8:	7abb      	ldrb	r3, [r7, #10]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079c0:	480c      	ldr	r0, [pc, #48]	; (80079f4 <u8x8_gpio_and_delay_cb_stm32l4+0x11c>)
 80079c2:	f002 fc1d 	bl	800a200 <HAL_GPIO_WritePin>
	    break;
 80079c6:	e00d      	b.n	80079e4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_CS:
	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, arg_int); //?
 80079c8:	7abb      	ldrb	r3, [r7, #10]
 80079ca:	461a      	mov	r2, r3
 80079cc:	2101      	movs	r1, #1
 80079ce:	4808      	ldr	r0, [pc, #32]	; (80079f0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079d0:	f002 fc16 	bl	800a200 <HAL_GPIO_WritePin>
	    break;
 80079d4:	e006      	b.n	80079e4 <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_RESET:
	    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, arg_int);
 80079d6:	7abb      	ldrb	r3, [r7, #10]
 80079d8:	461a      	mov	r2, r3
 80079da:	2110      	movs	r1, #16
 80079dc:	4804      	ldr	r0, [pc, #16]	; (80079f0 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 80079de:	f002 fc0f 	bl	800a200 <HAL_GPIO_WritePin>
	    break;
 80079e2:	bf00      	nop
	  }
	  return 1;
 80079e4:	2301      	movs	r3, #1
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3728      	adds	r7, #40	; 0x28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	48001000 	.word	0x48001000
 80079f4:	48000400 	.word	0x48000400

080079f8 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	72fb      	strb	r3, [r7, #11]
 8007a06:	4613      	mov	r3, r2
 8007a08:	72bb      	strb	r3, [r7, #10]
	uint8_t *data;//, a_flag;
#ifdef  USE_BSP_SPI2
 hdisplayspi.Instance = huc1638_hspi.Instance;
#else
 hdisplayspi.Instance = hspi2.Instance;
 8007a0a:	4b54      	ldr	r3, [pc, #336]	; (8007b5c <u8x8_byte_4wire_hw_spi+0x164>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a54      	ldr	r2, [pc, #336]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a10:	6013      	str	r3, [r2, #0]
#endif

  switch (msg)
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	3b14      	subs	r3, #20
 8007a16:	2b0c      	cmp	r3, #12
 8007a18:	f200 8098 	bhi.w	8007b4c <u8x8_byte_4wire_hw_spi+0x154>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <u8x8_byte_4wire_hw_spi+0x2c>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007ae9 	.word	0x08007ae9
 8007a28:	08007b4d 	.word	0x08007b4d
 8007a2c:	08007b4d 	.word	0x08007b4d
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007b09 	.word	0x08007b09
 8007a38:	08007b2b 	.word	0x08007b2b
 8007a3c:	08007b4d 	.word	0x08007b4d
 8007a40:	08007b4d 	.word	0x08007b4d
 8007a44:	08007b4d 	.word	0x08007b4d
 8007a48:	08007b4d 	.word	0x08007b4d
 8007a4c:	08007b4d 	.word	0x08007b4d
 8007a50:	08007b4d 	.word	0x08007b4d
 8007a54:	08007afb 	.word	0x08007afb
  {
  case U8X8_MSG_BYTE_SEND:
	data = (uint8_t *)arg_ptr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 8007a5c:	e040      	b.n	8007ae0 <u8x8_byte_4wire_hw_spi+0xe8>
    {
    	/* check TXE flag */
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
    	{
    		spitimeout = 0;
 8007a5e:	4b41      	ldr	r3, [pc, #260]	; (8007b64 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007a64:	f7ff ff22 	bl	80078ac <spi_timeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d007      	beq.n	8007a7e <u8x8_byte_4wire_hw_spi+0x86>
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8007a6e:	4b3c      	ldr	r3, [pc, #240]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d1f0      	bne.n	8007a5e <u8x8_byte_4wire_hw_spi+0x66>
 8007a7c:	e000      	b.n	8007a80 <u8x8_byte_4wire_hw_spi+0x88>
    		if(spi_timeout()==1) break;
 8007a7e:	bf00      	nop
    	}
    	/* Write the data */
    	*((__IO uint8_t*) &hdisplayspi.Instance->DR ) = (uint8_t) * data;
 8007a80:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	701a      	strb	r2, [r3, #0]
    	/* Wait BSY flag */
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a8c:	e007      	b.n	8007a9e <u8x8_byte_4wire_hw_spi+0xa6>
    		{
    			spitimeout = 0;
 8007a8e:	4b35      	ldr	r3, [pc, #212]	; (8007b64 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	801a      	strh	r2, [r3, #0]
    		    if(spi_timeout()==1) break;
 8007a94:	f7ff ff0a 	bl	80078ac <spi_timeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d007      	beq.n	8007aae <u8x8_byte_4wire_hw_spi+0xb6>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a9e:	4b30      	ldr	r3, [pc, #192]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <u8x8_byte_4wire_hw_spi+0x96>
 8007aac:	e009      	b.n	8007ac2 <u8x8_byte_4wire_hw_spi+0xca>
    		    if(spi_timeout()==1) break;
 8007aae:	bf00      	nop
    		}
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007ab0:	e007      	b.n	8007ac2 <u8x8_byte_4wire_hw_spi+0xca>
    	{
    		spitimeout = 0;
 8007ab2:	4b2c      	ldr	r3, [pc, #176]	; (8007b64 <u8x8_byte_4wire_hw_spi+0x16c>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007ab8:	f7ff fef8 	bl	80078ac <spi_timeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d007      	beq.n	8007ad2 <u8x8_byte_4wire_hw_spi+0xda>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007ac2:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007acc:	2b80      	cmp	r3, #128	; 0x80
 8007ace:	d0f0      	beq.n	8007ab2 <u8x8_byte_4wire_hw_spi+0xba>
 8007ad0:	e000      	b.n	8007ad4 <u8x8_byte_4wire_hw_spi+0xdc>
    		if(spi_timeout()==1) break;
 8007ad2:	bf00      	nop
    	}
        data++;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
        arg_int--;
 8007ada:	7abb      	ldrb	r3, [r7, #10]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 8007ae0:	7abb      	ldrb	r3, [r7, #10]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1c3      	bne.n	8007a6e <u8x8_byte_4wire_hw_spi+0x76>
    }
//	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, arg_int, 1000);
    break;
 8007ae6:	e033      	b.n	8007b50 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_INIT:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	461a      	mov	r2, r3
 8007af0:	2149      	movs	r1, #73	; 0x49
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f00e fee1 	bl	80168ba <u8x8_gpio_call>
    break;
 8007af8:	e02a      	b.n	8007b50 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_SET_DC:
	  u8x8_gpio_SetDC(u8x8, arg_int);
 8007afa:	7abb      	ldrb	r3, [r7, #10]
 8007afc:	461a      	mov	r2, r3
 8007afe:	214a      	movs	r1, #74	; 0x4a
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f00e feda 	bl	80168ba <u8x8_gpio_call>
    break;
 8007b06:	e023      	b.n	8007b50 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_START_TRANSFER:
	  __HAL_SPI_ENABLE(&hdisplayspi);
 8007b08:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b14      	ldr	r3, [pc, #80]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b16:	601a      	str	r2, [r3, #0]
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2149      	movs	r1, #73	; 0x49
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f00e fec9 	bl	80168ba <u8x8_gpio_call>
    break;
 8007b28:	e012      	b.n	8007b50 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_END_TRANSFER:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	461a      	mov	r2, r3
 8007b32:	2149      	movs	r1, #73	; 0x49
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f00e fec0 	bl	80168ba <u8x8_gpio_call>
	  __HAL_SPI_DISABLE(&hdisplayspi);
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <u8x8_byte_4wire_hw_spi+0x168>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b48:	601a      	str	r2, [r3, #0]
    break;
 8007b4a:	e001      	b.n	8007b50 <u8x8_byte_4wire_hw_spi+0x158>
  default:
    return 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e000      	b.n	8007b52 <u8x8_byte_4wire_hw_spi+0x15a>
  }
  return 1;
 8007b50:	2301      	movs	r3, #1
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000202c 	.word	0x2000202c
 8007b60:	200009ac 	.word	0x200009ac
 8007b64:	200009a8 	.word	0x200009a8

08007b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007b6c:	f7ff fdf4 	bl	8007758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007b70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007b72:	e003      	b.n	8007b7c <LoopCopyDataInit>

08007b74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007b74:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007b76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007b78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007b7a:	3104      	adds	r1, #4

08007b7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007b7c:	480a      	ldr	r0, [pc, #40]	; (8007ba8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <LoopForever+0xe>)
	adds	r2, r0, r1
 8007b80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007b82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007b84:	d3f6      	bcc.n	8007b74 <CopyDataInit>
	ldr	r2, =_sbss
 8007b86:	4a0a      	ldr	r2, [pc, #40]	; (8007bb0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007b88:	e002      	b.n	8007b90 <LoopFillZerobss>

08007b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007b8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007b8c:	f842 3b04 	str.w	r3, [r2], #4

08007b90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <LoopForever+0x16>)
	cmp	r2, r3
 8007b92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007b94:	d3f9      	bcc.n	8007b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007b96:	f015 faa7 	bl	801d0e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b9a:	f7fe f89f 	bl	8005cdc <main>

08007b9e <LoopForever>:

LoopForever:
    b LoopForever
 8007b9e:	e7fe      	b.n	8007b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007ba0:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8007ba4:	0802b9e4 	.word	0x0802b9e4
	ldr	r0, =_sdata
 8007ba8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007bac:	200008bc 	.word	0x200008bc
	ldr	r2, =_sbss
 8007bb0:	200008c0 	.word	0x200008c0
	ldr	r3, = _ebss
 8007bb4:	2000a114 	.word	0x2000a114

08007bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007bb8:	e7fe      	b.n	8007bb8 <ADC1_2_IRQHandler>

08007bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007bc4:	2003      	movs	r0, #3
 8007bc6:	f001 fba8 	bl	800931a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007bca:	200f      	movs	r0, #15
 8007bcc:	f7ff fc02 	bl	80073d4 <HAL_InitTick>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	71fb      	strb	r3, [r7, #7]
 8007bda:	e001      	b.n	8007be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007bdc:	f7fe ff92 	bl	8006b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007be0:	79fb      	ldrb	r3, [r7, #7]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007bf0:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <HAL_IncTick+0x20>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <HAL_IncTick+0x24>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	4a04      	ldr	r2, [pc, #16]	; (8007c10 <HAL_IncTick+0x24>)
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	bf00      	nop
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	200003c0 	.word	0x200003c0
 8007c10:	200083ac 	.word	0x200083ac

08007c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  return uwTick;
 8007c18:	4b03      	ldr	r3, [pc, #12]	; (8007c28 <HAL_GetTick+0x14>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	200083ac 	.word	0x200083ac

08007c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c34:	f7ff ffee 	bl	8007c14 <HAL_GetTick>
 8007c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d005      	beq.n	8007c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007c46:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <HAL_Delay+0x44>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c52:	bf00      	nop
 8007c54:	f7ff ffde 	bl	8007c14 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d8f7      	bhi.n	8007c54 <HAL_Delay+0x28>
  {
  }
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200003c0 	.word	0x200003c0

08007c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	609a      	str	r2, [r3, #8]
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	609a      	str	r2, [r3, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3360      	adds	r3, #96	; 0x60
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <LL_ADC_SetOffset+0x44>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	03fff000 	.word	0x03fff000

08007d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3360      	adds	r3, #96	; 0x60
 8007d32:	461a      	mov	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3360      	adds	r3, #96	; 0x60
 8007d60:	461a      	mov	r2, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	431a      	orrs	r2, r3
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	615a      	str	r2, [r3, #20]
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e000      	b.n	8007dc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3330      	adds	r3, #48	; 0x30
 8007de2:	461a      	mov	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	f003 030c 	and.w	r3, r3, #12
 8007dee:	4413      	add	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	211f      	movs	r1, #31
 8007dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007e02:	43db      	mvns	r3, r3
 8007e04:	401a      	ands	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0e9b      	lsrs	r3, r3, #26
 8007e0a:	f003 011f 	and.w	r1, r3, #31
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	fa01 f303 	lsl.w	r3, r1, r3
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3314      	adds	r3, #20
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	0e5b      	lsrs	r3, r3, #25
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	4413      	add	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	0d1b      	lsrs	r3, r3, #20
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2107      	movs	r1, #7
 8007e58:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	401a      	ands	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	0d1b      	lsrs	r3, r3, #20
 8007e64:	f003 031f 	and.w	r3, r3, #31
 8007e68:	6879      	ldr	r1, [r7, #4]
 8007e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f003 0318 	and.w	r3, r3, #24
 8007ea2:	4908      	ldr	r1, [pc, #32]	; (8007ec4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007ea4:	40d9      	lsrs	r1, r3
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	400b      	ands	r3, r1
 8007eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	0007ffff 	.word	0x0007ffff

08007ec8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 031f 	and.w	r3, r3, #31
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6093      	str	r3, [r2, #8]
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1c:	d101      	bne.n	8007f22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f6c:	d101      	bne.n	8007f72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f94:	f043 0201 	orr.w	r2, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <LL_ADC_IsEnabled+0x18>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <LL_ADC_IsEnabled+0x1a>
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fe2:	f043 0204 	orr.w	r2, r3, #4
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b04      	cmp	r3, #4
 8008008:	d101      	bne.n	800800e <LL_ADC_REG_IsConversionOngoing+0x18>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0308 	and.w	r3, r3, #8
 800802c:	2b08      	cmp	r3, #8
 800802e:	d101      	bne.n	8008034 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b089      	sub	sp, #36	; 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008050:	2300      	movs	r3, #0
 8008052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e139      	b.n	80082d2 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008068:	2b00      	cmp	r3, #0
 800806a:	d109      	bne.n	8008080 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7fe fd6d 	bl	8006b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff ff3f 	bl	8007f08 <LL_ADC_IsDeepPowerDownEnabled>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff ff25 	bl	8007ee4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff5a 	bl	8007f58 <LL_ADC_IsInternalRegulatorEnabled>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d115      	bne.n	80080d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff ff3e 	bl	8007f30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80080b4:	4b89      	ldr	r3, [pc, #548]	; (80082dc <HAL_ADC_Init+0x298>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	099b      	lsrs	r3, r3, #6
 80080ba:	4a89      	ldr	r2, [pc, #548]	; (80082e0 <HAL_ADC_Init+0x29c>)
 80080bc:	fba2 2303 	umull	r2, r3, r2, r3
 80080c0:	099b      	lsrs	r3, r3, #6
 80080c2:	3301      	adds	r3, #1
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080c8:	e002      	b.n	80080d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f9      	bne.n	80080ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff ff3c 	bl	8007f58 <LL_ADC_IsInternalRegulatorEnabled>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10d      	bne.n	8008102 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	f043 0210 	orr.w	r2, r3, #16
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f6:	f043 0201 	orr.w	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff ff75 	bl	8007ff6 <LL_ADC_REG_IsConversionOngoing>
 800810c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008112:	f003 0310 	and.w	r3, r3, #16
 8008116:	2b00      	cmp	r3, #0
 8008118:	f040 80d2 	bne.w	80082c0 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 80ce 	bne.w	80082c0 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008128:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800812c:	f043 0202 	orr.w	r2, r3, #2
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff ff35 	bl	8007fa8 <LL_ADC_IsEnabled>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d115      	bne.n	8008170 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008144:	4867      	ldr	r0, [pc, #412]	; (80082e4 <HAL_ADC_Init+0x2a0>)
 8008146:	f7ff ff2f 	bl	8007fa8 <LL_ADC_IsEnabled>
 800814a:	4604      	mov	r4, r0
 800814c:	4866      	ldr	r0, [pc, #408]	; (80082e8 <HAL_ADC_Init+0x2a4>)
 800814e:	f7ff ff2b 	bl	8007fa8 <LL_ADC_IsEnabled>
 8008152:	4603      	mov	r3, r0
 8008154:	431c      	orrs	r4, r3
 8008156:	4865      	ldr	r0, [pc, #404]	; (80082ec <HAL_ADC_Init+0x2a8>)
 8008158:	f7ff ff26 	bl	8007fa8 <LL_ADC_IsEnabled>
 800815c:	4603      	mov	r3, r0
 800815e:	4323      	orrs	r3, r4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d105      	bne.n	8008170 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	4619      	mov	r1, r3
 800816a:	4861      	ldr	r0, [pc, #388]	; (80082f0 <HAL_ADC_Init+0x2ac>)
 800816c:	f7ff fd82 	bl	8007c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7e5b      	ldrb	r3, [r3, #25]
 8008174:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800817a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008180:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008186:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800818e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008190:	4313      	orrs	r3, r2
 8008192:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d106      	bne.n	80081ac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	3b01      	subs	r3, #1
 80081a4:	045b      	lsls	r3, r3, #17
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	4b49      	ldr	r3, [pc, #292]	; (80082f4 <HAL_ADC_Init+0x2b0>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	69b9      	ldr	r1, [r7, #24]
 80081d8:	430b      	orrs	r3, r1
 80081da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff ff08 	bl	8007ff6 <LL_ADC_REG_IsConversionOngoing>
 80081e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff ff15 	bl	800801c <LL_ADC_INJ_IsConversionOngoing>
 80081f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d140      	bne.n	800827c <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d13d      	bne.n	800827c <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7e1b      	ldrb	r3, [r3, #24]
 8008208:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800820a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008212:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008214:	4313      	orrs	r3, r2
 8008216:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008222:	f023 0306 	bic.w	r3, r3, #6
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	69b9      	ldr	r1, [r7, #24]
 800822c:	430b      	orrs	r3, r1
 800822e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008236:	2b01      	cmp	r3, #1
 8008238:	d118      	bne.n	800826c <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008244:	f023 0304 	bic.w	r3, r3, #4
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008250:	4311      	orrs	r1, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008256:	4311      	orrs	r1, r2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800825c:	430a      	orrs	r2, r1
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0201 	orr.w	r2, r2, #1
 8008268:	611a      	str	r2, [r3, #16]
 800826a:	e007      	b.n	800827c <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0201 	bic.w	r2, r2, #1
 800827a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10c      	bne.n	800829e <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f023 010f 	bic.w	r1, r3, #15
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	1e5a      	subs	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	631a      	str	r2, [r3, #48]	; 0x30
 800829c:	e007      	b.n	80082ae <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 020f 	bic.w	r2, r2, #15
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	f043 0201 	orr.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
 80082be:	e007      	b.n	80082d0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	f043 0210 	orr.w	r2, r3, #16
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80082d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3724      	adds	r7, #36	; 0x24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd90      	pop	{r4, r7, pc}
 80082da:	bf00      	nop
 80082dc:	200003b8 	.word	0x200003b8
 80082e0:	053e2d63 	.word	0x053e2d63
 80082e4:	50040000 	.word	0x50040000
 80082e8:	50040100 	.word	0x50040100
 80082ec:	50040200 	.word	0x50040200
 80082f0:	50040300 	.word	0x50040300
 80082f4:	fff0c007 	.word	0xfff0c007

080082f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008300:	4857      	ldr	r0, [pc, #348]	; (8008460 <HAL_ADC_Start+0x168>)
 8008302:	f7ff fde1 	bl	8007ec8 <LL_ADC_GetMultimode>
 8008306:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fe72 	bl	8007ff6 <LL_ADC_REG_IsConversionOngoing>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 809c 	bne.w	8008452 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_ADC_Start+0x30>
 8008324:	2302      	movs	r3, #2
 8008326:	e097      	b.n	8008458 <HAL_ADC_Start+0x160>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fd79 	bl	8008e28 <ADC_Enable>
 8008336:	4603      	mov	r3, r0
 8008338:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 8083 	bne.w	8008448 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008346:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a42      	ldr	r2, [pc, #264]	; (8008464 <HAL_ADC_Start+0x16c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d002      	beq.n	8008366 <HAL_ADC_Start+0x6e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	e000      	b.n	8008368 <HAL_ADC_Start+0x70>
 8008366:	4b40      	ldr	r3, [pc, #256]	; (8008468 <HAL_ADC_Start+0x170>)
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	4293      	cmp	r3, r2
 800836e:	d002      	beq.n	8008376 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d105      	bne.n	8008382 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800838a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838e:	d106      	bne.n	800839e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008394:	f023 0206 	bic.w	r2, r3, #6
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	65da      	str	r2, [r3, #92]	; 0x5c
 800839c:	e002      	b.n	80083a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	221c      	movs	r2, #28
 80083aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a2a      	ldr	r2, [pc, #168]	; (8008464 <HAL_ADC_Start+0x16c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d002      	beq.n	80083c4 <HAL_ADC_Start+0xcc>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	e000      	b.n	80083c6 <HAL_ADC_Start+0xce>
 80083c4:	4b28      	ldr	r3, [pc, #160]	; (8008468 <HAL_ADC_Start+0x170>)
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d008      	beq.n	80083e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d002      	beq.n	80083e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b09      	cmp	r3, #9
 80083de:	d114      	bne.n	800840a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80083f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff fde3 	bl	8007fce <LL_ADC_REG_StartConversion>
 8008408:	e025      	b.n	8008456 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a12      	ldr	r2, [pc, #72]	; (8008464 <HAL_ADC_Start+0x16c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d002      	beq.n	8008426 <HAL_ADC_Start+0x12e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	e000      	b.n	8008428 <HAL_ADC_Start+0x130>
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <HAL_ADC_Start+0x170>)
 8008428:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00f      	beq.n	8008456 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800843e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	659a      	str	r2, [r3, #88]	; 0x58
 8008446:	e006      	b.n	8008456 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008450:	e001      	b.n	8008456 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008452:	2302      	movs	r3, #2
 8008454:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	50040300 	.word	0x50040300
 8008464:	50040100 	.word	0x50040100
 8008468:	50040000 	.word	0x50040000

0800846c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008478:	4850      	ldr	r0, [pc, #320]	; (80085bc <HAL_ADC_Start_DMA+0x150>)
 800847a:	f7ff fd25 	bl	8007ec8 <LL_ADC_GetMultimode>
 800847e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff fdb6 	bl	8007ff6 <LL_ADC_REG_IsConversionOngoing>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 808e 	bne.w	80085ae <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_ADC_Start_DMA+0x34>
 800849c:	2302      	movs	r3, #2
 800849e:	e089      	b.n	80085b4 <HAL_ADC_Start_DMA+0x148>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d002      	beq.n	80084ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b09      	cmp	r3, #9
 80084b8:	d172      	bne.n	80085a0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fcb4 	bl	8008e28 <ADC_Enable>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d165      	bne.n	8008596 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084d2:	f023 0301 	bic.w	r3, r3, #1
 80084d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a37      	ldr	r2, [pc, #220]	; (80085c0 <HAL_ADC_Start_DMA+0x154>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d002      	beq.n	80084ee <HAL_ADC_Start_DMA+0x82>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	e000      	b.n	80084f0 <HAL_ADC_Start_DMA+0x84>
 80084ee:	4b35      	ldr	r3, [pc, #212]	; (80085c4 <HAL_ADC_Start_DMA+0x158>)
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d002      	beq.n	80084fe <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d105      	bne.n	800850a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d006      	beq.n	8008524 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851a:	f023 0206 	bic.w	r2, r3, #6
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	65da      	str	r2, [r3, #92]	; 0x5c
 8008522:	e002      	b.n	800852a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852e:	4a26      	ldr	r2, [pc, #152]	; (80085c8 <HAL_ADC_Start_DMA+0x15c>)
 8008530:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008536:	4a25      	ldr	r2, [pc, #148]	; (80085cc <HAL_ADC_Start_DMA+0x160>)
 8008538:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853e:	4a24      	ldr	r2, [pc, #144]	; (80085d0 <HAL_ADC_Start_DMA+0x164>)
 8008540:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	221c      	movs	r2, #28
 8008548:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0210 	orr.w	r2, r2, #16
 8008560:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0201 	orr.w	r2, r2, #1
 8008570:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3340      	adds	r3, #64	; 0x40
 800857c:	4619      	mov	r1, r3
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f001 fad5 	bl	8009b30 <HAL_DMA_Start_IT>
 8008586:	4603      	mov	r3, r0
 8008588:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff fd1d 	bl	8007fce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008594:	e00d      	b.n	80085b2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800859e:	e008      	b.n	80085b2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80085ac:	e001      	b.n	80085b2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80085ae:	2302      	movs	r3, #2
 80085b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	50040300 	.word	0x50040300
 80085c0:	50040100 	.word	0x50040100
 80085c4:	50040000 	.word	0x50040000
 80085c8:	08008eed 	.word	0x08008eed
 80085cc:	08008fc5 	.word	0x08008fc5
 80085d0:	08008fe1 	.word	0x08008fe1

080085d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b0b6      	sub	sp, #216	; 0xd8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_ADC_ConfigChannel+0x22>
 800862e:	2302      	movs	r3, #2
 8008630:	e3e3      	b.n	8008dfa <HAL_ADC_ConfigChannel+0x7ea>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fcd9 	bl	8007ff6 <LL_ADC_REG_IsConversionOngoing>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 83c4 	bne.w	8008dd4 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b05      	cmp	r3, #5
 8008652:	d824      	bhi.n	800869e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	3b02      	subs	r3, #2
 800865a:	2b03      	cmp	r3, #3
 800865c:	d81b      	bhi.n	8008696 <HAL_ADC_ConfigChannel+0x86>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <HAL_ADC_ConfigChannel+0x54>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	08008675 	.word	0x08008675
 8008668:	0800867d 	.word	0x0800867d
 800866c:	08008685 	.word	0x08008685
 8008670:	0800868d 	.word	0x0800868d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	220c      	movs	r2, #12
 8008678:	605a      	str	r2, [r3, #4]
          break;
 800867a:	e011      	b.n	80086a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2212      	movs	r2, #18
 8008680:	605a      	str	r2, [r3, #4]
          break;
 8008682:	e00d      	b.n	80086a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2218      	movs	r2, #24
 8008688:	605a      	str	r2, [r3, #4]
          break;
 800868a:	e009      	b.n	80086a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008692:	605a      	str	r2, [r3, #4]
          break;
 8008694:	e004      	b.n	80086a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2206      	movs	r2, #6
 800869a:	605a      	str	r2, [r3, #4]
          break;
 800869c:	e000      	b.n	80086a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800869e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6859      	ldr	r1, [r3, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	f7ff fb90 	bl	8007dd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fc9d 	bl	8007ff6 <LL_ADC_REG_IsConversionOngoing>
 80086bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fca9 	bl	800801c <LL_ADC_INJ_IsConversionOngoing>
 80086ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f040 81c1 	bne.w	8008a5a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f040 81bc 	bne.w	8008a5a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086ea:	d10f      	bne.n	800870c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	4619      	mov	r1, r3
 80086f8:	f7ff fb97 	bl	8007e2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff fb3e 	bl	8007d86 <LL_ADC_SetSamplingTimeCommonConfig>
 800870a:	e00e      	b.n	800872a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	461a      	mov	r2, r3
 800871a:	f7ff fb86 	bl	8007e2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fb2e 	bl	8007d86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	695a      	ldr	r2, [r3, #20]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	08db      	lsrs	r3, r3, #3
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	fa02 f303 	lsl.w	r3, r2, r3
 8008740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d00a      	beq.n	8008762 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	6919      	ldr	r1, [r3, #16]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800875c:	f7ff fabe 	bl	8007cdc <LL_ADC_SetOffset>
 8008760:	e17b      	b.n	8008a5a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fadb 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 800876e:	4603      	mov	r3, r0
 8008770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <HAL_ADC_ConfigChannel+0x17e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fad0 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 8008784:	4603      	mov	r3, r0
 8008786:	0e9b      	lsrs	r3, r3, #26
 8008788:	f003 021f 	and.w	r2, r3, #31
 800878c:	e01e      	b.n	80087cc <HAL_ADC_ConfigChannel+0x1bc>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fac5 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 800879a:	4603      	mov	r3, r0
 800879c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087a4:	fa93 f3a3 	rbit	r3, r3
 80087a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80087ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80087b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80087bc:	2320      	movs	r3, #32
 80087be:	e004      	b.n	80087ca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80087c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087c4:	fab3 f383 	clz	r3, r3
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <HAL_ADC_ConfigChannel+0x1d4>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	0e9b      	lsrs	r3, r3, #26
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	e018      	b.n	8008816 <HAL_ADC_ConfigChannel+0x206>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087f0:	fa93 f3a3 	rbit	r3, r3
 80087f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80087f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008800:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8008808:	2320      	movs	r3, #32
 800880a:	e004      	b.n	8008816 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800880c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008810:	fab3 f383 	clz	r3, r3
 8008814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008816:	429a      	cmp	r2, r3
 8008818:	d106      	bne.n	8008828 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2200      	movs	r2, #0
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fa94 	bl	8007d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fa78 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 8008834:	4603      	mov	r3, r0
 8008836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <HAL_ADC_ConfigChannel+0x244>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2101      	movs	r1, #1
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff fa6d 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 800884a:	4603      	mov	r3, r0
 800884c:	0e9b      	lsrs	r3, r3, #26
 800884e:	f003 021f 	and.w	r2, r3, #31
 8008852:	e01e      	b.n	8008892 <HAL_ADC_ConfigChannel+0x282>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2101      	movs	r1, #1
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fa62 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 8008860:	4603      	mov	r3, r0
 8008862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800886a:	fa93 f3a3 	rbit	r3, r3
 800886e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800887a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8008882:	2320      	movs	r3, #32
 8008884:	e004      	b.n	8008890 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8008886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800888a:	fab3 f383 	clz	r3, r3
 800888e:	b2db      	uxtb	r3, r3
 8008890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x29a>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	0e9b      	lsrs	r3, r3, #26
 80088a4:	f003 031f 	and.w	r3, r3, #31
 80088a8:	e018      	b.n	80088dc <HAL_ADC_ConfigChannel+0x2cc>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088b6:	fa93 f3a3 	rbit	r3, r3
 80088ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80088be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80088c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80088ce:	2320      	movs	r3, #32
 80088d0:	e004      	b.n	80088dc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80088d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088d6:	fab3 f383 	clz	r3, r3
 80088da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80088dc:	429a      	cmp	r2, r3
 80088de:	d106      	bne.n	80088ee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2200      	movs	r2, #0
 80088e6:	2101      	movs	r1, #1
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fa31 	bl	8007d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2102      	movs	r1, #2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff fa15 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <HAL_ADC_ConfigChannel+0x30a>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2102      	movs	r1, #2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fa0a 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 8008910:	4603      	mov	r3, r0
 8008912:	0e9b      	lsrs	r3, r3, #26
 8008914:	f003 021f 	and.w	r2, r3, #31
 8008918:	e01e      	b.n	8008958 <HAL_ADC_ConfigChannel+0x348>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2102      	movs	r1, #2
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff f9ff 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 8008926:	4603      	mov	r3, r0
 8008928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800892c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008930:	fa93 f3a3 	rbit	r3, r3
 8008934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800893c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8008948:	2320      	movs	r3, #32
 800894a:	e004      	b.n	8008956 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800894c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008950:	fab3 f383 	clz	r3, r3
 8008954:	b2db      	uxtb	r3, r3
 8008956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <HAL_ADC_ConfigChannel+0x360>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	0e9b      	lsrs	r3, r3, #26
 800896a:	f003 031f 	and.w	r3, r3, #31
 800896e:	e016      	b.n	800899e <HAL_ADC_ConfigChannel+0x38e>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800897c:	fa93 f3a3 	rbit	r3, r3
 8008980:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8008990:	2320      	movs	r3, #32
 8008992:	e004      	b.n	800899e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8008994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008998:	fab3 f383 	clz	r3, r3
 800899c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800899e:	429a      	cmp	r2, r3
 80089a0:	d106      	bne.n	80089b0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2200      	movs	r2, #0
 80089a8:	2102      	movs	r1, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff f9d0 	bl	8007d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2103      	movs	r1, #3
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff f9b4 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 80089bc:	4603      	mov	r3, r0
 80089be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <HAL_ADC_ConfigChannel+0x3cc>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2103      	movs	r1, #3
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff f9a9 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 80089d2:	4603      	mov	r3, r0
 80089d4:	0e9b      	lsrs	r3, r3, #26
 80089d6:	f003 021f 	and.w	r2, r3, #31
 80089da:	e017      	b.n	8008a0c <HAL_ADC_ConfigChannel+0x3fc>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2103      	movs	r1, #3
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff f99e 	bl	8007d24 <LL_ADC_GetOffsetChannel>
 80089e8:	4603      	mov	r3, r0
 80089ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ee:	fa93 f3a3 	rbit	r3, r3
 80089f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80089f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80089f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80089fe:	2320      	movs	r3, #32
 8008a00:	e003      	b.n	8008a0a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8008a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a04:	fab3 f383 	clz	r3, r3
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d105      	bne.n	8008a24 <HAL_ADC_ConfigChannel+0x414>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	0e9b      	lsrs	r3, r3, #26
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	e011      	b.n	8008a48 <HAL_ADC_ConfigChannel+0x438>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a2c:	fa93 f3a3 	rbit	r3, r3
 8008a30:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	e003      	b.n	8008a48 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8008a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a42:	fab3 f383 	clz	r3, r3
 8008a46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d106      	bne.n	8008a5a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	2103      	movs	r1, #3
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff f97b 	bl	8007d50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff faa2 	bl	8007fa8 <LL_ADC_IsEnabled>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 8140 	bne.w	8008cec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	f7ff fa01 	bl	8007e80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	4a8f      	ldr	r2, [pc, #572]	; (8008cc0 <HAL_ADC_ConfigChannel+0x6b0>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	f040 8131 	bne.w	8008cec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x4a2>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	0e9b      	lsrs	r3, r3, #26
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	2b09      	cmp	r3, #9
 8008aa8:	bf94      	ite	ls
 8008aaa:	2301      	movls	r3, #1
 8008aac:	2300      	movhi	r3, #0
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	e019      	b.n	8008ae6 <HAL_ADC_ConfigChannel+0x4d6>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aba:	fa93 f3a3 	rbit	r3, r3
 8008abe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ac2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8008aca:	2320      	movs	r3, #32
 8008acc:	e003      	b.n	8008ad6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8008ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad0:	fab3 f383 	clz	r3, r3
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	2b09      	cmp	r3, #9
 8008ade:	bf94      	ite	ls
 8008ae0:	2301      	movls	r3, #1
 8008ae2:	2300      	movhi	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d079      	beq.n	8008bde <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d107      	bne.n	8008b06 <HAL_ADC_ConfigChannel+0x4f6>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	0e9b      	lsrs	r3, r3, #26
 8008afc:	3301      	adds	r3, #1
 8008afe:	069b      	lsls	r3, r3, #26
 8008b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b04:	e015      	b.n	8008b32 <HAL_ADC_ConfigChannel+0x522>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b0e:	fa93 f3a3 	rbit	r3, r3
 8008b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b16:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8008b1e:	2320      	movs	r3, #32
 8008b20:	e003      	b.n	8008b2a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8008b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b24:	fab3 f383 	clz	r3, r3
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	069b      	lsls	r3, r3, #26
 8008b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <HAL_ADC_ConfigChannel+0x542>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	0e9b      	lsrs	r3, r3, #26
 8008b44:	3301      	adds	r3, #1
 8008b46:	f003 031f 	and.w	r3, r3, #31
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b50:	e017      	b.n	8008b82 <HAL_ADC_ConfigChannel+0x572>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5a:	fa93 f3a3 	rbit	r3, r3
 8008b5e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	e003      	b.n	8008b76 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8008b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b70:	fab3 f383 	clz	r3, r3
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	3301      	adds	r3, #1
 8008b78:	f003 031f 	and.w	r3, r3, #31
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b82:	ea42 0103 	orr.w	r1, r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <HAL_ADC_ConfigChannel+0x598>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	0e9b      	lsrs	r3, r3, #26
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f003 021f 	and.w	r2, r3, #31
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	4413      	add	r3, r2
 8008ba4:	051b      	lsls	r3, r3, #20
 8008ba6:	e018      	b.n	8008bda <HAL_ADC_ConfigChannel+0x5ca>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	fa93 f3a3 	rbit	r3, r3
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	e003      	b.n	8008bcc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc6:	fab3 f383 	clz	r3, r3
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	3301      	adds	r3, #1
 8008bce:	f003 021f 	and.w	r2, r3, #31
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	4413      	add	r3, r2
 8008bd8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bda:	430b      	orrs	r3, r1
 8008bdc:	e081      	b.n	8008ce2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d107      	bne.n	8008bfa <HAL_ADC_ConfigChannel+0x5ea>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	0e9b      	lsrs	r3, r3, #26
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	069b      	lsls	r3, r3, #26
 8008bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bf8:	e015      	b.n	8008c26 <HAL_ADC_ConfigChannel+0x616>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	fa93 f3a3 	rbit	r3, r3
 8008c06:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8008c12:	2320      	movs	r3, #32
 8008c14:	e003      	b.n	8008c1e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	fab3 f383 	clz	r3, r3
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	3301      	adds	r3, #1
 8008c20:	069b      	lsls	r3, r3, #26
 8008c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <HAL_ADC_ConfigChannel+0x636>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	0e9b      	lsrs	r3, r3, #26
 8008c38:	3301      	adds	r3, #1
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2101      	movs	r1, #1
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	e017      	b.n	8008c76 <HAL_ADC_ConfigChannel+0x666>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	fa93 f3a3 	rbit	r3, r3
 8008c52:	61fb      	str	r3, [r7, #28]
  return result;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8008c5e:	2320      	movs	r3, #32
 8008c60:	e003      	b.n	8008c6a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	fab3 f383 	clz	r3, r3
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	2101      	movs	r1, #1
 8008c72:	fa01 f303 	lsl.w	r3, r1, r3
 8008c76:	ea42 0103 	orr.w	r1, r2, r3
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10d      	bne.n	8008ca2 <HAL_ADC_ConfigChannel+0x692>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	0e9b      	lsrs	r3, r3, #26
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f003 021f 	and.w	r2, r3, #31
 8008c92:	4613      	mov	r3, r2
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	4413      	add	r3, r2
 8008c98:	3b1e      	subs	r3, #30
 8008c9a:	051b      	lsls	r3, r3, #20
 8008c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ca0:	e01e      	b.n	8008ce0 <HAL_ADC_ConfigChannel+0x6d0>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	fa93 f3a3 	rbit	r3, r3
 8008cae:	613b      	str	r3, [r7, #16]
  return result;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8008cba:	2320      	movs	r3, #32
 8008cbc:	e006      	b.n	8008ccc <HAL_ADC_ConfigChannel+0x6bc>
 8008cbe:	bf00      	nop
 8008cc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	fab3 f383 	clz	r3, r3
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f003 021f 	and.w	r2, r3, #31
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3b1e      	subs	r3, #30
 8008cda:	051b      	lsls	r3, r3, #20
 8008cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	6892      	ldr	r2, [r2, #8]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	f7ff f89f 	bl	8007e2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b44      	ldr	r3, [pc, #272]	; (8008e04 <HAL_ADC_ConfigChannel+0x7f4>)
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d07a      	beq.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008cf8:	4843      	ldr	r0, [pc, #268]	; (8008e08 <HAL_ADC_ConfigChannel+0x7f8>)
 8008cfa:	f7fe ffe1 	bl	8007cc0 <LL_ADC_GetCommonPathInternalCh>
 8008cfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a41      	ldr	r2, [pc, #260]	; (8008e0c <HAL_ADC_ConfigChannel+0x7fc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d12c      	bne.n	8008d66 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d126      	bne.n	8008d66 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a3c      	ldr	r2, [pc, #240]	; (8008e10 <HAL_ADC_ConfigChannel+0x800>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d004      	beq.n	8008d2c <HAL_ADC_ConfigChannel+0x71c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a3b      	ldr	r2, [pc, #236]	; (8008e14 <HAL_ADC_ConfigChannel+0x804>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d15d      	bne.n	8008de8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d34:	4619      	mov	r1, r3
 8008d36:	4834      	ldr	r0, [pc, #208]	; (8008e08 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d38:	f7fe ffaf 	bl	8007c9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d3c:	4b36      	ldr	r3, [pc, #216]	; (8008e18 <HAL_ADC_ConfigChannel+0x808>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	099b      	lsrs	r3, r3, #6
 8008d42:	4a36      	ldr	r2, [pc, #216]	; (8008e1c <HAL_ADC_ConfigChannel+0x80c>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	099b      	lsrs	r3, r3, #6
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008d56:	e002      	b.n	8008d5e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1f9      	bne.n	8008d58 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d64:	e040      	b.n	8008de8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a2d      	ldr	r2, [pc, #180]	; (8008e20 <HAL_ADC_ConfigChannel+0x810>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d118      	bne.n	8008da2 <HAL_ADC_ConfigChannel+0x792>
 8008d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d112      	bne.n	8008da2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a23      	ldr	r2, [pc, #140]	; (8008e10 <HAL_ADC_ConfigChannel+0x800>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <HAL_ADC_ConfigChannel+0x780>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a22      	ldr	r2, [pc, #136]	; (8008e14 <HAL_ADC_ConfigChannel+0x804>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d12d      	bne.n	8008dec <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d98:	4619      	mov	r1, r3
 8008d9a:	481b      	ldr	r0, [pc, #108]	; (8008e08 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d9c:	f7fe ff7d 	bl	8007c9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008da0:	e024      	b.n	8008dec <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1f      	ldr	r2, [pc, #124]	; (8008e24 <HAL_ADC_ConfigChannel+0x814>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d120      	bne.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d11a      	bne.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a14      	ldr	r2, [pc, #80]	; (8008e10 <HAL_ADC_ConfigChannel+0x800>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d115      	bne.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008dca:	4619      	mov	r1, r3
 8008dcc:	480e      	ldr	r0, [pc, #56]	; (8008e08 <HAL_ADC_ConfigChannel+0x7f8>)
 8008dce:	f7fe ff64 	bl	8007c9a <LL_ADC_SetCommonPathInternalCh>
 8008dd2:	e00c      	b.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	f043 0220 	orr.w	r2, r3, #32
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008de6:	e002      	b.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008de8:	bf00      	nop
 8008dea:	e000      	b.n	8008dee <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008dec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008df6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	37d8      	adds	r7, #216	; 0xd8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	80080000 	.word	0x80080000
 8008e08:	50040300 	.word	0x50040300
 8008e0c:	c7520000 	.word	0xc7520000
 8008e10:	50040000 	.word	0x50040000
 8008e14:	50040200 	.word	0x50040200
 8008e18:	200003b8 	.word	0x200003b8
 8008e1c:	053e2d63 	.word	0x053e2d63
 8008e20:	cb840000 	.word	0xcb840000
 8008e24:	80000001 	.word	0x80000001

08008e28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff f8b7 	bl	8007fa8 <LL_ADC_IsEnabled>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d14d      	bne.n	8008edc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	4b28      	ldr	r3, [pc, #160]	; (8008ee8 <ADC_Enable+0xc0>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00d      	beq.n	8008e6a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e52:	f043 0210 	orr.w	r2, r3, #16
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e5e:	f043 0201 	orr.w	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e039      	b.n	8008ede <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff f886 	bl	8007f80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008e74:	f7fe fece 	bl	8007c14 <HAL_GetTick>
 8008e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e7a:	e028      	b.n	8008ece <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff f891 	bl	8007fa8 <LL_ADC_IsEnabled>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff f875 	bl	8007f80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e96:	f7fe febd 	bl	8007c14 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d914      	bls.n	8008ece <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d00d      	beq.n	8008ece <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb6:	f043 0210 	orr.w	r2, r3, #16
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec2:	f043 0201 	orr.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e007      	b.n	8008ede <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d1cf      	bne.n	8008e7c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	8000003f 	.word	0x8000003f

08008eec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d14b      	bne.n	8008f9e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d021      	beq.n	8008f64 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe ff41 	bl	8007dac <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d032      	beq.n	8008f96 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d12b      	bne.n	8008f96 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d11f      	bne.n	8008f96 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	f043 0201 	orr.w	r2, r3, #1
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	659a      	str	r2, [r3, #88]	; 0x58
 8008f62:	e018      	b.n	8008f96 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d111      	bne.n	8008f96 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d105      	bne.n	8008f96 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fb1c 	bl	80085d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008f9c:	e00e      	b.n	8008fbc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fb26 	bl	80085fc <HAL_ADC_ErrorCallback>
}
 8008fb0:	e004      	b.n	8008fbc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
}
 8008fbc:	bf00      	nop
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff fb08 	bl	80085e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffe:	f043 0204 	orr.w	r2, r3, #4
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7ff faf8 	bl	80085fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <LL_ADC_IsEnabled>:
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <LL_ADC_IsEnabled+0x18>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <LL_ADC_IsEnabled+0x1a>
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <LL_ADC_REG_IsConversionOngoing>:
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b04      	cmp	r3, #4
 800904c:	d101      	bne.n	8009052 <LL_ADC_REG_IsConversionOngoing+0x18>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009060:	b590      	push	{r4, r7, lr}
 8009062:	b0a1      	sub	sp, #132	; 0x84
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800907a:	2302      	movs	r3, #2
 800907c:	e093      	b.n	80091a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8009086:	2300      	movs	r3, #0
 8009088:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800908a:	2300      	movs	r3, #0
 800908c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a47      	ldr	r2, [pc, #284]	; (80091b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d102      	bne.n	800909e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009098:	4b46      	ldr	r3, [pc, #280]	; (80091b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	e001      	b.n	80090a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10b      	bne.n	80090c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ac:	f043 0220 	orr.w	r2, r3, #32
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e072      	b.n	80091a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff ffb9 	bl	800903a <LL_ADC_REG_IsConversionOngoing>
 80090c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff ffb3 	bl	800903a <LL_ADC_REG_IsConversionOngoing>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d154      	bne.n	8009184 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80090da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d151      	bne.n	8009184 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090e0:	4b35      	ldr	r3, [pc, #212]	; (80091b8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80090e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d02c      	beq.n	8009146 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	6859      	ldr	r1, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090fe:	035b      	lsls	r3, r3, #13
 8009100:	430b      	orrs	r3, r1
 8009102:	431a      	orrs	r2, r3
 8009104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009106:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009108:	4829      	ldr	r0, [pc, #164]	; (80091b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800910a:	f7ff ff83 	bl	8009014 <LL_ADC_IsEnabled>
 800910e:	4604      	mov	r4, r0
 8009110:	4828      	ldr	r0, [pc, #160]	; (80091b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009112:	f7ff ff7f 	bl	8009014 <LL_ADC_IsEnabled>
 8009116:	4603      	mov	r3, r0
 8009118:	431c      	orrs	r4, r3
 800911a:	4828      	ldr	r0, [pc, #160]	; (80091bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800911c:	f7ff ff7a 	bl	8009014 <LL_ADC_IsEnabled>
 8009120:	4603      	mov	r3, r0
 8009122:	4323      	orrs	r3, r4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d137      	bne.n	8009198 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009130:	f023 030f 	bic.w	r3, r3, #15
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	6811      	ldr	r1, [r2, #0]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	6892      	ldr	r2, [r2, #8]
 800913c:	430a      	orrs	r2, r1
 800913e:	431a      	orrs	r2, r3
 8009140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009142:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009144:	e028      	b.n	8009198 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800914e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009150:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009152:	4817      	ldr	r0, [pc, #92]	; (80091b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009154:	f7ff ff5e 	bl	8009014 <LL_ADC_IsEnabled>
 8009158:	4604      	mov	r4, r0
 800915a:	4816      	ldr	r0, [pc, #88]	; (80091b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800915c:	f7ff ff5a 	bl	8009014 <LL_ADC_IsEnabled>
 8009160:	4603      	mov	r3, r0
 8009162:	431c      	orrs	r4, r3
 8009164:	4815      	ldr	r0, [pc, #84]	; (80091bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009166:	f7ff ff55 	bl	8009014 <LL_ADC_IsEnabled>
 800916a:	4603      	mov	r3, r0
 800916c:	4323      	orrs	r3, r4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d112      	bne.n	8009198 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800917a:	f023 030f 	bic.w	r3, r3, #15
 800917e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009180:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009182:	e009      	b.n	8009198 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009188:	f043 0220 	orr.w	r2, r3, #32
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009196:	e000      	b.n	800919a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009198:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80091a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3784      	adds	r7, #132	; 0x84
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd90      	pop	{r4, r7, pc}
 80091ae:	bf00      	nop
 80091b0:	50040000 	.word	0x50040000
 80091b4:	50040100 	.word	0x50040100
 80091b8:	50040300 	.word	0x50040300
 80091bc:	50040200 	.word	0x50040200

080091c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091d0:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <__NVIC_SetPriorityGrouping+0x44>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091dc:	4013      	ands	r3, r2
 80091de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091f2:	4a04      	ldr	r2, [pc, #16]	; (8009204 <__NVIC_SetPriorityGrouping+0x44>)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	60d3      	str	r3, [r2, #12]
}
 80091f8:	bf00      	nop
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	e000ed00 	.word	0xe000ed00

08009208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <__NVIC_GetPriorityGrouping+0x18>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	0a1b      	lsrs	r3, r3, #8
 8009212:	f003 0307 	and.w	r3, r3, #7
}
 8009216:	4618      	mov	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	e000ed00 	.word	0xe000ed00

08009224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800922e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009232:	2b00      	cmp	r3, #0
 8009234:	db0b      	blt.n	800924e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	f003 021f 	and.w	r2, r3, #31
 800923c:	4907      	ldr	r1, [pc, #28]	; (800925c <__NVIC_EnableIRQ+0x38>)
 800923e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009242:	095b      	lsrs	r3, r3, #5
 8009244:	2001      	movs	r0, #1
 8009246:	fa00 f202 	lsl.w	r2, r0, r2
 800924a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	e000e100 	.word	0xe000e100

08009260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800926c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009270:	2b00      	cmp	r3, #0
 8009272:	db0a      	blt.n	800928a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	b2da      	uxtb	r2, r3
 8009278:	490c      	ldr	r1, [pc, #48]	; (80092ac <__NVIC_SetPriority+0x4c>)
 800927a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800927e:	0112      	lsls	r2, r2, #4
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	440b      	add	r3, r1
 8009284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009288:	e00a      	b.n	80092a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	b2da      	uxtb	r2, r3
 800928e:	4908      	ldr	r1, [pc, #32]	; (80092b0 <__NVIC_SetPriority+0x50>)
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	3b04      	subs	r3, #4
 8009298:	0112      	lsls	r2, r2, #4
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	440b      	add	r3, r1
 800929e:	761a      	strb	r2, [r3, #24]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	e000e100 	.word	0xe000e100
 80092b0:	e000ed00 	.word	0xe000ed00

080092b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b089      	sub	sp, #36	; 0x24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	f1c3 0307 	rsb	r3, r3, #7
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	bf28      	it	cs
 80092d2:	2304      	movcs	r3, #4
 80092d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	3304      	adds	r3, #4
 80092da:	2b06      	cmp	r3, #6
 80092dc:	d902      	bls.n	80092e4 <NVIC_EncodePriority+0x30>
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	3b03      	subs	r3, #3
 80092e2:	e000      	b.n	80092e6 <NVIC_EncodePriority+0x32>
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	43da      	mvns	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	401a      	ands	r2, r3
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	fa01 f303 	lsl.w	r3, r1, r3
 8009306:	43d9      	mvns	r1, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800930c:	4313      	orrs	r3, r2
         );
}
 800930e:	4618      	mov	r0, r3
 8009310:	3724      	adds	r7, #36	; 0x24
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff ff4c 	bl	80091c0 <__NVIC_SetPriorityGrouping>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009342:	f7ff ff61 	bl	8009208 <__NVIC_GetPriorityGrouping>
 8009346:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	6978      	ldr	r0, [r7, #20]
 800934e:	f7ff ffb1 	bl	80092b4 <NVIC_EncodePriority>
 8009352:	4602      	mov	r2, r0
 8009354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009358:	4611      	mov	r1, r2
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff ff80 	bl	8009260 <__NVIC_SetPriority>
}
 8009360:	bf00      	nop
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff ff54 	bl	8009224 <__NVIC_EnableIRQ>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e014      	b.n	80093c0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	791b      	ldrb	r3, [r3, #4]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d105      	bne.n	80093ac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7fd fcc2 	bl	8006d30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	795b      	ldrb	r3, [r3, #5]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_DAC_Start_DMA+0x1e>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e0ab      	b.n	800953e <HAL_DAC_Start_DMA+0x176>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2202      	movs	r2, #2
 80093f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d12f      	bne.n	8009458 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	4a52      	ldr	r2, [pc, #328]	; (8009548 <HAL_DAC_Start_DMA+0x180>)
 80093fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	4a51      	ldr	r2, [pc, #324]	; (800954c <HAL_DAC_Start_DMA+0x184>)
 8009406:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	4a50      	ldr	r2, [pc, #320]	; (8009550 <HAL_DAC_Start_DMA+0x188>)
 800940e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800941e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2b08      	cmp	r3, #8
 8009424:	d013      	beq.n	800944e <HAL_DAC_Start_DMA+0x86>
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	2b08      	cmp	r3, #8
 800942a:	d845      	bhi.n	80094b8 <HAL_DAC_Start_DMA+0xf0>
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_DAC_Start_DMA+0x72>
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	2b04      	cmp	r3, #4
 8009436:	d005      	beq.n	8009444 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009438:	e03e      	b.n	80094b8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	613b      	str	r3, [r7, #16]
        break;
 8009442:	e03c      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	613b      	str	r3, [r7, #16]
        break;
 800944c:	e037      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3310      	adds	r3, #16
 8009454:	613b      	str	r3, [r7, #16]
        break;
 8009456:	e032      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	4a3d      	ldr	r2, [pc, #244]	; (8009554 <HAL_DAC_Start_DMA+0x18c>)
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	4a3c      	ldr	r2, [pc, #240]	; (8009558 <HAL_DAC_Start_DMA+0x190>)
 8009466:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4a3b      	ldr	r2, [pc, #236]	; (800955c <HAL_DAC_Start_DMA+0x194>)
 800946e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800947e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	2b08      	cmp	r3, #8
 8009484:	d013      	beq.n	80094ae <HAL_DAC_Start_DMA+0xe6>
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	2b08      	cmp	r3, #8
 800948a:	d817      	bhi.n	80094bc <HAL_DAC_Start_DMA+0xf4>
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_DAC_Start_DMA+0xd2>
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	2b04      	cmp	r3, #4
 8009496:	d005      	beq.n	80094a4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009498:	e010      	b.n	80094bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3314      	adds	r3, #20
 80094a0:	613b      	str	r3, [r7, #16]
        break;
 80094a2:	e00c      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3318      	adds	r3, #24
 80094aa:	613b      	str	r3, [r7, #16]
        break;
 80094ac:	e007      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	331c      	adds	r3, #28
 80094b4:	613b      	str	r3, [r7, #16]
        break;
 80094b6:	e002      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
        break;
 80094b8:	bf00      	nop
 80094ba:	e000      	b.n	80094be <HAL_DAC_Start_DMA+0xf6>
        break;
 80094bc:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d111      	bne.n	80094e8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6898      	ldr	r0, [r3, #8]
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	f000 fb27 	bl	8009b30 <HAL_DMA_Start_IT>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75fb      	strb	r3, [r7, #23]
 80094e6:	e010      	b.n	800950a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80094f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68d8      	ldr	r0, [r3, #12]
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	f000 fb15 	bl	8009b30 <HAL_DMA_Start_IT>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10c      	bne.n	8009530 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2201      	movs	r2, #1
 8009524:	409a      	lsls	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e005      	b.n	800953c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f043 0204 	orr.w	r2, r3, #4
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800953c:	7dfb      	ldrb	r3, [r7, #23]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	08009899 	.word	0x08009899
 800954c:	080098bb 	.word	0x080098bb
 8009550:	080098d7 	.word	0x080098d7
 8009554:	08009955 	.word	0x08009955
 8009558:	08009977 	.word	0x08009977
 800955c:	08009993 	.word	0x08009993

08009560 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009576:	d120      	bne.n	80095ba <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009586:	d118      	bne.n	80095ba <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2204      	movs	r2, #4
 800958c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80095a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f84b 	bl	8009650 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c8:	d120      	bne.n	800960c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d8:	d118      	bne.n	800960c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2204      	movs	r2, #4
 80095de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f043 0202 	orr.w	r2, r3, #2
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80095f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009604:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f99a 	bl	8009940 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	795b      	ldrb	r3, [r3, #5]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_DAC_ConfigChannel+0x1c>
 800967c:	2302      	movs	r3, #2
 800967e:	e107      	b.n	8009890 <HAL_DAC_ConfigChannel+0x22c>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2201      	movs	r2, #1
 8009684:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2202      	movs	r2, #2
 800968a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b04      	cmp	r3, #4
 8009692:	d174      	bne.n	800977e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009694:	f7fe fabe 	bl	8007c14 <HAL_GetTick>
 8009698:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d134      	bne.n	800970a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80096a0:	e011      	b.n	80096c6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80096a2:	f7fe fab7 	bl	8007c14 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d90a      	bls.n	80096c6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	f043 0208 	orr.w	r2, r3, #8
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2203      	movs	r2, #3
 80096c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e0e4      	b.n	8009890 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e6      	bne.n	80096a2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80096d4:	2001      	movs	r0, #1
 80096d6:	f7fe faa9 	bl	8007c2c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	6992      	ldr	r2, [r2, #24]
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40
 80096e4:	e01e      	b.n	8009724 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80096e6:	f7fe fa95 	bl	8007c14 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d90a      	bls.n	800970a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f043 0208 	orr.w	r2, r3, #8
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2203      	movs	r2, #3
 8009704:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e0c2      	b.n	8009890 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	2b00      	cmp	r3, #0
 8009712:	dbe8      	blt.n	80096e6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009714:	2001      	movs	r0, #1
 8009716:	f7fe fa89 	bl	8007c2c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	6992      	ldr	r2, [r2, #24]
 8009722:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f003 0310 	and.w	r3, r3, #16
 8009730:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009734:	fa01 f303 	lsl.w	r3, r1, r3
 8009738:	43db      	mvns	r3, r3
 800973a:	ea02 0103 	and.w	r1, r2, r3
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	69da      	ldr	r2, [r3, #28]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	409a      	lsls	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	21ff      	movs	r1, #255	; 0xff
 8009760:	fa01 f303 	lsl.w	r3, r1, r3
 8009764:	43db      	mvns	r3, r3
 8009766:	ea02 0103 	and.w	r1, r2, r3
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6a1a      	ldr	r2, [r3, #32]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	409a      	lsls	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d11d      	bne.n	80097c2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	221f      	movs	r2, #31
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	43db      	mvns	r3, r3
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	4013      	ands	r3, r2
 80097a0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f003 0310 	and.w	r3, r3, #16
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f003 0310 	and.w	r3, r3, #16
 80097d0:	2207      	movs	r2, #7
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	43db      	mvns	r3, r3
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	4013      	ands	r3, r2
 80097dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	431a      	orrs	r2, r3
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	fa02 f303 	lsl.w	r3, r2, r3
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	4313      	orrs	r3, r2
 8009800:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6819      	ldr	r1, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800981a:	fa02 f303 	lsl.w	r3, r2, r3
 800981e:	43da      	mvns	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	400a      	ands	r2, r1
 8009826:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f003 0310 	and.w	r3, r3, #16
 8009836:	f640 72fc 	movw	r2, #4092	; 0xffc
 800983a:	fa02 f303 	lsl.w	r3, r2, r3
 800983e:	43db      	mvns	r3, r3
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	4013      	ands	r3, r2
 8009844:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f003 0310 	and.w	r3, r3, #16
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	fa02 f303 	lsl.w	r3, r2, r3
 8009858:	69ba      	ldr	r2, [r7, #24]
 800985a:	4313      	orrs	r3, r2
 800985c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6819      	ldr	r1, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	22c0      	movs	r2, #192	; 0xc0
 8009874:	fa02 f303 	lsl.w	r3, r2, r3
 8009878:	43da      	mvns	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	400a      	ands	r2, r1
 8009880:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff feb4 	bl	8009614 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2201      	movs	r2, #1
 80098b0:	711a      	strb	r2, [r3, #4]
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff fead 	bl	8009628 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f043 0204 	orr.w	r2, r3, #4
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff fea3 	bl	800963c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	711a      	strb	r2, [r3, #4]
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009960:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff ffce 	bl	8009904 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	711a      	strb	r2, [r3, #4]
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009982:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff ffc7 	bl	8009918 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f043 0204 	orr.w	r2, r3, #4
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff ffbd 	bl	800992c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2201      	movs	r2, #1
 80099b6:	711a      	strb	r2, [r3, #4]
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e098      	b.n	8009b04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	4b4d      	ldr	r3, [pc, #308]	; (8009b10 <HAL_DMA_Init+0x150>)
 80099da:	429a      	cmp	r2, r3
 80099dc:	d80f      	bhi.n	80099fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	4b4b      	ldr	r3, [pc, #300]	; (8009b14 <HAL_DMA_Init+0x154>)
 80099e6:	4413      	add	r3, r2
 80099e8:	4a4b      	ldr	r2, [pc, #300]	; (8009b18 <HAL_DMA_Init+0x158>)
 80099ea:	fba2 2303 	umull	r2, r3, r2, r3
 80099ee:	091b      	lsrs	r3, r3, #4
 80099f0:	009a      	lsls	r2, r3, #2
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a48      	ldr	r2, [pc, #288]	; (8009b1c <HAL_DMA_Init+0x15c>)
 80099fa:	641a      	str	r2, [r3, #64]	; 0x40
 80099fc:	e00e      	b.n	8009a1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	4b46      	ldr	r3, [pc, #280]	; (8009b20 <HAL_DMA_Init+0x160>)
 8009a06:	4413      	add	r3, r2
 8009a08:	4a43      	ldr	r2, [pc, #268]	; (8009b18 <HAL_DMA_Init+0x158>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	091b      	lsrs	r3, r3, #4
 8009a10:	009a      	lsls	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a42      	ldr	r2, [pc, #264]	; (8009b24 <HAL_DMA_Init+0x164>)
 8009a1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a76:	d039      	beq.n	8009aec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	4a27      	ldr	r2, [pc, #156]	; (8009b1c <HAL_DMA_Init+0x15c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d11a      	bne.n	8009ab8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a82:	4b29      	ldr	r3, [pc, #164]	; (8009b28 <HAL_DMA_Init+0x168>)
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8a:	f003 031c 	and.w	r3, r3, #28
 8009a8e:	210f      	movs	r1, #15
 8009a90:	fa01 f303 	lsl.w	r3, r1, r3
 8009a94:	43db      	mvns	r3, r3
 8009a96:	4924      	ldr	r1, [pc, #144]	; (8009b28 <HAL_DMA_Init+0x168>)
 8009a98:	4013      	ands	r3, r2
 8009a9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009a9c:	4b22      	ldr	r3, [pc, #136]	; (8009b28 <HAL_DMA_Init+0x168>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6859      	ldr	r1, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa8:	f003 031c 	and.w	r3, r3, #28
 8009aac:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab0:	491d      	ldr	r1, [pc, #116]	; (8009b28 <HAL_DMA_Init+0x168>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	600b      	str	r3, [r1, #0]
 8009ab6:	e019      	b.n	8009aec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009ab8:	4b1c      	ldr	r3, [pc, #112]	; (8009b2c <HAL_DMA_Init+0x16c>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac0:	f003 031c 	and.w	r3, r3, #28
 8009ac4:	210f      	movs	r1, #15
 8009ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aca:	43db      	mvns	r3, r3
 8009acc:	4917      	ldr	r1, [pc, #92]	; (8009b2c <HAL_DMA_Init+0x16c>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009ad2:	4b16      	ldr	r3, [pc, #88]	; (8009b2c <HAL_DMA_Init+0x16c>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6859      	ldr	r1, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ade:	f003 031c 	and.w	r3, r3, #28
 8009ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae6:	4911      	ldr	r1, [pc, #68]	; (8009b2c <HAL_DMA_Init+0x16c>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	40020407 	.word	0x40020407
 8009b14:	bffdfff8 	.word	0xbffdfff8
 8009b18:	cccccccd 	.word	0xcccccccd
 8009b1c:	40020000 	.word	0x40020000
 8009b20:	bffdfbf8 	.word	0xbffdfbf8
 8009b24:	40020400 	.word	0x40020400
 8009b28:	400200a8 	.word	0x400200a8
 8009b2c:	400204a8 	.word	0x400204a8

08009b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_DMA_Start_IT+0x20>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e04b      	b.n	8009be8 <HAL_DMA_Start_IT+0xb8>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d13a      	bne.n	8009bda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0201 	bic.w	r2, r2, #1
 8009b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f95f 	bl	8009e4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d008      	beq.n	8009ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 020e 	orr.w	r2, r2, #14
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e00f      	b.n	8009bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0204 	bic.w	r2, r2, #4
 8009bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 020a 	orr.w	r2, r2, #10
 8009bc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 0201 	orr.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	e005      	b.n	8009be6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009be2:	2302      	movs	r3, #2
 8009be4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d008      	beq.n	8009c1a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e022      	b.n	8009c60 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f022 020e 	bic.w	r2, r2, #14
 8009c28:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0201 	bic.w	r2, r2, #1
 8009c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3e:	f003 021c 	and.w	r2, r3, #28
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	2101      	movs	r1, #1
 8009c48:	fa01 f202 	lsl.w	r2, r1, r2
 8009c4c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d005      	beq.n	8009c90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	73fb      	strb	r3, [r7, #15]
 8009c8e:	e029      	b.n	8009ce4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 020e 	bic.w	r2, r2, #14
 8009c9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb4:	f003 021c 	and.w	r2, r3, #28
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8009cc2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
    }
  }
  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0a:	f003 031c 	and.w	r3, r3, #28
 8009d0e:	2204      	movs	r2, #4
 8009d10:	409a      	lsls	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4013      	ands	r3, r2
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d026      	beq.n	8009d68 <HAL_DMA_IRQHandler+0x7a>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d021      	beq.n	8009d68 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d107      	bne.n	8009d42 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 0204 	bic.w	r2, r2, #4
 8009d40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d46:	f003 021c 	and.w	r2, r3, #28
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	2104      	movs	r1, #4
 8009d50:	fa01 f202 	lsl.w	r2, r1, r2
 8009d54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d071      	beq.n	8009e42 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009d66:	e06c      	b.n	8009e42 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6c:	f003 031c 	and.w	r3, r3, #28
 8009d70:	2202      	movs	r2, #2
 8009d72:	409a      	lsls	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4013      	ands	r3, r2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d02e      	beq.n	8009dda <HAL_DMA_IRQHandler+0xec>
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d029      	beq.n	8009dda <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0320 	and.w	r3, r3, #32
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10b      	bne.n	8009dac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f022 020a 	bic.w	r2, r2, #10
 8009da2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db0:	f003 021c 	and.w	r2, r3, #28
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db8:	2102      	movs	r1, #2
 8009dba:	fa01 f202 	lsl.w	r2, r1, r2
 8009dbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d038      	beq.n	8009e42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009dd8:	e033      	b.n	8009e42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dde:	f003 031c 	and.w	r3, r3, #28
 8009de2:	2208      	movs	r2, #8
 8009de4:	409a      	lsls	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4013      	ands	r3, r2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d02a      	beq.n	8009e44 <HAL_DMA_IRQHandler+0x156>
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d025      	beq.n	8009e44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 020e 	bic.w	r2, r2, #14
 8009e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0c:	f003 021c 	and.w	r2, r3, #28
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e14:	2101      	movs	r1, #1
 8009e16:	fa01 f202 	lsl.w	r2, r1, r2
 8009e1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
}
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5e:	f003 021c 	and.w	r2, r3, #28
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	2101      	movs	r1, #1
 8009e68:	fa01 f202 	lsl.w	r2, r1, r2
 8009e6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d108      	bne.n	8009e90 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e8e:	e007      	b.n	8009ea0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009eba:	e166      	b.n	800a18a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec8:	4013      	ands	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 8158 	beq.w	800a184 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d00b      	beq.n	8009ef4 <HAL_GPIO_Init+0x48>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d007      	beq.n	8009ef4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ee8:	2b11      	cmp	r3, #17
 8009eea:	d003      	beq.n	8009ef4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	2b12      	cmp	r3, #18
 8009ef2:	d130      	bne.n	8009f56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	2203      	movs	r2, #3
 8009f00:	fa02 f303 	lsl.w	r3, r2, r3
 8009f04:	43db      	mvns	r3, r3
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	fa02 f303 	lsl.w	r3, r2, r3
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f32:	43db      	mvns	r3, r3
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4013      	ands	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	091b      	lsrs	r3, r3, #4
 8009f40:	f003 0201 	and.w	r2, r3, #1
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	2203      	movs	r2, #3
 8009f62:	fa02 f303 	lsl.w	r3, r2, r3
 8009f66:	43db      	mvns	r3, r3
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d003      	beq.n	8009f96 <HAL_GPIO_Init+0xea>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2b12      	cmp	r3, #18
 8009f94:	d123      	bne.n	8009fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	08da      	lsrs	r2, r3, #3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3208      	adds	r2, #8
 8009f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	220f      	movs	r2, #15
 8009fae:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb2:	43db      	mvns	r3, r3
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	691a      	ldr	r2, [r3, #16]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f003 0307 	and.w	r3, r3, #7
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	08da      	lsrs	r2, r3, #3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3208      	adds	r2, #8
 8009fd8:	6939      	ldr	r1, [r7, #16]
 8009fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	2203      	movs	r2, #3
 8009fea:	fa02 f303 	lsl.w	r3, r2, r3
 8009fee:	43db      	mvns	r3, r3
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f003 0203 	and.w	r2, r3, #3
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	fa02 f303 	lsl.w	r3, r2, r3
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80b2 	beq.w	800a184 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a020:	4b61      	ldr	r3, [pc, #388]	; (800a1a8 <HAL_GPIO_Init+0x2fc>)
 800a022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a024:	4a60      	ldr	r2, [pc, #384]	; (800a1a8 <HAL_GPIO_Init+0x2fc>)
 800a026:	f043 0301 	orr.w	r3, r3, #1
 800a02a:	6613      	str	r3, [r2, #96]	; 0x60
 800a02c:	4b5e      	ldr	r3, [pc, #376]	; (800a1a8 <HAL_GPIO_Init+0x2fc>)
 800a02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a038:	4a5c      	ldr	r2, [pc, #368]	; (800a1ac <HAL_GPIO_Init+0x300>)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	089b      	lsrs	r3, r3, #2
 800a03e:	3302      	adds	r3, #2
 800a040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f003 0303 	and.w	r3, r3, #3
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	220f      	movs	r2, #15
 800a050:	fa02 f303 	lsl.w	r3, r2, r3
 800a054:	43db      	mvns	r3, r3
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	4013      	ands	r3, r2
 800a05a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a062:	d02b      	beq.n	800a0bc <HAL_GPIO_Init+0x210>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a52      	ldr	r2, [pc, #328]	; (800a1b0 <HAL_GPIO_Init+0x304>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d025      	beq.n	800a0b8 <HAL_GPIO_Init+0x20c>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a51      	ldr	r2, [pc, #324]	; (800a1b4 <HAL_GPIO_Init+0x308>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d01f      	beq.n	800a0b4 <HAL_GPIO_Init+0x208>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a50      	ldr	r2, [pc, #320]	; (800a1b8 <HAL_GPIO_Init+0x30c>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d019      	beq.n	800a0b0 <HAL_GPIO_Init+0x204>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a4f      	ldr	r2, [pc, #316]	; (800a1bc <HAL_GPIO_Init+0x310>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d013      	beq.n	800a0ac <HAL_GPIO_Init+0x200>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a4e      	ldr	r2, [pc, #312]	; (800a1c0 <HAL_GPIO_Init+0x314>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d00d      	beq.n	800a0a8 <HAL_GPIO_Init+0x1fc>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a4d      	ldr	r2, [pc, #308]	; (800a1c4 <HAL_GPIO_Init+0x318>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d007      	beq.n	800a0a4 <HAL_GPIO_Init+0x1f8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a4c      	ldr	r2, [pc, #304]	; (800a1c8 <HAL_GPIO_Init+0x31c>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d101      	bne.n	800a0a0 <HAL_GPIO_Init+0x1f4>
 800a09c:	2307      	movs	r3, #7
 800a09e:	e00e      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	e00c      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0a4:	2306      	movs	r3, #6
 800a0a6:	e00a      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0a8:	2305      	movs	r3, #5
 800a0aa:	e008      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	e006      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e004      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e002      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <HAL_GPIO_Init+0x212>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	f002 0203 	and.w	r2, r2, #3
 800a0c4:	0092      	lsls	r2, r2, #2
 800a0c6:	4093      	lsls	r3, r2
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a0ce:	4937      	ldr	r1, [pc, #220]	; (800a1ac <HAL_GPIO_Init+0x300>)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	089b      	lsrs	r3, r3, #2
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a0dc:	4b3b      	ldr	r3, [pc, #236]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a100:	4a32      	ldr	r2, [pc, #200]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a106:	4b31      	ldr	r3, [pc, #196]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	43db      	mvns	r3, r3
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4013      	ands	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	4313      	orrs	r3, r2
 800a128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a12a:	4a28      	ldr	r2, [pc, #160]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a130:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	43db      	mvns	r3, r3
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	4013      	ands	r3, r2
 800a13e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a154:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a15a:	4b1c      	ldr	r3, [pc, #112]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	43db      	mvns	r3, r3
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	4013      	ands	r3, r2
 800a168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a17e:	4a13      	ldr	r2, [pc, #76]	; (800a1cc <HAL_GPIO_Init+0x320>)
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	3301      	adds	r3, #1
 800a188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	fa22 f303 	lsr.w	r3, r2, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	f47f ae91 	bne.w	8009ebc <HAL_GPIO_Init+0x10>
  }
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	371c      	adds	r7, #28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	48000400 	.word	0x48000400
 800a1b4:	48000800 	.word	0x48000800
 800a1b8:	48000c00 	.word	0x48000c00
 800a1bc:	48001000 	.word	0x48001000
 800a1c0:	48001400 	.word	0x48001400
 800a1c4:	48001800 	.word	0x48001800
 800a1c8:	48001c00 	.word	0x48001c00
 800a1cc:	40010400 	.word	0x40010400

0800a1d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691a      	ldr	r2, [r3, #16]
 800a1e0:	887b      	ldrh	r3, [r7, #2]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	73fb      	strb	r3, [r7, #15]
 800a1ec:	e001      	b.n	800a1f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	807b      	strh	r3, [r7, #2]
 800a20c:	4613      	mov	r3, r2
 800a20e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a210:	787b      	ldrb	r3, [r7, #1]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a21c:	e002      	b.n	800a224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a21e:	887a      	ldrh	r2, [r7, #2]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a23a:	4b08      	ldr	r3, [pc, #32]	; (800a25c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a23c:	695a      	ldr	r2, [r3, #20]
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d006      	beq.n	800a254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a246:	4a05      	ldr	r2, [pc, #20]	; (800a25c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a248:	88fb      	ldrh	r3, [r7, #6]
 800a24a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f806 	bl	800a260 <HAL_GPIO_EXTI_Callback>
  }
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40010400 	.word	0x40010400

0800a260 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e081      	b.n	800a38c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d106      	bne.n	800a2a2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7fc fdbb 	bl	8006e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2224      	movs	r2, #36	; 0x24
 800a2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0201 	bic.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d107      	bne.n	800a2f0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2ec:	609a      	str	r2, [r3, #8]
 800a2ee:	e006      	b.n	800a2fe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a2fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d104      	bne.n	800a310 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a30e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a31e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a322:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a332:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691a      	ldr	r2, [r3, #16]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	ea42 0103 	orr.w	r1, r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	021a      	lsls	r2, r3, #8
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69d9      	ldr	r1, [r3, #28]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1a      	ldr	r2, [r3, #32]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0201 	orr.w	r2, r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af02      	add	r7, sp, #8
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	817b      	strh	r3, [r7, #10]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b20      	cmp	r3, #32
 800a3b2:	f040 80da 	bne.w	800a56a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d101      	bne.n	800a3c4 <HAL_I2C_Master_Transmit+0x30>
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e0d3      	b.n	800a56c <HAL_I2C_Master_Transmit+0x1d8>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a3cc:	f7fd fc22 	bl	8007c14 <HAL_GetTick>
 800a3d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	2319      	movs	r3, #25
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 f9e6 	bl	800a7b0 <I2C_WaitOnFlagUntilTimeout>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e0be      	b.n	800a56c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2221      	movs	r2, #33	; 0x21
 800a3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2210      	movs	r2, #16
 800a3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	893a      	ldrh	r2, [r7, #8]
 800a40e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	2bff      	cmp	r3, #255	; 0xff
 800a41e:	d90e      	bls.n	800a43e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	22ff      	movs	r2, #255	; 0xff
 800a424:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	8979      	ldrh	r1, [r7, #10]
 800a42e:	4b51      	ldr	r3, [pc, #324]	; (800a574 <HAL_I2C_Master_Transmit+0x1e0>)
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fb48 	bl	800aacc <I2C_TransferConfig>
 800a43c:	e06c      	b.n	800a518 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	8979      	ldrh	r1, [r7, #10]
 800a450:	4b48      	ldr	r3, [pc, #288]	; (800a574 <HAL_I2C_Master_Transmit+0x1e0>)
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fb37 	bl	800aacc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a45e:	e05b      	b.n	800a518 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	6a39      	ldr	r1, [r7, #32]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 f9e3 	bl	800a830 <I2C_WaitOnTXISFlagUntilTimeout>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e07b      	b.n	800a56c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a48e:	b29b      	uxth	r3, r3
 800a490:	3b01      	subs	r3, #1
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49c:	3b01      	subs	r3, #1
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d034      	beq.n	800a518 <HAL_I2C_Master_Transmit+0x184>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d130      	bne.n	800a518 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2180      	movs	r1, #128	; 0x80
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f975 	bl	800a7b0 <I2C_WaitOnFlagUntilTimeout>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e04d      	b.n	800a56c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2bff      	cmp	r3, #255	; 0xff
 800a4d8:	d90e      	bls.n	800a4f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	22ff      	movs	r2, #255	; 0xff
 800a4de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	8979      	ldrh	r1, [r7, #10]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 faeb 	bl	800aacc <I2C_TransferConfig>
 800a4f6:	e00f      	b.n	800a518 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a506:	b2da      	uxtb	r2, r3
 800a508:	8979      	ldrh	r1, [r7, #10]
 800a50a:	2300      	movs	r3, #0
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fada 	bl	800aacc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d19e      	bne.n	800a460 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	6a39      	ldr	r1, [r7, #32]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f9c2 	bl	800a8b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e01a      	b.n	800a56c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2220      	movs	r2, #32
 800a53c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6859      	ldr	r1, [r3, #4]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <HAL_I2C_Master_Transmit+0x1e4>)
 800a54a:	400b      	ands	r3, r1
 800a54c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	e000      	b.n	800a56c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a56a:	2302      	movs	r3, #2
  }
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	80002000 	.word	0x80002000
 800a578:	fe00e800 	.word	0xfe00e800

0800a57c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af02      	add	r7, sp, #8
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	461a      	mov	r2, r3
 800a588:	460b      	mov	r3, r1
 800a58a:	817b      	strh	r3, [r7, #10]
 800a58c:	4613      	mov	r3, r2
 800a58e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b20      	cmp	r3, #32
 800a59a:	f040 80db 	bne.w	800a754 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d101      	bne.n	800a5ac <HAL_I2C_Master_Receive+0x30>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e0d4      	b.n	800a756 <HAL_I2C_Master_Receive+0x1da>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a5b4:	f7fd fb2e 	bl	8007c14 <HAL_GetTick>
 800a5b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2319      	movs	r3, #25
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 f8f2 	bl	800a7b0 <I2C_WaitOnFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e0bf      	b.n	800a756 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2222      	movs	r2, #34	; 0x22
 800a5da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2210      	movs	r2, #16
 800a5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	893a      	ldrh	r2, [r7, #8]
 800a5f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a602:	b29b      	uxth	r3, r3
 800a604:	2bff      	cmp	r3, #255	; 0xff
 800a606:	d90e      	bls.n	800a626 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	22ff      	movs	r2, #255	; 0xff
 800a60c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a612:	b2da      	uxtb	r2, r3
 800a614:	8979      	ldrh	r1, [r7, #10]
 800a616:	4b52      	ldr	r3, [pc, #328]	; (800a760 <HAL_I2C_Master_Receive+0x1e4>)
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fa54 	bl	800aacc <I2C_TransferConfig>
 800a624:	e06d      	b.n	800a702 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a634:	b2da      	uxtb	r2, r3
 800a636:	8979      	ldrh	r1, [r7, #10]
 800a638:	4b49      	ldr	r3, [pc, #292]	; (800a760 <HAL_I2C_Master_Receive+0x1e4>)
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fa43 	bl	800aacc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a646:	e05c      	b.n	800a702 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	6a39      	ldr	r1, [r7, #32]
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f96b 	bl	800a928 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e07c      	b.n	800a756 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a678:	3b01      	subs	r3, #1
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a684:	b29b      	uxth	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a692:	b29b      	uxth	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d034      	beq.n	800a702 <HAL_I2C_Master_Receive+0x186>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d130      	bne.n	800a702 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2180      	movs	r1, #128	; 0x80
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 f880 	bl	800a7b0 <I2C_WaitOnFlagUntilTimeout>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e04d      	b.n	800a756 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2bff      	cmp	r3, #255	; 0xff
 800a6c2:	d90e      	bls.n	800a6e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	22ff      	movs	r2, #255	; 0xff
 800a6c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	8979      	ldrh	r1, [r7, #10]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f9f6 	bl	800aacc <I2C_TransferConfig>
 800a6e0:	e00f      	b.n	800a702 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	8979      	ldrh	r1, [r7, #10]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f9e5 	bl	800aacc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a706:	b29b      	uxth	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d19d      	bne.n	800a648 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	6a39      	ldr	r1, [r7, #32]
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f8cd 	bl	800a8b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e01a      	b.n	800a756 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2220      	movs	r2, #32
 800a726:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6859      	ldr	r1, [r3, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <HAL_I2C_Master_Receive+0x1e8>)
 800a734:	400b      	ands	r3, r1
 800a736:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2220      	movs	r2, #32
 800a73c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	e000      	b.n	800a756 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a754:	2302      	movs	r3, #2
  }
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	80002400 	.word	0x80002400
 800a764:	fe00e800 	.word	0xfe00e800

0800a768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d103      	bne.n	800a786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2200      	movs	r2, #0
 800a784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b01      	cmp	r3, #1
 800a792:	d007      	beq.n	800a7a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	699a      	ldr	r2, [r3, #24]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f042 0201 	orr.w	r2, r2, #1
 800a7a2:	619a      	str	r2, [r3, #24]
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7c0:	e022      	b.n	800a808 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c8:	d01e      	beq.n	800a808 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ca:	f7fd fa23 	bl	8007c14 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d113      	bne.n	800a808 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e4:	f043 0220 	orr.w	r2, r3, #32
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e00f      	b.n	800a828 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	4013      	ands	r3, r2
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	429a      	cmp	r2, r3
 800a816:	bf0c      	ite	eq
 800a818:	2301      	moveq	r3, #1
 800a81a:	2300      	movne	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	461a      	mov	r2, r3
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	429a      	cmp	r2, r3
 800a824:	d0cd      	beq.n	800a7c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a83c:	e02c      	b.n	800a898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f8dc 	bl	800aa00 <I2C_IsAcknowledgeFailed>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e02a      	b.n	800a8a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d01e      	beq.n	800a898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85a:	f7fd f9db 	bl	8007c14 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	d302      	bcc.n	800a870 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d113      	bne.n	800a898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a874:	f043 0220 	orr.w	r2, r3, #32
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e007      	b.n	800a8a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d1cb      	bne.n	800a83e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8bc:	e028      	b.n	800a910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f89c 	bl	800aa00 <I2C_IsAcknowledgeFailed>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e026      	b.n	800a920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8d2:	f7fd f99f 	bl	8007c14 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d302      	bcc.n	800a8e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d113      	bne.n	800a910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ec:	f043 0220 	orr.w	r2, r3, #32
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e007      	b.n	800a920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	d1cf      	bne.n	800a8be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a934:	e055      	b.n	800a9e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	68b9      	ldr	r1, [r7, #8]
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 f860 	bl	800aa00 <I2C_IsAcknowledgeFailed>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e053      	b.n	800a9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b20      	cmp	r3, #32
 800a956:	d129      	bne.n	800a9ac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f003 0304 	and.w	r3, r3, #4
 800a962:	2b04      	cmp	r3, #4
 800a964:	d105      	bne.n	800a972 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	e03f      	b.n	800a9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2220      	movs	r2, #32
 800a978:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6859      	ldr	r1, [r3, #4]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	4b1d      	ldr	r3, [pc, #116]	; (800a9fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a986:	400b      	ands	r3, r1
 800a988:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2220      	movs	r2, #32
 800a994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e022      	b.n	800a9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ac:	f7fd f932 	bl	8007c14 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d302      	bcc.n	800a9c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10f      	bne.n	800a9e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	f043 0220 	orr.w	r2, r3, #32
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e007      	b.n	800a9f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	f003 0304 	and.w	r3, r3, #4
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d1a2      	bne.n	800a936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	fe00e800 	.word	0xfe00e800

0800aa00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b10      	cmp	r3, #16
 800aa18:	d151      	bne.n	800aabe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa1a:	e022      	b.n	800aa62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa22:	d01e      	beq.n	800aa62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa24:	f7fd f8f6 	bl	8007c14 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d302      	bcc.n	800aa3a <I2C_IsAcknowledgeFailed+0x3a>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d113      	bne.n	800aa62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3e:	f043 0220 	orr.w	r2, r3, #32
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e02e      	b.n	800aac0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d1d5      	bne.n	800aa1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2210      	movs	r2, #16
 800aa76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff fe71 	bl	800a768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6859      	ldr	r1, [r3, #4]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa92:	400b      	ands	r3, r1
 800aa94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9a:	f043 0204 	orr.w	r2, r3, #4
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	fe00e800 	.word	0xfe00e800

0800aacc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	607b      	str	r3, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	817b      	strh	r3, [r7, #10]
 800aada:	4613      	mov	r3, r2
 800aadc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	0d5b      	lsrs	r3, r3, #21
 800aae8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aaec:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <I2C_TransferConfig+0x58>)
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	43db      	mvns	r3, r3
 800aaf2:	ea02 0103 	and.w	r1, r2, r3
 800aaf6:	897b      	ldrh	r3, [r7, #10]
 800aaf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aafc:	7a7b      	ldrb	r3, [r7, #9]
 800aafe:	041b      	lsls	r3, r3, #16
 800ab00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ab16:	bf00      	nop
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	03ff63ff 	.word	0x03ff63ff

0800ab28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d138      	bne.n	800abb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d101      	bne.n	800ab4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e032      	b.n	800abb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2224      	movs	r2, #36	; 0x24
 800ab58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0201 	bic.w	r2, r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6819      	ldr	r1, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f042 0201 	orr.w	r2, r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e000      	b.n	800abb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d139      	bne.n	800ac48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800abde:	2302      	movs	r3, #2
 800abe0:	e033      	b.n	800ac4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2224      	movs	r2, #36	; 0x24
 800abee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f042 0201 	orr.w	r2, r2, #1
 800ac32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	e000      	b.n	800ac4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ac48:	2302      	movs	r3, #2
  }
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ac56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac58:	b08f      	sub	sp, #60	; 0x3c
 800ac5a:	af0a      	add	r7, sp, #40	; 0x28
 800ac5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e116      	b.n	800ae96 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f00e fcb8 	bl	80195f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f006 f8b1 	bl	8010e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	603b      	str	r3, [r7, #0]
 800acb2:	687e      	ldr	r6, [r7, #4]
 800acb4:	466d      	mov	r5, sp
 800acb6:	f106 0410 	add.w	r4, r6, #16
 800acba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800acbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800acc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800acc6:	e885 0003 	stmia.w	r5, {r0, r1}
 800acca:	1d33      	adds	r3, r6, #4
 800accc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800acce:	6838      	ldr	r0, [r7, #0]
 800acd0:	f005 ffc3 	bl	8010c5a <USB_CoreInit>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2202      	movs	r2, #2
 800acde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e0d7      	b.n	800ae96 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2100      	movs	r1, #0
 800acec:	4618      	mov	r0, r3
 800acee:	f006 f89f 	bl	8010e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
 800acf6:	e04a      	b.n	800ad8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	1a9b      	subs	r3, r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	333d      	adds	r3, #61	; 0x3d
 800ad08:	2201      	movs	r2, #1
 800ad0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad0c:	7bfa      	ldrb	r2, [r7, #15]
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	333c      	adds	r3, #60	; 0x3c
 800ad1c:	7bfa      	ldrb	r2, [r7, #15]
 800ad1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ad20:	7bfa      	ldrb	r2, [r7, #15]
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	b298      	uxth	r0, r3
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	3342      	adds	r3, #66	; 0x42
 800ad34:	4602      	mov	r2, r0
 800ad36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad38:	7bfa      	ldrb	r2, [r7, #15]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	1a9b      	subs	r3, r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	333f      	adds	r3, #63	; 0x3f
 800ad48:	2200      	movs	r2, #0
 800ad4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad4c:	7bfa      	ldrb	r2, [r7, #15]
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	4613      	mov	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	440b      	add	r3, r1
 800ad5a:	3344      	adds	r3, #68	; 0x44
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad60:	7bfa      	ldrb	r2, [r7, #15]
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	4613      	mov	r3, r2
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	1a9b      	subs	r3, r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	440b      	add	r3, r1
 800ad6e:	3348      	adds	r3, #72	; 0x48
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad74:	7bfa      	ldrb	r2, [r7, #15]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	440b      	add	r3, r1
 800ad82:	3350      	adds	r3, #80	; 0x50
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	73fb      	strb	r3, [r7, #15]
 800ad8e:	7bfa      	ldrb	r2, [r7, #15]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d3af      	bcc.n	800acf8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73fb      	strb	r3, [r7, #15]
 800ad9c:	e044      	b.n	800ae28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad9e:	7bfa      	ldrb	r2, [r7, #15]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800adb4:	7bfa      	ldrb	r2, [r7, #15]
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	4613      	mov	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	1a9b      	subs	r3, r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800adc6:	7bfa      	ldrb	r2, [r7, #15]
 800adc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800adca:	7bfa      	ldrb	r2, [r7, #15]
 800adcc:	6879      	ldr	r1, [r7, #4]
 800adce:	4613      	mov	r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	1a9b      	subs	r3, r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	440b      	add	r3, r1
 800add8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	1a9b      	subs	r3, r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800adf6:	7bfa      	ldrb	r2, [r7, #15]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	4613      	mov	r3, r2
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	3301      	adds	r3, #1
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	7bfa      	ldrb	r2, [r7, #15]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d3b5      	bcc.n	800ad9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	687e      	ldr	r6, [r7, #4]
 800ae3a:	466d      	mov	r5, sp
 800ae3c:	f106 0410 	add.w	r4, r6, #16
 800ae40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae48:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae4c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae50:	1d33      	adds	r3, r6, #4
 800ae52:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae54:	6838      	ldr	r0, [r7, #0]
 800ae56:	f006 f815 	bl	8010e84 <USB_DevInit>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e014      	b.n	800ae96 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d102      	bne.n	800ae8a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 ff8f 	bl	800bda8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f006 ff97 	bl	8011dc2 <USB_DevDisconnect>

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_PCD_Start+0x1c>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e01c      	b.n	800aef4 <HAL_PCD_Start+0x56>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d105      	bne.n	800aed6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aece:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f005 ff86 	bl	8010dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f006 ff4b 	bl	8011d80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b08d      	sub	sp, #52	; 0x34
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f007 f809 	bl	8011f2a <USB_GetMode>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f040 838f 	bne.w	800b63e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4618      	mov	r0, r3
 800af26:	f006 ff6d 	bl	8011e04 <USB_ReadInterrupts>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 8385 	beq.w	800b63c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	f006 ff64 	bl	8011e04 <USB_ReadInterrupts>
 800af3c:	4603      	mov	r3, r0
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b02      	cmp	r3, #2
 800af44:	d107      	bne.n	800af56 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	695a      	ldr	r2, [r3, #20]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f002 0202 	and.w	r2, r2, #2
 800af54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f006 ff52 	bl	8011e04 <USB_ReadInterrupts>
 800af60:	4603      	mov	r3, r0
 800af62:	f003 0310 	and.w	r3, r3, #16
 800af66:	2b10      	cmp	r3, #16
 800af68:	d161      	bne.n	800b02e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	699a      	ldr	r2, [r3, #24]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0210 	bic.w	r2, r2, #16
 800af78:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	f003 020f 	and.w	r2, r3, #15
 800af86:	4613      	mov	r3, r2
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	1a9b      	subs	r3, r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	4413      	add	r3, r2
 800af96:	3304      	adds	r3, #4
 800af98:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	0c5b      	lsrs	r3, r3, #17
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d124      	bne.n	800aff0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800afac:	4013      	ands	r3, r2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d035      	beq.n	800b01e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	091b      	lsrs	r3, r3, #4
 800afba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800afbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	461a      	mov	r2, r3
 800afc4:	6a38      	ldr	r0, [r7, #32]
 800afc6:	f006 fdb8 	bl	8011b3a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	091b      	lsrs	r3, r3, #4
 800afd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afd6:	441a      	add	r2, r3
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	699a      	ldr	r2, [r3, #24]
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	091b      	lsrs	r3, r3, #4
 800afe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afe8:	441a      	add	r2, r3
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	619a      	str	r2, [r3, #24]
 800afee:	e016      	b.n	800b01e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	0c5b      	lsrs	r3, r3, #17
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	2b06      	cmp	r3, #6
 800affa:	d110      	bne.n	800b01e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b002:	2208      	movs	r2, #8
 800b004:	4619      	mov	r1, r3
 800b006:	6a38      	ldr	r0, [r7, #32]
 800b008:	f006 fd97 	bl	8011b3a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	091b      	lsrs	r3, r3, #4
 800b014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b018:	441a      	add	r2, r3
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	699a      	ldr	r2, [r3, #24]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f042 0210 	orr.w	r2, r2, #16
 800b02c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f006 fee6 	bl	8011e04 <USB_ReadInterrupts>
 800b038:	4603      	mov	r3, r0
 800b03a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b03e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b042:	d16e      	bne.n	800b122 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b044:	2300      	movs	r3, #0
 800b046:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f006 feec 	bl	8011e2a <USB_ReadDevAllOutEpInterrupt>
 800b052:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b054:	e062      	b.n	800b11c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d057      	beq.n	800b110 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b066:	b2d2      	uxtb	r2, r2
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f006 ff11 	bl	8011e92 <USB_ReadDevOutEPInterrupt>
 800b070:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00c      	beq.n	800b096 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b088:	461a      	mov	r2, r3
 800b08a:	2301      	movs	r3, #1
 800b08c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b08e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fdaf 	bl	800bbf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f003 0308 	and.w	r3, r3, #8
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00c      	beq.n	800b0ba <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b0b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fdeb 	bl	800bc90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f003 0310 	and.w	r3, r3, #16
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d008      	beq.n	800b0d6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	2310      	movs	r3, #16
 800b0d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d008      	beq.n	800b0f2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	2320      	movs	r3, #32
 800b0f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d009      	beq.n	800b110 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b108:	461a      	mov	r2, r3
 800b10a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b10e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	3301      	adds	r3, #1
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	085b      	lsrs	r3, r3, #1
 800b11a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d199      	bne.n	800b056 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f006 fe6c 	bl	8011e04 <USB_ReadInterrupts>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b136:	f040 8087 	bne.w	800b248 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f006 fe8d 	bl	8011e5e <USB_ReadDevAllInEpInterrupt>
 800b144:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b14a:	e07a      	b.n	800b242 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d06f      	beq.n	800b236 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	4611      	mov	r1, r2
 800b160:	4618      	mov	r0, r3
 800b162:	f006 feb4 	bl	8011ece <USB_ReadDevInEPInterrupt>
 800b166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d020      	beq.n	800b1b4 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	2201      	movs	r2, #1
 800b17a:	fa02 f303 	lsl.w	r3, r2, r3
 800b17e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	43db      	mvns	r3, r3
 800b18c:	69f9      	ldr	r1, [r7, #28]
 800b18e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b192:	4013      	ands	r3, r2
 800b194:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f00e fae1 	bl	8019776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f003 0308 	and.w	r3, r3, #8
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d008      	beq.n	800b1d0 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	2308      	movs	r3, #8
 800b1ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f003 0310 	and.w	r3, r3, #16
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d008      	beq.n	800b1ec <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	2310      	movs	r3, #16
 800b1ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d008      	beq.n	800b208 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b202:	461a      	mov	r2, r3
 800b204:	2340      	movs	r3, #64	; 0x40
 800b206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b21e:	461a      	mov	r2, r3
 800b220:	2302      	movs	r3, #2
 800b222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b22e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fc56 	bl	800bae2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	3301      	adds	r3, #1
 800b23a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	085b      	lsrs	r3, r3, #1
 800b240:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	2b00      	cmp	r3, #0
 800b246:	d181      	bne.n	800b14c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f006 fdd9 	bl	8011e04 <USB_ReadInterrupts>
 800b252:	4603      	mov	r3, r0
 800b254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b25c:	d122      	bne.n	800b2a4 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	69fa      	ldr	r2, [r7, #28]
 800b268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d108      	bne.n	800b28e <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b284:	2100      	movs	r1, #0
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f00e fdce 	bl	8019e28 <HAL_PCDEx_LPM_Callback>
 800b28c:	e002      	b.n	800b294 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f00e fade 	bl	8019850 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	695a      	ldr	r2, [r3, #20]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b2a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f006 fdab 	bl	8011e04 <USB_ReadInterrupts>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2b8:	d112      	bne.n	800b2e0 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d102      	bne.n	800b2d0 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f00e fa9a 	bl	8019804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	695a      	ldr	r2, [r3, #20]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b2de:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f006 fd8d 	bl	8011e04 <USB_ReadInterrupts>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f4:	d121      	bne.n	800b33a <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	695a      	ldr	r2, [r3, #20]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b304:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d111      	bne.n	800b334 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31e:	089b      	lsrs	r3, r3, #2
 800b320:	f003 020f 	and.w	r2, r3, #15
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b32a:	2101      	movs	r1, #1
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f00e fd7b 	bl	8019e28 <HAL_PCDEx_LPM_Callback>
 800b332:	e002      	b.n	800b33a <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f00e fa65 	bl	8019804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f006 fd60 	bl	8011e04 <USB_ReadInterrupts>
 800b344:	4603      	mov	r3, r0
 800b346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b34e:	f040 80c5 	bne.w	800b4dc <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	69fa      	ldr	r2, [r7, #28]
 800b35c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b360:	f023 0301 	bic.w	r3, r3, #1
 800b364:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2110      	movs	r1, #16
 800b36c:	4618      	mov	r0, r3
 800b36e:	f005 fed5 	bl	801111c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b372:	2300      	movs	r3, #0
 800b374:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b376:	e056      	b.n	800b426 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b384:	461a      	mov	r2, r3
 800b386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b38a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3aa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3bc:	0151      	lsls	r1, r2, #5
 800b3be:	69fa      	ldr	r2, [r7, #28]
 800b3c0:	440a      	add	r2, r1
 800b3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3f0:	0151      	lsls	r1, r2, #5
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b410:	0151      	lsls	r1, r2, #5
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	440a      	add	r2, r1
 800b416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b41e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	3301      	adds	r3, #1
 800b424:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d3a3      	bcc.n	800b378 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b436:	69db      	ldr	r3, [r3, #28]
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b43e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b442:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d016      	beq.n	800b47a <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b456:	69fa      	ldr	r2, [r7, #28]
 800b458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b45c:	f043 030b 	orr.w	r3, r3, #11
 800b460:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46c:	69fa      	ldr	r2, [r7, #28]
 800b46e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b472:	f043 030b 	orr.w	r3, r3, #11
 800b476:	6453      	str	r3, [r2, #68]	; 0x44
 800b478:	e015      	b.n	800b4a6 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b48c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b490:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	69fa      	ldr	r2, [r7, #28]
 800b49c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4a0:	f043 030b 	orr.w	r3, r3, #11
 800b4a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	69fa      	ldr	r2, [r7, #28]
 800b4b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f006 fd60 	bl	8011f8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	695a      	ldr	r2, [r3, #20]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b4da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f006 fc8f 	bl	8011e04 <USB_ReadInterrupts>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4f0:	d124      	bne.n	800b53c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f006 fd25 	bl	8011f46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f005 fe6c 	bl	80111de <USB_GetDevSpeed>
 800b506:	4603      	mov	r3, r0
 800b508:	461a      	mov	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681c      	ldr	r4, [r3, #0]
 800b512:	f001 fa85 	bl	800ca20 <HAL_RCC_GetHCLKFreq>
 800b516:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	4620      	mov	r0, r4
 800b522:	f005 fbc7 	bl	8010cb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f00e f94d 	bl	80197c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b53a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f006 fc5f 	bl	8011e04 <USB_ReadInterrupts>
 800b546:	4603      	mov	r3, r0
 800b548:	f003 0308 	and.w	r3, r3, #8
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d10a      	bne.n	800b566 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f00e f92a 	bl	80197aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	695a      	ldr	r2, [r3, #20]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f002 0208 	and.w	r2, r2, #8
 800b564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f006 fc4a 	bl	8011e04 <USB_ReadInterrupts>
 800b570:	4603      	mov	r3, r0
 800b572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b57a:	d10f      	bne.n	800b59c <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	b2db      	uxtb	r3, r3
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f00e f99c 	bl	80198c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	695a      	ldr	r2, [r3, #20]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b59a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f006 fc2f 	bl	8011e04 <USB_ReadInterrupts>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5b0:	d10f      	bne.n	800b5d2 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f00e f96f 	bl	80198a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	695a      	ldr	r2, [r3, #20]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b5d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f006 fc14 	bl	8011e04 <USB_ReadInterrupts>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e6:	d10a      	bne.n	800b5fe <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f00e f97d 	bl	80198e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	695a      	ldr	r2, [r3, #20]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b5fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4618      	mov	r0, r3
 800b604:	f006 fbfe 	bl	8011e04 <USB_ReadInterrupts>
 800b608:	4603      	mov	r3, r0
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d115      	bne.n	800b63e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f00e f96d 	bl	8019904 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6859      	ldr	r1, [r3, #4]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	430a      	orrs	r2, r1
 800b638:	605a      	str	r2, [r3, #4]
 800b63a:	e000      	b.n	800b63e <HAL_PCD_IRQHandler+0x742>
      return;
 800b63c:	bf00      	nop
    }
  }
}
 800b63e:	3734      	adds	r7, #52	; 0x34
 800b640:	46bd      	mov	sp, r7
 800b642:	bd90      	pop	{r4, r7, pc}

0800b644 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_PCD_SetAddress+0x1a>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e013      	b.n	800b686 <HAL_PCD_SetAddress+0x42>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	78fa      	ldrb	r2, [r7, #3]
 800b66a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	78fa      	ldrb	r2, [r7, #3]
 800b674:	4611      	mov	r1, r2
 800b676:	4618      	mov	r0, r3
 800b678:	f006 fb5c 	bl	8011d34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	461a      	mov	r2, r3
 800b69c:	4603      	mov	r3, r0
 800b69e:	70fb      	strb	r3, [r7, #3]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	803b      	strh	r3, [r7, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b6ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	da0f      	bge.n	800b6d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	3338      	adds	r3, #56	; 0x38
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	705a      	strb	r2, [r3, #1]
 800b6d2:	e00f      	b.n	800b6f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	f003 020f 	and.w	r2, r3, #15
 800b6da:	4613      	mov	r3, r2
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	1a9b      	subs	r3, r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b700:	883a      	ldrh	r2, [r7, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	78ba      	ldrb	r2, [r7, #2]
 800b70a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	785b      	ldrb	r3, [r3, #1]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b71e:	78bb      	ldrb	r3, [r7, #2]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d102      	bne.n	800b72a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_PCD_EP_Open+0xaa>
 800b734:	2302      	movs	r3, #2
 800b736:	e00e      	b.n	800b756 <HAL_PCD_EP_Open+0xc8>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68f9      	ldr	r1, [r7, #12]
 800b746:	4618      	mov	r0, r3
 800b748:	f005 fd68 	bl	801121c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b754:	7afb      	ldrb	r3, [r7, #11]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b76a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	da0f      	bge.n	800b792 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	f003 020f 	and.w	r2, r3, #15
 800b778:	4613      	mov	r3, r2
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	3338      	adds	r3, #56	; 0x38
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	4413      	add	r3, r2
 800b786:	3304      	adds	r3, #4
 800b788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2201      	movs	r2, #1
 800b78e:	705a      	strb	r2, [r3, #1]
 800b790:	e00f      	b.n	800b7b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b792:	78fb      	ldrb	r3, [r7, #3]
 800b794:	f003 020f 	and.w	r2, r3, #15
 800b798:	4613      	mov	r3, r2
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	1a9b      	subs	r3, r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	f003 030f 	and.w	r3, r3, #15
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d101      	bne.n	800b7cc <HAL_PCD_EP_Close+0x6e>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e00e      	b.n	800b7ea <HAL_PCD_EP_Close+0x8c>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68f9      	ldr	r1, [r7, #12]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f005 fda6 	bl	801132c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b086      	sub	sp, #24
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
 800b7fe:	460b      	mov	r3, r1
 800b800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b802:	7afb      	ldrb	r3, [r7, #11]
 800b804:	f003 020f 	and.w	r2, r3, #15
 800b808:	4613      	mov	r3, r2
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	1a9b      	subs	r3, r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4413      	add	r3, r2
 800b818:	3304      	adds	r3, #4
 800b81a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2200      	movs	r2, #0
 800b82c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	2200      	movs	r2, #0
 800b832:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	f003 030f 	and.w	r3, r3, #15
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b840:	7afb      	ldrb	r3, [r7, #11]
 800b842:	f003 030f 	and.w	r3, r3, #15
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6979      	ldr	r1, [r7, #20]
 800b850:	4618      	mov	r0, r3
 800b852:	f006 f823 	bl	801189c <USB_EP0StartXfer>
 800b856:	e005      	b.n	800b864 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6979      	ldr	r1, [r7, #20]
 800b85e:	4618      	mov	r0, r3
 800b860:	f005 fe40 	bl	80114e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	460b      	mov	r3, r1
 800b878:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	f003 020f 	and.w	r2, r3, #15
 800b880:	6879      	ldr	r1, [r7, #4]
 800b882:	4613      	mov	r3, r2
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	440b      	add	r3, r1
 800b88c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b890:	681b      	ldr	r3, [r3, #0]
}
 800b892:	4618      	mov	r0, r3
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b086      	sub	sp, #24
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
 800b8b0:	f003 020f 	and.w	r2, r3, #15
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	00db      	lsls	r3, r3, #3
 800b8b8:	1a9b      	subs	r3, r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	3338      	adds	r3, #56	; 0x38
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8de:	7afb      	ldrb	r3, [r7, #11]
 800b8e0:	f003 030f 	and.w	r3, r3, #15
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b8ea:	7afb      	ldrb	r3, [r7, #11]
 800b8ec:	f003 030f 	and.w	r3, r3, #15
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6979      	ldr	r1, [r7, #20]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f005 ffce 	bl	801189c <USB_EP0StartXfer>
 800b900:	e005      	b.n	800b90e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6979      	ldr	r1, [r7, #20]
 800b908:	4618      	mov	r0, r3
 800b90a:	f005 fdeb 	bl	80114e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	f003 020f 	and.w	r2, r3, #15
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d901      	bls.n	800b936 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e04e      	b.n	800b9d4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da0f      	bge.n	800b95e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b93e:	78fb      	ldrb	r3, [r7, #3]
 800b940:	f003 020f 	and.w	r2, r3, #15
 800b944:	4613      	mov	r3, r2
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	1a9b      	subs	r3, r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	3338      	adds	r3, #56	; 0x38
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	4413      	add	r3, r2
 800b952:	3304      	adds	r3, #4
 800b954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2201      	movs	r2, #1
 800b95a:	705a      	strb	r2, [r3, #1]
 800b95c:	e00d      	b.n	800b97a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	4613      	mov	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	1a9b      	subs	r3, r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	4413      	add	r3, r2
 800b970:	3304      	adds	r3, #4
 800b972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2201      	movs	r2, #1
 800b97e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	b2da      	uxtb	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <HAL_PCD_EP_SetStall+0x82>
 800b996:	2302      	movs	r3, #2
 800b998:	e01c      	b.n	800b9d4 <HAL_PCD_EP_SetStall+0xbc>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68f9      	ldr	r1, [r7, #12]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f006 f8ef 	bl	8011b8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	f003 030f 	and.w	r3, r3, #15
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d108      	bne.n	800b9ca <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f006 fae1 	bl	8011f8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	f003 020f 	and.w	r2, r3, #15
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d901      	bls.n	800b9fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e042      	b.n	800ba80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b9fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da0f      	bge.n	800ba22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba02:	78fb      	ldrb	r3, [r7, #3]
 800ba04:	f003 020f 	and.w	r2, r3, #15
 800ba08:	4613      	mov	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	1a9b      	subs	r3, r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	3338      	adds	r3, #56	; 0x38
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	4413      	add	r3, r2
 800ba16:	3304      	adds	r3, #4
 800ba18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	705a      	strb	r2, [r3, #1]
 800ba20:	e00f      	b.n	800ba42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba22:	78fb      	ldrb	r3, [r7, #3]
 800ba24:	f003 020f 	and.w	r2, r3, #15
 800ba28:	4613      	mov	r3, r2
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	4413      	add	r3, r2
 800ba38:	3304      	adds	r3, #4
 800ba3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	f003 030f 	and.w	r3, r3, #15
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d101      	bne.n	800ba62 <HAL_PCD_EP_ClrStall+0x86>
 800ba5e:	2302      	movs	r3, #2
 800ba60:	e00e      	b.n	800ba80 <HAL_PCD_EP_ClrStall+0xa4>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f006 f8f9 	bl	8011c68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d101      	bne.n	800baa2 <HAL_PCD_EP_Flush+0x1a>
 800ba9e:	2302      	movs	r3, #2
 800baa0:	e01b      	b.n	800bada <HAL_PCD_EP_Flush+0x52>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800baaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	da09      	bge.n	800bac6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	f003 030f 	and.w	r3, r3, #15
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	f005 fb2c 	bl	801111c <USB_FlushTxFifo>
 800bac4:	e004      	b.n	800bad0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4618      	mov	r0, r3
 800bacc:	f005 fb4c 	bl	8011168 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b088      	sub	sp, #32
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	4613      	mov	r3, r2
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	1a9b      	subs	r3, r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	3338      	adds	r3, #56	; 0x38
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4413      	add	r3, r2
 800bb06:	3304      	adds	r3, #4
 800bb08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d901      	bls.n	800bb1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e067      	b.n	800bbea <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	695a      	ldr	r2, [r3, #20]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	69fa      	ldr	r2, [r7, #28]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d902      	bls.n	800bb36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	3303      	adds	r3, #3
 800bb3a:	089b      	lsrs	r3, r3, #2
 800bb3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb3e:	e026      	b.n	800bb8e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	695a      	ldr	r2, [r3, #20]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	69fa      	ldr	r2, [r7, #28]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d902      	bls.n	800bb5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	3303      	adds	r3, #3
 800bb60:	089b      	lsrs	r3, r3, #2
 800bb62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	68d9      	ldr	r1, [r3, #12]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	6978      	ldr	r0, [r7, #20]
 800bb72:	f005 ffb1 	bl	8011ad8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	441a      	add	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	699a      	ldr	r2, [r3, #24]
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	441a      	add	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d809      	bhi.n	800bbb8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	699a      	ldr	r2, [r3, #24]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d203      	bcs.n	800bbb8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1c3      	bne.n	800bb40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	695a      	ldr	r2, [r3, #20]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d811      	bhi.n	800bbe8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	f003 030f 	and.w	r3, r3, #15
 800bbca:	2201      	movs	r2, #1
 800bbcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	43db      	mvns	r3, r3
 800bbde:	6939      	ldr	r1, [r7, #16]
 800bbe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3720      	adds	r7, #32
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	333c      	adds	r3, #60	; 0x3c
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4a19      	ldr	r2, [pc, #100]	; (800bc8c <PCD_EP_OutXfrComplete_int+0x98>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d124      	bne.n	800bc74 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc40:	461a      	mov	r2, r3
 800bc42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc46:	6093      	str	r3, [r2, #8]
 800bc48:	e01a      	b.n	800bc80 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d008      	beq.n	800bc66 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc60:	461a      	mov	r2, r3
 800bc62:	2320      	movs	r3, #32
 800bc64:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f00d fd67 	bl	8019740 <HAL_PCD_DataOutStageCallback>
 800bc72:	e005      	b.n	800bc80 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f00d fd60 	bl	8019740 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	4f54310a 	.word	0x4f54310a

0800bc90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	333c      	adds	r3, #60	; 0x3c
 800bca8:	3304      	adds	r3, #4
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	4a0c      	ldr	r2, [pc, #48]	; (800bcf4 <PCD_EP_OutSetupPacket_int+0x64>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d90e      	bls.n	800bce4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d009      	beq.n	800bce4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcdc:	461a      	mov	r2, r3
 800bcde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bce2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f00d fd19 	bl	801971c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	4f54300a 	.word	0x4f54300a

0800bcf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
 800bd04:	4613      	mov	r3, r2
 800bd06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d107      	bne.n	800bd26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bd16:	883b      	ldrh	r3, [r7, #0]
 800bd18:	0419      	lsls	r1, r3, #16
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	629a      	str	r2, [r3, #40]	; 0x28
 800bd24:	e028      	b.n	800bd78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2c:	0c1b      	lsrs	r3, r3, #16
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	4413      	add	r3, r2
 800bd32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
 800bd38:	e00d      	b.n	800bd56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	3340      	adds	r3, #64	; 0x40
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	0c1b      	lsrs	r3, r3, #16
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	3301      	adds	r3, #1
 800bd54:	73fb      	strb	r3, [r7, #15]
 800bd56:	7bfa      	ldrb	r2, [r7, #15]
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d3ec      	bcc.n	800bd3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bd60:	883b      	ldrh	r3, [r7, #0]
 800bd62:	0418      	lsls	r0, r3, #16
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6819      	ldr	r1, [r3, #0]
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	4302      	orrs	r2, r0
 800bd70:	3340      	adds	r3, #64	; 0x40
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	887a      	ldrh	r2, [r7, #2]
 800bd98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdda:	f043 0303 	orr.w	r3, r3, #3
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a04      	ldr	r2, [pc, #16]	; (800be0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bdfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdfe:	6013      	str	r3, [r2, #0]
}
 800be00:	bf00      	nop
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	40007000 	.word	0x40007000

0800be10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800be14:	4b04      	ldr	r3, [pc, #16]	; (800be28 <HAL_PWREx_GetVoltageRange+0x18>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	40007000 	.word	0x40007000

0800be2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be3a:	d130      	bne.n	800be9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800be3c:	4b23      	ldr	r3, [pc, #140]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be48:	d038      	beq.n	800bebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800be4a:	4b20      	ldr	r3, [pc, #128]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be52:	4a1e      	ldr	r2, [pc, #120]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800be5a:	4b1d      	ldr	r3, [pc, #116]	; (800bed0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2232      	movs	r2, #50	; 0x32
 800be60:	fb02 f303 	mul.w	r3, r2, r3
 800be64:	4a1b      	ldr	r2, [pc, #108]	; (800bed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800be66:	fba2 2303 	umull	r2, r3, r2, r3
 800be6a:	0c9b      	lsrs	r3, r3, #18
 800be6c:	3301      	adds	r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be70:	e002      	b.n	800be78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3b01      	subs	r3, #1
 800be76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be78:	4b14      	ldr	r3, [pc, #80]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be84:	d102      	bne.n	800be8c <HAL_PWREx_ControlVoltageScaling+0x60>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1f2      	bne.n	800be72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be8c:	4b0f      	ldr	r3, [pc, #60]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be98:	d110      	bne.n	800bebc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e00f      	b.n	800bebe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be9e:	4b0b      	ldr	r3, [pc, #44]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beaa:	d007      	beq.n	800bebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800beb4:	4a05      	ldr	r2, [pc, #20]	; (800becc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800beb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800beba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	40007000 	.word	0x40007000
 800bed0:	200003b8 	.word	0x200003b8
 800bed4:	431bde83 	.word	0x431bde83

0800bed8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bed8:	b480      	push	{r7}
 800beda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	4a04      	ldr	r2, [pc, #16]	; (800bef4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800bee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bee6:	6053      	str	r3, [r2, #4]
}
 800bee8:	bf00      	nop
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	40007000 	.word	0x40007000

0800bef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	f000 bc16 	b.w	800c738 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf0c:	4ba0      	ldr	r3, [pc, #640]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f003 030c 	and.w	r3, r3, #12
 800bf14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf16:	4b9e      	ldr	r3, [pc, #632]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0310 	and.w	r3, r3, #16
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 80e4 	beq.w	800c0f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d007      	beq.n	800bf44 <HAL_RCC_OscConfig+0x4c>
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	2b0c      	cmp	r3, #12
 800bf38:	f040 808b 	bne.w	800c052 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	f040 8087 	bne.w	800c052 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf44:	4b92      	ldr	r3, [pc, #584]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d005      	beq.n	800bf5c <HAL_RCC_OscConfig+0x64>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e3ed      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a1a      	ldr	r2, [r3, #32]
 800bf60:	4b8b      	ldr	r3, [pc, #556]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d004      	beq.n	800bf76 <HAL_RCC_OscConfig+0x7e>
 800bf6c:	4b88      	ldr	r3, [pc, #544]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf74:	e005      	b.n	800bf82 <HAL_RCC_OscConfig+0x8a>
 800bf76:	4b86      	ldr	r3, [pc, #536]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf7c:	091b      	lsrs	r3, r3, #4
 800bf7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d223      	bcs.n	800bfce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f000 fdb2 	bl	800caf4 <RCC_SetFlashLatencyFromMSIRange>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e3ce      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf9a:	4b7d      	ldr	r3, [pc, #500]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a7c      	ldr	r2, [pc, #496]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfa0:	f043 0308 	orr.w	r3, r3, #8
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	4b7a      	ldr	r3, [pc, #488]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	4977      	ldr	r1, [pc, #476]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfb8:	4b75      	ldr	r3, [pc, #468]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	69db      	ldr	r3, [r3, #28]
 800bfc4:	021b      	lsls	r3, r3, #8
 800bfc6:	4972      	ldr	r1, [pc, #456]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	604b      	str	r3, [r1, #4]
 800bfcc:	e025      	b.n	800c01a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bfce:	4b70      	ldr	r3, [pc, #448]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a6f      	ldr	r2, [pc, #444]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfd4:	f043 0308 	orr.w	r3, r3, #8
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	4b6d      	ldr	r3, [pc, #436]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	496a      	ldr	r1, [pc, #424]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfec:	4b68      	ldr	r3, [pc, #416]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	69db      	ldr	r3, [r3, #28]
 800bff8:	021b      	lsls	r3, r3, #8
 800bffa:	4965      	ldr	r1, [pc, #404]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800bffc:	4313      	orrs	r3, r2
 800bffe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fd72 	bl	800caf4 <RCC_SetFlashLatencyFromMSIRange>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e38e      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c01a:	f000 fc75 	bl	800c908 <HAL_RCC_GetSysClockFreq>
 800c01e:	4602      	mov	r2, r0
 800c020:	4b5b      	ldr	r3, [pc, #364]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	091b      	lsrs	r3, r3, #4
 800c026:	f003 030f 	and.w	r3, r3, #15
 800c02a:	495a      	ldr	r1, [pc, #360]	; (800c194 <HAL_RCC_OscConfig+0x29c>)
 800c02c:	5ccb      	ldrb	r3, [r1, r3]
 800c02e:	f003 031f 	and.w	r3, r3, #31
 800c032:	fa22 f303 	lsr.w	r3, r2, r3
 800c036:	4a58      	ldr	r2, [pc, #352]	; (800c198 <HAL_RCC_OscConfig+0x2a0>)
 800c038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c03a:	4b58      	ldr	r3, [pc, #352]	; (800c19c <HAL_RCC_OscConfig+0x2a4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fb f9c8 	bl	80073d4 <HAL_InitTick>
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d052      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	e372      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d032      	beq.n	800c0c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c05a:	4b4d      	ldr	r3, [pc, #308]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a4c      	ldr	r2, [pc, #304]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c060:	f043 0301 	orr.w	r3, r3, #1
 800c064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c066:	f7fb fdd5 	bl	8007c14 <HAL_GetTick>
 800c06a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c06c:	e008      	b.n	800c080 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c06e:	f7fb fdd1 	bl	8007c14 <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d901      	bls.n	800c080 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e35b      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c080:	4b43      	ldr	r3, [pc, #268]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 0302 	and.w	r3, r3, #2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d0f0      	beq.n	800c06e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c08c:	4b40      	ldr	r3, [pc, #256]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a3f      	ldr	r2, [pc, #252]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c092:	f043 0308 	orr.w	r3, r3, #8
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	4b3d      	ldr	r3, [pc, #244]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	493a      	ldr	r1, [pc, #232]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c0aa:	4b39      	ldr	r3, [pc, #228]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	021b      	lsls	r3, r3, #8
 800c0b8:	4935      	ldr	r1, [pc, #212]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	604b      	str	r3, [r1, #4]
 800c0be:	e01a      	b.n	800c0f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c0c0:	4b33      	ldr	r3, [pc, #204]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a32      	ldr	r2, [pc, #200]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c0c6:	f023 0301 	bic.w	r3, r3, #1
 800c0ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c0cc:	f7fb fda2 	bl	8007c14 <HAL_GetTick>
 800c0d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0d2:	e008      	b.n	800c0e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0d4:	f7fb fd9e 	bl	8007c14 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d901      	bls.n	800c0e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e328      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0302 	and.w	r3, r3, #2
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1f0      	bne.n	800c0d4 <HAL_RCC_OscConfig+0x1dc>
 800c0f2:	e000      	b.n	800c0f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c0f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d073      	beq.n	800c1ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	2b08      	cmp	r3, #8
 800c106:	d005      	beq.n	800c114 <HAL_RCC_OscConfig+0x21c>
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	2b0c      	cmp	r3, #12
 800c10c:	d10e      	bne.n	800c12c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2b03      	cmp	r3, #3
 800c112:	d10b      	bne.n	800c12c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c114:	4b1e      	ldr	r3, [pc, #120]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d063      	beq.n	800c1e8 <HAL_RCC_OscConfig+0x2f0>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d15f      	bne.n	800c1e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e305      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c134:	d106      	bne.n	800c144 <HAL_RCC_OscConfig+0x24c>
 800c136:	4b16      	ldr	r3, [pc, #88]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a15      	ldr	r2, [pc, #84]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c13c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	e01d      	b.n	800c180 <HAL_RCC_OscConfig+0x288>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c14c:	d10c      	bne.n	800c168 <HAL_RCC_OscConfig+0x270>
 800c14e:	4b10      	ldr	r3, [pc, #64]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a0f      	ldr	r2, [pc, #60]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c158:	6013      	str	r3, [r2, #0]
 800c15a:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a0c      	ldr	r2, [pc, #48]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	e00b      	b.n	800c180 <HAL_RCC_OscConfig+0x288>
 800c168:	4b09      	ldr	r3, [pc, #36]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a08      	ldr	r2, [pc, #32]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c16e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	4b06      	ldr	r3, [pc, #24]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a05      	ldr	r2, [pc, #20]	; (800c190 <HAL_RCC_OscConfig+0x298>)
 800c17a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c17e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01b      	beq.n	800c1c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c188:	f7fb fd44 	bl	8007c14 <HAL_GetTick>
 800c18c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c18e:	e010      	b.n	800c1b2 <HAL_RCC_OscConfig+0x2ba>
 800c190:	40021000 	.word	0x40021000
 800c194:	08023ddc 	.word	0x08023ddc
 800c198:	200003b8 	.word	0x200003b8
 800c19c:	200003bc 	.word	0x200003bc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1a0:	f7fb fd38 	bl	8007c14 <HAL_GetTick>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	2b64      	cmp	r3, #100	; 0x64
 800c1ac:	d901      	bls.n	800c1b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e2c2      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c1b2:	4baf      	ldr	r3, [pc, #700]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0f0      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x2a8>
 800c1be:	e014      	b.n	800c1ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1c0:	f7fb fd28 	bl	8007c14 <HAL_GetTick>
 800c1c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1c6:	e008      	b.n	800c1da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1c8:	f7fb fd24 	bl	8007c14 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	2b64      	cmp	r3, #100	; 0x64
 800c1d4:	d901      	bls.n	800c1da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e2ae      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1da:	4ba5      	ldr	r3, [pc, #660]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1f0      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x2d0>
 800c1e6:	e000      	b.n	800c1ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 0302 	and.w	r3, r3, #2
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d060      	beq.n	800c2b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d005      	beq.n	800c208 <HAL_RCC_OscConfig+0x310>
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	2b0c      	cmp	r3, #12
 800c200:	d119      	bne.n	800c236 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b02      	cmp	r3, #2
 800c206:	d116      	bne.n	800c236 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c208:	4b99      	ldr	r3, [pc, #612]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <HAL_RCC_OscConfig+0x328>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d101      	bne.n	800c220 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e28b      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c220:	4b93      	ldr	r3, [pc, #588]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	061b      	lsls	r3, r3, #24
 800c22e:	4990      	ldr	r1, [pc, #576]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c230:	4313      	orrs	r3, r2
 800c232:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c234:	e040      	b.n	800c2b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d023      	beq.n	800c286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c23e:	4b8c      	ldr	r3, [pc, #560]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a8b      	ldr	r2, [pc, #556]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c24a:	f7fb fce3 	bl	8007c14 <HAL_GetTick>
 800c24e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c250:	e008      	b.n	800c264 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c252:	f7fb fcdf 	bl	8007c14 <HAL_GetTick>
 800c256:	4602      	mov	r2, r0
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d901      	bls.n	800c264 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	e269      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c264:	4b82      	ldr	r3, [pc, #520]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d0f0      	beq.n	800c252 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c270:	4b7f      	ldr	r3, [pc, #508]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	061b      	lsls	r3, r3, #24
 800c27e:	497c      	ldr	r1, [pc, #496]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c280:	4313      	orrs	r3, r2
 800c282:	604b      	str	r3, [r1, #4]
 800c284:	e018      	b.n	800c2b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c286:	4b7a      	ldr	r3, [pc, #488]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a79      	ldr	r2, [pc, #484]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c292:	f7fb fcbf 	bl	8007c14 <HAL_GetTick>
 800c296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c298:	e008      	b.n	800c2ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c29a:	f7fb fcbb 	bl	8007c14 <HAL_GetTick>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d901      	bls.n	800c2ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e245      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c2ac:	4b70      	ldr	r3, [pc, #448]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f0      	bne.n	800c29a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0308 	and.w	r3, r3, #8
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d03c      	beq.n	800c33e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01c      	beq.n	800c306 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c2cc:	4b68      	ldr	r3, [pc, #416]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c2ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2d2:	4a67      	ldr	r2, [pc, #412]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c2d4:	f043 0301 	orr.w	r3, r3, #1
 800c2d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2dc:	f7fb fc9a 	bl	8007c14 <HAL_GetTick>
 800c2e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2e2:	e008      	b.n	800c2f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2e4:	f7fb fc96 	bl	8007c14 <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d901      	bls.n	800c2f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	e220      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2f6:	4b5e      	ldr	r3, [pc, #376]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c2f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2fc:	f003 0302 	and.w	r3, r3, #2
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0ef      	beq.n	800c2e4 <HAL_RCC_OscConfig+0x3ec>
 800c304:	e01b      	b.n	800c33e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c306:	4b5a      	ldr	r3, [pc, #360]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c30c:	4a58      	ldr	r2, [pc, #352]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c30e:	f023 0301 	bic.w	r3, r3, #1
 800c312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c316:	f7fb fc7d 	bl	8007c14 <HAL_GetTick>
 800c31a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c31c:	e008      	b.n	800c330 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c31e:	f7fb fc79 	bl	8007c14 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d901      	bls.n	800c330 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e203      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c330:	4b4f      	ldr	r3, [pc, #316]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1ef      	bne.n	800c31e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0304 	and.w	r3, r3, #4
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 80a6 	beq.w	800c498 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c34c:	2300      	movs	r3, #0
 800c34e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c350:	4b47      	ldr	r3, [pc, #284]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10d      	bne.n	800c378 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c35c:	4b44      	ldr	r3, [pc, #272]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c360:	4a43      	ldr	r2, [pc, #268]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c366:	6593      	str	r3, [r2, #88]	; 0x58
 800c368:	4b41      	ldr	r3, [pc, #260]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c36a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c36c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c370:	60bb      	str	r3, [r7, #8]
 800c372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c374:	2301      	movs	r3, #1
 800c376:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c378:	4b3e      	ldr	r3, [pc, #248]	; (800c474 <HAL_RCC_OscConfig+0x57c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c380:	2b00      	cmp	r3, #0
 800c382:	d118      	bne.n	800c3b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c384:	4b3b      	ldr	r3, [pc, #236]	; (800c474 <HAL_RCC_OscConfig+0x57c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a3a      	ldr	r2, [pc, #232]	; (800c474 <HAL_RCC_OscConfig+0x57c>)
 800c38a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c38e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c390:	f7fb fc40 	bl	8007c14 <HAL_GetTick>
 800c394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c396:	e008      	b.n	800c3aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c398:	f7fb fc3c 	bl	8007c14 <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e1c6      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c3aa:	4b32      	ldr	r3, [pc, #200]	; (800c474 <HAL_RCC_OscConfig+0x57c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0f0      	beq.n	800c398 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d108      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x4d8>
 800c3be:	4b2c      	ldr	r3, [pc, #176]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3c4:	4a2a      	ldr	r2, [pc, #168]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3c6:	f043 0301 	orr.w	r3, r3, #1
 800c3ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3ce:	e024      	b.n	800c41a <HAL_RCC_OscConfig+0x522>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	2b05      	cmp	r3, #5
 800c3d6:	d110      	bne.n	800c3fa <HAL_RCC_OscConfig+0x502>
 800c3d8:	4b25      	ldr	r3, [pc, #148]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3de:	4a24      	ldr	r2, [pc, #144]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3e0:	f043 0304 	orr.w	r3, r3, #4
 800c3e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3e8:	4b21      	ldr	r3, [pc, #132]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ee:	4a20      	ldr	r2, [pc, #128]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3f0:	f043 0301 	orr.w	r3, r3, #1
 800c3f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3f8:	e00f      	b.n	800c41a <HAL_RCC_OscConfig+0x522>
 800c3fa:	4b1d      	ldr	r3, [pc, #116]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c400:	4a1b      	ldr	r2, [pc, #108]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c402:	f023 0301 	bic.w	r3, r3, #1
 800c406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c40a:	4b19      	ldr	r3, [pc, #100]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c410:	4a17      	ldr	r2, [pc, #92]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c412:	f023 0304 	bic.w	r3, r3, #4
 800c416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d016      	beq.n	800c450 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c422:	f7fb fbf7 	bl	8007c14 <HAL_GetTick>
 800c426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c428:	e00a      	b.n	800c440 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c42a:	f7fb fbf3 	bl	8007c14 <HAL_GetTick>
 800c42e:	4602      	mov	r2, r0
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	f241 3288 	movw	r2, #5000	; 0x1388
 800c438:	4293      	cmp	r3, r2
 800c43a:	d901      	bls.n	800c440 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c43c:	2303      	movs	r3, #3
 800c43e:	e17b      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <HAL_RCC_OscConfig+0x578>)
 800c442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d0ed      	beq.n	800c42a <HAL_RCC_OscConfig+0x532>
 800c44e:	e01a      	b.n	800c486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c450:	f7fb fbe0 	bl	8007c14 <HAL_GetTick>
 800c454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c456:	e00f      	b.n	800c478 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c458:	f7fb fbdc 	bl	8007c14 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	f241 3288 	movw	r2, #5000	; 0x1388
 800c466:	4293      	cmp	r3, r2
 800c468:	d906      	bls.n	800c478 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e164      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
 800c46e:	bf00      	nop
 800c470:	40021000 	.word	0x40021000
 800c474:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c478:	4ba8      	ldr	r3, [pc, #672]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c47e:	f003 0302 	and.w	r3, r3, #2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e8      	bne.n	800c458 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c486:	7ffb      	ldrb	r3, [r7, #31]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d105      	bne.n	800c498 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c48c:	4ba3      	ldr	r3, [pc, #652]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c490:	4aa2      	ldr	r2, [pc, #648]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c496:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0320 	and.w	r3, r3, #32
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d03c      	beq.n	800c51e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01c      	beq.n	800c4e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c4ac:	4b9b      	ldr	r3, [pc, #620]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c4ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4b2:	4a9a      	ldr	r2, [pc, #616]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c4b4:	f043 0301 	orr.w	r3, r3, #1
 800c4b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4bc:	f7fb fbaa 	bl	8007c14 <HAL_GetTick>
 800c4c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c4c2:	e008      	b.n	800c4d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4c4:	f7fb fba6 	bl	8007c14 <HAL_GetTick>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d901      	bls.n	800c4d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	e130      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c4d6:	4b91      	ldr	r3, [pc, #580]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c4d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4dc:	f003 0302 	and.w	r3, r3, #2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0ef      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x5cc>
 800c4e4:	e01b      	b.n	800c51e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c4e6:	4b8d      	ldr	r3, [pc, #564]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c4e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4ec:	4a8b      	ldr	r2, [pc, #556]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c4ee:	f023 0301 	bic.w	r3, r3, #1
 800c4f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4f6:	f7fb fb8d 	bl	8007c14 <HAL_GetTick>
 800c4fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4fc:	e008      	b.n	800c510 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4fe:	f7fb fb89 	bl	8007c14 <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d901      	bls.n	800c510 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e113      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c510:	4b82      	ldr	r3, [pc, #520]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1ef      	bne.n	800c4fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 8107 	beq.w	800c736 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	f040 80cb 	bne.w	800c6c8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c532:	4b7a      	ldr	r3, [pc, #488]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f003 0203 	and.w	r2, r3, #3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	429a      	cmp	r2, r3
 800c544:	d12c      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c550:	3b01      	subs	r3, #1
 800c552:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c554:	429a      	cmp	r2, r3
 800c556:	d123      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c562:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c564:	429a      	cmp	r2, r3
 800c566:	d11b      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c574:	429a      	cmp	r2, r3
 800c576:	d113      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c582:	085b      	lsrs	r3, r3, #1
 800c584:	3b01      	subs	r3, #1
 800c586:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c588:	429a      	cmp	r2, r3
 800c58a:	d109      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c596:	085b      	lsrs	r3, r3, #1
 800c598:	3b01      	subs	r3, #1
 800c59a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d06d      	beq.n	800c67c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	2b0c      	cmp	r3, #12
 800c5a4:	d068      	beq.n	800c678 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c5a6:	4b5d      	ldr	r3, [pc, #372]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d105      	bne.n	800c5be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c5b2:	4b5a      	ldr	r3, [pc, #360]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e0ba      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c5c2:	4b56      	ldr	r3, [pc, #344]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a55      	ldr	r2, [pc, #340]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c5c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c5ce:	f7fb fb21 	bl	8007c14 <HAL_GetTick>
 800c5d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5d4:	e008      	b.n	800c5e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5d6:	f7fb fb1d 	bl	8007c14 <HAL_GetTick>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d901      	bls.n	800c5e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e0a7      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c5e8:	4b4c      	ldr	r3, [pc, #304]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f0      	bne.n	800c5d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5f4:	4b49      	ldr	r3, [pc, #292]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c5f6:	68da      	ldr	r2, [r3, #12]
 800c5f8:	4b49      	ldr	r3, [pc, #292]	; (800c720 <HAL_RCC_OscConfig+0x828>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c604:	3a01      	subs	r2, #1
 800c606:	0112      	lsls	r2, r2, #4
 800c608:	4311      	orrs	r1, r2
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c60e:	0212      	lsls	r2, r2, #8
 800c610:	4311      	orrs	r1, r2
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c616:	0852      	lsrs	r2, r2, #1
 800c618:	3a01      	subs	r2, #1
 800c61a:	0552      	lsls	r2, r2, #21
 800c61c:	4311      	orrs	r1, r2
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c622:	0852      	lsrs	r2, r2, #1
 800c624:	3a01      	subs	r2, #1
 800c626:	0652      	lsls	r2, r2, #25
 800c628:	4311      	orrs	r1, r2
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c62e:	06d2      	lsls	r2, r2, #27
 800c630:	430a      	orrs	r2, r1
 800c632:	493a      	ldr	r1, [pc, #232]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c634:	4313      	orrs	r3, r2
 800c636:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c638:	4b38      	ldr	r3, [pc, #224]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a37      	ldr	r2, [pc, #220]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c63e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c642:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c644:	4b35      	ldr	r3, [pc, #212]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	4a34      	ldr	r2, [pc, #208]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c64a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c64e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c650:	f7fb fae0 	bl	8007c14 <HAL_GetTick>
 800c654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c656:	e008      	b.n	800c66a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c658:	f7fb fadc 	bl	8007c14 <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	2b02      	cmp	r3, #2
 800c664:	d901      	bls.n	800c66a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c666:	2303      	movs	r3, #3
 800c668:	e066      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c66a:	4b2c      	ldr	r3, [pc, #176]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0f0      	beq.n	800c658 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c676:	e05e      	b.n	800c736 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e05d      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c67c:	4b27      	ldr	r3, [pc, #156]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d156      	bne.n	800c736 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c688:	4b24      	ldr	r3, [pc, #144]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a23      	ldr	r2, [pc, #140]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c68e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c692:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c694:	4b21      	ldr	r3, [pc, #132]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	4a20      	ldr	r2, [pc, #128]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c69a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c69e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c6a0:	f7fb fab8 	bl	8007c14 <HAL_GetTick>
 800c6a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6a6:	e008      	b.n	800c6ba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6a8:	f7fb fab4 	bl	8007c14 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d901      	bls.n	800c6ba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e03e      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6ba:	4b18      	ldr	r3, [pc, #96]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0f0      	beq.n	800c6a8 <HAL_RCC_OscConfig+0x7b0>
 800c6c6:	e036      	b.n	800c736 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2b0c      	cmp	r3, #12
 800c6cc:	d031      	beq.n	800c732 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6ce:	4b13      	ldr	r3, [pc, #76]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a12      	ldr	r2, [pc, #72]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c6da:	4b10      	ldr	r3, [pc, #64]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d105      	bne.n	800c6f2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c6e6:	4b0d      	ldr	r3, [pc, #52]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	4a0c      	ldr	r2, [pc, #48]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6ec:	f023 0303 	bic.w	r3, r3, #3
 800c6f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c6f2:	4b0a      	ldr	r3, [pc, #40]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	4a09      	ldr	r2, [pc, #36]	; (800c71c <HAL_RCC_OscConfig+0x824>)
 800c6f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c6fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c700:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c702:	f7fb fa87 	bl	8007c14 <HAL_GetTick>
 800c706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c708:	e00c      	b.n	800c724 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c70a:	f7fb fa83 	bl	8007c14 <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	2b02      	cmp	r3, #2
 800c716:	d905      	bls.n	800c724 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e00d      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
 800c71c:	40021000 	.word	0x40021000
 800c720:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c724:	4b06      	ldr	r3, [pc, #24]	; (800c740 <HAL_RCC_OscConfig+0x848>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1ec      	bne.n	800c70a <HAL_RCC_OscConfig+0x812>
 800c730:	e001      	b.n	800c736 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e000      	b.n	800c738 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3720      	adds	r7, #32
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	40021000 	.word	0x40021000

0800c744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d101      	bne.n	800c758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	e0c8      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c758:	4b66      	ldr	r3, [pc, #408]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 0307 	and.w	r3, r3, #7
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d910      	bls.n	800c788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c766:	4b63      	ldr	r3, [pc, #396]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f023 0207 	bic.w	r2, r3, #7
 800c76e:	4961      	ldr	r1, [pc, #388]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	4313      	orrs	r3, r2
 800c774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c776:	4b5f      	ldr	r3, [pc, #380]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f003 0307 	and.w	r3, r3, #7
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	429a      	cmp	r2, r3
 800c782:	d001      	beq.n	800c788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	e0b0      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d04c      	beq.n	800c82e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2b03      	cmp	r3, #3
 800c79a:	d107      	bne.n	800c7ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c79c:	4b56      	ldr	r3, [pc, #344]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d121      	bne.n	800c7ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e09e      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d107      	bne.n	800c7c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c7b4:	4b50      	ldr	r3, [pc, #320]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d115      	bne.n	800c7ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e092      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d107      	bne.n	800c7dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c7cc:	4b4a      	ldr	r3, [pc, #296]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d109      	bne.n	800c7ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e086      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7dc:	4b46      	ldr	r3, [pc, #280]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e07e      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c7ec:	4b42      	ldr	r3, [pc, #264]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	f023 0203 	bic.w	r2, r3, #3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	493f      	ldr	r1, [pc, #252]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7fe:	f7fb fa09 	bl	8007c14 <HAL_GetTick>
 800c802:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c804:	e00a      	b.n	800c81c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c806:	f7fb fa05 	bl	8007c14 <HAL_GetTick>
 800c80a:	4602      	mov	r2, r0
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	f241 3288 	movw	r2, #5000	; 0x1388
 800c814:	4293      	cmp	r3, r2
 800c816:	d901      	bls.n	800c81c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e066      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c81c:	4b36      	ldr	r3, [pc, #216]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f003 020c 	and.w	r2, r3, #12
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d1eb      	bne.n	800c806 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c83a:	4b2f      	ldr	r3, [pc, #188]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	492c      	ldr	r1, [pc, #176]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c848:	4313      	orrs	r3, r2
 800c84a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c84c:	4b29      	ldr	r3, [pc, #164]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0307 	and.w	r3, r3, #7
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d210      	bcs.n	800c87c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c85a:	4b26      	ldr	r3, [pc, #152]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f023 0207 	bic.w	r2, r3, #7
 800c862:	4924      	ldr	r1, [pc, #144]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	4313      	orrs	r3, r2
 800c868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c86a:	4b22      	ldr	r3, [pc, #136]	; (800c8f4 <HAL_RCC_ClockConfig+0x1b0>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 0307 	and.w	r3, r3, #7
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	429a      	cmp	r2, r3
 800c876:	d001      	beq.n	800c87c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e036      	b.n	800c8ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d008      	beq.n	800c89a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c888:	4b1b      	ldr	r3, [pc, #108]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	4918      	ldr	r1, [pc, #96]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c896:	4313      	orrs	r3, r2
 800c898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 0308 	and.w	r3, r3, #8
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d009      	beq.n	800c8ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c8a6:	4b14      	ldr	r3, [pc, #80]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	00db      	lsls	r3, r3, #3
 800c8b4:	4910      	ldr	r1, [pc, #64]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c8ba:	f000 f825 	bl	800c908 <HAL_RCC_GetSysClockFreq>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	4b0d      	ldr	r3, [pc, #52]	; (800c8f8 <HAL_RCC_ClockConfig+0x1b4>)
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	091b      	lsrs	r3, r3, #4
 800c8c6:	f003 030f 	and.w	r3, r3, #15
 800c8ca:	490c      	ldr	r1, [pc, #48]	; (800c8fc <HAL_RCC_ClockConfig+0x1b8>)
 800c8cc:	5ccb      	ldrb	r3, [r1, r3]
 800c8ce:	f003 031f 	and.w	r3, r3, #31
 800c8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d6:	4a0a      	ldr	r2, [pc, #40]	; (800c900 <HAL_RCC_ClockConfig+0x1bc>)
 800c8d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c8da:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <HAL_RCC_ClockConfig+0x1c0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fa fd78 	bl	80073d4 <HAL_InitTick>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	72fb      	strb	r3, [r7, #11]

  return status;
 800c8e8:	7afb      	ldrb	r3, [r7, #11]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	40022000 	.word	0x40022000
 800c8f8:	40021000 	.word	0x40021000
 800c8fc:	08023ddc 	.word	0x08023ddc
 800c900:	200003b8 	.word	0x200003b8
 800c904:	200003bc 	.word	0x200003bc

0800c908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c908:	b480      	push	{r7}
 800c90a:	b089      	sub	sp, #36	; 0x24
 800c90c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	2300      	movs	r3, #0
 800c914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c916:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	f003 030c 	and.w	r3, r3, #12
 800c91e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c920:	4b3b      	ldr	r3, [pc, #236]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	f003 0303 	and.w	r3, r3, #3
 800c928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d005      	beq.n	800c93c <HAL_RCC_GetSysClockFreq+0x34>
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2b0c      	cmp	r3, #12
 800c934:	d121      	bne.n	800c97a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d11e      	bne.n	800c97a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c93c:	4b34      	ldr	r3, [pc, #208]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0308 	and.w	r3, r3, #8
 800c944:	2b00      	cmp	r3, #0
 800c946:	d107      	bne.n	800c958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c948:	4b31      	ldr	r3, [pc, #196]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c94e:	0a1b      	lsrs	r3, r3, #8
 800c950:	f003 030f 	and.w	r3, r3, #15
 800c954:	61fb      	str	r3, [r7, #28]
 800c956:	e005      	b.n	800c964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c958:	4b2d      	ldr	r3, [pc, #180]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	091b      	lsrs	r3, r3, #4
 800c95e:	f003 030f 	and.w	r3, r3, #15
 800c962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c964:	4a2b      	ldr	r2, [pc, #172]	; (800ca14 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c96c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10d      	bne.n	800c990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c978:	e00a      	b.n	800c990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	d102      	bne.n	800c986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c980:	4b25      	ldr	r3, [pc, #148]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x110>)
 800c982:	61bb      	str	r3, [r7, #24]
 800c984:	e004      	b.n	800c990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	2b08      	cmp	r3, #8
 800c98a:	d101      	bne.n	800c990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c98c:	4b23      	ldr	r3, [pc, #140]	; (800ca1c <HAL_RCC_GetSysClockFreq+0x114>)
 800c98e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	2b0c      	cmp	r3, #12
 800c994:	d134      	bne.n	800ca00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c996:	4b1e      	ldr	r3, [pc, #120]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f003 0303 	and.w	r3, r3, #3
 800c99e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d003      	beq.n	800c9ae <HAL_RCC_GetSysClockFreq+0xa6>
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d003      	beq.n	800c9b4 <HAL_RCC_GetSysClockFreq+0xac>
 800c9ac:	e005      	b.n	800c9ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c9ae:	4b1a      	ldr	r3, [pc, #104]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x110>)
 800c9b0:	617b      	str	r3, [r7, #20]
      break;
 800c9b2:	e005      	b.n	800c9c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c9b4:	4b19      	ldr	r3, [pc, #100]	; (800ca1c <HAL_RCC_GetSysClockFreq+0x114>)
 800c9b6:	617b      	str	r3, [r7, #20]
      break;
 800c9b8:	e002      	b.n	800c9c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	617b      	str	r3, [r7, #20]
      break;
 800c9be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c9c0:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	091b      	lsrs	r3, r3, #4
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c9ce:	4b10      	ldr	r3, [pc, #64]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	0a1b      	lsrs	r3, r3, #8
 800c9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	fb02 f203 	mul.w	r2, r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x108>)
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	0e5b      	lsrs	r3, r3, #25
 800c9ec:	f003 0303 	and.w	r3, r3, #3
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	005b      	lsls	r3, r3, #1
 800c9f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ca00:	69bb      	ldr	r3, [r7, #24]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3724      	adds	r7, #36	; 0x24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	40021000 	.word	0x40021000
 800ca14:	08023df4 	.word	0x08023df4
 800ca18:	00f42400 	.word	0x00f42400
 800ca1c:	007a1200 	.word	0x007a1200

0800ca20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca20:	b480      	push	{r7}
 800ca22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca24:	4b03      	ldr	r3, [pc, #12]	; (800ca34 <HAL_RCC_GetHCLKFreq+0x14>)
 800ca26:	681b      	ldr	r3, [r3, #0]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	200003b8 	.word	0x200003b8

0800ca38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ca3c:	f7ff fff0 	bl	800ca20 <HAL_RCC_GetHCLKFreq>
 800ca40:	4602      	mov	r2, r0
 800ca42:	4b06      	ldr	r3, [pc, #24]	; (800ca5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	0a1b      	lsrs	r3, r3, #8
 800ca48:	f003 0307 	and.w	r3, r3, #7
 800ca4c:	4904      	ldr	r1, [pc, #16]	; (800ca60 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ca4e:	5ccb      	ldrb	r3, [r1, r3]
 800ca50:	f003 031f 	and.w	r3, r3, #31
 800ca54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	40021000 	.word	0x40021000
 800ca60:	08023dec 	.word	0x08023dec

0800ca64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ca68:	f7ff ffda 	bl	800ca20 <HAL_RCC_GetHCLKFreq>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	0adb      	lsrs	r3, r3, #11
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	4904      	ldr	r1, [pc, #16]	; (800ca8c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca7a:	5ccb      	ldrb	r3, [r1, r3]
 800ca7c:	f003 031f 	and.w	r3, r3, #31
 800ca80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	40021000 	.word	0x40021000
 800ca8c:	08023dec 	.word	0x08023dec

0800ca90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	220f      	movs	r2, #15
 800ca9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800caa0:	4b12      	ldr	r3, [pc, #72]	; (800caec <HAL_RCC_GetClockConfig+0x5c>)
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f003 0203 	and.w	r2, r3, #3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <HAL_RCC_GetClockConfig+0x5c>)
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800cab8:	4b0c      	ldr	r3, [pc, #48]	; (800caec <HAL_RCC_GetClockConfig+0x5c>)
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800cac4:	4b09      	ldr	r3, [pc, #36]	; (800caec <HAL_RCC_GetClockConfig+0x5c>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	08db      	lsrs	r3, r3, #3
 800caca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cad2:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <HAL_RCC_GetClockConfig+0x60>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0207 	and.w	r2, r3, #7
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	601a      	str	r2, [r3, #0]
}
 800cade:	bf00      	nop
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	40021000 	.word	0x40021000
 800caf0:	40022000 	.word	0x40022000

0800caf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cafc:	2300      	movs	r3, #0
 800cafe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cb00:	4b2a      	ldr	r3, [pc, #168]	; (800cbac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d003      	beq.n	800cb14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cb0c:	f7ff f980 	bl	800be10 <HAL_PWREx_GetVoltageRange>
 800cb10:	6178      	str	r0, [r7, #20]
 800cb12:	e014      	b.n	800cb3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb14:	4b25      	ldr	r3, [pc, #148]	; (800cbac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb18:	4a24      	ldr	r2, [pc, #144]	; (800cbac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb1e:	6593      	str	r3, [r2, #88]	; 0x58
 800cb20:	4b22      	ldr	r3, [pc, #136]	; (800cbac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cb2c:	f7ff f970 	bl	800be10 <HAL_PWREx_GetVoltageRange>
 800cb30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cb32:	4b1e      	ldr	r3, [pc, #120]	; (800cbac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb36:	4a1d      	ldr	r2, [pc, #116]	; (800cbac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cb38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb44:	d10b      	bne.n	800cb5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b80      	cmp	r3, #128	; 0x80
 800cb4a:	d919      	bls.n	800cb80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2ba0      	cmp	r3, #160	; 0xa0
 800cb50:	d902      	bls.n	800cb58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb52:	2302      	movs	r3, #2
 800cb54:	613b      	str	r3, [r7, #16]
 800cb56:	e013      	b.n	800cb80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb58:	2301      	movs	r3, #1
 800cb5a:	613b      	str	r3, [r7, #16]
 800cb5c:	e010      	b.n	800cb80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b80      	cmp	r3, #128	; 0x80
 800cb62:	d902      	bls.n	800cb6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cb64:	2303      	movs	r3, #3
 800cb66:	613b      	str	r3, [r7, #16]
 800cb68:	e00a      	b.n	800cb80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b80      	cmp	r3, #128	; 0x80
 800cb6e:	d102      	bne.n	800cb76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb70:	2302      	movs	r3, #2
 800cb72:	613b      	str	r3, [r7, #16]
 800cb74:	e004      	b.n	800cb80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b70      	cmp	r3, #112	; 0x70
 800cb7a:	d101      	bne.n	800cb80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cb80:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f023 0207 	bic.w	r2, r3, #7
 800cb88:	4909      	ldr	r1, [pc, #36]	; (800cbb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 0307 	and.w	r3, r3, #7
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d001      	beq.n	800cba2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e000      	b.n	800cba4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	40021000 	.word	0x40021000
 800cbb0:	40022000 	.word	0x40022000

0800cbb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d041      	beq.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cbd8:	d02a      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cbda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cbde:	d824      	bhi.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbe4:	d008      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cbe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbea:	d81e      	bhi.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00a      	beq.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cbf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbf4:	d010      	beq.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cbf6:	e018      	b.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cbf8:	4b86      	ldr	r3, [pc, #536]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	4a85      	ldr	r2, [pc, #532]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc04:	e015      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3304      	adds	r3, #4
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 fadf 	bl	800d1d0 <RCCEx_PLLSAI1_Config>
 800cc12:	4603      	mov	r3, r0
 800cc14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc16:	e00c      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	3320      	adds	r3, #32
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fbc8 	bl	800d3b4 <RCCEx_PLLSAI2_Config>
 800cc24:	4603      	mov	r3, r0
 800cc26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cc28:	e003      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	74fb      	strb	r3, [r7, #19]
      break;
 800cc2e:	e000      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cc30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc32:	7cfb      	ldrb	r3, [r7, #19]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10b      	bne.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc38:	4b76      	ldr	r3, [pc, #472]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc46:	4973      	ldr	r1, [pc, #460]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cc4e:	e001      	b.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc50:	7cfb      	ldrb	r3, [r7, #19]
 800cc52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d041      	beq.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc68:	d02a      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cc6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc6e:	d824      	bhi.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc74:	d008      	beq.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cc76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc7a:	d81e      	bhi.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00a      	beq.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cc80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc84:	d010      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cc86:	e018      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cc88:	4b62      	ldr	r3, [pc, #392]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4a61      	ldr	r2, [pc, #388]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc94:	e015      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3304      	adds	r3, #4
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 fa97 	bl	800d1d0 <RCCEx_PLLSAI1_Config>
 800cca2:	4603      	mov	r3, r0
 800cca4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cca6:	e00c      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3320      	adds	r3, #32
 800ccac:	2100      	movs	r1, #0
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 fb80 	bl	800d3b4 <RCCEx_PLLSAI2_Config>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ccb8:	e003      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	74fb      	strb	r3, [r7, #19]
      break;
 800ccbe:	e000      	b.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ccc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccc2:	7cfb      	ldrb	r3, [r7, #19]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10b      	bne.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ccc8:	4b52      	ldr	r3, [pc, #328]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd6:	494f      	ldr	r1, [pc, #316]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ccde:	e001      	b.n	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cce0:	7cfb      	ldrb	r3, [r7, #19]
 800cce2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 80a0 	beq.w	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ccf6:	4b47      	ldr	r3, [pc, #284]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800cd06:	2300      	movs	r3, #0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00d      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd0c:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd10:	4a40      	ldr	r2, [pc, #256]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd16:	6593      	str	r3, [r2, #88]	; 0x58
 800cd18:	4b3e      	ldr	r3, [pc, #248]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd20:	60bb      	str	r3, [r7, #8]
 800cd22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd24:	2301      	movs	r3, #1
 800cd26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd28:	4b3b      	ldr	r3, [pc, #236]	; (800ce18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a3a      	ldr	r2, [pc, #232]	; (800ce18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd34:	f7fa ff6e 	bl	8007c14 <HAL_GetTick>
 800cd38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd3a:	e009      	b.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd3c:	f7fa ff6a 	bl	8007c14 <HAL_GetTick>
 800cd40:	4602      	mov	r2, r0
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d902      	bls.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	74fb      	strb	r3, [r7, #19]
        break;
 800cd4e:	e005      	b.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cd50:	4b31      	ldr	r3, [pc, #196]	; (800ce18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0ef      	beq.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800cd5c:	7cfb      	ldrb	r3, [r7, #19]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d15c      	bne.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd62:	4b2c      	ldr	r3, [pc, #176]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d01f      	beq.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d019      	beq.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd80:	4b24      	ldr	r3, [pc, #144]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd8c:	4b21      	ldr	r3, [pc, #132]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd92:	4a20      	ldr	r2, [pc, #128]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd9c:	4b1d      	ldr	r3, [pc, #116]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda2:	4a1c      	ldr	r2, [pc, #112]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cda4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cda8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cdac:	4a19      	ldr	r2, [pc, #100]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d016      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdbe:	f7fa ff29 	bl	8007c14 <HAL_GetTick>
 800cdc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdc4:	e00b      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdc6:	f7fa ff25 	bl	8007c14 <HAL_GetTick>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d902      	bls.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	74fb      	strb	r3, [r7, #19]
            break;
 800cddc:	e006      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdde:	4b0d      	ldr	r3, [pc, #52]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cde4:	f003 0302 	and.w	r3, r3, #2
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d0ec      	beq.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cdec:	7cfb      	ldrb	r3, [r7, #19]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10c      	bne.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdf2:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce02:	4904      	ldr	r1, [pc, #16]	; (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ce04:	4313      	orrs	r3, r2
 800ce06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce0a:	e009      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce0c:	7cfb      	ldrb	r3, [r7, #19]
 800ce0e:	74bb      	strb	r3, [r7, #18]
 800ce10:	e006      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800ce12:	bf00      	nop
 800ce14:	40021000 	.word	0x40021000
 800ce18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce1c:	7cfb      	ldrb	r3, [r7, #19]
 800ce1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce20:	7c7b      	ldrb	r3, [r7, #17]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d105      	bne.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce26:	4ba6      	ldr	r3, [pc, #664]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2a:	4aa5      	ldr	r2, [pc, #660]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce3e:	4ba0      	ldr	r3, [pc, #640]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce44:	f023 0203 	bic.w	r2, r3, #3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	499c      	ldr	r1, [pc, #624]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0302 	and.w	r3, r3, #2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce60:	4b97      	ldr	r3, [pc, #604]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce66:	f023 020c 	bic.w	r2, r3, #12
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6e:	4994      	ldr	r1, [pc, #592]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce70:	4313      	orrs	r3, r2
 800ce72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 0304 	and.w	r3, r3, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce82:	4b8f      	ldr	r3, [pc, #572]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce90:	498b      	ldr	r1, [pc, #556]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce92:	4313      	orrs	r3, r2
 800ce94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cea4:	4b86      	ldr	r3, [pc, #536]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb2:	4983      	ldr	r1, [pc, #524]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 0310 	and.w	r3, r3, #16
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cec6:	4b7e      	ldr	r3, [pc, #504]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ced4:	497a      	ldr	r1, [pc, #488]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0320 	and.w	r3, r3, #32
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cee8:	4b75      	ldr	r3, [pc, #468]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cef6:	4972      	ldr	r1, [pc, #456]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf0a:	4b6d      	ldr	r3, [pc, #436]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf18:	4969      	ldr	r1, [pc, #420]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00a      	beq.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf2c:	4b64      	ldr	r3, [pc, #400]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf3a:	4961      	ldr	r1, [pc, #388]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf4e:	4b5c      	ldr	r3, [pc, #368]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf5c:	4958      	ldr	r1, [pc, #352]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00a      	beq.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf70:	4b53      	ldr	r3, [pc, #332]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7e:	4950      	ldr	r1, [pc, #320]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00a      	beq.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf92:	4b4b      	ldr	r3, [pc, #300]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa0:	4947      	ldr	r1, [pc, #284]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00a      	beq.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cfb4:	4b42      	ldr	r3, [pc, #264]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cfba:	f023 0203 	bic.w	r2, r3, #3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfc2:	493f      	ldr	r1, [pc, #252]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d028      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cfd6:	4b3a      	ldr	r3, [pc, #232]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe4:	4936      	ldr	r1, [pc, #216]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cff4:	d106      	bne.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cff6:	4b32      	ldr	r3, [pc, #200]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	4a31      	ldr	r2, [pc, #196]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d000:	60d3      	str	r3, [r2, #12]
 800d002:	e011      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d00c:	d10c      	bne.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3304      	adds	r3, #4
 800d012:	2101      	movs	r1, #1
 800d014:	4618      	mov	r0, r3
 800d016:	f000 f8db 	bl	800d1d0 <RCCEx_PLLSAI1_Config>
 800d01a:	4603      	mov	r3, r0
 800d01c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d01e:	7cfb      	ldrb	r3, [r7, #19]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800d024:	7cfb      	ldrb	r3, [r7, #19]
 800d026:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d028      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d034:	4b22      	ldr	r3, [pc, #136]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d03a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d042:	491f      	ldr	r1, [pc, #124]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d044:	4313      	orrs	r3, r2
 800d046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d04e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d052:	d106      	bne.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d054:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	4a19      	ldr	r2, [pc, #100]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d05a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d05e:	60d3      	str	r3, [r2, #12]
 800d060:	e011      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d06a:	d10c      	bne.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3304      	adds	r3, #4
 800d070:	2101      	movs	r1, #1
 800d072:	4618      	mov	r0, r3
 800d074:	f000 f8ac 	bl	800d1d0 <RCCEx_PLLSAI1_Config>
 800d078:	4603      	mov	r3, r0
 800d07a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d07c:	7cfb      	ldrb	r3, [r7, #19]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800d082:	7cfb      	ldrb	r3, [r7, #19]
 800d084:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d02a      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d092:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d098:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a0:	4907      	ldr	r1, [pc, #28]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0b0:	d108      	bne.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0b2:	4b03      	ldr	r3, [pc, #12]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	4a02      	ldr	r2, [pc, #8]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d0b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0bc:	60d3      	str	r3, [r2, #12]
 800d0be:	e013      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800d0c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0cc:	d10c      	bne.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	2101      	movs	r1, #1
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 f87b 	bl	800d1d0 <RCCEx_PLLSAI1_Config>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0de:	7cfb      	ldrb	r3, [r7, #19]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800d0e4:	7cfb      	ldrb	r3, [r7, #19]
 800d0e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d02f      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0f4:	4b2c      	ldr	r3, [pc, #176]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d102:	4929      	ldr	r1, [pc, #164]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d104:	4313      	orrs	r3, r2
 800d106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d112:	d10d      	bne.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3304      	adds	r3, #4
 800d118:	2102      	movs	r1, #2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f858 	bl	800d1d0 <RCCEx_PLLSAI1_Config>
 800d120:	4603      	mov	r3, r0
 800d122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d124:	7cfb      	ldrb	r3, [r7, #19]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d014      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d12a:	7cfb      	ldrb	r3, [r7, #19]
 800d12c:	74bb      	strb	r3, [r7, #18]
 800d12e:	e011      	b.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d138:	d10c      	bne.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3320      	adds	r3, #32
 800d13e:	2102      	movs	r1, #2
 800d140:	4618      	mov	r0, r3
 800d142:	f000 f937 	bl	800d3b4 <RCCEx_PLLSAI2_Config>
 800d146:	4603      	mov	r3, r0
 800d148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d14a:	7cfb      	ldrb	r3, [r7, #19]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d150:	7cfb      	ldrb	r3, [r7, #19]
 800d152:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d160:	4b11      	ldr	r3, [pc, #68]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d166:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d170:	490d      	ldr	r1, [pc, #52]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d172:	4313      	orrs	r3, r2
 800d174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00b      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d184:	4b08      	ldr	r3, [pc, #32]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d18a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d194:	4904      	ldr	r1, [pc, #16]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d196:	4313      	orrs	r3, r2
 800d198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d19c:	7cbb      	ldrb	r3, [r7, #18]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3718      	adds	r7, #24
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40021000 	.word	0x40021000

0800d1ac <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800d1b0:	4b06      	ldr	r3, [pc, #24]	; (800d1cc <HAL_RCCEx_EnableLSECSS+0x20>)
 800d1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b6:	4a05      	ldr	r2, [pc, #20]	; (800d1cc <HAL_RCCEx_EnableLSECSS+0x20>)
 800d1b8:	f043 0320 	orr.w	r3, r3, #32
 800d1bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d1c0:	bf00      	nop
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	40021000 	.word	0x40021000

0800d1d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d1de:	4b74      	ldr	r3, [pc, #464]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	f003 0303 	and.w	r3, r3, #3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d018      	beq.n	800d21c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d1ea:	4b71      	ldr	r3, [pc, #452]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	f003 0203 	and.w	r2, r3, #3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d10d      	bne.n	800d216 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
       ||
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d202:	4b6b      	ldr	r3, [pc, #428]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	091b      	lsrs	r3, r3, #4
 800d208:	f003 0307 	and.w	r3, r3, #7
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	685b      	ldr	r3, [r3, #4]
       ||
 800d212:	429a      	cmp	r2, r3
 800d214:	d047      	beq.n	800d2a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	73fb      	strb	r3, [r7, #15]
 800d21a:	e044      	b.n	800d2a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b03      	cmp	r3, #3
 800d222:	d018      	beq.n	800d256 <RCCEx_PLLSAI1_Config+0x86>
 800d224:	2b03      	cmp	r3, #3
 800d226:	d825      	bhi.n	800d274 <RCCEx_PLLSAI1_Config+0xa4>
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d002      	beq.n	800d232 <RCCEx_PLLSAI1_Config+0x62>
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d009      	beq.n	800d244 <RCCEx_PLLSAI1_Config+0x74>
 800d230:	e020      	b.n	800d274 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d232:	4b5f      	ldr	r3, [pc, #380]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0302 	and.w	r3, r3, #2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d11d      	bne.n	800d27a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d242:	e01a      	b.n	800d27a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d244:	4b5a      	ldr	r3, [pc, #360]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d116      	bne.n	800d27e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d254:	e013      	b.n	800d27e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d256:	4b56      	ldr	r3, [pc, #344]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10f      	bne.n	800d282 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d262:	4b53      	ldr	r3, [pc, #332]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d109      	bne.n	800d282 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d272:	e006      	b.n	800d282 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	73fb      	strb	r3, [r7, #15]
      break;
 800d278:	e004      	b.n	800d284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d27a:	bf00      	nop
 800d27c:	e002      	b.n	800d284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d27e:	bf00      	nop
 800d280:	e000      	b.n	800d284 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d282:	bf00      	nop
    }

    if(status == HAL_OK)
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10d      	bne.n	800d2a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d28a:	4b49      	ldr	r3, [pc, #292]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6819      	ldr	r1, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	011b      	lsls	r3, r3, #4
 800d29e:	430b      	orrs	r3, r1
 800d2a0:	4943      	ldr	r1, [pc, #268]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d2a6:	7bfb      	ldrb	r3, [r7, #15]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d17c      	bne.n	800d3a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d2ac:	4b40      	ldr	r3, [pc, #256]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a3f      	ldr	r2, [pc, #252]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2b8:	f7fa fcac 	bl	8007c14 <HAL_GetTick>
 800d2bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d2be:	e009      	b.n	800d2d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d2c0:	f7fa fca8 	bl	8007c14 <HAL_GetTick>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	2b02      	cmp	r3, #2
 800d2cc:	d902      	bls.n	800d2d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	73fb      	strb	r3, [r7, #15]
        break;
 800d2d2:	e005      	b.n	800d2e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d2d4:	4b36      	ldr	r3, [pc, #216]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1ef      	bne.n	800d2c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d15f      	bne.n	800d3a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d110      	bne.n	800d30e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2ec:	4b30      	ldr	r3, [pc, #192]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d2f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	6892      	ldr	r2, [r2, #8]
 800d2fc:	0211      	lsls	r1, r2, #8
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	68d2      	ldr	r2, [r2, #12]
 800d302:	06d2      	lsls	r2, r2, #27
 800d304:	430a      	orrs	r2, r1
 800d306:	492a      	ldr	r1, [pc, #168]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d308:	4313      	orrs	r3, r2
 800d30a:	610b      	str	r3, [r1, #16]
 800d30c:	e027      	b.n	800d35e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d112      	bne.n	800d33a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d314:	4b26      	ldr	r3, [pc, #152]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d31c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	6892      	ldr	r2, [r2, #8]
 800d324:	0211      	lsls	r1, r2, #8
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	6912      	ldr	r2, [r2, #16]
 800d32a:	0852      	lsrs	r2, r2, #1
 800d32c:	3a01      	subs	r2, #1
 800d32e:	0552      	lsls	r2, r2, #21
 800d330:	430a      	orrs	r2, r1
 800d332:	491f      	ldr	r1, [pc, #124]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d334:	4313      	orrs	r3, r2
 800d336:	610b      	str	r3, [r1, #16]
 800d338:	e011      	b.n	800d35e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d33a:	4b1d      	ldr	r3, [pc, #116]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d342:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	6892      	ldr	r2, [r2, #8]
 800d34a:	0211      	lsls	r1, r2, #8
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	6952      	ldr	r2, [r2, #20]
 800d350:	0852      	lsrs	r2, r2, #1
 800d352:	3a01      	subs	r2, #1
 800d354:	0652      	lsls	r2, r2, #25
 800d356:	430a      	orrs	r2, r1
 800d358:	4915      	ldr	r1, [pc, #84]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d35a:	4313      	orrs	r3, r2
 800d35c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a13      	ldr	r2, [pc, #76]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d368:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d36a:	f7fa fc53 	bl	8007c14 <HAL_GetTick>
 800d36e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d370:	e009      	b.n	800d386 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d372:	f7fa fc4f 	bl	8007c14 <HAL_GetTick>
 800d376:	4602      	mov	r2, r0
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d902      	bls.n	800d386 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	73fb      	strb	r3, [r7, #15]
          break;
 800d384:	e005      	b.n	800d392 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d386:	4b0a      	ldr	r3, [pc, #40]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0ef      	beq.n	800d372 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d392:	7bfb      	ldrb	r3, [r7, #15]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d398:	4b05      	ldr	r3, [pc, #20]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d39a:	691a      	ldr	r2, [r3, #16]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	4903      	ldr	r1, [pc, #12]	; (800d3b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	40021000 	.word	0x40021000

0800d3b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d3c2:	4b69      	ldr	r3, [pc, #420]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	f003 0303 	and.w	r3, r3, #3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d018      	beq.n	800d400 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d3ce:	4b66      	ldr	r3, [pc, #408]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f003 0203 	and.w	r2, r3, #3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d10d      	bne.n	800d3fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
       ||
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d009      	beq.n	800d3fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d3e6:	4b60      	ldr	r3, [pc, #384]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	091b      	lsrs	r3, r3, #4
 800d3ec:	f003 0307 	and.w	r3, r3, #7
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
       ||
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d047      	beq.n	800d48a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	73fb      	strb	r3, [r7, #15]
 800d3fe:	e044      	b.n	800d48a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b03      	cmp	r3, #3
 800d406:	d018      	beq.n	800d43a <RCCEx_PLLSAI2_Config+0x86>
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d825      	bhi.n	800d458 <RCCEx_PLLSAI2_Config+0xa4>
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d002      	beq.n	800d416 <RCCEx_PLLSAI2_Config+0x62>
 800d410:	2b02      	cmp	r3, #2
 800d412:	d009      	beq.n	800d428 <RCCEx_PLLSAI2_Config+0x74>
 800d414:	e020      	b.n	800d458 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d416:	4b54      	ldr	r3, [pc, #336]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 0302 	and.w	r3, r3, #2
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d11d      	bne.n	800d45e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d426:	e01a      	b.n	800d45e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d428:	4b4f      	ldr	r3, [pc, #316]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d430:	2b00      	cmp	r3, #0
 800d432:	d116      	bne.n	800d462 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d438:	e013      	b.n	800d462 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d43a:	4b4b      	ldr	r3, [pc, #300]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10f      	bne.n	800d466 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d446:	4b48      	ldr	r3, [pc, #288]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d109      	bne.n	800d466 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d456:	e006      	b.n	800d466 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	73fb      	strb	r3, [r7, #15]
      break;
 800d45c:	e004      	b.n	800d468 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d45e:	bf00      	nop
 800d460:	e002      	b.n	800d468 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d462:	bf00      	nop
 800d464:	e000      	b.n	800d468 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d466:	bf00      	nop
    }

    if(status == HAL_OK)
 800d468:	7bfb      	ldrb	r3, [r7, #15]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10d      	bne.n	800d48a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d46e:	4b3e      	ldr	r3, [pc, #248]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6819      	ldr	r1, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	3b01      	subs	r3, #1
 800d480:	011b      	lsls	r3, r3, #4
 800d482:	430b      	orrs	r3, r1
 800d484:	4938      	ldr	r1, [pc, #224]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d486:	4313      	orrs	r3, r2
 800d488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d166      	bne.n	800d55e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d490:	4b35      	ldr	r3, [pc, #212]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a34      	ldr	r2, [pc, #208]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d49a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d49c:	f7fa fbba 	bl	8007c14 <HAL_GetTick>
 800d4a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d4a2:	e009      	b.n	800d4b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d4a4:	f7fa fbb6 	bl	8007c14 <HAL_GetTick>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d902      	bls.n	800d4b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	73fb      	strb	r3, [r7, #15]
        break;
 800d4b6:	e005      	b.n	800d4c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d4b8:	4b2b      	ldr	r3, [pc, #172]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1ef      	bne.n	800d4a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d149      	bne.n	800d55e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d110      	bne.n	800d4f2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4d0:	4b25      	ldr	r3, [pc, #148]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4d2:	695b      	ldr	r3, [r3, #20]
 800d4d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d4d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	6892      	ldr	r2, [r2, #8]
 800d4e0:	0211      	lsls	r1, r2, #8
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	68d2      	ldr	r2, [r2, #12]
 800d4e6:	06d2      	lsls	r2, r2, #27
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	491f      	ldr	r1, [pc, #124]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	614b      	str	r3, [r1, #20]
 800d4f0:	e011      	b.n	800d516 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d4f2:	4b1d      	ldr	r3, [pc, #116]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d4fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	6892      	ldr	r2, [r2, #8]
 800d502:	0211      	lsls	r1, r2, #8
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	6912      	ldr	r2, [r2, #16]
 800d508:	0852      	lsrs	r2, r2, #1
 800d50a:	3a01      	subs	r2, #1
 800d50c:	0652      	lsls	r2, r2, #25
 800d50e:	430a      	orrs	r2, r1
 800d510:	4915      	ldr	r1, [pc, #84]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d512:	4313      	orrs	r3, r2
 800d514:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d516:	4b14      	ldr	r3, [pc, #80]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a13      	ldr	r2, [pc, #76]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d51c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d520:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d522:	f7fa fb77 	bl	8007c14 <HAL_GetTick>
 800d526:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d528:	e009      	b.n	800d53e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d52a:	f7fa fb73 	bl	8007c14 <HAL_GetTick>
 800d52e:	4602      	mov	r2, r0
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	2b02      	cmp	r3, #2
 800d536:	d902      	bls.n	800d53e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d538:	2303      	movs	r3, #3
 800d53a:	73fb      	strb	r3, [r7, #15]
          break;
 800d53c:	e005      	b.n	800d54a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d53e:	4b0a      	ldr	r3, [pc, #40]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0ef      	beq.n	800d52a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d106      	bne.n	800d55e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d552:	695a      	ldr	r2, [r3, #20]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	4903      	ldr	r1, [pc, #12]	; (800d568 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d55a:	4313      	orrs	r3, r2
 800d55c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	40021000 	.word	0x40021000

0800d56c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d06c      	beq.n	800d658 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b00      	cmp	r3, #0
 800d588:	d106      	bne.n	800d598 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7f9 fce2 	bl	8006f5c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2202      	movs	r2, #2
 800d59c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	22ca      	movs	r2, #202	; 0xca
 800d5a6:	625a      	str	r2, [r3, #36]	; 0x24
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2253      	movs	r2, #83	; 0x53
 800d5ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fabe 	bl	800db32 <RTC_EnterInitMode>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d14b      	bne.n	800d658 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	6812      	ldr	r2, [r2, #0]
 800d5ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5d2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6899      	ldr	r1, [r3, #8]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	431a      	orrs	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	68d2      	ldr	r2, [r2, #12]
 800d5fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6919      	ldr	r1, [r3, #16]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	041a      	lsls	r2, r3, #16
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	430a      	orrs	r2, r1
 800d60e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 fac1 	bl	800db98 <RTC_ExitInitMode>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d11b      	bne.n	800d658 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0203 	bic.w	r2, r2, #3
 800d62e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	69da      	ldr	r2, [r3, #28]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	431a      	orrs	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	22ff      	movs	r2, #255	; 0xff
 800d64e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <HAL_RTC_DeInit>:
  * @note   This function does not reset the RTC Backup Data registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d063      	beq.n	800d73e <HAL_RTC_DeInit+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2202      	movs	r2, #2
 800d67a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	22ca      	movs	r2, #202	; 0xca
 800d684:	625a      	str	r2, [r3, #36]	; 0x24
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2253      	movs	r2, #83	; 0x53
 800d68c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fa4f 	bl	800db32 <RTC_EnterInitMode>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d14f      	bne.n	800d73e <HAL_RTC_DeInit+0xda>
    {
      /* Reset all RTC CR register bits */
      hrtc->Instance->TR = 0x00000000U;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
      hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f242 1201 	movw	r2, #8449	; 0x2101
 800d6ae:	605a      	str	r2, [r3, #4]
      hrtc->Instance->CR &= 0x00000000U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	609a      	str	r2, [r3, #8]

      hrtc->Instance->WUTR = RTC_WUTR_WUT;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6c6:	615a      	str	r2, [r3, #20]
      hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a1e      	ldr	r2, [pc, #120]	; (800d748 <HAL_RTC_DeInit+0xe4>)
 800d6ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->ALRMAR = 0x00000000U;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	61da      	str	r2, [r3, #28]
      hrtc->Instance->ALRMBR = 0x00000000U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	621a      	str	r2, [r3, #32]
      hrtc->Instance->SHIFTR = 0x00000000U;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->Instance->CALR = 0x00000000U;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Instance->ALRMASSR = 0x00000000U;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Instance->ALRMBSSR = 0x00000000U;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	649a      	str	r2, [r3, #72]	; 0x48

      /* Exit initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fa49 	bl	800db98 <RTC_ExitInitMode>
 800d706:	4603      	mov	r3, r0
 800d708:	73fb      	strb	r3, [r7, #15]


      if (status == HAL_OK)
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d116      	bne.n	800d73e <HAL_RTC_DeInit+0xda>
        /* Reset TAMP registers */
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
#else
        /* Reset Tamper configuration register */
        hrtc->Instance->TAMPCR = 0x00000000U;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2200      	movs	r2, #0
 800d716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Reset Option register */
        hrtc->Instance->OR = 0x00000000U;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2200      	movs	r2, #0
 800d71e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	22ff      	movs	r2, #255	; 0xff
 800d726:	625a      	str	r2, [r3, #36]	; 0x24

        /* DeInit the low level hardware: CLOCK, NVIC.*/
        hrtc->MspDeInitCallback(hrtc);
#else
        /* De-Initialize RTC MSP */
        HAL_RTC_MspDeInit(hrtc);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7f9 fc49 	bl	8006fc0 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

        hrtc->State = HAL_RTC_STATE_RESET;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Release Lock */
        __HAL_UNLOCK(hrtc);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2020 	strb.w	r2, [r3, #32]
      }
    }
  }

  return status;
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	007f00ff 	.word	0x007f00ff

0800d74c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d74c:	b590      	push	{r4, r7, lr}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d101      	bne.n	800d766 <HAL_RTC_SetTime+0x1a>
 800d762:	2302      	movs	r3, #2
 800d764:	e08b      	b.n	800d87e <HAL_RTC_SetTime+0x132>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2202      	movs	r2, #2
 800d772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	22ca      	movs	r2, #202	; 0xca
 800d77c:	625a      	str	r2, [r3, #36]	; 0x24
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2253      	movs	r2, #83	; 0x53
 800d784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f9d3 	bl	800db32 <RTC_EnterInitMode>
 800d78c:	4603      	mov	r3, r0
 800d78e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d790:	7cfb      	ldrb	r3, [r7, #19]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d163      	bne.n	800d85e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d126      	bne.n	800d7ea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 fa2d 	bl	800dc14 <RTC_ByteToBcd2>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	785b      	ldrb	r3, [r3, #1]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fa26 	bl	800dc14 <RTC_ByteToBcd2>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7cc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	789b      	ldrb	r3, [r3, #2]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f000 fa1e 	bl	800dc14 <RTC_ByteToBcd2>
 800d7d8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7da:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	78db      	ldrb	r3, [r3, #3]
 800d7e2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	e018      	b.n	800d81c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	785b      	ldrb	r3, [r3, #1]
 800d808:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d80a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d810:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	78db      	ldrb	r3, [r3, #3]
 800d816:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d818:	4313      	orrs	r3, r2
 800d81a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d826:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d82a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	689a      	ldr	r2, [r3, #8]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d83a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6899      	ldr	r1, [r3, #8]
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	68da      	ldr	r2, [r3, #12]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	431a      	orrs	r2, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f000 f99f 	bl	800db98 <RTC_ExitInitMode>
 800d85a:	4603      	mov	r3, r0
 800d85c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	22ff      	movs	r2, #255	; 0xff
 800d864:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d866:	7cfb      	ldrb	r3, [r7, #19]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d103      	bne.n	800d874 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d87c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	371c      	adds	r7, #28
 800d882:	46bd      	mov	sp, r7
 800d884:	bd90      	pop	{r4, r7, pc}

0800d886 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b086      	sub	sp, #24
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	60f8      	str	r0, [r7, #12]
 800d88e:	60b9      	str	r1, [r7, #8]
 800d890:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d8b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d8b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	0c1b      	lsrs	r3, r3, #16
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	0a1b      	lsrs	r3, r3, #8
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	0d9b      	lsrs	r3, r3, #22
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d11a      	bne.n	800d934 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	f000 f9a6 	bl	800dc54 <RTC_Bcd2ToByte>
 800d908:	4603      	mov	r3, r0
 800d90a:	461a      	mov	r2, r3
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	785b      	ldrb	r3, [r3, #1]
 800d914:	4618      	mov	r0, r3
 800d916:	f000 f99d 	bl	800dc54 <RTC_Bcd2ToByte>
 800d91a:	4603      	mov	r3, r0
 800d91c:	461a      	mov	r2, r3
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	789b      	ldrb	r3, [r3, #2]
 800d926:	4618      	mov	r0, r3
 800d928:	f000 f994 	bl	800dc54 <RTC_Bcd2ToByte>
 800d92c:	4603      	mov	r3, r0
 800d92e:	461a      	mov	r2, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d93e:	b590      	push	{r4, r7, lr}
 800d940:	b087      	sub	sp, #28
 800d942:	af00      	add	r7, sp, #0
 800d944:	60f8      	str	r0, [r7, #12]
 800d946:	60b9      	str	r1, [r7, #8]
 800d948:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d101      	bne.n	800d958 <HAL_RTC_SetDate+0x1a>
 800d954:	2302      	movs	r3, #2
 800d956:	e075      	b.n	800da44 <HAL_RTC_SetDate+0x106>
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2202      	movs	r2, #2
 800d964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10e      	bne.n	800d98c <HAL_RTC_SetDate+0x4e>
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	f003 0310 	and.w	r3, r3, #16
 800d976:	2b00      	cmp	r3, #0
 800d978:	d008      	beq.n	800d98c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	785b      	ldrb	r3, [r3, #1]
 800d97e:	f023 0310 	bic.w	r3, r3, #16
 800d982:	b2db      	uxtb	r3, r3
 800d984:	330a      	adds	r3, #10
 800d986:	b2da      	uxtb	r2, r3
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d11c      	bne.n	800d9cc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	78db      	ldrb	r3, [r3, #3]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 f93c 	bl	800dc14 <RTC_ByteToBcd2>
 800d99c:	4603      	mov	r3, r0
 800d99e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	785b      	ldrb	r3, [r3, #1]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 f935 	bl	800dc14 <RTC_ByteToBcd2>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d9ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	789b      	ldrb	r3, [r3, #2]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 f92d 	bl	800dc14 <RTC_ByteToBcd2>
 800d9ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d9bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	e00e      	b.n	800d9ea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	78db      	ldrb	r3, [r3, #3]
 800d9d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	785b      	ldrb	r3, [r3, #1]
 800d9d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9d8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d9de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	22ca      	movs	r2, #202	; 0xca
 800d9f0:	625a      	str	r2, [r3, #36]	; 0x24
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2253      	movs	r2, #83	; 0x53
 800d9f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 f899 	bl	800db32 <RTC_EnterInitMode>
 800da00:	4603      	mov	r3, r0
 800da02:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da04:	7cfb      	ldrb	r3, [r7, #19]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10c      	bne.n	800da24 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f000 f8bc 	bl	800db98 <RTC_ExitInitMode>
 800da20:	4603      	mov	r3, r0
 800da22:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	22ff      	movs	r2, #255	; 0xff
 800da2a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da2c:	7cfb      	ldrb	r3, [r7, #19]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d103      	bne.n	800da3a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da42:	7cfb      	ldrb	r3, [r7, #19]
}
 800da44:	4618      	mov	r0, r3
 800da46:	371c      	adds	r7, #28
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd90      	pop	{r4, r7, pc}

0800da4c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	0c1b      	lsrs	r3, r3, #16
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	0a1b      	lsrs	r3, r3, #8
 800da76:	b2db      	uxtb	r3, r3
 800da78:	f003 031f 	and.w	r3, r3, #31
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	b2db      	uxtb	r3, r3
 800da86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	0b5b      	lsrs	r3, r3, #13
 800da94:	b2db      	uxtb	r3, r3
 800da96:	f003 0307 	and.w	r3, r3, #7
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d11a      	bne.n	800dadc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	78db      	ldrb	r3, [r3, #3]
 800daaa:	4618      	mov	r0, r3
 800daac:	f000 f8d2 	bl	800dc54 <RTC_Bcd2ToByte>
 800dab0:	4603      	mov	r3, r0
 800dab2:	461a      	mov	r2, r3
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f000 f8c9 	bl	800dc54 <RTC_Bcd2ToByte>
 800dac2:	4603      	mov	r3, r0
 800dac4:	461a      	mov	r2, r3
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	789b      	ldrb	r3, [r3, #2]
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 f8c0 	bl	800dc54 <RTC_Bcd2ToByte>
 800dad4:	4603      	mov	r3, r0
 800dad6:	461a      	mov	r2, r3
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68da      	ldr	r2, [r3, #12]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dafc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800dafe:	f7fa f889 	bl	8007c14 <HAL_GetTick>
 800db02:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db04:	e009      	b.n	800db1a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db06:	f7fa f885 	bl	8007c14 <HAL_GetTick>
 800db0a:	4602      	mov	r2, r0
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db14:	d901      	bls.n	800db1a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e007      	b.n	800db2a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	f003 0320 	and.w	r3, r3, #32
 800db24:	2b00      	cmp	r3, #0
 800db26:	d0ee      	beq.n	800db06 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d120      	bne.n	800db8e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f04f 32ff 	mov.w	r2, #4294967295
 800db54:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800db56:	f7fa f85d 	bl	8007c14 <HAL_GetTick>
 800db5a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db5c:	e00d      	b.n	800db7a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800db5e:	f7fa f859 	bl	8007c14 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db6c:	d905      	bls.n	800db7a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2203      	movs	r2, #3
 800db76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <RTC_EnterInitMode+0x5c>
 800db88:	7bfb      	ldrb	r3, [r7, #15]
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d1e7      	bne.n	800db5e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dba4:	4b1a      	ldr	r3, [pc, #104]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4a19      	ldr	r2, [pc, #100]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dbaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dbb0:	4b17      	ldr	r3, [pc, #92]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dbb2:	689b      	ldr	r3, [r3, #8]
 800dbb4:	f003 0320 	and.w	r3, r3, #32
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10c      	bne.n	800dbd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ff92 	bl	800dae6 <HAL_RTC_WaitForSynchro>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d01e      	beq.n	800dc06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	73fb      	strb	r3, [r7, #15]
 800dbd4:	e017      	b.n	800dc06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbd6:	4b0e      	ldr	r3, [pc, #56]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	4a0d      	ldr	r2, [pc, #52]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dbdc:	f023 0320 	bic.w	r3, r3, #32
 800dbe0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff ff7f 	bl	800dae6 <HAL_RTC_WaitForSynchro>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dbfa:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	4a04      	ldr	r2, [pc, #16]	; (800dc10 <RTC_ExitInitMode+0x78>)
 800dc00:	f043 0320 	orr.w	r3, r3, #32
 800dc04:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	40002800 	.word	0x40002800

0800dc14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800dc26:	e005      	b.n	800dc34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800dc2e:	7afb      	ldrb	r3, [r7, #11]
 800dc30:	3b0a      	subs	r3, #10
 800dc32:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800dc34:	7afb      	ldrb	r3, [r7, #11]
 800dc36:	2b09      	cmp	r3, #9
 800dc38:	d8f6      	bhi.n	800dc28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	011b      	lsls	r3, r3, #4
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	7afb      	ldrb	r3, [r7, #11]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	b2db      	uxtb	r3, r3
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	091b      	lsrs	r3, r3, #4
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	461a      	mov	r2, r3
 800dc66:	0092      	lsls	r2, r2, #2
 800dc68:	4413      	add	r3, r2
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	f003 030f 	and.w	r3, r3, #15
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	4413      	add	r3, r2
 800dc7a:	b2db      	uxtb	r3, r3
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d101      	bne.n	800dc9e <HAL_RTCEx_EnableBypassShadow+0x16>
 800dc9a:	2302      	movs	r3, #2
 800dc9c:	e024      	b.n	800dce8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2202      	movs	r2, #2
 800dcaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	22ca      	movs	r2, #202	; 0xca
 800dcb4:	625a      	str	r2, [r3, #36]	; 0x24
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2253      	movs	r2, #83	; 0x53
 800dcbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	689a      	ldr	r2, [r3, #8]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f042 0220 	orr.w	r2, r2, #32
 800dccc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	22ff      	movs	r2, #255	; 0xff
 800dcd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e095      	b.n	800de32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d108      	bne.n	800dd20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd16:	d009      	beq.n	800dd2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	61da      	str	r2, [r3, #28]
 800dd1e:	e005      	b.n	800dd2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7f9 f956 	bl	8006ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd6c:	d902      	bls.n	800dd74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60fb      	str	r3, [r7, #12]
 800dd72:	e002      	b.n	800dd7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd82:	d007      	beq.n	800dd94 <HAL_SPI_Init+0xa0>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd8c:	d002      	beq.n	800dd94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dda4:	431a      	orrs	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f003 0302 	and.w	r3, r3, #2
 800ddae:	431a      	orrs	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ddc2:	431a      	orrs	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	69db      	ldr	r3, [r3, #28]
 800ddc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddcc:	431a      	orrs	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd6:	ea42 0103 	orr.w	r1, r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	699b      	ldr	r3, [r3, #24]
 800ddee:	0c1b      	lsrs	r3, r3, #16
 800ddf0:	f003 0204 	and.w	r2, r3, #4
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf8:	f003 0310 	and.w	r3, r3, #16
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de02:	f003 0308 	and.w	r3, r3, #8
 800de06:	431a      	orrs	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800de10:	ea42 0103 	orr.w	r1, r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	430a      	orrs	r2, r1
 800de20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b088      	sub	sp, #32
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	603b      	str	r3, [r7, #0]
 800de46:	4613      	mov	r3, r2
 800de48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de54:	2b01      	cmp	r3, #1
 800de56:	d101      	bne.n	800de5c <HAL_SPI_Transmit+0x22>
 800de58:	2302      	movs	r3, #2
 800de5a:	e158      	b.n	800e10e <HAL_SPI_Transmit+0x2d4>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de64:	f7f9 fed6 	bl	8007c14 <HAL_GetTick>
 800de68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de6a:	88fb      	ldrh	r3, [r7, #6]
 800de6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b01      	cmp	r3, #1
 800de78:	d002      	beq.n	800de80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de7a:	2302      	movs	r3, #2
 800de7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de7e:	e13d      	b.n	800e0fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <HAL_SPI_Transmit+0x52>
 800de86:	88fb      	ldrh	r3, [r7, #6]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d102      	bne.n	800de92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de90:	e134      	b.n	800e0fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2203      	movs	r2, #3
 800de96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	88fa      	ldrh	r2, [r7, #6]
 800deaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	88fa      	ldrh	r2, [r7, #6]
 800deb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2200      	movs	r2, #0
 800deb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2200      	movs	r2, #0
 800debc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2200      	movs	r2, #0
 800decc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dedc:	d10f      	bne.n	800defe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800defc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df08:	2b40      	cmp	r3, #64	; 0x40
 800df0a:	d007      	beq.n	800df1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df24:	d94b      	bls.n	800dfbe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d002      	beq.n	800df34 <HAL_SPI_Transmit+0xfa>
 800df2e:	8afb      	ldrh	r3, [r7, #22]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d13e      	bne.n	800dfb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	881a      	ldrh	r2, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df44:	1c9a      	adds	r2, r3, #2
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df4e:	b29b      	uxth	r3, r3
 800df50:	3b01      	subs	r3, #1
 800df52:	b29a      	uxth	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df58:	e02b      	b.n	800dfb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	f003 0302 	and.w	r3, r3, #2
 800df64:	2b02      	cmp	r3, #2
 800df66:	d112      	bne.n	800df8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6c:	881a      	ldrh	r2, [r3, #0]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df78:	1c9a      	adds	r2, r3, #2
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df82:	b29b      	uxth	r3, r3
 800df84:	3b01      	subs	r3, #1
 800df86:	b29a      	uxth	r2, r3
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df8c:	e011      	b.n	800dfb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df8e:	f7f9 fe41 	bl	8007c14 <HAL_GetTick>
 800df92:	4602      	mov	r2, r0
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	683a      	ldr	r2, [r7, #0]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d803      	bhi.n	800dfa6 <HAL_SPI_Transmit+0x16c>
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa4:	d102      	bne.n	800dfac <HAL_SPI_Transmit+0x172>
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d102      	bne.n	800dfb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800dfac:	2303      	movs	r3, #3
 800dfae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dfb0:	e0a4      	b.n	800e0fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1ce      	bne.n	800df5a <HAL_SPI_Transmit+0x120>
 800dfbc:	e07c      	b.n	800e0b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <HAL_SPI_Transmit+0x192>
 800dfc6:	8afb      	ldrh	r3, [r7, #22]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d170      	bne.n	800e0ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d912      	bls.n	800dffc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	881a      	ldrh	r2, [r3, #0]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	1c9a      	adds	r2, r3, #2
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3b02      	subs	r3, #2
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dffa:	e058      	b.n	800e0ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	330c      	adds	r3, #12
 800e006:	7812      	ldrb	r2, [r2, #0]
 800e008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e018:	b29b      	uxth	r3, r3
 800e01a:	3b01      	subs	r3, #1
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e022:	e044      	b.n	800e0ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	f003 0302 	and.w	r3, r3, #2
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d12b      	bne.n	800e08a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e036:	b29b      	uxth	r3, r3
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d912      	bls.n	800e062 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e040:	881a      	ldrh	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04c:	1c9a      	adds	r2, r3, #2
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e056:	b29b      	uxth	r3, r3
 800e058:	3b02      	subs	r3, #2
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e060:	e025      	b.n	800e0ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	330c      	adds	r3, #12
 800e06c:	7812      	ldrb	r2, [r2, #0]
 800e06e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e07e:	b29b      	uxth	r3, r3
 800e080:	3b01      	subs	r3, #1
 800e082:	b29a      	uxth	r2, r3
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e088:	e011      	b.n	800e0ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e08a:	f7f9 fdc3 	bl	8007c14 <HAL_GetTick>
 800e08e:	4602      	mov	r2, r0
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	429a      	cmp	r2, r3
 800e098:	d803      	bhi.n	800e0a2 <HAL_SPI_Transmit+0x268>
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a0:	d102      	bne.n	800e0a8 <HAL_SPI_Transmit+0x26e>
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e0ac:	e026      	b.n	800e0fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1b5      	bne.n	800e024 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e0b8:	69ba      	ldr	r2, [r7, #24]
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 fcdf 	bl	800ea80 <SPI_EndRxTxTransaction>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10a      	bne.n	800e0ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	613b      	str	r3, [r7, #16]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	613b      	str	r3, [r7, #16]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	613b      	str	r3, [r7, #16]
 800e0ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	77fb      	strb	r3, [r7, #31]
 800e0f8:	e000      	b.n	800e0fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e0fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2201      	movs	r2, #1
 800e100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2200      	movs	r2, #0
 800e108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e10c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3720      	adds	r7, #32
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b088      	sub	sp, #32
 800e11a:	af02      	add	r7, sp, #8
 800e11c:	60f8      	str	r0, [r7, #12]
 800e11e:	60b9      	str	r1, [r7, #8]
 800e120:	603b      	str	r3, [r7, #0]
 800e122:	4613      	mov	r3, r2
 800e124:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e132:	d112      	bne.n	800e15a <HAL_SPI_Receive+0x44>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10e      	bne.n	800e15a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2204      	movs	r2, #4
 800e140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e144:	88fa      	ldrh	r2, [r7, #6]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	4613      	mov	r3, r2
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	68b9      	ldr	r1, [r7, #8]
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f000 f910 	bl	800e376 <HAL_SPI_TransmitReceive>
 800e156:	4603      	mov	r3, r0
 800e158:	e109      	b.n	800e36e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e160:	2b01      	cmp	r3, #1
 800e162:	d101      	bne.n	800e168 <HAL_SPI_Receive+0x52>
 800e164:	2302      	movs	r3, #2
 800e166:	e102      	b.n	800e36e <HAL_SPI_Receive+0x258>
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e170:	f7f9 fd50 	bl	8007c14 <HAL_GetTick>
 800e174:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d002      	beq.n	800e188 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e182:	2302      	movs	r3, #2
 800e184:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e186:	e0e9      	b.n	800e35c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <HAL_SPI_Receive+0x7e>
 800e18e:	88fb      	ldrh	r3, [r7, #6]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d102      	bne.n	800e19a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e198:	e0e0      	b.n	800e35c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2204      	movs	r2, #4
 800e19e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	88fa      	ldrh	r2, [r7, #6]
 800e1b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	88fa      	ldrh	r2, [r7, #6]
 800e1ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1e4:	d908      	bls.n	800e1f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1f4:	605a      	str	r2, [r3, #4]
 800e1f6:	e007      	b.n	800e208 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e206:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e210:	d10f      	bne.n	800e232 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e220:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e230:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23c:	2b40      	cmp	r3, #64	; 0x40
 800e23e:	d007      	beq.n	800e250 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e24e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e258:	d867      	bhi.n	800e32a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e25a:	e030      	b.n	800e2be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	2b01      	cmp	r3, #1
 800e268:	d117      	bne.n	800e29a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f103 020c 	add.w	r2, r3, #12
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e276:	7812      	ldrb	r2, [r2, #0]
 800e278:	b2d2      	uxtb	r2, r2
 800e27a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	b29a      	uxth	r2, r3
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e298:	e011      	b.n	800e2be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e29a:	f7f9 fcbb 	bl	8007c14 <HAL_GetTick>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d803      	bhi.n	800e2b2 <HAL_SPI_Receive+0x19c>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b0:	d102      	bne.n	800e2b8 <HAL_SPI_Receive+0x1a2>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d102      	bne.n	800e2be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e2bc:	e04e      	b.n	800e35c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1c8      	bne.n	800e25c <HAL_SPI_Receive+0x146>
 800e2ca:	e034      	b.n	800e336 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d115      	bne.n	800e306 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68da      	ldr	r2, [r3, #12]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e4:	b292      	uxth	r2, r2
 800e2e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ec:	1c9a      	adds	r2, r3, #2
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e304:	e011      	b.n	800e32a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e306:	f7f9 fc85 	bl	8007c14 <HAL_GetTick>
 800e30a:	4602      	mov	r2, r0
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d803      	bhi.n	800e31e <HAL_SPI_Receive+0x208>
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e31c:	d102      	bne.n	800e324 <HAL_SPI_Receive+0x20e>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d102      	bne.n	800e32a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e324:	2303      	movs	r3, #3
 800e326:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e328:	e018      	b.n	800e35c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e330:	b29b      	uxth	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1ca      	bne.n	800e2cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 fb48 	bl	800e9d0 <SPI_EndRxTransaction>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2220      	movs	r2, #32
 800e34a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	75fb      	strb	r3, [r7, #23]
 800e358:	e000      	b.n	800e35c <HAL_SPI_Receive+0x246>
  }

error :
 800e35a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3718      	adds	r7, #24
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b08a      	sub	sp, #40	; 0x28
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	60f8      	str	r0, [r7, #12]
 800e37e:	60b9      	str	r1, [r7, #8]
 800e380:	607a      	str	r2, [r7, #4]
 800e382:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e384:	2301      	movs	r3, #1
 800e386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e394:	2b01      	cmp	r3, #1
 800e396:	d101      	bne.n	800e39c <HAL_SPI_TransmitReceive+0x26>
 800e398:	2302      	movs	r3, #2
 800e39a:	e1fb      	b.n	800e794 <HAL_SPI_TransmitReceive+0x41e>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3a4:	f7f9 fc36 	bl	8007c14 <HAL_GetTick>
 800e3a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e3b8:	887b      	ldrh	r3, [r7, #2]
 800e3ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e3bc:	887b      	ldrh	r3, [r7, #2]
 800e3be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e3c0:	7efb      	ldrb	r3, [r7, #27]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d00e      	beq.n	800e3e4 <HAL_SPI_TransmitReceive+0x6e>
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3cc:	d106      	bne.n	800e3dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d102      	bne.n	800e3dc <HAL_SPI_TransmitReceive+0x66>
 800e3d6:	7efb      	ldrb	r3, [r7, #27]
 800e3d8:	2b04      	cmp	r3, #4
 800e3da:	d003      	beq.n	800e3e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e3dc:	2302      	movs	r3, #2
 800e3de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3e2:	e1cd      	b.n	800e780 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d005      	beq.n	800e3f6 <HAL_SPI_TransmitReceive+0x80>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <HAL_SPI_TransmitReceive+0x80>
 800e3f0:	887b      	ldrh	r3, [r7, #2]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d103      	bne.n	800e3fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e3fc:	e1c0      	b.n	800e780 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e404:	b2db      	uxtb	r3, r3
 800e406:	2b04      	cmp	r3, #4
 800e408:	d003      	beq.n	800e412 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2205      	movs	r2, #5
 800e40e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	887a      	ldrh	r2, [r7, #2]
 800e422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	887a      	ldrh	r2, [r7, #2]
 800e42a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	887a      	ldrh	r2, [r7, #2]
 800e438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	887a      	ldrh	r2, [r7, #2]
 800e43e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2200      	movs	r2, #0
 800e444:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2200      	movs	r2, #0
 800e44a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e454:	d802      	bhi.n	800e45c <HAL_SPI_TransmitReceive+0xe6>
 800e456:	8a3b      	ldrh	r3, [r7, #16]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d908      	bls.n	800e46e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e46a:	605a      	str	r2, [r3, #4]
 800e46c:	e007      	b.n	800e47e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685a      	ldr	r2, [r3, #4]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e47c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e488:	2b40      	cmp	r3, #64	; 0x40
 800e48a:	d007      	beq.n	800e49c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e49a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e4a4:	d97c      	bls.n	800e5a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d002      	beq.n	800e4b4 <HAL_SPI_TransmitReceive+0x13e>
 800e4ae:	8a7b      	ldrh	r3, [r7, #18]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d169      	bne.n	800e588 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b8:	881a      	ldrh	r2, [r3, #0]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c4:	1c9a      	adds	r2, r3, #2
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4d8:	e056      	b.n	800e588 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	f003 0302 	and.w	r3, r3, #2
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d11b      	bne.n	800e520 <HAL_SPI_TransmitReceive+0x1aa>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d016      	beq.n	800e520 <HAL_SPI_TransmitReceive+0x1aa>
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d113      	bne.n	800e520 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4fc:	881a      	ldrh	r2, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e508:	1c9a      	adds	r2, r3, #2
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e512:	b29b      	uxth	r3, r3
 800e514:	3b01      	subs	r3, #1
 800e516:	b29a      	uxth	r2, r3
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e51c:	2300      	movs	r3, #0
 800e51e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f003 0301 	and.w	r3, r3, #1
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d11c      	bne.n	800e568 <HAL_SPI_TransmitReceive+0x1f2>
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e534:	b29b      	uxth	r3, r3
 800e536:	2b00      	cmp	r3, #0
 800e538:	d016      	beq.n	800e568 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68da      	ldr	r2, [r3, #12]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e544:	b292      	uxth	r2, r2
 800e546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e54c:	1c9a      	adds	r2, r3, #2
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e558:	b29b      	uxth	r3, r3
 800e55a:	3b01      	subs	r3, #1
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e564:	2301      	movs	r3, #1
 800e566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e568:	f7f9 fb54 	bl	8007c14 <HAL_GetTick>
 800e56c:	4602      	mov	r2, r0
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e574:	429a      	cmp	r2, r3
 800e576:	d807      	bhi.n	800e588 <HAL_SPI_TransmitReceive+0x212>
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57e:	d003      	beq.n	800e588 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e580:	2303      	movs	r3, #3
 800e582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e586:	e0fb      	b.n	800e780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d1a3      	bne.n	800e4da <HAL_SPI_TransmitReceive+0x164>
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e598:	b29b      	uxth	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d19d      	bne.n	800e4da <HAL_SPI_TransmitReceive+0x164>
 800e59e:	e0df      	b.n	800e760 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d003      	beq.n	800e5b0 <HAL_SPI_TransmitReceive+0x23a>
 800e5a8:	8a7b      	ldrh	r3, [r7, #18]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	f040 80cb 	bne.w	800e746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d912      	bls.n	800e5e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5be:	881a      	ldrh	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ca:	1c9a      	adds	r2, r3, #2
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	3b02      	subs	r3, #2
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5de:	e0b2      	b.n	800e746 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	330c      	adds	r3, #12
 800e5ea:	7812      	ldrb	r2, [r2, #0]
 800e5ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3b01      	subs	r3, #1
 800e600:	b29a      	uxth	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e606:	e09e      	b.n	800e746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	f003 0302 	and.w	r3, r3, #2
 800e612:	2b02      	cmp	r3, #2
 800e614:	d134      	bne.n	800e680 <HAL_SPI_TransmitReceive+0x30a>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d02f      	beq.n	800e680 <HAL_SPI_TransmitReceive+0x30a>
 800e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e622:	2b01      	cmp	r3, #1
 800e624:	d12c      	bne.n	800e680 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d912      	bls.n	800e656 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e634:	881a      	ldrh	r2, [r3, #0]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e640:	1c9a      	adds	r2, r3, #2
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	3b02      	subs	r3, #2
 800e64e:	b29a      	uxth	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e654:	e012      	b.n	800e67c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	330c      	adds	r3, #12
 800e660:	7812      	ldrb	r2, [r2, #0]
 800e662:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e672:	b29b      	uxth	r3, r3
 800e674:	3b01      	subs	r3, #1
 800e676:	b29a      	uxth	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e67c:	2300      	movs	r3, #0
 800e67e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d148      	bne.n	800e720 <HAL_SPI_TransmitReceive+0x3aa>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e694:	b29b      	uxth	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d042      	beq.n	800e720 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d923      	bls.n	800e6ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68da      	ldr	r2, [r3, #12]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b0:	b292      	uxth	r2, r2
 800e6b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b8:	1c9a      	adds	r2, r3, #2
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	3b02      	subs	r3, #2
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d81f      	bhi.n	800e71c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e6ea:	605a      	str	r2, [r3, #4]
 800e6ec:	e016      	b.n	800e71c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f103 020c 	add.w	r2, r3, #12
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fa:	7812      	ldrb	r2, [r2, #0]
 800e6fc:	b2d2      	uxtb	r2, r2
 800e6fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e710:	b29b      	uxth	r3, r3
 800e712:	3b01      	subs	r3, #1
 800e714:	b29a      	uxth	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e71c:	2301      	movs	r3, #1
 800e71e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e720:	f7f9 fa78 	bl	8007c14 <HAL_GetTick>
 800e724:	4602      	mov	r2, r0
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d803      	bhi.n	800e738 <HAL_SPI_TransmitReceive+0x3c2>
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e736:	d102      	bne.n	800e73e <HAL_SPI_TransmitReceive+0x3c8>
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d103      	bne.n	800e746 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e73e:	2303      	movs	r3, #3
 800e740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e744:	e01c      	b.n	800e780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f47f af5b 	bne.w	800e608 <HAL_SPI_TransmitReceive+0x292>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e758:	b29b      	uxth	r3, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f47f af54 	bne.w	800e608 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e760:	69fa      	ldr	r2, [r7, #28]
 800e762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f000 f98b 	bl	800ea80 <SPI_EndRxTxTransaction>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d006      	beq.n	800e77e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e770:	2301      	movs	r3, #1
 800e772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2220      	movs	r2, #32
 800e77a:	661a      	str	r2, [r3, #96]	; 0x60
 800e77c:	e000      	b.n	800e780 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e77e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2201      	movs	r2, #1
 800e784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e794:	4618      	mov	r0, r3
 800e796:	3728      	adds	r7, #40	; 0x28
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b088      	sub	sp, #32
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	603b      	str	r3, [r7, #0]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e7ac:	f7f9 fa32 	bl	8007c14 <HAL_GetTick>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b4:	1a9b      	subs	r3, r3, r2
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e7bc:	f7f9 fa2a 	bl	8007c14 <HAL_GetTick>
 800e7c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e7c2:	4b39      	ldr	r3, [pc, #228]	; (800e8a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	015b      	lsls	r3, r3, #5
 800e7c8:	0d1b      	lsrs	r3, r3, #20
 800e7ca:	69fa      	ldr	r2, [r7, #28]
 800e7cc:	fb02 f303 	mul.w	r3, r2, r3
 800e7d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7d2:	e054      	b.n	800e87e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7da:	d050      	beq.n	800e87e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e7dc:	f7f9 fa1a 	bl	8007c14 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	69fa      	ldr	r2, [r7, #28]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d902      	bls.n	800e7f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d13d      	bne.n	800e86e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e80a:	d111      	bne.n	800e830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e814:	d004      	beq.n	800e820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e81e:	d107      	bne.n	800e830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e82e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e838:	d10f      	bne.n	800e85a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2200      	movs	r2, #0
 800e866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e017      	b.n	800e89e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e874:	2300      	movs	r3, #0
 800e876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	4013      	ands	r3, r2
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	bf0c      	ite	eq
 800e88e:	2301      	moveq	r3, #1
 800e890:	2300      	movne	r3, #0
 800e892:	b2db      	uxtb	r3, r3
 800e894:	461a      	mov	r2, r3
 800e896:	79fb      	ldrb	r3, [r7, #7]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d19b      	bne.n	800e7d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3720      	adds	r7, #32
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	200003b8 	.word	0x200003b8

0800e8ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
 800e8b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e8ba:	f7f9 f9ab 	bl	8007c14 <HAL_GetTick>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	1a9b      	subs	r3, r3, r2
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e8ca:	f7f9 f9a3 	bl	8007c14 <HAL_GetTick>
 800e8ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8d0:	4b3e      	ldr	r3, [pc, #248]	; (800e9cc <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	00da      	lsls	r2, r3, #3
 800e8dc:	1ad3      	subs	r3, r2, r3
 800e8de:	0d1b      	lsrs	r3, r3, #20
 800e8e0:	69fa      	ldr	r2, [r7, #28]
 800e8e2:	fb02 f303 	mul.w	r3, r2, r3
 800e8e6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8e8:	e062      	b.n	800e9b0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e8f0:	d109      	bne.n	800e906 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d106      	bne.n	800e906 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	330c      	adds	r3, #12
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	b2db      	uxtb	r3, r3
 800e902:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e904:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90c:	d050      	beq.n	800e9b0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e90e:	f7f9 f981 	bl	8007c14 <HAL_GetTick>
 800e912:	4602      	mov	r2, r0
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	69fa      	ldr	r2, [r7, #28]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d902      	bls.n	800e924 <SPI_WaitFifoStateUntilTimeout+0x78>
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d13d      	bne.n	800e9a0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e93c:	d111      	bne.n	800e962 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e946:	d004      	beq.n	800e952 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	689b      	ldr	r3, [r3, #8]
 800e94c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e950:	d107      	bne.n	800e962 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e96a:	d10f      	bne.n	800e98c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e97a:	601a      	str	r2, [r3, #0]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e98a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e99c:	2303      	movs	r3, #3
 800e99e:	e010      	b.n	800e9c2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d194      	bne.n	800e8ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3720      	adds	r7, #32
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	200003b8 	.word	0x200003b8

0800e9d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9e4:	d111      	bne.n	800ea0a <SPI_EndRxTransaction+0x3a>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ee:	d004      	beq.n	800e9fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9f8:	d107      	bne.n	800ea0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea08:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2200      	movs	r2, #0
 800ea12:	2180      	movs	r1, #128	; 0x80
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7ff fec1 	bl	800e79c <SPI_WaitFlagStateUntilTimeout>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d007      	beq.n	800ea30 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea24:	f043 0220 	orr.w	r2, r3, #32
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	e023      	b.n	800ea78 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea38:	d11d      	bne.n	800ea76 <SPI_EndRxTransaction+0xa6>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea42:	d004      	beq.n	800ea4e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea4c:	d113      	bne.n	800ea76 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f7ff ff26 	bl	800e8ac <SPI_WaitFifoStateUntilTimeout>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d007      	beq.n	800ea76 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea6a:	f043 0220 	orr.w	r2, r3, #32
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ea72:	2303      	movs	r3, #3
 800ea74:	e000      	b.n	800ea78 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2200      	movs	r2, #0
 800ea94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f7ff ff07 	bl	800e8ac <SPI_WaitFifoStateUntilTimeout>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d007      	beq.n	800eab4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaa8:	f043 0220 	orr.w	r2, r3, #32
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e027      	b.n	800eb04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2200      	movs	r2, #0
 800eabc:	2180      	movs	r1, #128	; 0x80
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff fe6c 	bl	800e79c <SPI_WaitFlagStateUntilTimeout>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eace:	f043 0220 	orr.w	r2, r3, #32
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ead6:	2303      	movs	r3, #3
 800ead8:	e014      	b.n	800eb04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fee0 	bl	800e8ac <SPI_WaitFifoStateUntilTimeout>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d007      	beq.n	800eb02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eaf6:	f043 0220 	orr.w	r2, r3, #32
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eafe:	2303      	movs	r3, #3
 800eb00:	e000      	b.n	800eb04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e049      	b.n	800ebb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7f8 fb66 	bl	8007204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2202      	movs	r2, #2
 800eb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4619      	mov	r1, r3
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	f000 fcec 	bl	800f528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
	...

0800ebbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d001      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e047      	b.n	800ec64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a23      	ldr	r2, [pc, #140]	; (800ec70 <HAL_TIM_Base_Start+0xb4>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d01d      	beq.n	800ec22 <HAL_TIM_Base_Start+0x66>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebee:	d018      	beq.n	800ec22 <HAL_TIM_Base_Start+0x66>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a1f      	ldr	r2, [pc, #124]	; (800ec74 <HAL_TIM_Base_Start+0xb8>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d013      	beq.n	800ec22 <HAL_TIM_Base_Start+0x66>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a1e      	ldr	r2, [pc, #120]	; (800ec78 <HAL_TIM_Base_Start+0xbc>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d00e      	beq.n	800ec22 <HAL_TIM_Base_Start+0x66>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a1c      	ldr	r2, [pc, #112]	; (800ec7c <HAL_TIM_Base_Start+0xc0>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d009      	beq.n	800ec22 <HAL_TIM_Base_Start+0x66>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a1b      	ldr	r2, [pc, #108]	; (800ec80 <HAL_TIM_Base_Start+0xc4>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d004      	beq.n	800ec22 <HAL_TIM_Base_Start+0x66>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a19      	ldr	r2, [pc, #100]	; (800ec84 <HAL_TIM_Base_Start+0xc8>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d115      	bne.n	800ec4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689a      	ldr	r2, [r3, #8]
 800ec28:	4b17      	ldr	r3, [pc, #92]	; (800ec88 <HAL_TIM_Base_Start+0xcc>)
 800ec2a:	4013      	ands	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b06      	cmp	r3, #6
 800ec32:	d015      	beq.n	800ec60 <HAL_TIM_Base_Start+0xa4>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec3a:	d011      	beq.n	800ec60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f042 0201 	orr.w	r2, r2, #1
 800ec4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec4c:	e008      	b.n	800ec60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f042 0201 	orr.w	r2, r2, #1
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	e000      	b.n	800ec62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	40012c00 	.word	0x40012c00
 800ec74:	40000400 	.word	0x40000400
 800ec78:	40000800 	.word	0x40000800
 800ec7c:	40000c00 	.word	0x40000c00
 800ec80:	40013400 	.word	0x40013400
 800ec84:	40014000 	.word	0x40014000
 800ec88:	00010007 	.word	0x00010007

0800ec8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6a1a      	ldr	r2, [r3, #32]
 800ec9a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec9e:	4013      	ands	r3, r2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10f      	bne.n	800ecc4 <HAL_TIM_Base_Stop+0x38>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6a1a      	ldr	r2, [r3, #32]
 800ecaa:	f240 4344 	movw	r3, #1092	; 0x444
 800ecae:	4013      	ands	r3, r2
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d107      	bne.n	800ecc4 <HAL_TIM_Base_Stop+0x38>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f022 0201 	bic.w	r2, r2, #1
 800ecc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
	...

0800ecdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d001      	beq.n	800ecf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e04f      	b.n	800ed94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0201 	orr.w	r2, r2, #1
 800ed0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a23      	ldr	r2, [pc, #140]	; (800eda0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d01d      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0x76>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed1e:	d018      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0x76>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a1f      	ldr	r2, [pc, #124]	; (800eda4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d013      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0x76>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a1e      	ldr	r2, [pc, #120]	; (800eda8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d00e      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0x76>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a1c      	ldr	r2, [pc, #112]	; (800edac <HAL_TIM_Base_Start_IT+0xd0>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d009      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0x76>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a1b      	ldr	r2, [pc, #108]	; (800edb0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d004      	beq.n	800ed52 <HAL_TIM_Base_Start_IT+0x76>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a19      	ldr	r2, [pc, #100]	; (800edb4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d115      	bne.n	800ed7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	689a      	ldr	r2, [r3, #8]
 800ed58:	4b17      	ldr	r3, [pc, #92]	; (800edb8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b06      	cmp	r3, #6
 800ed62:	d015      	beq.n	800ed90 <HAL_TIM_Base_Start_IT+0xb4>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed6a:	d011      	beq.n	800ed90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f042 0201 	orr.w	r2, r2, #1
 800ed7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed7c:	e008      	b.n	800ed90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f042 0201 	orr.w	r2, r2, #1
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	e000      	b.n	800ed92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	40012c00 	.word	0x40012c00
 800eda4:	40000400 	.word	0x40000400
 800eda8:	40000800 	.word	0x40000800
 800edac:	40000c00 	.word	0x40000c00
 800edb0:	40013400 	.word	0x40013400
 800edb4:	40014000 	.word	0x40014000
 800edb8:	00010007 	.word	0x00010007

0800edbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e049      	b.n	800ee62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d106      	bne.n	800ede8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f8 f9dc 	bl	80071a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2202      	movs	r2, #2
 800edec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	3304      	adds	r3, #4
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f000 fb94 	bl	800f528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d109      	bne.n	800ee90 <HAL_TIM_PWM_Start+0x24>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	bf14      	ite	ne
 800ee88:	2301      	movne	r3, #1
 800ee8a:	2300      	moveq	r3, #0
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	e03c      	b.n	800ef0a <HAL_TIM_PWM_Start+0x9e>
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d109      	bne.n	800eeaa <HAL_TIM_PWM_Start+0x3e>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	bf14      	ite	ne
 800eea2:	2301      	movne	r3, #1
 800eea4:	2300      	moveq	r3, #0
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	e02f      	b.n	800ef0a <HAL_TIM_PWM_Start+0x9e>
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b08      	cmp	r3, #8
 800eeae:	d109      	bne.n	800eec4 <HAL_TIM_PWM_Start+0x58>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	bf14      	ite	ne
 800eebc:	2301      	movne	r3, #1
 800eebe:	2300      	moveq	r3, #0
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	e022      	b.n	800ef0a <HAL_TIM_PWM_Start+0x9e>
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2b0c      	cmp	r3, #12
 800eec8:	d109      	bne.n	800eede <HAL_TIM_PWM_Start+0x72>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	bf14      	ite	ne
 800eed6:	2301      	movne	r3, #1
 800eed8:	2300      	moveq	r3, #0
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	e015      	b.n	800ef0a <HAL_TIM_PWM_Start+0x9e>
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2b10      	cmp	r3, #16
 800eee2:	d109      	bne.n	800eef8 <HAL_TIM_PWM_Start+0x8c>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	bf14      	ite	ne
 800eef0:	2301      	movne	r3, #1
 800eef2:	2300      	moveq	r3, #0
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	e008      	b.n	800ef0a <HAL_TIM_PWM_Start+0x9e>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	bf14      	ite	ne
 800ef04:	2301      	movne	r3, #1
 800ef06:	2300      	moveq	r3, #0
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	e09c      	b.n	800f04c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <HAL_TIM_PWM_Start+0xb6>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2202      	movs	r2, #2
 800ef1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef20:	e023      	b.n	800ef6a <HAL_TIM_PWM_Start+0xfe>
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	d104      	bne.n	800ef32 <HAL_TIM_PWM_Start+0xc6>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef30:	e01b      	b.n	800ef6a <HAL_TIM_PWM_Start+0xfe>
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b08      	cmp	r3, #8
 800ef36:	d104      	bne.n	800ef42 <HAL_TIM_PWM_Start+0xd6>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2202      	movs	r2, #2
 800ef3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef40:	e013      	b.n	800ef6a <HAL_TIM_PWM_Start+0xfe>
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2b0c      	cmp	r3, #12
 800ef46:	d104      	bne.n	800ef52 <HAL_TIM_PWM_Start+0xe6>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef50:	e00b      	b.n	800ef6a <HAL_TIM_PWM_Start+0xfe>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b10      	cmp	r3, #16
 800ef56:	d104      	bne.n	800ef62 <HAL_TIM_PWM_Start+0xf6>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef60:	e003      	b.n	800ef6a <HAL_TIM_PWM_Start+0xfe>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2202      	movs	r2, #2
 800ef66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 fe48 	bl	800fc08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a35      	ldr	r2, [pc, #212]	; (800f054 <HAL_TIM_PWM_Start+0x1e8>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d013      	beq.n	800efaa <HAL_TIM_PWM_Start+0x13e>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a34      	ldr	r2, [pc, #208]	; (800f058 <HAL_TIM_PWM_Start+0x1ec>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d00e      	beq.n	800efaa <HAL_TIM_PWM_Start+0x13e>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a32      	ldr	r2, [pc, #200]	; (800f05c <HAL_TIM_PWM_Start+0x1f0>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d009      	beq.n	800efaa <HAL_TIM_PWM_Start+0x13e>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a31      	ldr	r2, [pc, #196]	; (800f060 <HAL_TIM_PWM_Start+0x1f4>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d004      	beq.n	800efaa <HAL_TIM_PWM_Start+0x13e>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a2f      	ldr	r2, [pc, #188]	; (800f064 <HAL_TIM_PWM_Start+0x1f8>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d101      	bne.n	800efae <HAL_TIM_PWM_Start+0x142>
 800efaa:	2301      	movs	r3, #1
 800efac:	e000      	b.n	800efb0 <HAL_TIM_PWM_Start+0x144>
 800efae:	2300      	movs	r3, #0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d007      	beq.n	800efc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a22      	ldr	r2, [pc, #136]	; (800f054 <HAL_TIM_PWM_Start+0x1e8>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d01d      	beq.n	800f00a <HAL_TIM_PWM_Start+0x19e>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efd6:	d018      	beq.n	800f00a <HAL_TIM_PWM_Start+0x19e>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a22      	ldr	r2, [pc, #136]	; (800f068 <HAL_TIM_PWM_Start+0x1fc>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d013      	beq.n	800f00a <HAL_TIM_PWM_Start+0x19e>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a21      	ldr	r2, [pc, #132]	; (800f06c <HAL_TIM_PWM_Start+0x200>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d00e      	beq.n	800f00a <HAL_TIM_PWM_Start+0x19e>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a1f      	ldr	r2, [pc, #124]	; (800f070 <HAL_TIM_PWM_Start+0x204>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d009      	beq.n	800f00a <HAL_TIM_PWM_Start+0x19e>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a17      	ldr	r2, [pc, #92]	; (800f058 <HAL_TIM_PWM_Start+0x1ec>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d004      	beq.n	800f00a <HAL_TIM_PWM_Start+0x19e>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a15      	ldr	r2, [pc, #84]	; (800f05c <HAL_TIM_PWM_Start+0x1f0>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d115      	bne.n	800f036 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	689a      	ldr	r2, [r3, #8]
 800f010:	4b18      	ldr	r3, [pc, #96]	; (800f074 <HAL_TIM_PWM_Start+0x208>)
 800f012:	4013      	ands	r3, r2
 800f014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b06      	cmp	r3, #6
 800f01a:	d015      	beq.n	800f048 <HAL_TIM_PWM_Start+0x1dc>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f022:	d011      	beq.n	800f048 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f042 0201 	orr.w	r2, r2, #1
 800f032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f034:	e008      	b.n	800f048 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f042 0201 	orr.w	r2, r2, #1
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	e000      	b.n	800f04a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f048:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	40012c00 	.word	0x40012c00
 800f058:	40013400 	.word	0x40013400
 800f05c:	40014000 	.word	0x40014000
 800f060:	40014400 	.word	0x40014400
 800f064:	40014800 	.word	0x40014800
 800f068:	40000400 	.word	0x40000400
 800f06c:	40000800 	.word	0x40000800
 800f070:	40000c00 	.word	0x40000c00
 800f074:	00010007 	.word	0x00010007

0800f078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	f003 0302 	and.w	r3, r3, #2
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d122      	bne.n	800f0d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	f003 0302 	and.w	r3, r3, #2
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d11b      	bne.n	800f0d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f06f 0202 	mvn.w	r2, #2
 800f0a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	f003 0303 	and.w	r3, r3, #3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fa16 	bl	800f4ec <HAL_TIM_IC_CaptureCallback>
 800f0c0:	e005      	b.n	800f0ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 fa08 	bl	800f4d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fa19 	bl	800f500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	f003 0304 	and.w	r3, r3, #4
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d122      	bne.n	800f128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b04      	cmp	r3, #4
 800f0ee:	d11b      	bne.n	800f128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f06f 0204 	mvn.w	r2, #4
 800f0f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f9ec 	bl	800f4ec <HAL_TIM_IC_CaptureCallback>
 800f114:	e005      	b.n	800f122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f9de 	bl	800f4d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 f9ef 	bl	800f500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	f003 0308 	and.w	r3, r3, #8
 800f132:	2b08      	cmp	r3, #8
 800f134:	d122      	bne.n	800f17c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	f003 0308 	and.w	r3, r3, #8
 800f140:	2b08      	cmp	r3, #8
 800f142:	d11b      	bne.n	800f17c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f06f 0208 	mvn.w	r2, #8
 800f14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2204      	movs	r2, #4
 800f152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	69db      	ldr	r3, [r3, #28]
 800f15a:	f003 0303 	and.w	r3, r3, #3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d003      	beq.n	800f16a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f9c2 	bl	800f4ec <HAL_TIM_IC_CaptureCallback>
 800f168:	e005      	b.n	800f176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 f9b4 	bl	800f4d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 f9c5 	bl	800f500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	f003 0310 	and.w	r3, r3, #16
 800f186:	2b10      	cmp	r3, #16
 800f188:	d122      	bne.n	800f1d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	f003 0310 	and.w	r3, r3, #16
 800f194:	2b10      	cmp	r3, #16
 800f196:	d11b      	bne.n	800f1d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f06f 0210 	mvn.w	r2, #16
 800f1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2208      	movs	r2, #8
 800f1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d003      	beq.n	800f1be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 f998 	bl	800f4ec <HAL_TIM_IC_CaptureCallback>
 800f1bc:	e005      	b.n	800f1ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f98a 	bl	800f4d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 f99b 	bl	800f500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d10e      	bne.n	800f1fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d107      	bne.n	800f1fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f06f 0201 	mvn.w	r2, #1
 800f1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7f7 fb2e 	bl	8006858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f206:	2b80      	cmp	r3, #128	; 0x80
 800f208:	d10e      	bne.n	800f228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f214:	2b80      	cmp	r3, #128	; 0x80
 800f216:	d107      	bne.n	800f228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 fda8 	bl	800fd78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f236:	d10e      	bne.n	800f256 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f242:	2b80      	cmp	r3, #128	; 0x80
 800f244:	d107      	bne.n	800f256 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fd9b 	bl	800fd8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	691b      	ldr	r3, [r3, #16]
 800f25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f260:	2b40      	cmp	r3, #64	; 0x40
 800f262:	d10e      	bne.n	800f282 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f26e:	2b40      	cmp	r3, #64	; 0x40
 800f270:	d107      	bne.n	800f282 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f949 	bl	800f514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	f003 0320 	and.w	r3, r3, #32
 800f28c:	2b20      	cmp	r3, #32
 800f28e:	d10e      	bne.n	800f2ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	f003 0320 	and.w	r3, r3, #32
 800f29a:	2b20      	cmp	r3, #32
 800f29c:	d107      	bne.n	800f2ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f06f 0220 	mvn.w	r2, #32
 800f2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 fd5b 	bl	800fd64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f2ae:	bf00      	nop
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d101      	bne.n	800f2d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f2ce:	2302      	movs	r3, #2
 800f2d0:	e0fd      	b.n	800f4ce <HAL_TIM_PWM_ConfigChannel+0x216>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b14      	cmp	r3, #20
 800f2de:	f200 80f0 	bhi.w	800f4c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f33d 	.word	0x0800f33d
 800f2ec:	0800f4c3 	.word	0x0800f4c3
 800f2f0:	0800f4c3 	.word	0x0800f4c3
 800f2f4:	0800f4c3 	.word	0x0800f4c3
 800f2f8:	0800f37d 	.word	0x0800f37d
 800f2fc:	0800f4c3 	.word	0x0800f4c3
 800f300:	0800f4c3 	.word	0x0800f4c3
 800f304:	0800f4c3 	.word	0x0800f4c3
 800f308:	0800f3bf 	.word	0x0800f3bf
 800f30c:	0800f4c3 	.word	0x0800f4c3
 800f310:	0800f4c3 	.word	0x0800f4c3
 800f314:	0800f4c3 	.word	0x0800f4c3
 800f318:	0800f3ff 	.word	0x0800f3ff
 800f31c:	0800f4c3 	.word	0x0800f4c3
 800f320:	0800f4c3 	.word	0x0800f4c3
 800f324:	0800f4c3 	.word	0x0800f4c3
 800f328:	0800f441 	.word	0x0800f441
 800f32c:	0800f4c3 	.word	0x0800f4c3
 800f330:	0800f4c3 	.word	0x0800f4c3
 800f334:	0800f4c3 	.word	0x0800f4c3
 800f338:	0800f481 	.word	0x0800f481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68b9      	ldr	r1, [r7, #8]
 800f342:	4618      	mov	r0, r3
 800f344:	f000 f98a 	bl	800f65c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	699a      	ldr	r2, [r3, #24]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f042 0208 	orr.w	r2, r2, #8
 800f356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f022 0204 	bic.w	r2, r2, #4
 800f366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	6999      	ldr	r1, [r3, #24]
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	691a      	ldr	r2, [r3, #16]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	619a      	str	r2, [r3, #24]
      break;
 800f37a:	e0a3      	b.n	800f4c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	68b9      	ldr	r1, [r7, #8]
 800f382:	4618      	mov	r0, r3
 800f384:	f000 f9fa 	bl	800f77c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	699a      	ldr	r2, [r3, #24]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	699a      	ldr	r2, [r3, #24]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	6999      	ldr	r1, [r3, #24]
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	021a      	lsls	r2, r3, #8
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	619a      	str	r2, [r3, #24]
      break;
 800f3bc:	e082      	b.n	800f4c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	68b9      	ldr	r1, [r7, #8]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 fa63 	bl	800f890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	69da      	ldr	r2, [r3, #28]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f042 0208 	orr.w	r2, r2, #8
 800f3d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69da      	ldr	r2, [r3, #28]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f022 0204 	bic.w	r2, r2, #4
 800f3e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	69d9      	ldr	r1, [r3, #28]
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	691a      	ldr	r2, [r3, #16]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	430a      	orrs	r2, r1
 800f3fa:	61da      	str	r2, [r3, #28]
      break;
 800f3fc:	e062      	b.n	800f4c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68b9      	ldr	r1, [r7, #8]
 800f404:	4618      	mov	r0, r3
 800f406:	f000 facb 	bl	800f9a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	69da      	ldr	r2, [r3, #28]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	69da      	ldr	r2, [r3, #28]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	69d9      	ldr	r1, [r3, #28]
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	021a      	lsls	r2, r3, #8
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	430a      	orrs	r2, r1
 800f43c:	61da      	str	r2, [r3, #28]
      break;
 800f43e:	e041      	b.n	800f4c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68b9      	ldr	r1, [r7, #8]
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fb14 	bl	800fa74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f042 0208 	orr.w	r2, r2, #8
 800f45a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f022 0204 	bic.w	r2, r2, #4
 800f46a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	691a      	ldr	r2, [r3, #16]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	430a      	orrs	r2, r1
 800f47c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f47e:	e021      	b.n	800f4c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	68b9      	ldr	r1, [r7, #8]
 800f486:	4618      	mov	r0, r3
 800f488:	f000 fb58 	bl	800fb3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f49a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	021a      	lsls	r2, r3, #8
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	430a      	orrs	r2, r1
 800f4be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f4c0:	e000      	b.n	800f4c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f4c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop

0800f4d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4e0:	bf00      	nop
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f508:	bf00      	nop
 800f50a:	370c      	adds	r7, #12
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a40      	ldr	r2, [pc, #256]	; (800f63c <TIM_Base_SetConfig+0x114>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d013      	beq.n	800f568 <TIM_Base_SetConfig+0x40>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f546:	d00f      	beq.n	800f568 <TIM_Base_SetConfig+0x40>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a3d      	ldr	r2, [pc, #244]	; (800f640 <TIM_Base_SetConfig+0x118>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d00b      	beq.n	800f568 <TIM_Base_SetConfig+0x40>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a3c      	ldr	r2, [pc, #240]	; (800f644 <TIM_Base_SetConfig+0x11c>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d007      	beq.n	800f568 <TIM_Base_SetConfig+0x40>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a3b      	ldr	r2, [pc, #236]	; (800f648 <TIM_Base_SetConfig+0x120>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d003      	beq.n	800f568 <TIM_Base_SetConfig+0x40>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a3a      	ldr	r2, [pc, #232]	; (800f64c <TIM_Base_SetConfig+0x124>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d108      	bne.n	800f57a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f56e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4313      	orrs	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4a2f      	ldr	r2, [pc, #188]	; (800f63c <TIM_Base_SetConfig+0x114>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d01f      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f588:	d01b      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4a2c      	ldr	r2, [pc, #176]	; (800f640 <TIM_Base_SetConfig+0x118>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d017      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4a2b      	ldr	r2, [pc, #172]	; (800f644 <TIM_Base_SetConfig+0x11c>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d013      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4a2a      	ldr	r2, [pc, #168]	; (800f648 <TIM_Base_SetConfig+0x120>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d00f      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4a29      	ldr	r2, [pc, #164]	; (800f64c <TIM_Base_SetConfig+0x124>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d00b      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a28      	ldr	r2, [pc, #160]	; (800f650 <TIM_Base_SetConfig+0x128>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d007      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a27      	ldr	r2, [pc, #156]	; (800f654 <TIM_Base_SetConfig+0x12c>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d003      	beq.n	800f5c2 <TIM_Base_SetConfig+0x9a>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a26      	ldr	r2, [pc, #152]	; (800f658 <TIM_Base_SetConfig+0x130>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d108      	bne.n	800f5d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	695b      	ldr	r3, [r3, #20]
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	689a      	ldr	r2, [r3, #8]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a10      	ldr	r2, [pc, #64]	; (800f63c <TIM_Base_SetConfig+0x114>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d00f      	beq.n	800f620 <TIM_Base_SetConfig+0xf8>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4a12      	ldr	r2, [pc, #72]	; (800f64c <TIM_Base_SetConfig+0x124>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d00b      	beq.n	800f620 <TIM_Base_SetConfig+0xf8>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a11      	ldr	r2, [pc, #68]	; (800f650 <TIM_Base_SetConfig+0x128>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d007      	beq.n	800f620 <TIM_Base_SetConfig+0xf8>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a10      	ldr	r2, [pc, #64]	; (800f654 <TIM_Base_SetConfig+0x12c>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d003      	beq.n	800f620 <TIM_Base_SetConfig+0xf8>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a0f      	ldr	r2, [pc, #60]	; (800f658 <TIM_Base_SetConfig+0x130>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d103      	bne.n	800f628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	691a      	ldr	r2, [r3, #16]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	615a      	str	r2, [r3, #20]
}
 800f62e:	bf00      	nop
 800f630:	3714      	adds	r7, #20
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	40012c00 	.word	0x40012c00
 800f640:	40000400 	.word	0x40000400
 800f644:	40000800 	.word	0x40000800
 800f648:	40000c00 	.word	0x40000c00
 800f64c:	40013400 	.word	0x40013400
 800f650:	40014000 	.word	0x40014000
 800f654:	40014400 	.word	0x40014400
 800f658:	40014800 	.word	0x40014800

0800f65c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b087      	sub	sp, #28
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6a1b      	ldr	r3, [r3, #32]
 800f66a:	f023 0201 	bic.w	r2, r3, #1
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a1b      	ldr	r3, [r3, #32]
 800f676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	699b      	ldr	r3, [r3, #24]
 800f682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f68a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f68e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f023 0303 	bic.w	r3, r3, #3
 800f696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68fa      	ldr	r2, [r7, #12]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f023 0302 	bic.w	r3, r3, #2
 800f6a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	697a      	ldr	r2, [r7, #20]
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a2c      	ldr	r2, [pc, #176]	; (800f768 <TIM_OC1_SetConfig+0x10c>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d00f      	beq.n	800f6dc <TIM_OC1_SetConfig+0x80>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a2b      	ldr	r2, [pc, #172]	; (800f76c <TIM_OC1_SetConfig+0x110>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d00b      	beq.n	800f6dc <TIM_OC1_SetConfig+0x80>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a2a      	ldr	r2, [pc, #168]	; (800f770 <TIM_OC1_SetConfig+0x114>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d007      	beq.n	800f6dc <TIM_OC1_SetConfig+0x80>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a29      	ldr	r2, [pc, #164]	; (800f774 <TIM_OC1_SetConfig+0x118>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d003      	beq.n	800f6dc <TIM_OC1_SetConfig+0x80>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a28      	ldr	r2, [pc, #160]	; (800f778 <TIM_OC1_SetConfig+0x11c>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d10c      	bne.n	800f6f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	f023 0308 	bic.w	r3, r3, #8
 800f6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f023 0304 	bic.w	r3, r3, #4
 800f6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a1b      	ldr	r2, [pc, #108]	; (800f768 <TIM_OC1_SetConfig+0x10c>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d00f      	beq.n	800f71e <TIM_OC1_SetConfig+0xc2>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a1a      	ldr	r2, [pc, #104]	; (800f76c <TIM_OC1_SetConfig+0x110>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d00b      	beq.n	800f71e <TIM_OC1_SetConfig+0xc2>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a19      	ldr	r2, [pc, #100]	; (800f770 <TIM_OC1_SetConfig+0x114>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d007      	beq.n	800f71e <TIM_OC1_SetConfig+0xc2>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a18      	ldr	r2, [pc, #96]	; (800f774 <TIM_OC1_SetConfig+0x118>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d003      	beq.n	800f71e <TIM_OC1_SetConfig+0xc2>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a17      	ldr	r2, [pc, #92]	; (800f778 <TIM_OC1_SetConfig+0x11c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d111      	bne.n	800f742 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f72c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	693a      	ldr	r2, [r7, #16]
 800f734:	4313      	orrs	r3, r2
 800f736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	693a      	ldr	r2, [r7, #16]
 800f73e:	4313      	orrs	r3, r2
 800f740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	621a      	str	r2, [r3, #32]
}
 800f75c:	bf00      	nop
 800f75e:	371c      	adds	r7, #28
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr
 800f768:	40012c00 	.word	0x40012c00
 800f76c:	40013400 	.word	0x40013400
 800f770:	40014000 	.word	0x40014000
 800f774:	40014400 	.word	0x40014400
 800f778:	40014800 	.word	0x40014800

0800f77c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b087      	sub	sp, #28
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a1b      	ldr	r3, [r3, #32]
 800f78a:	f023 0210 	bic.w	r2, r3, #16
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	699b      	ldr	r3, [r3, #24]
 800f7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f023 0320 	bic.w	r3, r3, #32
 800f7ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a28      	ldr	r2, [pc, #160]	; (800f87c <TIM_OC2_SetConfig+0x100>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d003      	beq.n	800f7e8 <TIM_OC2_SetConfig+0x6c>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a27      	ldr	r2, [pc, #156]	; (800f880 <TIM_OC2_SetConfig+0x104>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d10d      	bne.n	800f804 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a1d      	ldr	r2, [pc, #116]	; (800f87c <TIM_OC2_SetConfig+0x100>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d00f      	beq.n	800f82c <TIM_OC2_SetConfig+0xb0>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a1c      	ldr	r2, [pc, #112]	; (800f880 <TIM_OC2_SetConfig+0x104>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d00b      	beq.n	800f82c <TIM_OC2_SetConfig+0xb0>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a1b      	ldr	r2, [pc, #108]	; (800f884 <TIM_OC2_SetConfig+0x108>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d007      	beq.n	800f82c <TIM_OC2_SetConfig+0xb0>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a1a      	ldr	r2, [pc, #104]	; (800f888 <TIM_OC2_SetConfig+0x10c>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d003      	beq.n	800f82c <TIM_OC2_SetConfig+0xb0>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a19      	ldr	r2, [pc, #100]	; (800f88c <TIM_OC2_SetConfig+0x110>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d113      	bne.n	800f854 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f83a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	693a      	ldr	r2, [r7, #16]
 800f844:	4313      	orrs	r3, r2
 800f846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	699b      	ldr	r3, [r3, #24]
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	4313      	orrs	r3, r2
 800f852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	693a      	ldr	r2, [r7, #16]
 800f858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	68fa      	ldr	r2, [r7, #12]
 800f85e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	685a      	ldr	r2, [r3, #4]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	621a      	str	r2, [r3, #32]
}
 800f86e:	bf00      	nop
 800f870:	371c      	adds	r7, #28
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	40012c00 	.word	0x40012c00
 800f880:	40013400 	.word	0x40013400
 800f884:	40014000 	.word	0x40014000
 800f888:	40014400 	.word	0x40014400
 800f88c:	40014800 	.word	0x40014800

0800f890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f890:	b480      	push	{r7}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f023 0303 	bic.w	r3, r3, #3
 800f8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	021b      	lsls	r3, r3, #8
 800f8e4:	697a      	ldr	r2, [r7, #20]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4a27      	ldr	r2, [pc, #156]	; (800f98c <TIM_OC3_SetConfig+0xfc>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d003      	beq.n	800f8fa <TIM_OC3_SetConfig+0x6a>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4a26      	ldr	r2, [pc, #152]	; (800f990 <TIM_OC3_SetConfig+0x100>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d10d      	bne.n	800f916 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	021b      	lsls	r3, r3, #8
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a1c      	ldr	r2, [pc, #112]	; (800f98c <TIM_OC3_SetConfig+0xfc>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00f      	beq.n	800f93e <TIM_OC3_SetConfig+0xae>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a1b      	ldr	r2, [pc, #108]	; (800f990 <TIM_OC3_SetConfig+0x100>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d00b      	beq.n	800f93e <TIM_OC3_SetConfig+0xae>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a1a      	ldr	r2, [pc, #104]	; (800f994 <TIM_OC3_SetConfig+0x104>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d007      	beq.n	800f93e <TIM_OC3_SetConfig+0xae>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a19      	ldr	r2, [pc, #100]	; (800f998 <TIM_OC3_SetConfig+0x108>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d003      	beq.n	800f93e <TIM_OC3_SetConfig+0xae>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a18      	ldr	r2, [pc, #96]	; (800f99c <TIM_OC3_SetConfig+0x10c>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d113      	bne.n	800f966 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f94c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	011b      	lsls	r3, r3, #4
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	4313      	orrs	r3, r2
 800f958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	699b      	ldr	r3, [r3, #24]
 800f95e:	011b      	lsls	r3, r3, #4
 800f960:	693a      	ldr	r2, [r7, #16]
 800f962:	4313      	orrs	r3, r2
 800f964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	693a      	ldr	r2, [r7, #16]
 800f96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	697a      	ldr	r2, [r7, #20]
 800f97e:	621a      	str	r2, [r3, #32]
}
 800f980:	bf00      	nop
 800f982:	371c      	adds	r7, #28
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	40012c00 	.word	0x40012c00
 800f990:	40013400 	.word	0x40013400
 800f994:	40014000 	.word	0x40014000
 800f998:	40014400 	.word	0x40014400
 800f99c:	40014800 	.word	0x40014800

0800f9a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	69db      	ldr	r3, [r3, #28]
 800f9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	021b      	lsls	r3, r3, #8
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	031b      	lsls	r3, r3, #12
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4a18      	ldr	r2, [pc, #96]	; (800fa60 <TIM_OC4_SetConfig+0xc0>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d00f      	beq.n	800fa24 <TIM_OC4_SetConfig+0x84>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	4a17      	ldr	r2, [pc, #92]	; (800fa64 <TIM_OC4_SetConfig+0xc4>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d00b      	beq.n	800fa24 <TIM_OC4_SetConfig+0x84>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a16      	ldr	r2, [pc, #88]	; (800fa68 <TIM_OC4_SetConfig+0xc8>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d007      	beq.n	800fa24 <TIM_OC4_SetConfig+0x84>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a15      	ldr	r2, [pc, #84]	; (800fa6c <TIM_OC4_SetConfig+0xcc>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d003      	beq.n	800fa24 <TIM_OC4_SetConfig+0x84>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4a14      	ldr	r2, [pc, #80]	; (800fa70 <TIM_OC4_SetConfig+0xd0>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d109      	bne.n	800fa38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	695b      	ldr	r3, [r3, #20]
 800fa30:	019b      	lsls	r3, r3, #6
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	685a      	ldr	r2, [r3, #4]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	693a      	ldr	r2, [r7, #16]
 800fa50:	621a      	str	r2, [r3, #32]
}
 800fa52:	bf00      	nop
 800fa54:	371c      	adds	r7, #28
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	40012c00 	.word	0x40012c00
 800fa64:	40013400 	.word	0x40013400
 800fa68:	40014000 	.word	0x40014000
 800fa6c:	40014400 	.word	0x40014400
 800fa70:	40014800 	.word	0x40014800

0800fa74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b087      	sub	sp, #28
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6a1b      	ldr	r3, [r3, #32]
 800fa82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800faa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4313      	orrs	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	041b      	lsls	r3, r3, #16
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	4313      	orrs	r3, r2
 800fac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a17      	ldr	r2, [pc, #92]	; (800fb28 <TIM_OC5_SetConfig+0xb4>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d00f      	beq.n	800faee <TIM_OC5_SetConfig+0x7a>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a16      	ldr	r2, [pc, #88]	; (800fb2c <TIM_OC5_SetConfig+0xb8>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d00b      	beq.n	800faee <TIM_OC5_SetConfig+0x7a>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a15      	ldr	r2, [pc, #84]	; (800fb30 <TIM_OC5_SetConfig+0xbc>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d007      	beq.n	800faee <TIM_OC5_SetConfig+0x7a>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a14      	ldr	r2, [pc, #80]	; (800fb34 <TIM_OC5_SetConfig+0xc0>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d003      	beq.n	800faee <TIM_OC5_SetConfig+0x7a>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a13      	ldr	r2, [pc, #76]	; (800fb38 <TIM_OC5_SetConfig+0xc4>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d109      	bne.n	800fb02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800faf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	695b      	ldr	r3, [r3, #20]
 800fafa:	021b      	lsls	r3, r3, #8
 800fafc:	697a      	ldr	r2, [r7, #20]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	68fa      	ldr	r2, [r7, #12]
 800fb0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	621a      	str	r2, [r3, #32]
}
 800fb1c:	bf00      	nop
 800fb1e:	371c      	adds	r7, #28
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	40012c00 	.word	0x40012c00
 800fb2c:	40013400 	.word	0x40013400
 800fb30:	40014000 	.word	0x40014000
 800fb34:	40014400 	.word	0x40014400
 800fb38:	40014800 	.word	0x40014800

0800fb3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a1b      	ldr	r3, [r3, #32]
 800fb4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a1b      	ldr	r3, [r3, #32]
 800fb56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	021b      	lsls	r3, r3, #8
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	051b      	lsls	r3, r3, #20
 800fb8a:	693a      	ldr	r2, [r7, #16]
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4a18      	ldr	r2, [pc, #96]	; (800fbf4 <TIM_OC6_SetConfig+0xb8>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d00f      	beq.n	800fbb8 <TIM_OC6_SetConfig+0x7c>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	4a17      	ldr	r2, [pc, #92]	; (800fbf8 <TIM_OC6_SetConfig+0xbc>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d00b      	beq.n	800fbb8 <TIM_OC6_SetConfig+0x7c>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4a16      	ldr	r2, [pc, #88]	; (800fbfc <TIM_OC6_SetConfig+0xc0>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d007      	beq.n	800fbb8 <TIM_OC6_SetConfig+0x7c>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a15      	ldr	r2, [pc, #84]	; (800fc00 <TIM_OC6_SetConfig+0xc4>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d003      	beq.n	800fbb8 <TIM_OC6_SetConfig+0x7c>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a14      	ldr	r2, [pc, #80]	; (800fc04 <TIM_OC6_SetConfig+0xc8>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d109      	bne.n	800fbcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fbbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	029b      	lsls	r3, r3, #10
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	697a      	ldr	r2, [r7, #20]
 800fbd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	693a      	ldr	r2, [r7, #16]
 800fbe4:	621a      	str	r2, [r3, #32]
}
 800fbe6:	bf00      	nop
 800fbe8:	371c      	adds	r7, #28
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	40012c00 	.word	0x40012c00
 800fbf8:	40013400 	.word	0x40013400
 800fbfc:	40014000 	.word	0x40014000
 800fc00:	40014400 	.word	0x40014400
 800fc04:	40014800 	.word	0x40014800

0800fc08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	f003 031f 	and.w	r3, r3, #31
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6a1a      	ldr	r2, [r3, #32]
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	43db      	mvns	r3, r3
 800fc2a:	401a      	ands	r2, r3
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6a1a      	ldr	r2, [r3, #32]
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	f003 031f 	and.w	r3, r3, #31
 800fc3a:	6879      	ldr	r1, [r7, #4]
 800fc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800fc40:	431a      	orrs	r2, r3
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	621a      	str	r2, [r3, #32]
}
 800fc46:	bf00      	nop
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
	...

0800fc54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d101      	bne.n	800fc6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc68:	2302      	movs	r3, #2
 800fc6a:	e068      	b.n	800fd3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2202      	movs	r2, #2
 800fc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a2e      	ldr	r2, [pc, #184]	; (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d004      	beq.n	800fca0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a2d      	ldr	r2, [pc, #180]	; (800fd50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d108      	bne.n	800fcb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fca6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a1e      	ldr	r2, [pc, #120]	; (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d01d      	beq.n	800fd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcde:	d018      	beq.n	800fd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4a1b      	ldr	r2, [pc, #108]	; (800fd54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d013      	beq.n	800fd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4a1a      	ldr	r2, [pc, #104]	; (800fd58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d00e      	beq.n	800fd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a18      	ldr	r2, [pc, #96]	; (800fd5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d009      	beq.n	800fd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4a13      	ldr	r2, [pc, #76]	; (800fd50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d004      	beq.n	800fd12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a14      	ldr	r2, [pc, #80]	; (800fd60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d10c      	bne.n	800fd2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	4313      	orrs	r3, r2
 800fd22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd3c:	2300      	movs	r3, #0
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	40012c00 	.word	0x40012c00
 800fd50:	40013400 	.word	0x40013400
 800fd54:	40000400 	.word	0x40000400
 800fd58:	40000800 	.word	0x40000800
 800fd5c:	40000c00 	.word	0x40000c00
 800fd60:	40014000 	.word	0x40014000

0800fd64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd80:	bf00      	nop
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd94:	bf00      	nop
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d101      	bne.n	800fdb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	e040      	b.n	800fe34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d106      	bne.n	800fdc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7f7 faa0 	bl	8007308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2224      	movs	r2, #36	; 0x24
 800fdcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f022 0201 	bic.w	r2, r2, #1
 800fddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fae2 	bl	80103a8 <UART_SetConfig>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d101      	bne.n	800fdee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fdea:	2301      	movs	r3, #1
 800fdec:	e022      	b.n	800fe34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 fd60 	bl	80108bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	689a      	ldr	r2, [r3, #8]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f042 0201 	orr.w	r2, r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fde7 	bl	8010a00 <UART_CheckIdleState>
 800fe32:	4603      	mov	r3, r0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08a      	sub	sp, #40	; 0x28
 800fe40:	af02      	add	r7, sp, #8
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	603b      	str	r3, [r7, #0]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe50:	2b20      	cmp	r3, #32
 800fe52:	f040 8082 	bne.w	800ff5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <HAL_UART_Transmit+0x26>
 800fe5c:	88fb      	ldrh	r3, [r7, #6]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d101      	bne.n	800fe66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fe62:	2301      	movs	r3, #1
 800fe64:	e07a      	b.n	800ff5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d101      	bne.n	800fe74 <HAL_UART_Transmit+0x38>
 800fe70:	2302      	movs	r3, #2
 800fe72:	e073      	b.n	800ff5c <HAL_UART_Transmit+0x120>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2221      	movs	r2, #33	; 0x21
 800fe88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe8a:	f7f7 fec3 	bl	8007c14 <HAL_GetTick>
 800fe8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	88fa      	ldrh	r2, [r7, #6]
 800fe94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	88fa      	ldrh	r2, [r7, #6]
 800fe9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fea8:	d108      	bne.n	800febc <HAL_UART_Transmit+0x80>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d104      	bne.n	800febc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800feb2:	2300      	movs	r3, #0
 800feb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	61bb      	str	r3, [r7, #24]
 800feba:	e003      	b.n	800fec4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fecc:	e02d      	b.n	800ff2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	2200      	movs	r2, #0
 800fed6:	2180      	movs	r1, #128	; 0x80
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f000 fdda 	bl	8010a92 <UART_WaitOnFlagUntilTimeout>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fee4:	2303      	movs	r3, #3
 800fee6:	e039      	b.n	800ff5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10b      	bne.n	800ff06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	881a      	ldrh	r2, [r3, #0]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fefa:	b292      	uxth	r2, r2
 800fefc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	3302      	adds	r3, #2
 800ff02:	61bb      	str	r3, [r7, #24]
 800ff04:	e008      	b.n	800ff18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	781a      	ldrb	r2, [r3, #0]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	b292      	uxth	r2, r2
 800ff10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	3301      	adds	r3, #1
 800ff16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	3b01      	subs	r3, #1
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1cb      	bne.n	800fece <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	2140      	movs	r1, #64	; 0x40
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f000 fda6 	bl	8010a92 <UART_WaitOnFlagUntilTimeout>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ff4c:	2303      	movs	r3, #3
 800ff4e:	e005      	b.n	800ff5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2220      	movs	r2, #32
 800ff54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	e000      	b.n	800ff5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ff5a:	2302      	movs	r3, #2
  }
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3720      	adds	r7, #32
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b088      	sub	sp, #32
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	69db      	ldr	r3, [r3, #28]
 800ff72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff84:	69fa      	ldr	r2, [r7, #28]
 800ff86:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff8a:	4013      	ands	r3, r2
 800ff8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d113      	bne.n	800ffbc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	f003 0320 	and.w	r3, r3, #32
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00e      	beq.n	800ffbc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	f003 0320 	and.w	r3, r3, #32
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 81ce 	beq.w	801034e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	4798      	blx	r3
      }
      return;
 800ffba:	e1c8      	b.n	801034e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f000 80e3 	beq.w	801018a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d105      	bne.n	800ffda <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ffce:	69ba      	ldr	r2, [r7, #24]
 800ffd0:	4ba6      	ldr	r3, [pc, #664]	; (801026c <HAL_UART_IRQHandler+0x308>)
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 80d8 	beq.w	801018a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d010      	beq.n	8010006 <HAL_UART_IRQHandler+0xa2>
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00b      	beq.n	8010006 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2201      	movs	r2, #1
 800fff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fffc:	f043 0201 	orr.w	r2, r3, #1
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	f003 0302 	and.w	r3, r3, #2
 801000c:	2b00      	cmp	r3, #0
 801000e:	d010      	beq.n	8010032 <HAL_UART_IRQHandler+0xce>
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00b      	beq.n	8010032 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2202      	movs	r2, #2
 8010020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010028:	f043 0204 	orr.w	r2, r3, #4
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	f003 0304 	and.w	r3, r3, #4
 8010038:	2b00      	cmp	r3, #0
 801003a:	d010      	beq.n	801005e <HAL_UART_IRQHandler+0xfa>
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	d00b      	beq.n	801005e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2204      	movs	r2, #4
 801004c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010054:	f043 0202 	orr.w	r2, r3, #2
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	f003 0308 	and.w	r3, r3, #8
 8010064:	2b00      	cmp	r3, #0
 8010066:	d015      	beq.n	8010094 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b00      	cmp	r3, #0
 8010070:	d104      	bne.n	801007c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00b      	beq.n	8010094 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2208      	movs	r2, #8
 8010082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801008a:	f043 0208 	orr.w	r2, r3, #8
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801009a:	2b00      	cmp	r3, #0
 801009c:	d011      	beq.n	80100c2 <HAL_UART_IRQHandler+0x15e>
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00c      	beq.n	80100c2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b8:	f043 0220 	orr.w	r2, r3, #32
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f000 8142 	beq.w	8010352 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	f003 0320 	and.w	r3, r3, #32
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00c      	beq.n	80100f2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	f003 0320 	and.w	r3, r3, #32
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d007      	beq.n	80100f2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d003      	beq.n	80100f2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010104:	2b40      	cmp	r3, #64	; 0x40
 8010106:	d004      	beq.n	8010112 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801010e:	2b00      	cmp	r3, #0
 8010110:	d031      	beq.n	8010176 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fd39 	bl	8010b8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010122:	2b40      	cmp	r3, #64	; 0x40
 8010124:	d123      	bne.n	801016e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	689a      	ldr	r2, [r3, #8]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010134:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801013a:	2b00      	cmp	r3, #0
 801013c:	d013      	beq.n	8010166 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010142:	4a4b      	ldr	r2, [pc, #300]	; (8010270 <HAL_UART_IRQHandler+0x30c>)
 8010144:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801014a:	4618      	mov	r0, r3
 801014c:	f7f9 fd8e 	bl	8009c6c <HAL_DMA_Abort_IT>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d017      	beq.n	8010186 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801015a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010160:	4610      	mov	r0, r2
 8010162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010164:	e00f      	b.n	8010186 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f908 	bl	801037c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801016c:	e00b      	b.n	8010186 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 f904 	bl	801037c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010174:	e007      	b.n	8010186 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f900 	bl	801037c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8010184:	e0e5      	b.n	8010352 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010186:	bf00      	nop
    return;
 8010188:	e0e3      	b.n	8010352 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801018e:	2b01      	cmp	r3, #1
 8010190:	f040 80a9 	bne.w	80102e6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	f003 0310 	and.w	r3, r3, #16
 801019a:	2b00      	cmp	r3, #0
 801019c:	f000 80a3 	beq.w	80102e6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	f003 0310 	and.w	r3, r3, #16
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 809d 	beq.w	80102e6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2210      	movs	r2, #16
 80101b2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101be:	2b40      	cmp	r3, #64	; 0x40
 80101c0:	d158      	bne.n	8010274 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80101cc:	893b      	ldrh	r3, [r7, #8]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 80c1 	beq.w	8010356 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80101da:	893a      	ldrh	r2, [r7, #8]
 80101dc:	429a      	cmp	r2, r3
 80101de:	f080 80ba 	bcs.w	8010356 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	893a      	ldrh	r2, [r7, #8]
 80101e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f003 0320 	and.w	r3, r3, #32
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d12a      	bne.n	8010250 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010208:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	689a      	ldr	r2, [r3, #8]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f022 0201 	bic.w	r2, r2, #1
 8010218:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689a      	ldr	r2, [r3, #8]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010228:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2220      	movs	r2, #32
 801022e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f022 0210 	bic.w	r2, r2, #16
 8010244:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801024a:	4618      	mov	r0, r3
 801024c:	f7f9 fcd0 	bl	8009bf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801025c:	b29b      	uxth	r3, r3
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	b29b      	uxth	r3, r3
 8010262:	4619      	mov	r1, r3
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f893 	bl	8010390 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801026a:	e074      	b.n	8010356 <HAL_UART_IRQHandler+0x3f2>
 801026c:	04000120 	.word	0x04000120
 8010270:	08010be9 	.word	0x08010be9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010280:	b29b      	uxth	r3, r3
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801028c:	b29b      	uxth	r3, r3
 801028e:	2b00      	cmp	r3, #0
 8010290:	d063      	beq.n	801035a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8010292:	897b      	ldrh	r3, [r7, #10]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d060      	beq.n	801035a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80102a6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	689a      	ldr	r2, [r3, #8]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f022 0201 	bic.w	r2, r2, #1
 80102b6:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2220      	movs	r2, #32
 80102bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f022 0210 	bic.w	r2, r2, #16
 80102d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80102da:	897b      	ldrh	r3, [r7, #10]
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 f856 	bl	8010390 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80102e4:	e039      	b.n	801035a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00d      	beq.n	801030c <HAL_UART_IRQHandler+0x3a8>
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d008      	beq.n	801030c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010302:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fc9e 	bl	8010c46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801030a:	e029      	b.n	8010360 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00d      	beq.n	8010332 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801031c:	2b00      	cmp	r3, #0
 801031e:	d008      	beq.n	8010332 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010324:	2b00      	cmp	r3, #0
 8010326:	d01a      	beq.n	801035e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	4798      	blx	r3
    }
    return;
 8010330:	e015      	b.n	801035e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010338:	2b00      	cmp	r3, #0
 801033a:	d011      	beq.n	8010360 <HAL_UART_IRQHandler+0x3fc>
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00c      	beq.n	8010360 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fc64 	bl	8010c14 <UART_EndTransmit_IT>
    return;
 801034c:	e008      	b.n	8010360 <HAL_UART_IRQHandler+0x3fc>
      return;
 801034e:	bf00      	nop
 8010350:	e006      	b.n	8010360 <HAL_UART_IRQHandler+0x3fc>
    return;
 8010352:	bf00      	nop
 8010354:	e004      	b.n	8010360 <HAL_UART_IRQHandler+0x3fc>
      return;
 8010356:	bf00      	nop
 8010358:	e002      	b.n	8010360 <HAL_UART_IRQHandler+0x3fc>
      return;
 801035a:	bf00      	nop
 801035c:	e000      	b.n	8010360 <HAL_UART_IRQHandler+0x3fc>
    return;
 801035e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8010360:	3720      	adds	r7, #32
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop

08010368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010370:	bf00      	nop
 8010372:	370c      	adds	r7, #12
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr

0801037c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010384:	bf00      	nop
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80103a8:	b5b0      	push	{r4, r5, r7, lr}
 80103aa:	b088      	sub	sp, #32
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	689a      	ldr	r2, [r3, #8]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	691b      	ldr	r3, [r3, #16]
 80103bc:	431a      	orrs	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	695b      	ldr	r3, [r3, #20]
 80103c2:	431a      	orrs	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	69db      	ldr	r3, [r3, #28]
 80103c8:	4313      	orrs	r3, r2
 80103ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	4bad      	ldr	r3, [pc, #692]	; (8010688 <UART_SetConfig+0x2e0>)
 80103d4:	4013      	ands	r3, r2
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	6812      	ldr	r2, [r2, #0]
 80103da:	69f9      	ldr	r1, [r7, #28]
 80103dc:	430b      	orrs	r3, r1
 80103de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68da      	ldr	r2, [r3, #12]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	430a      	orrs	r2, r1
 80103f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4aa2      	ldr	r2, [pc, #648]	; (801068c <UART_SetConfig+0x2e4>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d004      	beq.n	8010410 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6a1b      	ldr	r3, [r3, #32]
 801040a:	69fa      	ldr	r2, [r7, #28]
 801040c:	4313      	orrs	r3, r2
 801040e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	69fa      	ldr	r2, [r7, #28]
 8010420:	430a      	orrs	r2, r1
 8010422:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a99      	ldr	r2, [pc, #612]	; (8010690 <UART_SetConfig+0x2e8>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d121      	bne.n	8010472 <UART_SetConfig+0xca>
 801042e:	4b99      	ldr	r3, [pc, #612]	; (8010694 <UART_SetConfig+0x2ec>)
 8010430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010434:	f003 0303 	and.w	r3, r3, #3
 8010438:	2b03      	cmp	r3, #3
 801043a:	d817      	bhi.n	801046c <UART_SetConfig+0xc4>
 801043c:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <UART_SetConfig+0x9c>)
 801043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010442:	bf00      	nop
 8010444:	08010455 	.word	0x08010455
 8010448:	08010461 	.word	0x08010461
 801044c:	0801045b 	.word	0x0801045b
 8010450:	08010467 	.word	0x08010467
 8010454:	2301      	movs	r3, #1
 8010456:	76fb      	strb	r3, [r7, #27]
 8010458:	e0e7      	b.n	801062a <UART_SetConfig+0x282>
 801045a:	2302      	movs	r3, #2
 801045c:	76fb      	strb	r3, [r7, #27]
 801045e:	e0e4      	b.n	801062a <UART_SetConfig+0x282>
 8010460:	2304      	movs	r3, #4
 8010462:	76fb      	strb	r3, [r7, #27]
 8010464:	e0e1      	b.n	801062a <UART_SetConfig+0x282>
 8010466:	2308      	movs	r3, #8
 8010468:	76fb      	strb	r3, [r7, #27]
 801046a:	e0de      	b.n	801062a <UART_SetConfig+0x282>
 801046c:	2310      	movs	r3, #16
 801046e:	76fb      	strb	r3, [r7, #27]
 8010470:	e0db      	b.n	801062a <UART_SetConfig+0x282>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4a88      	ldr	r2, [pc, #544]	; (8010698 <UART_SetConfig+0x2f0>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d132      	bne.n	80104e2 <UART_SetConfig+0x13a>
 801047c:	4b85      	ldr	r3, [pc, #532]	; (8010694 <UART_SetConfig+0x2ec>)
 801047e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010482:	f003 030c 	and.w	r3, r3, #12
 8010486:	2b0c      	cmp	r3, #12
 8010488:	d828      	bhi.n	80104dc <UART_SetConfig+0x134>
 801048a:	a201      	add	r2, pc, #4	; (adr r2, 8010490 <UART_SetConfig+0xe8>)
 801048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010490:	080104c5 	.word	0x080104c5
 8010494:	080104dd 	.word	0x080104dd
 8010498:	080104dd 	.word	0x080104dd
 801049c:	080104dd 	.word	0x080104dd
 80104a0:	080104d1 	.word	0x080104d1
 80104a4:	080104dd 	.word	0x080104dd
 80104a8:	080104dd 	.word	0x080104dd
 80104ac:	080104dd 	.word	0x080104dd
 80104b0:	080104cb 	.word	0x080104cb
 80104b4:	080104dd 	.word	0x080104dd
 80104b8:	080104dd 	.word	0x080104dd
 80104bc:	080104dd 	.word	0x080104dd
 80104c0:	080104d7 	.word	0x080104d7
 80104c4:	2300      	movs	r3, #0
 80104c6:	76fb      	strb	r3, [r7, #27]
 80104c8:	e0af      	b.n	801062a <UART_SetConfig+0x282>
 80104ca:	2302      	movs	r3, #2
 80104cc:	76fb      	strb	r3, [r7, #27]
 80104ce:	e0ac      	b.n	801062a <UART_SetConfig+0x282>
 80104d0:	2304      	movs	r3, #4
 80104d2:	76fb      	strb	r3, [r7, #27]
 80104d4:	e0a9      	b.n	801062a <UART_SetConfig+0x282>
 80104d6:	2308      	movs	r3, #8
 80104d8:	76fb      	strb	r3, [r7, #27]
 80104da:	e0a6      	b.n	801062a <UART_SetConfig+0x282>
 80104dc:	2310      	movs	r3, #16
 80104de:	76fb      	strb	r3, [r7, #27]
 80104e0:	e0a3      	b.n	801062a <UART_SetConfig+0x282>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a6d      	ldr	r2, [pc, #436]	; (801069c <UART_SetConfig+0x2f4>)
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d120      	bne.n	801052e <UART_SetConfig+0x186>
 80104ec:	4b69      	ldr	r3, [pc, #420]	; (8010694 <UART_SetConfig+0x2ec>)
 80104ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80104f6:	2b30      	cmp	r3, #48	; 0x30
 80104f8:	d013      	beq.n	8010522 <UART_SetConfig+0x17a>
 80104fa:	2b30      	cmp	r3, #48	; 0x30
 80104fc:	d814      	bhi.n	8010528 <UART_SetConfig+0x180>
 80104fe:	2b20      	cmp	r3, #32
 8010500:	d009      	beq.n	8010516 <UART_SetConfig+0x16e>
 8010502:	2b20      	cmp	r3, #32
 8010504:	d810      	bhi.n	8010528 <UART_SetConfig+0x180>
 8010506:	2b00      	cmp	r3, #0
 8010508:	d002      	beq.n	8010510 <UART_SetConfig+0x168>
 801050a:	2b10      	cmp	r3, #16
 801050c:	d006      	beq.n	801051c <UART_SetConfig+0x174>
 801050e:	e00b      	b.n	8010528 <UART_SetConfig+0x180>
 8010510:	2300      	movs	r3, #0
 8010512:	76fb      	strb	r3, [r7, #27]
 8010514:	e089      	b.n	801062a <UART_SetConfig+0x282>
 8010516:	2302      	movs	r3, #2
 8010518:	76fb      	strb	r3, [r7, #27]
 801051a:	e086      	b.n	801062a <UART_SetConfig+0x282>
 801051c:	2304      	movs	r3, #4
 801051e:	76fb      	strb	r3, [r7, #27]
 8010520:	e083      	b.n	801062a <UART_SetConfig+0x282>
 8010522:	2308      	movs	r3, #8
 8010524:	76fb      	strb	r3, [r7, #27]
 8010526:	e080      	b.n	801062a <UART_SetConfig+0x282>
 8010528:	2310      	movs	r3, #16
 801052a:	76fb      	strb	r3, [r7, #27]
 801052c:	e07d      	b.n	801062a <UART_SetConfig+0x282>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a5b      	ldr	r2, [pc, #364]	; (80106a0 <UART_SetConfig+0x2f8>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d120      	bne.n	801057a <UART_SetConfig+0x1d2>
 8010538:	4b56      	ldr	r3, [pc, #344]	; (8010694 <UART_SetConfig+0x2ec>)
 801053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801053e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010542:	2bc0      	cmp	r3, #192	; 0xc0
 8010544:	d013      	beq.n	801056e <UART_SetConfig+0x1c6>
 8010546:	2bc0      	cmp	r3, #192	; 0xc0
 8010548:	d814      	bhi.n	8010574 <UART_SetConfig+0x1cc>
 801054a:	2b80      	cmp	r3, #128	; 0x80
 801054c:	d009      	beq.n	8010562 <UART_SetConfig+0x1ba>
 801054e:	2b80      	cmp	r3, #128	; 0x80
 8010550:	d810      	bhi.n	8010574 <UART_SetConfig+0x1cc>
 8010552:	2b00      	cmp	r3, #0
 8010554:	d002      	beq.n	801055c <UART_SetConfig+0x1b4>
 8010556:	2b40      	cmp	r3, #64	; 0x40
 8010558:	d006      	beq.n	8010568 <UART_SetConfig+0x1c0>
 801055a:	e00b      	b.n	8010574 <UART_SetConfig+0x1cc>
 801055c:	2300      	movs	r3, #0
 801055e:	76fb      	strb	r3, [r7, #27]
 8010560:	e063      	b.n	801062a <UART_SetConfig+0x282>
 8010562:	2302      	movs	r3, #2
 8010564:	76fb      	strb	r3, [r7, #27]
 8010566:	e060      	b.n	801062a <UART_SetConfig+0x282>
 8010568:	2304      	movs	r3, #4
 801056a:	76fb      	strb	r3, [r7, #27]
 801056c:	e05d      	b.n	801062a <UART_SetConfig+0x282>
 801056e:	2308      	movs	r3, #8
 8010570:	76fb      	strb	r3, [r7, #27]
 8010572:	e05a      	b.n	801062a <UART_SetConfig+0x282>
 8010574:	2310      	movs	r3, #16
 8010576:	76fb      	strb	r3, [r7, #27]
 8010578:	e057      	b.n	801062a <UART_SetConfig+0x282>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a49      	ldr	r2, [pc, #292]	; (80106a4 <UART_SetConfig+0x2fc>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d125      	bne.n	80105d0 <UART_SetConfig+0x228>
 8010584:	4b43      	ldr	r3, [pc, #268]	; (8010694 <UART_SetConfig+0x2ec>)
 8010586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801058a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801058e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010592:	d017      	beq.n	80105c4 <UART_SetConfig+0x21c>
 8010594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010598:	d817      	bhi.n	80105ca <UART_SetConfig+0x222>
 801059a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801059e:	d00b      	beq.n	80105b8 <UART_SetConfig+0x210>
 80105a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105a4:	d811      	bhi.n	80105ca <UART_SetConfig+0x222>
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d003      	beq.n	80105b2 <UART_SetConfig+0x20a>
 80105aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105ae:	d006      	beq.n	80105be <UART_SetConfig+0x216>
 80105b0:	e00b      	b.n	80105ca <UART_SetConfig+0x222>
 80105b2:	2300      	movs	r3, #0
 80105b4:	76fb      	strb	r3, [r7, #27]
 80105b6:	e038      	b.n	801062a <UART_SetConfig+0x282>
 80105b8:	2302      	movs	r3, #2
 80105ba:	76fb      	strb	r3, [r7, #27]
 80105bc:	e035      	b.n	801062a <UART_SetConfig+0x282>
 80105be:	2304      	movs	r3, #4
 80105c0:	76fb      	strb	r3, [r7, #27]
 80105c2:	e032      	b.n	801062a <UART_SetConfig+0x282>
 80105c4:	2308      	movs	r3, #8
 80105c6:	76fb      	strb	r3, [r7, #27]
 80105c8:	e02f      	b.n	801062a <UART_SetConfig+0x282>
 80105ca:	2310      	movs	r3, #16
 80105cc:	76fb      	strb	r3, [r7, #27]
 80105ce:	e02c      	b.n	801062a <UART_SetConfig+0x282>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a2d      	ldr	r2, [pc, #180]	; (801068c <UART_SetConfig+0x2e4>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d125      	bne.n	8010626 <UART_SetConfig+0x27e>
 80105da:	4b2e      	ldr	r3, [pc, #184]	; (8010694 <UART_SetConfig+0x2ec>)
 80105dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80105e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80105e8:	d017      	beq.n	801061a <UART_SetConfig+0x272>
 80105ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80105ee:	d817      	bhi.n	8010620 <UART_SetConfig+0x278>
 80105f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105f4:	d00b      	beq.n	801060e <UART_SetConfig+0x266>
 80105f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105fa:	d811      	bhi.n	8010620 <UART_SetConfig+0x278>
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d003      	beq.n	8010608 <UART_SetConfig+0x260>
 8010600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010604:	d006      	beq.n	8010614 <UART_SetConfig+0x26c>
 8010606:	e00b      	b.n	8010620 <UART_SetConfig+0x278>
 8010608:	2300      	movs	r3, #0
 801060a:	76fb      	strb	r3, [r7, #27]
 801060c:	e00d      	b.n	801062a <UART_SetConfig+0x282>
 801060e:	2302      	movs	r3, #2
 8010610:	76fb      	strb	r3, [r7, #27]
 8010612:	e00a      	b.n	801062a <UART_SetConfig+0x282>
 8010614:	2304      	movs	r3, #4
 8010616:	76fb      	strb	r3, [r7, #27]
 8010618:	e007      	b.n	801062a <UART_SetConfig+0x282>
 801061a:	2308      	movs	r3, #8
 801061c:	76fb      	strb	r3, [r7, #27]
 801061e:	e004      	b.n	801062a <UART_SetConfig+0x282>
 8010620:	2310      	movs	r3, #16
 8010622:	76fb      	strb	r3, [r7, #27]
 8010624:	e001      	b.n	801062a <UART_SetConfig+0x282>
 8010626:	2310      	movs	r3, #16
 8010628:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a17      	ldr	r2, [pc, #92]	; (801068c <UART_SetConfig+0x2e4>)
 8010630:	4293      	cmp	r3, r2
 8010632:	f040 8087 	bne.w	8010744 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010636:	7efb      	ldrb	r3, [r7, #27]
 8010638:	2b08      	cmp	r3, #8
 801063a:	d837      	bhi.n	80106ac <UART_SetConfig+0x304>
 801063c:	a201      	add	r2, pc, #4	; (adr r2, 8010644 <UART_SetConfig+0x29c>)
 801063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010642:	bf00      	nop
 8010644:	08010669 	.word	0x08010669
 8010648:	080106ad 	.word	0x080106ad
 801064c:	08010671 	.word	0x08010671
 8010650:	080106ad 	.word	0x080106ad
 8010654:	08010677 	.word	0x08010677
 8010658:	080106ad 	.word	0x080106ad
 801065c:	080106ad 	.word	0x080106ad
 8010660:	080106ad 	.word	0x080106ad
 8010664:	0801067f 	.word	0x0801067f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010668:	f7fc f9e6 	bl	800ca38 <HAL_RCC_GetPCLK1Freq>
 801066c:	6178      	str	r0, [r7, #20]
        break;
 801066e:	e022      	b.n	80106b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010670:	4b0d      	ldr	r3, [pc, #52]	; (80106a8 <UART_SetConfig+0x300>)
 8010672:	617b      	str	r3, [r7, #20]
        break;
 8010674:	e01f      	b.n	80106b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010676:	f7fc f947 	bl	800c908 <HAL_RCC_GetSysClockFreq>
 801067a:	6178      	str	r0, [r7, #20]
        break;
 801067c:	e01b      	b.n	80106b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801067e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010682:	617b      	str	r3, [r7, #20]
        break;
 8010684:	e017      	b.n	80106b6 <UART_SetConfig+0x30e>
 8010686:	bf00      	nop
 8010688:	efff69f3 	.word	0xefff69f3
 801068c:	40008000 	.word	0x40008000
 8010690:	40013800 	.word	0x40013800
 8010694:	40021000 	.word	0x40021000
 8010698:	40004400 	.word	0x40004400
 801069c:	40004800 	.word	0x40004800
 80106a0:	40004c00 	.word	0x40004c00
 80106a4:	40005000 	.word	0x40005000
 80106a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80106ac:	2300      	movs	r3, #0
 80106ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80106b0:	2301      	movs	r3, #1
 80106b2:	76bb      	strb	r3, [r7, #26]
        break;
 80106b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 80f1 	beq.w	80108a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	685a      	ldr	r2, [r3, #4]
 80106c2:	4613      	mov	r3, r2
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	4413      	add	r3, r2
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d305      	bcc.n	80106da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80106d4:	697a      	ldr	r2, [r7, #20]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d902      	bls.n	80106e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	76bb      	strb	r3, [r7, #26]
 80106de:	e0df      	b.n	80108a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	4618      	mov	r0, r3
 80106e4:	f04f 0100 	mov.w	r1, #0
 80106e8:	f04f 0200 	mov.w	r2, #0
 80106ec:	f04f 0300 	mov.w	r3, #0
 80106f0:	020b      	lsls	r3, r1, #8
 80106f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80106f6:	0202      	lsls	r2, r0, #8
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	6849      	ldr	r1, [r1, #4]
 80106fc:	0849      	lsrs	r1, r1, #1
 80106fe:	4608      	mov	r0, r1
 8010700:	f04f 0100 	mov.w	r1, #0
 8010704:	1814      	adds	r4, r2, r0
 8010706:	eb43 0501 	adc.w	r5, r3, r1
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	461a      	mov	r2, r3
 8010710:	f04f 0300 	mov.w	r3, #0
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7f0 fb16 	bl	8000d48 <__aeabi_uldivmod>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	4613      	mov	r3, r2
 8010722:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801072a:	d308      	bcc.n	801073e <UART_SetConfig+0x396>
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010732:	d204      	bcs.n	801073e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	693a      	ldr	r2, [r7, #16]
 801073a:	60da      	str	r2, [r3, #12]
 801073c:	e0b0      	b.n	80108a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	76bb      	strb	r3, [r7, #26]
 8010742:	e0ad      	b.n	80108a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	69db      	ldr	r3, [r3, #28]
 8010748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801074c:	d15c      	bne.n	8010808 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801074e:	7efb      	ldrb	r3, [r7, #27]
 8010750:	2b08      	cmp	r3, #8
 8010752:	d828      	bhi.n	80107a6 <UART_SetConfig+0x3fe>
 8010754:	a201      	add	r2, pc, #4	; (adr r2, 801075c <UART_SetConfig+0x3b4>)
 8010756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075a:	bf00      	nop
 801075c:	08010781 	.word	0x08010781
 8010760:	08010789 	.word	0x08010789
 8010764:	08010791 	.word	0x08010791
 8010768:	080107a7 	.word	0x080107a7
 801076c:	08010797 	.word	0x08010797
 8010770:	080107a7 	.word	0x080107a7
 8010774:	080107a7 	.word	0x080107a7
 8010778:	080107a7 	.word	0x080107a7
 801077c:	0801079f 	.word	0x0801079f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010780:	f7fc f95a 	bl	800ca38 <HAL_RCC_GetPCLK1Freq>
 8010784:	6178      	str	r0, [r7, #20]
        break;
 8010786:	e013      	b.n	80107b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010788:	f7fc f96c 	bl	800ca64 <HAL_RCC_GetPCLK2Freq>
 801078c:	6178      	str	r0, [r7, #20]
        break;
 801078e:	e00f      	b.n	80107b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010790:	4b49      	ldr	r3, [pc, #292]	; (80108b8 <UART_SetConfig+0x510>)
 8010792:	617b      	str	r3, [r7, #20]
        break;
 8010794:	e00c      	b.n	80107b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010796:	f7fc f8b7 	bl	800c908 <HAL_RCC_GetSysClockFreq>
 801079a:	6178      	str	r0, [r7, #20]
        break;
 801079c:	e008      	b.n	80107b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801079e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107a2:	617b      	str	r3, [r7, #20]
        break;
 80107a4:	e004      	b.n	80107b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80107aa:	2301      	movs	r3, #1
 80107ac:	76bb      	strb	r3, [r7, #26]
        break;
 80107ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d074      	beq.n	80108a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	005a      	lsls	r2, r3, #1
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	085b      	lsrs	r3, r3, #1
 80107c0:	441a      	add	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	2b0f      	cmp	r3, #15
 80107d2:	d916      	bls.n	8010802 <UART_SetConfig+0x45a>
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107da:	d212      	bcs.n	8010802 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	f023 030f 	bic.w	r3, r3, #15
 80107e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	085b      	lsrs	r3, r3, #1
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	f003 0307 	and.w	r3, r3, #7
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	89fb      	ldrh	r3, [r7, #14]
 80107f4:	4313      	orrs	r3, r2
 80107f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	89fa      	ldrh	r2, [r7, #14]
 80107fe:	60da      	str	r2, [r3, #12]
 8010800:	e04e      	b.n	80108a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8010802:	2301      	movs	r3, #1
 8010804:	76bb      	strb	r3, [r7, #26]
 8010806:	e04b      	b.n	80108a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010808:	7efb      	ldrb	r3, [r7, #27]
 801080a:	2b08      	cmp	r3, #8
 801080c:	d827      	bhi.n	801085e <UART_SetConfig+0x4b6>
 801080e:	a201      	add	r2, pc, #4	; (adr r2, 8010814 <UART_SetConfig+0x46c>)
 8010810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010814:	08010839 	.word	0x08010839
 8010818:	08010841 	.word	0x08010841
 801081c:	08010849 	.word	0x08010849
 8010820:	0801085f 	.word	0x0801085f
 8010824:	0801084f 	.word	0x0801084f
 8010828:	0801085f 	.word	0x0801085f
 801082c:	0801085f 	.word	0x0801085f
 8010830:	0801085f 	.word	0x0801085f
 8010834:	08010857 	.word	0x08010857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010838:	f7fc f8fe 	bl	800ca38 <HAL_RCC_GetPCLK1Freq>
 801083c:	6178      	str	r0, [r7, #20]
        break;
 801083e:	e013      	b.n	8010868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010840:	f7fc f910 	bl	800ca64 <HAL_RCC_GetPCLK2Freq>
 8010844:	6178      	str	r0, [r7, #20]
        break;
 8010846:	e00f      	b.n	8010868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010848:	4b1b      	ldr	r3, [pc, #108]	; (80108b8 <UART_SetConfig+0x510>)
 801084a:	617b      	str	r3, [r7, #20]
        break;
 801084c:	e00c      	b.n	8010868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801084e:	f7fc f85b 	bl	800c908 <HAL_RCC_GetSysClockFreq>
 8010852:	6178      	str	r0, [r7, #20]
        break;
 8010854:	e008      	b.n	8010868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801085a:	617b      	str	r3, [r7, #20]
        break;
 801085c:	e004      	b.n	8010868 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801085e:	2300      	movs	r3, #0
 8010860:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8010862:	2301      	movs	r3, #1
 8010864:	76bb      	strb	r3, [r7, #26]
        break;
 8010866:	bf00      	nop
    }

    if (pclk != 0U)
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d018      	beq.n	80108a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	085a      	lsrs	r2, r3, #1
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	441a      	add	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010880:	b29b      	uxth	r3, r3
 8010882:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	2b0f      	cmp	r3, #15
 8010888:	d908      	bls.n	801089c <UART_SetConfig+0x4f4>
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010890:	d204      	bcs.n	801089c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	60da      	str	r2, [r3, #12]
 801089a:	e001      	b.n	80108a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80108ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bdb0      	pop	{r4, r5, r7, pc}
 80108b6:	bf00      	nop
 80108b8:	00f42400 	.word	0x00f42400

080108bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c8:	f003 0301 	and.w	r3, r3, #1
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00a      	beq.n	80108e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	430a      	orrs	r2, r1
 80108e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ea:	f003 0302 	and.w	r3, r3, #2
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00a      	beq.n	8010908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	430a      	orrs	r2, r1
 8010906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801090c:	f003 0304 	and.w	r3, r3, #4
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00a      	beq.n	801092a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	430a      	orrs	r2, r1
 8010928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092e:	f003 0308 	and.w	r3, r3, #8
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00a      	beq.n	801094c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	430a      	orrs	r2, r1
 801094a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010950:	f003 0310 	and.w	r3, r3, #16
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00a      	beq.n	801096e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	430a      	orrs	r2, r1
 801096c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010972:	f003 0320 	and.w	r3, r3, #32
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00a      	beq.n	8010990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	430a      	orrs	r2, r1
 801098e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010998:	2b00      	cmp	r3, #0
 801099a:	d01a      	beq.n	80109d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109ba:	d10a      	bne.n	80109d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	430a      	orrs	r2, r1
 80109d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00a      	beq.n	80109f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	430a      	orrs	r2, r1
 80109f2:	605a      	str	r2, [r3, #4]
  }
}
 80109f4:	bf00      	nop
 80109f6:	370c      	adds	r7, #12
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b086      	sub	sp, #24
 8010a04:	af02      	add	r7, sp, #8
 8010a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a10:	f7f7 f900 	bl	8007c14 <HAL_GetTick>
 8010a14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f003 0308 	and.w	r3, r3, #8
 8010a20:	2b08      	cmp	r3, #8
 8010a22:	d10e      	bne.n	8010a42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 f82d 	bl	8010a92 <UART_WaitOnFlagUntilTimeout>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d001      	beq.n	8010a42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e023      	b.n	8010a8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f003 0304 	and.w	r3, r3, #4
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	d10e      	bne.n	8010a6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f817 	bl	8010a92 <UART_WaitOnFlagUntilTimeout>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d001      	beq.n	8010a6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	e00d      	b.n	8010a8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2220      	movs	r2, #32
 8010a72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2220      	movs	r2, #32
 8010a78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010a88:	2300      	movs	r3, #0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b084      	sub	sp, #16
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	60b9      	str	r1, [r7, #8]
 8010a9c:	603b      	str	r3, [r7, #0]
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010aa2:	e05e      	b.n	8010b62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010aa4:	69bb      	ldr	r3, [r7, #24]
 8010aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aaa:	d05a      	beq.n	8010b62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010aac:	f7f7 f8b2 	bl	8007c14 <HAL_GetTick>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	69ba      	ldr	r2, [r7, #24]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d302      	bcc.n	8010ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d11b      	bne.n	8010afa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010ad0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	689a      	ldr	r2, [r3, #8]
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f022 0201 	bic.w	r2, r2, #1
 8010ae0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2220      	movs	r2, #32
 8010ae6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2220      	movs	r2, #32
 8010aec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010af6:	2303      	movs	r3, #3
 8010af8:	e043      	b.n	8010b82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f003 0304 	and.w	r3, r3, #4
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d02c      	beq.n	8010b62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	69db      	ldr	r3, [r3, #28]
 8010b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b16:	d124      	bne.n	8010b62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b20:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	689a      	ldr	r2, [r3, #8]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f022 0201 	bic.w	r2, r2, #1
 8010b40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2220      	movs	r2, #32
 8010b46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2220      	movs	r2, #32
 8010b4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2220      	movs	r2, #32
 8010b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	e00f      	b.n	8010b82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	69da      	ldr	r2, [r3, #28]
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	4013      	ands	r3, r2
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	bf0c      	ite	eq
 8010b72:	2301      	moveq	r3, #1
 8010b74:	2300      	movne	r3, #0
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	461a      	mov	r2, r3
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d091      	beq.n	8010aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010ba0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	689a      	ldr	r2, [r3, #8]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f022 0201 	bic.w	r2, r2, #1
 8010bb0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d107      	bne.n	8010bca <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f022 0210 	bic.w	r2, r2, #16
 8010bc8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2220      	movs	r2, #32
 8010bce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010bdc:	bf00      	nop
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2200      	movs	r2, #0
 8010c02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f7ff fbb8 	bl	801037c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c0c:	bf00      	nop
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c2a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2200      	movs	r2, #0
 8010c36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff fb95 	bl	8010368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c3e:	bf00      	nop
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c46:	b480      	push	{r7}
 8010c48:	b083      	sub	sp, #12
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	f107 001c 	add.w	r0, r7, #28
 8010c68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f001 f9cf 	bl	801201c <USB_CoreReset>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d106      	bne.n	8010c96 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	639a      	str	r2, [r3, #56]	; 0x38
 8010c94:	e005      	b.n	8010ca2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010cae:	b004      	add	sp, #16
 8010cb0:	4770      	bx	lr
	...

08010cb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b087      	sub	sp, #28
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010cc2:	79fb      	ldrb	r3, [r7, #7]
 8010cc4:	2b02      	cmp	r3, #2
 8010cc6:	d165      	bne.n	8010d94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	4a3e      	ldr	r2, [pc, #248]	; (8010dc4 <USB_SetTurnaroundTime+0x110>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d906      	bls.n	8010cde <USB_SetTurnaroundTime+0x2a>
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	4a3d      	ldr	r2, [pc, #244]	; (8010dc8 <USB_SetTurnaroundTime+0x114>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d202      	bcs.n	8010cde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010cd8:	230f      	movs	r3, #15
 8010cda:	617b      	str	r3, [r7, #20]
 8010cdc:	e05c      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	4a39      	ldr	r2, [pc, #228]	; (8010dc8 <USB_SetTurnaroundTime+0x114>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d306      	bcc.n	8010cf4 <USB_SetTurnaroundTime+0x40>
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	4a38      	ldr	r2, [pc, #224]	; (8010dcc <USB_SetTurnaroundTime+0x118>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d202      	bcs.n	8010cf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010cee:	230e      	movs	r3, #14
 8010cf0:	617b      	str	r3, [r7, #20]
 8010cf2:	e051      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	4a35      	ldr	r2, [pc, #212]	; (8010dcc <USB_SetTurnaroundTime+0x118>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d306      	bcc.n	8010d0a <USB_SetTurnaroundTime+0x56>
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	4a34      	ldr	r2, [pc, #208]	; (8010dd0 <USB_SetTurnaroundTime+0x11c>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d202      	bcs.n	8010d0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010d04:	230d      	movs	r3, #13
 8010d06:	617b      	str	r3, [r7, #20]
 8010d08:	e046      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	4a30      	ldr	r2, [pc, #192]	; (8010dd0 <USB_SetTurnaroundTime+0x11c>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d306      	bcc.n	8010d20 <USB_SetTurnaroundTime+0x6c>
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	4a2f      	ldr	r2, [pc, #188]	; (8010dd4 <USB_SetTurnaroundTime+0x120>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d802      	bhi.n	8010d20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010d1a:	230c      	movs	r3, #12
 8010d1c:	617b      	str	r3, [r7, #20]
 8010d1e:	e03b      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	4a2c      	ldr	r2, [pc, #176]	; (8010dd4 <USB_SetTurnaroundTime+0x120>)
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d906      	bls.n	8010d36 <USB_SetTurnaroundTime+0x82>
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	4a2b      	ldr	r2, [pc, #172]	; (8010dd8 <USB_SetTurnaroundTime+0x124>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d802      	bhi.n	8010d36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010d30:	230b      	movs	r3, #11
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e030      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	4a27      	ldr	r2, [pc, #156]	; (8010dd8 <USB_SetTurnaroundTime+0x124>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d906      	bls.n	8010d4c <USB_SetTurnaroundTime+0x98>
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	4a26      	ldr	r2, [pc, #152]	; (8010ddc <USB_SetTurnaroundTime+0x128>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d802      	bhi.n	8010d4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010d46:	230a      	movs	r3, #10
 8010d48:	617b      	str	r3, [r7, #20]
 8010d4a:	e025      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	4a23      	ldr	r2, [pc, #140]	; (8010ddc <USB_SetTurnaroundTime+0x128>)
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d906      	bls.n	8010d62 <USB_SetTurnaroundTime+0xae>
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	4a22      	ldr	r2, [pc, #136]	; (8010de0 <USB_SetTurnaroundTime+0x12c>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d202      	bcs.n	8010d62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d5c:	2309      	movs	r3, #9
 8010d5e:	617b      	str	r3, [r7, #20]
 8010d60:	e01a      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	4a1e      	ldr	r2, [pc, #120]	; (8010de0 <USB_SetTurnaroundTime+0x12c>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d306      	bcc.n	8010d78 <USB_SetTurnaroundTime+0xc4>
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	4a1d      	ldr	r2, [pc, #116]	; (8010de4 <USB_SetTurnaroundTime+0x130>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d802      	bhi.n	8010d78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d72:	2308      	movs	r3, #8
 8010d74:	617b      	str	r3, [r7, #20]
 8010d76:	e00f      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	4a1a      	ldr	r2, [pc, #104]	; (8010de4 <USB_SetTurnaroundTime+0x130>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d906      	bls.n	8010d8e <USB_SetTurnaroundTime+0xda>
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	4a19      	ldr	r2, [pc, #100]	; (8010de8 <USB_SetTurnaroundTime+0x134>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d202      	bcs.n	8010d8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d88:	2307      	movs	r3, #7
 8010d8a:	617b      	str	r3, [r7, #20]
 8010d8c:	e004      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d8e:	2306      	movs	r3, #6
 8010d90:	617b      	str	r3, [r7, #20]
 8010d92:	e001      	b.n	8010d98 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d94:	2309      	movs	r3, #9
 8010d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	68da      	ldr	r2, [r3, #12]
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	029b      	lsls	r3, r3, #10
 8010dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010db0:	431a      	orrs	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	371c      	adds	r7, #28
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr
 8010dc4:	00d8acbf 	.word	0x00d8acbf
 8010dc8:	00e4e1c0 	.word	0x00e4e1c0
 8010dcc:	00f42400 	.word	0x00f42400
 8010dd0:	01067380 	.word	0x01067380
 8010dd4:	011a499f 	.word	0x011a499f
 8010dd8:	01312cff 	.word	0x01312cff
 8010ddc:	014ca43f 	.word	0x014ca43f
 8010de0:	016e3600 	.word	0x016e3600
 8010de4:	01a6ab1f 	.word	0x01a6ab1f
 8010de8:	01e84800 	.word	0x01e84800

08010dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	f043 0201 	orr.w	r2, r3, #1
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	370c      	adds	r7, #12
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010e0e:	b480      	push	{r7}
 8010e10:	b083      	sub	sp, #12
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	f023 0201 	bic.w	r2, r3, #1
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010e22:	2300      	movs	r3, #0
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e48:	78fb      	ldrb	r3, [r7, #3]
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d106      	bne.n	8010e5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	60da      	str	r2, [r3, #12]
 8010e5a:	e00b      	b.n	8010e74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e5c:	78fb      	ldrb	r3, [r7, #3]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d106      	bne.n	8010e70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	60da      	str	r2, [r3, #12]
 8010e6e:	e001      	b.n	8010e74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e70:	2301      	movs	r3, #1
 8010e72:	e003      	b.n	8010e7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e74:	2032      	movs	r0, #50	; 0x32
 8010e76:	f7f6 fed9 	bl	8007c2c <HAL_Delay>

  return HAL_OK;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e84:	b084      	sub	sp, #16
 8010e86:	b580      	push	{r7, lr}
 8010e88:	b086      	sub	sp, #24
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
 8010e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e96:	2300      	movs	r3, #0
 8010e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	613b      	str	r3, [r7, #16]
 8010ea2:	e009      	b.n	8010eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	3340      	adds	r3, #64	; 0x40
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	2200      	movs	r2, #0
 8010eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	613b      	str	r3, [r7, #16]
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	2b0e      	cmp	r3, #14
 8010ebc:	d9f2      	bls.n	8010ea4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d11c      	bne.n	8010efe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ed2:	f043 0302 	orr.w	r3, r3, #2
 8010ed6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010edc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	e005      	b.n	8010f0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f10:	461a      	mov	r2, r3
 8010f12:	2300      	movs	r3, #0
 8010f14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f24:	461a      	mov	r2, r3
 8010f26:	680b      	ldr	r3, [r1, #0]
 8010f28:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f2a:	2103      	movs	r1, #3
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f000 f93d 	bl	80111ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f32:	2110      	movs	r1, #16
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 f8f1 	bl	801111c <USB_FlushTxFifo>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010f40:	2301      	movs	r3, #1
 8010f42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f90f 	bl	8011168 <USB_FlushRxFifo>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d001      	beq.n	8010f54 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010f50:	2301      	movs	r3, #1
 8010f52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f66:	461a      	mov	r2, r3
 8010f68:	2300      	movs	r3, #0
 8010f6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f72:	461a      	mov	r2, r3
 8010f74:	2300      	movs	r3, #0
 8010f76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f78:	2300      	movs	r3, #0
 8010f7a:	613b      	str	r3, [r7, #16]
 8010f7c:	e043      	b.n	8011006 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	015a      	lsls	r2, r3, #5
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	4413      	add	r3, r2
 8010f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f94:	d118      	bne.n	8010fc8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d10a      	bne.n	8010fb2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	015a      	lsls	r2, r3, #5
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa8:	461a      	mov	r2, r3
 8010faa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010fae:	6013      	str	r3, [r2, #0]
 8010fb0:	e013      	b.n	8010fda <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	015a      	lsls	r2, r3, #5
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	4413      	add	r3, r2
 8010fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fc4:	6013      	str	r3, [r2, #0]
 8010fc6:	e008      	b.n	8010fda <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	015a      	lsls	r2, r3, #5
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	4413      	add	r3, r2
 8010fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	015a      	lsls	r2, r3, #5
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	2300      	movs	r3, #0
 8010fea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	015a      	lsls	r2, r3, #5
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	3301      	adds	r3, #1
 8011004:	613b      	str	r3, [r7, #16]
 8011006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011008:	693a      	ldr	r2, [r7, #16]
 801100a:	429a      	cmp	r2, r3
 801100c:	d3b7      	bcc.n	8010f7e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801100e:	2300      	movs	r3, #0
 8011010:	613b      	str	r3, [r7, #16]
 8011012:	e043      	b.n	801109c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	015a      	lsls	r2, r3, #5
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	4413      	add	r3, r2
 801101c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801102a:	d118      	bne.n	801105e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10a      	bne.n	8011048 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	015a      	lsls	r2, r3, #5
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	4413      	add	r3, r2
 801103a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801103e:	461a      	mov	r2, r3
 8011040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011044:	6013      	str	r3, [r2, #0]
 8011046:	e013      	b.n	8011070 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	015a      	lsls	r2, r3, #5
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	4413      	add	r3, r2
 8011050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011054:	461a      	mov	r2, r3
 8011056:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801105a:	6013      	str	r3, [r2, #0]
 801105c:	e008      	b.n	8011070 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	015a      	lsls	r2, r3, #5
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	4413      	add	r3, r2
 8011066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801106a:	461a      	mov	r2, r3
 801106c:	2300      	movs	r3, #0
 801106e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	015a      	lsls	r2, r3, #5
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	4413      	add	r3, r2
 8011078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801107c:	461a      	mov	r2, r3
 801107e:	2300      	movs	r3, #0
 8011080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	015a      	lsls	r2, r3, #5
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	4413      	add	r3, r2
 801108a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801108e:	461a      	mov	r2, r3
 8011090:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011094:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	3301      	adds	r3, #1
 801109a:	613b      	str	r3, [r7, #16]
 801109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109e:	693a      	ldr	r2, [r7, #16]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d3b7      	bcc.n	8011014 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110aa:	691b      	ldr	r3, [r3, #16]
 80110ac:	68fa      	ldr	r2, [r7, #12]
 80110ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80110b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80110c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	699b      	ldr	r3, [r3, #24]
 80110ca:	f043 0210 	orr.w	r2, r3, #16
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	699a      	ldr	r2, [r3, #24]
 80110d6:	4b10      	ldr	r3, [pc, #64]	; (8011118 <USB_DevInit+0x294>)
 80110d8:	4313      	orrs	r3, r2
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d005      	beq.n	80110f0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	699b      	ldr	r3, [r3, #24]
 80110e8:	f043 0208 	orr.w	r2, r3, #8
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d107      	bne.n	8011106 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	699b      	ldr	r3, [r3, #24]
 80110fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80110fe:	f043 0304 	orr.w	r3, r3, #4
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011106:	7dfb      	ldrb	r3, [r7, #23]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3718      	adds	r7, #24
 801110c:	46bd      	mov	sp, r7
 801110e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011112:	b004      	add	sp, #16
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop
 8011118:	803c3800 	.word	0x803c3800

0801111c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011126:	2300      	movs	r3, #0
 8011128:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	019b      	lsls	r3, r3, #6
 801112e:	f043 0220 	orr.w	r2, r3, #32
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3301      	adds	r3, #1
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	4a09      	ldr	r2, [pc, #36]	; (8011164 <USB_FlushTxFifo+0x48>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d901      	bls.n	8011148 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011144:	2303      	movs	r3, #3
 8011146:	e006      	b.n	8011156 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	f003 0320 	and.w	r3, r3, #32
 8011150:	2b20      	cmp	r3, #32
 8011152:	d0f0      	beq.n	8011136 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	00030d40 	.word	0x00030d40

08011168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011170:	2300      	movs	r3, #0
 8011172:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2210      	movs	r2, #16
 8011178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	3301      	adds	r3, #1
 801117e:	60fb      	str	r3, [r7, #12]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	4a09      	ldr	r2, [pc, #36]	; (80111a8 <USB_FlushRxFifo+0x40>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d901      	bls.n	801118c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011188:	2303      	movs	r3, #3
 801118a:	e006      	b.n	801119a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	691b      	ldr	r3, [r3, #16]
 8011190:	f003 0310 	and.w	r3, r3, #16
 8011194:	2b10      	cmp	r3, #16
 8011196:	d0f0      	beq.n	801117a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	00030d40 	.word	0x00030d40

080111ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	78fb      	ldrb	r3, [r7, #3]
 80111c6:	68f9      	ldr	r1, [r7, #12]
 80111c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111cc:	4313      	orrs	r3, r2
 80111ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3714      	adds	r7, #20
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr

080111de <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80111de:	b480      	push	{r7}
 80111e0:	b087      	sub	sp, #28
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	f003 0306 	and.w	r3, r3, #6
 80111f6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	d002      	beq.n	8011204 <USB_GetDevSpeed+0x26>
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b06      	cmp	r3, #6
 8011202:	d102      	bne.n	801120a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011204:	2302      	movs	r3, #2
 8011206:	75fb      	strb	r3, [r7, #23]
 8011208:	e001      	b.n	801120e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801120a:	230f      	movs	r3, #15
 801120c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011210:	4618      	mov	r0, r3
 8011212:	371c      	adds	r7, #28
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	785b      	ldrb	r3, [r3, #1]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d13a      	bne.n	80112ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801123e:	69da      	ldr	r2, [r3, #28]
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	f003 030f 	and.w	r3, r3, #15
 8011248:	2101      	movs	r1, #1
 801124a:	fa01 f303 	lsl.w	r3, r1, r3
 801124e:	b29b      	uxth	r3, r3
 8011250:	68f9      	ldr	r1, [r7, #12]
 8011252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011256:	4313      	orrs	r3, r2
 8011258:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	015a      	lsls	r2, r3, #5
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	4413      	add	r3, r2
 8011262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d155      	bne.n	801131c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	015a      	lsls	r2, r3, #5
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	78db      	ldrb	r3, [r3, #3]
 801128a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801128c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	059b      	lsls	r3, r3, #22
 8011292:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011294:	4313      	orrs	r3, r2
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	0151      	lsls	r1, r2, #5
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	440a      	add	r2, r1
 801129e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112aa:	6013      	str	r3, [r2, #0]
 80112ac:	e036      	b.n	801131c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112b4:	69da      	ldr	r2, [r3, #28]
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	f003 030f 	and.w	r3, r3, #15
 80112be:	2101      	movs	r1, #1
 80112c0:	fa01 f303 	lsl.w	r3, r1, r3
 80112c4:	041b      	lsls	r3, r3, #16
 80112c6:	68f9      	ldr	r1, [r7, #12]
 80112c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112cc:	4313      	orrs	r3, r2
 80112ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	015a      	lsls	r2, r3, #5
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4413      	add	r3, r2
 80112d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d11a      	bne.n	801131c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	015a      	lsls	r2, r3, #5
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	4413      	add	r3, r2
 80112ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	78db      	ldrb	r3, [r3, #3]
 8011300:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011302:	430b      	orrs	r3, r1
 8011304:	4313      	orrs	r3, r2
 8011306:	68ba      	ldr	r2, [r7, #8]
 8011308:	0151      	lsls	r1, r2, #5
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	440a      	add	r2, r1
 801130e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801131a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801131c:	2300      	movs	r3, #0
}
 801131e:	4618      	mov	r0, r3
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
	...

0801132c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	785b      	ldrb	r3, [r3, #1]
 8011344:	2b01      	cmp	r3, #1
 8011346:	d161      	bne.n	801140c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	015a      	lsls	r2, r3, #5
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	4413      	add	r3, r2
 8011350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801135a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801135e:	d11f      	bne.n	80113a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	4413      	add	r3, r2
 8011368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	68ba      	ldr	r2, [r7, #8]
 8011370:	0151      	lsls	r1, r2, #5
 8011372:	68fa      	ldr	r2, [r7, #12]
 8011374:	440a      	add	r2, r1
 8011376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801137a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801137e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	015a      	lsls	r2, r3, #5
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	4413      	add	r3, r2
 8011388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	0151      	lsls	r1, r2, #5
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	440a      	add	r2, r1
 8011396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801139a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801139e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	f003 030f 	and.w	r3, r3, #15
 80113b0:	2101      	movs	r1, #1
 80113b2:	fa01 f303 	lsl.w	r3, r1, r3
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	43db      	mvns	r3, r3
 80113ba:	68f9      	ldr	r1, [r7, #12]
 80113bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113c0:	4013      	ands	r3, r2
 80113c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113ca:	69da      	ldr	r2, [r3, #28]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f003 030f 	and.w	r3, r3, #15
 80113d4:	2101      	movs	r1, #1
 80113d6:	fa01 f303 	lsl.w	r3, r1, r3
 80113da:	b29b      	uxth	r3, r3
 80113dc:	43db      	mvns	r3, r3
 80113de:	68f9      	ldr	r1, [r7, #12]
 80113e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113e4:	4013      	ands	r3, r2
 80113e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	015a      	lsls	r2, r3, #5
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	4413      	add	r3, r2
 80113f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	0159      	lsls	r1, r3, #5
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	440b      	add	r3, r1
 80113fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011402:	4619      	mov	r1, r3
 8011404:	4b35      	ldr	r3, [pc, #212]	; (80114dc <USB_DeactivateEndpoint+0x1b0>)
 8011406:	4013      	ands	r3, r2
 8011408:	600b      	str	r3, [r1, #0]
 801140a:	e060      	b.n	80114ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	015a      	lsls	r2, r3, #5
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	4413      	add	r3, r2
 8011414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801141e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011422:	d11f      	bne.n	8011464 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	015a      	lsls	r2, r3, #5
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	4413      	add	r3, r2
 801142c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	68ba      	ldr	r2, [r7, #8]
 8011434:	0151      	lsls	r1, r2, #5
 8011436:	68fa      	ldr	r2, [r7, #12]
 8011438:	440a      	add	r2, r1
 801143a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801143e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011442:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	015a      	lsls	r2, r3, #5
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	4413      	add	r3, r2
 801144c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	0151      	lsls	r1, r2, #5
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	440a      	add	r2, r1
 801145a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801145e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801146a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 030f 	and.w	r3, r3, #15
 8011474:	2101      	movs	r1, #1
 8011476:	fa01 f303 	lsl.w	r3, r1, r3
 801147a:	041b      	lsls	r3, r3, #16
 801147c:	43db      	mvns	r3, r3
 801147e:	68f9      	ldr	r1, [r7, #12]
 8011480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011484:	4013      	ands	r3, r2
 8011486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801148e:	69da      	ldr	r2, [r3, #28]
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f003 030f 	and.w	r3, r3, #15
 8011498:	2101      	movs	r1, #1
 801149a:	fa01 f303 	lsl.w	r3, r1, r3
 801149e:	041b      	lsls	r3, r3, #16
 80114a0:	43db      	mvns	r3, r3
 80114a2:	68f9      	ldr	r1, [r7, #12]
 80114a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80114a8:	4013      	ands	r3, r2
 80114aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	015a      	lsls	r2, r3, #5
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4413      	add	r3, r2
 80114b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	0159      	lsls	r1, r3, #5
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	440b      	add	r3, r1
 80114c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114c6:	4619      	mov	r1, r3
 80114c8:	4b05      	ldr	r3, [pc, #20]	; (80114e0 <USB_DeactivateEndpoint+0x1b4>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr
 80114dc:	ec337800 	.word	0xec337800
 80114e0:	eff37800 	.word	0xeff37800

080114e4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	785b      	ldrb	r3, [r3, #1]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	f040 810a 	bne.w	8011716 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	695b      	ldr	r3, [r3, #20]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d132      	bne.n	8011570 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	015a      	lsls	r2, r3, #5
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	4413      	add	r3, r2
 8011512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011516:	691b      	ldr	r3, [r3, #16]
 8011518:	693a      	ldr	r2, [r7, #16]
 801151a:	0151      	lsls	r1, r2, #5
 801151c:	697a      	ldr	r2, [r7, #20]
 801151e:	440a      	add	r2, r1
 8011520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011524:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011528:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801152c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	015a      	lsls	r2, r3, #5
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	4413      	add	r3, r2
 8011536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153a:	691b      	ldr	r3, [r3, #16]
 801153c:	693a      	ldr	r2, [r7, #16]
 801153e:	0151      	lsls	r1, r2, #5
 8011540:	697a      	ldr	r2, [r7, #20]
 8011542:	440a      	add	r2, r1
 8011544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801154c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	015a      	lsls	r2, r3, #5
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	4413      	add	r3, r2
 8011556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801155a:	691b      	ldr	r3, [r3, #16]
 801155c:	693a      	ldr	r2, [r7, #16]
 801155e:	0151      	lsls	r1, r2, #5
 8011560:	697a      	ldr	r2, [r7, #20]
 8011562:	440a      	add	r2, r1
 8011564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011568:	0cdb      	lsrs	r3, r3, #19
 801156a:	04db      	lsls	r3, r3, #19
 801156c:	6113      	str	r3, [r2, #16]
 801156e:	e074      	b.n	801165a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	015a      	lsls	r2, r3, #5
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	4413      	add	r3, r2
 8011578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801157c:	691b      	ldr	r3, [r3, #16]
 801157e:	693a      	ldr	r2, [r7, #16]
 8011580:	0151      	lsls	r1, r2, #5
 8011582:	697a      	ldr	r2, [r7, #20]
 8011584:	440a      	add	r2, r1
 8011586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801158a:	0cdb      	lsrs	r3, r3, #19
 801158c:	04db      	lsls	r3, r3, #19
 801158e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	015a      	lsls	r2, r3, #5
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	4413      	add	r3, r2
 8011598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801159c:	691b      	ldr	r3, [r3, #16]
 801159e:	693a      	ldr	r2, [r7, #16]
 80115a0:	0151      	lsls	r1, r2, #5
 80115a2:	697a      	ldr	r2, [r7, #20]
 80115a4:	440a      	add	r2, r1
 80115a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80115ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80115b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	015a      	lsls	r2, r3, #5
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	4413      	add	r3, r2
 80115bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115c0:	691a      	ldr	r2, [r3, #16]
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	6959      	ldr	r1, [r3, #20]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	440b      	add	r3, r1
 80115cc:	1e59      	subs	r1, r3, #1
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80115d6:	04d9      	lsls	r1, r3, #19
 80115d8:	4baf      	ldr	r3, [pc, #700]	; (8011898 <USB_EPStartXfer+0x3b4>)
 80115da:	400b      	ands	r3, r1
 80115dc:	6939      	ldr	r1, [r7, #16]
 80115de:	0148      	lsls	r0, r1, #5
 80115e0:	6979      	ldr	r1, [r7, #20]
 80115e2:	4401      	add	r1, r0
 80115e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115e8:	4313      	orrs	r3, r2
 80115ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	015a      	lsls	r2, r3, #5
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	4413      	add	r3, r2
 80115f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f8:	691a      	ldr	r2, [r3, #16]
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011602:	6939      	ldr	r1, [r7, #16]
 8011604:	0148      	lsls	r0, r1, #5
 8011606:	6979      	ldr	r1, [r7, #20]
 8011608:	4401      	add	r1, r0
 801160a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801160e:	4313      	orrs	r3, r2
 8011610:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	78db      	ldrb	r3, [r3, #3]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d11f      	bne.n	801165a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	015a      	lsls	r2, r3, #5
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	4413      	add	r3, r2
 8011622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011626:	691b      	ldr	r3, [r3, #16]
 8011628:	693a      	ldr	r2, [r7, #16]
 801162a:	0151      	lsls	r1, r2, #5
 801162c:	697a      	ldr	r2, [r7, #20]
 801162e:	440a      	add	r2, r1
 8011630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011634:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011638:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	015a      	lsls	r2, r3, #5
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	4413      	add	r3, r2
 8011642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	693a      	ldr	r2, [r7, #16]
 801164a:	0151      	lsls	r1, r2, #5
 801164c:	697a      	ldr	r2, [r7, #20]
 801164e:	440a      	add	r2, r1
 8011650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011658:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	015a      	lsls	r2, r3, #5
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	4413      	add	r3, r2
 8011662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	693a      	ldr	r2, [r7, #16]
 801166a:	0151      	lsls	r1, r2, #5
 801166c:	697a      	ldr	r2, [r7, #20]
 801166e:	440a      	add	r2, r1
 8011670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011678:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	78db      	ldrb	r3, [r3, #3]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d015      	beq.n	80116ae <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	695b      	ldr	r3, [r3, #20]
 8011686:	2b00      	cmp	r3, #0
 8011688:	f000 8100 	beq.w	801188c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	f003 030f 	and.w	r3, r3, #15
 801169c:	2101      	movs	r1, #1
 801169e:	fa01 f303 	lsl.w	r3, r1, r3
 80116a2:	6979      	ldr	r1, [r7, #20]
 80116a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80116a8:	4313      	orrs	r3, r2
 80116aa:	634b      	str	r3, [r1, #52]	; 0x34
 80116ac:	e0ee      	b.n	801188c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d110      	bne.n	80116e0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	015a      	lsls	r2, r3, #5
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	4413      	add	r3, r2
 80116c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	693a      	ldr	r2, [r7, #16]
 80116ce:	0151      	lsls	r1, r2, #5
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	440a      	add	r2, r1
 80116d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80116dc:	6013      	str	r3, [r2, #0]
 80116de:	e00f      	b.n	8011700 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	015a      	lsls	r2, r3, #5
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	4413      	add	r3, r2
 80116e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	693a      	ldr	r2, [r7, #16]
 80116f0:	0151      	lsls	r1, r2, #5
 80116f2:	697a      	ldr	r2, [r7, #20]
 80116f4:	440a      	add	r2, r1
 80116f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116fe:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	68d9      	ldr	r1, [r3, #12]
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	781a      	ldrb	r2, [r3, #0]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	695b      	ldr	r3, [r3, #20]
 801170c:	b29b      	uxth	r3, r3
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 f9e2 	bl	8011ad8 <USB_WritePacket>
 8011714:	e0ba      	b.n	801188c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	015a      	lsls	r2, r3, #5
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	4413      	add	r3, r2
 801171e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	693a      	ldr	r2, [r7, #16]
 8011726:	0151      	lsls	r1, r2, #5
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	440a      	add	r2, r1
 801172c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011730:	0cdb      	lsrs	r3, r3, #19
 8011732:	04db      	lsls	r3, r3, #19
 8011734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	015a      	lsls	r2, r3, #5
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	4413      	add	r3, r2
 801173e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011742:	691b      	ldr	r3, [r3, #16]
 8011744:	693a      	ldr	r2, [r7, #16]
 8011746:	0151      	lsls	r1, r2, #5
 8011748:	697a      	ldr	r2, [r7, #20]
 801174a:	440a      	add	r2, r1
 801174c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011758:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	695b      	ldr	r3, [r3, #20]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d123      	bne.n	80117aa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	015a      	lsls	r2, r3, #5
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	4413      	add	r3, r2
 801176a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801176e:	691a      	ldr	r2, [r3, #16]
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	689b      	ldr	r3, [r3, #8]
 8011774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011778:	6939      	ldr	r1, [r7, #16]
 801177a:	0148      	lsls	r0, r1, #5
 801177c:	6979      	ldr	r1, [r7, #20]
 801177e:	4401      	add	r1, r0
 8011780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011784:	4313      	orrs	r3, r2
 8011786:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	015a      	lsls	r2, r3, #5
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	4413      	add	r3, r2
 8011790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011794:	691b      	ldr	r3, [r3, #16]
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	0151      	lsls	r1, r2, #5
 801179a:	697a      	ldr	r2, [r7, #20]
 801179c:	440a      	add	r2, r1
 801179e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80117a6:	6113      	str	r3, [r2, #16]
 80117a8:	e033      	b.n	8011812 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	695a      	ldr	r2, [r3, #20]
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	4413      	add	r3, r2
 80117b4:	1e5a      	subs	r2, r3, #1
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80117be:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	015a      	lsls	r2, r3, #5
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	4413      	add	r3, r2
 80117c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117cc:	691a      	ldr	r2, [r3, #16]
 80117ce:	89fb      	ldrh	r3, [r7, #14]
 80117d0:	04d9      	lsls	r1, r3, #19
 80117d2:	4b31      	ldr	r3, [pc, #196]	; (8011898 <USB_EPStartXfer+0x3b4>)
 80117d4:	400b      	ands	r3, r1
 80117d6:	6939      	ldr	r1, [r7, #16]
 80117d8:	0148      	lsls	r0, r1, #5
 80117da:	6979      	ldr	r1, [r7, #20]
 80117dc:	4401      	add	r1, r0
 80117de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80117e2:	4313      	orrs	r3, r2
 80117e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	015a      	lsls	r2, r3, #5
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	4413      	add	r3, r2
 80117ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117f2:	691a      	ldr	r2, [r3, #16]
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	89f9      	ldrh	r1, [r7, #14]
 80117fa:	fb01 f303 	mul.w	r3, r1, r3
 80117fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011802:	6939      	ldr	r1, [r7, #16]
 8011804:	0148      	lsls	r0, r1, #5
 8011806:	6979      	ldr	r1, [r7, #20]
 8011808:	4401      	add	r1, r0
 801180a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801180e:	4313      	orrs	r3, r2
 8011810:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	78db      	ldrb	r3, [r3, #3]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d128      	bne.n	801186c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011826:	2b00      	cmp	r3, #0
 8011828:	d110      	bne.n	801184c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	015a      	lsls	r2, r3, #5
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	4413      	add	r3, r2
 8011832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	693a      	ldr	r2, [r7, #16]
 801183a:	0151      	lsls	r1, r2, #5
 801183c:	697a      	ldr	r2, [r7, #20]
 801183e:	440a      	add	r2, r1
 8011840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011848:	6013      	str	r3, [r2, #0]
 801184a:	e00f      	b.n	801186c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	693a      	ldr	r2, [r7, #16]
 801185c:	0151      	lsls	r1, r2, #5
 801185e:	697a      	ldr	r2, [r7, #20]
 8011860:	440a      	add	r2, r1
 8011862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801186a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	015a      	lsls	r2, r3, #5
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	4413      	add	r3, r2
 8011874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	693a      	ldr	r2, [r7, #16]
 801187c:	0151      	lsls	r1, r2, #5
 801187e:	697a      	ldr	r2, [r7, #20]
 8011880:	440a      	add	r2, r1
 8011882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801188a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3718      	adds	r7, #24
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	1ff80000 	.word	0x1ff80000

0801189c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801189c:	b480      	push	{r7}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	785b      	ldrb	r3, [r3, #1]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	f040 80ab 	bne.w	8011a10 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	695b      	ldr	r3, [r3, #20]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d132      	bne.n	8011928 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	015a      	lsls	r2, r3, #5
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	4413      	add	r3, r2
 80118ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118ce:	691b      	ldr	r3, [r3, #16]
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	0151      	lsls	r1, r2, #5
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	440a      	add	r2, r1
 80118d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	015a      	lsls	r2, r3, #5
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	4413      	add	r3, r2
 80118ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118f2:	691b      	ldr	r3, [r3, #16]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	0151      	lsls	r1, r2, #5
 80118f8:	68fa      	ldr	r2, [r7, #12]
 80118fa:	440a      	add	r2, r1
 80118fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	015a      	lsls	r2, r3, #5
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	4413      	add	r3, r2
 801190e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011912:	691b      	ldr	r3, [r3, #16]
 8011914:	68ba      	ldr	r2, [r7, #8]
 8011916:	0151      	lsls	r1, r2, #5
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	440a      	add	r2, r1
 801191c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011920:	0cdb      	lsrs	r3, r3, #19
 8011922:	04db      	lsls	r3, r3, #19
 8011924:	6113      	str	r3, [r2, #16]
 8011926:	e04e      	b.n	80119c6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	015a      	lsls	r2, r3, #5
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	4413      	add	r3, r2
 8011930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	68ba      	ldr	r2, [r7, #8]
 8011938:	0151      	lsls	r1, r2, #5
 801193a:	68fa      	ldr	r2, [r7, #12]
 801193c:	440a      	add	r2, r1
 801193e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011942:	0cdb      	lsrs	r3, r3, #19
 8011944:	04db      	lsls	r3, r3, #19
 8011946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	015a      	lsls	r2, r3, #5
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	4413      	add	r3, r2
 8011950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	68ba      	ldr	r2, [r7, #8]
 8011958:	0151      	lsls	r1, r2, #5
 801195a:	68fa      	ldr	r2, [r7, #12]
 801195c:	440a      	add	r2, r1
 801195e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011962:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011966:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801196a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	695a      	ldr	r2, [r3, #20]
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	689b      	ldr	r3, [r3, #8]
 8011974:	429a      	cmp	r2, r3
 8011976:	d903      	bls.n	8011980 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	689a      	ldr	r2, [r3, #8]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	015a      	lsls	r2, r3, #5
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	4413      	add	r3, r2
 8011988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	68ba      	ldr	r2, [r7, #8]
 8011990:	0151      	lsls	r1, r2, #5
 8011992:	68fa      	ldr	r2, [r7, #12]
 8011994:	440a      	add	r2, r1
 8011996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801199a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801199e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	015a      	lsls	r2, r3, #5
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	4413      	add	r3, r2
 80119a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ac:	691a      	ldr	r2, [r3, #16]
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119b6:	68b9      	ldr	r1, [r7, #8]
 80119b8:	0148      	lsls	r0, r1, #5
 80119ba:	68f9      	ldr	r1, [r7, #12]
 80119bc:	4401      	add	r1, r0
 80119be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80119c2:	4313      	orrs	r3, r2
 80119c4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	015a      	lsls	r2, r3, #5
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	4413      	add	r3, r2
 80119ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68ba      	ldr	r2, [r7, #8]
 80119d6:	0151      	lsls	r1, r2, #5
 80119d8:	68fa      	ldr	r2, [r7, #12]
 80119da:	440a      	add	r2, r1
 80119dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80119e4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	695b      	ldr	r3, [r3, #20]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d06d      	beq.n	8011aca <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	f003 030f 	and.w	r3, r3, #15
 80119fe:	2101      	movs	r1, #1
 8011a00:	fa01 f303 	lsl.w	r3, r1, r3
 8011a04:	68f9      	ldr	r1, [r7, #12]
 8011a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	634b      	str	r3, [r1, #52]	; 0x34
 8011a0e:	e05c      	b.n	8011aca <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	015a      	lsls	r2, r3, #5
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	4413      	add	r3, r2
 8011a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a1c:	691b      	ldr	r3, [r3, #16]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	0151      	lsls	r1, r2, #5
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	440a      	add	r2, r1
 8011a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a2a:	0cdb      	lsrs	r3, r3, #19
 8011a2c:	04db      	lsls	r3, r3, #19
 8011a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	015a      	lsls	r2, r3, #5
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	4413      	add	r3, r2
 8011a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a3c:	691b      	ldr	r3, [r3, #16]
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	0151      	lsls	r1, r2, #5
 8011a42:	68fa      	ldr	r2, [r7, #12]
 8011a44:	440a      	add	r2, r1
 8011a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011a4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011a52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	695b      	ldr	r3, [r3, #20]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d003      	beq.n	8011a64 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	689a      	ldr	r2, [r3, #8]
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	015a      	lsls	r2, r3, #5
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	0151      	lsls	r1, r2, #5
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	440a      	add	r2, r1
 8011a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	015a      	lsls	r2, r3, #5
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a90:	691a      	ldr	r2, [r3, #16]
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a9a:	68b9      	ldr	r1, [r7, #8]
 8011a9c:	0148      	lsls	r0, r1, #5
 8011a9e:	68f9      	ldr	r1, [r7, #12]
 8011aa0:	4401      	add	r1, r0
 8011aa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	015a      	lsls	r2, r3, #5
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	0151      	lsls	r1, r2, #5
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	440a      	add	r2, r1
 8011ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ac4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ac8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011aca:	2300      	movs	r3, #0
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3714      	adds	r7, #20
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr

08011ad8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b089      	sub	sp, #36	; 0x24
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	71fb      	strb	r3, [r7, #7]
 8011aea:	4613      	mov	r3, r2
 8011aec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011af6:	88bb      	ldrh	r3, [r7, #4]
 8011af8:	3303      	adds	r3, #3
 8011afa:	089b      	lsrs	r3, r3, #2
 8011afc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011afe:	2300      	movs	r3, #0
 8011b00:	61bb      	str	r3, [r7, #24]
 8011b02:	e00f      	b.n	8011b24 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011b04:	79fb      	ldrb	r3, [r7, #7]
 8011b06:	031a      	lsls	r2, r3, #12
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	4413      	add	r3, r2
 8011b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b10:	461a      	mov	r2, r3
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	3301      	adds	r3, #1
 8011b22:	61bb      	str	r3, [r7, #24]
 8011b24:	69ba      	ldr	r2, [r7, #24]
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d3eb      	bcc.n	8011b04 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011b2c:	2300      	movs	r3, #0
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3724      	adds	r7, #36	; 0x24
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr

08011b3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011b3a:	b480      	push	{r7}
 8011b3c:	b089      	sub	sp, #36	; 0x24
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	60f8      	str	r0, [r7, #12]
 8011b42:	60b9      	str	r1, [r7, #8]
 8011b44:	4613      	mov	r3, r2
 8011b46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011b50:	88fb      	ldrh	r3, [r7, #6]
 8011b52:	3303      	adds	r3, #3
 8011b54:	089b      	lsrs	r3, r3, #2
 8011b56:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011b58:	2300      	movs	r3, #0
 8011b5a:	61bb      	str	r3, [r7, #24]
 8011b5c:	e00b      	b.n	8011b76 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	601a      	str	r2, [r3, #0]
    pDest++;
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	3304      	adds	r3, #4
 8011b6e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	3301      	adds	r3, #1
 8011b74:	61bb      	str	r3, [r7, #24]
 8011b76:	69ba      	ldr	r2, [r7, #24]
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d3ef      	bcc.n	8011b5e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011b7e:	69fb      	ldr	r3, [r7, #28]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3724      	adds	r7, #36	; 0x24
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b085      	sub	sp, #20
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	785b      	ldrb	r3, [r3, #1]
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d12c      	bne.n	8011c02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	015a      	lsls	r2, r3, #5
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	4413      	add	r3, r2
 8011bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	db12      	blt.n	8011be0 <USB_EPSetStall+0x54>
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d00f      	beq.n	8011be0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	015a      	lsls	r2, r3, #5
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	4413      	add	r3, r2
 8011bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	68ba      	ldr	r2, [r7, #8]
 8011bd0:	0151      	lsls	r1, r2, #5
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	440a      	add	r2, r1
 8011bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011bde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	015a      	lsls	r2, r3, #5
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	4413      	add	r3, r2
 8011be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	0151      	lsls	r1, r2, #5
 8011bf2:	68fa      	ldr	r2, [r7, #12]
 8011bf4:	440a      	add	r2, r1
 8011bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011bfe:	6013      	str	r3, [r2, #0]
 8011c00:	e02b      	b.n	8011c5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	015a      	lsls	r2, r3, #5
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	4413      	add	r3, r2
 8011c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	db12      	blt.n	8011c3a <USB_EPSetStall+0xae>
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00f      	beq.n	8011c3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	015a      	lsls	r2, r3, #5
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	4413      	add	r3, r2
 8011c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	68ba      	ldr	r2, [r7, #8]
 8011c2a:	0151      	lsls	r1, r2, #5
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	440a      	add	r2, r1
 8011c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011c38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	015a      	lsls	r2, r3, #5
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	4413      	add	r3, r2
 8011c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	0151      	lsls	r1, r2, #5
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	440a      	add	r2, r1
 8011c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011c58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3714      	adds	r7, #20
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	785b      	ldrb	r3, [r3, #1]
 8011c80:	2b01      	cmp	r3, #1
 8011c82:	d128      	bne.n	8011cd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	015a      	lsls	r2, r3, #5
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	4413      	add	r3, r2
 8011c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	0151      	lsls	r1, r2, #5
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	440a      	add	r2, r1
 8011c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ca2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	78db      	ldrb	r3, [r3, #3]
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d003      	beq.n	8011cb4 <USB_EPClearStall+0x4c>
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	78db      	ldrb	r3, [r3, #3]
 8011cb0:	2b02      	cmp	r3, #2
 8011cb2:	d138      	bne.n	8011d26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	015a      	lsls	r2, r3, #5
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	4413      	add	r3, r2
 8011cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	68ba      	ldr	r2, [r7, #8]
 8011cc4:	0151      	lsls	r1, r2, #5
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	440a      	add	r2, r1
 8011cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cd2:	6013      	str	r3, [r2, #0]
 8011cd4:	e027      	b.n	8011d26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	015a      	lsls	r2, r3, #5
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	4413      	add	r3, r2
 8011cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	68ba      	ldr	r2, [r7, #8]
 8011ce6:	0151      	lsls	r1, r2, #5
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	440a      	add	r2, r1
 8011cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011cf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	78db      	ldrb	r3, [r3, #3]
 8011cfa:	2b03      	cmp	r3, #3
 8011cfc:	d003      	beq.n	8011d06 <USB_EPClearStall+0x9e>
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	78db      	ldrb	r3, [r3, #3]
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	d10f      	bne.n	8011d26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	015a      	lsls	r2, r3, #5
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	68ba      	ldr	r2, [r7, #8]
 8011d16:	0151      	lsls	r1, r2, #5
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	440a      	add	r2, r1
 8011d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011d26:	2300      	movs	r3, #0
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	68fa      	ldr	r2, [r7, #12]
 8011d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011d56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	78fb      	ldrb	r3, [r7, #3]
 8011d62:	011b      	lsls	r3, r3, #4
 8011d64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011d68:	68f9      	ldr	r1, [r7, #12]
 8011d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d6e:	4313      	orrs	r3, r2
 8011d70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011d72:	2300      	movs	r3, #0
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3714      	adds	r7, #20
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d9a:	f023 0303 	bic.w	r3, r3, #3
 8011d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011dae:	f023 0302 	bic.w	r3, r3, #2
 8011db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3714      	adds	r7, #20
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc0:	4770      	bx	lr

08011dc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011dc2:	b480      	push	{r7}
 8011dc4:	b085      	sub	sp, #20
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ddc:	f023 0303 	bic.w	r3, r3, #3
 8011de0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011df0:	f043 0302 	orr.w	r3, r3, #2
 8011df4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3714      	adds	r7, #20
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b085      	sub	sp, #20
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	695b      	ldr	r3, [r3, #20]
 8011e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	4013      	ands	r3, r2
 8011e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3714      	adds	r7, #20
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e2a:	b480      	push	{r7}
 8011e2c:	b085      	sub	sp, #20
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e3c:	699b      	ldr	r3, [r3, #24]
 8011e3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e46:	69db      	ldr	r3, [r3, #28]
 8011e48:	68ba      	ldr	r2, [r7, #8]
 8011e4a:	4013      	ands	r3, r2
 8011e4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	0c1b      	lsrs	r3, r3, #16
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3714      	adds	r7, #20
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b085      	sub	sp, #20
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e70:	699b      	ldr	r3, [r3, #24]
 8011e72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e7a:	69db      	ldr	r3, [r3, #28]
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	4013      	ands	r3, r2
 8011e80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	b29b      	uxth	r3, r3
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3714      	adds	r7, #20
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr

08011e92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e92:	b480      	push	{r7}
 8011e94:	b085      	sub	sp, #20
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011ea2:	78fb      	ldrb	r3, [r7, #3]
 8011ea4:	015a      	lsls	r2, r3, #5
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eae:	689b      	ldr	r3, [r3, #8]
 8011eb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eb8:	695b      	ldr	r3, [r3, #20]
 8011eba:	68ba      	ldr	r2, [r7, #8]
 8011ebc:	4013      	ands	r3, r2
 8011ebe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3714      	adds	r7, #20
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr

08011ece <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011ece:	b480      	push	{r7}
 8011ed0:	b087      	sub	sp, #28
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ee4:	691b      	ldr	r3, [r3, #16]
 8011ee6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ef0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011ef2:	78fb      	ldrb	r3, [r7, #3]
 8011ef4:	f003 030f 	and.w	r3, r3, #15
 8011ef8:	68fa      	ldr	r2, [r7, #12]
 8011efa:	fa22 f303 	lsr.w	r3, r2, r3
 8011efe:	01db      	lsls	r3, r3, #7
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	693a      	ldr	r2, [r7, #16]
 8011f04:	4313      	orrs	r3, r2
 8011f06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011f08:	78fb      	ldrb	r3, [r7, #3]
 8011f0a:	015a      	lsls	r2, r3, #5
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	4413      	add	r3, r2
 8011f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f14:	689b      	ldr	r3, [r3, #8]
 8011f16:	693a      	ldr	r2, [r7, #16]
 8011f18:	4013      	ands	r3, r2
 8011f1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011f1c:	68bb      	ldr	r3, [r7, #8]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	371c      	adds	r7, #28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr

08011f2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011f2a:	b480      	push	{r7}
 8011f2c:	b083      	sub	sp, #12
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	695b      	ldr	r3, [r3, #20]
 8011f36:	f003 0301 	and.w	r3, r3, #1
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	370c      	adds	r7, #12
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011f46:	b480      	push	{r7}
 8011f48:	b085      	sub	sp, #20
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011f64:	f023 0307 	bic.w	r3, r3, #7
 8011f68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b085      	sub	sp, #20
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	333c      	adds	r3, #60	; 0x3c
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	4a1c      	ldr	r2, [pc, #112]	; (8012018 <USB_EP0_OutStart+0x8c>)
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d90a      	bls.n	8011fc2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fbc:	d101      	bne.n	8011fc2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	e024      	b.n	801200c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fc8:	461a      	mov	r2, r3
 8011fca:	2300      	movs	r3, #0
 8011fcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fd4:	691b      	ldr	r3, [r3, #16]
 8011fd6:	68fa      	ldr	r2, [r7, #12]
 8011fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ff0:	f043 0318 	orr.w	r3, r3, #24
 8011ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012004:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012008:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3714      	adds	r7, #20
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr
 8012018:	4f54300a 	.word	0x4f54300a

0801201c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801201c:	b480      	push	{r7}
 801201e:	b085      	sub	sp, #20
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012024:	2300      	movs	r3, #0
 8012026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	3301      	adds	r3, #1
 801202c:	60fb      	str	r3, [r7, #12]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	4a13      	ldr	r2, [pc, #76]	; (8012080 <USB_CoreReset+0x64>)
 8012032:	4293      	cmp	r3, r2
 8012034:	d901      	bls.n	801203a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012036:	2303      	movs	r3, #3
 8012038:	e01b      	b.n	8012072 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	691b      	ldr	r3, [r3, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	daf2      	bge.n	8012028 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012042:	2300      	movs	r3, #0
 8012044:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	691b      	ldr	r3, [r3, #16]
 801204a:	f043 0201 	orr.w	r2, r3, #1
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	3301      	adds	r3, #1
 8012056:	60fb      	str	r3, [r7, #12]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	4a09      	ldr	r2, [pc, #36]	; (8012080 <USB_CoreReset+0x64>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d901      	bls.n	8012064 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012060:	2303      	movs	r3, #3
 8012062:	e006      	b.n	8012072 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	f003 0301 	and.w	r3, r3, #1
 801206c:	2b01      	cmp	r3, #1
 801206e:	d0f0      	beq.n	8012052 <USB_CoreReset+0x36>

  return HAL_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3714      	adds	r7, #20
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop
 8012080:	00030d40 	.word	0x00030d40

08012084 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012088:	4904      	ldr	r1, [pc, #16]	; (801209c <MX_FATFS_Init+0x18>)
 801208a:	4805      	ldr	r0, [pc, #20]	; (80120a0 <MX_FATFS_Init+0x1c>)
 801208c:	f002 fdc8 	bl	8014c20 <FATFS_LinkDriver>
 8012090:	4603      	mov	r3, r0
 8012092:	461a      	mov	r2, r3
 8012094:	4b03      	ldr	r3, [pc, #12]	; (80120a4 <MX_FATFS_Init+0x20>)
 8012096:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012098:	bf00      	nop
 801209a:	bd80      	pop	{r7, pc}
 801209c:	20008814 	.word	0x20008814
 80120a0:	200003c4 	.word	0x200003c4
 80120a4:	20008810 	.word	0x20008810

080120a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80120a8:	b480      	push	{r7}
 80120aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80120ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat &= ~STA_NOINIT;
 80120c2:	4b08      	ldr	r3, [pc, #32]	; (80120e4 <USER_initialize+0x2c>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	f023 0301 	bic.w	r3, r3, #1
 80120cc:	b2da      	uxtb	r2, r3
 80120ce:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <USER_initialize+0x2c>)
 80120d0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80120d2:	4b04      	ldr	r3, [pc, #16]	; (80120e4 <USER_initialize+0x2c>)
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80120d8:	4618      	mov	r0, r3
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	200003c1 	.word	0x200003c1

080120e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	4603      	mov	r3, r0
 80120f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(pdrv) return STA_NOINIT;
 80120f2:	79fb      	ldrb	r3, [r7, #7]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d001      	beq.n	80120fc <USER_status+0x14>
 80120f8:	2301      	movs	r3, #1
 80120fa:	e002      	b.n	8012102 <USER_status+0x1a>
    return Stat;
 80120fc:	4b04      	ldr	r3, [pc, #16]	; (8012110 <USER_status+0x28>)
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8012102:	4618      	mov	r0, r3
 8012104:	370c      	adds	r7, #12
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr
 801210e:	bf00      	nop
 8012110:	200003c1 	.word	0x200003c1

08012114 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b086      	sub	sp, #24
 8012118:	af00      	add	r7, sp, #0
 801211a:	60b9      	str	r1, [r7, #8]
 801211c:	607a      	str	r2, [r7, #4]
 801211e:	603b      	str	r3, [r7, #0]
 8012120:	4603      	mov	r3, r0
 8012122:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		uint8_t block_cnt = 0;
 8012124:	2300      	movs	r3, #0
 8012126:	75fb      	strb	r3, [r7, #23]
		for(block_cnt=0;block_cnt<count;block_cnt++) W25_ReadBuf(&buff[block_cnt*512], sector+block_cnt);
 8012128:	2300      	movs	r3, #0
 801212a:	75fb      	strb	r3, [r7, #23]
 801212c:	e010      	b.n	8012150 <USER_read+0x3c>
 801212e:	7dfb      	ldrb	r3, [r7, #23]
 8012130:	025b      	lsls	r3, r3, #9
 8012132:	461a      	mov	r2, r3
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	1898      	adds	r0, r3, r2
 8012138:	7dfb      	ldrb	r3, [r7, #23]
 801213a:	b29a      	uxth	r2, r3
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	b29b      	uxth	r3, r3
 8012140:	4413      	add	r3, r2
 8012142:	b29b      	uxth	r3, r3
 8012144:	4619      	mov	r1, r3
 8012146:	f7f2 fb15 	bl	8004774 <W25_ReadBuf>
 801214a:	7dfb      	ldrb	r3, [r7, #23]
 801214c:	3301      	adds	r3, #1
 801214e:	75fb      	strb	r3, [r7, #23]
 8012150:	7dfb      	ldrb	r3, [r7, #23]
 8012152:	683a      	ldr	r2, [r7, #0]
 8012154:	429a      	cmp	r2, r3
 8012156:	d8ea      	bhi.n	801212e <USER_read+0x1a>
		return RES_OK;
 8012158:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801215a:	4618      	mov	r0, r3
 801215c:	3718      	adds	r7, #24
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012162:	b580      	push	{r7, lr}
 8012164:	b086      	sub	sp, #24
 8012166:	af00      	add	r7, sp, #0
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
 801216c:	603b      	str	r3, [r7, #0]
 801216e:	4603      	mov	r3, r0
 8012170:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t block_cnt = 0;
 8012172:	2300      	movs	r3, #0
 8012174:	75fb      	strb	r3, [r7, #23]
	for(block_cnt=0;block_cnt<count;block_cnt++) W25_WriteBuf(&buff[block_cnt*512], sector+block_cnt);
 8012176:	2300      	movs	r3, #0
 8012178:	75fb      	strb	r3, [r7, #23]
 801217a:	e010      	b.n	801219e <USER_write+0x3c>
 801217c:	7dfb      	ldrb	r3, [r7, #23]
 801217e:	025b      	lsls	r3, r3, #9
 8012180:	461a      	mov	r2, r3
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	1898      	adds	r0, r3, r2
 8012186:	7dfb      	ldrb	r3, [r7, #23]
 8012188:	b29a      	uxth	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	b29b      	uxth	r3, r3
 801218e:	4413      	add	r3, r2
 8012190:	b29b      	uxth	r3, r3
 8012192:	4619      	mov	r1, r3
 8012194:	f7f2 fb5e 	bl	8004854 <W25_WriteBuf>
 8012198:	7dfb      	ldrb	r3, [r7, #23]
 801219a:	3301      	adds	r3, #1
 801219c:	75fb      	strb	r3, [r7, #23]
 801219e:	7dfb      	ldrb	r3, [r7, #23]
 80121a0:	683a      	ldr	r2, [r7, #0]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d8ea      	bhi.n	801217c <USER_write+0x1a>

	return RES_OK;
 80121a6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3718      	adds	r7, #24
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80121b0:	b480      	push	{r7}
 80121b2:	b085      	sub	sp, #20
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	4603      	mov	r3, r0
 80121b8:	603a      	str	r2, [r7, #0]
 80121ba:	71fb      	strb	r3, [r7, #7]
 80121bc:	460b      	mov	r3, r1
 80121be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 80121c0:	2300      	movs	r3, #0
 80121c2:	73fb      	strb	r3, [r7, #15]
	    if(pdrv) return RES_PARERR;
 80121c4:	79fb      	ldrb	r3, [r7, #7]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <USER_ioctl+0x1e>
 80121ca:	2304      	movs	r3, #4
 80121cc:	e02b      	b.n	8012226 <USER_ioctl+0x76>
	    if(Stat&STA_NOINIT) return RES_NOTRDY;
 80121ce:	4b19      	ldr	r3, [pc, #100]	; (8012234 <USER_ioctl+0x84>)
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	f003 0301 	and.w	r3, r3, #1
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d001      	beq.n	80121e0 <USER_ioctl+0x30>
 80121dc:	2303      	movs	r3, #3
 80121de:	e022      	b.n	8012226 <USER_ioctl+0x76>
	    switch(cmd)
 80121e0:	79bb      	ldrb	r3, [r7, #6]
 80121e2:	2b03      	cmp	r3, #3
 80121e4:	d81b      	bhi.n	801221e <USER_ioctl+0x6e>
 80121e6:	a201      	add	r2, pc, #4	; (adr r2, 80121ec <USER_ioctl+0x3c>)
 80121e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ec:	08012219 	.word	0x08012219
 80121f0:	08012209 	.word	0x08012209
 80121f4:	080121fd 	.word	0x080121fd
 80121f8:	08012211 	.word	0x08012211
	    {
			case GET_SECTOR_SIZE:
				*(WORD*)buff=50; // Размер сектора
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2232      	movs	r2, #50	; 0x32
 8012200:	801a      	strh	r2, [r3, #0]
				res=RES_OK;
 8012202:	2300      	movs	r3, #0
 8012204:	73fb      	strb	r3, [r7, #15]
				break;
 8012206:	e00d      	b.n	8012224 <USER_ioctl+0x74>
			case GET_SECTOR_COUNT: *(WORD*)buff=50; break;
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	2232      	movs	r2, #50	; 0x32
 801220c:	801a      	strh	r2, [r3, #0]
 801220e:	e009      	b.n	8012224 <USER_ioctl+0x74>
			case GET_BLOCK_SIZE: *(WORD*)buff=50; break;
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2232      	movs	r2, #50	; 0x32
 8012214:	801a      	strh	r2, [r3, #0]
 8012216:	e005      	b.n	8012224 <USER_ioctl+0x74>
			case CTRL_SYNC: res=RES_OK; break;
 8012218:	2300      	movs	r3, #0
 801221a:	73fb      	strb	r3, [r7, #15]
 801221c:	e002      	b.n	8012224 <USER_ioctl+0x74>
			default: res = RES_PARERR; break;
 801221e:	2304      	movs	r3, #4
 8012220:	73fb      	strb	r3, [r7, #15]
 8012222:	bf00      	nop
	    }

	    return res;
 8012224:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8012226:	4618      	mov	r0, r3
 8012228:	3714      	adds	r7, #20
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	200003c1 	.word	0x200003c1

08012238 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	4603      	mov	r3, r0
 8012240:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012242:	79fb      	ldrb	r3, [r7, #7]
 8012244:	4a08      	ldr	r2, [pc, #32]	; (8012268 <disk_status+0x30>)
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4413      	add	r3, r2
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	79fa      	ldrb	r2, [r7, #7]
 8012250:	4905      	ldr	r1, [pc, #20]	; (8012268 <disk_status+0x30>)
 8012252:	440a      	add	r2, r1
 8012254:	7a12      	ldrb	r2, [r2, #8]
 8012256:	4610      	mov	r0, r2
 8012258:	4798      	blx	r3
 801225a:	4603      	mov	r3, r0
 801225c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3710      	adds	r7, #16
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	20000a38 	.word	0x20000a38

0801226c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	4603      	mov	r3, r0
 8012274:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012276:	2300      	movs	r3, #0
 8012278:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801227a:	79fb      	ldrb	r3, [r7, #7]
 801227c:	4a0d      	ldr	r2, [pc, #52]	; (80122b4 <disk_initialize+0x48>)
 801227e:	5cd3      	ldrb	r3, [r2, r3]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d111      	bne.n	80122a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	4a0b      	ldr	r2, [pc, #44]	; (80122b4 <disk_initialize+0x48>)
 8012288:	2101      	movs	r1, #1
 801228a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	4a09      	ldr	r2, [pc, #36]	; (80122b4 <disk_initialize+0x48>)
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	4413      	add	r3, r2
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	79fa      	ldrb	r2, [r7, #7]
 801229a:	4906      	ldr	r1, [pc, #24]	; (80122b4 <disk_initialize+0x48>)
 801229c:	440a      	add	r2, r1
 801229e:	7a12      	ldrb	r2, [r2, #8]
 80122a0:	4610      	mov	r0, r2
 80122a2:	4798      	blx	r3
 80122a4:	4603      	mov	r3, r0
 80122a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20000a38 	.word	0x20000a38

080122b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b087      	sub	sp, #28
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60b9      	str	r1, [r7, #8]
 80122c0:	607a      	str	r2, [r7, #4]
 80122c2:	603b      	str	r3, [r7, #0]
 80122c4:	4603      	mov	r3, r0
 80122c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80122c8:	7bfb      	ldrb	r3, [r7, #15]
 80122ca:	4a0a      	ldr	r2, [pc, #40]	; (80122f4 <disk_read+0x3c>)
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4413      	add	r3, r2
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	689c      	ldr	r4, [r3, #8]
 80122d4:	7bfb      	ldrb	r3, [r7, #15]
 80122d6:	4a07      	ldr	r2, [pc, #28]	; (80122f4 <disk_read+0x3c>)
 80122d8:	4413      	add	r3, r2
 80122da:	7a18      	ldrb	r0, [r3, #8]
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	68b9      	ldr	r1, [r7, #8]
 80122e2:	47a0      	blx	r4
 80122e4:	4603      	mov	r3, r0
 80122e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80122e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	371c      	adds	r7, #28
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd90      	pop	{r4, r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20000a38 	.word	0x20000a38

080122f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80122f8:	b590      	push	{r4, r7, lr}
 80122fa:	b087      	sub	sp, #28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60b9      	str	r1, [r7, #8]
 8012300:	607a      	str	r2, [r7, #4]
 8012302:	603b      	str	r3, [r7, #0]
 8012304:	4603      	mov	r3, r0
 8012306:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012308:	7bfb      	ldrb	r3, [r7, #15]
 801230a:	4a0a      	ldr	r2, [pc, #40]	; (8012334 <disk_write+0x3c>)
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	4413      	add	r3, r2
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	68dc      	ldr	r4, [r3, #12]
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	4a07      	ldr	r2, [pc, #28]	; (8012334 <disk_write+0x3c>)
 8012318:	4413      	add	r3, r2
 801231a:	7a18      	ldrb	r0, [r3, #8]
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	68b9      	ldr	r1, [r7, #8]
 8012322:	47a0      	blx	r4
 8012324:	4603      	mov	r3, r0
 8012326:	75fb      	strb	r3, [r7, #23]
  return res;
 8012328:	7dfb      	ldrb	r3, [r7, #23]
}
 801232a:	4618      	mov	r0, r3
 801232c:	371c      	adds	r7, #28
 801232e:	46bd      	mov	sp, r7
 8012330:	bd90      	pop	{r4, r7, pc}
 8012332:	bf00      	nop
 8012334:	20000a38 	.word	0x20000a38

08012338 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	4603      	mov	r3, r0
 8012340:	603a      	str	r2, [r7, #0]
 8012342:	71fb      	strb	r3, [r7, #7]
 8012344:	460b      	mov	r3, r1
 8012346:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012348:	79fb      	ldrb	r3, [r7, #7]
 801234a:	4a09      	ldr	r2, [pc, #36]	; (8012370 <disk_ioctl+0x38>)
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	4413      	add	r3, r2
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	691b      	ldr	r3, [r3, #16]
 8012354:	79fa      	ldrb	r2, [r7, #7]
 8012356:	4906      	ldr	r1, [pc, #24]	; (8012370 <disk_ioctl+0x38>)
 8012358:	440a      	add	r2, r1
 801235a:	7a10      	ldrb	r0, [r2, #8]
 801235c:	79b9      	ldrb	r1, [r7, #6]
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	4798      	blx	r3
 8012362:	4603      	mov	r3, r0
 8012364:	73fb      	strb	r3, [r7, #15]
  return res;
 8012366:	7bfb      	ldrb	r3, [r7, #15]
}
 8012368:	4618      	mov	r0, r3
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20000a38 	.word	0x20000a38

08012374 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	3301      	adds	r3, #1
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012384:	89fb      	ldrh	r3, [r7, #14]
 8012386:	021b      	lsls	r3, r3, #8
 8012388:	b21a      	sxth	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	b21b      	sxth	r3, r3
 8012390:	4313      	orrs	r3, r2
 8012392:	b21b      	sxth	r3, r3
 8012394:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012396:	89fb      	ldrh	r3, [r7, #14]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3714      	adds	r7, #20
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr

080123a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	3303      	adds	r3, #3
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	021b      	lsls	r3, r3, #8
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	3202      	adds	r2, #2
 80123bc:	7812      	ldrb	r2, [r2, #0]
 80123be:	4313      	orrs	r3, r2
 80123c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	021b      	lsls	r3, r3, #8
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	3201      	adds	r2, #1
 80123ca:	7812      	ldrb	r2, [r2, #0]
 80123cc:	4313      	orrs	r3, r2
 80123ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	021b      	lsls	r3, r3, #8
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	7812      	ldrb	r2, [r2, #0]
 80123d8:	4313      	orrs	r3, r2
 80123da:	60fb      	str	r3, [r7, #12]
	return rv;
 80123dc:	68fb      	ldr	r3, [r7, #12]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3714      	adds	r7, #20
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80123ea:	b480      	push	{r7}
 80123ec:	b083      	sub	sp, #12
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
 80123f2:	460b      	mov	r3, r1
 80123f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	1c5a      	adds	r2, r3, #1
 80123fa:	607a      	str	r2, [r7, #4]
 80123fc:	887a      	ldrh	r2, [r7, #2]
 80123fe:	b2d2      	uxtb	r2, r2
 8012400:	701a      	strb	r2, [r3, #0]
 8012402:	887b      	ldrh	r3, [r7, #2]
 8012404:	0a1b      	lsrs	r3, r3, #8
 8012406:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	1c5a      	adds	r2, r3, #1
 801240c:	607a      	str	r2, [r7, #4]
 801240e:	887a      	ldrh	r2, [r7, #2]
 8012410:	b2d2      	uxtb	r2, r2
 8012412:	701a      	strb	r2, [r3, #0]
}
 8012414:	bf00      	nop
 8012416:	370c      	adds	r7, #12
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	1c5a      	adds	r2, r3, #1
 801242e:	607a      	str	r2, [r7, #4]
 8012430:	683a      	ldr	r2, [r7, #0]
 8012432:	b2d2      	uxtb	r2, r2
 8012434:	701a      	strb	r2, [r3, #0]
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	0a1b      	lsrs	r3, r3, #8
 801243a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	1c5a      	adds	r2, r3, #1
 8012440:	607a      	str	r2, [r7, #4]
 8012442:	683a      	ldr	r2, [r7, #0]
 8012444:	b2d2      	uxtb	r2, r2
 8012446:	701a      	strb	r2, [r3, #0]
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	0a1b      	lsrs	r3, r3, #8
 801244c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	1c5a      	adds	r2, r3, #1
 8012452:	607a      	str	r2, [r7, #4]
 8012454:	683a      	ldr	r2, [r7, #0]
 8012456:	b2d2      	uxtb	r2, r2
 8012458:	701a      	strb	r2, [r3, #0]
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	0a1b      	lsrs	r3, r3, #8
 801245e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	1c5a      	adds	r2, r3, #1
 8012464:	607a      	str	r2, [r7, #4]
 8012466:	683a      	ldr	r2, [r7, #0]
 8012468:	b2d2      	uxtb	r2, r2
 801246a:	701a      	strb	r2, [r3, #0]
}
 801246c:	bf00      	nop
 801246e:	370c      	adds	r7, #12
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012478:	b480      	push	{r7}
 801247a:	b087      	sub	sp, #28
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00d      	beq.n	80124ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012492:	693a      	ldr	r2, [r7, #16]
 8012494:	1c53      	adds	r3, r2, #1
 8012496:	613b      	str	r3, [r7, #16]
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	1c59      	adds	r1, r3, #1
 801249c:	6179      	str	r1, [r7, #20]
 801249e:	7812      	ldrb	r2, [r2, #0]
 80124a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	3b01      	subs	r3, #1
 80124a6:	607b      	str	r3, [r7, #4]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d1f1      	bne.n	8012492 <mem_cpy+0x1a>
	}
}
 80124ae:	bf00      	nop
 80124b0:	371c      	adds	r7, #28
 80124b2:	46bd      	mov	sp, r7
 80124b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b8:	4770      	bx	lr

080124ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80124ba:	b480      	push	{r7}
 80124bc:	b087      	sub	sp, #28
 80124be:	af00      	add	r7, sp, #0
 80124c0:	60f8      	str	r0, [r7, #12]
 80124c2:	60b9      	str	r1, [r7, #8]
 80124c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	1c5a      	adds	r2, r3, #1
 80124ce:	617a      	str	r2, [r7, #20]
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	b2d2      	uxtb	r2, r2
 80124d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	3b01      	subs	r3, #1
 80124da:	607b      	str	r3, [r7, #4]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d1f3      	bne.n	80124ca <mem_set+0x10>
}
 80124e2:	bf00      	nop
 80124e4:	bf00      	nop
 80124e6:	371c      	adds	r7, #28
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80124f0:	b480      	push	{r7}
 80124f2:	b089      	sub	sp, #36	; 0x24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	61fb      	str	r3, [r7, #28]
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012504:	2300      	movs	r3, #0
 8012506:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	1c5a      	adds	r2, r3, #1
 801250c:	61fa      	str	r2, [r7, #28]
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	4619      	mov	r1, r3
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	61ba      	str	r2, [r7, #24]
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	1acb      	subs	r3, r1, r3
 801251c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	3b01      	subs	r3, #1
 8012522:	607b      	str	r3, [r7, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d002      	beq.n	8012530 <mem_cmp+0x40>
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d0eb      	beq.n	8012508 <mem_cmp+0x18>

	return r;
 8012530:	697b      	ldr	r3, [r7, #20]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3724      	adds	r7, #36	; 0x24
 8012536:	46bd      	mov	sp, r7
 8012538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253c:	4770      	bx	lr

0801253e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801253e:	b480      	push	{r7}
 8012540:	b083      	sub	sp, #12
 8012542:	af00      	add	r7, sp, #0
 8012544:	6078      	str	r0, [r7, #4]
 8012546:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012548:	e002      	b.n	8012550 <chk_chr+0x12>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	3301      	adds	r3, #1
 801254e:	607b      	str	r3, [r7, #4]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d005      	beq.n	8012564 <chk_chr+0x26>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	461a      	mov	r2, r3
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	4293      	cmp	r3, r2
 8012562:	d1f2      	bne.n	801254a <chk_chr+0xc>
	return *str;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	781b      	ldrb	r3, [r3, #0]
}
 8012568:	4618      	mov	r0, r3
 801256a:	370c      	adds	r7, #12
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012574:	b480      	push	{r7}
 8012576:	b085      	sub	sp, #20
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801257e:	2300      	movs	r3, #0
 8012580:	60bb      	str	r3, [r7, #8]
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	60fb      	str	r3, [r7, #12]
 8012586:	e029      	b.n	80125dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012588:	4a27      	ldr	r2, [pc, #156]	; (8012628 <chk_lock+0xb4>)
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	011b      	lsls	r3, r3, #4
 801258e:	4413      	add	r3, r2
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d01d      	beq.n	80125d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012596:	4a24      	ldr	r2, [pc, #144]	; (8012628 <chk_lock+0xb4>)
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	011b      	lsls	r3, r3, #4
 801259c:	4413      	add	r3, r2
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d116      	bne.n	80125d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80125a8:	4a1f      	ldr	r2, [pc, #124]	; (8012628 <chk_lock+0xb4>)
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	011b      	lsls	r3, r3, #4
 80125ae:	4413      	add	r3, r2
 80125b0:	3304      	adds	r3, #4
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d10c      	bne.n	80125d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80125bc:	4a1a      	ldr	r2, [pc, #104]	; (8012628 <chk_lock+0xb4>)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	011b      	lsls	r3, r3, #4
 80125c2:	4413      	add	r3, r2
 80125c4:	3308      	adds	r3, #8
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d102      	bne.n	80125d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80125d0:	e007      	b.n	80125e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80125d2:	2301      	movs	r3, #1
 80125d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	3301      	adds	r3, #1
 80125da:	60fb      	str	r3, [r7, #12]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d9d2      	bls.n	8012588 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d109      	bne.n	80125fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d102      	bne.n	80125f4 <chk_lock+0x80>
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	2b02      	cmp	r3, #2
 80125f2:	d101      	bne.n	80125f8 <chk_lock+0x84>
 80125f4:	2300      	movs	r3, #0
 80125f6:	e010      	b.n	801261a <chk_lock+0xa6>
 80125f8:	2312      	movs	r3, #18
 80125fa:	e00e      	b.n	801261a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d108      	bne.n	8012614 <chk_lock+0xa0>
 8012602:	4a09      	ldr	r2, [pc, #36]	; (8012628 <chk_lock+0xb4>)
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	011b      	lsls	r3, r3, #4
 8012608:	4413      	add	r3, r2
 801260a:	330c      	adds	r3, #12
 801260c:	881b      	ldrh	r3, [r3, #0]
 801260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012612:	d101      	bne.n	8012618 <chk_lock+0xa4>
 8012614:	2310      	movs	r3, #16
 8012616:	e000      	b.n	801261a <chk_lock+0xa6>
 8012618:	2300      	movs	r3, #0
}
 801261a:	4618      	mov	r0, r3
 801261c:	3714      	adds	r7, #20
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	20000a18 	.word	0x20000a18

0801262c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801262c:	b480      	push	{r7}
 801262e:	b083      	sub	sp, #12
 8012630:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012632:	2300      	movs	r3, #0
 8012634:	607b      	str	r3, [r7, #4]
 8012636:	e002      	b.n	801263e <enq_lock+0x12>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	3301      	adds	r3, #1
 801263c:	607b      	str	r3, [r7, #4]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b01      	cmp	r3, #1
 8012642:	d806      	bhi.n	8012652 <enq_lock+0x26>
 8012644:	4a09      	ldr	r2, [pc, #36]	; (801266c <enq_lock+0x40>)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	011b      	lsls	r3, r3, #4
 801264a:	4413      	add	r3, r2
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1f2      	bne.n	8012638 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2b02      	cmp	r3, #2
 8012656:	bf14      	ite	ne
 8012658:	2301      	movne	r3, #1
 801265a:	2300      	moveq	r3, #0
 801265c:	b2db      	uxtb	r3, r3
}
 801265e:	4618      	mov	r0, r3
 8012660:	370c      	adds	r7, #12
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop
 801266c:	20000a18 	.word	0x20000a18

08012670 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012670:	b480      	push	{r7}
 8012672:	b085      	sub	sp, #20
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	e01f      	b.n	80126c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012680:	4a41      	ldr	r2, [pc, #260]	; (8012788 <inc_lock+0x118>)
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	011b      	lsls	r3, r3, #4
 8012686:	4413      	add	r3, r2
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	429a      	cmp	r2, r3
 8012690:	d113      	bne.n	80126ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012692:	4a3d      	ldr	r2, [pc, #244]	; (8012788 <inc_lock+0x118>)
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	011b      	lsls	r3, r3, #4
 8012698:	4413      	add	r3, r2
 801269a:	3304      	adds	r3, #4
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d109      	bne.n	80126ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80126a6:	4a38      	ldr	r2, [pc, #224]	; (8012788 <inc_lock+0x118>)
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	011b      	lsls	r3, r3, #4
 80126ac:	4413      	add	r3, r2
 80126ae:	3308      	adds	r3, #8
 80126b0:	681a      	ldr	r2, [r3, #0]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d006      	beq.n	80126c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	3301      	adds	r3, #1
 80126be:	60fb      	str	r3, [r7, #12]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d9dc      	bls.n	8012680 <inc_lock+0x10>
 80126c6:	e000      	b.n	80126ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80126c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d132      	bne.n	8012736 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80126d0:	2300      	movs	r3, #0
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	e002      	b.n	80126dc <inc_lock+0x6c>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	3301      	adds	r3, #1
 80126da:	60fb      	str	r3, [r7, #12]
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d806      	bhi.n	80126f0 <inc_lock+0x80>
 80126e2:	4a29      	ldr	r2, [pc, #164]	; (8012788 <inc_lock+0x118>)
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	011b      	lsls	r3, r3, #4
 80126e8:	4413      	add	r3, r2
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1f2      	bne.n	80126d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d101      	bne.n	80126fa <inc_lock+0x8a>
 80126f6:	2300      	movs	r3, #0
 80126f8:	e040      	b.n	801277c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	4922      	ldr	r1, [pc, #136]	; (8012788 <inc_lock+0x118>)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	011b      	lsls	r3, r3, #4
 8012704:	440b      	add	r3, r1
 8012706:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	689a      	ldr	r2, [r3, #8]
 801270c:	491e      	ldr	r1, [pc, #120]	; (8012788 <inc_lock+0x118>)
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	011b      	lsls	r3, r3, #4
 8012712:	440b      	add	r3, r1
 8012714:	3304      	adds	r3, #4
 8012716:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	695a      	ldr	r2, [r3, #20]
 801271c:	491a      	ldr	r1, [pc, #104]	; (8012788 <inc_lock+0x118>)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	011b      	lsls	r3, r3, #4
 8012722:	440b      	add	r3, r1
 8012724:	3308      	adds	r3, #8
 8012726:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012728:	4a17      	ldr	r2, [pc, #92]	; (8012788 <inc_lock+0x118>)
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	011b      	lsls	r3, r3, #4
 801272e:	4413      	add	r3, r2
 8012730:	330c      	adds	r3, #12
 8012732:	2200      	movs	r2, #0
 8012734:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d009      	beq.n	8012750 <inc_lock+0xe0>
 801273c:	4a12      	ldr	r2, [pc, #72]	; (8012788 <inc_lock+0x118>)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	011b      	lsls	r3, r3, #4
 8012742:	4413      	add	r3, r2
 8012744:	330c      	adds	r3, #12
 8012746:	881b      	ldrh	r3, [r3, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <inc_lock+0xe0>
 801274c:	2300      	movs	r3, #0
 801274e:	e015      	b.n	801277c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d108      	bne.n	8012768 <inc_lock+0xf8>
 8012756:	4a0c      	ldr	r2, [pc, #48]	; (8012788 <inc_lock+0x118>)
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	011b      	lsls	r3, r3, #4
 801275c:	4413      	add	r3, r2
 801275e:	330c      	adds	r3, #12
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	3301      	adds	r3, #1
 8012764:	b29a      	uxth	r2, r3
 8012766:	e001      	b.n	801276c <inc_lock+0xfc>
 8012768:	f44f 7280 	mov.w	r2, #256	; 0x100
 801276c:	4906      	ldr	r1, [pc, #24]	; (8012788 <inc_lock+0x118>)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	011b      	lsls	r3, r3, #4
 8012772:	440b      	add	r3, r1
 8012774:	330c      	adds	r3, #12
 8012776:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	3301      	adds	r3, #1
}
 801277c:	4618      	mov	r0, r3
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr
 8012788:	20000a18 	.word	0x20000a18

0801278c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	3b01      	subs	r3, #1
 8012798:	607b      	str	r3, [r7, #4]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d825      	bhi.n	80127ec <dec_lock+0x60>
		n = Files[i].ctr;
 80127a0:	4a17      	ldr	r2, [pc, #92]	; (8012800 <dec_lock+0x74>)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	011b      	lsls	r3, r3, #4
 80127a6:	4413      	add	r3, r2
 80127a8:	330c      	adds	r3, #12
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80127ae:	89fb      	ldrh	r3, [r7, #14]
 80127b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127b4:	d101      	bne.n	80127ba <dec_lock+0x2e>
 80127b6:	2300      	movs	r3, #0
 80127b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80127ba:	89fb      	ldrh	r3, [r7, #14]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d002      	beq.n	80127c6 <dec_lock+0x3a>
 80127c0:	89fb      	ldrh	r3, [r7, #14]
 80127c2:	3b01      	subs	r3, #1
 80127c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80127c6:	4a0e      	ldr	r2, [pc, #56]	; (8012800 <dec_lock+0x74>)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	011b      	lsls	r3, r3, #4
 80127cc:	4413      	add	r3, r2
 80127ce:	330c      	adds	r3, #12
 80127d0:	89fa      	ldrh	r2, [r7, #14]
 80127d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80127d4:	89fb      	ldrh	r3, [r7, #14]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d105      	bne.n	80127e6 <dec_lock+0x5a>
 80127da:	4a09      	ldr	r2, [pc, #36]	; (8012800 <dec_lock+0x74>)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	011b      	lsls	r3, r3, #4
 80127e0:	4413      	add	r3, r2
 80127e2:	2200      	movs	r2, #0
 80127e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80127e6:	2300      	movs	r3, #0
 80127e8:	737b      	strb	r3, [r7, #13]
 80127ea:	e001      	b.n	80127f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80127ec:	2302      	movs	r3, #2
 80127ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80127f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3714      	adds	r7, #20
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr
 80127fe:	bf00      	nop
 8012800:	20000a18 	.word	0x20000a18

08012804 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012804:	b480      	push	{r7}
 8012806:	b085      	sub	sp, #20
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801280c:	2300      	movs	r3, #0
 801280e:	60fb      	str	r3, [r7, #12]
 8012810:	e010      	b.n	8012834 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012812:	4a0d      	ldr	r2, [pc, #52]	; (8012848 <clear_lock+0x44>)
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	011b      	lsls	r3, r3, #4
 8012818:	4413      	add	r3, r2
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	429a      	cmp	r2, r3
 8012820:	d105      	bne.n	801282e <clear_lock+0x2a>
 8012822:	4a09      	ldr	r2, [pc, #36]	; (8012848 <clear_lock+0x44>)
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	011b      	lsls	r3, r3, #4
 8012828:	4413      	add	r3, r2
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	3301      	adds	r3, #1
 8012832:	60fb      	str	r3, [r7, #12]
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d9eb      	bls.n	8012812 <clear_lock+0xe>
	}
}
 801283a:	bf00      	nop
 801283c:	bf00      	nop
 801283e:	3714      	adds	r7, #20
 8012840:	46bd      	mov	sp, r7
 8012842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012846:	4770      	bx	lr
 8012848:	20000a18 	.word	0x20000a18

0801284c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b086      	sub	sp, #24
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	78db      	ldrb	r3, [r3, #3]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d034      	beq.n	80128ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012864:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	7858      	ldrb	r0, [r3, #1]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012870:	2301      	movs	r3, #1
 8012872:	697a      	ldr	r2, [r7, #20]
 8012874:	f7ff fd40 	bl	80122f8 <disk_write>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d002      	beq.n	8012884 <sync_window+0x38>
			res = FR_DISK_ERR;
 801287e:	2301      	movs	r3, #1
 8012880:	73fb      	strb	r3, [r7, #15]
 8012882:	e022      	b.n	80128ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6a1b      	ldr	r3, [r3, #32]
 801288e:	697a      	ldr	r2, [r7, #20]
 8012890:	1ad2      	subs	r2, r2, r3
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	429a      	cmp	r2, r3
 8012898:	d217      	bcs.n	80128ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	789b      	ldrb	r3, [r3, #2]
 801289e:	613b      	str	r3, [r7, #16]
 80128a0:	e010      	b.n	80128c4 <sync_window+0x78>
					wsect += fs->fsize;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	699b      	ldr	r3, [r3, #24]
 80128a6:	697a      	ldr	r2, [r7, #20]
 80128a8:	4413      	add	r3, r2
 80128aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	7858      	ldrb	r0, [r3, #1]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128b6:	2301      	movs	r3, #1
 80128b8:	697a      	ldr	r2, [r7, #20]
 80128ba:	f7ff fd1d 	bl	80122f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	3b01      	subs	r3, #1
 80128c2:	613b      	str	r3, [r7, #16]
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d8eb      	bhi.n	80128a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3718      	adds	r7, #24
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e6:	683a      	ldr	r2, [r7, #0]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d01b      	beq.n	8012924 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7ff ffad 	bl	801284c <sync_window>
 80128f2:	4603      	mov	r3, r0
 80128f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80128f6:	7bfb      	ldrb	r3, [r7, #15]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d113      	bne.n	8012924 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	7858      	ldrb	r0, [r3, #1]
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012906:	2301      	movs	r3, #1
 8012908:	683a      	ldr	r2, [r7, #0]
 801290a:	f7ff fcd5 	bl	80122b8 <disk_read>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d004      	beq.n	801291e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012914:	f04f 33ff 	mov.w	r3, #4294967295
 8012918:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801291a:	2301      	movs	r3, #1
 801291c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	683a      	ldr	r2, [r7, #0]
 8012922:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012924:	7bfb      	ldrb	r3, [r7, #15]
}
 8012926:	4618      	mov	r0, r3
 8012928:	3710      	adds	r7, #16
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
	...

08012930 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f7ff ff87 	bl	801284c <sync_window>
 801293e:	4603      	mov	r3, r0
 8012940:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012942:	7bfb      	ldrb	r3, [r7, #15]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d158      	bne.n	80129fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	2b03      	cmp	r3, #3
 801294e:	d148      	bne.n	80129e2 <sync_fs+0xb2>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	791b      	ldrb	r3, [r3, #4]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d144      	bne.n	80129e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	3330      	adds	r3, #48	; 0x30
 801295c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012960:	2100      	movs	r1, #0
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff fda9 	bl	80124ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	3330      	adds	r3, #48	; 0x30
 801296c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012970:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012974:	4618      	mov	r0, r3
 8012976:	f7ff fd38 	bl	80123ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	3330      	adds	r3, #48	; 0x30
 801297e:	4921      	ldr	r1, [pc, #132]	; (8012a04 <sync_fs+0xd4>)
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff fd4d 	bl	8012420 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	3330      	adds	r3, #48	; 0x30
 801298a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801298e:	491e      	ldr	r1, [pc, #120]	; (8012a08 <sync_fs+0xd8>)
 8012990:	4618      	mov	r0, r3
 8012992:	f7ff fd45 	bl	8012420 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3330      	adds	r3, #48	; 0x30
 801299a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	691b      	ldr	r3, [r3, #16]
 80129a2:	4619      	mov	r1, r3
 80129a4:	4610      	mov	r0, r2
 80129a6:	f7ff fd3b 	bl	8012420 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	3330      	adds	r3, #48	; 0x30
 80129ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	4619      	mov	r1, r3
 80129b8:	4610      	mov	r0, r2
 80129ba:	f7ff fd31 	bl	8012420 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	69db      	ldr	r3, [r3, #28]
 80129c2:	1c5a      	adds	r2, r3, #1
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	7858      	ldrb	r0, [r3, #1]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129d6:	2301      	movs	r3, #1
 80129d8:	f7ff fc8e 	bl	80122f8 <disk_write>
			fs->fsi_flag = 0;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2200      	movs	r2, #0
 80129e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	785b      	ldrb	r3, [r3, #1]
 80129e6:	2200      	movs	r2, #0
 80129e8:	2100      	movs	r1, #0
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7ff fca4 	bl	8012338 <disk_ioctl>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <sync_fs+0xca>
 80129f6:	2301      	movs	r3, #1
 80129f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80129fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	41615252 	.word	0x41615252
 8012a08:	61417272 	.word	0x61417272

08012a0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	3b02      	subs	r3, #2
 8012a1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	695b      	ldr	r3, [r3, #20]
 8012a20:	3b02      	subs	r3, #2
 8012a22:	683a      	ldr	r2, [r7, #0]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d301      	bcc.n	8012a2c <clust2sect+0x20>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e008      	b.n	8012a3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	895b      	ldrh	r3, [r3, #10]
 8012a30:	461a      	mov	r2, r3
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	fb03 f202 	mul.w	r2, r3, r2
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a3c:	4413      	add	r3, r2
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a4a:	b580      	push	{r7, lr}
 8012a4c:	b086      	sub	sp, #24
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d904      	bls.n	8012a6a <get_fat+0x20>
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	695b      	ldr	r3, [r3, #20]
 8012a64:	683a      	ldr	r2, [r7, #0]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d302      	bcc.n	8012a70 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	617b      	str	r3, [r7, #20]
 8012a6e:	e08f      	b.n	8012b90 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a70:	f04f 33ff 	mov.w	r3, #4294967295
 8012a74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	2b03      	cmp	r3, #3
 8012a7c:	d062      	beq.n	8012b44 <get_fat+0xfa>
 8012a7e:	2b03      	cmp	r3, #3
 8012a80:	dc7c      	bgt.n	8012b7c <get_fat+0x132>
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d002      	beq.n	8012a8c <get_fat+0x42>
 8012a86:	2b02      	cmp	r3, #2
 8012a88:	d042      	beq.n	8012b10 <get_fat+0xc6>
 8012a8a:	e077      	b.n	8012b7c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	60fb      	str	r3, [r7, #12]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	085b      	lsrs	r3, r3, #1
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	4413      	add	r3, r2
 8012a98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	6a1a      	ldr	r2, [r3, #32]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	0a5b      	lsrs	r3, r3, #9
 8012aa2:	4413      	add	r3, r2
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	6938      	ldr	r0, [r7, #16]
 8012aa8:	f7ff ff14 	bl	80128d4 <move_window>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d167      	bne.n	8012b82 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	1c5a      	adds	r2, r3, #1
 8012ab6:	60fa      	str	r2, [r7, #12]
 8012ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	4413      	add	r3, r2
 8012ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ac4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	6a1a      	ldr	r2, [r3, #32]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	0a5b      	lsrs	r3, r3, #9
 8012ace:	4413      	add	r3, r2
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	6938      	ldr	r0, [r7, #16]
 8012ad4:	f7ff fefe 	bl	80128d4 <move_window>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d153      	bne.n	8012b86 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ae4:	693a      	ldr	r2, [r7, #16]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012aec:	021b      	lsls	r3, r3, #8
 8012aee:	461a      	mov	r2, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	4313      	orrs	r3, r2
 8012af4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	f003 0301 	and.w	r3, r3, #1
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d002      	beq.n	8012b06 <get_fat+0xbc>
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	091b      	lsrs	r3, r3, #4
 8012b04:	e002      	b.n	8012b0c <get_fat+0xc2>
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b0c:	617b      	str	r3, [r7, #20]
			break;
 8012b0e:	e03f      	b.n	8012b90 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	6a1a      	ldr	r2, [r3, #32]
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	0a1b      	lsrs	r3, r3, #8
 8012b18:	4413      	add	r3, r2
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	6938      	ldr	r0, [r7, #16]
 8012b1e:	f7ff fed9 	bl	80128d4 <move_window>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d130      	bne.n	8012b8a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	005b      	lsls	r3, r3, #1
 8012b32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012b36:	4413      	add	r3, r2
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7ff fc1b 	bl	8012374 <ld_word>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	617b      	str	r3, [r7, #20]
			break;
 8012b42:	e025      	b.n	8012b90 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	6a1a      	ldr	r2, [r3, #32]
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	09db      	lsrs	r3, r3, #7
 8012b4c:	4413      	add	r3, r2
 8012b4e:	4619      	mov	r1, r3
 8012b50:	6938      	ldr	r0, [r7, #16]
 8012b52:	f7ff febf 	bl	80128d4 <move_window>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d118      	bne.n	8012b8e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	009b      	lsls	r3, r3, #2
 8012b66:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012b6a:	4413      	add	r3, r2
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7ff fc19 	bl	80123a4 <ld_dword>
 8012b72:	4603      	mov	r3, r0
 8012b74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012b78:	617b      	str	r3, [r7, #20]
			break;
 8012b7a:	e009      	b.n	8012b90 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	617b      	str	r3, [r7, #20]
 8012b80:	e006      	b.n	8012b90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b82:	bf00      	nop
 8012b84:	e004      	b.n	8012b90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b86:	bf00      	nop
 8012b88:	e002      	b.n	8012b90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b8a:	bf00      	nop
 8012b8c:	e000      	b.n	8012b90 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b8e:	bf00      	nop
		}
	}

	return val;
 8012b90:	697b      	ldr	r3, [r7, #20]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3718      	adds	r7, #24
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}

08012b9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b9a:	b590      	push	{r4, r7, lr}
 8012b9c:	b089      	sub	sp, #36	; 0x24
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	60f8      	str	r0, [r7, #12]
 8012ba2:	60b9      	str	r1, [r7, #8]
 8012ba4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012ba6:	2302      	movs	r3, #2
 8012ba8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	f240 80d2 	bls.w	8012d56 <put_fat+0x1bc>
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	f080 80cc 	bcs.w	8012d56 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	2b03      	cmp	r3, #3
 8012bc4:	f000 8096 	beq.w	8012cf4 <put_fat+0x15a>
 8012bc8:	2b03      	cmp	r3, #3
 8012bca:	f300 80cd 	bgt.w	8012d68 <put_fat+0x1ce>
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	d002      	beq.n	8012bd8 <put_fat+0x3e>
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	d06e      	beq.n	8012cb4 <put_fat+0x11a>
 8012bd6:	e0c7      	b.n	8012d68 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	61bb      	str	r3, [r7, #24]
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	085b      	lsrs	r3, r3, #1
 8012be0:	69ba      	ldr	r2, [r7, #24]
 8012be2:	4413      	add	r3, r2
 8012be4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	6a1a      	ldr	r2, [r3, #32]
 8012bea:	69bb      	ldr	r3, [r7, #24]
 8012bec:	0a5b      	lsrs	r3, r3, #9
 8012bee:	4413      	add	r3, r2
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	68f8      	ldr	r0, [r7, #12]
 8012bf4:	f7ff fe6e 	bl	80128d4 <move_window>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bfc:	7ffb      	ldrb	r3, [r7, #31]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	f040 80ab 	bne.w	8012d5a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	1c59      	adds	r1, r3, #1
 8012c0e:	61b9      	str	r1, [r7, #24]
 8012c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c14:	4413      	add	r3, r2
 8012c16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	f003 0301 	and.w	r3, r3, #1
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d00d      	beq.n	8012c3e <put_fat+0xa4>
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	b25b      	sxtb	r3, r3
 8012c28:	f003 030f 	and.w	r3, r3, #15
 8012c2c:	b25a      	sxtb	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	011b      	lsls	r3, r3, #4
 8012c34:	b25b      	sxtb	r3, r3
 8012c36:	4313      	orrs	r3, r2
 8012c38:	b25b      	sxtb	r3, r3
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	e001      	b.n	8012c42 <put_fat+0xa8>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	697a      	ldr	r2, [r7, #20]
 8012c44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	6a1a      	ldr	r2, [r3, #32]
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	0a5b      	lsrs	r3, r3, #9
 8012c54:	4413      	add	r3, r2
 8012c56:	4619      	mov	r1, r3
 8012c58:	68f8      	ldr	r0, [r7, #12]
 8012c5a:	f7ff fe3b 	bl	80128d4 <move_window>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c62:	7ffb      	ldrb	r3, [r7, #31]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d17a      	bne.n	8012d5e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c74:	4413      	add	r3, r2
 8012c76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	f003 0301 	and.w	r3, r3, #1
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d003      	beq.n	8012c8a <put_fat+0xf0>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	091b      	lsrs	r3, r3, #4
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	e00e      	b.n	8012ca8 <put_fat+0x10e>
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	b25b      	sxtb	r3, r3
 8012c90:	f023 030f 	bic.w	r3, r3, #15
 8012c94:	b25a      	sxtb	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	0a1b      	lsrs	r3, r3, #8
 8012c9a:	b25b      	sxtb	r3, r3
 8012c9c:	f003 030f 	and.w	r3, r3, #15
 8012ca0:	b25b      	sxtb	r3, r3
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	b25b      	sxtb	r3, r3
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	697a      	ldr	r2, [r7, #20]
 8012caa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2201      	movs	r2, #1
 8012cb0:	70da      	strb	r2, [r3, #3]
			break;
 8012cb2:	e059      	b.n	8012d68 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	6a1a      	ldr	r2, [r3, #32]
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	0a1b      	lsrs	r3, r3, #8
 8012cbc:	4413      	add	r3, r2
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f7ff fe07 	bl	80128d4 <move_window>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cca:	7ffb      	ldrb	r3, [r7, #31]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d148      	bne.n	8012d62 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	005b      	lsls	r3, r3, #1
 8012cda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012cde:	4413      	add	r3, r2
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	b292      	uxth	r2, r2
 8012ce4:	4611      	mov	r1, r2
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7ff fb7f 	bl	80123ea <st_word>
			fs->wflag = 1;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	70da      	strb	r2, [r3, #3]
			break;
 8012cf2:	e039      	b.n	8012d68 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	6a1a      	ldr	r2, [r3, #32]
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	09db      	lsrs	r3, r3, #7
 8012cfc:	4413      	add	r3, r2
 8012cfe:	4619      	mov	r1, r3
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f7ff fde7 	bl	80128d4 <move_window>
 8012d06:	4603      	mov	r3, r0
 8012d08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012d0a:	7ffb      	ldrb	r3, [r7, #31]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d12a      	bne.n	8012d66 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d24:	4413      	add	r3, r2
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7ff fb3c 	bl	80123a4 <ld_dword>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012d32:	4323      	orrs	r3, r4
 8012d34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012d44:	4413      	add	r3, r2
 8012d46:	6879      	ldr	r1, [r7, #4]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7ff fb69 	bl	8012420 <st_dword>
			fs->wflag = 1;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2201      	movs	r2, #1
 8012d52:	70da      	strb	r2, [r3, #3]
			break;
 8012d54:	e008      	b.n	8012d68 <put_fat+0x1ce>
		}
	}
 8012d56:	bf00      	nop
 8012d58:	e006      	b.n	8012d68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d5a:	bf00      	nop
 8012d5c:	e004      	b.n	8012d68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d5e:	bf00      	nop
 8012d60:	e002      	b.n	8012d68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d62:	bf00      	nop
 8012d64:	e000      	b.n	8012d68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012d66:	bf00      	nop
	return res;
 8012d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3724      	adds	r7, #36	; 0x24
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd90      	pop	{r4, r7, pc}

08012d72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b088      	sub	sp, #32
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	60f8      	str	r0, [r7, #12]
 8012d7a:	60b9      	str	r1, [r7, #8]
 8012d7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d904      	bls.n	8012d98 <remove_chain+0x26>
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	695b      	ldr	r3, [r3, #20]
 8012d92:	68ba      	ldr	r2, [r7, #8]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d301      	bcc.n	8012d9c <remove_chain+0x2a>
 8012d98:	2302      	movs	r3, #2
 8012d9a:	e04b      	b.n	8012e34 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00c      	beq.n	8012dbc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012da2:	f04f 32ff 	mov.w	r2, #4294967295
 8012da6:	6879      	ldr	r1, [r7, #4]
 8012da8:	69b8      	ldr	r0, [r7, #24]
 8012daa:	f7ff fef6 	bl	8012b9a <put_fat>
 8012dae:	4603      	mov	r3, r0
 8012db0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012db2:	7ffb      	ldrb	r3, [r7, #31]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d001      	beq.n	8012dbc <remove_chain+0x4a>
 8012db8:	7ffb      	ldrb	r3, [r7, #31]
 8012dba:	e03b      	b.n	8012e34 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012dbc:	68b9      	ldr	r1, [r7, #8]
 8012dbe:	68f8      	ldr	r0, [r7, #12]
 8012dc0:	f7ff fe43 	bl	8012a4a <get_fat>
 8012dc4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d031      	beq.n	8012e30 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d101      	bne.n	8012dd6 <remove_chain+0x64>
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	e02e      	b.n	8012e34 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ddc:	d101      	bne.n	8012de2 <remove_chain+0x70>
 8012dde:	2301      	movs	r3, #1
 8012de0:	e028      	b.n	8012e34 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012de2:	2200      	movs	r2, #0
 8012de4:	68b9      	ldr	r1, [r7, #8]
 8012de6:	69b8      	ldr	r0, [r7, #24]
 8012de8:	f7ff fed7 	bl	8012b9a <put_fat>
 8012dec:	4603      	mov	r3, r0
 8012dee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012df0:	7ffb      	ldrb	r3, [r7, #31]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d001      	beq.n	8012dfa <remove_chain+0x88>
 8012df6:	7ffb      	ldrb	r3, [r7, #31]
 8012df8:	e01c      	b.n	8012e34 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	691a      	ldr	r2, [r3, #16]
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	695b      	ldr	r3, [r3, #20]
 8012e02:	3b02      	subs	r3, #2
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d20b      	bcs.n	8012e20 <remove_chain+0xae>
			fs->free_clst++;
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	691b      	ldr	r3, [r3, #16]
 8012e0c:	1c5a      	adds	r2, r3, #1
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	791b      	ldrb	r3, [r3, #4]
 8012e16:	f043 0301 	orr.w	r3, r3, #1
 8012e1a:	b2da      	uxtb	r2, r3
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	695b      	ldr	r3, [r3, #20]
 8012e28:	68ba      	ldr	r2, [r7, #8]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d3c6      	bcc.n	8012dbc <remove_chain+0x4a>
 8012e2e:	e000      	b.n	8012e32 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012e30:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012e32:	2300      	movs	r3, #0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3720      	adds	r7, #32
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b088      	sub	sp, #32
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d10d      	bne.n	8012e6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d004      	beq.n	8012e68 <create_chain+0x2c>
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	695b      	ldr	r3, [r3, #20]
 8012e62:	69ba      	ldr	r2, [r7, #24]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d31b      	bcc.n	8012ea0 <create_chain+0x64>
 8012e68:	2301      	movs	r3, #1
 8012e6a:	61bb      	str	r3, [r7, #24]
 8012e6c:	e018      	b.n	8012ea0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012e6e:	6839      	ldr	r1, [r7, #0]
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7ff fdea 	bl	8012a4a <get_fat>
 8012e76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d801      	bhi.n	8012e82 <create_chain+0x46>
 8012e7e:	2301      	movs	r3, #1
 8012e80:	e070      	b.n	8012f64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e88:	d101      	bne.n	8012e8e <create_chain+0x52>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	e06a      	b.n	8012f64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	695b      	ldr	r3, [r3, #20]
 8012e92:	68fa      	ldr	r2, [r7, #12]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d201      	bcs.n	8012e9c <create_chain+0x60>
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	e063      	b.n	8012f64 <create_chain+0x128>
		scl = clst;
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	695b      	ldr	r3, [r3, #20]
 8012eae:	69fa      	ldr	r2, [r7, #28]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d307      	bcc.n	8012ec4 <create_chain+0x88>
				ncl = 2;
 8012eb4:	2302      	movs	r3, #2
 8012eb6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012eb8:	69fa      	ldr	r2, [r7, #28]
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d901      	bls.n	8012ec4 <create_chain+0x88>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	e04f      	b.n	8012f64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012ec4:	69f9      	ldr	r1, [r7, #28]
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7ff fdbf 	bl	8012a4a <get_fat>
 8012ecc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d00e      	beq.n	8012ef2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2b01      	cmp	r3, #1
 8012ed8:	d003      	beq.n	8012ee2 <create_chain+0xa6>
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee0:	d101      	bne.n	8012ee6 <create_chain+0xaa>
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	e03e      	b.n	8012f64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012ee6:	69fa      	ldr	r2, [r7, #28]
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d1da      	bne.n	8012ea4 <create_chain+0x68>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	e038      	b.n	8012f64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012ef2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ef8:	69f9      	ldr	r1, [r7, #28]
 8012efa:	6938      	ldr	r0, [r7, #16]
 8012efc:	f7ff fe4d 	bl	8012b9a <put_fat>
 8012f00:	4603      	mov	r3, r0
 8012f02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012f04:	7dfb      	ldrb	r3, [r7, #23]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d109      	bne.n	8012f1e <create_chain+0xe2>
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d006      	beq.n	8012f1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012f10:	69fa      	ldr	r2, [r7, #28]
 8012f12:	6839      	ldr	r1, [r7, #0]
 8012f14:	6938      	ldr	r0, [r7, #16]
 8012f16:	f7ff fe40 	bl	8012b9a <put_fat>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012f1e:	7dfb      	ldrb	r3, [r7, #23]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d116      	bne.n	8012f52 <create_chain+0x116>
		fs->last_clst = ncl;
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	69fa      	ldr	r2, [r7, #28]
 8012f28:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	691a      	ldr	r2, [r3, #16]
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	695b      	ldr	r3, [r3, #20]
 8012f32:	3b02      	subs	r3, #2
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d804      	bhi.n	8012f42 <create_chain+0x106>
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	691b      	ldr	r3, [r3, #16]
 8012f3c:	1e5a      	subs	r2, r3, #1
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	791b      	ldrb	r3, [r3, #4]
 8012f46:	f043 0301 	orr.w	r3, r3, #1
 8012f4a:	b2da      	uxtb	r2, r3
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	711a      	strb	r2, [r3, #4]
 8012f50:	e007      	b.n	8012f62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f52:	7dfb      	ldrb	r3, [r7, #23]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d102      	bne.n	8012f5e <create_chain+0x122>
 8012f58:	f04f 33ff 	mov.w	r3, #4294967295
 8012f5c:	e000      	b.n	8012f60 <create_chain+0x124>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f62:	69fb      	ldr	r3, [r7, #28]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3720      	adds	r7, #32
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b087      	sub	sp, #28
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f80:	3304      	adds	r3, #4
 8012f82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	0a5b      	lsrs	r3, r3, #9
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	8952      	ldrh	r2, [r2, #10]
 8012f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	1d1a      	adds	r2, r3, #4
 8012f96:	613a      	str	r2, [r7, #16]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d101      	bne.n	8012fa6 <clmt_clust+0x3a>
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	e010      	b.n	8012fc8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012fa6:	697a      	ldr	r2, [r7, #20]
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d307      	bcc.n	8012fbe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	617b      	str	r3, [r7, #20]
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	3304      	adds	r3, #4
 8012fba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012fbc:	e7e9      	b.n	8012f92 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012fbe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	4413      	add	r3, r2
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	371c      	adds	r7, #28
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr

08012fd4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012fea:	d204      	bcs.n	8012ff6 <dir_sdi+0x22>
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	f003 031f 	and.w	r3, r3, #31
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d001      	beq.n	8012ffa <dir_sdi+0x26>
		return FR_INT_ERR;
 8012ff6:	2302      	movs	r3, #2
 8012ff8:	e063      	b.n	80130c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	689b      	ldr	r3, [r3, #8]
 8013004:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d106      	bne.n	801301a <dir_sdi+0x46>
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	2b02      	cmp	r3, #2
 8013012:	d902      	bls.n	801301a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013018:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d10c      	bne.n	801303a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	095b      	lsrs	r3, r3, #5
 8013024:	693a      	ldr	r2, [r7, #16]
 8013026:	8912      	ldrh	r2, [r2, #8]
 8013028:	4293      	cmp	r3, r2
 801302a:	d301      	bcc.n	8013030 <dir_sdi+0x5c>
 801302c:	2302      	movs	r3, #2
 801302e:	e048      	b.n	80130c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	61da      	str	r2, [r3, #28]
 8013038:	e029      	b.n	801308e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	895b      	ldrh	r3, [r3, #10]
 801303e:	025b      	lsls	r3, r3, #9
 8013040:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013042:	e019      	b.n	8013078 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6979      	ldr	r1, [r7, #20]
 8013048:	4618      	mov	r0, r3
 801304a:	f7ff fcfe 	bl	8012a4a <get_fat>
 801304e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013056:	d101      	bne.n	801305c <dir_sdi+0x88>
 8013058:	2301      	movs	r3, #1
 801305a:	e032      	b.n	80130c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	2b01      	cmp	r3, #1
 8013060:	d904      	bls.n	801306c <dir_sdi+0x98>
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	695b      	ldr	r3, [r3, #20]
 8013066:	697a      	ldr	r2, [r7, #20]
 8013068:	429a      	cmp	r2, r3
 801306a:	d301      	bcc.n	8013070 <dir_sdi+0x9c>
 801306c:	2302      	movs	r3, #2
 801306e:	e028      	b.n	80130c2 <dir_sdi+0xee>
			ofs -= csz;
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013078:	683a      	ldr	r2, [r7, #0]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	429a      	cmp	r2, r3
 801307e:	d2e1      	bcs.n	8013044 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013080:	6979      	ldr	r1, [r7, #20]
 8013082:	6938      	ldr	r0, [r7, #16]
 8013084:	f7ff fcc2 	bl	8012a0c <clust2sect>
 8013088:	4602      	mov	r2, r0
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	697a      	ldr	r2, [r7, #20]
 8013092:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d101      	bne.n	80130a0 <dir_sdi+0xcc>
 801309c:	2302      	movs	r3, #2
 801309e:	e010      	b.n	80130c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	69da      	ldr	r2, [r3, #28]
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	0a5b      	lsrs	r3, r3, #9
 80130a8:	441a      	add	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ba:	441a      	add	r2, r3
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3718      	adds	r7, #24
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80130ca:	b580      	push	{r7, lr}
 80130cc:	b086      	sub	sp, #24
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
 80130d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	695b      	ldr	r3, [r3, #20]
 80130de:	3320      	adds	r3, #32
 80130e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	69db      	ldr	r3, [r3, #28]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d003      	beq.n	80130f2 <dir_next+0x28>
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80130f0:	d301      	bcc.n	80130f6 <dir_next+0x2c>
 80130f2:	2304      	movs	r3, #4
 80130f4:	e0aa      	b.n	801324c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f040 8098 	bne.w	8013232 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	69db      	ldr	r3, [r3, #28]
 8013106:	1c5a      	adds	r2, r3, #1
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	699b      	ldr	r3, [r3, #24]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d10b      	bne.n	801312c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	095b      	lsrs	r3, r3, #5
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	8912      	ldrh	r2, [r2, #8]
 801311c:	4293      	cmp	r3, r2
 801311e:	f0c0 8088 	bcc.w	8013232 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2200      	movs	r2, #0
 8013126:	61da      	str	r2, [r3, #28]
 8013128:	2304      	movs	r3, #4
 801312a:	e08f      	b.n	801324c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	0a5b      	lsrs	r3, r3, #9
 8013130:	68fa      	ldr	r2, [r7, #12]
 8013132:	8952      	ldrh	r2, [r2, #10]
 8013134:	3a01      	subs	r2, #1
 8013136:	4013      	ands	r3, r2
 8013138:	2b00      	cmp	r3, #0
 801313a:	d17a      	bne.n	8013232 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	4619      	mov	r1, r3
 8013144:	4610      	mov	r0, r2
 8013146:	f7ff fc80 	bl	8012a4a <get_fat>
 801314a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b01      	cmp	r3, #1
 8013150:	d801      	bhi.n	8013156 <dir_next+0x8c>
 8013152:	2302      	movs	r3, #2
 8013154:	e07a      	b.n	801324c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801315c:	d101      	bne.n	8013162 <dir_next+0x98>
 801315e:	2301      	movs	r3, #1
 8013160:	e074      	b.n	801324c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	695b      	ldr	r3, [r3, #20]
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	429a      	cmp	r2, r3
 801316a:	d358      	bcc.n	801321e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d104      	bne.n	801317c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2200      	movs	r2, #0
 8013176:	61da      	str	r2, [r3, #28]
 8013178:	2304      	movs	r3, #4
 801317a:	e067      	b.n	801324c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	699b      	ldr	r3, [r3, #24]
 8013182:	4619      	mov	r1, r3
 8013184:	4610      	mov	r0, r2
 8013186:	f7ff fe59 	bl	8012e3c <create_chain>
 801318a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d101      	bne.n	8013196 <dir_next+0xcc>
 8013192:	2307      	movs	r3, #7
 8013194:	e05a      	b.n	801324c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	2b01      	cmp	r3, #1
 801319a:	d101      	bne.n	80131a0 <dir_next+0xd6>
 801319c:	2302      	movs	r3, #2
 801319e:	e055      	b.n	801324c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a6:	d101      	bne.n	80131ac <dir_next+0xe2>
 80131a8:	2301      	movs	r3, #1
 80131aa:	e04f      	b.n	801324c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ff fb4d 	bl	801284c <sync_window>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d001      	beq.n	80131bc <dir_next+0xf2>
 80131b8:	2301      	movs	r3, #1
 80131ba:	e047      	b.n	801324c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	3330      	adds	r3, #48	; 0x30
 80131c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131c4:	2100      	movs	r1, #0
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7ff f977 	bl	80124ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131cc:	2300      	movs	r3, #0
 80131ce:	613b      	str	r3, [r7, #16]
 80131d0:	6979      	ldr	r1, [r7, #20]
 80131d2:	68f8      	ldr	r0, [r7, #12]
 80131d4:	f7ff fc1a 	bl	8012a0c <clust2sect>
 80131d8:	4602      	mov	r2, r0
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80131de:	e012      	b.n	8013206 <dir_next+0x13c>
						fs->wflag = 1;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2201      	movs	r2, #1
 80131e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f7ff fb30 	bl	801284c <sync_window>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <dir_next+0x12c>
 80131f2:	2301      	movs	r3, #1
 80131f4:	e02a      	b.n	801324c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	3301      	adds	r3, #1
 80131fa:	613b      	str	r3, [r7, #16]
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013200:	1c5a      	adds	r2, r3, #1
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	62da      	str	r2, [r3, #44]	; 0x2c
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	895b      	ldrh	r3, [r3, #10]
 801320a:	461a      	mov	r2, r3
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	4293      	cmp	r3, r2
 8013210:	d3e6      	bcc.n	80131e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	1ad2      	subs	r2, r2, r3
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	697a      	ldr	r2, [r7, #20]
 8013222:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013224:	6979      	ldr	r1, [r7, #20]
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f7ff fbf0 	bl	8012a0c <clust2sect>
 801322c:	4602      	mov	r2, r0
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	68ba      	ldr	r2, [r7, #8]
 8013236:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013244:	441a      	add	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801324a:	2300      	movs	r3, #0
}
 801324c:	4618      	mov	r0, r3
 801324e:	3718      	adds	r7, #24
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b086      	sub	sp, #24
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013264:	2100      	movs	r1, #0
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f7ff feb4 	bl	8012fd4 <dir_sdi>
 801326c:	4603      	mov	r3, r0
 801326e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013270:	7dfb      	ldrb	r3, [r7, #23]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d12b      	bne.n	80132ce <dir_alloc+0x7a>
		n = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	69db      	ldr	r3, [r3, #28]
 801327e:	4619      	mov	r1, r3
 8013280:	68f8      	ldr	r0, [r7, #12]
 8013282:	f7ff fb27 	bl	80128d4 <move_window>
 8013286:	4603      	mov	r3, r0
 8013288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801328a:	7dfb      	ldrb	r3, [r7, #23]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d11d      	bne.n	80132cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6a1b      	ldr	r3, [r3, #32]
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2be5      	cmp	r3, #229	; 0xe5
 8013298:	d004      	beq.n	80132a4 <dir_alloc+0x50>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	6a1b      	ldr	r3, [r3, #32]
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d107      	bne.n	80132b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	3301      	adds	r3, #1
 80132a8:	613b      	str	r3, [r7, #16]
 80132aa:	693a      	ldr	r2, [r7, #16]
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d102      	bne.n	80132b8 <dir_alloc+0x64>
 80132b2:	e00c      	b.n	80132ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80132b4:	2300      	movs	r3, #0
 80132b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80132b8:	2101      	movs	r1, #1
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f7ff ff05 	bl	80130ca <dir_next>
 80132c0:	4603      	mov	r3, r0
 80132c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80132c4:	7dfb      	ldrb	r3, [r7, #23]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d0d7      	beq.n	801327a <dir_alloc+0x26>
 80132ca:	e000      	b.n	80132ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80132cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80132ce:	7dfb      	ldrb	r3, [r7, #23]
 80132d0:	2b04      	cmp	r3, #4
 80132d2:	d101      	bne.n	80132d8 <dir_alloc+0x84>
 80132d4:	2307      	movs	r3, #7
 80132d6:	75fb      	strb	r3, [r7, #23]
	return res;
 80132d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3718      	adds	r7, #24
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b084      	sub	sp, #16
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
 80132ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	331a      	adds	r3, #26
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7ff f83f 	bl	8012374 <ld_word>
 80132f6:	4603      	mov	r3, r0
 80132f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	2b03      	cmp	r3, #3
 8013300:	d109      	bne.n	8013316 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	3314      	adds	r3, #20
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff f834 	bl	8012374 <ld_word>
 801330c:	4603      	mov	r3, r0
 801330e:	041b      	lsls	r3, r3, #16
 8013310:	68fa      	ldr	r2, [r7, #12]
 8013312:	4313      	orrs	r3, r2
 8013314:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013316:	68fb      	ldr	r3, [r7, #12]
}
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	331a      	adds	r3, #26
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	b292      	uxth	r2, r2
 8013334:	4611      	mov	r1, r2
 8013336:	4618      	mov	r0, r3
 8013338:	f7ff f857 	bl	80123ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	2b03      	cmp	r3, #3
 8013342:	d109      	bne.n	8013358 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	f103 0214 	add.w	r2, r3, #20
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	0c1b      	lsrs	r3, r3, #16
 801334e:	b29b      	uxth	r3, r3
 8013350:	4619      	mov	r1, r3
 8013352:	4610      	mov	r0, r2
 8013354:	f7ff f849 	bl	80123ea <st_word>
	}
}
 8013358:	bf00      	nop
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801336e:	2100      	movs	r1, #0
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7ff fe2f 	bl	8012fd4 <dir_sdi>
 8013376:	4603      	mov	r3, r0
 8013378:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801337a:	7dfb      	ldrb	r3, [r7, #23]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d001      	beq.n	8013384 <dir_find+0x24>
 8013380:	7dfb      	ldrb	r3, [r7, #23]
 8013382:	e03e      	b.n	8013402 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	69db      	ldr	r3, [r3, #28]
 8013388:	4619      	mov	r1, r3
 801338a:	6938      	ldr	r0, [r7, #16]
 801338c:	f7ff faa2 	bl	80128d4 <move_window>
 8013390:	4603      	mov	r3, r0
 8013392:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013394:	7dfb      	ldrb	r3, [r7, #23]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d12f      	bne.n	80133fa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6a1b      	ldr	r3, [r3, #32]
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <dir_find+0x4e>
 80133a8:	2304      	movs	r3, #4
 80133aa:	75fb      	strb	r3, [r7, #23]
 80133ac:	e028      	b.n	8013400 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6a1b      	ldr	r3, [r3, #32]
 80133b2:	330b      	adds	r3, #11
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6a1b      	ldr	r3, [r3, #32]
 80133c4:	330b      	adds	r3, #11
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	f003 0308 	and.w	r3, r3, #8
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d10a      	bne.n	80133e6 <dir_find+0x86>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6a18      	ldr	r0, [r3, #32]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	3324      	adds	r3, #36	; 0x24
 80133d8:	220b      	movs	r2, #11
 80133da:	4619      	mov	r1, r3
 80133dc:	f7ff f888 	bl	80124f0 <mem_cmp>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d00b      	beq.n	80133fe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80133e6:	2100      	movs	r1, #0
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7ff fe6e 	bl	80130ca <dir_next>
 80133ee:	4603      	mov	r3, r0
 80133f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80133f2:	7dfb      	ldrb	r3, [r7, #23]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d0c5      	beq.n	8013384 <dir_find+0x24>
 80133f8:	e002      	b.n	8013400 <dir_find+0xa0>
		if (res != FR_OK) break;
 80133fa:	bf00      	nop
 80133fc:	e000      	b.n	8013400 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133fe:	bf00      	nop

	return res;
 8013400:	7dfb      	ldrb	r3, [r7, #23]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3718      	adds	r7, #24
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b084      	sub	sp, #16
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013418:	2101      	movs	r1, #1
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f7ff ff1a 	bl	8013254 <dir_alloc>
 8013420:	4603      	mov	r3, r0
 8013422:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013424:	7bfb      	ldrb	r3, [r7, #15]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d11c      	bne.n	8013464 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	69db      	ldr	r3, [r3, #28]
 801342e:	4619      	mov	r1, r3
 8013430:	68b8      	ldr	r0, [r7, #8]
 8013432:	f7ff fa4f 	bl	80128d4 <move_window>
 8013436:	4603      	mov	r3, r0
 8013438:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801343a:	7bfb      	ldrb	r3, [r7, #15]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d111      	bne.n	8013464 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6a1b      	ldr	r3, [r3, #32]
 8013444:	2220      	movs	r2, #32
 8013446:	2100      	movs	r1, #0
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff f836 	bl	80124ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a18      	ldr	r0, [r3, #32]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	3324      	adds	r3, #36	; 0x24
 8013456:	220b      	movs	r2, #11
 8013458:	4619      	mov	r1, r3
 801345a:	f7ff f80d 	bl	8012478 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	2201      	movs	r2, #1
 8013462:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013464:	7bfb      	ldrb	r3, [r7, #15]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
	...

08013470 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b088      	sub	sp, #32
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	3324      	adds	r3, #36	; 0x24
 8013484:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013486:	220b      	movs	r2, #11
 8013488:	2120      	movs	r1, #32
 801348a:	68b8      	ldr	r0, [r7, #8]
 801348c:	f7ff f815 	bl	80124ba <mem_set>
	si = i = 0; ni = 8;
 8013490:	2300      	movs	r3, #0
 8013492:	613b      	str	r3, [r7, #16]
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	61fb      	str	r3, [r7, #28]
 8013498:	2308      	movs	r3, #8
 801349a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	1c5a      	adds	r2, r3, #1
 80134a0:	61fa      	str	r2, [r7, #28]
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	4413      	add	r3, r2
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80134aa:	7efb      	ldrb	r3, [r7, #27]
 80134ac:	2b20      	cmp	r3, #32
 80134ae:	d94e      	bls.n	801354e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80134b0:	7efb      	ldrb	r3, [r7, #27]
 80134b2:	2b2f      	cmp	r3, #47	; 0x2f
 80134b4:	d006      	beq.n	80134c4 <create_name+0x54>
 80134b6:	7efb      	ldrb	r3, [r7, #27]
 80134b8:	2b5c      	cmp	r3, #92	; 0x5c
 80134ba:	d110      	bne.n	80134de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80134bc:	e002      	b.n	80134c4 <create_name+0x54>
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	3301      	adds	r3, #1
 80134c2:	61fb      	str	r3, [r7, #28]
 80134c4:	68fa      	ldr	r2, [r7, #12]
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	4413      	add	r3, r2
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	2b2f      	cmp	r3, #47	; 0x2f
 80134ce:	d0f6      	beq.n	80134be <create_name+0x4e>
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	4413      	add	r3, r2
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	2b5c      	cmp	r3, #92	; 0x5c
 80134da:	d0f0      	beq.n	80134be <create_name+0x4e>
			break;
 80134dc:	e038      	b.n	8013550 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80134de:	7efb      	ldrb	r3, [r7, #27]
 80134e0:	2b2e      	cmp	r3, #46	; 0x2e
 80134e2:	d003      	beq.n	80134ec <create_name+0x7c>
 80134e4:	693a      	ldr	r2, [r7, #16]
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d30c      	bcc.n	8013506 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	2b0b      	cmp	r3, #11
 80134f0:	d002      	beq.n	80134f8 <create_name+0x88>
 80134f2:	7efb      	ldrb	r3, [r7, #27]
 80134f4:	2b2e      	cmp	r3, #46	; 0x2e
 80134f6:	d001      	beq.n	80134fc <create_name+0x8c>
 80134f8:	2306      	movs	r3, #6
 80134fa:	e044      	b.n	8013586 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80134fc:	2308      	movs	r3, #8
 80134fe:	613b      	str	r3, [r7, #16]
 8013500:	230b      	movs	r3, #11
 8013502:	617b      	str	r3, [r7, #20]
			continue;
 8013504:	e022      	b.n	801354c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013506:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801350a:	2b00      	cmp	r3, #0
 801350c:	da04      	bge.n	8013518 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801350e:	7efb      	ldrb	r3, [r7, #27]
 8013510:	3b80      	subs	r3, #128	; 0x80
 8013512:	4a1f      	ldr	r2, [pc, #124]	; (8013590 <create_name+0x120>)
 8013514:	5cd3      	ldrb	r3, [r2, r3]
 8013516:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013518:	7efb      	ldrb	r3, [r7, #27]
 801351a:	4619      	mov	r1, r3
 801351c:	481d      	ldr	r0, [pc, #116]	; (8013594 <create_name+0x124>)
 801351e:	f7ff f80e 	bl	801253e <chk_chr>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <create_name+0xbc>
 8013528:	2306      	movs	r3, #6
 801352a:	e02c      	b.n	8013586 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801352c:	7efb      	ldrb	r3, [r7, #27]
 801352e:	2b60      	cmp	r3, #96	; 0x60
 8013530:	d905      	bls.n	801353e <create_name+0xce>
 8013532:	7efb      	ldrb	r3, [r7, #27]
 8013534:	2b7a      	cmp	r3, #122	; 0x7a
 8013536:	d802      	bhi.n	801353e <create_name+0xce>
 8013538:	7efb      	ldrb	r3, [r7, #27]
 801353a:	3b20      	subs	r3, #32
 801353c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	1c5a      	adds	r2, r3, #1
 8013542:	613a      	str	r2, [r7, #16]
 8013544:	68ba      	ldr	r2, [r7, #8]
 8013546:	4413      	add	r3, r2
 8013548:	7efa      	ldrb	r2, [r7, #27]
 801354a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801354c:	e7a6      	b.n	801349c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801354e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	441a      	add	r2, r3
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d101      	bne.n	8013564 <create_name+0xf4>
 8013560:	2306      	movs	r3, #6
 8013562:	e010      	b.n	8013586 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	2be5      	cmp	r3, #229	; 0xe5
 801356a:	d102      	bne.n	8013572 <create_name+0x102>
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	2205      	movs	r2, #5
 8013570:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013572:	7efb      	ldrb	r3, [r7, #27]
 8013574:	2b20      	cmp	r3, #32
 8013576:	d801      	bhi.n	801357c <create_name+0x10c>
 8013578:	2204      	movs	r2, #4
 801357a:	e000      	b.n	801357e <create_name+0x10e>
 801357c:	2200      	movs	r2, #0
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	330b      	adds	r3, #11
 8013582:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013584:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013586:	4618      	mov	r0, r3
 8013588:	3720      	adds	r7, #32
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	08023e24 	.word	0x08023e24
 8013594:	0802221c 	.word	0x0802221c

08013598 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b086      	sub	sp, #24
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80135ac:	e002      	b.n	80135b4 <follow_path+0x1c>
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	3301      	adds	r3, #1
 80135b2:	603b      	str	r3, [r7, #0]
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	2b2f      	cmp	r3, #47	; 0x2f
 80135ba:	d0f8      	beq.n	80135ae <follow_path+0x16>
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b5c      	cmp	r3, #92	; 0x5c
 80135c2:	d0f4      	beq.n	80135ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	2200      	movs	r2, #0
 80135c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	2b1f      	cmp	r3, #31
 80135d0:	d80a      	bhi.n	80135e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	2280      	movs	r2, #128	; 0x80
 80135d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80135da:	2100      	movs	r1, #0
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f7ff fcf9 	bl	8012fd4 <dir_sdi>
 80135e2:	4603      	mov	r3, r0
 80135e4:	75fb      	strb	r3, [r7, #23]
 80135e6:	e043      	b.n	8013670 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135e8:	463b      	mov	r3, r7
 80135ea:	4619      	mov	r1, r3
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7ff ff3f 	bl	8013470 <create_name>
 80135f2:	4603      	mov	r3, r0
 80135f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80135f6:	7dfb      	ldrb	r3, [r7, #23]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d134      	bne.n	8013666 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f7ff feaf 	bl	8013360 <dir_find>
 8013602:	4603      	mov	r3, r0
 8013604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801360c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801360e:	7dfb      	ldrb	r3, [r7, #23]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d00a      	beq.n	801362a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013614:	7dfb      	ldrb	r3, [r7, #23]
 8013616:	2b04      	cmp	r3, #4
 8013618:	d127      	bne.n	801366a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801361a:	7afb      	ldrb	r3, [r7, #11]
 801361c:	f003 0304 	and.w	r3, r3, #4
 8013620:	2b00      	cmp	r3, #0
 8013622:	d122      	bne.n	801366a <follow_path+0xd2>
 8013624:	2305      	movs	r3, #5
 8013626:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013628:	e01f      	b.n	801366a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801362a:	7afb      	ldrb	r3, [r7, #11]
 801362c:	f003 0304 	and.w	r3, r3, #4
 8013630:	2b00      	cmp	r3, #0
 8013632:	d11c      	bne.n	801366e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	799b      	ldrb	r3, [r3, #6]
 8013638:	f003 0310 	and.w	r3, r3, #16
 801363c:	2b00      	cmp	r3, #0
 801363e:	d102      	bne.n	8013646 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013640:	2305      	movs	r3, #5
 8013642:	75fb      	strb	r3, [r7, #23]
 8013644:	e014      	b.n	8013670 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	695b      	ldr	r3, [r3, #20]
 8013650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013654:	4413      	add	r3, r2
 8013656:	4619      	mov	r1, r3
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f7ff fe42 	bl	80132e2 <ld_clust>
 801365e:	4602      	mov	r2, r0
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013664:	e7c0      	b.n	80135e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8013666:	bf00      	nop
 8013668:	e002      	b.n	8013670 <follow_path+0xd8>
				break;
 801366a:	bf00      	nop
 801366c:	e000      	b.n	8013670 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801366e:	bf00      	nop
			}
		}
	}

	return res;
 8013670:	7dfb      	ldrb	r3, [r7, #23]
}
 8013672:	4618      	mov	r0, r3
 8013674:	3718      	adds	r7, #24
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}

0801367a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801367a:	b480      	push	{r7}
 801367c:	b087      	sub	sp, #28
 801367e:	af00      	add	r7, sp, #0
 8013680:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013682:	f04f 33ff 	mov.w	r3, #4294967295
 8013686:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d031      	beq.n	80136f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	617b      	str	r3, [r7, #20]
 8013696:	e002      	b.n	801369e <get_ldnumber+0x24>
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	3301      	adds	r3, #1
 801369c:	617b      	str	r3, [r7, #20]
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	2b20      	cmp	r3, #32
 80136a4:	d903      	bls.n	80136ae <get_ldnumber+0x34>
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	2b3a      	cmp	r3, #58	; 0x3a
 80136ac:	d1f4      	bne.n	8013698 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	2b3a      	cmp	r3, #58	; 0x3a
 80136b4:	d11c      	bne.n	80136f0 <get_ldnumber+0x76>
			tp = *path;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	1c5a      	adds	r2, r3, #1
 80136c0:	60fa      	str	r2, [r7, #12]
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	3b30      	subs	r3, #48	; 0x30
 80136c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	2b09      	cmp	r3, #9
 80136cc:	d80e      	bhi.n	80136ec <get_ldnumber+0x72>
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d10a      	bne.n	80136ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d107      	bne.n	80136ec <get_ldnumber+0x72>
					vol = (int)i;
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	3301      	adds	r3, #1
 80136e4:	617b      	str	r3, [r7, #20]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	697a      	ldr	r2, [r7, #20]
 80136ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	e002      	b.n	80136f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80136f0:	2300      	movs	r3, #0
 80136f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80136f4:	693b      	ldr	r3, [r7, #16]
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	371c      	adds	r7, #28
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr
	...

08013704 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2200      	movs	r2, #0
 8013712:	70da      	strb	r2, [r3, #3]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f04f 32ff 	mov.w	r2, #4294967295
 801371a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801371c:	6839      	ldr	r1, [r7, #0]
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7ff f8d8 	bl	80128d4 <move_window>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d001      	beq.n	801372e <check_fs+0x2a>
 801372a:	2304      	movs	r3, #4
 801372c:	e038      	b.n	80137a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	3330      	adds	r3, #48	; 0x30
 8013732:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013736:	4618      	mov	r0, r3
 8013738:	f7fe fe1c 	bl	8012374 <ld_word>
 801373c:	4603      	mov	r3, r0
 801373e:	461a      	mov	r2, r3
 8013740:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013744:	429a      	cmp	r2, r3
 8013746:	d001      	beq.n	801374c <check_fs+0x48>
 8013748:	2303      	movs	r3, #3
 801374a:	e029      	b.n	80137a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013752:	2be9      	cmp	r3, #233	; 0xe9
 8013754:	d009      	beq.n	801376a <check_fs+0x66>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801375c:	2beb      	cmp	r3, #235	; 0xeb
 801375e:	d11e      	bne.n	801379e <check_fs+0x9a>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013766:	2b90      	cmp	r3, #144	; 0x90
 8013768:	d119      	bne.n	801379e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	3330      	adds	r3, #48	; 0x30
 801376e:	3336      	adds	r3, #54	; 0x36
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe fe17 	bl	80123a4 <ld_dword>
 8013776:	4603      	mov	r3, r0
 8013778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801377c:	4a0a      	ldr	r2, [pc, #40]	; (80137a8 <check_fs+0xa4>)
 801377e:	4293      	cmp	r3, r2
 8013780:	d101      	bne.n	8013786 <check_fs+0x82>
 8013782:	2300      	movs	r3, #0
 8013784:	e00c      	b.n	80137a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	3330      	adds	r3, #48	; 0x30
 801378a:	3352      	adds	r3, #82	; 0x52
 801378c:	4618      	mov	r0, r3
 801378e:	f7fe fe09 	bl	80123a4 <ld_dword>
 8013792:	4603      	mov	r3, r0
 8013794:	4a05      	ldr	r2, [pc, #20]	; (80137ac <check_fs+0xa8>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d101      	bne.n	801379e <check_fs+0x9a>
 801379a:	2300      	movs	r3, #0
 801379c:	e000      	b.n	80137a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801379e:	2302      	movs	r3, #2
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	00544146 	.word	0x00544146
 80137ac:	33544146 	.word	0x33544146

080137b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b096      	sub	sp, #88	; 0x58
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	4613      	mov	r3, r2
 80137bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f7ff ff58 	bl	801367a <get_ldnumber>
 80137ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80137cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	da01      	bge.n	80137d6 <find_volume+0x26>
 80137d2:	230b      	movs	r3, #11
 80137d4:	e22e      	b.n	8013c34 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80137d6:	4aa8      	ldr	r2, [pc, #672]	; (8013a78 <find_volume+0x2c8>)
 80137d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80137e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d101      	bne.n	80137ea <find_volume+0x3a>
 80137e6:	230c      	movs	r3, #12
 80137e8:	e224      	b.n	8013c34 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80137f0:	79fb      	ldrb	r3, [r7, #7]
 80137f2:	f023 0301 	bic.w	r3, r3, #1
 80137f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80137f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d01a      	beq.n	8013836 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013802:	785b      	ldrb	r3, [r3, #1]
 8013804:	4618      	mov	r0, r3
 8013806:	f7fe fd17 	bl	8012238 <disk_status>
 801380a:	4603      	mov	r3, r0
 801380c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013814:	f003 0301 	and.w	r3, r3, #1
 8013818:	2b00      	cmp	r3, #0
 801381a:	d10c      	bne.n	8013836 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d007      	beq.n	8013832 <find_volume+0x82>
 8013822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013826:	f003 0304 	and.w	r3, r3, #4
 801382a:	2b00      	cmp	r3, #0
 801382c:	d001      	beq.n	8013832 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801382e:	230a      	movs	r3, #10
 8013830:	e200      	b.n	8013c34 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8013832:	2300      	movs	r3, #0
 8013834:	e1fe      	b.n	8013c34 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013838:	2200      	movs	r2, #0
 801383a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801383c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801383e:	b2da      	uxtb	r2, r3
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013846:	785b      	ldrb	r3, [r3, #1]
 8013848:	4618      	mov	r0, r3
 801384a:	f7fe fd0f 	bl	801226c <disk_initialize>
 801384e:	4603      	mov	r3, r0
 8013850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013858:	f003 0301 	and.w	r3, r3, #1
 801385c:	2b00      	cmp	r3, #0
 801385e:	d001      	beq.n	8013864 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013860:	2303      	movs	r3, #3
 8013862:	e1e7      	b.n	8013c34 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013864:	79fb      	ldrb	r3, [r7, #7]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d007      	beq.n	801387a <find_volume+0xca>
 801386a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801386e:	f003 0304 	and.w	r3, r3, #4
 8013872:	2b00      	cmp	r3, #0
 8013874:	d001      	beq.n	801387a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013876:	230a      	movs	r3, #10
 8013878:	e1dc      	b.n	8013c34 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801387a:	2300      	movs	r3, #0
 801387c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801387e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013880:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013882:	f7ff ff3f 	bl	8013704 <check_fs>
 8013886:	4603      	mov	r3, r0
 8013888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801388c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013890:	2b02      	cmp	r3, #2
 8013892:	d14b      	bne.n	801392c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013894:	2300      	movs	r3, #0
 8013896:	643b      	str	r3, [r7, #64]	; 0x40
 8013898:	e01f      	b.n	80138da <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801389c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138a2:	011b      	lsls	r3, r3, #4
 80138a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80138a8:	4413      	add	r3, r2
 80138aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80138ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ae:	3304      	adds	r3, #4
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d006      	beq.n	80138c4 <find_volume+0x114>
 80138b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b8:	3308      	adds	r3, #8
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fe fd72 	bl	80123a4 <ld_dword>
 80138c0:	4602      	mov	r2, r0
 80138c2:	e000      	b.n	80138c6 <find_volume+0x116>
 80138c4:	2200      	movs	r2, #0
 80138c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80138ce:	440b      	add	r3, r1
 80138d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138d6:	3301      	adds	r3, #1
 80138d8:	643b      	str	r3, [r7, #64]	; 0x40
 80138da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138dc:	2b03      	cmp	r3, #3
 80138de:	d9dc      	bls.n	801389a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80138e0:	2300      	movs	r3, #0
 80138e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80138e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d002      	beq.n	80138f0 <find_volume+0x140>
 80138ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138ec:	3b01      	subs	r3, #1
 80138ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80138f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80138f8:	4413      	add	r3, r2
 80138fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80138fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013902:	2b00      	cmp	r3, #0
 8013904:	d005      	beq.n	8013912 <find_volume+0x162>
 8013906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801390a:	f7ff fefb 	bl	8013704 <check_fs>
 801390e:	4603      	mov	r3, r0
 8013910:	e000      	b.n	8013914 <find_volume+0x164>
 8013912:	2303      	movs	r3, #3
 8013914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801391c:	2b01      	cmp	r3, #1
 801391e:	d905      	bls.n	801392c <find_volume+0x17c>
 8013920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013922:	3301      	adds	r3, #1
 8013924:	643b      	str	r3, [r7, #64]	; 0x40
 8013926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013928:	2b03      	cmp	r3, #3
 801392a:	d9e1      	bls.n	80138f0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801392c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013930:	2b04      	cmp	r3, #4
 8013932:	d101      	bne.n	8013938 <find_volume+0x188>
 8013934:	2301      	movs	r3, #1
 8013936:	e17d      	b.n	8013c34 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801393c:	2b01      	cmp	r3, #1
 801393e:	d901      	bls.n	8013944 <find_volume+0x194>
 8013940:	230d      	movs	r3, #13
 8013942:	e177      	b.n	8013c34 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013946:	3330      	adds	r3, #48	; 0x30
 8013948:	330b      	adds	r3, #11
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe fd12 	bl	8012374 <ld_word>
 8013950:	4603      	mov	r3, r0
 8013952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013956:	d001      	beq.n	801395c <find_volume+0x1ac>
 8013958:	230d      	movs	r3, #13
 801395a:	e16b      	b.n	8013c34 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395e:	3330      	adds	r3, #48	; 0x30
 8013960:	3316      	adds	r3, #22
 8013962:	4618      	mov	r0, r3
 8013964:	f7fe fd06 	bl	8012374 <ld_word>
 8013968:	4603      	mov	r3, r0
 801396a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <find_volume+0x1d0>
 8013972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013974:	3330      	adds	r3, #48	; 0x30
 8013976:	3324      	adds	r3, #36	; 0x24
 8013978:	4618      	mov	r0, r3
 801397a:	f7fe fd13 	bl	80123a4 <ld_dword>
 801397e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013982:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013984:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013988:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013992:	789b      	ldrb	r3, [r3, #2]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d005      	beq.n	80139a4 <find_volume+0x1f4>
 8013998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399a:	789b      	ldrb	r3, [r3, #2]
 801399c:	2b02      	cmp	r3, #2
 801399e:	d001      	beq.n	80139a4 <find_volume+0x1f4>
 80139a0:	230d      	movs	r3, #13
 80139a2:	e147      	b.n	8013c34 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80139a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a6:	789b      	ldrb	r3, [r3, #2]
 80139a8:	461a      	mov	r2, r3
 80139aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139ac:	fb02 f303 	mul.w	r3, r2, r3
 80139b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80139b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80139be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c0:	895b      	ldrh	r3, [r3, #10]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d008      	beq.n	80139d8 <find_volume+0x228>
 80139c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c8:	895b      	ldrh	r3, [r3, #10]
 80139ca:	461a      	mov	r2, r3
 80139cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ce:	895b      	ldrh	r3, [r3, #10]
 80139d0:	3b01      	subs	r3, #1
 80139d2:	4013      	ands	r3, r2
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <find_volume+0x22c>
 80139d8:	230d      	movs	r3, #13
 80139da:	e12b      	b.n	8013c34 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	3330      	adds	r3, #48	; 0x30
 80139e0:	3311      	adds	r3, #17
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fe fcc6 	bl	8012374 <ld_word>
 80139e8:	4603      	mov	r3, r0
 80139ea:	461a      	mov	r2, r3
 80139ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80139f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f2:	891b      	ldrh	r3, [r3, #8]
 80139f4:	f003 030f 	and.w	r3, r3, #15
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d001      	beq.n	8013a02 <find_volume+0x252>
 80139fe:	230d      	movs	r3, #13
 8013a00:	e118      	b.n	8013c34 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a04:	3330      	adds	r3, #48	; 0x30
 8013a06:	3313      	adds	r3, #19
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fe fcb3 	bl	8012374 <ld_word>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d106      	bne.n	8013a26 <find_volume+0x276>
 8013a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a1a:	3330      	adds	r3, #48	; 0x30
 8013a1c:	3320      	adds	r3, #32
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fe fcc0 	bl	80123a4 <ld_dword>
 8013a24:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a28:	3330      	adds	r3, #48	; 0x30
 8013a2a:	330e      	adds	r3, #14
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fe fca1 	bl	8012374 <ld_word>
 8013a32:	4603      	mov	r3, r0
 8013a34:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013a36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d101      	bne.n	8013a40 <find_volume+0x290>
 8013a3c:	230d      	movs	r3, #13
 8013a3e:	e0f9      	b.n	8013c34 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a44:	4413      	add	r3, r2
 8013a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a48:	8912      	ldrh	r2, [r2, #8]
 8013a4a:	0912      	lsrs	r2, r2, #4
 8013a4c:	b292      	uxth	r2, r2
 8013a4e:	4413      	add	r3, r2
 8013a50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d201      	bcs.n	8013a5e <find_volume+0x2ae>
 8013a5a:	230d      	movs	r3, #13
 8013a5c:	e0ea      	b.n	8013c34 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a66:	8952      	ldrh	r2, [r2, #10]
 8013a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d103      	bne.n	8013a7c <find_volume+0x2cc>
 8013a74:	230d      	movs	r3, #13
 8013a76:	e0dd      	b.n	8013c34 <find_volume+0x484>
 8013a78:	20000a10 	.word	0x20000a10
		fmt = FS_FAT32;
 8013a7c:	2303      	movs	r3, #3
 8013a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d802      	bhi.n	8013a92 <find_volume+0x2e2>
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d802      	bhi.n	8013aa2 <find_volume+0x2f2>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	1c9a      	adds	r2, r3, #2
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013aae:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013ab0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ab4:	441a      	add	r2, r3
 8013ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013aba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abe:	441a      	add	r2, r3
 8013ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ac8:	2b03      	cmp	r3, #3
 8013aca:	d11e      	bne.n	8013b0a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ace:	3330      	adds	r3, #48	; 0x30
 8013ad0:	332a      	adds	r3, #42	; 0x2a
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fe fc4e 	bl	8012374 <ld_word>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d001      	beq.n	8013ae2 <find_volume+0x332>
 8013ade:	230d      	movs	r3, #13
 8013ae0:	e0a8      	b.n	8013c34 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae4:	891b      	ldrh	r3, [r3, #8]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d001      	beq.n	8013aee <find_volume+0x33e>
 8013aea:	230d      	movs	r3, #13
 8013aec:	e0a2      	b.n	8013c34 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	3330      	adds	r3, #48	; 0x30
 8013af2:	332c      	adds	r3, #44	; 0x2c
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fe fc55 	bl	80123a4 <ld_dword>
 8013afa:	4602      	mov	r2, r0
 8013afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b02:	695b      	ldr	r3, [r3, #20]
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	647b      	str	r3, [r7, #68]	; 0x44
 8013b08:	e01f      	b.n	8013b4a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0c:	891b      	ldrh	r3, [r3, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d101      	bne.n	8013b16 <find_volume+0x366>
 8013b12:	230d      	movs	r3, #13
 8013b14:	e08e      	b.n	8013c34 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b18:	6a1a      	ldr	r2, [r3, #32]
 8013b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b1c:	441a      	add	r2, r3
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b26:	2b02      	cmp	r3, #2
 8013b28:	d103      	bne.n	8013b32 <find_volume+0x382>
 8013b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2c:	695b      	ldr	r3, [r3, #20]
 8013b2e:	005b      	lsls	r3, r3, #1
 8013b30:	e00a      	b.n	8013b48 <find_volume+0x398>
 8013b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b34:	695a      	ldr	r2, [r3, #20]
 8013b36:	4613      	mov	r3, r2
 8013b38:	005b      	lsls	r3, r3, #1
 8013b3a:	4413      	add	r3, r2
 8013b3c:	085a      	lsrs	r2, r3, #1
 8013b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b40:	695b      	ldr	r3, [r3, #20]
 8013b42:	f003 0301 	and.w	r3, r3, #1
 8013b46:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b48:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b4c:	699a      	ldr	r2, [r3, #24]
 8013b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b54:	0a5b      	lsrs	r3, r3, #9
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d201      	bcs.n	8013b5e <find_volume+0x3ae>
 8013b5a:	230d      	movs	r3, #13
 8013b5c:	e06a      	b.n	8013c34 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b60:	f04f 32ff 	mov.w	r2, #4294967295
 8013b64:	611a      	str	r2, [r3, #16]
 8013b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b68:	691a      	ldr	r2, [r3, #16]
 8013b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b70:	2280      	movs	r2, #128	; 0x80
 8013b72:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b78:	2b03      	cmp	r3, #3
 8013b7a:	d149      	bne.n	8013c10 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7e:	3330      	adds	r3, #48	; 0x30
 8013b80:	3330      	adds	r3, #48	; 0x30
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7fe fbf6 	bl	8012374 <ld_word>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d140      	bne.n	8013c10 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b90:	3301      	adds	r3, #1
 8013b92:	4619      	mov	r1, r3
 8013b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b96:	f7fe fe9d 	bl	80128d4 <move_window>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d137      	bne.n	8013c10 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba8:	3330      	adds	r3, #48	; 0x30
 8013baa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fe fbe0 	bl	8012374 <ld_word>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d127      	bne.n	8013c10 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc2:	3330      	adds	r3, #48	; 0x30
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fe fbed 	bl	80123a4 <ld_dword>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	4a1b      	ldr	r2, [pc, #108]	; (8013c3c <find_volume+0x48c>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d11e      	bne.n	8013c10 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd4:	3330      	adds	r3, #48	; 0x30
 8013bd6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7fe fbe2 	bl	80123a4 <ld_dword>
 8013be0:	4603      	mov	r3, r0
 8013be2:	4a17      	ldr	r2, [pc, #92]	; (8013c40 <find_volume+0x490>)
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d113      	bne.n	8013c10 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bea:	3330      	adds	r3, #48	; 0x30
 8013bec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fe fbd7 	bl	80123a4 <ld_dword>
 8013bf6:	4602      	mov	r2, r0
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfa:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfe:	3330      	adds	r3, #48	; 0x30
 8013c00:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7fe fbcd 	bl	80123a4 <ld_dword>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c12:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013c16:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013c18:	4b0a      	ldr	r3, [pc, #40]	; (8013c44 <find_volume+0x494>)
 8013c1a:	881b      	ldrh	r3, [r3, #0]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	4b08      	ldr	r3, [pc, #32]	; (8013c44 <find_volume+0x494>)
 8013c22:	801a      	strh	r2, [r3, #0]
 8013c24:	4b07      	ldr	r3, [pc, #28]	; (8013c44 <find_volume+0x494>)
 8013c26:	881a      	ldrh	r2, [r3, #0]
 8013c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c2a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013c2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c2e:	f7fe fde9 	bl	8012804 <clear_lock>
#endif
	return FR_OK;
 8013c32:	2300      	movs	r3, #0
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3758      	adds	r7, #88	; 0x58
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	41615252 	.word	0x41615252
 8013c40:	61417272 	.word	0x61417272
 8013c44:	20000a14 	.word	0x20000a14

08013c48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c52:	2309      	movs	r3, #9
 8013c54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d01c      	beq.n	8013c96 <validate+0x4e>
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d018      	beq.n	8013c96 <validate+0x4e>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d013      	beq.n	8013c96 <validate+0x4e>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	889a      	ldrh	r2, [r3, #4]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	88db      	ldrh	r3, [r3, #6]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d10c      	bne.n	8013c96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	785b      	ldrb	r3, [r3, #1]
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7fe fad8 	bl	8012238 <disk_status>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	f003 0301 	and.w	r3, r3, #1
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d101      	bne.n	8013c96 <validate+0x4e>
			res = FR_OK;
 8013c92:	2300      	movs	r3, #0
 8013c94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c96:	7bfb      	ldrb	r3, [r7, #15]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d102      	bne.n	8013ca2 <validate+0x5a>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	e000      	b.n	8013ca4 <validate+0x5c>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	683a      	ldr	r2, [r7, #0]
 8013ca6:	6013      	str	r3, [r2, #0]
	return res;
 8013ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3710      	adds	r7, #16
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
	...

08013cb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b088      	sub	sp, #32
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	60f8      	str	r0, [r7, #12]
 8013cbc:	60b9      	str	r1, [r7, #8]
 8013cbe:	4613      	mov	r3, r2
 8013cc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013cc6:	f107 0310 	add.w	r3, r7, #16
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7ff fcd5 	bl	801367a <get_ldnumber>
 8013cd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	da01      	bge.n	8013cdc <f_mount+0x28>
 8013cd8:	230b      	movs	r3, #11
 8013cda:	e02b      	b.n	8013d34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013cdc:	4a17      	ldr	r2, [pc, #92]	; (8013d3c <f_mount+0x88>)
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ce4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d005      	beq.n	8013cf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013cec:	69b8      	ldr	r0, [r7, #24]
 8013cee:	f7fe fd89 	bl	8012804 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013cf2:	69bb      	ldr	r3, [r7, #24]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d002      	beq.n	8013d04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2200      	movs	r2, #0
 8013d02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d04:	68fa      	ldr	r2, [r7, #12]
 8013d06:	490d      	ldr	r1, [pc, #52]	; (8013d3c <f_mount+0x88>)
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d002      	beq.n	8013d1a <f_mount+0x66>
 8013d14:	79fb      	ldrb	r3, [r7, #7]
 8013d16:	2b01      	cmp	r3, #1
 8013d18:	d001      	beq.n	8013d1e <f_mount+0x6a>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	e00a      	b.n	8013d34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d1e:	f107 010c 	add.w	r1, r7, #12
 8013d22:	f107 0308 	add.w	r3, r7, #8
 8013d26:	2200      	movs	r2, #0
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7ff fd41 	bl	80137b0 <find_volume>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3720      	adds	r7, #32
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	20000a10 	.word	0x20000a10

08013d40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b098      	sub	sp, #96	; 0x60
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <f_open+0x18>
 8013d54:	2309      	movs	r3, #9
 8013d56:	e1ad      	b.n	80140b4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d58:	79fb      	ldrb	r3, [r7, #7]
 8013d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013d60:	79fa      	ldrb	r2, [r7, #7]
 8013d62:	f107 0110 	add.w	r1, r7, #16
 8013d66:	f107 0308 	add.w	r3, r7, #8
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7ff fd20 	bl	80137b0 <find_volume>
 8013d70:	4603      	mov	r3, r0
 8013d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	f040 8191 	bne.w	80140a2 <f_open+0x362>
		dj.obj.fs = fs;
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d84:	68ba      	ldr	r2, [r7, #8]
 8013d86:	f107 0314 	add.w	r3, r7, #20
 8013d8a:	4611      	mov	r1, r2
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7ff fc03 	bl	8013598 <follow_path>
 8013d92:	4603      	mov	r3, r0
 8013d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d11a      	bne.n	8013dd6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013da0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013da4:	b25b      	sxtb	r3, r3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	da03      	bge.n	8013db2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013daa:	2306      	movs	r3, #6
 8013dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013db0:	e011      	b.n	8013dd6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	f023 0301 	bic.w	r3, r3, #1
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	bf14      	ite	ne
 8013dbc:	2301      	movne	r3, #1
 8013dbe:	2300      	moveq	r3, #0
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	f107 0314 	add.w	r3, r7, #20
 8013dc8:	4611      	mov	r1, r2
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fe fbd2 	bl	8012574 <chk_lock>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013dd6:	79fb      	ldrb	r3, [r7, #7]
 8013dd8:	f003 031c 	and.w	r3, r3, #28
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d07f      	beq.n	8013ee0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d017      	beq.n	8013e18 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dec:	2b04      	cmp	r3, #4
 8013dee:	d10e      	bne.n	8013e0e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013df0:	f7fe fc1c 	bl	801262c <enq_lock>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d006      	beq.n	8013e08 <f_open+0xc8>
 8013dfa:	f107 0314 	add.w	r3, r7, #20
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7ff fb03 	bl	801340a <dir_register>
 8013e04:	4603      	mov	r3, r0
 8013e06:	e000      	b.n	8013e0a <f_open+0xca>
 8013e08:	2312      	movs	r3, #18
 8013e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e0e:	79fb      	ldrb	r3, [r7, #7]
 8013e10:	f043 0308 	orr.w	r3, r3, #8
 8013e14:	71fb      	strb	r3, [r7, #7]
 8013e16:	e010      	b.n	8013e3a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e18:	7ebb      	ldrb	r3, [r7, #26]
 8013e1a:	f003 0311 	and.w	r3, r3, #17
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d003      	beq.n	8013e2a <f_open+0xea>
					res = FR_DENIED;
 8013e22:	2307      	movs	r3, #7
 8013e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e28:	e007      	b.n	8013e3a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013e2a:	79fb      	ldrb	r3, [r7, #7]
 8013e2c:	f003 0304 	and.w	r3, r3, #4
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d002      	beq.n	8013e3a <f_open+0xfa>
 8013e34:	2308      	movs	r3, #8
 8013e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d168      	bne.n	8013f14 <f_open+0x1d4>
 8013e42:	79fb      	ldrb	r3, [r7, #7]
 8013e44:	f003 0308 	and.w	r3, r3, #8
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d063      	beq.n	8013f14 <f_open+0x1d4>
				dw = GET_FATTIME();
 8013e4c:	f7fe f92c 	bl	80120a8 <get_fattime>
 8013e50:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e54:	330e      	adds	r3, #14
 8013e56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fe fae1 	bl	8012420 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e60:	3316      	adds	r3, #22
 8013e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fe fadb 	bl	8012420 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e6c:	330b      	adds	r3, #11
 8013e6e:	2220      	movs	r2, #32
 8013e70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e76:	4611      	mov	r1, r2
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7ff fa32 	bl	80132e2 <ld_clust>
 8013e7e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e84:	2200      	movs	r2, #0
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7ff fa4a 	bl	8013320 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e8e:	331c      	adds	r3, #28
 8013e90:	2100      	movs	r1, #0
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fe fac4 	bl	8012420 <st_dword>
					fs->wflag = 1;
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d037      	beq.n	8013f14 <f_open+0x1d4>
						dw = fs->winsect;
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013eaa:	f107 0314 	add.w	r3, r7, #20
 8013eae:	2200      	movs	r2, #0
 8013eb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fe ff5d 	bl	8012d72 <remove_chain>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013ebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d126      	bne.n	8013f14 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7fe fd02 	bl	80128d4 <move_window>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013eda:	3a01      	subs	r2, #1
 8013edc:	60da      	str	r2, [r3, #12]
 8013ede:	e019      	b.n	8013f14 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013ee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d115      	bne.n	8013f14 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013ee8:	7ebb      	ldrb	r3, [r7, #26]
 8013eea:	f003 0310 	and.w	r3, r3, #16
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d003      	beq.n	8013efa <f_open+0x1ba>
					res = FR_NO_FILE;
 8013ef2:	2304      	movs	r3, #4
 8013ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013ef8:	e00c      	b.n	8013f14 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013efa:	79fb      	ldrb	r3, [r7, #7]
 8013efc:	f003 0302 	and.w	r3, r3, #2
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d007      	beq.n	8013f14 <f_open+0x1d4>
 8013f04:	7ebb      	ldrb	r3, [r7, #26]
 8013f06:	f003 0301 	and.w	r3, r3, #1
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d002      	beq.n	8013f14 <f_open+0x1d4>
						res = FR_DENIED;
 8013f0e:	2307      	movs	r3, #7
 8013f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d128      	bne.n	8013f6e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013f1c:	79fb      	ldrb	r3, [r7, #7]
 8013f1e:	f003 0308 	and.w	r3, r3, #8
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d003      	beq.n	8013f2e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013f26:	79fb      	ldrb	r3, [r7, #7]
 8013f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f3c:	79fb      	ldrb	r3, [r7, #7]
 8013f3e:	f023 0301 	bic.w	r3, r3, #1
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	bf14      	ite	ne
 8013f46:	2301      	movne	r3, #1
 8013f48:	2300      	moveq	r3, #0
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	f107 0314 	add.w	r3, r7, #20
 8013f52:	4611      	mov	r1, r2
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fe fb8b 	bl	8012670 <inc_lock>
 8013f5a:	4602      	mov	r2, r0
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	691b      	ldr	r3, [r3, #16]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d102      	bne.n	8013f6e <f_open+0x22e>
 8013f68:	2302      	movs	r3, #2
 8013f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f040 8095 	bne.w	80140a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7ff f9af 	bl	80132e2 <ld_clust>
 8013f84:	4602      	mov	r2, r0
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8c:	331c      	adds	r3, #28
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fe fa08 	bl	80123a4 <ld_dword>
 8013f94:	4602      	mov	r2, r0
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013fa0:	693a      	ldr	r2, [r7, #16]
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	88da      	ldrh	r2, [r3, #6]
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	79fa      	ldrb	r2, [r7, #7]
 8013fb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	3330      	adds	r3, #48	; 0x30
 8013fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013fce:	2100      	movs	r1, #0
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7fe fa72 	bl	80124ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013fd6:	79fb      	ldrb	r3, [r7, #7]
 8013fd8:	f003 0320 	and.w	r3, r3, #32
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d060      	beq.n	80140a2 <f_open+0x362>
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d05c      	beq.n	80140a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	68da      	ldr	r2, [r3, #12]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	895b      	ldrh	r3, [r3, #10]
 8013ff4:	025b      	lsls	r3, r3, #9
 8013ff6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	657b      	str	r3, [r7, #84]	; 0x54
 8014004:	e016      	b.n	8014034 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801400a:	4618      	mov	r0, r3
 801400c:	f7fe fd1d 	bl	8012a4a <get_fat>
 8014010:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014014:	2b01      	cmp	r3, #1
 8014016:	d802      	bhi.n	801401e <f_open+0x2de>
 8014018:	2302      	movs	r3, #2
 801401a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801401e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014024:	d102      	bne.n	801402c <f_open+0x2ec>
 8014026:	2301      	movs	r3, #1
 8014028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801402c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	657b      	str	r3, [r7, #84]	; 0x54
 8014034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014038:	2b00      	cmp	r3, #0
 801403a:	d103      	bne.n	8014044 <f_open+0x304>
 801403c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014040:	429a      	cmp	r2, r3
 8014042:	d8e0      	bhi.n	8014006 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014048:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801404a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801404e:	2b00      	cmp	r3, #0
 8014050:	d127      	bne.n	80140a2 <f_open+0x362>
 8014052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014058:	2b00      	cmp	r3, #0
 801405a:	d022      	beq.n	80140a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014060:	4618      	mov	r0, r3
 8014062:	f7fe fcd3 	bl	8012a0c <clust2sect>
 8014066:	6478      	str	r0, [r7, #68]	; 0x44
 8014068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801406a:	2b00      	cmp	r3, #0
 801406c:	d103      	bne.n	8014076 <f_open+0x336>
						res = FR_INT_ERR;
 801406e:	2302      	movs	r3, #2
 8014070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014074:	e015      	b.n	80140a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014078:	0a5a      	lsrs	r2, r3, #9
 801407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801407c:	441a      	add	r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	7858      	ldrb	r0, [r3, #1]
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6a1a      	ldr	r2, [r3, #32]
 8014090:	2301      	movs	r3, #1
 8014092:	f7fe f911 	bl	80122b8 <disk_read>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d002      	beq.n	80140a2 <f_open+0x362>
 801409c:	2301      	movs	r3, #1
 801409e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80140a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d002      	beq.n	80140b0 <f_open+0x370>
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2200      	movs	r2, #0
 80140ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80140b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3760      	adds	r7, #96	; 0x60
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b08e      	sub	sp, #56	; 0x38
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	2200      	movs	r2, #0
 80140d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	f107 0214 	add.w	r2, r7, #20
 80140da:	4611      	mov	r1, r2
 80140dc:	4618      	mov	r0, r3
 80140de:	f7ff fdb3 	bl	8013c48 <validate>
 80140e2:	4603      	mov	r3, r0
 80140e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80140e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d107      	bne.n	8014100 <f_read+0x44>
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	7d5b      	ldrb	r3, [r3, #21]
 80140f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80140f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d002      	beq.n	8014106 <f_read+0x4a>
 8014100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014104:	e115      	b.n	8014332 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	7d1b      	ldrb	r3, [r3, #20]
 801410a:	f003 0301 	and.w	r3, r3, #1
 801410e:	2b00      	cmp	r3, #0
 8014110:	d101      	bne.n	8014116 <f_read+0x5a>
 8014112:	2307      	movs	r3, #7
 8014114:	e10d      	b.n	8014332 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	68da      	ldr	r2, [r3, #12]
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	699b      	ldr	r3, [r3, #24]
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	6a3b      	ldr	r3, [r7, #32]
 8014126:	429a      	cmp	r2, r3
 8014128:	f240 80fe 	bls.w	8014328 <f_read+0x26c>
 801412c:	6a3b      	ldr	r3, [r7, #32]
 801412e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014130:	e0fa      	b.n	8014328 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	699b      	ldr	r3, [r3, #24]
 8014136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801413a:	2b00      	cmp	r3, #0
 801413c:	f040 80c6 	bne.w	80142cc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	699b      	ldr	r3, [r3, #24]
 8014144:	0a5b      	lsrs	r3, r3, #9
 8014146:	697a      	ldr	r2, [r7, #20]
 8014148:	8952      	ldrh	r2, [r2, #10]
 801414a:	3a01      	subs	r2, #1
 801414c:	4013      	ands	r3, r2
 801414e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d12f      	bne.n	80141b6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	699b      	ldr	r3, [r3, #24]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d103      	bne.n	8014166 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	689b      	ldr	r3, [r3, #8]
 8014162:	633b      	str	r3, [r7, #48]	; 0x30
 8014164:	e013      	b.n	801418e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416a:	2b00      	cmp	r3, #0
 801416c:	d007      	beq.n	801417e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	699b      	ldr	r3, [r3, #24]
 8014172:	4619      	mov	r1, r3
 8014174:	68f8      	ldr	r0, [r7, #12]
 8014176:	f7fe fef9 	bl	8012f6c <clmt_clust>
 801417a:	6338      	str	r0, [r7, #48]	; 0x30
 801417c:	e007      	b.n	801418e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	69db      	ldr	r3, [r3, #28]
 8014184:	4619      	mov	r1, r3
 8014186:	4610      	mov	r0, r2
 8014188:	f7fe fc5f 	bl	8012a4a <get_fat>
 801418c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014190:	2b01      	cmp	r3, #1
 8014192:	d804      	bhi.n	801419e <f_read+0xe2>
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	2202      	movs	r2, #2
 8014198:	755a      	strb	r2, [r3, #21]
 801419a:	2302      	movs	r3, #2
 801419c:	e0c9      	b.n	8014332 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141a4:	d104      	bne.n	80141b0 <f_read+0xf4>
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	2201      	movs	r2, #1
 80141aa:	755a      	strb	r2, [r3, #21]
 80141ac:	2301      	movs	r3, #1
 80141ae:	e0c0      	b.n	8014332 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141b6:	697a      	ldr	r2, [r7, #20]
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	69db      	ldr	r3, [r3, #28]
 80141bc:	4619      	mov	r1, r3
 80141be:	4610      	mov	r0, r2
 80141c0:	f7fe fc24 	bl	8012a0c <clust2sect>
 80141c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141c6:	69bb      	ldr	r3, [r7, #24]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d104      	bne.n	80141d6 <f_read+0x11a>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2202      	movs	r2, #2
 80141d0:	755a      	strb	r2, [r3, #21]
 80141d2:	2302      	movs	r3, #2
 80141d4:	e0ad      	b.n	8014332 <f_read+0x276>
			sect += csect;
 80141d6:	69ba      	ldr	r2, [r7, #24]
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	4413      	add	r3, r2
 80141dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	0a5b      	lsrs	r3, r3, #9
 80141e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80141e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d039      	beq.n	801425e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141ea:	69fa      	ldr	r2, [r7, #28]
 80141ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ee:	4413      	add	r3, r2
 80141f0:	697a      	ldr	r2, [r7, #20]
 80141f2:	8952      	ldrh	r2, [r2, #10]
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d905      	bls.n	8014204 <f_read+0x148>
					cc = fs->csize - csect;
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	895b      	ldrh	r3, [r3, #10]
 80141fc:	461a      	mov	r2, r3
 80141fe:	69fb      	ldr	r3, [r7, #28]
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	7858      	ldrb	r0, [r3, #1]
 8014208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420a:	69ba      	ldr	r2, [r7, #24]
 801420c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801420e:	f7fe f853 	bl	80122b8 <disk_read>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d004      	beq.n	8014222 <f_read+0x166>
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	2201      	movs	r2, #1
 801421c:	755a      	strb	r2, [r3, #21]
 801421e:	2301      	movs	r3, #1
 8014220:	e087      	b.n	8014332 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	7d1b      	ldrb	r3, [r3, #20]
 8014226:	b25b      	sxtb	r3, r3
 8014228:	2b00      	cmp	r3, #0
 801422a:	da14      	bge.n	8014256 <f_read+0x19a>
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6a1a      	ldr	r2, [r3, #32]
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014236:	429a      	cmp	r2, r3
 8014238:	d90d      	bls.n	8014256 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	6a1a      	ldr	r2, [r3, #32]
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	025b      	lsls	r3, r3, #9
 8014244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014246:	18d0      	adds	r0, r2, r3
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	3330      	adds	r3, #48	; 0x30
 801424c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014250:	4619      	mov	r1, r3
 8014252:	f7fe f911 	bl	8012478 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014258:	025b      	lsls	r3, r3, #9
 801425a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801425c:	e050      	b.n	8014300 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6a1b      	ldr	r3, [r3, #32]
 8014262:	69ba      	ldr	r2, [r7, #24]
 8014264:	429a      	cmp	r2, r3
 8014266:	d02e      	beq.n	80142c6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	7d1b      	ldrb	r3, [r3, #20]
 801426c:	b25b      	sxtb	r3, r3
 801426e:	2b00      	cmp	r3, #0
 8014270:	da18      	bge.n	80142a4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	7858      	ldrb	r0, [r3, #1]
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	6a1a      	ldr	r2, [r3, #32]
 8014280:	2301      	movs	r3, #1
 8014282:	f7fe f839 	bl	80122f8 <disk_write>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d004      	beq.n	8014296 <f_read+0x1da>
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2201      	movs	r2, #1
 8014290:	755a      	strb	r2, [r3, #21]
 8014292:	2301      	movs	r3, #1
 8014294:	e04d      	b.n	8014332 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	7d1b      	ldrb	r3, [r3, #20]
 801429a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801429e:	b2da      	uxtb	r2, r3
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	7858      	ldrb	r0, [r3, #1]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142ae:	2301      	movs	r3, #1
 80142b0:	69ba      	ldr	r2, [r7, #24]
 80142b2:	f7fe f801 	bl	80122b8 <disk_read>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d004      	beq.n	80142c6 <f_read+0x20a>
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2201      	movs	r2, #1
 80142c0:	755a      	strb	r2, [r3, #21]
 80142c2:	2301      	movs	r3, #1
 80142c4:	e035      	b.n	8014332 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	69ba      	ldr	r2, [r7, #24]
 80142ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	699b      	ldr	r3, [r3, #24]
 80142d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80142d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80142da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d901      	bls.n	80142e6 <f_read+0x22a>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	699b      	ldr	r3, [r3, #24]
 80142f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142f4:	4413      	add	r3, r2
 80142f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142f8:	4619      	mov	r1, r3
 80142fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142fc:	f7fe f8bc 	bl	8012478 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014304:	4413      	add	r3, r2
 8014306:	627b      	str	r3, [r7, #36]	; 0x24
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	699a      	ldr	r2, [r3, #24]
 801430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430e:	441a      	add	r2, r3
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	619a      	str	r2, [r3, #24]
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	681a      	ldr	r2, [r3, #0]
 8014318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431a:	441a      	add	r2, r3
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	601a      	str	r2, [r3, #0]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014324:	1ad3      	subs	r3, r2, r3
 8014326:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2b00      	cmp	r3, #0
 801432c:	f47f af01 	bne.w	8014132 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3738      	adds	r7, #56	; 0x38
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b08c      	sub	sp, #48	; 0x30
 801433e:	af00      	add	r7, sp, #0
 8014340:	60f8      	str	r0, [r7, #12]
 8014342:	60b9      	str	r1, [r7, #8]
 8014344:	607a      	str	r2, [r7, #4]
 8014346:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	2200      	movs	r2, #0
 8014350:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	f107 0210 	add.w	r2, r7, #16
 8014358:	4611      	mov	r1, r2
 801435a:	4618      	mov	r0, r3
 801435c:	f7ff fc74 	bl	8013c48 <validate>
 8014360:	4603      	mov	r3, r0
 8014362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801436a:	2b00      	cmp	r3, #0
 801436c:	d107      	bne.n	801437e <f_write+0x44>
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	7d5b      	ldrb	r3, [r3, #21]
 8014372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801437a:	2b00      	cmp	r3, #0
 801437c:	d002      	beq.n	8014384 <f_write+0x4a>
 801437e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014382:	e14b      	b.n	801461c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	7d1b      	ldrb	r3, [r3, #20]
 8014388:	f003 0302 	and.w	r3, r3, #2
 801438c:	2b00      	cmp	r3, #0
 801438e:	d101      	bne.n	8014394 <f_write+0x5a>
 8014390:	2307      	movs	r3, #7
 8014392:	e143      	b.n	801461c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	699a      	ldr	r2, [r3, #24]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	441a      	add	r2, r3
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	699b      	ldr	r3, [r3, #24]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	f080 812d 	bcs.w	8014600 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	43db      	mvns	r3, r3
 80143ac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80143ae:	e127      	b.n	8014600 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	699b      	ldr	r3, [r3, #24]
 80143b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f040 80e3 	bne.w	8014584 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	699b      	ldr	r3, [r3, #24]
 80143c2:	0a5b      	lsrs	r3, r3, #9
 80143c4:	693a      	ldr	r2, [r7, #16]
 80143c6:	8952      	ldrh	r2, [r2, #10]
 80143c8:	3a01      	subs	r2, #1
 80143ca:	4013      	ands	r3, r2
 80143cc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d143      	bne.n	801445c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	699b      	ldr	r3, [r3, #24]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d10c      	bne.n	80143f6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	689b      	ldr	r3, [r3, #8]
 80143e0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d11a      	bne.n	801441e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2100      	movs	r1, #0
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fe fd25 	bl	8012e3c <create_chain>
 80143f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80143f4:	e013      	b.n	801441e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d007      	beq.n	801440e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	699b      	ldr	r3, [r3, #24]
 8014402:	4619      	mov	r1, r3
 8014404:	68f8      	ldr	r0, [r7, #12]
 8014406:	f7fe fdb1 	bl	8012f6c <clmt_clust>
 801440a:	62b8      	str	r0, [r7, #40]	; 0x28
 801440c:	e007      	b.n	801441e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	69db      	ldr	r3, [r3, #28]
 8014414:	4619      	mov	r1, r3
 8014416:	4610      	mov	r0, r2
 8014418:	f7fe fd10 	bl	8012e3c <create_chain>
 801441c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014420:	2b00      	cmp	r3, #0
 8014422:	f000 80f2 	beq.w	801460a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014428:	2b01      	cmp	r3, #1
 801442a:	d104      	bne.n	8014436 <f_write+0xfc>
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2202      	movs	r2, #2
 8014430:	755a      	strb	r2, [r3, #21]
 8014432:	2302      	movs	r3, #2
 8014434:	e0f2      	b.n	801461c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801443c:	d104      	bne.n	8014448 <f_write+0x10e>
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2201      	movs	r2, #1
 8014442:	755a      	strb	r2, [r3, #21]
 8014444:	2301      	movs	r3, #1
 8014446:	e0e9      	b.n	801461c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801444c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	689b      	ldr	r3, [r3, #8]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d102      	bne.n	801445c <f_write+0x122>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801445a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	7d1b      	ldrb	r3, [r3, #20]
 8014460:	b25b      	sxtb	r3, r3
 8014462:	2b00      	cmp	r3, #0
 8014464:	da18      	bge.n	8014498 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	7858      	ldrb	r0, [r3, #1]
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	6a1a      	ldr	r2, [r3, #32]
 8014474:	2301      	movs	r3, #1
 8014476:	f7fd ff3f 	bl	80122f8 <disk_write>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d004      	beq.n	801448a <f_write+0x150>
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2201      	movs	r2, #1
 8014484:	755a      	strb	r2, [r3, #21]
 8014486:	2301      	movs	r3, #1
 8014488:	e0c8      	b.n	801461c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	7d1b      	ldrb	r3, [r3, #20]
 801448e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014492:	b2da      	uxtb	r2, r3
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014498:	693a      	ldr	r2, [r7, #16]
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	69db      	ldr	r3, [r3, #28]
 801449e:	4619      	mov	r1, r3
 80144a0:	4610      	mov	r0, r2
 80144a2:	f7fe fab3 	bl	8012a0c <clust2sect>
 80144a6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d104      	bne.n	80144b8 <f_write+0x17e>
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	2202      	movs	r2, #2
 80144b2:	755a      	strb	r2, [r3, #21]
 80144b4:	2302      	movs	r3, #2
 80144b6:	e0b1      	b.n	801461c <f_write+0x2e2>
			sect += csect;
 80144b8:	697a      	ldr	r2, [r7, #20]
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	4413      	add	r3, r2
 80144be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	0a5b      	lsrs	r3, r3, #9
 80144c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80144c6:	6a3b      	ldr	r3, [r7, #32]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d03c      	beq.n	8014546 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80144cc:	69ba      	ldr	r2, [r7, #24]
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	4413      	add	r3, r2
 80144d2:	693a      	ldr	r2, [r7, #16]
 80144d4:	8952      	ldrh	r2, [r2, #10]
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d905      	bls.n	80144e6 <f_write+0x1ac>
					cc = fs->csize - csect;
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	895b      	ldrh	r3, [r3, #10]
 80144de:	461a      	mov	r2, r3
 80144e0:	69bb      	ldr	r3, [r7, #24]
 80144e2:	1ad3      	subs	r3, r2, r3
 80144e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	7858      	ldrb	r0, [r3, #1]
 80144ea:	6a3b      	ldr	r3, [r7, #32]
 80144ec:	697a      	ldr	r2, [r7, #20]
 80144ee:	69f9      	ldr	r1, [r7, #28]
 80144f0:	f7fd ff02 	bl	80122f8 <disk_write>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d004      	beq.n	8014504 <f_write+0x1ca>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2201      	movs	r2, #1
 80144fe:	755a      	strb	r2, [r3, #21]
 8014500:	2301      	movs	r3, #1
 8014502:	e08b      	b.n	801461c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6a1a      	ldr	r2, [r3, #32]
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	6a3a      	ldr	r2, [r7, #32]
 801450e:	429a      	cmp	r2, r3
 8014510:	d915      	bls.n	801453e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	6a1a      	ldr	r2, [r3, #32]
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	1ad3      	subs	r3, r2, r3
 8014520:	025b      	lsls	r3, r3, #9
 8014522:	69fa      	ldr	r2, [r7, #28]
 8014524:	4413      	add	r3, r2
 8014526:	f44f 7200 	mov.w	r2, #512	; 0x200
 801452a:	4619      	mov	r1, r3
 801452c:	f7fd ffa4 	bl	8012478 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	7d1b      	ldrb	r3, [r3, #20]
 8014534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014538:	b2da      	uxtb	r2, r3
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801453e:	6a3b      	ldr	r3, [r7, #32]
 8014540:	025b      	lsls	r3, r3, #9
 8014542:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014544:	e03f      	b.n	80145c6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	6a1b      	ldr	r3, [r3, #32]
 801454a:	697a      	ldr	r2, [r7, #20]
 801454c:	429a      	cmp	r2, r3
 801454e:	d016      	beq.n	801457e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	699a      	ldr	r2, [r3, #24]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014558:	429a      	cmp	r2, r3
 801455a:	d210      	bcs.n	801457e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	7858      	ldrb	r0, [r3, #1]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014566:	2301      	movs	r3, #1
 8014568:	697a      	ldr	r2, [r7, #20]
 801456a:	f7fd fea5 	bl	80122b8 <disk_read>
 801456e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014570:	2b00      	cmp	r3, #0
 8014572:	d004      	beq.n	801457e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2201      	movs	r2, #1
 8014578:	755a      	strb	r2, [r3, #21]
 801457a:	2301      	movs	r3, #1
 801457c:	e04e      	b.n	801461c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	697a      	ldr	r2, [r7, #20]
 8014582:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	699b      	ldr	r3, [r3, #24]
 8014588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801458c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014590:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	429a      	cmp	r2, r3
 8014598:	d901      	bls.n	801459e <f_write+0x264>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	699b      	ldr	r3, [r3, #24]
 80145a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145ac:	4413      	add	r3, r2
 80145ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145b0:	69f9      	ldr	r1, [r7, #28]
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fd ff60 	bl	8012478 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	7d1b      	ldrb	r3, [r3, #20]
 80145bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80145c0:	b2da      	uxtb	r2, r3
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80145c6:	69fa      	ldr	r2, [r7, #28]
 80145c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ca:	4413      	add	r3, r2
 80145cc:	61fb      	str	r3, [r7, #28]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	699a      	ldr	r2, [r3, #24]
 80145d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d4:	441a      	add	r2, r3
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	619a      	str	r2, [r3, #24]
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	68da      	ldr	r2, [r3, #12]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	699b      	ldr	r3, [r3, #24]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	bf38      	it	cc
 80145e6:	461a      	movcc	r2, r3
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	60da      	str	r2, [r3, #12]
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	441a      	add	r2, r3
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	601a      	str	r2, [r3, #0]
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fc:	1ad3      	subs	r3, r2, r3
 80145fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2b00      	cmp	r3, #0
 8014604:	f47f aed4 	bne.w	80143b0 <f_write+0x76>
 8014608:	e000      	b.n	801460c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801460a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	7d1b      	ldrb	r3, [r3, #20]
 8014610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014614:	b2da      	uxtb	r2, r3
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801461a:	2300      	movs	r3, #0
}
 801461c:	4618      	mov	r0, r3
 801461e:	3730      	adds	r7, #48	; 0x30
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b086      	sub	sp, #24
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f107 0208 	add.w	r2, r7, #8
 8014632:	4611      	mov	r1, r2
 8014634:	4618      	mov	r0, r3
 8014636:	f7ff fb07 	bl	8013c48 <validate>
 801463a:	4603      	mov	r3, r0
 801463c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801463e:	7dfb      	ldrb	r3, [r7, #23]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d168      	bne.n	8014716 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	7d1b      	ldrb	r3, [r3, #20]
 8014648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801464c:	2b00      	cmp	r3, #0
 801464e:	d062      	beq.n	8014716 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	7d1b      	ldrb	r3, [r3, #20]
 8014654:	b25b      	sxtb	r3, r3
 8014656:	2b00      	cmp	r3, #0
 8014658:	da15      	bge.n	8014686 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	7858      	ldrb	r0, [r3, #1]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6a1a      	ldr	r2, [r3, #32]
 8014668:	2301      	movs	r3, #1
 801466a:	f7fd fe45 	bl	80122f8 <disk_write>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d001      	beq.n	8014678 <f_sync+0x54>
 8014674:	2301      	movs	r3, #1
 8014676:	e04f      	b.n	8014718 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	7d1b      	ldrb	r3, [r3, #20]
 801467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014680:	b2da      	uxtb	r2, r3
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014686:	f7fd fd0f 	bl	80120a8 <get_fattime>
 801468a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801468c:	68ba      	ldr	r2, [r7, #8]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014692:	4619      	mov	r1, r3
 8014694:	4610      	mov	r0, r2
 8014696:	f7fe f91d 	bl	80128d4 <move_window>
 801469a:	4603      	mov	r3, r0
 801469c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801469e:	7dfb      	ldrb	r3, [r7, #23]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d138      	bne.n	8014716 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146a8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	330b      	adds	r3, #11
 80146ae:	781a      	ldrb	r2, [r3, #0]
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	330b      	adds	r3, #11
 80146b4:	f042 0220 	orr.w	r2, r2, #32
 80146b8:	b2d2      	uxtb	r2, r2
 80146ba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6818      	ldr	r0, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	689b      	ldr	r3, [r3, #8]
 80146c4:	461a      	mov	r2, r3
 80146c6:	68f9      	ldr	r1, [r7, #12]
 80146c8:	f7fe fe2a 	bl	8013320 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f103 021c 	add.w	r2, r3, #28
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	4619      	mov	r1, r3
 80146d8:	4610      	mov	r0, r2
 80146da:	f7fd fea1 	bl	8012420 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	3316      	adds	r3, #22
 80146e2:	6939      	ldr	r1, [r7, #16]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7fd fe9b 	bl	8012420 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	3312      	adds	r3, #18
 80146ee:	2100      	movs	r1, #0
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7fd fe7a 	bl	80123ea <st_word>
					fs->wflag = 1;
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	2201      	movs	r2, #1
 80146fa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	4618      	mov	r0, r3
 8014700:	f7fe f916 	bl	8012930 <sync_fs>
 8014704:	4603      	mov	r3, r0
 8014706:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	7d1b      	ldrb	r3, [r3, #20]
 801470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014710:	b2da      	uxtb	r2, r3
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014716:	7dfb      	ldrb	r3, [r7, #23]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3718      	adds	r7, #24
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7ff ff7b 	bl	8014624 <f_sync>
 801472e:	4603      	mov	r3, r0
 8014730:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014732:	7bfb      	ldrb	r3, [r7, #15]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d118      	bne.n	801476a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f107 0208 	add.w	r2, r7, #8
 801473e:	4611      	mov	r1, r2
 8014740:	4618      	mov	r0, r3
 8014742:	f7ff fa81 	bl	8013c48 <validate>
 8014746:	4603      	mov	r3, r0
 8014748:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801474a:	7bfb      	ldrb	r3, [r7, #15]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d10c      	bne.n	801476a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	691b      	ldr	r3, [r3, #16]
 8014754:	4618      	mov	r0, r3
 8014756:	f7fe f819 	bl	801278c <dec_lock>
 801475a:	4603      	mov	r3, r0
 801475c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801475e:	7bfb      	ldrb	r3, [r7, #15]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d102      	bne.n	801476a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801476a:	7bfb      	ldrb	r3, [r7, #15]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b090      	sub	sp, #64	; 0x40
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f107 0208 	add.w	r2, r7, #8
 8014784:	4611      	mov	r1, r2
 8014786:	4618      	mov	r0, r3
 8014788:	f7ff fa5e 	bl	8013c48 <validate>
 801478c:	4603      	mov	r3, r0
 801478e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014796:	2b00      	cmp	r3, #0
 8014798:	d103      	bne.n	80147a2 <f_lseek+0x2e>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	7d5b      	ldrb	r3, [r3, #21]
 801479e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80147a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d002      	beq.n	80147b0 <f_lseek+0x3c>
 80147aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147ae:	e1e6      	b.n	8014b7e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f000 80d1 	beq.w	801495c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147c0:	d15a      	bne.n	8014878 <f_lseek+0x104>
			tbl = fp->cltbl;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80147c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ca:	1d1a      	adds	r2, r3, #4
 80147cc:	627a      	str	r2, [r7, #36]	; 0x24
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	617b      	str	r3, [r7, #20]
 80147d2:	2302      	movs	r3, #2
 80147d4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	689b      	ldr	r3, [r3, #8]
 80147da:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80147dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d03a      	beq.n	8014858 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80147e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e4:	613b      	str	r3, [r7, #16]
 80147e6:	2300      	movs	r3, #0
 80147e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ec:	3302      	adds	r3, #2
 80147ee:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80147f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f2:	60fb      	str	r3, [r7, #12]
 80147f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f6:	3301      	adds	r3, #1
 80147f8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fe f923 	bl	8012a4a <get_fat>
 8014804:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014808:	2b01      	cmp	r3, #1
 801480a:	d804      	bhi.n	8014816 <f_lseek+0xa2>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2202      	movs	r2, #2
 8014810:	755a      	strb	r2, [r3, #21]
 8014812:	2302      	movs	r3, #2
 8014814:	e1b3      	b.n	8014b7e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801481c:	d104      	bne.n	8014828 <f_lseek+0xb4>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2201      	movs	r2, #1
 8014822:	755a      	strb	r2, [r3, #21]
 8014824:	2301      	movs	r3, #1
 8014826:	e1aa      	b.n	8014b7e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	3301      	adds	r3, #1
 801482c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801482e:	429a      	cmp	r2, r3
 8014830:	d0de      	beq.n	80147f0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	429a      	cmp	r2, r3
 8014838:	d809      	bhi.n	801484e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483c:	1d1a      	adds	r2, r3, #4
 801483e:	627a      	str	r2, [r7, #36]	; 0x24
 8014840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014842:	601a      	str	r2, [r3, #0]
 8014844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014846:	1d1a      	adds	r2, r3, #4
 8014848:	627a      	str	r2, [r7, #36]	; 0x24
 801484a:	693a      	ldr	r2, [r7, #16]
 801484c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	695b      	ldr	r3, [r3, #20]
 8014852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014854:	429a      	cmp	r2, r3
 8014856:	d3c4      	bcc.n	80147e2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801485e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	429a      	cmp	r2, r3
 8014866:	d803      	bhi.n	8014870 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486a:	2200      	movs	r2, #0
 801486c:	601a      	str	r2, [r3, #0]
 801486e:	e184      	b.n	8014b7a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014870:	2311      	movs	r3, #17
 8014872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014876:	e180      	b.n	8014b7a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	683a      	ldr	r2, [r7, #0]
 801487e:	429a      	cmp	r2, r3
 8014880:	d902      	bls.n	8014888 <f_lseek+0x114>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	2b00      	cmp	r3, #0
 8014892:	f000 8172 	beq.w	8014b7a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	3b01      	subs	r3, #1
 801489a:	4619      	mov	r1, r3
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f7fe fb65 	bl	8012f6c <clmt_clust>
 80148a2:	4602      	mov	r2, r0
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80148a8:	68ba      	ldr	r2, [r7, #8]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	69db      	ldr	r3, [r3, #28]
 80148ae:	4619      	mov	r1, r3
 80148b0:	4610      	mov	r0, r2
 80148b2:	f7fe f8ab 	bl	8012a0c <clust2sect>
 80148b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80148b8:	69bb      	ldr	r3, [r7, #24]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d104      	bne.n	80148c8 <f_lseek+0x154>
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2202      	movs	r2, #2
 80148c2:	755a      	strb	r2, [r3, #21]
 80148c4:	2302      	movs	r3, #2
 80148c6:	e15a      	b.n	8014b7e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	3b01      	subs	r3, #1
 80148cc:	0a5b      	lsrs	r3, r3, #9
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	8952      	ldrh	r2, [r2, #10]
 80148d2:	3a01      	subs	r2, #1
 80148d4:	4013      	ands	r3, r2
 80148d6:	69ba      	ldr	r2, [r7, #24]
 80148d8:	4413      	add	r3, r2
 80148da:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	699b      	ldr	r3, [r3, #24]
 80148e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	f000 8148 	beq.w	8014b7a <f_lseek+0x406>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6a1b      	ldr	r3, [r3, #32]
 80148ee:	69ba      	ldr	r2, [r7, #24]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	f000 8142 	beq.w	8014b7a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	7d1b      	ldrb	r3, [r3, #20]
 80148fa:	b25b      	sxtb	r3, r3
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	da18      	bge.n	8014932 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	7858      	ldrb	r0, [r3, #1]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6a1a      	ldr	r2, [r3, #32]
 801490e:	2301      	movs	r3, #1
 8014910:	f7fd fcf2 	bl	80122f8 <disk_write>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	d004      	beq.n	8014924 <f_lseek+0x1b0>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2201      	movs	r2, #1
 801491e:	755a      	strb	r2, [r3, #21]
 8014920:	2301      	movs	r3, #1
 8014922:	e12c      	b.n	8014b7e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7d1b      	ldrb	r3, [r3, #20]
 8014928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801492c:	b2da      	uxtb	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	7858      	ldrb	r0, [r3, #1]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801493c:	2301      	movs	r3, #1
 801493e:	69ba      	ldr	r2, [r7, #24]
 8014940:	f7fd fcba 	bl	80122b8 <disk_read>
 8014944:	4603      	mov	r3, r0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d004      	beq.n	8014954 <f_lseek+0x1e0>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2201      	movs	r2, #1
 801494e:	755a      	strb	r2, [r3, #21]
 8014950:	2301      	movs	r3, #1
 8014952:	e114      	b.n	8014b7e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	69ba      	ldr	r2, [r7, #24]
 8014958:	621a      	str	r2, [r3, #32]
 801495a:	e10e      	b.n	8014b7a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	683a      	ldr	r2, [r7, #0]
 8014962:	429a      	cmp	r2, r3
 8014964:	d908      	bls.n	8014978 <f_lseek+0x204>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	7d1b      	ldrb	r3, [r3, #20]
 801496a:	f003 0302 	and.w	r3, r3, #2
 801496e:	2b00      	cmp	r3, #0
 8014970:	d102      	bne.n	8014978 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	699b      	ldr	r3, [r3, #24]
 801497c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801497e:	2300      	movs	r3, #0
 8014980:	637b      	str	r3, [r7, #52]	; 0x34
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014986:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	2b00      	cmp	r3, #0
 801498c:	f000 80a7 	beq.w	8014ade <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	895b      	ldrh	r3, [r3, #10]
 8014994:	025b      	lsls	r3, r3, #9
 8014996:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d01b      	beq.n	80149d6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	1e5a      	subs	r2, r3, #1
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80149a8:	6a3b      	ldr	r3, [r7, #32]
 80149aa:	1e59      	subs	r1, r3, #1
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d30f      	bcc.n	80149d6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80149b6:	6a3b      	ldr	r3, [r7, #32]
 80149b8:	1e5a      	subs	r2, r3, #1
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	425b      	negs	r3, r3
 80149be:	401a      	ands	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	699b      	ldr	r3, [r3, #24]
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	69db      	ldr	r3, [r3, #28]
 80149d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80149d4:	e022      	b.n	8014a1c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	689b      	ldr	r3, [r3, #8]
 80149da:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80149dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d119      	bne.n	8014a16 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2100      	movs	r1, #0
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7fe fa28 	bl	8012e3c <create_chain>
 80149ec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80149ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d104      	bne.n	80149fe <f_lseek+0x28a>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2202      	movs	r2, #2
 80149f8:	755a      	strb	r2, [r3, #21]
 80149fa:	2302      	movs	r3, #2
 80149fc:	e0bf      	b.n	8014b7e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80149fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a04:	d104      	bne.n	8014a10 <f_lseek+0x29c>
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2201      	movs	r2, #1
 8014a0a:	755a      	strb	r2, [r3, #21]
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	e0b6      	b.n	8014b7e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a14:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a1a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d05d      	beq.n	8014ade <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8014a22:	e03a      	b.n	8014a9a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8014a24:	683a      	ldr	r2, [r7, #0]
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	1ad3      	subs	r3, r2, r3
 8014a2a:	603b      	str	r3, [r7, #0]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	699a      	ldr	r2, [r3, #24]
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	441a      	add	r2, r3
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	f003 0302 	and.w	r3, r3, #2
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00b      	beq.n	8014a5c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7fe f9f7 	bl	8012e3c <create_chain>
 8014a4e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d108      	bne.n	8014a68 <f_lseek+0x2f4>
							ofs = 0; break;
 8014a56:	2300      	movs	r3, #0
 8014a58:	603b      	str	r3, [r7, #0]
 8014a5a:	e022      	b.n	8014aa2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7fd fff2 	bl	8012a4a <get_fat>
 8014a66:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a6e:	d104      	bne.n	8014a7a <f_lseek+0x306>
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2201      	movs	r2, #1
 8014a74:	755a      	strb	r2, [r3, #21]
 8014a76:	2301      	movs	r3, #1
 8014a78:	e081      	b.n	8014b7e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7c:	2b01      	cmp	r3, #1
 8014a7e:	d904      	bls.n	8014a8a <f_lseek+0x316>
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	695b      	ldr	r3, [r3, #20]
 8014a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d304      	bcc.n	8014a94 <f_lseek+0x320>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2202      	movs	r2, #2
 8014a8e:	755a      	strb	r2, [r3, #21]
 8014a90:	2302      	movs	r3, #2
 8014a92:	e074      	b.n	8014b7e <f_lseek+0x40a>
					fp->clust = clst;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a98:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014a9a:	683a      	ldr	r2, [r7, #0]
 8014a9c:	69fb      	ldr	r3, [r7, #28]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d8c0      	bhi.n	8014a24 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	699a      	ldr	r2, [r3, #24]
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	441a      	add	r2, r3
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d012      	beq.n	8014ade <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fd ffa5 	bl	8012a0c <clust2sect>
 8014ac2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d104      	bne.n	8014ad4 <f_lseek+0x360>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2202      	movs	r2, #2
 8014ace:	755a      	strb	r2, [r3, #21]
 8014ad0:	2302      	movs	r3, #2
 8014ad2:	e054      	b.n	8014b7e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	0a5b      	lsrs	r3, r3, #9
 8014ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ada:	4413      	add	r3, r2
 8014adc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	699a      	ldr	r2, [r3, #24]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d90a      	bls.n	8014b00 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	699a      	ldr	r2, [r3, #24]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	7d1b      	ldrb	r3, [r3, #20]
 8014af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014afa:	b2da      	uxtb	r2, r3
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	699b      	ldr	r3, [r3, #24]
 8014b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d036      	beq.n	8014b7a <f_lseek+0x406>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6a1b      	ldr	r3, [r3, #32]
 8014b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d031      	beq.n	8014b7a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	7d1b      	ldrb	r3, [r3, #20]
 8014b1a:	b25b      	sxtb	r3, r3
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	da18      	bge.n	8014b52 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	7858      	ldrb	r0, [r3, #1]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6a1a      	ldr	r2, [r3, #32]
 8014b2e:	2301      	movs	r3, #1
 8014b30:	f7fd fbe2 	bl	80122f8 <disk_write>
 8014b34:	4603      	mov	r3, r0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d004      	beq.n	8014b44 <f_lseek+0x3d0>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	755a      	strb	r2, [r3, #21]
 8014b40:	2301      	movs	r3, #1
 8014b42:	e01c      	b.n	8014b7e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	7d1b      	ldrb	r3, [r3, #20]
 8014b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b4c:	b2da      	uxtb	r2, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	7858      	ldrb	r0, [r3, #1]
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b60:	f7fd fbaa 	bl	80122b8 <disk_read>
 8014b64:	4603      	mov	r3, r0
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d004      	beq.n	8014b74 <f_lseek+0x400>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	755a      	strb	r2, [r3, #21]
 8014b70:	2301      	movs	r3, #1
 8014b72:	e004      	b.n	8014b7e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b78:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014b7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3740      	adds	r7, #64	; 0x40
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
	...

08014b88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b087      	sub	sp, #28
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	4613      	mov	r3, r2
 8014b94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014b96:	2301      	movs	r3, #1
 8014b98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014b9e:	4b1f      	ldr	r3, [pc, #124]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014ba0:	7a5b      	ldrb	r3, [r3, #9]
 8014ba2:	b2db      	uxtb	r3, r3
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d131      	bne.n	8014c0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014ba8:	4b1c      	ldr	r3, [pc, #112]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014baa:	7a5b      	ldrb	r3, [r3, #9]
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	461a      	mov	r2, r3
 8014bb0:	4b1a      	ldr	r3, [pc, #104]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014bb6:	4b19      	ldr	r3, [pc, #100]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014bb8:	7a5b      	ldrb	r3, [r3, #9]
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	4a17      	ldr	r2, [pc, #92]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014bbe:	009b      	lsls	r3, r3, #2
 8014bc0:	4413      	add	r3, r2
 8014bc2:	68fa      	ldr	r2, [r7, #12]
 8014bc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014bc6:	4b15      	ldr	r3, [pc, #84]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014bc8:	7a5b      	ldrb	r3, [r3, #9]
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	461a      	mov	r2, r3
 8014bce:	4b13      	ldr	r3, [pc, #76]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014bd0:	4413      	add	r3, r2
 8014bd2:	79fa      	ldrb	r2, [r7, #7]
 8014bd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014bd6:	4b11      	ldr	r3, [pc, #68]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014bd8:	7a5b      	ldrb	r3, [r3, #9]
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	1c5a      	adds	r2, r3, #1
 8014bde:	b2d1      	uxtb	r1, r2
 8014be0:	4a0e      	ldr	r2, [pc, #56]	; (8014c1c <FATFS_LinkDriverEx+0x94>)
 8014be2:	7251      	strb	r1, [r2, #9]
 8014be4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014be6:	7dbb      	ldrb	r3, [r7, #22]
 8014be8:	3330      	adds	r3, #48	; 0x30
 8014bea:	b2da      	uxtb	r2, r3
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	223a      	movs	r2, #58	; 0x3a
 8014bf6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	3302      	adds	r3, #2
 8014bfc:	222f      	movs	r2, #47	; 0x2f
 8014bfe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	3303      	adds	r3, #3
 8014c04:	2200      	movs	r2, #0
 8014c06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	371c      	adds	r7, #28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr
 8014c1a:	bf00      	nop
 8014c1c:	20000a38 	.word	0x20000a38

08014c20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	6839      	ldr	r1, [r7, #0]
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7ff ffaa 	bl	8014b88 <FATFS_LinkDriverEx>
 8014c34:	4603      	mov	r3, r0
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3708      	adds	r7, #8
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b086      	sub	sp, #24
 8014c42:	af02      	add	r7, sp, #8
 8014c44:	60f8      	str	r0, [r7, #12]
 8014c46:	4608      	mov	r0, r1
 8014c48:	4611      	mov	r1, r2
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	817b      	strh	r3, [r7, #10]
 8014c50:	460b      	mov	r3, r1
 8014c52:	813b      	strh	r3, [r7, #8]
 8014c54:	4613      	mov	r3, r2
 8014c56:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c58:	897a      	ldrh	r2, [r7, #10]
 8014c5a:	88fb      	ldrh	r3, [r7, #6]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	b298      	uxth	r0, r3
 8014c60:	893a      	ldrh	r2, [r7, #8]
 8014c62:	8b3b      	ldrh	r3, [r7, #24]
 8014c64:	4413      	add	r3, r2
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	893a      	ldrh	r2, [r7, #8]
 8014c6a:	8979      	ldrh	r1, [r7, #10]
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	4603      	mov	r3, r0
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f001 f8a1 	bl	8015db8 <u8g2_IsIntersection>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d012      	beq.n	8014ca2 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8014c7c:	e00d      	b.n	8014c9a <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c7e:	88fb      	ldrh	r3, [r7, #6]
 8014c80:	893a      	ldrh	r2, [r7, #8]
 8014c82:	8979      	ldrh	r1, [r7, #10]
 8014c84:	2000      	movs	r0, #0
 8014c86:	9000      	str	r0, [sp, #0]
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 ffa4 	bl	8015bd6 <u8g2_DrawHVLine>
    y++;    
 8014c8e:	893b      	ldrh	r3, [r7, #8]
 8014c90:	3301      	adds	r3, #1
 8014c92:	813b      	strh	r3, [r7, #8]
    h--;
 8014c94:	8b3b      	ldrh	r3, [r7, #24]
 8014c96:	3b01      	subs	r3, #1
 8014c98:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8014c9a:	8b3b      	ldrh	r3, [r7, #24]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d1ee      	bne.n	8014c7e <u8g2_DrawBox+0x40>
 8014ca0:	e000      	b.n	8014ca4 <u8g2_DrawBox+0x66>
    return;
 8014ca2:	bf00      	nop
  }
}
 8014ca4:	3710      	adds	r7, #16
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b088      	sub	sp, #32
 8014cae:	af02      	add	r7, sp, #8
 8014cb0:	60f8      	str	r0, [r7, #12]
 8014cb2:	4608      	mov	r0, r1
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	4603      	mov	r3, r0
 8014cba:	817b      	strh	r3, [r7, #10]
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	813b      	strh	r3, [r7, #8]
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8014cc4:	897b      	ldrh	r3, [r7, #10]
 8014cc6:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014cc8:	897a      	ldrh	r2, [r7, #10]
 8014cca:	88fb      	ldrh	r3, [r7, #6]
 8014ccc:	4413      	add	r3, r2
 8014cce:	b298      	uxth	r0, r3
 8014cd0:	893a      	ldrh	r2, [r7, #8]
 8014cd2:	8c3b      	ldrh	r3, [r7, #32]
 8014cd4:	4413      	add	r3, r2
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	893a      	ldrh	r2, [r7, #8]
 8014cda:	8979      	ldrh	r1, [r7, #10]
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	4603      	mov	r3, r0
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f001 f869 	bl	8015db8 <u8g2_IsIntersection>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d037      	beq.n	8014d5c <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014cec:	88fb      	ldrh	r3, [r7, #6]
 8014cee:	893a      	ldrh	r2, [r7, #8]
 8014cf0:	8979      	ldrh	r1, [r7, #10]
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	9000      	str	r0, [sp, #0]
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	f000 ff6d 	bl	8015bd6 <u8g2_DrawHVLine>
  if (h >= 2) {
 8014cfc:	8c3b      	ldrh	r3, [r7, #32]
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	d92d      	bls.n	8014d5e <u8g2_DrawFrame+0xb4>
    h-=2;
 8014d02:	8c3b      	ldrh	r3, [r7, #32]
 8014d04:	3b02      	subs	r3, #2
 8014d06:	843b      	strh	r3, [r7, #32]
    y++;
 8014d08:	893b      	ldrh	r3, [r7, #8]
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8014d0e:	8c3b      	ldrh	r3, [r7, #32]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d01a      	beq.n	8014d4a <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014d14:	8c3b      	ldrh	r3, [r7, #32]
 8014d16:	893a      	ldrh	r2, [r7, #8]
 8014d18:	8979      	ldrh	r1, [r7, #10]
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	9000      	str	r0, [sp, #0]
 8014d1e:	68f8      	ldr	r0, [r7, #12]
 8014d20:	f000 ff59 	bl	8015bd6 <u8g2_DrawHVLine>
      x+=w;
 8014d24:	897a      	ldrh	r2, [r7, #10]
 8014d26:	88fb      	ldrh	r3, [r7, #6]
 8014d28:	4413      	add	r3, r2
 8014d2a:	817b      	strh	r3, [r7, #10]
      x--;
 8014d2c:	897b      	ldrh	r3, [r7, #10]
 8014d2e:	3b01      	subs	r3, #1
 8014d30:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014d32:	8c3b      	ldrh	r3, [r7, #32]
 8014d34:	893a      	ldrh	r2, [r7, #8]
 8014d36:	8979      	ldrh	r1, [r7, #10]
 8014d38:	2001      	movs	r0, #1
 8014d3a:	9000      	str	r0, [sp, #0]
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f000 ff4a 	bl	8015bd6 <u8g2_DrawHVLine>
      y+=h;
 8014d42:	893a      	ldrh	r2, [r7, #8]
 8014d44:	8c3b      	ldrh	r3, [r7, #32]
 8014d46:	4413      	add	r3, r2
 8014d48:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8014d4a:	88fb      	ldrh	r3, [r7, #6]
 8014d4c:	893a      	ldrh	r2, [r7, #8]
 8014d4e:	8af9      	ldrh	r1, [r7, #22]
 8014d50:	2000      	movs	r0, #0
 8014d52:	9000      	str	r0, [sp, #0]
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f000 ff3e 	bl	8015bd6 <u8g2_DrawHVLine>
 8014d5a:	e000      	b.n	8014d5e <u8g2_DrawFrame+0xb4>
    return;
 8014d5c:	bf00      	nop
  }
}
 8014d5e:	3718      	adds	r7, #24
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	7c1b      	ldrb	r3, [r3, #16]
 8014d72:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	fb02 f303 	mul.w	r3, r2, r3
 8014d82:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	2100      	movs	r1, #0
 8014d92:	4618      	mov	r0, r3
 8014d94:	f008 f9cc 	bl	801d130 <memset>
}
 8014d98:	bf00      	nop
 8014d9a:	3710      	adds	r7, #16
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}

08014da0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b086      	sub	sp, #24
 8014da4:	af02      	add	r7, sp, #8
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	460b      	mov	r3, r1
 8014daa:	70fb      	strb	r3, [r7, #3]
 8014dac:	4613      	mov	r3, r2
 8014dae:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	7c1b      	ldrb	r3, [r3, #16]
 8014db6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8014db8:	78fb      	ldrb	r3, [r7, #3]
 8014dba:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dc0:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8014dc2:	7bfb      	ldrb	r3, [r7, #15]
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	89ba      	ldrh	r2, [r7, #12]
 8014dc8:	fb12 f303 	smulbb	r3, r2, r3
 8014dcc:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8014dce:	89bb      	ldrh	r3, [r7, #12]
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8014dd4:	89bb      	ldrh	r3, [r7, #12]
 8014dd6:	68ba      	ldr	r2, [r7, #8]
 8014dd8:	4413      	add	r3, r2
 8014dda:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8014ddc:	7bf9      	ldrb	r1, [r7, #15]
 8014dde:	78ba      	ldrb	r2, [r7, #2]
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	9300      	str	r3, [sp, #0]
 8014de4:	460b      	mov	r3, r1
 8014de6:	2100      	movs	r1, #0
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f001 fd06 	bl	80167fa <u8x8_DrawTile>
}
 8014dee:	bf00      	nop
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}

08014df6 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8014df6:	b580      	push	{r7, lr}
 8014df8:	b084      	sub	sp, #16
 8014dfa:	af00      	add	r7, sp, #0
 8014dfc:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e08:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e10:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	7c5b      	ldrb	r3, [r3, #17]
 8014e18:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8014e1a:	7bba      	ldrb	r2, [r7, #14]
 8014e1c:	7bfb      	ldrb	r3, [r7, #15]
 8014e1e:	4619      	mov	r1, r3
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	f7ff ffbd 	bl	8014da0 <u8g2_send_tile_row>
    src_row++;
 8014e26:	7bfb      	ldrb	r3, [r7, #15]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8014e2c:	7bbb      	ldrb	r3, [r7, #14]
 8014e2e:	3301      	adds	r3, #1
 8014e30:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8014e32:	7bfa      	ldrb	r2, [r7, #15]
 8014e34:	7b7b      	ldrb	r3, [r7, #13]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d203      	bcs.n	8014e42 <u8g2_send_buffer+0x4c>
 8014e3a:	7bba      	ldrb	r2, [r7, #14]
 8014e3c:	7b3b      	ldrb	r3, [r7, #12]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d3eb      	bcc.n	8014e1a <u8g2_send_buffer+0x24>
}
 8014e42:	bf00      	nop
 8014e44:	3710      	adds	r7, #16
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}

08014e4a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b082      	sub	sp, #8
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7ff ffcf 	bl	8014df6 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f001 fd1f 	bl	801689c <u8x8_RefreshDisplay>
}
 8014e5e:	bf00      	nop
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b082      	sub	sp, #8
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	460b      	mov	r3, r1
 8014e70:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	78fa      	ldrb	r2, [r7, #3]
 8014e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	4798      	blx	r3
}
 8014e8e:	bf00      	nop
 8014e90:	3708      	adds	r7, #8
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b082      	sub	sp, #8
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d002      	beq.n	8014eae <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7ff ff5b 	bl	8014d64 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8014eae:	2100      	movs	r1, #0
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff ffd8 	bl	8014e66 <u8g2_SetBufferCurrTileRow>
}
 8014eb6:	bf00      	nop
 8014eb8:	3708      	adds	r7, #8
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}

08014ebe <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b084      	sub	sp, #16
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f7ff ff95 	bl	8014df6 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014ed2:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014eda:	7bfb      	ldrb	r3, [r7, #15]
 8014edc:	4413      	add	r3, r2
 8014ede:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	7c5b      	ldrb	r3, [r3, #17]
 8014ee6:	7bfa      	ldrb	r2, [r7, #15]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d304      	bcc.n	8014ef6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f001 fcd5 	bl	801689c <u8x8_RefreshDisplay>
    return 0;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	e00d      	b.n	8014f12 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d002      	beq.n	8014f06 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f7ff ff2f 	bl	8014d64 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8014f06:	7bfb      	ldrb	r3, [r7, #15]
 8014f08:	4619      	mov	r1, r3
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f7ff ffab 	bl	8014e66 <u8g2_SetBufferCurrTileRow>
  return 1;
 8014f10:	2301      	movs	r3, #1
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f7ff ffb7 	bl	8014e96 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7ff ffc8 	bl	8014ebe <u8g2_NextPage>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d1f9      	bne.n	8014f28 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8014f34:	2100      	movs	r1, #0
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7ff ff95 	bl	8014e66 <u8g2_SetBufferCurrTileRow>
}
 8014f3c:	bf00      	nop
 8014f3e:	3708      	adds	r7, #8
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <u8g2_m_30_20_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_30_20_f(uint8_t *page_cnt)
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 20;
  return 0;
  #else
  static uint8_t buf[4800];
  *page_cnt = 20;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	2214      	movs	r2, #20
 8014f50:	701a      	strb	r2, [r3, #0]
  return buf;
 8014f52:	4b03      	ldr	r3, [pc, #12]	; (8014f60 <u8g2_m_30_20_f+0x1c>)
  #endif
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	370c      	adds	r7, #12
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr
 8014f60:	20000a44 	.word	0x20000a44

08014f64 <u8g2_Setup_uc1638_240x160_f>:
  buf = u8g2_m_30_20_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1638 f */
void u8g2_Setup_uc1638_240x160_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af02      	add	r7, sp, #8
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1638_240x160, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	4a0b      	ldr	r2, [pc, #44]	; (8014fa8 <u8g2_Setup_uc1638_240x160_f+0x44>)
 8014f7a:	490c      	ldr	r1, [pc, #48]	; (8014fac <u8g2_Setup_uc1638_240x160_f+0x48>)
 8014f7c:	68f8      	ldr	r0, [r7, #12]
 8014f7e:	f001 fced 	bl	801695c <u8x8_Setup>
  buf = u8g2_m_30_20_f(&tile_buf_height);
 8014f82:	f107 0313 	add.w	r3, r7, #19
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7ff ffdc 	bl	8014f44 <u8g2_m_30_20_f>
 8014f8c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8014f8e:	7cfa      	ldrb	r2, [r7, #19]
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	9300      	str	r3, [sp, #0]
 8014f94:	4b06      	ldr	r3, [pc, #24]	; (8014fb0 <u8g2_Setup_uc1638_240x160_f+0x4c>)
 8014f96:	6979      	ldr	r1, [r7, #20]
 8014f98:	68f8      	ldr	r0, [r7, #12]
 8014f9a:	f000 fff7 	bl	8015f8c <u8g2_SetupBuffer>
}
 8014f9e:	bf00      	nop
 8014fa0:	3718      	adds	r7, #24
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
 8014fa6:	bf00      	nop
 8014fa8:	080164f5 	.word	0x080164f5
 8014fac:	080166f5 	.word	0x080166f5
 8014fb0:	08015e0f 	.word	0x08015e0f

08014fb4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	b083      	sub	sp, #12
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8014fc0:	78fb      	ldrb	r3, [r7, #3]
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	4413      	add	r3, r2
 8014fc6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	781b      	ldrb	r3, [r3, #0]
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	370c      	adds	r7, #12
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8014fd8:	b480      	push	{r7}
 8014fda:	b085      	sub	sp, #20
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8014fe4:	78fb      	ldrb	r3, [r7, #3]
 8014fe6:	687a      	ldr	r2, [r7, #4]
 8014fe8:	4413      	add	r3, r2
 8014fea:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	81fb      	strh	r3, [r7, #14]
    font++;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8014ff8:	89fb      	ldrh	r3, [r7, #14]
 8014ffa:	021b      	lsls	r3, r3, #8
 8014ffc:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	b29a      	uxth	r2, r3
 8015004:	89fb      	ldrh	r3, [r7, #14]
 8015006:	4413      	add	r3, r2
 8015008:	81fb      	strh	r3, [r7, #14]
    return pos;
 801500a:	89fb      	ldrh	r3, [r7, #14]
}
 801500c:	4618      	mov	r0, r3
 801500e:	3714      	adds	r7, #20
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8015022:	2100      	movs	r1, #0
 8015024:	6838      	ldr	r0, [r7, #0]
 8015026:	f7ff ffc5 	bl	8014fb4 <u8g2_font_get_byte>
 801502a:	4603      	mov	r3, r0
 801502c:	461a      	mov	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8015032:	2101      	movs	r1, #1
 8015034:	6838      	ldr	r0, [r7, #0]
 8015036:	f7ff ffbd 	bl	8014fb4 <u8g2_font_get_byte>
 801503a:	4603      	mov	r3, r0
 801503c:	461a      	mov	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8015042:	2102      	movs	r1, #2
 8015044:	6838      	ldr	r0, [r7, #0]
 8015046:	f7ff ffb5 	bl	8014fb4 <u8g2_font_get_byte>
 801504a:	4603      	mov	r3, r0
 801504c:	461a      	mov	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8015052:	2103      	movs	r1, #3
 8015054:	6838      	ldr	r0, [r7, #0]
 8015056:	f7ff ffad 	bl	8014fb4 <u8g2_font_get_byte>
 801505a:	4603      	mov	r3, r0
 801505c:	461a      	mov	r2, r3
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8015062:	2104      	movs	r1, #4
 8015064:	6838      	ldr	r0, [r7, #0]
 8015066:	f7ff ffa5 	bl	8014fb4 <u8g2_font_get_byte>
 801506a:	4603      	mov	r3, r0
 801506c:	461a      	mov	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8015072:	2105      	movs	r1, #5
 8015074:	6838      	ldr	r0, [r7, #0]
 8015076:	f7ff ff9d 	bl	8014fb4 <u8g2_font_get_byte>
 801507a:	4603      	mov	r3, r0
 801507c:	461a      	mov	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8015082:	2106      	movs	r1, #6
 8015084:	6838      	ldr	r0, [r7, #0]
 8015086:	f7ff ff95 	bl	8014fb4 <u8g2_font_get_byte>
 801508a:	4603      	mov	r3, r0
 801508c:	461a      	mov	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8015092:	2107      	movs	r1, #7
 8015094:	6838      	ldr	r0, [r7, #0]
 8015096:	f7ff ff8d 	bl	8014fb4 <u8g2_font_get_byte>
 801509a:	4603      	mov	r3, r0
 801509c:	461a      	mov	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80150a2:	2108      	movs	r1, #8
 80150a4:	6838      	ldr	r0, [r7, #0]
 80150a6:	f7ff ff85 	bl	8014fb4 <u8g2_font_get_byte>
 80150aa:	4603      	mov	r3, r0
 80150ac:	461a      	mov	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80150b2:	2109      	movs	r1, #9
 80150b4:	6838      	ldr	r0, [r7, #0]
 80150b6:	f7ff ff7d 	bl	8014fb4 <u8g2_font_get_byte>
 80150ba:	4603      	mov	r3, r0
 80150bc:	b25a      	sxtb	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80150c2:	210a      	movs	r1, #10
 80150c4:	6838      	ldr	r0, [r7, #0]
 80150c6:	f7ff ff75 	bl	8014fb4 <u8g2_font_get_byte>
 80150ca:	4603      	mov	r3, r0
 80150cc:	b25a      	sxtb	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80150d2:	210b      	movs	r1, #11
 80150d4:	6838      	ldr	r0, [r7, #0]
 80150d6:	f7ff ff6d 	bl	8014fb4 <u8g2_font_get_byte>
 80150da:	4603      	mov	r3, r0
 80150dc:	b25a      	sxtb	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80150e2:	210c      	movs	r1, #12
 80150e4:	6838      	ldr	r0, [r7, #0]
 80150e6:	f7ff ff65 	bl	8014fb4 <u8g2_font_get_byte>
 80150ea:	4603      	mov	r3, r0
 80150ec:	b25a      	sxtb	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80150f2:	210d      	movs	r1, #13
 80150f4:	6838      	ldr	r0, [r7, #0]
 80150f6:	f7ff ff5d 	bl	8014fb4 <u8g2_font_get_byte>
 80150fa:	4603      	mov	r3, r0
 80150fc:	b25a      	sxtb	r2, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8015102:	210e      	movs	r1, #14
 8015104:	6838      	ldr	r0, [r7, #0]
 8015106:	f7ff ff55 	bl	8014fb4 <u8g2_font_get_byte>
 801510a:	4603      	mov	r3, r0
 801510c:	b25a      	sxtb	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8015112:	210f      	movs	r1, #15
 8015114:	6838      	ldr	r0, [r7, #0]
 8015116:	f7ff ff4d 	bl	8014fb4 <u8g2_font_get_byte>
 801511a:	4603      	mov	r3, r0
 801511c:	b25a      	sxtb	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8015122:	2110      	movs	r1, #16
 8015124:	6838      	ldr	r0, [r7, #0]
 8015126:	f7ff ff45 	bl	8014fb4 <u8g2_font_get_byte>
 801512a:	4603      	mov	r3, r0
 801512c:	b25a      	sxtb	r2, r3
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8015132:	2111      	movs	r1, #17
 8015134:	6838      	ldr	r0, [r7, #0]
 8015136:	f7ff ff4f 	bl	8014fd8 <u8g2_font_get_word>
 801513a:	4603      	mov	r3, r0
 801513c:	461a      	mov	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8015142:	2113      	movs	r1, #19
 8015144:	6838      	ldr	r0, [r7, #0]
 8015146:	f7ff ff47 	bl	8014fd8 <u8g2_font_get_word>
 801514a:	4603      	mov	r3, r0
 801514c:	461a      	mov	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8015152:	2115      	movs	r1, #21
 8015154:	6838      	ldr	r0, [r7, #0]
 8015156:	f7ff ff3f 	bl	8014fd8 <u8g2_font_get_word>
 801515a:	4603      	mov	r3, r0
 801515c:	461a      	mov	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	82da      	strh	r2, [r3, #22]
#endif
}
 8015162:	bf00      	nop
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 801516a:	b480      	push	{r7}
 801516c:	b085      	sub	sp, #20
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
 8015172:	460b      	mov	r3, r1
 8015174:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	7b1b      	ldrb	r3, [r3, #12]
 801517a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8015184:	7bfa      	ldrb	r2, [r7, #15]
 8015186:	7b7b      	ldrb	r3, [r7, #13]
 8015188:	fa42 f303 	asr.w	r3, r2, r3
 801518c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 801518e:	7b7b      	ldrb	r3, [r7, #13]
 8015190:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8015192:	7bba      	ldrb	r2, [r7, #14]
 8015194:	78fb      	ldrb	r3, [r7, #3]
 8015196:	4413      	add	r3, r2
 8015198:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 801519a:	7bbb      	ldrb	r3, [r7, #14]
 801519c:	2b07      	cmp	r3, #7
 801519e:	d91a      	bls.n	80151d6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80151a0:	2308      	movs	r3, #8
 80151a2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80151a4:	7b3a      	ldrb	r2, [r7, #12]
 80151a6:	7b7b      	ldrb	r3, [r7, #13]
 80151a8:	1ad3      	subs	r3, r2, r3
 80151aa:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	1c5a      	adds	r2, r3, #1
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	781b      	ldrb	r3, [r3, #0]
 80151bc:	461a      	mov	r2, r3
 80151be:	7b3b      	ldrb	r3, [r7, #12]
 80151c0:	fa02 f303 	lsl.w	r3, r2, r3
 80151c4:	b25a      	sxtb	r2, r3
 80151c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151ca:	4313      	orrs	r3, r2
 80151cc:	b25b      	sxtb	r3, r3
 80151ce:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80151d0:	7bbb      	ldrb	r3, [r7, #14]
 80151d2:	3b08      	subs	r3, #8
 80151d4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80151d6:	78fb      	ldrb	r3, [r7, #3]
 80151d8:	f04f 32ff 	mov.w	r2, #4294967295
 80151dc:	fa02 f303 	lsl.w	r3, r2, r3
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	43db      	mvns	r3, r3
 80151e4:	b2da      	uxtb	r2, r3
 80151e6:	7bfb      	ldrb	r3, [r7, #15]
 80151e8:	4013      	ands	r3, r2
 80151ea:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	7bba      	ldrb	r2, [r7, #14]
 80151f0:	731a      	strb	r2, [r3, #12]
  return val;
 80151f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3714      	adds	r7, #20
 80151f8:	46bd      	mov	sp, r7
 80151fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fe:	4770      	bx	lr

08015200 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	460b      	mov	r3, r1
 801520a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 801520c:	78fb      	ldrb	r3, [r7, #3]
 801520e:	4619      	mov	r1, r3
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7ff ffaa 	bl	801516a <u8g2_font_decode_get_unsigned_bits>
 8015216:	4603      	mov	r3, r0
 8015218:	73fb      	strb	r3, [r7, #15]
  d = 1;
 801521a:	2301      	movs	r3, #1
 801521c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 801521e:	78fb      	ldrb	r3, [r7, #3]
 8015220:	3b01      	subs	r3, #1
 8015222:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8015224:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8015228:	78fb      	ldrb	r3, [r7, #3]
 801522a:	fa02 f303 	lsl.w	r3, r2, r3
 801522e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8015230:	7bfa      	ldrb	r2, [r7, #15]
 8015232:	7bbb      	ldrb	r3, [r7, #14]
 8015234:	1ad3      	subs	r3, r2, r3
 8015236:	b2db      	uxtb	r3, r3
 8015238:	73fb      	strb	r3, [r7, #15]
  return v;
 801523a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 801523e:	4618      	mov	r0, r3
 8015240:	3710      	adds	r7, #16
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}

08015246 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8015246:	b490      	push	{r4, r7}
 8015248:	b082      	sub	sp, #8
 801524a:	af00      	add	r7, sp, #0
 801524c:	4604      	mov	r4, r0
 801524e:	4608      	mov	r0, r1
 8015250:	4611      	mov	r1, r2
 8015252:	461a      	mov	r2, r3
 8015254:	4623      	mov	r3, r4
 8015256:	80fb      	strh	r3, [r7, #6]
 8015258:	4603      	mov	r3, r0
 801525a:	717b      	strb	r3, [r7, #5]
 801525c:	460b      	mov	r3, r1
 801525e:	713b      	strb	r3, [r7, #4]
 8015260:	4613      	mov	r3, r2
 8015262:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8015264:	78fb      	ldrb	r3, [r7, #3]
 8015266:	2b02      	cmp	r3, #2
 8015268:	d014      	beq.n	8015294 <u8g2_add_vector_y+0x4e>
 801526a:	2b02      	cmp	r3, #2
 801526c:	dc19      	bgt.n	80152a2 <u8g2_add_vector_y+0x5c>
 801526e:	2b00      	cmp	r3, #0
 8015270:	d002      	beq.n	8015278 <u8g2_add_vector_y+0x32>
 8015272:	2b01      	cmp	r3, #1
 8015274:	d007      	beq.n	8015286 <u8g2_add_vector_y+0x40>
 8015276:	e014      	b.n	80152a2 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8015278:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801527c:	b29a      	uxth	r2, r3
 801527e:	88fb      	ldrh	r3, [r7, #6]
 8015280:	4413      	add	r3, r2
 8015282:	80fb      	strh	r3, [r7, #6]
      break;
 8015284:	e014      	b.n	80152b0 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8015286:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801528a:	b29a      	uxth	r2, r3
 801528c:	88fb      	ldrh	r3, [r7, #6]
 801528e:	4413      	add	r3, r2
 8015290:	80fb      	strh	r3, [r7, #6]
      break;
 8015292:	e00d      	b.n	80152b0 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8015294:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015298:	b29b      	uxth	r3, r3
 801529a:	88fa      	ldrh	r2, [r7, #6]
 801529c:	1ad3      	subs	r3, r2, r3
 801529e:	80fb      	strh	r3, [r7, #6]
      break;
 80152a0:	e006      	b.n	80152b0 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80152a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	88fa      	ldrh	r2, [r7, #6]
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	80fb      	strh	r3, [r7, #6]
      break;      
 80152ae:	bf00      	nop
  }
  return dy;
 80152b0:	88fb      	ldrh	r3, [r7, #6]
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3708      	adds	r7, #8
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bc90      	pop	{r4, r7}
 80152ba:	4770      	bx	lr

080152bc <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80152bc:	b490      	push	{r4, r7}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4604      	mov	r4, r0
 80152c4:	4608      	mov	r0, r1
 80152c6:	4611      	mov	r1, r2
 80152c8:	461a      	mov	r2, r3
 80152ca:	4623      	mov	r3, r4
 80152cc:	80fb      	strh	r3, [r7, #6]
 80152ce:	4603      	mov	r3, r0
 80152d0:	717b      	strb	r3, [r7, #5]
 80152d2:	460b      	mov	r3, r1
 80152d4:	713b      	strb	r3, [r7, #4]
 80152d6:	4613      	mov	r3, r2
 80152d8:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80152da:	78fb      	ldrb	r3, [r7, #3]
 80152dc:	2b02      	cmp	r3, #2
 80152de:	d014      	beq.n	801530a <u8g2_add_vector_x+0x4e>
 80152e0:	2b02      	cmp	r3, #2
 80152e2:	dc19      	bgt.n	8015318 <u8g2_add_vector_x+0x5c>
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d002      	beq.n	80152ee <u8g2_add_vector_x+0x32>
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d007      	beq.n	80152fc <u8g2_add_vector_x+0x40>
 80152ec:	e014      	b.n	8015318 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80152ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80152f2:	b29a      	uxth	r2, r3
 80152f4:	88fb      	ldrh	r3, [r7, #6]
 80152f6:	4413      	add	r3, r2
 80152f8:	80fb      	strh	r3, [r7, #6]
      break;
 80152fa:	e014      	b.n	8015326 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80152fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015300:	b29b      	uxth	r3, r3
 8015302:	88fa      	ldrh	r2, [r7, #6]
 8015304:	1ad3      	subs	r3, r2, r3
 8015306:	80fb      	strh	r3, [r7, #6]
      break;
 8015308:	e00d      	b.n	8015326 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 801530a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801530e:	b29b      	uxth	r3, r3
 8015310:	88fa      	ldrh	r2, [r7, #6]
 8015312:	1ad3      	subs	r3, r2, r3
 8015314:	80fb      	strh	r3, [r7, #6]
      break;
 8015316:	e006      	b.n	8015326 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8015318:	f997 3004 	ldrsb.w	r3, [r7, #4]
 801531c:	b29a      	uxth	r2, r3
 801531e:	88fb      	ldrh	r3, [r7, #6]
 8015320:	4413      	add	r3, r2
 8015322:	80fb      	strh	r3, [r7, #6]
      break;      
 8015324:	bf00      	nop
  }
  return dx;
 8015326:	88fb      	ldrh	r3, [r7, #6]
}
 8015328:	4618      	mov	r0, r3
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bc90      	pop	{r4, r7}
 8015330:	4770      	bx	lr

08015332 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8015332:	b580      	push	{r7, lr}
 8015334:	b088      	sub	sp, #32
 8015336:	af02      	add	r7, sp, #8
 8015338:	6078      	str	r0, [r7, #4]
 801533a:	460b      	mov	r3, r1
 801533c:	70fb      	strb	r3, [r7, #3]
 801533e:	4613      	mov	r3, r2
 8015340:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	3360      	adds	r3, #96	; 0x60
 8015346:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8015348:	78fb      	ldrb	r3, [r7, #3]
 801534a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015352:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801535a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015362:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8015364:	7bfa      	ldrb	r2, [r7, #15]
 8015366:	7d7b      	ldrb	r3, [r7, #21]
 8015368:	1ad3      	subs	r3, r2, r3
 801536a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 801536c:	7bfb      	ldrb	r3, [r7, #15]
 801536e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8015370:	7dfa      	ldrb	r2, [r7, #23]
 8015372:	7bfb      	ldrb	r3, [r7, #15]
 8015374:	429a      	cmp	r2, r3
 8015376:	d201      	bcs.n	801537c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8015378:	7dfb      	ldrb	r3, [r7, #23]
 801537a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	889b      	ldrh	r3, [r3, #4]
 8015380:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	88db      	ldrh	r3, [r3, #6]
 8015386:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8015388:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801538c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	7c1b      	ldrb	r3, [r3, #16]
 8015394:	89b8      	ldrh	r0, [r7, #12]
 8015396:	f7ff ff91 	bl	80152bc <u8g2_add_vector_x>
 801539a:	4603      	mov	r3, r0
 801539c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 801539e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80153a2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	7c1b      	ldrb	r3, [r3, #16]
 80153aa:	8978      	ldrh	r0, [r7, #10]
 80153ac:	f7ff ff4b 	bl	8015246 <u8g2_add_vector_y>
 80153b0:	4603      	mov	r3, r0
 80153b2:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80153b4:	78bb      	ldrb	r3, [r7, #2]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d010      	beq.n	80153dc <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	7b9a      	ldrb	r2, [r3, #14]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80153c4:	7dbb      	ldrb	r3, [r7, #22]
 80153c6:	b298      	uxth	r0, r3
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	7c1b      	ldrb	r3, [r3, #16]
 80153cc:	897a      	ldrh	r2, [r7, #10]
 80153ce:	89b9      	ldrh	r1, [r7, #12]
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	4603      	mov	r3, r0
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f000 fbfe 	bl	8015bd6 <u8g2_DrawHVLine>
 80153da:	e013      	b.n	8015404 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	7b5b      	ldrb	r3, [r3, #13]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d10f      	bne.n	8015404 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	7bda      	ldrb	r2, [r3, #15]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80153ee:	7dbb      	ldrb	r3, [r7, #22]
 80153f0:	b298      	uxth	r0, r3
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	7c1b      	ldrb	r3, [r3, #16]
 80153f6:	897a      	ldrh	r2, [r7, #10]
 80153f8:	89b9      	ldrh	r1, [r7, #12]
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	4603      	mov	r3, r0
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f000 fbe9 	bl	8015bd6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8015404:	7dfa      	ldrb	r2, [r7, #23]
 8015406:	7bfb      	ldrb	r3, [r7, #15]
 8015408:	429a      	cmp	r2, r3
 801540a:	d309      	bcc.n	8015420 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 801540c:	7dfa      	ldrb	r2, [r7, #23]
 801540e:	7bfb      	ldrb	r3, [r7, #15]
 8015410:	1ad3      	subs	r3, r2, r3
 8015412:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8015414:	2300      	movs	r3, #0
 8015416:	757b      	strb	r3, [r7, #21]
    ly++;
 8015418:	7d3b      	ldrb	r3, [r7, #20]
 801541a:	3301      	adds	r3, #1
 801541c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 801541e:	e79d      	b.n	801535c <u8g2_font_decode_len+0x2a>
      break;
 8015420:	bf00      	nop
  }
  lx += cnt;
 8015422:	7d7a      	ldrb	r2, [r7, #21]
 8015424:	7dfb      	ldrb	r3, [r7, #23]
 8015426:	4413      	add	r3, r2
 8015428:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 801542a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8015432:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	725a      	strb	r2, [r3, #9]
  
}
 801543a:	bf00      	nop
 801543c:	3718      	adds	r7, #24
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}

08015442 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8015442:	b580      	push	{r7, lr}
 8015444:	b084      	sub	sp, #16
 8015446:	af00      	add	r7, sp, #0
 8015448:	6078      	str	r0, [r7, #4]
 801544a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	3360      	adds	r3, #96	; 0x60
 8015450:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	683a      	ldr	r2, [r7, #0]
 8015456:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	2200      	movs	r2, #0
 801545c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8015464:	4619      	mov	r1, r3
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	f7ff fe7f 	bl	801516a <u8g2_font_decode_get_unsigned_bits>
 801546c:	4603      	mov	r3, r0
 801546e:	b25a      	sxtb	r2, r3
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801547a:	4619      	mov	r1, r3
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f7ff fe74 	bl	801516a <u8g2_font_decode_get_unsigned_bits>
 8015482:	4603      	mov	r3, r0
 8015484:	b25a      	sxtb	r2, r3
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	7b9b      	ldrb	r3, [r3, #14]
 8015498:	2b00      	cmp	r3, #0
 801549a:	bf0c      	ite	eq
 801549c:	2301      	moveq	r3, #1
 801549e:	2300      	movne	r3, #0
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	461a      	mov	r2, r3
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	73da      	strb	r2, [r3, #15]
}
 80154a8:	bf00      	nop
 80154aa:	3710      	adds	r7, #16
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b08a      	sub	sp, #40	; 0x28
 80154b4:	af02      	add	r7, sp, #8
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	3360      	adds	r3, #96	; 0x60
 80154be:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80154c0:	6839      	ldr	r1, [r7, #0]
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f7ff ffbd 	bl	8015442 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80154ce:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80154d6:	4619      	mov	r1, r3
 80154d8:	6978      	ldr	r0, [r7, #20]
 80154da:	f7ff fe91 	bl	8015200 <u8g2_font_decode_get_signed_bits>
 80154de:	4603      	mov	r3, r0
 80154e0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80154e8:	4619      	mov	r1, r3
 80154ea:	6978      	ldr	r0, [r7, #20]
 80154ec:	f7ff fe88 	bl	8015200 <u8g2_font_decode_get_signed_bits>
 80154f0:	4603      	mov	r3, r0
 80154f2:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80154fa:	4619      	mov	r1, r3
 80154fc:	6978      	ldr	r0, [r7, #20]
 80154fe:	f7ff fe7f 	bl	8015200 <u8g2_font_decode_get_signed_bits>
 8015502:	4603      	mov	r3, r0
 8015504:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801550c:	2b00      	cmp	r3, #0
 801550e:	f340 80d7 	ble.w	80156c0 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	8898      	ldrh	r0, [r3, #4]
 8015516:	7cfa      	ldrb	r2, [r7, #19]
 8015518:	7c7b      	ldrb	r3, [r7, #17]
 801551a:	4413      	add	r3, r2
 801551c:	b2db      	uxtb	r3, r3
 801551e:	425b      	negs	r3, r3
 8015520:	b2db      	uxtb	r3, r3
 8015522:	b25a      	sxtb	r2, r3
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	7c1b      	ldrb	r3, [r3, #16]
 8015528:	f997 1012 	ldrsb.w	r1, [r7, #18]
 801552c:	f7ff fec6 	bl	80152bc <u8g2_add_vector_x>
 8015530:	4603      	mov	r3, r0
 8015532:	461a      	mov	r2, r3
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	88d8      	ldrh	r0, [r3, #6]
 801553c:	7cfa      	ldrb	r2, [r7, #19]
 801553e:	7c7b      	ldrb	r3, [r7, #17]
 8015540:	4413      	add	r3, r2
 8015542:	b2db      	uxtb	r3, r3
 8015544:	425b      	negs	r3, r3
 8015546:	b2db      	uxtb	r3, r3
 8015548:	b25a      	sxtb	r2, r3
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	7c1b      	ldrb	r3, [r3, #16]
 801554e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8015552:	f7ff fe78 	bl	8015246 <u8g2_add_vector_y>
 8015556:	4603      	mov	r3, r0
 8015558:	461a      	mov	r2, r3
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	889b      	ldrh	r3, [r3, #4]
 8015562:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	88db      	ldrh	r3, [r3, #6]
 8015568:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 801556a:	8bfb      	ldrh	r3, [r7, #30]
 801556c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 801556e:	8b7b      	ldrh	r3, [r7, #26]
 8015570:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	7c1b      	ldrb	r3, [r3, #16]
 8015576:	2b03      	cmp	r3, #3
 8015578:	d85a      	bhi.n	8015630 <u8g2_font_decode_glyph+0x180>
 801557a:	a201      	add	r2, pc, #4	; (adr r2, 8015580 <u8g2_font_decode_glyph+0xd0>)
 801557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015580:	08015591 	.word	0x08015591
 8015584:	080155ad 	.word	0x080155ad
 8015588:	080155d5 	.word	0x080155d5
 801558c:	08015609 	.word	0x08015609
      {
	case 0:
	    x1 += decode->glyph_width;
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015596:	b29a      	uxth	r2, r3
 8015598:	8bbb      	ldrh	r3, [r7, #28]
 801559a:	4413      	add	r3, r2
 801559c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 801559e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155a2:	b29a      	uxth	r2, r3
 80155a4:	8b3b      	ldrh	r3, [r7, #24]
 80155a6:	4413      	add	r3, r2
 80155a8:	833b      	strh	r3, [r7, #24]
	    break;
 80155aa:	e041      	b.n	8015630 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80155ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	8bfa      	ldrh	r2, [r7, #30]
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155b8:	8bfb      	ldrh	r3, [r7, #30]
 80155ba:	3301      	adds	r3, #1
 80155bc:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80155be:	8bbb      	ldrh	r3, [r7, #28]
 80155c0:	3301      	adds	r3, #1
 80155c2:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155ca:	b29a      	uxth	r2, r3
 80155cc:	8b3b      	ldrh	r3, [r7, #24]
 80155ce:	4413      	add	r3, r2
 80155d0:	833b      	strh	r3, [r7, #24]
	    break;
 80155d2:	e02d      	b.n	8015630 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80155da:	b29b      	uxth	r3, r3
 80155dc:	8bfa      	ldrh	r2, [r7, #30]
 80155de:	1ad3      	subs	r3, r2, r3
 80155e0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155e2:	8bfb      	ldrh	r3, [r7, #30]
 80155e4:	3301      	adds	r3, #1
 80155e6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80155e8:	8bbb      	ldrh	r3, [r7, #28]
 80155ea:	3301      	adds	r3, #1
 80155ec:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80155ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	8b7a      	ldrh	r2, [r7, #26]
 80155f6:	1ad3      	subs	r3, r2, r3
 80155f8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80155fa:	8b7b      	ldrh	r3, [r7, #26]
 80155fc:	3301      	adds	r3, #1
 80155fe:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015600:	8b3b      	ldrh	r3, [r7, #24]
 8015602:	3301      	adds	r3, #1
 8015604:	833b      	strh	r3, [r7, #24]
	    break;	  
 8015606:	e013      	b.n	8015630 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8015608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801560c:	b29a      	uxth	r2, r3
 801560e:	8bbb      	ldrh	r3, [r7, #28]
 8015610:	4413      	add	r3, r2
 8015612:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	f993 300a 	ldrsb.w	r3, [r3, #10]
 801561a:	b29b      	uxth	r3, r3
 801561c:	8b7a      	ldrh	r2, [r7, #26]
 801561e:	1ad3      	subs	r3, r2, r3
 8015620:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015622:	8b7b      	ldrh	r3, [r7, #26]
 8015624:	3301      	adds	r3, #1
 8015626:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015628:	8b3b      	ldrh	r3, [r7, #24]
 801562a:	3301      	adds	r3, #1
 801562c:	833b      	strh	r3, [r7, #24]
	    break;	  
 801562e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8015630:	8bb8      	ldrh	r0, [r7, #28]
 8015632:	8b7a      	ldrh	r2, [r7, #26]
 8015634:	8bf9      	ldrh	r1, [r7, #30]
 8015636:	8b3b      	ldrh	r3, [r7, #24]
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	4603      	mov	r3, r0
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f000 fbbb 	bl	8015db8 <u8g2_IsIntersection>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d102      	bne.n	801564e <u8g2_font_decode_glyph+0x19e>
	return d;
 8015648:	f997 3010 	ldrsb.w	r3, [r7, #16]
 801564c:	e03a      	b.n	80156c4 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2200      	movs	r2, #0
 8015652:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2200      	movs	r2, #0
 8015658:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8015660:	4619      	mov	r1, r3
 8015662:	6978      	ldr	r0, [r7, #20]
 8015664:	f7ff fd81 	bl	801516a <u8g2_font_decode_get_unsigned_bits>
 8015668:	4603      	mov	r3, r0
 801566a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8015672:	4619      	mov	r1, r3
 8015674:	6978      	ldr	r0, [r7, #20]
 8015676:	f7ff fd78 	bl	801516a <u8g2_font_decode_get_unsigned_bits>
 801567a:	4603      	mov	r3, r0
 801567c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 801567e:	7bfb      	ldrb	r3, [r7, #15]
 8015680:	2200      	movs	r2, #0
 8015682:	4619      	mov	r1, r3
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f7ff fe54 	bl	8015332 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 801568a:	7bbb      	ldrb	r3, [r7, #14]
 801568c:	2201      	movs	r2, #1
 801568e:	4619      	mov	r1, r3
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f7ff fe4e 	bl	8015332 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8015696:	2101      	movs	r1, #1
 8015698:	6978      	ldr	r0, [r7, #20]
 801569a:	f7ff fd66 	bl	801516a <u8g2_font_decode_get_unsigned_bits>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d1ec      	bne.n	801567e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80156aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	dd00      	ble.n	80156b4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80156b2:	e7d2      	b.n	801565a <u8g2_font_decode_glyph+0x1aa>
	break;
 80156b4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	7b9a      	ldrb	r2, [r3, #14]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80156c0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3720      	adds	r7, #32
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b086      	sub	sp, #24
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156dc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	3317      	adds	r3, #23
 80156e2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80156e4:	887b      	ldrh	r3, [r7, #2]
 80156e6:	2bff      	cmp	r3, #255	; 0xff
 80156e8:	d82a      	bhi.n	8015740 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80156ea:	887b      	ldrh	r3, [r7, #2]
 80156ec:	2b60      	cmp	r3, #96	; 0x60
 80156ee:	d907      	bls.n	8015700 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80156f6:	461a      	mov	r2, r3
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	4413      	add	r3, r2
 80156fc:	617b      	str	r3, [r7, #20]
 80156fe:	e009      	b.n	8015714 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8015700:	887b      	ldrh	r3, [r7, #2]
 8015702:	2b40      	cmp	r3, #64	; 0x40
 8015704:	d906      	bls.n	8015714 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801570c:	461a      	mov	r2, r3
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	4413      	add	r3, r2
 8015712:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	3301      	adds	r3, #1
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d04e      	beq.n	80157bc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	b29b      	uxth	r3, r3
 8015724:	887a      	ldrh	r2, [r7, #2]
 8015726:	429a      	cmp	r2, r3
 8015728:	d102      	bne.n	8015730 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	3302      	adds	r3, #2
 801572e:	e049      	b.n	80157c4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	3301      	adds	r3, #1
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	461a      	mov	r2, r3
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	4413      	add	r3, r2
 801573c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801573e:	e7e9      	b.n	8015714 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8015746:	461a      	mov	r2, r3
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	4413      	add	r3, r2
 801574c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 801574e:	697b      	ldr	r3, [r7, #20]
 8015750:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8015752:	2100      	movs	r1, #0
 8015754:	6938      	ldr	r0, [r7, #16]
 8015756:	f7ff fc3f 	bl	8014fd8 <u8g2_font_get_word>
 801575a:	4603      	mov	r3, r0
 801575c:	461a      	mov	r2, r3
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	4413      	add	r3, r2
 8015762:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8015764:	2102      	movs	r1, #2
 8015766:	6938      	ldr	r0, [r7, #16]
 8015768:	f7ff fc36 	bl	8014fd8 <u8g2_font_get_word>
 801576c:	4603      	mov	r3, r0
 801576e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	3304      	adds	r3, #4
 8015774:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8015776:	89fa      	ldrh	r2, [r7, #14]
 8015778:	887b      	ldrh	r3, [r7, #2]
 801577a:	429a      	cmp	r2, r3
 801577c:	d3e9      	bcc.n	8015752 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8015784:	89fb      	ldrh	r3, [r7, #14]
 8015786:	021b      	lsls	r3, r3, #8
 8015788:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	3301      	adds	r3, #1
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	b29a      	uxth	r2, r3
 8015792:	89fb      	ldrh	r3, [r7, #14]
 8015794:	4313      	orrs	r3, r2
 8015796:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8015798:	89fb      	ldrh	r3, [r7, #14]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d010      	beq.n	80157c0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 801579e:	89fa      	ldrh	r2, [r7, #14]
 80157a0:	887b      	ldrh	r3, [r7, #2]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d102      	bne.n	80157ac <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	3303      	adds	r3, #3
 80157aa:	e00b      	b.n	80157c4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	3302      	adds	r3, #2
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	461a      	mov	r2, r3
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	4413      	add	r3, r2
 80157b8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80157ba:	e7e0      	b.n	801577e <u8g2_font_get_glyph_data+0xb2>
	break;
 80157bc:	bf00      	nop
 80157be:	e000      	b.n	80157c2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80157c0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3718      	adds	r7, #24
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}

080157cc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	4608      	mov	r0, r1
 80157d6:	4611      	mov	r1, r2
 80157d8:	461a      	mov	r2, r3
 80157da:	4603      	mov	r3, r0
 80157dc:	817b      	strh	r3, [r7, #10]
 80157de:	460b      	mov	r3, r1
 80157e0:	813b      	strh	r3, [r7, #8]
 80157e2:	4613      	mov	r3, r2
 80157e4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80157e6:	2300      	movs	r3, #0
 80157e8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	897a      	ldrh	r2, [r7, #10]
 80157ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	893a      	ldrh	r2, [r7, #8]
 80157f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80157fa:	88fb      	ldrh	r3, [r7, #6]
 80157fc:	4619      	mov	r1, r3
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f7ff ff64 	bl	80156cc <u8g2_font_get_glyph_data>
 8015804:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d005      	beq.n	8015818 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 801580c:	6939      	ldr	r1, [r7, #16]
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f7ff fe4e 	bl	80154b0 <u8g2_font_decode_glyph>
 8015814:	4603      	mov	r3, r0
 8015816:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8015818:	8afb      	ldrh	r3, [r7, #22]
}
 801581a:	4618      	mov	r0, r3
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
	...

08015824 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	4608      	mov	r0, r1
 801582e:	4611      	mov	r1, r2
 8015830:	461a      	mov	r2, r3
 8015832:	4603      	mov	r3, r0
 8015834:	817b      	strh	r3, [r7, #10]
 8015836:	460b      	mov	r3, r1
 8015838:	813b      	strh	r3, [r7, #8]
 801583a:	4613      	mov	r3, r2
 801583c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015844:	2b03      	cmp	r3, #3
 8015846:	d833      	bhi.n	80158b0 <u8g2_DrawGlyph+0x8c>
 8015848:	a201      	add	r2, pc, #4	; (adr r2, 8015850 <u8g2_DrawGlyph+0x2c>)
 801584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801584e:	bf00      	nop
 8015850:	08015861 	.word	0x08015861
 8015854:	08015875 	.word	0x08015875
 8015858:	08015889 	.word	0x08015889
 801585c:	0801589d 	.word	0x0801589d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015864:	68f8      	ldr	r0, [r7, #12]
 8015866:	4798      	blx	r3
 8015868:	4603      	mov	r3, r0
 801586a:	461a      	mov	r2, r3
 801586c:	893b      	ldrh	r3, [r7, #8]
 801586e:	4413      	add	r3, r2
 8015870:	813b      	strh	r3, [r7, #8]
      break;
 8015872:	e01d      	b.n	80158b0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015878:	68f8      	ldr	r0, [r7, #12]
 801587a:	4798      	blx	r3
 801587c:	4603      	mov	r3, r0
 801587e:	461a      	mov	r2, r3
 8015880:	897b      	ldrh	r3, [r7, #10]
 8015882:	1a9b      	subs	r3, r3, r2
 8015884:	817b      	strh	r3, [r7, #10]
      break;
 8015886:	e013      	b.n	80158b0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	4798      	blx	r3
 8015890:	4603      	mov	r3, r0
 8015892:	461a      	mov	r2, r3
 8015894:	893b      	ldrh	r3, [r7, #8]
 8015896:	1a9b      	subs	r3, r3, r2
 8015898:	813b      	strh	r3, [r7, #8]
      break;
 801589a:	e009      	b.n	80158b0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	4798      	blx	r3
 80158a4:	4603      	mov	r3, r0
 80158a6:	461a      	mov	r2, r3
 80158a8:	897b      	ldrh	r3, [r7, #10]
 80158aa:	4413      	add	r3, r2
 80158ac:	817b      	strh	r3, [r7, #10]
      break;
 80158ae:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80158b0:	88fb      	ldrh	r3, [r7, #6]
 80158b2:	893a      	ldrh	r2, [r7, #8]
 80158b4:	8979      	ldrh	r1, [r7, #10]
 80158b6:	68f8      	ldr	r0, [r7, #12]
 80158b8:	f7ff ff88 	bl	80157cc <u8g2_font_draw_glyph>
 80158bc:	4603      	mov	r3, r0
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3710      	adds	r7, #16
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
 80158c6:	bf00      	nop

080158c8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b086      	sub	sp, #24
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	607b      	str	r3, [r7, #4]
 80158d2:	460b      	mov	r3, r1
 80158d4:	817b      	strh	r3, [r7, #10]
 80158d6:	4613      	mov	r3, r2
 80158d8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f000 fc99 	bl	8016212 <u8x8_utf8_init>
  sum = 0;
 80158e0:	2300      	movs	r3, #0
 80158e2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	7812      	ldrb	r2, [r2, #0]
 80158ec:	4611      	mov	r1, r2
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	4798      	blx	r3
 80158f2:	4603      	mov	r3, r0
 80158f4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80158f6:	8abb      	ldrh	r3, [r7, #20]
 80158f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158fc:	4293      	cmp	r3, r2
 80158fe:	d038      	beq.n	8015972 <u8g2_draw_string+0xaa>
      break;
    str++;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3301      	adds	r3, #1
 8015904:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8015906:	8abb      	ldrh	r3, [r7, #20]
 8015908:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801590c:	4293      	cmp	r3, r2
 801590e:	d0e9      	beq.n	80158e4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8015910:	8abb      	ldrh	r3, [r7, #20]
 8015912:	893a      	ldrh	r2, [r7, #8]
 8015914:	8979      	ldrh	r1, [r7, #10]
 8015916:	68f8      	ldr	r0, [r7, #12]
 8015918:	f7ff ff84 	bl	8015824 <u8g2_DrawGlyph>
 801591c:	4603      	mov	r3, r0
 801591e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015926:	2b03      	cmp	r3, #3
 8015928:	d81e      	bhi.n	8015968 <u8g2_draw_string+0xa0>
 801592a:	a201      	add	r2, pc, #4	; (adr r2, 8015930 <u8g2_draw_string+0x68>)
 801592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015930:	08015941 	.word	0x08015941
 8015934:	0801594b 	.word	0x0801594b
 8015938:	08015955 	.word	0x08015955
 801593c:	0801595f 	.word	0x0801595f
      {
	case 0:
	  x += delta;
 8015940:	897a      	ldrh	r2, [r7, #10]
 8015942:	8a7b      	ldrh	r3, [r7, #18]
 8015944:	4413      	add	r3, r2
 8015946:	817b      	strh	r3, [r7, #10]
	  break;
 8015948:	e00e      	b.n	8015968 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 801594a:	893a      	ldrh	r2, [r7, #8]
 801594c:	8a7b      	ldrh	r3, [r7, #18]
 801594e:	4413      	add	r3, r2
 8015950:	813b      	strh	r3, [r7, #8]
	  break;
 8015952:	e009      	b.n	8015968 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8015954:	897a      	ldrh	r2, [r7, #10]
 8015956:	8a7b      	ldrh	r3, [r7, #18]
 8015958:	1ad3      	subs	r3, r2, r3
 801595a:	817b      	strh	r3, [r7, #10]
	  break;
 801595c:	e004      	b.n	8015968 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 801595e:	893a      	ldrh	r2, [r7, #8]
 8015960:	8a7b      	ldrh	r3, [r7, #18]
 8015962:	1ad3      	subs	r3, r2, r3
 8015964:	813b      	strh	r3, [r7, #8]
	  break;
 8015966:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8015968:	8afa      	ldrh	r2, [r7, #22]
 801596a:	8a7b      	ldrh	r3, [r7, #18]
 801596c:	4413      	add	r3, r2
 801596e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8015970:	e7b8      	b.n	80158e4 <u8g2_draw_string+0x1c>
      break;
 8015972:	bf00      	nop
    }
  }
  return sum;
 8015974:	8afb      	ldrh	r3, [r7, #22]
}
 8015976:	4618      	mov	r0, r3
 8015978:	3718      	adds	r7, #24
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop

08015980 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b084      	sub	sp, #16
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	607b      	str	r3, [r7, #4]
 801598a:	460b      	mov	r3, r1
 801598c:	817b      	strh	r3, [r7, #10]
 801598e:	4613      	mov	r3, r2
 8015990:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	4a06      	ldr	r2, [pc, #24]	; (80159b0 <u8g2_DrawUTF8+0x30>)
 8015996:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8015998:	893a      	ldrh	r2, [r7, #8]
 801599a:	8979      	ldrh	r1, [r7, #10]
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	68f8      	ldr	r0, [r7, #12]
 80159a0:	f7ff ff92 	bl	80158c8 <u8g2_draw_string>
 80159a4:	4603      	mov	r3, r0
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3710      	adds	r7, #16
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
 80159ae:	bf00      	nop
 80159b0:	0801622f 	.word	0x0801622f

080159b4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80159b4:	b480      	push	{r7}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d05d      	beq.n	8015a80 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d04d      	beq.n	8015a82 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80159ec:	2b01      	cmp	r3, #1
 80159ee:	d11c      	bne.n	8015a2a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80159fc:	429a      	cmp	r2, r3
 80159fe:	da05      	bge.n	8015a0c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	dd32      	ble.n	8015a82 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a28:	e02b      	b.n	8015a82 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8015a30:	461a      	mov	r2, r3
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015a38:	4619      	mov	r1, r3
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a40:	440b      	add	r3, r1
 8015a42:	429a      	cmp	r2, r3
 8015a44:	da0d      	bge.n	8015a62 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015a4c:	b2da      	uxtb	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	4413      	add	r3, r2
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	b25a      	sxtb	r2, r3
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	dd07      	ble.n	8015a82 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015a7e:	e000      	b.n	8015a82 <u8g2_UpdateRefHeight+0xce>
    return;
 8015a80:	bf00      	nop
  }  
}
 8015a82:	370c      	adds	r7, #12
 8015a84:	46bd      	mov	sp, r7
 8015a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8a:	4770      	bx	lr

08015a8c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  return 0;
 8015a94:	2300      	movs	r3, #0
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	370c      	adds	r7, #12
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr
	...

08015aa4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b083      	sub	sp, #12
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	4a04      	ldr	r2, [pc, #16]	; (8015ac0 <u8g2_SetFontPosBaseline+0x1c>)
 8015ab0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8015ab2:	bf00      	nop
 8015ab4:	370c      	adds	r7, #12
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop
 8015ac0:	08015a8d 	.word	0x08015a8d

08015ac4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ad2:	683a      	ldr	r2, [r7, #0]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d00b      	beq.n	8015af0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	683a      	ldr	r2, [r7, #0]
 8015adc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	3374      	adds	r3, #116	; 0x74
 8015ae2:	6839      	ldr	r1, [r7, #0]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7ff fa97 	bl	8015018 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f7ff ff62 	bl	80159b4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8015af0:	bf00      	nop
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8015af8:	b480      	push	{r7}
 8015afa:	b087      	sub	sp, #28
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	4611      	mov	r1, r2
 8015b04:	461a      	mov	r2, r3
 8015b06:	460b      	mov	r3, r1
 8015b08:	80fb      	strh	r3, [r7, #6]
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	881b      	ldrh	r3, [r3, #0]
 8015b12:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8015b14:	8afb      	ldrh	r3, [r7, #22]
 8015b16:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	881a      	ldrh	r2, [r3, #0]
 8015b1c:	8abb      	ldrh	r3, [r7, #20]
 8015b1e:	4413      	add	r3, r2
 8015b20:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8015b22:	8afa      	ldrh	r2, [r7, #22]
 8015b24:	8abb      	ldrh	r3, [r7, #20]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d90b      	bls.n	8015b42 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8015b2a:	8afa      	ldrh	r2, [r7, #22]
 8015b2c:	88bb      	ldrh	r3, [r7, #4]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d205      	bcs.n	8015b3e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8015b32:	88bb      	ldrh	r3, [r7, #4]
 8015b34:	82bb      	strh	r3, [r7, #20]
      b--;
 8015b36:	8abb      	ldrh	r3, [r7, #20]
 8015b38:	3b01      	subs	r3, #1
 8015b3a:	82bb      	strh	r3, [r7, #20]
 8015b3c:	e001      	b.n	8015b42 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8015b3e:	88fb      	ldrh	r3, [r7, #6]
 8015b40:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8015b42:	8afa      	ldrh	r2, [r7, #22]
 8015b44:	88bb      	ldrh	r3, [r7, #4]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d301      	bcc.n	8015b4e <u8g2_clip_intersection2+0x56>
    return 0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e01c      	b.n	8015b88 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8015b4e:	8aba      	ldrh	r2, [r7, #20]
 8015b50:	88fb      	ldrh	r3, [r7, #6]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d801      	bhi.n	8015b5a <u8g2_clip_intersection2+0x62>
    return 0;
 8015b56:	2300      	movs	r3, #0
 8015b58:	e016      	b.n	8015b88 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8015b5a:	8afa      	ldrh	r2, [r7, #22]
 8015b5c:	88fb      	ldrh	r3, [r7, #6]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d201      	bcs.n	8015b66 <u8g2_clip_intersection2+0x6e>
    a = c;
 8015b62:	88fb      	ldrh	r3, [r7, #6]
 8015b64:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8015b66:	8aba      	ldrh	r2, [r7, #20]
 8015b68:	88bb      	ldrh	r3, [r7, #4]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d901      	bls.n	8015b72 <u8g2_clip_intersection2+0x7a>
    b = d;
 8015b6e:	88bb      	ldrh	r3, [r7, #4]
 8015b70:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	8afa      	ldrh	r2, [r7, #22]
 8015b76:	801a      	strh	r2, [r3, #0]
  b -= a;
 8015b78:	8aba      	ldrh	r2, [r7, #20]
 8015b7a:	8afb      	ldrh	r3, [r7, #22]
 8015b7c:	1ad3      	subs	r3, r2, r3
 8015b7e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	8aba      	ldrh	r2, [r7, #20]
 8015b84:	801a      	strh	r2, [r3, #0]
  return 1;
 8015b86:	2301      	movs	r3, #1
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	371c      	adds	r7, #28
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b92:	4770      	bx	lr

08015b94 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b94:	b590      	push	{r4, r7, lr}
 8015b96:	b087      	sub	sp, #28
 8015b98:	af02      	add	r7, sp, #8
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	4608      	mov	r0, r1
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	817b      	strh	r3, [r7, #10]
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	813b      	strh	r3, [r7, #8]
 8015baa:	4613      	mov	r3, r2
 8015bac:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015bb2:	893a      	ldrh	r2, [r7, #8]
 8015bb4:	1ad3      	subs	r3, r2, r3
 8015bb6:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015bbc:	88f8      	ldrh	r0, [r7, #6]
 8015bbe:	893a      	ldrh	r2, [r7, #8]
 8015bc0:	8979      	ldrh	r1, [r7, #10]
 8015bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	4603      	mov	r3, r0
 8015bca:	68f8      	ldr	r0, [r7, #12]
 8015bcc:	47a0      	blx	r4
}
 8015bce:	bf00      	nop
 8015bd0:	3714      	adds	r7, #20
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd90      	pop	{r4, r7, pc}

08015bd6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015bd6:	b590      	push	{r4, r7, lr}
 8015bd8:	b087      	sub	sp, #28
 8015bda:	af02      	add	r7, sp, #8
 8015bdc:	60f8      	str	r0, [r7, #12]
 8015bde:	4608      	mov	r0, r1
 8015be0:	4611      	mov	r1, r2
 8015be2:	461a      	mov	r2, r3
 8015be4:	4603      	mov	r3, r0
 8015be6:	817b      	strh	r3, [r7, #10]
 8015be8:	460b      	mov	r3, r1
 8015bea:	813b      	strh	r3, [r7, #8]
 8015bec:	4613      	mov	r3, r2
 8015bee:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d075      	beq.n	8015ce6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8015bfa:	88fb      	ldrh	r3, [r7, #6]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d072      	beq.n	8015ce6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8015c00:	88fb      	ldrh	r3, [r7, #6]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d91a      	bls.n	8015c3c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8015c06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d109      	bne.n	8015c22 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8015c0e:	897a      	ldrh	r2, [r7, #10]
 8015c10:	88fb      	ldrh	r3, [r7, #6]
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	817b      	strh	r3, [r7, #10]
	  x++;
 8015c18:	897b      	ldrh	r3, [r7, #10]
 8015c1a:	3301      	adds	r3, #1
 8015c1c:	b29b      	uxth	r3, r3
 8015c1e:	817b      	strh	r3, [r7, #10]
 8015c20:	e00c      	b.n	8015c3c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8015c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c26:	2b03      	cmp	r3, #3
 8015c28:	d108      	bne.n	8015c3c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8015c2a:	893a      	ldrh	r2, [r7, #8]
 8015c2c:	88fb      	ldrh	r3, [r7, #6]
 8015c2e:	1ad3      	subs	r3, r2, r3
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	813b      	strh	r3, [r7, #8]
	  y++;
 8015c34:	893b      	ldrh	r3, [r7, #8]
 8015c36:	3301      	adds	r3, #1
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8015c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c40:	f003 0301 	and.w	r3, r3, #1
 8015c44:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8015c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d11a      	bne.n	8015c86 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015c56:	893b      	ldrh	r3, [r7, #8]
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d83b      	bhi.n	8015cd4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8015c62:	893b      	ldrh	r3, [r7, #8]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d937      	bls.n	8015cd8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c74:	1db9      	adds	r1, r7, #6
 8015c76:	f107 000a 	add.w	r0, r7, #10
 8015c7a:	f7ff ff3d 	bl	8015af8 <u8g2_clip_intersection2>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d11a      	bne.n	8015cba <u8g2_DrawHVLine+0xe4>
	  return;
 8015c84:	e02f      	b.n	8015ce6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c8c:	897b      	ldrh	r3, [r7, #10]
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d824      	bhi.n	8015cdc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015c98:	897b      	ldrh	r3, [r7, #10]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d920      	bls.n	8015ce0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015caa:	1db9      	adds	r1, r7, #6
 8015cac:	f107 0008 	add.w	r0, r7, #8
 8015cb0:	f7ff ff22 	bl	8015af8 <u8g2_clip_intersection2>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d014      	beq.n	8015ce4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cbe:	689c      	ldr	r4, [r3, #8]
 8015cc0:	8979      	ldrh	r1, [r7, #10]
 8015cc2:	893a      	ldrh	r2, [r7, #8]
 8015cc4:	88f8      	ldrh	r0, [r7, #6]
 8015cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015cca:	9300      	str	r3, [sp, #0]
 8015ccc:	4603      	mov	r3, r0
 8015cce:	68f8      	ldr	r0, [r7, #12]
 8015cd0:	47a0      	blx	r4
 8015cd2:	e008      	b.n	8015ce6 <u8g2_DrawHVLine+0x110>
	  return;
 8015cd4:	bf00      	nop
 8015cd6:	e006      	b.n	8015ce6 <u8g2_DrawHVLine+0x110>
	  return;
 8015cd8:	bf00      	nop
 8015cda:	e004      	b.n	8015ce6 <u8g2_DrawHVLine+0x110>
	  return;
 8015cdc:	bf00      	nop
 8015cde:	e002      	b.n	8015ce6 <u8g2_DrawHVLine+0x110>
	  return;
 8015ce0:	bf00      	nop
 8015ce2:	e000      	b.n	8015ce6 <u8g2_DrawHVLine+0x110>
	  return;
 8015ce4:	bf00      	nop
    }
}
 8015ce6:	3714      	adds	r7, #20
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd90      	pop	{r4, r7, pc}

08015cec <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af02      	add	r7, sp, #8
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	807b      	strh	r3, [r7, #2]
 8015cf8:	4613      	mov	r3, r2
 8015cfa:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015d02:	883a      	ldrh	r2, [r7, #0]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d31a      	bcc.n	8015d3e <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015d0e:	883a      	ldrh	r2, [r7, #0]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d216      	bcs.n	8015d42 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015d1a:	887a      	ldrh	r2, [r7, #2]
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d312      	bcc.n	8015d46 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015d26:	887a      	ldrh	r2, [r7, #2]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d20e      	bcs.n	8015d4a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8015d2c:	883a      	ldrh	r2, [r7, #0]
 8015d2e:	8879      	ldrh	r1, [r7, #2]
 8015d30:	2300      	movs	r3, #0
 8015d32:	9300      	str	r3, [sp, #0]
 8015d34:	2301      	movs	r3, #1
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f7ff ff4d 	bl	8015bd6 <u8g2_DrawHVLine>
 8015d3c:	e006      	b.n	8015d4c <u8g2_DrawPixel+0x60>
    return;
 8015d3e:	bf00      	nop
 8015d40:	e004      	b.n	8015d4c <u8g2_DrawPixel+0x60>
    return;
 8015d42:	bf00      	nop
 8015d44:	e002      	b.n	8015d4c <u8g2_DrawPixel+0x60>
    return;
 8015d46:	bf00      	nop
 8015d48:	e000      	b.n	8015d4c <u8g2_DrawPixel+0x60>
    return;
 8015d4a:	bf00      	nop
}
 8015d4c:	3708      	adds	r7, #8
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}

08015d52 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8015d52:	b490      	push	{r4, r7}
 8015d54:	b082      	sub	sp, #8
 8015d56:	af00      	add	r7, sp, #0
 8015d58:	4604      	mov	r4, r0
 8015d5a:	4608      	mov	r0, r1
 8015d5c:	4611      	mov	r1, r2
 8015d5e:	461a      	mov	r2, r3
 8015d60:	4623      	mov	r3, r4
 8015d62:	80fb      	strh	r3, [r7, #6]
 8015d64:	4603      	mov	r3, r0
 8015d66:	80bb      	strh	r3, [r7, #4]
 8015d68:	460b      	mov	r3, r1
 8015d6a:	807b      	strh	r3, [r7, #2]
 8015d6c:	4613      	mov	r3, r2
 8015d6e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8015d70:	887a      	ldrh	r2, [r7, #2]
 8015d72:	88bb      	ldrh	r3, [r7, #4]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d20d      	bcs.n	8015d94 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d78:	883a      	ldrh	r2, [r7, #0]
 8015d7a:	88fb      	ldrh	r3, [r7, #6]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d901      	bls.n	8015d84 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015d80:	2301      	movs	r3, #1
 8015d82:	e014      	b.n	8015dae <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015d84:	887a      	ldrh	r2, [r7, #2]
 8015d86:	883b      	ldrh	r3, [r7, #0]
 8015d88:	429a      	cmp	r2, r3
 8015d8a:	d901      	bls.n	8015d90 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	e00e      	b.n	8015dae <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015d90:	2300      	movs	r3, #0
 8015d92:	e00c      	b.n	8015dae <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015d94:	883a      	ldrh	r2, [r7, #0]
 8015d96:	88fb      	ldrh	r3, [r7, #6]
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	d907      	bls.n	8015dac <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8015d9c:	887a      	ldrh	r2, [r7, #2]
 8015d9e:	883b      	ldrh	r3, [r7, #0]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d901      	bls.n	8015da8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015da4:	2301      	movs	r3, #1
 8015da6:	e002      	b.n	8015dae <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015da8:	2300      	movs	r3, #0
 8015daa:	e000      	b.n	8015dae <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8015dac:	2300      	movs	r3, #0
    }
  }
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bc90      	pop	{r4, r7}
 8015db6:	4770      	bx	lr

08015db8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	4608      	mov	r0, r1
 8015dc2:	4611      	mov	r1, r2
 8015dc4:	461a      	mov	r2, r3
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	817b      	strh	r3, [r7, #10]
 8015dca:	460b      	mov	r3, r1
 8015dcc:	813b      	strh	r3, [r7, #8]
 8015dce:	4613      	mov	r3, r2
 8015dd0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8015dde:	8b3b      	ldrh	r3, [r7, #24]
 8015de0:	893a      	ldrh	r2, [r7, #8]
 8015de2:	f7ff ffb6 	bl	8015d52 <u8g2_is_intersection_decision_tree>
 8015de6:	4603      	mov	r3, r0
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d101      	bne.n	8015df0 <u8g2_IsIntersection+0x38>
    return 0; 
 8015dec:	2300      	movs	r3, #0
 8015dee:	e00a      	b.n	8015e06 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8015dfc:	88fb      	ldrh	r3, [r7, #6]
 8015dfe:	897a      	ldrh	r2, [r7, #10]
 8015e00:	f7ff ffa7 	bl	8015d52 <u8g2_is_intersection_decision_tree>
 8015e04:	4603      	mov	r3, r0
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015e0e:	b480      	push	{r7}
 8015e10:	b089      	sub	sp, #36	; 0x24
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	60f8      	str	r0, [r7, #12]
 8015e16:	4608      	mov	r0, r1
 8015e18:	4611      	mov	r1, r2
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	817b      	strh	r3, [r7, #10]
 8015e20:	460b      	mov	r3, r1
 8015e22:	813b      	strh	r3, [r7, #8]
 8015e24:	4613      	mov	r3, r2
 8015e26:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8015e28:	893b      	ldrh	r3, [r7, #8]
 8015e2a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8015e2c:	7efb      	ldrb	r3, [r7, #27]
 8015e2e:	f003 0307 	and.w	r3, r3, #7
 8015e32:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8015e34:	2301      	movs	r3, #1
 8015e36:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8015e38:	7e3a      	ldrb	r2, [r7, #24]
 8015e3a:	7efb      	ldrb	r3, [r7, #27]
 8015e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8015e40:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8015e42:	2300      	movs	r3, #0
 8015e44:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8015e46:	2300      	movs	r3, #0
 8015e48:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e50:	2b01      	cmp	r3, #1
 8015e52:	d801      	bhi.n	8015e58 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015e54:	7e3b      	ldrb	r3, [r7, #24]
 8015e56:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e5e:	2b01      	cmp	r3, #1
 8015e60:	d001      	beq.n	8015e66 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015e62:	7e3b      	ldrb	r3, [r7, #24]
 8015e64:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015e66:	893b      	ldrh	r3, [r7, #8]
 8015e68:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8015e6a:	8afb      	ldrh	r3, [r7, #22]
 8015e6c:	f023 0307 	bic.w	r3, r3, #7
 8015e70:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	7c1b      	ldrb	r3, [r3, #16]
 8015e78:	b29b      	uxth	r3, r3
 8015e7a:	8afa      	ldrh	r2, [r7, #22]
 8015e7c:	fb12 f303 	smulbb	r3, r2, r3
 8015e80:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e86:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8015e88:	8afb      	ldrh	r3, [r7, #22]
 8015e8a:	69fa      	ldr	r2, [r7, #28]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8015e90:	897b      	ldrh	r3, [r7, #10]
 8015e92:	69fa      	ldr	r2, [r7, #28]
 8015e94:	4413      	add	r3, r2
 8015e96:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8015e98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d117      	bne.n	8015ed0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	781a      	ldrb	r2, [r3, #0]
 8015ea4:	7ebb      	ldrb	r3, [r7, #26]
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	b2da      	uxtb	r2, r3
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	781a      	ldrb	r2, [r3, #0]
 8015eb2:	7e7b      	ldrb	r3, [r7, #25]
 8015eb4:	4053      	eors	r3, r2
 8015eb6:	b2da      	uxtb	r2, r3
 8015eb8:	69fb      	ldr	r3, [r7, #28]
 8015eba:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	3301      	adds	r3, #1
 8015ec0:	61fb      	str	r3, [r7, #28]
	len--;
 8015ec2:	88fb      	ldrh	r3, [r7, #6]
 8015ec4:	3b01      	subs	r3, #1
 8015ec6:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8015ec8:	88fb      	ldrh	r3, [r7, #6]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d1e8      	bne.n	8015ea0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015ece:	e038      	b.n	8015f42 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	781a      	ldrb	r2, [r3, #0]
 8015ed4:	7ebb      	ldrb	r3, [r7, #26]
 8015ed6:	4313      	orrs	r3, r2
 8015ed8:	b2da      	uxtb	r2, r3
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	781a      	ldrb	r2, [r3, #0]
 8015ee2:	7e7b      	ldrb	r3, [r7, #25]
 8015ee4:	4053      	eors	r3, r2
 8015ee6:	b2da      	uxtb	r2, r3
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8015eec:	7efb      	ldrb	r3, [r7, #27]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8015ef2:	7efb      	ldrb	r3, [r7, #27]
 8015ef4:	f003 0307 	and.w	r3, r3, #7
 8015ef8:	76fb      	strb	r3, [r7, #27]
      len--;
 8015efa:	88fb      	ldrh	r3, [r7, #6]
 8015efc:	3b01      	subs	r3, #1
 8015efe:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8015f00:	7efb      	ldrb	r3, [r7, #27]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d114      	bne.n	8015f30 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	4413      	add	r3, r2
 8015f10:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d801      	bhi.n	8015f20 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d008      	beq.n	8015f3c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	767b      	strb	r3, [r7, #25]
 8015f2e:	e005      	b.n	8015f3c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8015f30:	7ebb      	ldrb	r3, [r7, #26]
 8015f32:	005b      	lsls	r3, r3, #1
 8015f34:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8015f36:	7e7b      	ldrb	r3, [r7, #25]
 8015f38:	005b      	lsls	r3, r3, #1
 8015f3a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8015f3c:	88fb      	ldrh	r3, [r7, #6]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1c6      	bne.n	8015ed0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015f42:	bf00      	nop
 8015f44:	3724      	adds	r7, #36	; 0x24
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr

08015f4e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015f4e:	b580      	push	{r7, lr}
 8015f50:	b082      	sub	sp, #8
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2200      	movs	r2, #0
 8015f62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f7e:	685b      	ldr	r3, [r3, #4]
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	4798      	blx	r3
}
 8015f84:	bf00      	nop
 8015f86:	3708      	adds	r7, #8
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	603b      	str	r3, [r7, #0]
 8015f98:	4613      	mov	r3, r2
 8015f9a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	683a      	ldr	r2, [r7, #0]
 8015fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	68ba      	ldr	r2, [r7, #8]
 8015fac:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	79fa      	ldrb	r2, [r7, #7]
 8015fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2201      	movs	r2, #1
 8015fd2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2201      	movs	r2, #1
 8015fda:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	69ba      	ldr	r2, [r7, #24]
 8015fe2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	68f8      	ldr	r0, [r7, #12]
 8015fec:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f7ff ffad 	bl	8015f4e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	f7ff fd55 	bl	8015aa4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8016002:	bf00      	nop
 8016004:	3710      	adds	r7, #16
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}

0801600a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 801600a:	b480      	push	{r7}
 801600c:	b085      	sub	sp, #20
 801600e:	af00      	add	r7, sp, #0
 8016010:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801601e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8016020:	89fb      	ldrh	r3, [r7, #14]
 8016022:	00db      	lsls	r3, r3, #3
 8016024:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	89fa      	ldrh	r2, [r7, #14]
 801602a:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	7c1b      	ldrb	r3, [r3, #16]
 8016030:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8016032:	89fb      	ldrh	r3, [r7, #14]
 8016034:	00db      	lsls	r3, r3, #3
 8016036:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	89fa      	ldrh	r2, [r7, #14]
 801603c:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016044:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8016046:	89fb      	ldrh	r3, [r7, #14]
 8016048:	00db      	lsls	r3, r3, #3
 801604a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	89fa      	ldrh	r2, [r7, #14]
 8016050:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016058:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 801605a:	89fb      	ldrh	r3, [r7, #14]
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8016062:	4413      	add	r3, r2
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	7c52      	ldrb	r2, [r2, #17]
 8016068:	4293      	cmp	r3, r2
 801606a:	dd08      	ble.n	801607e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	7c5b      	ldrb	r3, [r3, #17]
 8016070:	b29a      	uxth	r2, r3
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016078:	b29b      	uxth	r3, r3
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 801607e:	89fb      	ldrh	r3, [r7, #14]
 8016080:	00db      	lsls	r3, r3, #3
 8016082:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80160a0:	89fb      	ldrh	r3, [r7, #14]
 80160a2:	4413      	add	r3, r2
 80160a4:	b29a      	uxth	r2, r3
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	8a9a      	ldrh	r2, [r3, #20]
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	8ada      	ldrh	r2, [r3, #22]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80160c0:	bf00      	nop
 80160c2:	3714      	adds	r7, #20
 80160c4:	46bd      	mov	sp, r7
 80160c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ca:	4770      	bx	lr

080160cc <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af02      	add	r7, sp, #8
 80160d2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	4603      	mov	r3, r0
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7ff fe61 	bl	8015db8 <u8g2_IsIntersection>
 80160f6:	4603      	mov	r3, r0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d104      	bne.n	8016106 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2200      	movs	r2, #0
 8016100:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8016104:	e03b      	b.n	801617e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2201      	movs	r2, #1
 801610a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801611a:	429a      	cmp	r2, r3
 801611c:	d205      	bcs.n	801612a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8016136:	429a      	cmp	r2, r3
 8016138:	d905      	bls.n	8016146 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016152:	429a      	cmp	r2, r3
 8016154:	d205      	bcs.n	8016162 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801616e:	429a      	cmp	r2, r3
 8016170:	d905      	bls.n	801617e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 801617e:	bf00      	nop
 8016180:	3708      	adds	r7, #8
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}

08016186 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8016186:	b580      	push	{r7, lr}
 8016188:	b082      	sub	sp, #8
 801618a:	af00      	add	r7, sp, #0
 801618c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7ff ff3b 	bl	801600a <u8g2_update_dimension_common>
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b082      	sub	sp, #8
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7ff ff7b 	bl	80160cc <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80161d6:	bf00      	nop
 80161d8:	3708      	adds	r7, #8
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}

080161de <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80161de:	b580      	push	{r7, lr}
 80161e0:	b086      	sub	sp, #24
 80161e2:	af02      	add	r7, sp, #8
 80161e4:	60f8      	str	r0, [r7, #12]
 80161e6:	4608      	mov	r0, r1
 80161e8:	4611      	mov	r1, r2
 80161ea:	461a      	mov	r2, r3
 80161ec:	4603      	mov	r3, r0
 80161ee:	817b      	strh	r3, [r7, #10]
 80161f0:	460b      	mov	r3, r1
 80161f2:	813b      	strh	r3, [r7, #8]
 80161f4:	4613      	mov	r3, r2
 80161f6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80161f8:	88f8      	ldrh	r0, [r7, #6]
 80161fa:	893a      	ldrh	r2, [r7, #8]
 80161fc:	8979      	ldrh	r1, [r7, #10]
 80161fe:	7e3b      	ldrb	r3, [r7, #24]
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	4603      	mov	r3, r0
 8016204:	68f8      	ldr	r0, [r7, #12]
 8016206:	f7ff fcc5 	bl	8015b94 <u8g2_draw_hv_line_2dir>
}
 801620a:	bf00      	nop
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}

08016212 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8016212:	b480      	push	{r7}
 8016214:	b083      	sub	sp, #12
 8016216:	af00      	add	r7, sp, #0
 8016218:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2200      	movs	r2, #0
 801621e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8016222:	bf00      	nop
 8016224:	370c      	adds	r7, #12
 8016226:	46bd      	mov	sp, r7
 8016228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622c:	4770      	bx	lr

0801622e <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 801622e:	b480      	push	{r7}
 8016230:	b083      	sub	sp, #12
 8016232:	af00      	add	r7, sp, #0
 8016234:	6078      	str	r0, [r7, #4]
 8016236:	460b      	mov	r3, r1
 8016238:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 801623a:	78fb      	ldrb	r3, [r7, #3]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d002      	beq.n	8016246 <u8x8_utf8_next+0x18>
 8016240:	78fb      	ldrb	r3, [r7, #3]
 8016242:	2b0a      	cmp	r3, #10
 8016244:	d102      	bne.n	801624c <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8016246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801624a:	e06e      	b.n	801632a <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016252:	2b00      	cmp	r3, #0
 8016254:	d145      	bne.n	80162e2 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8016256:	78fb      	ldrb	r3, [r7, #3]
 8016258:	2bfb      	cmp	r3, #251	; 0xfb
 801625a:	d908      	bls.n	801626e <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2205      	movs	r2, #5
 8016260:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8016264:	78fb      	ldrb	r3, [r7, #3]
 8016266:	f003 0301 	and.w	r3, r3, #1
 801626a:	70fb      	strb	r3, [r7, #3]
 801626c:	e032      	b.n	80162d4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 801626e:	78fb      	ldrb	r3, [r7, #3]
 8016270:	2bf7      	cmp	r3, #247	; 0xf7
 8016272:	d908      	bls.n	8016286 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	2204      	movs	r2, #4
 8016278:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 801627c:	78fb      	ldrb	r3, [r7, #3]
 801627e:	f003 0303 	and.w	r3, r3, #3
 8016282:	70fb      	strb	r3, [r7, #3]
 8016284:	e026      	b.n	80162d4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8016286:	78fb      	ldrb	r3, [r7, #3]
 8016288:	2bef      	cmp	r3, #239	; 0xef
 801628a:	d908      	bls.n	801629e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2203      	movs	r2, #3
 8016290:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8016294:	78fb      	ldrb	r3, [r7, #3]
 8016296:	f003 0307 	and.w	r3, r3, #7
 801629a:	70fb      	strb	r3, [r7, #3]
 801629c:	e01a      	b.n	80162d4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 801629e:	78fb      	ldrb	r3, [r7, #3]
 80162a0:	2bdf      	cmp	r3, #223	; 0xdf
 80162a2:	d908      	bls.n	80162b6 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2202      	movs	r2, #2
 80162a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80162ac:	78fb      	ldrb	r3, [r7, #3]
 80162ae:	f003 030f 	and.w	r3, r3, #15
 80162b2:	70fb      	strb	r3, [r7, #3]
 80162b4:	e00e      	b.n	80162d4 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80162b6:	78fb      	ldrb	r3, [r7, #3]
 80162b8:	2bbf      	cmp	r3, #191	; 0xbf
 80162ba:	d908      	bls.n	80162ce <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2201      	movs	r2, #1
 80162c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80162c4:	78fb      	ldrb	r3, [r7, #3]
 80162c6:	f003 031f 	and.w	r3, r3, #31
 80162ca:	70fb      	strb	r3, [r7, #3]
 80162cc:	e002      	b.n	80162d4 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80162ce:	78fb      	ldrb	r3, [r7, #3]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	e02a      	b.n	801632a <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80162d4:	78fb      	ldrb	r3, [r7, #3]
 80162d6:	b29a      	uxth	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 80162dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162e0:	e023      	b.n	801632a <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80162e8:	3b01      	subs	r3, #1
 80162ea:	b2da      	uxtb	r2, r3
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	8c1b      	ldrh	r3, [r3, #32]
 80162f6:	019b      	lsls	r3, r3, #6
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80162fe:	78fb      	ldrb	r3, [r7, #3]
 8016300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016304:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	8c1a      	ldrh	r2, [r3, #32]
 801630a:	78fb      	ldrb	r3, [r7, #3]
 801630c:	b29b      	uxth	r3, r3
 801630e:	4313      	orrs	r3, r2
 8016310:	b29a      	uxth	r2, r3
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801631c:	2b00      	cmp	r3, #0
 801631e:	d002      	beq.n	8016326 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8016320:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016324:	e001      	b.n	801632a <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	8c1b      	ldrh	r3, [r3, #32]
}
 801632a:	4618      	mov	r0, r3
 801632c:	370c      	adds	r7, #12
 801632e:	46bd      	mov	sp, r7
 8016330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016334:	4770      	bx	lr

08016336 <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8016336:	b590      	push	{r4, r7, lr}
 8016338:	b083      	sub	sp, #12
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
 801633e:	460b      	mov	r3, r1
 8016340:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	691c      	ldr	r4, [r3, #16]
 8016346:	78fa      	ldrb	r2, [r7, #3]
 8016348:	2300      	movs	r3, #0
 801634a:	2120      	movs	r1, #32
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	47a0      	blx	r4
 8016350:	4603      	mov	r3, r0
}
 8016352:	4618      	mov	r0, r3
 8016354:	370c      	adds	r7, #12
 8016356:	46bd      	mov	sp, r7
 8016358:	bd90      	pop	{r4, r7, pc}

0801635a <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 801635a:	b590      	push	{r4, r7, lr}
 801635c:	b085      	sub	sp, #20
 801635e:	af00      	add	r7, sp, #0
 8016360:	60f8      	str	r0, [r7, #12]
 8016362:	460b      	mov	r3, r1
 8016364:	607a      	str	r2, [r7, #4]
 8016366:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	691c      	ldr	r4, [r3, #16]
 801636c:	7afa      	ldrb	r2, [r7, #11]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2117      	movs	r1, #23
 8016372:	68f8      	ldr	r0, [r7, #12]
 8016374:	47a0      	blx	r4
 8016376:	4603      	mov	r3, r0
}
 8016378:	4618      	mov	r0, r3
 801637a:	3714      	adds	r7, #20
 801637c:	46bd      	mov	sp, r7
 801637e:	bd90      	pop	{r4, r7, pc}

08016380 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	460b      	mov	r3, r1
 801638a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 801638c:	1cfb      	adds	r3, r7, #3
 801638e:	461a      	mov	r2, r3
 8016390:	2101      	movs	r1, #1
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f7ff ffe1 	bl	801635a <u8x8_byte_SendBytes>
 8016398:	4603      	mov	r3, r0
}
 801639a:	4618      	mov	r0, r3
 801639c:	3708      	adds	r7, #8
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80163a2:	b590      	push	{r4, r7, lr}
 80163a4:	b083      	sub	sp, #12
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	6078      	str	r0, [r7, #4]
 80163aa:	460b      	mov	r3, r1
 80163ac:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	68dc      	ldr	r4, [r3, #12]
 80163b2:	78fa      	ldrb	r2, [r7, #3]
 80163b4:	2300      	movs	r3, #0
 80163b6:	2115      	movs	r1, #21
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	47a0      	blx	r4
 80163bc:	4603      	mov	r3, r0
}
 80163be:	4618      	mov	r0, r3
 80163c0:	370c      	adds	r7, #12
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd90      	pop	{r4, r7, pc}

080163c6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80163c6:	b590      	push	{r4, r7, lr}
 80163c8:	b083      	sub	sp, #12
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	6078      	str	r0, [r7, #4]
 80163ce:	460b      	mov	r3, r1
 80163d0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	68dc      	ldr	r4, [r3, #12]
 80163d6:	78fa      	ldrb	r2, [r7, #3]
 80163d8:	2300      	movs	r3, #0
 80163da:	2116      	movs	r1, #22
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	47a0      	blx	r4
 80163e0:	4603      	mov	r3, r0
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	370c      	adds	r7, #12
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd90      	pop	{r4, r7, pc}

080163ea <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80163ea:	b590      	push	{r4, r7, lr}
 80163ec:	b085      	sub	sp, #20
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	60f8      	str	r0, [r7, #12]
 80163f2:	460b      	mov	r3, r1
 80163f4:	607a      	str	r2, [r7, #4]
 80163f6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	68dc      	ldr	r4, [r3, #12]
 80163fc:	7afa      	ldrb	r2, [r7, #11]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	2117      	movs	r1, #23
 8016402:	68f8      	ldr	r0, [r7, #12]
 8016404:	47a0      	blx	r4
 8016406:	4603      	mov	r3, r0
}
 8016408:	4618      	mov	r0, r3
 801640a:	3714      	adds	r7, #20
 801640c:	46bd      	mov	sp, r7
 801640e:	bd90      	pop	{r4, r7, pc}

08016410 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8016410:	b590      	push	{r4, r7, lr}
 8016412:	b083      	sub	sp, #12
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	68dc      	ldr	r4, [r3, #12]
 801641c:	2300      	movs	r3, #0
 801641e:	2200      	movs	r2, #0
 8016420:	2118      	movs	r1, #24
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	47a0      	blx	r4
 8016426:	4603      	mov	r3, r0
}
 8016428:	4618      	mov	r0, r3
 801642a:	370c      	adds	r7, #12
 801642c:	46bd      	mov	sp, r7
 801642e:	bd90      	pop	{r4, r7, pc}

08016430 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8016430:	b590      	push	{r4, r7, lr}
 8016432:	b083      	sub	sp, #12
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	68dc      	ldr	r4, [r3, #12]
 801643c:	2300      	movs	r3, #0
 801643e:	2200      	movs	r2, #0
 8016440:	2119      	movs	r1, #25
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	47a0      	blx	r4
 8016446:	4603      	mov	r3, r0
}
 8016448:	4618      	mov	r0, r3
 801644a:	370c      	adds	r7, #12
 801644c:	46bd      	mov	sp, r7
 801644e:	bd90      	pop	{r4, r7, pc}

08016450 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8016450:	b590      	push	{r4, r7, lr}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	781b      	ldrb	r3, [r3, #0]
 801645e:	73fb      	strb	r3, [r7, #15]
    data++;
 8016460:	683b      	ldr	r3, [r7, #0]
 8016462:	3301      	adds	r3, #1
 8016464:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8016466:	7bfb      	ldrb	r3, [r7, #15]
 8016468:	2bfe      	cmp	r3, #254	; 0xfe
 801646a:	d031      	beq.n	80164d0 <u8x8_cad_SendSequence+0x80>
 801646c:	2bfe      	cmp	r3, #254	; 0xfe
 801646e:	dc3d      	bgt.n	80164ec <u8x8_cad_SendSequence+0x9c>
 8016470:	2b19      	cmp	r3, #25
 8016472:	dc3b      	bgt.n	80164ec <u8x8_cad_SendSequence+0x9c>
 8016474:	2b18      	cmp	r3, #24
 8016476:	da23      	bge.n	80164c0 <u8x8_cad_SendSequence+0x70>
 8016478:	2b16      	cmp	r3, #22
 801647a:	dc02      	bgt.n	8016482 <u8x8_cad_SendSequence+0x32>
 801647c:	2b15      	cmp	r3, #21
 801647e:	da03      	bge.n	8016488 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8016480:	e034      	b.n	80164ec <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8016482:	2b17      	cmp	r3, #23
 8016484:	d00e      	beq.n	80164a4 <u8x8_cad_SendSequence+0x54>
	return;
 8016486:	e031      	b.n	80164ec <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	781b      	ldrb	r3, [r3, #0]
 801648c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	68dc      	ldr	r4, [r3, #12]
 8016492:	7bba      	ldrb	r2, [r7, #14]
 8016494:	7bf9      	ldrb	r1, [r7, #15]
 8016496:	2300      	movs	r3, #0
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	47a0      	blx	r4
	  data++;
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	3301      	adds	r3, #1
 80164a0:	603b      	str	r3, [r7, #0]
	  break;
 80164a2:	e022      	b.n	80164ea <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80164aa:	f107 030e 	add.w	r3, r7, #14
 80164ae:	461a      	mov	r2, r3
 80164b0:	2101      	movs	r1, #1
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f7ff ff99 	bl	80163ea <u8x8_cad_SendData>
	  data++;
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	3301      	adds	r3, #1
 80164bc:	603b      	str	r3, [r7, #0]
	  break;
 80164be:	e014      	b.n	80164ea <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	68dc      	ldr	r4, [r3, #12]
 80164c4:	7bf9      	ldrb	r1, [r7, #15]
 80164c6:	2300      	movs	r3, #0
 80164c8:	2200      	movs	r2, #0
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	47a0      	blx	r4
	  break;
 80164ce:	e00c      	b.n	80164ea <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80164d6:	7bbb      	ldrb	r3, [r7, #14]
 80164d8:	461a      	mov	r2, r3
 80164da:	2129      	movs	r1, #41	; 0x29
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f000 f9ec 	bl	80168ba <u8x8_gpio_call>
	  data++;
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	3301      	adds	r3, #1
 80164e6:	603b      	str	r3, [r7, #0]
	  break;
 80164e8:	bf00      	nop
    cmd = *data;
 80164ea:	e7b6      	b.n	801645a <u8x8_cad_SendSequence+0xa>
	return;
 80164ec:	bf00      	nop
    }
  }
}
 80164ee:	3714      	adds	r7, #20
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd90      	pop	{r4, r7, pc}

080164f4 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80164f4:	b590      	push	{r4, r7, lr}
 80164f6:	b085      	sub	sp, #20
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	60f8      	str	r0, [r7, #12]
 80164fc:	607b      	str	r3, [r7, #4]
 80164fe:	460b      	mov	r3, r1
 8016500:	72fb      	strb	r3, [r7, #11]
 8016502:	4613      	mov	r3, r2
 8016504:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8016506:	7afb      	ldrb	r3, [r7, #11]
 8016508:	3b14      	subs	r3, #20
 801650a:	2b05      	cmp	r3, #5
 801650c:	d82f      	bhi.n	801656e <u8x8_cad_011+0x7a>
 801650e:	a201      	add	r2, pc, #4	; (adr r2, 8016514 <u8x8_cad_011+0x20>)
 8016510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016514:	0801655d 	.word	0x0801655d
 8016518:	0801652d 	.word	0x0801652d
 801651c:	08016541 	.word	0x08016541
 8016520:	08016555 	.word	0x08016555
 8016524:	0801655d 	.word	0x0801655d
 8016528:	0801655d 	.word	0x0801655d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 801652c:	2100      	movs	r1, #0
 801652e:	68f8      	ldr	r0, [r7, #12]
 8016530:	f7ff ff01 	bl	8016336 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016534:	7abb      	ldrb	r3, [r7, #10]
 8016536:	4619      	mov	r1, r3
 8016538:	68f8      	ldr	r0, [r7, #12]
 801653a:	f7ff ff21 	bl	8016380 <u8x8_byte_SendByte>
      break;
 801653e:	e018      	b.n	8016572 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8016540:	2101      	movs	r1, #1
 8016542:	68f8      	ldr	r0, [r7, #12]
 8016544:	f7ff fef7 	bl	8016336 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016548:	7abb      	ldrb	r3, [r7, #10]
 801654a:	4619      	mov	r1, r3
 801654c:	68f8      	ldr	r0, [r7, #12]
 801654e:	f7ff ff17 	bl	8016380 <u8x8_byte_SendByte>
      break;
 8016552:	e00e      	b.n	8016572 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8016554:	2101      	movs	r1, #1
 8016556:	68f8      	ldr	r0, [r7, #12]
 8016558:	f7ff feed 	bl	8016336 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	691c      	ldr	r4, [r3, #16]
 8016560:	7aba      	ldrb	r2, [r7, #10]
 8016562:	7af9      	ldrb	r1, [r7, #11]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	68f8      	ldr	r0, [r7, #12]
 8016568:	47a0      	blx	r4
 801656a:	4603      	mov	r3, r0
 801656c:	e002      	b.n	8016574 <u8x8_cad_011+0x80>
    default:
      return 0;
 801656e:	2300      	movs	r3, #0
 8016570:	e000      	b.n	8016574 <u8x8_cad_011+0x80>
  }
  return 1;
 8016572:	2301      	movs	r3, #1
}
 8016574:	4618      	mov	r0, r3
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	bd90      	pop	{r4, r7, pc}

0801657c <u8x8_d_uc1638_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b086      	sub	sp, #24
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	607b      	str	r3, [r7, #4]
 8016586:	460b      	mov	r3, r1
 8016588:	72fb      	strb	r3, [r7, #11]
 801658a:	4613      	mov	r3, r2
 801658c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 801658e:	7afb      	ldrb	r3, [r7, #11]
 8016590:	3b0b      	subs	r3, #11
 8016592:	2b04      	cmp	r3, #4
 8016594:	f200 809e 	bhi.w	80166d4 <u8x8_d_uc1638_common+0x158>
 8016598:	a201      	add	r2, pc, #4	; (adr r2, 80165a0 <u8x8_d_uc1638_common+0x24>)
 801659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801659e:	bf00      	nop
 80165a0:	08016669 	.word	0x08016669
 80165a4:	080166d5 	.word	0x080166d5
 80165a8:	08016683 	.word	0x08016683
 80165ac:	080166b5 	.word	0x080166b5
 80165b0:	080165b5 	.word	0x080165b5
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	f7ff ff2b 	bl	8016410 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	795b      	ldrb	r3, [r3, #5]
 80165be:	75fb      	strb	r3, [r7, #23]
	  x += u8x8->x_offset & 15; //I find this string in the new version
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80165c6:	f003 030f 	and.w	r3, r3, #15
 80165ca:	b2da      	uxtb	r2, r3
 80165cc:	7dfb      	ldrb	r3, [r7, #23]
 80165ce:	4413      	add	r3, r2
 80165d0:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80165d2:	7dfb      	ldrb	r3, [r7, #23]
 80165d4:	00db      	lsls	r3, r3, #3
 80165d6:	75fb      	strb	r3, [r7, #23]

      u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
 80165d8:	2104      	movs	r1, #4
 80165da:	68f8      	ldr	r0, [r7, #12]
 80165dc:	f7ff fee1 	bl	80163a2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, x);
 80165e0:	7dfb      	ldrb	r3, [r7, #23]
 80165e2:	4619      	mov	r1, r3
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f7ff feee 	bl	80163c6 <u8x8_cad_SendArg>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	799b      	ldrb	r3, [r3, #6]
 80165ee:	75bb      	strb	r3, [r7, #22]
	  y += u8x8->x_offset >> 4;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80165f6:	091b      	lsrs	r3, r3, #4
 80165f8:	b2da      	uxtb	r2, r3
 80165fa:	7dbb      	ldrb	r3, [r7, #22]
 80165fc:	4413      	add	r3, r2
 80165fe:	75bb      	strb	r3, [r7, #22]
      //y += u8x8->x_offset;
      //y *= 2;		/* for B/W mode, use only every second page */

      u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
 8016600:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016604:	f003 030f 	and.w	r3, r3, #15
 8016608:	b25b      	sxtb	r3, r3
 801660a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801660e:	b25b      	sxtb	r3, r3
 8016610:	b2db      	uxtb	r3, r3
 8016612:	4619      	mov	r1, r3
 8016614:	68f8      	ldr	r0, [r7, #12]
 8016616:	f7ff fec4 	bl	80163a2 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
 801661a:	7dbb      	ldrb	r3, [r7, #22]
 801661c:	091b      	lsrs	r3, r3, #4
 801661e:	b2db      	uxtb	r3, r3
 8016620:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8016624:	b2db      	uxtb	r3, r3
 8016626:	4619      	mov	r1, r3
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f7ff feba 	bl	80163a2 <u8x8_cad_SendCmd>
    
    
      u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
 801662e:	2101      	movs	r1, #1
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	f7ff feb6 	bl	80163a2 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	791b      	ldrb	r3, [r3, #4]
 801663a:	757b      	strb	r3, [r7, #21]
      c *= 8;
 801663c:	7d7b      	ldrb	r3, [r7, #21]
 801663e:	00db      	lsls	r3, r3, #3
 8016640:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8016648:	7d7b      	ldrb	r3, [r7, #21]
 801664a:	693a      	ldr	r2, [r7, #16]
 801664c:	4619      	mov	r1, r3
 801664e:	68f8      	ldr	r0, [r7, #12]
 8016650:	f7ff fecb 	bl	80163ea <u8x8_cad_SendData>
	arg_int--;
 8016654:	7abb      	ldrb	r3, [r7, #10]
 8016656:	3b01      	subs	r3, #1
 8016658:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 801665a:	7abb      	ldrb	r3, [r7, #10]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d1f3      	bne.n	8016648 <u8x8_d_uc1638_common+0xcc>
      
      u8x8_cad_EndTransfer(u8x8);
 8016660:	68f8      	ldr	r0, [r7, #12]
 8016662:	f7ff fee5 	bl	8016430 <u8x8_cad_EndTransfer>
      break;
 8016666:	e037      	b.n	80166d8 <u8x8_d_uc1638_common+0x15c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8016668:	7abb      	ldrb	r3, [r7, #10]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d104      	bne.n	8016678 <u8x8_d_uc1638_common+0xfc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
 801666e:	491d      	ldr	r1, [pc, #116]	; (80166e4 <u8x8_d_uc1638_common+0x168>)
 8016670:	68f8      	ldr	r0, [r7, #12]
 8016672:	f7ff feed 	bl	8016450 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
      break;
 8016676:	e02f      	b.n	80166d8 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
 8016678:	491b      	ldr	r1, [pc, #108]	; (80166e8 <u8x8_d_uc1638_common+0x16c>)
 801667a:	68f8      	ldr	r0, [r7, #12]
 801667c:	f7ff fee8 	bl	8016450 <u8x8_cad_SendSequence>
      break;
 8016680:	e02a      	b.n	80166d8 <u8x8_d_uc1638_common+0x15c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8016682:	7abb      	ldrb	r3, [r7, #10]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d10a      	bne.n	801669e <u8x8_d_uc1638_common+0x122>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
 8016688:	4918      	ldr	r1, [pc, #96]	; (80166ec <u8x8_d_uc1638_common+0x170>)
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	f7ff fee0 	bl	8016450 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	7c9a      	ldrb	r2, [r3, #18]
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 801669c:	e01c      	b.n	80166d8 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
 801669e:	4914      	ldr	r1, [pc, #80]	; (80166f0 <u8x8_d_uc1638_common+0x174>)
 80166a0:	68f8      	ldr	r0, [r7, #12]
 80166a2:	f7ff fed5 	bl	8016450 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	7cda      	ldrb	r2, [r3, #19]
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80166b2:	e011      	b.n	80166d8 <u8x8_d_uc1638_common+0x15c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80166b4:	68f8      	ldr	r0, [r7, #12]
 80166b6:	f7ff feab 	bl	8016410 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80166ba:	2181      	movs	r1, #129	; 0x81
 80166bc:	68f8      	ldr	r0, [r7, #12]
 80166be:	f7ff fe70 	bl	80163a2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1638 has range from 0 to 255 */
 80166c2:	7abb      	ldrb	r3, [r7, #10]
 80166c4:	4619      	mov	r1, r3
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f7ff fe7d 	bl	80163c6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f7ff feaf 	bl	8016430 <u8x8_cad_EndTransfer>
      break;
 80166d2:	e001      	b.n	80166d8 <u8x8_d_uc1638_common+0x15c>
#endif
    default:
      return 0;
 80166d4:	2300      	movs	r3, #0
 80166d6:	e000      	b.n	80166da <u8x8_d_uc1638_common+0x15e>
  }
  return 1;
 80166d8:	2301      	movs	r3, #1
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3718      	adds	r7, #24
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	0802afb8 	.word	0x0802afb8
 80166e8:	0802afc0 	.word	0x0802afc0
 80166ec:	0802afc8 	.word	0x0802afc8
 80166f0:	0802afd0 	.word	0x0802afd0

080166f4 <u8x8_d_uc1638_240x160>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1638_240x160(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	607b      	str	r3, [r7, #4]
 80166fe:	460b      	mov	r3, r1
 8016700:	72fb      	strb	r3, [r7, #11]
 8016702:	4613      	mov	r3, r2
 8016704:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8016706:	7aba      	ldrb	r2, [r7, #10]
 8016708:	7af9      	ldrb	r1, [r7, #11]
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f7ff ff35 	bl	801657c <u8x8_d_uc1638_common>
 8016712:	4603      	mov	r3, r0
 8016714:	2b00      	cmp	r3, #0
 8016716:	d114      	bne.n	8016742 <u8x8_d_uc1638_240x160+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8016718:	7afb      	ldrb	r3, [r7, #11]
 801671a:	2b09      	cmp	r3, #9
 801671c:	d002      	beq.n	8016724 <u8x8_d_uc1638_240x160+0x30>
 801671e:	2b0a      	cmp	r3, #10
 8016720:	d005      	beq.n	801672e <u8x8_d_uc1638_240x160+0x3a>
 8016722:	e00c      	b.n	801673e <u8x8_d_uc1638_240x160+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_240x160_display_info);
 8016724:	490a      	ldr	r1, [pc, #40]	; (8016750 <u8x8_d_uc1638_240x160+0x5c>)
 8016726:	68f8      	ldr	r0, [r7, #12]
 8016728:	f000 f816 	bl	8016758 <u8x8_d_helper_display_setup_memory>
	break;
 801672c:	e00a      	b.n	8016744 <u8x8_d_uc1638_240x160+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 801672e:	68f8      	ldr	r0, [r7, #12]
 8016730:	f000 f826 	bl	8016780 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_240x160_init_seq);
 8016734:	4907      	ldr	r1, [pc, #28]	; (8016754 <u8x8_d_uc1638_240x160+0x60>)
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f7ff fe8a 	bl	8016450 <u8x8_cad_SendSequence>
	break;
 801673c:	e002      	b.n	8016744 <u8x8_d_uc1638_240x160+0x50>
      default:
	return 0;		/* msg unknown */
 801673e:	2300      	movs	r3, #0
 8016740:	e001      	b.n	8016746 <u8x8_d_uc1638_240x160+0x52>
    }
  }
 8016742:	bf00      	nop
  return 1;
 8016744:	2301      	movs	r3, #1
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	0802afd8 	.word	0x0802afd8
 8016754:	0802aff0 	.word	0x0802aff0

08016758 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	683a      	ldr	r2, [r7, #0]
 8016766:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	7c9a      	ldrb	r2, [r3, #18]
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016774:	bf00      	nop
 8016776:	370c      	adds	r7, #12
 8016778:	46bd      	mov	sp, r7
 801677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677e:	4770      	bx	lr

08016780 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016780:	b590      	push	{r4, r7, lr}
 8016782:	b083      	sub	sp, #12
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	695c      	ldr	r4, [r3, #20]
 801678c:	2300      	movs	r3, #0
 801678e:	2200      	movs	r2, #0
 8016790:	2128      	movs	r1, #40	; 0x28
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	68dc      	ldr	r4, [r3, #12]
 801679a:	2300      	movs	r3, #0
 801679c:	2200      	movs	r2, #0
 801679e:	2114      	movs	r1, #20
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80167a4:	2201      	movs	r2, #1
 80167a6:	214b      	movs	r1, #75	; 0x4b
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f000 f886 	bl	80168ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	791b      	ldrb	r3, [r3, #4]
 80167b4:	461a      	mov	r2, r3
 80167b6:	2129      	movs	r1, #41	; 0x29
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 f87e 	bl	80168ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80167be:	2200      	movs	r2, #0
 80167c0:	214b      	movs	r1, #75	; 0x4b
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 f879 	bl	80168ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	791b      	ldrb	r3, [r3, #4]
 80167ce:	461a      	mov	r2, r3
 80167d0:	2129      	movs	r1, #41	; 0x29
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f000 f871 	bl	80168ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80167d8:	2201      	movs	r2, #1
 80167da:	214b      	movs	r1, #75	; 0x4b
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 f86c 	bl	80168ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	795b      	ldrb	r3, [r3, #5]
 80167e8:	461a      	mov	r2, r3
 80167ea:	2129      	movs	r1, #41	; 0x29
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 f864 	bl	80168ba <u8x8_gpio_call>
}    
 80167f2:	bf00      	nop
 80167f4:	370c      	adds	r7, #12
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd90      	pop	{r4, r7, pc}

080167fa <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80167fa:	b590      	push	{r4, r7, lr}
 80167fc:	b085      	sub	sp, #20
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
 8016802:	4608      	mov	r0, r1
 8016804:	4611      	mov	r1, r2
 8016806:	461a      	mov	r2, r3
 8016808:	4603      	mov	r3, r0
 801680a:	70fb      	strb	r3, [r7, #3]
 801680c:	460b      	mov	r3, r1
 801680e:	70bb      	strb	r3, [r7, #2]
 8016810:	4613      	mov	r3, r2
 8016812:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8016814:	78fb      	ldrb	r3, [r7, #3]
 8016816:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8016818:	78bb      	ldrb	r3, [r7, #2]
 801681a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 801681c:	787b      	ldrb	r3, [r7, #1]
 801681e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8016820:	6a3b      	ldr	r3, [r7, #32]
 8016822:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	689c      	ldr	r4, [r3, #8]
 8016828:	f107 0308 	add.w	r3, r7, #8
 801682c:	2201      	movs	r2, #1
 801682e:	210f      	movs	r1, #15
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	47a0      	blx	r4
 8016834:	4603      	mov	r3, r0
}
 8016836:	4618      	mov	r0, r3
 8016838:	3714      	adds	r7, #20
 801683a:	46bd      	mov	sp, r7
 801683c:	bd90      	pop	{r4, r7, pc}

0801683e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 801683e:	b590      	push	{r4, r7, lr}
 8016840:	b083      	sub	sp, #12
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	689c      	ldr	r4, [r3, #8]
 801684a:	2300      	movs	r3, #0
 801684c:	2200      	movs	r2, #0
 801684e:	2109      	movs	r1, #9
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	47a0      	blx	r4
}
 8016854:	bf00      	nop
 8016856:	370c      	adds	r7, #12
 8016858:	46bd      	mov	sp, r7
 801685a:	bd90      	pop	{r4, r7, pc}

0801685c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 801685c:	b590      	push	{r4, r7, lr}
 801685e:	b083      	sub	sp, #12
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	689c      	ldr	r4, [r3, #8]
 8016868:	2300      	movs	r3, #0
 801686a:	2200      	movs	r2, #0
 801686c:	210a      	movs	r1, #10
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	47a0      	blx	r4
}
 8016872:	bf00      	nop
 8016874:	370c      	adds	r7, #12
 8016876:	46bd      	mov	sp, r7
 8016878:	bd90      	pop	{r4, r7, pc}

0801687a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801687a:	b590      	push	{r4, r7, lr}
 801687c:	b083      	sub	sp, #12
 801687e:	af00      	add	r7, sp, #0
 8016880:	6078      	str	r0, [r7, #4]
 8016882:	460b      	mov	r3, r1
 8016884:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	689c      	ldr	r4, [r3, #8]
 801688a:	78fa      	ldrb	r2, [r7, #3]
 801688c:	2300      	movs	r3, #0
 801688e:	210b      	movs	r1, #11
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	47a0      	blx	r4
}
 8016894:	bf00      	nop
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	bd90      	pop	{r4, r7, pc}

0801689c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 801689c:	b590      	push	{r4, r7, lr}
 801689e:	b083      	sub	sp, #12
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	689c      	ldr	r4, [r3, #8]
 80168a8:	2300      	movs	r3, #0
 80168aa:	2200      	movs	r2, #0
 80168ac:	2110      	movs	r1, #16
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	47a0      	blx	r4
}
 80168b2:	bf00      	nop
 80168b4:	370c      	adds	r7, #12
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd90      	pop	{r4, r7, pc}

080168ba <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80168ba:	b590      	push	{r4, r7, lr}
 80168bc:	b083      	sub	sp, #12
 80168be:	af00      	add	r7, sp, #0
 80168c0:	6078      	str	r0, [r7, #4]
 80168c2:	460b      	mov	r3, r1
 80168c4:	70fb      	strb	r3, [r7, #3]
 80168c6:	4613      	mov	r3, r2
 80168c8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	695c      	ldr	r4, [r3, #20]
 80168ce:	78ba      	ldrb	r2, [r7, #2]
 80168d0:	78f9      	ldrb	r1, [r7, #3]
 80168d2:	2300      	movs	r3, #0
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	47a0      	blx	r4
}
 80168d8:	bf00      	nop
 80168da:	370c      	adds	r7, #12
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd90      	pop	{r4, r7, pc}

080168e0 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b085      	sub	sp, #20
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	60f8      	str	r0, [r7, #12]
 80168e8:	607b      	str	r3, [r7, #4]
 80168ea:	460b      	mov	r3, r1
 80168ec:	72fb      	strb	r3, [r7, #11]
 80168ee:	4613      	mov	r3, r2
 80168f0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80168f2:	2300      	movs	r3, #0
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3714      	adds	r7, #20
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr

08016900 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8016900:	b480      	push	{r7}
 8016902:	b083      	sub	sp, #12
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2200      	movs	r2, #0
 801690c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	4a11      	ldr	r2, [pc, #68]	; (8016958 <u8x8_SetupDefaults+0x58>)
 8016912:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	4a10      	ldr	r2, [pc, #64]	; (8016958 <u8x8_SetupDefaults+0x58>)
 8016918:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4a0e      	ldr	r2, [pc, #56]	; (8016958 <u8x8_SetupDefaults+0x58>)
 801691e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	4a0d      	ldr	r2, [pc, #52]	; (8016958 <u8x8_SetupDefaults+0x58>)
 8016924:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2200      	movs	r2, #0
 8016932:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	2200      	movs	r2, #0
 801693a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	22ff      	movs	r2, #255	; 0xff
 8016940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	22ff      	movs	r2, #255	; 0xff
 8016948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 801694c:	bf00      	nop
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr
 8016958:	080168e1 	.word	0x080168e1

0801695c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b084      	sub	sp, #16
 8016960:	af00      	add	r7, sp, #0
 8016962:	60f8      	str	r0, [r7, #12]
 8016964:	60b9      	str	r1, [r7, #8]
 8016966:	607a      	str	r2, [r7, #4]
 8016968:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 801696a:	68f8      	ldr	r0, [r7, #12]
 801696c:	f7ff ffc8 	bl	8016900 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	68ba      	ldr	r2, [r7, #8]
 8016974:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	683a      	ldr	r2, [r7, #0]
 8016980:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	69ba      	ldr	r2, [r7, #24]
 8016986:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016988:	68f8      	ldr	r0, [r7, #12]
 801698a:	f7ff ff58 	bl	801683e <u8x8_SetupMemory>
}
 801698e:	bf00      	nop
 8016990:	3710      	adds	r7, #16
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
	...

08016998 <ADC_options_screen_func>:
const char* SPS_name[16]={ "RATE_2SPS", "RATE_4SPS", "RATE_8SPS", "RATE_16SPS", "RATE_32SPS", "RATE_63SPS", "RATE_125SPS", "RATE_250SPS",
		"RATE_500SPS", "RATE_1000SPS", "RATE_2000SPS", "RATE_4000SPS", "RATE_8000SPS", "RATE_16000SPS", "RATE_32000SPS", "RATE_64000SPS"};
const char* CAL_name[4]={"SELF", "OFFSET", "FULL SCALE", "NEW"};

void ADC_options_screen_func(void)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af02      	add	r7, sp, #8
	RTC_view();
 801699e:	f001 f8df 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80169a2:	4945      	ldr	r1, [pc, #276]	; (8016ab8 <ADC_options_screen_func+0x120>)
 80169a4:	4845      	ldr	r0, [pc, #276]	; (8016abc <ADC_options_screen_func+0x124>)
 80169a6:	f7ff f88d 	bl	8015ac4 <u8g2_SetFont>

	// PGA
	u8g2_DrawUTF8(&u8g2, 10, 40, "PGA:");
 80169aa:	4b45      	ldr	r3, [pc, #276]	; (8016ac0 <ADC_options_screen_func+0x128>)
 80169ac:	2228      	movs	r2, #40	; 0x28
 80169ae:	210a      	movs	r1, #10
 80169b0:	4842      	ldr	r0, [pc, #264]	; (8016abc <ADC_options_screen_func+0x124>)
 80169b2:	f7fe ffe5 	bl	8015980 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 40, PGA_name[PGA_GAIN[0]], edit_param, 0);
 80169b6:	4b43      	ldr	r3, [pc, #268]	; (8016ac4 <ADC_options_screen_func+0x12c>)
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	461a      	mov	r2, r3
 80169bc:	4b42      	ldr	r3, [pc, #264]	; (8016ac8 <ADC_options_screen_func+0x130>)
 80169be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169c2:	4b42      	ldr	r3, [pc, #264]	; (8016acc <ADC_options_screen_func+0x134>)
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	2100      	movs	r1, #0
 80169c8:	9100      	str	r1, [sp, #0]
 80169ca:	2128      	movs	r1, #40	; 0x28
 80169cc:	2078      	movs	r0, #120	; 0x78
 80169ce:	f7ec f91f 	bl	8002c10 <Blink_Edit_Parameter>

	// SPS
	u8g2_DrawUTF8(&u8g2, 10, 60, "SPS:");
 80169d2:	4b3f      	ldr	r3, [pc, #252]	; (8016ad0 <ADC_options_screen_func+0x138>)
 80169d4:	223c      	movs	r2, #60	; 0x3c
 80169d6:	210a      	movs	r1, #10
 80169d8:	4838      	ldr	r0, [pc, #224]	; (8016abc <ADC_options_screen_func+0x124>)
 80169da:	f7fe ffd1 	bl	8015980 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 60,SPS_name[ADC_SPS], edit_param, 1);
 80169de:	4b3d      	ldr	r3, [pc, #244]	; (8016ad4 <ADC_options_screen_func+0x13c>)
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	461a      	mov	r2, r3
 80169e4:	4b3c      	ldr	r3, [pc, #240]	; (8016ad8 <ADC_options_screen_func+0x140>)
 80169e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80169ea:	4b38      	ldr	r3, [pc, #224]	; (8016acc <ADC_options_screen_func+0x134>)
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	2101      	movs	r1, #1
 80169f0:	9100      	str	r1, [sp, #0]
 80169f2:	213c      	movs	r1, #60	; 0x3c
 80169f4:	2078      	movs	r0, #120	; 0x78
 80169f6:	f7ec f90b 	bl	8002c10 <Blink_Edit_Parameter>

	// Calibration
	u8g2_DrawUTF8(&u8g2, 10, 80, "CAL:");
 80169fa:	4b38      	ldr	r3, [pc, #224]	; (8016adc <ADC_options_screen_func+0x144>)
 80169fc:	2250      	movs	r2, #80	; 0x50
 80169fe:	210a      	movs	r1, #10
 8016a00:	482e      	ldr	r0, [pc, #184]	; (8016abc <ADC_options_screen_func+0x124>)
 8016a02:	f7fe ffbd 	bl	8015980 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 80, CAL_name[adc_calibration_mode], edit_param, 2);
 8016a06:	4b36      	ldr	r3, [pc, #216]	; (8016ae0 <ADC_options_screen_func+0x148>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	461a      	mov	r2, r3
 8016a0c:	4b35      	ldr	r3, [pc, #212]	; (8016ae4 <ADC_options_screen_func+0x14c>)
 8016a0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016a12:	4b2e      	ldr	r3, [pc, #184]	; (8016acc <ADC_options_screen_func+0x134>)
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	2102      	movs	r1, #2
 8016a18:	9100      	str	r1, [sp, #0]
 8016a1a:	2150      	movs	r1, #80	; 0x50
 8016a1c:	2078      	movs	r0, #120	; 0x78
 8016a1e:	f7ec f8f7 	bl	8002c10 <Blink_Edit_Parameter>

	// Window size
	u8g2_DrawUTF8(&u8g2, 10, 100, "SIZE:");
 8016a22:	4b31      	ldr	r3, [pc, #196]	; (8016ae8 <ADC_options_screen_func+0x150>)
 8016a24:	2264      	movs	r2, #100	; 0x64
 8016a26:	210a      	movs	r1, #10
 8016a28:	4824      	ldr	r0, [pc, #144]	; (8016abc <ADC_options_screen_func+0x124>)
 8016a2a:	f7fe ffa9 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", ADC_Buff_size);
 8016a2e:	4b2f      	ldr	r3, [pc, #188]	; (8016aec <ADC_options_screen_func+0x154>)
 8016a30:	881b      	ldrh	r3, [r3, #0]
 8016a32:	461a      	mov	r2, r3
 8016a34:	492e      	ldr	r1, [pc, #184]	; (8016af0 <ADC_options_screen_func+0x158>)
 8016a36:	482f      	ldr	r0, [pc, #188]	; (8016af4 <ADC_options_screen_func+0x15c>)
 8016a38:	f007 fa02 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(120, 100, RAM, edit_param, 3);
 8016a3c:	4b23      	ldr	r3, [pc, #140]	; (8016acc <ADC_options_screen_func+0x134>)
 8016a3e:	781b      	ldrb	r3, [r3, #0]
 8016a40:	2203      	movs	r2, #3
 8016a42:	9200      	str	r2, [sp, #0]
 8016a44:	4a2b      	ldr	r2, [pc, #172]	; (8016af4 <ADC_options_screen_func+0x15c>)
 8016a46:	2164      	movs	r1, #100	; 0x64
 8016a48:	2078      	movs	r0, #120	; 0x78
 8016a4a:	f7ec f8e1 	bl	8002c10 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 120, "OFF PERIOD:");
 8016a4e:	4b2a      	ldr	r3, [pc, #168]	; (8016af8 <ADC_options_screen_func+0x160>)
 8016a50:	2278      	movs	r2, #120	; 0x78
 8016a52:	210a      	movs	r1, #10
 8016a54:	4819      	ldr	r0, [pc, #100]	; (8016abc <ADC_options_screen_func+0x124>)
 8016a56:	f7fe ff93 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoOffCoef_period);
 8016a5a:	4b28      	ldr	r3, [pc, #160]	; (8016afc <ADC_options_screen_func+0x164>)
 8016a5c:	881b      	ldrh	r3, [r3, #0]
 8016a5e:	461a      	mov	r2, r3
 8016a60:	4923      	ldr	r1, [pc, #140]	; (8016af0 <ADC_options_screen_func+0x158>)
 8016a62:	4824      	ldr	r0, [pc, #144]	; (8016af4 <ADC_options_screen_func+0x15c>)
 8016a64:	f007 f9ec 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(160, 120, RAM, edit_param, 4);
 8016a68:	4b18      	ldr	r3, [pc, #96]	; (8016acc <ADC_options_screen_func+0x134>)
 8016a6a:	781b      	ldrb	r3, [r3, #0]
 8016a6c:	2204      	movs	r2, #4
 8016a6e:	9200      	str	r2, [sp, #0]
 8016a70:	4a20      	ldr	r2, [pc, #128]	; (8016af4 <ADC_options_screen_func+0x15c>)
 8016a72:	2178      	movs	r1, #120	; 0x78
 8016a74:	20a0      	movs	r0, #160	; 0xa0
 8016a76:	f7ec f8cb 	bl	8002c10 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 140, "GAIN PERIOD:");
 8016a7a:	4b21      	ldr	r3, [pc, #132]	; (8016b00 <ADC_options_screen_func+0x168>)
 8016a7c:	228c      	movs	r2, #140	; 0x8c
 8016a7e:	210a      	movs	r1, #10
 8016a80:	480e      	ldr	r0, [pc, #56]	; (8016abc <ADC_options_screen_func+0x124>)
 8016a82:	f7fe ff7d 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoGainCoef_period);
 8016a86:	4b1f      	ldr	r3, [pc, #124]	; (8016b04 <ADC_options_screen_func+0x16c>)
 8016a88:	881b      	ldrh	r3, [r3, #0]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	4918      	ldr	r1, [pc, #96]	; (8016af0 <ADC_options_screen_func+0x158>)
 8016a8e:	4819      	ldr	r0, [pc, #100]	; (8016af4 <ADC_options_screen_func+0x15c>)
 8016a90:	f007 f9d6 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(160, 140, RAM, edit_param, 5);
 8016a94:	4b0d      	ldr	r3, [pc, #52]	; (8016acc <ADC_options_screen_func+0x134>)
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	2205      	movs	r2, #5
 8016a9a:	9200      	str	r2, [sp, #0]
 8016a9c:	4a15      	ldr	r2, [pc, #84]	; (8016af4 <ADC_options_screen_func+0x15c>)
 8016a9e:	218c      	movs	r1, #140	; 0x8c
 8016aa0:	20a0      	movs	r0, #160	; 0xa0
 8016aa2:	f7ec f8b5 	bl	8002c10 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 8016aa6:	4805      	ldr	r0, [pc, #20]	; (8016abc <ADC_options_screen_func+0x124>)
 8016aa8:	f7fe f9cf 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016aac:	4803      	ldr	r0, [pc, #12]	; (8016abc <ADC_options_screen_func+0x124>)
 8016aae:	f7fe f959 	bl	8014d64 <u8g2_ClearBuffer>
}
 8016ab2:	bf00      	nop
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}
 8016ab8:	08027144 	.word	0x08027144
 8016abc:	20002090 	.word	0x20002090
 8016ac0:	0802235c 	.word	0x0802235c
 8016ac4:	2000009c 	.word	0x2000009c
 8016ac8:	20000050 	.word	0x20000050
 8016acc:	20000912 	.word	0x20000912
 8016ad0:	08022364 	.word	0x08022364
 8016ad4:	200000a3 	.word	0x200000a3
 8016ad8:	200003d8 	.word	0x200003d8
 8016adc:	0802236c 	.word	0x0802236c
 8016ae0:	20000968 	.word	0x20000968
 8016ae4:	20000418 	.word	0x20000418
 8016ae8:	08022374 	.word	0x08022374
 8016aec:	200000a4 	.word	0x200000a4
 8016af0:	0802237c 	.word	0x0802237c
 8016af4:	20002150 	.word	0x20002150
 8016af8:	08022380 	.word	0x08022380
 8016afc:	2000223c 	.word	0x2000223c
 8016b00:	0802238c 	.word	0x0802238c
 8016b04:	200021d4 	.word	0x200021d4

08016b08 <ADC_options_screen_S6>:



// DOWN
void ADC_options_screen_S6(void)
{
 8016b08:	b480      	push	{r7}
 8016b0a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8016b0c:	4b07      	ldr	r3, [pc, #28]	; (8016b2c <ADC_options_screen_S6+0x24>)
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	2b04      	cmp	r3, #4
 8016b12:	d805      	bhi.n	8016b20 <ADC_options_screen_S6+0x18>
 8016b14:	4b05      	ldr	r3, [pc, #20]	; (8016b2c <ADC_options_screen_S6+0x24>)
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	3301      	adds	r3, #1
 8016b1a:	b2da      	uxtb	r2, r3
 8016b1c:	4b03      	ldr	r3, [pc, #12]	; (8016b2c <ADC_options_screen_S6+0x24>)
 8016b1e:	701a      	strb	r2, [r3, #0]
}
 8016b20:	bf00      	nop
 8016b22:	46bd      	mov	sp, r7
 8016b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b28:	4770      	bx	lr
 8016b2a:	bf00      	nop
 8016b2c:	20000912 	.word	0x20000912

08016b30 <ADC_options_screen_S7>:

// UP
void ADC_options_screen_S7(void)
{
 8016b30:	b480      	push	{r7}
 8016b32:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8016b34:	4b07      	ldr	r3, [pc, #28]	; (8016b54 <ADC_options_screen_S7+0x24>)
 8016b36:	781b      	ldrb	r3, [r3, #0]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d005      	beq.n	8016b48 <ADC_options_screen_S7+0x18>
 8016b3c:	4b05      	ldr	r3, [pc, #20]	; (8016b54 <ADC_options_screen_S7+0x24>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	3b01      	subs	r3, #1
 8016b42:	b2da      	uxtb	r2, r3
 8016b44:	4b03      	ldr	r3, [pc, #12]	; (8016b54 <ADC_options_screen_S7+0x24>)
 8016b46:	701a      	strb	r2, [r3, #0]
}
 8016b48:	bf00      	nop
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b50:	4770      	bx	lr
 8016b52:	bf00      	nop
 8016b54:	20000912 	.word	0x20000912

08016b58 <ADC_options_screen_S9>:


// MENU
void ADC_options_screen_S9(void)
{
 8016b58:	b480      	push	{r7}
 8016b5a:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016b5c:	4b06      	ldr	r3, [pc, #24]	; (8016b78 <ADC_options_screen_S9+0x20>)
 8016b5e:	2208      	movs	r2, #8
 8016b60:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016b62:	4b06      	ldr	r3, [pc, #24]	; (8016b7c <ADC_options_screen_S9+0x24>)
 8016b64:	22ff      	movs	r2, #255	; 0xff
 8016b66:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8016b68:	4b05      	ldr	r3, [pc, #20]	; (8016b80 <ADC_options_screen_S9+0x28>)
 8016b6a:	2205      	movs	r2, #5
 8016b6c:	701a      	strb	r2, [r3, #0]
}
 8016b6e:	bf00      	nop
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr
 8016b78:	2000004c 	.word	0x2000004c
 8016b7c:	20000458 	.word	0x20000458
 8016b80:	20000459 	.word	0x20000459

08016b84 <ADC_options_screen_S4>:



// ENTER
void ADC_options_screen_S4(void)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016b88:	4b1e      	ldr	r3, [pc, #120]	; (8016c04 <ADC_options_screen_S4+0x80>)
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	2b05      	cmp	r3, #5
 8016b8e:	d836      	bhi.n	8016bfe <ADC_options_screen_S4+0x7a>
 8016b90:	a201      	add	r2, pc, #4	; (adr r2, 8016b98 <ADC_options_screen_S4+0x14>)
 8016b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b96:	bf00      	nop
 8016b98:	08016bb1 	.word	0x08016bb1
 8016b9c:	08016bbf 	.word	0x08016bbf
 8016ba0:	08016bcd 	.word	0x08016bcd
 8016ba4:	08016bd5 	.word	0x08016bd5
 8016ba8:	08016be3 	.word	0x08016be3
 8016bac:	08016bf1 	.word	0x08016bf1
	{
		case 0: Save_Settings(PGA_GAIN_tag, PGA_GAIN[0]); break;
 8016bb0:	4b15      	ldr	r3, [pc, #84]	; (8016c08 <ADC_options_screen_S4+0x84>)
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	2008      	movs	r0, #8
 8016bb8:	f7ee fd72 	bl	80056a0 <Save_Settings>
 8016bbc:	e01f      	b.n	8016bfe <ADC_options_screen_S4+0x7a>
		case 1: Save_Settings(ADC_SPS_tag, ADC_SPS); break;
 8016bbe:	4b13      	ldr	r3, [pc, #76]	; (8016c0c <ADC_options_screen_S4+0x88>)
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	2009      	movs	r0, #9
 8016bc6:	f7ee fd6b 	bl	80056a0 <Save_Settings>
 8016bca:	e018      	b.n	8016bfe <ADC_options_screen_S4+0x7a>
		case 2: adc_start_calibration=1; break;
 8016bcc:	4b10      	ldr	r3, [pc, #64]	; (8016c10 <ADC_options_screen_S4+0x8c>)
 8016bce:	2201      	movs	r2, #1
 8016bd0:	701a      	strb	r2, [r3, #0]
 8016bd2:	e014      	b.n	8016bfe <ADC_options_screen_S4+0x7a>
		case 3: Save_Settings(ADC_Buff_size_tag, ADC_Buff_size); break;
 8016bd4:	4b0f      	ldr	r3, [pc, #60]	; (8016c14 <ADC_options_screen_S4+0x90>)
 8016bd6:	881b      	ldrh	r3, [r3, #0]
 8016bd8:	4619      	mov	r1, r3
 8016bda:	200b      	movs	r0, #11
 8016bdc:	f7ee fd60 	bl	80056a0 <Save_Settings>
 8016be0:	e00d      	b.n	8016bfe <ADC_options_screen_S4+0x7a>
		case 4: Save_Settings(AutoOffCoef_period_tag, AutoOffCoef_period); break;
 8016be2:	4b0d      	ldr	r3, [pc, #52]	; (8016c18 <ADC_options_screen_S4+0x94>)
 8016be4:	881b      	ldrh	r3, [r3, #0]
 8016be6:	4619      	mov	r1, r3
 8016be8:	201f      	movs	r0, #31
 8016bea:	f7ee fd59 	bl	80056a0 <Save_Settings>
 8016bee:	e006      	b.n	8016bfe <ADC_options_screen_S4+0x7a>
		case 5: Save_Settings(AutoGainCoef_period_tag, AutoGainCoef_period); break;
 8016bf0:	4b0a      	ldr	r3, [pc, #40]	; (8016c1c <ADC_options_screen_S4+0x98>)
 8016bf2:	881b      	ldrh	r3, [r3, #0]
 8016bf4:	4619      	mov	r1, r3
 8016bf6:	2021      	movs	r0, #33	; 0x21
 8016bf8:	f7ee fd52 	bl	80056a0 <Save_Settings>
 8016bfc:	bf00      	nop
	}
}
 8016bfe:	bf00      	nop
 8016c00:	bd80      	pop	{r7, pc}
 8016c02:	bf00      	nop
 8016c04:	20000912 	.word	0x20000912
 8016c08:	2000009c 	.word	0x2000009c
 8016c0c:	200000a3 	.word	0x200000a3
 8016c10:	200008dc 	.word	0x200008dc
 8016c14:	200000a4 	.word	0x200000a4
 8016c18:	2000223c 	.word	0x2000223c
 8016c1c:	200021d4 	.word	0x200021d4

08016c20 <ADC_options_screen_S8>:



// BACKWARD
void ADC_options_screen_S8(void)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016c24:	4b35      	ldr	r3, [pc, #212]	; (8016cfc <ADC_options_screen_S8+0xdc>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	2b05      	cmp	r3, #5
 8016c2a:	d864      	bhi.n	8016cf6 <ADC_options_screen_S8+0xd6>
 8016c2c:	a201      	add	r2, pc, #4	; (adr r2, 8016c34 <ADC_options_screen_S8+0x14>)
 8016c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c32:	bf00      	nop
 8016c34:	08016c4d 	.word	0x08016c4d
 8016c38:	08016c77 	.word	0x08016c77
 8016c3c:	08016c8d 	.word	0x08016c8d
 8016c40:	08016ca3 	.word	0x08016ca3
 8016c44:	08016cb9 	.word	0x08016cb9
 8016c48:	08016ccf 	.word	0x08016ccf
	{
		case 0: if(PGA_GAIN[0]>0)PGA_GAIN[0]--;
 8016c4c:	4b2c      	ldr	r3, [pc, #176]	; (8016d00 <ADC_options_screen_S8+0xe0>)
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d005      	beq.n	8016c60 <ADC_options_screen_S8+0x40>
 8016c54:	4b2a      	ldr	r3, [pc, #168]	; (8016d00 <ADC_options_screen_S8+0xe0>)
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	3b01      	subs	r3, #1
 8016c5a:	b2da      	uxtb	r2, r3
 8016c5c:	4b28      	ldr	r3, [pc, #160]	; (8016d00 <ADC_options_screen_S8+0xe0>)
 8016c5e:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN[0]);
 8016c60:	4b27      	ldr	r3, [pc, #156]	; (8016d00 <ADC_options_screen_S8+0xe0>)
 8016c62:	781b      	ldrb	r3, [r3, #0]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f7ea fdaf 	bl	80017c8 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016c6a:	4b26      	ldr	r3, [pc, #152]	; (8016d04 <ADC_options_screen_S8+0xe4>)
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7ea fa6c 	bl	800114c <ADC_Conversion>
		break;
 8016c74:	e03f      	b.n	8016cf6 <ADC_options_screen_S8+0xd6>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016c76:	4b23      	ldr	r3, [pc, #140]	; (8016d04 <ADC_options_screen_S8+0xe4>)
 8016c78:	781b      	ldrb	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d032      	beq.n	8016ce4 <ADC_options_screen_S8+0xc4>
 8016c7e:	4b21      	ldr	r3, [pc, #132]	; (8016d04 <ADC_options_screen_S8+0xe4>)
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	3b01      	subs	r3, #1
 8016c84:	b2da      	uxtb	r2, r3
 8016c86:	4b1f      	ldr	r3, [pc, #124]	; (8016d04 <ADC_options_screen_S8+0xe4>)
 8016c88:	701a      	strb	r2, [r3, #0]
 8016c8a:	e02b      	b.n	8016ce4 <ADC_options_screen_S8+0xc4>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016c8c:	4b1e      	ldr	r3, [pc, #120]	; (8016d08 <ADC_options_screen_S8+0xe8>)
 8016c8e:	781b      	ldrb	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d029      	beq.n	8016ce8 <ADC_options_screen_S8+0xc8>
 8016c94:	4b1c      	ldr	r3, [pc, #112]	; (8016d08 <ADC_options_screen_S8+0xe8>)
 8016c96:	781b      	ldrb	r3, [r3, #0]
 8016c98:	3b01      	subs	r3, #1
 8016c9a:	b2da      	uxtb	r2, r3
 8016c9c:	4b1a      	ldr	r3, [pc, #104]	; (8016d08 <ADC_options_screen_S8+0xe8>)
 8016c9e:	701a      	strb	r2, [r3, #0]
 8016ca0:	e022      	b.n	8016ce8 <ADC_options_screen_S8+0xc8>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016ca2:	4b1a      	ldr	r3, [pc, #104]	; (8016d0c <ADC_options_screen_S8+0xec>)
 8016ca4:	881b      	ldrh	r3, [r3, #0]
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	d920      	bls.n	8016cec <ADC_options_screen_S8+0xcc>
 8016caa:	4b18      	ldr	r3, [pc, #96]	; (8016d0c <ADC_options_screen_S8+0xec>)
 8016cac:	881b      	ldrh	r3, [r3, #0]
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	b29a      	uxth	r2, r3
 8016cb2:	4b16      	ldr	r3, [pc, #88]	; (8016d0c <ADC_options_screen_S8+0xec>)
 8016cb4:	801a      	strh	r2, [r3, #0]
 8016cb6:	e019      	b.n	8016cec <ADC_options_screen_S8+0xcc>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016cb8:	4b15      	ldr	r3, [pc, #84]	; (8016d10 <ADC_options_screen_S8+0xf0>)
 8016cba:	881b      	ldrh	r3, [r3, #0]
 8016cbc:	2b05      	cmp	r3, #5
 8016cbe:	d917      	bls.n	8016cf0 <ADC_options_screen_S8+0xd0>
 8016cc0:	4b13      	ldr	r3, [pc, #76]	; (8016d10 <ADC_options_screen_S8+0xf0>)
 8016cc2:	881b      	ldrh	r3, [r3, #0]
 8016cc4:	3b01      	subs	r3, #1
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	4b11      	ldr	r3, [pc, #68]	; (8016d10 <ADC_options_screen_S8+0xf0>)
 8016cca:	801a      	strh	r2, [r3, #0]
 8016ccc:	e010      	b.n	8016cf0 <ADC_options_screen_S8+0xd0>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016cce:	4b11      	ldr	r3, [pc, #68]	; (8016d14 <ADC_options_screen_S8+0xf4>)
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	2b05      	cmp	r3, #5
 8016cd4:	d90e      	bls.n	8016cf4 <ADC_options_screen_S8+0xd4>
 8016cd6:	4b0f      	ldr	r3, [pc, #60]	; (8016d14 <ADC_options_screen_S8+0xf4>)
 8016cd8:	881b      	ldrh	r3, [r3, #0]
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	b29a      	uxth	r2, r3
 8016cde:	4b0d      	ldr	r3, [pc, #52]	; (8016d14 <ADC_options_screen_S8+0xf4>)
 8016ce0:	801a      	strh	r2, [r3, #0]
 8016ce2:	e007      	b.n	8016cf4 <ADC_options_screen_S8+0xd4>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016ce4:	bf00      	nop
 8016ce6:	e006      	b.n	8016cf6 <ADC_options_screen_S8+0xd6>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016ce8:	bf00      	nop
 8016cea:	e004      	b.n	8016cf6 <ADC_options_screen_S8+0xd6>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016cec:	bf00      	nop
 8016cee:	e002      	b.n	8016cf6 <ADC_options_screen_S8+0xd6>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016cf0:	bf00      	nop
 8016cf2:	e000      	b.n	8016cf6 <ADC_options_screen_S8+0xd6>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016cf4:	bf00      	nop
	}
}
 8016cf6:	bf00      	nop
 8016cf8:	bd80      	pop	{r7, pc}
 8016cfa:	bf00      	nop
 8016cfc:	20000912 	.word	0x20000912
 8016d00:	2000009c 	.word	0x2000009c
 8016d04:	200000a3 	.word	0x200000a3
 8016d08:	20000968 	.word	0x20000968
 8016d0c:	200000a4 	.word	0x200000a4
 8016d10:	2000223c 	.word	0x2000223c
 8016d14:	200021d4 	.word	0x200021d4

08016d18 <ADC_options_screen_S5>:


// FORWARD
void ADC_options_screen_S5(void)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016d1c:	4b36      	ldr	r3, [pc, #216]	; (8016df8 <ADC_options_screen_S5+0xe0>)
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	2b05      	cmp	r3, #5
 8016d22:	d867      	bhi.n	8016df4 <ADC_options_screen_S5+0xdc>
 8016d24:	a201      	add	r2, pc, #4	; (adr r2, 8016d2c <ADC_options_screen_S5+0x14>)
 8016d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d2a:	bf00      	nop
 8016d2c:	08016d45 	.word	0x08016d45
 8016d30:	08016d6f 	.word	0x08016d6f
 8016d34:	08016d85 	.word	0x08016d85
 8016d38:	08016d9b 	.word	0x08016d9b
 8016d3c:	08016db3 	.word	0x08016db3
 8016d40:	08016dcb 	.word	0x08016dcb
	{
		case 0: if(PGA_GAIN[0]<8)PGA_GAIN[0]++;
 8016d44:	4b2d      	ldr	r3, [pc, #180]	; (8016dfc <ADC_options_screen_S5+0xe4>)
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	2b07      	cmp	r3, #7
 8016d4a:	d805      	bhi.n	8016d58 <ADC_options_screen_S5+0x40>
 8016d4c:	4b2b      	ldr	r3, [pc, #172]	; (8016dfc <ADC_options_screen_S5+0xe4>)
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	3301      	adds	r3, #1
 8016d52:	b2da      	uxtb	r2, r3
 8016d54:	4b29      	ldr	r3, [pc, #164]	; (8016dfc <ADC_options_screen_S5+0xe4>)
 8016d56:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN[0]);
 8016d58:	4b28      	ldr	r3, [pc, #160]	; (8016dfc <ADC_options_screen_S5+0xe4>)
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ea fd33 	bl	80017c8 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016d62:	4b27      	ldr	r3, [pc, #156]	; (8016e00 <ADC_options_screen_S5+0xe8>)
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7ea f9f0 	bl	800114c <ADC_Conversion>
		break;
 8016d6c:	e042      	b.n	8016df4 <ADC_options_screen_S5+0xdc>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016d6e:	4b24      	ldr	r3, [pc, #144]	; (8016e00 <ADC_options_screen_S5+0xe8>)
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	2b0e      	cmp	r3, #14
 8016d74:	d835      	bhi.n	8016de2 <ADC_options_screen_S5+0xca>
 8016d76:	4b22      	ldr	r3, [pc, #136]	; (8016e00 <ADC_options_screen_S5+0xe8>)
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	3301      	adds	r3, #1
 8016d7c:	b2da      	uxtb	r2, r3
 8016d7e:	4b20      	ldr	r3, [pc, #128]	; (8016e00 <ADC_options_screen_S5+0xe8>)
 8016d80:	701a      	strb	r2, [r3, #0]
 8016d82:	e02e      	b.n	8016de2 <ADC_options_screen_S5+0xca>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016d84:	4b1f      	ldr	r3, [pc, #124]	; (8016e04 <ADC_options_screen_S5+0xec>)
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d82c      	bhi.n	8016de6 <ADC_options_screen_S5+0xce>
 8016d8c:	4b1d      	ldr	r3, [pc, #116]	; (8016e04 <ADC_options_screen_S5+0xec>)
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	3301      	adds	r3, #1
 8016d92:	b2da      	uxtb	r2, r3
 8016d94:	4b1b      	ldr	r3, [pc, #108]	; (8016e04 <ADC_options_screen_S5+0xec>)
 8016d96:	701a      	strb	r2, [r3, #0]
 8016d98:	e025      	b.n	8016de6 <ADC_options_screen_S5+0xce>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016d9a:	4b1b      	ldr	r3, [pc, #108]	; (8016e08 <ADC_options_screen_S5+0xf0>)
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016da2:	d222      	bcs.n	8016dea <ADC_options_screen_S5+0xd2>
 8016da4:	4b18      	ldr	r3, [pc, #96]	; (8016e08 <ADC_options_screen_S5+0xf0>)
 8016da6:	881b      	ldrh	r3, [r3, #0]
 8016da8:	3301      	adds	r3, #1
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	4b16      	ldr	r3, [pc, #88]	; (8016e08 <ADC_options_screen_S5+0xf0>)
 8016dae:	801a      	strh	r2, [r3, #0]
 8016db0:	e01b      	b.n	8016dea <ADC_options_screen_S5+0xd2>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016db2:	4b16      	ldr	r3, [pc, #88]	; (8016e0c <ADC_options_screen_S5+0xf4>)
 8016db4:	881b      	ldrh	r3, [r3, #0]
 8016db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016dba:	d218      	bcs.n	8016dee <ADC_options_screen_S5+0xd6>
 8016dbc:	4b13      	ldr	r3, [pc, #76]	; (8016e0c <ADC_options_screen_S5+0xf4>)
 8016dbe:	881b      	ldrh	r3, [r3, #0]
 8016dc0:	3301      	adds	r3, #1
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	4b11      	ldr	r3, [pc, #68]	; (8016e0c <ADC_options_screen_S5+0xf4>)
 8016dc6:	801a      	strh	r2, [r3, #0]
 8016dc8:	e011      	b.n	8016dee <ADC_options_screen_S5+0xd6>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016dca:	4b11      	ldr	r3, [pc, #68]	; (8016e10 <ADC_options_screen_S5+0xf8>)
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8016dd2:	d20e      	bcs.n	8016df2 <ADC_options_screen_S5+0xda>
 8016dd4:	4b0e      	ldr	r3, [pc, #56]	; (8016e10 <ADC_options_screen_S5+0xf8>)
 8016dd6:	881b      	ldrh	r3, [r3, #0]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	4b0c      	ldr	r3, [pc, #48]	; (8016e10 <ADC_options_screen_S5+0xf8>)
 8016dde:	801a      	strh	r2, [r3, #0]
 8016de0:	e007      	b.n	8016df2 <ADC_options_screen_S5+0xda>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016de2:	bf00      	nop
 8016de4:	e006      	b.n	8016df4 <ADC_options_screen_S5+0xdc>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016de6:	bf00      	nop
 8016de8:	e004      	b.n	8016df4 <ADC_options_screen_S5+0xdc>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016dea:	bf00      	nop
 8016dec:	e002      	b.n	8016df4 <ADC_options_screen_S5+0xdc>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016dee:	bf00      	nop
 8016df0:	e000      	b.n	8016df4 <ADC_options_screen_S5+0xdc>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016df2:	bf00      	nop
	}
}
 8016df4:	bf00      	nop
 8016df6:	bd80      	pop	{r7, pc}
 8016df8:	20000912 	.word	0x20000912
 8016dfc:	2000009c 	.word	0x2000009c
 8016e00:	200000a3 	.word	0x200000a3
 8016e04:	20000968 	.word	0x20000968
 8016e08:	200000a4 	.word	0x200000a4
 8016e0c:	2000223c 	.word	0x2000223c
 8016e10:	200021d4 	.word	0x200021d4

08016e14 <Auto_Off_option_screen_func>:
uint16_t off_min = 0;



void Auto_Off_option_screen_func(void)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af02      	add	r7, sp, #8
	RTC_view();
 8016e1a:	f000 fea1 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016e1e:	4911      	ldr	r1, [pc, #68]	; (8016e64 <Auto_Off_option_screen_func+0x50>)
 8016e20:	4811      	ldr	r0, [pc, #68]	; (8016e68 <Auto_Off_option_screen_func+0x54>)
 8016e22:	f7fe fe4f 	bl	8015ac4 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 20, 60, "Автовыключение:");
 8016e26:	4b11      	ldr	r3, [pc, #68]	; (8016e6c <Auto_Off_option_screen_func+0x58>)
 8016e28:	223c      	movs	r2, #60	; 0x3c
 8016e2a:	2114      	movs	r1, #20
 8016e2c:	480e      	ldr	r0, [pc, #56]	; (8016e68 <Auto_Off_option_screen_func+0x54>)
 8016e2e:	f7fe fda7 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", Auto_Off_Time);
 8016e32:	4b0f      	ldr	r3, [pc, #60]	; (8016e70 <Auto_Off_option_screen_func+0x5c>)
 8016e34:	881b      	ldrh	r3, [r3, #0]
 8016e36:	461a      	mov	r2, r3
 8016e38:	490e      	ldr	r1, [pc, #56]	; (8016e74 <Auto_Off_option_screen_func+0x60>)
 8016e3a:	480f      	ldr	r0, [pc, #60]	; (8016e78 <Auto_Off_option_screen_func+0x64>)
 8016e3c:	f007 f800 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(180, 60, RAM, edit_param, 0);
 8016e40:	4b0e      	ldr	r3, [pc, #56]	; (8016e7c <Auto_Off_option_screen_func+0x68>)
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	2200      	movs	r2, #0
 8016e46:	9200      	str	r2, [sp, #0]
 8016e48:	4a0b      	ldr	r2, [pc, #44]	; (8016e78 <Auto_Off_option_screen_func+0x64>)
 8016e4a:	213c      	movs	r1, #60	; 0x3c
 8016e4c:	20b4      	movs	r0, #180	; 0xb4
 8016e4e:	f7eb fedf 	bl	8002c10 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016e52:	4805      	ldr	r0, [pc, #20]	; (8016e68 <Auto_Off_option_screen_func+0x54>)
 8016e54:	f7fd fff9 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016e58:	4803      	ldr	r0, [pc, #12]	; (8016e68 <Auto_Off_option_screen_func+0x54>)
 8016e5a:	f7fd ff83 	bl	8014d64 <u8g2_ClearBuffer>
}
 8016e5e:	bf00      	nop
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	08027144 	.word	0x08027144
 8016e68:	20002090 	.word	0x20002090
 8016e6c:	0802239c 	.word	0x0802239c
 8016e70:	2000096a 	.word	0x2000096a
 8016e74:	080223bc 	.word	0x080223bc
 8016e78:	20002150 	.word	0x20002150
 8016e7c:	20000912 	.word	0x20000912

08016e80 <Auto_Off_option_screen_S9>:



// MENU
void Auto_Off_option_screen_S9(void)
{
 8016e80:	b480      	push	{r7}
 8016e82:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016e84:	4b06      	ldr	r3, [pc, #24]	; (8016ea0 <Auto_Off_option_screen_S9+0x20>)
 8016e86:	2208      	movs	r2, #8
 8016e88:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016e8a:	4b06      	ldr	r3, [pc, #24]	; (8016ea4 <Auto_Off_option_screen_S9+0x24>)
 8016e8c:	22ff      	movs	r2, #255	; 0xff
 8016e8e:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8016e90:	4b05      	ldr	r3, [pc, #20]	; (8016ea8 <Auto_Off_option_screen_S9+0x28>)
 8016e92:	2203      	movs	r2, #3
 8016e94:	701a      	strb	r2, [r3, #0]
}
 8016e96:	bf00      	nop
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr
 8016ea0:	2000004c 	.word	0x2000004c
 8016ea4:	20000458 	.word	0x20000458
 8016ea8:	20000459 	.word	0x20000459

08016eac <Auto_Off_option_screen_S8>:

// BACKWARD
void Auto_Off_option_screen_S8(void)
{ if(Auto_Off_Time>1)Auto_Off_Time--; }
 8016eac:	b480      	push	{r7}
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	4b07      	ldr	r3, [pc, #28]	; (8016ed0 <Auto_Off_option_screen_S8+0x24>)
 8016eb2:	881b      	ldrh	r3, [r3, #0]
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	d905      	bls.n	8016ec4 <Auto_Off_option_screen_S8+0x18>
 8016eb8:	4b05      	ldr	r3, [pc, #20]	; (8016ed0 <Auto_Off_option_screen_S8+0x24>)
 8016eba:	881b      	ldrh	r3, [r3, #0]
 8016ebc:	3b01      	subs	r3, #1
 8016ebe:	b29a      	uxth	r2, r3
 8016ec0:	4b03      	ldr	r3, [pc, #12]	; (8016ed0 <Auto_Off_option_screen_S8+0x24>)
 8016ec2:	801a      	strh	r2, [r3, #0]
 8016ec4:	bf00      	nop
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop
 8016ed0:	2000096a 	.word	0x2000096a

08016ed4 <Auto_Off_option_screen_S5>:

// FORWARD
void Auto_Off_option_screen_S5(void)
{ if(Auto_Off_Time<120)Auto_Off_Time++; }
 8016ed4:	b480      	push	{r7}
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	4b07      	ldr	r3, [pc, #28]	; (8016ef8 <Auto_Off_option_screen_S5+0x24>)
 8016eda:	881b      	ldrh	r3, [r3, #0]
 8016edc:	2b77      	cmp	r3, #119	; 0x77
 8016ede:	d805      	bhi.n	8016eec <Auto_Off_option_screen_S5+0x18>
 8016ee0:	4b05      	ldr	r3, [pc, #20]	; (8016ef8 <Auto_Off_option_screen_S5+0x24>)
 8016ee2:	881b      	ldrh	r3, [r3, #0]
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	b29a      	uxth	r2, r3
 8016ee8:	4b03      	ldr	r3, [pc, #12]	; (8016ef8 <Auto_Off_option_screen_S5+0x24>)
 8016eea:	801a      	strh	r2, [r3, #0]
 8016eec:	bf00      	nop
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef4:	4770      	bx	lr
 8016ef6:	bf00      	nop
 8016ef8:	2000096a 	.word	0x2000096a

08016efc <Auto_OFF_process>:




void Auto_OFF_process(void)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	af00      	add	r7, sp, #0
	if(Auto_Off_Time!=0)
 8016f00:	4b17      	ldr	r3, [pc, #92]	; (8016f60 <Auto_OFF_process+0x64>)
 8016f02:	881b      	ldrh	r3, [r3, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d025      	beq.n	8016f54 <Auto_OFF_process+0x58>
	{
		if(++off_sec>=59){off_min++;off_sec=0;}
 8016f08:	4b16      	ldr	r3, [pc, #88]	; (8016f64 <Auto_OFF_process+0x68>)
 8016f0a:	881b      	ldrh	r3, [r3, #0]
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	b29a      	uxth	r2, r3
 8016f10:	4b14      	ldr	r3, [pc, #80]	; (8016f64 <Auto_OFF_process+0x68>)
 8016f12:	801a      	strh	r2, [r3, #0]
 8016f14:	4b13      	ldr	r3, [pc, #76]	; (8016f64 <Auto_OFF_process+0x68>)
 8016f16:	881b      	ldrh	r3, [r3, #0]
 8016f18:	2b3a      	cmp	r3, #58	; 0x3a
 8016f1a:	d908      	bls.n	8016f2e <Auto_OFF_process+0x32>
 8016f1c:	4b12      	ldr	r3, [pc, #72]	; (8016f68 <Auto_OFF_process+0x6c>)
 8016f1e:	881b      	ldrh	r3, [r3, #0]
 8016f20:	3301      	adds	r3, #1
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	4b10      	ldr	r3, [pc, #64]	; (8016f68 <Auto_OFF_process+0x6c>)
 8016f26:	801a      	strh	r2, [r3, #0]
 8016f28:	4b0e      	ldr	r3, [pc, #56]	; (8016f64 <Auto_OFF_process+0x68>)
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	801a      	strh	r2, [r3, #0]

		if(screen != Off_screen)
 8016f2e:	4b0f      	ldr	r3, [pc, #60]	; (8016f6c <Auto_OFF_process+0x70>)
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	2b03      	cmp	r3, #3
 8016f34:	d00e      	beq.n	8016f54 <Auto_OFF_process+0x58>
		{
			if(off_min>=Auto_Off_Time)
 8016f36:	4b0c      	ldr	r3, [pc, #48]	; (8016f68 <Auto_OFF_process+0x6c>)
 8016f38:	881a      	ldrh	r2, [r3, #0]
 8016f3a:	4b09      	ldr	r3, [pc, #36]	; (8016f60 <Auto_OFF_process+0x64>)
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	d308      	bcc.n	8016f54 <Auto_OFF_process+0x58>
			{
				old_active_string=0xFF;
 8016f42:	4b0b      	ldr	r3, [pc, #44]	; (8016f70 <Auto_OFF_process+0x74>)
 8016f44:	22ff      	movs	r2, #255	; 0xff
 8016f46:	701a      	strb	r2, [r3, #0]
				OnOffCntr = on_off_time;
 8016f48:	4b0a      	ldr	r3, [pc, #40]	; (8016f74 <Auto_OFF_process+0x78>)
 8016f4a:	22c8      	movs	r2, #200	; 0xc8
 8016f4c:	801a      	strh	r2, [r3, #0]
				screen = Off_screen;
 8016f4e:	4b07      	ldr	r3, [pc, #28]	; (8016f6c <Auto_OFF_process+0x70>)
 8016f50:	2203      	movs	r2, #3
 8016f52:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	sleep(1000);
 8016f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016f58:	f7ec f804 	bl	8002f64 <sleep>
}
 8016f5c:	bf00      	nop
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	2000096a 	.word	0x2000096a
 8016f64:	20001d04 	.word	0x20001d04
 8016f68:	20001d06 	.word	0x20001d06
 8016f6c:	2000004c 	.word	0x2000004c
 8016f70:	20000458 	.word	0x20000458
 8016f74:	2000004a 	.word	0x2000004a

08016f78 <Display_options_screen_func>:
uint8_t temp_light=0;
uint8_t soft_onoff_cntr=0;


void Display_options_screen_func(void)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b084      	sub	sp, #16
 8016f7c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	RTC_view();
 8016f7e:	f000 fdef 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016f82:	494e      	ldr	r1, [pc, #312]	; (80170bc <Display_options_screen_func+0x144>)
 8016f84:	484e      	ldr	r0, [pc, #312]	; (80170c0 <Display_options_screen_func+0x148>)
 8016f86:	f7fe fd9d 	bl	8015ac4 <u8g2_SetFont>

	// brightness
	u8g2_DrawUTF8(&u8g2, 20, 60, "Яркость:");
 8016f8a:	4b4e      	ldr	r3, [pc, #312]	; (80170c4 <Display_options_screen_func+0x14c>)
 8016f8c:	223c      	movs	r2, #60	; 0x3c
 8016f8e:	2114      	movs	r1, #20
 8016f90:	484b      	ldr	r0, [pc, #300]	; (80170c0 <Display_options_screen_func+0x148>)
 8016f92:	f7fe fcf5 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_brightness);
 8016f96:	4b4c      	ldr	r3, [pc, #304]	; (80170c8 <Display_options_screen_func+0x150>)
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	494b      	ldr	r1, [pc, #300]	; (80170cc <Display_options_screen_func+0x154>)
 8016f9e:	484c      	ldr	r0, [pc, #304]	; (80170d0 <Display_options_screen_func+0x158>)
 8016fa0:	f006 ff4e 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(170, 60, RAM, edit_param, 0);
 8016fa4:	4b4b      	ldr	r3, [pc, #300]	; (80170d4 <Display_options_screen_func+0x15c>)
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	9200      	str	r2, [sp, #0]
 8016fac:	4a48      	ldr	r2, [pc, #288]	; (80170d0 <Display_options_screen_func+0x158>)
 8016fae:	213c      	movs	r1, #60	; 0x3c
 8016fb0:	20aa      	movs	r0, #170	; 0xaa
 8016fb2:	f7eb fe2d 	bl	8002c10 <Blink_Edit_Parameter>
	// contrast
	u8g2_DrawUTF8(&u8g2, 20, 80, "Контрастность:");
 8016fb6:	4b48      	ldr	r3, [pc, #288]	; (80170d8 <Display_options_screen_func+0x160>)
 8016fb8:	2250      	movs	r2, #80	; 0x50
 8016fba:	2114      	movs	r1, #20
 8016fbc:	4840      	ldr	r0, [pc, #256]	; (80170c0 <Display_options_screen_func+0x148>)
 8016fbe:	f7fe fcdf 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_contrast);
 8016fc2:	4b46      	ldr	r3, [pc, #280]	; (80170dc <Display_options_screen_func+0x164>)
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	4940      	ldr	r1, [pc, #256]	; (80170cc <Display_options_screen_func+0x154>)
 8016fca:	4841      	ldr	r0, [pc, #260]	; (80170d0 <Display_options_screen_func+0x158>)
 8016fcc:	f006 ff38 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(170, 80, RAM, edit_param, 1);
 8016fd0:	4b40      	ldr	r3, [pc, #256]	; (80170d4 <Display_options_screen_func+0x15c>)
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	9200      	str	r2, [sp, #0]
 8016fd8:	4a3d      	ldr	r2, [pc, #244]	; (80170d0 <Display_options_screen_func+0x158>)
 8016fda:	2150      	movs	r1, #80	; 0x50
 8016fdc:	20aa      	movs	r0, #170	; 0xaa
 8016fde:	f7eb fe17 	bl	8002c10 <Blink_Edit_Parameter>
	// delay
	u8g2_DrawUTF8(&u8g2, 20, 100, "Длительность:");
 8016fe2:	4b3f      	ldr	r3, [pc, #252]	; (80170e0 <Display_options_screen_func+0x168>)
 8016fe4:	2264      	movs	r2, #100	; 0x64
 8016fe6:	2114      	movs	r1, #20
 8016fe8:	4835      	ldr	r0, [pc, #212]	; (80170c0 <Display_options_screen_func+0x148>)
 8016fea:	f7fe fcc9 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", light_delay);
 8016fee:	4b3d      	ldr	r3, [pc, #244]	; (80170e4 <Display_options_screen_func+0x16c>)
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	4935      	ldr	r1, [pc, #212]	; (80170cc <Display_options_screen_func+0x154>)
 8016ff6:	4836      	ldr	r0, [pc, #216]	; (80170d0 <Display_options_screen_func+0x158>)
 8016ff8:	f006 ff22 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(170, 100, RAM, edit_param, 2);
 8016ffc:	4b35      	ldr	r3, [pc, #212]	; (80170d4 <Display_options_screen_func+0x15c>)
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	2202      	movs	r2, #2
 8017002:	9200      	str	r2, [sp, #0]
 8017004:	4a32      	ldr	r2, [pc, #200]	; (80170d0 <Display_options_screen_func+0x158>)
 8017006:	2164      	movs	r1, #100	; 0x64
 8017008:	20aa      	movs	r0, #170	; 0xaa
 801700a:	f7eb fe01 	bl	8002c10 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 801700e:	482c      	ldr	r0, [pc, #176]	; (80170c0 <Display_options_screen_func+0x148>)
 8017010:	f7fd ff1b 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017014:	482a      	ldr	r0, [pc, #168]	; (80170c0 <Display_options_screen_func+0x148>)
 8017016:	f7fd fea5 	bl	8014d64 <u8g2_ClearBuffer>

	TIM2->CCR1=temp_light;//display_brightness;
 801701a:	4b33      	ldr	r3, [pc, #204]	; (80170e8 <Display_options_screen_func+0x170>)
 801701c:	781a      	ldrb	r2, [r3, #0]
 801701e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017022:	635a      	str	r2, [r3, #52]	; 0x34

	// Vbias
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8017024:	2200      	movs	r2, #0
 8017026:	f44f 7100 	mov.w	r1, #512	; 0x200
 801702a:	4830      	ldr	r0, [pc, #192]	; (80170ec <Display_options_screen_func+0x174>)
 801702c:	f7f3 f8e8 	bl	800a200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8017030:	2200      	movs	r2, #0
 8017032:	2101      	movs	r1, #1
 8017034:	482e      	ldr	r0, [pc, #184]	; (80170f0 <Display_options_screen_func+0x178>)
 8017036:	f7f3 f8e3 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+Vbias;
 801703a:	4b2e      	ldr	r3, [pc, #184]	; (80170f4 <Display_options_screen_func+0x17c>)
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	3b18      	subs	r3, #24
 8017040:	b2db      	uxtb	r3, r3
 8017042:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8017044:	463a      	mov	r2, r7
 8017046:	1d39      	adds	r1, r7, #4
 8017048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801704c:	9300      	str	r3, [sp, #0]
 801704e:	2301      	movs	r3, #1
 8017050:	4829      	ldr	r0, [pc, #164]	; (80170f8 <Display_options_screen_func+0x180>)
 8017052:	f7f7 f990 	bl	800e376 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017056:	2201      	movs	r2, #1
 8017058:	2101      	movs	r1, #1
 801705a:	4825      	ldr	r0, [pc, #148]	; (80170f0 <Display_options_screen_func+0x178>)
 801705c:	f7f3 f8d0 	bl	800a200 <HAL_GPIO_WritePin>
	// Temp compensation
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8017060:	2200      	movs	r2, #0
 8017062:	2101      	movs	r1, #1
 8017064:	4822      	ldr	r0, [pc, #136]	; (80170f0 <Display_options_screen_func+0x178>)
 8017066:	f7f3 f8cb 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 801706a:	2381      	movs	r3, #129	; 0x81
 801706c:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 801706e:	463a      	mov	r2, r7
 8017070:	1d39      	adds	r1, r7, #4
 8017072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	2301      	movs	r3, #1
 801707a:	481f      	ldr	r0, [pc, #124]	; (80170f8 <Display_options_screen_func+0x180>)
 801707c:	f7f7 f97b 	bl	800e376 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8017080:	2201      	movs	r2, #1
 8017082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017086:	4819      	ldr	r0, [pc, #100]	; (80170ec <Display_options_screen_func+0x174>)
 8017088:	f7f3 f8ba 	bl	800a200 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 801708c:	4b13      	ldr	r3, [pc, #76]	; (80170dc <Display_options_screen_func+0x164>)
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	337d      	adds	r3, #125	; 0x7d
 8017092:	b2db      	uxtb	r3, r3
 8017094:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8017096:	463a      	mov	r2, r7
 8017098:	1d39      	adds	r1, r7, #4
 801709a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801709e:	9300      	str	r3, [sp, #0]
 80170a0:	2301      	movs	r3, #1
 80170a2:	4815      	ldr	r0, [pc, #84]	; (80170f8 <Display_options_screen_func+0x180>)
 80170a4:	f7f7 f967 	bl	800e376 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80170a8:	2201      	movs	r2, #1
 80170aa:	2101      	movs	r1, #1
 80170ac:	4810      	ldr	r0, [pc, #64]	; (80170f0 <Display_options_screen_func+0x178>)
 80170ae:	f7f3 f8a7 	bl	800a200 <HAL_GPIO_WritePin>
}
 80170b2:	bf00      	nop
 80170b4:	3708      	adds	r7, #8
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	08027144 	.word	0x08027144
 80170c0:	20002090 	.word	0x20002090
 80170c4:	080223c0 	.word	0x080223c0
 80170c8:	20000098 	.word	0x20000098
 80170cc:	080223d0 	.word	0x080223d0
 80170d0:	20002150 	.word	0x20002150
 80170d4:	20000912 	.word	0x20000912
 80170d8:	080223d4 	.word	0x080223d4
 80170dc:	20000099 	.word	0x20000099
 80170e0:	080223f0 	.word	0x080223f0
 80170e4:	200000b8 	.word	0x200000b8
 80170e8:	20001d0c 	.word	0x20001d0c
 80170ec:	48000400 	.word	0x48000400
 80170f0:	48001000 	.word	0x48001000
 80170f4:	20000428 	.word	0x20000428
 80170f8:	2000202c 	.word	0x2000202c

080170fc <Display_options_screen_S9>:


// MENU
void Display_options_screen_S9(void)
{
 80170fc:	b480      	push	{r7}
 80170fe:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017100:	4b06      	ldr	r3, [pc, #24]	; (801711c <Display_options_screen_S9+0x20>)
 8017102:	2208      	movs	r2, #8
 8017104:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8017106:	4b06      	ldr	r3, [pc, #24]	; (8017120 <Display_options_screen_S9+0x24>)
 8017108:	22ff      	movs	r2, #255	; 0xff
 801710a:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 801710c:	4b05      	ldr	r3, [pc, #20]	; (8017124 <Display_options_screen_S9+0x28>)
 801710e:	2200      	movs	r2, #0
 8017110:	701a      	strb	r2, [r3, #0]
}
 8017112:	bf00      	nop
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr
 801711c:	2000004c 	.word	0x2000004c
 8017120:	20000458 	.word	0x20000458
 8017124:	20000459 	.word	0x20000459

08017128 <Display_options_screen_S6>:

// DOWN
void Display_options_screen_S6(void)
{
 8017128:	b480      	push	{r7}
 801712a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801712c:	4b07      	ldr	r3, [pc, #28]	; (801714c <Display_options_screen_S6+0x24>)
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	2b01      	cmp	r3, #1
 8017132:	d805      	bhi.n	8017140 <Display_options_screen_S6+0x18>
 8017134:	4b05      	ldr	r3, [pc, #20]	; (801714c <Display_options_screen_S6+0x24>)
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	3301      	adds	r3, #1
 801713a:	b2da      	uxtb	r2, r3
 801713c:	4b03      	ldr	r3, [pc, #12]	; (801714c <Display_options_screen_S6+0x24>)
 801713e:	701a      	strb	r2, [r3, #0]
}
 8017140:	bf00      	nop
 8017142:	46bd      	mov	sp, r7
 8017144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017148:	4770      	bx	lr
 801714a:	bf00      	nop
 801714c:	20000912 	.word	0x20000912

08017150 <Display_options_screen_S7>:

// UP
void Display_options_screen_S7(void)
{
 8017150:	b480      	push	{r7}
 8017152:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017154:	4b07      	ldr	r3, [pc, #28]	; (8017174 <Display_options_screen_S7+0x24>)
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d005      	beq.n	8017168 <Display_options_screen_S7+0x18>
 801715c:	4b05      	ldr	r3, [pc, #20]	; (8017174 <Display_options_screen_S7+0x24>)
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	3b01      	subs	r3, #1
 8017162:	b2da      	uxtb	r2, r3
 8017164:	4b03      	ldr	r3, [pc, #12]	; (8017174 <Display_options_screen_S7+0x24>)
 8017166:	701a      	strb	r2, [r3, #0]
}
 8017168:	bf00      	nop
 801716a:	46bd      	mov	sp, r7
 801716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017170:	4770      	bx	lr
 8017172:	bf00      	nop
 8017174:	20000912 	.word	0x20000912

08017178 <Display_options_screen_S4>:

// ENTER
void Display_options_screen_S4(void)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801717c:	4b10      	ldr	r3, [pc, #64]	; (80171c0 <Display_options_screen_S4+0x48>)
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	2b02      	cmp	r3, #2
 8017182:	d014      	beq.n	80171ae <Display_options_screen_S4+0x36>
 8017184:	2b02      	cmp	r3, #2
 8017186:	dc19      	bgt.n	80171bc <Display_options_screen_S4+0x44>
 8017188:	2b00      	cmp	r3, #0
 801718a:	d002      	beq.n	8017192 <Display_options_screen_S4+0x1a>
 801718c:	2b01      	cmp	r3, #1
 801718e:	d007      	beq.n	80171a0 <Display_options_screen_S4+0x28>
	{
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
		case 2: Save_Settings(light_delay_tag, light_delay); break;
	}
}
 8017190:	e014      	b.n	80171bc <Display_options_screen_S4+0x44>
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
 8017192:	4b0c      	ldr	r3, [pc, #48]	; (80171c4 <Display_options_screen_S4+0x4c>)
 8017194:	781b      	ldrb	r3, [r3, #0]
 8017196:	4619      	mov	r1, r3
 8017198:	2001      	movs	r0, #1
 801719a:	f7ee fa81 	bl	80056a0 <Save_Settings>
 801719e:	e00d      	b.n	80171bc <Display_options_screen_S4+0x44>
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
 80171a0:	4b09      	ldr	r3, [pc, #36]	; (80171c8 <Display_options_screen_S4+0x50>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	4619      	mov	r1, r3
 80171a6:	2002      	movs	r0, #2
 80171a8:	f7ee fa7a 	bl	80056a0 <Save_Settings>
 80171ac:	e006      	b.n	80171bc <Display_options_screen_S4+0x44>
		case 2: Save_Settings(light_delay_tag, light_delay); break;
 80171ae:	4b07      	ldr	r3, [pc, #28]	; (80171cc <Display_options_screen_S4+0x54>)
 80171b0:	881b      	ldrh	r3, [r3, #0]
 80171b2:	4619      	mov	r1, r3
 80171b4:	2010      	movs	r0, #16
 80171b6:	f7ee fa73 	bl	80056a0 <Save_Settings>
 80171ba:	bf00      	nop
}
 80171bc:	bf00      	nop
 80171be:	bd80      	pop	{r7, pc}
 80171c0:	20000912 	.word	0x20000912
 80171c4:	20000098 	.word	0x20000098
 80171c8:	20000099 	.word	0x20000099
 80171cc:	200000b8 	.word	0x200000b8

080171d0 <Display_options_screen_S8>:



// BACKWARD
void Display_options_screen_S8(void)
{
 80171d0:	b480      	push	{r7}
 80171d2:	af00      	add	r7, sp, #0
	switch(edit_param)
 80171d4:	4b1a      	ldr	r3, [pc, #104]	; (8017240 <Display_options_screen_S8+0x70>)
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	2b02      	cmp	r3, #2
 80171da:	d01c      	beq.n	8017216 <Display_options_screen_S8+0x46>
 80171dc:	2b02      	cmp	r3, #2
 80171de:	dc2a      	bgt.n	8017236 <Display_options_screen_S8+0x66>
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d002      	beq.n	80171ea <Display_options_screen_S8+0x1a>
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d00b      	beq.n	8017200 <Display_options_screen_S8+0x30>
	{
		case 0: if(display_brightness>0)display_brightness--; break;
		case 1: if(display_contrast>0)display_contrast--; break;
		case 2: if(light_delay>0)light_delay--; break;
	}
}
 80171e8:	e025      	b.n	8017236 <Display_options_screen_S8+0x66>
		case 0: if(display_brightness>0)display_brightness--; break;
 80171ea:	4b16      	ldr	r3, [pc, #88]	; (8017244 <Display_options_screen_S8+0x74>)
 80171ec:	781b      	ldrb	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d01c      	beq.n	801722c <Display_options_screen_S8+0x5c>
 80171f2:	4b14      	ldr	r3, [pc, #80]	; (8017244 <Display_options_screen_S8+0x74>)
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	3b01      	subs	r3, #1
 80171f8:	b2da      	uxtb	r2, r3
 80171fa:	4b12      	ldr	r3, [pc, #72]	; (8017244 <Display_options_screen_S8+0x74>)
 80171fc:	701a      	strb	r2, [r3, #0]
 80171fe:	e015      	b.n	801722c <Display_options_screen_S8+0x5c>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017200:	4b11      	ldr	r3, [pc, #68]	; (8017248 <Display_options_screen_S8+0x78>)
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d013      	beq.n	8017230 <Display_options_screen_S8+0x60>
 8017208:	4b0f      	ldr	r3, [pc, #60]	; (8017248 <Display_options_screen_S8+0x78>)
 801720a:	781b      	ldrb	r3, [r3, #0]
 801720c:	3b01      	subs	r3, #1
 801720e:	b2da      	uxtb	r2, r3
 8017210:	4b0d      	ldr	r3, [pc, #52]	; (8017248 <Display_options_screen_S8+0x78>)
 8017212:	701a      	strb	r2, [r3, #0]
 8017214:	e00c      	b.n	8017230 <Display_options_screen_S8+0x60>
		case 2: if(light_delay>0)light_delay--; break;
 8017216:	4b0d      	ldr	r3, [pc, #52]	; (801724c <Display_options_screen_S8+0x7c>)
 8017218:	881b      	ldrh	r3, [r3, #0]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d00a      	beq.n	8017234 <Display_options_screen_S8+0x64>
 801721e:	4b0b      	ldr	r3, [pc, #44]	; (801724c <Display_options_screen_S8+0x7c>)
 8017220:	881b      	ldrh	r3, [r3, #0]
 8017222:	3b01      	subs	r3, #1
 8017224:	b29a      	uxth	r2, r3
 8017226:	4b09      	ldr	r3, [pc, #36]	; (801724c <Display_options_screen_S8+0x7c>)
 8017228:	801a      	strh	r2, [r3, #0]
 801722a:	e003      	b.n	8017234 <Display_options_screen_S8+0x64>
		case 0: if(display_brightness>0)display_brightness--; break;
 801722c:	bf00      	nop
 801722e:	e002      	b.n	8017236 <Display_options_screen_S8+0x66>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017230:	bf00      	nop
 8017232:	e000      	b.n	8017236 <Display_options_screen_S8+0x66>
		case 2: if(light_delay>0)light_delay--; break;
 8017234:	bf00      	nop
}
 8017236:	bf00      	nop
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr
 8017240:	20000912 	.word	0x20000912
 8017244:	20000098 	.word	0x20000098
 8017248:	20000099 	.word	0x20000099
 801724c:	200000b8 	.word	0x200000b8

08017250 <Display_options_screen_S5>:

// FORWARD
void Display_options_screen_S5(void)
{
 8017250:	b480      	push	{r7}
 8017252:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017254:	4b1a      	ldr	r3, [pc, #104]	; (80172c0 <Display_options_screen_S5+0x70>)
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	2b02      	cmp	r3, #2
 801725a:	d01c      	beq.n	8017296 <Display_options_screen_S5+0x46>
 801725c:	2b02      	cmp	r3, #2
 801725e:	dc2a      	bgt.n	80172b6 <Display_options_screen_S5+0x66>
 8017260:	2b00      	cmp	r3, #0
 8017262:	d002      	beq.n	801726a <Display_options_screen_S5+0x1a>
 8017264:	2b01      	cmp	r3, #1
 8017266:	d00b      	beq.n	8017280 <Display_options_screen_S5+0x30>
	{
		case 0:if(display_brightness<50)display_brightness++; break;
		case 1: if(display_contrast<50)display_contrast++; break;
		case 2: if(light_delay<50)light_delay++; break;
	}
}
 8017268:	e025      	b.n	80172b6 <Display_options_screen_S5+0x66>
		case 0:if(display_brightness<50)display_brightness++; break;
 801726a:	4b16      	ldr	r3, [pc, #88]	; (80172c4 <Display_options_screen_S5+0x74>)
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b31      	cmp	r3, #49	; 0x31
 8017270:	d81c      	bhi.n	80172ac <Display_options_screen_S5+0x5c>
 8017272:	4b14      	ldr	r3, [pc, #80]	; (80172c4 <Display_options_screen_S5+0x74>)
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	3301      	adds	r3, #1
 8017278:	b2da      	uxtb	r2, r3
 801727a:	4b12      	ldr	r3, [pc, #72]	; (80172c4 <Display_options_screen_S5+0x74>)
 801727c:	701a      	strb	r2, [r3, #0]
 801727e:	e015      	b.n	80172ac <Display_options_screen_S5+0x5c>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017280:	4b11      	ldr	r3, [pc, #68]	; (80172c8 <Display_options_screen_S5+0x78>)
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	2b31      	cmp	r3, #49	; 0x31
 8017286:	d813      	bhi.n	80172b0 <Display_options_screen_S5+0x60>
 8017288:	4b0f      	ldr	r3, [pc, #60]	; (80172c8 <Display_options_screen_S5+0x78>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	3301      	adds	r3, #1
 801728e:	b2da      	uxtb	r2, r3
 8017290:	4b0d      	ldr	r3, [pc, #52]	; (80172c8 <Display_options_screen_S5+0x78>)
 8017292:	701a      	strb	r2, [r3, #0]
 8017294:	e00c      	b.n	80172b0 <Display_options_screen_S5+0x60>
		case 2: if(light_delay<50)light_delay++; break;
 8017296:	4b0d      	ldr	r3, [pc, #52]	; (80172cc <Display_options_screen_S5+0x7c>)
 8017298:	881b      	ldrh	r3, [r3, #0]
 801729a:	2b31      	cmp	r3, #49	; 0x31
 801729c:	d80a      	bhi.n	80172b4 <Display_options_screen_S5+0x64>
 801729e:	4b0b      	ldr	r3, [pc, #44]	; (80172cc <Display_options_screen_S5+0x7c>)
 80172a0:	881b      	ldrh	r3, [r3, #0]
 80172a2:	3301      	adds	r3, #1
 80172a4:	b29a      	uxth	r2, r3
 80172a6:	4b09      	ldr	r3, [pc, #36]	; (80172cc <Display_options_screen_S5+0x7c>)
 80172a8:	801a      	strh	r2, [r3, #0]
 80172aa:	e003      	b.n	80172b4 <Display_options_screen_S5+0x64>
		case 0:if(display_brightness<50)display_brightness++; break;
 80172ac:	bf00      	nop
 80172ae:	e002      	b.n	80172b6 <Display_options_screen_S5+0x66>
		case 1: if(display_contrast<50)display_contrast++; break;
 80172b0:	bf00      	nop
 80172b2:	e000      	b.n	80172b6 <Display_options_screen_S5+0x66>
		case 2: if(light_delay<50)light_delay++; break;
 80172b4:	bf00      	nop
}
 80172b6:	bf00      	nop
 80172b8:	46bd      	mov	sp, r7
 80172ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172be:	4770      	bx	lr
 80172c0:	20000912 	.word	0x20000912
 80172c4:	20000098 	.word	0x20000098
 80172c8:	20000099 	.word	0x20000099
 80172cc:	200000b8 	.word	0x200000b8

080172d0 <Light_OFF_process>:



void Light_OFF_process(void)
{
 80172d0:	b480      	push	{r7}
 80172d2:	af00      	add	r7, sp, #0
	if(++light_ms>=1000)
 80172d4:	4b37      	ldr	r3, [pc, #220]	; (80173b4 <Light_OFF_process+0xe4>)
 80172d6:	881b      	ldrh	r3, [r3, #0]
 80172d8:	3301      	adds	r3, #1
 80172da:	b29a      	uxth	r2, r3
 80172dc:	4b35      	ldr	r3, [pc, #212]	; (80173b4 <Light_OFF_process+0xe4>)
 80172de:	801a      	strh	r2, [r3, #0]
 80172e0:	4b34      	ldr	r3, [pc, #208]	; (80173b4 <Light_OFF_process+0xe4>)
 80172e2:	881b      	ldrh	r3, [r3, #0]
 80172e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80172e8:	d315      	bcc.n	8017316 <Light_OFF_process+0x46>
	{
		light_ms=0;
 80172ea:	4b32      	ldr	r3, [pc, #200]	; (80173b4 <Light_OFF_process+0xe4>)
 80172ec:	2200      	movs	r2, #0
 80172ee:	801a      	strh	r2, [r3, #0]
		if(++light_sec>59){light_min++; light_sec=0;}
 80172f0:	4b31      	ldr	r3, [pc, #196]	; (80173b8 <Light_OFF_process+0xe8>)
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	3301      	adds	r3, #1
 80172f6:	b2da      	uxtb	r2, r3
 80172f8:	4b2f      	ldr	r3, [pc, #188]	; (80173b8 <Light_OFF_process+0xe8>)
 80172fa:	701a      	strb	r2, [r3, #0]
 80172fc:	4b2e      	ldr	r3, [pc, #184]	; (80173b8 <Light_OFF_process+0xe8>)
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	2b3b      	cmp	r3, #59	; 0x3b
 8017302:	d908      	bls.n	8017316 <Light_OFF_process+0x46>
 8017304:	4b2d      	ldr	r3, [pc, #180]	; (80173bc <Light_OFF_process+0xec>)
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	3301      	adds	r3, #1
 801730a:	b2da      	uxtb	r2, r3
 801730c:	4b2b      	ldr	r3, [pc, #172]	; (80173bc <Light_OFF_process+0xec>)
 801730e:	701a      	strb	r2, [r3, #0]
 8017310:	4b29      	ldr	r3, [pc, #164]	; (80173b8 <Light_OFF_process+0xe8>)
 8017312:	2200      	movs	r2, #0
 8017314:	701a      	strb	r2, [r3, #0]
	}

	if(++soft_onoff_cntr>=50)
 8017316:	4b2a      	ldr	r3, [pc, #168]	; (80173c0 <Light_OFF_process+0xf0>)
 8017318:	781b      	ldrb	r3, [r3, #0]
 801731a:	3301      	adds	r3, #1
 801731c:	b2da      	uxtb	r2, r3
 801731e:	4b28      	ldr	r3, [pc, #160]	; (80173c0 <Light_OFF_process+0xf0>)
 8017320:	701a      	strb	r2, [r3, #0]
 8017322:	4b27      	ldr	r3, [pc, #156]	; (80173c0 <Light_OFF_process+0xf0>)
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	2b31      	cmp	r3, #49	; 0x31
 8017328:	d93e      	bls.n	80173a8 <Light_OFF_process+0xd8>
	{
		soft_onoff_cntr=0;
 801732a:	4b25      	ldr	r3, [pc, #148]	; (80173c0 <Light_OFF_process+0xf0>)
 801732c:	2200      	movs	r2, #0
 801732e:	701a      	strb	r2, [r3, #0]
		if(light_min>=light_delay)
 8017330:	4b22      	ldr	r3, [pc, #136]	; (80173bc <Light_OFF_process+0xec>)
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	b29a      	uxth	r2, r3
 8017336:	4b23      	ldr	r3, [pc, #140]	; (80173c4 <Light_OFF_process+0xf4>)
 8017338:	881b      	ldrh	r3, [r3, #0]
 801733a:	429a      	cmp	r2, r3
 801733c:	d319      	bcc.n	8017372 <Light_OFF_process+0xa2>
		{
			light_min=light_delay;
 801733e:	4b21      	ldr	r3, [pc, #132]	; (80173c4 <Light_OFF_process+0xf4>)
 8017340:	881b      	ldrh	r3, [r3, #0]
 8017342:	b2da      	uxtb	r2, r3
 8017344:	4b1d      	ldr	r3, [pc, #116]	; (80173bc <Light_OFF_process+0xec>)
 8017346:	701a      	strb	r2, [r3, #0]
			if(temp_light>0)temp_light--;
 8017348:	4b1f      	ldr	r3, [pc, #124]	; (80173c8 <Light_OFF_process+0xf8>)
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d005      	beq.n	801735c <Light_OFF_process+0x8c>
 8017350:	4b1d      	ldr	r3, [pc, #116]	; (80173c8 <Light_OFF_process+0xf8>)
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	3b01      	subs	r3, #1
 8017356:	b2da      	uxtb	r2, r3
 8017358:	4b1b      	ldr	r3, [pc, #108]	; (80173c8 <Light_OFF_process+0xf8>)
 801735a:	701a      	strb	r2, [r3, #0]
			light_min=light_delay;
 801735c:	4b19      	ldr	r3, [pc, #100]	; (80173c4 <Light_OFF_process+0xf4>)
 801735e:	881b      	ldrh	r3, [r3, #0]
 8017360:	b2da      	uxtb	r2, r3
 8017362:	4b16      	ldr	r3, [pc, #88]	; (80173bc <Light_OFF_process+0xec>)
 8017364:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 8017366:	4b18      	ldr	r3, [pc, #96]	; (80173c8 <Light_OFF_process+0xf8>)
 8017368:	781a      	ldrb	r2, [r3, #0]
 801736a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801736e:	635a      	str	r2, [r3, #52]	; 0x34
			if(temp_light<display_brightness)temp_light++;
			if(temp_light>=display_brightness)temp_light=display_brightness;
			TIM2->CCR1=temp_light;
		}
	}
}
 8017370:	e01a      	b.n	80173a8 <Light_OFF_process+0xd8>
			if(temp_light<display_brightness)temp_light++;
 8017372:	4b15      	ldr	r3, [pc, #84]	; (80173c8 <Light_OFF_process+0xf8>)
 8017374:	781a      	ldrb	r2, [r3, #0]
 8017376:	4b15      	ldr	r3, [pc, #84]	; (80173cc <Light_OFF_process+0xfc>)
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	429a      	cmp	r2, r3
 801737c:	d205      	bcs.n	801738a <Light_OFF_process+0xba>
 801737e:	4b12      	ldr	r3, [pc, #72]	; (80173c8 <Light_OFF_process+0xf8>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	3301      	adds	r3, #1
 8017384:	b2da      	uxtb	r2, r3
 8017386:	4b10      	ldr	r3, [pc, #64]	; (80173c8 <Light_OFF_process+0xf8>)
 8017388:	701a      	strb	r2, [r3, #0]
			if(temp_light>=display_brightness)temp_light=display_brightness;
 801738a:	4b0f      	ldr	r3, [pc, #60]	; (80173c8 <Light_OFF_process+0xf8>)
 801738c:	781a      	ldrb	r2, [r3, #0]
 801738e:	4b0f      	ldr	r3, [pc, #60]	; (80173cc <Light_OFF_process+0xfc>)
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	429a      	cmp	r2, r3
 8017394:	d303      	bcc.n	801739e <Light_OFF_process+0xce>
 8017396:	4b0d      	ldr	r3, [pc, #52]	; (80173cc <Light_OFF_process+0xfc>)
 8017398:	781a      	ldrb	r2, [r3, #0]
 801739a:	4b0b      	ldr	r3, [pc, #44]	; (80173c8 <Light_OFF_process+0xf8>)
 801739c:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 801739e:	4b0a      	ldr	r3, [pc, #40]	; (80173c8 <Light_OFF_process+0xf8>)
 80173a0:	781a      	ldrb	r2, [r3, #0]
 80173a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80173a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80173a8:	bf00      	nop
 80173aa:	46bd      	mov	sp, r7
 80173ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop
 80173b4:	20001d0a 	.word	0x20001d0a
 80173b8:	20001d08 	.word	0x20001d08
 80173bc:	20001d09 	.word	0x20001d09
 80173c0:	20001d0d 	.word	0x20001d0d
 80173c4:	200000b8 	.word	0x200000b8
 80173c8:	20001d0c 	.word	0x20001d0c
 80173cc:	20000098 	.word	0x20000098

080173d0 <Measure_options_screen_func>:
const uint8_t time_icon[]={0,24,0,24,0x1F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFE, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x31, 0x87, 0xE0, 0x33, 0x87, 0xE0, 0x3F, 0x07, 0xE0, 0x1E, 0x07, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0x7F, 0xFF, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xF8};



void Measure_options_screen_func(void)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af02      	add	r7, sp, #8
	RTC_view();
 80173d6:	f000 fbc3 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80173da:	4974      	ldr	r1, [pc, #464]	; (80175ac <Measure_options_screen_func+0x1dc>)
 80173dc:	4874      	ldr	r0, [pc, #464]	; (80175b0 <Measure_options_screen_func+0x1e0>)
 80173de:	f7fe fb71 	bl	8015ac4 <u8g2_SetFont>


		// "ПИКОВЫЕ ЗНАЧЕНИЯ");
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*0+6, "ПИКОВЫЕ ЗНАЧЕНИЯ", edit_param, 0);
 80173e2:	4b74      	ldr	r3, [pc, #464]	; (80175b4 <Measure_options_screen_func+0x1e4>)
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	2200      	movs	r2, #0
 80173e8:	9200      	str	r2, [sp, #0]
 80173ea:	4a73      	ldr	r2, [pc, #460]	; (80175b8 <Measure_options_screen_func+0x1e8>)
 80173ec:	211f      	movs	r1, #31
 80173ee:	200f      	movs	r0, #15
 80173f0:	f7eb fc0e 	bl	8002c10 <Blink_Edit_Parameter>
		switch(mm_peak)
 80173f4:	4b71      	ldr	r3, [pc, #452]	; (80175bc <Measure_options_screen_func+0x1ec>)
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d002      	beq.n	8017402 <Measure_options_screen_func+0x32>
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	d007      	beq.n	8017410 <Measure_options_screen_func+0x40>
 8017400:	e00d      	b.n	801741e <Measure_options_screen_func+0x4e>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 8017402:	2301      	movs	r3, #1
 8017404:	2219      	movs	r2, #25
 8017406:	21c8      	movs	r1, #200	; 0xc8
 8017408:	486d      	ldr	r0, [pc, #436]	; (80175c0 <Measure_options_screen_func+0x1f0>)
 801740a:	f7eb fa73 	bl	80028f4 <DrawImage>
 801740e:	e006      	b.n	801741e <Measure_options_screen_func+0x4e>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 8017410:	2301      	movs	r3, #1
 8017412:	2219      	movs	r2, #25
 8017414:	21c8      	movs	r1, #200	; 0xc8
 8017416:	486b      	ldr	r0, [pc, #428]	; (80175c4 <Measure_options_screen_func+0x1f4>)
 8017418:	f7eb fa6c 	bl	80028f4 <DrawImage>
 801741c:	bf00      	nop
		}

		// "ОБНАРУЖЕНИЕ УТЕЧЕК"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*1+6, "ОБНАРУЖЕНИЕ УТЕЧЕК", edit_param, 1);
 801741e:	4b65      	ldr	r3, [pc, #404]	; (80175b4 <Measure_options_screen_func+0x1e4>)
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	2201      	movs	r2, #1
 8017424:	9200      	str	r2, [sp, #0]
 8017426:	4a68      	ldr	r2, [pc, #416]	; (80175c8 <Measure_options_screen_func+0x1f8>)
 8017428:	2139      	movs	r1, #57	; 0x39
 801742a:	200f      	movs	r0, #15
 801742c:	f7eb fbf0 	bl	8002c10 <Blink_Edit_Parameter>
		switch(leak_detect)
 8017430:	4b66      	ldr	r3, [pc, #408]	; (80175cc <Measure_options_screen_func+0x1fc>)
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	2b02      	cmp	r3, #2
 8017436:	d014      	beq.n	8017462 <Measure_options_screen_func+0x92>
 8017438:	2b02      	cmp	r3, #2
 801743a:	dc19      	bgt.n	8017470 <Measure_options_screen_func+0xa0>
 801743c:	2b00      	cmp	r3, #0
 801743e:	d002      	beq.n	8017446 <Measure_options_screen_func+0x76>
 8017440:	2b01      	cmp	r3, #1
 8017442:	d007      	beq.n	8017454 <Measure_options_screen_func+0x84>
 8017444:	e014      	b.n	8017470 <Measure_options_screen_func+0xa0>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017446:	2301      	movs	r3, #1
 8017448:	2233      	movs	r2, #51	; 0x33
 801744a:	21c8      	movs	r1, #200	; 0xc8
 801744c:	485c      	ldr	r0, [pc, #368]	; (80175c0 <Measure_options_screen_func+0x1f0>)
 801744e:	f7eb fa51 	bl	80028f4 <DrawImage>
 8017452:	e00d      	b.n	8017470 <Measure_options_screen_func+0xa0>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017454:	2301      	movs	r3, #1
 8017456:	2233      	movs	r2, #51	; 0x33
 8017458:	21c8      	movs	r1, #200	; 0xc8
 801745a:	485a      	ldr	r0, [pc, #360]	; (80175c4 <Measure_options_screen_func+0x1f4>)
 801745c:	f7eb fa4a 	bl	80028f4 <DrawImage>
 8017460:	e006      	b.n	8017470 <Measure_options_screen_func+0xa0>
			case 2: DrawImage(time_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 8017462:	2301      	movs	r3, #1
 8017464:	2233      	movs	r2, #51	; 0x33
 8017466:	21c8      	movs	r1, #200	; 0xc8
 8017468:	4859      	ldr	r0, [pc, #356]	; (80175d0 <Measure_options_screen_func+0x200>)
 801746a:	f7eb fa43 	bl	80028f4 <DrawImage>
 801746e:	bf00      	nop
		}

		// "P+V"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*2+6, "P+V", edit_param, 2);
 8017470:	4b50      	ldr	r3, [pc, #320]	; (80175b4 <Measure_options_screen_func+0x1e4>)
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	2202      	movs	r2, #2
 8017476:	9200      	str	r2, [sp, #0]
 8017478:	4a56      	ldr	r2, [pc, #344]	; (80175d4 <Measure_options_screen_func+0x204>)
 801747a:	2153      	movs	r1, #83	; 0x53
 801747c:	200f      	movs	r0, #15
 801747e:	f7eb fbc7 	bl	8002c10 <Blink_Edit_Parameter>
		switch(PV)
 8017482:	4b55      	ldr	r3, [pc, #340]	; (80175d8 <Measure_options_screen_func+0x208>)
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d002      	beq.n	8017490 <Measure_options_screen_func+0xc0>
 801748a:	2b01      	cmp	r3, #1
 801748c:	d007      	beq.n	801749e <Measure_options_screen_func+0xce>
 801748e:	e00d      	b.n	80174ac <Measure_options_screen_func+0xdc>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 8017490:	2301      	movs	r3, #1
 8017492:	224d      	movs	r2, #77	; 0x4d
 8017494:	21c8      	movs	r1, #200	; 0xc8
 8017496:	484a      	ldr	r0, [pc, #296]	; (80175c0 <Measure_options_screen_func+0x1f0>)
 8017498:	f7eb fa2c 	bl	80028f4 <DrawImage>
 801749c:	e006      	b.n	80174ac <Measure_options_screen_func+0xdc>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 801749e:	2301      	movs	r3, #1
 80174a0:	224d      	movs	r2, #77	; 0x4d
 80174a2:	21c8      	movs	r1, #200	; 0xc8
 80174a4:	4847      	ldr	r0, [pc, #284]	; (80175c4 <Measure_options_screen_func+0x1f4>)
 80174a6:	f7eb fa25 	bl	80028f4 <DrawImage>
 80174aa:	bf00      	nop
		}

		// "P+I"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*3+6, "P+I", edit_param, 3);
 80174ac:	4b41      	ldr	r3, [pc, #260]	; (80175b4 <Measure_options_screen_func+0x1e4>)
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	2203      	movs	r2, #3
 80174b2:	9200      	str	r2, [sp, #0]
 80174b4:	4a49      	ldr	r2, [pc, #292]	; (80175dc <Measure_options_screen_func+0x20c>)
 80174b6:	216d      	movs	r1, #109	; 0x6d
 80174b8:	200f      	movs	r0, #15
 80174ba:	f7eb fba9 	bl	8002c10 <Blink_Edit_Parameter>
		switch(PI)
 80174be:	4b48      	ldr	r3, [pc, #288]	; (80175e0 <Measure_options_screen_func+0x210>)
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d002      	beq.n	80174cc <Measure_options_screen_func+0xfc>
 80174c6:	2b01      	cmp	r3, #1
 80174c8:	d007      	beq.n	80174da <Measure_options_screen_func+0x10a>
 80174ca:	e00d      	b.n	80174e8 <Measure_options_screen_func+0x118>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 80174cc:	2301      	movs	r3, #1
 80174ce:	2267      	movs	r2, #103	; 0x67
 80174d0:	21c8      	movs	r1, #200	; 0xc8
 80174d2:	483b      	ldr	r0, [pc, #236]	; (80175c0 <Measure_options_screen_func+0x1f0>)
 80174d4:	f7eb fa0e 	bl	80028f4 <DrawImage>
 80174d8:	e006      	b.n	80174e8 <Measure_options_screen_func+0x118>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 80174da:	2301      	movs	r3, #1
 80174dc:	2267      	movs	r2, #103	; 0x67
 80174de:	21c8      	movs	r1, #200	; 0xc8
 80174e0:	4838      	ldr	r0, [pc, #224]	; (80175c4 <Measure_options_screen_func+0x1f4>)
 80174e2:	f7eb fa07 	bl	80028f4 <DrawImage>
 80174e6:	bf00      	nop
		}

		// "P+E"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*4+6, "P+E", edit_param, 4);
 80174e8:	4b32      	ldr	r3, [pc, #200]	; (80175b4 <Measure_options_screen_func+0x1e4>)
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	2204      	movs	r2, #4
 80174ee:	9200      	str	r2, [sp, #0]
 80174f0:	4a3c      	ldr	r2, [pc, #240]	; (80175e4 <Measure_options_screen_func+0x214>)
 80174f2:	2187      	movs	r1, #135	; 0x87
 80174f4:	200f      	movs	r0, #15
 80174f6:	f7eb fb8b 	bl	8002c10 <Blink_Edit_Parameter>
		switch(PE)
 80174fa:	4b3b      	ldr	r3, [pc, #236]	; (80175e8 <Measure_options_screen_func+0x218>)
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	2b07      	cmp	r3, #7
 8017500:	d84a      	bhi.n	8017598 <Measure_options_screen_func+0x1c8>
 8017502:	a201      	add	r2, pc, #4	; (adr r2, 8017508 <Measure_options_screen_func+0x138>)
 8017504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017508:	08017529 	.word	0x08017529
 801750c:	08017537 	.word	0x08017537
 8017510:	08017545 	.word	0x08017545
 8017514:	08017553 	.word	0x08017553
 8017518:	08017561 	.word	0x08017561
 801751c:	0801756f 	.word	0x0801756f
 8017520:	0801757d 	.word	0x0801757d
 8017524:	0801758b 	.word	0x0801758b
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017528:	2301      	movs	r3, #1
 801752a:	2281      	movs	r2, #129	; 0x81
 801752c:	21c8      	movs	r1, #200	; 0xc8
 801752e:	4824      	ldr	r0, [pc, #144]	; (80175c0 <Measure_options_screen_func+0x1f0>)
 8017530:	f7eb f9e0 	bl	80028f4 <DrawImage>
 8017534:	e030      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017536:	2301      	movs	r3, #1
 8017538:	2281      	movs	r2, #129	; 0x81
 801753a:	21c8      	movs	r1, #200	; 0xc8
 801753c:	4821      	ldr	r0, [pc, #132]	; (80175c4 <Measure_options_screen_func+0x1f4>)
 801753e:	f7eb f9d9 	bl	80028f4 <DrawImage>
 8017542:	e029      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 2: DrawImage(press_on_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017544:	2301      	movs	r3, #1
 8017546:	2281      	movs	r2, #129	; 0x81
 8017548:	21c8      	movs	r1, #200	; 0xc8
 801754a:	4828      	ldr	r0, [pc, #160]	; (80175ec <Measure_options_screen_func+0x21c>)
 801754c:	f7eb f9d2 	bl	80028f4 <DrawImage>
 8017550:	e022      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 3: DrawImage(press_off_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017552:	2301      	movs	r3, #1
 8017554:	2281      	movs	r2, #129	; 0x81
 8017556:	21c8      	movs	r1, #200	; 0xc8
 8017558:	4825      	ldr	r0, [pc, #148]	; (80175f0 <Measure_options_screen_func+0x220>)
 801755a:	f7eb f9cb 	bl	80028f4 <DrawImage>
 801755e:	e01b      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 4: DrawImage(up_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017560:	2301      	movs	r3, #1
 8017562:	2281      	movs	r2, #129	; 0x81
 8017564:	21c8      	movs	r1, #200	; 0xc8
 8017566:	4823      	ldr	r0, [pc, #140]	; (80175f4 <Measure_options_screen_func+0x224>)
 8017568:	f7eb f9c4 	bl	80028f4 <DrawImage>
 801756c:	e014      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 5: DrawImage(down_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801756e:	2301      	movs	r3, #1
 8017570:	2281      	movs	r2, #129	; 0x81
 8017572:	21c8      	movs	r1, #200	; 0xc8
 8017574:	4820      	ldr	r0, [pc, #128]	; (80175f8 <Measure_options_screen_func+0x228>)
 8017576:	f7eb f9bd 	bl	80028f4 <DrawImage>
 801757a:	e00d      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 6: DrawImage(pos_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801757c:	2301      	movs	r3, #1
 801757e:	2281      	movs	r2, #129	; 0x81
 8017580:	21c8      	movs	r1, #200	; 0xc8
 8017582:	481e      	ldr	r0, [pc, #120]	; (80175fc <Measure_options_screen_func+0x22c>)
 8017584:	f7eb f9b6 	bl	80028f4 <DrawImage>
 8017588:	e006      	b.n	8017598 <Measure_options_screen_func+0x1c8>
			case 7: DrawImage(neg_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 801758a:	2301      	movs	r3, #1
 801758c:	2281      	movs	r2, #129	; 0x81
 801758e:	21c8      	movs	r1, #200	; 0xc8
 8017590:	481b      	ldr	r0, [pc, #108]	; (8017600 <Measure_options_screen_func+0x230>)
 8017592:	f7eb f9af 	bl	80028f4 <DrawImage>
 8017596:	bf00      	nop
		}



	u8g2_SendBuffer(&u8g2);
 8017598:	4805      	ldr	r0, [pc, #20]	; (80175b0 <Measure_options_screen_func+0x1e0>)
 801759a:	f7fd fc56 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 801759e:	4804      	ldr	r0, [pc, #16]	; (80175b0 <Measure_options_screen_func+0x1e0>)
 80175a0:	f7fd fbe0 	bl	8014d64 <u8g2_ClearBuffer>
}
 80175a4:	bf00      	nop
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	08027144 	.word	0x08027144
 80175b0:	20002090 	.word	0x20002090
 80175b4:	20000912 	.word	0x20000912
 80175b8:	0802240c 	.word	0x0802240c
 80175bc:	20000963 	.word	0x20000963
 80175c0:	0802b03c 	.word	0x0802b03c
 80175c4:	0802b088 	.word	0x0802b088
 80175c8:	0802242c 	.word	0x0802242c
 80175cc:	20000964 	.word	0x20000964
 80175d0:	0802b29c 	.word	0x0802b29c
 80175d4:	08022450 	.word	0x08022450
 80175d8:	20000965 	.word	0x20000965
 80175dc:	08022454 	.word	0x08022454
 80175e0:	20000966 	.word	0x20000966
 80175e4:	08022458 	.word	0x08022458
 80175e8:	20000967 	.word	0x20000967
 80175ec:	0802b204 	.word	0x0802b204
 80175f0:	0802b250 	.word	0x0802b250
 80175f4:	0802b0d4 	.word	0x0802b0d4
 80175f8:	0802b120 	.word	0x0802b120
 80175fc:	0802b1b8 	.word	0x0802b1b8
 8017600:	0802b16c 	.word	0x0802b16c

08017604 <Measure_options_screen_S6>:


// DOWN
void Measure_options_screen_S6(void)
{
 8017604:	b480      	push	{r7}
 8017606:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017608:	4b07      	ldr	r3, [pc, #28]	; (8017628 <Measure_options_screen_S6+0x24>)
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b03      	cmp	r3, #3
 801760e:	d805      	bhi.n	801761c <Measure_options_screen_S6+0x18>
 8017610:	4b05      	ldr	r3, [pc, #20]	; (8017628 <Measure_options_screen_S6+0x24>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	3301      	adds	r3, #1
 8017616:	b2da      	uxtb	r2, r3
 8017618:	4b03      	ldr	r3, [pc, #12]	; (8017628 <Measure_options_screen_S6+0x24>)
 801761a:	701a      	strb	r2, [r3, #0]
}
 801761c:	bf00      	nop
 801761e:	46bd      	mov	sp, r7
 8017620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017624:	4770      	bx	lr
 8017626:	bf00      	nop
 8017628:	20000912 	.word	0x20000912

0801762c <Measure_options_screen_S7>:

// UP
void Measure_options_screen_S7(void)
{
 801762c:	b480      	push	{r7}
 801762e:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017630:	4b07      	ldr	r3, [pc, #28]	; (8017650 <Measure_options_screen_S7+0x24>)
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d005      	beq.n	8017644 <Measure_options_screen_S7+0x18>
 8017638:	4b05      	ldr	r3, [pc, #20]	; (8017650 <Measure_options_screen_S7+0x24>)
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	3b01      	subs	r3, #1
 801763e:	b2da      	uxtb	r2, r3
 8017640:	4b03      	ldr	r3, [pc, #12]	; (8017650 <Measure_options_screen_S7+0x24>)
 8017642:	701a      	strb	r2, [r3, #0]
}
 8017644:	bf00      	nop
 8017646:	46bd      	mov	sp, r7
 8017648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764c:	4770      	bx	lr
 801764e:	bf00      	nop
 8017650:	20000912 	.word	0x20000912

08017654 <Measure_options_screen_S9>:



// MENU
void Measure_options_screen_S9(void)
{
 8017654:	b480      	push	{r7}
 8017656:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8017658:	4b06      	ldr	r3, [pc, #24]	; (8017674 <Measure_options_screen_S9+0x20>)
 801765a:	2204      	movs	r2, #4
 801765c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801765e:	4b06      	ldr	r3, [pc, #24]	; (8017678 <Measure_options_screen_S9+0x24>)
 8017660:	22ff      	movs	r2, #255	; 0xff
 8017662:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 8017664:	4b05      	ldr	r3, [pc, #20]	; (801767c <Measure_options_screen_S9+0x28>)
 8017666:	2200      	movs	r2, #0
 8017668:	701a      	strb	r2, [r3, #0]
}
 801766a:	bf00      	nop
 801766c:	46bd      	mov	sp, r7
 801766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017672:	4770      	bx	lr
 8017674:	2000004c 	.word	0x2000004c
 8017678:	20000458 	.word	0x20000458
 801767c:	20000459 	.word	0x20000459

08017680 <Measure_options_screen_S8>:

// BACKWARD
void Measure_options_screen_S8(void)
{
 8017680:	b480      	push	{r7}
 8017682:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017684:	4b2b      	ldr	r3, [pc, #172]	; (8017734 <Measure_options_screen_S8+0xb4>)
 8017686:	781b      	ldrb	r3, [r3, #0]
 8017688:	2b04      	cmp	r3, #4
 801768a:	d84d      	bhi.n	8017728 <Measure_options_screen_S8+0xa8>
 801768c:	a201      	add	r2, pc, #4	; (adr r2, 8017694 <Measure_options_screen_S8+0x14>)
 801768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017692:	bf00      	nop
 8017694:	080176a9 	.word	0x080176a9
 8017698:	080176bf 	.word	0x080176bf
 801769c:	080176d5 	.word	0x080176d5
 80176a0:	080176eb 	.word	0x080176eb
 80176a4:	08017701 	.word	0x08017701
	{
		case 0: if(mm_peak>0)mm_peak--; break;
 80176a8:	4b23      	ldr	r3, [pc, #140]	; (8017738 <Measure_options_screen_S8+0xb8>)
 80176aa:	781b      	ldrb	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d032      	beq.n	8017716 <Measure_options_screen_S8+0x96>
 80176b0:	4b21      	ldr	r3, [pc, #132]	; (8017738 <Measure_options_screen_S8+0xb8>)
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	3b01      	subs	r3, #1
 80176b6:	b2da      	uxtb	r2, r3
 80176b8:	4b1f      	ldr	r3, [pc, #124]	; (8017738 <Measure_options_screen_S8+0xb8>)
 80176ba:	701a      	strb	r2, [r3, #0]
 80176bc:	e02b      	b.n	8017716 <Measure_options_screen_S8+0x96>
		case 1: if(leak_detect>0)leak_detect--; break;
 80176be:	4b1f      	ldr	r3, [pc, #124]	; (801773c <Measure_options_screen_S8+0xbc>)
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d029      	beq.n	801771a <Measure_options_screen_S8+0x9a>
 80176c6:	4b1d      	ldr	r3, [pc, #116]	; (801773c <Measure_options_screen_S8+0xbc>)
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	3b01      	subs	r3, #1
 80176cc:	b2da      	uxtb	r2, r3
 80176ce:	4b1b      	ldr	r3, [pc, #108]	; (801773c <Measure_options_screen_S8+0xbc>)
 80176d0:	701a      	strb	r2, [r3, #0]
 80176d2:	e022      	b.n	801771a <Measure_options_screen_S8+0x9a>
		case 2: if(PV>0)PV--; break;
 80176d4:	4b1a      	ldr	r3, [pc, #104]	; (8017740 <Measure_options_screen_S8+0xc0>)
 80176d6:	781b      	ldrb	r3, [r3, #0]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d020      	beq.n	801771e <Measure_options_screen_S8+0x9e>
 80176dc:	4b18      	ldr	r3, [pc, #96]	; (8017740 <Measure_options_screen_S8+0xc0>)
 80176de:	781b      	ldrb	r3, [r3, #0]
 80176e0:	3b01      	subs	r3, #1
 80176e2:	b2da      	uxtb	r2, r3
 80176e4:	4b16      	ldr	r3, [pc, #88]	; (8017740 <Measure_options_screen_S8+0xc0>)
 80176e6:	701a      	strb	r2, [r3, #0]
 80176e8:	e019      	b.n	801771e <Measure_options_screen_S8+0x9e>
		case 3: if(PI>0)PI--; break;
 80176ea:	4b16      	ldr	r3, [pc, #88]	; (8017744 <Measure_options_screen_S8+0xc4>)
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d017      	beq.n	8017722 <Measure_options_screen_S8+0xa2>
 80176f2:	4b14      	ldr	r3, [pc, #80]	; (8017744 <Measure_options_screen_S8+0xc4>)
 80176f4:	781b      	ldrb	r3, [r3, #0]
 80176f6:	3b01      	subs	r3, #1
 80176f8:	b2da      	uxtb	r2, r3
 80176fa:	4b12      	ldr	r3, [pc, #72]	; (8017744 <Measure_options_screen_S8+0xc4>)
 80176fc:	701a      	strb	r2, [r3, #0]
 80176fe:	e010      	b.n	8017722 <Measure_options_screen_S8+0xa2>
		case 4: if(PE>0)PE--; break;
 8017700:	4b11      	ldr	r3, [pc, #68]	; (8017748 <Measure_options_screen_S8+0xc8>)
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d00e      	beq.n	8017726 <Measure_options_screen_S8+0xa6>
 8017708:	4b0f      	ldr	r3, [pc, #60]	; (8017748 <Measure_options_screen_S8+0xc8>)
 801770a:	781b      	ldrb	r3, [r3, #0]
 801770c:	3b01      	subs	r3, #1
 801770e:	b2da      	uxtb	r2, r3
 8017710:	4b0d      	ldr	r3, [pc, #52]	; (8017748 <Measure_options_screen_S8+0xc8>)
 8017712:	701a      	strb	r2, [r3, #0]
 8017714:	e007      	b.n	8017726 <Measure_options_screen_S8+0xa6>
		case 0: if(mm_peak>0)mm_peak--; break;
 8017716:	bf00      	nop
 8017718:	e006      	b.n	8017728 <Measure_options_screen_S8+0xa8>
		case 1: if(leak_detect>0)leak_detect--; break;
 801771a:	bf00      	nop
 801771c:	e004      	b.n	8017728 <Measure_options_screen_S8+0xa8>
		case 2: if(PV>0)PV--; break;
 801771e:	bf00      	nop
 8017720:	e002      	b.n	8017728 <Measure_options_screen_S8+0xa8>
		case 3: if(PI>0)PI--; break;
 8017722:	bf00      	nop
 8017724:	e000      	b.n	8017728 <Measure_options_screen_S8+0xa8>
		case 4: if(PE>0)PE--; break;
 8017726:	bf00      	nop
	}
}
 8017728:	bf00      	nop
 801772a:	46bd      	mov	sp, r7
 801772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017730:	4770      	bx	lr
 8017732:	bf00      	nop
 8017734:	20000912 	.word	0x20000912
 8017738:	20000963 	.word	0x20000963
 801773c:	20000964 	.word	0x20000964
 8017740:	20000965 	.word	0x20000965
 8017744:	20000966 	.word	0x20000966
 8017748:	20000967 	.word	0x20000967

0801774c <Measure_options_screen_S5>:

// FORWARD
void Measure_options_screen_S5(void)
{
 801774c:	b480      	push	{r7}
 801774e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017750:	4b2b      	ldr	r3, [pc, #172]	; (8017800 <Measure_options_screen_S5+0xb4>)
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	2b04      	cmp	r3, #4
 8017756:	d84d      	bhi.n	80177f4 <Measure_options_screen_S5+0xa8>
 8017758:	a201      	add	r2, pc, #4	; (adr r2, 8017760 <Measure_options_screen_S5+0x14>)
 801775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801775e:	bf00      	nop
 8017760:	08017775 	.word	0x08017775
 8017764:	0801778b 	.word	0x0801778b
 8017768:	080177a1 	.word	0x080177a1
 801776c:	080177b7 	.word	0x080177b7
 8017770:	080177cd 	.word	0x080177cd
	{
		case 0: if(mm_peak<1)mm_peak++; break;
 8017774:	4b23      	ldr	r3, [pc, #140]	; (8017804 <Measure_options_screen_S5+0xb8>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d132      	bne.n	80177e2 <Measure_options_screen_S5+0x96>
 801777c:	4b21      	ldr	r3, [pc, #132]	; (8017804 <Measure_options_screen_S5+0xb8>)
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	3301      	adds	r3, #1
 8017782:	b2da      	uxtb	r2, r3
 8017784:	4b1f      	ldr	r3, [pc, #124]	; (8017804 <Measure_options_screen_S5+0xb8>)
 8017786:	701a      	strb	r2, [r3, #0]
 8017788:	e02b      	b.n	80177e2 <Measure_options_screen_S5+0x96>
		case 1: if(leak_detect<2)leak_detect++; break;
 801778a:	4b1f      	ldr	r3, [pc, #124]	; (8017808 <Measure_options_screen_S5+0xbc>)
 801778c:	781b      	ldrb	r3, [r3, #0]
 801778e:	2b01      	cmp	r3, #1
 8017790:	d829      	bhi.n	80177e6 <Measure_options_screen_S5+0x9a>
 8017792:	4b1d      	ldr	r3, [pc, #116]	; (8017808 <Measure_options_screen_S5+0xbc>)
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	3301      	adds	r3, #1
 8017798:	b2da      	uxtb	r2, r3
 801779a:	4b1b      	ldr	r3, [pc, #108]	; (8017808 <Measure_options_screen_S5+0xbc>)
 801779c:	701a      	strb	r2, [r3, #0]
 801779e:	e022      	b.n	80177e6 <Measure_options_screen_S5+0x9a>
		case 2: if(PV<1)PV++; break;
 80177a0:	4b1a      	ldr	r3, [pc, #104]	; (801780c <Measure_options_screen_S5+0xc0>)
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d120      	bne.n	80177ea <Measure_options_screen_S5+0x9e>
 80177a8:	4b18      	ldr	r3, [pc, #96]	; (801780c <Measure_options_screen_S5+0xc0>)
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	3301      	adds	r3, #1
 80177ae:	b2da      	uxtb	r2, r3
 80177b0:	4b16      	ldr	r3, [pc, #88]	; (801780c <Measure_options_screen_S5+0xc0>)
 80177b2:	701a      	strb	r2, [r3, #0]
 80177b4:	e019      	b.n	80177ea <Measure_options_screen_S5+0x9e>
		case 3: if(PI<1)PI++; break;
 80177b6:	4b16      	ldr	r3, [pc, #88]	; (8017810 <Measure_options_screen_S5+0xc4>)
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d117      	bne.n	80177ee <Measure_options_screen_S5+0xa2>
 80177be:	4b14      	ldr	r3, [pc, #80]	; (8017810 <Measure_options_screen_S5+0xc4>)
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	3301      	adds	r3, #1
 80177c4:	b2da      	uxtb	r2, r3
 80177c6:	4b12      	ldr	r3, [pc, #72]	; (8017810 <Measure_options_screen_S5+0xc4>)
 80177c8:	701a      	strb	r2, [r3, #0]
 80177ca:	e010      	b.n	80177ee <Measure_options_screen_S5+0xa2>
		case 4: if(PE<7)PE++; break;
 80177cc:	4b11      	ldr	r3, [pc, #68]	; (8017814 <Measure_options_screen_S5+0xc8>)
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	2b06      	cmp	r3, #6
 80177d2:	d80e      	bhi.n	80177f2 <Measure_options_screen_S5+0xa6>
 80177d4:	4b0f      	ldr	r3, [pc, #60]	; (8017814 <Measure_options_screen_S5+0xc8>)
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	3301      	adds	r3, #1
 80177da:	b2da      	uxtb	r2, r3
 80177dc:	4b0d      	ldr	r3, [pc, #52]	; (8017814 <Measure_options_screen_S5+0xc8>)
 80177de:	701a      	strb	r2, [r3, #0]
 80177e0:	e007      	b.n	80177f2 <Measure_options_screen_S5+0xa6>
		case 0: if(mm_peak<1)mm_peak++; break;
 80177e2:	bf00      	nop
 80177e4:	e006      	b.n	80177f4 <Measure_options_screen_S5+0xa8>
		case 1: if(leak_detect<2)leak_detect++; break;
 80177e6:	bf00      	nop
 80177e8:	e004      	b.n	80177f4 <Measure_options_screen_S5+0xa8>
		case 2: if(PV<1)PV++; break;
 80177ea:	bf00      	nop
 80177ec:	e002      	b.n	80177f4 <Measure_options_screen_S5+0xa8>
		case 3: if(PI<1)PI++; break;
 80177ee:	bf00      	nop
 80177f0:	e000      	b.n	80177f4 <Measure_options_screen_S5+0xa8>
		case 4: if(PE<7)PE++; break;
 80177f2:	bf00      	nop
	}
}
 80177f4:	bf00      	nop
 80177f6:	46bd      	mov	sp, r7
 80177f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fc:	4770      	bx	lr
 80177fe:	bf00      	nop
 8017800:	20000912 	.word	0x20000912
 8017804:	20000963 	.word	0x20000963
 8017808:	20000964 	.word	0x20000964
 801780c:	20000965 	.word	0x20000965
 8017810:	20000966 	.word	0x20000966
 8017814:	20000967 	.word	0x20000967

08017818 <Main_screen_func>:

uint16_t view_tim=0;
uint8_t view=0;

void Main_screen_func(void)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	af00      	add	r7, sp, #0
	if(view==1)
 801781c:	4b94      	ldr	r3, [pc, #592]	; (8017a70 <Main_screen_func+0x258>)
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	2b01      	cmp	r3, #1
 8017822:	f040 8123 	bne.w	8017a6c <Main_screen_func+0x254>
	{
		RTC_view();
 8017826:	f000 f99b 	bl	8017b60 <RTC_view>
		view=0;
 801782a:	4b91      	ldr	r3, [pc, #580]	; (8017a70 <Main_screen_func+0x258>)
 801782c:	2200      	movs	r2, #0
 801782e:	701a      	strb	r2, [r3, #0]

		// Отображение давления
		u8g2_SetFont(&u8g2, u8g2_font_inr30_mn);
 8017830:	4990      	ldr	r1, [pc, #576]	; (8017a74 <Main_screen_func+0x25c>)
 8017832:	4891      	ldr	r0, [pc, #580]	; (8017a78 <Main_screen_func+0x260>)
 8017834:	f7fe f946 	bl	8015ac4 <u8g2_SetFont>
		if(Pressure<10.0) sprintf(RAM,"%+.5f", Pressure);
 8017838:	4b90      	ldr	r3, [pc, #576]	; (8017a7c <Main_screen_func+0x264>)
 801783a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801783e:	f04f 0200 	mov.w	r2, #0
 8017842:	4b8f      	ldr	r3, [pc, #572]	; (8017a80 <Main_screen_func+0x268>)
 8017844:	f7e9 f95a 	bl	8000afc <__aeabi_dcmplt>
 8017848:	4603      	mov	r3, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d007      	beq.n	801785e <Main_screen_func+0x46>
 801784e:	4b8b      	ldr	r3, [pc, #556]	; (8017a7c <Main_screen_func+0x264>)
 8017850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017854:	498b      	ldr	r1, [pc, #556]	; (8017a84 <Main_screen_func+0x26c>)
 8017856:	488c      	ldr	r0, [pc, #560]	; (8017a88 <Main_screen_func+0x270>)
 8017858:	f006 faf2 	bl	801de40 <siprintf>
 801785c:	e019      	b.n	8017892 <Main_screen_func+0x7a>
		else if(Pressure<100.0) sprintf(RAM,"%+.4f", Pressure);
 801785e:	4b87      	ldr	r3, [pc, #540]	; (8017a7c <Main_screen_func+0x264>)
 8017860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017864:	f04f 0200 	mov.w	r2, #0
 8017868:	4b88      	ldr	r3, [pc, #544]	; (8017a8c <Main_screen_func+0x274>)
 801786a:	f7e9 f947 	bl	8000afc <__aeabi_dcmplt>
 801786e:	4603      	mov	r3, r0
 8017870:	2b00      	cmp	r3, #0
 8017872:	d007      	beq.n	8017884 <Main_screen_func+0x6c>
 8017874:	4b81      	ldr	r3, [pc, #516]	; (8017a7c <Main_screen_func+0x264>)
 8017876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787a:	4985      	ldr	r1, [pc, #532]	; (8017a90 <Main_screen_func+0x278>)
 801787c:	4882      	ldr	r0, [pc, #520]	; (8017a88 <Main_screen_func+0x270>)
 801787e:	f006 fadf 	bl	801de40 <siprintf>
 8017882:	e006      	b.n	8017892 <Main_screen_func+0x7a>
		else sprintf(RAM,"%+.3f", Pressure);
 8017884:	4b7d      	ldr	r3, [pc, #500]	; (8017a7c <Main_screen_func+0x264>)
 8017886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801788a:	4982      	ldr	r1, [pc, #520]	; (8017a94 <Main_screen_func+0x27c>)
 801788c:	487e      	ldr	r0, [pc, #504]	; (8017a88 <Main_screen_func+0x270>)
 801788e:	f006 fad7 	bl	801de40 <siprintf>
		u8g2_DrawUTF8(&u8g2, 0, 70, RAM);
 8017892:	4b7d      	ldr	r3, [pc, #500]	; (8017a88 <Main_screen_func+0x270>)
 8017894:	2246      	movs	r2, #70	; 0x46
 8017896:	2100      	movs	r1, #0
 8017898:	4877      	ldr	r0, [pc, #476]	; (8017a78 <Main_screen_func+0x260>)
 801789a:	f7fe f871 	bl	8015980 <u8g2_DrawUTF8>
		u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801789e:	497e      	ldr	r1, [pc, #504]	; (8017a98 <Main_screen_func+0x280>)
 80178a0:	4875      	ldr	r0, [pc, #468]	; (8017a78 <Main_screen_func+0x260>)
 80178a2:	f7fe f90f 	bl	8015ac4 <u8g2_SetFont>
		u8g2_DrawUTF8(&u8g2, 200, 70, UNITS_NAME[Units]);
 80178a6:	4b7d      	ldr	r3, [pc, #500]	; (8017a9c <Main_screen_func+0x284>)
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	461a      	mov	r2, r3
 80178ac:	4b7c      	ldr	r3, [pc, #496]	; (8017aa0 <Main_screen_func+0x288>)
 80178ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178b2:	2246      	movs	r2, #70	; 0x46
 80178b4:	21c8      	movs	r1, #200	; 0xc8
 80178b6:	4870      	ldr	r0, [pc, #448]	; (8017a78 <Main_screen_func+0x260>)
 80178b8:	f7fe f862 	bl	8015980 <u8g2_DrawUTF8>

		// Отображение електрических величин
		u8g2_SetFont(&u8g2, u8g2_font_inr27_t_cyrillic);
 80178bc:	4979      	ldr	r1, [pc, #484]	; (8017aa4 <Main_screen_func+0x28c>)
 80178be:	486e      	ldr	r0, [pc, #440]	; (8017a78 <Main_screen_func+0x260>)
 80178c0:	f7fe f900 	bl	8015ac4 <u8g2_SetFont>
		switch(E_fun)
 80178c4:	4b78      	ldr	r3, [pc, #480]	; (8017aa8 <Main_screen_func+0x290>)
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	2b02      	cmp	r3, #2
 80178ca:	d007      	beq.n	80178dc <Main_screen_func+0xc4>
 80178cc:	2b02      	cmp	r3, #2
 80178ce:	f300 80c7 	bgt.w	8017a60 <Main_screen_func+0x248>
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d014      	beq.n	8017900 <Main_screen_func+0xe8>
 80178d6:	2b01      	cmp	r3, #1
 80178d8:	d06a      	beq.n	80179b0 <Main_screen_func+0x198>
 80178da:	e0c1      	b.n	8017a60 <Main_screen_func+0x248>
		{
			// Контакты
			case SW:
				if(SW_state==0)u8g2_DrawUTF8(&u8g2, 25, 130, "РАЗОМКНУТ");
 80178dc:	4b73      	ldr	r3, [pc, #460]	; (8017aac <Main_screen_func+0x294>)
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d106      	bne.n	80178f2 <Main_screen_func+0xda>
 80178e4:	4b72      	ldr	r3, [pc, #456]	; (8017ab0 <Main_screen_func+0x298>)
 80178e6:	2282      	movs	r2, #130	; 0x82
 80178e8:	2119      	movs	r1, #25
 80178ea:	4863      	ldr	r0, [pc, #396]	; (8017a78 <Main_screen_func+0x260>)
 80178ec:	f7fe f848 	bl	8015980 <u8g2_DrawUTF8>
				else u8g2_DrawUTF8(&u8g2, 25, 130, " ЗАМКНУТ ");
			break;
 80178f0:	e0b6      	b.n	8017a60 <Main_screen_func+0x248>
				else u8g2_DrawUTF8(&u8g2, 25, 130, " ЗАМКНУТ ");
 80178f2:	4b70      	ldr	r3, [pc, #448]	; (8017ab4 <Main_screen_func+0x29c>)
 80178f4:	2282      	movs	r2, #130	; 0x82
 80178f6:	2119      	movs	r1, #25
 80178f8:	485f      	ldr	r0, [pc, #380]	; (8017a78 <Main_screen_func+0x260>)
 80178fa:	f7fe f841 	bl	8015980 <u8g2_DrawUTF8>
			break;
 80178fe:	e0af      	b.n	8017a60 <Main_screen_func+0x248>

			// Ток
			case mA:
				if(Pressure<10.0) sprintf(RAM,"%+.6f", current_4_20mA-Current_zero);
 8017900:	4b5e      	ldr	r3, [pc, #376]	; (8017a7c <Main_screen_func+0x264>)
 8017902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017906:	f04f 0200 	mov.w	r2, #0
 801790a:	4b5d      	ldr	r3, [pc, #372]	; (8017a80 <Main_screen_func+0x268>)
 801790c:	f7e9 f8f6 	bl	8000afc <__aeabi_dcmplt>
 8017910:	4603      	mov	r3, r0
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00e      	beq.n	8017934 <Main_screen_func+0x11c>
 8017916:	4b68      	ldr	r3, [pc, #416]	; (8017ab8 <Main_screen_func+0x2a0>)
 8017918:	e9d3 0100 	ldrd	r0, r1, [r3]
 801791c:	4b67      	ldr	r3, [pc, #412]	; (8017abc <Main_screen_func+0x2a4>)
 801791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017922:	f7e8 fcc1 	bl	80002a8 <__aeabi_dsub>
 8017926:	4602      	mov	r2, r0
 8017928:	460b      	mov	r3, r1
 801792a:	4965      	ldr	r1, [pc, #404]	; (8017ac0 <Main_screen_func+0x2a8>)
 801792c:	4856      	ldr	r0, [pc, #344]	; (8017a88 <Main_screen_func+0x270>)
 801792e:	f006 fa87 	bl	801de40 <siprintf>
 8017932:	e027      	b.n	8017984 <Main_screen_func+0x16c>
				else if(Pressure<100.0) sprintf(RAM,"%+.5f", current_4_20mA-Current_zero);
 8017934:	4b51      	ldr	r3, [pc, #324]	; (8017a7c <Main_screen_func+0x264>)
 8017936:	e9d3 0100 	ldrd	r0, r1, [r3]
 801793a:	f04f 0200 	mov.w	r2, #0
 801793e:	4b53      	ldr	r3, [pc, #332]	; (8017a8c <Main_screen_func+0x274>)
 8017940:	f7e9 f8dc 	bl	8000afc <__aeabi_dcmplt>
 8017944:	4603      	mov	r3, r0
 8017946:	2b00      	cmp	r3, #0
 8017948:	d00e      	beq.n	8017968 <Main_screen_func+0x150>
 801794a:	4b5b      	ldr	r3, [pc, #364]	; (8017ab8 <Main_screen_func+0x2a0>)
 801794c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017950:	4b5a      	ldr	r3, [pc, #360]	; (8017abc <Main_screen_func+0x2a4>)
 8017952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017956:	f7e8 fca7 	bl	80002a8 <__aeabi_dsub>
 801795a:	4602      	mov	r2, r0
 801795c:	460b      	mov	r3, r1
 801795e:	4949      	ldr	r1, [pc, #292]	; (8017a84 <Main_screen_func+0x26c>)
 8017960:	4849      	ldr	r0, [pc, #292]	; (8017a88 <Main_screen_func+0x270>)
 8017962:	f006 fa6d 	bl	801de40 <siprintf>
 8017966:	e00d      	b.n	8017984 <Main_screen_func+0x16c>
				else sprintf(RAM,"%+.4f", current_4_20mA-Current_zero);
 8017968:	4b53      	ldr	r3, [pc, #332]	; (8017ab8 <Main_screen_func+0x2a0>)
 801796a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801796e:	4b53      	ldr	r3, [pc, #332]	; (8017abc <Main_screen_func+0x2a4>)
 8017970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017974:	f7e8 fc98 	bl	80002a8 <__aeabi_dsub>
 8017978:	4602      	mov	r2, r0
 801797a:	460b      	mov	r3, r1
 801797c:	4944      	ldr	r1, [pc, #272]	; (8017a90 <Main_screen_func+0x278>)
 801797e:	4842      	ldr	r0, [pc, #264]	; (8017a88 <Main_screen_func+0x270>)
 8017980:	f006 fa5e 	bl	801de40 <siprintf>
				u8g2_DrawUTF8(&u8g2, 0, 130, RAM);
 8017984:	4b40      	ldr	r3, [pc, #256]	; (8017a88 <Main_screen_func+0x270>)
 8017986:	2282      	movs	r2, #130	; 0x82
 8017988:	2100      	movs	r1, #0
 801798a:	483b      	ldr	r0, [pc, #236]	; (8017a78 <Main_screen_func+0x260>)
 801798c:	f7fd fff8 	bl	8015980 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017990:	4941      	ldr	r1, [pc, #260]	; (8017a98 <Main_screen_func+0x280>)
 8017992:	4839      	ldr	r0, [pc, #228]	; (8017a78 <Main_screen_func+0x260>)
 8017994:	f7fe f896 	bl	8015ac4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 200, 130, E_UNITS_NAME[E_fun]);
 8017998:	4b43      	ldr	r3, [pc, #268]	; (8017aa8 <Main_screen_func+0x290>)
 801799a:	781b      	ldrb	r3, [r3, #0]
 801799c:	461a      	mov	r2, r3
 801799e:	4b49      	ldr	r3, [pc, #292]	; (8017ac4 <Main_screen_func+0x2ac>)
 80179a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179a4:	2282      	movs	r2, #130	; 0x82
 80179a6:	21c8      	movs	r1, #200	; 0xc8
 80179a8:	4833      	ldr	r0, [pc, #204]	; (8017a78 <Main_screen_func+0x260>)
 80179aa:	f7fd ffe9 	bl	8015980 <u8g2_DrawUTF8>
			break;
 80179ae:	e057      	b.n	8017a60 <Main_screen_func+0x248>

			// Напряжение
			case V:
				if(Pressure<10.0) sprintf(RAM,"%+.6f", voltage_measure-Voltage_zero);
 80179b0:	4b32      	ldr	r3, [pc, #200]	; (8017a7c <Main_screen_func+0x264>)
 80179b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179b6:	f04f 0200 	mov.w	r2, #0
 80179ba:	4b31      	ldr	r3, [pc, #196]	; (8017a80 <Main_screen_func+0x268>)
 80179bc:	f7e9 f89e 	bl	8000afc <__aeabi_dcmplt>
 80179c0:	4603      	mov	r3, r0
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d00e      	beq.n	80179e4 <Main_screen_func+0x1cc>
 80179c6:	4b40      	ldr	r3, [pc, #256]	; (8017ac8 <Main_screen_func+0x2b0>)
 80179c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179cc:	4b3f      	ldr	r3, [pc, #252]	; (8017acc <Main_screen_func+0x2b4>)
 80179ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179d2:	f7e8 fc69 	bl	80002a8 <__aeabi_dsub>
 80179d6:	4602      	mov	r2, r0
 80179d8:	460b      	mov	r3, r1
 80179da:	4939      	ldr	r1, [pc, #228]	; (8017ac0 <Main_screen_func+0x2a8>)
 80179dc:	482a      	ldr	r0, [pc, #168]	; (8017a88 <Main_screen_func+0x270>)
 80179de:	f006 fa2f 	bl	801de40 <siprintf>
 80179e2:	e027      	b.n	8017a34 <Main_screen_func+0x21c>
				else if(Pressure<100.0) sprintf(RAM,"%+.5f", voltage_measure-Voltage_zero);
 80179e4:	4b25      	ldr	r3, [pc, #148]	; (8017a7c <Main_screen_func+0x264>)
 80179e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179ea:	f04f 0200 	mov.w	r2, #0
 80179ee:	4b27      	ldr	r3, [pc, #156]	; (8017a8c <Main_screen_func+0x274>)
 80179f0:	f7e9 f884 	bl	8000afc <__aeabi_dcmplt>
 80179f4:	4603      	mov	r3, r0
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d00e      	beq.n	8017a18 <Main_screen_func+0x200>
 80179fa:	4b33      	ldr	r3, [pc, #204]	; (8017ac8 <Main_screen_func+0x2b0>)
 80179fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a00:	4b32      	ldr	r3, [pc, #200]	; (8017acc <Main_screen_func+0x2b4>)
 8017a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a06:	f7e8 fc4f 	bl	80002a8 <__aeabi_dsub>
 8017a0a:	4602      	mov	r2, r0
 8017a0c:	460b      	mov	r3, r1
 8017a0e:	491d      	ldr	r1, [pc, #116]	; (8017a84 <Main_screen_func+0x26c>)
 8017a10:	481d      	ldr	r0, [pc, #116]	; (8017a88 <Main_screen_func+0x270>)
 8017a12:	f006 fa15 	bl	801de40 <siprintf>
 8017a16:	e00d      	b.n	8017a34 <Main_screen_func+0x21c>
				else sprintf(RAM,"%+.4f", voltage_measure-Voltage_zero);
 8017a18:	4b2b      	ldr	r3, [pc, #172]	; (8017ac8 <Main_screen_func+0x2b0>)
 8017a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a1e:	4b2b      	ldr	r3, [pc, #172]	; (8017acc <Main_screen_func+0x2b4>)
 8017a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a24:	f7e8 fc40 	bl	80002a8 <__aeabi_dsub>
 8017a28:	4602      	mov	r2, r0
 8017a2a:	460b      	mov	r3, r1
 8017a2c:	4918      	ldr	r1, [pc, #96]	; (8017a90 <Main_screen_func+0x278>)
 8017a2e:	4816      	ldr	r0, [pc, #88]	; (8017a88 <Main_screen_func+0x270>)
 8017a30:	f006 fa06 	bl	801de40 <siprintf>
				u8g2_DrawUTF8(&u8g2, 0, 130, RAM);
 8017a34:	4b14      	ldr	r3, [pc, #80]	; (8017a88 <Main_screen_func+0x270>)
 8017a36:	2282      	movs	r2, #130	; 0x82
 8017a38:	2100      	movs	r1, #0
 8017a3a:	480f      	ldr	r0, [pc, #60]	; (8017a78 <Main_screen_func+0x260>)
 8017a3c:	f7fd ffa0 	bl	8015980 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017a40:	4915      	ldr	r1, [pc, #84]	; (8017a98 <Main_screen_func+0x280>)
 8017a42:	480d      	ldr	r0, [pc, #52]	; (8017a78 <Main_screen_func+0x260>)
 8017a44:	f7fe f83e 	bl	8015ac4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 200, 130, E_UNITS_NAME[E_fun]);
 8017a48:	4b17      	ldr	r3, [pc, #92]	; (8017aa8 <Main_screen_func+0x290>)
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	461a      	mov	r2, r3
 8017a4e:	4b1d      	ldr	r3, [pc, #116]	; (8017ac4 <Main_screen_func+0x2ac>)
 8017a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a54:	2282      	movs	r2, #130	; 0x82
 8017a56:	21c8      	movs	r1, #200	; 0xc8
 8017a58:	4807      	ldr	r0, [pc, #28]	; (8017a78 <Main_screen_func+0x260>)
 8017a5a:	f7fd ff91 	bl	8015980 <u8g2_DrawUTF8>
			break;
 8017a5e:	bf00      	nop
		}

		u8g2_SendBuffer(&u8g2);
 8017a60:	4805      	ldr	r0, [pc, #20]	; (8017a78 <Main_screen_func+0x260>)
 8017a62:	f7fd f9f2 	bl	8014e4a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8017a66:	4804      	ldr	r0, [pc, #16]	; (8017a78 <Main_screen_func+0x260>)
 8017a68:	f7fd f97c 	bl	8014d64 <u8g2_ClearBuffer>
	}
}
 8017a6c:	bf00      	nop
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	20001d10 	.word	0x20001d10
 8017a74:	0802ac94 	.word	0x0802ac94
 8017a78:	20002090 	.word	0x20002090
 8017a7c:	20002360 	.word	0x20002360
 8017a80:	40240000 	.word	0x40240000
 8017a84:	0802245c 	.word	0x0802245c
 8017a88:	20002150 	.word	0x20002150
 8017a8c:	40590000 	.word	0x40590000
 8017a90:	08022464 	.word	0x08022464
 8017a94:	0802246c 	.word	0x0802246c
 8017a98:	08027144 	.word	0x08027144
 8017a9c:	200000ba 	.word	0x200000ba
 8017aa0:	20000164 	.word	0x20000164
 8017aa4:	08028d70 	.word	0x08028d70
 8017aa8:	20000960 	.word	0x20000960
 8017aac:	20000961 	.word	0x20000961
 8017ab0:	08022474 	.word	0x08022474
 8017ab4:	08022488 	.word	0x08022488
 8017ab8:	20002388 	.word	0x20002388
 8017abc:	20000940 	.word	0x20000940
 8017ac0:	0802249c 	.word	0x0802249c
 8017ac4:	20000190 	.word	0x20000190
 8017ac8:	20002240 	.word	0x20002240
 8017acc:	20000938 	.word	0x20000938

08017ad0 <Main_screen_S9>:



// Меню
void Main_screen_S9(void)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	af00      	add	r7, sp, #0
	if(screen=Main_screen)
 8017ad4:	4b08      	ldr	r3, [pc, #32]	; (8017af8 <Main_screen_S9+0x28>)
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	701a      	strb	r2, [r3, #0]
	{
		screen=Option_screen;
 8017ada:	4b07      	ldr	r3, [pc, #28]	; (8017af8 <Main_screen_S9+0x28>)
 8017adc:	2204      	movs	r2, #4
 8017ade:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8017ae0:	4b06      	ldr	r3, [pc, #24]	; (8017afc <Main_screen_S9+0x2c>)
 8017ae2:	22ff      	movs	r2, #255	; 0xff
 8017ae4:	701a      	strb	r2, [r3, #0]
		Menu_num=0;
 8017ae6:	4b06      	ldr	r3, [pc, #24]	; (8017b00 <Main_screen_S9+0x30>)
 8017ae8:	2200      	movs	r2, #0
 8017aea:	701a      	strb	r2, [r3, #0]
	}
}
 8017aec:	bf00      	nop
 8017aee:	46bd      	mov	sp, r7
 8017af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af4:	4770      	bx	lr
 8017af6:	bf00      	nop
 8017af8:	2000004c 	.word	0x2000004c
 8017afc:	20000458 	.word	0x20000458
 8017b00:	20000459 	.word	0x20000459

08017b04 <Viewer_timer>:


// Таймер для частоты обновления экрана с показаниями
void Viewer_timer(void)
{
 8017b04:	b480      	push	{r7}
 8017b06:	af00      	add	r7, sp, #0
	if(++view_tim==300){view=1;view_tim=0;}
 8017b08:	4b0a      	ldr	r3, [pc, #40]	; (8017b34 <Viewer_timer+0x30>)
 8017b0a:	881b      	ldrh	r3, [r3, #0]
 8017b0c:	3301      	adds	r3, #1
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	4b08      	ldr	r3, [pc, #32]	; (8017b34 <Viewer_timer+0x30>)
 8017b12:	801a      	strh	r2, [r3, #0]
 8017b14:	4b07      	ldr	r3, [pc, #28]	; (8017b34 <Viewer_timer+0x30>)
 8017b16:	881b      	ldrh	r3, [r3, #0]
 8017b18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017b1c:	d105      	bne.n	8017b2a <Viewer_timer+0x26>
 8017b1e:	4b06      	ldr	r3, [pc, #24]	; (8017b38 <Viewer_timer+0x34>)
 8017b20:	2201      	movs	r2, #1
 8017b22:	701a      	strb	r2, [r3, #0]
 8017b24:	4b03      	ldr	r3, [pc, #12]	; (8017b34 <Viewer_timer+0x30>)
 8017b26:	2200      	movs	r2, #0
 8017b28:	801a      	strh	r2, [r3, #0]
}
 8017b2a:	bf00      	nop
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b32:	4770      	bx	lr
 8017b34:	20001d0e 	.word	0x20001d0e
 8017b38:	20001d10 	.word	0x20001d10

08017b3c <Battery_process>:
const uint8_t eltara_icon[]={0,16,0,16, 0x3F, 0xFC, 0x40, 0x02, 0x80, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x86, 0x01, 0x86, 0x01, 0x87, 0x81, 0x87, 0x81, 0x86, 0x01, 0x86, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x80, 0x01, 0x40, 0x02, 0x3F, 0xFC};



void Battery_process(void)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*) &Vbat_uint,128);
 8017b40:	2280      	movs	r2, #128	; 0x80
 8017b42:	4904      	ldr	r1, [pc, #16]	; (8017b54 <Battery_process+0x18>)
 8017b44:	4804      	ldr	r0, [pc, #16]	; (8017b58 <Battery_process+0x1c>)
 8017b46:	f7f0 fc91 	bl	800846c <HAL_ADC_Start_DMA>
	sleep(100);
 8017b4a:	2064      	movs	r0, #100	; 0x64
 8017b4c:	f7eb fa0a 	bl	8002f64 <sleep>
}
 8017b50:	bf00      	nop
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	20002248 	.word	0x20002248
 8017b58:	20007b94 	.word	0x20007b94
 8017b5c:	00000000 	.word	0x00000000

08017b60 <RTC_view>:



void RTC_view(void)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b086      	sub	sp, #24
 8017b64:	af02      	add	r7, sp, #8
	uint8_t battery_percent, i;
	uint32_t bat_sum=0;
 8017b66:	2300      	movs	r3, #0
 8017b68:	60bb      	str	r3, [r7, #8]
	float battery_volt;

	// date & time
	u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017b6a:	4967      	ldr	r1, [pc, #412]	; (8017d08 <RTC_view+0x1a8>)
 8017b6c:	4867      	ldr	r0, [pc, #412]	; (8017d0c <RTC_view+0x1ac>)
 8017b6e:	f7fd ffa9 	bl	8015ac4 <u8g2_SetFont>
	sprintf(RAM,"%02d.%02d.%02d", day, month, year);
 8017b72:	4b67      	ldr	r3, [pc, #412]	; (8017d10 <RTC_view+0x1b0>)
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	461a      	mov	r2, r3
 8017b78:	4b66      	ldr	r3, [pc, #408]	; (8017d14 <RTC_view+0x1b4>)
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	4619      	mov	r1, r3
 8017b7e:	4b66      	ldr	r3, [pc, #408]	; (8017d18 <RTC_view+0x1b8>)
 8017b80:	781b      	ldrb	r3, [r3, #0]
 8017b82:	9300      	str	r3, [sp, #0]
 8017b84:	460b      	mov	r3, r1
 8017b86:	4965      	ldr	r1, [pc, #404]	; (8017d1c <RTC_view+0x1bc>)
 8017b88:	4865      	ldr	r0, [pc, #404]	; (8017d20 <RTC_view+0x1c0>)
 8017b8a:	f006 f959 	bl	801de40 <siprintf>
	u8g2_DrawUTF8(&u8g2, 0, 12, RAM);
 8017b8e:	4b64      	ldr	r3, [pc, #400]	; (8017d20 <RTC_view+0x1c0>)
 8017b90:	220c      	movs	r2, #12
 8017b92:	2100      	movs	r1, #0
 8017b94:	485d      	ldr	r0, [pc, #372]	; (8017d0c <RTC_view+0x1ac>)
 8017b96:	f7fd fef3 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:%02d:%02d", hour, minute, sec);
 8017b9a:	4b62      	ldr	r3, [pc, #392]	; (8017d24 <RTC_view+0x1c4>)
 8017b9c:	781b      	ldrb	r3, [r3, #0]
 8017b9e:	461a      	mov	r2, r3
 8017ba0:	4b61      	ldr	r3, [pc, #388]	; (8017d28 <RTC_view+0x1c8>)
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	4619      	mov	r1, r3
 8017ba6:	4b61      	ldr	r3, [pc, #388]	; (8017d2c <RTC_view+0x1cc>)
 8017ba8:	781b      	ldrb	r3, [r3, #0]
 8017baa:	9300      	str	r3, [sp, #0]
 8017bac:	460b      	mov	r3, r1
 8017bae:	4960      	ldr	r1, [pc, #384]	; (8017d30 <RTC_view+0x1d0>)
 8017bb0:	485b      	ldr	r0, [pc, #364]	; (8017d20 <RTC_view+0x1c0>)
 8017bb2:	f006 f945 	bl	801de40 <siprintf>
	u8g2_DrawUTF8(&u8g2, 81, 12, RAM);
 8017bb6:	4b5a      	ldr	r3, [pc, #360]	; (8017d20 <RTC_view+0x1c0>)
 8017bb8:	220c      	movs	r2, #12
 8017bba:	2151      	movs	r1, #81	; 0x51
 8017bbc:	4853      	ldr	r0, [pc, #332]	; (8017d0c <RTC_view+0x1ac>)
 8017bbe:	f7fd fedf 	bl	8015980 <u8g2_DrawUTF8>

	// Tarring
	if(Pressure_zero!=0)DrawImage(tara_icon, 194, 2, 1);
 8017bc2:	4b5c      	ldr	r3, [pc, #368]	; (8017d34 <RTC_view+0x1d4>)
 8017bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017bc8:	f04f 0200 	mov.w	r2, #0
 8017bcc:	f04f 0300 	mov.w	r3, #0
 8017bd0:	f7e8 ff8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d105      	bne.n	8017be6 <RTC_view+0x86>
 8017bda:	2301      	movs	r3, #1
 8017bdc:	2202      	movs	r2, #2
 8017bde:	21c2      	movs	r1, #194	; 0xc2
 8017be0:	4855      	ldr	r0, [pc, #340]	; (8017d38 <RTC_view+0x1d8>)
 8017be2:	f7ea fe87 	bl	80028f4 <DrawImage>

	//El tarring
	switch(E_fun)
 8017be6:	4b55      	ldr	r3, [pc, #340]	; (8017d3c <RTC_view+0x1dc>)
 8017be8:	781b      	ldrb	r3, [r3, #0]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d002      	beq.n	8017bf4 <RTC_view+0x94>
 8017bee:	2b01      	cmp	r3, #1
 8017bf0:	d014      	beq.n	8017c1c <RTC_view+0xbc>
 8017bf2:	e027      	b.n	8017c44 <RTC_view+0xe4>
	{
		case mA: if(Current_zero!=0)DrawImage(eltara_icon, 176, 2, 1); break;
 8017bf4:	4b52      	ldr	r3, [pc, #328]	; (8017d40 <RTC_view+0x1e0>)
 8017bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017bfa:	f04f 0200 	mov.w	r2, #0
 8017bfe:	f04f 0300 	mov.w	r3, #0
 8017c02:	f7e8 ff71 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c06:	4603      	mov	r3, r0
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d000      	beq.n	8017c0e <RTC_view+0xae>
 8017c0c:	e01a      	b.n	8017c44 <RTC_view+0xe4>
 8017c0e:	2301      	movs	r3, #1
 8017c10:	2202      	movs	r2, #2
 8017c12:	21b0      	movs	r1, #176	; 0xb0
 8017c14:	484b      	ldr	r0, [pc, #300]	; (8017d44 <RTC_view+0x1e4>)
 8017c16:	f7ea fe6d 	bl	80028f4 <DrawImage>
 8017c1a:	e013      	b.n	8017c44 <RTC_view+0xe4>
		case V: if(Voltage_zero!=0)DrawImage(eltara_icon, 176, 2, 1); break;
 8017c1c:	4b4a      	ldr	r3, [pc, #296]	; (8017d48 <RTC_view+0x1e8>)
 8017c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017c22:	f04f 0200 	mov.w	r2, #0
 8017c26:	f04f 0300 	mov.w	r3, #0
 8017c2a:	f7e8 ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d000      	beq.n	8017c36 <RTC_view+0xd6>
 8017c34:	e005      	b.n	8017c42 <RTC_view+0xe2>
 8017c36:	2301      	movs	r3, #1
 8017c38:	2202      	movs	r2, #2
 8017c3a:	21b0      	movs	r1, #176	; 0xb0
 8017c3c:	4841      	ldr	r0, [pc, #260]	; (8017d44 <RTC_view+0x1e4>)
 8017c3e:	f7ea fe59 	bl	80028f4 <DrawImage>
 8017c42:	bf00      	nop
	}

	// Battery
	for(i=0;i<128;i++)bat_sum+=Vbat_uint[i];
 8017c44:	2300      	movs	r3, #0
 8017c46:	73fb      	strb	r3, [r7, #15]
 8017c48:	e00a      	b.n	8017c60 <RTC_view+0x100>
 8017c4a:	7bfb      	ldrb	r3, [r7, #15]
 8017c4c:	4a3f      	ldr	r2, [pc, #252]	; (8017d4c <RTC_view+0x1ec>)
 8017c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017c52:	461a      	mov	r2, r3
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	4413      	add	r3, r2
 8017c58:	60bb      	str	r3, [r7, #8]
 8017c5a:	7bfb      	ldrb	r3, [r7, #15]
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	73fb      	strb	r3, [r7, #15]
 8017c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	daf0      	bge.n	8017c4a <RTC_view+0xea>
	battery_volt = 0.0074258*(bat_sum>>7);
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	09db      	lsrs	r3, r3, #7
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7e8 fc59 	bl	8000524 <__aeabi_ui2d>
 8017c72:	a321      	add	r3, pc, #132	; (adr r3, 8017cf8 <RTC_view+0x198>)
 8017c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c78:	f7e8 fcce 	bl	8000618 <__aeabi_dmul>
 8017c7c:	4602      	mov	r2, r0
 8017c7e:	460b      	mov	r3, r1
 8017c80:	4610      	mov	r0, r2
 8017c82:	4619      	mov	r1, r3
 8017c84:	f7e8 ffc0 	bl	8000c08 <__aeabi_d2f>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	607b      	str	r3, [r7, #4]
	DrawImage(bat_icon, 216, 4, 1);
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	2204      	movs	r2, #4
 8017c90:	21d8      	movs	r1, #216	; 0xd8
 8017c92:	482f      	ldr	r0, [pc, #188]	; (8017d50 <RTC_view+0x1f0>)
 8017c94:	f7ea fe2e 	bl	80028f4 <DrawImage>
	battery_percent = (uint8_t)((battery_volt-2.9)*100);
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f7e8 fc65 	bl	8000568 <__aeabi_f2d>
 8017c9e:	a318      	add	r3, pc, #96	; (adr r3, 8017d00 <RTC_view+0x1a0>)
 8017ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ca4:	f7e8 fb00 	bl	80002a8 <__aeabi_dsub>
 8017ca8:	4602      	mov	r2, r0
 8017caa:	460b      	mov	r3, r1
 8017cac:	4610      	mov	r0, r2
 8017cae:	4619      	mov	r1, r3
 8017cb0:	f04f 0200 	mov.w	r2, #0
 8017cb4:	4b27      	ldr	r3, [pc, #156]	; (8017d54 <RTC_view+0x1f4>)
 8017cb6:	f7e8 fcaf 	bl	8000618 <__aeabi_dmul>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	4610      	mov	r0, r2
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	f7e8 ff81 	bl	8000bc8 <__aeabi_d2uiz>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	70fb      	strb	r3, [r7, #3]

	u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8017cca:	4923      	ldr	r1, [pc, #140]	; (8017d58 <RTC_view+0x1f8>)
 8017ccc:	480f      	ldr	r0, [pc, #60]	; (8017d0c <RTC_view+0x1ac>)
 8017cce:	f7fd fef9 	bl	8015ac4 <u8g2_SetFont>
	sprintf(RAM,"%.2f", battery_volt);
 8017cd2:	6878      	ldr	r0, [r7, #4]
 8017cd4:	f7e8 fc48 	bl	8000568 <__aeabi_f2d>
 8017cd8:	4602      	mov	r2, r0
 8017cda:	460b      	mov	r3, r1
 8017cdc:	491f      	ldr	r1, [pc, #124]	; (8017d5c <RTC_view+0x1fc>)
 8017cde:	4810      	ldr	r0, [pc, #64]	; (8017d20 <RTC_view+0x1c0>)
 8017ce0:	f006 f8ae 	bl	801de40 <siprintf>
	//sprintf(RAM,"%d", battery_percent);
	u8g2_DrawUTF8(&u8g2, 219, 13, RAM);
 8017ce4:	4b0e      	ldr	r3, [pc, #56]	; (8017d20 <RTC_view+0x1c0>)
 8017ce6:	220d      	movs	r2, #13
 8017ce8:	21db      	movs	r1, #219	; 0xdb
 8017cea:	4808      	ldr	r0, [pc, #32]	; (8017d0c <RTC_view+0x1ac>)
 8017cec:	f7fd fe48 	bl	8015980 <u8g2_DrawUTF8>
}
 8017cf0:	bf00      	nop
 8017cf2:	3710      	adds	r7, #16
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	02589fd4 	.word	0x02589fd4
 8017cfc:	3f7e6a84 	.word	0x3f7e6a84
 8017d00:	33333333 	.word	0x33333333
 8017d04:	40073333 	.word	0x40073333
 8017d08:	08025b18 	.word	0x08025b18
 8017d0c:	20002090 	.word	0x20002090
 8017d10:	20008818 	.word	0x20008818
 8017d14:	2000881f 	.word	0x2000881f
 8017d18:	20008820 	.word	0x20008820
 8017d1c:	080224a4 	.word	0x080224a4
 8017d20:	20002150 	.word	0x20002150
 8017d24:	2000881b 	.word	0x2000881b
 8017d28:	20008822 	.word	0x20008822
 8017d2c:	2000881c 	.word	0x2000881c
 8017d30:	080224b4 	.word	0x080224b4
 8017d34:	20000930 	.word	0x20000930
 8017d38:	0802b310 	.word	0x0802b310
 8017d3c:	20000960 	.word	0x20000960
 8017d40:	20000940 	.word	0x20000940
 8017d44:	0802b334 	.word	0x0802b334
 8017d48:	20000938 	.word	0x20000938
 8017d4c:	20002248 	.word	0x20002248
 8017d50:	0802b2e8 	.word	0x0802b2e8
 8017d54:	40590000 	.word	0x40590000
 8017d58:	08023ea4 	.word	0x08023ea4
 8017d5c:	080224c4 	.word	0x080224c4

08017d60 <RTC_process>:


void RTC_process(void)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b086      	sub	sp, #24
 8017d64:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8017d66:	1d3b      	adds	r3, r7, #4
 8017d68:	2200      	movs	r2, #0
 8017d6a:	601a      	str	r2, [r3, #0]
 8017d6c:	605a      	str	r2, [r3, #4]
 8017d6e:	609a      	str	r2, [r3, #8]
 8017d70:	60da      	str	r2, [r3, #12]
 8017d72:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017d74:	2300      	movs	r3, #0
 8017d76:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8017d78:	463b      	mov	r3, r7
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	4811      	ldr	r0, [pc, #68]	; (8017dc4 <RTC_process+0x64>)
 8017d80:	f7f5 fe64 	bl	800da4c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8017d84:	1d3b      	adds	r3, r7, #4
 8017d86:	2200      	movs	r2, #0
 8017d88:	4619      	mov	r1, r3
 8017d8a:	480e      	ldr	r0, [pc, #56]	; (8017dc4 <RTC_process+0x64>)
 8017d8c:	f7f5 fd7b 	bl	800d886 <HAL_RTC_GetTime>

	year=sDate.Year;
 8017d90:	78fa      	ldrb	r2, [r7, #3]
 8017d92:	4b0d      	ldr	r3, [pc, #52]	; (8017dc8 <RTC_process+0x68>)
 8017d94:	701a      	strb	r2, [r3, #0]
	month=sDate.Month;
 8017d96:	787a      	ldrb	r2, [r7, #1]
 8017d98:	4b0c      	ldr	r3, [pc, #48]	; (8017dcc <RTC_process+0x6c>)
 8017d9a:	701a      	strb	r2, [r3, #0]
	day=sDate.Date;
 8017d9c:	78ba      	ldrb	r2, [r7, #2]
 8017d9e:	4b0c      	ldr	r3, [pc, #48]	; (8017dd0 <RTC_process+0x70>)
 8017da0:	701a      	strb	r2, [r3, #0]
	hour=sTime.Hours;
 8017da2:	793a      	ldrb	r2, [r7, #4]
 8017da4:	4b0b      	ldr	r3, [pc, #44]	; (8017dd4 <RTC_process+0x74>)
 8017da6:	701a      	strb	r2, [r3, #0]
	minute=sTime.Minutes;
 8017da8:	797a      	ldrb	r2, [r7, #5]
 8017daa:	4b0b      	ldr	r3, [pc, #44]	; (8017dd8 <RTC_process+0x78>)
 8017dac:	701a      	strb	r2, [r3, #0]
	sec=sTime.Seconds;
 8017dae:	79ba      	ldrb	r2, [r7, #6]
 8017db0:	4b0a      	ldr	r3, [pc, #40]	; (8017ddc <RTC_process+0x7c>)
 8017db2:	701a      	strb	r2, [r3, #0]

	sleep(1000);
 8017db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017db8:	f7eb f8d4 	bl	8002f64 <sleep>
}
 8017dbc:	bf00      	nop
 8017dbe:	3718      	adds	r7, #24
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}
 8017dc4:	20007918 	.word	0x20007918
 8017dc8:	20008820 	.word	0x20008820
 8017dcc:	2000881f 	.word	0x2000881f
 8017dd0:	20008818 	.word	0x20008818
 8017dd4:	2000881b 	.word	0x2000881b
 8017dd8:	20008822 	.word	0x20008822
 8017ddc:	2000881c 	.word	0x2000881c

08017de0 <RTC_set>:


void RTC_set(uint8_t rtc_year, uint8_t rtc_month, uint8_t rtc_day, uint8_t rtc_hour, uint8_t rtc_min, uint8_t rtc_sec)
{
 8017de0:	b590      	push	{r4, r7, lr}
 8017de2:	b089      	sub	sp, #36	; 0x24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	4604      	mov	r4, r0
 8017de8:	4608      	mov	r0, r1
 8017dea:	4611      	mov	r1, r2
 8017dec:	461a      	mov	r2, r3
 8017dee:	4623      	mov	r3, r4
 8017df0:	71fb      	strb	r3, [r7, #7]
 8017df2:	4603      	mov	r3, r0
 8017df4:	71bb      	strb	r3, [r7, #6]
 8017df6:	460b      	mov	r3, r1
 8017df8:	717b      	strb	r3, [r7, #5]
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8017dfe:	f107 030c 	add.w	r3, r7, #12
 8017e02:	2200      	movs	r2, #0
 8017e04:	601a      	str	r2, [r3, #0]
 8017e06:	605a      	str	r2, [r3, #4]
 8017e08:	609a      	str	r2, [r3, #8]
 8017e0a:	60da      	str	r2, [r3, #12]
 8017e0c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017e0e:	2300      	movs	r3, #0
 8017e10:	60bb      	str	r3, [r7, #8]
	HAL_RTC_DeInit(&hrtc);
 8017e12:	482b      	ldr	r0, [pc, #172]	; (8017ec0 <RTC_set+0xe0>)
 8017e14:	f7f5 fc26 	bl	800d664 <HAL_RTC_DeInit>


	hrtc.Instance = RTC;
 8017e18:	4b29      	ldr	r3, [pc, #164]	; (8017ec0 <RTC_set+0xe0>)
 8017e1a:	4a2a      	ldr	r2, [pc, #168]	; (8017ec4 <RTC_set+0xe4>)
 8017e1c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8017e1e:	4b28      	ldr	r3, [pc, #160]	; (8017ec0 <RTC_set+0xe0>)
 8017e20:	2200      	movs	r2, #0
 8017e22:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8017e24:	4b26      	ldr	r3, [pc, #152]	; (8017ec0 <RTC_set+0xe0>)
 8017e26:	227f      	movs	r2, #127	; 0x7f
 8017e28:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8017e2a:	4b25      	ldr	r3, [pc, #148]	; (8017ec0 <RTC_set+0xe0>)
 8017e2c:	22ff      	movs	r2, #255	; 0xff
 8017e2e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017e30:	4b23      	ldr	r3, [pc, #140]	; (8017ec0 <RTC_set+0xe0>)
 8017e32:	2200      	movs	r2, #0
 8017e34:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8017e36:	4b22      	ldr	r3, [pc, #136]	; (8017ec0 <RTC_set+0xe0>)
 8017e38:	2200      	movs	r2, #0
 8017e3a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017e3c:	4b20      	ldr	r3, [pc, #128]	; (8017ec0 <RTC_set+0xe0>)
 8017e3e:	2200      	movs	r2, #0
 8017e40:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8017e42:	4b1f      	ldr	r3, [pc, #124]	; (8017ec0 <RTC_set+0xe0>)
 8017e44:	2200      	movs	r2, #0
 8017e46:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017e48:	481d      	ldr	r0, [pc, #116]	; (8017ec0 <RTC_set+0xe0>)
 8017e4a:	f7f5 fb8f 	bl	800d56c <HAL_RTC_Init>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d001      	beq.n	8017e58 <RTC_set+0x78>
	{
	Error_Handler();
 8017e54:	f7ee fd30 	bl	80068b8 <Error_Handler>
	}


	sTime.Hours = rtc_hour;
 8017e58:	793b      	ldrb	r3, [r7, #4]
 8017e5a:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtc_min;
 8017e5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017e60:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtc_sec;
 8017e62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017e66:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017e70:	f107 030c 	add.w	r3, r7, #12
 8017e74:	2200      	movs	r2, #0
 8017e76:	4619      	mov	r1, r3
 8017e78:	4811      	ldr	r0, [pc, #68]	; (8017ec0 <RTC_set+0xe0>)
 8017e7a:	f7f5 fc67 	bl	800d74c <HAL_RTC_SetTime>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d001      	beq.n	8017e88 <RTC_set+0xa8>
	{
		Error_Handler();
 8017e84:	f7ee fd18 	bl	80068b8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017e88:	2301      	movs	r3, #1
 8017e8a:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtc_month;
 8017e8c:	79bb      	ldrb	r3, [r7, #6]
 8017e8e:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtc_day;
 8017e90:	797b      	ldrb	r3, [r7, #5]
 8017e92:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtc_year;
 8017e94:	79fb      	ldrb	r3, [r7, #7]
 8017e96:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8017e98:	f107 0308 	add.w	r3, r7, #8
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	4619      	mov	r1, r3
 8017ea0:	4807      	ldr	r0, [pc, #28]	; (8017ec0 <RTC_set+0xe0>)
 8017ea2:	f7f5 fd4c 	bl	800d93e <HAL_RTC_SetDate>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d001      	beq.n	8017eb0 <RTC_set+0xd0>
	{
		Error_Handler();
 8017eac:	f7ee fd04 	bl	80068b8 <Error_Handler>
	}

	HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017eb0:	4803      	ldr	r0, [pc, #12]	; (8017ec0 <RTC_set+0xe0>)
 8017eb2:	f7f5 fee9 	bl	800dc88 <HAL_RTCEx_EnableBypassShadow>
}
 8017eb6:	bf00      	nop
 8017eb8:	3724      	adds	r7, #36	; 0x24
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd90      	pop	{r4, r7, pc}
 8017ebe:	bf00      	nop
 8017ec0:	20007918 	.word	0x20007918
 8017ec4:	40002800 	.word	0x40002800

08017ec8 <RTC_screen_func>:


void RTC_screen_func(void)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b082      	sub	sp, #8
 8017ecc:	af02      	add	r7, sp, #8
	if(old_active_string==0xFF)
 8017ece:	4b4d      	ldr	r3, [pc, #308]	; (8018004 <RTC_screen_func+0x13c>)
 8017ed0:	781b      	ldrb	r3, [r3, #0]
 8017ed2:	2bff      	cmp	r3, #255	; 0xff
 8017ed4:	d11a      	bne.n	8017f0c <RTC_screen_func+0x44>
	{
		old_active_string=0;
 8017ed6:	4b4b      	ldr	r3, [pc, #300]	; (8018004 <RTC_screen_func+0x13c>)
 8017ed8:	2200      	movs	r2, #0
 8017eda:	701a      	strb	r2, [r3, #0]
		year_temp=year;
 8017edc:	4b4a      	ldr	r3, [pc, #296]	; (8018008 <RTC_screen_func+0x140>)
 8017ede:	781a      	ldrb	r2, [r3, #0]
 8017ee0:	4b4a      	ldr	r3, [pc, #296]	; (801800c <RTC_screen_func+0x144>)
 8017ee2:	701a      	strb	r2, [r3, #0]
		month_temp=month;
 8017ee4:	4b4a      	ldr	r3, [pc, #296]	; (8018010 <RTC_screen_func+0x148>)
 8017ee6:	781a      	ldrb	r2, [r3, #0]
 8017ee8:	4b4a      	ldr	r3, [pc, #296]	; (8018014 <RTC_screen_func+0x14c>)
 8017eea:	701a      	strb	r2, [r3, #0]
		day_temp=day;
 8017eec:	4b4a      	ldr	r3, [pc, #296]	; (8018018 <RTC_screen_func+0x150>)
 8017eee:	781a      	ldrb	r2, [r3, #0]
 8017ef0:	4b4a      	ldr	r3, [pc, #296]	; (801801c <RTC_screen_func+0x154>)
 8017ef2:	701a      	strb	r2, [r3, #0]
		hour_temp=hour;
 8017ef4:	4b4a      	ldr	r3, [pc, #296]	; (8018020 <RTC_screen_func+0x158>)
 8017ef6:	781a      	ldrb	r2, [r3, #0]
 8017ef8:	4b4a      	ldr	r3, [pc, #296]	; (8018024 <RTC_screen_func+0x15c>)
 8017efa:	701a      	strb	r2, [r3, #0]
		minute_temp=minute;
 8017efc:	4b4a      	ldr	r3, [pc, #296]	; (8018028 <RTC_screen_func+0x160>)
 8017efe:	781a      	ldrb	r2, [r3, #0]
 8017f00:	4b4a      	ldr	r3, [pc, #296]	; (801802c <RTC_screen_func+0x164>)
 8017f02:	701a      	strb	r2, [r3, #0]
		sec_temp=sec;
 8017f04:	4b4a      	ldr	r3, [pc, #296]	; (8018030 <RTC_screen_func+0x168>)
 8017f06:	781a      	ldrb	r2, [r3, #0]
 8017f08:	4b4a      	ldr	r3, [pc, #296]	; (8018034 <RTC_screen_func+0x16c>)
 8017f0a:	701a      	strb	r2, [r3, #0]
	}

	// date time
	RTC_view();
 8017f0c:	f7ff fe28 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017f10:	4949      	ldr	r1, [pc, #292]	; (8018038 <RTC_screen_func+0x170>)
 8017f12:	484a      	ldr	r0, [pc, #296]	; (801803c <RTC_screen_func+0x174>)
 8017f14:	f7fd fdd6 	bl	8015ac4 <u8g2_SetFont>

	// Date
	u8g2_DrawUTF8(&u8g2, 20, 50, "Дата:");
 8017f18:	4b49      	ldr	r3, [pc, #292]	; (8018040 <RTC_screen_func+0x178>)
 8017f1a:	2232      	movs	r2, #50	; 0x32
 8017f1c:	2114      	movs	r1, #20
 8017f1e:	4847      	ldr	r0, [pc, #284]	; (801803c <RTC_screen_func+0x174>)
 8017f20:	f7fd fd2e 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d.", day_temp);
 8017f24:	4b3d      	ldr	r3, [pc, #244]	; (801801c <RTC_screen_func+0x154>)
 8017f26:	781b      	ldrb	r3, [r3, #0]
 8017f28:	461a      	mov	r2, r3
 8017f2a:	4946      	ldr	r1, [pc, #280]	; (8018044 <RTC_screen_func+0x17c>)
 8017f2c:	4846      	ldr	r0, [pc, #280]	; (8018048 <RTC_screen_func+0x180>)
 8017f2e:	f005 ff87 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(120, 50, RAM, edit_param, 0);
 8017f32:	4b46      	ldr	r3, [pc, #280]	; (801804c <RTC_screen_func+0x184>)
 8017f34:	781b      	ldrb	r3, [r3, #0]
 8017f36:	2200      	movs	r2, #0
 8017f38:	9200      	str	r2, [sp, #0]
 8017f3a:	4a43      	ldr	r2, [pc, #268]	; (8018048 <RTC_screen_func+0x180>)
 8017f3c:	2132      	movs	r1, #50	; 0x32
 8017f3e:	2078      	movs	r0, #120	; 0x78
 8017f40:	f7ea fe66 	bl	8002c10 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d.", month_temp);
 8017f44:	4b33      	ldr	r3, [pc, #204]	; (8018014 <RTC_screen_func+0x14c>)
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	461a      	mov	r2, r3
 8017f4a:	493e      	ldr	r1, [pc, #248]	; (8018044 <RTC_screen_func+0x17c>)
 8017f4c:	483e      	ldr	r0, [pc, #248]	; (8018048 <RTC_screen_func+0x180>)
 8017f4e:	f005 ff77 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(150, 50, RAM, edit_param, 1);
 8017f52:	4b3e      	ldr	r3, [pc, #248]	; (801804c <RTC_screen_func+0x184>)
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	2201      	movs	r2, #1
 8017f58:	9200      	str	r2, [sp, #0]
 8017f5a:	4a3b      	ldr	r2, [pc, #236]	; (8018048 <RTC_screen_func+0x180>)
 8017f5c:	2132      	movs	r1, #50	; 0x32
 8017f5e:	2096      	movs	r0, #150	; 0x96
 8017f60:	f7ea fe56 	bl	8002c10 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", year_temp);
 8017f64:	4b29      	ldr	r3, [pc, #164]	; (801800c <RTC_screen_func+0x144>)
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	461a      	mov	r2, r3
 8017f6a:	4939      	ldr	r1, [pc, #228]	; (8018050 <RTC_screen_func+0x188>)
 8017f6c:	4836      	ldr	r0, [pc, #216]	; (8018048 <RTC_screen_func+0x180>)
 8017f6e:	f005 ff67 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(180, 50, RAM, edit_param, 2);
 8017f72:	4b36      	ldr	r3, [pc, #216]	; (801804c <RTC_screen_func+0x184>)
 8017f74:	781b      	ldrb	r3, [r3, #0]
 8017f76:	2202      	movs	r2, #2
 8017f78:	9200      	str	r2, [sp, #0]
 8017f7a:	4a33      	ldr	r2, [pc, #204]	; (8018048 <RTC_screen_func+0x180>)
 8017f7c:	2132      	movs	r1, #50	; 0x32
 8017f7e:	20b4      	movs	r0, #180	; 0xb4
 8017f80:	f7ea fe46 	bl	8002c10 <Blink_Edit_Parameter>


	// Date
	u8g2_DrawUTF8(&u8g2, 20, 70, "Время:");
 8017f84:	4b33      	ldr	r3, [pc, #204]	; (8018054 <RTC_screen_func+0x18c>)
 8017f86:	2246      	movs	r2, #70	; 0x46
 8017f88:	2114      	movs	r1, #20
 8017f8a:	482c      	ldr	r0, [pc, #176]	; (801803c <RTC_screen_func+0x174>)
 8017f8c:	f7fd fcf8 	bl	8015980 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:", hour_temp);
 8017f90:	4b24      	ldr	r3, [pc, #144]	; (8018024 <RTC_screen_func+0x15c>)
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	461a      	mov	r2, r3
 8017f96:	4930      	ldr	r1, [pc, #192]	; (8018058 <RTC_screen_func+0x190>)
 8017f98:	482b      	ldr	r0, [pc, #172]	; (8018048 <RTC_screen_func+0x180>)
 8017f9a:	f005 ff51 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(120, 70, RAM, edit_param, 3);
 8017f9e:	4b2b      	ldr	r3, [pc, #172]	; (801804c <RTC_screen_func+0x184>)
 8017fa0:	781b      	ldrb	r3, [r3, #0]
 8017fa2:	2203      	movs	r2, #3
 8017fa4:	9200      	str	r2, [sp, #0]
 8017fa6:	4a28      	ldr	r2, [pc, #160]	; (8018048 <RTC_screen_func+0x180>)
 8017fa8:	2146      	movs	r1, #70	; 0x46
 8017faa:	2078      	movs	r0, #120	; 0x78
 8017fac:	f7ea fe30 	bl	8002c10 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d:", minute_temp);
 8017fb0:	4b1e      	ldr	r3, [pc, #120]	; (801802c <RTC_screen_func+0x164>)
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	461a      	mov	r2, r3
 8017fb6:	4928      	ldr	r1, [pc, #160]	; (8018058 <RTC_screen_func+0x190>)
 8017fb8:	4823      	ldr	r0, [pc, #140]	; (8018048 <RTC_screen_func+0x180>)
 8017fba:	f005 ff41 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(150, 70, RAM, edit_param, 4);
 8017fbe:	4b23      	ldr	r3, [pc, #140]	; (801804c <RTC_screen_func+0x184>)
 8017fc0:	781b      	ldrb	r3, [r3, #0]
 8017fc2:	2204      	movs	r2, #4
 8017fc4:	9200      	str	r2, [sp, #0]
 8017fc6:	4a20      	ldr	r2, [pc, #128]	; (8018048 <RTC_screen_func+0x180>)
 8017fc8:	2146      	movs	r1, #70	; 0x46
 8017fca:	2096      	movs	r0, #150	; 0x96
 8017fcc:	f7ea fe20 	bl	8002c10 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", sec_temp);
 8017fd0:	4b18      	ldr	r3, [pc, #96]	; (8018034 <RTC_screen_func+0x16c>)
 8017fd2:	781b      	ldrb	r3, [r3, #0]
 8017fd4:	461a      	mov	r2, r3
 8017fd6:	491e      	ldr	r1, [pc, #120]	; (8018050 <RTC_screen_func+0x188>)
 8017fd8:	481b      	ldr	r0, [pc, #108]	; (8018048 <RTC_screen_func+0x180>)
 8017fda:	f005 ff31 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(180, 70, RAM, edit_param, 5);
 8017fde:	4b1b      	ldr	r3, [pc, #108]	; (801804c <RTC_screen_func+0x184>)
 8017fe0:	781b      	ldrb	r3, [r3, #0]
 8017fe2:	2205      	movs	r2, #5
 8017fe4:	9200      	str	r2, [sp, #0]
 8017fe6:	4a18      	ldr	r2, [pc, #96]	; (8018048 <RTC_screen_func+0x180>)
 8017fe8:	2146      	movs	r1, #70	; 0x46
 8017fea:	20b4      	movs	r0, #180	; 0xb4
 8017fec:	f7ea fe10 	bl	8002c10 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8017ff0:	4812      	ldr	r0, [pc, #72]	; (801803c <RTC_screen_func+0x174>)
 8017ff2:	f7fc ff2a 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017ff6:	4811      	ldr	r0, [pc, #68]	; (801803c <RTC_screen_func+0x174>)
 8017ff8:	f7fc feb4 	bl	8014d64 <u8g2_ClearBuffer>
}
 8017ffc:	bf00      	nop
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}
 8018002:	bf00      	nop
 8018004:	20000458 	.word	0x20000458
 8018008:	20008820 	.word	0x20008820
 801800c:	20008821 	.word	0x20008821
 8018010:	2000881f 	.word	0x2000881f
 8018014:	2000881d 	.word	0x2000881d
 8018018:	20008818 	.word	0x20008818
 801801c:	2000881a 	.word	0x2000881a
 8018020:	2000881b 	.word	0x2000881b
 8018024:	20008823 	.word	0x20008823
 8018028:	20008822 	.word	0x20008822
 801802c:	20008819 	.word	0x20008819
 8018030:	2000881c 	.word	0x2000881c
 8018034:	2000881e 	.word	0x2000881e
 8018038:	08027144 	.word	0x08027144
 801803c:	20002090 	.word	0x20002090
 8018040:	080224cc 	.word	0x080224cc
 8018044:	080224d8 	.word	0x080224d8
 8018048:	20002150 	.word	0x20002150
 801804c:	20000912 	.word	0x20000912
 8018050:	080224e0 	.word	0x080224e0
 8018054:	080224e8 	.word	0x080224e8
 8018058:	080224f4 	.word	0x080224f4

0801805c <RTC_screen_S9>:



// MENU
void RTC_screen_S9(void)
{
 801805c:	b480      	push	{r7}
 801805e:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8018060:	4b06      	ldr	r3, [pc, #24]	; (801807c <RTC_screen_S9+0x20>)
 8018062:	2208      	movs	r2, #8
 8018064:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018066:	4b06      	ldr	r3, [pc, #24]	; (8018080 <RTC_screen_S9+0x24>)
 8018068:	22ff      	movs	r2, #255	; 0xff
 801806a:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 801806c:	4b05      	ldr	r3, [pc, #20]	; (8018084 <RTC_screen_S9+0x28>)
 801806e:	2202      	movs	r2, #2
 8018070:	701a      	strb	r2, [r3, #0]
}
 8018072:	bf00      	nop
 8018074:	46bd      	mov	sp, r7
 8018076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807a:	4770      	bx	lr
 801807c:	2000004c 	.word	0x2000004c
 8018080:	20000458 	.word	0x20000458
 8018084:	20000459 	.word	0x20000459

08018088 <RTC_screen_S5>:

// DOWN
void RTC_screen_S5(void)
{
 8018088:	b480      	push	{r7}
 801808a:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 801808c:	4b07      	ldr	r3, [pc, #28]	; (80180ac <RTC_screen_S5+0x24>)
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	2b04      	cmp	r3, #4
 8018092:	d805      	bhi.n	80180a0 <RTC_screen_S5+0x18>
 8018094:	4b05      	ldr	r3, [pc, #20]	; (80180ac <RTC_screen_S5+0x24>)
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	3301      	adds	r3, #1
 801809a:	b2da      	uxtb	r2, r3
 801809c:	4b03      	ldr	r3, [pc, #12]	; (80180ac <RTC_screen_S5+0x24>)
 801809e:	701a      	strb	r2, [r3, #0]
}
 80180a0:	bf00      	nop
 80180a2:	46bd      	mov	sp, r7
 80180a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a8:	4770      	bx	lr
 80180aa:	bf00      	nop
 80180ac:	20000912 	.word	0x20000912

080180b0 <RTC_screen_S8>:

// UP
void RTC_screen_S8(void)
{
 80180b0:	b480      	push	{r7}
 80180b2:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80180b4:	4b07      	ldr	r3, [pc, #28]	; (80180d4 <RTC_screen_S8+0x24>)
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d005      	beq.n	80180c8 <RTC_screen_S8+0x18>
 80180bc:	4b05      	ldr	r3, [pc, #20]	; (80180d4 <RTC_screen_S8+0x24>)
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	3b01      	subs	r3, #1
 80180c2:	b2da      	uxtb	r2, r3
 80180c4:	4b03      	ldr	r3, [pc, #12]	; (80180d4 <RTC_screen_S8+0x24>)
 80180c6:	701a      	strb	r2, [r3, #0]
}
 80180c8:	bf00      	nop
 80180ca:	46bd      	mov	sp, r7
 80180cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d0:	4770      	bx	lr
 80180d2:	bf00      	nop
 80180d4:	20000912 	.word	0x20000912

080180d8 <RTC_screen_S6>:



// BACKWARD
void RTC_screen_S6(void)
{
 80180d8:	b480      	push	{r7}
 80180da:	af00      	add	r7, sp, #0
	switch(edit_param)
 80180dc:	4b32      	ldr	r3, [pc, #200]	; (80181a8 <RTC_screen_S6+0xd0>)
 80180de:	781b      	ldrb	r3, [r3, #0]
 80180e0:	2b05      	cmp	r3, #5
 80180e2:	d85c      	bhi.n	801819e <RTC_screen_S6+0xc6>
 80180e4:	a201      	add	r2, pc, #4	; (adr r2, 80180ec <RTC_screen_S6+0x14>)
 80180e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180ea:	bf00      	nop
 80180ec:	08018105 	.word	0x08018105
 80180f0:	0801811b 	.word	0x0801811b
 80180f4:	08018131 	.word	0x08018131
 80180f8:	08018147 	.word	0x08018147
 80180fc:	0801815d 	.word	0x0801815d
 8018100:	08018173 	.word	0x08018173
	{
		case 0: if(day_temp>0)day_temp--; break;
 8018104:	4b29      	ldr	r3, [pc, #164]	; (80181ac <RTC_screen_S6+0xd4>)
 8018106:	781b      	ldrb	r3, [r3, #0]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d03d      	beq.n	8018188 <RTC_screen_S6+0xb0>
 801810c:	4b27      	ldr	r3, [pc, #156]	; (80181ac <RTC_screen_S6+0xd4>)
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	3b01      	subs	r3, #1
 8018112:	b2da      	uxtb	r2, r3
 8018114:	4b25      	ldr	r3, [pc, #148]	; (80181ac <RTC_screen_S6+0xd4>)
 8018116:	701a      	strb	r2, [r3, #0]
 8018118:	e036      	b.n	8018188 <RTC_screen_S6+0xb0>
		case 1: if(month_temp>0)month_temp--; break;
 801811a:	4b25      	ldr	r3, [pc, #148]	; (80181b0 <RTC_screen_S6+0xd8>)
 801811c:	781b      	ldrb	r3, [r3, #0]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d034      	beq.n	801818c <RTC_screen_S6+0xb4>
 8018122:	4b23      	ldr	r3, [pc, #140]	; (80181b0 <RTC_screen_S6+0xd8>)
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	3b01      	subs	r3, #1
 8018128:	b2da      	uxtb	r2, r3
 801812a:	4b21      	ldr	r3, [pc, #132]	; (80181b0 <RTC_screen_S6+0xd8>)
 801812c:	701a      	strb	r2, [r3, #0]
 801812e:	e02d      	b.n	801818c <RTC_screen_S6+0xb4>
		case 2: if(year_temp>0)year_temp--; break;
 8018130:	4b20      	ldr	r3, [pc, #128]	; (80181b4 <RTC_screen_S6+0xdc>)
 8018132:	781b      	ldrb	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d02b      	beq.n	8018190 <RTC_screen_S6+0xb8>
 8018138:	4b1e      	ldr	r3, [pc, #120]	; (80181b4 <RTC_screen_S6+0xdc>)
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	3b01      	subs	r3, #1
 801813e:	b2da      	uxtb	r2, r3
 8018140:	4b1c      	ldr	r3, [pc, #112]	; (80181b4 <RTC_screen_S6+0xdc>)
 8018142:	701a      	strb	r2, [r3, #0]
 8018144:	e024      	b.n	8018190 <RTC_screen_S6+0xb8>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018146:	4b1c      	ldr	r3, [pc, #112]	; (80181b8 <RTC_screen_S6+0xe0>)
 8018148:	781b      	ldrb	r3, [r3, #0]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d022      	beq.n	8018194 <RTC_screen_S6+0xbc>
 801814e:	4b1a      	ldr	r3, [pc, #104]	; (80181b8 <RTC_screen_S6+0xe0>)
 8018150:	781b      	ldrb	r3, [r3, #0]
 8018152:	3b01      	subs	r3, #1
 8018154:	b2da      	uxtb	r2, r3
 8018156:	4b18      	ldr	r3, [pc, #96]	; (80181b8 <RTC_screen_S6+0xe0>)
 8018158:	701a      	strb	r2, [r3, #0]
 801815a:	e01b      	b.n	8018194 <RTC_screen_S6+0xbc>
		case 4: if(minute_temp>0)minute_temp--; break;
 801815c:	4b17      	ldr	r3, [pc, #92]	; (80181bc <RTC_screen_S6+0xe4>)
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d019      	beq.n	8018198 <RTC_screen_S6+0xc0>
 8018164:	4b15      	ldr	r3, [pc, #84]	; (80181bc <RTC_screen_S6+0xe4>)
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	3b01      	subs	r3, #1
 801816a:	b2da      	uxtb	r2, r3
 801816c:	4b13      	ldr	r3, [pc, #76]	; (80181bc <RTC_screen_S6+0xe4>)
 801816e:	701a      	strb	r2, [r3, #0]
 8018170:	e012      	b.n	8018198 <RTC_screen_S6+0xc0>
		case 5: if(sec_temp>0)sec_temp--; break;
 8018172:	4b13      	ldr	r3, [pc, #76]	; (80181c0 <RTC_screen_S6+0xe8>)
 8018174:	781b      	ldrb	r3, [r3, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d010      	beq.n	801819c <RTC_screen_S6+0xc4>
 801817a:	4b11      	ldr	r3, [pc, #68]	; (80181c0 <RTC_screen_S6+0xe8>)
 801817c:	781b      	ldrb	r3, [r3, #0]
 801817e:	3b01      	subs	r3, #1
 8018180:	b2da      	uxtb	r2, r3
 8018182:	4b0f      	ldr	r3, [pc, #60]	; (80181c0 <RTC_screen_S6+0xe8>)
 8018184:	701a      	strb	r2, [r3, #0]
 8018186:	e009      	b.n	801819c <RTC_screen_S6+0xc4>
		case 0: if(day_temp>0)day_temp--; break;
 8018188:	bf00      	nop
 801818a:	e008      	b.n	801819e <RTC_screen_S6+0xc6>
		case 1: if(month_temp>0)month_temp--; break;
 801818c:	bf00      	nop
 801818e:	e006      	b.n	801819e <RTC_screen_S6+0xc6>
		case 2: if(year_temp>0)year_temp--; break;
 8018190:	bf00      	nop
 8018192:	e004      	b.n	801819e <RTC_screen_S6+0xc6>
		case 3: if(hour_temp>0)hour_temp--; break;
 8018194:	bf00      	nop
 8018196:	e002      	b.n	801819e <RTC_screen_S6+0xc6>
		case 4: if(minute_temp>0)minute_temp--; break;
 8018198:	bf00      	nop
 801819a:	e000      	b.n	801819e <RTC_screen_S6+0xc6>
		case 5: if(sec_temp>0)sec_temp--; break;
 801819c:	bf00      	nop
	}
}
 801819e:	bf00      	nop
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr
 80181a8:	20000912 	.word	0x20000912
 80181ac:	2000881a 	.word	0x2000881a
 80181b0:	2000881d 	.word	0x2000881d
 80181b4:	20008821 	.word	0x20008821
 80181b8:	20008823 	.word	0x20008823
 80181bc:	20008819 	.word	0x20008819
 80181c0:	2000881e 	.word	0x2000881e

080181c4 <RTC_screen_S7>:

// FORWARD
void RTC_screen_S7(void)
{
 80181c4:	b480      	push	{r7}
 80181c6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80181c8:	4b32      	ldr	r3, [pc, #200]	; (8018294 <RTC_screen_S7+0xd0>)
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	2b05      	cmp	r3, #5
 80181ce:	d85c      	bhi.n	801828a <RTC_screen_S7+0xc6>
 80181d0:	a201      	add	r2, pc, #4	; (adr r2, 80181d8 <RTC_screen_S7+0x14>)
 80181d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181d6:	bf00      	nop
 80181d8:	080181f1 	.word	0x080181f1
 80181dc:	08018207 	.word	0x08018207
 80181e0:	0801821d 	.word	0x0801821d
 80181e4:	08018233 	.word	0x08018233
 80181e8:	08018249 	.word	0x08018249
 80181ec:	0801825f 	.word	0x0801825f
	{
		case 0: if(day_temp<31)day_temp++; break;
 80181f0:	4b29      	ldr	r3, [pc, #164]	; (8018298 <RTC_screen_S7+0xd4>)
 80181f2:	781b      	ldrb	r3, [r3, #0]
 80181f4:	2b1e      	cmp	r3, #30
 80181f6:	d83d      	bhi.n	8018274 <RTC_screen_S7+0xb0>
 80181f8:	4b27      	ldr	r3, [pc, #156]	; (8018298 <RTC_screen_S7+0xd4>)
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	3301      	adds	r3, #1
 80181fe:	b2da      	uxtb	r2, r3
 8018200:	4b25      	ldr	r3, [pc, #148]	; (8018298 <RTC_screen_S7+0xd4>)
 8018202:	701a      	strb	r2, [r3, #0]
 8018204:	e036      	b.n	8018274 <RTC_screen_S7+0xb0>
		case 1: if(month_temp<12)month_temp++; break;
 8018206:	4b25      	ldr	r3, [pc, #148]	; (801829c <RTC_screen_S7+0xd8>)
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	2b0b      	cmp	r3, #11
 801820c:	d834      	bhi.n	8018278 <RTC_screen_S7+0xb4>
 801820e:	4b23      	ldr	r3, [pc, #140]	; (801829c <RTC_screen_S7+0xd8>)
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	3301      	adds	r3, #1
 8018214:	b2da      	uxtb	r2, r3
 8018216:	4b21      	ldr	r3, [pc, #132]	; (801829c <RTC_screen_S7+0xd8>)
 8018218:	701a      	strb	r2, [r3, #0]
 801821a:	e02d      	b.n	8018278 <RTC_screen_S7+0xb4>
		case 2: if(year_temp<60)year_temp++; break;
 801821c:	4b20      	ldr	r3, [pc, #128]	; (80182a0 <RTC_screen_S7+0xdc>)
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	2b3b      	cmp	r3, #59	; 0x3b
 8018222:	d82b      	bhi.n	801827c <RTC_screen_S7+0xb8>
 8018224:	4b1e      	ldr	r3, [pc, #120]	; (80182a0 <RTC_screen_S7+0xdc>)
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	3301      	adds	r3, #1
 801822a:	b2da      	uxtb	r2, r3
 801822c:	4b1c      	ldr	r3, [pc, #112]	; (80182a0 <RTC_screen_S7+0xdc>)
 801822e:	701a      	strb	r2, [r3, #0]
 8018230:	e024      	b.n	801827c <RTC_screen_S7+0xb8>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018232:	4b1c      	ldr	r3, [pc, #112]	; (80182a4 <RTC_screen_S7+0xe0>)
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	2b17      	cmp	r3, #23
 8018238:	d822      	bhi.n	8018280 <RTC_screen_S7+0xbc>
 801823a:	4b1a      	ldr	r3, [pc, #104]	; (80182a4 <RTC_screen_S7+0xe0>)
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	3301      	adds	r3, #1
 8018240:	b2da      	uxtb	r2, r3
 8018242:	4b18      	ldr	r3, [pc, #96]	; (80182a4 <RTC_screen_S7+0xe0>)
 8018244:	701a      	strb	r2, [r3, #0]
 8018246:	e01b      	b.n	8018280 <RTC_screen_S7+0xbc>
		case 4: if(minute_temp<60)minute_temp++; break;
 8018248:	4b17      	ldr	r3, [pc, #92]	; (80182a8 <RTC_screen_S7+0xe4>)
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	2b3b      	cmp	r3, #59	; 0x3b
 801824e:	d819      	bhi.n	8018284 <RTC_screen_S7+0xc0>
 8018250:	4b15      	ldr	r3, [pc, #84]	; (80182a8 <RTC_screen_S7+0xe4>)
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	3301      	adds	r3, #1
 8018256:	b2da      	uxtb	r2, r3
 8018258:	4b13      	ldr	r3, [pc, #76]	; (80182a8 <RTC_screen_S7+0xe4>)
 801825a:	701a      	strb	r2, [r3, #0]
 801825c:	e012      	b.n	8018284 <RTC_screen_S7+0xc0>
		case 5: if(sec_temp<60)sec_temp++; break;
 801825e:	4b13      	ldr	r3, [pc, #76]	; (80182ac <RTC_screen_S7+0xe8>)
 8018260:	781b      	ldrb	r3, [r3, #0]
 8018262:	2b3b      	cmp	r3, #59	; 0x3b
 8018264:	d810      	bhi.n	8018288 <RTC_screen_S7+0xc4>
 8018266:	4b11      	ldr	r3, [pc, #68]	; (80182ac <RTC_screen_S7+0xe8>)
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	3301      	adds	r3, #1
 801826c:	b2da      	uxtb	r2, r3
 801826e:	4b0f      	ldr	r3, [pc, #60]	; (80182ac <RTC_screen_S7+0xe8>)
 8018270:	701a      	strb	r2, [r3, #0]
 8018272:	e009      	b.n	8018288 <RTC_screen_S7+0xc4>
		case 0: if(day_temp<31)day_temp++; break;
 8018274:	bf00      	nop
 8018276:	e008      	b.n	801828a <RTC_screen_S7+0xc6>
		case 1: if(month_temp<12)month_temp++; break;
 8018278:	bf00      	nop
 801827a:	e006      	b.n	801828a <RTC_screen_S7+0xc6>
		case 2: if(year_temp<60)year_temp++; break;
 801827c:	bf00      	nop
 801827e:	e004      	b.n	801828a <RTC_screen_S7+0xc6>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018280:	bf00      	nop
 8018282:	e002      	b.n	801828a <RTC_screen_S7+0xc6>
		case 4: if(minute_temp<60)minute_temp++; break;
 8018284:	bf00      	nop
 8018286:	e000      	b.n	801828a <RTC_screen_S7+0xc6>
		case 5: if(sec_temp<60)sec_temp++; break;
 8018288:	bf00      	nop
	}
}
 801828a:	bf00      	nop
 801828c:	46bd      	mov	sp, r7
 801828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018292:	4770      	bx	lr
 8018294:	20000912 	.word	0x20000912
 8018298:	2000881a 	.word	0x2000881a
 801829c:	2000881d 	.word	0x2000881d
 80182a0:	20008821 	.word	0x20008821
 80182a4:	20008823 	.word	0x20008823
 80182a8:	20008819 	.word	0x20008819
 80182ac:	2000881e 	.word	0x2000881e

080182b0 <RTC_screen_S4>:

// ENTER
void RTC_screen_S4(void)
{
 80182b0:	b5b0      	push	{r4, r5, r7, lr}
 80182b2:	b082      	sub	sp, #8
 80182b4:	af02      	add	r7, sp, #8
	RTC_set(year_temp, month_temp, day_temp, hour_temp, minute_temp, sec_temp);
 80182b6:	4b0a      	ldr	r3, [pc, #40]	; (80182e0 <RTC_screen_S4+0x30>)
 80182b8:	7818      	ldrb	r0, [r3, #0]
 80182ba:	4b0a      	ldr	r3, [pc, #40]	; (80182e4 <RTC_screen_S4+0x34>)
 80182bc:	7819      	ldrb	r1, [r3, #0]
 80182be:	4b0a      	ldr	r3, [pc, #40]	; (80182e8 <RTC_screen_S4+0x38>)
 80182c0:	781c      	ldrb	r4, [r3, #0]
 80182c2:	4b0a      	ldr	r3, [pc, #40]	; (80182ec <RTC_screen_S4+0x3c>)
 80182c4:	781d      	ldrb	r5, [r3, #0]
 80182c6:	4b0a      	ldr	r3, [pc, #40]	; (80182f0 <RTC_screen_S4+0x40>)
 80182c8:	781b      	ldrb	r3, [r3, #0]
 80182ca:	4a0a      	ldr	r2, [pc, #40]	; (80182f4 <RTC_screen_S4+0x44>)
 80182cc:	7812      	ldrb	r2, [r2, #0]
 80182ce:	9201      	str	r2, [sp, #4]
 80182d0:	9300      	str	r3, [sp, #0]
 80182d2:	462b      	mov	r3, r5
 80182d4:	4622      	mov	r2, r4
 80182d6:	f7ff fd83 	bl	8017de0 <RTC_set>
}
 80182da:	bf00      	nop
 80182dc:	46bd      	mov	sp, r7
 80182de:	bdb0      	pop	{r4, r5, r7, pc}
 80182e0:	20008821 	.word	0x20008821
 80182e4:	2000881d 	.word	0x2000881d
 80182e8:	2000881a 	.word	0x2000881a
 80182ec:	20008823 	.word	0x20008823
 80182f0:	20008819 	.word	0x20008819
 80182f4:	2000881e 	.word	0x2000881e

080182f8 <About_options_screen_func>:
};



void About_options_screen_func(void)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	af00      	add	r7, sp, #0
	RTC_view();
 80182fc:	f7ff fc30 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018300:	492a      	ldr	r1, [pc, #168]	; (80183ac <About_options_screen_func+0xb4>)
 8018302:	482b      	ldr	r0, [pc, #172]	; (80183b0 <About_options_screen_func+0xb8>)
 8018304:	f7fd fbde 	bl	8015ac4 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 10, 35, "Серийный номер:");
 8018308:	4b2a      	ldr	r3, [pc, #168]	; (80183b4 <About_options_screen_func+0xbc>)
 801830a:	2223      	movs	r2, #35	; 0x23
 801830c:	210a      	movs	r1, #10
 801830e:	4828      	ldr	r0, [pc, #160]	; (80183b0 <About_options_screen_func+0xb8>)
 8018310:	f7fd fb36 	bl	8015980 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%05d", serial_num);
 8018314:	4b28      	ldr	r3, [pc, #160]	; (80183b8 <About_options_screen_func+0xc0>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	461a      	mov	r2, r3
 801831a:	4928      	ldr	r1, [pc, #160]	; (80183bc <About_options_screen_func+0xc4>)
 801831c:	4828      	ldr	r0, [pc, #160]	; (80183c0 <About_options_screen_func+0xc8>)
 801831e:	f005 fd8f 	bl	801de40 <siprintf>
	u8g2_DrawUTF8(&u8g2, 170, 35, (char*)RAM);
 8018322:	4b27      	ldr	r3, [pc, #156]	; (80183c0 <About_options_screen_func+0xc8>)
 8018324:	2223      	movs	r2, #35	; 0x23
 8018326:	21aa      	movs	r1, #170	; 0xaa
 8018328:	4821      	ldr	r0, [pc, #132]	; (80183b0 <About_options_screen_func+0xb8>)
 801832a:	f7fd fb29 	bl	8015980 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 50, "Диапазон:");
 801832e:	4b25      	ldr	r3, [pc, #148]	; (80183c4 <About_options_screen_func+0xcc>)
 8018330:	2232      	movs	r2, #50	; 0x32
 8018332:	210a      	movs	r1, #10
 8018334:	481e      	ldr	r0, [pc, #120]	; (80183b0 <About_options_screen_func+0xb8>)
 8018336:	f7fd fb23 	bl	8015980 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 110, 50, GAUGE_RANGE_TEXT[gauge_range]);
 801833a:	4b23      	ldr	r3, [pc, #140]	; (80183c8 <About_options_screen_func+0xd0>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	4a23      	ldr	r2, [pc, #140]	; (80183cc <About_options_screen_func+0xd4>)
 8018340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018344:	2232      	movs	r2, #50	; 0x32
 8018346:	216e      	movs	r1, #110	; 0x6e
 8018348:	4819      	ldr	r0, [pc, #100]	; (80183b0 <About_options_screen_func+0xb8>)
 801834a:	f7fd fb19 	bl	8015980 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 65, "Погрешность:");
 801834e:	4b20      	ldr	r3, [pc, #128]	; (80183d0 <About_options_screen_func+0xd8>)
 8018350:	2241      	movs	r2, #65	; 0x41
 8018352:	210a      	movs	r1, #10
 8018354:	4816      	ldr	r0, [pc, #88]	; (80183b0 <About_options_screen_func+0xb8>)
 8018356:	f7fd fb13 	bl	8015980 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%.4f", gauge_error);
 801835a:	4b1e      	ldr	r3, [pc, #120]	; (80183d4 <About_options_screen_func+0xdc>)
 801835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018360:	491d      	ldr	r1, [pc, #116]	; (80183d8 <About_options_screen_func+0xe0>)
 8018362:	4817      	ldr	r0, [pc, #92]	; (80183c0 <About_options_screen_func+0xc8>)
 8018364:	f005 fd6c 	bl	801de40 <siprintf>
	u8g2_DrawUTF8(&u8g2, 140, 65, (char*)RAM);
 8018368:	4b15      	ldr	r3, [pc, #84]	; (80183c0 <About_options_screen_func+0xc8>)
 801836a:	2241      	movs	r2, #65	; 0x41
 801836c:	218c      	movs	r1, #140	; 0x8c
 801836e:	4810      	ldr	r0, [pc, #64]	; (80183b0 <About_options_screen_func+0xb8>)
 8018370:	f7fd fb06 	bl	8015980 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 145, "Код ошибки:");
 8018374:	4b19      	ldr	r3, [pc, #100]	; (80183dc <About_options_screen_func+0xe4>)
 8018376:	2291      	movs	r2, #145	; 0x91
 8018378:	210a      	movs	r1, #10
 801837a:	480d      	ldr	r0, [pc, #52]	; (80183b0 <About_options_screen_func+0xb8>)
 801837c:	f7fd fb00 	bl	8015980 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%d", ERROR_REG);
 8018380:	4b17      	ldr	r3, [pc, #92]	; (80183e0 <About_options_screen_func+0xe8>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	461a      	mov	r2, r3
 8018386:	4917      	ldr	r1, [pc, #92]	; (80183e4 <About_options_screen_func+0xec>)
 8018388:	480d      	ldr	r0, [pc, #52]	; (80183c0 <About_options_screen_func+0xc8>)
 801838a:	f005 fd59 	bl	801de40 <siprintf>
	u8g2_DrawUTF8(&u8g2, 130, 145, (char*)RAM);
 801838e:	4b0c      	ldr	r3, [pc, #48]	; (80183c0 <About_options_screen_func+0xc8>)
 8018390:	2291      	movs	r2, #145	; 0x91
 8018392:	2182      	movs	r1, #130	; 0x82
 8018394:	4806      	ldr	r0, [pc, #24]	; (80183b0 <About_options_screen_func+0xb8>)
 8018396:	f7fd faf3 	bl	8015980 <u8g2_DrawUTF8>



	u8g2_SendBuffer(&u8g2);
 801839a:	4805      	ldr	r0, [pc, #20]	; (80183b0 <About_options_screen_func+0xb8>)
 801839c:	f7fc fd55 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80183a0:	4803      	ldr	r0, [pc, #12]	; (80183b0 <About_options_screen_func+0xb8>)
 80183a2:	f7fc fcdf 	bl	8014d64 <u8g2_ClearBuffer>
}
 80183a6:	bf00      	nop
 80183a8:	bd80      	pop	{r7, pc}
 80183aa:	bf00      	nop
 80183ac:	08027144 	.word	0x08027144
 80183b0:	20002090 	.word	0x20002090
 80183b4:	08022530 	.word	0x08022530
 80183b8:	200000a8 	.word	0x200000a8
 80183bc:	08022550 	.word	0x08022550
 80183c0:	20002150 	.word	0x20002150
 80183c4:	08022558 	.word	0x08022558
 80183c8:	2000096c 	.word	0x2000096c
 80183cc:	2000042c 	.word	0x2000042c
 80183d0:	0802256c 	.word	0x0802256c
 80183d4:	200000b0 	.word	0x200000b0
 80183d8:	08022584 	.word	0x08022584
 80183dc:	0802258c 	.word	0x0802258c
 80183e0:	20000950 	.word	0x20000950
 80183e4:	080225a4 	.word	0x080225a4

080183e8 <About_options_screen_S9>:


// MENU
void About_options_screen_S9(void)
{
 80183e8:	b480      	push	{r7}
 80183ea:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80183ec:	4b06      	ldr	r3, [pc, #24]	; (8018408 <About_options_screen_S9+0x20>)
 80183ee:	2204      	movs	r2, #4
 80183f0:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80183f2:	4b06      	ldr	r3, [pc, #24]	; (801840c <About_options_screen_S9+0x24>)
 80183f4:	22ff      	movs	r2, #255	; 0xff
 80183f6:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 80183f8:	4b05      	ldr	r3, [pc, #20]	; (8018410 <About_options_screen_S9+0x28>)
 80183fa:	2203      	movs	r2, #3
 80183fc:	701a      	strb	r2, [r3, #0]
}
 80183fe:	bf00      	nop
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr
 8018408:	2000004c 	.word	0x2000004c
 801840c:	20000458 	.word	0x20000458
 8018410:	20000459 	.word	0x20000459

08018414 <Logging_options_screen_func>:
#define max_edit_param 6



void Logging_options_screen_func(void)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b082      	sub	sp, #8
 8018418:	af02      	add	r7, sp, #8
	RTC_view();
 801841a:	f7ff fba1 	bl	8017b60 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 801841e:	4951      	ldr	r1, [pc, #324]	; (8018564 <Logging_options_screen_func+0x150>)
 8018420:	4851      	ldr	r0, [pc, #324]	; (8018568 <Logging_options_screen_func+0x154>)
 8018422:	f7fd fb4f 	bl	8015ac4 <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 5, 40, "Логгирование:");
 8018426:	4b51      	ldr	r3, [pc, #324]	; (801856c <Logging_options_screen_func+0x158>)
 8018428:	2228      	movs	r2, #40	; 0x28
 801842a:	2105      	movs	r1, #5
 801842c:	484e      	ldr	r0, [pc, #312]	; (8018568 <Logging_options_screen_func+0x154>)
 801842e:	f7fd faa7 	bl	8015980 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 60, "Время старта:");
 8018432:	4b4f      	ldr	r3, [pc, #316]	; (8018570 <Logging_options_screen_func+0x15c>)
 8018434:	223c      	movs	r2, #60	; 0x3c
 8018436:	2105      	movs	r1, #5
 8018438:	484b      	ldr	r0, [pc, #300]	; (8018568 <Logging_options_screen_func+0x154>)
 801843a:	f7fd faa1 	bl	8015980 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 80, "Период сохранения:");
 801843e:	4b4d      	ldr	r3, [pc, #308]	; (8018574 <Logging_options_screen_func+0x160>)
 8018440:	2250      	movs	r2, #80	; 0x50
 8018442:	2105      	movs	r1, #5
 8018444:	4848      	ldr	r0, [pc, #288]	; (8018568 <Logging_options_screen_func+0x154>)
 8018446:	f7fd fa9b 	bl	8015980 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 100, "Длительность:");
 801844a:	4b4b      	ldr	r3, [pc, #300]	; (8018578 <Logging_options_screen_func+0x164>)
 801844c:	2264      	movs	r2, #100	; 0x64
 801844e:	2105      	movs	r1, #5
 8018450:	4845      	ldr	r0, [pc, #276]	; (8018568 <Logging_options_screen_func+0x154>)
 8018452:	f7fd fa95 	bl	8015980 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 120, "Всего файлов:");
 8018456:	4b49      	ldr	r3, [pc, #292]	; (801857c <Logging_options_screen_func+0x168>)
 8018458:	2278      	movs	r2, #120	; 0x78
 801845a:	2105      	movs	r1, #5
 801845c:	4842      	ldr	r0, [pc, #264]	; (8018568 <Logging_options_screen_func+0x154>)
 801845e:	f7fd fa8f 	bl	8015980 <u8g2_DrawUTF8>


	// 0 parameter
	if(logging==0)Blink_Edit_Parameter(155, 40, "ДА", edit_param, 0);
 8018462:	4b47      	ldr	r3, [pc, #284]	; (8018580 <Logging_options_screen_func+0x16c>)
 8018464:	781b      	ldrb	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d109      	bne.n	801847e <Logging_options_screen_func+0x6a>
 801846a:	4b46      	ldr	r3, [pc, #280]	; (8018584 <Logging_options_screen_func+0x170>)
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	2200      	movs	r2, #0
 8018470:	9200      	str	r2, [sp, #0]
 8018472:	4a45      	ldr	r2, [pc, #276]	; (8018588 <Logging_options_screen_func+0x174>)
 8018474:	2128      	movs	r1, #40	; 0x28
 8018476:	209b      	movs	r0, #155	; 0x9b
 8018478:	f7ea fbca 	bl	8002c10 <Blink_Edit_Parameter>
 801847c:	e008      	b.n	8018490 <Logging_options_screen_func+0x7c>
	else Blink_Edit_Parameter(155, 40, "НЕТ", edit_param, 0);
 801847e:	4b41      	ldr	r3, [pc, #260]	; (8018584 <Logging_options_screen_func+0x170>)
 8018480:	781b      	ldrb	r3, [r3, #0]
 8018482:	2200      	movs	r2, #0
 8018484:	9200      	str	r2, [sp, #0]
 8018486:	4a41      	ldr	r2, [pc, #260]	; (801858c <Logging_options_screen_func+0x178>)
 8018488:	2128      	movs	r1, #40	; 0x28
 801848a:	209b      	movs	r0, #155	; 0x9b
 801848c:	f7ea fbc0 	bl	8002c10 <Blink_Edit_Parameter>
	// 1 parameter
	sprintf(RAM,"%02d:", logging_start_hour);
 8018490:	4b3f      	ldr	r3, [pc, #252]	; (8018590 <Logging_options_screen_func+0x17c>)
 8018492:	781b      	ldrb	r3, [r3, #0]
 8018494:	461a      	mov	r2, r3
 8018496:	493f      	ldr	r1, [pc, #252]	; (8018594 <Logging_options_screen_func+0x180>)
 8018498:	483f      	ldr	r0, [pc, #252]	; (8018598 <Logging_options_screen_func+0x184>)
 801849a:	f005 fcd1 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(155, 60, RAM, edit_param, 1);
 801849e:	4b39      	ldr	r3, [pc, #228]	; (8018584 <Logging_options_screen_func+0x170>)
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	2201      	movs	r2, #1
 80184a4:	9200      	str	r2, [sp, #0]
 80184a6:	4a3c      	ldr	r2, [pc, #240]	; (8018598 <Logging_options_screen_func+0x184>)
 80184a8:	213c      	movs	r1, #60	; 0x3c
 80184aa:	209b      	movs	r0, #155	; 0x9b
 80184ac:	f7ea fbb0 	bl	8002c10 <Blink_Edit_Parameter>
	// 2 parameter
	sprintf(RAM,"%02d:", logging_start_min);
 80184b0:	4b3a      	ldr	r3, [pc, #232]	; (801859c <Logging_options_screen_func+0x188>)
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	461a      	mov	r2, r3
 80184b6:	4937      	ldr	r1, [pc, #220]	; (8018594 <Logging_options_screen_func+0x180>)
 80184b8:	4837      	ldr	r0, [pc, #220]	; (8018598 <Logging_options_screen_func+0x184>)
 80184ba:	f005 fcc1 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(185, 60, RAM, edit_param, 2);
 80184be:	4b31      	ldr	r3, [pc, #196]	; (8018584 <Logging_options_screen_func+0x170>)
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	2202      	movs	r2, #2
 80184c4:	9200      	str	r2, [sp, #0]
 80184c6:	4a34      	ldr	r2, [pc, #208]	; (8018598 <Logging_options_screen_func+0x184>)
 80184c8:	213c      	movs	r1, #60	; 0x3c
 80184ca:	20b9      	movs	r0, #185	; 0xb9
 80184cc:	f7ea fba0 	bl	8002c10 <Blink_Edit_Parameter>
	// 3 parameter
	sprintf(RAM,"%02d", logging_start_sec);
 80184d0:	4b33      	ldr	r3, [pc, #204]	; (80185a0 <Logging_options_screen_func+0x18c>)
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	461a      	mov	r2, r3
 80184d6:	4933      	ldr	r1, [pc, #204]	; (80185a4 <Logging_options_screen_func+0x190>)
 80184d8:	482f      	ldr	r0, [pc, #188]	; (8018598 <Logging_options_screen_func+0x184>)
 80184da:	f005 fcb1 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(215, 60, RAM, edit_param, 3);
 80184de:	4b29      	ldr	r3, [pc, #164]	; (8018584 <Logging_options_screen_func+0x170>)
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	2203      	movs	r2, #3
 80184e4:	9200      	str	r2, [sp, #0]
 80184e6:	4a2c      	ldr	r2, [pc, #176]	; (8018598 <Logging_options_screen_func+0x184>)
 80184e8:	213c      	movs	r1, #60	; 0x3c
 80184ea:	20d7      	movs	r0, #215	; 0xd7
 80184ec:	f7ea fb90 	bl	8002c10 <Blink_Edit_Parameter>
	// 4 parameter
	sprintf(RAM,"%d", logging_period);
 80184f0:	4b2d      	ldr	r3, [pc, #180]	; (80185a8 <Logging_options_screen_func+0x194>)
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	461a      	mov	r2, r3
 80184f6:	492d      	ldr	r1, [pc, #180]	; (80185ac <Logging_options_screen_func+0x198>)
 80184f8:	4827      	ldr	r0, [pc, #156]	; (8018598 <Logging_options_screen_func+0x184>)
 80184fa:	f005 fca1 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(195, 80, RAM, edit_param, 4);
 80184fe:	4b21      	ldr	r3, [pc, #132]	; (8018584 <Logging_options_screen_func+0x170>)
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	2204      	movs	r2, #4
 8018504:	9200      	str	r2, [sp, #0]
 8018506:	4a24      	ldr	r2, [pc, #144]	; (8018598 <Logging_options_screen_func+0x184>)
 8018508:	2150      	movs	r1, #80	; 0x50
 801850a:	20c3      	movs	r0, #195	; 0xc3
 801850c:	f7ea fb80 	bl	8002c10 <Blink_Edit_Parameter>
	// 5 parameter
	sprintf(RAM,"%d", logging_len);
 8018510:	4b27      	ldr	r3, [pc, #156]	; (80185b0 <Logging_options_screen_func+0x19c>)
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	461a      	mov	r2, r3
 8018516:	4925      	ldr	r1, [pc, #148]	; (80185ac <Logging_options_screen_func+0x198>)
 8018518:	481f      	ldr	r0, [pc, #124]	; (8018598 <Logging_options_screen_func+0x184>)
 801851a:	f005 fc91 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(155, 100, RAM, edit_param, 5);
 801851e:	4b19      	ldr	r3, [pc, #100]	; (8018584 <Logging_options_screen_func+0x170>)
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	2205      	movs	r2, #5
 8018524:	9200      	str	r2, [sp, #0]
 8018526:	4a1c      	ldr	r2, [pc, #112]	; (8018598 <Logging_options_screen_func+0x184>)
 8018528:	2164      	movs	r1, #100	; 0x64
 801852a:	209b      	movs	r0, #155	; 0x9b
 801852c:	f7ea fb70 	bl	8002c10 <Blink_Edit_Parameter>
	// 6 parameter
	sprintf(RAM,"%d", logging_num);
 8018530:	4b20      	ldr	r3, [pc, #128]	; (80185b4 <Logging_options_screen_func+0x1a0>)
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	461a      	mov	r2, r3
 8018536:	491d      	ldr	r1, [pc, #116]	; (80185ac <Logging_options_screen_func+0x198>)
 8018538:	4817      	ldr	r0, [pc, #92]	; (8018598 <Logging_options_screen_func+0x184>)
 801853a:	f005 fc81 	bl	801de40 <siprintf>
	Blink_Edit_Parameter(155, 120, RAM, edit_param, 6);
 801853e:	4b11      	ldr	r3, [pc, #68]	; (8018584 <Logging_options_screen_func+0x170>)
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	2206      	movs	r2, #6
 8018544:	9200      	str	r2, [sp, #0]
 8018546:	4a14      	ldr	r2, [pc, #80]	; (8018598 <Logging_options_screen_func+0x184>)
 8018548:	2178      	movs	r1, #120	; 0x78
 801854a:	209b      	movs	r0, #155	; 0x9b
 801854c:	f7ea fb60 	bl	8002c10 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8018550:	4805      	ldr	r0, [pc, #20]	; (8018568 <Logging_options_screen_func+0x154>)
 8018552:	f7fc fc7a 	bl	8014e4a <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018556:	4804      	ldr	r0, [pc, #16]	; (8018568 <Logging_options_screen_func+0x154>)
 8018558:	f7fc fc04 	bl	8014d64 <u8g2_ClearBuffer>
}
 801855c:	bf00      	nop
 801855e:	46bd      	mov	sp, r7
 8018560:	bd80      	pop	{r7, pc}
 8018562:	bf00      	nop
 8018564:	08027144 	.word	0x08027144
 8018568:	20002090 	.word	0x20002090
 801856c:	080225a8 	.word	0x080225a8
 8018570:	080225c4 	.word	0x080225c4
 8018574:	080225e0 	.word	0x080225e0
 8018578:	08022604 	.word	0x08022604
 801857c:	08022620 	.word	0x08022620
 8018580:	20000970 	.word	0x20000970
 8018584:	20000912 	.word	0x20000912
 8018588:	0802263c 	.word	0x0802263c
 801858c:	08022644 	.word	0x08022644
 8018590:	20000971 	.word	0x20000971
 8018594:	0802264c 	.word	0x0802264c
 8018598:	20002150 	.word	0x20002150
 801859c:	20000972 	.word	0x20000972
 80185a0:	20000973 	.word	0x20000973
 80185a4:	08022654 	.word	0x08022654
 80185a8:	20000974 	.word	0x20000974
 80185ac:	0802265c 	.word	0x0802265c
 80185b0:	20000975 	.word	0x20000975
 80185b4:	20000976 	.word	0x20000976

080185b8 <Logging_options_screen_S6>:


// DOWN
void Logging_options_screen_S6(void)
{
 80185b8:	b480      	push	{r7}
 80185ba:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80185bc:	4b07      	ldr	r3, [pc, #28]	; (80185dc <Logging_options_screen_S6+0x24>)
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	2b04      	cmp	r3, #4
 80185c2:	d805      	bhi.n	80185d0 <Logging_options_screen_S6+0x18>
 80185c4:	4b05      	ldr	r3, [pc, #20]	; (80185dc <Logging_options_screen_S6+0x24>)
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	3301      	adds	r3, #1
 80185ca:	b2da      	uxtb	r2, r3
 80185cc:	4b03      	ldr	r3, [pc, #12]	; (80185dc <Logging_options_screen_S6+0x24>)
 80185ce:	701a      	strb	r2, [r3, #0]
}
 80185d0:	bf00      	nop
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr
 80185da:	bf00      	nop
 80185dc:	20000912 	.word	0x20000912

080185e0 <Logging_options_screen_S7>:

// UP
void Logging_options_screen_S7(void)
{
 80185e0:	b480      	push	{r7}
 80185e2:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80185e4:	4b07      	ldr	r3, [pc, #28]	; (8018604 <Logging_options_screen_S7+0x24>)
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d005      	beq.n	80185f8 <Logging_options_screen_S7+0x18>
 80185ec:	4b05      	ldr	r3, [pc, #20]	; (8018604 <Logging_options_screen_S7+0x24>)
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	3b01      	subs	r3, #1
 80185f2:	b2da      	uxtb	r2, r3
 80185f4:	4b03      	ldr	r3, [pc, #12]	; (8018604 <Logging_options_screen_S7+0x24>)
 80185f6:	701a      	strb	r2, [r3, #0]
}
 80185f8:	bf00      	nop
 80185fa:	46bd      	mov	sp, r7
 80185fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018600:	4770      	bx	lr
 8018602:	bf00      	nop
 8018604:	20000912 	.word	0x20000912

08018608 <Logging_options_screen_S9>:



// MENU
void Logging_options_screen_S9(void)
{
 8018608:	b480      	push	{r7}
 801860a:	af00      	add	r7, sp, #0
	screen=Option_screen;
 801860c:	4b06      	ldr	r3, [pc, #24]	; (8018628 <Logging_options_screen_S9+0x20>)
 801860e:	2204      	movs	r2, #4
 8018610:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018612:	4b06      	ldr	r3, [pc, #24]	; (801862c <Logging_options_screen_S9+0x24>)
 8018614:	22ff      	movs	r2, #255	; 0xff
 8018616:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8018618:	4b05      	ldr	r3, [pc, #20]	; (8018630 <Logging_options_screen_S9+0x28>)
 801861a:	2205      	movs	r2, #5
 801861c:	701a      	strb	r2, [r3, #0]
}
 801861e:	bf00      	nop
 8018620:	46bd      	mov	sp, r7
 8018622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018626:	4770      	bx	lr
 8018628:	2000004c 	.word	0x2000004c
 801862c:	20000458 	.word	0x20000458
 8018630:	20000459 	.word	0x20000459

08018634 <Logging_options_screen_S8>:

// BACKWARD
void Logging_options_screen_S8(void)
{
 8018634:	b480      	push	{r7}
 8018636:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018638:	4b32      	ldr	r3, [pc, #200]	; (8018704 <Logging_options_screen_S8+0xd0>)
 801863a:	781b      	ldrb	r3, [r3, #0]
 801863c:	2b05      	cmp	r3, #5
 801863e:	d85c      	bhi.n	80186fa <Logging_options_screen_S8+0xc6>
 8018640:	a201      	add	r2, pc, #4	; (adr r2, 8018648 <Logging_options_screen_S8+0x14>)
 8018642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018646:	bf00      	nop
 8018648:	08018661 	.word	0x08018661
 801864c:	08018677 	.word	0x08018677
 8018650:	0801868d 	.word	0x0801868d
 8018654:	080186a3 	.word	0x080186a3
 8018658:	080186b9 	.word	0x080186b9
 801865c:	080186cf 	.word	0x080186cf
	{
		case 0: if(logging>0)logging--; break;
 8018660:	4b29      	ldr	r3, [pc, #164]	; (8018708 <Logging_options_screen_S8+0xd4>)
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d03d      	beq.n	80186e4 <Logging_options_screen_S8+0xb0>
 8018668:	4b27      	ldr	r3, [pc, #156]	; (8018708 <Logging_options_screen_S8+0xd4>)
 801866a:	781b      	ldrb	r3, [r3, #0]
 801866c:	3b01      	subs	r3, #1
 801866e:	b2da      	uxtb	r2, r3
 8018670:	4b25      	ldr	r3, [pc, #148]	; (8018708 <Logging_options_screen_S8+0xd4>)
 8018672:	701a      	strb	r2, [r3, #0]
 8018674:	e036      	b.n	80186e4 <Logging_options_screen_S8+0xb0>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018676:	4b25      	ldr	r3, [pc, #148]	; (801870c <Logging_options_screen_S8+0xd8>)
 8018678:	781b      	ldrb	r3, [r3, #0]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d034      	beq.n	80186e8 <Logging_options_screen_S8+0xb4>
 801867e:	4b23      	ldr	r3, [pc, #140]	; (801870c <Logging_options_screen_S8+0xd8>)
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	3b01      	subs	r3, #1
 8018684:	b2da      	uxtb	r2, r3
 8018686:	4b21      	ldr	r3, [pc, #132]	; (801870c <Logging_options_screen_S8+0xd8>)
 8018688:	701a      	strb	r2, [r3, #0]
 801868a:	e02d      	b.n	80186e8 <Logging_options_screen_S8+0xb4>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 801868c:	4b20      	ldr	r3, [pc, #128]	; (8018710 <Logging_options_screen_S8+0xdc>)
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d02b      	beq.n	80186ec <Logging_options_screen_S8+0xb8>
 8018694:	4b1e      	ldr	r3, [pc, #120]	; (8018710 <Logging_options_screen_S8+0xdc>)
 8018696:	781b      	ldrb	r3, [r3, #0]
 8018698:	3b01      	subs	r3, #1
 801869a:	b2da      	uxtb	r2, r3
 801869c:	4b1c      	ldr	r3, [pc, #112]	; (8018710 <Logging_options_screen_S8+0xdc>)
 801869e:	701a      	strb	r2, [r3, #0]
 80186a0:	e024      	b.n	80186ec <Logging_options_screen_S8+0xb8>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 80186a2:	4b1c      	ldr	r3, [pc, #112]	; (8018714 <Logging_options_screen_S8+0xe0>)
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d022      	beq.n	80186f0 <Logging_options_screen_S8+0xbc>
 80186aa:	4b1a      	ldr	r3, [pc, #104]	; (8018714 <Logging_options_screen_S8+0xe0>)
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	3b01      	subs	r3, #1
 80186b0:	b2da      	uxtb	r2, r3
 80186b2:	4b18      	ldr	r3, [pc, #96]	; (8018714 <Logging_options_screen_S8+0xe0>)
 80186b4:	701a      	strb	r2, [r3, #0]
 80186b6:	e01b      	b.n	80186f0 <Logging_options_screen_S8+0xbc>
		case 4: if(logging_period>0)logging_period--; break;
 80186b8:	4b17      	ldr	r3, [pc, #92]	; (8018718 <Logging_options_screen_S8+0xe4>)
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d019      	beq.n	80186f4 <Logging_options_screen_S8+0xc0>
 80186c0:	4b15      	ldr	r3, [pc, #84]	; (8018718 <Logging_options_screen_S8+0xe4>)
 80186c2:	781b      	ldrb	r3, [r3, #0]
 80186c4:	3b01      	subs	r3, #1
 80186c6:	b2da      	uxtb	r2, r3
 80186c8:	4b13      	ldr	r3, [pc, #76]	; (8018718 <Logging_options_screen_S8+0xe4>)
 80186ca:	701a      	strb	r2, [r3, #0]
 80186cc:	e012      	b.n	80186f4 <Logging_options_screen_S8+0xc0>
		case 5: if(logging_len>0)logging_len--; break;
 80186ce:	4b13      	ldr	r3, [pc, #76]	; (801871c <Logging_options_screen_S8+0xe8>)
 80186d0:	781b      	ldrb	r3, [r3, #0]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d010      	beq.n	80186f8 <Logging_options_screen_S8+0xc4>
 80186d6:	4b11      	ldr	r3, [pc, #68]	; (801871c <Logging_options_screen_S8+0xe8>)
 80186d8:	781b      	ldrb	r3, [r3, #0]
 80186da:	3b01      	subs	r3, #1
 80186dc:	b2da      	uxtb	r2, r3
 80186de:	4b0f      	ldr	r3, [pc, #60]	; (801871c <Logging_options_screen_S8+0xe8>)
 80186e0:	701a      	strb	r2, [r3, #0]
 80186e2:	e009      	b.n	80186f8 <Logging_options_screen_S8+0xc4>
		case 0: if(logging>0)logging--; break;
 80186e4:	bf00      	nop
 80186e6:	e008      	b.n	80186fa <Logging_options_screen_S8+0xc6>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 80186e8:	bf00      	nop
 80186ea:	e006      	b.n	80186fa <Logging_options_screen_S8+0xc6>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 80186ec:	bf00      	nop
 80186ee:	e004      	b.n	80186fa <Logging_options_screen_S8+0xc6>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 80186f0:	bf00      	nop
 80186f2:	e002      	b.n	80186fa <Logging_options_screen_S8+0xc6>
		case 4: if(logging_period>0)logging_period--; break;
 80186f4:	bf00      	nop
 80186f6:	e000      	b.n	80186fa <Logging_options_screen_S8+0xc6>
		case 5: if(logging_len>0)logging_len--; break;
 80186f8:	bf00      	nop
	}
}
 80186fa:	bf00      	nop
 80186fc:	46bd      	mov	sp, r7
 80186fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018702:	4770      	bx	lr
 8018704:	20000912 	.word	0x20000912
 8018708:	20000970 	.word	0x20000970
 801870c:	20000971 	.word	0x20000971
 8018710:	20000972 	.word	0x20000972
 8018714:	20000973 	.word	0x20000973
 8018718:	20000974 	.word	0x20000974
 801871c:	20000975 	.word	0x20000975

08018720 <Logging_options_screen_S5>:

// FORWARD
void Logging_options_screen_S5(void)
{
 8018720:	b480      	push	{r7}
 8018722:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018724:	4b32      	ldr	r3, [pc, #200]	; (80187f0 <Logging_options_screen_S5+0xd0>)
 8018726:	781b      	ldrb	r3, [r3, #0]
 8018728:	2b05      	cmp	r3, #5
 801872a:	d85c      	bhi.n	80187e6 <Logging_options_screen_S5+0xc6>
 801872c:	a201      	add	r2, pc, #4	; (adr r2, 8018734 <Logging_options_screen_S5+0x14>)
 801872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018732:	bf00      	nop
 8018734:	0801874d 	.word	0x0801874d
 8018738:	08018763 	.word	0x08018763
 801873c:	08018779 	.word	0x08018779
 8018740:	0801878f 	.word	0x0801878f
 8018744:	080187a5 	.word	0x080187a5
 8018748:	080187bb 	.word	0x080187bb
	{
		case 0: if(logging<1)logging++; break;
 801874c:	4b29      	ldr	r3, [pc, #164]	; (80187f4 <Logging_options_screen_S5+0xd4>)
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d13d      	bne.n	80187d0 <Logging_options_screen_S5+0xb0>
 8018754:	4b27      	ldr	r3, [pc, #156]	; (80187f4 <Logging_options_screen_S5+0xd4>)
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	3301      	adds	r3, #1
 801875a:	b2da      	uxtb	r2, r3
 801875c:	4b25      	ldr	r3, [pc, #148]	; (80187f4 <Logging_options_screen_S5+0xd4>)
 801875e:	701a      	strb	r2, [r3, #0]
 8018760:	e036      	b.n	80187d0 <Logging_options_screen_S5+0xb0>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 8018762:	4b25      	ldr	r3, [pc, #148]	; (80187f8 <Logging_options_screen_S5+0xd8>)
 8018764:	781b      	ldrb	r3, [r3, #0]
 8018766:	2b16      	cmp	r3, #22
 8018768:	d834      	bhi.n	80187d4 <Logging_options_screen_S5+0xb4>
 801876a:	4b23      	ldr	r3, [pc, #140]	; (80187f8 <Logging_options_screen_S5+0xd8>)
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	3301      	adds	r3, #1
 8018770:	b2da      	uxtb	r2, r3
 8018772:	4b21      	ldr	r3, [pc, #132]	; (80187f8 <Logging_options_screen_S5+0xd8>)
 8018774:	701a      	strb	r2, [r3, #0]
 8018776:	e02d      	b.n	80187d4 <Logging_options_screen_S5+0xb4>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018778:	4b20      	ldr	r3, [pc, #128]	; (80187fc <Logging_options_screen_S5+0xdc>)
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	2b3a      	cmp	r3, #58	; 0x3a
 801877e:	d82b      	bhi.n	80187d8 <Logging_options_screen_S5+0xb8>
 8018780:	4b1e      	ldr	r3, [pc, #120]	; (80187fc <Logging_options_screen_S5+0xdc>)
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	3301      	adds	r3, #1
 8018786:	b2da      	uxtb	r2, r3
 8018788:	4b1c      	ldr	r3, [pc, #112]	; (80187fc <Logging_options_screen_S5+0xdc>)
 801878a:	701a      	strb	r2, [r3, #0]
 801878c:	e024      	b.n	80187d8 <Logging_options_screen_S5+0xb8>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 801878e:	4b1c      	ldr	r3, [pc, #112]	; (8018800 <Logging_options_screen_S5+0xe0>)
 8018790:	781b      	ldrb	r3, [r3, #0]
 8018792:	2b3a      	cmp	r3, #58	; 0x3a
 8018794:	d822      	bhi.n	80187dc <Logging_options_screen_S5+0xbc>
 8018796:	4b1a      	ldr	r3, [pc, #104]	; (8018800 <Logging_options_screen_S5+0xe0>)
 8018798:	781b      	ldrb	r3, [r3, #0]
 801879a:	3301      	adds	r3, #1
 801879c:	b2da      	uxtb	r2, r3
 801879e:	4b18      	ldr	r3, [pc, #96]	; (8018800 <Logging_options_screen_S5+0xe0>)
 80187a0:	701a      	strb	r2, [r3, #0]
 80187a2:	e01b      	b.n	80187dc <Logging_options_screen_S5+0xbc>
		case 4: if(logging_period<30)logging_period++; break;
 80187a4:	4b17      	ldr	r3, [pc, #92]	; (8018804 <Logging_options_screen_S5+0xe4>)
 80187a6:	781b      	ldrb	r3, [r3, #0]
 80187a8:	2b1d      	cmp	r3, #29
 80187aa:	d819      	bhi.n	80187e0 <Logging_options_screen_S5+0xc0>
 80187ac:	4b15      	ldr	r3, [pc, #84]	; (8018804 <Logging_options_screen_S5+0xe4>)
 80187ae:	781b      	ldrb	r3, [r3, #0]
 80187b0:	3301      	adds	r3, #1
 80187b2:	b2da      	uxtb	r2, r3
 80187b4:	4b13      	ldr	r3, [pc, #76]	; (8018804 <Logging_options_screen_S5+0xe4>)
 80187b6:	701a      	strb	r2, [r3, #0]
 80187b8:	e012      	b.n	80187e0 <Logging_options_screen_S5+0xc0>
		case 5: if(logging_len<100)logging_len++; break;
 80187ba:	4b13      	ldr	r3, [pc, #76]	; (8018808 <Logging_options_screen_S5+0xe8>)
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	2b63      	cmp	r3, #99	; 0x63
 80187c0:	d810      	bhi.n	80187e4 <Logging_options_screen_S5+0xc4>
 80187c2:	4b11      	ldr	r3, [pc, #68]	; (8018808 <Logging_options_screen_S5+0xe8>)
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	3301      	adds	r3, #1
 80187c8:	b2da      	uxtb	r2, r3
 80187ca:	4b0f      	ldr	r3, [pc, #60]	; (8018808 <Logging_options_screen_S5+0xe8>)
 80187cc:	701a      	strb	r2, [r3, #0]
 80187ce:	e009      	b.n	80187e4 <Logging_options_screen_S5+0xc4>
		case 0: if(logging<1)logging++; break;
 80187d0:	bf00      	nop
 80187d2:	e008      	b.n	80187e6 <Logging_options_screen_S5+0xc6>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 80187d4:	bf00      	nop
 80187d6:	e006      	b.n	80187e6 <Logging_options_screen_S5+0xc6>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 80187d8:	bf00      	nop
 80187da:	e004      	b.n	80187e6 <Logging_options_screen_S5+0xc6>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 80187dc:	bf00      	nop
 80187de:	e002      	b.n	80187e6 <Logging_options_screen_S5+0xc6>
		case 4: if(logging_period<30)logging_period++; break;
 80187e0:	bf00      	nop
 80187e2:	e000      	b.n	80187e6 <Logging_options_screen_S5+0xc6>
		case 5: if(logging_len<100)logging_len++; break;
 80187e4:	bf00      	nop
	}
}
 80187e6:	bf00      	nop
 80187e8:	46bd      	mov	sp, r7
 80187ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ee:	4770      	bx	lr
 80187f0:	20000912 	.word	0x20000912
 80187f4:	20000970 	.word	0x20000970
 80187f8:	20000971 	.word	0x20000971
 80187fc:	20000972 	.word	0x20000972
 8018800:	20000973 	.word	0x20000973
 8018804:	20000974 	.word	0x20000974
 8018808:	20000975 	.word	0x20000975

0801880c <Menu_GUI>:



void Menu_GUI(uint16_t x_pos, uint16_t y_pos, const unsigned char *menu_string[], uint8_t *str_size,
		uint8_t str_to_str, uint8_t menu_size, uint8_t active_string)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b086      	sub	sp, #24
 8018810:	af00      	add	r7, sp, #0
 8018812:	60ba      	str	r2, [r7, #8]
 8018814:	607b      	str	r3, [r7, #4]
 8018816:	4603      	mov	r3, r0
 8018818:	81fb      	strh	r3, [r7, #14]
 801881a:	460b      	mov	r3, r1
 801881c:	81bb      	strh	r3, [r7, #12]
	uint8_t i=0;
 801881e:	2300      	movs	r3, #0
 8018820:	75fb      	strb	r3, [r7, #23]
	if((old_active_string!=active_string)||(float_menu!=0))
 8018822:	4b42      	ldr	r3, [pc, #264]	; (801892c <Menu_GUI+0x120>)
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801882a:	429a      	cmp	r2, r3
 801882c:	d104      	bne.n	8018838 <Menu_GUI+0x2c>
 801882e:	4b40      	ldr	r3, [pc, #256]	; (8018930 <Menu_GUI+0x124>)
 8018830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d075      	beq.n	8018924 <Menu_GUI+0x118>
	{
		for(i=0;i<menu_size;i++)
 8018838:	2300      	movs	r3, #0
 801883a:	75fb      	strb	r3, [r7, #23]
 801883c:	e063      	b.n	8018906 <Menu_GUI+0xfa>
		{
			if(active_string==i)
 801883e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018842:	7dfb      	ldrb	r3, [r7, #23]
 8018844:	429a      	cmp	r2, r3
 8018846:	d12d      	bne.n	80188a4 <Menu_GUI+0x98>
			{
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018848:	493a      	ldr	r1, [pc, #232]	; (8018934 <Menu_GUI+0x128>)
 801884a:	483b      	ldr	r0, [pc, #236]	; (8018938 <Menu_GUI+0x12c>)
 801884c:	f7fd f93a 	bl	8015ac4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*10))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 8018850:	7dfb      	ldrb	r3, [r7, #23]
 8018852:	687a      	ldr	r2, [r7, #4]
 8018854:	4413      	add	r3, r2
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	461a      	mov	r2, r3
 801885a:	f06f 0309 	mvn.w	r3, #9
 801885e:	fb03 f302 	mul.w	r3, r3, r2
 8018862:	33f0      	adds	r3, #240	; 0xf0
 8018864:	105b      	asrs	r3, r3, #1
 8018866:	b29a      	uxth	r2, r3
 8018868:	89fb      	ldrh	r3, [r7, #14]
 801886a:	4413      	add	r3, r2
 801886c:	b299      	uxth	r1, r3
 801886e:	7dfb      	ldrb	r3, [r7, #23]
 8018870:	b29a      	uxth	r2, r3
 8018872:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018876:	b29b      	uxth	r3, r3
 8018878:	fb12 f303 	smulbb	r3, r2, r3
 801887c:	b29a      	uxth	r2, r3
 801887e:	89bb      	ldrh	r3, [r7, #12]
 8018880:	4413      	add	r3, r2
 8018882:	b29a      	uxth	r2, r3
 8018884:	4b2a      	ldr	r3, [pc, #168]	; (8018930 <Menu_GUI+0x124>)
 8018886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801888a:	b29b      	uxth	r3, r3
 801888c:	4413      	add	r3, r2
 801888e:	b298      	uxth	r0, r3
 8018890:	7dfb      	ldrb	r3, [r7, #23]
 8018892:	009b      	lsls	r3, r3, #2
 8018894:	68ba      	ldr	r2, [r7, #8]
 8018896:	4413      	add	r3, r2
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	4602      	mov	r2, r0
 801889c:	4826      	ldr	r0, [pc, #152]	; (8018938 <Menu_GUI+0x12c>)
 801889e:	f7fd f86f 	bl	8015980 <u8g2_DrawUTF8>
 80188a2:	e02d      	b.n	8018900 <Menu_GUI+0xf4>
			}
			else
			{
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 80188a4:	4925      	ldr	r1, [pc, #148]	; (801893c <Menu_GUI+0x130>)
 80188a6:	4824      	ldr	r0, [pc, #144]	; (8018938 <Menu_GUI+0x12c>)
 80188a8:	f7fd f90c 	bl	8015ac4 <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*9))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 80188ac:	7dfb      	ldrb	r3, [r7, #23]
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	4413      	add	r3, r2
 80188b2:	781b      	ldrb	r3, [r3, #0]
 80188b4:	461a      	mov	r2, r3
 80188b6:	4613      	mov	r3, r2
 80188b8:	075b      	lsls	r3, r3, #29
 80188ba:	1a9b      	subs	r3, r3, r2
 80188bc:	00db      	lsls	r3, r3, #3
 80188be:	1a9b      	subs	r3, r3, r2
 80188c0:	33f0      	adds	r3, #240	; 0xf0
 80188c2:	105b      	asrs	r3, r3, #1
 80188c4:	b29a      	uxth	r2, r3
 80188c6:	89fb      	ldrh	r3, [r7, #14]
 80188c8:	4413      	add	r3, r2
 80188ca:	b299      	uxth	r1, r3
 80188cc:	7dfb      	ldrb	r3, [r7, #23]
 80188ce:	b29a      	uxth	r2, r3
 80188d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188d4:	b29b      	uxth	r3, r3
 80188d6:	fb12 f303 	smulbb	r3, r2, r3
 80188da:	b29a      	uxth	r2, r3
 80188dc:	89bb      	ldrh	r3, [r7, #12]
 80188de:	4413      	add	r3, r2
 80188e0:	b29a      	uxth	r2, r3
 80188e2:	4b13      	ldr	r3, [pc, #76]	; (8018930 <Menu_GUI+0x124>)
 80188e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188e8:	b29b      	uxth	r3, r3
 80188ea:	4413      	add	r3, r2
 80188ec:	b298      	uxth	r0, r3
 80188ee:	7dfb      	ldrb	r3, [r7, #23]
 80188f0:	009b      	lsls	r3, r3, #2
 80188f2:	68ba      	ldr	r2, [r7, #8]
 80188f4:	4413      	add	r3, r2
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	4602      	mov	r2, r0
 80188fa:	480f      	ldr	r0, [pc, #60]	; (8018938 <Menu_GUI+0x12c>)
 80188fc:	f7fd f840 	bl	8015980 <u8g2_DrawUTF8>
		for(i=0;i<menu_size;i++)
 8018900:	7dfb      	ldrb	r3, [r7, #23]
 8018902:	3301      	adds	r3, #1
 8018904:	75fb      	strb	r3, [r7, #23]
 8018906:	7dfa      	ldrb	r2, [r7, #23]
 8018908:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801890c:	429a      	cmp	r2, r3
 801890e:	d396      	bcc.n	801883e <Menu_GUI+0x32>
			}
		}
		old_active_string=active_string;
 8018910:	4a06      	ldr	r2, [pc, #24]	; (801892c <Menu_GUI+0x120>)
 8018912:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018916:	7013      	strb	r3, [r2, #0]

		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8018918:	4807      	ldr	r0, [pc, #28]	; (8018938 <Menu_GUI+0x12c>)
 801891a:	f7fc fa96 	bl	8014e4a <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 801891e:	4806      	ldr	r0, [pc, #24]	; (8018938 <Menu_GUI+0x12c>)
 8018920:	f7fc fa20 	bl	8014d64 <u8g2_ClearBuffer>
	}
}
 8018924:	bf00      	nop
 8018926:	3718      	adds	r7, #24
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}
 801892c:	20000458 	.word	0x20000458
 8018930:	20001d12 	.word	0x20001d12
 8018934:	08027144 	.word	0x08027144
 8018938:	20002090 	.word	0x20002090
 801893c:	08025b18 	.word	0x08025b18

08018940 <Parameter_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Parameter_screen_func(void)
{ Menu_GUI(0, 40, menu_parameter, menu_parameter_size, 17, Menu_parameter_num, Menu_num); }
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af04      	add	r7, sp, #16
 8018946:	4b08      	ldr	r3, [pc, #32]	; (8018968 <Parameter_screen_func+0x28>)
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	9302      	str	r3, [sp, #8]
 801894c:	2307      	movs	r3, #7
 801894e:	9301      	str	r3, [sp, #4]
 8018950:	2311      	movs	r3, #17
 8018952:	9300      	str	r3, [sp, #0]
 8018954:	4b05      	ldr	r3, [pc, #20]	; (801896c <Parameter_screen_func+0x2c>)
 8018956:	4a06      	ldr	r2, [pc, #24]	; (8018970 <Parameter_screen_func+0x30>)
 8018958:	2128      	movs	r1, #40	; 0x28
 801895a:	2000      	movs	r0, #0
 801895c:	f7ff ff56 	bl	801880c <Menu_GUI>
 8018960:	bf00      	nop
 8018962:	46bd      	mov	sp, r7
 8018964:	bd80      	pop	{r7, pc}
 8018966:	bf00      	nop
 8018968:	20000459 	.word	0x20000459
 801896c:	0802b4f4 	.word	0x0802b4f4
 8018970:	20000480 	.word	0x20000480

08018974 <Parameter_screen_S9>:



// MENU
void Parameter_screen_S9(void)
{
 8018974:	b480      	push	{r7}
 8018976:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8018978:	4b06      	ldr	r3, [pc, #24]	; (8018994 <Parameter_screen_S9+0x20>)
 801897a:	2204      	movs	r2, #4
 801897c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801897e:	4b06      	ldr	r3, [pc, #24]	; (8018998 <Parameter_screen_S9+0x24>)
 8018980:	22ff      	movs	r2, #255	; 0xff
 8018982:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 8018984:	4b05      	ldr	r3, [pc, #20]	; (801899c <Parameter_screen_S9+0x28>)
 8018986:	2202      	movs	r2, #2
 8018988:	701a      	strb	r2, [r3, #0]
}
 801898a:	bf00      	nop
 801898c:	46bd      	mov	sp, r7
 801898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018992:	4770      	bx	lr
 8018994:	2000004c 	.word	0x2000004c
 8018998:	20000458 	.word	0x20000458
 801899c:	20000459 	.word	0x20000459

080189a0 <Parameter_screen_S4>:


// ENTER
void Parameter_screen_S4(void)
{
 80189a0:	b480      	push	{r7}
 80189a2:	af00      	add	r7, sp, #0
	switch(Menu_num)
 80189a4:	4b1c      	ldr	r3, [pc, #112]	; (8018a18 <Parameter_screen_S4+0x78>)
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	2b06      	cmp	r3, #6
 80189aa:	d82d      	bhi.n	8018a08 <Parameter_screen_S4+0x68>
 80189ac:	a201      	add	r2, pc, #4	; (adr r2, 80189b4 <Parameter_screen_S4+0x14>)
 80189ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189b2:	bf00      	nop
 80189b4:	080189d1 	.word	0x080189d1
 80189b8:	08018a09 	.word	0x08018a09
 80189bc:	080189df 	.word	0x080189df
 80189c0:	080189ed 	.word	0x080189ed
 80189c4:	08018a09 	.word	0x08018a09
 80189c8:	080189fb 	.word	0x080189fb
 80189cc:	08018a09 	.word	0x08018a09
	{
		// ДИСПЛЕЙ
		case 0: screen=Display_options_screen; old_active_string=0xFF; break;
 80189d0:	4b12      	ldr	r3, [pc, #72]	; (8018a1c <Parameter_screen_S4+0x7c>)
 80189d2:	2205      	movs	r2, #5
 80189d4:	701a      	strb	r2, [r3, #0]
 80189d6:	4b12      	ldr	r3, [pc, #72]	; (8018a20 <Parameter_screen_S4+0x80>)
 80189d8:	22ff      	movs	r2, #255	; 0xff
 80189da:	701a      	strb	r2, [r3, #0]
 80189dc:	e014      	b.n	8018a08 <Parameter_screen_S4+0x68>
		// ГРОМКОСТЬ
		case 1:
		break;
		// ДАТА И ВРЕМЯ
		case 2: screen=RTC_screen; old_active_string=0xFF; break;
 80189de:	4b0f      	ldr	r3, [pc, #60]	; (8018a1c <Parameter_screen_S4+0x7c>)
 80189e0:	2209      	movs	r2, #9
 80189e2:	701a      	strb	r2, [r3, #0]
 80189e4:	4b0e      	ldr	r3, [pc, #56]	; (8018a20 <Parameter_screen_S4+0x80>)
 80189e6:	22ff      	movs	r2, #255	; 0xff
 80189e8:	701a      	strb	r2, [r3, #0]
 80189ea:	e00d      	b.n	8018a08 <Parameter_screen_S4+0x68>
		// АВТООТКЛЮЧЕНИЕ
		case 3: screen=Auto_Off_option_screen; old_active_string=0xFF; break;
 80189ec:	4b0b      	ldr	r3, [pc, #44]	; (8018a1c <Parameter_screen_S4+0x7c>)
 80189ee:	220a      	movs	r2, #10
 80189f0:	701a      	strb	r2, [r3, #0]
 80189f2:	4b0b      	ldr	r3, [pc, #44]	; (8018a20 <Parameter_screen_S4+0x80>)
 80189f4:	22ff      	movs	r2, #255	; 0xff
 80189f6:	701a      	strb	r2, [r3, #0]
 80189f8:	e006      	b.n	8018a08 <Parameter_screen_S4+0x68>
		// НАСТРОЙКА ПОДКЛЮЧЕНИЯ
		case 4: break;
		// НАСТРОЙКА АЦП
		case 5: screen=ADC_options_screen; old_active_string=0xFF; break;
 80189fa:	4b08      	ldr	r3, [pc, #32]	; (8018a1c <Parameter_screen_S4+0x7c>)
 80189fc:	2206      	movs	r2, #6
 80189fe:	701a      	strb	r2, [r3, #0]
 8018a00:	4b07      	ldr	r3, [pc, #28]	; (8018a20 <Parameter_screen_S4+0x80>)
 8018a02:	22ff      	movs	r2, #255	; 0xff
 8018a04:	701a      	strb	r2, [r3, #0]
 8018a06:	bf00      	nop
		// РЕЧЕВОЕ ИНФОРМИРОВАНИЕ
		case 6: break;
	}
	edit_param=0;
 8018a08:	4b06      	ldr	r3, [pc, #24]	; (8018a24 <Parameter_screen_S4+0x84>)
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	701a      	strb	r2, [r3, #0]
}
 8018a0e:	bf00      	nop
 8018a10:	46bd      	mov	sp, r7
 8018a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a16:	4770      	bx	lr
 8018a18:	20000459 	.word	0x20000459
 8018a1c:	2000004c 	.word	0x2000004c
 8018a20:	20000458 	.word	0x20000458
 8018a24:	20000912 	.word	0x20000912

08018a28 <Parameter_screen_S7>:

// DOWN
void Parameter_screen_S7(void)
{
 8018a28:	b480      	push	{r7}
 8018a2a:	af00      	add	r7, sp, #0
		if(Menu_num>0)
 8018a2c:	4b09      	ldr	r3, [pc, #36]	; (8018a54 <Parameter_screen_S7+0x2c>)
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d006      	beq.n	8018a42 <Parameter_screen_S7+0x1a>
		{
			Menu_num--;
 8018a34:	4b07      	ldr	r3, [pc, #28]	; (8018a54 <Parameter_screen_S7+0x2c>)
 8018a36:	781b      	ldrb	r3, [r3, #0]
 8018a38:	3b01      	subs	r3, #1
 8018a3a:	b2da      	uxtb	r2, r3
 8018a3c:	4b05      	ldr	r3, [pc, #20]	; (8018a54 <Parameter_screen_S7+0x2c>)
 8018a3e:	701a      	strb	r2, [r3, #0]
			//float_menu=-2;
		}
		else Menu_num=Menu_parameter_num-1;
}
 8018a40:	e002      	b.n	8018a48 <Parameter_screen_S7+0x20>
		else Menu_num=Menu_parameter_num-1;
 8018a42:	4b04      	ldr	r3, [pc, #16]	; (8018a54 <Parameter_screen_S7+0x2c>)
 8018a44:	2206      	movs	r2, #6
 8018a46:	701a      	strb	r2, [r3, #0]
}
 8018a48:	bf00      	nop
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a50:	4770      	bx	lr
 8018a52:	bf00      	nop
 8018a54:	20000459 	.word	0x20000459

08018a58 <Parameter_screen_S6>:

// UP
void Parameter_screen_S6(void)
{
 8018a58:	b480      	push	{r7}
 8018a5a:	af00      	add	r7, sp, #0
		if(Menu_num<(Menu_parameter_num-1))
 8018a5c:	4b09      	ldr	r3, [pc, #36]	; (8018a84 <Parameter_screen_S6+0x2c>)
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	2b05      	cmp	r3, #5
 8018a62:	d806      	bhi.n	8018a72 <Parameter_screen_S6+0x1a>
		{
			Menu_num++;
 8018a64:	4b07      	ldr	r3, [pc, #28]	; (8018a84 <Parameter_screen_S6+0x2c>)
 8018a66:	781b      	ldrb	r3, [r3, #0]
 8018a68:	3301      	adds	r3, #1
 8018a6a:	b2da      	uxtb	r2, r3
 8018a6c:	4b05      	ldr	r3, [pc, #20]	; (8018a84 <Parameter_screen_S6+0x2c>)
 8018a6e:	701a      	strb	r2, [r3, #0]
			//float_menu=2;
		}
		else Menu_num=0;
}
 8018a70:	e002      	b.n	8018a78 <Parameter_screen_S6+0x20>
		else Menu_num=0;
 8018a72:	4b04      	ldr	r3, [pc, #16]	; (8018a84 <Parameter_screen_S6+0x2c>)
 8018a74:	2200      	movs	r2, #0
 8018a76:	701a      	strb	r2, [r3, #0]
}
 8018a78:	bf00      	nop
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a80:	4770      	bx	lr
 8018a82:	bf00      	nop
 8018a84:	20000459 	.word	0x20000459

08018a88 <Option_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Option_screen_func(void)
{ Menu_GUI(0, 16, menu_option, menu_option_size, 17, Menu_option_num, Menu_num); }
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af04      	add	r7, sp, #16
 8018a8e:	4b08      	ldr	r3, [pc, #32]	; (8018ab0 <Option_screen_func+0x28>)
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	9302      	str	r3, [sp, #8]
 8018a94:	2309      	movs	r3, #9
 8018a96:	9301      	str	r3, [sp, #4]
 8018a98:	2311      	movs	r3, #17
 8018a9a:	9300      	str	r3, [sp, #0]
 8018a9c:	4b05      	ldr	r3, [pc, #20]	; (8018ab4 <Option_screen_func+0x2c>)
 8018a9e:	4a06      	ldr	r2, [pc, #24]	; (8018ab8 <Option_screen_func+0x30>)
 8018aa0:	2110      	movs	r1, #16
 8018aa2:	2000      	movs	r0, #0
 8018aa4:	f7ff feb2 	bl	801880c <Menu_GUI>
 8018aa8:	bf00      	nop
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}
 8018aae:	bf00      	nop
 8018ab0:	20000459 	.word	0x20000459
 8018ab4:	0802b41c 	.word	0x0802b41c
 8018ab8:	2000045c 	.word	0x2000045c

08018abc <Option_screen_S9>:


// MENU
void Option_screen_S9(void)
{
 8018abc:	b480      	push	{r7}
 8018abe:	af00      	add	r7, sp, #0
		screen=Main_screen;
 8018ac0:	4b05      	ldr	r3, [pc, #20]	; (8018ad8 <Option_screen_S9+0x1c>)
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 8018ac6:	4b05      	ldr	r3, [pc, #20]	; (8018adc <Option_screen_S9+0x20>)
 8018ac8:	22ff      	movs	r2, #255	; 0xff
 8018aca:	701a      	strb	r2, [r3, #0]
}
 8018acc:	bf00      	nop
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad4:	4770      	bx	lr
 8018ad6:	bf00      	nop
 8018ad8:	2000004c 	.word	0x2000004c
 8018adc:	20000458 	.word	0x20000458

08018ae0 <Option_screen_S7>:

// DOWN
void Option_screen_S7(void)
{
 8018ae0:	b480      	push	{r7}
 8018ae2:	af00      	add	r7, sp, #0
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018ae4:	4b09      	ldr	r3, [pc, #36]	; (8018b0c <Option_screen_S7+0x2c>)
 8018ae6:	781b      	ldrb	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d006      	beq.n	8018afa <Option_screen_S7+0x1a>
 8018aec:	4b07      	ldr	r3, [pc, #28]	; (8018b0c <Option_screen_S7+0x2c>)
 8018aee:	781b      	ldrb	r3, [r3, #0]
 8018af0:	3b01      	subs	r3, #1
 8018af2:	b2da      	uxtb	r2, r3
 8018af4:	4b05      	ldr	r3, [pc, #20]	; (8018b0c <Option_screen_S7+0x2c>)
 8018af6:	701a      	strb	r2, [r3, #0]
}
 8018af8:	e002      	b.n	8018b00 <Option_screen_S7+0x20>
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018afa:	4b04      	ldr	r3, [pc, #16]	; (8018b0c <Option_screen_S7+0x2c>)
 8018afc:	2208      	movs	r2, #8
 8018afe:	701a      	strb	r2, [r3, #0]
}
 8018b00:	bf00      	nop
 8018b02:	46bd      	mov	sp, r7
 8018b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b08:	4770      	bx	lr
 8018b0a:	bf00      	nop
 8018b0c:	20000459 	.word	0x20000459

08018b10 <Option_screen_S6>:

// UP
void Option_screen_S6(void)
{
 8018b10:	b480      	push	{r7}
 8018b12:	af00      	add	r7, sp, #0
		if(++Menu_num==Menu_option_num)Menu_num=0;
 8018b14:	4b08      	ldr	r3, [pc, #32]	; (8018b38 <Option_screen_S6+0x28>)
 8018b16:	781b      	ldrb	r3, [r3, #0]
 8018b18:	3301      	adds	r3, #1
 8018b1a:	b2da      	uxtb	r2, r3
 8018b1c:	4b06      	ldr	r3, [pc, #24]	; (8018b38 <Option_screen_S6+0x28>)
 8018b1e:	701a      	strb	r2, [r3, #0]
 8018b20:	4b05      	ldr	r3, [pc, #20]	; (8018b38 <Option_screen_S6+0x28>)
 8018b22:	781b      	ldrb	r3, [r3, #0]
 8018b24:	2b09      	cmp	r3, #9
 8018b26:	d102      	bne.n	8018b2e <Option_screen_S6+0x1e>
 8018b28:	4b03      	ldr	r3, [pc, #12]	; (8018b38 <Option_screen_S6+0x28>)
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	701a      	strb	r2, [r3, #0]
}
 8018b2e:	bf00      	nop
 8018b30:	46bd      	mov	sp, r7
 8018b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b36:	4770      	bx	lr
 8018b38:	20000459 	.word	0x20000459

08018b3c <Option_screen_S4>:

// ENTER
void Option_screen_S4(void)
{
 8018b3c:	b480      	push	{r7}
 8018b3e:	af00      	add	r7, sp, #0
	switch(Menu_num)
 8018b40:	4b1b      	ldr	r3, [pc, #108]	; (8018bb0 <Option_screen_S4+0x74>)
 8018b42:	781b      	ldrb	r3, [r3, #0]
 8018b44:	2b08      	cmp	r3, #8
 8018b46:	d825      	bhi.n	8018b94 <Option_screen_S4+0x58>
 8018b48:	a201      	add	r2, pc, #4	; (adr r2, 8018b50 <Option_screen_S4+0x14>)
 8018b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b4e:	bf00      	nop
 8018b50:	08018b75 	.word	0x08018b75
 8018b54:	08018b95 	.word	0x08018b95
 8018b58:	08018b7d 	.word	0x08018b7d
 8018b5c:	08018b85 	.word	0x08018b85
 8018b60:	08018b95 	.word	0x08018b95
 8018b64:	08018b8d 	.word	0x08018b8d
 8018b68:	08018b95 	.word	0x08018b95
 8018b6c:	08018b95 	.word	0x08018b95
 8018b70:	08018b95 	.word	0x08018b95
	{
		// ИЗМЕРЕНИЕ
		case 0: screen=Measure_options_screen; break;
 8018b74:	4b0f      	ldr	r3, [pc, #60]	; (8018bb4 <Option_screen_S4+0x78>)
 8018b76:	2207      	movs	r2, #7
 8018b78:	701a      	strb	r2, [r3, #0]
 8018b7a:	e00b      	b.n	8018b94 <Option_screen_S4+0x58>
		// 24 ВОЛЬТА
		case 1: break;
		// ПАРАМЕТРЫ
		case 2: screen=Parameter_screen; break;
 8018b7c:	4b0d      	ldr	r3, [pc, #52]	; (8018bb4 <Option_screen_S4+0x78>)
 8018b7e:	2208      	movs	r2, #8
 8018b80:	701a      	strb	r2, [r3, #0]
 8018b82:	e007      	b.n	8018b94 <Option_screen_S4+0x58>
		// О ПРИБОРЕ
		case 3: screen=About_options_screen; break;
 8018b84:	4b0b      	ldr	r3, [pc, #44]	; (8018bb4 <Option_screen_S4+0x78>)
 8018b86:	220b      	movs	r2, #11
 8018b88:	701a      	strb	r2, [r3, #0]
 8018b8a:	e003      	b.n	8018b94 <Option_screen_S4+0x58>
		// КАЛИБРОВКА
		case 4: break;
		// ЛОГГИРОВАНИЕ
		case 5: screen=Logging_options_screen; break;
 8018b8c:	4b09      	ldr	r3, [pc, #36]	; (8018bb4 <Option_screen_S4+0x78>)
 8018b8e:	220c      	movs	r2, #12
 8018b90:	701a      	strb	r2, [r3, #0]
 8018b92:	bf00      	nop
		// ТЕХ ПАРАМЕТРЫ
		case 7: break;
		// СЕРВИСНОЕ МЕНЮ
		case 8: break;
	}
	Menu_num=0;
 8018b94:	4b06      	ldr	r3, [pc, #24]	; (8018bb0 <Option_screen_S4+0x74>)
 8018b96:	2200      	movs	r2, #0
 8018b98:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018b9a:	4b07      	ldr	r3, [pc, #28]	; (8018bb8 <Option_screen_S4+0x7c>)
 8018b9c:	22ff      	movs	r2, #255	; 0xff
 8018b9e:	701a      	strb	r2, [r3, #0]
	edit_param=0;
 8018ba0:	4b06      	ldr	r3, [pc, #24]	; (8018bbc <Option_screen_S4+0x80>)
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	701a      	strb	r2, [r3, #0]
}
 8018ba6:	bf00      	nop
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bae:	4770      	bx	lr
 8018bb0:	20000459 	.word	0x20000459
 8018bb4:	2000004c 	.word	0x2000004c
 8018bb8:	20000458 	.word	0x20000458
 8018bbc:	20000912 	.word	0x20000912

08018bc0 <menu_timer>:
//
//------------------------------------------------------------------------------------------------------------------

uint8_t menu_delay = 0;
void menu_timer(void)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	af00      	add	r7, sp, #0
	if(++menu_delay==25)
 8018bc4:	4b16      	ldr	r3, [pc, #88]	; (8018c20 <menu_timer+0x60>)
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	3301      	adds	r3, #1
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	4b14      	ldr	r3, [pc, #80]	; (8018c20 <menu_timer+0x60>)
 8018bce:	701a      	strb	r2, [r3, #0]
 8018bd0:	4b13      	ldr	r3, [pc, #76]	; (8018c20 <menu_timer+0x60>)
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b19      	cmp	r3, #25
 8018bd6:	d11e      	bne.n	8018c16 <menu_timer+0x56>
	{
		if(float_menu>0)float_menu--;
 8018bd8:	4b12      	ldr	r3, [pc, #72]	; (8018c24 <menu_timer+0x64>)
 8018bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	dd08      	ble.n	8018bf4 <menu_timer+0x34>
 8018be2:	4b10      	ldr	r3, [pc, #64]	; (8018c24 <menu_timer+0x64>)
 8018be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018be8:	b29b      	uxth	r3, r3
 8018bea:	3b01      	subs	r3, #1
 8018bec:	b29b      	uxth	r3, r3
 8018bee:	b21a      	sxth	r2, r3
 8018bf0:	4b0c      	ldr	r3, [pc, #48]	; (8018c24 <menu_timer+0x64>)
 8018bf2:	801a      	strh	r2, [r3, #0]
		if(float_menu<0)float_menu++;
 8018bf4:	4b0b      	ldr	r3, [pc, #44]	; (8018c24 <menu_timer+0x64>)
 8018bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	da08      	bge.n	8018c10 <menu_timer+0x50>
 8018bfe:	4b09      	ldr	r3, [pc, #36]	; (8018c24 <menu_timer+0x64>)
 8018c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	3301      	adds	r3, #1
 8018c08:	b29b      	uxth	r3, r3
 8018c0a:	b21a      	sxth	r2, r3
 8018c0c:	4b05      	ldr	r3, [pc, #20]	; (8018c24 <menu_timer+0x64>)
 8018c0e:	801a      	strh	r2, [r3, #0]
		menu_delay=0;
 8018c10:	4b03      	ldr	r3, [pc, #12]	; (8018c20 <menu_timer+0x60>)
 8018c12:	2200      	movs	r2, #0
 8018c14:	701a      	strb	r2, [r3, #0]
	}
}
 8018c16:	bf00      	nop
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr
 8018c20:	20001d14 	.word	0x20001d14
 8018c24:	20001d12 	.word	0x20001d12

08018c28 <MX_USB_DEVICE_Init>:




void MX_USB_DEVICE_Init(void)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	490a      	ldr	r1, [pc, #40]	; (8018c58 <MX_USB_DEVICE_Init+0x30>)
 8018c30:	480a      	ldr	r0, [pc, #40]	; (8018c5c <MX_USB_DEVICE_Init+0x34>)
 8018c32:	f001 f965 	bl	8019f00 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC_CDC);
 8018c36:	490a      	ldr	r1, [pc, #40]	; (8018c60 <MX_USB_DEVICE_Init+0x38>)
 8018c38:	4808      	ldr	r0, [pc, #32]	; (8018c5c <MX_USB_DEVICE_Init+0x34>)
 8018c3a:	f001 f995 	bl	8019f68 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8018c3e:	4909      	ldr	r1, [pc, #36]	; (8018c64 <MX_USB_DEVICE_Init+0x3c>)
 8018c40:	4806      	ldr	r0, [pc, #24]	; (8018c5c <MX_USB_DEVICE_Init+0x34>)
 8018c42:	f000 fb3c 	bl	80192be <USBD_CDC_RegisterInterface>
	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018c46:	4908      	ldr	r1, [pc, #32]	; (8018c68 <MX_USB_DEVICE_Init+0x40>)
 8018c48:	4804      	ldr	r0, [pc, #16]	; (8018c5c <MX_USB_DEVICE_Init+0x34>)
 8018c4a:	f002 fd9d 	bl	801b788 <USBD_MSC_RegisterStorage>
	USBD_Start(&hUsbDeviceFS);
 8018c4e:	4803      	ldr	r0, [pc, #12]	; (8018c5c <MX_USB_DEVICE_Init+0x34>)
 8018c50:	f001 f9b1 	bl	8019fb6 <USBD_Start>
}
 8018c54:	bf00      	nop
 8018c56:	bd80      	pop	{r7, pc}
 8018c58:	20000620 	.word	0x20000620
 8018c5c:	20008824 	.word	0x20008824
 8018c60:	2000049c 	.word	0x2000049c
 8018c64:	2000060c 	.word	0x2000060c
 8018c68:	200006c4 	.word	0x200006c4

08018c6c <USBD_MSC_CDC_GetDeviceQualifierDescriptor>:
};



uint8_t *USBD_MSC_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018c6c:	b480      	push	{r7}
 8018c6e:	b083      	sub	sp, #12
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_DeviceQualifierDesc);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	220a      	movs	r2, #10
 8018c78:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_DeviceQualifierDesc;
 8018c7a:	4b03      	ldr	r3, [pc, #12]	; (8018c88 <USBD_MSC_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	370c      	adds	r7, #12
 8018c80:	46bd      	mov	sp, r7
 8018c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c86:	4770      	bx	lr
 8018c88:	20000600 	.word	0x20000600

08018c8c <USBD_MSC_CDC_GetOtherSpeedCfgDesc>:


uint8_t *USBD_MSC_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	b083      	sub	sp, #12
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_OtherSpeedCfgDesc);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	2262      	movs	r2, #98	; 0x62
 8018c98:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_OtherSpeedCfgDesc;
 8018c9a:	4b03      	ldr	r3, [pc, #12]	; (8018ca8 <USBD_MSC_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	370c      	adds	r7, #12
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca6:	4770      	bx	lr
 8018ca8:	2000059c 	.word	0x2000059c

08018cac <USBD_MSC_CDC_GetHSCfgDesc>:

uint8_t *USBD_MSC_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018cac:	b480      	push	{r7}
 8018cae:	b083      	sub	sp, #12
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgHSDesc);
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	2262      	movs	r2, #98	; 0x62
 8018cb8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgHSDesc;
 8018cba:	4b03      	ldr	r3, [pc, #12]	; (8018cc8 <USBD_MSC_CDC_GetHSCfgDesc+0x1c>)
}
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	370c      	adds	r7, #12
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc6:	4770      	bx	lr
 8018cc8:	200004d4 	.word	0x200004d4

08018ccc <USBD_MSC_CDC_GetFSCfgDesc>:


uint8_t *USBD_MSC_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018ccc:	b480      	push	{r7}
 8018cce:	b083      	sub	sp, #12
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgFSDesc);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2262      	movs	r2, #98	; 0x62
 8018cd8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgFSDesc;
 8018cda:	4b03      	ldr	r3, [pc, #12]	; (8018ce8 <USBD_MSC_CDC_GetFSCfgDesc+0x1c>)
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	370c      	adds	r7, #12
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr
 8018ce8:	20000538 	.word	0x20000538

08018cec <USBD_MSC_CDC_Init>:


// Инициализация композитного устройства
static uint8_t  USBD_MSC_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	70fb      	strb	r3, [r7, #3]
	/* MSC initialization */
	uint8_t ret = USBD_MSC_Init (pdev, cfgidx);
 8018cf8:	78fb      	ldrb	r3, [r7, #3]
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	6878      	ldr	r0, [r7, #4]
 8018cfe:	f002 fbb8 	bl	801b472 <USBD_MSC_Init>
 8018d02:	4603      	mov	r3, r0
 8018d04:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018d06:	7bfb      	ldrb	r3, [r7, #15]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d001      	beq.n	8018d10 <USBD_MSC_CDC_Init+0x24>
			return ret;
 8018d0c:	7bfb      	ldrb	r3, [r7, #15]
 8018d0e:	e00c      	b.n	8018d2a <USBD_MSC_CDC_Init+0x3e>

	/* CDC initialization */
	ret = USBD_CDC_Init (pdev, cfgidx);
 8018d10:	78fb      	ldrb	r3, [r7, #3]
 8018d12:	4619      	mov	r1, r3
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f000 f88b 	bl	8018e30 <USBD_CDC_Init>
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018d1e:	7bfb      	ldrb	r3, [r7, #15]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d001      	beq.n	8018d28 <USBD_MSC_CDC_Init+0x3c>
			return ret;
 8018d24:	7bfb      	ldrb	r3, [r7, #15]
 8018d26:	e000      	b.n	8018d2a <USBD_MSC_CDC_Init+0x3e>

	return USBD_OK;
 8018d28:	2300      	movs	r3, #0
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3710      	adds	r7, #16
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}

08018d32 <USBD_MSC_CDC_DeInit>:


// Деинициализация композитного устройства
static uint8_t  USBD_MSC_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018d32:	b580      	push	{r7, lr}
 8018d34:	b082      	sub	sp, #8
 8018d36:	af00      	add	r7, sp, #0
 8018d38:	6078      	str	r0, [r7, #4]
 8018d3a:	460b      	mov	r3, r1
 8018d3c:	70fb      	strb	r3, [r7, #3]
       	/* MSC De-initialization */
       	USBD_MSC_DeInit(pdev, cfgidx);
 8018d3e:	78fb      	ldrb	r3, [r7, #3]
 8018d40:	4619      	mov	r1, r3
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	f002 fbe2 	bl	801b50c <USBD_MSC_DeInit>

       	/* CDC De-initialization */
       	USBD_CDC_DeInit(pdev, cfgidx);
 8018d48:	78fb      	ldrb	r3, [r7, #3]
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f000 f8ed 	bl	8018f2c <USBD_CDC_DeInit>

       	return USBD_OK;
 8018d52:	2300      	movs	r3, #0
}
 8018d54:	4618      	mov	r0, r3
 8018d56:	3708      	adds	r7, #8
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd80      	pop	{r7, pc}

08018d5c <USBD_MSC_CDC_Setup>:



// Setup для композитного устройства
static uint8_t  USBD_MSC_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	781b      	ldrb	r3, [r3, #0]
 8018d6a:	f003 0303 	and.w	r3, r3, #3
 8018d6e:	2b01      	cmp	r3, #1
 8018d70:	d103      	bne.n	8018d7a <USBD_MSC_CDC_Setup+0x1e>
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	889b      	ldrh	r3, [r3, #4]
 8018d76:	2b01      	cmp	r3, #1
 8018d78:	d00b      	beq.n	8018d92 <USBD_MSC_CDC_Setup+0x36>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	781b      	ldrb	r3, [r3, #0]
 8018d7e:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018d82:	2b02      	cmp	r3, #2
 8018d84:	d10b      	bne.n	8018d9e <USBD_MSC_CDC_Setup+0x42>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	889b      	ldrh	r3, [r3, #4]
 8018d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d8e:	2b01      	cmp	r3, #1
 8018d90:	d105      	bne.n	8018d9e <USBD_MSC_CDC_Setup+0x42>
	{
		return USBD_MSC_Setup(pdev, req);
 8018d92:	6839      	ldr	r1, [r7, #0]
 8018d94:	6878      	ldr	r0, [r7, #4]
 8018d96:	f002 fbe5 	bl	801b564 <USBD_MSC_Setup>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	e004      	b.n	8018da8 <USBD_MSC_CDC_Setup+0x4c>
	}

	return USBD_CDC_Setup(pdev, req);
 8018d9e:	6839      	ldr	r1, [r7, #0]
 8018da0:	6878      	ldr	r0, [r7, #4]
 8018da2:	f000 f8ff 	bl	8018fa4 <USBD_CDC_Setup>
 8018da6:	4603      	mov	r3, r0
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3708      	adds	r7, #8
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}

08018db0 <USBD_MSC_CDC_DataIn>:


// Data IN для композитного устройства
static uint8_t  USBD_MSC_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b082      	sub	sp, #8
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	460b      	mov	r3, r1
 8018dba:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018dbc:	78fb      	ldrb	r3, [r7, #3]
 8018dbe:	2b01      	cmp	r3, #1
 8018dc0:	d106      	bne.n	8018dd0 <USBD_MSC_CDC_DataIn+0x20>
		return USBD_MSC_DataIn(pdev, epnum);
 8018dc2:	78fb      	ldrb	r3, [r7, #3]
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f002 fcbe 	bl	801b748 <USBD_MSC_DataIn>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	e005      	b.n	8018ddc <USBD_MSC_CDC_DataIn+0x2c>

	return USBD_CDC_DataIn(pdev, epnum);
 8018dd0:	78fb      	ldrb	r3, [r7, #3]
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f000 f9b3 	bl	8019140 <USBD_CDC_DataIn>
 8018dda:	4603      	mov	r3, r0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <USBD_MSC_CDC_DataOut>:


// Data OUT для композитного устройства
static uint8_t  USBD_MSC_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b082      	sub	sp, #8
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	460b      	mov	r3, r1
 8018dee:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018df0:	78fb      	ldrb	r3, [r7, #3]
 8018df2:	2b01      	cmp	r3, #1
 8018df4:	d106      	bne.n	8018e04 <USBD_MSC_CDC_DataOut+0x20>
		return USBD_MSC_DataOut(pdev, epnum);
 8018df6:	78fb      	ldrb	r3, [r7, #3]
 8018df8:	4619      	mov	r1, r3
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f002 fcb4 	bl	801b768 <USBD_MSC_DataOut>
 8018e00:	4603      	mov	r3, r0
 8018e02:	e005      	b.n	8018e10 <USBD_MSC_CDC_DataOut+0x2c>

	return USBD_CDC_DataOut(pdev, epnum);
 8018e04:	78fb      	ldrb	r3, [r7, #3]
 8018e06:	4619      	mov	r1, r3
 8018e08:	6878      	ldr	r0, [r7, #4]
 8018e0a:	f000 f9fe 	bl	801920a <USBD_CDC_DataOut>
 8018e0e:	4603      	mov	r3, r0
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3708      	adds	r7, #8
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bd80      	pop	{r7, pc}

08018e18 <USBD_MSC_CDC_EP0_RxReady>:


// Обработчик приема EP0
static uint8_t  USBD_MSC_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b082      	sub	sp, #8
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
    	return USBD_CDC_EP0_RxReady(pdev);
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f000 fa1d 	bl	8019260 <USBD_CDC_EP0_RxReady>
 8018e26:	4603      	mov	r3, r0
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	3708      	adds	r7, #8
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b084      	sub	sp, #16
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	460b      	mov	r3, r1
 8018e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hcdc;


  hcdc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 8018e3c:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8018e40:	f001 f840 	bl	8019ec4 <USBD_static_malloc>
 8018e44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d105      	bne.n	8018e58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassDataCDC = NULL;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    return (uint8_t)USBD_EMEM;
 8018e54:	2302      	movs	r3, #2
 8018e56:	e065      	b.n	8018f24 <USBD_CDC_Init+0xf4>
  }

  pdev->pClassDataCDC = (void *)hcdc;
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	68fa      	ldr	r2, [r7, #12]
 8018e5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	7c1b      	ldrb	r3, [r3, #16]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d118      	bne.n	8018e9a <USBD_CDC_Init+0x6a>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018e68:	2340      	movs	r3, #64	; 0x40
 8018e6a:	2202      	movs	r2, #2
 8018e6c:	2183      	movs	r1, #131	; 0x83
 8018e6e:	6878      	ldr	r0, [r7, #4]
 8018e70:	f000 fdde 	bl	8019a30 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2201      	movs	r2, #1
 8018e78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018e7c:	2340      	movs	r3, #64	; 0x40
 8018e7e:	2202      	movs	r2, #2
 8018e80:	2103      	movs	r1, #3
 8018e82:	6878      	ldr	r0, [r7, #4]
 8018e84:	f000 fdd4 	bl	8019a30 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2264      	movs	r2, #100	; 0x64
 8018e94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8018e98:	e017      	b.n	8018eca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018e9a:	2340      	movs	r3, #64	; 0x40
 8018e9c:	2202      	movs	r2, #2
 8018e9e:	2183      	movs	r1, #131	; 0x83
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f000 fdc5 	bl	8019a30 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	2201      	movs	r2, #1
 8018eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018eae:	2340      	movs	r3, #64	; 0x40
 8018eb0:	2202      	movs	r2, #2
 8018eb2:	2103      	movs	r1, #3
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f000 fdbb 	bl	8019a30 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2201      	movs	r2, #1
 8018ebe:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	2264      	movs	r2, #100	; 0x64
 8018ec6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018eca:	2340      	movs	r3, #64	; 0x40
 8018ecc:	2203      	movs	r2, #3
 8018ece:	2182      	movs	r1, #130	; 0x82
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f000 fdad 	bl	8019a30 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2201      	movs	r2, #1
 8018eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Init();
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	2200      	movs	r2, #0
 8018eec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hcdc->RxState = 0U;
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	7c1b      	ldrb	r3, [r3, #16]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d108      	bne.n	8018f12 <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018f06:	2340      	movs	r3, #64	; 0x40
 8018f08:	2103      	movs	r1, #3
 8018f0a:	6878      	ldr	r0, [r7, #4]
 8018f0c:	f000 ff40 	bl	8019d90 <USBD_LL_PrepareReceive>
 8018f10:	e007      	b.n	8018f22 <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018f18:	2340      	movs	r3, #64	; 0x40
 8018f1a:	2103      	movs	r1, #3
 8018f1c:	6878      	ldr	r0, [r7, #4]
 8018f1e:	f000 ff37 	bl	8019d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018f22:	2300      	movs	r3, #0
}
 8018f24:	4618      	mov	r0, r3
 8018f26:	3710      	adds	r7, #16
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bd80      	pop	{r7, pc}

08018f2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	460b      	mov	r3, r1
 8018f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018f38:	2183      	movs	r1, #131	; 0x83
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f000 fdb6 	bl	8019aac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	2200      	movs	r2, #0
 8018f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018f48:	2103      	movs	r1, #3
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f000 fdae 	bl	8019aac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	2200      	movs	r2, #0
 8018f54:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8018f58:	2182      	movs	r1, #130	; 0x82
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f000 fda6 	bl	8019aac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2200      	movs	r2, #0
 8018f64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCDC != NULL)
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d00e      	beq.n	8018f98 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->DeInit();
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCDC);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f000 ffa8 	bl	8019ee0 <USBD_static_free>
    pdev->pClassDataCDC = NULL;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2200      	movs	r2, #0
 8018f94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }

  return (uint8_t)USBD_OK;
 8018f98:	2300      	movs	r3, #0
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	3708      	adds	r7, #8
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}
	...

08018fa4 <USBD_CDC_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b086      	sub	sp, #24
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018fb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018fba:	2300      	movs	r3, #0
 8018fbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018fc2:	693b      	ldr	r3, [r7, #16]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d101      	bne.n	8018fcc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018fc8:	2303      	movs	r3, #3
 8018fca:	e0b5      	b.n	8019138 <USBD_CDC_Setup+0x194>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d045      	beq.n	8019064 <USBD_CDC_Setup+0xc0>
 8018fd8:	2b20      	cmp	r3, #32
 8018fda:	f040 80a5 	bne.w	8019128 <USBD_CDC_Setup+0x184>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	88db      	ldrh	r3, [r3, #6]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d034      	beq.n	8019050 <USBD_CDC_Setup+0xac>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	b25b      	sxtb	r3, r3
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	da1a      	bge.n	8019026 <USBD_CDC_Setup+0x82>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ff6:	689b      	ldr	r3, [r3, #8]
 8018ff8:	683a      	ldr	r2, [r7, #0]
 8018ffa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018ffc:	693a      	ldr	r2, [r7, #16]
 8018ffe:	f502 711d 	add.w	r1, r2, #628	; 0x274
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019002:	683a      	ldr	r2, [r7, #0]
 8019004:	88d2      	ldrh	r2, [r2, #6]
 8019006:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8019008:	683b      	ldr	r3, [r7, #0]
 801900a:	88db      	ldrh	r3, [r3, #6]
 801900c:	2b08      	cmp	r3, #8
 801900e:	bf28      	it	cs
 8019010:	2308      	movcs	r3, #8
 8019012:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801901a:	89fa      	ldrh	r2, [r7, #14]
 801901c:	4619      	mov	r1, r3
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f002 f9a7 	bl	801b372 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8019024:	e087      	b.n	8019136 <USBD_CDC_Setup+0x192>
          hcdc->CmdOpCode = req->bRequest;
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	785a      	ldrb	r2, [r3, #1]
 801902a:	693b      	ldr	r3, [r7, #16]
 801902c:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	88db      	ldrh	r3, [r3, #6]
 8019034:	b2da      	uxtb	r2, r3
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801903c:	693b      	ldr	r3, [r7, #16]
 801903e:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	88db      	ldrh	r3, [r3, #6]
 8019046:	461a      	mov	r2, r3
 8019048:	6878      	ldr	r0, [r7, #4]
 801904a:	f002 f9be 	bl	801b3ca <USBD_CtlPrepareRx>
      break;
 801904e:	e072      	b.n	8019136 <USBD_CDC_Setup+0x192>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019056:	689b      	ldr	r3, [r3, #8]
 8019058:	683a      	ldr	r2, [r7, #0]
 801905a:	7850      	ldrb	r0, [r2, #1]
 801905c:	2200      	movs	r2, #0
 801905e:	6839      	ldr	r1, [r7, #0]
 8019060:	4798      	blx	r3
      break;
 8019062:	e068      	b.n	8019136 <USBD_CDC_Setup+0x192>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	785b      	ldrb	r3, [r3, #1]
 8019068:	2b0b      	cmp	r3, #11
 801906a:	d852      	bhi.n	8019112 <USBD_CDC_Setup+0x16e>
 801906c:	a201      	add	r2, pc, #4	; (adr r2, 8019074 <USBD_CDC_Setup+0xd0>)
 801906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019072:	bf00      	nop
 8019074:	080190a5 	.word	0x080190a5
 8019078:	08019121 	.word	0x08019121
 801907c:	08019113 	.word	0x08019113
 8019080:	08019113 	.word	0x08019113
 8019084:	08019113 	.word	0x08019113
 8019088:	08019113 	.word	0x08019113
 801908c:	08019113 	.word	0x08019113
 8019090:	08019113 	.word	0x08019113
 8019094:	08019113 	.word	0x08019113
 8019098:	08019113 	.word	0x08019113
 801909c:	080190cf 	.word	0x080190cf
 80190a0:	080190f9 	.word	0x080190f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	2b03      	cmp	r3, #3
 80190ae:	d107      	bne.n	80190c0 <USBD_CDC_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80190b0:	f107 030a 	add.w	r3, r7, #10
 80190b4:	2202      	movs	r2, #2
 80190b6:	4619      	mov	r1, r3
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f002 f95a 	bl	801b372 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80190be:	e032      	b.n	8019126 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 80190c0:	6839      	ldr	r1, [r7, #0]
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f001 ffc2 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 80190c8:	2303      	movs	r3, #3
 80190ca:	75fb      	strb	r3, [r7, #23]
          break;
 80190cc:	e02b      	b.n	8019126 <USBD_CDC_Setup+0x182>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80190d4:	b2db      	uxtb	r3, r3
 80190d6:	2b03      	cmp	r3, #3
 80190d8:	d107      	bne.n	80190ea <USBD_CDC_Setup+0x146>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80190da:	f107 030d 	add.w	r3, r7, #13
 80190de:	2201      	movs	r2, #1
 80190e0:	4619      	mov	r1, r3
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f002 f945 	bl	801b372 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80190e8:	e01d      	b.n	8019126 <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 80190ea:	6839      	ldr	r1, [r7, #0]
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f001 ffad 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 80190f2:	2303      	movs	r3, #3
 80190f4:	75fb      	strb	r3, [r7, #23]
          break;
 80190f6:	e016      	b.n	8019126 <USBD_CDC_Setup+0x182>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	2b03      	cmp	r3, #3
 8019102:	d00f      	beq.n	8019124 <USBD_CDC_Setup+0x180>
          {
            USBD_CtlError(pdev, req);
 8019104:	6839      	ldr	r1, [r7, #0]
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f001 ffa0 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 801910c:	2303      	movs	r3, #3
 801910e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8019110:	e008      	b.n	8019124 <USBD_CDC_Setup+0x180>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8019112:	6839      	ldr	r1, [r7, #0]
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f001 ff99 	bl	801b04c <USBD_CtlError>
          ret = USBD_FAIL;
 801911a:	2303      	movs	r3, #3
 801911c:	75fb      	strb	r3, [r7, #23]
          break;
 801911e:	e002      	b.n	8019126 <USBD_CDC_Setup+0x182>
          break;
 8019120:	bf00      	nop
 8019122:	e008      	b.n	8019136 <USBD_CDC_Setup+0x192>
          break;
 8019124:	bf00      	nop
      }
      break;
 8019126:	e006      	b.n	8019136 <USBD_CDC_Setup+0x192>

    default:
      USBD_CtlError(pdev, req);
 8019128:	6839      	ldr	r1, [r7, #0]
 801912a:	6878      	ldr	r0, [r7, #4]
 801912c:	f001 ff8e 	bl	801b04c <USBD_CtlError>
      ret = USBD_FAIL;
 8019130:	2303      	movs	r3, #3
 8019132:	75fb      	strb	r3, [r7, #23]
      break;
 8019134:	bf00      	nop
  }

  return (uint8_t)ret;
 8019136:	7dfb      	ldrb	r3, [r7, #23]
}
 8019138:	4618      	mov	r0, r3
 801913a:	3718      	adds	r7, #24
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}

08019140 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b084      	sub	sp, #16
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
 8019148:	460b      	mov	r3, r1
 801914a:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801915a:	2b00      	cmp	r3, #0
 801915c:	d101      	bne.n	8019162 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801915e:	2303      	movs	r3, #3
 8019160:	e04f      	b.n	8019202 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019168:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801916a:	78fa      	ldrb	r2, [r7, #3]
 801916c:	6879      	ldr	r1, [r7, #4]
 801916e:	4613      	mov	r3, r2
 8019170:	009b      	lsls	r3, r3, #2
 8019172:	4413      	add	r3, r2
 8019174:	009b      	lsls	r3, r3, #2
 8019176:	440b      	add	r3, r1
 8019178:	3318      	adds	r3, #24
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d029      	beq.n	80191d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8019180:	78fa      	ldrb	r2, [r7, #3]
 8019182:	6879      	ldr	r1, [r7, #4]
 8019184:	4613      	mov	r3, r2
 8019186:	009b      	lsls	r3, r3, #2
 8019188:	4413      	add	r3, r2
 801918a:	009b      	lsls	r3, r3, #2
 801918c:	440b      	add	r3, r1
 801918e:	3318      	adds	r3, #24
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	78f9      	ldrb	r1, [r7, #3]
 8019194:	68f8      	ldr	r0, [r7, #12]
 8019196:	460b      	mov	r3, r1
 8019198:	00db      	lsls	r3, r3, #3
 801919a:	1a5b      	subs	r3, r3, r1
 801919c:	009b      	lsls	r3, r3, #2
 801919e:	4403      	add	r3, r0
 80191a0:	3344      	adds	r3, #68	; 0x44
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80191a8:	fb03 f301 	mul.w	r3, r3, r1
 80191ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d110      	bne.n	80191d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80191b2:	78fa      	ldrb	r2, [r7, #3]
 80191b4:	6879      	ldr	r1, [r7, #4]
 80191b6:	4613      	mov	r3, r2
 80191b8:	009b      	lsls	r3, r3, #2
 80191ba:	4413      	add	r3, r2
 80191bc:	009b      	lsls	r3, r3, #2
 80191be:	440b      	add	r3, r1
 80191c0:	3318      	adds	r3, #24
 80191c2:	2200      	movs	r2, #0
 80191c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80191c6:	78f9      	ldrb	r1, [r7, #3]
 80191c8:	2300      	movs	r3, #0
 80191ca:	2200      	movs	r2, #0
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f000 fda7 	bl	8019d20 <USBD_LL_Transmit>
 80191d2:	e015      	b.n	8019200 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	2200      	movs	r2, #0
 80191d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt != NULL)
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80191e2:	691b      	ldr	r3, [r3, #16]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d00b      	beq.n	8019200 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80191ee:	691b      	ldr	r3, [r3, #16]
 80191f0:	68ba      	ldr	r2, [r7, #8]
 80191f2:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
 80191f6:	68ba      	ldr	r2, [r7, #8]
 80191f8:	f502 7131 	add.w	r1, r2, #708	; 0x2c4
 80191fc:	78fa      	ldrb	r2, [r7, #3]
 80191fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8019200:	2300      	movs	r3, #0
}
 8019202:	4618      	mov	r0, r3
 8019204:	3710      	adds	r7, #16
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}

0801920a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801920a:	b580      	push	{r7, lr}
 801920c:	b084      	sub	sp, #16
 801920e:	af00      	add	r7, sp, #0
 8019210:	6078      	str	r0, [r7, #4]
 8019212:	460b      	mov	r3, r1
 8019214:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801921c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019224:	2b00      	cmp	r3, #0
 8019226:	d101      	bne.n	801922c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019228:	2303      	movs	r3, #3
 801922a:	e015      	b.n	8019258 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801922c:	78fb      	ldrb	r3, [r7, #3]
 801922e:	4619      	mov	r1, r3
 8019230:	6878      	ldr	r0, [r7, #4]
 8019232:	f000 fde5 	bl	8019e00 <USBD_LL_GetRxDataSize>
 8019236:	4602      	mov	r2, r0
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019244:	68db      	ldr	r3, [r3, #12]
 8019246:	68fa      	ldr	r2, [r7, #12]
 8019248:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 8019252:	4611      	mov	r1, r2
 8019254:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8019256:	2300      	movs	r3, #0
}
 8019258:	4618      	mov	r0, r3
 801925a:	3710      	adds	r7, #16
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b084      	sub	sp, #16
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801926e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d101      	bne.n	801927a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8019276:	2303      	movs	r3, #3
 8019278:	e01d      	b.n	80192b6 <USBD_CDC_EP0_RxReady+0x56>
  }

  if ((pdev->pUserDataCDC != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019280:	2b00      	cmp	r3, #0
 8019282:	d017      	beq.n	80192b4 <USBD_CDC_EP0_RxReady+0x54>
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 801928a:	2bff      	cmp	r3, #255	; 0xff
 801928c:	d012      	beq.n	80192b4 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019294:	689b      	ldr	r3, [r3, #8]
 8019296:	68fa      	ldr	r2, [r7, #12]
 8019298:	f892 02b4 	ldrb.w	r0, [r2, #692]	; 0x2b4
                                                      (uint8_t *)hcdc->data,
 801929c:	68fa      	ldr	r2, [r7, #12]
 801929e:	f502 711d 	add.w	r1, r2, #628	; 0x274
                                                      (uint16_t)hcdc->CmdLength);
 80192a2:	68fa      	ldr	r2, [r7, #12]
 80192a4:	f892 22b5 	ldrb.w	r2, [r2, #693]	; 0x2b5
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 80192a8:	b292      	uxth	r2, r2
 80192aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	22ff      	movs	r2, #255	; 0xff
 80192b0:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
  }

  return (uint8_t)USBD_OK;
 80192b4:	2300      	movs	r3, #0
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3710      	adds	r7, #16
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}

080192be <USBD_CDC_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops)
{
 80192be:	b480      	push	{r7}
 80192c0:	b083      	sub	sp, #12
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	6078      	str	r0, [r7, #4]
 80192c6:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d101      	bne.n	80192d2 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80192ce:	2303      	movs	r3, #3
 80192d0:	e004      	b.n	80192dc <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserDataCDC = fops;
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	683a      	ldr	r2, [r7, #0]
 80192d6:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  return (uint8_t)USBD_OK;
 80192da:	2300      	movs	r3, #0
}
 80192dc:	4618      	mov	r0, r3
 80192de:	370c      	adds	r7, #12
 80192e0:	46bd      	mov	sp, r7
 80192e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e6:	4770      	bx	lr

080192e8 <USBD_CDC_SetTxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 80192e8:	b480      	push	{r7}
 80192ea:	b087      	sub	sp, #28
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	60f8      	str	r0, [r7, #12]
 80192f0:	60b9      	str	r1, [r7, #8]
 80192f2:	607a      	str	r2, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80192fc:	697b      	ldr	r3, [r7, #20]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d101      	bne.n	8019306 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019302:	2303      	movs	r3, #3
 8019304:	e008      	b.n	8019318 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8019306:	697b      	ldr	r3, [r7, #20]
 8019308:	68ba      	ldr	r2, [r7, #8]
 801930a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  hcdc->TxLength = length;
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	687a      	ldr	r2, [r7, #4]
 8019312:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 8019316:	2300      	movs	r3, #0
}
 8019318:	4618      	mov	r0, r3
 801931a:	371c      	adds	r7, #28
 801931c:	46bd      	mov	sp, r7
 801931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019322:	4770      	bx	lr

08019324 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8019324:	b480      	push	{r7}
 8019326:	b085      	sub	sp, #20
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019334:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d101      	bne.n	8019340 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801933c:	2303      	movs	r3, #3
 801933e:	e004      	b.n	801934a <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	683a      	ldr	r2, [r7, #0]
 8019344:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  return (uint8_t)USBD_OK;
 8019348:	2300      	movs	r3, #0
}
 801934a:	4618      	mov	r0, r3
 801934c:	3714      	adds	r7, #20
 801934e:	46bd      	mov	sp, r7
 8019350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019354:	4770      	bx	lr

08019356 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019356:	b580      	push	{r7, lr}
 8019358:	b084      	sub	sp, #16
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019364:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8019366:	2301      	movs	r3, #1
 8019368:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCDC == NULL)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019370:	2b00      	cmp	r3, #0
 8019372:	d101      	bne.n	8019378 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8019374:	2303      	movs	r3, #3
 8019376:	e01a      	b.n	80193ae <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801937e:	2b00      	cmp	r3, #0
 8019380:	d114      	bne.n	80193ac <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	2201      	movs	r2, #1
 8019386:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	655a      	str	r2, [r3, #84]	; 0x54

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8019394:	68bb      	ldr	r3, [r7, #8]
 8019396:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193a0:	2183      	movs	r1, #131	; 0x83
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	f000 fcbc 	bl	8019d20 <USBD_LL_Transmit>

    ret = USBD_OK;
 80193a8:	2300      	movs	r3, #0
 80193aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80193ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80193ae:	4618      	mov	r0, r3
 80193b0:	3710      	adds	r7, #16
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}

080193b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80193b6:	b580      	push	{r7, lr}
 80193b8:	b084      	sub	sp, #16
 80193ba:	af00      	add	r7, sp, #0
 80193bc:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d101      	bne.n	80193d4 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80193d0:	2303      	movs	r3, #3
 80193d2:	e015      	b.n	8019400 <USBD_CDC_ReceivePacket+0x4a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	7c1b      	ldrb	r3, [r3, #16]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d108      	bne.n	80193ee <USBD_CDC_ReceivePacket+0x38>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 80193e2:	2340      	movs	r3, #64	; 0x40
 80193e4:	2103      	movs	r1, #3
 80193e6:	6878      	ldr	r0, [r7, #4]
 80193e8:	f000 fcd2 	bl	8019d90 <USBD_LL_PrepareReceive>
 80193ec:	e007      	b.n	80193fe <USBD_CDC_ReceivePacket+0x48>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 80193f4:	2340      	movs	r3, #64	; 0x40
 80193f6:	2103      	movs	r1, #3
 80193f8:	6878      	ldr	r0, [r7, #4]
 80193fa:	f000 fcc9 	bl	8019d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80193fe:	2300      	movs	r3, #0
}
 8019400:	4618      	mov	r0, r3
 8019402:	3710      	adds	r7, #16
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}

08019408 <CDC_Init_FS>:
};



static int8_t CDC_Init_FS(void)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801940c:	2200      	movs	r2, #0
 801940e:	4905      	ldr	r1, [pc, #20]	; (8019424 <CDC_Init_FS+0x1c>)
 8019410:	4805      	ldr	r0, [pc, #20]	; (8019428 <CDC_Init_FS+0x20>)
 8019412:	f7ff ff69 	bl	80192e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019416:	4905      	ldr	r1, [pc, #20]	; (801942c <CDC_Init_FS+0x24>)
 8019418:	4803      	ldr	r0, [pc, #12]	; (8019428 <CDC_Init_FS+0x20>)
 801941a:	f7ff ff83 	bl	8019324 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801941e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019420:	4618      	mov	r0, r3
 8019422:	bd80      	pop	{r7, pc}
 8019424:	20008afc 	.word	0x20008afc
 8019428:	20008824 	.word	0x20008824
 801942c:	200092fc 	.word	0x200092fc

08019430 <CDC_DeInit_FS>:



static int8_t CDC_DeInit_FS(void)
{
 8019430:	b480      	push	{r7}
 8019432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019434:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019436:	4618      	mov	r0, r3
 8019438:	46bd      	mov	sp, r7
 801943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943e:	4770      	bx	lr

08019440 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019440:	b480      	push	{r7}
 8019442:	b083      	sub	sp, #12
 8019444:	af00      	add	r7, sp, #0
 8019446:	4603      	mov	r3, r0
 8019448:	6039      	str	r1, [r7, #0]
 801944a:	71fb      	strb	r3, [r7, #7]
 801944c:	4613      	mov	r3, r2
 801944e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019450:	79fb      	ldrb	r3, [r7, #7]
 8019452:	2b23      	cmp	r3, #35	; 0x23
 8019454:	d84a      	bhi.n	80194ec <CDC_Control_FS+0xac>
 8019456:	a201      	add	r2, pc, #4	; (adr r2, 801945c <CDC_Control_FS+0x1c>)
 8019458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801945c:	080194ed 	.word	0x080194ed
 8019460:	080194ed 	.word	0x080194ed
 8019464:	080194ed 	.word	0x080194ed
 8019468:	080194ed 	.word	0x080194ed
 801946c:	080194ed 	.word	0x080194ed
 8019470:	080194ed 	.word	0x080194ed
 8019474:	080194ed 	.word	0x080194ed
 8019478:	080194ed 	.word	0x080194ed
 801947c:	080194ed 	.word	0x080194ed
 8019480:	080194ed 	.word	0x080194ed
 8019484:	080194ed 	.word	0x080194ed
 8019488:	080194ed 	.word	0x080194ed
 801948c:	080194ed 	.word	0x080194ed
 8019490:	080194ed 	.word	0x080194ed
 8019494:	080194ed 	.word	0x080194ed
 8019498:	080194ed 	.word	0x080194ed
 801949c:	080194ed 	.word	0x080194ed
 80194a0:	080194ed 	.word	0x080194ed
 80194a4:	080194ed 	.word	0x080194ed
 80194a8:	080194ed 	.word	0x080194ed
 80194ac:	080194ed 	.word	0x080194ed
 80194b0:	080194ed 	.word	0x080194ed
 80194b4:	080194ed 	.word	0x080194ed
 80194b8:	080194ed 	.word	0x080194ed
 80194bc:	080194ed 	.word	0x080194ed
 80194c0:	080194ed 	.word	0x080194ed
 80194c4:	080194ed 	.word	0x080194ed
 80194c8:	080194ed 	.word	0x080194ed
 80194cc:	080194ed 	.word	0x080194ed
 80194d0:	080194ed 	.word	0x080194ed
 80194d4:	080194ed 	.word	0x080194ed
 80194d8:	080194ed 	.word	0x080194ed
 80194dc:	080194ed 	.word	0x080194ed
 80194e0:	080194ed 	.word	0x080194ed
 80194e4:	080194ed 	.word	0x080194ed
 80194e8:	080194ed 	.word	0x080194ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80194ec:	bf00      	nop
  }

  return (USBD_OK);
 80194ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	370c      	adds	r7, #12
 80194f4:	46bd      	mov	sp, r7
 80194f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fa:	4770      	bx	lr

080194fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b082      	sub	sp, #8
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
 8019504:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(rx_buf+rxcntr, (char*)Buf, *Len);
 8019506:	4b0f      	ldr	r3, [pc, #60]	; (8019544 <CDC_Receive_FS+0x48>)
 8019508:	881b      	ldrh	r3, [r3, #0]
 801950a:	461a      	mov	r2, r3
 801950c:	4b0e      	ldr	r3, [pc, #56]	; (8019548 <CDC_Receive_FS+0x4c>)
 801950e:	18d0      	adds	r0, r2, r3
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	461a      	mov	r2, r3
 8019516:	6879      	ldr	r1, [r7, #4]
 8019518:	f004 fcb2 	bl	801de80 <strncpy>
  	rxcntr+=*Len;
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	b29a      	uxth	r2, r3
 8019522:	4b08      	ldr	r3, [pc, #32]	; (8019544 <CDC_Receive_FS+0x48>)
 8019524:	881b      	ldrh	r3, [r3, #0]
 8019526:	4413      	add	r3, r2
 8019528:	b29a      	uxth	r2, r3
 801952a:	4b06      	ldr	r3, [pc, #24]	; (8019544 <CDC_Receive_FS+0x48>)
 801952c:	801a      	strh	r2, [r3, #0]
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801952e:	4807      	ldr	r0, [pc, #28]	; (801954c <CDC_Receive_FS+0x50>)
 8019530:	f7ff ff41 	bl	80193b6 <USBD_CDC_ReceivePacket>
  	USBTimeOutRX=timeout_const;
 8019534:	4b06      	ldr	r3, [pc, #24]	; (8019550 <CDC_Receive_FS+0x54>)
 8019536:	2202      	movs	r2, #2
 8019538:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 801953a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801953c:	4618      	mov	r0, r3
 801953e:	3708      	adds	r7, #8
 8019540:	46bd      	mov	sp, r7
 8019542:	bd80      	pop	{r7, pc}
 8019544:	2000097a 	.word	0x2000097a
 8019548:	20005c2c 	.word	0x20005c2c
 801954c:	20008824 	.word	0x20008824
 8019550:	20000234 	.word	0x20000234

08019554 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b084      	sub	sp, #16
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
 801955c:	460b      	mov	r3, r1
 801955e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019560:	2300      	movs	r3, #0
 8019562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef*)hUsbDeviceFS.pClassDataCDC;
 8019564:	4b18      	ldr	r3, [pc, #96]	; (80195c8 <CDC_Transmit_FS+0x74>)
 8019566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801956a:	60bb      	str	r3, [r7, #8]
  USB_timeout=15000;
 801956c:	4b17      	ldr	r3, [pc, #92]	; (80195cc <CDC_Transmit_FS+0x78>)
 801956e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8019572:	601a      	str	r2, [r3, #0]
  while(hcdc->TxState!=0)
 8019574:	e013      	b.n	801959e <CDC_Transmit_FS+0x4a>
  {
	  USB_timeout--;
 8019576:	4b15      	ldr	r3, [pc, #84]	; (80195cc <CDC_Transmit_FS+0x78>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	3b01      	subs	r3, #1
 801957c:	4a13      	ldr	r2, [pc, #76]	; (80195cc <CDC_Transmit_FS+0x78>)
 801957e:	6013      	str	r3, [r2, #0]
	  if(USB_timeout==0) {ERROR_REG|=(0x01<<USB_CVC_err); hcdc->TxState=0; break;}
 8019580:	4b12      	ldr	r3, [pc, #72]	; (80195cc <CDC_Transmit_FS+0x78>)
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d10a      	bne.n	801959e <CDC_Transmit_FS+0x4a>
 8019588:	4b11      	ldr	r3, [pc, #68]	; (80195d0 <CDC_Transmit_FS+0x7c>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	f043 0308 	orr.w	r3, r3, #8
 8019590:	4a0f      	ldr	r2, [pc, #60]	; (80195d0 <CDC_Transmit_FS+0x7c>)
 8019592:	6013      	str	r3, [r2, #0]
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	2200      	movs	r2, #0
 8019598:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 801959c:	e004      	b.n	80195a8 <CDC_Transmit_FS+0x54>
  while(hcdc->TxState!=0)
 801959e:	68bb      	ldr	r3, [r7, #8]
 80195a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d1e6      	bne.n	8019576 <CDC_Transmit_FS+0x22>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80195a8:	887b      	ldrh	r3, [r7, #2]
 80195aa:	461a      	mov	r2, r3
 80195ac:	6879      	ldr	r1, [r7, #4]
 80195ae:	4806      	ldr	r0, [pc, #24]	; (80195c8 <CDC_Transmit_FS+0x74>)
 80195b0:	f7ff fe9a 	bl	80192e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80195b4:	4804      	ldr	r0, [pc, #16]	; (80195c8 <CDC_Transmit_FS+0x74>)
 80195b6:	f7ff fece 	bl	8019356 <USBD_CDC_TransmitPacket>
 80195ba:	4603      	mov	r3, r0
 80195bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80195be:	7bfb      	ldrb	r3, [r7, #15]
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	3710      	adds	r7, #16
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}
 80195c8:	20008824 	.word	0x20008824
 80195cc:	20001d18 	.word	0x20001d18
 80195d0:	20000950 	.word	0x20000950

080195d4 <CDC_TransmitCplt_FS>:



static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80195d4:	b480      	push	{r7}
 80195d6:	b087      	sub	sp, #28
 80195d8:	af00      	add	r7, sp, #0
 80195da:	60f8      	str	r0, [r7, #12]
 80195dc:	60b9      	str	r1, [r7, #8]
 80195de:	4613      	mov	r3, r2
 80195e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80195e2:	2300      	movs	r3, #0
 80195e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80195e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80195ea:	4618      	mov	r0, r3
 80195ec:	371c      	adds	r7, #28
 80195ee:	46bd      	mov	sp, r7
 80195f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f4:	4770      	bx	lr
	...

080195f8 <HAL_PCD_MspInit>:




void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b0ae      	sub	sp, #184	; 0xb8
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019600:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019604:	2200      	movs	r2, #0
 8019606:	601a      	str	r2, [r3, #0]
 8019608:	605a      	str	r2, [r3, #4]
 801960a:	609a      	str	r2, [r3, #8]
 801960c:	60da      	str	r2, [r3, #12]
 801960e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019610:	f107 0318 	add.w	r3, r7, #24
 8019614:	228c      	movs	r2, #140	; 0x8c
 8019616:	2100      	movs	r1, #0
 8019618:	4618      	mov	r0, r3
 801961a:	f003 fd89 	bl	801d130 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019626:	d173      	bne.n	8019710 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801962c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801962e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8019632:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8019636:	2303      	movs	r3, #3
 8019638:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 801963a:	2301      	movs	r3, #1
 801963c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801963e:	230c      	movs	r3, #12
 8019640:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8019642:	2302      	movs	r3, #2
 8019644:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8019646:	2302      	movs	r3, #2
 8019648:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801964a:	2302      	movs	r3, #2
 801964c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801964e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019652:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8019654:	f107 0318 	add.w	r3, r7, #24
 8019658:	4618      	mov	r0, r3
 801965a:	f7f3 faab 	bl	800cbb4 <HAL_RCCEx_PeriphCLKConfig>
 801965e:	4603      	mov	r3, r0
 8019660:	2b00      	cmp	r3, #0
 8019662:	d001      	beq.n	8019668 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8019664:	f7ed f928 	bl	80068b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019668:	4b2b      	ldr	r3, [pc, #172]	; (8019718 <HAL_PCD_MspInit+0x120>)
 801966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801966c:	4a2a      	ldr	r2, [pc, #168]	; (8019718 <HAL_PCD_MspInit+0x120>)
 801966e:	f043 0301 	orr.w	r3, r3, #1
 8019672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019674:	4b28      	ldr	r3, [pc, #160]	; (8019718 <HAL_PCD_MspInit+0x120>)
 8019676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019678:	f003 0301 	and.w	r3, r3, #1
 801967c:	617b      	str	r3, [r7, #20]
 801967e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019680:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019688:	2302      	movs	r3, #2
 801968a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801968e:	2300      	movs	r3, #0
 8019690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019694:	2303      	movs	r3, #3
 8019696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801969a:	230a      	movs	r3, #10
 801969c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80196a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80196a4:	4619      	mov	r1, r3
 80196a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80196aa:	f7f0 fbff 	bl	8009eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80196ae:	4b1a      	ldr	r3, [pc, #104]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196b2:	4a19      	ldr	r2, [pc, #100]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80196b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80196ba:	4b17      	ldr	r3, [pc, #92]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80196c2:	613b      	str	r3, [r7, #16]
 80196c4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80196c6:	4b14      	ldr	r3, [pc, #80]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d114      	bne.n	80196fc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80196d2:	4b11      	ldr	r3, [pc, #68]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196d6:	4a10      	ldr	r2, [pc, #64]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80196dc:	6593      	str	r3, [r2, #88]	; 0x58
 80196de:	4b0e      	ldr	r3, [pc, #56]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80196e6:	60fb      	str	r3, [r7, #12]
 80196e8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80196ea:	f7f2 fbf5 	bl	800bed8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80196ee:	4b0a      	ldr	r3, [pc, #40]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196f2:	4a09      	ldr	r2, [pc, #36]	; (8019718 <HAL_PCD_MspInit+0x120>)
 80196f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80196f8:	6593      	str	r3, [r2, #88]	; 0x58
 80196fa:	e001      	b.n	8019700 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80196fc:	f7f2 fbec 	bl	800bed8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019700:	2200      	movs	r2, #0
 8019702:	2100      	movs	r1, #0
 8019704:	2043      	movs	r0, #67	; 0x43
 8019706:	f7ef fe13 	bl	8009330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801970a:	2043      	movs	r0, #67	; 0x43
 801970c:	f7ef fe2c 	bl	8009368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019710:	bf00      	nop
 8019712:	37b8      	adds	r7, #184	; 0xb8
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	40021000 	.word	0x40021000

0801971c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b082      	sub	sp, #8
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019730:	4619      	mov	r1, r3
 8019732:	4610      	mov	r0, r2
 8019734:	f000 fc8a 	bl	801a04c <USBD_LL_SetupStage>
}
 8019738:	bf00      	nop
 801973a:	3708      	adds	r7, #8
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b082      	sub	sp, #8
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
 8019748:	460b      	mov	r3, r1
 801974a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019752:	78fa      	ldrb	r2, [r7, #3]
 8019754:	6879      	ldr	r1, [r7, #4]
 8019756:	4613      	mov	r3, r2
 8019758:	00db      	lsls	r3, r3, #3
 801975a:	1a9b      	subs	r3, r3, r2
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	440b      	add	r3, r1
 8019760:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019764:	681a      	ldr	r2, [r3, #0]
 8019766:	78fb      	ldrb	r3, [r7, #3]
 8019768:	4619      	mov	r1, r3
 801976a:	f000 fcc4 	bl	801a0f6 <USBD_LL_DataOutStage>
}
 801976e:	bf00      	nop
 8019770:	3708      	adds	r7, #8
 8019772:	46bd      	mov	sp, r7
 8019774:	bd80      	pop	{r7, pc}

08019776 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019776:	b580      	push	{r7, lr}
 8019778:	b082      	sub	sp, #8
 801977a:	af00      	add	r7, sp, #0
 801977c:	6078      	str	r0, [r7, #4]
 801977e:	460b      	mov	r3, r1
 8019780:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019788:	78fa      	ldrb	r2, [r7, #3]
 801978a:	6879      	ldr	r1, [r7, #4]
 801978c:	4613      	mov	r3, r2
 801978e:	00db      	lsls	r3, r3, #3
 8019790:	1a9b      	subs	r3, r3, r2
 8019792:	009b      	lsls	r3, r3, #2
 8019794:	440b      	add	r3, r1
 8019796:	3348      	adds	r3, #72	; 0x48
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	78fb      	ldrb	r3, [r7, #3]
 801979c:	4619      	mov	r1, r3
 801979e:	f000 fd0d 	bl	801a1bc <USBD_LL_DataInStage>
}
 80197a2:	bf00      	nop
 80197a4:	3708      	adds	r7, #8
 80197a6:	46bd      	mov	sp, r7
 80197a8:	bd80      	pop	{r7, pc}

080197aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197aa:	b580      	push	{r7, lr}
 80197ac:	b082      	sub	sp, #8
 80197ae:	af00      	add	r7, sp, #0
 80197b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197b8:	4618      	mov	r0, r3
 80197ba:	f000 fe21 	bl	801a400 <USBD_LL_SOF>
}
 80197be:	bf00      	nop
 80197c0:	3708      	adds	r7, #8
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}

080197c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197c6:	b580      	push	{r7, lr}
 80197c8:	b084      	sub	sp, #16
 80197ca:	af00      	add	r7, sp, #0
 80197cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80197ce:	2301      	movs	r3, #1
 80197d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	68db      	ldr	r3, [r3, #12]
 80197d6:	2b02      	cmp	r3, #2
 80197d8:	d001      	beq.n	80197de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80197da:	f7ed f86d 	bl	80068b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197e4:	7bfa      	ldrb	r2, [r7, #15]
 80197e6:	4611      	mov	r1, r2
 80197e8:	4618      	mov	r0, r3
 80197ea:	f000 fdcb 	bl	801a384 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197f4:	4618      	mov	r0, r3
 80197f6:	f000 fd77 	bl	801a2e8 <USBD_LL_Reset>
}
 80197fa:	bf00      	nop
 80197fc:	3710      	adds	r7, #16
 80197fe:	46bd      	mov	sp, r7
 8019800:	bd80      	pop	{r7, pc}
	...

08019804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b082      	sub	sp, #8
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	687a      	ldr	r2, [r7, #4]
 8019818:	6812      	ldr	r2, [r2, #0]
 801981a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801981e:	f043 0301 	orr.w	r3, r3, #1
 8019822:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801982a:	4618      	mov	r0, r3
 801982c:	f000 fdba 	bl	801a3a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6a1b      	ldr	r3, [r3, #32]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d005      	beq.n	8019844 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019838:	4b04      	ldr	r3, [pc, #16]	; (801984c <HAL_PCD_SuspendCallback+0x48>)
 801983a:	691b      	ldr	r3, [r3, #16]
 801983c:	4a03      	ldr	r2, [pc, #12]	; (801984c <HAL_PCD_SuspendCallback+0x48>)
 801983e:	f043 0306 	orr.w	r3, r3, #6
 8019842:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019844:	bf00      	nop
 8019846:	3708      	adds	r7, #8
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}
 801984c:	e000ed00 	.word	0xe000ed00

08019850 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b082      	sub	sp, #8
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	6812      	ldr	r2, [r2, #0]
 8019866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801986a:	f023 0301 	bic.w	r3, r3, #1
 801986e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	6a1b      	ldr	r3, [r3, #32]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d007      	beq.n	8019888 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019878:	4b08      	ldr	r3, [pc, #32]	; (801989c <HAL_PCD_ResumeCallback+0x4c>)
 801987a:	691b      	ldr	r3, [r3, #16]
 801987c:	4a07      	ldr	r2, [pc, #28]	; (801989c <HAL_PCD_ResumeCallback+0x4c>)
 801987e:	f023 0306 	bic.w	r3, r3, #6
 8019882:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019884:	f000 fb36 	bl	8019ef4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801988e:	4618      	mov	r0, r3
 8019890:	f000 fd9e 	bl	801a3d0 <USBD_LL_Resume>
}
 8019894:	bf00      	nop
 8019896:	3708      	adds	r7, #8
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}
 801989c:	e000ed00 	.word	0xe000ed00

080198a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b082      	sub	sp, #8
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	460b      	mov	r3, r1
 80198aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80198b2:	78fa      	ldrb	r2, [r7, #3]
 80198b4:	4611      	mov	r1, r2
 80198b6:	4618      	mov	r0, r3
 80198b8:	f000 fdea 	bl	801a490 <USBD_LL_IsoOUTIncomplete>
}
 80198bc:	bf00      	nop
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}

080198c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b082      	sub	sp, #8
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
 80198cc:	460b      	mov	r3, r1
 80198ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80198d6:	78fa      	ldrb	r2, [r7, #3]
 80198d8:	4611      	mov	r1, r2
 80198da:	4618      	mov	r0, r3
 80198dc:	f000 fdb2 	bl	801a444 <USBD_LL_IsoINIncomplete>
}
 80198e0:	bf00      	nop
 80198e2:	3708      	adds	r7, #8
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}

080198e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b082      	sub	sp, #8
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80198f6:	4618      	mov	r0, r3
 80198f8:	f000 fdf0 	bl	801a4dc <USBD_LL_DevConnected>
}
 80198fc:	bf00      	nop
 80198fe:	3708      	adds	r7, #8
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}

08019904 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019912:	4618      	mov	r0, r3
 8019914:	f000 fded 	bl	801a4f2 <USBD_LL_DevDisconnected>
}
 8019918:	bf00      	nop
 801991a:	3708      	adds	r7, #8
 801991c:	46bd      	mov	sp, r7
 801991e:	bd80      	pop	{r7, pc}

08019920 <USBD_LL_Init>:
/*******************************************************************************
                       LL Driver Interface (USB Device Library --> PCD)
*******************************************************************************/

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	781b      	ldrb	r3, [r3, #0]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d146      	bne.n	80199be <USBD_LL_Init+0x9e>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019930:	4a25      	ldr	r2, [pc, #148]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	4a23      	ldr	r2, [pc, #140]	; (80199c8 <USBD_LL_Init+0xa8>)
 801993c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019940:	4b21      	ldr	r3, [pc, #132]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019942:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019946:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 7;
 8019948:	4b1f      	ldr	r3, [pc, #124]	; (80199c8 <USBD_LL_Init+0xa8>)
 801994a:	2207      	movs	r2, #7
 801994c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801994e:	4b1e      	ldr	r3, [pc, #120]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019950:	2202      	movs	r2, #2
 8019952:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019954:	4b1c      	ldr	r3, [pc, #112]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019956:	2202      	movs	r2, #2
 8019958:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801995a:	4b1b      	ldr	r3, [pc, #108]	; (80199c8 <USBD_LL_Init+0xa8>)
 801995c:	2200      	movs	r2, #0
 801995e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019960:	4b19      	ldr	r3, [pc, #100]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019962:	2200      	movs	r2, #0
 8019964:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019966:	4b18      	ldr	r3, [pc, #96]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019968:	2200      	movs	r2, #0
 801996a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801996c:	4b16      	ldr	r3, [pc, #88]	; (80199c8 <USBD_LL_Init+0xa8>)
 801996e:	2200      	movs	r2, #0
 8019970:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019972:	4b15      	ldr	r3, [pc, #84]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019974:	2200      	movs	r2, #0
 8019976:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019978:	4b13      	ldr	r3, [pc, #76]	; (80199c8 <USBD_LL_Init+0xa8>)
 801997a:	2200      	movs	r2, #0
 801997c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801997e:	4812      	ldr	r0, [pc, #72]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019980:	f7f1 f969 	bl	800ac56 <HAL_PCD_Init>
 8019984:	4603      	mov	r3, r0
 8019986:	2b00      	cmp	r3, #0
 8019988:	d001      	beq.n	801998e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801998a:	f7ec ff95 	bl	80068b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 801998e:	2140      	movs	r1, #64	; 0x40
 8019990:	480d      	ldr	r0, [pc, #52]	; (80199c8 <USBD_LL_Init+0xa8>)
 8019992:	f7f2 f9f8 	bl	800bd86 <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019996:	2240      	movs	r2, #64	; 0x40
 8019998:	2100      	movs	r1, #0
 801999a:	480b      	ldr	r0, [pc, #44]	; (80199c8 <USBD_LL_Init+0xa8>)
 801999c:	f7f2 f9ac 	bl	800bcf8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 80199a0:	2240      	movs	r2, #64	; 0x40
 80199a2:	2101      	movs	r1, #1
 80199a4:	4808      	ldr	r0, [pc, #32]	; (80199c8 <USBD_LL_Init+0xa8>)
 80199a6:	f7f2 f9a7 	bl	800bcf8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 80199aa:	2240      	movs	r2, #64	; 0x40
 80199ac:	2102      	movs	r1, #2
 80199ae:	4806      	ldr	r0, [pc, #24]	; (80199c8 <USBD_LL_Init+0xa8>)
 80199b0:	f7f2 f9a2 	bl	800bcf8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 80199b4:	2240      	movs	r2, #64	; 0x40
 80199b6:	2103      	movs	r1, #3
 80199b8:	4803      	ldr	r0, [pc, #12]	; (80199c8 <USBD_LL_Init+0xa8>)
 80199ba:	f7f2 f99d 	bl	800bcf8 <HAL_PCDEx_SetTxFiFo>

	//


  }
  return USBD_OK;
 80199be:	2300      	movs	r3, #0
}
 80199c0:	4618      	mov	r0, r3
 80199c2:	3708      	adds	r7, #8
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	20009afc 	.word	0x20009afc

080199cc <USBD_LL_Start>:




USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b084      	sub	sp, #16
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199d4:	2300      	movs	r3, #0
 80199d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199d8:	2300      	movs	r3, #0
 80199da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80199e2:	4618      	mov	r0, r3
 80199e4:	f7f1 fa5b 	bl	800ae9e <HAL_PCD_Start>
 80199e8:	4603      	mov	r3, r0
 80199ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80199ec:	7bbb      	ldrb	r3, [r7, #14]
 80199ee:	2b03      	cmp	r3, #3
 80199f0:	d816      	bhi.n	8019a20 <USBD_LL_Start+0x54>
 80199f2:	a201      	add	r2, pc, #4	; (adr r2, 80199f8 <USBD_LL_Start+0x2c>)
 80199f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199f8:	08019a09 	.word	0x08019a09
 80199fc:	08019a0f 	.word	0x08019a0f
 8019a00:	08019a15 	.word	0x08019a15
 8019a04:	08019a1b 	.word	0x08019a1b
    case HAL_OK :
      usb_status = USBD_OK;
 8019a08:	2300      	movs	r3, #0
 8019a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a0c:	e00b      	b.n	8019a26 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a0e:	2303      	movs	r3, #3
 8019a10:	73fb      	strb	r3, [r7, #15]
    break;
 8019a12:	e008      	b.n	8019a26 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a14:	2301      	movs	r3, #1
 8019a16:	73fb      	strb	r3, [r7, #15]
    break;
 8019a18:	e005      	b.n	8019a26 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a1a:	2303      	movs	r3, #3
 8019a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8019a1e:	e002      	b.n	8019a26 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019a20:	2303      	movs	r3, #3
 8019a22:	73fb      	strb	r3, [r7, #15]
    break;
 8019a24:	bf00      	nop
  }
  return usb_status;
 8019a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3710      	adds	r7, #16
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}

08019a30 <USBD_LL_OpenEP>:




USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b084      	sub	sp, #16
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
 8019a38:	4608      	mov	r0, r1
 8019a3a:	4611      	mov	r1, r2
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	4603      	mov	r3, r0
 8019a40:	70fb      	strb	r3, [r7, #3]
 8019a42:	460b      	mov	r3, r1
 8019a44:	70bb      	strb	r3, [r7, #2]
 8019a46:	4613      	mov	r3, r2
 8019a48:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a4e:	2300      	movs	r3, #0
 8019a50:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019a58:	78bb      	ldrb	r3, [r7, #2]
 8019a5a:	883a      	ldrh	r2, [r7, #0]
 8019a5c:	78f9      	ldrb	r1, [r7, #3]
 8019a5e:	f7f1 fe16 	bl	800b68e <HAL_PCD_EP_Open>
 8019a62:	4603      	mov	r3, r0
 8019a64:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a66:	7bbb      	ldrb	r3, [r7, #14]
 8019a68:	2b03      	cmp	r3, #3
 8019a6a:	d817      	bhi.n	8019a9c <USBD_LL_OpenEP+0x6c>
 8019a6c:	a201      	add	r2, pc, #4	; (adr r2, 8019a74 <USBD_LL_OpenEP+0x44>)
 8019a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a72:	bf00      	nop
 8019a74:	08019a85 	.word	0x08019a85
 8019a78:	08019a8b 	.word	0x08019a8b
 8019a7c:	08019a91 	.word	0x08019a91
 8019a80:	08019a97 	.word	0x08019a97
    case HAL_OK :
      usb_status = USBD_OK;
 8019a84:	2300      	movs	r3, #0
 8019a86:	73fb      	strb	r3, [r7, #15]
    break;
 8019a88:	e00b      	b.n	8019aa2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a8a:	2303      	movs	r3, #3
 8019a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8019a8e:	e008      	b.n	8019aa2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a90:	2301      	movs	r3, #1
 8019a92:	73fb      	strb	r3, [r7, #15]
    break;
 8019a94:	e005      	b.n	8019aa2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a96:	2303      	movs	r3, #3
 8019a98:	73fb      	strb	r3, [r7, #15]
    break;
 8019a9a:	e002      	b.n	8019aa2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019a9c:	2303      	movs	r3, #3
 8019a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8019aa0:	bf00      	nop
  }
  return usb_status;
 8019aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3710      	adds	r7, #16
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}

08019aac <USBD_LL_CloseEP>:



USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b084      	sub	sp, #16
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
 8019ab4:	460b      	mov	r3, r1
 8019ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ab8:	2300      	movs	r3, #0
 8019aba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019abc:	2300      	movs	r3, #0
 8019abe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019ac6:	78fa      	ldrb	r2, [r7, #3]
 8019ac8:	4611      	mov	r1, r2
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7f1 fe47 	bl	800b75e <HAL_PCD_EP_Close>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019ad4:	7bbb      	ldrb	r3, [r7, #14]
 8019ad6:	2b03      	cmp	r3, #3
 8019ad8:	d816      	bhi.n	8019b08 <USBD_LL_CloseEP+0x5c>
 8019ada:	a201      	add	r2, pc, #4	; (adr r2, 8019ae0 <USBD_LL_CloseEP+0x34>)
 8019adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ae0:	08019af1 	.word	0x08019af1
 8019ae4:	08019af7 	.word	0x08019af7
 8019ae8:	08019afd 	.word	0x08019afd
 8019aec:	08019b03 	.word	0x08019b03
    case HAL_OK :
      usb_status = USBD_OK;
 8019af0:	2300      	movs	r3, #0
 8019af2:	73fb      	strb	r3, [r7, #15]
    break;
 8019af4:	e00b      	b.n	8019b0e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019af6:	2303      	movs	r3, #3
 8019af8:	73fb      	strb	r3, [r7, #15]
    break;
 8019afa:	e008      	b.n	8019b0e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019afc:	2301      	movs	r3, #1
 8019afe:	73fb      	strb	r3, [r7, #15]
    break;
 8019b00:	e005      	b.n	8019b0e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b02:	2303      	movs	r3, #3
 8019b04:	73fb      	strb	r3, [r7, #15]
    break;
 8019b06:	e002      	b.n	8019b0e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b08:	2303      	movs	r3, #3
 8019b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b0c:	bf00      	nop
  }
  return usb_status;
 8019b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3710      	adds	r7, #16
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}

08019b18 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b084      	sub	sp, #16
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	6078      	str	r0, [r7, #4]
 8019b20:	460b      	mov	r3, r1
 8019b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b24:	2300      	movs	r3, #0
 8019b26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b32:	78fa      	ldrb	r2, [r7, #3]
 8019b34:	4611      	mov	r1, r2
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7f1 ffa6 	bl	800ba88 <HAL_PCD_EP_Flush>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b40:	7bbb      	ldrb	r3, [r7, #14]
 8019b42:	2b03      	cmp	r3, #3
 8019b44:	d816      	bhi.n	8019b74 <USBD_LL_FlushEP+0x5c>
 8019b46:	a201      	add	r2, pc, #4	; (adr r2, 8019b4c <USBD_LL_FlushEP+0x34>)
 8019b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b4c:	08019b5d 	.word	0x08019b5d
 8019b50:	08019b63 	.word	0x08019b63
 8019b54:	08019b69 	.word	0x08019b69
 8019b58:	08019b6f 	.word	0x08019b6f
    case HAL_OK :
      usb_status = USBD_OK;
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8019b60:	e00b      	b.n	8019b7a <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b62:	2303      	movs	r3, #3
 8019b64:	73fb      	strb	r3, [r7, #15]
    break;
 8019b66:	e008      	b.n	8019b7a <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b68:	2301      	movs	r3, #1
 8019b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b6c:	e005      	b.n	8019b7a <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b6e:	2303      	movs	r3, #3
 8019b70:	73fb      	strb	r3, [r7, #15]
    break;
 8019b72:	e002      	b.n	8019b7a <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b74:	2303      	movs	r3, #3
 8019b76:	73fb      	strb	r3, [r7, #15]
    break;
 8019b78:	bf00      	nop
  }
  return usb_status;
 8019b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3710      	adds	r7, #16
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b084      	sub	sp, #16
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	460b      	mov	r3, r1
 8019b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b90:	2300      	movs	r3, #0
 8019b92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b94:	2300      	movs	r3, #0
 8019b96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b9e:	78fa      	ldrb	r2, [r7, #3]
 8019ba0:	4611      	mov	r1, r2
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f7f1 feb8 	bl	800b918 <HAL_PCD_EP_SetStall>
 8019ba8:	4603      	mov	r3, r0
 8019baa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019bac:	7bbb      	ldrb	r3, [r7, #14]
 8019bae:	2b03      	cmp	r3, #3
 8019bb0:	d816      	bhi.n	8019be0 <USBD_LL_StallEP+0x5c>
 8019bb2:	a201      	add	r2, pc, #4	; (adr r2, 8019bb8 <USBD_LL_StallEP+0x34>)
 8019bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bb8:	08019bc9 	.word	0x08019bc9
 8019bbc:	08019bcf 	.word	0x08019bcf
 8019bc0:	08019bd5 	.word	0x08019bd5
 8019bc4:	08019bdb 	.word	0x08019bdb
    case HAL_OK :
      usb_status = USBD_OK;
 8019bc8:	2300      	movs	r3, #0
 8019bca:	73fb      	strb	r3, [r7, #15]
    break;
 8019bcc:	e00b      	b.n	8019be6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bce:	2303      	movs	r3, #3
 8019bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd2:	e008      	b.n	8019be6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8019bd8:	e005      	b.n	8019be6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bda:	2303      	movs	r3, #3
 8019bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8019bde:	e002      	b.n	8019be6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019be0:	2303      	movs	r3, #3
 8019be2:	73fb      	strb	r3, [r7, #15]
    break;
 8019be4:	bf00      	nop
  }
  return usb_status;
 8019be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}

08019bf0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b084      	sub	sp, #16
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
 8019bf8:	460b      	mov	r3, r1
 8019bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c00:	2300      	movs	r3, #0
 8019c02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c0a:	78fa      	ldrb	r2, [r7, #3]
 8019c0c:	4611      	mov	r1, r2
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f7f1 fee4 	bl	800b9dc <HAL_PCD_EP_ClrStall>
 8019c14:	4603      	mov	r3, r0
 8019c16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019c18:	7bbb      	ldrb	r3, [r7, #14]
 8019c1a:	2b03      	cmp	r3, #3
 8019c1c:	d816      	bhi.n	8019c4c <USBD_LL_ClearStallEP+0x5c>
 8019c1e:	a201      	add	r2, pc, #4	; (adr r2, 8019c24 <USBD_LL_ClearStallEP+0x34>)
 8019c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c24:	08019c35 	.word	0x08019c35
 8019c28:	08019c3b 	.word	0x08019c3b
 8019c2c:	08019c41 	.word	0x08019c41
 8019c30:	08019c47 	.word	0x08019c47
    case HAL_OK :
      usb_status = USBD_OK;
 8019c34:	2300      	movs	r3, #0
 8019c36:	73fb      	strb	r3, [r7, #15]
    break;
 8019c38:	e00b      	b.n	8019c52 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c3a:	2303      	movs	r3, #3
 8019c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8019c3e:	e008      	b.n	8019c52 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c40:	2301      	movs	r3, #1
 8019c42:	73fb      	strb	r3, [r7, #15]
    break;
 8019c44:	e005      	b.n	8019c52 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c46:	2303      	movs	r3, #3
 8019c48:	73fb      	strb	r3, [r7, #15]
    break;
 8019c4a:	e002      	b.n	8019c52 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019c4c:	2303      	movs	r3, #3
 8019c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8019c50:	bf00      	nop
  }
  return usb_status;
 8019c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3710      	adds	r7, #16
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}

08019c5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c5c:	b480      	push	{r7}
 8019c5e:	b085      	sub	sp, #20
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
 8019c64:	460b      	mov	r3, r1
 8019c66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	da0b      	bge.n	8019c90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019c78:	78fb      	ldrb	r3, [r7, #3]
 8019c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019c7e:	68f9      	ldr	r1, [r7, #12]
 8019c80:	4613      	mov	r3, r2
 8019c82:	00db      	lsls	r3, r3, #3
 8019c84:	1a9b      	subs	r3, r3, r2
 8019c86:	009b      	lsls	r3, r3, #2
 8019c88:	440b      	add	r3, r1
 8019c8a:	333e      	adds	r3, #62	; 0x3e
 8019c8c:	781b      	ldrb	r3, [r3, #0]
 8019c8e:	e00b      	b.n	8019ca8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019c90:	78fb      	ldrb	r3, [r7, #3]
 8019c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019c96:	68f9      	ldr	r1, [r7, #12]
 8019c98:	4613      	mov	r3, r2
 8019c9a:	00db      	lsls	r3, r3, #3
 8019c9c:	1a9b      	subs	r3, r3, r2
 8019c9e:	009b      	lsls	r3, r3, #2
 8019ca0:	440b      	add	r3, r1
 8019ca2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019ca8:	4618      	mov	r0, r3
 8019caa:	3714      	adds	r7, #20
 8019cac:	46bd      	mov	sp, r7
 8019cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb2:	4770      	bx	lr

08019cb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b084      	sub	sp, #16
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
 8019cbc:	460b      	mov	r3, r1
 8019cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019cce:	78fa      	ldrb	r2, [r7, #3]
 8019cd0:	4611      	mov	r1, r2
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7f1 fcb6 	bl	800b644 <HAL_PCD_SetAddress>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019cdc:	7bbb      	ldrb	r3, [r7, #14]
 8019cde:	2b03      	cmp	r3, #3
 8019ce0:	d816      	bhi.n	8019d10 <USBD_LL_SetUSBAddress+0x5c>
 8019ce2:	a201      	add	r2, pc, #4	; (adr r2, 8019ce8 <USBD_LL_SetUSBAddress+0x34>)
 8019ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ce8:	08019cf9 	.word	0x08019cf9
 8019cec:	08019cff 	.word	0x08019cff
 8019cf0:	08019d05 	.word	0x08019d05
 8019cf4:	08019d0b 	.word	0x08019d0b
    case HAL_OK :
      usb_status = USBD_OK;
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8019cfc:	e00b      	b.n	8019d16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019cfe:	2303      	movs	r3, #3
 8019d00:	73fb      	strb	r3, [r7, #15]
    break;
 8019d02:	e008      	b.n	8019d16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d04:	2301      	movs	r3, #1
 8019d06:	73fb      	strb	r3, [r7, #15]
    break;
 8019d08:	e005      	b.n	8019d16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d0a:	2303      	movs	r3, #3
 8019d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8019d0e:	e002      	b.n	8019d16 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019d10:	2303      	movs	r3, #3
 8019d12:	73fb      	strb	r3, [r7, #15]
    break;
 8019d14:	bf00      	nop
  }
  return usb_status;
 8019d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d18:	4618      	mov	r0, r3
 8019d1a:	3710      	adds	r7, #16
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}

08019d20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b086      	sub	sp, #24
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	60f8      	str	r0, [r7, #12]
 8019d28:	607a      	str	r2, [r7, #4]
 8019d2a:	603b      	str	r3, [r7, #0]
 8019d2c:	460b      	mov	r3, r1
 8019d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d30:	2300      	movs	r3, #0
 8019d32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d34:	2300      	movs	r3, #0
 8019d36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019d3e:	7af9      	ldrb	r1, [r7, #11]
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	687a      	ldr	r2, [r7, #4]
 8019d44:	f7f1 fdab 	bl	800b89e <HAL_PCD_EP_Transmit>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019d4c:	7dbb      	ldrb	r3, [r7, #22]
 8019d4e:	2b03      	cmp	r3, #3
 8019d50:	d816      	bhi.n	8019d80 <USBD_LL_Transmit+0x60>
 8019d52:	a201      	add	r2, pc, #4	; (adr r2, 8019d58 <USBD_LL_Transmit+0x38>)
 8019d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d58:	08019d69 	.word	0x08019d69
 8019d5c:	08019d6f 	.word	0x08019d6f
 8019d60:	08019d75 	.word	0x08019d75
 8019d64:	08019d7b 	.word	0x08019d7b
    case HAL_OK :
      usb_status = USBD_OK;
 8019d68:	2300      	movs	r3, #0
 8019d6a:	75fb      	strb	r3, [r7, #23]
    break;
 8019d6c:	e00b      	b.n	8019d86 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d6e:	2303      	movs	r3, #3
 8019d70:	75fb      	strb	r3, [r7, #23]
    break;
 8019d72:	e008      	b.n	8019d86 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d74:	2301      	movs	r3, #1
 8019d76:	75fb      	strb	r3, [r7, #23]
    break;
 8019d78:	e005      	b.n	8019d86 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d7a:	2303      	movs	r3, #3
 8019d7c:	75fb      	strb	r3, [r7, #23]
    break;
 8019d7e:	e002      	b.n	8019d86 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019d80:	2303      	movs	r3, #3
 8019d82:	75fb      	strb	r3, [r7, #23]
    break;
 8019d84:	bf00      	nop
  }
  return usb_status;
 8019d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3718      	adds	r7, #24
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}

08019d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b086      	sub	sp, #24
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	60f8      	str	r0, [r7, #12]
 8019d98:	607a      	str	r2, [r7, #4]
 8019d9a:	603b      	str	r3, [r7, #0]
 8019d9c:	460b      	mov	r3, r1
 8019d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019da0:	2300      	movs	r3, #0
 8019da2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019da4:	2300      	movs	r3, #0
 8019da6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019dae:	7af9      	ldrb	r1, [r7, #11]
 8019db0:	683b      	ldr	r3, [r7, #0]
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	f7f1 fd1d 	bl	800b7f2 <HAL_PCD_EP_Receive>
 8019db8:	4603      	mov	r3, r0
 8019dba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019dbc:	7dbb      	ldrb	r3, [r7, #22]
 8019dbe:	2b03      	cmp	r3, #3
 8019dc0:	d816      	bhi.n	8019df0 <USBD_LL_PrepareReceive+0x60>
 8019dc2:	a201      	add	r2, pc, #4	; (adr r2, 8019dc8 <USBD_LL_PrepareReceive+0x38>)
 8019dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dc8:	08019dd9 	.word	0x08019dd9
 8019dcc:	08019ddf 	.word	0x08019ddf
 8019dd0:	08019de5 	.word	0x08019de5
 8019dd4:	08019deb 	.word	0x08019deb
    case HAL_OK :
      usb_status = USBD_OK;
 8019dd8:	2300      	movs	r3, #0
 8019dda:	75fb      	strb	r3, [r7, #23]
    break;
 8019ddc:	e00b      	b.n	8019df6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019dde:	2303      	movs	r3, #3
 8019de0:	75fb      	strb	r3, [r7, #23]
    break;
 8019de2:	e008      	b.n	8019df6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019de4:	2301      	movs	r3, #1
 8019de6:	75fb      	strb	r3, [r7, #23]
    break;
 8019de8:	e005      	b.n	8019df6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019dea:	2303      	movs	r3, #3
 8019dec:	75fb      	strb	r3, [r7, #23]
    break;
 8019dee:	e002      	b.n	8019df6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019df0:	2303      	movs	r3, #3
 8019df2:	75fb      	strb	r3, [r7, #23]
    break;
 8019df4:	bf00      	nop
  }
  return usb_status;
 8019df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3718      	adds	r7, #24
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}

08019e00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b082      	sub	sp, #8
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
 8019e08:	460b      	mov	r3, r1
 8019e0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019e12:	78fa      	ldrb	r2, [r7, #3]
 8019e14:	4611      	mov	r1, r2
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7f1 fd29 	bl	800b86e <HAL_PCD_EP_GetRxCount>
 8019e1c:	4603      	mov	r3, r0
}
 8019e1e:	4618      	mov	r0, r3
 8019e20:	3708      	adds	r7, #8
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}
	...

08019e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
 8019e30:	460b      	mov	r3, r1
 8019e32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019e34:	78fb      	ldrb	r3, [r7, #3]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d002      	beq.n	8019e40 <HAL_PCDEx_LPM_Callback+0x18>
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d01f      	beq.n	8019e7e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019e3e:	e03b      	b.n	8019eb8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	6a1b      	ldr	r3, [r3, #32]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d007      	beq.n	8019e58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019e48:	f000 f854 	bl	8019ef4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e4c:	4b1c      	ldr	r3, [pc, #112]	; (8019ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019e4e:	691b      	ldr	r3, [r3, #16]
 8019e50:	4a1b      	ldr	r2, [pc, #108]	; (8019ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019e52:	f023 0306 	bic.w	r3, r3, #6
 8019e56:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	687a      	ldr	r2, [r7, #4]
 8019e64:	6812      	ldr	r2, [r2, #0]
 8019e66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019e6a:	f023 0301 	bic.w	r3, r3, #1
 8019e6e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019e76:	4618      	mov	r0, r3
 8019e78:	f000 faaa 	bl	801a3d0 <USBD_LL_Resume>
    break;
 8019e7c:	e01c      	b.n	8019eb8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	687a      	ldr	r2, [r7, #4]
 8019e8a:	6812      	ldr	r2, [r2, #0]
 8019e8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019e90:	f043 0301 	orr.w	r3, r3, #1
 8019e94:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f000 fa81 	bl	801a3a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	6a1b      	ldr	r3, [r3, #32]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d005      	beq.n	8019eb6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019eaa:	4b05      	ldr	r3, [pc, #20]	; (8019ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019eac:	691b      	ldr	r3, [r3, #16]
 8019eae:	4a04      	ldr	r2, [pc, #16]	; (8019ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8019eb0:	f043 0306 	orr.w	r3, r3, #6
 8019eb4:	6113      	str	r3, [r2, #16]
    break;
 8019eb6:	bf00      	nop
}
 8019eb8:	bf00      	nop
 8019eba:	3708      	adds	r7, #8
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	e000ed00 	.word	0xe000ed00

08019ec4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019ec4:	b480      	push	{r7}
 8019ec6:	b083      	sub	sp, #12
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  //static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  static uint32_t mem[(sizeof(USBD_CDCMSC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  //static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */

  return mem;
 8019ecc:	4b03      	ldr	r3, [pc, #12]	; (8019edc <USBD_static_malloc+0x18>)
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	370c      	adds	r7, #12
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed8:	4770      	bx	lr
 8019eda:	bf00      	nop
 8019edc:	20001d1c 	.word	0x20001d1c

08019ee0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019ee0:	b480      	push	{r7}
 8019ee2:	b083      	sub	sp, #12
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]

}
 8019ee8:	bf00      	nop
 8019eea:	370c      	adds	r7, #12
 8019eec:	46bd      	mov	sp, r7
 8019eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef2:	4770      	bx	lr

08019ef4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019ef8:	f7eb ff8a 	bl	8005e10 <SystemClock_Config>
}
 8019efc:	bf00      	nop
 8019efe:	bd80      	pop	{r7, pc}

08019f00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b086      	sub	sp, #24
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	60f8      	str	r0, [r7, #12]
 8019f08:	60b9      	str	r1, [r7, #8]
 8019f0a:	4613      	mov	r3, r2
 8019f0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d101      	bne.n	8019f18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019f14:	2303      	movs	r3, #3
 8019f16:	e023      	b.n	8019f60 <USBD_Init+0x60>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserDataCDC = NULL;
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	2200      	movs	r2, #0
 8019f24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pdev->pUserDataMSC = NULL;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	2200      	movs	r2, #0
 8019f34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d003      	beq.n	8019f46 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	68ba      	ldr	r2, [r7, #8]
 8019f42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	2201      	movs	r2, #1
 8019f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	79fa      	ldrb	r2, [r7, #7]
 8019f52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019f54:	68f8      	ldr	r0, [r7, #12]
 8019f56:	f7ff fce3 	bl	8019920 <USBD_LL_Init>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8019f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3718      	adds	r7, #24
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b084      	sub	sp, #16
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019f72:	2300      	movs	r3, #0
 8019f74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d101      	bne.n	8019f80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8019f7c:	2303      	movs	r3, #3
 8019f7e:	e016      	b.n	8019fae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	683a      	ldr	r2, [r7, #0]
 8019f84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d00b      	beq.n	8019fac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f9c:	f107 020e 	add.w	r2, r7, #14
 8019fa0:	4610      	mov	r0, r2
 8019fa2:	4798      	blx	r3
 8019fa4:	4602      	mov	r2, r0
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8019fac:	2300      	movs	r3, #0
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3710      	adds	r7, #16
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}

08019fb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019fb6:	b580      	push	{r7, lr}
 8019fb8:	b082      	sub	sp, #8
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f7ff fd04 	bl	80199cc <USBD_LL_Start>
 8019fc4:	4603      	mov	r3, r0
}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3708      	adds	r7, #8
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}

08019fce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019fce:	b480      	push	{r7}
 8019fd0:	b083      	sub	sp, #12
 8019fd2:	af00      	add	r7, sp, #0
 8019fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019fd6:	2300      	movs	r3, #0
}
 8019fd8:	4618      	mov	r0, r3
 8019fda:	370c      	adds	r7, #12
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe2:	4770      	bx	lr

08019fe4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b084      	sub	sp, #16
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
 8019fec:	460b      	mov	r3, r1
 8019fee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019ff0:	2303      	movs	r3, #3
 8019ff2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d009      	beq.n	801a012 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	78fa      	ldrb	r2, [r7, #3]
 801a008:	4611      	mov	r1, r2
 801a00a:	6878      	ldr	r0, [r7, #4]
 801a00c:	4798      	blx	r3
 801a00e:	4603      	mov	r3, r0
 801a010:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801a012:	7bfb      	ldrb	r3, [r7, #15]
}
 801a014:	4618      	mov	r0, r3
 801a016:	3710      	adds	r7, #16
 801a018:	46bd      	mov	sp, r7
 801a01a:	bd80      	pop	{r7, pc}

0801a01c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
 801a024:	460b      	mov	r3, r1
 801a026:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d007      	beq.n	801a042 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a038:	685b      	ldr	r3, [r3, #4]
 801a03a:	78fa      	ldrb	r2, [r7, #3]
 801a03c:	4611      	mov	r1, r2
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	4798      	blx	r3
  }

  return USBD_OK;
 801a042:	2300      	movs	r3, #0
}
 801a044:	4618      	mov	r0, r3
 801a046:	3708      	adds	r7, #8
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd80      	pop	{r7, pc}

0801a04c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
 801a054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a05c:	6839      	ldr	r1, [r7, #0]
 801a05e:	4618      	mov	r0, r3
 801a060:	f000 ffba 	bl	801afd8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2201      	movs	r2, #1
 801a068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801a072:	461a      	mov	r2, r3
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a080:	f003 031f 	and.w	r3, r3, #31
 801a084:	2b02      	cmp	r3, #2
 801a086:	d01a      	beq.n	801a0be <USBD_LL_SetupStage+0x72>
 801a088:	2b02      	cmp	r3, #2
 801a08a:	d822      	bhi.n	801a0d2 <USBD_LL_SetupStage+0x86>
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d002      	beq.n	801a096 <USBD_LL_SetupStage+0x4a>
 801a090:	2b01      	cmp	r3, #1
 801a092:	d00a      	beq.n	801a0aa <USBD_LL_SetupStage+0x5e>
 801a094:	e01d      	b.n	801a0d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a09c:	4619      	mov	r1, r3
 801a09e:	6878      	ldr	r0, [r7, #4]
 801a0a0:	f000 fa62 	bl	801a568 <USBD_StdDevReq>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	73fb      	strb	r3, [r7, #15]
      break;
 801a0a8:	e020      	b.n	801a0ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	6878      	ldr	r0, [r7, #4]
 801a0b4:	f000 fac6 	bl	801a644 <USBD_StdItfReq>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	73fb      	strb	r3, [r7, #15]
      break;
 801a0bc:	e016      	b.n	801a0ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	6878      	ldr	r0, [r7, #4]
 801a0c8:	f000 fb05 	bl	801a6d6 <USBD_StdEPReq>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	73fb      	strb	r3, [r7, #15]
      break;
 801a0d0:	e00c      	b.n	801a0ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801a0d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a0dc:	b2db      	uxtb	r3, r3
 801a0de:	4619      	mov	r1, r3
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	f7ff fd4f 	bl	8019b84 <USBD_LL_StallEP>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	73fb      	strb	r3, [r7, #15]
      break;
 801a0ea:	bf00      	nop
  }

  return ret;
 801a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	3710      	adds	r7, #16
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd80      	pop	{r7, pc}

0801a0f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a0f6:	b580      	push	{r7, lr}
 801a0f8:	b086      	sub	sp, #24
 801a0fa:	af00      	add	r7, sp, #0
 801a0fc:	60f8      	str	r0, [r7, #12]
 801a0fe:	460b      	mov	r3, r1
 801a100:	607a      	str	r2, [r7, #4]
 801a102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a104:	7afb      	ldrb	r3, [r7, #11]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d138      	bne.n	801a17c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801a110:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a118:	2b03      	cmp	r3, #3
 801a11a:	d14a      	bne.n	801a1b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	689a      	ldr	r2, [r3, #8]
 801a120:	693b      	ldr	r3, [r7, #16]
 801a122:	68db      	ldr	r3, [r3, #12]
 801a124:	429a      	cmp	r2, r3
 801a126:	d913      	bls.n	801a150 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a128:	693b      	ldr	r3, [r7, #16]
 801a12a:	689a      	ldr	r2, [r3, #8]
 801a12c:	693b      	ldr	r3, [r7, #16]
 801a12e:	68db      	ldr	r3, [r3, #12]
 801a130:	1ad2      	subs	r2, r2, r3
 801a132:	693b      	ldr	r3, [r7, #16]
 801a134:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801a136:	693b      	ldr	r3, [r7, #16]
 801a138:	68da      	ldr	r2, [r3, #12]
 801a13a:	693b      	ldr	r3, [r7, #16]
 801a13c:	689b      	ldr	r3, [r3, #8]
 801a13e:	4293      	cmp	r3, r2
 801a140:	bf28      	it	cs
 801a142:	4613      	movcs	r3, r2
 801a144:	461a      	mov	r2, r3
 801a146:	6879      	ldr	r1, [r7, #4]
 801a148:	68f8      	ldr	r0, [r7, #12]
 801a14a:	f001 f95b 	bl	801b404 <USBD_CtlContinueRx>
 801a14e:	e030      	b.n	801a1b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a156:	b2db      	uxtb	r3, r3
 801a158:	2b03      	cmp	r3, #3
 801a15a:	d10b      	bne.n	801a174 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a162:	691b      	ldr	r3, [r3, #16]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d005      	beq.n	801a174 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a16e:	691b      	ldr	r3, [r3, #16]
 801a170:	68f8      	ldr	r0, [r7, #12]
 801a172:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801a174:	68f8      	ldr	r0, [r7, #12]
 801a176:	f001 f956 	bl	801b426 <USBD_CtlSendStatus>
 801a17a:	e01a      	b.n	801a1b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a182:	b2db      	uxtb	r3, r3
 801a184:	2b03      	cmp	r3, #3
 801a186:	d114      	bne.n	801a1b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a18e:	699b      	ldr	r3, [r3, #24]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d00e      	beq.n	801a1b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a19a:	699b      	ldr	r3, [r3, #24]
 801a19c:	7afa      	ldrb	r2, [r7, #11]
 801a19e:	4611      	mov	r1, r2
 801a1a0:	68f8      	ldr	r0, [r7, #12]
 801a1a2:	4798      	blx	r3
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a1a8:	7dfb      	ldrb	r3, [r7, #23]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d001      	beq.n	801a1b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a1ae:	7dfb      	ldrb	r3, [r7, #23]
 801a1b0:	e000      	b.n	801a1b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a1b2:	2300      	movs	r3, #0
}
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	3718      	adds	r7, #24
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}

0801a1bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b086      	sub	sp, #24
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	60f8      	str	r0, [r7, #12]
 801a1c4:	460b      	mov	r3, r1
 801a1c6:	607a      	str	r2, [r7, #4]
 801a1c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a1ca:	7afb      	ldrb	r3, [r7, #11]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d16b      	bne.n	801a2a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	3314      	adds	r3, #20
 801a1d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a1dc:	2b02      	cmp	r3, #2
 801a1de:	d156      	bne.n	801a28e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a1e0:	693b      	ldr	r3, [r7, #16]
 801a1e2:	689a      	ldr	r2, [r3, #8]
 801a1e4:	693b      	ldr	r3, [r7, #16]
 801a1e6:	68db      	ldr	r3, [r3, #12]
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d914      	bls.n	801a216 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	689a      	ldr	r2, [r3, #8]
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	68db      	ldr	r3, [r3, #12]
 801a1f4:	1ad2      	subs	r2, r2, r3
 801a1f6:	693b      	ldr	r3, [r7, #16]
 801a1f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a1fa:	693b      	ldr	r3, [r7, #16]
 801a1fc:	689b      	ldr	r3, [r3, #8]
 801a1fe:	461a      	mov	r2, r3
 801a200:	6879      	ldr	r1, [r7, #4]
 801a202:	68f8      	ldr	r0, [r7, #12]
 801a204:	f001 f8d0 	bl	801b3a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a208:	2300      	movs	r3, #0
 801a20a:	2200      	movs	r2, #0
 801a20c:	2100      	movs	r1, #0
 801a20e:	68f8      	ldr	r0, [r7, #12]
 801a210:	f7ff fdbe 	bl	8019d90 <USBD_LL_PrepareReceive>
 801a214:	e03b      	b.n	801a28e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a216:	693b      	ldr	r3, [r7, #16]
 801a218:	68da      	ldr	r2, [r3, #12]
 801a21a:	693b      	ldr	r3, [r7, #16]
 801a21c:	689b      	ldr	r3, [r3, #8]
 801a21e:	429a      	cmp	r2, r3
 801a220:	d11c      	bne.n	801a25c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a222:	693b      	ldr	r3, [r7, #16]
 801a224:	685a      	ldr	r2, [r3, #4]
 801a226:	693b      	ldr	r3, [r7, #16]
 801a228:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a22a:	429a      	cmp	r2, r3
 801a22c:	d316      	bcc.n	801a25c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a22e:	693b      	ldr	r3, [r7, #16]
 801a230:	685a      	ldr	r2, [r3, #4]
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a238:	429a      	cmp	r2, r3
 801a23a:	d20f      	bcs.n	801a25c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a23c:	2200      	movs	r2, #0
 801a23e:	2100      	movs	r1, #0
 801a240:	68f8      	ldr	r0, [r7, #12]
 801a242:	f001 f8b1 	bl	801b3a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	2200      	movs	r2, #0
 801a24a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a24e:	2300      	movs	r3, #0
 801a250:	2200      	movs	r2, #0
 801a252:	2100      	movs	r1, #0
 801a254:	68f8      	ldr	r0, [r7, #12]
 801a256:	f7ff fd9b 	bl	8019d90 <USBD_LL_PrepareReceive>
 801a25a:	e018      	b.n	801a28e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a262:	b2db      	uxtb	r3, r3
 801a264:	2b03      	cmp	r3, #3
 801a266:	d10b      	bne.n	801a280 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a26e:	68db      	ldr	r3, [r3, #12]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d005      	beq.n	801a280 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a27a:	68db      	ldr	r3, [r3, #12]
 801a27c:	68f8      	ldr	r0, [r7, #12]
 801a27e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a280:	2180      	movs	r1, #128	; 0x80
 801a282:	68f8      	ldr	r0, [r7, #12]
 801a284:	f7ff fc7e 	bl	8019b84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a288:	68f8      	ldr	r0, [r7, #12]
 801a28a:	f001 f8df 	bl	801b44c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a294:	2b01      	cmp	r3, #1
 801a296:	d122      	bne.n	801a2de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a298:	68f8      	ldr	r0, [r7, #12]
 801a29a:	f7ff fe98 	bl	8019fce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a2a6:	e01a      	b.n	801a2de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	2b03      	cmp	r3, #3
 801a2b2:	d114      	bne.n	801a2de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2ba:	695b      	ldr	r3, [r3, #20]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d00e      	beq.n	801a2de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2c6:	695b      	ldr	r3, [r3, #20]
 801a2c8:	7afa      	ldrb	r2, [r7, #11]
 801a2ca:	4611      	mov	r1, r2
 801a2cc:	68f8      	ldr	r0, [r7, #12]
 801a2ce:	4798      	blx	r3
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a2d4:	7dfb      	ldrb	r3, [r7, #23]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d001      	beq.n	801a2de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a2da:	7dfb      	ldrb	r3, [r7, #23]
 801a2dc:	e000      	b.n	801a2e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a2de:	2300      	movs	r3, #0
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3718      	adds	r7, #24
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	2201      	movs	r2, #1
 801a2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2200      	movs	r2, #0
 801a304:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	2200      	movs	r2, #0
 801a30a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a314:	2b00      	cmp	r3, #0
 801a316:	d101      	bne.n	801a31c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a318:	2303      	movs	r3, #3
 801a31a:	e02f      	b.n	801a37c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassDataCDC != NULL)
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a322:	2b00      	cmp	r3, #0
 801a324:	d00f      	beq.n	801a346 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a32c:	685b      	ldr	r3, [r3, #4]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d009      	beq.n	801a346 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a338:	685b      	ldr	r3, [r3, #4]
 801a33a:	687a      	ldr	r2, [r7, #4]
 801a33c:	6852      	ldr	r2, [r2, #4]
 801a33e:	b2d2      	uxtb	r2, r2
 801a340:	4611      	mov	r1, r2
 801a342:	6878      	ldr	r0, [r7, #4]
 801a344:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a346:	2340      	movs	r3, #64	; 0x40
 801a348:	2200      	movs	r2, #0
 801a34a:	2100      	movs	r1, #0
 801a34c:	6878      	ldr	r0, [r7, #4]
 801a34e:	f7ff fb6f 	bl	8019a30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	2201      	movs	r2, #1
 801a356:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	2240      	movs	r2, #64	; 0x40
 801a35e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a362:	2340      	movs	r3, #64	; 0x40
 801a364:	2200      	movs	r2, #0
 801a366:	2180      	movs	r1, #128	; 0x80
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	f7ff fb61 	bl	8019a30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	2201      	movs	r2, #1
 801a372:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2240      	movs	r2, #64	; 0x40
 801a378:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a37a:	2300      	movs	r3, #0
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	3708      	adds	r7, #8
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}

0801a384 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a384:	b480      	push	{r7}
 801a386:	b083      	sub	sp, #12
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
 801a38c:	460b      	mov	r3, r1
 801a38e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	78fa      	ldrb	r2, [r7, #3]
 801a394:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a396:	2300      	movs	r3, #0
}
 801a398:	4618      	mov	r0, r3
 801a39a:	370c      	adds	r7, #12
 801a39c:	46bd      	mov	sp, r7
 801a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a2:	4770      	bx	lr

0801a3a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a3a4:	b480      	push	{r7}
 801a3a6:	b083      	sub	sp, #12
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a3b2:	b2da      	uxtb	r2, r3
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2204      	movs	r2, #4
 801a3be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a3c2:	2300      	movs	r3, #0
}
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	370c      	adds	r7, #12
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ce:	4770      	bx	lr

0801a3d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a3d0:	b480      	push	{r7}
 801a3d2:	b083      	sub	sp, #12
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a3de:	b2db      	uxtb	r3, r3
 801a3e0:	2b04      	cmp	r3, #4
 801a3e2:	d106      	bne.n	801a3f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a3ea:	b2da      	uxtb	r2, r3
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a3f2:	2300      	movs	r3, #0
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	370c      	adds	r7, #12
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3fe:	4770      	bx	lr

0801a400 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b082      	sub	sp, #8
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d101      	bne.n	801a416 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a412:	2303      	movs	r3, #3
 801a414:	e012      	b.n	801a43c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	2b03      	cmp	r3, #3
 801a420:	d10b      	bne.n	801a43a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a428:	69db      	ldr	r3, [r3, #28]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d005      	beq.n	801a43a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a434:	69db      	ldr	r3, [r3, #28]
 801a436:	6878      	ldr	r0, [r7, #4]
 801a438:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a43a:	2300      	movs	r3, #0
}
 801a43c:	4618      	mov	r0, r3
 801a43e:	3708      	adds	r7, #8
 801a440:	46bd      	mov	sp, r7
 801a442:	bd80      	pop	{r7, pc}

0801a444 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b082      	sub	sp, #8
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	460b      	mov	r3, r1
 801a44e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a456:	2b00      	cmp	r3, #0
 801a458:	d101      	bne.n	801a45e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a45a:	2303      	movs	r3, #3
 801a45c:	e014      	b.n	801a488 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a464:	b2db      	uxtb	r3, r3
 801a466:	2b03      	cmp	r3, #3
 801a468:	d10d      	bne.n	801a486 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a470:	6a1b      	ldr	r3, [r3, #32]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d007      	beq.n	801a486 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a47c:	6a1b      	ldr	r3, [r3, #32]
 801a47e:	78fa      	ldrb	r2, [r7, #3]
 801a480:	4611      	mov	r1, r2
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a486:	2300      	movs	r3, #0
}
 801a488:	4618      	mov	r0, r3
 801a48a:	3708      	adds	r7, #8
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}

0801a490 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a490:	b580      	push	{r7, lr}
 801a492:	b082      	sub	sp, #8
 801a494:	af00      	add	r7, sp, #0
 801a496:	6078      	str	r0, [r7, #4]
 801a498:	460b      	mov	r3, r1
 801a49a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d101      	bne.n	801a4aa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a4a6:	2303      	movs	r3, #3
 801a4a8:	e014      	b.n	801a4d4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	2b03      	cmp	r3, #3
 801a4b4:	d10d      	bne.n	801a4d2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d007      	beq.n	801a4d2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4ca:	78fa      	ldrb	r2, [r7, #3]
 801a4cc:	4611      	mov	r1, r2
 801a4ce:	6878      	ldr	r0, [r7, #4]
 801a4d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a4d2:	2300      	movs	r3, #0
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	3708      	adds	r7, #8
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	bd80      	pop	{r7, pc}

0801a4dc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a4dc:	b480      	push	{r7}
 801a4de:	b083      	sub	sp, #12
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a4e4:	2300      	movs	r3, #0
}
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	370c      	adds	r7, #12
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f0:	4770      	bx	lr

0801a4f2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a4f2:	b580      	push	{r7, lr}
 801a4f4:	b082      	sub	sp, #8
 801a4f6:	af00      	add	r7, sp, #0
 801a4f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	2201      	movs	r2, #1
 801a4fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d009      	beq.n	801a520 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a512:	685b      	ldr	r3, [r3, #4]
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	6852      	ldr	r2, [r2, #4]
 801a518:	b2d2      	uxtb	r2, r2
 801a51a:	4611      	mov	r1, r2
 801a51c:	6878      	ldr	r0, [r7, #4]
 801a51e:	4798      	blx	r3
  }

  return USBD_OK;
 801a520:	2300      	movs	r3, #0
}
 801a522:	4618      	mov	r0, r3
 801a524:	3708      	adds	r7, #8
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}

0801a52a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a52a:	b480      	push	{r7}
 801a52c:	b087      	sub	sp, #28
 801a52e:	af00      	add	r7, sp, #0
 801a530:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a536:	697b      	ldr	r3, [r7, #20]
 801a538:	781b      	ldrb	r3, [r3, #0]
 801a53a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	3301      	adds	r3, #1
 801a540:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a542:	697b      	ldr	r3, [r7, #20]
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a548:	8a3b      	ldrh	r3, [r7, #16]
 801a54a:	021b      	lsls	r3, r3, #8
 801a54c:	b21a      	sxth	r2, r3
 801a54e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a552:	4313      	orrs	r3, r2
 801a554:	b21b      	sxth	r3, r3
 801a556:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a558:	89fb      	ldrh	r3, [r7, #14]
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	371c      	adds	r7, #28
 801a55e:	46bd      	mov	sp, r7
 801a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a564:	4770      	bx	lr
	...

0801a568 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b084      	sub	sp, #16
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
 801a570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a572:	2300      	movs	r3, #0
 801a574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a576:	683b      	ldr	r3, [r7, #0]
 801a578:	781b      	ldrb	r3, [r3, #0]
 801a57a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a57e:	2b40      	cmp	r3, #64	; 0x40
 801a580:	d005      	beq.n	801a58e <USBD_StdDevReq+0x26>
 801a582:	2b40      	cmp	r3, #64	; 0x40
 801a584:	d853      	bhi.n	801a62e <USBD_StdDevReq+0xc6>
 801a586:	2b00      	cmp	r3, #0
 801a588:	d00b      	beq.n	801a5a2 <USBD_StdDevReq+0x3a>
 801a58a:	2b20      	cmp	r3, #32
 801a58c:	d14f      	bne.n	801a62e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a594:	689b      	ldr	r3, [r3, #8]
 801a596:	6839      	ldr	r1, [r7, #0]
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	4798      	blx	r3
 801a59c:	4603      	mov	r3, r0
 801a59e:	73fb      	strb	r3, [r7, #15]
      break;
 801a5a0:	e04a      	b.n	801a638 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a5a2:	683b      	ldr	r3, [r7, #0]
 801a5a4:	785b      	ldrb	r3, [r3, #1]
 801a5a6:	2b09      	cmp	r3, #9
 801a5a8:	d83b      	bhi.n	801a622 <USBD_StdDevReq+0xba>
 801a5aa:	a201      	add	r2, pc, #4	; (adr r2, 801a5b0 <USBD_StdDevReq+0x48>)
 801a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5b0:	0801a605 	.word	0x0801a605
 801a5b4:	0801a619 	.word	0x0801a619
 801a5b8:	0801a623 	.word	0x0801a623
 801a5bc:	0801a60f 	.word	0x0801a60f
 801a5c0:	0801a623 	.word	0x0801a623
 801a5c4:	0801a5e3 	.word	0x0801a5e3
 801a5c8:	0801a5d9 	.word	0x0801a5d9
 801a5cc:	0801a623 	.word	0x0801a623
 801a5d0:	0801a5fb 	.word	0x0801a5fb
 801a5d4:	0801a5ed 	.word	0x0801a5ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a5d8:	6839      	ldr	r1, [r7, #0]
 801a5da:	6878      	ldr	r0, [r7, #4]
 801a5dc:	f000 f9de 	bl	801a99c <USBD_GetDescriptor>
          break;
 801a5e0:	e024      	b.n	801a62c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a5e2:	6839      	ldr	r1, [r7, #0]
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f000 fb6d 	bl	801acc4 <USBD_SetAddress>
          break;
 801a5ea:	e01f      	b.n	801a62c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a5ec:	6839      	ldr	r1, [r7, #0]
 801a5ee:	6878      	ldr	r0, [r7, #4]
 801a5f0:	f000 fbac 	bl	801ad4c <USBD_SetConfig>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	73fb      	strb	r3, [r7, #15]
          break;
 801a5f8:	e018      	b.n	801a62c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a5fa:	6839      	ldr	r1, [r7, #0]
 801a5fc:	6878      	ldr	r0, [r7, #4]
 801a5fe:	f000 fc4b 	bl	801ae98 <USBD_GetConfig>
          break;
 801a602:	e013      	b.n	801a62c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a604:	6839      	ldr	r1, [r7, #0]
 801a606:	6878      	ldr	r0, [r7, #4]
 801a608:	f000 fc7c 	bl	801af04 <USBD_GetStatus>
          break;
 801a60c:	e00e      	b.n	801a62c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a60e:	6839      	ldr	r1, [r7, #0]
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f000 fcab 	bl	801af6c <USBD_SetFeature>
          break;
 801a616:	e009      	b.n	801a62c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a618:	6839      	ldr	r1, [r7, #0]
 801a61a:	6878      	ldr	r0, [r7, #4]
 801a61c:	f000 fcba 	bl	801af94 <USBD_ClrFeature>
          break;
 801a620:	e004      	b.n	801a62c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a622:	6839      	ldr	r1, [r7, #0]
 801a624:	6878      	ldr	r0, [r7, #4]
 801a626:	f000 fd11 	bl	801b04c <USBD_CtlError>
          break;
 801a62a:	bf00      	nop
      }
      break;
 801a62c:	e004      	b.n	801a638 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a62e:	6839      	ldr	r1, [r7, #0]
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f000 fd0b 	bl	801b04c <USBD_CtlError>
      break;
 801a636:	bf00      	nop
  }

  return ret;
 801a638:	7bfb      	ldrb	r3, [r7, #15]
}
 801a63a:	4618      	mov	r0, r3
 801a63c:	3710      	adds	r7, #16
 801a63e:	46bd      	mov	sp, r7
 801a640:	bd80      	pop	{r7, pc}
 801a642:	bf00      	nop

0801a644 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b084      	sub	sp, #16
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
 801a64c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a64e:	2300      	movs	r3, #0
 801a650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a652:	683b      	ldr	r3, [r7, #0]
 801a654:	781b      	ldrb	r3, [r3, #0]
 801a656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a65a:	2b40      	cmp	r3, #64	; 0x40
 801a65c:	d005      	beq.n	801a66a <USBD_StdItfReq+0x26>
 801a65e:	2b40      	cmp	r3, #64	; 0x40
 801a660:	d82f      	bhi.n	801a6c2 <USBD_StdItfReq+0x7e>
 801a662:	2b00      	cmp	r3, #0
 801a664:	d001      	beq.n	801a66a <USBD_StdItfReq+0x26>
 801a666:	2b20      	cmp	r3, #32
 801a668:	d12b      	bne.n	801a6c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a670:	b2db      	uxtb	r3, r3
 801a672:	3b01      	subs	r3, #1
 801a674:	2b02      	cmp	r3, #2
 801a676:	d81d      	bhi.n	801a6b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	889b      	ldrh	r3, [r3, #4]
 801a67c:	b2db      	uxtb	r3, r3
 801a67e:	2b03      	cmp	r3, #3
 801a680:	d813      	bhi.n	801a6aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a688:	689b      	ldr	r3, [r3, #8]
 801a68a:	6839      	ldr	r1, [r7, #0]
 801a68c:	6878      	ldr	r0, [r7, #4]
 801a68e:	4798      	blx	r3
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a694:	683b      	ldr	r3, [r7, #0]
 801a696:	88db      	ldrh	r3, [r3, #6]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d110      	bne.n	801a6be <USBD_StdItfReq+0x7a>
 801a69c:	7bfb      	ldrb	r3, [r7, #15]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d10d      	bne.n	801a6be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a6a2:	6878      	ldr	r0, [r7, #4]
 801a6a4:	f000 febf 	bl	801b426 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a6a8:	e009      	b.n	801a6be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a6aa:	6839      	ldr	r1, [r7, #0]
 801a6ac:	6878      	ldr	r0, [r7, #4]
 801a6ae:	f000 fccd 	bl	801b04c <USBD_CtlError>
          break;
 801a6b2:	e004      	b.n	801a6be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a6b4:	6839      	ldr	r1, [r7, #0]
 801a6b6:	6878      	ldr	r0, [r7, #4]
 801a6b8:	f000 fcc8 	bl	801b04c <USBD_CtlError>
          break;
 801a6bc:	e000      	b.n	801a6c0 <USBD_StdItfReq+0x7c>
          break;
 801a6be:	bf00      	nop
      }
      break;
 801a6c0:	e004      	b.n	801a6cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a6c2:	6839      	ldr	r1, [r7, #0]
 801a6c4:	6878      	ldr	r0, [r7, #4]
 801a6c6:	f000 fcc1 	bl	801b04c <USBD_CtlError>
      break;
 801a6ca:	bf00      	nop
  }

  return ret;
 801a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	3710      	adds	r7, #16
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd80      	pop	{r7, pc}

0801a6d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a6d6:	b580      	push	{r7, lr}
 801a6d8:	b084      	sub	sp, #16
 801a6da:	af00      	add	r7, sp, #0
 801a6dc:	6078      	str	r0, [r7, #4]
 801a6de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	889b      	ldrh	r3, [r3, #4]
 801a6e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a6ea:	683b      	ldr	r3, [r7, #0]
 801a6ec:	781b      	ldrb	r3, [r3, #0]
 801a6ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a6f2:	2b40      	cmp	r3, #64	; 0x40
 801a6f4:	d007      	beq.n	801a706 <USBD_StdEPReq+0x30>
 801a6f6:	2b40      	cmp	r3, #64	; 0x40
 801a6f8:	f200 8145 	bhi.w	801a986 <USBD_StdEPReq+0x2b0>
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d00c      	beq.n	801a71a <USBD_StdEPReq+0x44>
 801a700:	2b20      	cmp	r3, #32
 801a702:	f040 8140 	bne.w	801a986 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a70c:	689b      	ldr	r3, [r3, #8]
 801a70e:	6839      	ldr	r1, [r7, #0]
 801a710:	6878      	ldr	r0, [r7, #4]
 801a712:	4798      	blx	r3
 801a714:	4603      	mov	r3, r0
 801a716:	73fb      	strb	r3, [r7, #15]
      break;
 801a718:	e13a      	b.n	801a990 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a71a:	683b      	ldr	r3, [r7, #0]
 801a71c:	785b      	ldrb	r3, [r3, #1]
 801a71e:	2b03      	cmp	r3, #3
 801a720:	d007      	beq.n	801a732 <USBD_StdEPReq+0x5c>
 801a722:	2b03      	cmp	r3, #3
 801a724:	f300 8129 	bgt.w	801a97a <USBD_StdEPReq+0x2a4>
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d07f      	beq.n	801a82c <USBD_StdEPReq+0x156>
 801a72c:	2b01      	cmp	r3, #1
 801a72e:	d03c      	beq.n	801a7aa <USBD_StdEPReq+0xd4>
 801a730:	e123      	b.n	801a97a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a738:	b2db      	uxtb	r3, r3
 801a73a:	2b02      	cmp	r3, #2
 801a73c:	d002      	beq.n	801a744 <USBD_StdEPReq+0x6e>
 801a73e:	2b03      	cmp	r3, #3
 801a740:	d016      	beq.n	801a770 <USBD_StdEPReq+0x9a>
 801a742:	e02c      	b.n	801a79e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a744:	7bbb      	ldrb	r3, [r7, #14]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d00d      	beq.n	801a766 <USBD_StdEPReq+0x90>
 801a74a:	7bbb      	ldrb	r3, [r7, #14]
 801a74c:	2b80      	cmp	r3, #128	; 0x80
 801a74e:	d00a      	beq.n	801a766 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a750:	7bbb      	ldrb	r3, [r7, #14]
 801a752:	4619      	mov	r1, r3
 801a754:	6878      	ldr	r0, [r7, #4]
 801a756:	f7ff fa15 	bl	8019b84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a75a:	2180      	movs	r1, #128	; 0x80
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f7ff fa11 	bl	8019b84 <USBD_LL_StallEP>
 801a762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a764:	e020      	b.n	801a7a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a766:	6839      	ldr	r1, [r7, #0]
 801a768:	6878      	ldr	r0, [r7, #4]
 801a76a:	f000 fc6f 	bl	801b04c <USBD_CtlError>
              break;
 801a76e:	e01b      	b.n	801a7a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	885b      	ldrh	r3, [r3, #2]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d10e      	bne.n	801a796 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a778:	7bbb      	ldrb	r3, [r7, #14]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d00b      	beq.n	801a796 <USBD_StdEPReq+0xc0>
 801a77e:	7bbb      	ldrb	r3, [r7, #14]
 801a780:	2b80      	cmp	r3, #128	; 0x80
 801a782:	d008      	beq.n	801a796 <USBD_StdEPReq+0xc0>
 801a784:	683b      	ldr	r3, [r7, #0]
 801a786:	88db      	ldrh	r3, [r3, #6]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d104      	bne.n	801a796 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a78c:	7bbb      	ldrb	r3, [r7, #14]
 801a78e:	4619      	mov	r1, r3
 801a790:	6878      	ldr	r0, [r7, #4]
 801a792:	f7ff f9f7 	bl	8019b84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a796:	6878      	ldr	r0, [r7, #4]
 801a798:	f000 fe45 	bl	801b426 <USBD_CtlSendStatus>

              break;
 801a79c:	e004      	b.n	801a7a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a79e:	6839      	ldr	r1, [r7, #0]
 801a7a0:	6878      	ldr	r0, [r7, #4]
 801a7a2:	f000 fc53 	bl	801b04c <USBD_CtlError>
              break;
 801a7a6:	bf00      	nop
          }
          break;
 801a7a8:	e0ec      	b.n	801a984 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a7b0:	b2db      	uxtb	r3, r3
 801a7b2:	2b02      	cmp	r3, #2
 801a7b4:	d002      	beq.n	801a7bc <USBD_StdEPReq+0xe6>
 801a7b6:	2b03      	cmp	r3, #3
 801a7b8:	d016      	beq.n	801a7e8 <USBD_StdEPReq+0x112>
 801a7ba:	e030      	b.n	801a81e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a7bc:	7bbb      	ldrb	r3, [r7, #14]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d00d      	beq.n	801a7de <USBD_StdEPReq+0x108>
 801a7c2:	7bbb      	ldrb	r3, [r7, #14]
 801a7c4:	2b80      	cmp	r3, #128	; 0x80
 801a7c6:	d00a      	beq.n	801a7de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a7c8:	7bbb      	ldrb	r3, [r7, #14]
 801a7ca:	4619      	mov	r1, r3
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f7ff f9d9 	bl	8019b84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a7d2:	2180      	movs	r1, #128	; 0x80
 801a7d4:	6878      	ldr	r0, [r7, #4]
 801a7d6:	f7ff f9d5 	bl	8019b84 <USBD_LL_StallEP>
 801a7da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a7dc:	e025      	b.n	801a82a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a7de:	6839      	ldr	r1, [r7, #0]
 801a7e0:	6878      	ldr	r0, [r7, #4]
 801a7e2:	f000 fc33 	bl	801b04c <USBD_CtlError>
              break;
 801a7e6:	e020      	b.n	801a82a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	885b      	ldrh	r3, [r3, #2]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d11b      	bne.n	801a828 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a7f0:	7bbb      	ldrb	r3, [r7, #14]
 801a7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d004      	beq.n	801a804 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a7fa:	7bbb      	ldrb	r3, [r7, #14]
 801a7fc:	4619      	mov	r1, r3
 801a7fe:	6878      	ldr	r0, [r7, #4]
 801a800:	f7ff f9f6 	bl	8019bf0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f000 fe0e 	bl	801b426 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a810:	689b      	ldr	r3, [r3, #8]
 801a812:	6839      	ldr	r1, [r7, #0]
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	4798      	blx	r3
 801a818:	4603      	mov	r3, r0
 801a81a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a81c:	e004      	b.n	801a828 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a81e:	6839      	ldr	r1, [r7, #0]
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f000 fc13 	bl	801b04c <USBD_CtlError>
              break;
 801a826:	e000      	b.n	801a82a <USBD_StdEPReq+0x154>
              break;
 801a828:	bf00      	nop
          }
          break;
 801a82a:	e0ab      	b.n	801a984 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a832:	b2db      	uxtb	r3, r3
 801a834:	2b02      	cmp	r3, #2
 801a836:	d002      	beq.n	801a83e <USBD_StdEPReq+0x168>
 801a838:	2b03      	cmp	r3, #3
 801a83a:	d032      	beq.n	801a8a2 <USBD_StdEPReq+0x1cc>
 801a83c:	e097      	b.n	801a96e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a83e:	7bbb      	ldrb	r3, [r7, #14]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d007      	beq.n	801a854 <USBD_StdEPReq+0x17e>
 801a844:	7bbb      	ldrb	r3, [r7, #14]
 801a846:	2b80      	cmp	r3, #128	; 0x80
 801a848:	d004      	beq.n	801a854 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a84a:	6839      	ldr	r1, [r7, #0]
 801a84c:	6878      	ldr	r0, [r7, #4]
 801a84e:	f000 fbfd 	bl	801b04c <USBD_CtlError>
                break;
 801a852:	e091      	b.n	801a978 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	da0b      	bge.n	801a874 <USBD_StdEPReq+0x19e>
 801a85c:	7bbb      	ldrb	r3, [r7, #14]
 801a85e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a862:	4613      	mov	r3, r2
 801a864:	009b      	lsls	r3, r3, #2
 801a866:	4413      	add	r3, r2
 801a868:	009b      	lsls	r3, r3, #2
 801a86a:	3310      	adds	r3, #16
 801a86c:	687a      	ldr	r2, [r7, #4]
 801a86e:	4413      	add	r3, r2
 801a870:	3304      	adds	r3, #4
 801a872:	e00b      	b.n	801a88c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a874:	7bbb      	ldrb	r3, [r7, #14]
 801a876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a87a:	4613      	mov	r3, r2
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	4413      	add	r3, r2
 801a880:	009b      	lsls	r3, r3, #2
 801a882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a886:	687a      	ldr	r2, [r7, #4]
 801a888:	4413      	add	r3, r2
 801a88a:	3304      	adds	r3, #4
 801a88c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	2200      	movs	r2, #0
 801a892:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	2202      	movs	r2, #2
 801a898:	4619      	mov	r1, r3
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f000 fd69 	bl	801b372 <USBD_CtlSendData>
              break;
 801a8a0:	e06a      	b.n	801a978 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a8a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	da11      	bge.n	801a8ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a8aa:	7bbb      	ldrb	r3, [r7, #14]
 801a8ac:	f003 020f 	and.w	r2, r3, #15
 801a8b0:	6879      	ldr	r1, [r7, #4]
 801a8b2:	4613      	mov	r3, r2
 801a8b4:	009b      	lsls	r3, r3, #2
 801a8b6:	4413      	add	r3, r2
 801a8b8:	009b      	lsls	r3, r3, #2
 801a8ba:	440b      	add	r3, r1
 801a8bc:	3324      	adds	r3, #36	; 0x24
 801a8be:	881b      	ldrh	r3, [r3, #0]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d117      	bne.n	801a8f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a8c4:	6839      	ldr	r1, [r7, #0]
 801a8c6:	6878      	ldr	r0, [r7, #4]
 801a8c8:	f000 fbc0 	bl	801b04c <USBD_CtlError>
                  break;
 801a8cc:	e054      	b.n	801a978 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a8ce:	7bbb      	ldrb	r3, [r7, #14]
 801a8d0:	f003 020f 	and.w	r2, r3, #15
 801a8d4:	6879      	ldr	r1, [r7, #4]
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	009b      	lsls	r3, r3, #2
 801a8da:	4413      	add	r3, r2
 801a8dc:	009b      	lsls	r3, r3, #2
 801a8de:	440b      	add	r3, r1
 801a8e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a8e4:	881b      	ldrh	r3, [r3, #0]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d104      	bne.n	801a8f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a8ea:	6839      	ldr	r1, [r7, #0]
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f000 fbad 	bl	801b04c <USBD_CtlError>
                  break;
 801a8f2:	e041      	b.n	801a978 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a8f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	da0b      	bge.n	801a914 <USBD_StdEPReq+0x23e>
 801a8fc:	7bbb      	ldrb	r3, [r7, #14]
 801a8fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a902:	4613      	mov	r3, r2
 801a904:	009b      	lsls	r3, r3, #2
 801a906:	4413      	add	r3, r2
 801a908:	009b      	lsls	r3, r3, #2
 801a90a:	3310      	adds	r3, #16
 801a90c:	687a      	ldr	r2, [r7, #4]
 801a90e:	4413      	add	r3, r2
 801a910:	3304      	adds	r3, #4
 801a912:	e00b      	b.n	801a92c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a914:	7bbb      	ldrb	r3, [r7, #14]
 801a916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a91a:	4613      	mov	r3, r2
 801a91c:	009b      	lsls	r3, r3, #2
 801a91e:	4413      	add	r3, r2
 801a920:	009b      	lsls	r3, r3, #2
 801a922:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a926:	687a      	ldr	r2, [r7, #4]
 801a928:	4413      	add	r3, r2
 801a92a:	3304      	adds	r3, #4
 801a92c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a92e:	7bbb      	ldrb	r3, [r7, #14]
 801a930:	2b00      	cmp	r3, #0
 801a932:	d002      	beq.n	801a93a <USBD_StdEPReq+0x264>
 801a934:	7bbb      	ldrb	r3, [r7, #14]
 801a936:	2b80      	cmp	r3, #128	; 0x80
 801a938:	d103      	bne.n	801a942 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	2200      	movs	r2, #0
 801a93e:	601a      	str	r2, [r3, #0]
 801a940:	e00e      	b.n	801a960 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a942:	7bbb      	ldrb	r3, [r7, #14]
 801a944:	4619      	mov	r1, r3
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f7ff f988 	bl	8019c5c <USBD_LL_IsStallEP>
 801a94c:	4603      	mov	r3, r0
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d003      	beq.n	801a95a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	2201      	movs	r2, #1
 801a956:	601a      	str	r2, [r3, #0]
 801a958:	e002      	b.n	801a960 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	2200      	movs	r2, #0
 801a95e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	2202      	movs	r2, #2
 801a964:	4619      	mov	r1, r3
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	f000 fd03 	bl	801b372 <USBD_CtlSendData>
              break;
 801a96c:	e004      	b.n	801a978 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801a96e:	6839      	ldr	r1, [r7, #0]
 801a970:	6878      	ldr	r0, [r7, #4]
 801a972:	f000 fb6b 	bl	801b04c <USBD_CtlError>
              break;
 801a976:	bf00      	nop
          }
          break;
 801a978:	e004      	b.n	801a984 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801a97a:	6839      	ldr	r1, [r7, #0]
 801a97c:	6878      	ldr	r0, [r7, #4]
 801a97e:	f000 fb65 	bl	801b04c <USBD_CtlError>
          break;
 801a982:	bf00      	nop
      }
      break;
 801a984:	e004      	b.n	801a990 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801a986:	6839      	ldr	r1, [r7, #0]
 801a988:	6878      	ldr	r0, [r7, #4]
 801a98a:	f000 fb5f 	bl	801b04c <USBD_CtlError>
      break;
 801a98e:	bf00      	nop
  }

  return ret;
 801a990:	7bfb      	ldrb	r3, [r7, #15]
}
 801a992:	4618      	mov	r0, r3
 801a994:	3710      	adds	r7, #16
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}
	...

0801a99c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b084      	sub	sp, #16
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
 801a9a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801a9aa:	2300      	movs	r3, #0
 801a9ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801a9b2:	683b      	ldr	r3, [r7, #0]
 801a9b4:	885b      	ldrh	r3, [r3, #2]
 801a9b6:	0a1b      	lsrs	r3, r3, #8
 801a9b8:	b29b      	uxth	r3, r3
 801a9ba:	3b01      	subs	r3, #1
 801a9bc:	2b0e      	cmp	r3, #14
 801a9be:	f200 8152 	bhi.w	801ac66 <USBD_GetDescriptor+0x2ca>
 801a9c2:	a201      	add	r2, pc, #4	; (adr r2, 801a9c8 <USBD_GetDescriptor+0x2c>)
 801a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9c8:	0801aa39 	.word	0x0801aa39
 801a9cc:	0801aa51 	.word	0x0801aa51
 801a9d0:	0801aa91 	.word	0x0801aa91
 801a9d4:	0801ac67 	.word	0x0801ac67
 801a9d8:	0801ac67 	.word	0x0801ac67
 801a9dc:	0801ac07 	.word	0x0801ac07
 801a9e0:	0801ac33 	.word	0x0801ac33
 801a9e4:	0801ac67 	.word	0x0801ac67
 801a9e8:	0801ac67 	.word	0x0801ac67
 801a9ec:	0801ac67 	.word	0x0801ac67
 801a9f0:	0801ac67 	.word	0x0801ac67
 801a9f4:	0801ac67 	.word	0x0801ac67
 801a9f8:	0801ac67 	.word	0x0801ac67
 801a9fc:	0801ac67 	.word	0x0801ac67
 801aa00:	0801aa05 	.word	0x0801aa05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa0a:	69db      	ldr	r3, [r3, #28]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d00b      	beq.n	801aa28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa16:	69db      	ldr	r3, [r3, #28]
 801aa18:	687a      	ldr	r2, [r7, #4]
 801aa1a:	7c12      	ldrb	r2, [r2, #16]
 801aa1c:	f107 0108 	add.w	r1, r7, #8
 801aa20:	4610      	mov	r0, r2
 801aa22:	4798      	blx	r3
 801aa24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aa26:	e126      	b.n	801ac76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801aa28:	6839      	ldr	r1, [r7, #0]
 801aa2a:	6878      	ldr	r0, [r7, #4]
 801aa2c:	f000 fb0e 	bl	801b04c <USBD_CtlError>
        err++;
 801aa30:	7afb      	ldrb	r3, [r7, #11]
 801aa32:	3301      	adds	r3, #1
 801aa34:	72fb      	strb	r3, [r7, #11]
      break;
 801aa36:	e11e      	b.n	801ac76 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	687a      	ldr	r2, [r7, #4]
 801aa42:	7c12      	ldrb	r2, [r2, #16]
 801aa44:	f107 0108 	add.w	r1, r7, #8
 801aa48:	4610      	mov	r0, r2
 801aa4a:	4798      	blx	r3
 801aa4c:	60f8      	str	r0, [r7, #12]
      break;
 801aa4e:	e112      	b.n	801ac76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	7c1b      	ldrb	r3, [r3, #16]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d10d      	bne.n	801aa74 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa60:	f107 0208 	add.w	r2, r7, #8
 801aa64:	4610      	mov	r0, r2
 801aa66:	4798      	blx	r3
 801aa68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	3301      	adds	r3, #1
 801aa6e:	2202      	movs	r2, #2
 801aa70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801aa72:	e100      	b.n	801ac76 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa7c:	f107 0208 	add.w	r2, r7, #8
 801aa80:	4610      	mov	r0, r2
 801aa82:	4798      	blx	r3
 801aa84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	3301      	adds	r3, #1
 801aa8a:	2202      	movs	r2, #2
 801aa8c:	701a      	strb	r2, [r3, #0]
      break;
 801aa8e:	e0f2      	b.n	801ac76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	885b      	ldrh	r3, [r3, #2]
 801aa94:	b2db      	uxtb	r3, r3
 801aa96:	2b05      	cmp	r3, #5
 801aa98:	f200 80ac 	bhi.w	801abf4 <USBD_GetDescriptor+0x258>
 801aa9c:	a201      	add	r2, pc, #4	; (adr r2, 801aaa4 <USBD_GetDescriptor+0x108>)
 801aa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaa2:	bf00      	nop
 801aaa4:	0801aabd 	.word	0x0801aabd
 801aaa8:	0801aaf1 	.word	0x0801aaf1
 801aaac:	0801ab25 	.word	0x0801ab25
 801aab0:	0801ab59 	.word	0x0801ab59
 801aab4:	0801ab8d 	.word	0x0801ab8d
 801aab8:	0801abc1 	.word	0x0801abc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aac2:	685b      	ldr	r3, [r3, #4]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d00b      	beq.n	801aae0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aace:	685b      	ldr	r3, [r3, #4]
 801aad0:	687a      	ldr	r2, [r7, #4]
 801aad2:	7c12      	ldrb	r2, [r2, #16]
 801aad4:	f107 0108 	add.w	r1, r7, #8
 801aad8:	4610      	mov	r0, r2
 801aada:	4798      	blx	r3
 801aadc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aade:	e091      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aae0:	6839      	ldr	r1, [r7, #0]
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f000 fab2 	bl	801b04c <USBD_CtlError>
            err++;
 801aae8:	7afb      	ldrb	r3, [r7, #11]
 801aaea:	3301      	adds	r3, #1
 801aaec:	72fb      	strb	r3, [r7, #11]
          break;
 801aaee:	e089      	b.n	801ac04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aaf6:	689b      	ldr	r3, [r3, #8]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d00b      	beq.n	801ab14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab02:	689b      	ldr	r3, [r3, #8]
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	7c12      	ldrb	r2, [r2, #16]
 801ab08:	f107 0108 	add.w	r1, r7, #8
 801ab0c:	4610      	mov	r0, r2
 801ab0e:	4798      	blx	r3
 801ab10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ab12:	e077      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab14:	6839      	ldr	r1, [r7, #0]
 801ab16:	6878      	ldr	r0, [r7, #4]
 801ab18:	f000 fa98 	bl	801b04c <USBD_CtlError>
            err++;
 801ab1c:	7afb      	ldrb	r3, [r7, #11]
 801ab1e:	3301      	adds	r3, #1
 801ab20:	72fb      	strb	r3, [r7, #11]
          break;
 801ab22:	e06f      	b.n	801ac04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab2a:	68db      	ldr	r3, [r3, #12]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d00b      	beq.n	801ab48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab36:	68db      	ldr	r3, [r3, #12]
 801ab38:	687a      	ldr	r2, [r7, #4]
 801ab3a:	7c12      	ldrb	r2, [r2, #16]
 801ab3c:	f107 0108 	add.w	r1, r7, #8
 801ab40:	4610      	mov	r0, r2
 801ab42:	4798      	blx	r3
 801ab44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ab46:	e05d      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab48:	6839      	ldr	r1, [r7, #0]
 801ab4a:	6878      	ldr	r0, [r7, #4]
 801ab4c:	f000 fa7e 	bl	801b04c <USBD_CtlError>
            err++;
 801ab50:	7afb      	ldrb	r3, [r7, #11]
 801ab52:	3301      	adds	r3, #1
 801ab54:	72fb      	strb	r3, [r7, #11]
          break;
 801ab56:	e055      	b.n	801ac04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab5e:	691b      	ldr	r3, [r3, #16]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d00b      	beq.n	801ab7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab6a:	691b      	ldr	r3, [r3, #16]
 801ab6c:	687a      	ldr	r2, [r7, #4]
 801ab6e:	7c12      	ldrb	r2, [r2, #16]
 801ab70:	f107 0108 	add.w	r1, r7, #8
 801ab74:	4610      	mov	r0, r2
 801ab76:	4798      	blx	r3
 801ab78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ab7a:	e043      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801ab7c:	6839      	ldr	r1, [r7, #0]
 801ab7e:	6878      	ldr	r0, [r7, #4]
 801ab80:	f000 fa64 	bl	801b04c <USBD_CtlError>
            err++;
 801ab84:	7afb      	ldrb	r3, [r7, #11]
 801ab86:	3301      	adds	r3, #1
 801ab88:	72fb      	strb	r3, [r7, #11]
          break;
 801ab8a:	e03b      	b.n	801ac04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab92:	695b      	ldr	r3, [r3, #20]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d00b      	beq.n	801abb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ab9e:	695b      	ldr	r3, [r3, #20]
 801aba0:	687a      	ldr	r2, [r7, #4]
 801aba2:	7c12      	ldrb	r2, [r2, #16]
 801aba4:	f107 0108 	add.w	r1, r7, #8
 801aba8:	4610      	mov	r0, r2
 801abaa:	4798      	blx	r3
 801abac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801abae:	e029      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801abb0:	6839      	ldr	r1, [r7, #0]
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	f000 fa4a 	bl	801b04c <USBD_CtlError>
            err++;
 801abb8:	7afb      	ldrb	r3, [r7, #11]
 801abba:	3301      	adds	r3, #1
 801abbc:	72fb      	strb	r3, [r7, #11]
          break;
 801abbe:	e021      	b.n	801ac04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abc6:	699b      	ldr	r3, [r3, #24]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d00b      	beq.n	801abe4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801abd2:	699b      	ldr	r3, [r3, #24]
 801abd4:	687a      	ldr	r2, [r7, #4]
 801abd6:	7c12      	ldrb	r2, [r2, #16]
 801abd8:	f107 0108 	add.w	r1, r7, #8
 801abdc:	4610      	mov	r0, r2
 801abde:	4798      	blx	r3
 801abe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801abe2:	e00f      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801abe4:	6839      	ldr	r1, [r7, #0]
 801abe6:	6878      	ldr	r0, [r7, #4]
 801abe8:	f000 fa30 	bl	801b04c <USBD_CtlError>
            err++;
 801abec:	7afb      	ldrb	r3, [r7, #11]
 801abee:	3301      	adds	r3, #1
 801abf0:	72fb      	strb	r3, [r7, #11]
          break;
 801abf2:	e007      	b.n	801ac04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801abf4:	6839      	ldr	r1, [r7, #0]
 801abf6:	6878      	ldr	r0, [r7, #4]
 801abf8:	f000 fa28 	bl	801b04c <USBD_CtlError>
          err++;
 801abfc:	7afb      	ldrb	r3, [r7, #11]
 801abfe:	3301      	adds	r3, #1
 801ac00:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801ac02:	bf00      	nop
      }
      break;
 801ac04:	e037      	b.n	801ac76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	7c1b      	ldrb	r3, [r3, #16]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d109      	bne.n	801ac22 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac16:	f107 0208 	add.w	r2, r7, #8
 801ac1a:	4610      	mov	r0, r2
 801ac1c:	4798      	blx	r3
 801ac1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ac20:	e029      	b.n	801ac76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ac22:	6839      	ldr	r1, [r7, #0]
 801ac24:	6878      	ldr	r0, [r7, #4]
 801ac26:	f000 fa11 	bl	801b04c <USBD_CtlError>
        err++;
 801ac2a:	7afb      	ldrb	r3, [r7, #11]
 801ac2c:	3301      	adds	r3, #1
 801ac2e:	72fb      	strb	r3, [r7, #11]
      break;
 801ac30:	e021      	b.n	801ac76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	7c1b      	ldrb	r3, [r3, #16]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d10d      	bne.n	801ac56 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac42:	f107 0208 	add.w	r2, r7, #8
 801ac46:	4610      	mov	r0, r2
 801ac48:	4798      	blx	r3
 801ac4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	3301      	adds	r3, #1
 801ac50:	2207      	movs	r2, #7
 801ac52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ac54:	e00f      	b.n	801ac76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801ac56:	6839      	ldr	r1, [r7, #0]
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f000 f9f7 	bl	801b04c <USBD_CtlError>
        err++;
 801ac5e:	7afb      	ldrb	r3, [r7, #11]
 801ac60:	3301      	adds	r3, #1
 801ac62:	72fb      	strb	r3, [r7, #11]
      break;
 801ac64:	e007      	b.n	801ac76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801ac66:	6839      	ldr	r1, [r7, #0]
 801ac68:	6878      	ldr	r0, [r7, #4]
 801ac6a:	f000 f9ef 	bl	801b04c <USBD_CtlError>
      err++;
 801ac6e:	7afb      	ldrb	r3, [r7, #11]
 801ac70:	3301      	adds	r3, #1
 801ac72:	72fb      	strb	r3, [r7, #11]
      break;
 801ac74:	bf00      	nop
  }

  if (err != 0U)
 801ac76:	7afb      	ldrb	r3, [r7, #11]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d11e      	bne.n	801acba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801ac7c:	683b      	ldr	r3, [r7, #0]
 801ac7e:	88db      	ldrh	r3, [r3, #6]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d016      	beq.n	801acb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801ac84:	893b      	ldrh	r3, [r7, #8]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d00e      	beq.n	801aca8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801ac8a:	683b      	ldr	r3, [r7, #0]
 801ac8c:	88da      	ldrh	r2, [r3, #6]
 801ac8e:	893b      	ldrh	r3, [r7, #8]
 801ac90:	4293      	cmp	r3, r2
 801ac92:	bf28      	it	cs
 801ac94:	4613      	movcs	r3, r2
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ac9a:	893b      	ldrh	r3, [r7, #8]
 801ac9c:	461a      	mov	r2, r3
 801ac9e:	68f9      	ldr	r1, [r7, #12]
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f000 fb66 	bl	801b372 <USBD_CtlSendData>
 801aca6:	e009      	b.n	801acbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801aca8:	6839      	ldr	r1, [r7, #0]
 801acaa:	6878      	ldr	r0, [r7, #4]
 801acac:	f000 f9ce 	bl	801b04c <USBD_CtlError>
 801acb0:	e004      	b.n	801acbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801acb2:	6878      	ldr	r0, [r7, #4]
 801acb4:	f000 fbb7 	bl	801b426 <USBD_CtlSendStatus>
 801acb8:	e000      	b.n	801acbc <USBD_GetDescriptor+0x320>
    return;
 801acba:	bf00      	nop
  }
}
 801acbc:	3710      	adds	r7, #16
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}
 801acc2:	bf00      	nop

0801acc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b084      	sub	sp, #16
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
 801accc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801acce:	683b      	ldr	r3, [r7, #0]
 801acd0:	889b      	ldrh	r3, [r3, #4]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d131      	bne.n	801ad3a <USBD_SetAddress+0x76>
 801acd6:	683b      	ldr	r3, [r7, #0]
 801acd8:	88db      	ldrh	r3, [r3, #6]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d12d      	bne.n	801ad3a <USBD_SetAddress+0x76>
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	885b      	ldrh	r3, [r3, #2]
 801ace2:	2b7f      	cmp	r3, #127	; 0x7f
 801ace4:	d829      	bhi.n	801ad3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	885b      	ldrh	r3, [r3, #2]
 801acea:	b2db      	uxtb	r3, r3
 801acec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801acf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801acf8:	b2db      	uxtb	r3, r3
 801acfa:	2b03      	cmp	r3, #3
 801acfc:	d104      	bne.n	801ad08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801acfe:	6839      	ldr	r1, [r7, #0]
 801ad00:	6878      	ldr	r0, [r7, #4]
 801ad02:	f000 f9a3 	bl	801b04c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad06:	e01d      	b.n	801ad44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	7bfa      	ldrb	r2, [r7, #15]
 801ad0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ad10:	7bfb      	ldrb	r3, [r7, #15]
 801ad12:	4619      	mov	r1, r3
 801ad14:	6878      	ldr	r0, [r7, #4]
 801ad16:	f7fe ffcd 	bl	8019cb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	f000 fb83 	bl	801b426 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ad20:	7bfb      	ldrb	r3, [r7, #15]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d004      	beq.n	801ad30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	2202      	movs	r2, #2
 801ad2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad2e:	e009      	b.n	801ad44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2201      	movs	r2, #1
 801ad34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ad38:	e004      	b.n	801ad44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ad3a:	6839      	ldr	r1, [r7, #0]
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f000 f985 	bl	801b04c <USBD_CtlError>
  }
}
 801ad42:	bf00      	nop
 801ad44:	bf00      	nop
 801ad46:	3710      	adds	r7, #16
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd80      	pop	{r7, pc}

0801ad4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b084      	sub	sp, #16
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
 801ad54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ad56:	2300      	movs	r3, #0
 801ad58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	885b      	ldrh	r3, [r3, #2]
 801ad5e:	b2da      	uxtb	r2, r3
 801ad60:	4b4c      	ldr	r3, [pc, #304]	; (801ae94 <USBD_SetConfig+0x148>)
 801ad62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ad64:	4b4b      	ldr	r3, [pc, #300]	; (801ae94 <USBD_SetConfig+0x148>)
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	2b01      	cmp	r3, #1
 801ad6a:	d905      	bls.n	801ad78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801ad6c:	6839      	ldr	r1, [r7, #0]
 801ad6e:	6878      	ldr	r0, [r7, #4]
 801ad70:	f000 f96c 	bl	801b04c <USBD_CtlError>
    return USBD_FAIL;
 801ad74:	2303      	movs	r3, #3
 801ad76:	e088      	b.n	801ae8a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ad7e:	b2db      	uxtb	r3, r3
 801ad80:	2b02      	cmp	r3, #2
 801ad82:	d002      	beq.n	801ad8a <USBD_SetConfig+0x3e>
 801ad84:	2b03      	cmp	r3, #3
 801ad86:	d025      	beq.n	801add4 <USBD_SetConfig+0x88>
 801ad88:	e071      	b.n	801ae6e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ad8a:	4b42      	ldr	r3, [pc, #264]	; (801ae94 <USBD_SetConfig+0x148>)
 801ad8c:	781b      	ldrb	r3, [r3, #0]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d01c      	beq.n	801adcc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801ad92:	4b40      	ldr	r3, [pc, #256]	; (801ae94 <USBD_SetConfig+0x148>)
 801ad94:	781b      	ldrb	r3, [r3, #0]
 801ad96:	461a      	mov	r2, r3
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ad9c:	4b3d      	ldr	r3, [pc, #244]	; (801ae94 <USBD_SetConfig+0x148>)
 801ad9e:	781b      	ldrb	r3, [r3, #0]
 801ada0:	4619      	mov	r1, r3
 801ada2:	6878      	ldr	r0, [r7, #4]
 801ada4:	f7ff f91e 	bl	8019fe4 <USBD_SetClassConfig>
 801ada8:	4603      	mov	r3, r0
 801adaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801adac:	7bfb      	ldrb	r3, [r7, #15]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d004      	beq.n	801adbc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801adb2:	6839      	ldr	r1, [r7, #0]
 801adb4:	6878      	ldr	r0, [r7, #4]
 801adb6:	f000 f949 	bl	801b04c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801adba:	e065      	b.n	801ae88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801adbc:	6878      	ldr	r0, [r7, #4]
 801adbe:	f000 fb32 	bl	801b426 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	2203      	movs	r2, #3
 801adc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801adca:	e05d      	b.n	801ae88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f000 fb2a 	bl	801b426 <USBD_CtlSendStatus>
      break;
 801add2:	e059      	b.n	801ae88 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801add4:	4b2f      	ldr	r3, [pc, #188]	; (801ae94 <USBD_SetConfig+0x148>)
 801add6:	781b      	ldrb	r3, [r3, #0]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d112      	bne.n	801ae02 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	2202      	movs	r2, #2
 801ade0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801ade4:	4b2b      	ldr	r3, [pc, #172]	; (801ae94 <USBD_SetConfig+0x148>)
 801ade6:	781b      	ldrb	r3, [r3, #0]
 801ade8:	461a      	mov	r2, r3
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801adee:	4b29      	ldr	r3, [pc, #164]	; (801ae94 <USBD_SetConfig+0x148>)
 801adf0:	781b      	ldrb	r3, [r3, #0]
 801adf2:	4619      	mov	r1, r3
 801adf4:	6878      	ldr	r0, [r7, #4]
 801adf6:	f7ff f911 	bl	801a01c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801adfa:	6878      	ldr	r0, [r7, #4]
 801adfc:	f000 fb13 	bl	801b426 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ae00:	e042      	b.n	801ae88 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801ae02:	4b24      	ldr	r3, [pc, #144]	; (801ae94 <USBD_SetConfig+0x148>)
 801ae04:	781b      	ldrb	r3, [r3, #0]
 801ae06:	461a      	mov	r2, r3
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	685b      	ldr	r3, [r3, #4]
 801ae0c:	429a      	cmp	r2, r3
 801ae0e:	d02a      	beq.n	801ae66 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	685b      	ldr	r3, [r3, #4]
 801ae14:	b2db      	uxtb	r3, r3
 801ae16:	4619      	mov	r1, r3
 801ae18:	6878      	ldr	r0, [r7, #4]
 801ae1a:	f7ff f8ff 	bl	801a01c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801ae1e:	4b1d      	ldr	r3, [pc, #116]	; (801ae94 <USBD_SetConfig+0x148>)
 801ae20:	781b      	ldrb	r3, [r3, #0]
 801ae22:	461a      	mov	r2, r3
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ae28:	4b1a      	ldr	r3, [pc, #104]	; (801ae94 <USBD_SetConfig+0x148>)
 801ae2a:	781b      	ldrb	r3, [r3, #0]
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	6878      	ldr	r0, [r7, #4]
 801ae30:	f7ff f8d8 	bl	8019fe4 <USBD_SetClassConfig>
 801ae34:	4603      	mov	r3, r0
 801ae36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801ae38:	7bfb      	ldrb	r3, [r7, #15]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d00f      	beq.n	801ae5e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801ae3e:	6839      	ldr	r1, [r7, #0]
 801ae40:	6878      	ldr	r0, [r7, #4]
 801ae42:	f000 f903 	bl	801b04c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	685b      	ldr	r3, [r3, #4]
 801ae4a:	b2db      	uxtb	r3, r3
 801ae4c:	4619      	mov	r1, r3
 801ae4e:	6878      	ldr	r0, [r7, #4]
 801ae50:	f7ff f8e4 	bl	801a01c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	2202      	movs	r2, #2
 801ae58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ae5c:	e014      	b.n	801ae88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ae5e:	6878      	ldr	r0, [r7, #4]
 801ae60:	f000 fae1 	bl	801b426 <USBD_CtlSendStatus>
      break;
 801ae64:	e010      	b.n	801ae88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f000 fadd 	bl	801b426 <USBD_CtlSendStatus>
      break;
 801ae6c:	e00c      	b.n	801ae88 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801ae6e:	6839      	ldr	r1, [r7, #0]
 801ae70:	6878      	ldr	r0, [r7, #4]
 801ae72:	f000 f8eb 	bl	801b04c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ae76:	4b07      	ldr	r3, [pc, #28]	; (801ae94 <USBD_SetConfig+0x148>)
 801ae78:	781b      	ldrb	r3, [r3, #0]
 801ae7a:	4619      	mov	r1, r3
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f7ff f8cd 	bl	801a01c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801ae82:	2303      	movs	r3, #3
 801ae84:	73fb      	strb	r3, [r7, #15]
      break;
 801ae86:	bf00      	nop
  }

  return ret;
 801ae88:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	3710      	adds	r7, #16
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd80      	pop	{r7, pc}
 801ae92:	bf00      	nop
 801ae94:	20001ff0 	.word	0x20001ff0

0801ae98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b082      	sub	sp, #8
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
 801aea0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	88db      	ldrh	r3, [r3, #6]
 801aea6:	2b01      	cmp	r3, #1
 801aea8:	d004      	beq.n	801aeb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801aeaa:	6839      	ldr	r1, [r7, #0]
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f000 f8cd 	bl	801b04c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801aeb2:	e023      	b.n	801aefc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aeba:	b2db      	uxtb	r3, r3
 801aebc:	2b02      	cmp	r3, #2
 801aebe:	dc02      	bgt.n	801aec6 <USBD_GetConfig+0x2e>
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	dc03      	bgt.n	801aecc <USBD_GetConfig+0x34>
 801aec4:	e015      	b.n	801aef2 <USBD_GetConfig+0x5a>
 801aec6:	2b03      	cmp	r3, #3
 801aec8:	d00b      	beq.n	801aee2 <USBD_GetConfig+0x4a>
 801aeca:	e012      	b.n	801aef2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	2200      	movs	r2, #0
 801aed0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	3308      	adds	r3, #8
 801aed6:	2201      	movs	r2, #1
 801aed8:	4619      	mov	r1, r3
 801aeda:	6878      	ldr	r0, [r7, #4]
 801aedc:	f000 fa49 	bl	801b372 <USBD_CtlSendData>
        break;
 801aee0:	e00c      	b.n	801aefc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	3304      	adds	r3, #4
 801aee6:	2201      	movs	r2, #1
 801aee8:	4619      	mov	r1, r3
 801aeea:	6878      	ldr	r0, [r7, #4]
 801aeec:	f000 fa41 	bl	801b372 <USBD_CtlSendData>
        break;
 801aef0:	e004      	b.n	801aefc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801aef2:	6839      	ldr	r1, [r7, #0]
 801aef4:	6878      	ldr	r0, [r7, #4]
 801aef6:	f000 f8a9 	bl	801b04c <USBD_CtlError>
        break;
 801aefa:	bf00      	nop
}
 801aefc:	bf00      	nop
 801aefe:	3708      	adds	r7, #8
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}

0801af04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b082      	sub	sp, #8
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
 801af0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801af14:	b2db      	uxtb	r3, r3
 801af16:	3b01      	subs	r3, #1
 801af18:	2b02      	cmp	r3, #2
 801af1a:	d81e      	bhi.n	801af5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	88db      	ldrh	r3, [r3, #6]
 801af20:	2b02      	cmp	r3, #2
 801af22:	d004      	beq.n	801af2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801af24:	6839      	ldr	r1, [r7, #0]
 801af26:	6878      	ldr	r0, [r7, #4]
 801af28:	f000 f890 	bl	801b04c <USBD_CtlError>
        break;
 801af2c:	e01a      	b.n	801af64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	2201      	movs	r2, #1
 801af32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d005      	beq.n	801af4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	68db      	ldr	r3, [r3, #12]
 801af42:	f043 0202 	orr.w	r2, r3, #2
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	330c      	adds	r3, #12
 801af4e:	2202      	movs	r2, #2
 801af50:	4619      	mov	r1, r3
 801af52:	6878      	ldr	r0, [r7, #4]
 801af54:	f000 fa0d 	bl	801b372 <USBD_CtlSendData>
      break;
 801af58:	e004      	b.n	801af64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801af5a:	6839      	ldr	r1, [r7, #0]
 801af5c:	6878      	ldr	r0, [r7, #4]
 801af5e:	f000 f875 	bl	801b04c <USBD_CtlError>
      break;
 801af62:	bf00      	nop
  }
}
 801af64:	bf00      	nop
 801af66:	3708      	adds	r7, #8
 801af68:	46bd      	mov	sp, r7
 801af6a:	bd80      	pop	{r7, pc}

0801af6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b082      	sub	sp, #8
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
 801af74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	885b      	ldrh	r3, [r3, #2]
 801af7a:	2b01      	cmp	r3, #1
 801af7c:	d106      	bne.n	801af8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	2201      	movs	r2, #1
 801af82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	f000 fa4d 	bl	801b426 <USBD_CtlSendStatus>
  }
}
 801af8c:	bf00      	nop
 801af8e:	3708      	adds	r7, #8
 801af90:	46bd      	mov	sp, r7
 801af92:	bd80      	pop	{r7, pc}

0801af94 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b082      	sub	sp, #8
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
 801af9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801afa4:	b2db      	uxtb	r3, r3
 801afa6:	3b01      	subs	r3, #1
 801afa8:	2b02      	cmp	r3, #2
 801afaa:	d80b      	bhi.n	801afc4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	885b      	ldrh	r3, [r3, #2]
 801afb0:	2b01      	cmp	r3, #1
 801afb2:	d10c      	bne.n	801afce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	2200      	movs	r2, #0
 801afb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801afbc:	6878      	ldr	r0, [r7, #4]
 801afbe:	f000 fa32 	bl	801b426 <USBD_CtlSendStatus>
      }
      break;
 801afc2:	e004      	b.n	801afce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801afc4:	6839      	ldr	r1, [r7, #0]
 801afc6:	6878      	ldr	r0, [r7, #4]
 801afc8:	f000 f840 	bl	801b04c <USBD_CtlError>
      break;
 801afcc:	e000      	b.n	801afd0 <USBD_ClrFeature+0x3c>
      break;
 801afce:	bf00      	nop
  }
}
 801afd0:	bf00      	nop
 801afd2:	3708      	adds	r7, #8
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bd80      	pop	{r7, pc}

0801afd8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b084      	sub	sp, #16
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801afe2:	683b      	ldr	r3, [r7, #0]
 801afe4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	781a      	ldrb	r2, [r3, #0]
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	3301      	adds	r3, #1
 801aff2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	781a      	ldrb	r2, [r3, #0]
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	3301      	adds	r3, #1
 801b000:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801b002:	68f8      	ldr	r0, [r7, #12]
 801b004:	f7ff fa91 	bl	801a52a <SWAPBYTE>
 801b008:	4603      	mov	r3, r0
 801b00a:	461a      	mov	r2, r3
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	3301      	adds	r3, #1
 801b014:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	3301      	adds	r3, #1
 801b01a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801b01c:	68f8      	ldr	r0, [r7, #12]
 801b01e:	f7ff fa84 	bl	801a52a <SWAPBYTE>
 801b022:	4603      	mov	r3, r0
 801b024:	461a      	mov	r2, r3
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	3301      	adds	r3, #1
 801b02e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	3301      	adds	r3, #1
 801b034:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801b036:	68f8      	ldr	r0, [r7, #12]
 801b038:	f7ff fa77 	bl	801a52a <SWAPBYTE>
 801b03c:	4603      	mov	r3, r0
 801b03e:	461a      	mov	r2, r3
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	80da      	strh	r2, [r3, #6]
}
 801b044:	bf00      	nop
 801b046:	3710      	adds	r7, #16
 801b048:	46bd      	mov	sp, r7
 801b04a:	bd80      	pop	{r7, pc}

0801b04c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b082      	sub	sp, #8
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
 801b054:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801b056:	2180      	movs	r1, #128	; 0x80
 801b058:	6878      	ldr	r0, [r7, #4]
 801b05a:	f7fe fd93 	bl	8019b84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801b05e:	2100      	movs	r1, #0
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	f7fe fd8f 	bl	8019b84 <USBD_LL_StallEP>
}
 801b066:	bf00      	nop
 801b068:	3708      	adds	r7, #8
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b086      	sub	sp, #24
 801b072:	af00      	add	r7, sp, #0
 801b074:	60f8      	str	r0, [r7, #12]
 801b076:	60b9      	str	r1, [r7, #8]
 801b078:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b07a:	2300      	movs	r3, #0
 801b07c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d036      	beq.n	801b0f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801b088:	6938      	ldr	r0, [r7, #16]
 801b08a:	f000 f836 	bl	801b0fa <USBD_GetLen>
 801b08e:	4603      	mov	r3, r0
 801b090:	3301      	adds	r3, #1
 801b092:	b29b      	uxth	r3, r3
 801b094:	005b      	lsls	r3, r3, #1
 801b096:	b29a      	uxth	r2, r3
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801b09c:	7dfb      	ldrb	r3, [r7, #23]
 801b09e:	68ba      	ldr	r2, [r7, #8]
 801b0a0:	4413      	add	r3, r2
 801b0a2:	687a      	ldr	r2, [r7, #4]
 801b0a4:	7812      	ldrb	r2, [r2, #0]
 801b0a6:	701a      	strb	r2, [r3, #0]
  idx++;
 801b0a8:	7dfb      	ldrb	r3, [r7, #23]
 801b0aa:	3301      	adds	r3, #1
 801b0ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801b0ae:	7dfb      	ldrb	r3, [r7, #23]
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	4413      	add	r3, r2
 801b0b4:	2203      	movs	r2, #3
 801b0b6:	701a      	strb	r2, [r3, #0]
  idx++;
 801b0b8:	7dfb      	ldrb	r3, [r7, #23]
 801b0ba:	3301      	adds	r3, #1
 801b0bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801b0be:	e013      	b.n	801b0e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801b0c0:	7dfb      	ldrb	r3, [r7, #23]
 801b0c2:	68ba      	ldr	r2, [r7, #8]
 801b0c4:	4413      	add	r3, r2
 801b0c6:	693a      	ldr	r2, [r7, #16]
 801b0c8:	7812      	ldrb	r2, [r2, #0]
 801b0ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801b0cc:	693b      	ldr	r3, [r7, #16]
 801b0ce:	3301      	adds	r3, #1
 801b0d0:	613b      	str	r3, [r7, #16]
    idx++;
 801b0d2:	7dfb      	ldrb	r3, [r7, #23]
 801b0d4:	3301      	adds	r3, #1
 801b0d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801b0d8:	7dfb      	ldrb	r3, [r7, #23]
 801b0da:	68ba      	ldr	r2, [r7, #8]
 801b0dc:	4413      	add	r3, r2
 801b0de:	2200      	movs	r2, #0
 801b0e0:	701a      	strb	r2, [r3, #0]
    idx++;
 801b0e2:	7dfb      	ldrb	r3, [r7, #23]
 801b0e4:	3301      	adds	r3, #1
 801b0e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801b0e8:	693b      	ldr	r3, [r7, #16]
 801b0ea:	781b      	ldrb	r3, [r3, #0]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d1e7      	bne.n	801b0c0 <USBD_GetString+0x52>
 801b0f0:	e000      	b.n	801b0f4 <USBD_GetString+0x86>
    return;
 801b0f2:	bf00      	nop
  }
}
 801b0f4:	3718      	adds	r7, #24
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}

0801b0fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b0fa:	b480      	push	{r7}
 801b0fc:	b085      	sub	sp, #20
 801b0fe:	af00      	add	r7, sp, #0
 801b100:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b102:	2300      	movs	r3, #0
 801b104:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801b10a:	e005      	b.n	801b118 <USBD_GetLen+0x1e>
  {
    len++;
 801b10c:	7bfb      	ldrb	r3, [r7, #15]
 801b10e:	3301      	adds	r3, #1
 801b110:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	3301      	adds	r3, #1
 801b116:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801b118:	68bb      	ldr	r3, [r7, #8]
 801b11a:	781b      	ldrb	r3, [r3, #0]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d1f5      	bne.n	801b10c <USBD_GetLen+0x12>
  }

  return len;
 801b120:	7bfb      	ldrb	r3, [r7, #15]
}
 801b122:	4618      	mov	r0, r3
 801b124:	3714      	adds	r7, #20
 801b126:	46bd      	mov	sp, r7
 801b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b12c:	4770      	bx	lr
	...

0801b130 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b130:	b480      	push	{r7}
 801b132:	b083      	sub	sp, #12
 801b134:	af00      	add	r7, sp, #0
 801b136:	4603      	mov	r3, r0
 801b138:	6039      	str	r1, [r7, #0]
 801b13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	2212      	movs	r2, #18
 801b140:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b142:	4b03      	ldr	r3, [pc, #12]	; (801b150 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b144:	4618      	mov	r0, r3
 801b146:	370c      	adds	r7, #12
 801b148:	46bd      	mov	sp, r7
 801b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14e:	4770      	bx	lr
 801b150:	20000640 	.word	0x20000640

0801b154 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b154:	b480      	push	{r7}
 801b156:	b083      	sub	sp, #12
 801b158:	af00      	add	r7, sp, #0
 801b15a:	4603      	mov	r3, r0
 801b15c:	6039      	str	r1, [r7, #0]
 801b15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b160:	683b      	ldr	r3, [r7, #0]
 801b162:	2204      	movs	r2, #4
 801b164:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b166:	4b03      	ldr	r3, [pc, #12]	; (801b174 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b168:	4618      	mov	r0, r3
 801b16a:	370c      	adds	r7, #12
 801b16c:	46bd      	mov	sp, r7
 801b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b172:	4770      	bx	lr
 801b174:	20000660 	.word	0x20000660

0801b178 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	4603      	mov	r3, r0
 801b180:	6039      	str	r1, [r7, #0]
 801b182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b184:	79fb      	ldrb	r3, [r7, #7]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d105      	bne.n	801b196 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b18a:	683a      	ldr	r2, [r7, #0]
 801b18c:	4907      	ldr	r1, [pc, #28]	; (801b1ac <USBD_FS_ProductStrDescriptor+0x34>)
 801b18e:	4808      	ldr	r0, [pc, #32]	; (801b1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801b190:	f7ff ff6d 	bl	801b06e <USBD_GetString>
 801b194:	e004      	b.n	801b1a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b196:	683a      	ldr	r2, [r7, #0]
 801b198:	4904      	ldr	r1, [pc, #16]	; (801b1ac <USBD_FS_ProductStrDescriptor+0x34>)
 801b19a:	4805      	ldr	r0, [pc, #20]	; (801b1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801b19c:	f7ff ff67 	bl	801b06e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b1a0:	4b02      	ldr	r3, [pc, #8]	; (801b1ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	3708      	adds	r7, #8
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	bd80      	pop	{r7, pc}
 801b1aa:	bf00      	nop
 801b1ac:	20009f04 	.word	0x20009f04
 801b1b0:	08022660 	.word	0x08022660

0801b1b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b082      	sub	sp, #8
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	6039      	str	r1, [r7, #0]
 801b1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b1c0:	683a      	ldr	r2, [r7, #0]
 801b1c2:	4904      	ldr	r1, [pc, #16]	; (801b1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b1c4:	4804      	ldr	r0, [pc, #16]	; (801b1d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b1c6:	f7ff ff52 	bl	801b06e <USBD_GetString>
  return USBD_StrDesc;
 801b1ca:	4b02      	ldr	r3, [pc, #8]	; (801b1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3708      	adds	r7, #8
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bd80      	pop	{r7, pc}
 801b1d4:	20009f04 	.word	0x20009f04
 801b1d8:	08022668 	.word	0x08022668

0801b1dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b082      	sub	sp, #8
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	6039      	str	r1, [r7, #0]
 801b1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b1e8:	683b      	ldr	r3, [r7, #0]
 801b1ea:	221a      	movs	r2, #26
 801b1ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b1ee:	f000 f855 	bl	801b29c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b1f2:	4b02      	ldr	r3, [pc, #8]	; (801b1fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	3708      	adds	r7, #8
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd80      	pop	{r7, pc}
 801b1fc:	20000664 	.word	0x20000664

0801b200 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
 801b206:	4603      	mov	r3, r0
 801b208:	6039      	str	r1, [r7, #0]
 801b20a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b20c:	79fb      	ldrb	r3, [r7, #7]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d105      	bne.n	801b21e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b212:	683a      	ldr	r2, [r7, #0]
 801b214:	4907      	ldr	r1, [pc, #28]	; (801b234 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b216:	4808      	ldr	r0, [pc, #32]	; (801b238 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b218:	f7ff ff29 	bl	801b06e <USBD_GetString>
 801b21c:	e004      	b.n	801b228 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b21e:	683a      	ldr	r2, [r7, #0]
 801b220:	4904      	ldr	r1, [pc, #16]	; (801b234 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b222:	4805      	ldr	r0, [pc, #20]	; (801b238 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b224:	f7ff ff23 	bl	801b06e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b228:	4b02      	ldr	r3, [pc, #8]	; (801b234 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b22a:	4618      	mov	r0, r3
 801b22c:	3708      	adds	r7, #8
 801b22e:	46bd      	mov	sp, r7
 801b230:	bd80      	pop	{r7, pc}
 801b232:	bf00      	nop
 801b234:	20009f04 	.word	0x20009f04
 801b238:	0802267c 	.word	0x0802267c

0801b23c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b23c:	b580      	push	{r7, lr}
 801b23e:	b082      	sub	sp, #8
 801b240:	af00      	add	r7, sp, #0
 801b242:	4603      	mov	r3, r0
 801b244:	6039      	str	r1, [r7, #0]
 801b246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b248:	79fb      	ldrb	r3, [r7, #7]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d105      	bne.n	801b25a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b24e:	683a      	ldr	r2, [r7, #0]
 801b250:	4907      	ldr	r1, [pc, #28]	; (801b270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b252:	4808      	ldr	r0, [pc, #32]	; (801b274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b254:	f7ff ff0b 	bl	801b06e <USBD_GetString>
 801b258:	e004      	b.n	801b264 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b25a:	683a      	ldr	r2, [r7, #0]
 801b25c:	4904      	ldr	r1, [pc, #16]	; (801b270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b25e:	4805      	ldr	r0, [pc, #20]	; (801b274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b260:	f7ff ff05 	bl	801b06e <USBD_GetString>
  }
  return USBD_StrDesc;
 801b264:	4b02      	ldr	r3, [pc, #8]	; (801b270 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b266:	4618      	mov	r0, r3
 801b268:	3708      	adds	r7, #8
 801b26a:	46bd      	mov	sp, r7
 801b26c:	bd80      	pop	{r7, pc}
 801b26e:	bf00      	nop
 801b270:	20009f04 	.word	0x20009f04
 801b274:	0802268c 	.word	0x0802268c

0801b278 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b278:	b480      	push	{r7}
 801b27a:	b083      	sub	sp, #12
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	4603      	mov	r3, r0
 801b280:	6039      	str	r1, [r7, #0]
 801b282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b284:	683b      	ldr	r3, [r7, #0]
 801b286:	220c      	movs	r2, #12
 801b288:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b28a:	4b03      	ldr	r3, [pc, #12]	; (801b298 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b28c:	4618      	mov	r0, r3
 801b28e:	370c      	adds	r7, #12
 801b290:	46bd      	mov	sp, r7
 801b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b296:	4770      	bx	lr
 801b298:	20000654 	.word	0x20000654

0801b29c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b084      	sub	sp, #16
 801b2a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b2a2:	4b0f      	ldr	r3, [pc, #60]	; (801b2e0 <Get_SerialNum+0x44>)
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b2a8:	4b0e      	ldr	r3, [pc, #56]	; (801b2e4 <Get_SerialNum+0x48>)
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b2ae:	4b0e      	ldr	r3, [pc, #56]	; (801b2e8 <Get_SerialNum+0x4c>)
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b2b4:	68fa      	ldr	r2, [r7, #12]
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	4413      	add	r3, r2
 801b2ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d009      	beq.n	801b2d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b2c2:	2208      	movs	r2, #8
 801b2c4:	4909      	ldr	r1, [pc, #36]	; (801b2ec <Get_SerialNum+0x50>)
 801b2c6:	68f8      	ldr	r0, [r7, #12]
 801b2c8:	f000 f814 	bl	801b2f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b2cc:	2204      	movs	r2, #4
 801b2ce:	4908      	ldr	r1, [pc, #32]	; (801b2f0 <Get_SerialNum+0x54>)
 801b2d0:	68b8      	ldr	r0, [r7, #8]
 801b2d2:	f000 f80f 	bl	801b2f4 <IntToUnicode>
  }
}
 801b2d6:	bf00      	nop
 801b2d8:	3710      	adds	r7, #16
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
 801b2de:	bf00      	nop
 801b2e0:	1fff7590 	.word	0x1fff7590
 801b2e4:	1fff7594 	.word	0x1fff7594
 801b2e8:	1fff7598 	.word	0x1fff7598
 801b2ec:	20000666 	.word	0x20000666
 801b2f0:	20000676 	.word	0x20000676

0801b2f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b2f4:	b480      	push	{r7}
 801b2f6:	b087      	sub	sp, #28
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	60f8      	str	r0, [r7, #12]
 801b2fc:	60b9      	str	r1, [r7, #8]
 801b2fe:	4613      	mov	r3, r2
 801b300:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b302:	2300      	movs	r3, #0
 801b304:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b306:	2300      	movs	r3, #0
 801b308:	75fb      	strb	r3, [r7, #23]
 801b30a:	e027      	b.n	801b35c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	0f1b      	lsrs	r3, r3, #28
 801b310:	2b09      	cmp	r3, #9
 801b312:	d80b      	bhi.n	801b32c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	0f1b      	lsrs	r3, r3, #28
 801b318:	b2da      	uxtb	r2, r3
 801b31a:	7dfb      	ldrb	r3, [r7, #23]
 801b31c:	005b      	lsls	r3, r3, #1
 801b31e:	4619      	mov	r1, r3
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	440b      	add	r3, r1
 801b324:	3230      	adds	r2, #48	; 0x30
 801b326:	b2d2      	uxtb	r2, r2
 801b328:	701a      	strb	r2, [r3, #0]
 801b32a:	e00a      	b.n	801b342 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	0f1b      	lsrs	r3, r3, #28
 801b330:	b2da      	uxtb	r2, r3
 801b332:	7dfb      	ldrb	r3, [r7, #23]
 801b334:	005b      	lsls	r3, r3, #1
 801b336:	4619      	mov	r1, r3
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	440b      	add	r3, r1
 801b33c:	3237      	adds	r2, #55	; 0x37
 801b33e:	b2d2      	uxtb	r2, r2
 801b340:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	011b      	lsls	r3, r3, #4
 801b346:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b348:	7dfb      	ldrb	r3, [r7, #23]
 801b34a:	005b      	lsls	r3, r3, #1
 801b34c:	3301      	adds	r3, #1
 801b34e:	68ba      	ldr	r2, [r7, #8]
 801b350:	4413      	add	r3, r2
 801b352:	2200      	movs	r2, #0
 801b354:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b356:	7dfb      	ldrb	r3, [r7, #23]
 801b358:	3301      	adds	r3, #1
 801b35a:	75fb      	strb	r3, [r7, #23]
 801b35c:	7dfa      	ldrb	r2, [r7, #23]
 801b35e:	79fb      	ldrb	r3, [r7, #7]
 801b360:	429a      	cmp	r2, r3
 801b362:	d3d3      	bcc.n	801b30c <IntToUnicode+0x18>
  }
}
 801b364:	bf00      	nop
 801b366:	bf00      	nop
 801b368:	371c      	adds	r7, #28
 801b36a:	46bd      	mov	sp, r7
 801b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b370:	4770      	bx	lr

0801b372 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b372:	b580      	push	{r7, lr}
 801b374:	b084      	sub	sp, #16
 801b376:	af00      	add	r7, sp, #0
 801b378:	60f8      	str	r0, [r7, #12]
 801b37a:	60b9      	str	r1, [r7, #8]
 801b37c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	2202      	movs	r2, #2
 801b382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	687a      	ldr	r2, [r7, #4]
 801b38a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	687a      	ldr	r2, [r7, #4]
 801b390:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	68ba      	ldr	r2, [r7, #8]
 801b396:	2100      	movs	r1, #0
 801b398:	68f8      	ldr	r0, [r7, #12]
 801b39a:	f7fe fcc1 	bl	8019d20 <USBD_LL_Transmit>

  return USBD_OK;
 801b39e:	2300      	movs	r3, #0
}
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	3710      	adds	r7, #16
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd80      	pop	{r7, pc}

0801b3a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b3a8:	b580      	push	{r7, lr}
 801b3aa:	b084      	sub	sp, #16
 801b3ac:	af00      	add	r7, sp, #0
 801b3ae:	60f8      	str	r0, [r7, #12]
 801b3b0:	60b9      	str	r1, [r7, #8]
 801b3b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	68ba      	ldr	r2, [r7, #8]
 801b3b8:	2100      	movs	r1, #0
 801b3ba:	68f8      	ldr	r0, [r7, #12]
 801b3bc:	f7fe fcb0 	bl	8019d20 <USBD_LL_Transmit>

  return USBD_OK;
 801b3c0:	2300      	movs	r3, #0
}
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	3710      	adds	r7, #16
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}

0801b3ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b3ca:	b580      	push	{r7, lr}
 801b3cc:	b084      	sub	sp, #16
 801b3ce:	af00      	add	r7, sp, #0
 801b3d0:	60f8      	str	r0, [r7, #12]
 801b3d2:	60b9      	str	r1, [r7, #8]
 801b3d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	2203      	movs	r2, #3
 801b3da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	687a      	ldr	r2, [r7, #4]
 801b3e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	687a      	ldr	r2, [r7, #4]
 801b3ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	68ba      	ldr	r2, [r7, #8]
 801b3f2:	2100      	movs	r1, #0
 801b3f4:	68f8      	ldr	r0, [r7, #12]
 801b3f6:	f7fe fccb 	bl	8019d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b3fa:	2300      	movs	r3, #0
}
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	3710      	adds	r7, #16
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}

0801b404 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b084      	sub	sp, #16
 801b408:	af00      	add	r7, sp, #0
 801b40a:	60f8      	str	r0, [r7, #12]
 801b40c:	60b9      	str	r1, [r7, #8]
 801b40e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	68ba      	ldr	r2, [r7, #8]
 801b414:	2100      	movs	r1, #0
 801b416:	68f8      	ldr	r0, [r7, #12]
 801b418:	f7fe fcba 	bl	8019d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b41c:	2300      	movs	r3, #0
}
 801b41e:	4618      	mov	r0, r3
 801b420:	3710      	adds	r7, #16
 801b422:	46bd      	mov	sp, r7
 801b424:	bd80      	pop	{r7, pc}

0801b426 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b426:	b580      	push	{r7, lr}
 801b428:	b082      	sub	sp, #8
 801b42a:	af00      	add	r7, sp, #0
 801b42c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	2204      	movs	r2, #4
 801b432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b436:	2300      	movs	r3, #0
 801b438:	2200      	movs	r2, #0
 801b43a:	2100      	movs	r1, #0
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f7fe fc6f 	bl	8019d20 <USBD_LL_Transmit>

  return USBD_OK;
 801b442:	2300      	movs	r3, #0
}
 801b444:	4618      	mov	r0, r3
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}

0801b44c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b082      	sub	sp, #8
 801b450:	af00      	add	r7, sp, #0
 801b452:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	2205      	movs	r2, #5
 801b458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b45c:	2300      	movs	r3, #0
 801b45e:	2200      	movs	r2, #0
 801b460:	2100      	movs	r1, #0
 801b462:	6878      	ldr	r0, [r7, #4]
 801b464:	f7fe fc94 	bl	8019d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b468:	2300      	movs	r3, #0
}
 801b46a:	4618      	mov	r0, r3
 801b46c:	3708      	adds	r7, #8
 801b46e:	46bd      	mov	sp, r7
 801b470:	bd80      	pop	{r7, pc}

0801b472 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b472:	b580      	push	{r7, lr}
 801b474:	b084      	sub	sp, #16
 801b476:	af00      	add	r7, sp, #0
 801b478:	6078      	str	r0, [r7, #4]
 801b47a:	460b      	mov	r3, r1
 801b47c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 801b47e:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b482:	f7fe fd1f 	bl	8019ec4 <USBD_static_malloc>
 801b486:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d105      	bne.n	801b49a <USBD_MSC_Init+0x28>
  {
    pdev->pClassDataMSC = NULL;
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	2200      	movs	r2, #0
 801b492:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801b496:	2302      	movs	r3, #2
 801b498:	e034      	b.n	801b504 <USBD_MSC_Init+0x92>
  }

  pdev->pClassDataMSC = (void *)hmsc;
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	68fa      	ldr	r2, [r7, #12]
 801b49e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	7c1b      	ldrb	r3, [r3, #16]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d115      	bne.n	801b4d6 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b4aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b4ae:	2202      	movs	r2, #2
 801b4b0:	2101      	movs	r1, #1
 801b4b2:	6878      	ldr	r0, [r7, #4]
 801b4b4:	f7fe fabc 	bl	8019a30 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	2201      	movs	r2, #1
 801b4bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b4c4:	2202      	movs	r2, #2
 801b4c6:	2181      	movs	r1, #129	; 0x81
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f7fe fab1 	bl	8019a30 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	2201      	movs	r2, #1
 801b4d2:	871a      	strh	r2, [r3, #56]	; 0x38
 801b4d4:	e012      	b.n	801b4fc <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b4d6:	2340      	movs	r3, #64	; 0x40
 801b4d8:	2202      	movs	r2, #2
 801b4da:	2101      	movs	r1, #1
 801b4dc:	6878      	ldr	r0, [r7, #4]
 801b4de:	f7fe faa7 	bl	8019a30 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	2201      	movs	r2, #1
 801b4e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b4ea:	2340      	movs	r3, #64	; 0x40
 801b4ec:	2202      	movs	r2, #2
 801b4ee:	2181      	movs	r1, #129	; 0x81
 801b4f0:	6878      	ldr	r0, [r7, #4]
 801b4f2:	f7fe fa9d 	bl	8019a30 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	2201      	movs	r2, #1
 801b4fa:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801b4fc:	6878      	ldr	r0, [r7, #4]
 801b4fe:	f000 f958 	bl	801b7b2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801b502:	2300      	movs	r3, #0
}
 801b504:	4618      	mov	r0, r3
 801b506:	3710      	adds	r7, #16
 801b508:	46bd      	mov	sp, r7
 801b50a:	bd80      	pop	{r7, pc}

0801b50c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b082      	sub	sp, #8
 801b510:	af00      	add	r7, sp, #0
 801b512:	6078      	str	r0, [r7, #4]
 801b514:	460b      	mov	r3, r1
 801b516:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 801b518:	2101      	movs	r1, #1
 801b51a:	6878      	ldr	r0, [r7, #4]
 801b51c:	f7fe fac6 	bl	8019aac <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	2200      	movs	r2, #0
 801b524:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 801b528:	2181      	movs	r1, #129	; 0x81
 801b52a:	6878      	ldr	r0, [r7, #4]
 801b52c:	f7fe fabe 	bl	8019aac <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	2200      	movs	r2, #0
 801b534:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassDataMSC != NULL)
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d00c      	beq.n	801b55a <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f000 f994 	bl	801b86e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataMSC);
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7fe fcc7 	bl	8019ee0 <USBD_static_free>
    pdev->pClassDataMSC = NULL;
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	2200      	movs	r2, #0
 801b556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b55a:	2300      	movs	r3, #0
}
 801b55c:	4618      	mov	r0, r3
 801b55e:	3708      	adds	r7, #8
 801b560:	46bd      	mov	sp, r7
 801b562:	bd80      	pop	{r7, pc}

0801b564 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b086      	sub	sp, #24
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
 801b56c:	6039      	str	r1, [r7, #0]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b574:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801b576:	2300      	movs	r3, #0
 801b578:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801b57a:	2300      	movs	r3, #0
 801b57c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801b57e:	693b      	ldr	r3, [r7, #16]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d101      	bne.n	801b588 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b584:	2303      	movs	r3, #3
 801b586:	e0db      	b.n	801b740 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b588:	683b      	ldr	r3, [r7, #0]
 801b58a:	781b      	ldrb	r3, [r3, #0]
 801b58c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b590:	2b00      	cmp	r3, #0
 801b592:	d04e      	beq.n	801b632 <USBD_MSC_Setup+0xce>
 801b594:	2b20      	cmp	r3, #32
 801b596:	f040 80cb 	bne.w	801b730 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801b59a:	683b      	ldr	r3, [r7, #0]
 801b59c:	785b      	ldrb	r3, [r3, #1]
 801b59e:	2bfe      	cmp	r3, #254	; 0xfe
 801b5a0:	d002      	beq.n	801b5a8 <USBD_MSC_Setup+0x44>
 801b5a2:	2bff      	cmp	r3, #255	; 0xff
 801b5a4:	d025      	beq.n	801b5f2 <USBD_MSC_Setup+0x8e>
 801b5a6:	e03c      	b.n	801b622 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b5a8:	683b      	ldr	r3, [r7, #0]
 801b5aa:	885b      	ldrh	r3, [r3, #2]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d119      	bne.n	801b5e4 <USBD_MSC_Setup+0x80>
 801b5b0:	683b      	ldr	r3, [r7, #0]
 801b5b2:	88db      	ldrh	r3, [r3, #6]
 801b5b4:	2b01      	cmp	r3, #1
 801b5b6:	d115      	bne.n	801b5e4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801b5b8:	683b      	ldr	r3, [r7, #0]
 801b5ba:	781b      	ldrb	r3, [r3, #0]
 801b5bc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	da10      	bge.n	801b5e4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetMaxLun();
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b5c8:	699b      	ldr	r3, [r3, #24]
 801b5ca:	4798      	blx	r3
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	461a      	mov	r2, r3
 801b5d0:	693b      	ldr	r3, [r7, #16]
 801b5d2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801b5d4:	693b      	ldr	r3, [r7, #16]
 801b5d6:	2201      	movs	r2, #1
 801b5d8:	4619      	mov	r1, r3
 801b5da:	6878      	ldr	r0, [r7, #4]
 801b5dc:	f7ff fec9 	bl	801b372 <USBD_CtlSendData>
 801b5e0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b5e2:	e025      	b.n	801b630 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b5e4:	6839      	ldr	r1, [r7, #0]
 801b5e6:	6878      	ldr	r0, [r7, #4]
 801b5e8:	f7ff fd30 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 801b5ec:	2303      	movs	r3, #3
 801b5ee:	75fb      	strb	r3, [r7, #23]
          break;
 801b5f0:	e01e      	b.n	801b630 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	885b      	ldrh	r3, [r3, #2]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d10c      	bne.n	801b614 <USBD_MSC_Setup+0xb0>
 801b5fa:	683b      	ldr	r3, [r7, #0]
 801b5fc:	88db      	ldrh	r3, [r3, #6]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d108      	bne.n	801b614 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801b602:	683b      	ldr	r3, [r7, #0]
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b608:	2b00      	cmp	r3, #0
 801b60a:	db03      	blt.n	801b614 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801b60c:	6878      	ldr	r0, [r7, #4]
 801b60e:	f000 f908 	bl	801b822 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b612:	e00d      	b.n	801b630 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b614:	6839      	ldr	r1, [r7, #0]
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f7ff fd18 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 801b61c:	2303      	movs	r3, #3
 801b61e:	75fb      	strb	r3, [r7, #23]
          break;
 801b620:	e006      	b.n	801b630 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b622:	6839      	ldr	r1, [r7, #0]
 801b624:	6878      	ldr	r0, [r7, #4]
 801b626:	f7ff fd11 	bl	801b04c <USBD_CtlError>
          ret = USBD_FAIL;
 801b62a:	2303      	movs	r3, #3
 801b62c:	75fb      	strb	r3, [r7, #23]
          break;
 801b62e:	bf00      	nop
      }
      break;
 801b630:	e085      	b.n	801b73e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	785b      	ldrb	r3, [r3, #1]
 801b636:	2b0b      	cmp	r3, #11
 801b638:	d871      	bhi.n	801b71e <USBD_MSC_Setup+0x1ba>
 801b63a:	a201      	add	r2, pc, #4	; (adr r2, 801b640 <USBD_MSC_Setup+0xdc>)
 801b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b640:	0801b671 	.word	0x0801b671
 801b644:	0801b6ed 	.word	0x0801b6ed
 801b648:	0801b71f 	.word	0x0801b71f
 801b64c:	0801b71f 	.word	0x0801b71f
 801b650:	0801b71f 	.word	0x0801b71f
 801b654:	0801b71f 	.word	0x0801b71f
 801b658:	0801b71f 	.word	0x0801b71f
 801b65c:	0801b71f 	.word	0x0801b71f
 801b660:	0801b71f 	.word	0x0801b71f
 801b664:	0801b71f 	.word	0x0801b71f
 801b668:	0801b69b 	.word	0x0801b69b
 801b66c:	0801b6c5 	.word	0x0801b6c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b676:	b2db      	uxtb	r3, r3
 801b678:	2b03      	cmp	r3, #3
 801b67a:	d107      	bne.n	801b68c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b67c:	f107 030e 	add.w	r3, r7, #14
 801b680:	2202      	movs	r2, #2
 801b682:	4619      	mov	r1, r3
 801b684:	6878      	ldr	r0, [r7, #4]
 801b686:	f7ff fe74 	bl	801b372 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b68a:	e050      	b.n	801b72e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b68c:	6839      	ldr	r1, [r7, #0]
 801b68e:	6878      	ldr	r0, [r7, #4]
 801b690:	f7ff fcdc 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 801b694:	2303      	movs	r3, #3
 801b696:	75fb      	strb	r3, [r7, #23]
          break;
 801b698:	e049      	b.n	801b72e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b6a0:	b2db      	uxtb	r3, r3
 801b6a2:	2b03      	cmp	r3, #3
 801b6a4:	d107      	bne.n	801b6b6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801b6a6:	693b      	ldr	r3, [r7, #16]
 801b6a8:	3304      	adds	r3, #4
 801b6aa:	2201      	movs	r2, #1
 801b6ac:	4619      	mov	r1, r3
 801b6ae:	6878      	ldr	r0, [r7, #4]
 801b6b0:	f7ff fe5f 	bl	801b372 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b6b4:	e03b      	b.n	801b72e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b6b6:	6839      	ldr	r1, [r7, #0]
 801b6b8:	6878      	ldr	r0, [r7, #4]
 801b6ba:	f7ff fcc7 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 801b6be:	2303      	movs	r3, #3
 801b6c0:	75fb      	strb	r3, [r7, #23]
          break;
 801b6c2:	e034      	b.n	801b72e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	2b03      	cmp	r3, #3
 801b6ce:	d106      	bne.n	801b6de <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	885b      	ldrh	r3, [r3, #2]
 801b6d4:	b2db      	uxtb	r3, r3
 801b6d6:	461a      	mov	r2, r3
 801b6d8:	693b      	ldr	r3, [r7, #16]
 801b6da:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b6dc:	e027      	b.n	801b72e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b6de:	6839      	ldr	r1, [r7, #0]
 801b6e0:	6878      	ldr	r0, [r7, #4]
 801b6e2:	f7ff fcb3 	bl	801b04c <USBD_CtlError>
            ret = USBD_FAIL;
 801b6e6:	2303      	movs	r3, #3
 801b6e8:	75fb      	strb	r3, [r7, #23]
          break;
 801b6ea:	e020      	b.n	801b72e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b6f2:	b2db      	uxtb	r3, r3
 801b6f4:	2b03      	cmp	r3, #3
 801b6f6:	d119      	bne.n	801b72c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	885b      	ldrh	r3, [r3, #2]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d115      	bne.n	801b72c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	889b      	ldrh	r3, [r3, #4]
 801b704:	b2db      	uxtb	r3, r3
 801b706:	4619      	mov	r1, r3
 801b708:	6878      	ldr	r0, [r7, #4]
 801b70a:	f7fe fa05 	bl	8019b18 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801b70e:	683b      	ldr	r3, [r7, #0]
 801b710:	889b      	ldrh	r3, [r3, #4]
 801b712:	b2db      	uxtb	r3, r3
 801b714:	4619      	mov	r1, r3
 801b716:	6878      	ldr	r0, [r7, #4]
 801b718:	f000 fa42 	bl	801bba0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801b71c:	e006      	b.n	801b72c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801b71e:	6839      	ldr	r1, [r7, #0]
 801b720:	6878      	ldr	r0, [r7, #4]
 801b722:	f7ff fc93 	bl	801b04c <USBD_CtlError>
          ret = USBD_FAIL;
 801b726:	2303      	movs	r3, #3
 801b728:	75fb      	strb	r3, [r7, #23]
          break;
 801b72a:	e000      	b.n	801b72e <USBD_MSC_Setup+0x1ca>
          break;
 801b72c:	bf00      	nop
      }
      break;
 801b72e:	e006      	b.n	801b73e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801b730:	6839      	ldr	r1, [r7, #0]
 801b732:	6878      	ldr	r0, [r7, #4]
 801b734:	f7ff fc8a 	bl	801b04c <USBD_CtlError>
      ret = USBD_FAIL;
 801b738:	2303      	movs	r3, #3
 801b73a:	75fb      	strb	r3, [r7, #23]
      break;
 801b73c:	bf00      	nop
  }

  return (uint8_t)ret;
 801b73e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b740:	4618      	mov	r0, r3
 801b742:	3718      	adds	r7, #24
 801b744:	46bd      	mov	sp, r7
 801b746:	bd80      	pop	{r7, pc}

0801b748 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b082      	sub	sp, #8
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	460b      	mov	r3, r1
 801b752:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801b754:	78fb      	ldrb	r3, [r7, #3]
 801b756:	4619      	mov	r1, r3
 801b758:	6878      	ldr	r0, [r7, #4]
 801b75a:	f000 f89c 	bl	801b896 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801b75e:	2300      	movs	r3, #0
}
 801b760:	4618      	mov	r0, r3
 801b762:	3708      	adds	r7, #8
 801b764:	46bd      	mov	sp, r7
 801b766:	bd80      	pop	{r7, pc}

0801b768 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b082      	sub	sp, #8
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
 801b770:	460b      	mov	r3, r1
 801b772:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801b774:	78fb      	ldrb	r3, [r7, #3]
 801b776:	4619      	mov	r1, r3
 801b778:	6878      	ldr	r0, [r7, #4]
 801b77a:	f000 f8c2 	bl	801b902 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801b77e:	2300      	movs	r3, #0
}
 801b780:	4618      	mov	r0, r3
 801b782:	3708      	adds	r7, #8
 801b784:	46bd      	mov	sp, r7
 801b786:	bd80      	pop	{r7, pc}

0801b788 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801b788:	b480      	push	{r7}
 801b78a:	b083      	sub	sp, #12
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	6078      	str	r0, [r7, #4]
 801b790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b792:	683b      	ldr	r3, [r7, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d101      	bne.n	801b79c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b798:	2303      	movs	r3, #3
 801b79a:	e004      	b.n	801b7a6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserDataMSC = fops;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	683a      	ldr	r2, [r7, #0]
 801b7a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801b7a4:	2300      	movs	r3, #0
}
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	370c      	adds	r7, #12
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b0:	4770      	bx	lr

0801b7b2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801b7b2:	b580      	push	{r7, lr}
 801b7b4:	b084      	sub	sp, #16
 801b7b6:	af00      	add	r7, sp, #0
 801b7b8:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b7c0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d028      	beq.n	801b81a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	2200      	movs	r2, #0
 801b7d2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	2200      	movs	r2, #0
 801b7e0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Init(0U);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	2000      	movs	r0, #0
 801b7f6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 801b7f8:	2101      	movs	r1, #1
 801b7fa:	6878      	ldr	r0, [r7, #4]
 801b7fc:	f7fe f98c 	bl	8019b18 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 801b800:	2181      	movs	r1, #129	; 0x81
 801b802:	6878      	ldr	r0, [r7, #4]
 801b804:	f7fe f988 	bl	8019b18 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b80e:	231f      	movs	r3, #31
 801b810:	2101      	movs	r1, #1
 801b812:	6878      	ldr	r0, [r7, #4]
 801b814:	f7fe fabc 	bl	8019d90 <USBD_LL_PrepareReceive>
 801b818:	e000      	b.n	801b81c <MSC_BOT_Init+0x6a>
    return;
 801b81a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b81c:	3710      	adds	r7, #16
 801b81e:	46bd      	mov	sp, r7
 801b820:	bd80      	pop	{r7, pc}

0801b822 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801b822:	b580      	push	{r7, lr}
 801b824:	b084      	sub	sp, #16
 801b826:	af00      	add	r7, sp, #0
 801b828:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b830:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d016      	beq.n	801b866 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	2200      	movs	r2, #0
 801b83c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	2201      	movs	r2, #1
 801b842:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 801b844:	2181      	movs	r1, #129	; 0x81
 801b846:	6878      	ldr	r0, [r7, #4]
 801b848:	f7fe f9d2 	bl	8019bf0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 801b84c:	2101      	movs	r1, #1
 801b84e:	6878      	ldr	r0, [r7, #4]
 801b850:	f7fe f9ce 	bl	8019bf0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b85a:	231f      	movs	r3, #31
 801b85c:	2101      	movs	r1, #1
 801b85e:	6878      	ldr	r0, [r7, #4]
 801b860:	f7fe fa96 	bl	8019d90 <USBD_LL_PrepareReceive>
 801b864:	e000      	b.n	801b868 <MSC_BOT_Reset+0x46>
    return;
 801b866:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b868:	3710      	adds	r7, #16
 801b86a:	46bd      	mov	sp, r7
 801b86c:	bd80      	pop	{r7, pc}

0801b86e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801b86e:	b480      	push	{r7}
 801b870:	b085      	sub	sp, #20
 801b872:	af00      	add	r7, sp, #0
 801b874:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b87c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d002      	beq.n	801b88a <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	2200      	movs	r2, #0
 801b888:	721a      	strb	r2, [r3, #8]
  }
}
 801b88a:	bf00      	nop
 801b88c:	3714      	adds	r7, #20
 801b88e:	46bd      	mov	sp, r7
 801b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b894:	4770      	bx	lr

0801b896 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b896:	b580      	push	{r7, lr}
 801b898:	b084      	sub	sp, #16
 801b89a:	af00      	add	r7, sp, #0
 801b89c:	6078      	str	r0, [r7, #4]
 801b89e:	460b      	mov	r3, r1
 801b8a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b8a8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d020      	beq.n	801b8f2 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	7a1b      	ldrb	r3, [r3, #8]
 801b8b4:	2b02      	cmp	r3, #2
 801b8b6:	d005      	beq.n	801b8c4 <MSC_BOT_DataIn+0x2e>
 801b8b8:	2b02      	cmp	r3, #2
 801b8ba:	db1c      	blt.n	801b8f6 <MSC_BOT_DataIn+0x60>
 801b8bc:	3b03      	subs	r3, #3
 801b8be:	2b01      	cmp	r3, #1
 801b8c0:	d819      	bhi.n	801b8f6 <MSC_BOT_DataIn+0x60>
 801b8c2:	e011      	b.n	801b8e8 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b8d0:	461a      	mov	r2, r3
 801b8d2:	6878      	ldr	r0, [r7, #4]
 801b8d4:	f000 f992 	bl	801bbfc <SCSI_ProcessCmd>
 801b8d8:	4603      	mov	r3, r0
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	da0d      	bge.n	801b8fa <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b8de:	2101      	movs	r1, #1
 801b8e0:	6878      	ldr	r0, [r7, #4]
 801b8e2:	f000 f8fb 	bl	801badc <MSC_BOT_SendCSW>
      }
      break;
 801b8e6:	e008      	b.n	801b8fa <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b8e8:	2100      	movs	r1, #0
 801b8ea:	6878      	ldr	r0, [r7, #4]
 801b8ec:	f000 f8f6 	bl	801badc <MSC_BOT_SendCSW>
      break;
 801b8f0:	e004      	b.n	801b8fc <MSC_BOT_DataIn+0x66>
    return;
 801b8f2:	bf00      	nop
 801b8f4:	e002      	b.n	801b8fc <MSC_BOT_DataIn+0x66>

    default:
      break;
 801b8f6:	bf00      	nop
 801b8f8:	e000      	b.n	801b8fc <MSC_BOT_DataIn+0x66>
      break;
 801b8fa:	bf00      	nop
  }
}
 801b8fc:	3710      	adds	r7, #16
 801b8fe:	46bd      	mov	sp, r7
 801b900:	bd80      	pop	{r7, pc}

0801b902 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b902:	b580      	push	{r7, lr}
 801b904:	b084      	sub	sp, #16
 801b906:	af00      	add	r7, sp, #0
 801b908:	6078      	str	r0, [r7, #4]
 801b90a:	460b      	mov	r3, r1
 801b90c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b914:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d01c      	beq.n	801b956 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	7a1b      	ldrb	r3, [r3, #8]
 801b920:	2b00      	cmp	r3, #0
 801b922:	d002      	beq.n	801b92a <MSC_BOT_DataOut+0x28>
 801b924:	2b01      	cmp	r3, #1
 801b926:	d004      	beq.n	801b932 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801b928:	e018      	b.n	801b95c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801b92a:	6878      	ldr	r0, [r7, #4]
 801b92c:	f000 f81a 	bl	801b964 <MSC_BOT_CBW_Decode>
      break;
 801b930:	e014      	b.n	801b95c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b93e:	461a      	mov	r2, r3
 801b940:	6878      	ldr	r0, [r7, #4]
 801b942:	f000 f95b 	bl	801bbfc <SCSI_ProcessCmd>
 801b946:	4603      	mov	r3, r0
 801b948:	2b00      	cmp	r3, #0
 801b94a:	da06      	bge.n	801b95a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b94c:	2101      	movs	r1, #1
 801b94e:	6878      	ldr	r0, [r7, #4]
 801b950:	f000 f8c4 	bl	801badc <MSC_BOT_SendCSW>
      break;
 801b954:	e001      	b.n	801b95a <MSC_BOT_DataOut+0x58>
    return;
 801b956:	bf00      	nop
 801b958:	e000      	b.n	801b95c <MSC_BOT_DataOut+0x5a>
      break;
 801b95a:	bf00      	nop
  }
}
 801b95c:	3710      	adds	r7, #16
 801b95e:	46bd      	mov	sp, r7
 801b960:	bd80      	pop	{r7, pc}
	...

0801b964 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b084      	sub	sp, #16
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b972:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d077      	beq.n	801ba6a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801b980:	68fb      	ldr	r3, [r7, #12]
 801b982:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b992:	2101      	movs	r1, #1
 801b994:	6878      	ldr	r0, [r7, #4]
 801b996:	f7fe fa33 	bl	8019e00 <USBD_LL_GetRxDataSize>
 801b99a:	4603      	mov	r3, r0
 801b99c:	2b1f      	cmp	r3, #31
 801b99e:	d114      	bne.n	801b9ca <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b9a6:	4a34      	ldr	r2, [pc, #208]	; (801ba78 <MSC_BOT_CBW_Decode+0x114>)
 801b9a8:	4293      	cmp	r3, r2
 801b9aa:	d10e      	bne.n	801b9ca <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b9ac:	68fb      	ldr	r3, [r7, #12]
 801b9ae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b9b2:	2b01      	cmp	r3, #1
 801b9b4:	d809      	bhi.n	801b9ca <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d004      	beq.n	801b9ca <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b9c6:	2b10      	cmp	r3, #16
 801b9c8:	d90e      	bls.n	801b9e8 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b9d0:	2320      	movs	r3, #32
 801b9d2:	2205      	movs	r2, #5
 801b9d4:	6878      	ldr	r0, [r7, #4]
 801b9d6:	f000 fdbc 	bl	801c552 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2202      	movs	r2, #2
 801b9de:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801b9e0:	6878      	ldr	r0, [r7, #4]
 801b9e2:	f000 f8ab 	bl	801bb3c <MSC_BOT_Abort>
 801b9e6:	e043      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b9f4:	461a      	mov	r2, r3
 801b9f6:	6878      	ldr	r0, [r7, #4]
 801b9f8:	f000 f900 	bl	801bbfc <SCSI_ProcessCmd>
 801b9fc:	4603      	mov	r3, r0
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	da0c      	bge.n	801ba1c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	7a1b      	ldrb	r3, [r3, #8]
 801ba06:	2b05      	cmp	r3, #5
 801ba08:	d104      	bne.n	801ba14 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801ba0a:	2101      	movs	r1, #1
 801ba0c:	6878      	ldr	r0, [r7, #4]
 801ba0e:	f000 f865 	bl	801badc <MSC_BOT_SendCSW>
 801ba12:	e02d      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801ba14:	6878      	ldr	r0, [r7, #4]
 801ba16:	f000 f891 	bl	801bb3c <MSC_BOT_Abort>
 801ba1a:	e029      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	7a1b      	ldrb	r3, [r3, #8]
 801ba20:	2b02      	cmp	r3, #2
 801ba22:	d024      	beq.n	801ba6e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801ba28:	2b01      	cmp	r3, #1
 801ba2a:	d020      	beq.n	801ba6e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801ba30:	2b03      	cmp	r3, #3
 801ba32:	d01c      	beq.n	801ba6e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	68db      	ldr	r3, [r3, #12]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d009      	beq.n	801ba50 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	f103 0110 	add.w	r1, r3, #16
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	68db      	ldr	r3, [r3, #12]
 801ba46:	461a      	mov	r2, r3
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	f000 f817 	bl	801ba7c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801ba4e:	e00f      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	68db      	ldr	r3, [r3, #12]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d104      	bne.n	801ba62 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801ba58:	2100      	movs	r1, #0
 801ba5a:	6878      	ldr	r0, [r7, #4]
 801ba5c:	f000 f83e 	bl	801badc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801ba60:	e006      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801ba62:	6878      	ldr	r0, [r7, #4]
 801ba64:	f000 f86a 	bl	801bb3c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801ba68:	e002      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801ba6a:	bf00      	nop
 801ba6c:	e000      	b.n	801ba70 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801ba6e:	bf00      	nop
    }
  }
}
 801ba70:	3710      	adds	r7, #16
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bd80      	pop	{r7, pc}
 801ba76:	bf00      	nop
 801ba78:	43425355 	.word	0x43425355

0801ba7c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b086      	sub	sp, #24
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	60f8      	str	r0, [r7, #12]
 801ba84:	60b9      	str	r1, [r7, #8]
 801ba86:	607a      	str	r2, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba8e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801ba90:	697b      	ldr	r3, [r7, #20]
 801ba92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ba96:	687a      	ldr	r2, [r7, #4]
 801ba98:	4293      	cmp	r3, r2
 801ba9a:	bf28      	it	cs
 801ba9c:	4613      	movcs	r3, r2
 801ba9e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801baa0:	697b      	ldr	r3, [r7, #20]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d015      	beq.n	801bad2 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801baa6:	697b      	ldr	r3, [r7, #20]
 801baa8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	1ad2      	subs	r2, r2, r3
 801bab0:	697b      	ldr	r3, [r7, #20]
 801bab2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	2200      	movs	r2, #0
 801baba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801babe:	697b      	ldr	r3, [r7, #20]
 801bac0:	2204      	movs	r2, #4
 801bac2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801bac4:	693b      	ldr	r3, [r7, #16]
 801bac6:	68ba      	ldr	r2, [r7, #8]
 801bac8:	2181      	movs	r1, #129	; 0x81
 801baca:	68f8      	ldr	r0, [r7, #12]
 801bacc:	f7fe f928 	bl	8019d20 <USBD_LL_Transmit>
 801bad0:	e000      	b.n	801bad4 <MSC_BOT_SendData+0x58>
    return;
 801bad2:	bf00      	nop
}
 801bad4:	3718      	adds	r7, #24
 801bad6:	46bd      	mov	sp, r7
 801bad8:	bd80      	pop	{r7, pc}
	...

0801badc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b084      	sub	sp, #16
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
 801bae4:	460b      	mov	r3, r1
 801bae6:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801baee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d01b      	beq.n	801bb2e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	4a0f      	ldr	r2, [pc, #60]	; (801bb38 <MSC_BOT_SendCSW+0x5c>)
 801bafa:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	78fa      	ldrb	r2, [r7, #3]
 801bb02:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	2200      	movs	r2, #0
 801bb0a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801bb12:	230d      	movs	r3, #13
 801bb14:	2181      	movs	r1, #129	; 0x81
 801bb16:	6878      	ldr	r0, [r7, #4]
 801bb18:	f7fe f902 	bl	8019d20 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801bb22:	231f      	movs	r3, #31
 801bb24:	2101      	movs	r1, #1
 801bb26:	6878      	ldr	r0, [r7, #4]
 801bb28:	f7fe f932 	bl	8019d90 <USBD_LL_PrepareReceive>
 801bb2c:	e000      	b.n	801bb30 <MSC_BOT_SendCSW+0x54>
    return;
 801bb2e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801bb30:	3710      	adds	r7, #16
 801bb32:	46bd      	mov	sp, r7
 801bb34:	bd80      	pop	{r7, pc}
 801bb36:	bf00      	nop
 801bb38:	53425355 	.word	0x53425355

0801bb3c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b084      	sub	sp, #16
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bb4a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d022      	beq.n	801bb98 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d10c      	bne.n	801bb76 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d007      	beq.n	801bb76 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d103      	bne.n	801bb76 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bb6e:	2101      	movs	r1, #1
 801bb70:	6878      	ldr	r0, [r7, #4]
 801bb72:	f7fe f807 	bl	8019b84 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bb76:	2181      	movs	r1, #129	; 0x81
 801bb78:	6878      	ldr	r0, [r7, #4]
 801bb7a:	f7fe f803 	bl	8019b84 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	7a5b      	ldrb	r3, [r3, #9]
 801bb82:	2b02      	cmp	r3, #2
 801bb84:	d109      	bne.n	801bb9a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bb86:	2181      	movs	r1, #129	; 0x81
 801bb88:	6878      	ldr	r0, [r7, #4]
 801bb8a:	f7fd fffb 	bl	8019b84 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bb8e:	2101      	movs	r1, #1
 801bb90:	6878      	ldr	r0, [r7, #4]
 801bb92:	f7fd fff7 	bl	8019b84 <USBD_LL_StallEP>
 801bb96:	e000      	b.n	801bb9a <MSC_BOT_Abort+0x5e>
    return;
 801bb98:	bf00      	nop
  }
}
 801bb9a:	3710      	adds	r7, #16
 801bb9c:	46bd      	mov	sp, r7
 801bb9e:	bd80      	pop	{r7, pc}

0801bba0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b084      	sub	sp, #16
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
 801bba8:	460b      	mov	r3, r1
 801bbaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bbb2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d019      	beq.n	801bbee <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	7a5b      	ldrb	r3, [r3, #9]
 801bbbe:	2b02      	cmp	r3, #2
 801bbc0:	d108      	bne.n	801bbd4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801bbc2:	2181      	movs	r1, #129	; 0x81
 801bbc4:	6878      	ldr	r0, [r7, #4]
 801bbc6:	f7fd ffdd 	bl	8019b84 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801bbca:	2101      	movs	r1, #1
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	f7fd ffd9 	bl	8019b84 <USBD_LL_StallEP>
 801bbd2:	e00f      	b.n	801bbf4 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801bbd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	da0a      	bge.n	801bbf2 <MSC_BOT_CplClrFeature+0x52>
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	7a5b      	ldrb	r3, [r3, #9]
 801bbe0:	2b01      	cmp	r3, #1
 801bbe2:	d006      	beq.n	801bbf2 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801bbe4:	2101      	movs	r1, #1
 801bbe6:	6878      	ldr	r0, [r7, #4]
 801bbe8:	f7ff ff78 	bl	801badc <MSC_BOT_SendCSW>
 801bbec:	e002      	b.n	801bbf4 <MSC_BOT_CplClrFeature+0x54>
    return;
 801bbee:	bf00      	nop
 801bbf0:	e000      	b.n	801bbf4 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801bbf2:	bf00      	nop
  }
}
 801bbf4:	3710      	adds	r7, #16
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	bd80      	pop	{r7, pc}
	...

0801bbfc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b086      	sub	sp, #24
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	60f8      	str	r0, [r7, #12]
 801bc04:	460b      	mov	r3, r1
 801bc06:	607a      	str	r2, [r7, #4]
 801bc08:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bc10:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801bc12:	693b      	ldr	r3, [r7, #16]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d102      	bne.n	801bc1e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801bc18:	f04f 33ff 	mov.w	r3, #4294967295
 801bc1c:	e168      	b.n	801bef0 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	781b      	ldrb	r3, [r3, #0]
 801bc22:	2baa      	cmp	r3, #170	; 0xaa
 801bc24:	f000 8144 	beq.w	801beb0 <SCSI_ProcessCmd+0x2b4>
 801bc28:	2baa      	cmp	r3, #170	; 0xaa
 801bc2a:	f300 8153 	bgt.w	801bed4 <SCSI_ProcessCmd+0x2d8>
 801bc2e:	2ba8      	cmp	r3, #168	; 0xa8
 801bc30:	f000 812c 	beq.w	801be8c <SCSI_ProcessCmd+0x290>
 801bc34:	2ba8      	cmp	r3, #168	; 0xa8
 801bc36:	f300 814d 	bgt.w	801bed4 <SCSI_ProcessCmd+0x2d8>
 801bc3a:	2b5a      	cmp	r3, #90	; 0x5a
 801bc3c:	f300 80c0 	bgt.w	801bdc0 <SCSI_ProcessCmd+0x1c4>
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	f2c0 8147 	blt.w	801bed4 <SCSI_ProcessCmd+0x2d8>
 801bc46:	2b5a      	cmp	r3, #90	; 0x5a
 801bc48:	f200 8144 	bhi.w	801bed4 <SCSI_ProcessCmd+0x2d8>
 801bc4c:	a201      	add	r2, pc, #4	; (adr r2, 801bc54 <SCSI_ProcessCmd+0x58>)
 801bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc52:	bf00      	nop
 801bc54:	0801bdc7 	.word	0x0801bdc7
 801bc58:	0801bed5 	.word	0x0801bed5
 801bc5c:	0801bed5 	.word	0x0801bed5
 801bc60:	0801bdd9 	.word	0x0801bdd9
 801bc64:	0801bed5 	.word	0x0801bed5
 801bc68:	0801bed5 	.word	0x0801bed5
 801bc6c:	0801bed5 	.word	0x0801bed5
 801bc70:	0801bed5 	.word	0x0801bed5
 801bc74:	0801bed5 	.word	0x0801bed5
 801bc78:	0801bed5 	.word	0x0801bed5
 801bc7c:	0801bed5 	.word	0x0801bed5
 801bc80:	0801bed5 	.word	0x0801bed5
 801bc84:	0801bed5 	.word	0x0801bed5
 801bc88:	0801bed5 	.word	0x0801bed5
 801bc8c:	0801bed5 	.word	0x0801bed5
 801bc90:	0801bed5 	.word	0x0801bed5
 801bc94:	0801bed5 	.word	0x0801bed5
 801bc98:	0801bed5 	.word	0x0801bed5
 801bc9c:	0801bdeb 	.word	0x0801bdeb
 801bca0:	0801bed5 	.word	0x0801bed5
 801bca4:	0801bed5 	.word	0x0801bed5
 801bca8:	0801bed5 	.word	0x0801bed5
 801bcac:	0801bed5 	.word	0x0801bed5
 801bcb0:	0801bed5 	.word	0x0801bed5
 801bcb4:	0801bed5 	.word	0x0801bed5
 801bcb8:	0801bed5 	.word	0x0801bed5
 801bcbc:	0801be21 	.word	0x0801be21
 801bcc0:	0801bdfd 	.word	0x0801bdfd
 801bcc4:	0801bed5 	.word	0x0801bed5
 801bcc8:	0801bed5 	.word	0x0801bed5
 801bccc:	0801be0f 	.word	0x0801be0f
 801bcd0:	0801bed5 	.word	0x0801bed5
 801bcd4:	0801bed5 	.word	0x0801bed5
 801bcd8:	0801bed5 	.word	0x0801bed5
 801bcdc:	0801bed5 	.word	0x0801bed5
 801bce0:	0801be45 	.word	0x0801be45
 801bce4:	0801bed5 	.word	0x0801bed5
 801bce8:	0801be57 	.word	0x0801be57
 801bcec:	0801bed5 	.word	0x0801bed5
 801bcf0:	0801bed5 	.word	0x0801bed5
 801bcf4:	0801be7b 	.word	0x0801be7b
 801bcf8:	0801bed5 	.word	0x0801bed5
 801bcfc:	0801be9f 	.word	0x0801be9f
 801bd00:	0801bed5 	.word	0x0801bed5
 801bd04:	0801bed5 	.word	0x0801bed5
 801bd08:	0801bed5 	.word	0x0801bed5
 801bd0c:	0801bed5 	.word	0x0801bed5
 801bd10:	0801bec3 	.word	0x0801bec3
 801bd14:	0801bed5 	.word	0x0801bed5
 801bd18:	0801bed5 	.word	0x0801bed5
 801bd1c:	0801bed5 	.word	0x0801bed5
 801bd20:	0801bed5 	.word	0x0801bed5
 801bd24:	0801bed5 	.word	0x0801bed5
 801bd28:	0801bed5 	.word	0x0801bed5
 801bd2c:	0801bed5 	.word	0x0801bed5
 801bd30:	0801bed5 	.word	0x0801bed5
 801bd34:	0801bed5 	.word	0x0801bed5
 801bd38:	0801bed5 	.word	0x0801bed5
 801bd3c:	0801bed5 	.word	0x0801bed5
 801bd40:	0801bed5 	.word	0x0801bed5
 801bd44:	0801bed5 	.word	0x0801bed5
 801bd48:	0801bed5 	.word	0x0801bed5
 801bd4c:	0801bed5 	.word	0x0801bed5
 801bd50:	0801bed5 	.word	0x0801bed5
 801bd54:	0801bed5 	.word	0x0801bed5
 801bd58:	0801bed5 	.word	0x0801bed5
 801bd5c:	0801bed5 	.word	0x0801bed5
 801bd60:	0801bed5 	.word	0x0801bed5
 801bd64:	0801bed5 	.word	0x0801bed5
 801bd68:	0801bed5 	.word	0x0801bed5
 801bd6c:	0801bed5 	.word	0x0801bed5
 801bd70:	0801bed5 	.word	0x0801bed5
 801bd74:	0801bed5 	.word	0x0801bed5
 801bd78:	0801bed5 	.word	0x0801bed5
 801bd7c:	0801bed5 	.word	0x0801bed5
 801bd80:	0801bed5 	.word	0x0801bed5
 801bd84:	0801bed5 	.word	0x0801bed5
 801bd88:	0801bed5 	.word	0x0801bed5
 801bd8c:	0801bed5 	.word	0x0801bed5
 801bd90:	0801bed5 	.word	0x0801bed5
 801bd94:	0801bed5 	.word	0x0801bed5
 801bd98:	0801bed5 	.word	0x0801bed5
 801bd9c:	0801bed5 	.word	0x0801bed5
 801bda0:	0801bed5 	.word	0x0801bed5
 801bda4:	0801bed5 	.word	0x0801bed5
 801bda8:	0801bed5 	.word	0x0801bed5
 801bdac:	0801bed5 	.word	0x0801bed5
 801bdb0:	0801bed5 	.word	0x0801bed5
 801bdb4:	0801bed5 	.word	0x0801bed5
 801bdb8:	0801bed5 	.word	0x0801bed5
 801bdbc:	0801be33 	.word	0x0801be33
 801bdc0:	2b9e      	cmp	r3, #158	; 0x9e
 801bdc2:	d051      	beq.n	801be68 <SCSI_ProcessCmd+0x26c>
 801bdc4:	e086      	b.n	801bed4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801bdc6:	7afb      	ldrb	r3, [r7, #11]
 801bdc8:	687a      	ldr	r2, [r7, #4]
 801bdca:	4619      	mov	r1, r3
 801bdcc:	68f8      	ldr	r0, [r7, #12]
 801bdce:	f000 f893 	bl	801bef8 <SCSI_TestUnitReady>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	75fb      	strb	r3, [r7, #23]
      break;
 801bdd6:	e089      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801bdd8:	7afb      	ldrb	r3, [r7, #11]
 801bdda:	687a      	ldr	r2, [r7, #4]
 801bddc:	4619      	mov	r1, r3
 801bdde:	68f8      	ldr	r0, [r7, #12]
 801bde0:	f000 fb38 	bl	801c454 <SCSI_RequestSense>
 801bde4:	4603      	mov	r3, r0
 801bde6:	75fb      	strb	r3, [r7, #23]
      break;
 801bde8:	e080      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801bdea:	7afb      	ldrb	r3, [r7, #11]
 801bdec:	687a      	ldr	r2, [r7, #4]
 801bdee:	4619      	mov	r1, r3
 801bdf0:	68f8      	ldr	r0, [r7, #12]
 801bdf2:	f000 f8d1 	bl	801bf98 <SCSI_Inquiry>
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	75fb      	strb	r3, [r7, #23]
      break;
 801bdfa:	e077      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801bdfc:	7afb      	ldrb	r3, [r7, #11]
 801bdfe:	687a      	ldr	r2, [r7, #4]
 801be00:	4619      	mov	r1, r3
 801be02:	68f8      	ldr	r0, [r7, #12]
 801be04:	f000 fbec 	bl	801c5e0 <SCSI_StartStopUnit>
 801be08:	4603      	mov	r3, r0
 801be0a:	75fb      	strb	r3, [r7, #23]
      break;
 801be0c:	e06e      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801be0e:	7afb      	ldrb	r3, [r7, #11]
 801be10:	687a      	ldr	r2, [r7, #4]
 801be12:	4619      	mov	r1, r3
 801be14:	68f8      	ldr	r0, [r7, #12]
 801be16:	f000 fc34 	bl	801c682 <SCSI_AllowPreventRemovable>
 801be1a:	4603      	mov	r3, r0
 801be1c:	75fb      	strb	r3, [r7, #23]
      break;
 801be1e:	e065      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801be20:	7afb      	ldrb	r3, [r7, #11]
 801be22:	687a      	ldr	r2, [r7, #4]
 801be24:	4619      	mov	r1, r3
 801be26:	68f8      	ldr	r0, [r7, #12]
 801be28:	f000 fabc 	bl	801c3a4 <SCSI_ModeSense6>
 801be2c:	4603      	mov	r3, r0
 801be2e:	75fb      	strb	r3, [r7, #23]
      break;
 801be30:	e05c      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801be32:	7afb      	ldrb	r3, [r7, #11]
 801be34:	687a      	ldr	r2, [r7, #4]
 801be36:	4619      	mov	r1, r3
 801be38:	68f8      	ldr	r0, [r7, #12]
 801be3a:	f000 fadf 	bl	801c3fc <SCSI_ModeSense10>
 801be3e:	4603      	mov	r3, r0
 801be40:	75fb      	strb	r3, [r7, #23]
      break;
 801be42:	e053      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801be44:	7afb      	ldrb	r3, [r7, #11]
 801be46:	687a      	ldr	r2, [r7, #4]
 801be48:	4619      	mov	r1, r3
 801be4a:	68f8      	ldr	r0, [r7, #12]
 801be4c:	f000 fa37 	bl	801c2be <SCSI_ReadFormatCapacity>
 801be50:	4603      	mov	r3, r0
 801be52:	75fb      	strb	r3, [r7, #23]
      break;
 801be54:	e04a      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801be56:	7afb      	ldrb	r3, [r7, #11]
 801be58:	687a      	ldr	r2, [r7, #4]
 801be5a:	4619      	mov	r1, r3
 801be5c:	68f8      	ldr	r0, [r7, #12]
 801be5e:	f000 f90f 	bl	801c080 <SCSI_ReadCapacity10>
 801be62:	4603      	mov	r3, r0
 801be64:	75fb      	strb	r3, [r7, #23]
      break;
 801be66:	e041      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801be68:	7afb      	ldrb	r3, [r7, #11]
 801be6a:	687a      	ldr	r2, [r7, #4]
 801be6c:	4619      	mov	r1, r3
 801be6e:	68f8      	ldr	r0, [r7, #12]
 801be70:	f000 f97b 	bl	801c16a <SCSI_ReadCapacity16>
 801be74:	4603      	mov	r3, r0
 801be76:	75fb      	strb	r3, [r7, #23]
      break;
 801be78:	e038      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801be7a:	7afb      	ldrb	r3, [r7, #11]
 801be7c:	687a      	ldr	r2, [r7, #4]
 801be7e:	4619      	mov	r1, r3
 801be80:	68f8      	ldr	r0, [r7, #12]
 801be82:	f000 fc27 	bl	801c6d4 <SCSI_Read10>
 801be86:	4603      	mov	r3, r0
 801be88:	75fb      	strb	r3, [r7, #23]
      break;
 801be8a:	e02f      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801be8c:	7afb      	ldrb	r3, [r7, #11]
 801be8e:	687a      	ldr	r2, [r7, #4]
 801be90:	4619      	mov	r1, r3
 801be92:	68f8      	ldr	r0, [r7, #12]
 801be94:	f000 fcbe 	bl	801c814 <SCSI_Read12>
 801be98:	4603      	mov	r3, r0
 801be9a:	75fb      	strb	r3, [r7, #23]
      break;
 801be9c:	e026      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801be9e:	7afb      	ldrb	r3, [r7, #11]
 801bea0:	687a      	ldr	r2, [r7, #4]
 801bea2:	4619      	mov	r1, r3
 801bea4:	68f8      	ldr	r0, [r7, #12]
 801bea6:	f000 fd60 	bl	801c96a <SCSI_Write10>
 801beaa:	4603      	mov	r3, r0
 801beac:	75fb      	strb	r3, [r7, #23]
      break;
 801beae:	e01d      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801beb0:	7afb      	ldrb	r3, [r7, #11]
 801beb2:	687a      	ldr	r2, [r7, #4]
 801beb4:	4619      	mov	r1, r3
 801beb6:	68f8      	ldr	r0, [r7, #12]
 801beb8:	f000 fe1c 	bl	801caf4 <SCSI_Write12>
 801bebc:	4603      	mov	r3, r0
 801bebe:	75fb      	strb	r3, [r7, #23]
      break;
 801bec0:	e014      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801bec2:	7afb      	ldrb	r3, [r7, #11]
 801bec4:	687a      	ldr	r2, [r7, #4]
 801bec6:	4619      	mov	r1, r3
 801bec8:	68f8      	ldr	r0, [r7, #12]
 801beca:	f000 fee8 	bl	801cc9e <SCSI_Verify10>
 801bece:	4603      	mov	r3, r0
 801bed0:	75fb      	strb	r3, [r7, #23]
      break;
 801bed2:	e00b      	b.n	801beec <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801bed4:	7af9      	ldrb	r1, [r7, #11]
 801bed6:	2320      	movs	r3, #32
 801bed8:	2205      	movs	r2, #5
 801beda:	68f8      	ldr	r0, [r7, #12]
 801bedc:	f000 fb39 	bl	801c552 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801bee0:	693b      	ldr	r3, [r7, #16]
 801bee2:	2202      	movs	r2, #2
 801bee4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801bee6:	23ff      	movs	r3, #255	; 0xff
 801bee8:	75fb      	strb	r3, [r7, #23]
      break;
 801beea:	bf00      	nop
  }

  return ret;
 801beec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bef0:	4618      	mov	r0, r3
 801bef2:	3718      	adds	r7, #24
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}

0801bef8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b086      	sub	sp, #24
 801befc:	af00      	add	r7, sp, #0
 801befe:	60f8      	str	r0, [r7, #12]
 801bf00:	460b      	mov	r3, r1
 801bf02:	607a      	str	r2, [r7, #4]
 801bf04:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bf0c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d102      	bne.n	801bf1a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801bf14:	f04f 33ff 	mov.w	r3, #4294967295
 801bf18:	e03a      	b.n	801bf90 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801bf1a:	697b      	ldr	r3, [r7, #20]
 801bf1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d00a      	beq.n	801bf3a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bf2a:	2320      	movs	r3, #32
 801bf2c:	2205      	movs	r2, #5
 801bf2e:	68f8      	ldr	r0, [r7, #12]
 801bf30:	f000 fb0f 	bl	801c552 <SCSI_SenseCode>

    return -1;
 801bf34:	f04f 33ff 	mov.w	r3, #4294967295
 801bf38:	e02a      	b.n	801bf90 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801bf40:	2b02      	cmp	r3, #2
 801bf42:	d10b      	bne.n	801bf5c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bf44:	7af9      	ldrb	r1, [r7, #11]
 801bf46:	233a      	movs	r3, #58	; 0x3a
 801bf48:	2202      	movs	r2, #2
 801bf4a:	68f8      	ldr	r0, [r7, #12]
 801bf4c:	f000 fb01 	bl	801c552 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801bf50:	697b      	ldr	r3, [r7, #20]
 801bf52:	2205      	movs	r2, #5
 801bf54:	721a      	strb	r2, [r3, #8]
    return -1;
 801bf56:	f04f 33ff 	mov.w	r3, #4294967295
 801bf5a:	e019      	b.n	801bf90 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bf62:	689b      	ldr	r3, [r3, #8]
 801bf64:	7afa      	ldrb	r2, [r7, #11]
 801bf66:	4610      	mov	r0, r2
 801bf68:	4798      	blx	r3
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d00b      	beq.n	801bf88 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bf70:	7af9      	ldrb	r1, [r7, #11]
 801bf72:	233a      	movs	r3, #58	; 0x3a
 801bf74:	2202      	movs	r2, #2
 801bf76:	68f8      	ldr	r0, [r7, #12]
 801bf78:	f000 faeb 	bl	801c552 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801bf7c:	697b      	ldr	r3, [r7, #20]
 801bf7e:	2205      	movs	r2, #5
 801bf80:	721a      	strb	r2, [r3, #8]

    return -1;
 801bf82:	f04f 33ff 	mov.w	r3, #4294967295
 801bf86:	e003      	b.n	801bf90 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	60da      	str	r2, [r3, #12]

  return 0;
 801bf8e:	2300      	movs	r3, #0
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3718      	adds	r7, #24
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}

0801bf98 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b088      	sub	sp, #32
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	60f8      	str	r0, [r7, #12]
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	607a      	str	r2, [r7, #4]
 801bfa4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bfac:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801bfae:	69bb      	ldr	r3, [r7, #24]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d102      	bne.n	801bfba <SCSI_Inquiry+0x22>
  {
    return -1;
 801bfb4:	f04f 33ff 	mov.w	r3, #4294967295
 801bfb8:	e05a      	b.n	801c070 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801bfba:	69bb      	ldr	r3, [r7, #24]
 801bfbc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d10a      	bne.n	801bfda <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801bfc4:	69bb      	ldr	r3, [r7, #24]
 801bfc6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bfca:	2320      	movs	r3, #32
 801bfcc:	2205      	movs	r2, #5
 801bfce:	68f8      	ldr	r0, [r7, #12]
 801bfd0:	f000 fabf 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801bfd4:	f04f 33ff 	mov.w	r3, #4294967295
 801bfd8:	e04a      	b.n	801c070 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	3301      	adds	r3, #1
 801bfde:	781b      	ldrb	r3, [r3, #0]
 801bfe0:	f003 0301 	and.w	r3, r3, #1
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d020      	beq.n	801c02a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	3302      	adds	r3, #2
 801bfec:	781b      	ldrb	r3, [r3, #0]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d105      	bne.n	801bffe <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801bff2:	2206      	movs	r2, #6
 801bff4:	4920      	ldr	r1, [pc, #128]	; (801c078 <SCSI_Inquiry+0xe0>)
 801bff6:	69b8      	ldr	r0, [r7, #24]
 801bff8:	f000 ffb4 	bl	801cf64 <SCSI_UpdateBotData>
 801bffc:	e037      	b.n	801c06e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	3302      	adds	r3, #2
 801c002:	781b      	ldrb	r3, [r3, #0]
 801c004:	2b80      	cmp	r3, #128	; 0x80
 801c006:	d105      	bne.n	801c014 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801c008:	2208      	movs	r2, #8
 801c00a:	491c      	ldr	r1, [pc, #112]	; (801c07c <SCSI_Inquiry+0xe4>)
 801c00c:	69b8      	ldr	r0, [r7, #24]
 801c00e:	f000 ffa9 	bl	801cf64 <SCSI_UpdateBotData>
 801c012:	e02c      	b.n	801c06e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801c014:	69bb      	ldr	r3, [r7, #24]
 801c016:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c01a:	2324      	movs	r3, #36	; 0x24
 801c01c:	2205      	movs	r2, #5
 801c01e:	68f8      	ldr	r0, [r7, #12]
 801c020:	f000 fa97 	bl	801c552 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801c024:	f04f 33ff 	mov.w	r3, #4294967295
 801c028:	e022      	b.n	801c070 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserDataMSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c030:	69d9      	ldr	r1, [r3, #28]
 801c032:	7afa      	ldrb	r2, [r7, #11]
 801c034:	4613      	mov	r3, r2
 801c036:	00db      	lsls	r3, r3, #3
 801c038:	4413      	add	r3, r2
 801c03a:	009b      	lsls	r3, r3, #2
 801c03c:	440b      	add	r3, r1
 801c03e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	3304      	adds	r3, #4
 801c044:	781b      	ldrb	r3, [r3, #0]
 801c046:	b29b      	uxth	r3, r3
 801c048:	3305      	adds	r3, #5
 801c04a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	3304      	adds	r3, #4
 801c050:	781b      	ldrb	r3, [r3, #0]
 801c052:	b29b      	uxth	r3, r3
 801c054:	8bfa      	ldrh	r2, [r7, #30]
 801c056:	429a      	cmp	r2, r3
 801c058:	d303      	bcc.n	801c062 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	3304      	adds	r3, #4
 801c05e:	781b      	ldrb	r3, [r3, #0]
 801c060:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801c062:	8bfb      	ldrh	r3, [r7, #30]
 801c064:	461a      	mov	r2, r3
 801c066:	6979      	ldr	r1, [r7, #20]
 801c068:	69b8      	ldr	r0, [r7, #24]
 801c06a:	f000 ff7b 	bl	801cf64 <SCSI_UpdateBotData>
  }

  return 0;
 801c06e:	2300      	movs	r3, #0
}
 801c070:	4618      	mov	r0, r3
 801c072:	3720      	adds	r7, #32
 801c074:	46bd      	mov	sp, r7
 801c076:	bd80      	pop	{r7, pc}
 801c078:	20000680 	.word	0x20000680
 801c07c:	20000688 	.word	0x20000688

0801c080 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b086      	sub	sp, #24
 801c084:	af00      	add	r7, sp, #0
 801c086:	60f8      	str	r0, [r7, #12]
 801c088:	460b      	mov	r3, r1
 801c08a:	607a      	str	r2, [r7, #4]
 801c08c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c094:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d102      	bne.n	801c0a2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801c09c:	f04f 33ff 	mov.w	r3, #4294967295
 801c0a0:	e05f      	b.n	801c162 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c0a8:	685b      	ldr	r3, [r3, #4]
 801c0aa:	697a      	ldr	r2, [r7, #20]
 801c0ac:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c0b0:	697a      	ldr	r2, [r7, #20]
 801c0b2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c0b6:	7af8      	ldrb	r0, [r7, #11]
 801c0b8:	4798      	blx	r3
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c0be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d104      	bne.n	801c0d0 <SCSI_ReadCapacity10+0x50>
 801c0c6:	697b      	ldr	r3, [r7, #20]
 801c0c8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c0cc:	2b02      	cmp	r3, #2
 801c0ce:	d108      	bne.n	801c0e2 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c0d0:	7af9      	ldrb	r1, [r7, #11]
 801c0d2:	233a      	movs	r3, #58	; 0x3a
 801c0d4:	2202      	movs	r2, #2
 801c0d6:	68f8      	ldr	r0, [r7, #12]
 801c0d8:	f000 fa3b 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801c0dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c0e0:	e03f      	b.n	801c162 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c0e2:	697b      	ldr	r3, [r7, #20]
 801c0e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0e8:	3b01      	subs	r3, #1
 801c0ea:	0e1b      	lsrs	r3, r3, #24
 801c0ec:	b2da      	uxtb	r2, r3
 801c0ee:	697b      	ldr	r3, [r7, #20]
 801c0f0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0f8:	3b01      	subs	r3, #1
 801c0fa:	0c1b      	lsrs	r3, r3, #16
 801c0fc:	b2da      	uxtb	r2, r3
 801c0fe:	697b      	ldr	r3, [r7, #20]
 801c100:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c108:	3b01      	subs	r3, #1
 801c10a:	0a1b      	lsrs	r3, r3, #8
 801c10c:	b2da      	uxtb	r2, r3
 801c10e:	697b      	ldr	r3, [r7, #20]
 801c110:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c112:	697b      	ldr	r3, [r7, #20]
 801c114:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c118:	b2db      	uxtb	r3, r3
 801c11a:	3b01      	subs	r3, #1
 801c11c:	b2da      	uxtb	r2, r3
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c122:	697b      	ldr	r3, [r7, #20]
 801c124:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c128:	161b      	asrs	r3, r3, #24
 801c12a:	b2da      	uxtb	r2, r3
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c136:	141b      	asrs	r3, r3, #16
 801c138:	b2da      	uxtb	r2, r3
 801c13a:	697b      	ldr	r3, [r7, #20]
 801c13c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c13e:	697b      	ldr	r3, [r7, #20]
 801c140:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c144:	0a1b      	lsrs	r3, r3, #8
 801c146:	b29b      	uxth	r3, r3
 801c148:	b2da      	uxtb	r2, r3
 801c14a:	697b      	ldr	r3, [r7, #20]
 801c14c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801c14e:	697b      	ldr	r3, [r7, #20]
 801c150:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c154:	b2da      	uxtb	r2, r3
 801c156:	697b      	ldr	r3, [r7, #20]
 801c158:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	2208      	movs	r2, #8
 801c15e:	60da      	str	r2, [r3, #12]

  return 0;
 801c160:	2300      	movs	r3, #0

}
 801c162:	4618      	mov	r0, r3
 801c164:	3718      	adds	r7, #24
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}

0801c16a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c16a:	b580      	push	{r7, lr}
 801c16c:	b088      	sub	sp, #32
 801c16e:	af00      	add	r7, sp, #0
 801c170:	60f8      	str	r0, [r7, #12]
 801c172:	460b      	mov	r3, r1
 801c174:	607a      	str	r2, [r7, #4]
 801c176:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c17e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c180:	69bb      	ldr	r3, [r7, #24]
 801c182:	2b00      	cmp	r3, #0
 801c184:	d102      	bne.n	801c18c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801c186:	f04f 33ff 	mov.w	r3, #4294967295
 801c18a:	e094      	b.n	801c2b6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c192:	685b      	ldr	r3, [r3, #4]
 801c194:	69ba      	ldr	r2, [r7, #24]
 801c196:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c19a:	69ba      	ldr	r2, [r7, #24]
 801c19c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c1a0:	7af8      	ldrb	r0, [r7, #11]
 801c1a2:	4798      	blx	r3
 801c1a4:	4603      	mov	r3, r0
 801c1a6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c1a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d104      	bne.n	801c1ba <SCSI_ReadCapacity16+0x50>
 801c1b0:	69bb      	ldr	r3, [r7, #24]
 801c1b2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c1b6:	2b02      	cmp	r3, #2
 801c1b8:	d108      	bne.n	801c1cc <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c1ba:	7af9      	ldrb	r1, [r7, #11]
 801c1bc:	233a      	movs	r3, #58	; 0x3a
 801c1be:	2202      	movs	r2, #2
 801c1c0:	68f8      	ldr	r0, [r7, #12]
 801c1c2:	f000 f9c6 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c1ca:	e074      	b.n	801c2b6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	330a      	adds	r3, #10
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	330b      	adds	r3, #11
 801c1d8:	781b      	ldrb	r3, [r3, #0]
 801c1da:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c1dc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	330c      	adds	r3, #12
 801c1e2:	781b      	ldrb	r3, [r3, #0]
 801c1e4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c1e6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c1e8:	687a      	ldr	r2, [r7, #4]
 801c1ea:	320d      	adds	r2, #13
 801c1ec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c1ee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c1f0:	69bb      	ldr	r3, [r7, #24]
 801c1f2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	77fb      	strb	r3, [r7, #31]
 801c1f8:	e007      	b.n	801c20a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801c1fa:	7ffb      	ldrb	r3, [r7, #31]
 801c1fc:	69ba      	ldr	r2, [r7, #24]
 801c1fe:	4413      	add	r3, r2
 801c200:	2200      	movs	r2, #0
 801c202:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c204:	7ffb      	ldrb	r3, [r7, #31]
 801c206:	3301      	adds	r3, #1
 801c208:	77fb      	strb	r3, [r7, #31]
 801c20a:	7ffa      	ldrb	r2, [r7, #31]
 801c20c:	69bb      	ldr	r3, [r7, #24]
 801c20e:	68db      	ldr	r3, [r3, #12]
 801c210:	429a      	cmp	r2, r3
 801c212:	d3f2      	bcc.n	801c1fa <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c214:	69bb      	ldr	r3, [r7, #24]
 801c216:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c21a:	3b01      	subs	r3, #1
 801c21c:	0e1b      	lsrs	r3, r3, #24
 801c21e:	b2da      	uxtb	r2, r3
 801c220:	69bb      	ldr	r3, [r7, #24]
 801c222:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c224:	69bb      	ldr	r3, [r7, #24]
 801c226:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c22a:	3b01      	subs	r3, #1
 801c22c:	0c1b      	lsrs	r3, r3, #16
 801c22e:	b2da      	uxtb	r2, r3
 801c230:	69bb      	ldr	r3, [r7, #24]
 801c232:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c234:	69bb      	ldr	r3, [r7, #24]
 801c236:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c23a:	3b01      	subs	r3, #1
 801c23c:	0a1b      	lsrs	r3, r3, #8
 801c23e:	b2da      	uxtb	r2, r3
 801c240:	69bb      	ldr	r3, [r7, #24]
 801c242:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c244:	69bb      	ldr	r3, [r7, #24]
 801c246:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c24a:	b2db      	uxtb	r3, r3
 801c24c:	3b01      	subs	r3, #1
 801c24e:	b2da      	uxtb	r2, r3
 801c250:	69bb      	ldr	r3, [r7, #24]
 801c252:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c254:	69bb      	ldr	r3, [r7, #24]
 801c256:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c25a:	161b      	asrs	r3, r3, #24
 801c25c:	b2da      	uxtb	r2, r3
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c262:	69bb      	ldr	r3, [r7, #24]
 801c264:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c268:	141b      	asrs	r3, r3, #16
 801c26a:	b2da      	uxtb	r2, r3
 801c26c:	69bb      	ldr	r3, [r7, #24]
 801c26e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c270:	69bb      	ldr	r3, [r7, #24]
 801c272:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c276:	0a1b      	lsrs	r3, r3, #8
 801c278:	b29b      	uxth	r3, r3
 801c27a:	b2da      	uxtb	r2, r3
 801c27c:	69bb      	ldr	r3, [r7, #24]
 801c27e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801c280:	69bb      	ldr	r3, [r7, #24]
 801c282:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c286:	b2da      	uxtb	r2, r3
 801c288:	69bb      	ldr	r3, [r7, #24]
 801c28a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	330a      	adds	r3, #10
 801c290:	781b      	ldrb	r3, [r3, #0]
 801c292:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	330b      	adds	r3, #11
 801c298:	781b      	ldrb	r3, [r3, #0]
 801c29a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c29c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	330c      	adds	r3, #12
 801c2a2:	781b      	ldrb	r3, [r3, #0]
 801c2a4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c2a6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c2a8:	687a      	ldr	r2, [r7, #4]
 801c2aa:	320d      	adds	r2, #13
 801c2ac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c2ae:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c2b0:	69bb      	ldr	r3, [r7, #24]
 801c2b2:	60da      	str	r2, [r3, #12]

  return 0;
 801c2b4:	2300      	movs	r3, #0
}
 801c2b6:	4618      	mov	r0, r3
 801c2b8:	3720      	adds	r7, #32
 801c2ba:	46bd      	mov	sp, r7
 801c2bc:	bd80      	pop	{r7, pc}

0801c2be <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c2be:	b580      	push	{r7, lr}
 801c2c0:	b088      	sub	sp, #32
 801c2c2:	af00      	add	r7, sp, #0
 801c2c4:	60f8      	str	r0, [r7, #12]
 801c2c6:	460b      	mov	r3, r1
 801c2c8:	607a      	str	r2, [r7, #4]
 801c2ca:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c2d2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c2d4:	69bb      	ldr	r3, [r7, #24]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d102      	bne.n	801c2e0 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801c2da:	f04f 33ff 	mov.w	r3, #4294967295
 801c2de:	e05c      	b.n	801c39a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c2e6:	685b      	ldr	r3, [r3, #4]
 801c2e8:	f107 0214 	add.w	r2, r7, #20
 801c2ec:	f107 0110 	add.w	r1, r7, #16
 801c2f0:	7af8      	ldrb	r0, [r7, #11]
 801c2f2:	4798      	blx	r3
 801c2f4:	4603      	mov	r3, r0
 801c2f6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c2f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d104      	bne.n	801c30a <SCSI_ReadFormatCapacity+0x4c>
 801c300:	69bb      	ldr	r3, [r7, #24]
 801c302:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c306:	2b02      	cmp	r3, #2
 801c308:	d108      	bne.n	801c31c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c30a:	7af9      	ldrb	r1, [r7, #11]
 801c30c:	233a      	movs	r3, #58	; 0x3a
 801c30e:	2202      	movs	r2, #2
 801c310:	68f8      	ldr	r0, [r7, #12]
 801c312:	f000 f91e 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801c316:	f04f 33ff 	mov.w	r3, #4294967295
 801c31a:	e03e      	b.n	801c39a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801c31c:	2300      	movs	r3, #0
 801c31e:	83fb      	strh	r3, [r7, #30]
 801c320:	e007      	b.n	801c332 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801c322:	8bfb      	ldrh	r3, [r7, #30]
 801c324:	69ba      	ldr	r2, [r7, #24]
 801c326:	4413      	add	r3, r2
 801c328:	2200      	movs	r2, #0
 801c32a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801c32c:	8bfb      	ldrh	r3, [r7, #30]
 801c32e:	3301      	adds	r3, #1
 801c330:	83fb      	strh	r3, [r7, #30]
 801c332:	8bfb      	ldrh	r3, [r7, #30]
 801c334:	2b0b      	cmp	r3, #11
 801c336:	d9f4      	bls.n	801c322 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 801c338:	69bb      	ldr	r3, [r7, #24]
 801c33a:	2208      	movs	r2, #8
 801c33c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801c33e:	693b      	ldr	r3, [r7, #16]
 801c340:	3b01      	subs	r3, #1
 801c342:	0e1b      	lsrs	r3, r3, #24
 801c344:	b2da      	uxtb	r2, r3
 801c346:	69bb      	ldr	r3, [r7, #24]
 801c348:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801c34a:	693b      	ldr	r3, [r7, #16]
 801c34c:	3b01      	subs	r3, #1
 801c34e:	0c1b      	lsrs	r3, r3, #16
 801c350:	b2da      	uxtb	r2, r3
 801c352:	69bb      	ldr	r3, [r7, #24]
 801c354:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801c356:	693b      	ldr	r3, [r7, #16]
 801c358:	3b01      	subs	r3, #1
 801c35a:	0a1b      	lsrs	r3, r3, #8
 801c35c:	b2da      	uxtb	r2, r3
 801c35e:	69bb      	ldr	r3, [r7, #24]
 801c360:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801c362:	693b      	ldr	r3, [r7, #16]
 801c364:	b2db      	uxtb	r3, r3
 801c366:	3b01      	subs	r3, #1
 801c368:	b2da      	uxtb	r2, r3
 801c36a:	69bb      	ldr	r3, [r7, #24]
 801c36c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801c36e:	69bb      	ldr	r3, [r7, #24]
 801c370:	2202      	movs	r2, #2
 801c372:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801c374:	8abb      	ldrh	r3, [r7, #20]
 801c376:	141b      	asrs	r3, r3, #16
 801c378:	b2da      	uxtb	r2, r3
 801c37a:	69bb      	ldr	r3, [r7, #24]
 801c37c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801c37e:	8abb      	ldrh	r3, [r7, #20]
 801c380:	0a1b      	lsrs	r3, r3, #8
 801c382:	b29b      	uxth	r3, r3
 801c384:	b2da      	uxtb	r2, r3
 801c386:	69bb      	ldr	r3, [r7, #24]
 801c388:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801c38a:	8abb      	ldrh	r3, [r7, #20]
 801c38c:	b2da      	uxtb	r2, r3
 801c38e:	69bb      	ldr	r3, [r7, #24]
 801c390:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801c392:	69bb      	ldr	r3, [r7, #24]
 801c394:	220c      	movs	r2, #12
 801c396:	60da      	str	r2, [r3, #12]

  return 0;
 801c398:	2300      	movs	r3, #0
}
 801c39a:	4618      	mov	r0, r3
 801c39c:	3720      	adds	r7, #32
 801c39e:	46bd      	mov	sp, r7
 801c3a0:	bd80      	pop	{r7, pc}
	...

0801c3a4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b086      	sub	sp, #24
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	60f8      	str	r0, [r7, #12]
 801c3ac:	460b      	mov	r3, r1
 801c3ae:	607a      	str	r2, [r7, #4]
 801c3b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c3b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801c3ba:	2317      	movs	r3, #23
 801c3bc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c3be:	693b      	ldr	r3, [r7, #16]
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d102      	bne.n	801c3ca <SCSI_ModeSense6+0x26>
  {
    return -1;
 801c3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801c3c8:	e011      	b.n	801c3ee <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	3304      	adds	r3, #4
 801c3ce:	781b      	ldrb	r3, [r3, #0]
 801c3d0:	b29b      	uxth	r3, r3
 801c3d2:	8afa      	ldrh	r2, [r7, #22]
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	d303      	bcc.n	801c3e0 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	3304      	adds	r3, #4
 801c3dc:	781b      	ldrb	r3, [r3, #0]
 801c3de:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801c3e0:	8afb      	ldrh	r3, [r7, #22]
 801c3e2:	461a      	mov	r2, r3
 801c3e4:	4904      	ldr	r1, [pc, #16]	; (801c3f8 <SCSI_ModeSense6+0x54>)
 801c3e6:	6938      	ldr	r0, [r7, #16]
 801c3e8:	f000 fdbc 	bl	801cf64 <SCSI_UpdateBotData>

  return 0;
 801c3ec:	2300      	movs	r3, #0
}
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	3718      	adds	r7, #24
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	bd80      	pop	{r7, pc}
 801c3f6:	bf00      	nop
 801c3f8:	20000690 	.word	0x20000690

0801c3fc <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c3fc:	b580      	push	{r7, lr}
 801c3fe:	b086      	sub	sp, #24
 801c400:	af00      	add	r7, sp, #0
 801c402:	60f8      	str	r0, [r7, #12]
 801c404:	460b      	mov	r3, r1
 801c406:	607a      	str	r2, [r7, #4]
 801c408:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c410:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801c412:	231b      	movs	r3, #27
 801c414:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c416:	693b      	ldr	r3, [r7, #16]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d102      	bne.n	801c422 <SCSI_ModeSense10+0x26>
  {
    return -1;
 801c41c:	f04f 33ff 	mov.w	r3, #4294967295
 801c420:	e011      	b.n	801c446 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	3308      	adds	r3, #8
 801c426:	781b      	ldrb	r3, [r3, #0]
 801c428:	b29b      	uxth	r3, r3
 801c42a:	8afa      	ldrh	r2, [r7, #22]
 801c42c:	429a      	cmp	r2, r3
 801c42e:	d303      	bcc.n	801c438 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	3308      	adds	r3, #8
 801c434:	781b      	ldrb	r3, [r3, #0]
 801c436:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801c438:	8afb      	ldrh	r3, [r7, #22]
 801c43a:	461a      	mov	r2, r3
 801c43c:	4904      	ldr	r1, [pc, #16]	; (801c450 <SCSI_ModeSense10+0x54>)
 801c43e:	6938      	ldr	r0, [r7, #16]
 801c440:	f000 fd90 	bl	801cf64 <SCSI_UpdateBotData>

  return 0;
 801c444:	2300      	movs	r3, #0
}
 801c446:	4618      	mov	r0, r3
 801c448:	3718      	adds	r7, #24
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}
 801c44e:	bf00      	nop
 801c450:	200006a8 	.word	0x200006a8

0801c454 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c454:	b580      	push	{r7, lr}
 801c456:	b086      	sub	sp, #24
 801c458:	af00      	add	r7, sp, #0
 801c45a:	60f8      	str	r0, [r7, #12]
 801c45c:	460b      	mov	r3, r1
 801c45e:	607a      	str	r2, [r7, #4]
 801c460:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c468:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801c46a:	693b      	ldr	r3, [r7, #16]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d102      	bne.n	801c476 <SCSI_RequestSense+0x22>
  {
    return -1;
 801c470:	f04f 33ff 	mov.w	r3, #4294967295
 801c474:	e069      	b.n	801c54a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c476:	693b      	ldr	r3, [r7, #16]
 801c478:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d10a      	bne.n	801c496 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c480:	693b      	ldr	r3, [r7, #16]
 801c482:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c486:	2320      	movs	r3, #32
 801c488:	2205      	movs	r2, #5
 801c48a:	68f8      	ldr	r0, [r7, #12]
 801c48c:	f000 f861 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801c490:	f04f 33ff 	mov.w	r3, #4294967295
 801c494:	e059      	b.n	801c54a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c496:	2300      	movs	r3, #0
 801c498:	75fb      	strb	r3, [r7, #23]
 801c49a:	e007      	b.n	801c4ac <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801c49c:	7dfb      	ldrb	r3, [r7, #23]
 801c49e:	693a      	ldr	r2, [r7, #16]
 801c4a0:	4413      	add	r3, r2
 801c4a2:	2200      	movs	r2, #0
 801c4a4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c4a6:	7dfb      	ldrb	r3, [r7, #23]
 801c4a8:	3301      	adds	r3, #1
 801c4aa:	75fb      	strb	r3, [r7, #23]
 801c4ac:	7dfb      	ldrb	r3, [r7, #23]
 801c4ae:	2b11      	cmp	r3, #17
 801c4b0:	d9f4      	bls.n	801c49c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	2270      	movs	r2, #112	; 0x70
 801c4b6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801c4b8:	693b      	ldr	r3, [r7, #16]
 801c4ba:	220c      	movs	r2, #12
 801c4bc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801c4be:	693b      	ldr	r3, [r7, #16]
 801c4c0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801c4c4:	693b      	ldr	r3, [r7, #16]
 801c4c6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c4ca:	429a      	cmp	r2, r3
 801c4cc:	d02e      	beq.n	801c52c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801c4ce:	693b      	ldr	r3, [r7, #16]
 801c4d0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c4d4:	461a      	mov	r2, r3
 801c4d6:	693b      	ldr	r3, [r7, #16]
 801c4d8:	3248      	adds	r2, #72	; 0x48
 801c4da:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801c4de:	693b      	ldr	r3, [r7, #16]
 801c4e0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801c4e2:	693b      	ldr	r3, [r7, #16]
 801c4e4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c4e8:	693a      	ldr	r2, [r7, #16]
 801c4ea:	3348      	adds	r3, #72	; 0x48
 801c4ec:	00db      	lsls	r3, r3, #3
 801c4ee:	4413      	add	r3, r2
 801c4f0:	791a      	ldrb	r2, [r3, #4]
 801c4f2:	693b      	ldr	r3, [r7, #16]
 801c4f4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801c4f6:	693b      	ldr	r3, [r7, #16]
 801c4f8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c4fc:	693a      	ldr	r2, [r7, #16]
 801c4fe:	3348      	adds	r3, #72	; 0x48
 801c500:	00db      	lsls	r3, r3, #3
 801c502:	4413      	add	r3, r2
 801c504:	795a      	ldrb	r2, [r3, #5]
 801c506:	693b      	ldr	r3, [r7, #16]
 801c508:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801c50a:	693b      	ldr	r3, [r7, #16]
 801c50c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c510:	3301      	adds	r3, #1
 801c512:	b2da      	uxtb	r2, r3
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801c51a:	693b      	ldr	r3, [r7, #16]
 801c51c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c520:	2b04      	cmp	r3, #4
 801c522:	d103      	bne.n	801c52c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 801c524:	693b      	ldr	r3, [r7, #16]
 801c526:	2200      	movs	r2, #0
 801c528:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801c52c:	693b      	ldr	r3, [r7, #16]
 801c52e:	2212      	movs	r2, #18
 801c530:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	3304      	adds	r3, #4
 801c536:	781b      	ldrb	r3, [r3, #0]
 801c538:	2b12      	cmp	r3, #18
 801c53a:	d805      	bhi.n	801c548 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	3304      	adds	r3, #4
 801c540:	781b      	ldrb	r3, [r3, #0]
 801c542:	461a      	mov	r2, r3
 801c544:	693b      	ldr	r3, [r7, #16]
 801c546:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801c548:	2300      	movs	r3, #0
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3718      	adds	r7, #24
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}

0801c552 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801c552:	b480      	push	{r7}
 801c554:	b085      	sub	sp, #20
 801c556:	af00      	add	r7, sp, #0
 801c558:	6078      	str	r0, [r7, #4]
 801c55a:	4608      	mov	r0, r1
 801c55c:	4611      	mov	r1, r2
 801c55e:	461a      	mov	r2, r3
 801c560:	4603      	mov	r3, r0
 801c562:	70fb      	strb	r3, [r7, #3]
 801c564:	460b      	mov	r3, r1
 801c566:	70bb      	strb	r3, [r7, #2]
 801c568:	4613      	mov	r3, r2
 801c56a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c572:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d02c      	beq.n	801c5d4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c580:	461a      	mov	r2, r3
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	3248      	adds	r2, #72	; 0x48
 801c586:	78b9      	ldrb	r1, [r7, #2]
 801c588:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c592:	68fa      	ldr	r2, [r7, #12]
 801c594:	3348      	adds	r3, #72	; 0x48
 801c596:	00db      	lsls	r3, r3, #3
 801c598:	4413      	add	r3, r2
 801c59a:	787a      	ldrb	r2, [r7, #1]
 801c59c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c5a4:	68fa      	ldr	r2, [r7, #12]
 801c5a6:	3348      	adds	r3, #72	; 0x48
 801c5a8:	00db      	lsls	r3, r3, #3
 801c5aa:	4413      	add	r3, r2
 801c5ac:	2200      	movs	r2, #0
 801c5ae:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c5b6:	3301      	adds	r3, #1
 801c5b8:	b2da      	uxtb	r2, r3
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c5c6:	2b04      	cmp	r3, #4
 801c5c8:	d105      	bne.n	801c5d6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801c5d2:	e000      	b.n	801c5d6 <SCSI_SenseCode+0x84>
    return;
 801c5d4:	bf00      	nop
  }
}
 801c5d6:	3714      	adds	r7, #20
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5de:	4770      	bx	lr

0801c5e0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b086      	sub	sp, #24
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	60f8      	str	r0, [r7, #12]
 801c5e8:	460b      	mov	r3, r1
 801c5ea:	607a      	str	r2, [r7, #4]
 801c5ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c5f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d102      	bne.n	801c602 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801c5fc:	f04f 33ff 	mov.w	r3, #4294967295
 801c600:	e03b      	b.n	801c67a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801c602:	697b      	ldr	r3, [r7, #20]
 801c604:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c608:	2b01      	cmp	r3, #1
 801c60a:	d10f      	bne.n	801c62c <SCSI_StartStopUnit+0x4c>
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	3304      	adds	r3, #4
 801c610:	781b      	ldrb	r3, [r3, #0]
 801c612:	f003 0303 	and.w	r3, r3, #3
 801c616:	2b02      	cmp	r3, #2
 801c618:	d108      	bne.n	801c62c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801c61a:	7af9      	ldrb	r1, [r7, #11]
 801c61c:	2324      	movs	r3, #36	; 0x24
 801c61e:	2205      	movs	r2, #5
 801c620:	68f8      	ldr	r0, [r7, #12]
 801c622:	f7ff ff96 	bl	801c552 <SCSI_SenseCode>

    return -1;
 801c626:	f04f 33ff 	mov.w	r3, #4294967295
 801c62a:	e026      	b.n	801c67a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	3304      	adds	r3, #4
 801c630:	781b      	ldrb	r3, [r3, #0]
 801c632:	f003 0303 	and.w	r3, r3, #3
 801c636:	2b01      	cmp	r3, #1
 801c638:	d104      	bne.n	801c644 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c63a:	697b      	ldr	r3, [r7, #20]
 801c63c:	2200      	movs	r2, #0
 801c63e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c642:	e016      	b.n	801c672 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	3304      	adds	r3, #4
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	f003 0303 	and.w	r3, r3, #3
 801c64e:	2b02      	cmp	r3, #2
 801c650:	d104      	bne.n	801c65c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801c652:	697b      	ldr	r3, [r7, #20]
 801c654:	2202      	movs	r2, #2
 801c656:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c65a:	e00a      	b.n	801c672 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	3304      	adds	r3, #4
 801c660:	781b      	ldrb	r3, [r3, #0]
 801c662:	f003 0303 	and.w	r3, r3, #3
 801c666:	2b03      	cmp	r3, #3
 801c668:	d103      	bne.n	801c672 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c66a:	697b      	ldr	r3, [r7, #20]
 801c66c:	2200      	movs	r2, #0
 801c66e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801c672:	697b      	ldr	r3, [r7, #20]
 801c674:	2200      	movs	r2, #0
 801c676:	60da      	str	r2, [r3, #12]

  return 0;
 801c678:	2300      	movs	r3, #0
}
 801c67a:	4618      	mov	r0, r3
 801c67c:	3718      	adds	r7, #24
 801c67e:	46bd      	mov	sp, r7
 801c680:	bd80      	pop	{r7, pc}

0801c682 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c682:	b480      	push	{r7}
 801c684:	b087      	sub	sp, #28
 801c686:	af00      	add	r7, sp, #0
 801c688:	60f8      	str	r0, [r7, #12]
 801c68a:	460b      	mov	r3, r1
 801c68c:	607a      	str	r2, [r7, #4]
 801c68e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c696:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d102      	bne.n	801c6a4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801c69e:	f04f 33ff 	mov.w	r3, #4294967295
 801c6a2:	e011      	b.n	801c6c8 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	3304      	adds	r3, #4
 801c6a8:	781b      	ldrb	r3, [r3, #0]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d104      	bne.n	801c6b8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c6ae:	697b      	ldr	r3, [r7, #20]
 801c6b0:	2200      	movs	r2, #0
 801c6b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c6b6:	e003      	b.n	801c6c0 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801c6b8:	697b      	ldr	r3, [r7, #20]
 801c6ba:	2201      	movs	r2, #1
 801c6bc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801c6c0:	697b      	ldr	r3, [r7, #20]
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	60da      	str	r2, [r3, #12]

  return 0;
 801c6c6:	2300      	movs	r3, #0
}
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	371c      	adds	r7, #28
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d2:	4770      	bx	lr

0801c6d4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b086      	sub	sp, #24
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	60f8      	str	r0, [r7, #12]
 801c6dc:	460b      	mov	r3, r1
 801c6de:	607a      	str	r2, [r7, #4]
 801c6e0:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c6e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d102      	bne.n	801c6f6 <SCSI_Read10+0x22>
  {
    return -1;
 801c6f0:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f4:	e08a      	b.n	801c80c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c6f6:	697b      	ldr	r3, [r7, #20]
 801c6f8:	7a1b      	ldrb	r3, [r3, #8]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d17c      	bne.n	801c7f8 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c6fe:	697b      	ldr	r3, [r7, #20]
 801c700:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c704:	b25b      	sxtb	r3, r3
 801c706:	2b00      	cmp	r3, #0
 801c708:	db0a      	blt.n	801c720 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c710:	2320      	movs	r3, #32
 801c712:	2205      	movs	r2, #5
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f7ff ff1c 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c71a:	f04f 33ff 	mov.w	r3, #4294967295
 801c71e:	e075      	b.n	801c80c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c726:	2b02      	cmp	r3, #2
 801c728:	d108      	bne.n	801c73c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c72a:	7af9      	ldrb	r1, [r7, #11]
 801c72c:	233a      	movs	r3, #58	; 0x3a
 801c72e:	2202      	movs	r2, #2
 801c730:	68f8      	ldr	r0, [r7, #12]
 801c732:	f7ff ff0e 	bl	801c552 <SCSI_SenseCode>

      return -1;
 801c736:	f04f 33ff 	mov.w	r3, #4294967295
 801c73a:	e067      	b.n	801c80c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c742:	689b      	ldr	r3, [r3, #8]
 801c744:	7afa      	ldrb	r2, [r7, #11]
 801c746:	4610      	mov	r0, r2
 801c748:	4798      	blx	r3
 801c74a:	4603      	mov	r3, r0
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d008      	beq.n	801c762 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c750:	7af9      	ldrb	r1, [r7, #11]
 801c752:	233a      	movs	r3, #58	; 0x3a
 801c754:	2202      	movs	r2, #2
 801c756:	68f8      	ldr	r0, [r7, #12]
 801c758:	f7ff fefb 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c75c:	f04f 33ff 	mov.w	r3, #4294967295
 801c760:	e054      	b.n	801c80c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	3302      	adds	r3, #2
 801c766:	781b      	ldrb	r3, [r3, #0]
 801c768:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	3303      	adds	r3, #3
 801c76e:	781b      	ldrb	r3, [r3, #0]
 801c770:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c772:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	3304      	adds	r3, #4
 801c778:	781b      	ldrb	r3, [r3, #0]
 801c77a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c77c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c77e:	687a      	ldr	r2, [r7, #4]
 801c780:	3205      	adds	r2, #5
 801c782:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c784:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c786:	697b      	ldr	r3, [r7, #20]
 801c788:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	3307      	adds	r3, #7
 801c790:	781b      	ldrb	r3, [r3, #0]
 801c792:	021b      	lsls	r3, r3, #8
 801c794:	687a      	ldr	r2, [r7, #4]
 801c796:	3208      	adds	r2, #8
 801c798:	7812      	ldrb	r2, [r2, #0]
 801c79a:	431a      	orrs	r2, r3
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c7a2:	697b      	ldr	r3, [r7, #20]
 801c7a4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c7a8:	697b      	ldr	r3, [r7, #20]
 801c7aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c7ae:	7af9      	ldrb	r1, [r7, #11]
 801c7b0:	68f8      	ldr	r0, [r7, #12]
 801c7b2:	f000 faad 	bl	801cd10 <SCSI_CheckAddressRange>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	da02      	bge.n	801c7c2 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c7bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c7c0:	e024      	b.n	801c80c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c7c2:	697b      	ldr	r3, [r7, #20]
 801c7c4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c7ce:	6979      	ldr	r1, [r7, #20]
 801c7d0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c7d4:	fb01 f303 	mul.w	r3, r1, r3
 801c7d8:	429a      	cmp	r2, r3
 801c7da:	d00a      	beq.n	801c7f2 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c7dc:	697b      	ldr	r3, [r7, #20]
 801c7de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c7e2:	2320      	movs	r3, #32
 801c7e4:	2205      	movs	r2, #5
 801c7e6:	68f8      	ldr	r0, [r7, #12]
 801c7e8:	f7ff feb3 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c7ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c7f0:	e00c      	b.n	801c80c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	2202      	movs	r2, #2
 801c7f6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c7f8:	697b      	ldr	r3, [r7, #20]
 801c7fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c7fe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c800:	7afb      	ldrb	r3, [r7, #11]
 801c802:	4619      	mov	r1, r3
 801c804:	68f8      	ldr	r0, [r7, #12]
 801c806:	f000 faab 	bl	801cd60 <SCSI_ProcessRead>
 801c80a:	4603      	mov	r3, r0
}
 801c80c:	4618      	mov	r0, r3
 801c80e:	3718      	adds	r7, #24
 801c810:	46bd      	mov	sp, r7
 801c812:	bd80      	pop	{r7, pc}

0801c814 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b086      	sub	sp, #24
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	460b      	mov	r3, r1
 801c81e:	607a      	str	r2, [r7, #4]
 801c820:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c828:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c82a:	697b      	ldr	r3, [r7, #20]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d102      	bne.n	801c836 <SCSI_Read12+0x22>
  {
    return -1;
 801c830:	f04f 33ff 	mov.w	r3, #4294967295
 801c834:	e095      	b.n	801c962 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c836:	697b      	ldr	r3, [r7, #20]
 801c838:	7a1b      	ldrb	r3, [r3, #8]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	f040 8087 	bne.w	801c94e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c840:	697b      	ldr	r3, [r7, #20]
 801c842:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c846:	b25b      	sxtb	r3, r3
 801c848:	2b00      	cmp	r3, #0
 801c84a:	db0a      	blt.n	801c862 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c852:	2320      	movs	r3, #32
 801c854:	2205      	movs	r2, #5
 801c856:	68f8      	ldr	r0, [r7, #12]
 801c858:	f7ff fe7b 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c85c:	f04f 33ff 	mov.w	r3, #4294967295
 801c860:	e07f      	b.n	801c962 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c868:	2b02      	cmp	r3, #2
 801c86a:	d108      	bne.n	801c87e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c86c:	7af9      	ldrb	r1, [r7, #11]
 801c86e:	233a      	movs	r3, #58	; 0x3a
 801c870:	2202      	movs	r2, #2
 801c872:	68f8      	ldr	r0, [r7, #12]
 801c874:	f7ff fe6d 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c878:	f04f 33ff 	mov.w	r3, #4294967295
 801c87c:	e071      	b.n	801c962 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c884:	689b      	ldr	r3, [r3, #8]
 801c886:	7afa      	ldrb	r2, [r7, #11]
 801c888:	4610      	mov	r0, r2
 801c88a:	4798      	blx	r3
 801c88c:	4603      	mov	r3, r0
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d008      	beq.n	801c8a4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c892:	7af9      	ldrb	r1, [r7, #11]
 801c894:	233a      	movs	r3, #58	; 0x3a
 801c896:	2202      	movs	r2, #2
 801c898:	68f8      	ldr	r0, [r7, #12]
 801c89a:	f7ff fe5a 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c89e:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a2:	e05e      	b.n	801c962 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	3302      	adds	r3, #2
 801c8a8:	781b      	ldrb	r3, [r3, #0]
 801c8aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	3303      	adds	r3, #3
 801c8b0:	781b      	ldrb	r3, [r3, #0]
 801c8b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	3304      	adds	r3, #4
 801c8ba:	781b      	ldrb	r3, [r3, #0]
 801c8bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c8be:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c8c0:	687a      	ldr	r2, [r7, #4]
 801c8c2:	3205      	adds	r2, #5
 801c8c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c8c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8c8:	697b      	ldr	r3, [r7, #20]
 801c8ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	3306      	adds	r3, #6
 801c8d2:	781b      	ldrb	r3, [r3, #0]
 801c8d4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	3307      	adds	r3, #7
 801c8da:	781b      	ldrb	r3, [r3, #0]
 801c8dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c8de:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	3308      	adds	r3, #8
 801c8e4:	781b      	ldrb	r3, [r3, #0]
 801c8e6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801c8e8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801c8ea:	687a      	ldr	r2, [r7, #4]
 801c8ec:	3209      	adds	r2, #9
 801c8ee:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801c8f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c8f2:	697b      	ldr	r3, [r7, #20]
 801c8f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c8f8:	697b      	ldr	r3, [r7, #20]
 801c8fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c8fe:	697b      	ldr	r3, [r7, #20]
 801c900:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c904:	7af9      	ldrb	r1, [r7, #11]
 801c906:	68f8      	ldr	r0, [r7, #12]
 801c908:	f000 fa02 	bl	801cd10 <SCSI_CheckAddressRange>
 801c90c:	4603      	mov	r3, r0
 801c90e:	2b00      	cmp	r3, #0
 801c910:	da02      	bge.n	801c918 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c912:	f04f 33ff 	mov.w	r3, #4294967295
 801c916:	e024      	b.n	801c962 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c918:	697b      	ldr	r3, [r7, #20]
 801c91a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c91e:	697b      	ldr	r3, [r7, #20]
 801c920:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c924:	6979      	ldr	r1, [r7, #20]
 801c926:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c92a:	fb01 f303 	mul.w	r3, r1, r3
 801c92e:	429a      	cmp	r2, r3
 801c930:	d00a      	beq.n	801c948 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c932:	697b      	ldr	r3, [r7, #20]
 801c934:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c938:	2320      	movs	r3, #32
 801c93a:	2205      	movs	r2, #5
 801c93c:	68f8      	ldr	r0, [r7, #12]
 801c93e:	f7ff fe08 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c942:	f04f 33ff 	mov.w	r3, #4294967295
 801c946:	e00c      	b.n	801c962 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c948:	697b      	ldr	r3, [r7, #20]
 801c94a:	2202      	movs	r2, #2
 801c94c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c94e:	697b      	ldr	r3, [r7, #20]
 801c950:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c954:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c956:	7afb      	ldrb	r3, [r7, #11]
 801c958:	4619      	mov	r1, r3
 801c95a:	68f8      	ldr	r0, [r7, #12]
 801c95c:	f000 fa00 	bl	801cd60 <SCSI_ProcessRead>
 801c960:	4603      	mov	r3, r0
}
 801c962:	4618      	mov	r0, r3
 801c964:	3718      	adds	r7, #24
 801c966:	46bd      	mov	sp, r7
 801c968:	bd80      	pop	{r7, pc}

0801c96a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c96a:	b580      	push	{r7, lr}
 801c96c:	b086      	sub	sp, #24
 801c96e:	af00      	add	r7, sp, #0
 801c970:	60f8      	str	r0, [r7, #12]
 801c972:	460b      	mov	r3, r1
 801c974:	607a      	str	r2, [r7, #4]
 801c976:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c97e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c980:	697b      	ldr	r3, [r7, #20]
 801c982:	2b00      	cmp	r3, #0
 801c984:	d102      	bne.n	801c98c <SCSI_Write10+0x22>
  {
    return -1;
 801c986:	f04f 33ff 	mov.w	r3, #4294967295
 801c98a:	e0af      	b.n	801caec <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c98c:	697b      	ldr	r3, [r7, #20]
 801c98e:	7a1b      	ldrb	r3, [r3, #8]
 801c990:	2b00      	cmp	r3, #0
 801c992:	f040 80a5 	bne.w	801cae0 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801c996:	697b      	ldr	r3, [r7, #20]
 801c998:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d10a      	bne.n	801c9b6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9a0:	697b      	ldr	r3, [r7, #20]
 801c9a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c9a6:	2320      	movs	r3, #32
 801c9a8:	2205      	movs	r2, #5
 801c9aa:	68f8      	ldr	r0, [r7, #12]
 801c9ac:	f7ff fdd1 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c9b0:	f04f 33ff 	mov.w	r3, #4294967295
 801c9b4:	e09a      	b.n	801caec <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801c9b6:	697b      	ldr	r3, [r7, #20]
 801c9b8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c9bc:	b25b      	sxtb	r3, r3
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	da0a      	bge.n	801c9d8 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c9c8:	2320      	movs	r3, #32
 801c9ca:	2205      	movs	r2, #5
 801c9cc:	68f8      	ldr	r0, [r7, #12]
 801c9ce:	f7ff fdc0 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c9d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c9d6:	e089      	b.n	801caec <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c9de:	689b      	ldr	r3, [r3, #8]
 801c9e0:	7afa      	ldrb	r2, [r7, #11]
 801c9e2:	4610      	mov	r0, r2
 801c9e4:	4798      	blx	r3
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d008      	beq.n	801c9fe <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c9ec:	7af9      	ldrb	r1, [r7, #11]
 801c9ee:	233a      	movs	r3, #58	; 0x3a
 801c9f0:	2202      	movs	r2, #2
 801c9f2:	68f8      	ldr	r0, [r7, #12]
 801c9f4:	f7ff fdad 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801c9f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c9fc:	e076      	b.n	801caec <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca04:	68db      	ldr	r3, [r3, #12]
 801ca06:	7afa      	ldrb	r2, [r7, #11]
 801ca08:	4610      	mov	r0, r2
 801ca0a:	4798      	blx	r3
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d008      	beq.n	801ca24 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801ca12:	7af9      	ldrb	r1, [r7, #11]
 801ca14:	2327      	movs	r3, #39	; 0x27
 801ca16:	2202      	movs	r2, #2
 801ca18:	68f8      	ldr	r0, [r7, #12]
 801ca1a:	f7ff fd9a 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801ca1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca22:	e063      	b.n	801caec <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	3302      	adds	r3, #2
 801ca28:	781b      	ldrb	r3, [r3, #0]
 801ca2a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	3303      	adds	r3, #3
 801ca30:	781b      	ldrb	r3, [r3, #0]
 801ca32:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca34:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	3304      	adds	r3, #4
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801ca3e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801ca40:	687a      	ldr	r2, [r7, #4]
 801ca42:	3205      	adds	r2, #5
 801ca44:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801ca46:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	3307      	adds	r3, #7
 801ca52:	781b      	ldrb	r3, [r3, #0]
 801ca54:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801ca56:	687a      	ldr	r2, [r7, #4]
 801ca58:	3208      	adds	r2, #8
 801ca5a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801ca5c:	431a      	orrs	r2, r3
 801ca5e:	697b      	ldr	r3, [r7, #20]
 801ca60:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801ca64:	697b      	ldr	r3, [r7, #20]
 801ca66:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ca6a:	697b      	ldr	r3, [r7, #20]
 801ca6c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ca70:	7af9      	ldrb	r1, [r7, #11]
 801ca72:	68f8      	ldr	r0, [r7, #12]
 801ca74:	f000 f94c 	bl	801cd10 <SCSI_CheckAddressRange>
 801ca78:	4603      	mov	r3, r0
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	da02      	bge.n	801ca84 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801ca7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca82:	e033      	b.n	801caec <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ca84:	697b      	ldr	r3, [r7, #20]
 801ca86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ca8a:	697a      	ldr	r2, [r7, #20]
 801ca8c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ca90:	fb02 f303 	mul.w	r3, r2, r3
 801ca94:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801ca96:	697b      	ldr	r3, [r7, #20]
 801ca98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ca9c:	693a      	ldr	r2, [r7, #16]
 801ca9e:	429a      	cmp	r2, r3
 801caa0:	d00a      	beq.n	801cab8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801caa2:	697b      	ldr	r3, [r7, #20]
 801caa4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801caa8:	2320      	movs	r3, #32
 801caaa:	2205      	movs	r2, #5
 801caac:	68f8      	ldr	r0, [r7, #12]
 801caae:	f7ff fd50 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801cab2:	f04f 33ff 	mov.w	r3, #4294967295
 801cab6:	e019      	b.n	801caec <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cab8:	693b      	ldr	r3, [r7, #16]
 801caba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cabe:	bf28      	it	cs
 801cac0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cac4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cac6:	697b      	ldr	r3, [r7, #20]
 801cac8:	2201      	movs	r2, #1
 801caca:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cacc:	697b      	ldr	r3, [r7, #20]
 801cace:	f103 0210 	add.w	r2, r3, #16
 801cad2:	693b      	ldr	r3, [r7, #16]
 801cad4:	2101      	movs	r1, #1
 801cad6:	68f8      	ldr	r0, [r7, #12]
 801cad8:	f7fd f95a 	bl	8019d90 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cadc:	2300      	movs	r3, #0
 801cade:	e005      	b.n	801caec <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 801cae0:	7afb      	ldrb	r3, [r7, #11]
 801cae2:	4619      	mov	r1, r3
 801cae4:	68f8      	ldr	r0, [r7, #12]
 801cae6:	f000 f9b4 	bl	801ce52 <SCSI_ProcessWrite>
 801caea:	4603      	mov	r3, r0
}
 801caec:	4618      	mov	r0, r3
 801caee:	3718      	adds	r7, #24
 801caf0:	46bd      	mov	sp, r7
 801caf2:	bd80      	pop	{r7, pc}

0801caf4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b086      	sub	sp, #24
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	60f8      	str	r0, [r7, #12]
 801cafc:	460b      	mov	r3, r1
 801cafe:	607a      	str	r2, [r7, #4]
 801cb00:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cb08:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801cb0a:	697b      	ldr	r3, [r7, #20]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d102      	bne.n	801cb16 <SCSI_Write12+0x22>
  {
    return -1;
 801cb10:	f04f 33ff 	mov.w	r3, #4294967295
 801cb14:	e0bf      	b.n	801cc96 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801cb16:	697b      	ldr	r3, [r7, #20]
 801cb18:	7a1b      	ldrb	r3, [r3, #8]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	f040 80b5 	bne.w	801cc8a <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801cb20:	697b      	ldr	r3, [r7, #20]
 801cb22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d10a      	bne.n	801cb40 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cb2a:	697b      	ldr	r3, [r7, #20]
 801cb2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cb30:	2320      	movs	r3, #32
 801cb32:	2205      	movs	r2, #5
 801cb34:	68f8      	ldr	r0, [r7, #12]
 801cb36:	f7ff fd0c 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801cb3a:	f04f 33ff 	mov.w	r3, #4294967295
 801cb3e:	e0aa      	b.n	801cc96 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801cb46:	b25b      	sxtb	r3, r3
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	da0a      	bge.n	801cb62 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cb4c:	697b      	ldr	r3, [r7, #20]
 801cb4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cb52:	2320      	movs	r3, #32
 801cb54:	2205      	movs	r2, #5
 801cb56:	68f8      	ldr	r0, [r7, #12]
 801cb58:	f7ff fcfb 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801cb5c:	f04f 33ff 	mov.w	r3, #4294967295
 801cb60:	e099      	b.n	801cc96 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cb68:	689b      	ldr	r3, [r3, #8]
 801cb6a:	7afa      	ldrb	r2, [r7, #11]
 801cb6c:	4610      	mov	r0, r2
 801cb6e:	4798      	blx	r3
 801cb70:	4603      	mov	r3, r0
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d00b      	beq.n	801cb8e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801cb76:	7af9      	ldrb	r1, [r7, #11]
 801cb78:	233a      	movs	r3, #58	; 0x3a
 801cb7a:	2202      	movs	r2, #2
 801cb7c:	68f8      	ldr	r0, [r7, #12]
 801cb7e:	f7ff fce8 	bl	801c552 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cb82:	697b      	ldr	r3, [r7, #20]
 801cb84:	2205      	movs	r2, #5
 801cb86:	721a      	strb	r2, [r3, #8]
      return -1;
 801cb88:	f04f 33ff 	mov.w	r3, #4294967295
 801cb8c:	e083      	b.n	801cc96 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cb94:	68db      	ldr	r3, [r3, #12]
 801cb96:	7afa      	ldrb	r2, [r7, #11]
 801cb98:	4610      	mov	r0, r2
 801cb9a:	4798      	blx	r3
 801cb9c:	4603      	mov	r3, r0
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d00b      	beq.n	801cbba <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801cba2:	7af9      	ldrb	r1, [r7, #11]
 801cba4:	2327      	movs	r3, #39	; 0x27
 801cba6:	2202      	movs	r2, #2
 801cba8:	68f8      	ldr	r0, [r7, #12]
 801cbaa:	f7ff fcd2 	bl	801c552 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801cbae:	697b      	ldr	r3, [r7, #20]
 801cbb0:	2205      	movs	r2, #5
 801cbb2:	721a      	strb	r2, [r3, #8]
      return -1;
 801cbb4:	f04f 33ff 	mov.w	r3, #4294967295
 801cbb8:	e06d      	b.n	801cc96 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	3302      	adds	r3, #2
 801cbbe:	781b      	ldrb	r3, [r3, #0]
 801cbc0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	3303      	adds	r3, #3
 801cbc6:	781b      	ldrb	r3, [r3, #0]
 801cbc8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cbca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	3304      	adds	r3, #4
 801cbd0:	781b      	ldrb	r3, [r3, #0]
 801cbd2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801cbd4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	3205      	adds	r2, #5
 801cbda:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801cbdc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801cbde:	697b      	ldr	r3, [r7, #20]
 801cbe0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	3306      	adds	r3, #6
 801cbe8:	781b      	ldrb	r3, [r3, #0]
 801cbea:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	3307      	adds	r3, #7
 801cbf0:	781b      	ldrb	r3, [r3, #0]
 801cbf2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cbf4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	3308      	adds	r3, #8
 801cbfa:	781b      	ldrb	r3, [r3, #0]
 801cbfc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801cbfe:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801cc00:	687a      	ldr	r2, [r7, #4]
 801cc02:	3209      	adds	r2, #9
 801cc04:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801cc06:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801cc08:	697b      	ldr	r3, [r7, #20]
 801cc0a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801cc0e:	697b      	ldr	r3, [r7, #20]
 801cc10:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cc14:	697b      	ldr	r3, [r7, #20]
 801cc16:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cc1a:	7af9      	ldrb	r1, [r7, #11]
 801cc1c:	68f8      	ldr	r0, [r7, #12]
 801cc1e:	f000 f877 	bl	801cd10 <SCSI_CheckAddressRange>
 801cc22:	4603      	mov	r3, r0
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	da02      	bge.n	801cc2e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801cc28:	f04f 33ff 	mov.w	r3, #4294967295
 801cc2c:	e033      	b.n	801cc96 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cc2e:	697b      	ldr	r3, [r7, #20]
 801cc30:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cc34:	697a      	ldr	r2, [r7, #20]
 801cc36:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cc3a:	fb02 f303 	mul.w	r3, r2, r3
 801cc3e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cc40:	697b      	ldr	r3, [r7, #20]
 801cc42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cc46:	693a      	ldr	r2, [r7, #16]
 801cc48:	429a      	cmp	r2, r3
 801cc4a:	d00a      	beq.n	801cc62 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cc52:	2320      	movs	r3, #32
 801cc54:	2205      	movs	r2, #5
 801cc56:	68f8      	ldr	r0, [r7, #12]
 801cc58:	f7ff fc7b 	bl	801c552 <SCSI_SenseCode>
      return -1;
 801cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc60:	e019      	b.n	801cc96 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801cc62:	693b      	ldr	r3, [r7, #16]
 801cc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc68:	bf28      	it	cs
 801cc6a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cc6e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801cc70:	697b      	ldr	r3, [r7, #20]
 801cc72:	2201      	movs	r2, #1
 801cc74:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cc76:	697b      	ldr	r3, [r7, #20]
 801cc78:	f103 0210 	add.w	r2, r3, #16
 801cc7c:	693b      	ldr	r3, [r7, #16]
 801cc7e:	2101      	movs	r1, #1
 801cc80:	68f8      	ldr	r0, [r7, #12]
 801cc82:	f7fd f885 	bl	8019d90 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cc86:	2300      	movs	r3, #0
 801cc88:	e005      	b.n	801cc96 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801cc8a:	7afb      	ldrb	r3, [r7, #11]
 801cc8c:	4619      	mov	r1, r3
 801cc8e:	68f8      	ldr	r0, [r7, #12]
 801cc90:	f000 f8df 	bl	801ce52 <SCSI_ProcessWrite>
 801cc94:	4603      	mov	r3, r0
}
 801cc96:	4618      	mov	r0, r3
 801cc98:	3718      	adds	r7, #24
 801cc9a:	46bd      	mov	sp, r7
 801cc9c:	bd80      	pop	{r7, pc}

0801cc9e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cc9e:	b580      	push	{r7, lr}
 801cca0:	b086      	sub	sp, #24
 801cca2:	af00      	add	r7, sp, #0
 801cca4:	60f8      	str	r0, [r7, #12]
 801cca6:	460b      	mov	r3, r1
 801cca8:	607a      	str	r2, [r7, #4]
 801ccaa:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ccac:	68fb      	ldr	r3, [r7, #12]
 801ccae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ccb2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801ccb4:	697b      	ldr	r3, [r7, #20]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d102      	bne.n	801ccc0 <SCSI_Verify10+0x22>
  {
    return -1;
 801ccba:	f04f 33ff 	mov.w	r3, #4294967295
 801ccbe:	e023      	b.n	801cd08 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	3301      	adds	r3, #1
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	f003 0302 	and.w	r3, r3, #2
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d008      	beq.n	801cce0 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801ccce:	7af9      	ldrb	r1, [r7, #11]
 801ccd0:	2324      	movs	r3, #36	; 0x24
 801ccd2:	2205      	movs	r2, #5
 801ccd4:	68f8      	ldr	r0, [r7, #12]
 801ccd6:	f7ff fc3c 	bl	801c552 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801ccda:	f04f 33ff 	mov.w	r3, #4294967295
 801ccde:	e013      	b.n	801cd08 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801cce0:	697b      	ldr	r3, [r7, #20]
 801cce2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cce6:	697b      	ldr	r3, [r7, #20]
 801cce8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ccec:	7af9      	ldrb	r1, [r7, #11]
 801ccee:	68f8      	ldr	r0, [r7, #12]
 801ccf0:	f000 f80e 	bl	801cd10 <SCSI_CheckAddressRange>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	da02      	bge.n	801cd00 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 801ccfe:	e003      	b.n	801cd08 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801cd00:	697b      	ldr	r3, [r7, #20]
 801cd02:	2200      	movs	r2, #0
 801cd04:	60da      	str	r2, [r3, #12]

  return 0;
 801cd06:	2300      	movs	r3, #0
}
 801cd08:	4618      	mov	r0, r3
 801cd0a:	3718      	adds	r7, #24
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	bd80      	pop	{r7, pc}

0801cd10 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b086      	sub	sp, #24
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	60f8      	str	r0, [r7, #12]
 801cd18:	607a      	str	r2, [r7, #4]
 801cd1a:	603b      	str	r3, [r7, #0]
 801cd1c:	460b      	mov	r3, r1
 801cd1e:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cd26:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cd28:	697b      	ldr	r3, [r7, #20]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d102      	bne.n	801cd34 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801cd2e:	f04f 33ff 	mov.w	r3, #4294967295
 801cd32:	e011      	b.n	801cd58 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801cd34:	687a      	ldr	r2, [r7, #4]
 801cd36:	683b      	ldr	r3, [r7, #0]
 801cd38:	441a      	add	r2, r3
 801cd3a:	697b      	ldr	r3, [r7, #20]
 801cd3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801cd40:	429a      	cmp	r2, r3
 801cd42:	d908      	bls.n	801cd56 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801cd44:	7af9      	ldrb	r1, [r7, #11]
 801cd46:	2321      	movs	r3, #33	; 0x21
 801cd48:	2205      	movs	r2, #5
 801cd4a:	68f8      	ldr	r0, [r7, #12]
 801cd4c:	f7ff fc01 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801cd50:	f04f 33ff 	mov.w	r3, #4294967295
 801cd54:	e000      	b.n	801cd58 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 801cd56:	2300      	movs	r3, #0
}
 801cd58:	4618      	mov	r0, r3
 801cd5a:	3718      	adds	r7, #24
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bd80      	pop	{r7, pc}

0801cd60 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cd60:	b590      	push	{r4, r7, lr}
 801cd62:	b085      	sub	sp, #20
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	460b      	mov	r3, r1
 801cd6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cd72:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cd7a:	68fa      	ldr	r2, [r7, #12]
 801cd7c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cd80:	fb02 f303 	mul.w	r3, r2, r3
 801cd84:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d102      	bne.n	801cd92 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801cd8c:	f04f 33ff 	mov.w	r3, #4294967295
 801cd90:	e05b      	b.n	801ce4a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cd92:	68bb      	ldr	r3, [r7, #8]
 801cd94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd98:	bf28      	it	cs
 801cd9a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cd9e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cda6:	691c      	ldr	r4, [r3, #16]
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	f103 0110 	add.w	r1, r3, #16
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cdba:	4618      	mov	r0, r3
 801cdbc:	68bb      	ldr	r3, [r7, #8]
 801cdbe:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cdc2:	b29b      	uxth	r3, r3
 801cdc4:	78f8      	ldrb	r0, [r7, #3]
 801cdc6:	47a0      	blx	r4
 801cdc8:	4603      	mov	r3, r0
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	da08      	bge.n	801cde0 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801cdce:	78f9      	ldrb	r1, [r7, #3]
 801cdd0:	2311      	movs	r3, #17
 801cdd2:	2204      	movs	r2, #4
 801cdd4:	6878      	ldr	r0, [r7, #4]
 801cdd6:	f7ff fbbc 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801cdda:	f04f 33ff 	mov.w	r3, #4294967295
 801cdde:	e034      	b.n	801ce4a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	f103 0210 	add.w	r2, r3, #16
 801cde6:	68bb      	ldr	r3, [r7, #8]
 801cde8:	2181      	movs	r1, #129	; 0x81
 801cdea:	6878      	ldr	r0, [r7, #4]
 801cdec:	f7fc ff98 	bl	8019d20 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cdfc:	4619      	mov	r1, r3
 801cdfe:	68bb      	ldr	r3, [r7, #8]
 801ce00:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce04:	441a      	add	r2, r3
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ce18:	4619      	mov	r1, r3
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce20:	1ad2      	subs	r2, r2, r3
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801ce2e:	68bb      	ldr	r3, [r7, #8]
 801ce30:	1ad2      	subs	r2, r2, r3
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d102      	bne.n	801ce48 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	2203      	movs	r2, #3
 801ce46:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801ce48:	2300      	movs	r3, #0
}
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	3714      	adds	r7, #20
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	bd90      	pop	{r4, r7, pc}

0801ce52 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801ce52:	b590      	push	{r4, r7, lr}
 801ce54:	b085      	sub	sp, #20
 801ce56:	af00      	add	r7, sp, #0
 801ce58:	6078      	str	r0, [r7, #4]
 801ce5a:	460b      	mov	r3, r1
 801ce5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ce64:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ce6c:	68fa      	ldr	r2, [r7, #12]
 801ce6e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ce72:	fb02 f303 	mul.w	r3, r2, r3
 801ce76:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d102      	bne.n	801ce84 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801ce7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce82:	e06b      	b.n	801cf5c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801ce84:	68bb      	ldr	r3, [r7, #8]
 801ce86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce8a:	bf28      	it	cs
 801ce8c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801ce90:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ce98:	695c      	ldr	r4, [r3, #20]
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	f103 0110 	add.w	r1, r3, #16
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801ceac:	4618      	mov	r0, r3
 801ceae:	68bb      	ldr	r3, [r7, #8]
 801ceb0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801ceb4:	b29b      	uxth	r3, r3
 801ceb6:	78f8      	ldrb	r0, [r7, #3]
 801ceb8:	47a0      	blx	r4
 801ceba:	4603      	mov	r3, r0
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	da08      	bge.n	801ced2 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801cec0:	78f9      	ldrb	r1, [r7, #3]
 801cec2:	2303      	movs	r3, #3
 801cec4:	2204      	movs	r2, #4
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	f7ff fb43 	bl	801c552 <SCSI_SenseCode>
    return -1;
 801cecc:	f04f 33ff 	mov.w	r3, #4294967295
 801ced0:	e044      	b.n	801cf5c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cede:	4619      	mov	r1, r3
 801cee0:	68bb      	ldr	r3, [r7, #8]
 801cee2:	fbb3 f3f1 	udiv	r3, r3, r1
 801cee6:	441a      	add	r2, r3
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cefa:	4619      	mov	r1, r3
 801cefc:	68bb      	ldr	r3, [r7, #8]
 801cefe:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf02:	1ad2      	subs	r2, r2, r3
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801cf10:	68bb      	ldr	r3, [r7, #8]
 801cf12:	1ad2      	subs	r2, r2, r3
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d104      	bne.n	801cf2e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801cf24:	2100      	movs	r1, #0
 801cf26:	6878      	ldr	r0, [r7, #4]
 801cf28:	f7fe fdd8 	bl	801badc <MSC_BOT_SendCSW>
 801cf2c:	e015      	b.n	801cf5a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cf34:	68fa      	ldr	r2, [r7, #12]
 801cf36:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cf3a:	fb02 f303 	mul.w	r3, r2, r3
 801cf3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf42:	bf28      	it	cs
 801cf44:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cf48:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	f103 0210 	add.w	r2, r3, #16
 801cf50:	68bb      	ldr	r3, [r7, #8]
 801cf52:	2101      	movs	r1, #1
 801cf54:	6878      	ldr	r0, [r7, #4]
 801cf56:	f7fc ff1b 	bl	8019d90 <USBD_LL_PrepareReceive>
  }

  return 0;
 801cf5a:	2300      	movs	r3, #0
}
 801cf5c:	4618      	mov	r0, r3
 801cf5e:	3714      	adds	r7, #20
 801cf60:	46bd      	mov	sp, r7
 801cf62:	bd90      	pop	{r4, r7, pc}

0801cf64 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_CDCMSC_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801cf64:	b480      	push	{r7}
 801cf66:	b087      	sub	sp, #28
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	60f8      	str	r0, [r7, #12]
 801cf6c:	60b9      	str	r1, [r7, #8]
 801cf6e:	4613      	mov	r3, r2
 801cf70:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801cf72:	88fb      	ldrh	r3, [r7, #6]
 801cf74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d102      	bne.n	801cf82 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801cf7c:	f04f 33ff 	mov.w	r3, #4294967295
 801cf80:	e013      	b.n	801cfaa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801cf82:	8afa      	ldrh	r2, [r7, #22]
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801cf88:	e00b      	b.n	801cfa2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801cf8a:	8afb      	ldrh	r3, [r7, #22]
 801cf8c:	3b01      	subs	r3, #1
 801cf8e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801cf90:	8afb      	ldrh	r3, [r7, #22]
 801cf92:	68ba      	ldr	r2, [r7, #8]
 801cf94:	441a      	add	r2, r3
 801cf96:	8afb      	ldrh	r3, [r7, #22]
 801cf98:	7811      	ldrb	r1, [r2, #0]
 801cf9a:	68fa      	ldr	r2, [r7, #12]
 801cf9c:	4413      	add	r3, r2
 801cf9e:	460a      	mov	r2, r1
 801cfa0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801cfa2:	8afb      	ldrh	r3, [r7, #22]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d1f0      	bne.n	801cf8a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801cfa8:	2300      	movs	r3, #0
}
 801cfaa:	4618      	mov	r0, r3
 801cfac:	371c      	adds	r7, #28
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb4:	4770      	bx	lr

0801cfb6 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801cfb6:	b480      	push	{r7}
 801cfb8:	b083      	sub	sp, #12
 801cfba:	af00      	add	r7, sp, #0
 801cfbc:	4603      	mov	r3, r0
 801cfbe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801cfc0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	370c      	adds	r7, #12
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfcc:	4770      	bx	lr

0801cfce <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801cfce:	b480      	push	{r7}
 801cfd0:	b085      	sub	sp, #20
 801cfd2:	af00      	add	r7, sp, #0
 801cfd4:	4603      	mov	r3, r0
 801cfd6:	60b9      	str	r1, [r7, #8]
 801cfd8:	607a      	str	r2, [r7, #4]
 801cfda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801cfdc:	68bb      	ldr	r3, [r7, #8]
 801cfde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801cfe2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cfea:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801cfec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cfee:	4618      	mov	r0, r3
 801cff0:	3714      	adds	r7, #20
 801cff2:	46bd      	mov	sp, r7
 801cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cff8:	4770      	bx	lr

0801cffa <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801cffa:	b480      	push	{r7}
 801cffc:	b083      	sub	sp, #12
 801cffe:	af00      	add	r7, sp, #0
 801d000:	4603      	mov	r3, r0
 801d002:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d004:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d006:	4618      	mov	r0, r3
 801d008:	370c      	adds	r7, #12
 801d00a:	46bd      	mov	sp, r7
 801d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d010:	4770      	bx	lr

0801d012 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d012:	b480      	push	{r7}
 801d014:	b083      	sub	sp, #12
 801d016:	af00      	add	r7, sp, #0
 801d018:	4603      	mov	r3, r0
 801d01a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801d01c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d01e:	4618      	mov	r0, r3
 801d020:	370c      	adds	r7, #12
 801d022:	46bd      	mov	sp, r7
 801d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d028:	4770      	bx	lr

0801d02a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d02a:	b580      	push	{r7, lr}
 801d02c:	b086      	sub	sp, #24
 801d02e:	af00      	add	r7, sp, #0
 801d030:	60b9      	str	r1, [r7, #8]
 801d032:	607a      	str	r2, [r7, #4]
 801d034:	461a      	mov	r2, r3
 801d036:	4603      	mov	r3, r0
 801d038:	73fb      	strb	r3, [r7, #15]
 801d03a:	4613      	mov	r3, r2
 801d03c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	uint16_t block_cntr=0;
 801d03e:	2300      	movs	r3, #0
 801d040:	82fb      	strh	r3, [r7, #22]
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d042:	2300      	movs	r3, #0
 801d044:	82fb      	strh	r3, [r7, #22]
 801d046:	e00f      	b.n	801d068 <STORAGE_Read_FS+0x3e>
				W25_ReadBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801d048:	8afb      	ldrh	r3, [r7, #22]
 801d04a:	025b      	lsls	r3, r3, #9
 801d04c:	461a      	mov	r2, r3
 801d04e:	68bb      	ldr	r3, [r7, #8]
 801d050:	1898      	adds	r0, r3, r2
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	b29a      	uxth	r2, r3
 801d056:	8afb      	ldrh	r3, [r7, #22]
 801d058:	4413      	add	r3, r2
 801d05a:	b29b      	uxth	r3, r3
 801d05c:	4619      	mov	r1, r3
 801d05e:	f7e7 fb89 	bl	8004774 <W25_ReadBuf>
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d062:	8afb      	ldrh	r3, [r7, #22]
 801d064:	3301      	adds	r3, #1
 801d066:	82fb      	strh	r3, [r7, #22]
 801d068:	8afa      	ldrh	r2, [r7, #22]
 801d06a:	89bb      	ldrh	r3, [r7, #12]
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d3eb      	bcc.n	801d048 <STORAGE_Read_FS+0x1e>
	  return (USBD_OK);
 801d070:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d072:	4618      	mov	r0, r3
 801d074:	3718      	adds	r7, #24
 801d076:	46bd      	mov	sp, r7
 801d078:	bd80      	pop	{r7, pc}

0801d07a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d07a:	b580      	push	{r7, lr}
 801d07c:	b086      	sub	sp, #24
 801d07e:	af00      	add	r7, sp, #0
 801d080:	60b9      	str	r1, [r7, #8]
 801d082:	607a      	str	r2, [r7, #4]
 801d084:	461a      	mov	r2, r3
 801d086:	4603      	mov	r3, r0
 801d088:	73fb      	strb	r3, [r7, #15]
 801d08a:	4613      	mov	r3, r2
 801d08c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint16_t block_cntr=0;
 801d08e:	2300      	movs	r3, #0
 801d090:	82fb      	strh	r3, [r7, #22]
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d092:	2300      	movs	r3, #0
 801d094:	82fb      	strh	r3, [r7, #22]
 801d096:	e00f      	b.n	801d0b8 <STORAGE_Write_FS+0x3e>
					W25_WriteBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801d098:	8afb      	ldrh	r3, [r7, #22]
 801d09a:	025b      	lsls	r3, r3, #9
 801d09c:	461a      	mov	r2, r3
 801d09e:	68bb      	ldr	r3, [r7, #8]
 801d0a0:	1898      	adds	r0, r3, r2
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	b29a      	uxth	r2, r3
 801d0a6:	8afb      	ldrh	r3, [r7, #22]
 801d0a8:	4413      	add	r3, r2
 801d0aa:	b29b      	uxth	r3, r3
 801d0ac:	4619      	mov	r1, r3
 801d0ae:	f7e7 fbd1 	bl	8004854 <W25_WriteBuf>
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801d0b2:	8afb      	ldrh	r3, [r7, #22]
 801d0b4:	3301      	adds	r3, #1
 801d0b6:	82fb      	strh	r3, [r7, #22]
 801d0b8:	8afa      	ldrh	r2, [r7, #22]
 801d0ba:	89bb      	ldrh	r3, [r7, #12]
 801d0bc:	429a      	cmp	r2, r3
 801d0be:	d3eb      	bcc.n	801d098 <STORAGE_Write_FS+0x1e>
	  return (USBD_OK);
 801d0c0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3718      	adds	r7, #24
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}

0801d0ca <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d0ca:	b480      	push	{r7}
 801d0cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d0ce:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d8:	4770      	bx	lr
	...

0801d0dc <__errno>:
 801d0dc:	4b01      	ldr	r3, [pc, #4]	; (801d0e4 <__errno+0x8>)
 801d0de:	6818      	ldr	r0, [r3, #0]
 801d0e0:	4770      	bx	lr
 801d0e2:	bf00      	nop
 801d0e4:	200006e4 	.word	0x200006e4

0801d0e8 <__libc_init_array>:
 801d0e8:	b570      	push	{r4, r5, r6, lr}
 801d0ea:	4d0d      	ldr	r5, [pc, #52]	; (801d120 <__libc_init_array+0x38>)
 801d0ec:	4c0d      	ldr	r4, [pc, #52]	; (801d124 <__libc_init_array+0x3c>)
 801d0ee:	1b64      	subs	r4, r4, r5
 801d0f0:	10a4      	asrs	r4, r4, #2
 801d0f2:	2600      	movs	r6, #0
 801d0f4:	42a6      	cmp	r6, r4
 801d0f6:	d109      	bne.n	801d10c <__libc_init_array+0x24>
 801d0f8:	4d0b      	ldr	r5, [pc, #44]	; (801d128 <__libc_init_array+0x40>)
 801d0fa:	4c0c      	ldr	r4, [pc, #48]	; (801d12c <__libc_init_array+0x44>)
 801d0fc:	f004 fd40 	bl	8021b80 <_init>
 801d100:	1b64      	subs	r4, r4, r5
 801d102:	10a4      	asrs	r4, r4, #2
 801d104:	2600      	movs	r6, #0
 801d106:	42a6      	cmp	r6, r4
 801d108:	d105      	bne.n	801d116 <__libc_init_array+0x2e>
 801d10a:	bd70      	pop	{r4, r5, r6, pc}
 801d10c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d110:	4798      	blx	r3
 801d112:	3601      	adds	r6, #1
 801d114:	e7ee      	b.n	801d0f4 <__libc_init_array+0xc>
 801d116:	f855 3b04 	ldr.w	r3, [r5], #4
 801d11a:	4798      	blx	r3
 801d11c:	3601      	adds	r6, #1
 801d11e:	e7f2      	b.n	801d106 <__libc_init_array+0x1e>
 801d120:	0802b9dc 	.word	0x0802b9dc
 801d124:	0802b9dc 	.word	0x0802b9dc
 801d128:	0802b9dc 	.word	0x0802b9dc
 801d12c:	0802b9e0 	.word	0x0802b9e0

0801d130 <memset>:
 801d130:	4402      	add	r2, r0
 801d132:	4603      	mov	r3, r0
 801d134:	4293      	cmp	r3, r2
 801d136:	d100      	bne.n	801d13a <memset+0xa>
 801d138:	4770      	bx	lr
 801d13a:	f803 1b01 	strb.w	r1, [r3], #1
 801d13e:	e7f9      	b.n	801d134 <memset+0x4>

0801d140 <__cvt>:
 801d140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d144:	ec55 4b10 	vmov	r4, r5, d0
 801d148:	2d00      	cmp	r5, #0
 801d14a:	460e      	mov	r6, r1
 801d14c:	4619      	mov	r1, r3
 801d14e:	462b      	mov	r3, r5
 801d150:	bfbb      	ittet	lt
 801d152:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d156:	461d      	movlt	r5, r3
 801d158:	2300      	movge	r3, #0
 801d15a:	232d      	movlt	r3, #45	; 0x2d
 801d15c:	700b      	strb	r3, [r1, #0]
 801d15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d160:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d164:	4691      	mov	r9, r2
 801d166:	f023 0820 	bic.w	r8, r3, #32
 801d16a:	bfbc      	itt	lt
 801d16c:	4622      	movlt	r2, r4
 801d16e:	4614      	movlt	r4, r2
 801d170:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d174:	d005      	beq.n	801d182 <__cvt+0x42>
 801d176:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d17a:	d100      	bne.n	801d17e <__cvt+0x3e>
 801d17c:	3601      	adds	r6, #1
 801d17e:	2102      	movs	r1, #2
 801d180:	e000      	b.n	801d184 <__cvt+0x44>
 801d182:	2103      	movs	r1, #3
 801d184:	ab03      	add	r3, sp, #12
 801d186:	9301      	str	r3, [sp, #4]
 801d188:	ab02      	add	r3, sp, #8
 801d18a:	9300      	str	r3, [sp, #0]
 801d18c:	ec45 4b10 	vmov	d0, r4, r5
 801d190:	4653      	mov	r3, sl
 801d192:	4632      	mov	r2, r6
 801d194:	f001 fdc8 	bl	801ed28 <_dtoa_r>
 801d198:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d19c:	4607      	mov	r7, r0
 801d19e:	d102      	bne.n	801d1a6 <__cvt+0x66>
 801d1a0:	f019 0f01 	tst.w	r9, #1
 801d1a4:	d022      	beq.n	801d1ec <__cvt+0xac>
 801d1a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d1aa:	eb07 0906 	add.w	r9, r7, r6
 801d1ae:	d110      	bne.n	801d1d2 <__cvt+0x92>
 801d1b0:	783b      	ldrb	r3, [r7, #0]
 801d1b2:	2b30      	cmp	r3, #48	; 0x30
 801d1b4:	d10a      	bne.n	801d1cc <__cvt+0x8c>
 801d1b6:	2200      	movs	r2, #0
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	4620      	mov	r0, r4
 801d1bc:	4629      	mov	r1, r5
 801d1be:	f7e3 fc93 	bl	8000ae8 <__aeabi_dcmpeq>
 801d1c2:	b918      	cbnz	r0, 801d1cc <__cvt+0x8c>
 801d1c4:	f1c6 0601 	rsb	r6, r6, #1
 801d1c8:	f8ca 6000 	str.w	r6, [sl]
 801d1cc:	f8da 3000 	ldr.w	r3, [sl]
 801d1d0:	4499      	add	r9, r3
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	4620      	mov	r0, r4
 801d1d8:	4629      	mov	r1, r5
 801d1da:	f7e3 fc85 	bl	8000ae8 <__aeabi_dcmpeq>
 801d1de:	b108      	cbz	r0, 801d1e4 <__cvt+0xa4>
 801d1e0:	f8cd 900c 	str.w	r9, [sp, #12]
 801d1e4:	2230      	movs	r2, #48	; 0x30
 801d1e6:	9b03      	ldr	r3, [sp, #12]
 801d1e8:	454b      	cmp	r3, r9
 801d1ea:	d307      	bcc.n	801d1fc <__cvt+0xbc>
 801d1ec:	9b03      	ldr	r3, [sp, #12]
 801d1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d1f0:	1bdb      	subs	r3, r3, r7
 801d1f2:	4638      	mov	r0, r7
 801d1f4:	6013      	str	r3, [r2, #0]
 801d1f6:	b004      	add	sp, #16
 801d1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1fc:	1c59      	adds	r1, r3, #1
 801d1fe:	9103      	str	r1, [sp, #12]
 801d200:	701a      	strb	r2, [r3, #0]
 801d202:	e7f0      	b.n	801d1e6 <__cvt+0xa6>

0801d204 <__exponent>:
 801d204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d206:	4603      	mov	r3, r0
 801d208:	2900      	cmp	r1, #0
 801d20a:	bfb8      	it	lt
 801d20c:	4249      	neglt	r1, r1
 801d20e:	f803 2b02 	strb.w	r2, [r3], #2
 801d212:	bfb4      	ite	lt
 801d214:	222d      	movlt	r2, #45	; 0x2d
 801d216:	222b      	movge	r2, #43	; 0x2b
 801d218:	2909      	cmp	r1, #9
 801d21a:	7042      	strb	r2, [r0, #1]
 801d21c:	dd2a      	ble.n	801d274 <__exponent+0x70>
 801d21e:	f10d 0407 	add.w	r4, sp, #7
 801d222:	46a4      	mov	ip, r4
 801d224:	270a      	movs	r7, #10
 801d226:	46a6      	mov	lr, r4
 801d228:	460a      	mov	r2, r1
 801d22a:	fb91 f6f7 	sdiv	r6, r1, r7
 801d22e:	fb07 1516 	mls	r5, r7, r6, r1
 801d232:	3530      	adds	r5, #48	; 0x30
 801d234:	2a63      	cmp	r2, #99	; 0x63
 801d236:	f104 34ff 	add.w	r4, r4, #4294967295
 801d23a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d23e:	4631      	mov	r1, r6
 801d240:	dcf1      	bgt.n	801d226 <__exponent+0x22>
 801d242:	3130      	adds	r1, #48	; 0x30
 801d244:	f1ae 0502 	sub.w	r5, lr, #2
 801d248:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d24c:	1c44      	adds	r4, r0, #1
 801d24e:	4629      	mov	r1, r5
 801d250:	4561      	cmp	r1, ip
 801d252:	d30a      	bcc.n	801d26a <__exponent+0x66>
 801d254:	f10d 0209 	add.w	r2, sp, #9
 801d258:	eba2 020e 	sub.w	r2, r2, lr
 801d25c:	4565      	cmp	r5, ip
 801d25e:	bf88      	it	hi
 801d260:	2200      	movhi	r2, #0
 801d262:	4413      	add	r3, r2
 801d264:	1a18      	subs	r0, r3, r0
 801d266:	b003      	add	sp, #12
 801d268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d26a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d26e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d272:	e7ed      	b.n	801d250 <__exponent+0x4c>
 801d274:	2330      	movs	r3, #48	; 0x30
 801d276:	3130      	adds	r1, #48	; 0x30
 801d278:	7083      	strb	r3, [r0, #2]
 801d27a:	70c1      	strb	r1, [r0, #3]
 801d27c:	1d03      	adds	r3, r0, #4
 801d27e:	e7f1      	b.n	801d264 <__exponent+0x60>

0801d280 <_printf_float>:
 801d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d284:	ed2d 8b02 	vpush	{d8}
 801d288:	b08d      	sub	sp, #52	; 0x34
 801d28a:	460c      	mov	r4, r1
 801d28c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d290:	4616      	mov	r6, r2
 801d292:	461f      	mov	r7, r3
 801d294:	4605      	mov	r5, r0
 801d296:	f002 ff97 	bl	80201c8 <_localeconv_r>
 801d29a:	f8d0 a000 	ldr.w	sl, [r0]
 801d29e:	4650      	mov	r0, sl
 801d2a0:	f7e2 ffa6 	bl	80001f0 <strlen>
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	930a      	str	r3, [sp, #40]	; 0x28
 801d2a8:	6823      	ldr	r3, [r4, #0]
 801d2aa:	9305      	str	r3, [sp, #20]
 801d2ac:	f8d8 3000 	ldr.w	r3, [r8]
 801d2b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d2b4:	3307      	adds	r3, #7
 801d2b6:	f023 0307 	bic.w	r3, r3, #7
 801d2ba:	f103 0208 	add.w	r2, r3, #8
 801d2be:	f8c8 2000 	str.w	r2, [r8]
 801d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d2ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d2ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d2d2:	9307      	str	r3, [sp, #28]
 801d2d4:	f8cd 8018 	str.w	r8, [sp, #24]
 801d2d8:	ee08 0a10 	vmov	s16, r0
 801d2dc:	4b9f      	ldr	r3, [pc, #636]	; (801d55c <_printf_float+0x2dc>)
 801d2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d2e2:	f04f 32ff 	mov.w	r2, #4294967295
 801d2e6:	f7e3 fc31 	bl	8000b4c <__aeabi_dcmpun>
 801d2ea:	bb88      	cbnz	r0, 801d350 <_printf_float+0xd0>
 801d2ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d2f0:	4b9a      	ldr	r3, [pc, #616]	; (801d55c <_printf_float+0x2dc>)
 801d2f2:	f04f 32ff 	mov.w	r2, #4294967295
 801d2f6:	f7e3 fc0b 	bl	8000b10 <__aeabi_dcmple>
 801d2fa:	bb48      	cbnz	r0, 801d350 <_printf_float+0xd0>
 801d2fc:	2200      	movs	r2, #0
 801d2fe:	2300      	movs	r3, #0
 801d300:	4640      	mov	r0, r8
 801d302:	4649      	mov	r1, r9
 801d304:	f7e3 fbfa 	bl	8000afc <__aeabi_dcmplt>
 801d308:	b110      	cbz	r0, 801d310 <_printf_float+0x90>
 801d30a:	232d      	movs	r3, #45	; 0x2d
 801d30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d310:	4b93      	ldr	r3, [pc, #588]	; (801d560 <_printf_float+0x2e0>)
 801d312:	4894      	ldr	r0, [pc, #592]	; (801d564 <_printf_float+0x2e4>)
 801d314:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d318:	bf94      	ite	ls
 801d31a:	4698      	movls	r8, r3
 801d31c:	4680      	movhi	r8, r0
 801d31e:	2303      	movs	r3, #3
 801d320:	6123      	str	r3, [r4, #16]
 801d322:	9b05      	ldr	r3, [sp, #20]
 801d324:	f023 0204 	bic.w	r2, r3, #4
 801d328:	6022      	str	r2, [r4, #0]
 801d32a:	f04f 0900 	mov.w	r9, #0
 801d32e:	9700      	str	r7, [sp, #0]
 801d330:	4633      	mov	r3, r6
 801d332:	aa0b      	add	r2, sp, #44	; 0x2c
 801d334:	4621      	mov	r1, r4
 801d336:	4628      	mov	r0, r5
 801d338:	f000 f9d8 	bl	801d6ec <_printf_common>
 801d33c:	3001      	adds	r0, #1
 801d33e:	f040 8090 	bne.w	801d462 <_printf_float+0x1e2>
 801d342:	f04f 30ff 	mov.w	r0, #4294967295
 801d346:	b00d      	add	sp, #52	; 0x34
 801d348:	ecbd 8b02 	vpop	{d8}
 801d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d350:	4642      	mov	r2, r8
 801d352:	464b      	mov	r3, r9
 801d354:	4640      	mov	r0, r8
 801d356:	4649      	mov	r1, r9
 801d358:	f7e3 fbf8 	bl	8000b4c <__aeabi_dcmpun>
 801d35c:	b140      	cbz	r0, 801d370 <_printf_float+0xf0>
 801d35e:	464b      	mov	r3, r9
 801d360:	2b00      	cmp	r3, #0
 801d362:	bfbc      	itt	lt
 801d364:	232d      	movlt	r3, #45	; 0x2d
 801d366:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d36a:	487f      	ldr	r0, [pc, #508]	; (801d568 <_printf_float+0x2e8>)
 801d36c:	4b7f      	ldr	r3, [pc, #508]	; (801d56c <_printf_float+0x2ec>)
 801d36e:	e7d1      	b.n	801d314 <_printf_float+0x94>
 801d370:	6863      	ldr	r3, [r4, #4]
 801d372:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d376:	9206      	str	r2, [sp, #24]
 801d378:	1c5a      	adds	r2, r3, #1
 801d37a:	d13f      	bne.n	801d3fc <_printf_float+0x17c>
 801d37c:	2306      	movs	r3, #6
 801d37e:	6063      	str	r3, [r4, #4]
 801d380:	9b05      	ldr	r3, [sp, #20]
 801d382:	6861      	ldr	r1, [r4, #4]
 801d384:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d388:	2300      	movs	r3, #0
 801d38a:	9303      	str	r3, [sp, #12]
 801d38c:	ab0a      	add	r3, sp, #40	; 0x28
 801d38e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d392:	ab09      	add	r3, sp, #36	; 0x24
 801d394:	ec49 8b10 	vmov	d0, r8, r9
 801d398:	9300      	str	r3, [sp, #0]
 801d39a:	6022      	str	r2, [r4, #0]
 801d39c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d3a0:	4628      	mov	r0, r5
 801d3a2:	f7ff fecd 	bl	801d140 <__cvt>
 801d3a6:	9b06      	ldr	r3, [sp, #24]
 801d3a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d3aa:	2b47      	cmp	r3, #71	; 0x47
 801d3ac:	4680      	mov	r8, r0
 801d3ae:	d108      	bne.n	801d3c2 <_printf_float+0x142>
 801d3b0:	1cc8      	adds	r0, r1, #3
 801d3b2:	db02      	blt.n	801d3ba <_printf_float+0x13a>
 801d3b4:	6863      	ldr	r3, [r4, #4]
 801d3b6:	4299      	cmp	r1, r3
 801d3b8:	dd41      	ble.n	801d43e <_printf_float+0x1be>
 801d3ba:	f1ab 0b02 	sub.w	fp, fp, #2
 801d3be:	fa5f fb8b 	uxtb.w	fp, fp
 801d3c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d3c6:	d820      	bhi.n	801d40a <_printf_float+0x18a>
 801d3c8:	3901      	subs	r1, #1
 801d3ca:	465a      	mov	r2, fp
 801d3cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d3d0:	9109      	str	r1, [sp, #36]	; 0x24
 801d3d2:	f7ff ff17 	bl	801d204 <__exponent>
 801d3d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3d8:	1813      	adds	r3, r2, r0
 801d3da:	2a01      	cmp	r2, #1
 801d3dc:	4681      	mov	r9, r0
 801d3de:	6123      	str	r3, [r4, #16]
 801d3e0:	dc02      	bgt.n	801d3e8 <_printf_float+0x168>
 801d3e2:	6822      	ldr	r2, [r4, #0]
 801d3e4:	07d2      	lsls	r2, r2, #31
 801d3e6:	d501      	bpl.n	801d3ec <_printf_float+0x16c>
 801d3e8:	3301      	adds	r3, #1
 801d3ea:	6123      	str	r3, [r4, #16]
 801d3ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d09c      	beq.n	801d32e <_printf_float+0xae>
 801d3f4:	232d      	movs	r3, #45	; 0x2d
 801d3f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d3fa:	e798      	b.n	801d32e <_printf_float+0xae>
 801d3fc:	9a06      	ldr	r2, [sp, #24]
 801d3fe:	2a47      	cmp	r2, #71	; 0x47
 801d400:	d1be      	bne.n	801d380 <_printf_float+0x100>
 801d402:	2b00      	cmp	r3, #0
 801d404:	d1bc      	bne.n	801d380 <_printf_float+0x100>
 801d406:	2301      	movs	r3, #1
 801d408:	e7b9      	b.n	801d37e <_printf_float+0xfe>
 801d40a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d40e:	d118      	bne.n	801d442 <_printf_float+0x1c2>
 801d410:	2900      	cmp	r1, #0
 801d412:	6863      	ldr	r3, [r4, #4]
 801d414:	dd0b      	ble.n	801d42e <_printf_float+0x1ae>
 801d416:	6121      	str	r1, [r4, #16]
 801d418:	b913      	cbnz	r3, 801d420 <_printf_float+0x1a0>
 801d41a:	6822      	ldr	r2, [r4, #0]
 801d41c:	07d0      	lsls	r0, r2, #31
 801d41e:	d502      	bpl.n	801d426 <_printf_float+0x1a6>
 801d420:	3301      	adds	r3, #1
 801d422:	440b      	add	r3, r1
 801d424:	6123      	str	r3, [r4, #16]
 801d426:	65a1      	str	r1, [r4, #88]	; 0x58
 801d428:	f04f 0900 	mov.w	r9, #0
 801d42c:	e7de      	b.n	801d3ec <_printf_float+0x16c>
 801d42e:	b913      	cbnz	r3, 801d436 <_printf_float+0x1b6>
 801d430:	6822      	ldr	r2, [r4, #0]
 801d432:	07d2      	lsls	r2, r2, #31
 801d434:	d501      	bpl.n	801d43a <_printf_float+0x1ba>
 801d436:	3302      	adds	r3, #2
 801d438:	e7f4      	b.n	801d424 <_printf_float+0x1a4>
 801d43a:	2301      	movs	r3, #1
 801d43c:	e7f2      	b.n	801d424 <_printf_float+0x1a4>
 801d43e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d444:	4299      	cmp	r1, r3
 801d446:	db05      	blt.n	801d454 <_printf_float+0x1d4>
 801d448:	6823      	ldr	r3, [r4, #0]
 801d44a:	6121      	str	r1, [r4, #16]
 801d44c:	07d8      	lsls	r0, r3, #31
 801d44e:	d5ea      	bpl.n	801d426 <_printf_float+0x1a6>
 801d450:	1c4b      	adds	r3, r1, #1
 801d452:	e7e7      	b.n	801d424 <_printf_float+0x1a4>
 801d454:	2900      	cmp	r1, #0
 801d456:	bfd4      	ite	le
 801d458:	f1c1 0202 	rsble	r2, r1, #2
 801d45c:	2201      	movgt	r2, #1
 801d45e:	4413      	add	r3, r2
 801d460:	e7e0      	b.n	801d424 <_printf_float+0x1a4>
 801d462:	6823      	ldr	r3, [r4, #0]
 801d464:	055a      	lsls	r2, r3, #21
 801d466:	d407      	bmi.n	801d478 <_printf_float+0x1f8>
 801d468:	6923      	ldr	r3, [r4, #16]
 801d46a:	4642      	mov	r2, r8
 801d46c:	4631      	mov	r1, r6
 801d46e:	4628      	mov	r0, r5
 801d470:	47b8      	blx	r7
 801d472:	3001      	adds	r0, #1
 801d474:	d12c      	bne.n	801d4d0 <_printf_float+0x250>
 801d476:	e764      	b.n	801d342 <_printf_float+0xc2>
 801d478:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d47c:	f240 80e0 	bls.w	801d640 <_printf_float+0x3c0>
 801d480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d484:	2200      	movs	r2, #0
 801d486:	2300      	movs	r3, #0
 801d488:	f7e3 fb2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801d48c:	2800      	cmp	r0, #0
 801d48e:	d034      	beq.n	801d4fa <_printf_float+0x27a>
 801d490:	4a37      	ldr	r2, [pc, #220]	; (801d570 <_printf_float+0x2f0>)
 801d492:	2301      	movs	r3, #1
 801d494:	4631      	mov	r1, r6
 801d496:	4628      	mov	r0, r5
 801d498:	47b8      	blx	r7
 801d49a:	3001      	adds	r0, #1
 801d49c:	f43f af51 	beq.w	801d342 <_printf_float+0xc2>
 801d4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d4a4:	429a      	cmp	r2, r3
 801d4a6:	db02      	blt.n	801d4ae <_printf_float+0x22e>
 801d4a8:	6823      	ldr	r3, [r4, #0]
 801d4aa:	07d8      	lsls	r0, r3, #31
 801d4ac:	d510      	bpl.n	801d4d0 <_printf_float+0x250>
 801d4ae:	ee18 3a10 	vmov	r3, s16
 801d4b2:	4652      	mov	r2, sl
 801d4b4:	4631      	mov	r1, r6
 801d4b6:	4628      	mov	r0, r5
 801d4b8:	47b8      	blx	r7
 801d4ba:	3001      	adds	r0, #1
 801d4bc:	f43f af41 	beq.w	801d342 <_printf_float+0xc2>
 801d4c0:	f04f 0800 	mov.w	r8, #0
 801d4c4:	f104 091a 	add.w	r9, r4, #26
 801d4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4ca:	3b01      	subs	r3, #1
 801d4cc:	4543      	cmp	r3, r8
 801d4ce:	dc09      	bgt.n	801d4e4 <_printf_float+0x264>
 801d4d0:	6823      	ldr	r3, [r4, #0]
 801d4d2:	079b      	lsls	r3, r3, #30
 801d4d4:	f100 8105 	bmi.w	801d6e2 <_printf_float+0x462>
 801d4d8:	68e0      	ldr	r0, [r4, #12]
 801d4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4dc:	4298      	cmp	r0, r3
 801d4de:	bfb8      	it	lt
 801d4e0:	4618      	movlt	r0, r3
 801d4e2:	e730      	b.n	801d346 <_printf_float+0xc6>
 801d4e4:	2301      	movs	r3, #1
 801d4e6:	464a      	mov	r2, r9
 801d4e8:	4631      	mov	r1, r6
 801d4ea:	4628      	mov	r0, r5
 801d4ec:	47b8      	blx	r7
 801d4ee:	3001      	adds	r0, #1
 801d4f0:	f43f af27 	beq.w	801d342 <_printf_float+0xc2>
 801d4f4:	f108 0801 	add.w	r8, r8, #1
 801d4f8:	e7e6      	b.n	801d4c8 <_printf_float+0x248>
 801d4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	dc39      	bgt.n	801d574 <_printf_float+0x2f4>
 801d500:	4a1b      	ldr	r2, [pc, #108]	; (801d570 <_printf_float+0x2f0>)
 801d502:	2301      	movs	r3, #1
 801d504:	4631      	mov	r1, r6
 801d506:	4628      	mov	r0, r5
 801d508:	47b8      	blx	r7
 801d50a:	3001      	adds	r0, #1
 801d50c:	f43f af19 	beq.w	801d342 <_printf_float+0xc2>
 801d510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d514:	4313      	orrs	r3, r2
 801d516:	d102      	bne.n	801d51e <_printf_float+0x29e>
 801d518:	6823      	ldr	r3, [r4, #0]
 801d51a:	07d9      	lsls	r1, r3, #31
 801d51c:	d5d8      	bpl.n	801d4d0 <_printf_float+0x250>
 801d51e:	ee18 3a10 	vmov	r3, s16
 801d522:	4652      	mov	r2, sl
 801d524:	4631      	mov	r1, r6
 801d526:	4628      	mov	r0, r5
 801d528:	47b8      	blx	r7
 801d52a:	3001      	adds	r0, #1
 801d52c:	f43f af09 	beq.w	801d342 <_printf_float+0xc2>
 801d530:	f04f 0900 	mov.w	r9, #0
 801d534:	f104 0a1a 	add.w	sl, r4, #26
 801d538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d53a:	425b      	negs	r3, r3
 801d53c:	454b      	cmp	r3, r9
 801d53e:	dc01      	bgt.n	801d544 <_printf_float+0x2c4>
 801d540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d542:	e792      	b.n	801d46a <_printf_float+0x1ea>
 801d544:	2301      	movs	r3, #1
 801d546:	4652      	mov	r2, sl
 801d548:	4631      	mov	r1, r6
 801d54a:	4628      	mov	r0, r5
 801d54c:	47b8      	blx	r7
 801d54e:	3001      	adds	r0, #1
 801d550:	f43f aef7 	beq.w	801d342 <_printf_float+0xc2>
 801d554:	f109 0901 	add.w	r9, r9, #1
 801d558:	e7ee      	b.n	801d538 <_printf_float+0x2b8>
 801d55a:	bf00      	nop
 801d55c:	7fefffff 	.word	0x7fefffff
 801d560:	0802b524 	.word	0x0802b524
 801d564:	0802b528 	.word	0x0802b528
 801d568:	0802b530 	.word	0x0802b530
 801d56c:	0802b52c 	.word	0x0802b52c
 801d570:	0802b534 	.word	0x0802b534
 801d574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d578:	429a      	cmp	r2, r3
 801d57a:	bfa8      	it	ge
 801d57c:	461a      	movge	r2, r3
 801d57e:	2a00      	cmp	r2, #0
 801d580:	4691      	mov	r9, r2
 801d582:	dc37      	bgt.n	801d5f4 <_printf_float+0x374>
 801d584:	f04f 0b00 	mov.w	fp, #0
 801d588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d58c:	f104 021a 	add.w	r2, r4, #26
 801d590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d592:	9305      	str	r3, [sp, #20]
 801d594:	eba3 0309 	sub.w	r3, r3, r9
 801d598:	455b      	cmp	r3, fp
 801d59a:	dc33      	bgt.n	801d604 <_printf_float+0x384>
 801d59c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d5a0:	429a      	cmp	r2, r3
 801d5a2:	db3b      	blt.n	801d61c <_printf_float+0x39c>
 801d5a4:	6823      	ldr	r3, [r4, #0]
 801d5a6:	07da      	lsls	r2, r3, #31
 801d5a8:	d438      	bmi.n	801d61c <_printf_float+0x39c>
 801d5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5ac:	9b05      	ldr	r3, [sp, #20]
 801d5ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d5b0:	1ad3      	subs	r3, r2, r3
 801d5b2:	eba2 0901 	sub.w	r9, r2, r1
 801d5b6:	4599      	cmp	r9, r3
 801d5b8:	bfa8      	it	ge
 801d5ba:	4699      	movge	r9, r3
 801d5bc:	f1b9 0f00 	cmp.w	r9, #0
 801d5c0:	dc35      	bgt.n	801d62e <_printf_float+0x3ae>
 801d5c2:	f04f 0800 	mov.w	r8, #0
 801d5c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d5ca:	f104 0a1a 	add.w	sl, r4, #26
 801d5ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d5d2:	1a9b      	subs	r3, r3, r2
 801d5d4:	eba3 0309 	sub.w	r3, r3, r9
 801d5d8:	4543      	cmp	r3, r8
 801d5da:	f77f af79 	ble.w	801d4d0 <_printf_float+0x250>
 801d5de:	2301      	movs	r3, #1
 801d5e0:	4652      	mov	r2, sl
 801d5e2:	4631      	mov	r1, r6
 801d5e4:	4628      	mov	r0, r5
 801d5e6:	47b8      	blx	r7
 801d5e8:	3001      	adds	r0, #1
 801d5ea:	f43f aeaa 	beq.w	801d342 <_printf_float+0xc2>
 801d5ee:	f108 0801 	add.w	r8, r8, #1
 801d5f2:	e7ec      	b.n	801d5ce <_printf_float+0x34e>
 801d5f4:	4613      	mov	r3, r2
 801d5f6:	4631      	mov	r1, r6
 801d5f8:	4642      	mov	r2, r8
 801d5fa:	4628      	mov	r0, r5
 801d5fc:	47b8      	blx	r7
 801d5fe:	3001      	adds	r0, #1
 801d600:	d1c0      	bne.n	801d584 <_printf_float+0x304>
 801d602:	e69e      	b.n	801d342 <_printf_float+0xc2>
 801d604:	2301      	movs	r3, #1
 801d606:	4631      	mov	r1, r6
 801d608:	4628      	mov	r0, r5
 801d60a:	9205      	str	r2, [sp, #20]
 801d60c:	47b8      	blx	r7
 801d60e:	3001      	adds	r0, #1
 801d610:	f43f ae97 	beq.w	801d342 <_printf_float+0xc2>
 801d614:	9a05      	ldr	r2, [sp, #20]
 801d616:	f10b 0b01 	add.w	fp, fp, #1
 801d61a:	e7b9      	b.n	801d590 <_printf_float+0x310>
 801d61c:	ee18 3a10 	vmov	r3, s16
 801d620:	4652      	mov	r2, sl
 801d622:	4631      	mov	r1, r6
 801d624:	4628      	mov	r0, r5
 801d626:	47b8      	blx	r7
 801d628:	3001      	adds	r0, #1
 801d62a:	d1be      	bne.n	801d5aa <_printf_float+0x32a>
 801d62c:	e689      	b.n	801d342 <_printf_float+0xc2>
 801d62e:	9a05      	ldr	r2, [sp, #20]
 801d630:	464b      	mov	r3, r9
 801d632:	4442      	add	r2, r8
 801d634:	4631      	mov	r1, r6
 801d636:	4628      	mov	r0, r5
 801d638:	47b8      	blx	r7
 801d63a:	3001      	adds	r0, #1
 801d63c:	d1c1      	bne.n	801d5c2 <_printf_float+0x342>
 801d63e:	e680      	b.n	801d342 <_printf_float+0xc2>
 801d640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d642:	2a01      	cmp	r2, #1
 801d644:	dc01      	bgt.n	801d64a <_printf_float+0x3ca>
 801d646:	07db      	lsls	r3, r3, #31
 801d648:	d538      	bpl.n	801d6bc <_printf_float+0x43c>
 801d64a:	2301      	movs	r3, #1
 801d64c:	4642      	mov	r2, r8
 801d64e:	4631      	mov	r1, r6
 801d650:	4628      	mov	r0, r5
 801d652:	47b8      	blx	r7
 801d654:	3001      	adds	r0, #1
 801d656:	f43f ae74 	beq.w	801d342 <_printf_float+0xc2>
 801d65a:	ee18 3a10 	vmov	r3, s16
 801d65e:	4652      	mov	r2, sl
 801d660:	4631      	mov	r1, r6
 801d662:	4628      	mov	r0, r5
 801d664:	47b8      	blx	r7
 801d666:	3001      	adds	r0, #1
 801d668:	f43f ae6b 	beq.w	801d342 <_printf_float+0xc2>
 801d66c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d670:	2200      	movs	r2, #0
 801d672:	2300      	movs	r3, #0
 801d674:	f7e3 fa38 	bl	8000ae8 <__aeabi_dcmpeq>
 801d678:	b9d8      	cbnz	r0, 801d6b2 <_printf_float+0x432>
 801d67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d67c:	f108 0201 	add.w	r2, r8, #1
 801d680:	3b01      	subs	r3, #1
 801d682:	4631      	mov	r1, r6
 801d684:	4628      	mov	r0, r5
 801d686:	47b8      	blx	r7
 801d688:	3001      	adds	r0, #1
 801d68a:	d10e      	bne.n	801d6aa <_printf_float+0x42a>
 801d68c:	e659      	b.n	801d342 <_printf_float+0xc2>
 801d68e:	2301      	movs	r3, #1
 801d690:	4652      	mov	r2, sl
 801d692:	4631      	mov	r1, r6
 801d694:	4628      	mov	r0, r5
 801d696:	47b8      	blx	r7
 801d698:	3001      	adds	r0, #1
 801d69a:	f43f ae52 	beq.w	801d342 <_printf_float+0xc2>
 801d69e:	f108 0801 	add.w	r8, r8, #1
 801d6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6a4:	3b01      	subs	r3, #1
 801d6a6:	4543      	cmp	r3, r8
 801d6a8:	dcf1      	bgt.n	801d68e <_printf_float+0x40e>
 801d6aa:	464b      	mov	r3, r9
 801d6ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d6b0:	e6dc      	b.n	801d46c <_printf_float+0x1ec>
 801d6b2:	f04f 0800 	mov.w	r8, #0
 801d6b6:	f104 0a1a 	add.w	sl, r4, #26
 801d6ba:	e7f2      	b.n	801d6a2 <_printf_float+0x422>
 801d6bc:	2301      	movs	r3, #1
 801d6be:	4642      	mov	r2, r8
 801d6c0:	e7df      	b.n	801d682 <_printf_float+0x402>
 801d6c2:	2301      	movs	r3, #1
 801d6c4:	464a      	mov	r2, r9
 801d6c6:	4631      	mov	r1, r6
 801d6c8:	4628      	mov	r0, r5
 801d6ca:	47b8      	blx	r7
 801d6cc:	3001      	adds	r0, #1
 801d6ce:	f43f ae38 	beq.w	801d342 <_printf_float+0xc2>
 801d6d2:	f108 0801 	add.w	r8, r8, #1
 801d6d6:	68e3      	ldr	r3, [r4, #12]
 801d6d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d6da:	1a5b      	subs	r3, r3, r1
 801d6dc:	4543      	cmp	r3, r8
 801d6de:	dcf0      	bgt.n	801d6c2 <_printf_float+0x442>
 801d6e0:	e6fa      	b.n	801d4d8 <_printf_float+0x258>
 801d6e2:	f04f 0800 	mov.w	r8, #0
 801d6e6:	f104 0919 	add.w	r9, r4, #25
 801d6ea:	e7f4      	b.n	801d6d6 <_printf_float+0x456>

0801d6ec <_printf_common>:
 801d6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6f0:	4616      	mov	r6, r2
 801d6f2:	4699      	mov	r9, r3
 801d6f4:	688a      	ldr	r2, [r1, #8]
 801d6f6:	690b      	ldr	r3, [r1, #16]
 801d6f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d6fc:	4293      	cmp	r3, r2
 801d6fe:	bfb8      	it	lt
 801d700:	4613      	movlt	r3, r2
 801d702:	6033      	str	r3, [r6, #0]
 801d704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d708:	4607      	mov	r7, r0
 801d70a:	460c      	mov	r4, r1
 801d70c:	b10a      	cbz	r2, 801d712 <_printf_common+0x26>
 801d70e:	3301      	adds	r3, #1
 801d710:	6033      	str	r3, [r6, #0]
 801d712:	6823      	ldr	r3, [r4, #0]
 801d714:	0699      	lsls	r1, r3, #26
 801d716:	bf42      	ittt	mi
 801d718:	6833      	ldrmi	r3, [r6, #0]
 801d71a:	3302      	addmi	r3, #2
 801d71c:	6033      	strmi	r3, [r6, #0]
 801d71e:	6825      	ldr	r5, [r4, #0]
 801d720:	f015 0506 	ands.w	r5, r5, #6
 801d724:	d106      	bne.n	801d734 <_printf_common+0x48>
 801d726:	f104 0a19 	add.w	sl, r4, #25
 801d72a:	68e3      	ldr	r3, [r4, #12]
 801d72c:	6832      	ldr	r2, [r6, #0]
 801d72e:	1a9b      	subs	r3, r3, r2
 801d730:	42ab      	cmp	r3, r5
 801d732:	dc26      	bgt.n	801d782 <_printf_common+0x96>
 801d734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d738:	1e13      	subs	r3, r2, #0
 801d73a:	6822      	ldr	r2, [r4, #0]
 801d73c:	bf18      	it	ne
 801d73e:	2301      	movne	r3, #1
 801d740:	0692      	lsls	r2, r2, #26
 801d742:	d42b      	bmi.n	801d79c <_printf_common+0xb0>
 801d744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d748:	4649      	mov	r1, r9
 801d74a:	4638      	mov	r0, r7
 801d74c:	47c0      	blx	r8
 801d74e:	3001      	adds	r0, #1
 801d750:	d01e      	beq.n	801d790 <_printf_common+0xa4>
 801d752:	6823      	ldr	r3, [r4, #0]
 801d754:	68e5      	ldr	r5, [r4, #12]
 801d756:	6832      	ldr	r2, [r6, #0]
 801d758:	f003 0306 	and.w	r3, r3, #6
 801d75c:	2b04      	cmp	r3, #4
 801d75e:	bf08      	it	eq
 801d760:	1aad      	subeq	r5, r5, r2
 801d762:	68a3      	ldr	r3, [r4, #8]
 801d764:	6922      	ldr	r2, [r4, #16]
 801d766:	bf0c      	ite	eq
 801d768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d76c:	2500      	movne	r5, #0
 801d76e:	4293      	cmp	r3, r2
 801d770:	bfc4      	itt	gt
 801d772:	1a9b      	subgt	r3, r3, r2
 801d774:	18ed      	addgt	r5, r5, r3
 801d776:	2600      	movs	r6, #0
 801d778:	341a      	adds	r4, #26
 801d77a:	42b5      	cmp	r5, r6
 801d77c:	d11a      	bne.n	801d7b4 <_printf_common+0xc8>
 801d77e:	2000      	movs	r0, #0
 801d780:	e008      	b.n	801d794 <_printf_common+0xa8>
 801d782:	2301      	movs	r3, #1
 801d784:	4652      	mov	r2, sl
 801d786:	4649      	mov	r1, r9
 801d788:	4638      	mov	r0, r7
 801d78a:	47c0      	blx	r8
 801d78c:	3001      	adds	r0, #1
 801d78e:	d103      	bne.n	801d798 <_printf_common+0xac>
 801d790:	f04f 30ff 	mov.w	r0, #4294967295
 801d794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d798:	3501      	adds	r5, #1
 801d79a:	e7c6      	b.n	801d72a <_printf_common+0x3e>
 801d79c:	18e1      	adds	r1, r4, r3
 801d79e:	1c5a      	adds	r2, r3, #1
 801d7a0:	2030      	movs	r0, #48	; 0x30
 801d7a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d7a6:	4422      	add	r2, r4
 801d7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d7ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d7b0:	3302      	adds	r3, #2
 801d7b2:	e7c7      	b.n	801d744 <_printf_common+0x58>
 801d7b4:	2301      	movs	r3, #1
 801d7b6:	4622      	mov	r2, r4
 801d7b8:	4649      	mov	r1, r9
 801d7ba:	4638      	mov	r0, r7
 801d7bc:	47c0      	blx	r8
 801d7be:	3001      	adds	r0, #1
 801d7c0:	d0e6      	beq.n	801d790 <_printf_common+0xa4>
 801d7c2:	3601      	adds	r6, #1
 801d7c4:	e7d9      	b.n	801d77a <_printf_common+0x8e>
	...

0801d7c8 <_printf_i>:
 801d7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d7cc:	460c      	mov	r4, r1
 801d7ce:	4691      	mov	r9, r2
 801d7d0:	7e27      	ldrb	r7, [r4, #24]
 801d7d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d7d4:	2f78      	cmp	r7, #120	; 0x78
 801d7d6:	4680      	mov	r8, r0
 801d7d8:	469a      	mov	sl, r3
 801d7da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d7de:	d807      	bhi.n	801d7f0 <_printf_i+0x28>
 801d7e0:	2f62      	cmp	r7, #98	; 0x62
 801d7e2:	d80a      	bhi.n	801d7fa <_printf_i+0x32>
 801d7e4:	2f00      	cmp	r7, #0
 801d7e6:	f000 80d8 	beq.w	801d99a <_printf_i+0x1d2>
 801d7ea:	2f58      	cmp	r7, #88	; 0x58
 801d7ec:	f000 80a3 	beq.w	801d936 <_printf_i+0x16e>
 801d7f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d7f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d7f8:	e03a      	b.n	801d870 <_printf_i+0xa8>
 801d7fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d7fe:	2b15      	cmp	r3, #21
 801d800:	d8f6      	bhi.n	801d7f0 <_printf_i+0x28>
 801d802:	a001      	add	r0, pc, #4	; (adr r0, 801d808 <_printf_i+0x40>)
 801d804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d808:	0801d861 	.word	0x0801d861
 801d80c:	0801d875 	.word	0x0801d875
 801d810:	0801d7f1 	.word	0x0801d7f1
 801d814:	0801d7f1 	.word	0x0801d7f1
 801d818:	0801d7f1 	.word	0x0801d7f1
 801d81c:	0801d7f1 	.word	0x0801d7f1
 801d820:	0801d875 	.word	0x0801d875
 801d824:	0801d7f1 	.word	0x0801d7f1
 801d828:	0801d7f1 	.word	0x0801d7f1
 801d82c:	0801d7f1 	.word	0x0801d7f1
 801d830:	0801d7f1 	.word	0x0801d7f1
 801d834:	0801d981 	.word	0x0801d981
 801d838:	0801d8a5 	.word	0x0801d8a5
 801d83c:	0801d963 	.word	0x0801d963
 801d840:	0801d7f1 	.word	0x0801d7f1
 801d844:	0801d7f1 	.word	0x0801d7f1
 801d848:	0801d9a3 	.word	0x0801d9a3
 801d84c:	0801d7f1 	.word	0x0801d7f1
 801d850:	0801d8a5 	.word	0x0801d8a5
 801d854:	0801d7f1 	.word	0x0801d7f1
 801d858:	0801d7f1 	.word	0x0801d7f1
 801d85c:	0801d96b 	.word	0x0801d96b
 801d860:	680b      	ldr	r3, [r1, #0]
 801d862:	1d1a      	adds	r2, r3, #4
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	600a      	str	r2, [r1, #0]
 801d868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d86c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d870:	2301      	movs	r3, #1
 801d872:	e0a3      	b.n	801d9bc <_printf_i+0x1f4>
 801d874:	6825      	ldr	r5, [r4, #0]
 801d876:	6808      	ldr	r0, [r1, #0]
 801d878:	062e      	lsls	r6, r5, #24
 801d87a:	f100 0304 	add.w	r3, r0, #4
 801d87e:	d50a      	bpl.n	801d896 <_printf_i+0xce>
 801d880:	6805      	ldr	r5, [r0, #0]
 801d882:	600b      	str	r3, [r1, #0]
 801d884:	2d00      	cmp	r5, #0
 801d886:	da03      	bge.n	801d890 <_printf_i+0xc8>
 801d888:	232d      	movs	r3, #45	; 0x2d
 801d88a:	426d      	negs	r5, r5
 801d88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d890:	485e      	ldr	r0, [pc, #376]	; (801da0c <_printf_i+0x244>)
 801d892:	230a      	movs	r3, #10
 801d894:	e019      	b.n	801d8ca <_printf_i+0x102>
 801d896:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d89a:	6805      	ldr	r5, [r0, #0]
 801d89c:	600b      	str	r3, [r1, #0]
 801d89e:	bf18      	it	ne
 801d8a0:	b22d      	sxthne	r5, r5
 801d8a2:	e7ef      	b.n	801d884 <_printf_i+0xbc>
 801d8a4:	680b      	ldr	r3, [r1, #0]
 801d8a6:	6825      	ldr	r5, [r4, #0]
 801d8a8:	1d18      	adds	r0, r3, #4
 801d8aa:	6008      	str	r0, [r1, #0]
 801d8ac:	0628      	lsls	r0, r5, #24
 801d8ae:	d501      	bpl.n	801d8b4 <_printf_i+0xec>
 801d8b0:	681d      	ldr	r5, [r3, #0]
 801d8b2:	e002      	b.n	801d8ba <_printf_i+0xf2>
 801d8b4:	0669      	lsls	r1, r5, #25
 801d8b6:	d5fb      	bpl.n	801d8b0 <_printf_i+0xe8>
 801d8b8:	881d      	ldrh	r5, [r3, #0]
 801d8ba:	4854      	ldr	r0, [pc, #336]	; (801da0c <_printf_i+0x244>)
 801d8bc:	2f6f      	cmp	r7, #111	; 0x6f
 801d8be:	bf0c      	ite	eq
 801d8c0:	2308      	moveq	r3, #8
 801d8c2:	230a      	movne	r3, #10
 801d8c4:	2100      	movs	r1, #0
 801d8c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d8ca:	6866      	ldr	r6, [r4, #4]
 801d8cc:	60a6      	str	r6, [r4, #8]
 801d8ce:	2e00      	cmp	r6, #0
 801d8d0:	bfa2      	ittt	ge
 801d8d2:	6821      	ldrge	r1, [r4, #0]
 801d8d4:	f021 0104 	bicge.w	r1, r1, #4
 801d8d8:	6021      	strge	r1, [r4, #0]
 801d8da:	b90d      	cbnz	r5, 801d8e0 <_printf_i+0x118>
 801d8dc:	2e00      	cmp	r6, #0
 801d8de:	d04d      	beq.n	801d97c <_printf_i+0x1b4>
 801d8e0:	4616      	mov	r6, r2
 801d8e2:	fbb5 f1f3 	udiv	r1, r5, r3
 801d8e6:	fb03 5711 	mls	r7, r3, r1, r5
 801d8ea:	5dc7      	ldrb	r7, [r0, r7]
 801d8ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d8f0:	462f      	mov	r7, r5
 801d8f2:	42bb      	cmp	r3, r7
 801d8f4:	460d      	mov	r5, r1
 801d8f6:	d9f4      	bls.n	801d8e2 <_printf_i+0x11a>
 801d8f8:	2b08      	cmp	r3, #8
 801d8fa:	d10b      	bne.n	801d914 <_printf_i+0x14c>
 801d8fc:	6823      	ldr	r3, [r4, #0]
 801d8fe:	07df      	lsls	r7, r3, #31
 801d900:	d508      	bpl.n	801d914 <_printf_i+0x14c>
 801d902:	6923      	ldr	r3, [r4, #16]
 801d904:	6861      	ldr	r1, [r4, #4]
 801d906:	4299      	cmp	r1, r3
 801d908:	bfde      	ittt	le
 801d90a:	2330      	movle	r3, #48	; 0x30
 801d90c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d910:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d914:	1b92      	subs	r2, r2, r6
 801d916:	6122      	str	r2, [r4, #16]
 801d918:	f8cd a000 	str.w	sl, [sp]
 801d91c:	464b      	mov	r3, r9
 801d91e:	aa03      	add	r2, sp, #12
 801d920:	4621      	mov	r1, r4
 801d922:	4640      	mov	r0, r8
 801d924:	f7ff fee2 	bl	801d6ec <_printf_common>
 801d928:	3001      	adds	r0, #1
 801d92a:	d14c      	bne.n	801d9c6 <_printf_i+0x1fe>
 801d92c:	f04f 30ff 	mov.w	r0, #4294967295
 801d930:	b004      	add	sp, #16
 801d932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d936:	4835      	ldr	r0, [pc, #212]	; (801da0c <_printf_i+0x244>)
 801d938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d93c:	6823      	ldr	r3, [r4, #0]
 801d93e:	680e      	ldr	r6, [r1, #0]
 801d940:	061f      	lsls	r7, r3, #24
 801d942:	f856 5b04 	ldr.w	r5, [r6], #4
 801d946:	600e      	str	r6, [r1, #0]
 801d948:	d514      	bpl.n	801d974 <_printf_i+0x1ac>
 801d94a:	07d9      	lsls	r1, r3, #31
 801d94c:	bf44      	itt	mi
 801d94e:	f043 0320 	orrmi.w	r3, r3, #32
 801d952:	6023      	strmi	r3, [r4, #0]
 801d954:	b91d      	cbnz	r5, 801d95e <_printf_i+0x196>
 801d956:	6823      	ldr	r3, [r4, #0]
 801d958:	f023 0320 	bic.w	r3, r3, #32
 801d95c:	6023      	str	r3, [r4, #0]
 801d95e:	2310      	movs	r3, #16
 801d960:	e7b0      	b.n	801d8c4 <_printf_i+0xfc>
 801d962:	6823      	ldr	r3, [r4, #0]
 801d964:	f043 0320 	orr.w	r3, r3, #32
 801d968:	6023      	str	r3, [r4, #0]
 801d96a:	2378      	movs	r3, #120	; 0x78
 801d96c:	4828      	ldr	r0, [pc, #160]	; (801da10 <_printf_i+0x248>)
 801d96e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d972:	e7e3      	b.n	801d93c <_printf_i+0x174>
 801d974:	065e      	lsls	r6, r3, #25
 801d976:	bf48      	it	mi
 801d978:	b2ad      	uxthmi	r5, r5
 801d97a:	e7e6      	b.n	801d94a <_printf_i+0x182>
 801d97c:	4616      	mov	r6, r2
 801d97e:	e7bb      	b.n	801d8f8 <_printf_i+0x130>
 801d980:	680b      	ldr	r3, [r1, #0]
 801d982:	6826      	ldr	r6, [r4, #0]
 801d984:	6960      	ldr	r0, [r4, #20]
 801d986:	1d1d      	adds	r5, r3, #4
 801d988:	600d      	str	r5, [r1, #0]
 801d98a:	0635      	lsls	r5, r6, #24
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	d501      	bpl.n	801d994 <_printf_i+0x1cc>
 801d990:	6018      	str	r0, [r3, #0]
 801d992:	e002      	b.n	801d99a <_printf_i+0x1d2>
 801d994:	0671      	lsls	r1, r6, #25
 801d996:	d5fb      	bpl.n	801d990 <_printf_i+0x1c8>
 801d998:	8018      	strh	r0, [r3, #0]
 801d99a:	2300      	movs	r3, #0
 801d99c:	6123      	str	r3, [r4, #16]
 801d99e:	4616      	mov	r6, r2
 801d9a0:	e7ba      	b.n	801d918 <_printf_i+0x150>
 801d9a2:	680b      	ldr	r3, [r1, #0]
 801d9a4:	1d1a      	adds	r2, r3, #4
 801d9a6:	600a      	str	r2, [r1, #0]
 801d9a8:	681e      	ldr	r6, [r3, #0]
 801d9aa:	6862      	ldr	r2, [r4, #4]
 801d9ac:	2100      	movs	r1, #0
 801d9ae:	4630      	mov	r0, r6
 801d9b0:	f7e2 fc26 	bl	8000200 <memchr>
 801d9b4:	b108      	cbz	r0, 801d9ba <_printf_i+0x1f2>
 801d9b6:	1b80      	subs	r0, r0, r6
 801d9b8:	6060      	str	r0, [r4, #4]
 801d9ba:	6863      	ldr	r3, [r4, #4]
 801d9bc:	6123      	str	r3, [r4, #16]
 801d9be:	2300      	movs	r3, #0
 801d9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d9c4:	e7a8      	b.n	801d918 <_printf_i+0x150>
 801d9c6:	6923      	ldr	r3, [r4, #16]
 801d9c8:	4632      	mov	r2, r6
 801d9ca:	4649      	mov	r1, r9
 801d9cc:	4640      	mov	r0, r8
 801d9ce:	47d0      	blx	sl
 801d9d0:	3001      	adds	r0, #1
 801d9d2:	d0ab      	beq.n	801d92c <_printf_i+0x164>
 801d9d4:	6823      	ldr	r3, [r4, #0]
 801d9d6:	079b      	lsls	r3, r3, #30
 801d9d8:	d413      	bmi.n	801da02 <_printf_i+0x23a>
 801d9da:	68e0      	ldr	r0, [r4, #12]
 801d9dc:	9b03      	ldr	r3, [sp, #12]
 801d9de:	4298      	cmp	r0, r3
 801d9e0:	bfb8      	it	lt
 801d9e2:	4618      	movlt	r0, r3
 801d9e4:	e7a4      	b.n	801d930 <_printf_i+0x168>
 801d9e6:	2301      	movs	r3, #1
 801d9e8:	4632      	mov	r2, r6
 801d9ea:	4649      	mov	r1, r9
 801d9ec:	4640      	mov	r0, r8
 801d9ee:	47d0      	blx	sl
 801d9f0:	3001      	adds	r0, #1
 801d9f2:	d09b      	beq.n	801d92c <_printf_i+0x164>
 801d9f4:	3501      	adds	r5, #1
 801d9f6:	68e3      	ldr	r3, [r4, #12]
 801d9f8:	9903      	ldr	r1, [sp, #12]
 801d9fa:	1a5b      	subs	r3, r3, r1
 801d9fc:	42ab      	cmp	r3, r5
 801d9fe:	dcf2      	bgt.n	801d9e6 <_printf_i+0x21e>
 801da00:	e7eb      	b.n	801d9da <_printf_i+0x212>
 801da02:	2500      	movs	r5, #0
 801da04:	f104 0619 	add.w	r6, r4, #25
 801da08:	e7f5      	b.n	801d9f6 <_printf_i+0x22e>
 801da0a:	bf00      	nop
 801da0c:	0802b536 	.word	0x0802b536
 801da10:	0802b547 	.word	0x0802b547

0801da14 <_scanf_float>:
 801da14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da18:	b087      	sub	sp, #28
 801da1a:	4617      	mov	r7, r2
 801da1c:	9303      	str	r3, [sp, #12]
 801da1e:	688b      	ldr	r3, [r1, #8]
 801da20:	1e5a      	subs	r2, r3, #1
 801da22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801da26:	bf83      	ittte	hi
 801da28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801da2c:	195b      	addhi	r3, r3, r5
 801da2e:	9302      	strhi	r3, [sp, #8]
 801da30:	2300      	movls	r3, #0
 801da32:	bf86      	itte	hi
 801da34:	f240 135d 	movwhi	r3, #349	; 0x15d
 801da38:	608b      	strhi	r3, [r1, #8]
 801da3a:	9302      	strls	r3, [sp, #8]
 801da3c:	680b      	ldr	r3, [r1, #0]
 801da3e:	468b      	mov	fp, r1
 801da40:	2500      	movs	r5, #0
 801da42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801da46:	f84b 3b1c 	str.w	r3, [fp], #28
 801da4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801da4e:	4680      	mov	r8, r0
 801da50:	460c      	mov	r4, r1
 801da52:	465e      	mov	r6, fp
 801da54:	46aa      	mov	sl, r5
 801da56:	46a9      	mov	r9, r5
 801da58:	9501      	str	r5, [sp, #4]
 801da5a:	68a2      	ldr	r2, [r4, #8]
 801da5c:	b152      	cbz	r2, 801da74 <_scanf_float+0x60>
 801da5e:	683b      	ldr	r3, [r7, #0]
 801da60:	781b      	ldrb	r3, [r3, #0]
 801da62:	2b4e      	cmp	r3, #78	; 0x4e
 801da64:	d864      	bhi.n	801db30 <_scanf_float+0x11c>
 801da66:	2b40      	cmp	r3, #64	; 0x40
 801da68:	d83c      	bhi.n	801dae4 <_scanf_float+0xd0>
 801da6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801da6e:	b2c8      	uxtb	r0, r1
 801da70:	280e      	cmp	r0, #14
 801da72:	d93a      	bls.n	801daea <_scanf_float+0xd6>
 801da74:	f1b9 0f00 	cmp.w	r9, #0
 801da78:	d003      	beq.n	801da82 <_scanf_float+0x6e>
 801da7a:	6823      	ldr	r3, [r4, #0]
 801da7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801da80:	6023      	str	r3, [r4, #0]
 801da82:	f10a 3aff 	add.w	sl, sl, #4294967295
 801da86:	f1ba 0f01 	cmp.w	sl, #1
 801da8a:	f200 8113 	bhi.w	801dcb4 <_scanf_float+0x2a0>
 801da8e:	455e      	cmp	r6, fp
 801da90:	f200 8105 	bhi.w	801dc9e <_scanf_float+0x28a>
 801da94:	2501      	movs	r5, #1
 801da96:	4628      	mov	r0, r5
 801da98:	b007      	add	sp, #28
 801da9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801daa2:	2a0d      	cmp	r2, #13
 801daa4:	d8e6      	bhi.n	801da74 <_scanf_float+0x60>
 801daa6:	a101      	add	r1, pc, #4	; (adr r1, 801daac <_scanf_float+0x98>)
 801daa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801daac:	0801dbeb 	.word	0x0801dbeb
 801dab0:	0801da75 	.word	0x0801da75
 801dab4:	0801da75 	.word	0x0801da75
 801dab8:	0801da75 	.word	0x0801da75
 801dabc:	0801dc4b 	.word	0x0801dc4b
 801dac0:	0801dc23 	.word	0x0801dc23
 801dac4:	0801da75 	.word	0x0801da75
 801dac8:	0801da75 	.word	0x0801da75
 801dacc:	0801dbf9 	.word	0x0801dbf9
 801dad0:	0801da75 	.word	0x0801da75
 801dad4:	0801da75 	.word	0x0801da75
 801dad8:	0801da75 	.word	0x0801da75
 801dadc:	0801da75 	.word	0x0801da75
 801dae0:	0801dbb1 	.word	0x0801dbb1
 801dae4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801dae8:	e7db      	b.n	801daa2 <_scanf_float+0x8e>
 801daea:	290e      	cmp	r1, #14
 801daec:	d8c2      	bhi.n	801da74 <_scanf_float+0x60>
 801daee:	a001      	add	r0, pc, #4	; (adr r0, 801daf4 <_scanf_float+0xe0>)
 801daf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801daf4:	0801dba3 	.word	0x0801dba3
 801daf8:	0801da75 	.word	0x0801da75
 801dafc:	0801dba3 	.word	0x0801dba3
 801db00:	0801dc37 	.word	0x0801dc37
 801db04:	0801da75 	.word	0x0801da75
 801db08:	0801db51 	.word	0x0801db51
 801db0c:	0801db8d 	.word	0x0801db8d
 801db10:	0801db8d 	.word	0x0801db8d
 801db14:	0801db8d 	.word	0x0801db8d
 801db18:	0801db8d 	.word	0x0801db8d
 801db1c:	0801db8d 	.word	0x0801db8d
 801db20:	0801db8d 	.word	0x0801db8d
 801db24:	0801db8d 	.word	0x0801db8d
 801db28:	0801db8d 	.word	0x0801db8d
 801db2c:	0801db8d 	.word	0x0801db8d
 801db30:	2b6e      	cmp	r3, #110	; 0x6e
 801db32:	d809      	bhi.n	801db48 <_scanf_float+0x134>
 801db34:	2b60      	cmp	r3, #96	; 0x60
 801db36:	d8b2      	bhi.n	801da9e <_scanf_float+0x8a>
 801db38:	2b54      	cmp	r3, #84	; 0x54
 801db3a:	d077      	beq.n	801dc2c <_scanf_float+0x218>
 801db3c:	2b59      	cmp	r3, #89	; 0x59
 801db3e:	d199      	bne.n	801da74 <_scanf_float+0x60>
 801db40:	2d07      	cmp	r5, #7
 801db42:	d197      	bne.n	801da74 <_scanf_float+0x60>
 801db44:	2508      	movs	r5, #8
 801db46:	e029      	b.n	801db9c <_scanf_float+0x188>
 801db48:	2b74      	cmp	r3, #116	; 0x74
 801db4a:	d06f      	beq.n	801dc2c <_scanf_float+0x218>
 801db4c:	2b79      	cmp	r3, #121	; 0x79
 801db4e:	e7f6      	b.n	801db3e <_scanf_float+0x12a>
 801db50:	6821      	ldr	r1, [r4, #0]
 801db52:	05c8      	lsls	r0, r1, #23
 801db54:	d51a      	bpl.n	801db8c <_scanf_float+0x178>
 801db56:	9b02      	ldr	r3, [sp, #8]
 801db58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801db5c:	6021      	str	r1, [r4, #0]
 801db5e:	f109 0901 	add.w	r9, r9, #1
 801db62:	b11b      	cbz	r3, 801db6c <_scanf_float+0x158>
 801db64:	3b01      	subs	r3, #1
 801db66:	3201      	adds	r2, #1
 801db68:	9302      	str	r3, [sp, #8]
 801db6a:	60a2      	str	r2, [r4, #8]
 801db6c:	68a3      	ldr	r3, [r4, #8]
 801db6e:	3b01      	subs	r3, #1
 801db70:	60a3      	str	r3, [r4, #8]
 801db72:	6923      	ldr	r3, [r4, #16]
 801db74:	3301      	adds	r3, #1
 801db76:	6123      	str	r3, [r4, #16]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	3b01      	subs	r3, #1
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	607b      	str	r3, [r7, #4]
 801db80:	f340 8084 	ble.w	801dc8c <_scanf_float+0x278>
 801db84:	683b      	ldr	r3, [r7, #0]
 801db86:	3301      	adds	r3, #1
 801db88:	603b      	str	r3, [r7, #0]
 801db8a:	e766      	b.n	801da5a <_scanf_float+0x46>
 801db8c:	eb1a 0f05 	cmn.w	sl, r5
 801db90:	f47f af70 	bne.w	801da74 <_scanf_float+0x60>
 801db94:	6822      	ldr	r2, [r4, #0]
 801db96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801db9a:	6022      	str	r2, [r4, #0]
 801db9c:	f806 3b01 	strb.w	r3, [r6], #1
 801dba0:	e7e4      	b.n	801db6c <_scanf_float+0x158>
 801dba2:	6822      	ldr	r2, [r4, #0]
 801dba4:	0610      	lsls	r0, r2, #24
 801dba6:	f57f af65 	bpl.w	801da74 <_scanf_float+0x60>
 801dbaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801dbae:	e7f4      	b.n	801db9a <_scanf_float+0x186>
 801dbb0:	f1ba 0f00 	cmp.w	sl, #0
 801dbb4:	d10e      	bne.n	801dbd4 <_scanf_float+0x1c0>
 801dbb6:	f1b9 0f00 	cmp.w	r9, #0
 801dbba:	d10e      	bne.n	801dbda <_scanf_float+0x1c6>
 801dbbc:	6822      	ldr	r2, [r4, #0]
 801dbbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dbc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dbc6:	d108      	bne.n	801dbda <_scanf_float+0x1c6>
 801dbc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dbcc:	6022      	str	r2, [r4, #0]
 801dbce:	f04f 0a01 	mov.w	sl, #1
 801dbd2:	e7e3      	b.n	801db9c <_scanf_float+0x188>
 801dbd4:	f1ba 0f02 	cmp.w	sl, #2
 801dbd8:	d055      	beq.n	801dc86 <_scanf_float+0x272>
 801dbda:	2d01      	cmp	r5, #1
 801dbdc:	d002      	beq.n	801dbe4 <_scanf_float+0x1d0>
 801dbde:	2d04      	cmp	r5, #4
 801dbe0:	f47f af48 	bne.w	801da74 <_scanf_float+0x60>
 801dbe4:	3501      	adds	r5, #1
 801dbe6:	b2ed      	uxtb	r5, r5
 801dbe8:	e7d8      	b.n	801db9c <_scanf_float+0x188>
 801dbea:	f1ba 0f01 	cmp.w	sl, #1
 801dbee:	f47f af41 	bne.w	801da74 <_scanf_float+0x60>
 801dbf2:	f04f 0a02 	mov.w	sl, #2
 801dbf6:	e7d1      	b.n	801db9c <_scanf_float+0x188>
 801dbf8:	b97d      	cbnz	r5, 801dc1a <_scanf_float+0x206>
 801dbfa:	f1b9 0f00 	cmp.w	r9, #0
 801dbfe:	f47f af3c 	bne.w	801da7a <_scanf_float+0x66>
 801dc02:	6822      	ldr	r2, [r4, #0]
 801dc04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801dc08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801dc0c:	f47f af39 	bne.w	801da82 <_scanf_float+0x6e>
 801dc10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dc14:	6022      	str	r2, [r4, #0]
 801dc16:	2501      	movs	r5, #1
 801dc18:	e7c0      	b.n	801db9c <_scanf_float+0x188>
 801dc1a:	2d03      	cmp	r5, #3
 801dc1c:	d0e2      	beq.n	801dbe4 <_scanf_float+0x1d0>
 801dc1e:	2d05      	cmp	r5, #5
 801dc20:	e7de      	b.n	801dbe0 <_scanf_float+0x1cc>
 801dc22:	2d02      	cmp	r5, #2
 801dc24:	f47f af26 	bne.w	801da74 <_scanf_float+0x60>
 801dc28:	2503      	movs	r5, #3
 801dc2a:	e7b7      	b.n	801db9c <_scanf_float+0x188>
 801dc2c:	2d06      	cmp	r5, #6
 801dc2e:	f47f af21 	bne.w	801da74 <_scanf_float+0x60>
 801dc32:	2507      	movs	r5, #7
 801dc34:	e7b2      	b.n	801db9c <_scanf_float+0x188>
 801dc36:	6822      	ldr	r2, [r4, #0]
 801dc38:	0591      	lsls	r1, r2, #22
 801dc3a:	f57f af1b 	bpl.w	801da74 <_scanf_float+0x60>
 801dc3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801dc42:	6022      	str	r2, [r4, #0]
 801dc44:	f8cd 9004 	str.w	r9, [sp, #4]
 801dc48:	e7a8      	b.n	801db9c <_scanf_float+0x188>
 801dc4a:	6822      	ldr	r2, [r4, #0]
 801dc4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801dc50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801dc54:	d006      	beq.n	801dc64 <_scanf_float+0x250>
 801dc56:	0550      	lsls	r0, r2, #21
 801dc58:	f57f af0c 	bpl.w	801da74 <_scanf_float+0x60>
 801dc5c:	f1b9 0f00 	cmp.w	r9, #0
 801dc60:	f43f af0f 	beq.w	801da82 <_scanf_float+0x6e>
 801dc64:	0591      	lsls	r1, r2, #22
 801dc66:	bf58      	it	pl
 801dc68:	9901      	ldrpl	r1, [sp, #4]
 801dc6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801dc6e:	bf58      	it	pl
 801dc70:	eba9 0101 	subpl.w	r1, r9, r1
 801dc74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801dc78:	bf58      	it	pl
 801dc7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801dc7e:	6022      	str	r2, [r4, #0]
 801dc80:	f04f 0900 	mov.w	r9, #0
 801dc84:	e78a      	b.n	801db9c <_scanf_float+0x188>
 801dc86:	f04f 0a03 	mov.w	sl, #3
 801dc8a:	e787      	b.n	801db9c <_scanf_float+0x188>
 801dc8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801dc90:	4639      	mov	r1, r7
 801dc92:	4640      	mov	r0, r8
 801dc94:	4798      	blx	r3
 801dc96:	2800      	cmp	r0, #0
 801dc98:	f43f aedf 	beq.w	801da5a <_scanf_float+0x46>
 801dc9c:	e6ea      	b.n	801da74 <_scanf_float+0x60>
 801dc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dca6:	463a      	mov	r2, r7
 801dca8:	4640      	mov	r0, r8
 801dcaa:	4798      	blx	r3
 801dcac:	6923      	ldr	r3, [r4, #16]
 801dcae:	3b01      	subs	r3, #1
 801dcb0:	6123      	str	r3, [r4, #16]
 801dcb2:	e6ec      	b.n	801da8e <_scanf_float+0x7a>
 801dcb4:	1e6b      	subs	r3, r5, #1
 801dcb6:	2b06      	cmp	r3, #6
 801dcb8:	d825      	bhi.n	801dd06 <_scanf_float+0x2f2>
 801dcba:	2d02      	cmp	r5, #2
 801dcbc:	d836      	bhi.n	801dd2c <_scanf_float+0x318>
 801dcbe:	455e      	cmp	r6, fp
 801dcc0:	f67f aee8 	bls.w	801da94 <_scanf_float+0x80>
 801dcc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dcc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dccc:	463a      	mov	r2, r7
 801dcce:	4640      	mov	r0, r8
 801dcd0:	4798      	blx	r3
 801dcd2:	6923      	ldr	r3, [r4, #16]
 801dcd4:	3b01      	subs	r3, #1
 801dcd6:	6123      	str	r3, [r4, #16]
 801dcd8:	e7f1      	b.n	801dcbe <_scanf_float+0x2aa>
 801dcda:	9802      	ldr	r0, [sp, #8]
 801dcdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dce0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801dce4:	9002      	str	r0, [sp, #8]
 801dce6:	463a      	mov	r2, r7
 801dce8:	4640      	mov	r0, r8
 801dcea:	4798      	blx	r3
 801dcec:	6923      	ldr	r3, [r4, #16]
 801dcee:	3b01      	subs	r3, #1
 801dcf0:	6123      	str	r3, [r4, #16]
 801dcf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dcf6:	fa5f fa8a 	uxtb.w	sl, sl
 801dcfa:	f1ba 0f02 	cmp.w	sl, #2
 801dcfe:	d1ec      	bne.n	801dcda <_scanf_float+0x2c6>
 801dd00:	3d03      	subs	r5, #3
 801dd02:	b2ed      	uxtb	r5, r5
 801dd04:	1b76      	subs	r6, r6, r5
 801dd06:	6823      	ldr	r3, [r4, #0]
 801dd08:	05da      	lsls	r2, r3, #23
 801dd0a:	d52f      	bpl.n	801dd6c <_scanf_float+0x358>
 801dd0c:	055b      	lsls	r3, r3, #21
 801dd0e:	d510      	bpl.n	801dd32 <_scanf_float+0x31e>
 801dd10:	455e      	cmp	r6, fp
 801dd12:	f67f aebf 	bls.w	801da94 <_scanf_float+0x80>
 801dd16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dd1e:	463a      	mov	r2, r7
 801dd20:	4640      	mov	r0, r8
 801dd22:	4798      	blx	r3
 801dd24:	6923      	ldr	r3, [r4, #16]
 801dd26:	3b01      	subs	r3, #1
 801dd28:	6123      	str	r3, [r4, #16]
 801dd2a:	e7f1      	b.n	801dd10 <_scanf_float+0x2fc>
 801dd2c:	46aa      	mov	sl, r5
 801dd2e:	9602      	str	r6, [sp, #8]
 801dd30:	e7df      	b.n	801dcf2 <_scanf_float+0x2de>
 801dd32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dd36:	6923      	ldr	r3, [r4, #16]
 801dd38:	2965      	cmp	r1, #101	; 0x65
 801dd3a:	f103 33ff 	add.w	r3, r3, #4294967295
 801dd3e:	f106 35ff 	add.w	r5, r6, #4294967295
 801dd42:	6123      	str	r3, [r4, #16]
 801dd44:	d00c      	beq.n	801dd60 <_scanf_float+0x34c>
 801dd46:	2945      	cmp	r1, #69	; 0x45
 801dd48:	d00a      	beq.n	801dd60 <_scanf_float+0x34c>
 801dd4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd4e:	463a      	mov	r2, r7
 801dd50:	4640      	mov	r0, r8
 801dd52:	4798      	blx	r3
 801dd54:	6923      	ldr	r3, [r4, #16]
 801dd56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dd5a:	3b01      	subs	r3, #1
 801dd5c:	1eb5      	subs	r5, r6, #2
 801dd5e:	6123      	str	r3, [r4, #16]
 801dd60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dd64:	463a      	mov	r2, r7
 801dd66:	4640      	mov	r0, r8
 801dd68:	4798      	blx	r3
 801dd6a:	462e      	mov	r6, r5
 801dd6c:	6825      	ldr	r5, [r4, #0]
 801dd6e:	f015 0510 	ands.w	r5, r5, #16
 801dd72:	d158      	bne.n	801de26 <_scanf_float+0x412>
 801dd74:	7035      	strb	r5, [r6, #0]
 801dd76:	6823      	ldr	r3, [r4, #0]
 801dd78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801dd7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dd80:	d11c      	bne.n	801ddbc <_scanf_float+0x3a8>
 801dd82:	9b01      	ldr	r3, [sp, #4]
 801dd84:	454b      	cmp	r3, r9
 801dd86:	eba3 0209 	sub.w	r2, r3, r9
 801dd8a:	d124      	bne.n	801ddd6 <_scanf_float+0x3c2>
 801dd8c:	2200      	movs	r2, #0
 801dd8e:	4659      	mov	r1, fp
 801dd90:	4640      	mov	r0, r8
 801dd92:	f000 feaf 	bl	801eaf4 <_strtod_r>
 801dd96:	9b03      	ldr	r3, [sp, #12]
 801dd98:	6821      	ldr	r1, [r4, #0]
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	f011 0f02 	tst.w	r1, #2
 801dda0:	ec57 6b10 	vmov	r6, r7, d0
 801dda4:	f103 0204 	add.w	r2, r3, #4
 801dda8:	d020      	beq.n	801ddec <_scanf_float+0x3d8>
 801ddaa:	9903      	ldr	r1, [sp, #12]
 801ddac:	600a      	str	r2, [r1, #0]
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	e9c3 6700 	strd	r6, r7, [r3]
 801ddb4:	68e3      	ldr	r3, [r4, #12]
 801ddb6:	3301      	adds	r3, #1
 801ddb8:	60e3      	str	r3, [r4, #12]
 801ddba:	e66c      	b.n	801da96 <_scanf_float+0x82>
 801ddbc:	9b04      	ldr	r3, [sp, #16]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d0e4      	beq.n	801dd8c <_scanf_float+0x378>
 801ddc2:	9905      	ldr	r1, [sp, #20]
 801ddc4:	230a      	movs	r3, #10
 801ddc6:	462a      	mov	r2, r5
 801ddc8:	3101      	adds	r1, #1
 801ddca:	4640      	mov	r0, r8
 801ddcc:	f000 ff1c 	bl	801ec08 <_strtol_r>
 801ddd0:	9b04      	ldr	r3, [sp, #16]
 801ddd2:	9e05      	ldr	r6, [sp, #20]
 801ddd4:	1ac2      	subs	r2, r0, r3
 801ddd6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ddda:	429e      	cmp	r6, r3
 801dddc:	bf28      	it	cs
 801ddde:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801dde2:	4912      	ldr	r1, [pc, #72]	; (801de2c <_scanf_float+0x418>)
 801dde4:	4630      	mov	r0, r6
 801dde6:	f000 f82b 	bl	801de40 <siprintf>
 801ddea:	e7cf      	b.n	801dd8c <_scanf_float+0x378>
 801ddec:	f011 0f04 	tst.w	r1, #4
 801ddf0:	9903      	ldr	r1, [sp, #12]
 801ddf2:	600a      	str	r2, [r1, #0]
 801ddf4:	d1db      	bne.n	801ddae <_scanf_float+0x39a>
 801ddf6:	f8d3 8000 	ldr.w	r8, [r3]
 801ddfa:	ee10 2a10 	vmov	r2, s0
 801ddfe:	ee10 0a10 	vmov	r0, s0
 801de02:	463b      	mov	r3, r7
 801de04:	4639      	mov	r1, r7
 801de06:	f7e2 fea1 	bl	8000b4c <__aeabi_dcmpun>
 801de0a:	b128      	cbz	r0, 801de18 <_scanf_float+0x404>
 801de0c:	4808      	ldr	r0, [pc, #32]	; (801de30 <_scanf_float+0x41c>)
 801de0e:	f000 f811 	bl	801de34 <nanf>
 801de12:	ed88 0a00 	vstr	s0, [r8]
 801de16:	e7cd      	b.n	801ddb4 <_scanf_float+0x3a0>
 801de18:	4630      	mov	r0, r6
 801de1a:	4639      	mov	r1, r7
 801de1c:	f7e2 fef4 	bl	8000c08 <__aeabi_d2f>
 801de20:	f8c8 0000 	str.w	r0, [r8]
 801de24:	e7c6      	b.n	801ddb4 <_scanf_float+0x3a0>
 801de26:	2500      	movs	r5, #0
 801de28:	e635      	b.n	801da96 <_scanf_float+0x82>
 801de2a:	bf00      	nop
 801de2c:	0802b558 	.word	0x0802b558
 801de30:	0802b9d0 	.word	0x0802b9d0

0801de34 <nanf>:
 801de34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801de3c <nanf+0x8>
 801de38:	4770      	bx	lr
 801de3a:	bf00      	nop
 801de3c:	7fc00000 	.word	0x7fc00000

0801de40 <siprintf>:
 801de40:	b40e      	push	{r1, r2, r3}
 801de42:	b500      	push	{lr}
 801de44:	b09c      	sub	sp, #112	; 0x70
 801de46:	ab1d      	add	r3, sp, #116	; 0x74
 801de48:	9002      	str	r0, [sp, #8]
 801de4a:	9006      	str	r0, [sp, #24]
 801de4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801de50:	4809      	ldr	r0, [pc, #36]	; (801de78 <siprintf+0x38>)
 801de52:	9107      	str	r1, [sp, #28]
 801de54:	9104      	str	r1, [sp, #16]
 801de56:	4909      	ldr	r1, [pc, #36]	; (801de7c <siprintf+0x3c>)
 801de58:	f853 2b04 	ldr.w	r2, [r3], #4
 801de5c:	9105      	str	r1, [sp, #20]
 801de5e:	6800      	ldr	r0, [r0, #0]
 801de60:	9301      	str	r3, [sp, #4]
 801de62:	a902      	add	r1, sp, #8
 801de64:	f002 ffb0 	bl	8020dc8 <_svfiprintf_r>
 801de68:	9b02      	ldr	r3, [sp, #8]
 801de6a:	2200      	movs	r2, #0
 801de6c:	701a      	strb	r2, [r3, #0]
 801de6e:	b01c      	add	sp, #112	; 0x70
 801de70:	f85d eb04 	ldr.w	lr, [sp], #4
 801de74:	b003      	add	sp, #12
 801de76:	4770      	bx	lr
 801de78:	200006e4 	.word	0x200006e4
 801de7c:	ffff0208 	.word	0xffff0208

0801de80 <strncpy>:
 801de80:	b510      	push	{r4, lr}
 801de82:	3901      	subs	r1, #1
 801de84:	4603      	mov	r3, r0
 801de86:	b132      	cbz	r2, 801de96 <strncpy+0x16>
 801de88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801de8c:	f803 4b01 	strb.w	r4, [r3], #1
 801de90:	3a01      	subs	r2, #1
 801de92:	2c00      	cmp	r4, #0
 801de94:	d1f7      	bne.n	801de86 <strncpy+0x6>
 801de96:	441a      	add	r2, r3
 801de98:	2100      	movs	r1, #0
 801de9a:	4293      	cmp	r3, r2
 801de9c:	d100      	bne.n	801dea0 <strncpy+0x20>
 801de9e:	bd10      	pop	{r4, pc}
 801dea0:	f803 1b01 	strb.w	r1, [r3], #1
 801dea4:	e7f9      	b.n	801de9a <strncpy+0x1a>

0801dea6 <sulp>:
 801dea6:	b570      	push	{r4, r5, r6, lr}
 801dea8:	4604      	mov	r4, r0
 801deaa:	460d      	mov	r5, r1
 801deac:	ec45 4b10 	vmov	d0, r4, r5
 801deb0:	4616      	mov	r6, r2
 801deb2:	f002 fd25 	bl	8020900 <__ulp>
 801deb6:	ec51 0b10 	vmov	r0, r1, d0
 801deba:	b17e      	cbz	r6, 801dedc <sulp+0x36>
 801debc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dec0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	dd09      	ble.n	801dedc <sulp+0x36>
 801dec8:	051b      	lsls	r3, r3, #20
 801deca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dece:	2400      	movs	r4, #0
 801ded0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ded4:	4622      	mov	r2, r4
 801ded6:	462b      	mov	r3, r5
 801ded8:	f7e2 fb9e 	bl	8000618 <__aeabi_dmul>
 801dedc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dee0 <_strtod_l>:
 801dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee4:	b0a3      	sub	sp, #140	; 0x8c
 801dee6:	461f      	mov	r7, r3
 801dee8:	2300      	movs	r3, #0
 801deea:	931e      	str	r3, [sp, #120]	; 0x78
 801deec:	4ba4      	ldr	r3, [pc, #656]	; (801e180 <_strtod_l+0x2a0>)
 801deee:	9219      	str	r2, [sp, #100]	; 0x64
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	9307      	str	r3, [sp, #28]
 801def4:	4604      	mov	r4, r0
 801def6:	4618      	mov	r0, r3
 801def8:	4688      	mov	r8, r1
 801defa:	f7e2 f979 	bl	80001f0 <strlen>
 801defe:	f04f 0a00 	mov.w	sl, #0
 801df02:	4605      	mov	r5, r0
 801df04:	f04f 0b00 	mov.w	fp, #0
 801df08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801df0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df0e:	781a      	ldrb	r2, [r3, #0]
 801df10:	2a2b      	cmp	r2, #43	; 0x2b
 801df12:	d04c      	beq.n	801dfae <_strtod_l+0xce>
 801df14:	d839      	bhi.n	801df8a <_strtod_l+0xaa>
 801df16:	2a0d      	cmp	r2, #13
 801df18:	d832      	bhi.n	801df80 <_strtod_l+0xa0>
 801df1a:	2a08      	cmp	r2, #8
 801df1c:	d832      	bhi.n	801df84 <_strtod_l+0xa4>
 801df1e:	2a00      	cmp	r2, #0
 801df20:	d03c      	beq.n	801df9c <_strtod_l+0xbc>
 801df22:	2300      	movs	r3, #0
 801df24:	930e      	str	r3, [sp, #56]	; 0x38
 801df26:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801df28:	7833      	ldrb	r3, [r6, #0]
 801df2a:	2b30      	cmp	r3, #48	; 0x30
 801df2c:	f040 80b4 	bne.w	801e098 <_strtod_l+0x1b8>
 801df30:	7873      	ldrb	r3, [r6, #1]
 801df32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801df36:	2b58      	cmp	r3, #88	; 0x58
 801df38:	d16c      	bne.n	801e014 <_strtod_l+0x134>
 801df3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df3c:	9301      	str	r3, [sp, #4]
 801df3e:	ab1e      	add	r3, sp, #120	; 0x78
 801df40:	9702      	str	r7, [sp, #8]
 801df42:	9300      	str	r3, [sp, #0]
 801df44:	4a8f      	ldr	r2, [pc, #572]	; (801e184 <_strtod_l+0x2a4>)
 801df46:	ab1f      	add	r3, sp, #124	; 0x7c
 801df48:	a91d      	add	r1, sp, #116	; 0x74
 801df4a:	4620      	mov	r0, r4
 801df4c:	f001 fe34 	bl	801fbb8 <__gethex>
 801df50:	f010 0707 	ands.w	r7, r0, #7
 801df54:	4605      	mov	r5, r0
 801df56:	d005      	beq.n	801df64 <_strtod_l+0x84>
 801df58:	2f06      	cmp	r7, #6
 801df5a:	d12a      	bne.n	801dfb2 <_strtod_l+0xd2>
 801df5c:	3601      	adds	r6, #1
 801df5e:	2300      	movs	r3, #0
 801df60:	961d      	str	r6, [sp, #116]	; 0x74
 801df62:	930e      	str	r3, [sp, #56]	; 0x38
 801df64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801df66:	2b00      	cmp	r3, #0
 801df68:	f040 8596 	bne.w	801ea98 <_strtod_l+0xbb8>
 801df6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df6e:	b1db      	cbz	r3, 801dfa8 <_strtod_l+0xc8>
 801df70:	4652      	mov	r2, sl
 801df72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801df76:	ec43 2b10 	vmov	d0, r2, r3
 801df7a:	b023      	add	sp, #140	; 0x8c
 801df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df80:	2a20      	cmp	r2, #32
 801df82:	d1ce      	bne.n	801df22 <_strtod_l+0x42>
 801df84:	3301      	adds	r3, #1
 801df86:	931d      	str	r3, [sp, #116]	; 0x74
 801df88:	e7c0      	b.n	801df0c <_strtod_l+0x2c>
 801df8a:	2a2d      	cmp	r2, #45	; 0x2d
 801df8c:	d1c9      	bne.n	801df22 <_strtod_l+0x42>
 801df8e:	2201      	movs	r2, #1
 801df90:	920e      	str	r2, [sp, #56]	; 0x38
 801df92:	1c5a      	adds	r2, r3, #1
 801df94:	921d      	str	r2, [sp, #116]	; 0x74
 801df96:	785b      	ldrb	r3, [r3, #1]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d1c4      	bne.n	801df26 <_strtod_l+0x46>
 801df9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801df9e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	f040 8576 	bne.w	801ea94 <_strtod_l+0xbb4>
 801dfa8:	4652      	mov	r2, sl
 801dfaa:	465b      	mov	r3, fp
 801dfac:	e7e3      	b.n	801df76 <_strtod_l+0x96>
 801dfae:	2200      	movs	r2, #0
 801dfb0:	e7ee      	b.n	801df90 <_strtod_l+0xb0>
 801dfb2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801dfb4:	b13a      	cbz	r2, 801dfc6 <_strtod_l+0xe6>
 801dfb6:	2135      	movs	r1, #53	; 0x35
 801dfb8:	a820      	add	r0, sp, #128	; 0x80
 801dfba:	f002 fdac 	bl	8020b16 <__copybits>
 801dfbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	f002 f971 	bl	80202a8 <_Bfree>
 801dfc6:	3f01      	subs	r7, #1
 801dfc8:	2f05      	cmp	r7, #5
 801dfca:	d807      	bhi.n	801dfdc <_strtod_l+0xfc>
 801dfcc:	e8df f007 	tbb	[pc, r7]
 801dfd0:	1d180b0e 	.word	0x1d180b0e
 801dfd4:	030e      	.short	0x030e
 801dfd6:	f04f 0b00 	mov.w	fp, #0
 801dfda:	46da      	mov	sl, fp
 801dfdc:	0728      	lsls	r0, r5, #28
 801dfde:	d5c1      	bpl.n	801df64 <_strtod_l+0x84>
 801dfe0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801dfe4:	e7be      	b.n	801df64 <_strtod_l+0x84>
 801dfe6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801dfea:	e7f7      	b.n	801dfdc <_strtod_l+0xfc>
 801dfec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801dff0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801dff2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dff6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dffa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801dffe:	e7ed      	b.n	801dfdc <_strtod_l+0xfc>
 801e000:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e188 <_strtod_l+0x2a8>
 801e004:	f04f 0a00 	mov.w	sl, #0
 801e008:	e7e8      	b.n	801dfdc <_strtod_l+0xfc>
 801e00a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801e00e:	f04f 3aff 	mov.w	sl, #4294967295
 801e012:	e7e3      	b.n	801dfdc <_strtod_l+0xfc>
 801e014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e016:	1c5a      	adds	r2, r3, #1
 801e018:	921d      	str	r2, [sp, #116]	; 0x74
 801e01a:	785b      	ldrb	r3, [r3, #1]
 801e01c:	2b30      	cmp	r3, #48	; 0x30
 801e01e:	d0f9      	beq.n	801e014 <_strtod_l+0x134>
 801e020:	2b00      	cmp	r3, #0
 801e022:	d09f      	beq.n	801df64 <_strtod_l+0x84>
 801e024:	2301      	movs	r3, #1
 801e026:	f04f 0900 	mov.w	r9, #0
 801e02a:	9304      	str	r3, [sp, #16]
 801e02c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e02e:	930a      	str	r3, [sp, #40]	; 0x28
 801e030:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e034:	464f      	mov	r7, r9
 801e036:	220a      	movs	r2, #10
 801e038:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e03a:	7806      	ldrb	r6, [r0, #0]
 801e03c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801e040:	b2d9      	uxtb	r1, r3
 801e042:	2909      	cmp	r1, #9
 801e044:	d92a      	bls.n	801e09c <_strtod_l+0x1bc>
 801e046:	9907      	ldr	r1, [sp, #28]
 801e048:	462a      	mov	r2, r5
 801e04a:	f003 f818 	bl	802107e <strncmp>
 801e04e:	b398      	cbz	r0, 801e0b8 <_strtod_l+0x1d8>
 801e050:	2000      	movs	r0, #0
 801e052:	4633      	mov	r3, r6
 801e054:	463d      	mov	r5, r7
 801e056:	9007      	str	r0, [sp, #28]
 801e058:	4602      	mov	r2, r0
 801e05a:	2b65      	cmp	r3, #101	; 0x65
 801e05c:	d001      	beq.n	801e062 <_strtod_l+0x182>
 801e05e:	2b45      	cmp	r3, #69	; 0x45
 801e060:	d118      	bne.n	801e094 <_strtod_l+0x1b4>
 801e062:	b91d      	cbnz	r5, 801e06c <_strtod_l+0x18c>
 801e064:	9b04      	ldr	r3, [sp, #16]
 801e066:	4303      	orrs	r3, r0
 801e068:	d098      	beq.n	801df9c <_strtod_l+0xbc>
 801e06a:	2500      	movs	r5, #0
 801e06c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801e070:	f108 0301 	add.w	r3, r8, #1
 801e074:	931d      	str	r3, [sp, #116]	; 0x74
 801e076:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e07a:	2b2b      	cmp	r3, #43	; 0x2b
 801e07c:	d075      	beq.n	801e16a <_strtod_l+0x28a>
 801e07e:	2b2d      	cmp	r3, #45	; 0x2d
 801e080:	d07b      	beq.n	801e17a <_strtod_l+0x29a>
 801e082:	f04f 0c00 	mov.w	ip, #0
 801e086:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801e08a:	2909      	cmp	r1, #9
 801e08c:	f240 8082 	bls.w	801e194 <_strtod_l+0x2b4>
 801e090:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801e094:	2600      	movs	r6, #0
 801e096:	e09d      	b.n	801e1d4 <_strtod_l+0x2f4>
 801e098:	2300      	movs	r3, #0
 801e09a:	e7c4      	b.n	801e026 <_strtod_l+0x146>
 801e09c:	2f08      	cmp	r7, #8
 801e09e:	bfd8      	it	le
 801e0a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801e0a2:	f100 0001 	add.w	r0, r0, #1
 801e0a6:	bfda      	itte	le
 801e0a8:	fb02 3301 	mlale	r3, r2, r1, r3
 801e0ac:	9309      	strle	r3, [sp, #36]	; 0x24
 801e0ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 801e0b2:	3701      	adds	r7, #1
 801e0b4:	901d      	str	r0, [sp, #116]	; 0x74
 801e0b6:	e7bf      	b.n	801e038 <_strtod_l+0x158>
 801e0b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0ba:	195a      	adds	r2, r3, r5
 801e0bc:	921d      	str	r2, [sp, #116]	; 0x74
 801e0be:	5d5b      	ldrb	r3, [r3, r5]
 801e0c0:	2f00      	cmp	r7, #0
 801e0c2:	d037      	beq.n	801e134 <_strtod_l+0x254>
 801e0c4:	9007      	str	r0, [sp, #28]
 801e0c6:	463d      	mov	r5, r7
 801e0c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801e0cc:	2a09      	cmp	r2, #9
 801e0ce:	d912      	bls.n	801e0f6 <_strtod_l+0x216>
 801e0d0:	2201      	movs	r2, #1
 801e0d2:	e7c2      	b.n	801e05a <_strtod_l+0x17a>
 801e0d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0d6:	1c5a      	adds	r2, r3, #1
 801e0d8:	921d      	str	r2, [sp, #116]	; 0x74
 801e0da:	785b      	ldrb	r3, [r3, #1]
 801e0dc:	3001      	adds	r0, #1
 801e0de:	2b30      	cmp	r3, #48	; 0x30
 801e0e0:	d0f8      	beq.n	801e0d4 <_strtod_l+0x1f4>
 801e0e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801e0e6:	2a08      	cmp	r2, #8
 801e0e8:	f200 84db 	bhi.w	801eaa2 <_strtod_l+0xbc2>
 801e0ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e0ee:	9007      	str	r0, [sp, #28]
 801e0f0:	2000      	movs	r0, #0
 801e0f2:	920a      	str	r2, [sp, #40]	; 0x28
 801e0f4:	4605      	mov	r5, r0
 801e0f6:	3b30      	subs	r3, #48	; 0x30
 801e0f8:	f100 0201 	add.w	r2, r0, #1
 801e0fc:	d014      	beq.n	801e128 <_strtod_l+0x248>
 801e0fe:	9907      	ldr	r1, [sp, #28]
 801e100:	4411      	add	r1, r2
 801e102:	9107      	str	r1, [sp, #28]
 801e104:	462a      	mov	r2, r5
 801e106:	eb00 0e05 	add.w	lr, r0, r5
 801e10a:	210a      	movs	r1, #10
 801e10c:	4572      	cmp	r2, lr
 801e10e:	d113      	bne.n	801e138 <_strtod_l+0x258>
 801e110:	182a      	adds	r2, r5, r0
 801e112:	2a08      	cmp	r2, #8
 801e114:	f105 0501 	add.w	r5, r5, #1
 801e118:	4405      	add	r5, r0
 801e11a:	dc1c      	bgt.n	801e156 <_strtod_l+0x276>
 801e11c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e11e:	220a      	movs	r2, #10
 801e120:	fb02 3301 	mla	r3, r2, r1, r3
 801e124:	9309      	str	r3, [sp, #36]	; 0x24
 801e126:	2200      	movs	r2, #0
 801e128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e12a:	1c59      	adds	r1, r3, #1
 801e12c:	911d      	str	r1, [sp, #116]	; 0x74
 801e12e:	785b      	ldrb	r3, [r3, #1]
 801e130:	4610      	mov	r0, r2
 801e132:	e7c9      	b.n	801e0c8 <_strtod_l+0x1e8>
 801e134:	4638      	mov	r0, r7
 801e136:	e7d2      	b.n	801e0de <_strtod_l+0x1fe>
 801e138:	2a08      	cmp	r2, #8
 801e13a:	dc04      	bgt.n	801e146 <_strtod_l+0x266>
 801e13c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e13e:	434e      	muls	r6, r1
 801e140:	9609      	str	r6, [sp, #36]	; 0x24
 801e142:	3201      	adds	r2, #1
 801e144:	e7e2      	b.n	801e10c <_strtod_l+0x22c>
 801e146:	f102 0c01 	add.w	ip, r2, #1
 801e14a:	f1bc 0f10 	cmp.w	ip, #16
 801e14e:	bfd8      	it	le
 801e150:	fb01 f909 	mulle.w	r9, r1, r9
 801e154:	e7f5      	b.n	801e142 <_strtod_l+0x262>
 801e156:	2d10      	cmp	r5, #16
 801e158:	bfdc      	itt	le
 801e15a:	220a      	movle	r2, #10
 801e15c:	fb02 3909 	mlale	r9, r2, r9, r3
 801e160:	e7e1      	b.n	801e126 <_strtod_l+0x246>
 801e162:	2300      	movs	r3, #0
 801e164:	9307      	str	r3, [sp, #28]
 801e166:	2201      	movs	r2, #1
 801e168:	e77c      	b.n	801e064 <_strtod_l+0x184>
 801e16a:	f04f 0c00 	mov.w	ip, #0
 801e16e:	f108 0302 	add.w	r3, r8, #2
 801e172:	931d      	str	r3, [sp, #116]	; 0x74
 801e174:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e178:	e785      	b.n	801e086 <_strtod_l+0x1a6>
 801e17a:	f04f 0c01 	mov.w	ip, #1
 801e17e:	e7f6      	b.n	801e16e <_strtod_l+0x28e>
 801e180:	0802b814 	.word	0x0802b814
 801e184:	0802b560 	.word	0x0802b560
 801e188:	7ff00000 	.word	0x7ff00000
 801e18c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e18e:	1c59      	adds	r1, r3, #1
 801e190:	911d      	str	r1, [sp, #116]	; 0x74
 801e192:	785b      	ldrb	r3, [r3, #1]
 801e194:	2b30      	cmp	r3, #48	; 0x30
 801e196:	d0f9      	beq.n	801e18c <_strtod_l+0x2ac>
 801e198:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e19c:	2908      	cmp	r1, #8
 801e19e:	f63f af79 	bhi.w	801e094 <_strtod_l+0x1b4>
 801e1a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e1a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1a8:	9308      	str	r3, [sp, #32]
 801e1aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1ac:	1c59      	adds	r1, r3, #1
 801e1ae:	911d      	str	r1, [sp, #116]	; 0x74
 801e1b0:	785b      	ldrb	r3, [r3, #1]
 801e1b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e1b6:	2e09      	cmp	r6, #9
 801e1b8:	d937      	bls.n	801e22a <_strtod_l+0x34a>
 801e1ba:	9e08      	ldr	r6, [sp, #32]
 801e1bc:	1b89      	subs	r1, r1, r6
 801e1be:	2908      	cmp	r1, #8
 801e1c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e1c4:	dc02      	bgt.n	801e1cc <_strtod_l+0x2ec>
 801e1c6:	4576      	cmp	r6, lr
 801e1c8:	bfa8      	it	ge
 801e1ca:	4676      	movge	r6, lr
 801e1cc:	f1bc 0f00 	cmp.w	ip, #0
 801e1d0:	d000      	beq.n	801e1d4 <_strtod_l+0x2f4>
 801e1d2:	4276      	negs	r6, r6
 801e1d4:	2d00      	cmp	r5, #0
 801e1d6:	d14f      	bne.n	801e278 <_strtod_l+0x398>
 801e1d8:	9904      	ldr	r1, [sp, #16]
 801e1da:	4301      	orrs	r1, r0
 801e1dc:	f47f aec2 	bne.w	801df64 <_strtod_l+0x84>
 801e1e0:	2a00      	cmp	r2, #0
 801e1e2:	f47f aedb 	bne.w	801df9c <_strtod_l+0xbc>
 801e1e6:	2b69      	cmp	r3, #105	; 0x69
 801e1e8:	d027      	beq.n	801e23a <_strtod_l+0x35a>
 801e1ea:	dc24      	bgt.n	801e236 <_strtod_l+0x356>
 801e1ec:	2b49      	cmp	r3, #73	; 0x49
 801e1ee:	d024      	beq.n	801e23a <_strtod_l+0x35a>
 801e1f0:	2b4e      	cmp	r3, #78	; 0x4e
 801e1f2:	f47f aed3 	bne.w	801df9c <_strtod_l+0xbc>
 801e1f6:	499e      	ldr	r1, [pc, #632]	; (801e470 <_strtod_l+0x590>)
 801e1f8:	a81d      	add	r0, sp, #116	; 0x74
 801e1fa:	f001 ff35 	bl	8020068 <__match>
 801e1fe:	2800      	cmp	r0, #0
 801e200:	f43f aecc 	beq.w	801df9c <_strtod_l+0xbc>
 801e204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e206:	781b      	ldrb	r3, [r3, #0]
 801e208:	2b28      	cmp	r3, #40	; 0x28
 801e20a:	d12d      	bne.n	801e268 <_strtod_l+0x388>
 801e20c:	4999      	ldr	r1, [pc, #612]	; (801e474 <_strtod_l+0x594>)
 801e20e:	aa20      	add	r2, sp, #128	; 0x80
 801e210:	a81d      	add	r0, sp, #116	; 0x74
 801e212:	f001 ff3d 	bl	8020090 <__hexnan>
 801e216:	2805      	cmp	r0, #5
 801e218:	d126      	bne.n	801e268 <_strtod_l+0x388>
 801e21a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e21c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e220:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e224:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e228:	e69c      	b.n	801df64 <_strtod_l+0x84>
 801e22a:	210a      	movs	r1, #10
 801e22c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e230:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e234:	e7b9      	b.n	801e1aa <_strtod_l+0x2ca>
 801e236:	2b6e      	cmp	r3, #110	; 0x6e
 801e238:	e7db      	b.n	801e1f2 <_strtod_l+0x312>
 801e23a:	498f      	ldr	r1, [pc, #572]	; (801e478 <_strtod_l+0x598>)
 801e23c:	a81d      	add	r0, sp, #116	; 0x74
 801e23e:	f001 ff13 	bl	8020068 <__match>
 801e242:	2800      	cmp	r0, #0
 801e244:	f43f aeaa 	beq.w	801df9c <_strtod_l+0xbc>
 801e248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e24a:	498c      	ldr	r1, [pc, #560]	; (801e47c <_strtod_l+0x59c>)
 801e24c:	3b01      	subs	r3, #1
 801e24e:	a81d      	add	r0, sp, #116	; 0x74
 801e250:	931d      	str	r3, [sp, #116]	; 0x74
 801e252:	f001 ff09 	bl	8020068 <__match>
 801e256:	b910      	cbnz	r0, 801e25e <_strtod_l+0x37e>
 801e258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e25a:	3301      	adds	r3, #1
 801e25c:	931d      	str	r3, [sp, #116]	; 0x74
 801e25e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e48c <_strtod_l+0x5ac>
 801e262:	f04f 0a00 	mov.w	sl, #0
 801e266:	e67d      	b.n	801df64 <_strtod_l+0x84>
 801e268:	4885      	ldr	r0, [pc, #532]	; (801e480 <_strtod_l+0x5a0>)
 801e26a:	f002 fead 	bl	8020fc8 <nan>
 801e26e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e272:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e276:	e675      	b.n	801df64 <_strtod_l+0x84>
 801e278:	9b07      	ldr	r3, [sp, #28]
 801e27a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e27c:	1af3      	subs	r3, r6, r3
 801e27e:	2f00      	cmp	r7, #0
 801e280:	bf08      	it	eq
 801e282:	462f      	moveq	r7, r5
 801e284:	2d10      	cmp	r5, #16
 801e286:	9308      	str	r3, [sp, #32]
 801e288:	46a8      	mov	r8, r5
 801e28a:	bfa8      	it	ge
 801e28c:	f04f 0810 	movge.w	r8, #16
 801e290:	f7e2 f948 	bl	8000524 <__aeabi_ui2d>
 801e294:	2d09      	cmp	r5, #9
 801e296:	4682      	mov	sl, r0
 801e298:	468b      	mov	fp, r1
 801e29a:	dd13      	ble.n	801e2c4 <_strtod_l+0x3e4>
 801e29c:	4b79      	ldr	r3, [pc, #484]	; (801e484 <_strtod_l+0x5a4>)
 801e29e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e2a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e2a6:	f7e2 f9b7 	bl	8000618 <__aeabi_dmul>
 801e2aa:	4682      	mov	sl, r0
 801e2ac:	4648      	mov	r0, r9
 801e2ae:	468b      	mov	fp, r1
 801e2b0:	f7e2 f938 	bl	8000524 <__aeabi_ui2d>
 801e2b4:	4602      	mov	r2, r0
 801e2b6:	460b      	mov	r3, r1
 801e2b8:	4650      	mov	r0, sl
 801e2ba:	4659      	mov	r1, fp
 801e2bc:	f7e1 fff6 	bl	80002ac <__adddf3>
 801e2c0:	4682      	mov	sl, r0
 801e2c2:	468b      	mov	fp, r1
 801e2c4:	2d0f      	cmp	r5, #15
 801e2c6:	dc38      	bgt.n	801e33a <_strtod_l+0x45a>
 801e2c8:	9b08      	ldr	r3, [sp, #32]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	f43f ae4a 	beq.w	801df64 <_strtod_l+0x84>
 801e2d0:	dd24      	ble.n	801e31c <_strtod_l+0x43c>
 801e2d2:	2b16      	cmp	r3, #22
 801e2d4:	dc0b      	bgt.n	801e2ee <_strtod_l+0x40e>
 801e2d6:	4d6b      	ldr	r5, [pc, #428]	; (801e484 <_strtod_l+0x5a4>)
 801e2d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e2dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e2e0:	4652      	mov	r2, sl
 801e2e2:	465b      	mov	r3, fp
 801e2e4:	f7e2 f998 	bl	8000618 <__aeabi_dmul>
 801e2e8:	4682      	mov	sl, r0
 801e2ea:	468b      	mov	fp, r1
 801e2ec:	e63a      	b.n	801df64 <_strtod_l+0x84>
 801e2ee:	9a08      	ldr	r2, [sp, #32]
 801e2f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e2f4:	4293      	cmp	r3, r2
 801e2f6:	db20      	blt.n	801e33a <_strtod_l+0x45a>
 801e2f8:	4c62      	ldr	r4, [pc, #392]	; (801e484 <_strtod_l+0x5a4>)
 801e2fa:	f1c5 050f 	rsb	r5, r5, #15
 801e2fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e302:	4652      	mov	r2, sl
 801e304:	465b      	mov	r3, fp
 801e306:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e30a:	f7e2 f985 	bl	8000618 <__aeabi_dmul>
 801e30e:	9b08      	ldr	r3, [sp, #32]
 801e310:	1b5d      	subs	r5, r3, r5
 801e312:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e316:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e31a:	e7e3      	b.n	801e2e4 <_strtod_l+0x404>
 801e31c:	9b08      	ldr	r3, [sp, #32]
 801e31e:	3316      	adds	r3, #22
 801e320:	db0b      	blt.n	801e33a <_strtod_l+0x45a>
 801e322:	9b07      	ldr	r3, [sp, #28]
 801e324:	4a57      	ldr	r2, [pc, #348]	; (801e484 <_strtod_l+0x5a4>)
 801e326:	1b9e      	subs	r6, r3, r6
 801e328:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e32c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e330:	4650      	mov	r0, sl
 801e332:	4659      	mov	r1, fp
 801e334:	f7e2 fa9a 	bl	800086c <__aeabi_ddiv>
 801e338:	e7d6      	b.n	801e2e8 <_strtod_l+0x408>
 801e33a:	9b08      	ldr	r3, [sp, #32]
 801e33c:	eba5 0808 	sub.w	r8, r5, r8
 801e340:	4498      	add	r8, r3
 801e342:	f1b8 0f00 	cmp.w	r8, #0
 801e346:	dd71      	ble.n	801e42c <_strtod_l+0x54c>
 801e348:	f018 030f 	ands.w	r3, r8, #15
 801e34c:	d00a      	beq.n	801e364 <_strtod_l+0x484>
 801e34e:	494d      	ldr	r1, [pc, #308]	; (801e484 <_strtod_l+0x5a4>)
 801e350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e354:	4652      	mov	r2, sl
 801e356:	465b      	mov	r3, fp
 801e358:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e35c:	f7e2 f95c 	bl	8000618 <__aeabi_dmul>
 801e360:	4682      	mov	sl, r0
 801e362:	468b      	mov	fp, r1
 801e364:	f038 080f 	bics.w	r8, r8, #15
 801e368:	d04d      	beq.n	801e406 <_strtod_l+0x526>
 801e36a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e36e:	dd22      	ble.n	801e3b6 <_strtod_l+0x4d6>
 801e370:	2500      	movs	r5, #0
 801e372:	462e      	mov	r6, r5
 801e374:	9509      	str	r5, [sp, #36]	; 0x24
 801e376:	9507      	str	r5, [sp, #28]
 801e378:	2322      	movs	r3, #34	; 0x22
 801e37a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e48c <_strtod_l+0x5ac>
 801e37e:	6023      	str	r3, [r4, #0]
 801e380:	f04f 0a00 	mov.w	sl, #0
 801e384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e386:	2b00      	cmp	r3, #0
 801e388:	f43f adec 	beq.w	801df64 <_strtod_l+0x84>
 801e38c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e38e:	4620      	mov	r0, r4
 801e390:	f001 ff8a 	bl	80202a8 <_Bfree>
 801e394:	9907      	ldr	r1, [sp, #28]
 801e396:	4620      	mov	r0, r4
 801e398:	f001 ff86 	bl	80202a8 <_Bfree>
 801e39c:	4631      	mov	r1, r6
 801e39e:	4620      	mov	r0, r4
 801e3a0:	f001 ff82 	bl	80202a8 <_Bfree>
 801e3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e3a6:	4620      	mov	r0, r4
 801e3a8:	f001 ff7e 	bl	80202a8 <_Bfree>
 801e3ac:	4629      	mov	r1, r5
 801e3ae:	4620      	mov	r0, r4
 801e3b0:	f001 ff7a 	bl	80202a8 <_Bfree>
 801e3b4:	e5d6      	b.n	801df64 <_strtod_l+0x84>
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e3bc:	4650      	mov	r0, sl
 801e3be:	4659      	mov	r1, fp
 801e3c0:	4699      	mov	r9, r3
 801e3c2:	f1b8 0f01 	cmp.w	r8, #1
 801e3c6:	dc21      	bgt.n	801e40c <_strtod_l+0x52c>
 801e3c8:	b10b      	cbz	r3, 801e3ce <_strtod_l+0x4ee>
 801e3ca:	4682      	mov	sl, r0
 801e3cc:	468b      	mov	fp, r1
 801e3ce:	4b2e      	ldr	r3, [pc, #184]	; (801e488 <_strtod_l+0x5a8>)
 801e3d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e3d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e3d8:	4652      	mov	r2, sl
 801e3da:	465b      	mov	r3, fp
 801e3dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e3e0:	f7e2 f91a 	bl	8000618 <__aeabi_dmul>
 801e3e4:	4b29      	ldr	r3, [pc, #164]	; (801e48c <_strtod_l+0x5ac>)
 801e3e6:	460a      	mov	r2, r1
 801e3e8:	400b      	ands	r3, r1
 801e3ea:	4929      	ldr	r1, [pc, #164]	; (801e490 <_strtod_l+0x5b0>)
 801e3ec:	428b      	cmp	r3, r1
 801e3ee:	4682      	mov	sl, r0
 801e3f0:	d8be      	bhi.n	801e370 <_strtod_l+0x490>
 801e3f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e3f6:	428b      	cmp	r3, r1
 801e3f8:	bf86      	itte	hi
 801e3fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e494 <_strtod_l+0x5b4>
 801e3fe:	f04f 3aff 	movhi.w	sl, #4294967295
 801e402:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e406:	2300      	movs	r3, #0
 801e408:	9304      	str	r3, [sp, #16]
 801e40a:	e081      	b.n	801e510 <_strtod_l+0x630>
 801e40c:	f018 0f01 	tst.w	r8, #1
 801e410:	d007      	beq.n	801e422 <_strtod_l+0x542>
 801e412:	4b1d      	ldr	r3, [pc, #116]	; (801e488 <_strtod_l+0x5a8>)
 801e414:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e41c:	f7e2 f8fc 	bl	8000618 <__aeabi_dmul>
 801e420:	2301      	movs	r3, #1
 801e422:	f109 0901 	add.w	r9, r9, #1
 801e426:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e42a:	e7ca      	b.n	801e3c2 <_strtod_l+0x4e2>
 801e42c:	d0eb      	beq.n	801e406 <_strtod_l+0x526>
 801e42e:	f1c8 0800 	rsb	r8, r8, #0
 801e432:	f018 020f 	ands.w	r2, r8, #15
 801e436:	d00a      	beq.n	801e44e <_strtod_l+0x56e>
 801e438:	4b12      	ldr	r3, [pc, #72]	; (801e484 <_strtod_l+0x5a4>)
 801e43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e43e:	4650      	mov	r0, sl
 801e440:	4659      	mov	r1, fp
 801e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e446:	f7e2 fa11 	bl	800086c <__aeabi_ddiv>
 801e44a:	4682      	mov	sl, r0
 801e44c:	468b      	mov	fp, r1
 801e44e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e452:	d0d8      	beq.n	801e406 <_strtod_l+0x526>
 801e454:	f1b8 0f1f 	cmp.w	r8, #31
 801e458:	dd1e      	ble.n	801e498 <_strtod_l+0x5b8>
 801e45a:	2500      	movs	r5, #0
 801e45c:	462e      	mov	r6, r5
 801e45e:	9509      	str	r5, [sp, #36]	; 0x24
 801e460:	9507      	str	r5, [sp, #28]
 801e462:	2322      	movs	r3, #34	; 0x22
 801e464:	f04f 0a00 	mov.w	sl, #0
 801e468:	f04f 0b00 	mov.w	fp, #0
 801e46c:	6023      	str	r3, [r4, #0]
 801e46e:	e789      	b.n	801e384 <_strtod_l+0x4a4>
 801e470:	0802b531 	.word	0x0802b531
 801e474:	0802b574 	.word	0x0802b574
 801e478:	0802b529 	.word	0x0802b529
 801e47c:	0802b6b4 	.word	0x0802b6b4
 801e480:	0802b9d0 	.word	0x0802b9d0
 801e484:	0802b8b0 	.word	0x0802b8b0
 801e488:	0802b888 	.word	0x0802b888
 801e48c:	7ff00000 	.word	0x7ff00000
 801e490:	7ca00000 	.word	0x7ca00000
 801e494:	7fefffff 	.word	0x7fefffff
 801e498:	f018 0310 	ands.w	r3, r8, #16
 801e49c:	bf18      	it	ne
 801e49e:	236a      	movne	r3, #106	; 0x6a
 801e4a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e858 <_strtod_l+0x978>
 801e4a4:	9304      	str	r3, [sp, #16]
 801e4a6:	4650      	mov	r0, sl
 801e4a8:	4659      	mov	r1, fp
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	f018 0f01 	tst.w	r8, #1
 801e4b0:	d004      	beq.n	801e4bc <_strtod_l+0x5dc>
 801e4b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e4b6:	f7e2 f8af 	bl	8000618 <__aeabi_dmul>
 801e4ba:	2301      	movs	r3, #1
 801e4bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e4c0:	f109 0908 	add.w	r9, r9, #8
 801e4c4:	d1f2      	bne.n	801e4ac <_strtod_l+0x5cc>
 801e4c6:	b10b      	cbz	r3, 801e4cc <_strtod_l+0x5ec>
 801e4c8:	4682      	mov	sl, r0
 801e4ca:	468b      	mov	fp, r1
 801e4cc:	9b04      	ldr	r3, [sp, #16]
 801e4ce:	b1bb      	cbz	r3, 801e500 <_strtod_l+0x620>
 801e4d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e4d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	4659      	mov	r1, fp
 801e4dc:	dd10      	ble.n	801e500 <_strtod_l+0x620>
 801e4de:	2b1f      	cmp	r3, #31
 801e4e0:	f340 8128 	ble.w	801e734 <_strtod_l+0x854>
 801e4e4:	2b34      	cmp	r3, #52	; 0x34
 801e4e6:	bfde      	ittt	le
 801e4e8:	3b20      	suble	r3, #32
 801e4ea:	f04f 32ff 	movle.w	r2, #4294967295
 801e4ee:	fa02 f303 	lslle.w	r3, r2, r3
 801e4f2:	f04f 0a00 	mov.w	sl, #0
 801e4f6:	bfcc      	ite	gt
 801e4f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e4fc:	ea03 0b01 	andle.w	fp, r3, r1
 801e500:	2200      	movs	r2, #0
 801e502:	2300      	movs	r3, #0
 801e504:	4650      	mov	r0, sl
 801e506:	4659      	mov	r1, fp
 801e508:	f7e2 faee 	bl	8000ae8 <__aeabi_dcmpeq>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	d1a4      	bne.n	801e45a <_strtod_l+0x57a>
 801e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e512:	9300      	str	r3, [sp, #0]
 801e514:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e516:	462b      	mov	r3, r5
 801e518:	463a      	mov	r2, r7
 801e51a:	4620      	mov	r0, r4
 801e51c:	f001 ff30 	bl	8020380 <__s2b>
 801e520:	9009      	str	r0, [sp, #36]	; 0x24
 801e522:	2800      	cmp	r0, #0
 801e524:	f43f af24 	beq.w	801e370 <_strtod_l+0x490>
 801e528:	9b07      	ldr	r3, [sp, #28]
 801e52a:	1b9e      	subs	r6, r3, r6
 801e52c:	9b08      	ldr	r3, [sp, #32]
 801e52e:	2b00      	cmp	r3, #0
 801e530:	bfb4      	ite	lt
 801e532:	4633      	movlt	r3, r6
 801e534:	2300      	movge	r3, #0
 801e536:	9310      	str	r3, [sp, #64]	; 0x40
 801e538:	9b08      	ldr	r3, [sp, #32]
 801e53a:	2500      	movs	r5, #0
 801e53c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e540:	9318      	str	r3, [sp, #96]	; 0x60
 801e542:	462e      	mov	r6, r5
 801e544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e546:	4620      	mov	r0, r4
 801e548:	6859      	ldr	r1, [r3, #4]
 801e54a:	f001 fe6d 	bl	8020228 <_Balloc>
 801e54e:	9007      	str	r0, [sp, #28]
 801e550:	2800      	cmp	r0, #0
 801e552:	f43f af11 	beq.w	801e378 <_strtod_l+0x498>
 801e556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e558:	691a      	ldr	r2, [r3, #16]
 801e55a:	3202      	adds	r2, #2
 801e55c:	f103 010c 	add.w	r1, r3, #12
 801e560:	0092      	lsls	r2, r2, #2
 801e562:	300c      	adds	r0, #12
 801e564:	f001 fe52 	bl	802020c <memcpy>
 801e568:	ec4b ab10 	vmov	d0, sl, fp
 801e56c:	aa20      	add	r2, sp, #128	; 0x80
 801e56e:	a91f      	add	r1, sp, #124	; 0x7c
 801e570:	4620      	mov	r0, r4
 801e572:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e576:	f002 fa3f 	bl	80209f8 <__d2b>
 801e57a:	901e      	str	r0, [sp, #120]	; 0x78
 801e57c:	2800      	cmp	r0, #0
 801e57e:	f43f aefb 	beq.w	801e378 <_strtod_l+0x498>
 801e582:	2101      	movs	r1, #1
 801e584:	4620      	mov	r0, r4
 801e586:	f001 ff95 	bl	80204b4 <__i2b>
 801e58a:	4606      	mov	r6, r0
 801e58c:	2800      	cmp	r0, #0
 801e58e:	f43f aef3 	beq.w	801e378 <_strtod_l+0x498>
 801e592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e594:	9904      	ldr	r1, [sp, #16]
 801e596:	2b00      	cmp	r3, #0
 801e598:	bfab      	itete	ge
 801e59a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e59c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e59e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e5a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e5a4:	bfac      	ite	ge
 801e5a6:	eb03 0902 	addge.w	r9, r3, r2
 801e5aa:	1ad7      	sublt	r7, r2, r3
 801e5ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e5ae:	eba3 0801 	sub.w	r8, r3, r1
 801e5b2:	4490      	add	r8, r2
 801e5b4:	4ba3      	ldr	r3, [pc, #652]	; (801e844 <_strtod_l+0x964>)
 801e5b6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5ba:	4598      	cmp	r8, r3
 801e5bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e5c0:	f280 80cc 	bge.w	801e75c <_strtod_l+0x87c>
 801e5c4:	eba3 0308 	sub.w	r3, r3, r8
 801e5c8:	2b1f      	cmp	r3, #31
 801e5ca:	eba2 0203 	sub.w	r2, r2, r3
 801e5ce:	f04f 0101 	mov.w	r1, #1
 801e5d2:	f300 80b6 	bgt.w	801e742 <_strtod_l+0x862>
 801e5d6:	fa01 f303 	lsl.w	r3, r1, r3
 801e5da:	9311      	str	r3, [sp, #68]	; 0x44
 801e5dc:	2300      	movs	r3, #0
 801e5de:	930c      	str	r3, [sp, #48]	; 0x30
 801e5e0:	eb09 0802 	add.w	r8, r9, r2
 801e5e4:	9b04      	ldr	r3, [sp, #16]
 801e5e6:	45c1      	cmp	r9, r8
 801e5e8:	4417      	add	r7, r2
 801e5ea:	441f      	add	r7, r3
 801e5ec:	464b      	mov	r3, r9
 801e5ee:	bfa8      	it	ge
 801e5f0:	4643      	movge	r3, r8
 801e5f2:	42bb      	cmp	r3, r7
 801e5f4:	bfa8      	it	ge
 801e5f6:	463b      	movge	r3, r7
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	bfc2      	ittt	gt
 801e5fc:	eba8 0803 	subgt.w	r8, r8, r3
 801e600:	1aff      	subgt	r7, r7, r3
 801e602:	eba9 0903 	subgt.w	r9, r9, r3
 801e606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e608:	2b00      	cmp	r3, #0
 801e60a:	dd17      	ble.n	801e63c <_strtod_l+0x75c>
 801e60c:	4631      	mov	r1, r6
 801e60e:	461a      	mov	r2, r3
 801e610:	4620      	mov	r0, r4
 801e612:	f002 f80b 	bl	802062c <__pow5mult>
 801e616:	4606      	mov	r6, r0
 801e618:	2800      	cmp	r0, #0
 801e61a:	f43f aead 	beq.w	801e378 <_strtod_l+0x498>
 801e61e:	4601      	mov	r1, r0
 801e620:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e622:	4620      	mov	r0, r4
 801e624:	f001 ff5c 	bl	80204e0 <__multiply>
 801e628:	900f      	str	r0, [sp, #60]	; 0x3c
 801e62a:	2800      	cmp	r0, #0
 801e62c:	f43f aea4 	beq.w	801e378 <_strtod_l+0x498>
 801e630:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e632:	4620      	mov	r0, r4
 801e634:	f001 fe38 	bl	80202a8 <_Bfree>
 801e638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e63a:	931e      	str	r3, [sp, #120]	; 0x78
 801e63c:	f1b8 0f00 	cmp.w	r8, #0
 801e640:	f300 8091 	bgt.w	801e766 <_strtod_l+0x886>
 801e644:	9b08      	ldr	r3, [sp, #32]
 801e646:	2b00      	cmp	r3, #0
 801e648:	dd08      	ble.n	801e65c <_strtod_l+0x77c>
 801e64a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e64c:	9907      	ldr	r1, [sp, #28]
 801e64e:	4620      	mov	r0, r4
 801e650:	f001 ffec 	bl	802062c <__pow5mult>
 801e654:	9007      	str	r0, [sp, #28]
 801e656:	2800      	cmp	r0, #0
 801e658:	f43f ae8e 	beq.w	801e378 <_strtod_l+0x498>
 801e65c:	2f00      	cmp	r7, #0
 801e65e:	dd08      	ble.n	801e672 <_strtod_l+0x792>
 801e660:	9907      	ldr	r1, [sp, #28]
 801e662:	463a      	mov	r2, r7
 801e664:	4620      	mov	r0, r4
 801e666:	f002 f83b 	bl	80206e0 <__lshift>
 801e66a:	9007      	str	r0, [sp, #28]
 801e66c:	2800      	cmp	r0, #0
 801e66e:	f43f ae83 	beq.w	801e378 <_strtod_l+0x498>
 801e672:	f1b9 0f00 	cmp.w	r9, #0
 801e676:	dd08      	ble.n	801e68a <_strtod_l+0x7aa>
 801e678:	4631      	mov	r1, r6
 801e67a:	464a      	mov	r2, r9
 801e67c:	4620      	mov	r0, r4
 801e67e:	f002 f82f 	bl	80206e0 <__lshift>
 801e682:	4606      	mov	r6, r0
 801e684:	2800      	cmp	r0, #0
 801e686:	f43f ae77 	beq.w	801e378 <_strtod_l+0x498>
 801e68a:	9a07      	ldr	r2, [sp, #28]
 801e68c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e68e:	4620      	mov	r0, r4
 801e690:	f002 f8ae 	bl	80207f0 <__mdiff>
 801e694:	4605      	mov	r5, r0
 801e696:	2800      	cmp	r0, #0
 801e698:	f43f ae6e 	beq.w	801e378 <_strtod_l+0x498>
 801e69c:	68c3      	ldr	r3, [r0, #12]
 801e69e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	60c3      	str	r3, [r0, #12]
 801e6a4:	4631      	mov	r1, r6
 801e6a6:	f002 f887 	bl	80207b8 <__mcmp>
 801e6aa:	2800      	cmp	r0, #0
 801e6ac:	da65      	bge.n	801e77a <_strtod_l+0x89a>
 801e6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e6b0:	ea53 030a 	orrs.w	r3, r3, sl
 801e6b4:	f040 8087 	bne.w	801e7c6 <_strtod_l+0x8e6>
 801e6b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	f040 8082 	bne.w	801e7c6 <_strtod_l+0x8e6>
 801e6c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e6c6:	0d1b      	lsrs	r3, r3, #20
 801e6c8:	051b      	lsls	r3, r3, #20
 801e6ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e6ce:	d97a      	bls.n	801e7c6 <_strtod_l+0x8e6>
 801e6d0:	696b      	ldr	r3, [r5, #20]
 801e6d2:	b913      	cbnz	r3, 801e6da <_strtod_l+0x7fa>
 801e6d4:	692b      	ldr	r3, [r5, #16]
 801e6d6:	2b01      	cmp	r3, #1
 801e6d8:	dd75      	ble.n	801e7c6 <_strtod_l+0x8e6>
 801e6da:	4629      	mov	r1, r5
 801e6dc:	2201      	movs	r2, #1
 801e6de:	4620      	mov	r0, r4
 801e6e0:	f001 fffe 	bl	80206e0 <__lshift>
 801e6e4:	4631      	mov	r1, r6
 801e6e6:	4605      	mov	r5, r0
 801e6e8:	f002 f866 	bl	80207b8 <__mcmp>
 801e6ec:	2800      	cmp	r0, #0
 801e6ee:	dd6a      	ble.n	801e7c6 <_strtod_l+0x8e6>
 801e6f0:	9904      	ldr	r1, [sp, #16]
 801e6f2:	4a55      	ldr	r2, [pc, #340]	; (801e848 <_strtod_l+0x968>)
 801e6f4:	465b      	mov	r3, fp
 801e6f6:	2900      	cmp	r1, #0
 801e6f8:	f000 8085 	beq.w	801e806 <_strtod_l+0x926>
 801e6fc:	ea02 010b 	and.w	r1, r2, fp
 801e700:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e704:	dc7f      	bgt.n	801e806 <_strtod_l+0x926>
 801e706:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e70a:	f77f aeaa 	ble.w	801e462 <_strtod_l+0x582>
 801e70e:	4a4f      	ldr	r2, [pc, #316]	; (801e84c <_strtod_l+0x96c>)
 801e710:	2300      	movs	r3, #0
 801e712:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e716:	4650      	mov	r0, sl
 801e718:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e71c:	4659      	mov	r1, fp
 801e71e:	f7e1 ff7b 	bl	8000618 <__aeabi_dmul>
 801e722:	460b      	mov	r3, r1
 801e724:	4303      	orrs	r3, r0
 801e726:	bf08      	it	eq
 801e728:	2322      	moveq	r3, #34	; 0x22
 801e72a:	4682      	mov	sl, r0
 801e72c:	468b      	mov	fp, r1
 801e72e:	bf08      	it	eq
 801e730:	6023      	streq	r3, [r4, #0]
 801e732:	e62b      	b.n	801e38c <_strtod_l+0x4ac>
 801e734:	f04f 32ff 	mov.w	r2, #4294967295
 801e738:	fa02 f303 	lsl.w	r3, r2, r3
 801e73c:	ea03 0a0a 	and.w	sl, r3, sl
 801e740:	e6de      	b.n	801e500 <_strtod_l+0x620>
 801e742:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e746:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e74a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e74e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e752:	fa01 f308 	lsl.w	r3, r1, r8
 801e756:	930c      	str	r3, [sp, #48]	; 0x30
 801e758:	9111      	str	r1, [sp, #68]	; 0x44
 801e75a:	e741      	b.n	801e5e0 <_strtod_l+0x700>
 801e75c:	2300      	movs	r3, #0
 801e75e:	930c      	str	r3, [sp, #48]	; 0x30
 801e760:	2301      	movs	r3, #1
 801e762:	9311      	str	r3, [sp, #68]	; 0x44
 801e764:	e73c      	b.n	801e5e0 <_strtod_l+0x700>
 801e766:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e768:	4642      	mov	r2, r8
 801e76a:	4620      	mov	r0, r4
 801e76c:	f001 ffb8 	bl	80206e0 <__lshift>
 801e770:	901e      	str	r0, [sp, #120]	; 0x78
 801e772:	2800      	cmp	r0, #0
 801e774:	f47f af66 	bne.w	801e644 <_strtod_l+0x764>
 801e778:	e5fe      	b.n	801e378 <_strtod_l+0x498>
 801e77a:	465f      	mov	r7, fp
 801e77c:	d16e      	bne.n	801e85c <_strtod_l+0x97c>
 801e77e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e784:	b342      	cbz	r2, 801e7d8 <_strtod_l+0x8f8>
 801e786:	4a32      	ldr	r2, [pc, #200]	; (801e850 <_strtod_l+0x970>)
 801e788:	4293      	cmp	r3, r2
 801e78a:	d128      	bne.n	801e7de <_strtod_l+0x8fe>
 801e78c:	9b04      	ldr	r3, [sp, #16]
 801e78e:	4650      	mov	r0, sl
 801e790:	b1eb      	cbz	r3, 801e7ce <_strtod_l+0x8ee>
 801e792:	4a2d      	ldr	r2, [pc, #180]	; (801e848 <_strtod_l+0x968>)
 801e794:	403a      	ands	r2, r7
 801e796:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e79a:	f04f 31ff 	mov.w	r1, #4294967295
 801e79e:	d819      	bhi.n	801e7d4 <_strtod_l+0x8f4>
 801e7a0:	0d12      	lsrs	r2, r2, #20
 801e7a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e7a6:	fa01 f303 	lsl.w	r3, r1, r3
 801e7aa:	4298      	cmp	r0, r3
 801e7ac:	d117      	bne.n	801e7de <_strtod_l+0x8fe>
 801e7ae:	4b29      	ldr	r3, [pc, #164]	; (801e854 <_strtod_l+0x974>)
 801e7b0:	429f      	cmp	r7, r3
 801e7b2:	d102      	bne.n	801e7ba <_strtod_l+0x8da>
 801e7b4:	3001      	adds	r0, #1
 801e7b6:	f43f addf 	beq.w	801e378 <_strtod_l+0x498>
 801e7ba:	4b23      	ldr	r3, [pc, #140]	; (801e848 <_strtod_l+0x968>)
 801e7bc:	403b      	ands	r3, r7
 801e7be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e7c2:	f04f 0a00 	mov.w	sl, #0
 801e7c6:	9b04      	ldr	r3, [sp, #16]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d1a0      	bne.n	801e70e <_strtod_l+0x82e>
 801e7cc:	e5de      	b.n	801e38c <_strtod_l+0x4ac>
 801e7ce:	f04f 33ff 	mov.w	r3, #4294967295
 801e7d2:	e7ea      	b.n	801e7aa <_strtod_l+0x8ca>
 801e7d4:	460b      	mov	r3, r1
 801e7d6:	e7e8      	b.n	801e7aa <_strtod_l+0x8ca>
 801e7d8:	ea53 030a 	orrs.w	r3, r3, sl
 801e7dc:	d088      	beq.n	801e6f0 <_strtod_l+0x810>
 801e7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e7e0:	b1db      	cbz	r3, 801e81a <_strtod_l+0x93a>
 801e7e2:	423b      	tst	r3, r7
 801e7e4:	d0ef      	beq.n	801e7c6 <_strtod_l+0x8e6>
 801e7e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e7e8:	9a04      	ldr	r2, [sp, #16]
 801e7ea:	4650      	mov	r0, sl
 801e7ec:	4659      	mov	r1, fp
 801e7ee:	b1c3      	cbz	r3, 801e822 <_strtod_l+0x942>
 801e7f0:	f7ff fb59 	bl	801dea6 <sulp>
 801e7f4:	4602      	mov	r2, r0
 801e7f6:	460b      	mov	r3, r1
 801e7f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e7fc:	f7e1 fd56 	bl	80002ac <__adddf3>
 801e800:	4682      	mov	sl, r0
 801e802:	468b      	mov	fp, r1
 801e804:	e7df      	b.n	801e7c6 <_strtod_l+0x8e6>
 801e806:	4013      	ands	r3, r2
 801e808:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e80c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e810:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e814:	f04f 3aff 	mov.w	sl, #4294967295
 801e818:	e7d5      	b.n	801e7c6 <_strtod_l+0x8e6>
 801e81a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e81c:	ea13 0f0a 	tst.w	r3, sl
 801e820:	e7e0      	b.n	801e7e4 <_strtod_l+0x904>
 801e822:	f7ff fb40 	bl	801dea6 <sulp>
 801e826:	4602      	mov	r2, r0
 801e828:	460b      	mov	r3, r1
 801e82a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e82e:	f7e1 fd3b 	bl	80002a8 <__aeabi_dsub>
 801e832:	2200      	movs	r2, #0
 801e834:	2300      	movs	r3, #0
 801e836:	4682      	mov	sl, r0
 801e838:	468b      	mov	fp, r1
 801e83a:	f7e2 f955 	bl	8000ae8 <__aeabi_dcmpeq>
 801e83e:	2800      	cmp	r0, #0
 801e840:	d0c1      	beq.n	801e7c6 <_strtod_l+0x8e6>
 801e842:	e60e      	b.n	801e462 <_strtod_l+0x582>
 801e844:	fffffc02 	.word	0xfffffc02
 801e848:	7ff00000 	.word	0x7ff00000
 801e84c:	39500000 	.word	0x39500000
 801e850:	000fffff 	.word	0x000fffff
 801e854:	7fefffff 	.word	0x7fefffff
 801e858:	0802b588 	.word	0x0802b588
 801e85c:	4631      	mov	r1, r6
 801e85e:	4628      	mov	r0, r5
 801e860:	f002 f926 	bl	8020ab0 <__ratio>
 801e864:	ec59 8b10 	vmov	r8, r9, d0
 801e868:	ee10 0a10 	vmov	r0, s0
 801e86c:	2200      	movs	r2, #0
 801e86e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e872:	4649      	mov	r1, r9
 801e874:	f7e2 f94c 	bl	8000b10 <__aeabi_dcmple>
 801e878:	2800      	cmp	r0, #0
 801e87a:	d07c      	beq.n	801e976 <_strtod_l+0xa96>
 801e87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d04c      	beq.n	801e91c <_strtod_l+0xa3c>
 801e882:	4b95      	ldr	r3, [pc, #596]	; (801ead8 <_strtod_l+0xbf8>)
 801e884:	2200      	movs	r2, #0
 801e886:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e88a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ead8 <_strtod_l+0xbf8>
 801e88e:	f04f 0800 	mov.w	r8, #0
 801e892:	4b92      	ldr	r3, [pc, #584]	; (801eadc <_strtod_l+0xbfc>)
 801e894:	403b      	ands	r3, r7
 801e896:	9311      	str	r3, [sp, #68]	; 0x44
 801e898:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e89a:	4b91      	ldr	r3, [pc, #580]	; (801eae0 <_strtod_l+0xc00>)
 801e89c:	429a      	cmp	r2, r3
 801e89e:	f040 80b2 	bne.w	801ea06 <_strtod_l+0xb26>
 801e8a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e8a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e8aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e8ae:	ec4b ab10 	vmov	d0, sl, fp
 801e8b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e8b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e8ba:	f002 f821 	bl	8020900 <__ulp>
 801e8be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e8c2:	ec53 2b10 	vmov	r2, r3, d0
 801e8c6:	f7e1 fea7 	bl	8000618 <__aeabi_dmul>
 801e8ca:	4652      	mov	r2, sl
 801e8cc:	465b      	mov	r3, fp
 801e8ce:	f7e1 fced 	bl	80002ac <__adddf3>
 801e8d2:	460b      	mov	r3, r1
 801e8d4:	4981      	ldr	r1, [pc, #516]	; (801eadc <_strtod_l+0xbfc>)
 801e8d6:	4a83      	ldr	r2, [pc, #524]	; (801eae4 <_strtod_l+0xc04>)
 801e8d8:	4019      	ands	r1, r3
 801e8da:	4291      	cmp	r1, r2
 801e8dc:	4682      	mov	sl, r0
 801e8de:	d95e      	bls.n	801e99e <_strtod_l+0xabe>
 801e8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e8e6:	4293      	cmp	r3, r2
 801e8e8:	d103      	bne.n	801e8f2 <_strtod_l+0xa12>
 801e8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8ec:	3301      	adds	r3, #1
 801e8ee:	f43f ad43 	beq.w	801e378 <_strtod_l+0x498>
 801e8f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801eaf0 <_strtod_l+0xc10>
 801e8f6:	f04f 3aff 	mov.w	sl, #4294967295
 801e8fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e8fc:	4620      	mov	r0, r4
 801e8fe:	f001 fcd3 	bl	80202a8 <_Bfree>
 801e902:	9907      	ldr	r1, [sp, #28]
 801e904:	4620      	mov	r0, r4
 801e906:	f001 fccf 	bl	80202a8 <_Bfree>
 801e90a:	4631      	mov	r1, r6
 801e90c:	4620      	mov	r0, r4
 801e90e:	f001 fccb 	bl	80202a8 <_Bfree>
 801e912:	4629      	mov	r1, r5
 801e914:	4620      	mov	r0, r4
 801e916:	f001 fcc7 	bl	80202a8 <_Bfree>
 801e91a:	e613      	b.n	801e544 <_strtod_l+0x664>
 801e91c:	f1ba 0f00 	cmp.w	sl, #0
 801e920:	d11b      	bne.n	801e95a <_strtod_l+0xa7a>
 801e922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e926:	b9f3      	cbnz	r3, 801e966 <_strtod_l+0xa86>
 801e928:	4b6b      	ldr	r3, [pc, #428]	; (801ead8 <_strtod_l+0xbf8>)
 801e92a:	2200      	movs	r2, #0
 801e92c:	4640      	mov	r0, r8
 801e92e:	4649      	mov	r1, r9
 801e930:	f7e2 f8e4 	bl	8000afc <__aeabi_dcmplt>
 801e934:	b9d0      	cbnz	r0, 801e96c <_strtod_l+0xa8c>
 801e936:	4640      	mov	r0, r8
 801e938:	4649      	mov	r1, r9
 801e93a:	4b6b      	ldr	r3, [pc, #428]	; (801eae8 <_strtod_l+0xc08>)
 801e93c:	2200      	movs	r2, #0
 801e93e:	f7e1 fe6b 	bl	8000618 <__aeabi_dmul>
 801e942:	4680      	mov	r8, r0
 801e944:	4689      	mov	r9, r1
 801e946:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e94a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e94e:	931b      	str	r3, [sp, #108]	; 0x6c
 801e950:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e954:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e958:	e79b      	b.n	801e892 <_strtod_l+0x9b2>
 801e95a:	f1ba 0f01 	cmp.w	sl, #1
 801e95e:	d102      	bne.n	801e966 <_strtod_l+0xa86>
 801e960:	2f00      	cmp	r7, #0
 801e962:	f43f ad7e 	beq.w	801e462 <_strtod_l+0x582>
 801e966:	4b61      	ldr	r3, [pc, #388]	; (801eaec <_strtod_l+0xc0c>)
 801e968:	2200      	movs	r2, #0
 801e96a:	e78c      	b.n	801e886 <_strtod_l+0x9a6>
 801e96c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801eae8 <_strtod_l+0xc08>
 801e970:	f04f 0800 	mov.w	r8, #0
 801e974:	e7e7      	b.n	801e946 <_strtod_l+0xa66>
 801e976:	4b5c      	ldr	r3, [pc, #368]	; (801eae8 <_strtod_l+0xc08>)
 801e978:	4640      	mov	r0, r8
 801e97a:	4649      	mov	r1, r9
 801e97c:	2200      	movs	r2, #0
 801e97e:	f7e1 fe4b 	bl	8000618 <__aeabi_dmul>
 801e982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e984:	4680      	mov	r8, r0
 801e986:	4689      	mov	r9, r1
 801e988:	b933      	cbnz	r3, 801e998 <_strtod_l+0xab8>
 801e98a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e98e:	9012      	str	r0, [sp, #72]	; 0x48
 801e990:	9313      	str	r3, [sp, #76]	; 0x4c
 801e992:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e996:	e7dd      	b.n	801e954 <_strtod_l+0xa74>
 801e998:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801e99c:	e7f9      	b.n	801e992 <_strtod_l+0xab2>
 801e99e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801e9a2:	9b04      	ldr	r3, [sp, #16]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d1a8      	bne.n	801e8fa <_strtod_l+0xa1a>
 801e9a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e9ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9ae:	0d1b      	lsrs	r3, r3, #20
 801e9b0:	051b      	lsls	r3, r3, #20
 801e9b2:	429a      	cmp	r2, r3
 801e9b4:	d1a1      	bne.n	801e8fa <_strtod_l+0xa1a>
 801e9b6:	4640      	mov	r0, r8
 801e9b8:	4649      	mov	r1, r9
 801e9ba:	f7e2 f9dd 	bl	8000d78 <__aeabi_d2lz>
 801e9be:	f7e1 fdfd 	bl	80005bc <__aeabi_l2d>
 801e9c2:	4602      	mov	r2, r0
 801e9c4:	460b      	mov	r3, r1
 801e9c6:	4640      	mov	r0, r8
 801e9c8:	4649      	mov	r1, r9
 801e9ca:	f7e1 fc6d 	bl	80002a8 <__aeabi_dsub>
 801e9ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e9d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e9d4:	ea43 030a 	orr.w	r3, r3, sl
 801e9d8:	4313      	orrs	r3, r2
 801e9da:	4680      	mov	r8, r0
 801e9dc:	4689      	mov	r9, r1
 801e9de:	d053      	beq.n	801ea88 <_strtod_l+0xba8>
 801e9e0:	a335      	add	r3, pc, #212	; (adr r3, 801eab8 <_strtod_l+0xbd8>)
 801e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e6:	f7e2 f889 	bl	8000afc <__aeabi_dcmplt>
 801e9ea:	2800      	cmp	r0, #0
 801e9ec:	f47f acce 	bne.w	801e38c <_strtod_l+0x4ac>
 801e9f0:	a333      	add	r3, pc, #204	; (adr r3, 801eac0 <_strtod_l+0xbe0>)
 801e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f6:	4640      	mov	r0, r8
 801e9f8:	4649      	mov	r1, r9
 801e9fa:	f7e2 f89d 	bl	8000b38 <__aeabi_dcmpgt>
 801e9fe:	2800      	cmp	r0, #0
 801ea00:	f43f af7b 	beq.w	801e8fa <_strtod_l+0xa1a>
 801ea04:	e4c2      	b.n	801e38c <_strtod_l+0x4ac>
 801ea06:	9b04      	ldr	r3, [sp, #16]
 801ea08:	b333      	cbz	r3, 801ea58 <_strtod_l+0xb78>
 801ea0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ea10:	d822      	bhi.n	801ea58 <_strtod_l+0xb78>
 801ea12:	a32d      	add	r3, pc, #180	; (adr r3, 801eac8 <_strtod_l+0xbe8>)
 801ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea18:	4640      	mov	r0, r8
 801ea1a:	4649      	mov	r1, r9
 801ea1c:	f7e2 f878 	bl	8000b10 <__aeabi_dcmple>
 801ea20:	b1a0      	cbz	r0, 801ea4c <_strtod_l+0xb6c>
 801ea22:	4649      	mov	r1, r9
 801ea24:	4640      	mov	r0, r8
 801ea26:	f7e2 f8cf 	bl	8000bc8 <__aeabi_d2uiz>
 801ea2a:	2801      	cmp	r0, #1
 801ea2c:	bf38      	it	cc
 801ea2e:	2001      	movcc	r0, #1
 801ea30:	f7e1 fd78 	bl	8000524 <__aeabi_ui2d>
 801ea34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea36:	4680      	mov	r8, r0
 801ea38:	4689      	mov	r9, r1
 801ea3a:	bb13      	cbnz	r3, 801ea82 <_strtod_l+0xba2>
 801ea3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ea40:	9014      	str	r0, [sp, #80]	; 0x50
 801ea42:	9315      	str	r3, [sp, #84]	; 0x54
 801ea44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801ea48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ea4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ea54:	1a9b      	subs	r3, r3, r2
 801ea56:	930d      	str	r3, [sp, #52]	; 0x34
 801ea58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ea5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ea60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ea64:	f001 ff4c 	bl	8020900 <__ulp>
 801ea68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ea6c:	ec53 2b10 	vmov	r2, r3, d0
 801ea70:	f7e1 fdd2 	bl	8000618 <__aeabi_dmul>
 801ea74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ea78:	f7e1 fc18 	bl	80002ac <__adddf3>
 801ea7c:	4682      	mov	sl, r0
 801ea7e:	468b      	mov	fp, r1
 801ea80:	e78f      	b.n	801e9a2 <_strtod_l+0xac2>
 801ea82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801ea86:	e7dd      	b.n	801ea44 <_strtod_l+0xb64>
 801ea88:	a311      	add	r3, pc, #68	; (adr r3, 801ead0 <_strtod_l+0xbf0>)
 801ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea8e:	f7e2 f835 	bl	8000afc <__aeabi_dcmplt>
 801ea92:	e7b4      	b.n	801e9fe <_strtod_l+0xb1e>
 801ea94:	2300      	movs	r3, #0
 801ea96:	930e      	str	r3, [sp, #56]	; 0x38
 801ea98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ea9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea9c:	6013      	str	r3, [r2, #0]
 801ea9e:	f7ff ba65 	b.w	801df6c <_strtod_l+0x8c>
 801eaa2:	2b65      	cmp	r3, #101	; 0x65
 801eaa4:	f43f ab5d 	beq.w	801e162 <_strtod_l+0x282>
 801eaa8:	2b45      	cmp	r3, #69	; 0x45
 801eaaa:	f43f ab5a 	beq.w	801e162 <_strtod_l+0x282>
 801eaae:	2201      	movs	r2, #1
 801eab0:	f7ff bb92 	b.w	801e1d8 <_strtod_l+0x2f8>
 801eab4:	f3af 8000 	nop.w
 801eab8:	94a03595 	.word	0x94a03595
 801eabc:	3fdfffff 	.word	0x3fdfffff
 801eac0:	35afe535 	.word	0x35afe535
 801eac4:	3fe00000 	.word	0x3fe00000
 801eac8:	ffc00000 	.word	0xffc00000
 801eacc:	41dfffff 	.word	0x41dfffff
 801ead0:	94a03595 	.word	0x94a03595
 801ead4:	3fcfffff 	.word	0x3fcfffff
 801ead8:	3ff00000 	.word	0x3ff00000
 801eadc:	7ff00000 	.word	0x7ff00000
 801eae0:	7fe00000 	.word	0x7fe00000
 801eae4:	7c9fffff 	.word	0x7c9fffff
 801eae8:	3fe00000 	.word	0x3fe00000
 801eaec:	bff00000 	.word	0xbff00000
 801eaf0:	7fefffff 	.word	0x7fefffff

0801eaf4 <_strtod_r>:
 801eaf4:	4b01      	ldr	r3, [pc, #4]	; (801eafc <_strtod_r+0x8>)
 801eaf6:	f7ff b9f3 	b.w	801dee0 <_strtod_l>
 801eafa:	bf00      	nop
 801eafc:	2000074c 	.word	0x2000074c

0801eb00 <_strtol_l.isra.0>:
 801eb00:	2b01      	cmp	r3, #1
 801eb02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb06:	d001      	beq.n	801eb0c <_strtol_l.isra.0+0xc>
 801eb08:	2b24      	cmp	r3, #36	; 0x24
 801eb0a:	d906      	bls.n	801eb1a <_strtol_l.isra.0+0x1a>
 801eb0c:	f7fe fae6 	bl	801d0dc <__errno>
 801eb10:	2316      	movs	r3, #22
 801eb12:	6003      	str	r3, [r0, #0]
 801eb14:	2000      	movs	r0, #0
 801eb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb1a:	4f3a      	ldr	r7, [pc, #232]	; (801ec04 <_strtol_l.isra.0+0x104>)
 801eb1c:	468e      	mov	lr, r1
 801eb1e:	4676      	mov	r6, lr
 801eb20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801eb24:	5de5      	ldrb	r5, [r4, r7]
 801eb26:	f015 0508 	ands.w	r5, r5, #8
 801eb2a:	d1f8      	bne.n	801eb1e <_strtol_l.isra.0+0x1e>
 801eb2c:	2c2d      	cmp	r4, #45	; 0x2d
 801eb2e:	d134      	bne.n	801eb9a <_strtol_l.isra.0+0x9a>
 801eb30:	f89e 4000 	ldrb.w	r4, [lr]
 801eb34:	f04f 0801 	mov.w	r8, #1
 801eb38:	f106 0e02 	add.w	lr, r6, #2
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d05c      	beq.n	801ebfa <_strtol_l.isra.0+0xfa>
 801eb40:	2b10      	cmp	r3, #16
 801eb42:	d10c      	bne.n	801eb5e <_strtol_l.isra.0+0x5e>
 801eb44:	2c30      	cmp	r4, #48	; 0x30
 801eb46:	d10a      	bne.n	801eb5e <_strtol_l.isra.0+0x5e>
 801eb48:	f89e 4000 	ldrb.w	r4, [lr]
 801eb4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801eb50:	2c58      	cmp	r4, #88	; 0x58
 801eb52:	d14d      	bne.n	801ebf0 <_strtol_l.isra.0+0xf0>
 801eb54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801eb58:	2310      	movs	r3, #16
 801eb5a:	f10e 0e02 	add.w	lr, lr, #2
 801eb5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801eb62:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eb66:	2600      	movs	r6, #0
 801eb68:	fbbc f9f3 	udiv	r9, ip, r3
 801eb6c:	4635      	mov	r5, r6
 801eb6e:	fb03 ca19 	mls	sl, r3, r9, ip
 801eb72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801eb76:	2f09      	cmp	r7, #9
 801eb78:	d818      	bhi.n	801ebac <_strtol_l.isra.0+0xac>
 801eb7a:	463c      	mov	r4, r7
 801eb7c:	42a3      	cmp	r3, r4
 801eb7e:	dd24      	ble.n	801ebca <_strtol_l.isra.0+0xca>
 801eb80:	2e00      	cmp	r6, #0
 801eb82:	db1f      	blt.n	801ebc4 <_strtol_l.isra.0+0xc4>
 801eb84:	45a9      	cmp	r9, r5
 801eb86:	d31d      	bcc.n	801ebc4 <_strtol_l.isra.0+0xc4>
 801eb88:	d101      	bne.n	801eb8e <_strtol_l.isra.0+0x8e>
 801eb8a:	45a2      	cmp	sl, r4
 801eb8c:	db1a      	blt.n	801ebc4 <_strtol_l.isra.0+0xc4>
 801eb8e:	fb05 4503 	mla	r5, r5, r3, r4
 801eb92:	2601      	movs	r6, #1
 801eb94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801eb98:	e7eb      	b.n	801eb72 <_strtol_l.isra.0+0x72>
 801eb9a:	2c2b      	cmp	r4, #43	; 0x2b
 801eb9c:	bf08      	it	eq
 801eb9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801eba2:	46a8      	mov	r8, r5
 801eba4:	bf08      	it	eq
 801eba6:	f106 0e02 	addeq.w	lr, r6, #2
 801ebaa:	e7c7      	b.n	801eb3c <_strtol_l.isra.0+0x3c>
 801ebac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ebb0:	2f19      	cmp	r7, #25
 801ebb2:	d801      	bhi.n	801ebb8 <_strtol_l.isra.0+0xb8>
 801ebb4:	3c37      	subs	r4, #55	; 0x37
 801ebb6:	e7e1      	b.n	801eb7c <_strtol_l.isra.0+0x7c>
 801ebb8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ebbc:	2f19      	cmp	r7, #25
 801ebbe:	d804      	bhi.n	801ebca <_strtol_l.isra.0+0xca>
 801ebc0:	3c57      	subs	r4, #87	; 0x57
 801ebc2:	e7db      	b.n	801eb7c <_strtol_l.isra.0+0x7c>
 801ebc4:	f04f 36ff 	mov.w	r6, #4294967295
 801ebc8:	e7e4      	b.n	801eb94 <_strtol_l.isra.0+0x94>
 801ebca:	2e00      	cmp	r6, #0
 801ebcc:	da05      	bge.n	801ebda <_strtol_l.isra.0+0xda>
 801ebce:	2322      	movs	r3, #34	; 0x22
 801ebd0:	6003      	str	r3, [r0, #0]
 801ebd2:	4665      	mov	r5, ip
 801ebd4:	b942      	cbnz	r2, 801ebe8 <_strtol_l.isra.0+0xe8>
 801ebd6:	4628      	mov	r0, r5
 801ebd8:	e79d      	b.n	801eb16 <_strtol_l.isra.0+0x16>
 801ebda:	f1b8 0f00 	cmp.w	r8, #0
 801ebde:	d000      	beq.n	801ebe2 <_strtol_l.isra.0+0xe2>
 801ebe0:	426d      	negs	r5, r5
 801ebe2:	2a00      	cmp	r2, #0
 801ebe4:	d0f7      	beq.n	801ebd6 <_strtol_l.isra.0+0xd6>
 801ebe6:	b10e      	cbz	r6, 801ebec <_strtol_l.isra.0+0xec>
 801ebe8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ebec:	6011      	str	r1, [r2, #0]
 801ebee:	e7f2      	b.n	801ebd6 <_strtol_l.isra.0+0xd6>
 801ebf0:	2430      	movs	r4, #48	; 0x30
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d1b3      	bne.n	801eb5e <_strtol_l.isra.0+0x5e>
 801ebf6:	2308      	movs	r3, #8
 801ebf8:	e7b1      	b.n	801eb5e <_strtol_l.isra.0+0x5e>
 801ebfa:	2c30      	cmp	r4, #48	; 0x30
 801ebfc:	d0a4      	beq.n	801eb48 <_strtol_l.isra.0+0x48>
 801ebfe:	230a      	movs	r3, #10
 801ec00:	e7ad      	b.n	801eb5e <_strtol_l.isra.0+0x5e>
 801ec02:	bf00      	nop
 801ec04:	0802b5b1 	.word	0x0802b5b1

0801ec08 <_strtol_r>:
 801ec08:	f7ff bf7a 	b.w	801eb00 <_strtol_l.isra.0>

0801ec0c <quorem>:
 801ec0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec10:	6903      	ldr	r3, [r0, #16]
 801ec12:	690c      	ldr	r4, [r1, #16]
 801ec14:	42a3      	cmp	r3, r4
 801ec16:	4607      	mov	r7, r0
 801ec18:	f2c0 8081 	blt.w	801ed1e <quorem+0x112>
 801ec1c:	3c01      	subs	r4, #1
 801ec1e:	f101 0814 	add.w	r8, r1, #20
 801ec22:	f100 0514 	add.w	r5, r0, #20
 801ec26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ec2a:	9301      	str	r3, [sp, #4]
 801ec2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ec30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ec34:	3301      	adds	r3, #1
 801ec36:	429a      	cmp	r2, r3
 801ec38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ec3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ec40:	fbb2 f6f3 	udiv	r6, r2, r3
 801ec44:	d331      	bcc.n	801ecaa <quorem+0x9e>
 801ec46:	f04f 0e00 	mov.w	lr, #0
 801ec4a:	4640      	mov	r0, r8
 801ec4c:	46ac      	mov	ip, r5
 801ec4e:	46f2      	mov	sl, lr
 801ec50:	f850 2b04 	ldr.w	r2, [r0], #4
 801ec54:	b293      	uxth	r3, r2
 801ec56:	fb06 e303 	mla	r3, r6, r3, lr
 801ec5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ec5e:	b29b      	uxth	r3, r3
 801ec60:	ebaa 0303 	sub.w	r3, sl, r3
 801ec64:	0c12      	lsrs	r2, r2, #16
 801ec66:	f8dc a000 	ldr.w	sl, [ip]
 801ec6a:	fb06 e202 	mla	r2, r6, r2, lr
 801ec6e:	fa13 f38a 	uxtah	r3, r3, sl
 801ec72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ec76:	fa1f fa82 	uxth.w	sl, r2
 801ec7a:	f8dc 2000 	ldr.w	r2, [ip]
 801ec7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ec82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ec86:	b29b      	uxth	r3, r3
 801ec88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ec8c:	4581      	cmp	r9, r0
 801ec8e:	f84c 3b04 	str.w	r3, [ip], #4
 801ec92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ec96:	d2db      	bcs.n	801ec50 <quorem+0x44>
 801ec98:	f855 300b 	ldr.w	r3, [r5, fp]
 801ec9c:	b92b      	cbnz	r3, 801ecaa <quorem+0x9e>
 801ec9e:	9b01      	ldr	r3, [sp, #4]
 801eca0:	3b04      	subs	r3, #4
 801eca2:	429d      	cmp	r5, r3
 801eca4:	461a      	mov	r2, r3
 801eca6:	d32e      	bcc.n	801ed06 <quorem+0xfa>
 801eca8:	613c      	str	r4, [r7, #16]
 801ecaa:	4638      	mov	r0, r7
 801ecac:	f001 fd84 	bl	80207b8 <__mcmp>
 801ecb0:	2800      	cmp	r0, #0
 801ecb2:	db24      	blt.n	801ecfe <quorem+0xf2>
 801ecb4:	3601      	adds	r6, #1
 801ecb6:	4628      	mov	r0, r5
 801ecb8:	f04f 0c00 	mov.w	ip, #0
 801ecbc:	f858 2b04 	ldr.w	r2, [r8], #4
 801ecc0:	f8d0 e000 	ldr.w	lr, [r0]
 801ecc4:	b293      	uxth	r3, r2
 801ecc6:	ebac 0303 	sub.w	r3, ip, r3
 801ecca:	0c12      	lsrs	r2, r2, #16
 801eccc:	fa13 f38e 	uxtah	r3, r3, lr
 801ecd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ecd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ecd8:	b29b      	uxth	r3, r3
 801ecda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ecde:	45c1      	cmp	r9, r8
 801ece0:	f840 3b04 	str.w	r3, [r0], #4
 801ece4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ece8:	d2e8      	bcs.n	801ecbc <quorem+0xb0>
 801ecea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ecee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ecf2:	b922      	cbnz	r2, 801ecfe <quorem+0xf2>
 801ecf4:	3b04      	subs	r3, #4
 801ecf6:	429d      	cmp	r5, r3
 801ecf8:	461a      	mov	r2, r3
 801ecfa:	d30a      	bcc.n	801ed12 <quorem+0x106>
 801ecfc:	613c      	str	r4, [r7, #16]
 801ecfe:	4630      	mov	r0, r6
 801ed00:	b003      	add	sp, #12
 801ed02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed06:	6812      	ldr	r2, [r2, #0]
 801ed08:	3b04      	subs	r3, #4
 801ed0a:	2a00      	cmp	r2, #0
 801ed0c:	d1cc      	bne.n	801eca8 <quorem+0x9c>
 801ed0e:	3c01      	subs	r4, #1
 801ed10:	e7c7      	b.n	801eca2 <quorem+0x96>
 801ed12:	6812      	ldr	r2, [r2, #0]
 801ed14:	3b04      	subs	r3, #4
 801ed16:	2a00      	cmp	r2, #0
 801ed18:	d1f0      	bne.n	801ecfc <quorem+0xf0>
 801ed1a:	3c01      	subs	r4, #1
 801ed1c:	e7eb      	b.n	801ecf6 <quorem+0xea>
 801ed1e:	2000      	movs	r0, #0
 801ed20:	e7ee      	b.n	801ed00 <quorem+0xf4>
 801ed22:	0000      	movs	r0, r0
 801ed24:	0000      	movs	r0, r0
	...

0801ed28 <_dtoa_r>:
 801ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed2c:	ed2d 8b02 	vpush	{d8}
 801ed30:	ec57 6b10 	vmov	r6, r7, d0
 801ed34:	b095      	sub	sp, #84	; 0x54
 801ed36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ed38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ed3c:	9105      	str	r1, [sp, #20]
 801ed3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ed42:	4604      	mov	r4, r0
 801ed44:	9209      	str	r2, [sp, #36]	; 0x24
 801ed46:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed48:	b975      	cbnz	r5, 801ed68 <_dtoa_r+0x40>
 801ed4a:	2010      	movs	r0, #16
 801ed4c:	f001 fa44 	bl	80201d8 <malloc>
 801ed50:	4602      	mov	r2, r0
 801ed52:	6260      	str	r0, [r4, #36]	; 0x24
 801ed54:	b920      	cbnz	r0, 801ed60 <_dtoa_r+0x38>
 801ed56:	4bb2      	ldr	r3, [pc, #712]	; (801f020 <_dtoa_r+0x2f8>)
 801ed58:	21ea      	movs	r1, #234	; 0xea
 801ed5a:	48b2      	ldr	r0, [pc, #712]	; (801f024 <_dtoa_r+0x2fc>)
 801ed5c:	f002 fa82 	bl	8021264 <__assert_func>
 801ed60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ed64:	6005      	str	r5, [r0, #0]
 801ed66:	60c5      	str	r5, [r0, #12]
 801ed68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed6a:	6819      	ldr	r1, [r3, #0]
 801ed6c:	b151      	cbz	r1, 801ed84 <_dtoa_r+0x5c>
 801ed6e:	685a      	ldr	r2, [r3, #4]
 801ed70:	604a      	str	r2, [r1, #4]
 801ed72:	2301      	movs	r3, #1
 801ed74:	4093      	lsls	r3, r2
 801ed76:	608b      	str	r3, [r1, #8]
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f001 fa95 	bl	80202a8 <_Bfree>
 801ed7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed80:	2200      	movs	r2, #0
 801ed82:	601a      	str	r2, [r3, #0]
 801ed84:	1e3b      	subs	r3, r7, #0
 801ed86:	bfb9      	ittee	lt
 801ed88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ed8c:	9303      	strlt	r3, [sp, #12]
 801ed8e:	2300      	movge	r3, #0
 801ed90:	f8c8 3000 	strge.w	r3, [r8]
 801ed94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ed98:	4ba3      	ldr	r3, [pc, #652]	; (801f028 <_dtoa_r+0x300>)
 801ed9a:	bfbc      	itt	lt
 801ed9c:	2201      	movlt	r2, #1
 801ed9e:	f8c8 2000 	strlt.w	r2, [r8]
 801eda2:	ea33 0309 	bics.w	r3, r3, r9
 801eda6:	d11b      	bne.n	801ede0 <_dtoa_r+0xb8>
 801eda8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edaa:	f242 730f 	movw	r3, #9999	; 0x270f
 801edae:	6013      	str	r3, [r2, #0]
 801edb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801edb4:	4333      	orrs	r3, r6
 801edb6:	f000 857a 	beq.w	801f8ae <_dtoa_r+0xb86>
 801edba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801edbc:	b963      	cbnz	r3, 801edd8 <_dtoa_r+0xb0>
 801edbe:	4b9b      	ldr	r3, [pc, #620]	; (801f02c <_dtoa_r+0x304>)
 801edc0:	e024      	b.n	801ee0c <_dtoa_r+0xe4>
 801edc2:	4b9b      	ldr	r3, [pc, #620]	; (801f030 <_dtoa_r+0x308>)
 801edc4:	9300      	str	r3, [sp, #0]
 801edc6:	3308      	adds	r3, #8
 801edc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801edca:	6013      	str	r3, [r2, #0]
 801edcc:	9800      	ldr	r0, [sp, #0]
 801edce:	b015      	add	sp, #84	; 0x54
 801edd0:	ecbd 8b02 	vpop	{d8}
 801edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edd8:	4b94      	ldr	r3, [pc, #592]	; (801f02c <_dtoa_r+0x304>)
 801edda:	9300      	str	r3, [sp, #0]
 801eddc:	3303      	adds	r3, #3
 801edde:	e7f3      	b.n	801edc8 <_dtoa_r+0xa0>
 801ede0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ede4:	2200      	movs	r2, #0
 801ede6:	ec51 0b17 	vmov	r0, r1, d7
 801edea:	2300      	movs	r3, #0
 801edec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801edf0:	f7e1 fe7a 	bl	8000ae8 <__aeabi_dcmpeq>
 801edf4:	4680      	mov	r8, r0
 801edf6:	b158      	cbz	r0, 801ee10 <_dtoa_r+0xe8>
 801edf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edfa:	2301      	movs	r3, #1
 801edfc:	6013      	str	r3, [r2, #0]
 801edfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	f000 8551 	beq.w	801f8a8 <_dtoa_r+0xb80>
 801ee06:	488b      	ldr	r0, [pc, #556]	; (801f034 <_dtoa_r+0x30c>)
 801ee08:	6018      	str	r0, [r3, #0]
 801ee0a:	1e43      	subs	r3, r0, #1
 801ee0c:	9300      	str	r3, [sp, #0]
 801ee0e:	e7dd      	b.n	801edcc <_dtoa_r+0xa4>
 801ee10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ee14:	aa12      	add	r2, sp, #72	; 0x48
 801ee16:	a913      	add	r1, sp, #76	; 0x4c
 801ee18:	4620      	mov	r0, r4
 801ee1a:	f001 fded 	bl	80209f8 <__d2b>
 801ee1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ee22:	4683      	mov	fp, r0
 801ee24:	2d00      	cmp	r5, #0
 801ee26:	d07c      	beq.n	801ef22 <_dtoa_r+0x1fa>
 801ee28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ee2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ee32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ee36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ee3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ee3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ee42:	4b7d      	ldr	r3, [pc, #500]	; (801f038 <_dtoa_r+0x310>)
 801ee44:	2200      	movs	r2, #0
 801ee46:	4630      	mov	r0, r6
 801ee48:	4639      	mov	r1, r7
 801ee4a:	f7e1 fa2d 	bl	80002a8 <__aeabi_dsub>
 801ee4e:	a36e      	add	r3, pc, #440	; (adr r3, 801f008 <_dtoa_r+0x2e0>)
 801ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee54:	f7e1 fbe0 	bl	8000618 <__aeabi_dmul>
 801ee58:	a36d      	add	r3, pc, #436	; (adr r3, 801f010 <_dtoa_r+0x2e8>)
 801ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5e:	f7e1 fa25 	bl	80002ac <__adddf3>
 801ee62:	4606      	mov	r6, r0
 801ee64:	4628      	mov	r0, r5
 801ee66:	460f      	mov	r7, r1
 801ee68:	f7e1 fb6c 	bl	8000544 <__aeabi_i2d>
 801ee6c:	a36a      	add	r3, pc, #424	; (adr r3, 801f018 <_dtoa_r+0x2f0>)
 801ee6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee72:	f7e1 fbd1 	bl	8000618 <__aeabi_dmul>
 801ee76:	4602      	mov	r2, r0
 801ee78:	460b      	mov	r3, r1
 801ee7a:	4630      	mov	r0, r6
 801ee7c:	4639      	mov	r1, r7
 801ee7e:	f7e1 fa15 	bl	80002ac <__adddf3>
 801ee82:	4606      	mov	r6, r0
 801ee84:	460f      	mov	r7, r1
 801ee86:	f7e1 fe77 	bl	8000b78 <__aeabi_d2iz>
 801ee8a:	2200      	movs	r2, #0
 801ee8c:	4682      	mov	sl, r0
 801ee8e:	2300      	movs	r3, #0
 801ee90:	4630      	mov	r0, r6
 801ee92:	4639      	mov	r1, r7
 801ee94:	f7e1 fe32 	bl	8000afc <__aeabi_dcmplt>
 801ee98:	b148      	cbz	r0, 801eeae <_dtoa_r+0x186>
 801ee9a:	4650      	mov	r0, sl
 801ee9c:	f7e1 fb52 	bl	8000544 <__aeabi_i2d>
 801eea0:	4632      	mov	r2, r6
 801eea2:	463b      	mov	r3, r7
 801eea4:	f7e1 fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 801eea8:	b908      	cbnz	r0, 801eeae <_dtoa_r+0x186>
 801eeaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eeae:	f1ba 0f16 	cmp.w	sl, #22
 801eeb2:	d854      	bhi.n	801ef5e <_dtoa_r+0x236>
 801eeb4:	4b61      	ldr	r3, [pc, #388]	; (801f03c <_dtoa_r+0x314>)
 801eeb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801eec2:	f7e1 fe1b 	bl	8000afc <__aeabi_dcmplt>
 801eec6:	2800      	cmp	r0, #0
 801eec8:	d04b      	beq.n	801ef62 <_dtoa_r+0x23a>
 801eeca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eece:	2300      	movs	r3, #0
 801eed0:	930e      	str	r3, [sp, #56]	; 0x38
 801eed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eed4:	1b5d      	subs	r5, r3, r5
 801eed6:	1e6b      	subs	r3, r5, #1
 801eed8:	9304      	str	r3, [sp, #16]
 801eeda:	bf43      	ittte	mi
 801eedc:	2300      	movmi	r3, #0
 801eede:	f1c5 0801 	rsbmi	r8, r5, #1
 801eee2:	9304      	strmi	r3, [sp, #16]
 801eee4:	f04f 0800 	movpl.w	r8, #0
 801eee8:	f1ba 0f00 	cmp.w	sl, #0
 801eeec:	db3b      	blt.n	801ef66 <_dtoa_r+0x23e>
 801eeee:	9b04      	ldr	r3, [sp, #16]
 801eef0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801eef4:	4453      	add	r3, sl
 801eef6:	9304      	str	r3, [sp, #16]
 801eef8:	2300      	movs	r3, #0
 801eefa:	9306      	str	r3, [sp, #24]
 801eefc:	9b05      	ldr	r3, [sp, #20]
 801eefe:	2b09      	cmp	r3, #9
 801ef00:	d869      	bhi.n	801efd6 <_dtoa_r+0x2ae>
 801ef02:	2b05      	cmp	r3, #5
 801ef04:	bfc4      	itt	gt
 801ef06:	3b04      	subgt	r3, #4
 801ef08:	9305      	strgt	r3, [sp, #20]
 801ef0a:	9b05      	ldr	r3, [sp, #20]
 801ef0c:	f1a3 0302 	sub.w	r3, r3, #2
 801ef10:	bfcc      	ite	gt
 801ef12:	2500      	movgt	r5, #0
 801ef14:	2501      	movle	r5, #1
 801ef16:	2b03      	cmp	r3, #3
 801ef18:	d869      	bhi.n	801efee <_dtoa_r+0x2c6>
 801ef1a:	e8df f003 	tbb	[pc, r3]
 801ef1e:	4e2c      	.short	0x4e2c
 801ef20:	5a4c      	.short	0x5a4c
 801ef22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801ef26:	441d      	add	r5, r3
 801ef28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ef2c:	2b20      	cmp	r3, #32
 801ef2e:	bfc1      	itttt	gt
 801ef30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ef34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ef38:	fa09 f303 	lslgt.w	r3, r9, r3
 801ef3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ef40:	bfda      	itte	le
 801ef42:	f1c3 0320 	rsble	r3, r3, #32
 801ef46:	fa06 f003 	lslle.w	r0, r6, r3
 801ef4a:	4318      	orrgt	r0, r3
 801ef4c:	f7e1 faea 	bl	8000524 <__aeabi_ui2d>
 801ef50:	2301      	movs	r3, #1
 801ef52:	4606      	mov	r6, r0
 801ef54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ef58:	3d01      	subs	r5, #1
 801ef5a:	9310      	str	r3, [sp, #64]	; 0x40
 801ef5c:	e771      	b.n	801ee42 <_dtoa_r+0x11a>
 801ef5e:	2301      	movs	r3, #1
 801ef60:	e7b6      	b.n	801eed0 <_dtoa_r+0x1a8>
 801ef62:	900e      	str	r0, [sp, #56]	; 0x38
 801ef64:	e7b5      	b.n	801eed2 <_dtoa_r+0x1aa>
 801ef66:	f1ca 0300 	rsb	r3, sl, #0
 801ef6a:	9306      	str	r3, [sp, #24]
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	eba8 080a 	sub.w	r8, r8, sl
 801ef72:	930d      	str	r3, [sp, #52]	; 0x34
 801ef74:	e7c2      	b.n	801eefc <_dtoa_r+0x1d4>
 801ef76:	2300      	movs	r3, #0
 801ef78:	9308      	str	r3, [sp, #32]
 801ef7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	dc39      	bgt.n	801eff4 <_dtoa_r+0x2cc>
 801ef80:	f04f 0901 	mov.w	r9, #1
 801ef84:	f8cd 9004 	str.w	r9, [sp, #4]
 801ef88:	464b      	mov	r3, r9
 801ef8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ef8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ef90:	2200      	movs	r2, #0
 801ef92:	6042      	str	r2, [r0, #4]
 801ef94:	2204      	movs	r2, #4
 801ef96:	f102 0614 	add.w	r6, r2, #20
 801ef9a:	429e      	cmp	r6, r3
 801ef9c:	6841      	ldr	r1, [r0, #4]
 801ef9e:	d92f      	bls.n	801f000 <_dtoa_r+0x2d8>
 801efa0:	4620      	mov	r0, r4
 801efa2:	f001 f941 	bl	8020228 <_Balloc>
 801efa6:	9000      	str	r0, [sp, #0]
 801efa8:	2800      	cmp	r0, #0
 801efaa:	d14b      	bne.n	801f044 <_dtoa_r+0x31c>
 801efac:	4b24      	ldr	r3, [pc, #144]	; (801f040 <_dtoa_r+0x318>)
 801efae:	4602      	mov	r2, r0
 801efb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801efb4:	e6d1      	b.n	801ed5a <_dtoa_r+0x32>
 801efb6:	2301      	movs	r3, #1
 801efb8:	e7de      	b.n	801ef78 <_dtoa_r+0x250>
 801efba:	2300      	movs	r3, #0
 801efbc:	9308      	str	r3, [sp, #32]
 801efbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efc0:	eb0a 0903 	add.w	r9, sl, r3
 801efc4:	f109 0301 	add.w	r3, r9, #1
 801efc8:	2b01      	cmp	r3, #1
 801efca:	9301      	str	r3, [sp, #4]
 801efcc:	bfb8      	it	lt
 801efce:	2301      	movlt	r3, #1
 801efd0:	e7dd      	b.n	801ef8e <_dtoa_r+0x266>
 801efd2:	2301      	movs	r3, #1
 801efd4:	e7f2      	b.n	801efbc <_dtoa_r+0x294>
 801efd6:	2501      	movs	r5, #1
 801efd8:	2300      	movs	r3, #0
 801efda:	9305      	str	r3, [sp, #20]
 801efdc:	9508      	str	r5, [sp, #32]
 801efde:	f04f 39ff 	mov.w	r9, #4294967295
 801efe2:	2200      	movs	r2, #0
 801efe4:	f8cd 9004 	str.w	r9, [sp, #4]
 801efe8:	2312      	movs	r3, #18
 801efea:	9209      	str	r2, [sp, #36]	; 0x24
 801efec:	e7cf      	b.n	801ef8e <_dtoa_r+0x266>
 801efee:	2301      	movs	r3, #1
 801eff0:	9308      	str	r3, [sp, #32]
 801eff2:	e7f4      	b.n	801efde <_dtoa_r+0x2b6>
 801eff4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801eff8:	f8cd 9004 	str.w	r9, [sp, #4]
 801effc:	464b      	mov	r3, r9
 801effe:	e7c6      	b.n	801ef8e <_dtoa_r+0x266>
 801f000:	3101      	adds	r1, #1
 801f002:	6041      	str	r1, [r0, #4]
 801f004:	0052      	lsls	r2, r2, #1
 801f006:	e7c6      	b.n	801ef96 <_dtoa_r+0x26e>
 801f008:	636f4361 	.word	0x636f4361
 801f00c:	3fd287a7 	.word	0x3fd287a7
 801f010:	8b60c8b3 	.word	0x8b60c8b3
 801f014:	3fc68a28 	.word	0x3fc68a28
 801f018:	509f79fb 	.word	0x509f79fb
 801f01c:	3fd34413 	.word	0x3fd34413
 801f020:	0802b6be 	.word	0x0802b6be
 801f024:	0802b6d5 	.word	0x0802b6d5
 801f028:	7ff00000 	.word	0x7ff00000
 801f02c:	0802b6ba 	.word	0x0802b6ba
 801f030:	0802b6b1 	.word	0x0802b6b1
 801f034:	0802b535 	.word	0x0802b535
 801f038:	3ff80000 	.word	0x3ff80000
 801f03c:	0802b8b0 	.word	0x0802b8b0
 801f040:	0802b734 	.word	0x0802b734
 801f044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f046:	9a00      	ldr	r2, [sp, #0]
 801f048:	601a      	str	r2, [r3, #0]
 801f04a:	9b01      	ldr	r3, [sp, #4]
 801f04c:	2b0e      	cmp	r3, #14
 801f04e:	f200 80ad 	bhi.w	801f1ac <_dtoa_r+0x484>
 801f052:	2d00      	cmp	r5, #0
 801f054:	f000 80aa 	beq.w	801f1ac <_dtoa_r+0x484>
 801f058:	f1ba 0f00 	cmp.w	sl, #0
 801f05c:	dd36      	ble.n	801f0cc <_dtoa_r+0x3a4>
 801f05e:	4ac3      	ldr	r2, [pc, #780]	; (801f36c <_dtoa_r+0x644>)
 801f060:	f00a 030f 	and.w	r3, sl, #15
 801f064:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f068:	ed93 7b00 	vldr	d7, [r3]
 801f06c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f070:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f074:	eeb0 8a47 	vmov.f32	s16, s14
 801f078:	eef0 8a67 	vmov.f32	s17, s15
 801f07c:	d016      	beq.n	801f0ac <_dtoa_r+0x384>
 801f07e:	4bbc      	ldr	r3, [pc, #752]	; (801f370 <_dtoa_r+0x648>)
 801f080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f088:	f7e1 fbf0 	bl	800086c <__aeabi_ddiv>
 801f08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f090:	f007 070f 	and.w	r7, r7, #15
 801f094:	2503      	movs	r5, #3
 801f096:	4eb6      	ldr	r6, [pc, #728]	; (801f370 <_dtoa_r+0x648>)
 801f098:	b957      	cbnz	r7, 801f0b0 <_dtoa_r+0x388>
 801f09a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f09e:	ec53 2b18 	vmov	r2, r3, d8
 801f0a2:	f7e1 fbe3 	bl	800086c <__aeabi_ddiv>
 801f0a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0aa:	e029      	b.n	801f100 <_dtoa_r+0x3d8>
 801f0ac:	2502      	movs	r5, #2
 801f0ae:	e7f2      	b.n	801f096 <_dtoa_r+0x36e>
 801f0b0:	07f9      	lsls	r1, r7, #31
 801f0b2:	d508      	bpl.n	801f0c6 <_dtoa_r+0x39e>
 801f0b4:	ec51 0b18 	vmov	r0, r1, d8
 801f0b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f0bc:	f7e1 faac 	bl	8000618 <__aeabi_dmul>
 801f0c0:	ec41 0b18 	vmov	d8, r0, r1
 801f0c4:	3501      	adds	r5, #1
 801f0c6:	107f      	asrs	r7, r7, #1
 801f0c8:	3608      	adds	r6, #8
 801f0ca:	e7e5      	b.n	801f098 <_dtoa_r+0x370>
 801f0cc:	f000 80a6 	beq.w	801f21c <_dtoa_r+0x4f4>
 801f0d0:	f1ca 0600 	rsb	r6, sl, #0
 801f0d4:	4ba5      	ldr	r3, [pc, #660]	; (801f36c <_dtoa_r+0x644>)
 801f0d6:	4fa6      	ldr	r7, [pc, #664]	; (801f370 <_dtoa_r+0x648>)
 801f0d8:	f006 020f 	and.w	r2, r6, #15
 801f0dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f0e8:	f7e1 fa96 	bl	8000618 <__aeabi_dmul>
 801f0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0f0:	1136      	asrs	r6, r6, #4
 801f0f2:	2300      	movs	r3, #0
 801f0f4:	2502      	movs	r5, #2
 801f0f6:	2e00      	cmp	r6, #0
 801f0f8:	f040 8085 	bne.w	801f206 <_dtoa_r+0x4de>
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d1d2      	bne.n	801f0a6 <_dtoa_r+0x37e>
 801f100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f102:	2b00      	cmp	r3, #0
 801f104:	f000 808c 	beq.w	801f220 <_dtoa_r+0x4f8>
 801f108:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f10c:	4b99      	ldr	r3, [pc, #612]	; (801f374 <_dtoa_r+0x64c>)
 801f10e:	2200      	movs	r2, #0
 801f110:	4630      	mov	r0, r6
 801f112:	4639      	mov	r1, r7
 801f114:	f7e1 fcf2 	bl	8000afc <__aeabi_dcmplt>
 801f118:	2800      	cmp	r0, #0
 801f11a:	f000 8081 	beq.w	801f220 <_dtoa_r+0x4f8>
 801f11e:	9b01      	ldr	r3, [sp, #4]
 801f120:	2b00      	cmp	r3, #0
 801f122:	d07d      	beq.n	801f220 <_dtoa_r+0x4f8>
 801f124:	f1b9 0f00 	cmp.w	r9, #0
 801f128:	dd3c      	ble.n	801f1a4 <_dtoa_r+0x47c>
 801f12a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f12e:	9307      	str	r3, [sp, #28]
 801f130:	2200      	movs	r2, #0
 801f132:	4b91      	ldr	r3, [pc, #580]	; (801f378 <_dtoa_r+0x650>)
 801f134:	4630      	mov	r0, r6
 801f136:	4639      	mov	r1, r7
 801f138:	f7e1 fa6e 	bl	8000618 <__aeabi_dmul>
 801f13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f140:	3501      	adds	r5, #1
 801f142:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f146:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f14a:	4628      	mov	r0, r5
 801f14c:	f7e1 f9fa 	bl	8000544 <__aeabi_i2d>
 801f150:	4632      	mov	r2, r6
 801f152:	463b      	mov	r3, r7
 801f154:	f7e1 fa60 	bl	8000618 <__aeabi_dmul>
 801f158:	4b88      	ldr	r3, [pc, #544]	; (801f37c <_dtoa_r+0x654>)
 801f15a:	2200      	movs	r2, #0
 801f15c:	f7e1 f8a6 	bl	80002ac <__adddf3>
 801f160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f168:	9303      	str	r3, [sp, #12]
 801f16a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d15c      	bne.n	801f22a <_dtoa_r+0x502>
 801f170:	4b83      	ldr	r3, [pc, #524]	; (801f380 <_dtoa_r+0x658>)
 801f172:	2200      	movs	r2, #0
 801f174:	4630      	mov	r0, r6
 801f176:	4639      	mov	r1, r7
 801f178:	f7e1 f896 	bl	80002a8 <__aeabi_dsub>
 801f17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f180:	4606      	mov	r6, r0
 801f182:	460f      	mov	r7, r1
 801f184:	f7e1 fcd8 	bl	8000b38 <__aeabi_dcmpgt>
 801f188:	2800      	cmp	r0, #0
 801f18a:	f040 8296 	bne.w	801f6ba <_dtoa_r+0x992>
 801f18e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f192:	4630      	mov	r0, r6
 801f194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f198:	4639      	mov	r1, r7
 801f19a:	f7e1 fcaf 	bl	8000afc <__aeabi_dcmplt>
 801f19e:	2800      	cmp	r0, #0
 801f1a0:	f040 8288 	bne.w	801f6b4 <_dtoa_r+0x98c>
 801f1a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f1a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f1ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	f2c0 8158 	blt.w	801f464 <_dtoa_r+0x73c>
 801f1b4:	f1ba 0f0e 	cmp.w	sl, #14
 801f1b8:	f300 8154 	bgt.w	801f464 <_dtoa_r+0x73c>
 801f1bc:	4b6b      	ldr	r3, [pc, #428]	; (801f36c <_dtoa_r+0x644>)
 801f1be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f1c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	f280 80e3 	bge.w	801f394 <_dtoa_r+0x66c>
 801f1ce:	9b01      	ldr	r3, [sp, #4]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	f300 80df 	bgt.w	801f394 <_dtoa_r+0x66c>
 801f1d6:	f040 826d 	bne.w	801f6b4 <_dtoa_r+0x98c>
 801f1da:	4b69      	ldr	r3, [pc, #420]	; (801f380 <_dtoa_r+0x658>)
 801f1dc:	2200      	movs	r2, #0
 801f1de:	4640      	mov	r0, r8
 801f1e0:	4649      	mov	r1, r9
 801f1e2:	f7e1 fa19 	bl	8000618 <__aeabi_dmul>
 801f1e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f1ea:	f7e1 fc9b 	bl	8000b24 <__aeabi_dcmpge>
 801f1ee:	9e01      	ldr	r6, [sp, #4]
 801f1f0:	4637      	mov	r7, r6
 801f1f2:	2800      	cmp	r0, #0
 801f1f4:	f040 8243 	bne.w	801f67e <_dtoa_r+0x956>
 801f1f8:	9d00      	ldr	r5, [sp, #0]
 801f1fa:	2331      	movs	r3, #49	; 0x31
 801f1fc:	f805 3b01 	strb.w	r3, [r5], #1
 801f200:	f10a 0a01 	add.w	sl, sl, #1
 801f204:	e23f      	b.n	801f686 <_dtoa_r+0x95e>
 801f206:	07f2      	lsls	r2, r6, #31
 801f208:	d505      	bpl.n	801f216 <_dtoa_r+0x4ee>
 801f20a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f20e:	f7e1 fa03 	bl	8000618 <__aeabi_dmul>
 801f212:	3501      	adds	r5, #1
 801f214:	2301      	movs	r3, #1
 801f216:	1076      	asrs	r6, r6, #1
 801f218:	3708      	adds	r7, #8
 801f21a:	e76c      	b.n	801f0f6 <_dtoa_r+0x3ce>
 801f21c:	2502      	movs	r5, #2
 801f21e:	e76f      	b.n	801f100 <_dtoa_r+0x3d8>
 801f220:	9b01      	ldr	r3, [sp, #4]
 801f222:	f8cd a01c 	str.w	sl, [sp, #28]
 801f226:	930c      	str	r3, [sp, #48]	; 0x30
 801f228:	e78d      	b.n	801f146 <_dtoa_r+0x41e>
 801f22a:	9900      	ldr	r1, [sp, #0]
 801f22c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f22e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f230:	4b4e      	ldr	r3, [pc, #312]	; (801f36c <_dtoa_r+0x644>)
 801f232:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f236:	4401      	add	r1, r0
 801f238:	9102      	str	r1, [sp, #8]
 801f23a:	9908      	ldr	r1, [sp, #32]
 801f23c:	eeb0 8a47 	vmov.f32	s16, s14
 801f240:	eef0 8a67 	vmov.f32	s17, s15
 801f244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f24c:	2900      	cmp	r1, #0
 801f24e:	d045      	beq.n	801f2dc <_dtoa_r+0x5b4>
 801f250:	494c      	ldr	r1, [pc, #304]	; (801f384 <_dtoa_r+0x65c>)
 801f252:	2000      	movs	r0, #0
 801f254:	f7e1 fb0a 	bl	800086c <__aeabi_ddiv>
 801f258:	ec53 2b18 	vmov	r2, r3, d8
 801f25c:	f7e1 f824 	bl	80002a8 <__aeabi_dsub>
 801f260:	9d00      	ldr	r5, [sp, #0]
 801f262:	ec41 0b18 	vmov	d8, r0, r1
 801f266:	4639      	mov	r1, r7
 801f268:	4630      	mov	r0, r6
 801f26a:	f7e1 fc85 	bl	8000b78 <__aeabi_d2iz>
 801f26e:	900c      	str	r0, [sp, #48]	; 0x30
 801f270:	f7e1 f968 	bl	8000544 <__aeabi_i2d>
 801f274:	4602      	mov	r2, r0
 801f276:	460b      	mov	r3, r1
 801f278:	4630      	mov	r0, r6
 801f27a:	4639      	mov	r1, r7
 801f27c:	f7e1 f814 	bl	80002a8 <__aeabi_dsub>
 801f280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f282:	3330      	adds	r3, #48	; 0x30
 801f284:	f805 3b01 	strb.w	r3, [r5], #1
 801f288:	ec53 2b18 	vmov	r2, r3, d8
 801f28c:	4606      	mov	r6, r0
 801f28e:	460f      	mov	r7, r1
 801f290:	f7e1 fc34 	bl	8000afc <__aeabi_dcmplt>
 801f294:	2800      	cmp	r0, #0
 801f296:	d165      	bne.n	801f364 <_dtoa_r+0x63c>
 801f298:	4632      	mov	r2, r6
 801f29a:	463b      	mov	r3, r7
 801f29c:	4935      	ldr	r1, [pc, #212]	; (801f374 <_dtoa_r+0x64c>)
 801f29e:	2000      	movs	r0, #0
 801f2a0:	f7e1 f802 	bl	80002a8 <__aeabi_dsub>
 801f2a4:	ec53 2b18 	vmov	r2, r3, d8
 801f2a8:	f7e1 fc28 	bl	8000afc <__aeabi_dcmplt>
 801f2ac:	2800      	cmp	r0, #0
 801f2ae:	f040 80b9 	bne.w	801f424 <_dtoa_r+0x6fc>
 801f2b2:	9b02      	ldr	r3, [sp, #8]
 801f2b4:	429d      	cmp	r5, r3
 801f2b6:	f43f af75 	beq.w	801f1a4 <_dtoa_r+0x47c>
 801f2ba:	4b2f      	ldr	r3, [pc, #188]	; (801f378 <_dtoa_r+0x650>)
 801f2bc:	ec51 0b18 	vmov	r0, r1, d8
 801f2c0:	2200      	movs	r2, #0
 801f2c2:	f7e1 f9a9 	bl	8000618 <__aeabi_dmul>
 801f2c6:	4b2c      	ldr	r3, [pc, #176]	; (801f378 <_dtoa_r+0x650>)
 801f2c8:	ec41 0b18 	vmov	d8, r0, r1
 801f2cc:	2200      	movs	r2, #0
 801f2ce:	4630      	mov	r0, r6
 801f2d0:	4639      	mov	r1, r7
 801f2d2:	f7e1 f9a1 	bl	8000618 <__aeabi_dmul>
 801f2d6:	4606      	mov	r6, r0
 801f2d8:	460f      	mov	r7, r1
 801f2da:	e7c4      	b.n	801f266 <_dtoa_r+0x53e>
 801f2dc:	ec51 0b17 	vmov	r0, r1, d7
 801f2e0:	f7e1 f99a 	bl	8000618 <__aeabi_dmul>
 801f2e4:	9b02      	ldr	r3, [sp, #8]
 801f2e6:	9d00      	ldr	r5, [sp, #0]
 801f2e8:	930c      	str	r3, [sp, #48]	; 0x30
 801f2ea:	ec41 0b18 	vmov	d8, r0, r1
 801f2ee:	4639      	mov	r1, r7
 801f2f0:	4630      	mov	r0, r6
 801f2f2:	f7e1 fc41 	bl	8000b78 <__aeabi_d2iz>
 801f2f6:	9011      	str	r0, [sp, #68]	; 0x44
 801f2f8:	f7e1 f924 	bl	8000544 <__aeabi_i2d>
 801f2fc:	4602      	mov	r2, r0
 801f2fe:	460b      	mov	r3, r1
 801f300:	4630      	mov	r0, r6
 801f302:	4639      	mov	r1, r7
 801f304:	f7e0 ffd0 	bl	80002a8 <__aeabi_dsub>
 801f308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f30a:	3330      	adds	r3, #48	; 0x30
 801f30c:	f805 3b01 	strb.w	r3, [r5], #1
 801f310:	9b02      	ldr	r3, [sp, #8]
 801f312:	429d      	cmp	r5, r3
 801f314:	4606      	mov	r6, r0
 801f316:	460f      	mov	r7, r1
 801f318:	f04f 0200 	mov.w	r2, #0
 801f31c:	d134      	bne.n	801f388 <_dtoa_r+0x660>
 801f31e:	4b19      	ldr	r3, [pc, #100]	; (801f384 <_dtoa_r+0x65c>)
 801f320:	ec51 0b18 	vmov	r0, r1, d8
 801f324:	f7e0 ffc2 	bl	80002ac <__adddf3>
 801f328:	4602      	mov	r2, r0
 801f32a:	460b      	mov	r3, r1
 801f32c:	4630      	mov	r0, r6
 801f32e:	4639      	mov	r1, r7
 801f330:	f7e1 fc02 	bl	8000b38 <__aeabi_dcmpgt>
 801f334:	2800      	cmp	r0, #0
 801f336:	d175      	bne.n	801f424 <_dtoa_r+0x6fc>
 801f338:	ec53 2b18 	vmov	r2, r3, d8
 801f33c:	4911      	ldr	r1, [pc, #68]	; (801f384 <_dtoa_r+0x65c>)
 801f33e:	2000      	movs	r0, #0
 801f340:	f7e0 ffb2 	bl	80002a8 <__aeabi_dsub>
 801f344:	4602      	mov	r2, r0
 801f346:	460b      	mov	r3, r1
 801f348:	4630      	mov	r0, r6
 801f34a:	4639      	mov	r1, r7
 801f34c:	f7e1 fbd6 	bl	8000afc <__aeabi_dcmplt>
 801f350:	2800      	cmp	r0, #0
 801f352:	f43f af27 	beq.w	801f1a4 <_dtoa_r+0x47c>
 801f356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f358:	1e6b      	subs	r3, r5, #1
 801f35a:	930c      	str	r3, [sp, #48]	; 0x30
 801f35c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f360:	2b30      	cmp	r3, #48	; 0x30
 801f362:	d0f8      	beq.n	801f356 <_dtoa_r+0x62e>
 801f364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f368:	e04a      	b.n	801f400 <_dtoa_r+0x6d8>
 801f36a:	bf00      	nop
 801f36c:	0802b8b0 	.word	0x0802b8b0
 801f370:	0802b888 	.word	0x0802b888
 801f374:	3ff00000 	.word	0x3ff00000
 801f378:	40240000 	.word	0x40240000
 801f37c:	401c0000 	.word	0x401c0000
 801f380:	40140000 	.word	0x40140000
 801f384:	3fe00000 	.word	0x3fe00000
 801f388:	4baf      	ldr	r3, [pc, #700]	; (801f648 <_dtoa_r+0x920>)
 801f38a:	f7e1 f945 	bl	8000618 <__aeabi_dmul>
 801f38e:	4606      	mov	r6, r0
 801f390:	460f      	mov	r7, r1
 801f392:	e7ac      	b.n	801f2ee <_dtoa_r+0x5c6>
 801f394:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f398:	9d00      	ldr	r5, [sp, #0]
 801f39a:	4642      	mov	r2, r8
 801f39c:	464b      	mov	r3, r9
 801f39e:	4630      	mov	r0, r6
 801f3a0:	4639      	mov	r1, r7
 801f3a2:	f7e1 fa63 	bl	800086c <__aeabi_ddiv>
 801f3a6:	f7e1 fbe7 	bl	8000b78 <__aeabi_d2iz>
 801f3aa:	9002      	str	r0, [sp, #8]
 801f3ac:	f7e1 f8ca 	bl	8000544 <__aeabi_i2d>
 801f3b0:	4642      	mov	r2, r8
 801f3b2:	464b      	mov	r3, r9
 801f3b4:	f7e1 f930 	bl	8000618 <__aeabi_dmul>
 801f3b8:	4602      	mov	r2, r0
 801f3ba:	460b      	mov	r3, r1
 801f3bc:	4630      	mov	r0, r6
 801f3be:	4639      	mov	r1, r7
 801f3c0:	f7e0 ff72 	bl	80002a8 <__aeabi_dsub>
 801f3c4:	9e02      	ldr	r6, [sp, #8]
 801f3c6:	9f01      	ldr	r7, [sp, #4]
 801f3c8:	3630      	adds	r6, #48	; 0x30
 801f3ca:	f805 6b01 	strb.w	r6, [r5], #1
 801f3ce:	9e00      	ldr	r6, [sp, #0]
 801f3d0:	1bae      	subs	r6, r5, r6
 801f3d2:	42b7      	cmp	r7, r6
 801f3d4:	4602      	mov	r2, r0
 801f3d6:	460b      	mov	r3, r1
 801f3d8:	d137      	bne.n	801f44a <_dtoa_r+0x722>
 801f3da:	f7e0 ff67 	bl	80002ac <__adddf3>
 801f3de:	4642      	mov	r2, r8
 801f3e0:	464b      	mov	r3, r9
 801f3e2:	4606      	mov	r6, r0
 801f3e4:	460f      	mov	r7, r1
 801f3e6:	f7e1 fba7 	bl	8000b38 <__aeabi_dcmpgt>
 801f3ea:	b9c8      	cbnz	r0, 801f420 <_dtoa_r+0x6f8>
 801f3ec:	4642      	mov	r2, r8
 801f3ee:	464b      	mov	r3, r9
 801f3f0:	4630      	mov	r0, r6
 801f3f2:	4639      	mov	r1, r7
 801f3f4:	f7e1 fb78 	bl	8000ae8 <__aeabi_dcmpeq>
 801f3f8:	b110      	cbz	r0, 801f400 <_dtoa_r+0x6d8>
 801f3fa:	9b02      	ldr	r3, [sp, #8]
 801f3fc:	07d9      	lsls	r1, r3, #31
 801f3fe:	d40f      	bmi.n	801f420 <_dtoa_r+0x6f8>
 801f400:	4620      	mov	r0, r4
 801f402:	4659      	mov	r1, fp
 801f404:	f000 ff50 	bl	80202a8 <_Bfree>
 801f408:	2300      	movs	r3, #0
 801f40a:	702b      	strb	r3, [r5, #0]
 801f40c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f40e:	f10a 0001 	add.w	r0, sl, #1
 801f412:	6018      	str	r0, [r3, #0]
 801f414:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f416:	2b00      	cmp	r3, #0
 801f418:	f43f acd8 	beq.w	801edcc <_dtoa_r+0xa4>
 801f41c:	601d      	str	r5, [r3, #0]
 801f41e:	e4d5      	b.n	801edcc <_dtoa_r+0xa4>
 801f420:	f8cd a01c 	str.w	sl, [sp, #28]
 801f424:	462b      	mov	r3, r5
 801f426:	461d      	mov	r5, r3
 801f428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f42c:	2a39      	cmp	r2, #57	; 0x39
 801f42e:	d108      	bne.n	801f442 <_dtoa_r+0x71a>
 801f430:	9a00      	ldr	r2, [sp, #0]
 801f432:	429a      	cmp	r2, r3
 801f434:	d1f7      	bne.n	801f426 <_dtoa_r+0x6fe>
 801f436:	9a07      	ldr	r2, [sp, #28]
 801f438:	9900      	ldr	r1, [sp, #0]
 801f43a:	3201      	adds	r2, #1
 801f43c:	9207      	str	r2, [sp, #28]
 801f43e:	2230      	movs	r2, #48	; 0x30
 801f440:	700a      	strb	r2, [r1, #0]
 801f442:	781a      	ldrb	r2, [r3, #0]
 801f444:	3201      	adds	r2, #1
 801f446:	701a      	strb	r2, [r3, #0]
 801f448:	e78c      	b.n	801f364 <_dtoa_r+0x63c>
 801f44a:	4b7f      	ldr	r3, [pc, #508]	; (801f648 <_dtoa_r+0x920>)
 801f44c:	2200      	movs	r2, #0
 801f44e:	f7e1 f8e3 	bl	8000618 <__aeabi_dmul>
 801f452:	2200      	movs	r2, #0
 801f454:	2300      	movs	r3, #0
 801f456:	4606      	mov	r6, r0
 801f458:	460f      	mov	r7, r1
 801f45a:	f7e1 fb45 	bl	8000ae8 <__aeabi_dcmpeq>
 801f45e:	2800      	cmp	r0, #0
 801f460:	d09b      	beq.n	801f39a <_dtoa_r+0x672>
 801f462:	e7cd      	b.n	801f400 <_dtoa_r+0x6d8>
 801f464:	9a08      	ldr	r2, [sp, #32]
 801f466:	2a00      	cmp	r2, #0
 801f468:	f000 80c4 	beq.w	801f5f4 <_dtoa_r+0x8cc>
 801f46c:	9a05      	ldr	r2, [sp, #20]
 801f46e:	2a01      	cmp	r2, #1
 801f470:	f300 80a8 	bgt.w	801f5c4 <_dtoa_r+0x89c>
 801f474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f476:	2a00      	cmp	r2, #0
 801f478:	f000 80a0 	beq.w	801f5bc <_dtoa_r+0x894>
 801f47c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f480:	9e06      	ldr	r6, [sp, #24]
 801f482:	4645      	mov	r5, r8
 801f484:	9a04      	ldr	r2, [sp, #16]
 801f486:	2101      	movs	r1, #1
 801f488:	441a      	add	r2, r3
 801f48a:	4620      	mov	r0, r4
 801f48c:	4498      	add	r8, r3
 801f48e:	9204      	str	r2, [sp, #16]
 801f490:	f001 f810 	bl	80204b4 <__i2b>
 801f494:	4607      	mov	r7, r0
 801f496:	2d00      	cmp	r5, #0
 801f498:	dd0b      	ble.n	801f4b2 <_dtoa_r+0x78a>
 801f49a:	9b04      	ldr	r3, [sp, #16]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	dd08      	ble.n	801f4b2 <_dtoa_r+0x78a>
 801f4a0:	42ab      	cmp	r3, r5
 801f4a2:	9a04      	ldr	r2, [sp, #16]
 801f4a4:	bfa8      	it	ge
 801f4a6:	462b      	movge	r3, r5
 801f4a8:	eba8 0803 	sub.w	r8, r8, r3
 801f4ac:	1aed      	subs	r5, r5, r3
 801f4ae:	1ad3      	subs	r3, r2, r3
 801f4b0:	9304      	str	r3, [sp, #16]
 801f4b2:	9b06      	ldr	r3, [sp, #24]
 801f4b4:	b1fb      	cbz	r3, 801f4f6 <_dtoa_r+0x7ce>
 801f4b6:	9b08      	ldr	r3, [sp, #32]
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	f000 809f 	beq.w	801f5fc <_dtoa_r+0x8d4>
 801f4be:	2e00      	cmp	r6, #0
 801f4c0:	dd11      	ble.n	801f4e6 <_dtoa_r+0x7be>
 801f4c2:	4639      	mov	r1, r7
 801f4c4:	4632      	mov	r2, r6
 801f4c6:	4620      	mov	r0, r4
 801f4c8:	f001 f8b0 	bl	802062c <__pow5mult>
 801f4cc:	465a      	mov	r2, fp
 801f4ce:	4601      	mov	r1, r0
 801f4d0:	4607      	mov	r7, r0
 801f4d2:	4620      	mov	r0, r4
 801f4d4:	f001 f804 	bl	80204e0 <__multiply>
 801f4d8:	4659      	mov	r1, fp
 801f4da:	9007      	str	r0, [sp, #28]
 801f4dc:	4620      	mov	r0, r4
 801f4de:	f000 fee3 	bl	80202a8 <_Bfree>
 801f4e2:	9b07      	ldr	r3, [sp, #28]
 801f4e4:	469b      	mov	fp, r3
 801f4e6:	9b06      	ldr	r3, [sp, #24]
 801f4e8:	1b9a      	subs	r2, r3, r6
 801f4ea:	d004      	beq.n	801f4f6 <_dtoa_r+0x7ce>
 801f4ec:	4659      	mov	r1, fp
 801f4ee:	4620      	mov	r0, r4
 801f4f0:	f001 f89c 	bl	802062c <__pow5mult>
 801f4f4:	4683      	mov	fp, r0
 801f4f6:	2101      	movs	r1, #1
 801f4f8:	4620      	mov	r0, r4
 801f4fa:	f000 ffdb 	bl	80204b4 <__i2b>
 801f4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f500:	2b00      	cmp	r3, #0
 801f502:	4606      	mov	r6, r0
 801f504:	dd7c      	ble.n	801f600 <_dtoa_r+0x8d8>
 801f506:	461a      	mov	r2, r3
 801f508:	4601      	mov	r1, r0
 801f50a:	4620      	mov	r0, r4
 801f50c:	f001 f88e 	bl	802062c <__pow5mult>
 801f510:	9b05      	ldr	r3, [sp, #20]
 801f512:	2b01      	cmp	r3, #1
 801f514:	4606      	mov	r6, r0
 801f516:	dd76      	ble.n	801f606 <_dtoa_r+0x8de>
 801f518:	2300      	movs	r3, #0
 801f51a:	9306      	str	r3, [sp, #24]
 801f51c:	6933      	ldr	r3, [r6, #16]
 801f51e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f522:	6918      	ldr	r0, [r3, #16]
 801f524:	f000 ff76 	bl	8020414 <__hi0bits>
 801f528:	f1c0 0020 	rsb	r0, r0, #32
 801f52c:	9b04      	ldr	r3, [sp, #16]
 801f52e:	4418      	add	r0, r3
 801f530:	f010 001f 	ands.w	r0, r0, #31
 801f534:	f000 8086 	beq.w	801f644 <_dtoa_r+0x91c>
 801f538:	f1c0 0320 	rsb	r3, r0, #32
 801f53c:	2b04      	cmp	r3, #4
 801f53e:	dd7f      	ble.n	801f640 <_dtoa_r+0x918>
 801f540:	f1c0 001c 	rsb	r0, r0, #28
 801f544:	9b04      	ldr	r3, [sp, #16]
 801f546:	4403      	add	r3, r0
 801f548:	4480      	add	r8, r0
 801f54a:	4405      	add	r5, r0
 801f54c:	9304      	str	r3, [sp, #16]
 801f54e:	f1b8 0f00 	cmp.w	r8, #0
 801f552:	dd05      	ble.n	801f560 <_dtoa_r+0x838>
 801f554:	4659      	mov	r1, fp
 801f556:	4642      	mov	r2, r8
 801f558:	4620      	mov	r0, r4
 801f55a:	f001 f8c1 	bl	80206e0 <__lshift>
 801f55e:	4683      	mov	fp, r0
 801f560:	9b04      	ldr	r3, [sp, #16]
 801f562:	2b00      	cmp	r3, #0
 801f564:	dd05      	ble.n	801f572 <_dtoa_r+0x84a>
 801f566:	4631      	mov	r1, r6
 801f568:	461a      	mov	r2, r3
 801f56a:	4620      	mov	r0, r4
 801f56c:	f001 f8b8 	bl	80206e0 <__lshift>
 801f570:	4606      	mov	r6, r0
 801f572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f574:	2b00      	cmp	r3, #0
 801f576:	d069      	beq.n	801f64c <_dtoa_r+0x924>
 801f578:	4631      	mov	r1, r6
 801f57a:	4658      	mov	r0, fp
 801f57c:	f001 f91c 	bl	80207b8 <__mcmp>
 801f580:	2800      	cmp	r0, #0
 801f582:	da63      	bge.n	801f64c <_dtoa_r+0x924>
 801f584:	2300      	movs	r3, #0
 801f586:	4659      	mov	r1, fp
 801f588:	220a      	movs	r2, #10
 801f58a:	4620      	mov	r0, r4
 801f58c:	f000 feae 	bl	80202ec <__multadd>
 801f590:	9b08      	ldr	r3, [sp, #32]
 801f592:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f596:	4683      	mov	fp, r0
 801f598:	2b00      	cmp	r3, #0
 801f59a:	f000 818f 	beq.w	801f8bc <_dtoa_r+0xb94>
 801f59e:	4639      	mov	r1, r7
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	220a      	movs	r2, #10
 801f5a4:	4620      	mov	r0, r4
 801f5a6:	f000 fea1 	bl	80202ec <__multadd>
 801f5aa:	f1b9 0f00 	cmp.w	r9, #0
 801f5ae:	4607      	mov	r7, r0
 801f5b0:	f300 808e 	bgt.w	801f6d0 <_dtoa_r+0x9a8>
 801f5b4:	9b05      	ldr	r3, [sp, #20]
 801f5b6:	2b02      	cmp	r3, #2
 801f5b8:	dc50      	bgt.n	801f65c <_dtoa_r+0x934>
 801f5ba:	e089      	b.n	801f6d0 <_dtoa_r+0x9a8>
 801f5bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f5be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f5c2:	e75d      	b.n	801f480 <_dtoa_r+0x758>
 801f5c4:	9b01      	ldr	r3, [sp, #4]
 801f5c6:	1e5e      	subs	r6, r3, #1
 801f5c8:	9b06      	ldr	r3, [sp, #24]
 801f5ca:	42b3      	cmp	r3, r6
 801f5cc:	bfbf      	itttt	lt
 801f5ce:	9b06      	ldrlt	r3, [sp, #24]
 801f5d0:	9606      	strlt	r6, [sp, #24]
 801f5d2:	1af2      	sublt	r2, r6, r3
 801f5d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f5d6:	bfb6      	itet	lt
 801f5d8:	189b      	addlt	r3, r3, r2
 801f5da:	1b9e      	subge	r6, r3, r6
 801f5dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f5de:	9b01      	ldr	r3, [sp, #4]
 801f5e0:	bfb8      	it	lt
 801f5e2:	2600      	movlt	r6, #0
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	bfb5      	itete	lt
 801f5e8:	eba8 0503 	sublt.w	r5, r8, r3
 801f5ec:	9b01      	ldrge	r3, [sp, #4]
 801f5ee:	2300      	movlt	r3, #0
 801f5f0:	4645      	movge	r5, r8
 801f5f2:	e747      	b.n	801f484 <_dtoa_r+0x75c>
 801f5f4:	9e06      	ldr	r6, [sp, #24]
 801f5f6:	9f08      	ldr	r7, [sp, #32]
 801f5f8:	4645      	mov	r5, r8
 801f5fa:	e74c      	b.n	801f496 <_dtoa_r+0x76e>
 801f5fc:	9a06      	ldr	r2, [sp, #24]
 801f5fe:	e775      	b.n	801f4ec <_dtoa_r+0x7c4>
 801f600:	9b05      	ldr	r3, [sp, #20]
 801f602:	2b01      	cmp	r3, #1
 801f604:	dc18      	bgt.n	801f638 <_dtoa_r+0x910>
 801f606:	9b02      	ldr	r3, [sp, #8]
 801f608:	b9b3      	cbnz	r3, 801f638 <_dtoa_r+0x910>
 801f60a:	9b03      	ldr	r3, [sp, #12]
 801f60c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f610:	b9a3      	cbnz	r3, 801f63c <_dtoa_r+0x914>
 801f612:	9b03      	ldr	r3, [sp, #12]
 801f614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f618:	0d1b      	lsrs	r3, r3, #20
 801f61a:	051b      	lsls	r3, r3, #20
 801f61c:	b12b      	cbz	r3, 801f62a <_dtoa_r+0x902>
 801f61e:	9b04      	ldr	r3, [sp, #16]
 801f620:	3301      	adds	r3, #1
 801f622:	9304      	str	r3, [sp, #16]
 801f624:	f108 0801 	add.w	r8, r8, #1
 801f628:	2301      	movs	r3, #1
 801f62a:	9306      	str	r3, [sp, #24]
 801f62c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f62e:	2b00      	cmp	r3, #0
 801f630:	f47f af74 	bne.w	801f51c <_dtoa_r+0x7f4>
 801f634:	2001      	movs	r0, #1
 801f636:	e779      	b.n	801f52c <_dtoa_r+0x804>
 801f638:	2300      	movs	r3, #0
 801f63a:	e7f6      	b.n	801f62a <_dtoa_r+0x902>
 801f63c:	9b02      	ldr	r3, [sp, #8]
 801f63e:	e7f4      	b.n	801f62a <_dtoa_r+0x902>
 801f640:	d085      	beq.n	801f54e <_dtoa_r+0x826>
 801f642:	4618      	mov	r0, r3
 801f644:	301c      	adds	r0, #28
 801f646:	e77d      	b.n	801f544 <_dtoa_r+0x81c>
 801f648:	40240000 	.word	0x40240000
 801f64c:	9b01      	ldr	r3, [sp, #4]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	dc38      	bgt.n	801f6c4 <_dtoa_r+0x99c>
 801f652:	9b05      	ldr	r3, [sp, #20]
 801f654:	2b02      	cmp	r3, #2
 801f656:	dd35      	ble.n	801f6c4 <_dtoa_r+0x99c>
 801f658:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f65c:	f1b9 0f00 	cmp.w	r9, #0
 801f660:	d10d      	bne.n	801f67e <_dtoa_r+0x956>
 801f662:	4631      	mov	r1, r6
 801f664:	464b      	mov	r3, r9
 801f666:	2205      	movs	r2, #5
 801f668:	4620      	mov	r0, r4
 801f66a:	f000 fe3f 	bl	80202ec <__multadd>
 801f66e:	4601      	mov	r1, r0
 801f670:	4606      	mov	r6, r0
 801f672:	4658      	mov	r0, fp
 801f674:	f001 f8a0 	bl	80207b8 <__mcmp>
 801f678:	2800      	cmp	r0, #0
 801f67a:	f73f adbd 	bgt.w	801f1f8 <_dtoa_r+0x4d0>
 801f67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f680:	9d00      	ldr	r5, [sp, #0]
 801f682:	ea6f 0a03 	mvn.w	sl, r3
 801f686:	f04f 0800 	mov.w	r8, #0
 801f68a:	4631      	mov	r1, r6
 801f68c:	4620      	mov	r0, r4
 801f68e:	f000 fe0b 	bl	80202a8 <_Bfree>
 801f692:	2f00      	cmp	r7, #0
 801f694:	f43f aeb4 	beq.w	801f400 <_dtoa_r+0x6d8>
 801f698:	f1b8 0f00 	cmp.w	r8, #0
 801f69c:	d005      	beq.n	801f6aa <_dtoa_r+0x982>
 801f69e:	45b8      	cmp	r8, r7
 801f6a0:	d003      	beq.n	801f6aa <_dtoa_r+0x982>
 801f6a2:	4641      	mov	r1, r8
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	f000 fdff 	bl	80202a8 <_Bfree>
 801f6aa:	4639      	mov	r1, r7
 801f6ac:	4620      	mov	r0, r4
 801f6ae:	f000 fdfb 	bl	80202a8 <_Bfree>
 801f6b2:	e6a5      	b.n	801f400 <_dtoa_r+0x6d8>
 801f6b4:	2600      	movs	r6, #0
 801f6b6:	4637      	mov	r7, r6
 801f6b8:	e7e1      	b.n	801f67e <_dtoa_r+0x956>
 801f6ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f6bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f6c0:	4637      	mov	r7, r6
 801f6c2:	e599      	b.n	801f1f8 <_dtoa_r+0x4d0>
 801f6c4:	9b08      	ldr	r3, [sp, #32]
 801f6c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	f000 80fd 	beq.w	801f8ca <_dtoa_r+0xba2>
 801f6d0:	2d00      	cmp	r5, #0
 801f6d2:	dd05      	ble.n	801f6e0 <_dtoa_r+0x9b8>
 801f6d4:	4639      	mov	r1, r7
 801f6d6:	462a      	mov	r2, r5
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f001 f801 	bl	80206e0 <__lshift>
 801f6de:	4607      	mov	r7, r0
 801f6e0:	9b06      	ldr	r3, [sp, #24]
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d05c      	beq.n	801f7a0 <_dtoa_r+0xa78>
 801f6e6:	6879      	ldr	r1, [r7, #4]
 801f6e8:	4620      	mov	r0, r4
 801f6ea:	f000 fd9d 	bl	8020228 <_Balloc>
 801f6ee:	4605      	mov	r5, r0
 801f6f0:	b928      	cbnz	r0, 801f6fe <_dtoa_r+0x9d6>
 801f6f2:	4b80      	ldr	r3, [pc, #512]	; (801f8f4 <_dtoa_r+0xbcc>)
 801f6f4:	4602      	mov	r2, r0
 801f6f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f6fa:	f7ff bb2e 	b.w	801ed5a <_dtoa_r+0x32>
 801f6fe:	693a      	ldr	r2, [r7, #16]
 801f700:	3202      	adds	r2, #2
 801f702:	0092      	lsls	r2, r2, #2
 801f704:	f107 010c 	add.w	r1, r7, #12
 801f708:	300c      	adds	r0, #12
 801f70a:	f000 fd7f 	bl	802020c <memcpy>
 801f70e:	2201      	movs	r2, #1
 801f710:	4629      	mov	r1, r5
 801f712:	4620      	mov	r0, r4
 801f714:	f000 ffe4 	bl	80206e0 <__lshift>
 801f718:	9b00      	ldr	r3, [sp, #0]
 801f71a:	3301      	adds	r3, #1
 801f71c:	9301      	str	r3, [sp, #4]
 801f71e:	9b00      	ldr	r3, [sp, #0]
 801f720:	444b      	add	r3, r9
 801f722:	9307      	str	r3, [sp, #28]
 801f724:	9b02      	ldr	r3, [sp, #8]
 801f726:	f003 0301 	and.w	r3, r3, #1
 801f72a:	46b8      	mov	r8, r7
 801f72c:	9306      	str	r3, [sp, #24]
 801f72e:	4607      	mov	r7, r0
 801f730:	9b01      	ldr	r3, [sp, #4]
 801f732:	4631      	mov	r1, r6
 801f734:	3b01      	subs	r3, #1
 801f736:	4658      	mov	r0, fp
 801f738:	9302      	str	r3, [sp, #8]
 801f73a:	f7ff fa67 	bl	801ec0c <quorem>
 801f73e:	4603      	mov	r3, r0
 801f740:	3330      	adds	r3, #48	; 0x30
 801f742:	9004      	str	r0, [sp, #16]
 801f744:	4641      	mov	r1, r8
 801f746:	4658      	mov	r0, fp
 801f748:	9308      	str	r3, [sp, #32]
 801f74a:	f001 f835 	bl	80207b8 <__mcmp>
 801f74e:	463a      	mov	r2, r7
 801f750:	4681      	mov	r9, r0
 801f752:	4631      	mov	r1, r6
 801f754:	4620      	mov	r0, r4
 801f756:	f001 f84b 	bl	80207f0 <__mdiff>
 801f75a:	68c2      	ldr	r2, [r0, #12]
 801f75c:	9b08      	ldr	r3, [sp, #32]
 801f75e:	4605      	mov	r5, r0
 801f760:	bb02      	cbnz	r2, 801f7a4 <_dtoa_r+0xa7c>
 801f762:	4601      	mov	r1, r0
 801f764:	4658      	mov	r0, fp
 801f766:	f001 f827 	bl	80207b8 <__mcmp>
 801f76a:	9b08      	ldr	r3, [sp, #32]
 801f76c:	4602      	mov	r2, r0
 801f76e:	4629      	mov	r1, r5
 801f770:	4620      	mov	r0, r4
 801f772:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f776:	f000 fd97 	bl	80202a8 <_Bfree>
 801f77a:	9b05      	ldr	r3, [sp, #20]
 801f77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f77e:	9d01      	ldr	r5, [sp, #4]
 801f780:	ea43 0102 	orr.w	r1, r3, r2
 801f784:	9b06      	ldr	r3, [sp, #24]
 801f786:	430b      	orrs	r3, r1
 801f788:	9b08      	ldr	r3, [sp, #32]
 801f78a:	d10d      	bne.n	801f7a8 <_dtoa_r+0xa80>
 801f78c:	2b39      	cmp	r3, #57	; 0x39
 801f78e:	d029      	beq.n	801f7e4 <_dtoa_r+0xabc>
 801f790:	f1b9 0f00 	cmp.w	r9, #0
 801f794:	dd01      	ble.n	801f79a <_dtoa_r+0xa72>
 801f796:	9b04      	ldr	r3, [sp, #16]
 801f798:	3331      	adds	r3, #49	; 0x31
 801f79a:	9a02      	ldr	r2, [sp, #8]
 801f79c:	7013      	strb	r3, [r2, #0]
 801f79e:	e774      	b.n	801f68a <_dtoa_r+0x962>
 801f7a0:	4638      	mov	r0, r7
 801f7a2:	e7b9      	b.n	801f718 <_dtoa_r+0x9f0>
 801f7a4:	2201      	movs	r2, #1
 801f7a6:	e7e2      	b.n	801f76e <_dtoa_r+0xa46>
 801f7a8:	f1b9 0f00 	cmp.w	r9, #0
 801f7ac:	db06      	blt.n	801f7bc <_dtoa_r+0xa94>
 801f7ae:	9905      	ldr	r1, [sp, #20]
 801f7b0:	ea41 0909 	orr.w	r9, r1, r9
 801f7b4:	9906      	ldr	r1, [sp, #24]
 801f7b6:	ea59 0101 	orrs.w	r1, r9, r1
 801f7ba:	d120      	bne.n	801f7fe <_dtoa_r+0xad6>
 801f7bc:	2a00      	cmp	r2, #0
 801f7be:	ddec      	ble.n	801f79a <_dtoa_r+0xa72>
 801f7c0:	4659      	mov	r1, fp
 801f7c2:	2201      	movs	r2, #1
 801f7c4:	4620      	mov	r0, r4
 801f7c6:	9301      	str	r3, [sp, #4]
 801f7c8:	f000 ff8a 	bl	80206e0 <__lshift>
 801f7cc:	4631      	mov	r1, r6
 801f7ce:	4683      	mov	fp, r0
 801f7d0:	f000 fff2 	bl	80207b8 <__mcmp>
 801f7d4:	2800      	cmp	r0, #0
 801f7d6:	9b01      	ldr	r3, [sp, #4]
 801f7d8:	dc02      	bgt.n	801f7e0 <_dtoa_r+0xab8>
 801f7da:	d1de      	bne.n	801f79a <_dtoa_r+0xa72>
 801f7dc:	07da      	lsls	r2, r3, #31
 801f7de:	d5dc      	bpl.n	801f79a <_dtoa_r+0xa72>
 801f7e0:	2b39      	cmp	r3, #57	; 0x39
 801f7e2:	d1d8      	bne.n	801f796 <_dtoa_r+0xa6e>
 801f7e4:	9a02      	ldr	r2, [sp, #8]
 801f7e6:	2339      	movs	r3, #57	; 0x39
 801f7e8:	7013      	strb	r3, [r2, #0]
 801f7ea:	462b      	mov	r3, r5
 801f7ec:	461d      	mov	r5, r3
 801f7ee:	3b01      	subs	r3, #1
 801f7f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f7f4:	2a39      	cmp	r2, #57	; 0x39
 801f7f6:	d050      	beq.n	801f89a <_dtoa_r+0xb72>
 801f7f8:	3201      	adds	r2, #1
 801f7fa:	701a      	strb	r2, [r3, #0]
 801f7fc:	e745      	b.n	801f68a <_dtoa_r+0x962>
 801f7fe:	2a00      	cmp	r2, #0
 801f800:	dd03      	ble.n	801f80a <_dtoa_r+0xae2>
 801f802:	2b39      	cmp	r3, #57	; 0x39
 801f804:	d0ee      	beq.n	801f7e4 <_dtoa_r+0xabc>
 801f806:	3301      	adds	r3, #1
 801f808:	e7c7      	b.n	801f79a <_dtoa_r+0xa72>
 801f80a:	9a01      	ldr	r2, [sp, #4]
 801f80c:	9907      	ldr	r1, [sp, #28]
 801f80e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f812:	428a      	cmp	r2, r1
 801f814:	d02a      	beq.n	801f86c <_dtoa_r+0xb44>
 801f816:	4659      	mov	r1, fp
 801f818:	2300      	movs	r3, #0
 801f81a:	220a      	movs	r2, #10
 801f81c:	4620      	mov	r0, r4
 801f81e:	f000 fd65 	bl	80202ec <__multadd>
 801f822:	45b8      	cmp	r8, r7
 801f824:	4683      	mov	fp, r0
 801f826:	f04f 0300 	mov.w	r3, #0
 801f82a:	f04f 020a 	mov.w	r2, #10
 801f82e:	4641      	mov	r1, r8
 801f830:	4620      	mov	r0, r4
 801f832:	d107      	bne.n	801f844 <_dtoa_r+0xb1c>
 801f834:	f000 fd5a 	bl	80202ec <__multadd>
 801f838:	4680      	mov	r8, r0
 801f83a:	4607      	mov	r7, r0
 801f83c:	9b01      	ldr	r3, [sp, #4]
 801f83e:	3301      	adds	r3, #1
 801f840:	9301      	str	r3, [sp, #4]
 801f842:	e775      	b.n	801f730 <_dtoa_r+0xa08>
 801f844:	f000 fd52 	bl	80202ec <__multadd>
 801f848:	4639      	mov	r1, r7
 801f84a:	4680      	mov	r8, r0
 801f84c:	2300      	movs	r3, #0
 801f84e:	220a      	movs	r2, #10
 801f850:	4620      	mov	r0, r4
 801f852:	f000 fd4b 	bl	80202ec <__multadd>
 801f856:	4607      	mov	r7, r0
 801f858:	e7f0      	b.n	801f83c <_dtoa_r+0xb14>
 801f85a:	f1b9 0f00 	cmp.w	r9, #0
 801f85e:	9a00      	ldr	r2, [sp, #0]
 801f860:	bfcc      	ite	gt
 801f862:	464d      	movgt	r5, r9
 801f864:	2501      	movle	r5, #1
 801f866:	4415      	add	r5, r2
 801f868:	f04f 0800 	mov.w	r8, #0
 801f86c:	4659      	mov	r1, fp
 801f86e:	2201      	movs	r2, #1
 801f870:	4620      	mov	r0, r4
 801f872:	9301      	str	r3, [sp, #4]
 801f874:	f000 ff34 	bl	80206e0 <__lshift>
 801f878:	4631      	mov	r1, r6
 801f87a:	4683      	mov	fp, r0
 801f87c:	f000 ff9c 	bl	80207b8 <__mcmp>
 801f880:	2800      	cmp	r0, #0
 801f882:	dcb2      	bgt.n	801f7ea <_dtoa_r+0xac2>
 801f884:	d102      	bne.n	801f88c <_dtoa_r+0xb64>
 801f886:	9b01      	ldr	r3, [sp, #4]
 801f888:	07db      	lsls	r3, r3, #31
 801f88a:	d4ae      	bmi.n	801f7ea <_dtoa_r+0xac2>
 801f88c:	462b      	mov	r3, r5
 801f88e:	461d      	mov	r5, r3
 801f890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f894:	2a30      	cmp	r2, #48	; 0x30
 801f896:	d0fa      	beq.n	801f88e <_dtoa_r+0xb66>
 801f898:	e6f7      	b.n	801f68a <_dtoa_r+0x962>
 801f89a:	9a00      	ldr	r2, [sp, #0]
 801f89c:	429a      	cmp	r2, r3
 801f89e:	d1a5      	bne.n	801f7ec <_dtoa_r+0xac4>
 801f8a0:	f10a 0a01 	add.w	sl, sl, #1
 801f8a4:	2331      	movs	r3, #49	; 0x31
 801f8a6:	e779      	b.n	801f79c <_dtoa_r+0xa74>
 801f8a8:	4b13      	ldr	r3, [pc, #76]	; (801f8f8 <_dtoa_r+0xbd0>)
 801f8aa:	f7ff baaf 	b.w	801ee0c <_dtoa_r+0xe4>
 801f8ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	f47f aa86 	bne.w	801edc2 <_dtoa_r+0x9a>
 801f8b6:	4b11      	ldr	r3, [pc, #68]	; (801f8fc <_dtoa_r+0xbd4>)
 801f8b8:	f7ff baa8 	b.w	801ee0c <_dtoa_r+0xe4>
 801f8bc:	f1b9 0f00 	cmp.w	r9, #0
 801f8c0:	dc03      	bgt.n	801f8ca <_dtoa_r+0xba2>
 801f8c2:	9b05      	ldr	r3, [sp, #20]
 801f8c4:	2b02      	cmp	r3, #2
 801f8c6:	f73f aec9 	bgt.w	801f65c <_dtoa_r+0x934>
 801f8ca:	9d00      	ldr	r5, [sp, #0]
 801f8cc:	4631      	mov	r1, r6
 801f8ce:	4658      	mov	r0, fp
 801f8d0:	f7ff f99c 	bl	801ec0c <quorem>
 801f8d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f8d8:	f805 3b01 	strb.w	r3, [r5], #1
 801f8dc:	9a00      	ldr	r2, [sp, #0]
 801f8de:	1aaa      	subs	r2, r5, r2
 801f8e0:	4591      	cmp	r9, r2
 801f8e2:	ddba      	ble.n	801f85a <_dtoa_r+0xb32>
 801f8e4:	4659      	mov	r1, fp
 801f8e6:	2300      	movs	r3, #0
 801f8e8:	220a      	movs	r2, #10
 801f8ea:	4620      	mov	r0, r4
 801f8ec:	f000 fcfe 	bl	80202ec <__multadd>
 801f8f0:	4683      	mov	fp, r0
 801f8f2:	e7eb      	b.n	801f8cc <_dtoa_r+0xba4>
 801f8f4:	0802b734 	.word	0x0802b734
 801f8f8:	0802b534 	.word	0x0802b534
 801f8fc:	0802b6b1 	.word	0x0802b6b1

0801f900 <std>:
 801f900:	2300      	movs	r3, #0
 801f902:	b510      	push	{r4, lr}
 801f904:	4604      	mov	r4, r0
 801f906:	e9c0 3300 	strd	r3, r3, [r0]
 801f90a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f90e:	6083      	str	r3, [r0, #8]
 801f910:	8181      	strh	r1, [r0, #12]
 801f912:	6643      	str	r3, [r0, #100]	; 0x64
 801f914:	81c2      	strh	r2, [r0, #14]
 801f916:	6183      	str	r3, [r0, #24]
 801f918:	4619      	mov	r1, r3
 801f91a:	2208      	movs	r2, #8
 801f91c:	305c      	adds	r0, #92	; 0x5c
 801f91e:	f7fd fc07 	bl	801d130 <memset>
 801f922:	4b05      	ldr	r3, [pc, #20]	; (801f938 <std+0x38>)
 801f924:	6263      	str	r3, [r4, #36]	; 0x24
 801f926:	4b05      	ldr	r3, [pc, #20]	; (801f93c <std+0x3c>)
 801f928:	62a3      	str	r3, [r4, #40]	; 0x28
 801f92a:	4b05      	ldr	r3, [pc, #20]	; (801f940 <std+0x40>)
 801f92c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f92e:	4b05      	ldr	r3, [pc, #20]	; (801f944 <std+0x44>)
 801f930:	6224      	str	r4, [r4, #32]
 801f932:	6323      	str	r3, [r4, #48]	; 0x30
 801f934:	bd10      	pop	{r4, pc}
 801f936:	bf00      	nop
 801f938:	08020ff9 	.word	0x08020ff9
 801f93c:	0802101b 	.word	0x0802101b
 801f940:	08021053 	.word	0x08021053
 801f944:	08021077 	.word	0x08021077

0801f948 <_cleanup_r>:
 801f948:	4901      	ldr	r1, [pc, #4]	; (801f950 <_cleanup_r+0x8>)
 801f94a:	f000 b8af 	b.w	801faac <_fwalk_reent>
 801f94e:	bf00      	nop
 801f950:	080213cd 	.word	0x080213cd

0801f954 <__sfmoreglue>:
 801f954:	b570      	push	{r4, r5, r6, lr}
 801f956:	1e4a      	subs	r2, r1, #1
 801f958:	2568      	movs	r5, #104	; 0x68
 801f95a:	4355      	muls	r5, r2
 801f95c:	460e      	mov	r6, r1
 801f95e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f962:	f001 f97b 	bl	8020c5c <_malloc_r>
 801f966:	4604      	mov	r4, r0
 801f968:	b140      	cbz	r0, 801f97c <__sfmoreglue+0x28>
 801f96a:	2100      	movs	r1, #0
 801f96c:	e9c0 1600 	strd	r1, r6, [r0]
 801f970:	300c      	adds	r0, #12
 801f972:	60a0      	str	r0, [r4, #8]
 801f974:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f978:	f7fd fbda 	bl	801d130 <memset>
 801f97c:	4620      	mov	r0, r4
 801f97e:	bd70      	pop	{r4, r5, r6, pc}

0801f980 <__sfp_lock_acquire>:
 801f980:	4801      	ldr	r0, [pc, #4]	; (801f988 <__sfp_lock_acquire+0x8>)
 801f982:	f000 bc26 	b.w	80201d2 <__retarget_lock_acquire_recursive>
 801f986:	bf00      	nop
 801f988:	2000a108 	.word	0x2000a108

0801f98c <__sfp_lock_release>:
 801f98c:	4801      	ldr	r0, [pc, #4]	; (801f994 <__sfp_lock_release+0x8>)
 801f98e:	f000 bc21 	b.w	80201d4 <__retarget_lock_release_recursive>
 801f992:	bf00      	nop
 801f994:	2000a108 	.word	0x2000a108

0801f998 <__sinit_lock_acquire>:
 801f998:	4801      	ldr	r0, [pc, #4]	; (801f9a0 <__sinit_lock_acquire+0x8>)
 801f99a:	f000 bc1a 	b.w	80201d2 <__retarget_lock_acquire_recursive>
 801f99e:	bf00      	nop
 801f9a0:	2000a107 	.word	0x2000a107

0801f9a4 <__sinit_lock_release>:
 801f9a4:	4801      	ldr	r0, [pc, #4]	; (801f9ac <__sinit_lock_release+0x8>)
 801f9a6:	f000 bc15 	b.w	80201d4 <__retarget_lock_release_recursive>
 801f9aa:	bf00      	nop
 801f9ac:	2000a107 	.word	0x2000a107

0801f9b0 <__sinit>:
 801f9b0:	b510      	push	{r4, lr}
 801f9b2:	4604      	mov	r4, r0
 801f9b4:	f7ff fff0 	bl	801f998 <__sinit_lock_acquire>
 801f9b8:	69a3      	ldr	r3, [r4, #24]
 801f9ba:	b11b      	cbz	r3, 801f9c4 <__sinit+0x14>
 801f9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9c0:	f7ff bff0 	b.w	801f9a4 <__sinit_lock_release>
 801f9c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f9c8:	6523      	str	r3, [r4, #80]	; 0x50
 801f9ca:	4b13      	ldr	r3, [pc, #76]	; (801fa18 <__sinit+0x68>)
 801f9cc:	4a13      	ldr	r2, [pc, #76]	; (801fa1c <__sinit+0x6c>)
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f9d2:	42a3      	cmp	r3, r4
 801f9d4:	bf04      	itt	eq
 801f9d6:	2301      	moveq	r3, #1
 801f9d8:	61a3      	streq	r3, [r4, #24]
 801f9da:	4620      	mov	r0, r4
 801f9dc:	f000 f820 	bl	801fa20 <__sfp>
 801f9e0:	6060      	str	r0, [r4, #4]
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	f000 f81c 	bl	801fa20 <__sfp>
 801f9e8:	60a0      	str	r0, [r4, #8]
 801f9ea:	4620      	mov	r0, r4
 801f9ec:	f000 f818 	bl	801fa20 <__sfp>
 801f9f0:	2200      	movs	r2, #0
 801f9f2:	60e0      	str	r0, [r4, #12]
 801f9f4:	2104      	movs	r1, #4
 801f9f6:	6860      	ldr	r0, [r4, #4]
 801f9f8:	f7ff ff82 	bl	801f900 <std>
 801f9fc:	68a0      	ldr	r0, [r4, #8]
 801f9fe:	2201      	movs	r2, #1
 801fa00:	2109      	movs	r1, #9
 801fa02:	f7ff ff7d 	bl	801f900 <std>
 801fa06:	68e0      	ldr	r0, [r4, #12]
 801fa08:	2202      	movs	r2, #2
 801fa0a:	2112      	movs	r1, #18
 801fa0c:	f7ff ff78 	bl	801f900 <std>
 801fa10:	2301      	movs	r3, #1
 801fa12:	61a3      	str	r3, [r4, #24]
 801fa14:	e7d2      	b.n	801f9bc <__sinit+0xc>
 801fa16:	bf00      	nop
 801fa18:	0802b520 	.word	0x0802b520
 801fa1c:	0801f949 	.word	0x0801f949

0801fa20 <__sfp>:
 801fa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa22:	4607      	mov	r7, r0
 801fa24:	f7ff ffac 	bl	801f980 <__sfp_lock_acquire>
 801fa28:	4b1e      	ldr	r3, [pc, #120]	; (801faa4 <__sfp+0x84>)
 801fa2a:	681e      	ldr	r6, [r3, #0]
 801fa2c:	69b3      	ldr	r3, [r6, #24]
 801fa2e:	b913      	cbnz	r3, 801fa36 <__sfp+0x16>
 801fa30:	4630      	mov	r0, r6
 801fa32:	f7ff ffbd 	bl	801f9b0 <__sinit>
 801fa36:	3648      	adds	r6, #72	; 0x48
 801fa38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fa3c:	3b01      	subs	r3, #1
 801fa3e:	d503      	bpl.n	801fa48 <__sfp+0x28>
 801fa40:	6833      	ldr	r3, [r6, #0]
 801fa42:	b30b      	cbz	r3, 801fa88 <__sfp+0x68>
 801fa44:	6836      	ldr	r6, [r6, #0]
 801fa46:	e7f7      	b.n	801fa38 <__sfp+0x18>
 801fa48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fa4c:	b9d5      	cbnz	r5, 801fa84 <__sfp+0x64>
 801fa4e:	4b16      	ldr	r3, [pc, #88]	; (801faa8 <__sfp+0x88>)
 801fa50:	60e3      	str	r3, [r4, #12]
 801fa52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fa56:	6665      	str	r5, [r4, #100]	; 0x64
 801fa58:	f000 fbba 	bl	80201d0 <__retarget_lock_init_recursive>
 801fa5c:	f7ff ff96 	bl	801f98c <__sfp_lock_release>
 801fa60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fa64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fa68:	6025      	str	r5, [r4, #0]
 801fa6a:	61a5      	str	r5, [r4, #24]
 801fa6c:	2208      	movs	r2, #8
 801fa6e:	4629      	mov	r1, r5
 801fa70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fa74:	f7fd fb5c 	bl	801d130 <memset>
 801fa78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fa7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fa80:	4620      	mov	r0, r4
 801fa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa84:	3468      	adds	r4, #104	; 0x68
 801fa86:	e7d9      	b.n	801fa3c <__sfp+0x1c>
 801fa88:	2104      	movs	r1, #4
 801fa8a:	4638      	mov	r0, r7
 801fa8c:	f7ff ff62 	bl	801f954 <__sfmoreglue>
 801fa90:	4604      	mov	r4, r0
 801fa92:	6030      	str	r0, [r6, #0]
 801fa94:	2800      	cmp	r0, #0
 801fa96:	d1d5      	bne.n	801fa44 <__sfp+0x24>
 801fa98:	f7ff ff78 	bl	801f98c <__sfp_lock_release>
 801fa9c:	230c      	movs	r3, #12
 801fa9e:	603b      	str	r3, [r7, #0]
 801faa0:	e7ee      	b.n	801fa80 <__sfp+0x60>
 801faa2:	bf00      	nop
 801faa4:	0802b520 	.word	0x0802b520
 801faa8:	ffff0001 	.word	0xffff0001

0801faac <_fwalk_reent>:
 801faac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fab0:	4606      	mov	r6, r0
 801fab2:	4688      	mov	r8, r1
 801fab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fab8:	2700      	movs	r7, #0
 801faba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fabe:	f1b9 0901 	subs.w	r9, r9, #1
 801fac2:	d505      	bpl.n	801fad0 <_fwalk_reent+0x24>
 801fac4:	6824      	ldr	r4, [r4, #0]
 801fac6:	2c00      	cmp	r4, #0
 801fac8:	d1f7      	bne.n	801faba <_fwalk_reent+0xe>
 801faca:	4638      	mov	r0, r7
 801facc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fad0:	89ab      	ldrh	r3, [r5, #12]
 801fad2:	2b01      	cmp	r3, #1
 801fad4:	d907      	bls.n	801fae6 <_fwalk_reent+0x3a>
 801fad6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fada:	3301      	adds	r3, #1
 801fadc:	d003      	beq.n	801fae6 <_fwalk_reent+0x3a>
 801fade:	4629      	mov	r1, r5
 801fae0:	4630      	mov	r0, r6
 801fae2:	47c0      	blx	r8
 801fae4:	4307      	orrs	r7, r0
 801fae6:	3568      	adds	r5, #104	; 0x68
 801fae8:	e7e9      	b.n	801fabe <_fwalk_reent+0x12>

0801faea <rshift>:
 801faea:	6903      	ldr	r3, [r0, #16]
 801faec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801faf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801faf4:	ea4f 1261 	mov.w	r2, r1, asr #5
 801faf8:	f100 0414 	add.w	r4, r0, #20
 801fafc:	dd45      	ble.n	801fb8a <rshift+0xa0>
 801fafe:	f011 011f 	ands.w	r1, r1, #31
 801fb02:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801fb06:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801fb0a:	d10c      	bne.n	801fb26 <rshift+0x3c>
 801fb0c:	f100 0710 	add.w	r7, r0, #16
 801fb10:	4629      	mov	r1, r5
 801fb12:	42b1      	cmp	r1, r6
 801fb14:	d334      	bcc.n	801fb80 <rshift+0x96>
 801fb16:	1a9b      	subs	r3, r3, r2
 801fb18:	009b      	lsls	r3, r3, #2
 801fb1a:	1eea      	subs	r2, r5, #3
 801fb1c:	4296      	cmp	r6, r2
 801fb1e:	bf38      	it	cc
 801fb20:	2300      	movcc	r3, #0
 801fb22:	4423      	add	r3, r4
 801fb24:	e015      	b.n	801fb52 <rshift+0x68>
 801fb26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801fb2a:	f1c1 0820 	rsb	r8, r1, #32
 801fb2e:	40cf      	lsrs	r7, r1
 801fb30:	f105 0e04 	add.w	lr, r5, #4
 801fb34:	46a1      	mov	r9, r4
 801fb36:	4576      	cmp	r6, lr
 801fb38:	46f4      	mov	ip, lr
 801fb3a:	d815      	bhi.n	801fb68 <rshift+0x7e>
 801fb3c:	1a9b      	subs	r3, r3, r2
 801fb3e:	009a      	lsls	r2, r3, #2
 801fb40:	3a04      	subs	r2, #4
 801fb42:	3501      	adds	r5, #1
 801fb44:	42ae      	cmp	r6, r5
 801fb46:	bf38      	it	cc
 801fb48:	2200      	movcc	r2, #0
 801fb4a:	18a3      	adds	r3, r4, r2
 801fb4c:	50a7      	str	r7, [r4, r2]
 801fb4e:	b107      	cbz	r7, 801fb52 <rshift+0x68>
 801fb50:	3304      	adds	r3, #4
 801fb52:	1b1a      	subs	r2, r3, r4
 801fb54:	42a3      	cmp	r3, r4
 801fb56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801fb5a:	bf08      	it	eq
 801fb5c:	2300      	moveq	r3, #0
 801fb5e:	6102      	str	r2, [r0, #16]
 801fb60:	bf08      	it	eq
 801fb62:	6143      	streq	r3, [r0, #20]
 801fb64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb68:	f8dc c000 	ldr.w	ip, [ip]
 801fb6c:	fa0c fc08 	lsl.w	ip, ip, r8
 801fb70:	ea4c 0707 	orr.w	r7, ip, r7
 801fb74:	f849 7b04 	str.w	r7, [r9], #4
 801fb78:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fb7c:	40cf      	lsrs	r7, r1
 801fb7e:	e7da      	b.n	801fb36 <rshift+0x4c>
 801fb80:	f851 cb04 	ldr.w	ip, [r1], #4
 801fb84:	f847 cf04 	str.w	ip, [r7, #4]!
 801fb88:	e7c3      	b.n	801fb12 <rshift+0x28>
 801fb8a:	4623      	mov	r3, r4
 801fb8c:	e7e1      	b.n	801fb52 <rshift+0x68>

0801fb8e <__hexdig_fun>:
 801fb8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fb92:	2b09      	cmp	r3, #9
 801fb94:	d802      	bhi.n	801fb9c <__hexdig_fun+0xe>
 801fb96:	3820      	subs	r0, #32
 801fb98:	b2c0      	uxtb	r0, r0
 801fb9a:	4770      	bx	lr
 801fb9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801fba0:	2b05      	cmp	r3, #5
 801fba2:	d801      	bhi.n	801fba8 <__hexdig_fun+0x1a>
 801fba4:	3847      	subs	r0, #71	; 0x47
 801fba6:	e7f7      	b.n	801fb98 <__hexdig_fun+0xa>
 801fba8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fbac:	2b05      	cmp	r3, #5
 801fbae:	d801      	bhi.n	801fbb4 <__hexdig_fun+0x26>
 801fbb0:	3827      	subs	r0, #39	; 0x27
 801fbb2:	e7f1      	b.n	801fb98 <__hexdig_fun+0xa>
 801fbb4:	2000      	movs	r0, #0
 801fbb6:	4770      	bx	lr

0801fbb8 <__gethex>:
 801fbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbbc:	ed2d 8b02 	vpush	{d8}
 801fbc0:	b089      	sub	sp, #36	; 0x24
 801fbc2:	ee08 0a10 	vmov	s16, r0
 801fbc6:	9304      	str	r3, [sp, #16]
 801fbc8:	4bbc      	ldr	r3, [pc, #752]	; (801febc <__gethex+0x304>)
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	9301      	str	r3, [sp, #4]
 801fbce:	4618      	mov	r0, r3
 801fbd0:	468b      	mov	fp, r1
 801fbd2:	4690      	mov	r8, r2
 801fbd4:	f7e0 fb0c 	bl	80001f0 <strlen>
 801fbd8:	9b01      	ldr	r3, [sp, #4]
 801fbda:	f8db 2000 	ldr.w	r2, [fp]
 801fbde:	4403      	add	r3, r0
 801fbe0:	4682      	mov	sl, r0
 801fbe2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fbe6:	9305      	str	r3, [sp, #20]
 801fbe8:	1c93      	adds	r3, r2, #2
 801fbea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fbee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fbf2:	32fe      	adds	r2, #254	; 0xfe
 801fbf4:	18d1      	adds	r1, r2, r3
 801fbf6:	461f      	mov	r7, r3
 801fbf8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fbfc:	9100      	str	r1, [sp, #0]
 801fbfe:	2830      	cmp	r0, #48	; 0x30
 801fc00:	d0f8      	beq.n	801fbf4 <__gethex+0x3c>
 801fc02:	f7ff ffc4 	bl	801fb8e <__hexdig_fun>
 801fc06:	4604      	mov	r4, r0
 801fc08:	2800      	cmp	r0, #0
 801fc0a:	d13a      	bne.n	801fc82 <__gethex+0xca>
 801fc0c:	9901      	ldr	r1, [sp, #4]
 801fc0e:	4652      	mov	r2, sl
 801fc10:	4638      	mov	r0, r7
 801fc12:	f001 fa34 	bl	802107e <strncmp>
 801fc16:	4605      	mov	r5, r0
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	d168      	bne.n	801fcee <__gethex+0x136>
 801fc1c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801fc20:	eb07 060a 	add.w	r6, r7, sl
 801fc24:	f7ff ffb3 	bl	801fb8e <__hexdig_fun>
 801fc28:	2800      	cmp	r0, #0
 801fc2a:	d062      	beq.n	801fcf2 <__gethex+0x13a>
 801fc2c:	4633      	mov	r3, r6
 801fc2e:	7818      	ldrb	r0, [r3, #0]
 801fc30:	2830      	cmp	r0, #48	; 0x30
 801fc32:	461f      	mov	r7, r3
 801fc34:	f103 0301 	add.w	r3, r3, #1
 801fc38:	d0f9      	beq.n	801fc2e <__gethex+0x76>
 801fc3a:	f7ff ffa8 	bl	801fb8e <__hexdig_fun>
 801fc3e:	2301      	movs	r3, #1
 801fc40:	fab0 f480 	clz	r4, r0
 801fc44:	0964      	lsrs	r4, r4, #5
 801fc46:	4635      	mov	r5, r6
 801fc48:	9300      	str	r3, [sp, #0]
 801fc4a:	463a      	mov	r2, r7
 801fc4c:	4616      	mov	r6, r2
 801fc4e:	3201      	adds	r2, #1
 801fc50:	7830      	ldrb	r0, [r6, #0]
 801fc52:	f7ff ff9c 	bl	801fb8e <__hexdig_fun>
 801fc56:	2800      	cmp	r0, #0
 801fc58:	d1f8      	bne.n	801fc4c <__gethex+0x94>
 801fc5a:	9901      	ldr	r1, [sp, #4]
 801fc5c:	4652      	mov	r2, sl
 801fc5e:	4630      	mov	r0, r6
 801fc60:	f001 fa0d 	bl	802107e <strncmp>
 801fc64:	b980      	cbnz	r0, 801fc88 <__gethex+0xd0>
 801fc66:	b94d      	cbnz	r5, 801fc7c <__gethex+0xc4>
 801fc68:	eb06 050a 	add.w	r5, r6, sl
 801fc6c:	462a      	mov	r2, r5
 801fc6e:	4616      	mov	r6, r2
 801fc70:	3201      	adds	r2, #1
 801fc72:	7830      	ldrb	r0, [r6, #0]
 801fc74:	f7ff ff8b 	bl	801fb8e <__hexdig_fun>
 801fc78:	2800      	cmp	r0, #0
 801fc7a:	d1f8      	bne.n	801fc6e <__gethex+0xb6>
 801fc7c:	1bad      	subs	r5, r5, r6
 801fc7e:	00ad      	lsls	r5, r5, #2
 801fc80:	e004      	b.n	801fc8c <__gethex+0xd4>
 801fc82:	2400      	movs	r4, #0
 801fc84:	4625      	mov	r5, r4
 801fc86:	e7e0      	b.n	801fc4a <__gethex+0x92>
 801fc88:	2d00      	cmp	r5, #0
 801fc8a:	d1f7      	bne.n	801fc7c <__gethex+0xc4>
 801fc8c:	7833      	ldrb	r3, [r6, #0]
 801fc8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fc92:	2b50      	cmp	r3, #80	; 0x50
 801fc94:	d13b      	bne.n	801fd0e <__gethex+0x156>
 801fc96:	7873      	ldrb	r3, [r6, #1]
 801fc98:	2b2b      	cmp	r3, #43	; 0x2b
 801fc9a:	d02c      	beq.n	801fcf6 <__gethex+0x13e>
 801fc9c:	2b2d      	cmp	r3, #45	; 0x2d
 801fc9e:	d02e      	beq.n	801fcfe <__gethex+0x146>
 801fca0:	1c71      	adds	r1, r6, #1
 801fca2:	f04f 0900 	mov.w	r9, #0
 801fca6:	7808      	ldrb	r0, [r1, #0]
 801fca8:	f7ff ff71 	bl	801fb8e <__hexdig_fun>
 801fcac:	1e43      	subs	r3, r0, #1
 801fcae:	b2db      	uxtb	r3, r3
 801fcb0:	2b18      	cmp	r3, #24
 801fcb2:	d82c      	bhi.n	801fd0e <__gethex+0x156>
 801fcb4:	f1a0 0210 	sub.w	r2, r0, #16
 801fcb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fcbc:	f7ff ff67 	bl	801fb8e <__hexdig_fun>
 801fcc0:	1e43      	subs	r3, r0, #1
 801fcc2:	b2db      	uxtb	r3, r3
 801fcc4:	2b18      	cmp	r3, #24
 801fcc6:	d91d      	bls.n	801fd04 <__gethex+0x14c>
 801fcc8:	f1b9 0f00 	cmp.w	r9, #0
 801fccc:	d000      	beq.n	801fcd0 <__gethex+0x118>
 801fcce:	4252      	negs	r2, r2
 801fcd0:	4415      	add	r5, r2
 801fcd2:	f8cb 1000 	str.w	r1, [fp]
 801fcd6:	b1e4      	cbz	r4, 801fd12 <__gethex+0x15a>
 801fcd8:	9b00      	ldr	r3, [sp, #0]
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	bf14      	ite	ne
 801fcde:	2700      	movne	r7, #0
 801fce0:	2706      	moveq	r7, #6
 801fce2:	4638      	mov	r0, r7
 801fce4:	b009      	add	sp, #36	; 0x24
 801fce6:	ecbd 8b02 	vpop	{d8}
 801fcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcee:	463e      	mov	r6, r7
 801fcf0:	4625      	mov	r5, r4
 801fcf2:	2401      	movs	r4, #1
 801fcf4:	e7ca      	b.n	801fc8c <__gethex+0xd4>
 801fcf6:	f04f 0900 	mov.w	r9, #0
 801fcfa:	1cb1      	adds	r1, r6, #2
 801fcfc:	e7d3      	b.n	801fca6 <__gethex+0xee>
 801fcfe:	f04f 0901 	mov.w	r9, #1
 801fd02:	e7fa      	b.n	801fcfa <__gethex+0x142>
 801fd04:	230a      	movs	r3, #10
 801fd06:	fb03 0202 	mla	r2, r3, r2, r0
 801fd0a:	3a10      	subs	r2, #16
 801fd0c:	e7d4      	b.n	801fcb8 <__gethex+0x100>
 801fd0e:	4631      	mov	r1, r6
 801fd10:	e7df      	b.n	801fcd2 <__gethex+0x11a>
 801fd12:	1bf3      	subs	r3, r6, r7
 801fd14:	3b01      	subs	r3, #1
 801fd16:	4621      	mov	r1, r4
 801fd18:	2b07      	cmp	r3, #7
 801fd1a:	dc0b      	bgt.n	801fd34 <__gethex+0x17c>
 801fd1c:	ee18 0a10 	vmov	r0, s16
 801fd20:	f000 fa82 	bl	8020228 <_Balloc>
 801fd24:	4604      	mov	r4, r0
 801fd26:	b940      	cbnz	r0, 801fd3a <__gethex+0x182>
 801fd28:	4b65      	ldr	r3, [pc, #404]	; (801fec0 <__gethex+0x308>)
 801fd2a:	4602      	mov	r2, r0
 801fd2c:	21de      	movs	r1, #222	; 0xde
 801fd2e:	4865      	ldr	r0, [pc, #404]	; (801fec4 <__gethex+0x30c>)
 801fd30:	f001 fa98 	bl	8021264 <__assert_func>
 801fd34:	3101      	adds	r1, #1
 801fd36:	105b      	asrs	r3, r3, #1
 801fd38:	e7ee      	b.n	801fd18 <__gethex+0x160>
 801fd3a:	f100 0914 	add.w	r9, r0, #20
 801fd3e:	f04f 0b00 	mov.w	fp, #0
 801fd42:	f1ca 0301 	rsb	r3, sl, #1
 801fd46:	f8cd 9008 	str.w	r9, [sp, #8]
 801fd4a:	f8cd b000 	str.w	fp, [sp]
 801fd4e:	9306      	str	r3, [sp, #24]
 801fd50:	42b7      	cmp	r7, r6
 801fd52:	d340      	bcc.n	801fdd6 <__gethex+0x21e>
 801fd54:	9802      	ldr	r0, [sp, #8]
 801fd56:	9b00      	ldr	r3, [sp, #0]
 801fd58:	f840 3b04 	str.w	r3, [r0], #4
 801fd5c:	eba0 0009 	sub.w	r0, r0, r9
 801fd60:	1080      	asrs	r0, r0, #2
 801fd62:	0146      	lsls	r6, r0, #5
 801fd64:	6120      	str	r0, [r4, #16]
 801fd66:	4618      	mov	r0, r3
 801fd68:	f000 fb54 	bl	8020414 <__hi0bits>
 801fd6c:	1a30      	subs	r0, r6, r0
 801fd6e:	f8d8 6000 	ldr.w	r6, [r8]
 801fd72:	42b0      	cmp	r0, r6
 801fd74:	dd63      	ble.n	801fe3e <__gethex+0x286>
 801fd76:	1b87      	subs	r7, r0, r6
 801fd78:	4639      	mov	r1, r7
 801fd7a:	4620      	mov	r0, r4
 801fd7c:	f000 feee 	bl	8020b5c <__any_on>
 801fd80:	4682      	mov	sl, r0
 801fd82:	b1a8      	cbz	r0, 801fdb0 <__gethex+0x1f8>
 801fd84:	1e7b      	subs	r3, r7, #1
 801fd86:	1159      	asrs	r1, r3, #5
 801fd88:	f003 021f 	and.w	r2, r3, #31
 801fd8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fd90:	f04f 0a01 	mov.w	sl, #1
 801fd94:	fa0a f202 	lsl.w	r2, sl, r2
 801fd98:	420a      	tst	r2, r1
 801fd9a:	d009      	beq.n	801fdb0 <__gethex+0x1f8>
 801fd9c:	4553      	cmp	r3, sl
 801fd9e:	dd05      	ble.n	801fdac <__gethex+0x1f4>
 801fda0:	1eb9      	subs	r1, r7, #2
 801fda2:	4620      	mov	r0, r4
 801fda4:	f000 feda 	bl	8020b5c <__any_on>
 801fda8:	2800      	cmp	r0, #0
 801fdaa:	d145      	bne.n	801fe38 <__gethex+0x280>
 801fdac:	f04f 0a02 	mov.w	sl, #2
 801fdb0:	4639      	mov	r1, r7
 801fdb2:	4620      	mov	r0, r4
 801fdb4:	f7ff fe99 	bl	801faea <rshift>
 801fdb8:	443d      	add	r5, r7
 801fdba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fdbe:	42ab      	cmp	r3, r5
 801fdc0:	da4c      	bge.n	801fe5c <__gethex+0x2a4>
 801fdc2:	ee18 0a10 	vmov	r0, s16
 801fdc6:	4621      	mov	r1, r4
 801fdc8:	f000 fa6e 	bl	80202a8 <_Bfree>
 801fdcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fdce:	2300      	movs	r3, #0
 801fdd0:	6013      	str	r3, [r2, #0]
 801fdd2:	27a3      	movs	r7, #163	; 0xa3
 801fdd4:	e785      	b.n	801fce2 <__gethex+0x12a>
 801fdd6:	1e73      	subs	r3, r6, #1
 801fdd8:	9a05      	ldr	r2, [sp, #20]
 801fdda:	9303      	str	r3, [sp, #12]
 801fddc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fde0:	4293      	cmp	r3, r2
 801fde2:	d019      	beq.n	801fe18 <__gethex+0x260>
 801fde4:	f1bb 0f20 	cmp.w	fp, #32
 801fde8:	d107      	bne.n	801fdfa <__gethex+0x242>
 801fdea:	9b02      	ldr	r3, [sp, #8]
 801fdec:	9a00      	ldr	r2, [sp, #0]
 801fdee:	f843 2b04 	str.w	r2, [r3], #4
 801fdf2:	9302      	str	r3, [sp, #8]
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	9300      	str	r3, [sp, #0]
 801fdf8:	469b      	mov	fp, r3
 801fdfa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fdfe:	f7ff fec6 	bl	801fb8e <__hexdig_fun>
 801fe02:	9b00      	ldr	r3, [sp, #0]
 801fe04:	f000 000f 	and.w	r0, r0, #15
 801fe08:	fa00 f00b 	lsl.w	r0, r0, fp
 801fe0c:	4303      	orrs	r3, r0
 801fe0e:	9300      	str	r3, [sp, #0]
 801fe10:	f10b 0b04 	add.w	fp, fp, #4
 801fe14:	9b03      	ldr	r3, [sp, #12]
 801fe16:	e00d      	b.n	801fe34 <__gethex+0x27c>
 801fe18:	9b03      	ldr	r3, [sp, #12]
 801fe1a:	9a06      	ldr	r2, [sp, #24]
 801fe1c:	4413      	add	r3, r2
 801fe1e:	42bb      	cmp	r3, r7
 801fe20:	d3e0      	bcc.n	801fde4 <__gethex+0x22c>
 801fe22:	4618      	mov	r0, r3
 801fe24:	9901      	ldr	r1, [sp, #4]
 801fe26:	9307      	str	r3, [sp, #28]
 801fe28:	4652      	mov	r2, sl
 801fe2a:	f001 f928 	bl	802107e <strncmp>
 801fe2e:	9b07      	ldr	r3, [sp, #28]
 801fe30:	2800      	cmp	r0, #0
 801fe32:	d1d7      	bne.n	801fde4 <__gethex+0x22c>
 801fe34:	461e      	mov	r6, r3
 801fe36:	e78b      	b.n	801fd50 <__gethex+0x198>
 801fe38:	f04f 0a03 	mov.w	sl, #3
 801fe3c:	e7b8      	b.n	801fdb0 <__gethex+0x1f8>
 801fe3e:	da0a      	bge.n	801fe56 <__gethex+0x29e>
 801fe40:	1a37      	subs	r7, r6, r0
 801fe42:	4621      	mov	r1, r4
 801fe44:	ee18 0a10 	vmov	r0, s16
 801fe48:	463a      	mov	r2, r7
 801fe4a:	f000 fc49 	bl	80206e0 <__lshift>
 801fe4e:	1bed      	subs	r5, r5, r7
 801fe50:	4604      	mov	r4, r0
 801fe52:	f100 0914 	add.w	r9, r0, #20
 801fe56:	f04f 0a00 	mov.w	sl, #0
 801fe5a:	e7ae      	b.n	801fdba <__gethex+0x202>
 801fe5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fe60:	42a8      	cmp	r0, r5
 801fe62:	dd72      	ble.n	801ff4a <__gethex+0x392>
 801fe64:	1b45      	subs	r5, r0, r5
 801fe66:	42ae      	cmp	r6, r5
 801fe68:	dc36      	bgt.n	801fed8 <__gethex+0x320>
 801fe6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fe6e:	2b02      	cmp	r3, #2
 801fe70:	d02a      	beq.n	801fec8 <__gethex+0x310>
 801fe72:	2b03      	cmp	r3, #3
 801fe74:	d02c      	beq.n	801fed0 <__gethex+0x318>
 801fe76:	2b01      	cmp	r3, #1
 801fe78:	d115      	bne.n	801fea6 <__gethex+0x2ee>
 801fe7a:	42ae      	cmp	r6, r5
 801fe7c:	d113      	bne.n	801fea6 <__gethex+0x2ee>
 801fe7e:	2e01      	cmp	r6, #1
 801fe80:	d10b      	bne.n	801fe9a <__gethex+0x2e2>
 801fe82:	9a04      	ldr	r2, [sp, #16]
 801fe84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fe88:	6013      	str	r3, [r2, #0]
 801fe8a:	2301      	movs	r3, #1
 801fe8c:	6123      	str	r3, [r4, #16]
 801fe8e:	f8c9 3000 	str.w	r3, [r9]
 801fe92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fe94:	2762      	movs	r7, #98	; 0x62
 801fe96:	601c      	str	r4, [r3, #0]
 801fe98:	e723      	b.n	801fce2 <__gethex+0x12a>
 801fe9a:	1e71      	subs	r1, r6, #1
 801fe9c:	4620      	mov	r0, r4
 801fe9e:	f000 fe5d 	bl	8020b5c <__any_on>
 801fea2:	2800      	cmp	r0, #0
 801fea4:	d1ed      	bne.n	801fe82 <__gethex+0x2ca>
 801fea6:	ee18 0a10 	vmov	r0, s16
 801feaa:	4621      	mov	r1, r4
 801feac:	f000 f9fc 	bl	80202a8 <_Bfree>
 801feb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801feb2:	2300      	movs	r3, #0
 801feb4:	6013      	str	r3, [r2, #0]
 801feb6:	2750      	movs	r7, #80	; 0x50
 801feb8:	e713      	b.n	801fce2 <__gethex+0x12a>
 801feba:	bf00      	nop
 801febc:	0802b814 	.word	0x0802b814
 801fec0:	0802b734 	.word	0x0802b734
 801fec4:	0802b7a8 	.word	0x0802b7a8
 801fec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d1eb      	bne.n	801fea6 <__gethex+0x2ee>
 801fece:	e7d8      	b.n	801fe82 <__gethex+0x2ca>
 801fed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d1d5      	bne.n	801fe82 <__gethex+0x2ca>
 801fed6:	e7e6      	b.n	801fea6 <__gethex+0x2ee>
 801fed8:	1e6f      	subs	r7, r5, #1
 801feda:	f1ba 0f00 	cmp.w	sl, #0
 801fede:	d131      	bne.n	801ff44 <__gethex+0x38c>
 801fee0:	b127      	cbz	r7, 801feec <__gethex+0x334>
 801fee2:	4639      	mov	r1, r7
 801fee4:	4620      	mov	r0, r4
 801fee6:	f000 fe39 	bl	8020b5c <__any_on>
 801feea:	4682      	mov	sl, r0
 801feec:	117b      	asrs	r3, r7, #5
 801feee:	2101      	movs	r1, #1
 801fef0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fef4:	f007 071f 	and.w	r7, r7, #31
 801fef8:	fa01 f707 	lsl.w	r7, r1, r7
 801fefc:	421f      	tst	r7, r3
 801fefe:	4629      	mov	r1, r5
 801ff00:	4620      	mov	r0, r4
 801ff02:	bf18      	it	ne
 801ff04:	f04a 0a02 	orrne.w	sl, sl, #2
 801ff08:	1b76      	subs	r6, r6, r5
 801ff0a:	f7ff fdee 	bl	801faea <rshift>
 801ff0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ff12:	2702      	movs	r7, #2
 801ff14:	f1ba 0f00 	cmp.w	sl, #0
 801ff18:	d048      	beq.n	801ffac <__gethex+0x3f4>
 801ff1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ff1e:	2b02      	cmp	r3, #2
 801ff20:	d015      	beq.n	801ff4e <__gethex+0x396>
 801ff22:	2b03      	cmp	r3, #3
 801ff24:	d017      	beq.n	801ff56 <__gethex+0x39e>
 801ff26:	2b01      	cmp	r3, #1
 801ff28:	d109      	bne.n	801ff3e <__gethex+0x386>
 801ff2a:	f01a 0f02 	tst.w	sl, #2
 801ff2e:	d006      	beq.n	801ff3e <__gethex+0x386>
 801ff30:	f8d9 0000 	ldr.w	r0, [r9]
 801ff34:	ea4a 0a00 	orr.w	sl, sl, r0
 801ff38:	f01a 0f01 	tst.w	sl, #1
 801ff3c:	d10e      	bne.n	801ff5c <__gethex+0x3a4>
 801ff3e:	f047 0710 	orr.w	r7, r7, #16
 801ff42:	e033      	b.n	801ffac <__gethex+0x3f4>
 801ff44:	f04f 0a01 	mov.w	sl, #1
 801ff48:	e7d0      	b.n	801feec <__gethex+0x334>
 801ff4a:	2701      	movs	r7, #1
 801ff4c:	e7e2      	b.n	801ff14 <__gethex+0x35c>
 801ff4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff50:	f1c3 0301 	rsb	r3, r3, #1
 801ff54:	9315      	str	r3, [sp, #84]	; 0x54
 801ff56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d0f0      	beq.n	801ff3e <__gethex+0x386>
 801ff5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ff60:	f104 0314 	add.w	r3, r4, #20
 801ff64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ff68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ff6c:	f04f 0c00 	mov.w	ip, #0
 801ff70:	4618      	mov	r0, r3
 801ff72:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff76:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ff7a:	d01c      	beq.n	801ffb6 <__gethex+0x3fe>
 801ff7c:	3201      	adds	r2, #1
 801ff7e:	6002      	str	r2, [r0, #0]
 801ff80:	2f02      	cmp	r7, #2
 801ff82:	f104 0314 	add.w	r3, r4, #20
 801ff86:	d13f      	bne.n	8020008 <__gethex+0x450>
 801ff88:	f8d8 2000 	ldr.w	r2, [r8]
 801ff8c:	3a01      	subs	r2, #1
 801ff8e:	42b2      	cmp	r2, r6
 801ff90:	d10a      	bne.n	801ffa8 <__gethex+0x3f0>
 801ff92:	1171      	asrs	r1, r6, #5
 801ff94:	2201      	movs	r2, #1
 801ff96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ff9a:	f006 061f 	and.w	r6, r6, #31
 801ff9e:	fa02 f606 	lsl.w	r6, r2, r6
 801ffa2:	421e      	tst	r6, r3
 801ffa4:	bf18      	it	ne
 801ffa6:	4617      	movne	r7, r2
 801ffa8:	f047 0720 	orr.w	r7, r7, #32
 801ffac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ffae:	601c      	str	r4, [r3, #0]
 801ffb0:	9b04      	ldr	r3, [sp, #16]
 801ffb2:	601d      	str	r5, [r3, #0]
 801ffb4:	e695      	b.n	801fce2 <__gethex+0x12a>
 801ffb6:	4299      	cmp	r1, r3
 801ffb8:	f843 cc04 	str.w	ip, [r3, #-4]
 801ffbc:	d8d8      	bhi.n	801ff70 <__gethex+0x3b8>
 801ffbe:	68a3      	ldr	r3, [r4, #8]
 801ffc0:	459b      	cmp	fp, r3
 801ffc2:	db19      	blt.n	801fff8 <__gethex+0x440>
 801ffc4:	6861      	ldr	r1, [r4, #4]
 801ffc6:	ee18 0a10 	vmov	r0, s16
 801ffca:	3101      	adds	r1, #1
 801ffcc:	f000 f92c 	bl	8020228 <_Balloc>
 801ffd0:	4681      	mov	r9, r0
 801ffd2:	b918      	cbnz	r0, 801ffdc <__gethex+0x424>
 801ffd4:	4b1a      	ldr	r3, [pc, #104]	; (8020040 <__gethex+0x488>)
 801ffd6:	4602      	mov	r2, r0
 801ffd8:	2184      	movs	r1, #132	; 0x84
 801ffda:	e6a8      	b.n	801fd2e <__gethex+0x176>
 801ffdc:	6922      	ldr	r2, [r4, #16]
 801ffde:	3202      	adds	r2, #2
 801ffe0:	f104 010c 	add.w	r1, r4, #12
 801ffe4:	0092      	lsls	r2, r2, #2
 801ffe6:	300c      	adds	r0, #12
 801ffe8:	f000 f910 	bl	802020c <memcpy>
 801ffec:	4621      	mov	r1, r4
 801ffee:	ee18 0a10 	vmov	r0, s16
 801fff2:	f000 f959 	bl	80202a8 <_Bfree>
 801fff6:	464c      	mov	r4, r9
 801fff8:	6923      	ldr	r3, [r4, #16]
 801fffa:	1c5a      	adds	r2, r3, #1
 801fffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020000:	6122      	str	r2, [r4, #16]
 8020002:	2201      	movs	r2, #1
 8020004:	615a      	str	r2, [r3, #20]
 8020006:	e7bb      	b.n	801ff80 <__gethex+0x3c8>
 8020008:	6922      	ldr	r2, [r4, #16]
 802000a:	455a      	cmp	r2, fp
 802000c:	dd0b      	ble.n	8020026 <__gethex+0x46e>
 802000e:	2101      	movs	r1, #1
 8020010:	4620      	mov	r0, r4
 8020012:	f7ff fd6a 	bl	801faea <rshift>
 8020016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802001a:	3501      	adds	r5, #1
 802001c:	42ab      	cmp	r3, r5
 802001e:	f6ff aed0 	blt.w	801fdc2 <__gethex+0x20a>
 8020022:	2701      	movs	r7, #1
 8020024:	e7c0      	b.n	801ffa8 <__gethex+0x3f0>
 8020026:	f016 061f 	ands.w	r6, r6, #31
 802002a:	d0fa      	beq.n	8020022 <__gethex+0x46a>
 802002c:	449a      	add	sl, r3
 802002e:	f1c6 0620 	rsb	r6, r6, #32
 8020032:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020036:	f000 f9ed 	bl	8020414 <__hi0bits>
 802003a:	42b0      	cmp	r0, r6
 802003c:	dbe7      	blt.n	802000e <__gethex+0x456>
 802003e:	e7f0      	b.n	8020022 <__gethex+0x46a>
 8020040:	0802b734 	.word	0x0802b734

08020044 <L_shift>:
 8020044:	f1c2 0208 	rsb	r2, r2, #8
 8020048:	0092      	lsls	r2, r2, #2
 802004a:	b570      	push	{r4, r5, r6, lr}
 802004c:	f1c2 0620 	rsb	r6, r2, #32
 8020050:	6843      	ldr	r3, [r0, #4]
 8020052:	6804      	ldr	r4, [r0, #0]
 8020054:	fa03 f506 	lsl.w	r5, r3, r6
 8020058:	432c      	orrs	r4, r5
 802005a:	40d3      	lsrs	r3, r2
 802005c:	6004      	str	r4, [r0, #0]
 802005e:	f840 3f04 	str.w	r3, [r0, #4]!
 8020062:	4288      	cmp	r0, r1
 8020064:	d3f4      	bcc.n	8020050 <L_shift+0xc>
 8020066:	bd70      	pop	{r4, r5, r6, pc}

08020068 <__match>:
 8020068:	b530      	push	{r4, r5, lr}
 802006a:	6803      	ldr	r3, [r0, #0]
 802006c:	3301      	adds	r3, #1
 802006e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020072:	b914      	cbnz	r4, 802007a <__match+0x12>
 8020074:	6003      	str	r3, [r0, #0]
 8020076:	2001      	movs	r0, #1
 8020078:	bd30      	pop	{r4, r5, pc}
 802007a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802007e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020082:	2d19      	cmp	r5, #25
 8020084:	bf98      	it	ls
 8020086:	3220      	addls	r2, #32
 8020088:	42a2      	cmp	r2, r4
 802008a:	d0f0      	beq.n	802006e <__match+0x6>
 802008c:	2000      	movs	r0, #0
 802008e:	e7f3      	b.n	8020078 <__match+0x10>

08020090 <__hexnan>:
 8020090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020094:	680b      	ldr	r3, [r1, #0]
 8020096:	6801      	ldr	r1, [r0, #0]
 8020098:	115e      	asrs	r6, r3, #5
 802009a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802009e:	f013 031f 	ands.w	r3, r3, #31
 80200a2:	b087      	sub	sp, #28
 80200a4:	bf18      	it	ne
 80200a6:	3604      	addne	r6, #4
 80200a8:	2500      	movs	r5, #0
 80200aa:	1f37      	subs	r7, r6, #4
 80200ac:	4682      	mov	sl, r0
 80200ae:	4690      	mov	r8, r2
 80200b0:	9301      	str	r3, [sp, #4]
 80200b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80200b6:	46b9      	mov	r9, r7
 80200b8:	463c      	mov	r4, r7
 80200ba:	9502      	str	r5, [sp, #8]
 80200bc:	46ab      	mov	fp, r5
 80200be:	784a      	ldrb	r2, [r1, #1]
 80200c0:	1c4b      	adds	r3, r1, #1
 80200c2:	9303      	str	r3, [sp, #12]
 80200c4:	b342      	cbz	r2, 8020118 <__hexnan+0x88>
 80200c6:	4610      	mov	r0, r2
 80200c8:	9105      	str	r1, [sp, #20]
 80200ca:	9204      	str	r2, [sp, #16]
 80200cc:	f7ff fd5f 	bl	801fb8e <__hexdig_fun>
 80200d0:	2800      	cmp	r0, #0
 80200d2:	d14f      	bne.n	8020174 <__hexnan+0xe4>
 80200d4:	9a04      	ldr	r2, [sp, #16]
 80200d6:	9905      	ldr	r1, [sp, #20]
 80200d8:	2a20      	cmp	r2, #32
 80200da:	d818      	bhi.n	802010e <__hexnan+0x7e>
 80200dc:	9b02      	ldr	r3, [sp, #8]
 80200de:	459b      	cmp	fp, r3
 80200e0:	dd13      	ble.n	802010a <__hexnan+0x7a>
 80200e2:	454c      	cmp	r4, r9
 80200e4:	d206      	bcs.n	80200f4 <__hexnan+0x64>
 80200e6:	2d07      	cmp	r5, #7
 80200e8:	dc04      	bgt.n	80200f4 <__hexnan+0x64>
 80200ea:	462a      	mov	r2, r5
 80200ec:	4649      	mov	r1, r9
 80200ee:	4620      	mov	r0, r4
 80200f0:	f7ff ffa8 	bl	8020044 <L_shift>
 80200f4:	4544      	cmp	r4, r8
 80200f6:	d950      	bls.n	802019a <__hexnan+0x10a>
 80200f8:	2300      	movs	r3, #0
 80200fa:	f1a4 0904 	sub.w	r9, r4, #4
 80200fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8020102:	f8cd b008 	str.w	fp, [sp, #8]
 8020106:	464c      	mov	r4, r9
 8020108:	461d      	mov	r5, r3
 802010a:	9903      	ldr	r1, [sp, #12]
 802010c:	e7d7      	b.n	80200be <__hexnan+0x2e>
 802010e:	2a29      	cmp	r2, #41	; 0x29
 8020110:	d156      	bne.n	80201c0 <__hexnan+0x130>
 8020112:	3102      	adds	r1, #2
 8020114:	f8ca 1000 	str.w	r1, [sl]
 8020118:	f1bb 0f00 	cmp.w	fp, #0
 802011c:	d050      	beq.n	80201c0 <__hexnan+0x130>
 802011e:	454c      	cmp	r4, r9
 8020120:	d206      	bcs.n	8020130 <__hexnan+0xa0>
 8020122:	2d07      	cmp	r5, #7
 8020124:	dc04      	bgt.n	8020130 <__hexnan+0xa0>
 8020126:	462a      	mov	r2, r5
 8020128:	4649      	mov	r1, r9
 802012a:	4620      	mov	r0, r4
 802012c:	f7ff ff8a 	bl	8020044 <L_shift>
 8020130:	4544      	cmp	r4, r8
 8020132:	d934      	bls.n	802019e <__hexnan+0x10e>
 8020134:	f1a8 0204 	sub.w	r2, r8, #4
 8020138:	4623      	mov	r3, r4
 802013a:	f853 1b04 	ldr.w	r1, [r3], #4
 802013e:	f842 1f04 	str.w	r1, [r2, #4]!
 8020142:	429f      	cmp	r7, r3
 8020144:	d2f9      	bcs.n	802013a <__hexnan+0xaa>
 8020146:	1b3b      	subs	r3, r7, r4
 8020148:	f023 0303 	bic.w	r3, r3, #3
 802014c:	3304      	adds	r3, #4
 802014e:	3401      	adds	r4, #1
 8020150:	3e03      	subs	r6, #3
 8020152:	42b4      	cmp	r4, r6
 8020154:	bf88      	it	hi
 8020156:	2304      	movhi	r3, #4
 8020158:	4443      	add	r3, r8
 802015a:	2200      	movs	r2, #0
 802015c:	f843 2b04 	str.w	r2, [r3], #4
 8020160:	429f      	cmp	r7, r3
 8020162:	d2fb      	bcs.n	802015c <__hexnan+0xcc>
 8020164:	683b      	ldr	r3, [r7, #0]
 8020166:	b91b      	cbnz	r3, 8020170 <__hexnan+0xe0>
 8020168:	4547      	cmp	r7, r8
 802016a:	d127      	bne.n	80201bc <__hexnan+0x12c>
 802016c:	2301      	movs	r3, #1
 802016e:	603b      	str	r3, [r7, #0]
 8020170:	2005      	movs	r0, #5
 8020172:	e026      	b.n	80201c2 <__hexnan+0x132>
 8020174:	3501      	adds	r5, #1
 8020176:	2d08      	cmp	r5, #8
 8020178:	f10b 0b01 	add.w	fp, fp, #1
 802017c:	dd06      	ble.n	802018c <__hexnan+0xfc>
 802017e:	4544      	cmp	r4, r8
 8020180:	d9c3      	bls.n	802010a <__hexnan+0x7a>
 8020182:	2300      	movs	r3, #0
 8020184:	f844 3c04 	str.w	r3, [r4, #-4]
 8020188:	2501      	movs	r5, #1
 802018a:	3c04      	subs	r4, #4
 802018c:	6822      	ldr	r2, [r4, #0]
 802018e:	f000 000f 	and.w	r0, r0, #15
 8020192:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020196:	6022      	str	r2, [r4, #0]
 8020198:	e7b7      	b.n	802010a <__hexnan+0x7a>
 802019a:	2508      	movs	r5, #8
 802019c:	e7b5      	b.n	802010a <__hexnan+0x7a>
 802019e:	9b01      	ldr	r3, [sp, #4]
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d0df      	beq.n	8020164 <__hexnan+0xd4>
 80201a4:	f04f 32ff 	mov.w	r2, #4294967295
 80201a8:	f1c3 0320 	rsb	r3, r3, #32
 80201ac:	fa22 f303 	lsr.w	r3, r2, r3
 80201b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80201b4:	401a      	ands	r2, r3
 80201b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80201ba:	e7d3      	b.n	8020164 <__hexnan+0xd4>
 80201bc:	3f04      	subs	r7, #4
 80201be:	e7d1      	b.n	8020164 <__hexnan+0xd4>
 80201c0:	2004      	movs	r0, #4
 80201c2:	b007      	add	sp, #28
 80201c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201c8 <_localeconv_r>:
 80201c8:	4800      	ldr	r0, [pc, #0]	; (80201cc <_localeconv_r+0x4>)
 80201ca:	4770      	bx	lr
 80201cc:	2000083c 	.word	0x2000083c

080201d0 <__retarget_lock_init_recursive>:
 80201d0:	4770      	bx	lr

080201d2 <__retarget_lock_acquire_recursive>:
 80201d2:	4770      	bx	lr

080201d4 <__retarget_lock_release_recursive>:
 80201d4:	4770      	bx	lr
	...

080201d8 <malloc>:
 80201d8:	4b02      	ldr	r3, [pc, #8]	; (80201e4 <malloc+0xc>)
 80201da:	4601      	mov	r1, r0
 80201dc:	6818      	ldr	r0, [r3, #0]
 80201de:	f000 bd3d 	b.w	8020c5c <_malloc_r>
 80201e2:	bf00      	nop
 80201e4:	200006e4 	.word	0x200006e4

080201e8 <__ascii_mbtowc>:
 80201e8:	b082      	sub	sp, #8
 80201ea:	b901      	cbnz	r1, 80201ee <__ascii_mbtowc+0x6>
 80201ec:	a901      	add	r1, sp, #4
 80201ee:	b142      	cbz	r2, 8020202 <__ascii_mbtowc+0x1a>
 80201f0:	b14b      	cbz	r3, 8020206 <__ascii_mbtowc+0x1e>
 80201f2:	7813      	ldrb	r3, [r2, #0]
 80201f4:	600b      	str	r3, [r1, #0]
 80201f6:	7812      	ldrb	r2, [r2, #0]
 80201f8:	1e10      	subs	r0, r2, #0
 80201fa:	bf18      	it	ne
 80201fc:	2001      	movne	r0, #1
 80201fe:	b002      	add	sp, #8
 8020200:	4770      	bx	lr
 8020202:	4610      	mov	r0, r2
 8020204:	e7fb      	b.n	80201fe <__ascii_mbtowc+0x16>
 8020206:	f06f 0001 	mvn.w	r0, #1
 802020a:	e7f8      	b.n	80201fe <__ascii_mbtowc+0x16>

0802020c <memcpy>:
 802020c:	440a      	add	r2, r1
 802020e:	4291      	cmp	r1, r2
 8020210:	f100 33ff 	add.w	r3, r0, #4294967295
 8020214:	d100      	bne.n	8020218 <memcpy+0xc>
 8020216:	4770      	bx	lr
 8020218:	b510      	push	{r4, lr}
 802021a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802021e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020222:	4291      	cmp	r1, r2
 8020224:	d1f9      	bne.n	802021a <memcpy+0xe>
 8020226:	bd10      	pop	{r4, pc}

08020228 <_Balloc>:
 8020228:	b570      	push	{r4, r5, r6, lr}
 802022a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802022c:	4604      	mov	r4, r0
 802022e:	460d      	mov	r5, r1
 8020230:	b976      	cbnz	r6, 8020250 <_Balloc+0x28>
 8020232:	2010      	movs	r0, #16
 8020234:	f7ff ffd0 	bl	80201d8 <malloc>
 8020238:	4602      	mov	r2, r0
 802023a:	6260      	str	r0, [r4, #36]	; 0x24
 802023c:	b920      	cbnz	r0, 8020248 <_Balloc+0x20>
 802023e:	4b18      	ldr	r3, [pc, #96]	; (80202a0 <_Balloc+0x78>)
 8020240:	4818      	ldr	r0, [pc, #96]	; (80202a4 <_Balloc+0x7c>)
 8020242:	2166      	movs	r1, #102	; 0x66
 8020244:	f001 f80e 	bl	8021264 <__assert_func>
 8020248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802024c:	6006      	str	r6, [r0, #0]
 802024e:	60c6      	str	r6, [r0, #12]
 8020250:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020252:	68f3      	ldr	r3, [r6, #12]
 8020254:	b183      	cbz	r3, 8020278 <_Balloc+0x50>
 8020256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020258:	68db      	ldr	r3, [r3, #12]
 802025a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802025e:	b9b8      	cbnz	r0, 8020290 <_Balloc+0x68>
 8020260:	2101      	movs	r1, #1
 8020262:	fa01 f605 	lsl.w	r6, r1, r5
 8020266:	1d72      	adds	r2, r6, #5
 8020268:	0092      	lsls	r2, r2, #2
 802026a:	4620      	mov	r0, r4
 802026c:	f000 fc97 	bl	8020b9e <_calloc_r>
 8020270:	b160      	cbz	r0, 802028c <_Balloc+0x64>
 8020272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020276:	e00e      	b.n	8020296 <_Balloc+0x6e>
 8020278:	2221      	movs	r2, #33	; 0x21
 802027a:	2104      	movs	r1, #4
 802027c:	4620      	mov	r0, r4
 802027e:	f000 fc8e 	bl	8020b9e <_calloc_r>
 8020282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020284:	60f0      	str	r0, [r6, #12]
 8020286:	68db      	ldr	r3, [r3, #12]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d1e4      	bne.n	8020256 <_Balloc+0x2e>
 802028c:	2000      	movs	r0, #0
 802028e:	bd70      	pop	{r4, r5, r6, pc}
 8020290:	6802      	ldr	r2, [r0, #0]
 8020292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020296:	2300      	movs	r3, #0
 8020298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802029c:	e7f7      	b.n	802028e <_Balloc+0x66>
 802029e:	bf00      	nop
 80202a0:	0802b6be 	.word	0x0802b6be
 80202a4:	0802b828 	.word	0x0802b828

080202a8 <_Bfree>:
 80202a8:	b570      	push	{r4, r5, r6, lr}
 80202aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80202ac:	4605      	mov	r5, r0
 80202ae:	460c      	mov	r4, r1
 80202b0:	b976      	cbnz	r6, 80202d0 <_Bfree+0x28>
 80202b2:	2010      	movs	r0, #16
 80202b4:	f7ff ff90 	bl	80201d8 <malloc>
 80202b8:	4602      	mov	r2, r0
 80202ba:	6268      	str	r0, [r5, #36]	; 0x24
 80202bc:	b920      	cbnz	r0, 80202c8 <_Bfree+0x20>
 80202be:	4b09      	ldr	r3, [pc, #36]	; (80202e4 <_Bfree+0x3c>)
 80202c0:	4809      	ldr	r0, [pc, #36]	; (80202e8 <_Bfree+0x40>)
 80202c2:	218a      	movs	r1, #138	; 0x8a
 80202c4:	f000 ffce 	bl	8021264 <__assert_func>
 80202c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80202cc:	6006      	str	r6, [r0, #0]
 80202ce:	60c6      	str	r6, [r0, #12]
 80202d0:	b13c      	cbz	r4, 80202e2 <_Bfree+0x3a>
 80202d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80202d4:	6862      	ldr	r2, [r4, #4]
 80202d6:	68db      	ldr	r3, [r3, #12]
 80202d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80202dc:	6021      	str	r1, [r4, #0]
 80202de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80202e2:	bd70      	pop	{r4, r5, r6, pc}
 80202e4:	0802b6be 	.word	0x0802b6be
 80202e8:	0802b828 	.word	0x0802b828

080202ec <__multadd>:
 80202ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202f0:	690e      	ldr	r6, [r1, #16]
 80202f2:	4607      	mov	r7, r0
 80202f4:	4698      	mov	r8, r3
 80202f6:	460c      	mov	r4, r1
 80202f8:	f101 0014 	add.w	r0, r1, #20
 80202fc:	2300      	movs	r3, #0
 80202fe:	6805      	ldr	r5, [r0, #0]
 8020300:	b2a9      	uxth	r1, r5
 8020302:	fb02 8101 	mla	r1, r2, r1, r8
 8020306:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802030a:	0c2d      	lsrs	r5, r5, #16
 802030c:	fb02 c505 	mla	r5, r2, r5, ip
 8020310:	b289      	uxth	r1, r1
 8020312:	3301      	adds	r3, #1
 8020314:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020318:	429e      	cmp	r6, r3
 802031a:	f840 1b04 	str.w	r1, [r0], #4
 802031e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020322:	dcec      	bgt.n	80202fe <__multadd+0x12>
 8020324:	f1b8 0f00 	cmp.w	r8, #0
 8020328:	d022      	beq.n	8020370 <__multadd+0x84>
 802032a:	68a3      	ldr	r3, [r4, #8]
 802032c:	42b3      	cmp	r3, r6
 802032e:	dc19      	bgt.n	8020364 <__multadd+0x78>
 8020330:	6861      	ldr	r1, [r4, #4]
 8020332:	4638      	mov	r0, r7
 8020334:	3101      	adds	r1, #1
 8020336:	f7ff ff77 	bl	8020228 <_Balloc>
 802033a:	4605      	mov	r5, r0
 802033c:	b928      	cbnz	r0, 802034a <__multadd+0x5e>
 802033e:	4602      	mov	r2, r0
 8020340:	4b0d      	ldr	r3, [pc, #52]	; (8020378 <__multadd+0x8c>)
 8020342:	480e      	ldr	r0, [pc, #56]	; (802037c <__multadd+0x90>)
 8020344:	21b5      	movs	r1, #181	; 0xb5
 8020346:	f000 ff8d 	bl	8021264 <__assert_func>
 802034a:	6922      	ldr	r2, [r4, #16]
 802034c:	3202      	adds	r2, #2
 802034e:	f104 010c 	add.w	r1, r4, #12
 8020352:	0092      	lsls	r2, r2, #2
 8020354:	300c      	adds	r0, #12
 8020356:	f7ff ff59 	bl	802020c <memcpy>
 802035a:	4621      	mov	r1, r4
 802035c:	4638      	mov	r0, r7
 802035e:	f7ff ffa3 	bl	80202a8 <_Bfree>
 8020362:	462c      	mov	r4, r5
 8020364:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020368:	3601      	adds	r6, #1
 802036a:	f8c3 8014 	str.w	r8, [r3, #20]
 802036e:	6126      	str	r6, [r4, #16]
 8020370:	4620      	mov	r0, r4
 8020372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020376:	bf00      	nop
 8020378:	0802b734 	.word	0x0802b734
 802037c:	0802b828 	.word	0x0802b828

08020380 <__s2b>:
 8020380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020384:	460c      	mov	r4, r1
 8020386:	4615      	mov	r5, r2
 8020388:	461f      	mov	r7, r3
 802038a:	2209      	movs	r2, #9
 802038c:	3308      	adds	r3, #8
 802038e:	4606      	mov	r6, r0
 8020390:	fb93 f3f2 	sdiv	r3, r3, r2
 8020394:	2100      	movs	r1, #0
 8020396:	2201      	movs	r2, #1
 8020398:	429a      	cmp	r2, r3
 802039a:	db09      	blt.n	80203b0 <__s2b+0x30>
 802039c:	4630      	mov	r0, r6
 802039e:	f7ff ff43 	bl	8020228 <_Balloc>
 80203a2:	b940      	cbnz	r0, 80203b6 <__s2b+0x36>
 80203a4:	4602      	mov	r2, r0
 80203a6:	4b19      	ldr	r3, [pc, #100]	; (802040c <__s2b+0x8c>)
 80203a8:	4819      	ldr	r0, [pc, #100]	; (8020410 <__s2b+0x90>)
 80203aa:	21ce      	movs	r1, #206	; 0xce
 80203ac:	f000 ff5a 	bl	8021264 <__assert_func>
 80203b0:	0052      	lsls	r2, r2, #1
 80203b2:	3101      	adds	r1, #1
 80203b4:	e7f0      	b.n	8020398 <__s2b+0x18>
 80203b6:	9b08      	ldr	r3, [sp, #32]
 80203b8:	6143      	str	r3, [r0, #20]
 80203ba:	2d09      	cmp	r5, #9
 80203bc:	f04f 0301 	mov.w	r3, #1
 80203c0:	6103      	str	r3, [r0, #16]
 80203c2:	dd16      	ble.n	80203f2 <__s2b+0x72>
 80203c4:	f104 0909 	add.w	r9, r4, #9
 80203c8:	46c8      	mov	r8, r9
 80203ca:	442c      	add	r4, r5
 80203cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80203d0:	4601      	mov	r1, r0
 80203d2:	3b30      	subs	r3, #48	; 0x30
 80203d4:	220a      	movs	r2, #10
 80203d6:	4630      	mov	r0, r6
 80203d8:	f7ff ff88 	bl	80202ec <__multadd>
 80203dc:	45a0      	cmp	r8, r4
 80203de:	d1f5      	bne.n	80203cc <__s2b+0x4c>
 80203e0:	f1a5 0408 	sub.w	r4, r5, #8
 80203e4:	444c      	add	r4, r9
 80203e6:	1b2d      	subs	r5, r5, r4
 80203e8:	1963      	adds	r3, r4, r5
 80203ea:	42bb      	cmp	r3, r7
 80203ec:	db04      	blt.n	80203f8 <__s2b+0x78>
 80203ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203f2:	340a      	adds	r4, #10
 80203f4:	2509      	movs	r5, #9
 80203f6:	e7f6      	b.n	80203e6 <__s2b+0x66>
 80203f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80203fc:	4601      	mov	r1, r0
 80203fe:	3b30      	subs	r3, #48	; 0x30
 8020400:	220a      	movs	r2, #10
 8020402:	4630      	mov	r0, r6
 8020404:	f7ff ff72 	bl	80202ec <__multadd>
 8020408:	e7ee      	b.n	80203e8 <__s2b+0x68>
 802040a:	bf00      	nop
 802040c:	0802b734 	.word	0x0802b734
 8020410:	0802b828 	.word	0x0802b828

08020414 <__hi0bits>:
 8020414:	0c03      	lsrs	r3, r0, #16
 8020416:	041b      	lsls	r3, r3, #16
 8020418:	b9d3      	cbnz	r3, 8020450 <__hi0bits+0x3c>
 802041a:	0400      	lsls	r0, r0, #16
 802041c:	2310      	movs	r3, #16
 802041e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020422:	bf04      	itt	eq
 8020424:	0200      	lsleq	r0, r0, #8
 8020426:	3308      	addeq	r3, #8
 8020428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802042c:	bf04      	itt	eq
 802042e:	0100      	lsleq	r0, r0, #4
 8020430:	3304      	addeq	r3, #4
 8020432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020436:	bf04      	itt	eq
 8020438:	0080      	lsleq	r0, r0, #2
 802043a:	3302      	addeq	r3, #2
 802043c:	2800      	cmp	r0, #0
 802043e:	db05      	blt.n	802044c <__hi0bits+0x38>
 8020440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020444:	f103 0301 	add.w	r3, r3, #1
 8020448:	bf08      	it	eq
 802044a:	2320      	moveq	r3, #32
 802044c:	4618      	mov	r0, r3
 802044e:	4770      	bx	lr
 8020450:	2300      	movs	r3, #0
 8020452:	e7e4      	b.n	802041e <__hi0bits+0xa>

08020454 <__lo0bits>:
 8020454:	6803      	ldr	r3, [r0, #0]
 8020456:	f013 0207 	ands.w	r2, r3, #7
 802045a:	4601      	mov	r1, r0
 802045c:	d00b      	beq.n	8020476 <__lo0bits+0x22>
 802045e:	07da      	lsls	r2, r3, #31
 8020460:	d424      	bmi.n	80204ac <__lo0bits+0x58>
 8020462:	0798      	lsls	r0, r3, #30
 8020464:	bf49      	itett	mi
 8020466:	085b      	lsrmi	r3, r3, #1
 8020468:	089b      	lsrpl	r3, r3, #2
 802046a:	2001      	movmi	r0, #1
 802046c:	600b      	strmi	r3, [r1, #0]
 802046e:	bf5c      	itt	pl
 8020470:	600b      	strpl	r3, [r1, #0]
 8020472:	2002      	movpl	r0, #2
 8020474:	4770      	bx	lr
 8020476:	b298      	uxth	r0, r3
 8020478:	b9b0      	cbnz	r0, 80204a8 <__lo0bits+0x54>
 802047a:	0c1b      	lsrs	r3, r3, #16
 802047c:	2010      	movs	r0, #16
 802047e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020482:	bf04      	itt	eq
 8020484:	0a1b      	lsreq	r3, r3, #8
 8020486:	3008      	addeq	r0, #8
 8020488:	071a      	lsls	r2, r3, #28
 802048a:	bf04      	itt	eq
 802048c:	091b      	lsreq	r3, r3, #4
 802048e:	3004      	addeq	r0, #4
 8020490:	079a      	lsls	r2, r3, #30
 8020492:	bf04      	itt	eq
 8020494:	089b      	lsreq	r3, r3, #2
 8020496:	3002      	addeq	r0, #2
 8020498:	07da      	lsls	r2, r3, #31
 802049a:	d403      	bmi.n	80204a4 <__lo0bits+0x50>
 802049c:	085b      	lsrs	r3, r3, #1
 802049e:	f100 0001 	add.w	r0, r0, #1
 80204a2:	d005      	beq.n	80204b0 <__lo0bits+0x5c>
 80204a4:	600b      	str	r3, [r1, #0]
 80204a6:	4770      	bx	lr
 80204a8:	4610      	mov	r0, r2
 80204aa:	e7e8      	b.n	802047e <__lo0bits+0x2a>
 80204ac:	2000      	movs	r0, #0
 80204ae:	4770      	bx	lr
 80204b0:	2020      	movs	r0, #32
 80204b2:	4770      	bx	lr

080204b4 <__i2b>:
 80204b4:	b510      	push	{r4, lr}
 80204b6:	460c      	mov	r4, r1
 80204b8:	2101      	movs	r1, #1
 80204ba:	f7ff feb5 	bl	8020228 <_Balloc>
 80204be:	4602      	mov	r2, r0
 80204c0:	b928      	cbnz	r0, 80204ce <__i2b+0x1a>
 80204c2:	4b05      	ldr	r3, [pc, #20]	; (80204d8 <__i2b+0x24>)
 80204c4:	4805      	ldr	r0, [pc, #20]	; (80204dc <__i2b+0x28>)
 80204c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80204ca:	f000 fecb 	bl	8021264 <__assert_func>
 80204ce:	2301      	movs	r3, #1
 80204d0:	6144      	str	r4, [r0, #20]
 80204d2:	6103      	str	r3, [r0, #16]
 80204d4:	bd10      	pop	{r4, pc}
 80204d6:	bf00      	nop
 80204d8:	0802b734 	.word	0x0802b734
 80204dc:	0802b828 	.word	0x0802b828

080204e0 <__multiply>:
 80204e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204e4:	4614      	mov	r4, r2
 80204e6:	690a      	ldr	r2, [r1, #16]
 80204e8:	6923      	ldr	r3, [r4, #16]
 80204ea:	429a      	cmp	r2, r3
 80204ec:	bfb8      	it	lt
 80204ee:	460b      	movlt	r3, r1
 80204f0:	460d      	mov	r5, r1
 80204f2:	bfbc      	itt	lt
 80204f4:	4625      	movlt	r5, r4
 80204f6:	461c      	movlt	r4, r3
 80204f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80204fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020500:	68ab      	ldr	r3, [r5, #8]
 8020502:	6869      	ldr	r1, [r5, #4]
 8020504:	eb0a 0709 	add.w	r7, sl, r9
 8020508:	42bb      	cmp	r3, r7
 802050a:	b085      	sub	sp, #20
 802050c:	bfb8      	it	lt
 802050e:	3101      	addlt	r1, #1
 8020510:	f7ff fe8a 	bl	8020228 <_Balloc>
 8020514:	b930      	cbnz	r0, 8020524 <__multiply+0x44>
 8020516:	4602      	mov	r2, r0
 8020518:	4b42      	ldr	r3, [pc, #264]	; (8020624 <__multiply+0x144>)
 802051a:	4843      	ldr	r0, [pc, #268]	; (8020628 <__multiply+0x148>)
 802051c:	f240 115d 	movw	r1, #349	; 0x15d
 8020520:	f000 fea0 	bl	8021264 <__assert_func>
 8020524:	f100 0614 	add.w	r6, r0, #20
 8020528:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802052c:	4633      	mov	r3, r6
 802052e:	2200      	movs	r2, #0
 8020530:	4543      	cmp	r3, r8
 8020532:	d31e      	bcc.n	8020572 <__multiply+0x92>
 8020534:	f105 0c14 	add.w	ip, r5, #20
 8020538:	f104 0314 	add.w	r3, r4, #20
 802053c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020540:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020544:	9202      	str	r2, [sp, #8]
 8020546:	ebac 0205 	sub.w	r2, ip, r5
 802054a:	3a15      	subs	r2, #21
 802054c:	f022 0203 	bic.w	r2, r2, #3
 8020550:	3204      	adds	r2, #4
 8020552:	f105 0115 	add.w	r1, r5, #21
 8020556:	458c      	cmp	ip, r1
 8020558:	bf38      	it	cc
 802055a:	2204      	movcc	r2, #4
 802055c:	9201      	str	r2, [sp, #4]
 802055e:	9a02      	ldr	r2, [sp, #8]
 8020560:	9303      	str	r3, [sp, #12]
 8020562:	429a      	cmp	r2, r3
 8020564:	d808      	bhi.n	8020578 <__multiply+0x98>
 8020566:	2f00      	cmp	r7, #0
 8020568:	dc55      	bgt.n	8020616 <__multiply+0x136>
 802056a:	6107      	str	r7, [r0, #16]
 802056c:	b005      	add	sp, #20
 802056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020572:	f843 2b04 	str.w	r2, [r3], #4
 8020576:	e7db      	b.n	8020530 <__multiply+0x50>
 8020578:	f8b3 a000 	ldrh.w	sl, [r3]
 802057c:	f1ba 0f00 	cmp.w	sl, #0
 8020580:	d020      	beq.n	80205c4 <__multiply+0xe4>
 8020582:	f105 0e14 	add.w	lr, r5, #20
 8020586:	46b1      	mov	r9, r6
 8020588:	2200      	movs	r2, #0
 802058a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802058e:	f8d9 b000 	ldr.w	fp, [r9]
 8020592:	b2a1      	uxth	r1, r4
 8020594:	fa1f fb8b 	uxth.w	fp, fp
 8020598:	fb0a b101 	mla	r1, sl, r1, fp
 802059c:	4411      	add	r1, r2
 802059e:	f8d9 2000 	ldr.w	r2, [r9]
 80205a2:	0c24      	lsrs	r4, r4, #16
 80205a4:	0c12      	lsrs	r2, r2, #16
 80205a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80205aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80205ae:	b289      	uxth	r1, r1
 80205b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80205b4:	45f4      	cmp	ip, lr
 80205b6:	f849 1b04 	str.w	r1, [r9], #4
 80205ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80205be:	d8e4      	bhi.n	802058a <__multiply+0xaa>
 80205c0:	9901      	ldr	r1, [sp, #4]
 80205c2:	5072      	str	r2, [r6, r1]
 80205c4:	9a03      	ldr	r2, [sp, #12]
 80205c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80205ca:	3304      	adds	r3, #4
 80205cc:	f1b9 0f00 	cmp.w	r9, #0
 80205d0:	d01f      	beq.n	8020612 <__multiply+0x132>
 80205d2:	6834      	ldr	r4, [r6, #0]
 80205d4:	f105 0114 	add.w	r1, r5, #20
 80205d8:	46b6      	mov	lr, r6
 80205da:	f04f 0a00 	mov.w	sl, #0
 80205de:	880a      	ldrh	r2, [r1, #0]
 80205e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80205e4:	fb09 b202 	mla	r2, r9, r2, fp
 80205e8:	4492      	add	sl, r2
 80205ea:	b2a4      	uxth	r4, r4
 80205ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80205f0:	f84e 4b04 	str.w	r4, [lr], #4
 80205f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80205f8:	f8be 2000 	ldrh.w	r2, [lr]
 80205fc:	0c24      	lsrs	r4, r4, #16
 80205fe:	fb09 2404 	mla	r4, r9, r4, r2
 8020602:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020606:	458c      	cmp	ip, r1
 8020608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802060c:	d8e7      	bhi.n	80205de <__multiply+0xfe>
 802060e:	9a01      	ldr	r2, [sp, #4]
 8020610:	50b4      	str	r4, [r6, r2]
 8020612:	3604      	adds	r6, #4
 8020614:	e7a3      	b.n	802055e <__multiply+0x7e>
 8020616:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802061a:	2b00      	cmp	r3, #0
 802061c:	d1a5      	bne.n	802056a <__multiply+0x8a>
 802061e:	3f01      	subs	r7, #1
 8020620:	e7a1      	b.n	8020566 <__multiply+0x86>
 8020622:	bf00      	nop
 8020624:	0802b734 	.word	0x0802b734
 8020628:	0802b828 	.word	0x0802b828

0802062c <__pow5mult>:
 802062c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020630:	4615      	mov	r5, r2
 8020632:	f012 0203 	ands.w	r2, r2, #3
 8020636:	4606      	mov	r6, r0
 8020638:	460f      	mov	r7, r1
 802063a:	d007      	beq.n	802064c <__pow5mult+0x20>
 802063c:	4c25      	ldr	r4, [pc, #148]	; (80206d4 <__pow5mult+0xa8>)
 802063e:	3a01      	subs	r2, #1
 8020640:	2300      	movs	r3, #0
 8020642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020646:	f7ff fe51 	bl	80202ec <__multadd>
 802064a:	4607      	mov	r7, r0
 802064c:	10ad      	asrs	r5, r5, #2
 802064e:	d03d      	beq.n	80206cc <__pow5mult+0xa0>
 8020650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020652:	b97c      	cbnz	r4, 8020674 <__pow5mult+0x48>
 8020654:	2010      	movs	r0, #16
 8020656:	f7ff fdbf 	bl	80201d8 <malloc>
 802065a:	4602      	mov	r2, r0
 802065c:	6270      	str	r0, [r6, #36]	; 0x24
 802065e:	b928      	cbnz	r0, 802066c <__pow5mult+0x40>
 8020660:	4b1d      	ldr	r3, [pc, #116]	; (80206d8 <__pow5mult+0xac>)
 8020662:	481e      	ldr	r0, [pc, #120]	; (80206dc <__pow5mult+0xb0>)
 8020664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020668:	f000 fdfc 	bl	8021264 <__assert_func>
 802066c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020670:	6004      	str	r4, [r0, #0]
 8020672:	60c4      	str	r4, [r0, #12]
 8020674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802067c:	b94c      	cbnz	r4, 8020692 <__pow5mult+0x66>
 802067e:	f240 2171 	movw	r1, #625	; 0x271
 8020682:	4630      	mov	r0, r6
 8020684:	f7ff ff16 	bl	80204b4 <__i2b>
 8020688:	2300      	movs	r3, #0
 802068a:	f8c8 0008 	str.w	r0, [r8, #8]
 802068e:	4604      	mov	r4, r0
 8020690:	6003      	str	r3, [r0, #0]
 8020692:	f04f 0900 	mov.w	r9, #0
 8020696:	07eb      	lsls	r3, r5, #31
 8020698:	d50a      	bpl.n	80206b0 <__pow5mult+0x84>
 802069a:	4639      	mov	r1, r7
 802069c:	4622      	mov	r2, r4
 802069e:	4630      	mov	r0, r6
 80206a0:	f7ff ff1e 	bl	80204e0 <__multiply>
 80206a4:	4639      	mov	r1, r7
 80206a6:	4680      	mov	r8, r0
 80206a8:	4630      	mov	r0, r6
 80206aa:	f7ff fdfd 	bl	80202a8 <_Bfree>
 80206ae:	4647      	mov	r7, r8
 80206b0:	106d      	asrs	r5, r5, #1
 80206b2:	d00b      	beq.n	80206cc <__pow5mult+0xa0>
 80206b4:	6820      	ldr	r0, [r4, #0]
 80206b6:	b938      	cbnz	r0, 80206c8 <__pow5mult+0x9c>
 80206b8:	4622      	mov	r2, r4
 80206ba:	4621      	mov	r1, r4
 80206bc:	4630      	mov	r0, r6
 80206be:	f7ff ff0f 	bl	80204e0 <__multiply>
 80206c2:	6020      	str	r0, [r4, #0]
 80206c4:	f8c0 9000 	str.w	r9, [r0]
 80206c8:	4604      	mov	r4, r0
 80206ca:	e7e4      	b.n	8020696 <__pow5mult+0x6a>
 80206cc:	4638      	mov	r0, r7
 80206ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206d2:	bf00      	nop
 80206d4:	0802b978 	.word	0x0802b978
 80206d8:	0802b6be 	.word	0x0802b6be
 80206dc:	0802b828 	.word	0x0802b828

080206e0 <__lshift>:
 80206e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206e4:	460c      	mov	r4, r1
 80206e6:	6849      	ldr	r1, [r1, #4]
 80206e8:	6923      	ldr	r3, [r4, #16]
 80206ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80206ee:	68a3      	ldr	r3, [r4, #8]
 80206f0:	4607      	mov	r7, r0
 80206f2:	4691      	mov	r9, r2
 80206f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80206f8:	f108 0601 	add.w	r6, r8, #1
 80206fc:	42b3      	cmp	r3, r6
 80206fe:	db0b      	blt.n	8020718 <__lshift+0x38>
 8020700:	4638      	mov	r0, r7
 8020702:	f7ff fd91 	bl	8020228 <_Balloc>
 8020706:	4605      	mov	r5, r0
 8020708:	b948      	cbnz	r0, 802071e <__lshift+0x3e>
 802070a:	4602      	mov	r2, r0
 802070c:	4b28      	ldr	r3, [pc, #160]	; (80207b0 <__lshift+0xd0>)
 802070e:	4829      	ldr	r0, [pc, #164]	; (80207b4 <__lshift+0xd4>)
 8020710:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020714:	f000 fda6 	bl	8021264 <__assert_func>
 8020718:	3101      	adds	r1, #1
 802071a:	005b      	lsls	r3, r3, #1
 802071c:	e7ee      	b.n	80206fc <__lshift+0x1c>
 802071e:	2300      	movs	r3, #0
 8020720:	f100 0114 	add.w	r1, r0, #20
 8020724:	f100 0210 	add.w	r2, r0, #16
 8020728:	4618      	mov	r0, r3
 802072a:	4553      	cmp	r3, sl
 802072c:	db33      	blt.n	8020796 <__lshift+0xb6>
 802072e:	6920      	ldr	r0, [r4, #16]
 8020730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020734:	f104 0314 	add.w	r3, r4, #20
 8020738:	f019 091f 	ands.w	r9, r9, #31
 802073c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020744:	d02b      	beq.n	802079e <__lshift+0xbe>
 8020746:	f1c9 0e20 	rsb	lr, r9, #32
 802074a:	468a      	mov	sl, r1
 802074c:	2200      	movs	r2, #0
 802074e:	6818      	ldr	r0, [r3, #0]
 8020750:	fa00 f009 	lsl.w	r0, r0, r9
 8020754:	4302      	orrs	r2, r0
 8020756:	f84a 2b04 	str.w	r2, [sl], #4
 802075a:	f853 2b04 	ldr.w	r2, [r3], #4
 802075e:	459c      	cmp	ip, r3
 8020760:	fa22 f20e 	lsr.w	r2, r2, lr
 8020764:	d8f3      	bhi.n	802074e <__lshift+0x6e>
 8020766:	ebac 0304 	sub.w	r3, ip, r4
 802076a:	3b15      	subs	r3, #21
 802076c:	f023 0303 	bic.w	r3, r3, #3
 8020770:	3304      	adds	r3, #4
 8020772:	f104 0015 	add.w	r0, r4, #21
 8020776:	4584      	cmp	ip, r0
 8020778:	bf38      	it	cc
 802077a:	2304      	movcc	r3, #4
 802077c:	50ca      	str	r2, [r1, r3]
 802077e:	b10a      	cbz	r2, 8020784 <__lshift+0xa4>
 8020780:	f108 0602 	add.w	r6, r8, #2
 8020784:	3e01      	subs	r6, #1
 8020786:	4638      	mov	r0, r7
 8020788:	612e      	str	r6, [r5, #16]
 802078a:	4621      	mov	r1, r4
 802078c:	f7ff fd8c 	bl	80202a8 <_Bfree>
 8020790:	4628      	mov	r0, r5
 8020792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020796:	f842 0f04 	str.w	r0, [r2, #4]!
 802079a:	3301      	adds	r3, #1
 802079c:	e7c5      	b.n	802072a <__lshift+0x4a>
 802079e:	3904      	subs	r1, #4
 80207a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80207a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80207a8:	459c      	cmp	ip, r3
 80207aa:	d8f9      	bhi.n	80207a0 <__lshift+0xc0>
 80207ac:	e7ea      	b.n	8020784 <__lshift+0xa4>
 80207ae:	bf00      	nop
 80207b0:	0802b734 	.word	0x0802b734
 80207b4:	0802b828 	.word	0x0802b828

080207b8 <__mcmp>:
 80207b8:	b530      	push	{r4, r5, lr}
 80207ba:	6902      	ldr	r2, [r0, #16]
 80207bc:	690c      	ldr	r4, [r1, #16]
 80207be:	1b12      	subs	r2, r2, r4
 80207c0:	d10e      	bne.n	80207e0 <__mcmp+0x28>
 80207c2:	f100 0314 	add.w	r3, r0, #20
 80207c6:	3114      	adds	r1, #20
 80207c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80207cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80207d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80207d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80207d8:	42a5      	cmp	r5, r4
 80207da:	d003      	beq.n	80207e4 <__mcmp+0x2c>
 80207dc:	d305      	bcc.n	80207ea <__mcmp+0x32>
 80207de:	2201      	movs	r2, #1
 80207e0:	4610      	mov	r0, r2
 80207e2:	bd30      	pop	{r4, r5, pc}
 80207e4:	4283      	cmp	r3, r0
 80207e6:	d3f3      	bcc.n	80207d0 <__mcmp+0x18>
 80207e8:	e7fa      	b.n	80207e0 <__mcmp+0x28>
 80207ea:	f04f 32ff 	mov.w	r2, #4294967295
 80207ee:	e7f7      	b.n	80207e0 <__mcmp+0x28>

080207f0 <__mdiff>:
 80207f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207f4:	460c      	mov	r4, r1
 80207f6:	4606      	mov	r6, r0
 80207f8:	4611      	mov	r1, r2
 80207fa:	4620      	mov	r0, r4
 80207fc:	4617      	mov	r7, r2
 80207fe:	f7ff ffdb 	bl	80207b8 <__mcmp>
 8020802:	1e05      	subs	r5, r0, #0
 8020804:	d110      	bne.n	8020828 <__mdiff+0x38>
 8020806:	4629      	mov	r1, r5
 8020808:	4630      	mov	r0, r6
 802080a:	f7ff fd0d 	bl	8020228 <_Balloc>
 802080e:	b930      	cbnz	r0, 802081e <__mdiff+0x2e>
 8020810:	4b39      	ldr	r3, [pc, #228]	; (80208f8 <__mdiff+0x108>)
 8020812:	4602      	mov	r2, r0
 8020814:	f240 2132 	movw	r1, #562	; 0x232
 8020818:	4838      	ldr	r0, [pc, #224]	; (80208fc <__mdiff+0x10c>)
 802081a:	f000 fd23 	bl	8021264 <__assert_func>
 802081e:	2301      	movs	r3, #1
 8020820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020828:	bfa4      	itt	ge
 802082a:	463b      	movge	r3, r7
 802082c:	4627      	movge	r7, r4
 802082e:	4630      	mov	r0, r6
 8020830:	6879      	ldr	r1, [r7, #4]
 8020832:	bfa6      	itte	ge
 8020834:	461c      	movge	r4, r3
 8020836:	2500      	movge	r5, #0
 8020838:	2501      	movlt	r5, #1
 802083a:	f7ff fcf5 	bl	8020228 <_Balloc>
 802083e:	b920      	cbnz	r0, 802084a <__mdiff+0x5a>
 8020840:	4b2d      	ldr	r3, [pc, #180]	; (80208f8 <__mdiff+0x108>)
 8020842:	4602      	mov	r2, r0
 8020844:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020848:	e7e6      	b.n	8020818 <__mdiff+0x28>
 802084a:	693e      	ldr	r6, [r7, #16]
 802084c:	60c5      	str	r5, [r0, #12]
 802084e:	6925      	ldr	r5, [r4, #16]
 8020850:	f107 0114 	add.w	r1, r7, #20
 8020854:	f104 0914 	add.w	r9, r4, #20
 8020858:	f100 0e14 	add.w	lr, r0, #20
 802085c:	f107 0210 	add.w	r2, r7, #16
 8020860:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020864:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020868:	46f2      	mov	sl, lr
 802086a:	2700      	movs	r7, #0
 802086c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020874:	fa1f f883 	uxth.w	r8, r3
 8020878:	fa17 f78b 	uxtah	r7, r7, fp
 802087c:	0c1b      	lsrs	r3, r3, #16
 802087e:	eba7 0808 	sub.w	r8, r7, r8
 8020882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802088a:	fa1f f888 	uxth.w	r8, r8
 802088e:	141f      	asrs	r7, r3, #16
 8020890:	454d      	cmp	r5, r9
 8020892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020896:	f84a 3b04 	str.w	r3, [sl], #4
 802089a:	d8e7      	bhi.n	802086c <__mdiff+0x7c>
 802089c:	1b2b      	subs	r3, r5, r4
 802089e:	3b15      	subs	r3, #21
 80208a0:	f023 0303 	bic.w	r3, r3, #3
 80208a4:	3304      	adds	r3, #4
 80208a6:	3415      	adds	r4, #21
 80208a8:	42a5      	cmp	r5, r4
 80208aa:	bf38      	it	cc
 80208ac:	2304      	movcc	r3, #4
 80208ae:	4419      	add	r1, r3
 80208b0:	4473      	add	r3, lr
 80208b2:	469e      	mov	lr, r3
 80208b4:	460d      	mov	r5, r1
 80208b6:	4565      	cmp	r5, ip
 80208b8:	d30e      	bcc.n	80208d8 <__mdiff+0xe8>
 80208ba:	f10c 0203 	add.w	r2, ip, #3
 80208be:	1a52      	subs	r2, r2, r1
 80208c0:	f022 0203 	bic.w	r2, r2, #3
 80208c4:	3903      	subs	r1, #3
 80208c6:	458c      	cmp	ip, r1
 80208c8:	bf38      	it	cc
 80208ca:	2200      	movcc	r2, #0
 80208cc:	441a      	add	r2, r3
 80208ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80208d2:	b17b      	cbz	r3, 80208f4 <__mdiff+0x104>
 80208d4:	6106      	str	r6, [r0, #16]
 80208d6:	e7a5      	b.n	8020824 <__mdiff+0x34>
 80208d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80208dc:	fa17 f488 	uxtah	r4, r7, r8
 80208e0:	1422      	asrs	r2, r4, #16
 80208e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80208e6:	b2a4      	uxth	r4, r4
 80208e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80208ec:	f84e 4b04 	str.w	r4, [lr], #4
 80208f0:	1417      	asrs	r7, r2, #16
 80208f2:	e7e0      	b.n	80208b6 <__mdiff+0xc6>
 80208f4:	3e01      	subs	r6, #1
 80208f6:	e7ea      	b.n	80208ce <__mdiff+0xde>
 80208f8:	0802b734 	.word	0x0802b734
 80208fc:	0802b828 	.word	0x0802b828

08020900 <__ulp>:
 8020900:	b082      	sub	sp, #8
 8020902:	ed8d 0b00 	vstr	d0, [sp]
 8020906:	9b01      	ldr	r3, [sp, #4]
 8020908:	4912      	ldr	r1, [pc, #72]	; (8020954 <__ulp+0x54>)
 802090a:	4019      	ands	r1, r3
 802090c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020910:	2900      	cmp	r1, #0
 8020912:	dd05      	ble.n	8020920 <__ulp+0x20>
 8020914:	2200      	movs	r2, #0
 8020916:	460b      	mov	r3, r1
 8020918:	ec43 2b10 	vmov	d0, r2, r3
 802091c:	b002      	add	sp, #8
 802091e:	4770      	bx	lr
 8020920:	4249      	negs	r1, r1
 8020922:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8020926:	ea4f 5021 	mov.w	r0, r1, asr #20
 802092a:	f04f 0200 	mov.w	r2, #0
 802092e:	f04f 0300 	mov.w	r3, #0
 8020932:	da04      	bge.n	802093e <__ulp+0x3e>
 8020934:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8020938:	fa41 f300 	asr.w	r3, r1, r0
 802093c:	e7ec      	b.n	8020918 <__ulp+0x18>
 802093e:	f1a0 0114 	sub.w	r1, r0, #20
 8020942:	291e      	cmp	r1, #30
 8020944:	bfda      	itte	le
 8020946:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802094a:	fa20 f101 	lsrle.w	r1, r0, r1
 802094e:	2101      	movgt	r1, #1
 8020950:	460a      	mov	r2, r1
 8020952:	e7e1      	b.n	8020918 <__ulp+0x18>
 8020954:	7ff00000 	.word	0x7ff00000

08020958 <__b2d>:
 8020958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802095a:	6905      	ldr	r5, [r0, #16]
 802095c:	f100 0714 	add.w	r7, r0, #20
 8020960:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8020964:	1f2e      	subs	r6, r5, #4
 8020966:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802096a:	4620      	mov	r0, r4
 802096c:	f7ff fd52 	bl	8020414 <__hi0bits>
 8020970:	f1c0 0320 	rsb	r3, r0, #32
 8020974:	280a      	cmp	r0, #10
 8020976:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80209f4 <__b2d+0x9c>
 802097a:	600b      	str	r3, [r1, #0]
 802097c:	dc14      	bgt.n	80209a8 <__b2d+0x50>
 802097e:	f1c0 0e0b 	rsb	lr, r0, #11
 8020982:	fa24 f10e 	lsr.w	r1, r4, lr
 8020986:	42b7      	cmp	r7, r6
 8020988:	ea41 030c 	orr.w	r3, r1, ip
 802098c:	bf34      	ite	cc
 802098e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020992:	2100      	movcs	r1, #0
 8020994:	3015      	adds	r0, #21
 8020996:	fa04 f000 	lsl.w	r0, r4, r0
 802099a:	fa21 f10e 	lsr.w	r1, r1, lr
 802099e:	ea40 0201 	orr.w	r2, r0, r1
 80209a2:	ec43 2b10 	vmov	d0, r2, r3
 80209a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209a8:	42b7      	cmp	r7, r6
 80209aa:	bf3a      	itte	cc
 80209ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80209b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80209b4:	2100      	movcs	r1, #0
 80209b6:	380b      	subs	r0, #11
 80209b8:	d017      	beq.n	80209ea <__b2d+0x92>
 80209ba:	f1c0 0c20 	rsb	ip, r0, #32
 80209be:	fa04 f500 	lsl.w	r5, r4, r0
 80209c2:	42be      	cmp	r6, r7
 80209c4:	fa21 f40c 	lsr.w	r4, r1, ip
 80209c8:	ea45 0504 	orr.w	r5, r5, r4
 80209cc:	bf8c      	ite	hi
 80209ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80209d2:	2400      	movls	r4, #0
 80209d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80209d8:	fa01 f000 	lsl.w	r0, r1, r0
 80209dc:	fa24 f40c 	lsr.w	r4, r4, ip
 80209e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80209e4:	ea40 0204 	orr.w	r2, r0, r4
 80209e8:	e7db      	b.n	80209a2 <__b2d+0x4a>
 80209ea:	ea44 030c 	orr.w	r3, r4, ip
 80209ee:	460a      	mov	r2, r1
 80209f0:	e7d7      	b.n	80209a2 <__b2d+0x4a>
 80209f2:	bf00      	nop
 80209f4:	3ff00000 	.word	0x3ff00000

080209f8 <__d2b>:
 80209f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80209fc:	4689      	mov	r9, r1
 80209fe:	2101      	movs	r1, #1
 8020a00:	ec57 6b10 	vmov	r6, r7, d0
 8020a04:	4690      	mov	r8, r2
 8020a06:	f7ff fc0f 	bl	8020228 <_Balloc>
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	b930      	cbnz	r0, 8020a1c <__d2b+0x24>
 8020a0e:	4602      	mov	r2, r0
 8020a10:	4b25      	ldr	r3, [pc, #148]	; (8020aa8 <__d2b+0xb0>)
 8020a12:	4826      	ldr	r0, [pc, #152]	; (8020aac <__d2b+0xb4>)
 8020a14:	f240 310a 	movw	r1, #778	; 0x30a
 8020a18:	f000 fc24 	bl	8021264 <__assert_func>
 8020a1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020a24:	bb35      	cbnz	r5, 8020a74 <__d2b+0x7c>
 8020a26:	2e00      	cmp	r6, #0
 8020a28:	9301      	str	r3, [sp, #4]
 8020a2a:	d028      	beq.n	8020a7e <__d2b+0x86>
 8020a2c:	4668      	mov	r0, sp
 8020a2e:	9600      	str	r6, [sp, #0]
 8020a30:	f7ff fd10 	bl	8020454 <__lo0bits>
 8020a34:	9900      	ldr	r1, [sp, #0]
 8020a36:	b300      	cbz	r0, 8020a7a <__d2b+0x82>
 8020a38:	9a01      	ldr	r2, [sp, #4]
 8020a3a:	f1c0 0320 	rsb	r3, r0, #32
 8020a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8020a42:	430b      	orrs	r3, r1
 8020a44:	40c2      	lsrs	r2, r0
 8020a46:	6163      	str	r3, [r4, #20]
 8020a48:	9201      	str	r2, [sp, #4]
 8020a4a:	9b01      	ldr	r3, [sp, #4]
 8020a4c:	61a3      	str	r3, [r4, #24]
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	bf14      	ite	ne
 8020a52:	2202      	movne	r2, #2
 8020a54:	2201      	moveq	r2, #1
 8020a56:	6122      	str	r2, [r4, #16]
 8020a58:	b1d5      	cbz	r5, 8020a90 <__d2b+0x98>
 8020a5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020a5e:	4405      	add	r5, r0
 8020a60:	f8c9 5000 	str.w	r5, [r9]
 8020a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020a68:	f8c8 0000 	str.w	r0, [r8]
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	b003      	add	sp, #12
 8020a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020a78:	e7d5      	b.n	8020a26 <__d2b+0x2e>
 8020a7a:	6161      	str	r1, [r4, #20]
 8020a7c:	e7e5      	b.n	8020a4a <__d2b+0x52>
 8020a7e:	a801      	add	r0, sp, #4
 8020a80:	f7ff fce8 	bl	8020454 <__lo0bits>
 8020a84:	9b01      	ldr	r3, [sp, #4]
 8020a86:	6163      	str	r3, [r4, #20]
 8020a88:	2201      	movs	r2, #1
 8020a8a:	6122      	str	r2, [r4, #16]
 8020a8c:	3020      	adds	r0, #32
 8020a8e:	e7e3      	b.n	8020a58 <__d2b+0x60>
 8020a90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020a98:	f8c9 0000 	str.w	r0, [r9]
 8020a9c:	6918      	ldr	r0, [r3, #16]
 8020a9e:	f7ff fcb9 	bl	8020414 <__hi0bits>
 8020aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020aa6:	e7df      	b.n	8020a68 <__d2b+0x70>
 8020aa8:	0802b734 	.word	0x0802b734
 8020aac:	0802b828 	.word	0x0802b828

08020ab0 <__ratio>:
 8020ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ab4:	4688      	mov	r8, r1
 8020ab6:	4669      	mov	r1, sp
 8020ab8:	4681      	mov	r9, r0
 8020aba:	f7ff ff4d 	bl	8020958 <__b2d>
 8020abe:	a901      	add	r1, sp, #4
 8020ac0:	4640      	mov	r0, r8
 8020ac2:	ec55 4b10 	vmov	r4, r5, d0
 8020ac6:	f7ff ff47 	bl	8020958 <__b2d>
 8020aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020ace:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020ad2:	eba3 0c02 	sub.w	ip, r3, r2
 8020ad6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020ada:	1a9b      	subs	r3, r3, r2
 8020adc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020ae0:	ec51 0b10 	vmov	r0, r1, d0
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	bfd6      	itet	le
 8020ae8:	460a      	movle	r2, r1
 8020aea:	462a      	movgt	r2, r5
 8020aec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020af0:	468b      	mov	fp, r1
 8020af2:	462f      	mov	r7, r5
 8020af4:	bfd4      	ite	le
 8020af6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020afa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020afe:	4620      	mov	r0, r4
 8020b00:	ee10 2a10 	vmov	r2, s0
 8020b04:	465b      	mov	r3, fp
 8020b06:	4639      	mov	r1, r7
 8020b08:	f7df feb0 	bl	800086c <__aeabi_ddiv>
 8020b0c:	ec41 0b10 	vmov	d0, r0, r1
 8020b10:	b003      	add	sp, #12
 8020b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b16 <__copybits>:
 8020b16:	3901      	subs	r1, #1
 8020b18:	b570      	push	{r4, r5, r6, lr}
 8020b1a:	1149      	asrs	r1, r1, #5
 8020b1c:	6914      	ldr	r4, [r2, #16]
 8020b1e:	3101      	adds	r1, #1
 8020b20:	f102 0314 	add.w	r3, r2, #20
 8020b24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8020b28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020b2c:	1f05      	subs	r5, r0, #4
 8020b2e:	42a3      	cmp	r3, r4
 8020b30:	d30c      	bcc.n	8020b4c <__copybits+0x36>
 8020b32:	1aa3      	subs	r3, r4, r2
 8020b34:	3b11      	subs	r3, #17
 8020b36:	f023 0303 	bic.w	r3, r3, #3
 8020b3a:	3211      	adds	r2, #17
 8020b3c:	42a2      	cmp	r2, r4
 8020b3e:	bf88      	it	hi
 8020b40:	2300      	movhi	r3, #0
 8020b42:	4418      	add	r0, r3
 8020b44:	2300      	movs	r3, #0
 8020b46:	4288      	cmp	r0, r1
 8020b48:	d305      	bcc.n	8020b56 <__copybits+0x40>
 8020b4a:	bd70      	pop	{r4, r5, r6, pc}
 8020b4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8020b50:	f845 6f04 	str.w	r6, [r5, #4]!
 8020b54:	e7eb      	b.n	8020b2e <__copybits+0x18>
 8020b56:	f840 3b04 	str.w	r3, [r0], #4
 8020b5a:	e7f4      	b.n	8020b46 <__copybits+0x30>

08020b5c <__any_on>:
 8020b5c:	f100 0214 	add.w	r2, r0, #20
 8020b60:	6900      	ldr	r0, [r0, #16]
 8020b62:	114b      	asrs	r3, r1, #5
 8020b64:	4298      	cmp	r0, r3
 8020b66:	b510      	push	{r4, lr}
 8020b68:	db11      	blt.n	8020b8e <__any_on+0x32>
 8020b6a:	dd0a      	ble.n	8020b82 <__any_on+0x26>
 8020b6c:	f011 011f 	ands.w	r1, r1, #31
 8020b70:	d007      	beq.n	8020b82 <__any_on+0x26>
 8020b72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020b76:	fa24 f001 	lsr.w	r0, r4, r1
 8020b7a:	fa00 f101 	lsl.w	r1, r0, r1
 8020b7e:	428c      	cmp	r4, r1
 8020b80:	d10b      	bne.n	8020b9a <__any_on+0x3e>
 8020b82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020b86:	4293      	cmp	r3, r2
 8020b88:	d803      	bhi.n	8020b92 <__any_on+0x36>
 8020b8a:	2000      	movs	r0, #0
 8020b8c:	bd10      	pop	{r4, pc}
 8020b8e:	4603      	mov	r3, r0
 8020b90:	e7f7      	b.n	8020b82 <__any_on+0x26>
 8020b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020b96:	2900      	cmp	r1, #0
 8020b98:	d0f5      	beq.n	8020b86 <__any_on+0x2a>
 8020b9a:	2001      	movs	r0, #1
 8020b9c:	e7f6      	b.n	8020b8c <__any_on+0x30>

08020b9e <_calloc_r>:
 8020b9e:	b513      	push	{r0, r1, r4, lr}
 8020ba0:	434a      	muls	r2, r1
 8020ba2:	4611      	mov	r1, r2
 8020ba4:	9201      	str	r2, [sp, #4]
 8020ba6:	f000 f859 	bl	8020c5c <_malloc_r>
 8020baa:	4604      	mov	r4, r0
 8020bac:	b118      	cbz	r0, 8020bb6 <_calloc_r+0x18>
 8020bae:	9a01      	ldr	r2, [sp, #4]
 8020bb0:	2100      	movs	r1, #0
 8020bb2:	f7fc fabd 	bl	801d130 <memset>
 8020bb6:	4620      	mov	r0, r4
 8020bb8:	b002      	add	sp, #8
 8020bba:	bd10      	pop	{r4, pc}

08020bbc <_free_r>:
 8020bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020bbe:	2900      	cmp	r1, #0
 8020bc0:	d048      	beq.n	8020c54 <_free_r+0x98>
 8020bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020bc6:	9001      	str	r0, [sp, #4]
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	f1a1 0404 	sub.w	r4, r1, #4
 8020bce:	bfb8      	it	lt
 8020bd0:	18e4      	addlt	r4, r4, r3
 8020bd2:	f000 fcd9 	bl	8021588 <__malloc_lock>
 8020bd6:	4a20      	ldr	r2, [pc, #128]	; (8020c58 <_free_r+0x9c>)
 8020bd8:	9801      	ldr	r0, [sp, #4]
 8020bda:	6813      	ldr	r3, [r2, #0]
 8020bdc:	4615      	mov	r5, r2
 8020bde:	b933      	cbnz	r3, 8020bee <_free_r+0x32>
 8020be0:	6063      	str	r3, [r4, #4]
 8020be2:	6014      	str	r4, [r2, #0]
 8020be4:	b003      	add	sp, #12
 8020be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020bea:	f000 bcd3 	b.w	8021594 <__malloc_unlock>
 8020bee:	42a3      	cmp	r3, r4
 8020bf0:	d90b      	bls.n	8020c0a <_free_r+0x4e>
 8020bf2:	6821      	ldr	r1, [r4, #0]
 8020bf4:	1862      	adds	r2, r4, r1
 8020bf6:	4293      	cmp	r3, r2
 8020bf8:	bf04      	itt	eq
 8020bfa:	681a      	ldreq	r2, [r3, #0]
 8020bfc:	685b      	ldreq	r3, [r3, #4]
 8020bfe:	6063      	str	r3, [r4, #4]
 8020c00:	bf04      	itt	eq
 8020c02:	1852      	addeq	r2, r2, r1
 8020c04:	6022      	streq	r2, [r4, #0]
 8020c06:	602c      	str	r4, [r5, #0]
 8020c08:	e7ec      	b.n	8020be4 <_free_r+0x28>
 8020c0a:	461a      	mov	r2, r3
 8020c0c:	685b      	ldr	r3, [r3, #4]
 8020c0e:	b10b      	cbz	r3, 8020c14 <_free_r+0x58>
 8020c10:	42a3      	cmp	r3, r4
 8020c12:	d9fa      	bls.n	8020c0a <_free_r+0x4e>
 8020c14:	6811      	ldr	r1, [r2, #0]
 8020c16:	1855      	adds	r5, r2, r1
 8020c18:	42a5      	cmp	r5, r4
 8020c1a:	d10b      	bne.n	8020c34 <_free_r+0x78>
 8020c1c:	6824      	ldr	r4, [r4, #0]
 8020c1e:	4421      	add	r1, r4
 8020c20:	1854      	adds	r4, r2, r1
 8020c22:	42a3      	cmp	r3, r4
 8020c24:	6011      	str	r1, [r2, #0]
 8020c26:	d1dd      	bne.n	8020be4 <_free_r+0x28>
 8020c28:	681c      	ldr	r4, [r3, #0]
 8020c2a:	685b      	ldr	r3, [r3, #4]
 8020c2c:	6053      	str	r3, [r2, #4]
 8020c2e:	4421      	add	r1, r4
 8020c30:	6011      	str	r1, [r2, #0]
 8020c32:	e7d7      	b.n	8020be4 <_free_r+0x28>
 8020c34:	d902      	bls.n	8020c3c <_free_r+0x80>
 8020c36:	230c      	movs	r3, #12
 8020c38:	6003      	str	r3, [r0, #0]
 8020c3a:	e7d3      	b.n	8020be4 <_free_r+0x28>
 8020c3c:	6825      	ldr	r5, [r4, #0]
 8020c3e:	1961      	adds	r1, r4, r5
 8020c40:	428b      	cmp	r3, r1
 8020c42:	bf04      	itt	eq
 8020c44:	6819      	ldreq	r1, [r3, #0]
 8020c46:	685b      	ldreq	r3, [r3, #4]
 8020c48:	6063      	str	r3, [r4, #4]
 8020c4a:	bf04      	itt	eq
 8020c4c:	1949      	addeq	r1, r1, r5
 8020c4e:	6021      	streq	r1, [r4, #0]
 8020c50:	6054      	str	r4, [r2, #4]
 8020c52:	e7c7      	b.n	8020be4 <_free_r+0x28>
 8020c54:	b003      	add	sp, #12
 8020c56:	bd30      	pop	{r4, r5, pc}
 8020c58:	20001ff4 	.word	0x20001ff4

08020c5c <_malloc_r>:
 8020c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c5e:	1ccd      	adds	r5, r1, #3
 8020c60:	f025 0503 	bic.w	r5, r5, #3
 8020c64:	3508      	adds	r5, #8
 8020c66:	2d0c      	cmp	r5, #12
 8020c68:	bf38      	it	cc
 8020c6a:	250c      	movcc	r5, #12
 8020c6c:	2d00      	cmp	r5, #0
 8020c6e:	4606      	mov	r6, r0
 8020c70:	db01      	blt.n	8020c76 <_malloc_r+0x1a>
 8020c72:	42a9      	cmp	r1, r5
 8020c74:	d903      	bls.n	8020c7e <_malloc_r+0x22>
 8020c76:	230c      	movs	r3, #12
 8020c78:	6033      	str	r3, [r6, #0]
 8020c7a:	2000      	movs	r0, #0
 8020c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c7e:	f000 fc83 	bl	8021588 <__malloc_lock>
 8020c82:	4921      	ldr	r1, [pc, #132]	; (8020d08 <_malloc_r+0xac>)
 8020c84:	680a      	ldr	r2, [r1, #0]
 8020c86:	4614      	mov	r4, r2
 8020c88:	b99c      	cbnz	r4, 8020cb2 <_malloc_r+0x56>
 8020c8a:	4f20      	ldr	r7, [pc, #128]	; (8020d0c <_malloc_r+0xb0>)
 8020c8c:	683b      	ldr	r3, [r7, #0]
 8020c8e:	b923      	cbnz	r3, 8020c9a <_malloc_r+0x3e>
 8020c90:	4621      	mov	r1, r4
 8020c92:	4630      	mov	r0, r6
 8020c94:	f000 f9a0 	bl	8020fd8 <_sbrk_r>
 8020c98:	6038      	str	r0, [r7, #0]
 8020c9a:	4629      	mov	r1, r5
 8020c9c:	4630      	mov	r0, r6
 8020c9e:	f000 f99b 	bl	8020fd8 <_sbrk_r>
 8020ca2:	1c43      	adds	r3, r0, #1
 8020ca4:	d123      	bne.n	8020cee <_malloc_r+0x92>
 8020ca6:	230c      	movs	r3, #12
 8020ca8:	6033      	str	r3, [r6, #0]
 8020caa:	4630      	mov	r0, r6
 8020cac:	f000 fc72 	bl	8021594 <__malloc_unlock>
 8020cb0:	e7e3      	b.n	8020c7a <_malloc_r+0x1e>
 8020cb2:	6823      	ldr	r3, [r4, #0]
 8020cb4:	1b5b      	subs	r3, r3, r5
 8020cb6:	d417      	bmi.n	8020ce8 <_malloc_r+0x8c>
 8020cb8:	2b0b      	cmp	r3, #11
 8020cba:	d903      	bls.n	8020cc4 <_malloc_r+0x68>
 8020cbc:	6023      	str	r3, [r4, #0]
 8020cbe:	441c      	add	r4, r3
 8020cc0:	6025      	str	r5, [r4, #0]
 8020cc2:	e004      	b.n	8020cce <_malloc_r+0x72>
 8020cc4:	6863      	ldr	r3, [r4, #4]
 8020cc6:	42a2      	cmp	r2, r4
 8020cc8:	bf0c      	ite	eq
 8020cca:	600b      	streq	r3, [r1, #0]
 8020ccc:	6053      	strne	r3, [r2, #4]
 8020cce:	4630      	mov	r0, r6
 8020cd0:	f000 fc60 	bl	8021594 <__malloc_unlock>
 8020cd4:	f104 000b 	add.w	r0, r4, #11
 8020cd8:	1d23      	adds	r3, r4, #4
 8020cda:	f020 0007 	bic.w	r0, r0, #7
 8020cde:	1ac2      	subs	r2, r0, r3
 8020ce0:	d0cc      	beq.n	8020c7c <_malloc_r+0x20>
 8020ce2:	1a1b      	subs	r3, r3, r0
 8020ce4:	50a3      	str	r3, [r4, r2]
 8020ce6:	e7c9      	b.n	8020c7c <_malloc_r+0x20>
 8020ce8:	4622      	mov	r2, r4
 8020cea:	6864      	ldr	r4, [r4, #4]
 8020cec:	e7cc      	b.n	8020c88 <_malloc_r+0x2c>
 8020cee:	1cc4      	adds	r4, r0, #3
 8020cf0:	f024 0403 	bic.w	r4, r4, #3
 8020cf4:	42a0      	cmp	r0, r4
 8020cf6:	d0e3      	beq.n	8020cc0 <_malloc_r+0x64>
 8020cf8:	1a21      	subs	r1, r4, r0
 8020cfa:	4630      	mov	r0, r6
 8020cfc:	f000 f96c 	bl	8020fd8 <_sbrk_r>
 8020d00:	3001      	adds	r0, #1
 8020d02:	d1dd      	bne.n	8020cc0 <_malloc_r+0x64>
 8020d04:	e7cf      	b.n	8020ca6 <_malloc_r+0x4a>
 8020d06:	bf00      	nop
 8020d08:	20001ff4 	.word	0x20001ff4
 8020d0c:	20001ff8 	.word	0x20001ff8

08020d10 <__ssputs_r>:
 8020d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d14:	688e      	ldr	r6, [r1, #8]
 8020d16:	429e      	cmp	r6, r3
 8020d18:	4682      	mov	sl, r0
 8020d1a:	460c      	mov	r4, r1
 8020d1c:	4690      	mov	r8, r2
 8020d1e:	461f      	mov	r7, r3
 8020d20:	d838      	bhi.n	8020d94 <__ssputs_r+0x84>
 8020d22:	898a      	ldrh	r2, [r1, #12]
 8020d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020d28:	d032      	beq.n	8020d90 <__ssputs_r+0x80>
 8020d2a:	6825      	ldr	r5, [r4, #0]
 8020d2c:	6909      	ldr	r1, [r1, #16]
 8020d2e:	eba5 0901 	sub.w	r9, r5, r1
 8020d32:	6965      	ldr	r5, [r4, #20]
 8020d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020d3c:	3301      	adds	r3, #1
 8020d3e:	444b      	add	r3, r9
 8020d40:	106d      	asrs	r5, r5, #1
 8020d42:	429d      	cmp	r5, r3
 8020d44:	bf38      	it	cc
 8020d46:	461d      	movcc	r5, r3
 8020d48:	0553      	lsls	r3, r2, #21
 8020d4a:	d531      	bpl.n	8020db0 <__ssputs_r+0xa0>
 8020d4c:	4629      	mov	r1, r5
 8020d4e:	f7ff ff85 	bl	8020c5c <_malloc_r>
 8020d52:	4606      	mov	r6, r0
 8020d54:	b950      	cbnz	r0, 8020d6c <__ssputs_r+0x5c>
 8020d56:	230c      	movs	r3, #12
 8020d58:	f8ca 3000 	str.w	r3, [sl]
 8020d5c:	89a3      	ldrh	r3, [r4, #12]
 8020d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d62:	81a3      	strh	r3, [r4, #12]
 8020d64:	f04f 30ff 	mov.w	r0, #4294967295
 8020d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d6c:	6921      	ldr	r1, [r4, #16]
 8020d6e:	464a      	mov	r2, r9
 8020d70:	f7ff fa4c 	bl	802020c <memcpy>
 8020d74:	89a3      	ldrh	r3, [r4, #12]
 8020d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d7e:	81a3      	strh	r3, [r4, #12]
 8020d80:	6126      	str	r6, [r4, #16]
 8020d82:	6165      	str	r5, [r4, #20]
 8020d84:	444e      	add	r6, r9
 8020d86:	eba5 0509 	sub.w	r5, r5, r9
 8020d8a:	6026      	str	r6, [r4, #0]
 8020d8c:	60a5      	str	r5, [r4, #8]
 8020d8e:	463e      	mov	r6, r7
 8020d90:	42be      	cmp	r6, r7
 8020d92:	d900      	bls.n	8020d96 <__ssputs_r+0x86>
 8020d94:	463e      	mov	r6, r7
 8020d96:	4632      	mov	r2, r6
 8020d98:	6820      	ldr	r0, [r4, #0]
 8020d9a:	4641      	mov	r1, r8
 8020d9c:	f000 fbda 	bl	8021554 <memmove>
 8020da0:	68a3      	ldr	r3, [r4, #8]
 8020da2:	6822      	ldr	r2, [r4, #0]
 8020da4:	1b9b      	subs	r3, r3, r6
 8020da6:	4432      	add	r2, r6
 8020da8:	60a3      	str	r3, [r4, #8]
 8020daa:	6022      	str	r2, [r4, #0]
 8020dac:	2000      	movs	r0, #0
 8020dae:	e7db      	b.n	8020d68 <__ssputs_r+0x58>
 8020db0:	462a      	mov	r2, r5
 8020db2:	f000 fbf5 	bl	80215a0 <_realloc_r>
 8020db6:	4606      	mov	r6, r0
 8020db8:	2800      	cmp	r0, #0
 8020dba:	d1e1      	bne.n	8020d80 <__ssputs_r+0x70>
 8020dbc:	6921      	ldr	r1, [r4, #16]
 8020dbe:	4650      	mov	r0, sl
 8020dc0:	f7ff fefc 	bl	8020bbc <_free_r>
 8020dc4:	e7c7      	b.n	8020d56 <__ssputs_r+0x46>
	...

08020dc8 <_svfiprintf_r>:
 8020dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dcc:	4698      	mov	r8, r3
 8020dce:	898b      	ldrh	r3, [r1, #12]
 8020dd0:	061b      	lsls	r3, r3, #24
 8020dd2:	b09d      	sub	sp, #116	; 0x74
 8020dd4:	4607      	mov	r7, r0
 8020dd6:	460d      	mov	r5, r1
 8020dd8:	4614      	mov	r4, r2
 8020dda:	d50e      	bpl.n	8020dfa <_svfiprintf_r+0x32>
 8020ddc:	690b      	ldr	r3, [r1, #16]
 8020dde:	b963      	cbnz	r3, 8020dfa <_svfiprintf_r+0x32>
 8020de0:	2140      	movs	r1, #64	; 0x40
 8020de2:	f7ff ff3b 	bl	8020c5c <_malloc_r>
 8020de6:	6028      	str	r0, [r5, #0]
 8020de8:	6128      	str	r0, [r5, #16]
 8020dea:	b920      	cbnz	r0, 8020df6 <_svfiprintf_r+0x2e>
 8020dec:	230c      	movs	r3, #12
 8020dee:	603b      	str	r3, [r7, #0]
 8020df0:	f04f 30ff 	mov.w	r0, #4294967295
 8020df4:	e0d1      	b.n	8020f9a <_svfiprintf_r+0x1d2>
 8020df6:	2340      	movs	r3, #64	; 0x40
 8020df8:	616b      	str	r3, [r5, #20]
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8020dfe:	2320      	movs	r3, #32
 8020e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8020e08:	2330      	movs	r3, #48	; 0x30
 8020e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020fb4 <_svfiprintf_r+0x1ec>
 8020e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020e12:	f04f 0901 	mov.w	r9, #1
 8020e16:	4623      	mov	r3, r4
 8020e18:	469a      	mov	sl, r3
 8020e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020e1e:	b10a      	cbz	r2, 8020e24 <_svfiprintf_r+0x5c>
 8020e20:	2a25      	cmp	r2, #37	; 0x25
 8020e22:	d1f9      	bne.n	8020e18 <_svfiprintf_r+0x50>
 8020e24:	ebba 0b04 	subs.w	fp, sl, r4
 8020e28:	d00b      	beq.n	8020e42 <_svfiprintf_r+0x7a>
 8020e2a:	465b      	mov	r3, fp
 8020e2c:	4622      	mov	r2, r4
 8020e2e:	4629      	mov	r1, r5
 8020e30:	4638      	mov	r0, r7
 8020e32:	f7ff ff6d 	bl	8020d10 <__ssputs_r>
 8020e36:	3001      	adds	r0, #1
 8020e38:	f000 80aa 	beq.w	8020f90 <_svfiprintf_r+0x1c8>
 8020e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e3e:	445a      	add	r2, fp
 8020e40:	9209      	str	r2, [sp, #36]	; 0x24
 8020e42:	f89a 3000 	ldrb.w	r3, [sl]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	f000 80a2 	beq.w	8020f90 <_svfiprintf_r+0x1c8>
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8020e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020e56:	f10a 0a01 	add.w	sl, sl, #1
 8020e5a:	9304      	str	r3, [sp, #16]
 8020e5c:	9307      	str	r3, [sp, #28]
 8020e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020e62:	931a      	str	r3, [sp, #104]	; 0x68
 8020e64:	4654      	mov	r4, sl
 8020e66:	2205      	movs	r2, #5
 8020e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e6c:	4851      	ldr	r0, [pc, #324]	; (8020fb4 <_svfiprintf_r+0x1ec>)
 8020e6e:	f7df f9c7 	bl	8000200 <memchr>
 8020e72:	9a04      	ldr	r2, [sp, #16]
 8020e74:	b9d8      	cbnz	r0, 8020eae <_svfiprintf_r+0xe6>
 8020e76:	06d0      	lsls	r0, r2, #27
 8020e78:	bf44      	itt	mi
 8020e7a:	2320      	movmi	r3, #32
 8020e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e80:	0711      	lsls	r1, r2, #28
 8020e82:	bf44      	itt	mi
 8020e84:	232b      	movmi	r3, #43	; 0x2b
 8020e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8020e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8020e90:	d015      	beq.n	8020ebe <_svfiprintf_r+0xf6>
 8020e92:	9a07      	ldr	r2, [sp, #28]
 8020e94:	4654      	mov	r4, sl
 8020e96:	2000      	movs	r0, #0
 8020e98:	f04f 0c0a 	mov.w	ip, #10
 8020e9c:	4621      	mov	r1, r4
 8020e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020ea2:	3b30      	subs	r3, #48	; 0x30
 8020ea4:	2b09      	cmp	r3, #9
 8020ea6:	d94e      	bls.n	8020f46 <_svfiprintf_r+0x17e>
 8020ea8:	b1b0      	cbz	r0, 8020ed8 <_svfiprintf_r+0x110>
 8020eaa:	9207      	str	r2, [sp, #28]
 8020eac:	e014      	b.n	8020ed8 <_svfiprintf_r+0x110>
 8020eae:	eba0 0308 	sub.w	r3, r0, r8
 8020eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8020eb6:	4313      	orrs	r3, r2
 8020eb8:	9304      	str	r3, [sp, #16]
 8020eba:	46a2      	mov	sl, r4
 8020ebc:	e7d2      	b.n	8020e64 <_svfiprintf_r+0x9c>
 8020ebe:	9b03      	ldr	r3, [sp, #12]
 8020ec0:	1d19      	adds	r1, r3, #4
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	9103      	str	r1, [sp, #12]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	bfbb      	ittet	lt
 8020eca:	425b      	neglt	r3, r3
 8020ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8020ed0:	9307      	strge	r3, [sp, #28]
 8020ed2:	9307      	strlt	r3, [sp, #28]
 8020ed4:	bfb8      	it	lt
 8020ed6:	9204      	strlt	r2, [sp, #16]
 8020ed8:	7823      	ldrb	r3, [r4, #0]
 8020eda:	2b2e      	cmp	r3, #46	; 0x2e
 8020edc:	d10c      	bne.n	8020ef8 <_svfiprintf_r+0x130>
 8020ede:	7863      	ldrb	r3, [r4, #1]
 8020ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8020ee2:	d135      	bne.n	8020f50 <_svfiprintf_r+0x188>
 8020ee4:	9b03      	ldr	r3, [sp, #12]
 8020ee6:	1d1a      	adds	r2, r3, #4
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	9203      	str	r2, [sp, #12]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	bfb8      	it	lt
 8020ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8020ef4:	3402      	adds	r4, #2
 8020ef6:	9305      	str	r3, [sp, #20]
 8020ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020fc4 <_svfiprintf_r+0x1fc>
 8020efc:	7821      	ldrb	r1, [r4, #0]
 8020efe:	2203      	movs	r2, #3
 8020f00:	4650      	mov	r0, sl
 8020f02:	f7df f97d 	bl	8000200 <memchr>
 8020f06:	b140      	cbz	r0, 8020f1a <_svfiprintf_r+0x152>
 8020f08:	2340      	movs	r3, #64	; 0x40
 8020f0a:	eba0 000a 	sub.w	r0, r0, sl
 8020f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8020f12:	9b04      	ldr	r3, [sp, #16]
 8020f14:	4303      	orrs	r3, r0
 8020f16:	3401      	adds	r4, #1
 8020f18:	9304      	str	r3, [sp, #16]
 8020f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f1e:	4826      	ldr	r0, [pc, #152]	; (8020fb8 <_svfiprintf_r+0x1f0>)
 8020f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020f24:	2206      	movs	r2, #6
 8020f26:	f7df f96b 	bl	8000200 <memchr>
 8020f2a:	2800      	cmp	r0, #0
 8020f2c:	d038      	beq.n	8020fa0 <_svfiprintf_r+0x1d8>
 8020f2e:	4b23      	ldr	r3, [pc, #140]	; (8020fbc <_svfiprintf_r+0x1f4>)
 8020f30:	bb1b      	cbnz	r3, 8020f7a <_svfiprintf_r+0x1b2>
 8020f32:	9b03      	ldr	r3, [sp, #12]
 8020f34:	3307      	adds	r3, #7
 8020f36:	f023 0307 	bic.w	r3, r3, #7
 8020f3a:	3308      	adds	r3, #8
 8020f3c:	9303      	str	r3, [sp, #12]
 8020f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f40:	4433      	add	r3, r6
 8020f42:	9309      	str	r3, [sp, #36]	; 0x24
 8020f44:	e767      	b.n	8020e16 <_svfiprintf_r+0x4e>
 8020f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8020f4a:	460c      	mov	r4, r1
 8020f4c:	2001      	movs	r0, #1
 8020f4e:	e7a5      	b.n	8020e9c <_svfiprintf_r+0xd4>
 8020f50:	2300      	movs	r3, #0
 8020f52:	3401      	adds	r4, #1
 8020f54:	9305      	str	r3, [sp, #20]
 8020f56:	4619      	mov	r1, r3
 8020f58:	f04f 0c0a 	mov.w	ip, #10
 8020f5c:	4620      	mov	r0, r4
 8020f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f62:	3a30      	subs	r2, #48	; 0x30
 8020f64:	2a09      	cmp	r2, #9
 8020f66:	d903      	bls.n	8020f70 <_svfiprintf_r+0x1a8>
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d0c5      	beq.n	8020ef8 <_svfiprintf_r+0x130>
 8020f6c:	9105      	str	r1, [sp, #20]
 8020f6e:	e7c3      	b.n	8020ef8 <_svfiprintf_r+0x130>
 8020f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8020f74:	4604      	mov	r4, r0
 8020f76:	2301      	movs	r3, #1
 8020f78:	e7f0      	b.n	8020f5c <_svfiprintf_r+0x194>
 8020f7a:	ab03      	add	r3, sp, #12
 8020f7c:	9300      	str	r3, [sp, #0]
 8020f7e:	462a      	mov	r2, r5
 8020f80:	4b0f      	ldr	r3, [pc, #60]	; (8020fc0 <_svfiprintf_r+0x1f8>)
 8020f82:	a904      	add	r1, sp, #16
 8020f84:	4638      	mov	r0, r7
 8020f86:	f7fc f97b 	bl	801d280 <_printf_float>
 8020f8a:	1c42      	adds	r2, r0, #1
 8020f8c:	4606      	mov	r6, r0
 8020f8e:	d1d6      	bne.n	8020f3e <_svfiprintf_r+0x176>
 8020f90:	89ab      	ldrh	r3, [r5, #12]
 8020f92:	065b      	lsls	r3, r3, #25
 8020f94:	f53f af2c 	bmi.w	8020df0 <_svfiprintf_r+0x28>
 8020f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f9a:	b01d      	add	sp, #116	; 0x74
 8020f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fa0:	ab03      	add	r3, sp, #12
 8020fa2:	9300      	str	r3, [sp, #0]
 8020fa4:	462a      	mov	r2, r5
 8020fa6:	4b06      	ldr	r3, [pc, #24]	; (8020fc0 <_svfiprintf_r+0x1f8>)
 8020fa8:	a904      	add	r1, sp, #16
 8020faa:	4638      	mov	r0, r7
 8020fac:	f7fc fc0c 	bl	801d7c8 <_printf_i>
 8020fb0:	e7eb      	b.n	8020f8a <_svfiprintf_r+0x1c2>
 8020fb2:	bf00      	nop
 8020fb4:	0802b984 	.word	0x0802b984
 8020fb8:	0802b98e 	.word	0x0802b98e
 8020fbc:	0801d281 	.word	0x0801d281
 8020fc0:	08020d11 	.word	0x08020d11
 8020fc4:	0802b98a 	.word	0x0802b98a

08020fc8 <nan>:
 8020fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020fd0 <nan+0x8>
 8020fcc:	4770      	bx	lr
 8020fce:	bf00      	nop
 8020fd0:	00000000 	.word	0x00000000
 8020fd4:	7ff80000 	.word	0x7ff80000

08020fd8 <_sbrk_r>:
 8020fd8:	b538      	push	{r3, r4, r5, lr}
 8020fda:	4d06      	ldr	r5, [pc, #24]	; (8020ff4 <_sbrk_r+0x1c>)
 8020fdc:	2300      	movs	r3, #0
 8020fde:	4604      	mov	r4, r0
 8020fe0:	4608      	mov	r0, r1
 8020fe2:	602b      	str	r3, [r5, #0]
 8020fe4:	f7e6 fb82 	bl	80076ec <_sbrk>
 8020fe8:	1c43      	adds	r3, r0, #1
 8020fea:	d102      	bne.n	8020ff2 <_sbrk_r+0x1a>
 8020fec:	682b      	ldr	r3, [r5, #0]
 8020fee:	b103      	cbz	r3, 8020ff2 <_sbrk_r+0x1a>
 8020ff0:	6023      	str	r3, [r4, #0]
 8020ff2:	bd38      	pop	{r3, r4, r5, pc}
 8020ff4:	2000a110 	.word	0x2000a110

08020ff8 <__sread>:
 8020ff8:	b510      	push	{r4, lr}
 8020ffa:	460c      	mov	r4, r1
 8020ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021000:	f000 fc4e 	bl	80218a0 <_read_r>
 8021004:	2800      	cmp	r0, #0
 8021006:	bfab      	itete	ge
 8021008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802100a:	89a3      	ldrhlt	r3, [r4, #12]
 802100c:	181b      	addge	r3, r3, r0
 802100e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021012:	bfac      	ite	ge
 8021014:	6563      	strge	r3, [r4, #84]	; 0x54
 8021016:	81a3      	strhlt	r3, [r4, #12]
 8021018:	bd10      	pop	{r4, pc}

0802101a <__swrite>:
 802101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802101e:	461f      	mov	r7, r3
 8021020:	898b      	ldrh	r3, [r1, #12]
 8021022:	05db      	lsls	r3, r3, #23
 8021024:	4605      	mov	r5, r0
 8021026:	460c      	mov	r4, r1
 8021028:	4616      	mov	r6, r2
 802102a:	d505      	bpl.n	8021038 <__swrite+0x1e>
 802102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021030:	2302      	movs	r3, #2
 8021032:	2200      	movs	r2, #0
 8021034:	f000 fa18 	bl	8021468 <_lseek_r>
 8021038:	89a3      	ldrh	r3, [r4, #12]
 802103a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802103e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021042:	81a3      	strh	r3, [r4, #12]
 8021044:	4632      	mov	r2, r6
 8021046:	463b      	mov	r3, r7
 8021048:	4628      	mov	r0, r5
 802104a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802104e:	f000 b889 	b.w	8021164 <_write_r>

08021052 <__sseek>:
 8021052:	b510      	push	{r4, lr}
 8021054:	460c      	mov	r4, r1
 8021056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802105a:	f000 fa05 	bl	8021468 <_lseek_r>
 802105e:	1c43      	adds	r3, r0, #1
 8021060:	89a3      	ldrh	r3, [r4, #12]
 8021062:	bf15      	itete	ne
 8021064:	6560      	strne	r0, [r4, #84]	; 0x54
 8021066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802106a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802106e:	81a3      	strheq	r3, [r4, #12]
 8021070:	bf18      	it	ne
 8021072:	81a3      	strhne	r3, [r4, #12]
 8021074:	bd10      	pop	{r4, pc}

08021076 <__sclose>:
 8021076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802107a:	f000 b911 	b.w	80212a0 <_close_r>

0802107e <strncmp>:
 802107e:	b510      	push	{r4, lr}
 8021080:	b16a      	cbz	r2, 802109e <strncmp+0x20>
 8021082:	3901      	subs	r1, #1
 8021084:	1884      	adds	r4, r0, r2
 8021086:	f810 3b01 	ldrb.w	r3, [r0], #1
 802108a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802108e:	4293      	cmp	r3, r2
 8021090:	d103      	bne.n	802109a <strncmp+0x1c>
 8021092:	42a0      	cmp	r0, r4
 8021094:	d001      	beq.n	802109a <strncmp+0x1c>
 8021096:	2b00      	cmp	r3, #0
 8021098:	d1f5      	bne.n	8021086 <strncmp+0x8>
 802109a:	1a98      	subs	r0, r3, r2
 802109c:	bd10      	pop	{r4, pc}
 802109e:	4610      	mov	r0, r2
 80210a0:	e7fc      	b.n	802109c <strncmp+0x1e>
	...

080210a4 <__swbuf_r>:
 80210a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210a6:	460e      	mov	r6, r1
 80210a8:	4614      	mov	r4, r2
 80210aa:	4605      	mov	r5, r0
 80210ac:	b118      	cbz	r0, 80210b6 <__swbuf_r+0x12>
 80210ae:	6983      	ldr	r3, [r0, #24]
 80210b0:	b90b      	cbnz	r3, 80210b6 <__swbuf_r+0x12>
 80210b2:	f7fe fc7d 	bl	801f9b0 <__sinit>
 80210b6:	4b21      	ldr	r3, [pc, #132]	; (802113c <__swbuf_r+0x98>)
 80210b8:	429c      	cmp	r4, r3
 80210ba:	d12b      	bne.n	8021114 <__swbuf_r+0x70>
 80210bc:	686c      	ldr	r4, [r5, #4]
 80210be:	69a3      	ldr	r3, [r4, #24]
 80210c0:	60a3      	str	r3, [r4, #8]
 80210c2:	89a3      	ldrh	r3, [r4, #12]
 80210c4:	071a      	lsls	r2, r3, #28
 80210c6:	d52f      	bpl.n	8021128 <__swbuf_r+0x84>
 80210c8:	6923      	ldr	r3, [r4, #16]
 80210ca:	b36b      	cbz	r3, 8021128 <__swbuf_r+0x84>
 80210cc:	6923      	ldr	r3, [r4, #16]
 80210ce:	6820      	ldr	r0, [r4, #0]
 80210d0:	1ac0      	subs	r0, r0, r3
 80210d2:	6963      	ldr	r3, [r4, #20]
 80210d4:	b2f6      	uxtb	r6, r6
 80210d6:	4283      	cmp	r3, r0
 80210d8:	4637      	mov	r7, r6
 80210da:	dc04      	bgt.n	80210e6 <__swbuf_r+0x42>
 80210dc:	4621      	mov	r1, r4
 80210de:	4628      	mov	r0, r5
 80210e0:	f000 f974 	bl	80213cc <_fflush_r>
 80210e4:	bb30      	cbnz	r0, 8021134 <__swbuf_r+0x90>
 80210e6:	68a3      	ldr	r3, [r4, #8]
 80210e8:	3b01      	subs	r3, #1
 80210ea:	60a3      	str	r3, [r4, #8]
 80210ec:	6823      	ldr	r3, [r4, #0]
 80210ee:	1c5a      	adds	r2, r3, #1
 80210f0:	6022      	str	r2, [r4, #0]
 80210f2:	701e      	strb	r6, [r3, #0]
 80210f4:	6963      	ldr	r3, [r4, #20]
 80210f6:	3001      	adds	r0, #1
 80210f8:	4283      	cmp	r3, r0
 80210fa:	d004      	beq.n	8021106 <__swbuf_r+0x62>
 80210fc:	89a3      	ldrh	r3, [r4, #12]
 80210fe:	07db      	lsls	r3, r3, #31
 8021100:	d506      	bpl.n	8021110 <__swbuf_r+0x6c>
 8021102:	2e0a      	cmp	r6, #10
 8021104:	d104      	bne.n	8021110 <__swbuf_r+0x6c>
 8021106:	4621      	mov	r1, r4
 8021108:	4628      	mov	r0, r5
 802110a:	f000 f95f 	bl	80213cc <_fflush_r>
 802110e:	b988      	cbnz	r0, 8021134 <__swbuf_r+0x90>
 8021110:	4638      	mov	r0, r7
 8021112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021114:	4b0a      	ldr	r3, [pc, #40]	; (8021140 <__swbuf_r+0x9c>)
 8021116:	429c      	cmp	r4, r3
 8021118:	d101      	bne.n	802111e <__swbuf_r+0x7a>
 802111a:	68ac      	ldr	r4, [r5, #8]
 802111c:	e7cf      	b.n	80210be <__swbuf_r+0x1a>
 802111e:	4b09      	ldr	r3, [pc, #36]	; (8021144 <__swbuf_r+0xa0>)
 8021120:	429c      	cmp	r4, r3
 8021122:	bf08      	it	eq
 8021124:	68ec      	ldreq	r4, [r5, #12]
 8021126:	e7ca      	b.n	80210be <__swbuf_r+0x1a>
 8021128:	4621      	mov	r1, r4
 802112a:	4628      	mov	r0, r5
 802112c:	f000 f82c 	bl	8021188 <__swsetup_r>
 8021130:	2800      	cmp	r0, #0
 8021132:	d0cb      	beq.n	80210cc <__swbuf_r+0x28>
 8021134:	f04f 37ff 	mov.w	r7, #4294967295
 8021138:	e7ea      	b.n	8021110 <__swbuf_r+0x6c>
 802113a:	bf00      	nop
 802113c:	0802b768 	.word	0x0802b768
 8021140:	0802b788 	.word	0x0802b788
 8021144:	0802b748 	.word	0x0802b748

08021148 <__ascii_wctomb>:
 8021148:	b149      	cbz	r1, 802115e <__ascii_wctomb+0x16>
 802114a:	2aff      	cmp	r2, #255	; 0xff
 802114c:	bf85      	ittet	hi
 802114e:	238a      	movhi	r3, #138	; 0x8a
 8021150:	6003      	strhi	r3, [r0, #0]
 8021152:	700a      	strbls	r2, [r1, #0]
 8021154:	f04f 30ff 	movhi.w	r0, #4294967295
 8021158:	bf98      	it	ls
 802115a:	2001      	movls	r0, #1
 802115c:	4770      	bx	lr
 802115e:	4608      	mov	r0, r1
 8021160:	4770      	bx	lr
	...

08021164 <_write_r>:
 8021164:	b538      	push	{r3, r4, r5, lr}
 8021166:	4d07      	ldr	r5, [pc, #28]	; (8021184 <_write_r+0x20>)
 8021168:	4604      	mov	r4, r0
 802116a:	4608      	mov	r0, r1
 802116c:	4611      	mov	r1, r2
 802116e:	2200      	movs	r2, #0
 8021170:	602a      	str	r2, [r5, #0]
 8021172:	461a      	mov	r2, r3
 8021174:	f7e6 fa69 	bl	800764a <_write>
 8021178:	1c43      	adds	r3, r0, #1
 802117a:	d102      	bne.n	8021182 <_write_r+0x1e>
 802117c:	682b      	ldr	r3, [r5, #0]
 802117e:	b103      	cbz	r3, 8021182 <_write_r+0x1e>
 8021180:	6023      	str	r3, [r4, #0]
 8021182:	bd38      	pop	{r3, r4, r5, pc}
 8021184:	2000a110 	.word	0x2000a110

08021188 <__swsetup_r>:
 8021188:	4b32      	ldr	r3, [pc, #200]	; (8021254 <__swsetup_r+0xcc>)
 802118a:	b570      	push	{r4, r5, r6, lr}
 802118c:	681d      	ldr	r5, [r3, #0]
 802118e:	4606      	mov	r6, r0
 8021190:	460c      	mov	r4, r1
 8021192:	b125      	cbz	r5, 802119e <__swsetup_r+0x16>
 8021194:	69ab      	ldr	r3, [r5, #24]
 8021196:	b913      	cbnz	r3, 802119e <__swsetup_r+0x16>
 8021198:	4628      	mov	r0, r5
 802119a:	f7fe fc09 	bl	801f9b0 <__sinit>
 802119e:	4b2e      	ldr	r3, [pc, #184]	; (8021258 <__swsetup_r+0xd0>)
 80211a0:	429c      	cmp	r4, r3
 80211a2:	d10f      	bne.n	80211c4 <__swsetup_r+0x3c>
 80211a4:	686c      	ldr	r4, [r5, #4]
 80211a6:	89a3      	ldrh	r3, [r4, #12]
 80211a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80211ac:	0719      	lsls	r1, r3, #28
 80211ae:	d42c      	bmi.n	802120a <__swsetup_r+0x82>
 80211b0:	06dd      	lsls	r5, r3, #27
 80211b2:	d411      	bmi.n	80211d8 <__swsetup_r+0x50>
 80211b4:	2309      	movs	r3, #9
 80211b6:	6033      	str	r3, [r6, #0]
 80211b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80211bc:	81a3      	strh	r3, [r4, #12]
 80211be:	f04f 30ff 	mov.w	r0, #4294967295
 80211c2:	e03e      	b.n	8021242 <__swsetup_r+0xba>
 80211c4:	4b25      	ldr	r3, [pc, #148]	; (802125c <__swsetup_r+0xd4>)
 80211c6:	429c      	cmp	r4, r3
 80211c8:	d101      	bne.n	80211ce <__swsetup_r+0x46>
 80211ca:	68ac      	ldr	r4, [r5, #8]
 80211cc:	e7eb      	b.n	80211a6 <__swsetup_r+0x1e>
 80211ce:	4b24      	ldr	r3, [pc, #144]	; (8021260 <__swsetup_r+0xd8>)
 80211d0:	429c      	cmp	r4, r3
 80211d2:	bf08      	it	eq
 80211d4:	68ec      	ldreq	r4, [r5, #12]
 80211d6:	e7e6      	b.n	80211a6 <__swsetup_r+0x1e>
 80211d8:	0758      	lsls	r0, r3, #29
 80211da:	d512      	bpl.n	8021202 <__swsetup_r+0x7a>
 80211dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80211de:	b141      	cbz	r1, 80211f2 <__swsetup_r+0x6a>
 80211e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80211e4:	4299      	cmp	r1, r3
 80211e6:	d002      	beq.n	80211ee <__swsetup_r+0x66>
 80211e8:	4630      	mov	r0, r6
 80211ea:	f7ff fce7 	bl	8020bbc <_free_r>
 80211ee:	2300      	movs	r3, #0
 80211f0:	6363      	str	r3, [r4, #52]	; 0x34
 80211f2:	89a3      	ldrh	r3, [r4, #12]
 80211f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80211f8:	81a3      	strh	r3, [r4, #12]
 80211fa:	2300      	movs	r3, #0
 80211fc:	6063      	str	r3, [r4, #4]
 80211fe:	6923      	ldr	r3, [r4, #16]
 8021200:	6023      	str	r3, [r4, #0]
 8021202:	89a3      	ldrh	r3, [r4, #12]
 8021204:	f043 0308 	orr.w	r3, r3, #8
 8021208:	81a3      	strh	r3, [r4, #12]
 802120a:	6923      	ldr	r3, [r4, #16]
 802120c:	b94b      	cbnz	r3, 8021222 <__swsetup_r+0x9a>
 802120e:	89a3      	ldrh	r3, [r4, #12]
 8021210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021218:	d003      	beq.n	8021222 <__swsetup_r+0x9a>
 802121a:	4621      	mov	r1, r4
 802121c:	4630      	mov	r0, r6
 802121e:	f000 f959 	bl	80214d4 <__smakebuf_r>
 8021222:	89a0      	ldrh	r0, [r4, #12]
 8021224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021228:	f010 0301 	ands.w	r3, r0, #1
 802122c:	d00a      	beq.n	8021244 <__swsetup_r+0xbc>
 802122e:	2300      	movs	r3, #0
 8021230:	60a3      	str	r3, [r4, #8]
 8021232:	6963      	ldr	r3, [r4, #20]
 8021234:	425b      	negs	r3, r3
 8021236:	61a3      	str	r3, [r4, #24]
 8021238:	6923      	ldr	r3, [r4, #16]
 802123a:	b943      	cbnz	r3, 802124e <__swsetup_r+0xc6>
 802123c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021240:	d1ba      	bne.n	80211b8 <__swsetup_r+0x30>
 8021242:	bd70      	pop	{r4, r5, r6, pc}
 8021244:	0781      	lsls	r1, r0, #30
 8021246:	bf58      	it	pl
 8021248:	6963      	ldrpl	r3, [r4, #20]
 802124a:	60a3      	str	r3, [r4, #8]
 802124c:	e7f4      	b.n	8021238 <__swsetup_r+0xb0>
 802124e:	2000      	movs	r0, #0
 8021250:	e7f7      	b.n	8021242 <__swsetup_r+0xba>
 8021252:	bf00      	nop
 8021254:	200006e4 	.word	0x200006e4
 8021258:	0802b768 	.word	0x0802b768
 802125c:	0802b788 	.word	0x0802b788
 8021260:	0802b748 	.word	0x0802b748

08021264 <__assert_func>:
 8021264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021266:	4614      	mov	r4, r2
 8021268:	461a      	mov	r2, r3
 802126a:	4b09      	ldr	r3, [pc, #36]	; (8021290 <__assert_func+0x2c>)
 802126c:	681b      	ldr	r3, [r3, #0]
 802126e:	4605      	mov	r5, r0
 8021270:	68d8      	ldr	r0, [r3, #12]
 8021272:	b14c      	cbz	r4, 8021288 <__assert_func+0x24>
 8021274:	4b07      	ldr	r3, [pc, #28]	; (8021294 <__assert_func+0x30>)
 8021276:	9100      	str	r1, [sp, #0]
 8021278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802127c:	4906      	ldr	r1, [pc, #24]	; (8021298 <__assert_func+0x34>)
 802127e:	462b      	mov	r3, r5
 8021280:	f000 f8e0 	bl	8021444 <fiprintf>
 8021284:	f000 fb1e 	bl	80218c4 <abort>
 8021288:	4b04      	ldr	r3, [pc, #16]	; (802129c <__assert_func+0x38>)
 802128a:	461c      	mov	r4, r3
 802128c:	e7f3      	b.n	8021276 <__assert_func+0x12>
 802128e:	bf00      	nop
 8021290:	200006e4 	.word	0x200006e4
 8021294:	0802b995 	.word	0x0802b995
 8021298:	0802b9a2 	.word	0x0802b9a2
 802129c:	0802b9d0 	.word	0x0802b9d0

080212a0 <_close_r>:
 80212a0:	b538      	push	{r3, r4, r5, lr}
 80212a2:	4d06      	ldr	r5, [pc, #24]	; (80212bc <_close_r+0x1c>)
 80212a4:	2300      	movs	r3, #0
 80212a6:	4604      	mov	r4, r0
 80212a8:	4608      	mov	r0, r1
 80212aa:	602b      	str	r3, [r5, #0]
 80212ac:	f7e6 f9e9 	bl	8007682 <_close>
 80212b0:	1c43      	adds	r3, r0, #1
 80212b2:	d102      	bne.n	80212ba <_close_r+0x1a>
 80212b4:	682b      	ldr	r3, [r5, #0]
 80212b6:	b103      	cbz	r3, 80212ba <_close_r+0x1a>
 80212b8:	6023      	str	r3, [r4, #0]
 80212ba:	bd38      	pop	{r3, r4, r5, pc}
 80212bc:	2000a110 	.word	0x2000a110

080212c0 <__sflush_r>:
 80212c0:	898a      	ldrh	r2, [r1, #12]
 80212c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212c6:	4605      	mov	r5, r0
 80212c8:	0710      	lsls	r0, r2, #28
 80212ca:	460c      	mov	r4, r1
 80212cc:	d458      	bmi.n	8021380 <__sflush_r+0xc0>
 80212ce:	684b      	ldr	r3, [r1, #4]
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	dc05      	bgt.n	80212e0 <__sflush_r+0x20>
 80212d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	dc02      	bgt.n	80212e0 <__sflush_r+0x20>
 80212da:	2000      	movs	r0, #0
 80212dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80212e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80212e2:	2e00      	cmp	r6, #0
 80212e4:	d0f9      	beq.n	80212da <__sflush_r+0x1a>
 80212e6:	2300      	movs	r3, #0
 80212e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80212ec:	682f      	ldr	r7, [r5, #0]
 80212ee:	602b      	str	r3, [r5, #0]
 80212f0:	d032      	beq.n	8021358 <__sflush_r+0x98>
 80212f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80212f4:	89a3      	ldrh	r3, [r4, #12]
 80212f6:	075a      	lsls	r2, r3, #29
 80212f8:	d505      	bpl.n	8021306 <__sflush_r+0x46>
 80212fa:	6863      	ldr	r3, [r4, #4]
 80212fc:	1ac0      	subs	r0, r0, r3
 80212fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021300:	b10b      	cbz	r3, 8021306 <__sflush_r+0x46>
 8021302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021304:	1ac0      	subs	r0, r0, r3
 8021306:	2300      	movs	r3, #0
 8021308:	4602      	mov	r2, r0
 802130a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802130c:	6a21      	ldr	r1, [r4, #32]
 802130e:	4628      	mov	r0, r5
 8021310:	47b0      	blx	r6
 8021312:	1c43      	adds	r3, r0, #1
 8021314:	89a3      	ldrh	r3, [r4, #12]
 8021316:	d106      	bne.n	8021326 <__sflush_r+0x66>
 8021318:	6829      	ldr	r1, [r5, #0]
 802131a:	291d      	cmp	r1, #29
 802131c:	d82c      	bhi.n	8021378 <__sflush_r+0xb8>
 802131e:	4a2a      	ldr	r2, [pc, #168]	; (80213c8 <__sflush_r+0x108>)
 8021320:	40ca      	lsrs	r2, r1
 8021322:	07d6      	lsls	r6, r2, #31
 8021324:	d528      	bpl.n	8021378 <__sflush_r+0xb8>
 8021326:	2200      	movs	r2, #0
 8021328:	6062      	str	r2, [r4, #4]
 802132a:	04d9      	lsls	r1, r3, #19
 802132c:	6922      	ldr	r2, [r4, #16]
 802132e:	6022      	str	r2, [r4, #0]
 8021330:	d504      	bpl.n	802133c <__sflush_r+0x7c>
 8021332:	1c42      	adds	r2, r0, #1
 8021334:	d101      	bne.n	802133a <__sflush_r+0x7a>
 8021336:	682b      	ldr	r3, [r5, #0]
 8021338:	b903      	cbnz	r3, 802133c <__sflush_r+0x7c>
 802133a:	6560      	str	r0, [r4, #84]	; 0x54
 802133c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802133e:	602f      	str	r7, [r5, #0]
 8021340:	2900      	cmp	r1, #0
 8021342:	d0ca      	beq.n	80212da <__sflush_r+0x1a>
 8021344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021348:	4299      	cmp	r1, r3
 802134a:	d002      	beq.n	8021352 <__sflush_r+0x92>
 802134c:	4628      	mov	r0, r5
 802134e:	f7ff fc35 	bl	8020bbc <_free_r>
 8021352:	2000      	movs	r0, #0
 8021354:	6360      	str	r0, [r4, #52]	; 0x34
 8021356:	e7c1      	b.n	80212dc <__sflush_r+0x1c>
 8021358:	6a21      	ldr	r1, [r4, #32]
 802135a:	2301      	movs	r3, #1
 802135c:	4628      	mov	r0, r5
 802135e:	47b0      	blx	r6
 8021360:	1c41      	adds	r1, r0, #1
 8021362:	d1c7      	bne.n	80212f4 <__sflush_r+0x34>
 8021364:	682b      	ldr	r3, [r5, #0]
 8021366:	2b00      	cmp	r3, #0
 8021368:	d0c4      	beq.n	80212f4 <__sflush_r+0x34>
 802136a:	2b1d      	cmp	r3, #29
 802136c:	d001      	beq.n	8021372 <__sflush_r+0xb2>
 802136e:	2b16      	cmp	r3, #22
 8021370:	d101      	bne.n	8021376 <__sflush_r+0xb6>
 8021372:	602f      	str	r7, [r5, #0]
 8021374:	e7b1      	b.n	80212da <__sflush_r+0x1a>
 8021376:	89a3      	ldrh	r3, [r4, #12]
 8021378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802137c:	81a3      	strh	r3, [r4, #12]
 802137e:	e7ad      	b.n	80212dc <__sflush_r+0x1c>
 8021380:	690f      	ldr	r7, [r1, #16]
 8021382:	2f00      	cmp	r7, #0
 8021384:	d0a9      	beq.n	80212da <__sflush_r+0x1a>
 8021386:	0793      	lsls	r3, r2, #30
 8021388:	680e      	ldr	r6, [r1, #0]
 802138a:	bf08      	it	eq
 802138c:	694b      	ldreq	r3, [r1, #20]
 802138e:	600f      	str	r7, [r1, #0]
 8021390:	bf18      	it	ne
 8021392:	2300      	movne	r3, #0
 8021394:	eba6 0807 	sub.w	r8, r6, r7
 8021398:	608b      	str	r3, [r1, #8]
 802139a:	f1b8 0f00 	cmp.w	r8, #0
 802139e:	dd9c      	ble.n	80212da <__sflush_r+0x1a>
 80213a0:	6a21      	ldr	r1, [r4, #32]
 80213a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80213a4:	4643      	mov	r3, r8
 80213a6:	463a      	mov	r2, r7
 80213a8:	4628      	mov	r0, r5
 80213aa:	47b0      	blx	r6
 80213ac:	2800      	cmp	r0, #0
 80213ae:	dc06      	bgt.n	80213be <__sflush_r+0xfe>
 80213b0:	89a3      	ldrh	r3, [r4, #12]
 80213b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80213b6:	81a3      	strh	r3, [r4, #12]
 80213b8:	f04f 30ff 	mov.w	r0, #4294967295
 80213bc:	e78e      	b.n	80212dc <__sflush_r+0x1c>
 80213be:	4407      	add	r7, r0
 80213c0:	eba8 0800 	sub.w	r8, r8, r0
 80213c4:	e7e9      	b.n	802139a <__sflush_r+0xda>
 80213c6:	bf00      	nop
 80213c8:	20400001 	.word	0x20400001

080213cc <_fflush_r>:
 80213cc:	b538      	push	{r3, r4, r5, lr}
 80213ce:	690b      	ldr	r3, [r1, #16]
 80213d0:	4605      	mov	r5, r0
 80213d2:	460c      	mov	r4, r1
 80213d4:	b913      	cbnz	r3, 80213dc <_fflush_r+0x10>
 80213d6:	2500      	movs	r5, #0
 80213d8:	4628      	mov	r0, r5
 80213da:	bd38      	pop	{r3, r4, r5, pc}
 80213dc:	b118      	cbz	r0, 80213e6 <_fflush_r+0x1a>
 80213de:	6983      	ldr	r3, [r0, #24]
 80213e0:	b90b      	cbnz	r3, 80213e6 <_fflush_r+0x1a>
 80213e2:	f7fe fae5 	bl	801f9b0 <__sinit>
 80213e6:	4b14      	ldr	r3, [pc, #80]	; (8021438 <_fflush_r+0x6c>)
 80213e8:	429c      	cmp	r4, r3
 80213ea:	d11b      	bne.n	8021424 <_fflush_r+0x58>
 80213ec:	686c      	ldr	r4, [r5, #4]
 80213ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	d0ef      	beq.n	80213d6 <_fflush_r+0xa>
 80213f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80213f8:	07d0      	lsls	r0, r2, #31
 80213fa:	d404      	bmi.n	8021406 <_fflush_r+0x3a>
 80213fc:	0599      	lsls	r1, r3, #22
 80213fe:	d402      	bmi.n	8021406 <_fflush_r+0x3a>
 8021400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021402:	f7fe fee6 	bl	80201d2 <__retarget_lock_acquire_recursive>
 8021406:	4628      	mov	r0, r5
 8021408:	4621      	mov	r1, r4
 802140a:	f7ff ff59 	bl	80212c0 <__sflush_r>
 802140e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021410:	07da      	lsls	r2, r3, #31
 8021412:	4605      	mov	r5, r0
 8021414:	d4e0      	bmi.n	80213d8 <_fflush_r+0xc>
 8021416:	89a3      	ldrh	r3, [r4, #12]
 8021418:	059b      	lsls	r3, r3, #22
 802141a:	d4dd      	bmi.n	80213d8 <_fflush_r+0xc>
 802141c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802141e:	f7fe fed9 	bl	80201d4 <__retarget_lock_release_recursive>
 8021422:	e7d9      	b.n	80213d8 <_fflush_r+0xc>
 8021424:	4b05      	ldr	r3, [pc, #20]	; (802143c <_fflush_r+0x70>)
 8021426:	429c      	cmp	r4, r3
 8021428:	d101      	bne.n	802142e <_fflush_r+0x62>
 802142a:	68ac      	ldr	r4, [r5, #8]
 802142c:	e7df      	b.n	80213ee <_fflush_r+0x22>
 802142e:	4b04      	ldr	r3, [pc, #16]	; (8021440 <_fflush_r+0x74>)
 8021430:	429c      	cmp	r4, r3
 8021432:	bf08      	it	eq
 8021434:	68ec      	ldreq	r4, [r5, #12]
 8021436:	e7da      	b.n	80213ee <_fflush_r+0x22>
 8021438:	0802b768 	.word	0x0802b768
 802143c:	0802b788 	.word	0x0802b788
 8021440:	0802b748 	.word	0x0802b748

08021444 <fiprintf>:
 8021444:	b40e      	push	{r1, r2, r3}
 8021446:	b503      	push	{r0, r1, lr}
 8021448:	4601      	mov	r1, r0
 802144a:	ab03      	add	r3, sp, #12
 802144c:	4805      	ldr	r0, [pc, #20]	; (8021464 <fiprintf+0x20>)
 802144e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021452:	6800      	ldr	r0, [r0, #0]
 8021454:	9301      	str	r3, [sp, #4]
 8021456:	f000 f8f3 	bl	8021640 <_vfiprintf_r>
 802145a:	b002      	add	sp, #8
 802145c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021460:	b003      	add	sp, #12
 8021462:	4770      	bx	lr
 8021464:	200006e4 	.word	0x200006e4

08021468 <_lseek_r>:
 8021468:	b538      	push	{r3, r4, r5, lr}
 802146a:	4d07      	ldr	r5, [pc, #28]	; (8021488 <_lseek_r+0x20>)
 802146c:	4604      	mov	r4, r0
 802146e:	4608      	mov	r0, r1
 8021470:	4611      	mov	r1, r2
 8021472:	2200      	movs	r2, #0
 8021474:	602a      	str	r2, [r5, #0]
 8021476:	461a      	mov	r2, r3
 8021478:	f7e6 f92a 	bl	80076d0 <_lseek>
 802147c:	1c43      	adds	r3, r0, #1
 802147e:	d102      	bne.n	8021486 <_lseek_r+0x1e>
 8021480:	682b      	ldr	r3, [r5, #0]
 8021482:	b103      	cbz	r3, 8021486 <_lseek_r+0x1e>
 8021484:	6023      	str	r3, [r4, #0]
 8021486:	bd38      	pop	{r3, r4, r5, pc}
 8021488:	2000a110 	.word	0x2000a110

0802148c <__swhatbuf_r>:
 802148c:	b570      	push	{r4, r5, r6, lr}
 802148e:	460e      	mov	r6, r1
 8021490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021494:	2900      	cmp	r1, #0
 8021496:	b096      	sub	sp, #88	; 0x58
 8021498:	4614      	mov	r4, r2
 802149a:	461d      	mov	r5, r3
 802149c:	da07      	bge.n	80214ae <__swhatbuf_r+0x22>
 802149e:	2300      	movs	r3, #0
 80214a0:	602b      	str	r3, [r5, #0]
 80214a2:	89b3      	ldrh	r3, [r6, #12]
 80214a4:	061a      	lsls	r2, r3, #24
 80214a6:	d410      	bmi.n	80214ca <__swhatbuf_r+0x3e>
 80214a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80214ac:	e00e      	b.n	80214cc <__swhatbuf_r+0x40>
 80214ae:	466a      	mov	r2, sp
 80214b0:	f000 fa10 	bl	80218d4 <_fstat_r>
 80214b4:	2800      	cmp	r0, #0
 80214b6:	dbf2      	blt.n	802149e <__swhatbuf_r+0x12>
 80214b8:	9a01      	ldr	r2, [sp, #4]
 80214ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80214be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80214c2:	425a      	negs	r2, r3
 80214c4:	415a      	adcs	r2, r3
 80214c6:	602a      	str	r2, [r5, #0]
 80214c8:	e7ee      	b.n	80214a8 <__swhatbuf_r+0x1c>
 80214ca:	2340      	movs	r3, #64	; 0x40
 80214cc:	2000      	movs	r0, #0
 80214ce:	6023      	str	r3, [r4, #0]
 80214d0:	b016      	add	sp, #88	; 0x58
 80214d2:	bd70      	pop	{r4, r5, r6, pc}

080214d4 <__smakebuf_r>:
 80214d4:	898b      	ldrh	r3, [r1, #12]
 80214d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80214d8:	079d      	lsls	r5, r3, #30
 80214da:	4606      	mov	r6, r0
 80214dc:	460c      	mov	r4, r1
 80214de:	d507      	bpl.n	80214f0 <__smakebuf_r+0x1c>
 80214e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80214e4:	6023      	str	r3, [r4, #0]
 80214e6:	6123      	str	r3, [r4, #16]
 80214e8:	2301      	movs	r3, #1
 80214ea:	6163      	str	r3, [r4, #20]
 80214ec:	b002      	add	sp, #8
 80214ee:	bd70      	pop	{r4, r5, r6, pc}
 80214f0:	ab01      	add	r3, sp, #4
 80214f2:	466a      	mov	r2, sp
 80214f4:	f7ff ffca 	bl	802148c <__swhatbuf_r>
 80214f8:	9900      	ldr	r1, [sp, #0]
 80214fa:	4605      	mov	r5, r0
 80214fc:	4630      	mov	r0, r6
 80214fe:	f7ff fbad 	bl	8020c5c <_malloc_r>
 8021502:	b948      	cbnz	r0, 8021518 <__smakebuf_r+0x44>
 8021504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021508:	059a      	lsls	r2, r3, #22
 802150a:	d4ef      	bmi.n	80214ec <__smakebuf_r+0x18>
 802150c:	f023 0303 	bic.w	r3, r3, #3
 8021510:	f043 0302 	orr.w	r3, r3, #2
 8021514:	81a3      	strh	r3, [r4, #12]
 8021516:	e7e3      	b.n	80214e0 <__smakebuf_r+0xc>
 8021518:	4b0d      	ldr	r3, [pc, #52]	; (8021550 <__smakebuf_r+0x7c>)
 802151a:	62b3      	str	r3, [r6, #40]	; 0x28
 802151c:	89a3      	ldrh	r3, [r4, #12]
 802151e:	6020      	str	r0, [r4, #0]
 8021520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021524:	81a3      	strh	r3, [r4, #12]
 8021526:	9b00      	ldr	r3, [sp, #0]
 8021528:	6163      	str	r3, [r4, #20]
 802152a:	9b01      	ldr	r3, [sp, #4]
 802152c:	6120      	str	r0, [r4, #16]
 802152e:	b15b      	cbz	r3, 8021548 <__smakebuf_r+0x74>
 8021530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021534:	4630      	mov	r0, r6
 8021536:	f000 f9df 	bl	80218f8 <_isatty_r>
 802153a:	b128      	cbz	r0, 8021548 <__smakebuf_r+0x74>
 802153c:	89a3      	ldrh	r3, [r4, #12]
 802153e:	f023 0303 	bic.w	r3, r3, #3
 8021542:	f043 0301 	orr.w	r3, r3, #1
 8021546:	81a3      	strh	r3, [r4, #12]
 8021548:	89a0      	ldrh	r0, [r4, #12]
 802154a:	4305      	orrs	r5, r0
 802154c:	81a5      	strh	r5, [r4, #12]
 802154e:	e7cd      	b.n	80214ec <__smakebuf_r+0x18>
 8021550:	0801f949 	.word	0x0801f949

08021554 <memmove>:
 8021554:	4288      	cmp	r0, r1
 8021556:	b510      	push	{r4, lr}
 8021558:	eb01 0402 	add.w	r4, r1, r2
 802155c:	d902      	bls.n	8021564 <memmove+0x10>
 802155e:	4284      	cmp	r4, r0
 8021560:	4623      	mov	r3, r4
 8021562:	d807      	bhi.n	8021574 <memmove+0x20>
 8021564:	1e43      	subs	r3, r0, #1
 8021566:	42a1      	cmp	r1, r4
 8021568:	d008      	beq.n	802157c <memmove+0x28>
 802156a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802156e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021572:	e7f8      	b.n	8021566 <memmove+0x12>
 8021574:	4402      	add	r2, r0
 8021576:	4601      	mov	r1, r0
 8021578:	428a      	cmp	r2, r1
 802157a:	d100      	bne.n	802157e <memmove+0x2a>
 802157c:	bd10      	pop	{r4, pc}
 802157e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021586:	e7f7      	b.n	8021578 <memmove+0x24>

08021588 <__malloc_lock>:
 8021588:	4801      	ldr	r0, [pc, #4]	; (8021590 <__malloc_lock+0x8>)
 802158a:	f7fe be22 	b.w	80201d2 <__retarget_lock_acquire_recursive>
 802158e:	bf00      	nop
 8021590:	2000a104 	.word	0x2000a104

08021594 <__malloc_unlock>:
 8021594:	4801      	ldr	r0, [pc, #4]	; (802159c <__malloc_unlock+0x8>)
 8021596:	f7fe be1d 	b.w	80201d4 <__retarget_lock_release_recursive>
 802159a:	bf00      	nop
 802159c:	2000a104 	.word	0x2000a104

080215a0 <_realloc_r>:
 80215a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215a2:	4607      	mov	r7, r0
 80215a4:	4614      	mov	r4, r2
 80215a6:	460e      	mov	r6, r1
 80215a8:	b921      	cbnz	r1, 80215b4 <_realloc_r+0x14>
 80215aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80215ae:	4611      	mov	r1, r2
 80215b0:	f7ff bb54 	b.w	8020c5c <_malloc_r>
 80215b4:	b922      	cbnz	r2, 80215c0 <_realloc_r+0x20>
 80215b6:	f7ff fb01 	bl	8020bbc <_free_r>
 80215ba:	4625      	mov	r5, r4
 80215bc:	4628      	mov	r0, r5
 80215be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80215c0:	f000 f9aa 	bl	8021918 <_malloc_usable_size_r>
 80215c4:	42a0      	cmp	r0, r4
 80215c6:	d20f      	bcs.n	80215e8 <_realloc_r+0x48>
 80215c8:	4621      	mov	r1, r4
 80215ca:	4638      	mov	r0, r7
 80215cc:	f7ff fb46 	bl	8020c5c <_malloc_r>
 80215d0:	4605      	mov	r5, r0
 80215d2:	2800      	cmp	r0, #0
 80215d4:	d0f2      	beq.n	80215bc <_realloc_r+0x1c>
 80215d6:	4631      	mov	r1, r6
 80215d8:	4622      	mov	r2, r4
 80215da:	f7fe fe17 	bl	802020c <memcpy>
 80215de:	4631      	mov	r1, r6
 80215e0:	4638      	mov	r0, r7
 80215e2:	f7ff faeb 	bl	8020bbc <_free_r>
 80215e6:	e7e9      	b.n	80215bc <_realloc_r+0x1c>
 80215e8:	4635      	mov	r5, r6
 80215ea:	e7e7      	b.n	80215bc <_realloc_r+0x1c>

080215ec <__sfputc_r>:
 80215ec:	6893      	ldr	r3, [r2, #8]
 80215ee:	3b01      	subs	r3, #1
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	b410      	push	{r4}
 80215f4:	6093      	str	r3, [r2, #8]
 80215f6:	da08      	bge.n	802160a <__sfputc_r+0x1e>
 80215f8:	6994      	ldr	r4, [r2, #24]
 80215fa:	42a3      	cmp	r3, r4
 80215fc:	db01      	blt.n	8021602 <__sfputc_r+0x16>
 80215fe:	290a      	cmp	r1, #10
 8021600:	d103      	bne.n	802160a <__sfputc_r+0x1e>
 8021602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021606:	f7ff bd4d 	b.w	80210a4 <__swbuf_r>
 802160a:	6813      	ldr	r3, [r2, #0]
 802160c:	1c58      	adds	r0, r3, #1
 802160e:	6010      	str	r0, [r2, #0]
 8021610:	7019      	strb	r1, [r3, #0]
 8021612:	4608      	mov	r0, r1
 8021614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021618:	4770      	bx	lr

0802161a <__sfputs_r>:
 802161a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802161c:	4606      	mov	r6, r0
 802161e:	460f      	mov	r7, r1
 8021620:	4614      	mov	r4, r2
 8021622:	18d5      	adds	r5, r2, r3
 8021624:	42ac      	cmp	r4, r5
 8021626:	d101      	bne.n	802162c <__sfputs_r+0x12>
 8021628:	2000      	movs	r0, #0
 802162a:	e007      	b.n	802163c <__sfputs_r+0x22>
 802162c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021630:	463a      	mov	r2, r7
 8021632:	4630      	mov	r0, r6
 8021634:	f7ff ffda 	bl	80215ec <__sfputc_r>
 8021638:	1c43      	adds	r3, r0, #1
 802163a:	d1f3      	bne.n	8021624 <__sfputs_r+0xa>
 802163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021640 <_vfiprintf_r>:
 8021640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021644:	460d      	mov	r5, r1
 8021646:	b09d      	sub	sp, #116	; 0x74
 8021648:	4614      	mov	r4, r2
 802164a:	4698      	mov	r8, r3
 802164c:	4606      	mov	r6, r0
 802164e:	b118      	cbz	r0, 8021658 <_vfiprintf_r+0x18>
 8021650:	6983      	ldr	r3, [r0, #24]
 8021652:	b90b      	cbnz	r3, 8021658 <_vfiprintf_r+0x18>
 8021654:	f7fe f9ac 	bl	801f9b0 <__sinit>
 8021658:	4b89      	ldr	r3, [pc, #548]	; (8021880 <_vfiprintf_r+0x240>)
 802165a:	429d      	cmp	r5, r3
 802165c:	d11b      	bne.n	8021696 <_vfiprintf_r+0x56>
 802165e:	6875      	ldr	r5, [r6, #4]
 8021660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021662:	07d9      	lsls	r1, r3, #31
 8021664:	d405      	bmi.n	8021672 <_vfiprintf_r+0x32>
 8021666:	89ab      	ldrh	r3, [r5, #12]
 8021668:	059a      	lsls	r2, r3, #22
 802166a:	d402      	bmi.n	8021672 <_vfiprintf_r+0x32>
 802166c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802166e:	f7fe fdb0 	bl	80201d2 <__retarget_lock_acquire_recursive>
 8021672:	89ab      	ldrh	r3, [r5, #12]
 8021674:	071b      	lsls	r3, r3, #28
 8021676:	d501      	bpl.n	802167c <_vfiprintf_r+0x3c>
 8021678:	692b      	ldr	r3, [r5, #16]
 802167a:	b9eb      	cbnz	r3, 80216b8 <_vfiprintf_r+0x78>
 802167c:	4629      	mov	r1, r5
 802167e:	4630      	mov	r0, r6
 8021680:	f7ff fd82 	bl	8021188 <__swsetup_r>
 8021684:	b1c0      	cbz	r0, 80216b8 <_vfiprintf_r+0x78>
 8021686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021688:	07dc      	lsls	r4, r3, #31
 802168a:	d50e      	bpl.n	80216aa <_vfiprintf_r+0x6a>
 802168c:	f04f 30ff 	mov.w	r0, #4294967295
 8021690:	b01d      	add	sp, #116	; 0x74
 8021692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021696:	4b7b      	ldr	r3, [pc, #492]	; (8021884 <_vfiprintf_r+0x244>)
 8021698:	429d      	cmp	r5, r3
 802169a:	d101      	bne.n	80216a0 <_vfiprintf_r+0x60>
 802169c:	68b5      	ldr	r5, [r6, #8]
 802169e:	e7df      	b.n	8021660 <_vfiprintf_r+0x20>
 80216a0:	4b79      	ldr	r3, [pc, #484]	; (8021888 <_vfiprintf_r+0x248>)
 80216a2:	429d      	cmp	r5, r3
 80216a4:	bf08      	it	eq
 80216a6:	68f5      	ldreq	r5, [r6, #12]
 80216a8:	e7da      	b.n	8021660 <_vfiprintf_r+0x20>
 80216aa:	89ab      	ldrh	r3, [r5, #12]
 80216ac:	0598      	lsls	r0, r3, #22
 80216ae:	d4ed      	bmi.n	802168c <_vfiprintf_r+0x4c>
 80216b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80216b2:	f7fe fd8f 	bl	80201d4 <__retarget_lock_release_recursive>
 80216b6:	e7e9      	b.n	802168c <_vfiprintf_r+0x4c>
 80216b8:	2300      	movs	r3, #0
 80216ba:	9309      	str	r3, [sp, #36]	; 0x24
 80216bc:	2320      	movs	r3, #32
 80216be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80216c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80216c6:	2330      	movs	r3, #48	; 0x30
 80216c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802188c <_vfiprintf_r+0x24c>
 80216cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80216d0:	f04f 0901 	mov.w	r9, #1
 80216d4:	4623      	mov	r3, r4
 80216d6:	469a      	mov	sl, r3
 80216d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80216dc:	b10a      	cbz	r2, 80216e2 <_vfiprintf_r+0xa2>
 80216de:	2a25      	cmp	r2, #37	; 0x25
 80216e0:	d1f9      	bne.n	80216d6 <_vfiprintf_r+0x96>
 80216e2:	ebba 0b04 	subs.w	fp, sl, r4
 80216e6:	d00b      	beq.n	8021700 <_vfiprintf_r+0xc0>
 80216e8:	465b      	mov	r3, fp
 80216ea:	4622      	mov	r2, r4
 80216ec:	4629      	mov	r1, r5
 80216ee:	4630      	mov	r0, r6
 80216f0:	f7ff ff93 	bl	802161a <__sfputs_r>
 80216f4:	3001      	adds	r0, #1
 80216f6:	f000 80aa 	beq.w	802184e <_vfiprintf_r+0x20e>
 80216fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80216fc:	445a      	add	r2, fp
 80216fe:	9209      	str	r2, [sp, #36]	; 0x24
 8021700:	f89a 3000 	ldrb.w	r3, [sl]
 8021704:	2b00      	cmp	r3, #0
 8021706:	f000 80a2 	beq.w	802184e <_vfiprintf_r+0x20e>
 802170a:	2300      	movs	r3, #0
 802170c:	f04f 32ff 	mov.w	r2, #4294967295
 8021710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021714:	f10a 0a01 	add.w	sl, sl, #1
 8021718:	9304      	str	r3, [sp, #16]
 802171a:	9307      	str	r3, [sp, #28]
 802171c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021720:	931a      	str	r3, [sp, #104]	; 0x68
 8021722:	4654      	mov	r4, sl
 8021724:	2205      	movs	r2, #5
 8021726:	f814 1b01 	ldrb.w	r1, [r4], #1
 802172a:	4858      	ldr	r0, [pc, #352]	; (802188c <_vfiprintf_r+0x24c>)
 802172c:	f7de fd68 	bl	8000200 <memchr>
 8021730:	9a04      	ldr	r2, [sp, #16]
 8021732:	b9d8      	cbnz	r0, 802176c <_vfiprintf_r+0x12c>
 8021734:	06d1      	lsls	r1, r2, #27
 8021736:	bf44      	itt	mi
 8021738:	2320      	movmi	r3, #32
 802173a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802173e:	0713      	lsls	r3, r2, #28
 8021740:	bf44      	itt	mi
 8021742:	232b      	movmi	r3, #43	; 0x2b
 8021744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021748:	f89a 3000 	ldrb.w	r3, [sl]
 802174c:	2b2a      	cmp	r3, #42	; 0x2a
 802174e:	d015      	beq.n	802177c <_vfiprintf_r+0x13c>
 8021750:	9a07      	ldr	r2, [sp, #28]
 8021752:	4654      	mov	r4, sl
 8021754:	2000      	movs	r0, #0
 8021756:	f04f 0c0a 	mov.w	ip, #10
 802175a:	4621      	mov	r1, r4
 802175c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021760:	3b30      	subs	r3, #48	; 0x30
 8021762:	2b09      	cmp	r3, #9
 8021764:	d94e      	bls.n	8021804 <_vfiprintf_r+0x1c4>
 8021766:	b1b0      	cbz	r0, 8021796 <_vfiprintf_r+0x156>
 8021768:	9207      	str	r2, [sp, #28]
 802176a:	e014      	b.n	8021796 <_vfiprintf_r+0x156>
 802176c:	eba0 0308 	sub.w	r3, r0, r8
 8021770:	fa09 f303 	lsl.w	r3, r9, r3
 8021774:	4313      	orrs	r3, r2
 8021776:	9304      	str	r3, [sp, #16]
 8021778:	46a2      	mov	sl, r4
 802177a:	e7d2      	b.n	8021722 <_vfiprintf_r+0xe2>
 802177c:	9b03      	ldr	r3, [sp, #12]
 802177e:	1d19      	adds	r1, r3, #4
 8021780:	681b      	ldr	r3, [r3, #0]
 8021782:	9103      	str	r1, [sp, #12]
 8021784:	2b00      	cmp	r3, #0
 8021786:	bfbb      	ittet	lt
 8021788:	425b      	neglt	r3, r3
 802178a:	f042 0202 	orrlt.w	r2, r2, #2
 802178e:	9307      	strge	r3, [sp, #28]
 8021790:	9307      	strlt	r3, [sp, #28]
 8021792:	bfb8      	it	lt
 8021794:	9204      	strlt	r2, [sp, #16]
 8021796:	7823      	ldrb	r3, [r4, #0]
 8021798:	2b2e      	cmp	r3, #46	; 0x2e
 802179a:	d10c      	bne.n	80217b6 <_vfiprintf_r+0x176>
 802179c:	7863      	ldrb	r3, [r4, #1]
 802179e:	2b2a      	cmp	r3, #42	; 0x2a
 80217a0:	d135      	bne.n	802180e <_vfiprintf_r+0x1ce>
 80217a2:	9b03      	ldr	r3, [sp, #12]
 80217a4:	1d1a      	adds	r2, r3, #4
 80217a6:	681b      	ldr	r3, [r3, #0]
 80217a8:	9203      	str	r2, [sp, #12]
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	bfb8      	it	lt
 80217ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80217b2:	3402      	adds	r4, #2
 80217b4:	9305      	str	r3, [sp, #20]
 80217b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802189c <_vfiprintf_r+0x25c>
 80217ba:	7821      	ldrb	r1, [r4, #0]
 80217bc:	2203      	movs	r2, #3
 80217be:	4650      	mov	r0, sl
 80217c0:	f7de fd1e 	bl	8000200 <memchr>
 80217c4:	b140      	cbz	r0, 80217d8 <_vfiprintf_r+0x198>
 80217c6:	2340      	movs	r3, #64	; 0x40
 80217c8:	eba0 000a 	sub.w	r0, r0, sl
 80217cc:	fa03 f000 	lsl.w	r0, r3, r0
 80217d0:	9b04      	ldr	r3, [sp, #16]
 80217d2:	4303      	orrs	r3, r0
 80217d4:	3401      	adds	r4, #1
 80217d6:	9304      	str	r3, [sp, #16]
 80217d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80217dc:	482c      	ldr	r0, [pc, #176]	; (8021890 <_vfiprintf_r+0x250>)
 80217de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80217e2:	2206      	movs	r2, #6
 80217e4:	f7de fd0c 	bl	8000200 <memchr>
 80217e8:	2800      	cmp	r0, #0
 80217ea:	d03f      	beq.n	802186c <_vfiprintf_r+0x22c>
 80217ec:	4b29      	ldr	r3, [pc, #164]	; (8021894 <_vfiprintf_r+0x254>)
 80217ee:	bb1b      	cbnz	r3, 8021838 <_vfiprintf_r+0x1f8>
 80217f0:	9b03      	ldr	r3, [sp, #12]
 80217f2:	3307      	adds	r3, #7
 80217f4:	f023 0307 	bic.w	r3, r3, #7
 80217f8:	3308      	adds	r3, #8
 80217fa:	9303      	str	r3, [sp, #12]
 80217fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217fe:	443b      	add	r3, r7
 8021800:	9309      	str	r3, [sp, #36]	; 0x24
 8021802:	e767      	b.n	80216d4 <_vfiprintf_r+0x94>
 8021804:	fb0c 3202 	mla	r2, ip, r2, r3
 8021808:	460c      	mov	r4, r1
 802180a:	2001      	movs	r0, #1
 802180c:	e7a5      	b.n	802175a <_vfiprintf_r+0x11a>
 802180e:	2300      	movs	r3, #0
 8021810:	3401      	adds	r4, #1
 8021812:	9305      	str	r3, [sp, #20]
 8021814:	4619      	mov	r1, r3
 8021816:	f04f 0c0a 	mov.w	ip, #10
 802181a:	4620      	mov	r0, r4
 802181c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021820:	3a30      	subs	r2, #48	; 0x30
 8021822:	2a09      	cmp	r2, #9
 8021824:	d903      	bls.n	802182e <_vfiprintf_r+0x1ee>
 8021826:	2b00      	cmp	r3, #0
 8021828:	d0c5      	beq.n	80217b6 <_vfiprintf_r+0x176>
 802182a:	9105      	str	r1, [sp, #20]
 802182c:	e7c3      	b.n	80217b6 <_vfiprintf_r+0x176>
 802182e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021832:	4604      	mov	r4, r0
 8021834:	2301      	movs	r3, #1
 8021836:	e7f0      	b.n	802181a <_vfiprintf_r+0x1da>
 8021838:	ab03      	add	r3, sp, #12
 802183a:	9300      	str	r3, [sp, #0]
 802183c:	462a      	mov	r2, r5
 802183e:	4b16      	ldr	r3, [pc, #88]	; (8021898 <_vfiprintf_r+0x258>)
 8021840:	a904      	add	r1, sp, #16
 8021842:	4630      	mov	r0, r6
 8021844:	f7fb fd1c 	bl	801d280 <_printf_float>
 8021848:	4607      	mov	r7, r0
 802184a:	1c78      	adds	r0, r7, #1
 802184c:	d1d6      	bne.n	80217fc <_vfiprintf_r+0x1bc>
 802184e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021850:	07d9      	lsls	r1, r3, #31
 8021852:	d405      	bmi.n	8021860 <_vfiprintf_r+0x220>
 8021854:	89ab      	ldrh	r3, [r5, #12]
 8021856:	059a      	lsls	r2, r3, #22
 8021858:	d402      	bmi.n	8021860 <_vfiprintf_r+0x220>
 802185a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802185c:	f7fe fcba 	bl	80201d4 <__retarget_lock_release_recursive>
 8021860:	89ab      	ldrh	r3, [r5, #12]
 8021862:	065b      	lsls	r3, r3, #25
 8021864:	f53f af12 	bmi.w	802168c <_vfiprintf_r+0x4c>
 8021868:	9809      	ldr	r0, [sp, #36]	; 0x24
 802186a:	e711      	b.n	8021690 <_vfiprintf_r+0x50>
 802186c:	ab03      	add	r3, sp, #12
 802186e:	9300      	str	r3, [sp, #0]
 8021870:	462a      	mov	r2, r5
 8021872:	4b09      	ldr	r3, [pc, #36]	; (8021898 <_vfiprintf_r+0x258>)
 8021874:	a904      	add	r1, sp, #16
 8021876:	4630      	mov	r0, r6
 8021878:	f7fb ffa6 	bl	801d7c8 <_printf_i>
 802187c:	e7e4      	b.n	8021848 <_vfiprintf_r+0x208>
 802187e:	bf00      	nop
 8021880:	0802b768 	.word	0x0802b768
 8021884:	0802b788 	.word	0x0802b788
 8021888:	0802b748 	.word	0x0802b748
 802188c:	0802b984 	.word	0x0802b984
 8021890:	0802b98e 	.word	0x0802b98e
 8021894:	0801d281 	.word	0x0801d281
 8021898:	0802161b 	.word	0x0802161b
 802189c:	0802b98a 	.word	0x0802b98a

080218a0 <_read_r>:
 80218a0:	b538      	push	{r3, r4, r5, lr}
 80218a2:	4d07      	ldr	r5, [pc, #28]	; (80218c0 <_read_r+0x20>)
 80218a4:	4604      	mov	r4, r0
 80218a6:	4608      	mov	r0, r1
 80218a8:	4611      	mov	r1, r2
 80218aa:	2200      	movs	r2, #0
 80218ac:	602a      	str	r2, [r5, #0]
 80218ae:	461a      	mov	r2, r3
 80218b0:	f7e5 feae 	bl	8007610 <_read>
 80218b4:	1c43      	adds	r3, r0, #1
 80218b6:	d102      	bne.n	80218be <_read_r+0x1e>
 80218b8:	682b      	ldr	r3, [r5, #0]
 80218ba:	b103      	cbz	r3, 80218be <_read_r+0x1e>
 80218bc:	6023      	str	r3, [r4, #0]
 80218be:	bd38      	pop	{r3, r4, r5, pc}
 80218c0:	2000a110 	.word	0x2000a110

080218c4 <abort>:
 80218c4:	b508      	push	{r3, lr}
 80218c6:	2006      	movs	r0, #6
 80218c8:	f000 f856 	bl	8021978 <raise>
 80218cc:	2001      	movs	r0, #1
 80218ce:	f7e5 fe95 	bl	80075fc <_exit>
	...

080218d4 <_fstat_r>:
 80218d4:	b538      	push	{r3, r4, r5, lr}
 80218d6:	4d07      	ldr	r5, [pc, #28]	; (80218f4 <_fstat_r+0x20>)
 80218d8:	2300      	movs	r3, #0
 80218da:	4604      	mov	r4, r0
 80218dc:	4608      	mov	r0, r1
 80218de:	4611      	mov	r1, r2
 80218e0:	602b      	str	r3, [r5, #0]
 80218e2:	f7e5 feda 	bl	800769a <_fstat>
 80218e6:	1c43      	adds	r3, r0, #1
 80218e8:	d102      	bne.n	80218f0 <_fstat_r+0x1c>
 80218ea:	682b      	ldr	r3, [r5, #0]
 80218ec:	b103      	cbz	r3, 80218f0 <_fstat_r+0x1c>
 80218ee:	6023      	str	r3, [r4, #0]
 80218f0:	bd38      	pop	{r3, r4, r5, pc}
 80218f2:	bf00      	nop
 80218f4:	2000a110 	.word	0x2000a110

080218f8 <_isatty_r>:
 80218f8:	b538      	push	{r3, r4, r5, lr}
 80218fa:	4d06      	ldr	r5, [pc, #24]	; (8021914 <_isatty_r+0x1c>)
 80218fc:	2300      	movs	r3, #0
 80218fe:	4604      	mov	r4, r0
 8021900:	4608      	mov	r0, r1
 8021902:	602b      	str	r3, [r5, #0]
 8021904:	f7e5 fed9 	bl	80076ba <_isatty>
 8021908:	1c43      	adds	r3, r0, #1
 802190a:	d102      	bne.n	8021912 <_isatty_r+0x1a>
 802190c:	682b      	ldr	r3, [r5, #0]
 802190e:	b103      	cbz	r3, 8021912 <_isatty_r+0x1a>
 8021910:	6023      	str	r3, [r4, #0]
 8021912:	bd38      	pop	{r3, r4, r5, pc}
 8021914:	2000a110 	.word	0x2000a110

08021918 <_malloc_usable_size_r>:
 8021918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802191c:	1f18      	subs	r0, r3, #4
 802191e:	2b00      	cmp	r3, #0
 8021920:	bfbc      	itt	lt
 8021922:	580b      	ldrlt	r3, [r1, r0]
 8021924:	18c0      	addlt	r0, r0, r3
 8021926:	4770      	bx	lr

08021928 <_raise_r>:
 8021928:	291f      	cmp	r1, #31
 802192a:	b538      	push	{r3, r4, r5, lr}
 802192c:	4604      	mov	r4, r0
 802192e:	460d      	mov	r5, r1
 8021930:	d904      	bls.n	802193c <_raise_r+0x14>
 8021932:	2316      	movs	r3, #22
 8021934:	6003      	str	r3, [r0, #0]
 8021936:	f04f 30ff 	mov.w	r0, #4294967295
 802193a:	bd38      	pop	{r3, r4, r5, pc}
 802193c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802193e:	b112      	cbz	r2, 8021946 <_raise_r+0x1e>
 8021940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021944:	b94b      	cbnz	r3, 802195a <_raise_r+0x32>
 8021946:	4620      	mov	r0, r4
 8021948:	f000 f830 	bl	80219ac <_getpid_r>
 802194c:	462a      	mov	r2, r5
 802194e:	4601      	mov	r1, r0
 8021950:	4620      	mov	r0, r4
 8021952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021956:	f000 b817 	b.w	8021988 <_kill_r>
 802195a:	2b01      	cmp	r3, #1
 802195c:	d00a      	beq.n	8021974 <_raise_r+0x4c>
 802195e:	1c59      	adds	r1, r3, #1
 8021960:	d103      	bne.n	802196a <_raise_r+0x42>
 8021962:	2316      	movs	r3, #22
 8021964:	6003      	str	r3, [r0, #0]
 8021966:	2001      	movs	r0, #1
 8021968:	e7e7      	b.n	802193a <_raise_r+0x12>
 802196a:	2400      	movs	r4, #0
 802196c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021970:	4628      	mov	r0, r5
 8021972:	4798      	blx	r3
 8021974:	2000      	movs	r0, #0
 8021976:	e7e0      	b.n	802193a <_raise_r+0x12>

08021978 <raise>:
 8021978:	4b02      	ldr	r3, [pc, #8]	; (8021984 <raise+0xc>)
 802197a:	4601      	mov	r1, r0
 802197c:	6818      	ldr	r0, [r3, #0]
 802197e:	f7ff bfd3 	b.w	8021928 <_raise_r>
 8021982:	bf00      	nop
 8021984:	200006e4 	.word	0x200006e4

08021988 <_kill_r>:
 8021988:	b538      	push	{r3, r4, r5, lr}
 802198a:	4d07      	ldr	r5, [pc, #28]	; (80219a8 <_kill_r+0x20>)
 802198c:	2300      	movs	r3, #0
 802198e:	4604      	mov	r4, r0
 8021990:	4608      	mov	r0, r1
 8021992:	4611      	mov	r1, r2
 8021994:	602b      	str	r3, [r5, #0]
 8021996:	f7e5 fe21 	bl	80075dc <_kill>
 802199a:	1c43      	adds	r3, r0, #1
 802199c:	d102      	bne.n	80219a4 <_kill_r+0x1c>
 802199e:	682b      	ldr	r3, [r5, #0]
 80219a0:	b103      	cbz	r3, 80219a4 <_kill_r+0x1c>
 80219a2:	6023      	str	r3, [r4, #0]
 80219a4:	bd38      	pop	{r3, r4, r5, pc}
 80219a6:	bf00      	nop
 80219a8:	2000a110 	.word	0x2000a110

080219ac <_getpid_r>:
 80219ac:	f7e5 be0e 	b.w	80075cc <_getpid>

080219b0 <sqrt>:
 80219b0:	b538      	push	{r3, r4, r5, lr}
 80219b2:	ed2d 8b02 	vpush	{d8}
 80219b6:	ec55 4b10 	vmov	r4, r5, d0
 80219ba:	f000 f82d 	bl	8021a18 <__ieee754_sqrt>
 80219be:	4b15      	ldr	r3, [pc, #84]	; (8021a14 <sqrt+0x64>)
 80219c0:	eeb0 8a40 	vmov.f32	s16, s0
 80219c4:	eef0 8a60 	vmov.f32	s17, s1
 80219c8:	f993 3000 	ldrsb.w	r3, [r3]
 80219cc:	3301      	adds	r3, #1
 80219ce:	d019      	beq.n	8021a04 <sqrt+0x54>
 80219d0:	4622      	mov	r2, r4
 80219d2:	462b      	mov	r3, r5
 80219d4:	4620      	mov	r0, r4
 80219d6:	4629      	mov	r1, r5
 80219d8:	f7df f8b8 	bl	8000b4c <__aeabi_dcmpun>
 80219dc:	b990      	cbnz	r0, 8021a04 <sqrt+0x54>
 80219de:	2200      	movs	r2, #0
 80219e0:	2300      	movs	r3, #0
 80219e2:	4620      	mov	r0, r4
 80219e4:	4629      	mov	r1, r5
 80219e6:	f7df f889 	bl	8000afc <__aeabi_dcmplt>
 80219ea:	b158      	cbz	r0, 8021a04 <sqrt+0x54>
 80219ec:	f7fb fb76 	bl	801d0dc <__errno>
 80219f0:	2321      	movs	r3, #33	; 0x21
 80219f2:	6003      	str	r3, [r0, #0]
 80219f4:	2200      	movs	r2, #0
 80219f6:	2300      	movs	r3, #0
 80219f8:	4610      	mov	r0, r2
 80219fa:	4619      	mov	r1, r3
 80219fc:	f7de ff36 	bl	800086c <__aeabi_ddiv>
 8021a00:	ec41 0b18 	vmov	d8, r0, r1
 8021a04:	eeb0 0a48 	vmov.f32	s0, s16
 8021a08:	eef0 0a68 	vmov.f32	s1, s17
 8021a0c:	ecbd 8b02 	vpop	{d8}
 8021a10:	bd38      	pop	{r3, r4, r5, pc}
 8021a12:	bf00      	nop
 8021a14:	200008b8 	.word	0x200008b8

08021a18 <__ieee754_sqrt>:
 8021a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a1c:	ec55 4b10 	vmov	r4, r5, d0
 8021a20:	4e56      	ldr	r6, [pc, #344]	; (8021b7c <__ieee754_sqrt+0x164>)
 8021a22:	43ae      	bics	r6, r5
 8021a24:	ee10 0a10 	vmov	r0, s0
 8021a28:	ee10 3a10 	vmov	r3, s0
 8021a2c:	4629      	mov	r1, r5
 8021a2e:	462a      	mov	r2, r5
 8021a30:	d110      	bne.n	8021a54 <__ieee754_sqrt+0x3c>
 8021a32:	ee10 2a10 	vmov	r2, s0
 8021a36:	462b      	mov	r3, r5
 8021a38:	f7de fdee 	bl	8000618 <__aeabi_dmul>
 8021a3c:	4602      	mov	r2, r0
 8021a3e:	460b      	mov	r3, r1
 8021a40:	4620      	mov	r0, r4
 8021a42:	4629      	mov	r1, r5
 8021a44:	f7de fc32 	bl	80002ac <__adddf3>
 8021a48:	4604      	mov	r4, r0
 8021a4a:	460d      	mov	r5, r1
 8021a4c:	ec45 4b10 	vmov	d0, r4, r5
 8021a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a54:	2d00      	cmp	r5, #0
 8021a56:	dc10      	bgt.n	8021a7a <__ieee754_sqrt+0x62>
 8021a58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021a5c:	4330      	orrs	r0, r6
 8021a5e:	d0f5      	beq.n	8021a4c <__ieee754_sqrt+0x34>
 8021a60:	b15d      	cbz	r5, 8021a7a <__ieee754_sqrt+0x62>
 8021a62:	ee10 2a10 	vmov	r2, s0
 8021a66:	462b      	mov	r3, r5
 8021a68:	ee10 0a10 	vmov	r0, s0
 8021a6c:	f7de fc1c 	bl	80002a8 <__aeabi_dsub>
 8021a70:	4602      	mov	r2, r0
 8021a72:	460b      	mov	r3, r1
 8021a74:	f7de fefa 	bl	800086c <__aeabi_ddiv>
 8021a78:	e7e6      	b.n	8021a48 <__ieee754_sqrt+0x30>
 8021a7a:	1509      	asrs	r1, r1, #20
 8021a7c:	d076      	beq.n	8021b6c <__ieee754_sqrt+0x154>
 8021a7e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021a82:	07ce      	lsls	r6, r1, #31
 8021a84:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8021a88:	bf5e      	ittt	pl
 8021a8a:	0fda      	lsrpl	r2, r3, #31
 8021a8c:	005b      	lslpl	r3, r3, #1
 8021a8e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8021a92:	0fda      	lsrs	r2, r3, #31
 8021a94:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8021a98:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021a9c:	2000      	movs	r0, #0
 8021a9e:	106d      	asrs	r5, r5, #1
 8021aa0:	005b      	lsls	r3, r3, #1
 8021aa2:	f04f 0e16 	mov.w	lr, #22
 8021aa6:	4684      	mov	ip, r0
 8021aa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021aac:	eb0c 0401 	add.w	r4, ip, r1
 8021ab0:	4294      	cmp	r4, r2
 8021ab2:	bfde      	ittt	le
 8021ab4:	1b12      	suble	r2, r2, r4
 8021ab6:	eb04 0c01 	addle.w	ip, r4, r1
 8021aba:	1840      	addle	r0, r0, r1
 8021abc:	0052      	lsls	r2, r2, #1
 8021abe:	f1be 0e01 	subs.w	lr, lr, #1
 8021ac2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021ac6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021aca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021ace:	d1ed      	bne.n	8021aac <__ieee754_sqrt+0x94>
 8021ad0:	4671      	mov	r1, lr
 8021ad2:	2720      	movs	r7, #32
 8021ad4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021ad8:	4562      	cmp	r2, ip
 8021ada:	eb04 060e 	add.w	r6, r4, lr
 8021ade:	dc02      	bgt.n	8021ae6 <__ieee754_sqrt+0xce>
 8021ae0:	d113      	bne.n	8021b0a <__ieee754_sqrt+0xf2>
 8021ae2:	429e      	cmp	r6, r3
 8021ae4:	d811      	bhi.n	8021b0a <__ieee754_sqrt+0xf2>
 8021ae6:	2e00      	cmp	r6, #0
 8021ae8:	eb06 0e04 	add.w	lr, r6, r4
 8021aec:	da43      	bge.n	8021b76 <__ieee754_sqrt+0x15e>
 8021aee:	f1be 0f00 	cmp.w	lr, #0
 8021af2:	db40      	blt.n	8021b76 <__ieee754_sqrt+0x15e>
 8021af4:	f10c 0801 	add.w	r8, ip, #1
 8021af8:	eba2 020c 	sub.w	r2, r2, ip
 8021afc:	429e      	cmp	r6, r3
 8021afe:	bf88      	it	hi
 8021b00:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021b04:	1b9b      	subs	r3, r3, r6
 8021b06:	4421      	add	r1, r4
 8021b08:	46c4      	mov	ip, r8
 8021b0a:	0052      	lsls	r2, r2, #1
 8021b0c:	3f01      	subs	r7, #1
 8021b0e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021b12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021b16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021b1a:	d1dd      	bne.n	8021ad8 <__ieee754_sqrt+0xc0>
 8021b1c:	4313      	orrs	r3, r2
 8021b1e:	d006      	beq.n	8021b2e <__ieee754_sqrt+0x116>
 8021b20:	1c4c      	adds	r4, r1, #1
 8021b22:	bf13      	iteet	ne
 8021b24:	3101      	addne	r1, #1
 8021b26:	3001      	addeq	r0, #1
 8021b28:	4639      	moveq	r1, r7
 8021b2a:	f021 0101 	bicne.w	r1, r1, #1
 8021b2e:	1043      	asrs	r3, r0, #1
 8021b30:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021b34:	0849      	lsrs	r1, r1, #1
 8021b36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021b3a:	07c2      	lsls	r2, r0, #31
 8021b3c:	bf48      	it	mi
 8021b3e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021b42:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8021b46:	460c      	mov	r4, r1
 8021b48:	463d      	mov	r5, r7
 8021b4a:	e77f      	b.n	8021a4c <__ieee754_sqrt+0x34>
 8021b4c:	0ada      	lsrs	r2, r3, #11
 8021b4e:	3815      	subs	r0, #21
 8021b50:	055b      	lsls	r3, r3, #21
 8021b52:	2a00      	cmp	r2, #0
 8021b54:	d0fa      	beq.n	8021b4c <__ieee754_sqrt+0x134>
 8021b56:	02d7      	lsls	r7, r2, #11
 8021b58:	d50a      	bpl.n	8021b70 <__ieee754_sqrt+0x158>
 8021b5a:	f1c1 0420 	rsb	r4, r1, #32
 8021b5e:	fa23 f404 	lsr.w	r4, r3, r4
 8021b62:	1e4d      	subs	r5, r1, #1
 8021b64:	408b      	lsls	r3, r1
 8021b66:	4322      	orrs	r2, r4
 8021b68:	1b41      	subs	r1, r0, r5
 8021b6a:	e788      	b.n	8021a7e <__ieee754_sqrt+0x66>
 8021b6c:	4608      	mov	r0, r1
 8021b6e:	e7f0      	b.n	8021b52 <__ieee754_sqrt+0x13a>
 8021b70:	0052      	lsls	r2, r2, #1
 8021b72:	3101      	adds	r1, #1
 8021b74:	e7ef      	b.n	8021b56 <__ieee754_sqrt+0x13e>
 8021b76:	46e0      	mov	r8, ip
 8021b78:	e7be      	b.n	8021af8 <__ieee754_sqrt+0xe0>
 8021b7a:	bf00      	nop
 8021b7c:	7ff00000 	.word	0x7ff00000

08021b80 <_init>:
 8021b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b82:	bf00      	nop
 8021b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b86:	bc08      	pop	{r3}
 8021b88:	469e      	mov	lr, r3
 8021b8a:	4770      	bx	lr

08021b8c <_fini>:
 8021b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b8e:	bf00      	nop
 8021b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021b92:	bc08      	pop	{r3}
 8021b94:	469e      	mov	lr, r3
 8021b96:	4770      	bx	lr
