
MC110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021870  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080bc  08021a20  08021a20  00031a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029adc  08029adc  000407fc  2**0
                  CONTENTS
  4 .ARM          00000008  08029adc  08029adc  00039adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029ae4  08029ae4  000407fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029ae4  08029ae4  00039ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029ae8  08029ae8  00039ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007fc  20000000  08029aec  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009830  20000800  0802a2e8  00040800  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a030  0802a2e8  0004a030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000407fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   001eb124  00000000  00000000  0004082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cc0b  00000000  00000000  0022b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005310  00000000  00000000  00238560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004da8  00000000  00000000  0023d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000401af  00000000  00000000  00242618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005d3b8  00000000  00000000  002827c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142600  00000000  00000000  002dfb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0042217f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000175d4  00000000  00000000  004221d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000800 	.word	0x20000800
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021a08 	.word	0x08021a08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000804 	.word	0x20000804
 80001ec:	08021a08 	.word	0x08021a08

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9ef 	b.w	80010a8 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_Read_REG>:
uint8_t calibr_process = 0;										// Устанавливается в 1 когда идет калибровка
uint8_t read_off_gain = 0;


uint32_t ADC_Read_REG(uint8_t REG, uint8_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	uint32_t RES;
	ADC_NCS_ACTIVE();
 80010bc:	2200      	movs	r2, #0
 80010be:	2110      	movs	r1, #16
 80010c0:	4820      	ldr	r0, [pc, #128]	; (8001144 <ADC_Read_REG+0x98>)
 80010c2:	f009 f869 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((REG)<<1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3b3f      	subs	r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	747b      	strb	r3, [r7, #17]
	aTxBuffer[2] = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	74bb      	strb	r3, [r7, #18]
	aTxBuffer[3] = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 0110 	add.w	r1, r7, #16
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4814      	ldr	r0, [pc, #80]	; (8001148 <ADC_Read_REG+0x9c>)
 80010f6:	f00d f90a 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <ADC_Read_REG+0x98>)
 8001100:	f009 f84a 	bl	800a198 <HAL_GPIO_WritePin>

	RES=aRxBuffer[1];
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
	RES<<=8;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	617b      	str	r3, [r7, #20]
	RES+=aRxBuffer[3];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	461a      	mov	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
	RES = RES>>(8*(3-len));
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f1c3 0303 	rsb	r3, r3, #3
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]

	return RES;
 8001138:	697b      	ldr	r3, [r7, #20]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	2000785c 	.word	0x2000785c

0800114c <ADC_Conversion>:


void ADC_Conversion(uint8_t RATE)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	ADC_NCS_ACTIVE();
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <ADC_Conversion+0x44>)
 800115c:	f009 f81c 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xB0 + RATE; // DATA RATE
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b50      	subs	r3, #80	; 0x50
 8001164:	b2db      	uxtb	r3, r3
 8001166:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <ADC_Conversion+0x48>)
 800117a:	f00d f8c8 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ADC_Conversion+0x44>)
 8001184:	f009 f808 	bl	800a198 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000800 	.word	0x48000800
 8001194:	2000785c 	.word	0x2000785c

08001198 <ADC_Read_DATA>:

int32_t ADC_Read_DATA(uint8_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 80011a2:	2200      	movs	r2, #0
 80011a4:	2110      	movs	r1, #16
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <ADC_Read_DATA+0x98>)
 80011a8:	f008 fff6 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((14+Channel)<<1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	330e      	adds	r3, #14
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b3f      	subs	r3, #63	; 0x3f
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	74bb      	strb	r3, [r7, #18]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f107 0110 	add.w	r1, r7, #16
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <ADC_Read_DATA+0x9c>)
 80011da:	f00d f898 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <ADC_Read_DATA+0x98>)
 80011e4:	f008 ffd8 	bl	800a198 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[2];
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
	data32<<=8;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	617b      	str	r3, [r7, #20]
	data32+=aRxBuffer[3];
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
	if((data32>>23)==1) return -(8388608-(data32&0x7FFFFF));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0ddb      	lsrs	r3, r3, #23
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <ADC_Read_DATA+0x88>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800121a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800121e:	e002      	b.n	8001226 <ADC_Read_DATA+0x8e>
	else return (data32&0x7FFFFF);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	48000800 	.word	0x48000800
 8001234:	2000785c 	.word	0x2000785c

08001238 <ADC_Read_STAT>:

uint32_t ADC_Read_STAT(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data32;
	ADC_NCS_ACTIVE();
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001244:	f008 ffa8 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC1+((STAT_REG)<<1);
 8001248:	23c1      	movs	r3, #193	; 0xc1
 800124a:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = aTxBuffer[2] = aTxBuffer[3] = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	72bb      	strb	r3, [r7, #10]
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	727b      	strb	r3, [r7, #9]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 4, 1000);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	f107 0108 	add.w	r1, r7, #8
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <ADC_Read_STAT+0x70>)
 8001268:	f00d f851 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ADC_Read_STAT+0x6c>)
 8001272:	f008 ff91 	bl	800a198 <HAL_GPIO_WritePin>
	data32=aRxBuffer[1];
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[2];
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
	data32<<=8;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	data32+=aRxBuffer[3];
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
	return data32;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	2000785c 	.word	0x2000785c

080012ac <ADC_Write_REG>:

void ADC_Write_REG(uint8_t REG, uint8_t*DATA, uint8_t len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	uint8_t aTxBuffer[10], aRxBuffer[10];
	uint8_t i=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
	ADC_NCS_ACTIVE();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <ADC_Write_REG+0x84>)
 80012c6:	f008 ff67 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xC0+((REG)<<1);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	753b      	strb	r3, [r7, #20]
	for(i=0;i<len;i++)aTxBuffer[i+1] = DATA[i];
 80012d6:	2300      	movs	r3, #0
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	e00d      	b.n	80012f8 <ADC_Write_REG+0x4c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	441a      	add	r2, r3
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ed      	bcc.n	80012dc <ADC_Write_REG+0x30>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, len+1, 1000);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	f107 0114 	add.w	r1, r7, #20
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	9000      	str	r0, [sp, #0]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <ADC_Write_REG+0x88>)
 8001318:	f00c fff9 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <ADC_Write_REG+0x84>)
 8001322:	f008 ff39 	bl	800a198 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000800 	.word	0x48000800
 8001334:	2000785c 	.word	0x2000785c

08001338 <Auto_System_Calibration>:
	ADC_NCS_NOT_ACTIVE();
}


void Auto_System_Calibration(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b0a1      	sub	sp, #132	; 0x84
 800133c:	af00      	add	r7, sp, #0
	uint16_t i,j;
	int32_t DYNAMIC_BAND_MAX[9]={0,0,0,0,0,0,0,0,0};
 800133e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f01b fe36 	bl	801cfb8 <memset>
	int32_t DYNAMIC_BAND_MIN[9]={0,0,0,0,0,0,0,0,0};
 800134c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001350:	2224      	movs	r2, #36	; 0x24
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f01b fe2f 	bl	801cfb8 <memset>
	uint8_t RES=0;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	int64_t SUM[6]={0,0,0,0,0,0};
 8001360:	463b      	mov	r3, r7
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01b fe26 	bl	801cfb8 <memset>

	// Читаем калибровочные данные из внешнего регистра
//	aTxBuffer[0] = 0x10;
//	ADC_Write_REG(CTRL3_REG, aTxBuffer, 1);

	calibr_process=1;
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <Auto_System_Calibration+0x180>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
//		DYNAMIC_BAND_MAX[i]=ADC_middle[5];
//		DYNAMIC_BAND_MIN[i]=ADC_middle[0];
//	}


	ADC_PGA_Set(PGA_GAIN128);
 8001372:	2008      	movs	r0, #8
 8001374:	f000 f988 	bl	8001688 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <Auto_System_Calibration+0x184>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fee5 	bl	800114c <ADC_Conversion>
	ADC_Buff_size=256;
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <Auto_System_Calibration+0x188>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	801a      	strh	r2, [r3, #0]
	adc_full_buff=0;
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <Auto_System_Calibration+0x18c>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	while(adc_full_buff<ADC_Buff_size)
 8001390:	e00a      	b.n	80013a8 <Auto_System_Calibration+0x70>
	{
		Gauge_loading((uint8_t*)"Калибровка АЦП..",  (uint8_t)((adc_full_buff*100)/256));
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <Auto_System_Calibration+0x18c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <Auto_System_Calibration+0x190>)
 80013a4:	f001 fd08 	bl	8002db8 <Gauge_loading>
	while(adc_full_buff<ADC_Buff_size)
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <Auto_System_Calibration+0x188>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Auto_System_Calibration+0x18c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8ed      	bhi.n	8001392 <Auto_System_Calibration+0x5a>
//	OldData=ADC_middle[5];



	// Расчитываем коэффициенты для SYSTEM калибровки GAIN и OFFSET
	adc_mux[0]=1.0;
 80013b6:	4945      	ldr	r1, [pc, #276]	; (80014cc <Auto_System_Calibration+0x194>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <Auto_System_Calibration+0x198>)
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
	//for(i=1;i<9;i++)adc_mux[i]=(double)(DYNAMIC_BAND_MAX[0]*(1<<(i-1)))/(double)(DYNAMIC_BAND_MAX[i]-DYNAMIC_BAND_MIN[i]);
	for(i=1;i<9;i++)adc_mux[i]=(double)DYNAMIC_BAND_MAX[i]/(double)DYNAMIC_BAND_MAX[1];
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80013c8:	e024      	b.n	8001414 <Auto_System_Calibration+0xdc>
 80013ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80013d4:	4413      	add	r3, r2
 80013d6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8b2 	bl	8000544 <__aeabi_i2d>
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8ac 	bl	8000544 <__aeabi_i2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f8b7 607e 	ldrh.w	r6, [r7, #126]	; 0x7e
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fa38 	bl	800086c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4832      	ldr	r0, [pc, #200]	; (80014cc <Auto_System_Calibration+0x194>)
 8001402:	00f1      	lsls	r1, r6, #3
 8001404:	4401      	add	r1, r0
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
 800140a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800140e:	3301      	adds	r3, #1
 8001410:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001414:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001418:	2b08      	cmp	r3, #8
 800141a:	d9d6      	bls.n	80013ca <Auto_System_Calibration+0x92>
	for(i=0;i<9;i++)adc_system_offset[i]=DYNAMIC_BAND_MIN[i];
 800141c:	2300      	movs	r3, #0
 800141e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001422:	e011      	b.n	8001448 <Auto_System_Calibration+0x110>
 8001424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001428:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001432:	440b      	add	r3, r1
 8001434:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001438:	4926      	ldr	r1, [pc, #152]	; (80014d4 <Auto_System_Calibration+0x19c>)
 800143a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800143e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001442:	3301      	adds	r3, #1
 8001444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800144c:	2b08      	cmp	r3, #8
 800144e:	d9e9      	bls.n	8001424 <Auto_System_Calibration+0xec>

	// Проверяем правильность показаний усиления
	for(i=2;i<9;i++) {if(DYNAMIC_BAND_MAX[i-1]<DYNAMIC_BAND_MAX[i])RES=1;}
 8001450:	2302      	movs	r3, #2
 8001452:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001456:	e01a      	b.n	800148e <Auto_System_Calibration+0x156>
 8001458:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800145c:	3b01      	subs	r3, #1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001464:	4413      	add	r3, r2
 8001466:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800146a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001474:	440b      	add	r3, r1
 8001476:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800147a:	429a      	cmp	r2, r3
 800147c:	da02      	bge.n	8001484 <Auto_System_Calibration+0x14c>
 800147e:	2301      	movs	r3, #1
 8001480:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001484:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001488:	3301      	adds	r3, #1
 800148a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800148e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001492:	2b08      	cmp	r3, #8
 8001494:	d9e0      	bls.n	8001458 <Auto_System_Calibration+0x120>
	if(RES==1)ERROR_REG|=(0x01<<ADC_cal_err);
 8001496:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <Auto_System_Calibration+0x172>
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <Auto_System_Calibration+0x1a0>)
 80014a8:	6013      	str	r3, [r2, #0]

	//OldData=(double)DYNAMIC_BAND_MAX[1];

	calibr_process=0;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <Auto_System_Calibration+0x180>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3784      	adds	r7, #132	; 0x84
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	20000849 	.word	0x20000849
 80014bc:	2000009b 	.word	0x2000009b
 80014c0:	2000009c 	.word	0x2000009c
 80014c4:	20000820 	.word	0x20000820
 80014c8:	08021a20 	.word	0x08021a20
 80014cc:	20000000 	.word	0x20000000
 80014d0:	3ff00000 	.word	0x3ff00000
 80014d4:	20000824 	.word	0x20000824
 80014d8:	20000888 	.word	0x20000888

080014dc <ADC_Calibration>:


void ADC_Calibration(uint8_t CAL)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	aTxBuffer[0]=((CAL)<<6)+0x02;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3302      	adds	r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	733b      	strb	r3, [r7, #12]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2201      	movs	r2, #1
 80014f8:	4619      	mov	r1, r3
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff fed6 	bl	80012ac <ADC_Write_REG>

	ADC_NCS_ACTIVE();
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <ADC_Calibration+0x5c>)
 8001506:	f008 fe47 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xA0;
 800150a:	23a0      	movs	r3, #160	; 0xa0
 800150c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	f107 010c 	add.w	r1, r7, #12
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <ADC_Calibration+0x60>)
 8001520:	f00c fef5 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <ADC_Calibration+0x5c>)
 800152a:	f008 fe35 	bl	800a198 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	48000800 	.word	0x48000800
 800153c:	2000785c 	.word	0x2000785c

08001540 <ADC_init>:
}



void ADC_init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint32_t data=0xFFFFFFFF;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	60fb      	str	r3, [r7, #12]

	// Reset
	aTxBuffer[0] = 0x30;
 800154c:	2330      	movs	r3, #48	; 0x30
 800154e:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fea7 	bl	80012ac <ADC_Write_REG>
	ADC_NCS_ACTIVE();
 800155e:	2200      	movs	r2, #0
 8001560:	2110      	movs	r1, #16
 8001562:	4844      	ldr	r0, [pc, #272]	; (8001674 <ADC_init+0x134>)
 8001564:	f008 fe18 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x90;
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	723b      	strb	r3, [r7, #8]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 800156c:	1d3a      	adds	r2, r7, #4
 800156e:	f107 0108 	add.w	r1, r7, #8
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	483f      	ldr	r0, [pc, #252]	; (8001678 <ADC_init+0x138>)
 800157c:	f00c fec7 	bl	800e30e <HAL_SPI_TransmitReceive>
	ADC_NCS_NOT_ACTIVE();
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	483b      	ldr	r0, [pc, #236]	; (8001674 <ADC_init+0x134>)
 8001586:	f008 fe07 	bl	800a198 <HAL_GPIO_WritePin>

	while(data!=152)
 800158a:	e002      	b.n	8001592 <ADC_init+0x52>
	{
		data=ADC_Read_STAT();
 800158c:	f7ff fe54 	bl	8001238 <ADC_Read_STAT>
 8001590:	60f8      	str	r0, [r7, #12]
	while(data!=152)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b98      	cmp	r3, #152	; 0x98
 8001596:	d1f9      	bne.n	800158c <ADC_init+0x4c>
	}

	// Настройка АЦП
	aTxBuffer[0] = 0x09;
 8001598:	2309      	movs	r3, #9
 800159a:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	2008      	movs	r0, #8
 80015a6:	f7ff fe81 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x0E;
 80015aa:	230e      	movs	r3, #14
 80015ac:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = 0x0A;
 80015ae:	230a      	movs	r3, #10
 80015b0:	727b      	strb	r3, [r7, #9]
	aTxBuffer[2] = 0x06;
 80015b2:	2306      	movs	r3, #6
 80015b4:	72bb      	strb	r3, [r7, #10]
	ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2203      	movs	r2, #3
 80015bc:	4619      	mov	r1, r3
 80015be:	2007      	movs	r0, #7
 80015c0:	f7ff fe74 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x1A;
 80015c4:	231a      	movs	r3, #26
 80015c6:	723b      	strb	r3, [r7, #8]
	aTxBuffer[1] = 0x16;
 80015c8:	2316      	movs	r3, #22
 80015ca:	727b      	strb	r3, [r7, #9]
	aTxBuffer[2] = 0x12;
 80015cc:	2312      	movs	r3, #18
 80015ce:	72bb      	strb	r3, [r7, #10]
	ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2203      	movs	r2, #3
 80015d6:	4619      	mov	r1, r3
 80015d8:	2006      	movs	r0, #6
 80015da:	f7ff fe67 	bl	80012ac <ADC_Write_REG>

	aTxBuffer[0] = 0x02;
 80015de:	2302      	movs	r3, #2
 80015e0:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2201      	movs	r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fe5e 	bl	80012ac <ADC_Write_REG>

	// Self calibration
	LED(1,0,0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fdbf 	bl	8002178 <LED>
	aTxBuffer[0] = 0x01;
 80015fa:	2301      	movs	r3, #1
 80015fc:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2201      	movs	r2, #1
 8001604:	4619      	mov	r1, r3
 8001606:	2008      	movs	r0, #8
 8001608:	f7ff fe50 	bl	80012ac <ADC_Write_REG>
	ADC_Calibration(adc_calibration_mode);
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <ADC_init+0x13c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff63 	bl	80014dc <ADC_Calibration>
	delay_ms(300);
 8001616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800161a:	f001 fe1b 	bl	8003254 <delay_ms>
	aTxBuffer[0] = 0x09;
 800161e:	2309      	movs	r3, #9
 8001620:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	2008      	movs	r0, #8
 800162c:	f7ff fe3e 	bl	80012ac <ADC_Write_REG>

	ADC_PGA_Set(PGA_GAIN);
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <ADC_init+0x140>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f827 	bl	8001688 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <ADC_init+0x144>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd84 	bl	800114c <ADC_Conversion>

	delay_ms(1500);
 8001644:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001648:	f001 fe04 	bl	8003254 <delay_ms>
	//Auto_System_Calibration();

	ADC_PGA_Set(PGA_GAIN);
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <ADC_init+0x140>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f819 	bl	8001688 <ADC_PGA_Set>
	ADC_Conversion(ADC_SPS);
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <ADC_init+0x144>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd76 	bl	800114c <ADC_Conversion>

	LED(0,0,0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2000      	movs	r0, #0
 8001666:	f000 fd87 	bl	8002178 <LED>
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	48000800 	.word	0x48000800
 8001678:	2000785c 	.word	0x2000785c
 800167c:	2000089f 	.word	0x2000089f
 8001680:	2000009a 	.word	0x2000009a
 8001684:	2000009b 	.word	0x2000009b

08001688 <ADC_PGA_Set>:


void ADC_PGA_Set(uint8_t pga_data)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4];
	uint8_t CTRL=ADC_Read_REG(CTRL2_REG, 1);
 8001692:	2101      	movs	r1, #1
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff fd09 	bl	80010ac <ADC_Read_REG>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
	CTRL&=0xF0;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	f023 030f 	bic.w	r3, r3, #15
 80016a4:	73fb      	strb	r3, [r7, #15]
	if(pga_data==0) aTxBuffer[0]=CTRL;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <ADC_PGA_Set+0x2a>
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	723b      	strb	r3, [r7, #8]
 80016b0:	e006      	b.n	80016c0 <ADC_PGA_Set+0x38>
	else aTxBuffer[0]=CTRL+0x08+(pga_data-1);
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	3307      	adds	r3, #7
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	723b      	strb	r3, [r7, #8]
	ADC_Write_REG(CTRL2_REG, aTxBuffer, 1);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	2201      	movs	r2, #1
 80016c6:	4619      	mov	r1, r3
 80016c8:	2002      	movs	r0, #2
 80016ca:	f7ff fdef 	bl	80012ac <ADC_Write_REG>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <ADC_EXT>:


void ADC_EXT(void)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80016de:	2300      	movs	r3, #0
 80016e0:	80fb      	strh	r3, [r7, #6]

	if(adc_full_buff>2)
 80016e2:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <ADC_EXT+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f240 80c2 	bls.w	8001870 <ADC_EXT+0x198>
	{
		if(read_off_gain==0)
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <ADC_EXT+0x1c0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 8086 	bne.w	8001802 <ADC_EXT+0x12a>
		{
			for(i=0;i<ADC_Buff_size-1;i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	80fb      	strh	r3, [r7, #6]
 80016fa:	e038      	b.n	800176e <ADC_EXT+0x96>
			{
				ADC_channel_0[i]=ADC_channel_0[i+1];
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4966      	ldr	r1, [pc, #408]	; (800189c <ADC_EXT+0x1c4>)
 8001704:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001708:	4964      	ldr	r1, [pc, #400]	; (800189c <ADC_EXT+0x1c4>)
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_1[i]=ADC_channel_1[i+1];
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4962      	ldr	r1, [pc, #392]	; (80018a0 <ADC_EXT+0x1c8>)
 8001716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800171a:	4961      	ldr	r1, [pc, #388]	; (80018a0 <ADC_EXT+0x1c8>)
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_2[i]=ADC_channel_2[i+1];
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	495f      	ldr	r1, [pc, #380]	; (80018a4 <ADC_EXT+0x1cc>)
 8001728:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800172c:	495d      	ldr	r1, [pc, #372]	; (80018a4 <ADC_EXT+0x1cc>)
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_3[i]=ADC_channel_3[i+1];
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	495b      	ldr	r1, [pc, #364]	; (80018a8 <ADC_EXT+0x1d0>)
 800173a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800173e:	495a      	ldr	r1, [pc, #360]	; (80018a8 <ADC_EXT+0x1d0>)
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_4[i]=ADC_channel_4[i+1];
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	4958      	ldr	r1, [pc, #352]	; (80018ac <ADC_EXT+0x1d4>)
 800174c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001750:	4956      	ldr	r1, [pc, #344]	; (80018ac <ADC_EXT+0x1d4>)
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				ADC_channel_5[i]=ADC_channel_5[i+1];
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4954      	ldr	r1, [pc, #336]	; (80018b0 <ADC_EXT+0x1d8>)
 800175e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001762:	4953      	ldr	r1, [pc, #332]	; (80018b0 <ADC_EXT+0x1d8>)
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i=0;i<ADC_Buff_size-1;i++)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	3301      	adds	r3, #1
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <ADC_EXT+0x1dc>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	429a      	cmp	r2, r3
 8001778:	dbc0      	blt.n	80016fc <ADC_EXT+0x24>
			}

			for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 800177a:	2300      	movs	r3, #0
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	e00c      	b.n	800179a <ADC_EXT+0xc2>
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	88fc      	ldrh	r4, [r7, #6]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fd06 	bl	8001198 <ADC_Read_DATA>
 800178c:	4603      	mov	r3, r0
 800178e:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <ADC_EXT+0x1e0>)
 8001790:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	3301      	adds	r3, #1
 8001798:	80fb      	strh	r3, [r7, #6]
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d9ef      	bls.n	8001780 <ADC_EXT+0xa8>

			ADC_channel_0[ADC_Buff_size-1]=ADC_data[0];
 80017a0:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <ADC_EXT+0x1dc>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <ADC_EXT+0x1e0>)
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	493c      	ldr	r1, [pc, #240]	; (800189c <ADC_EXT+0x1c4>)
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_1[ADC_Buff_size-1]=ADC_data[1];
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <ADC_EXT+0x1dc>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <ADC_EXT+0x1e0>)
 80017b8:	6852      	ldr	r2, [r2, #4]
 80017ba:	4939      	ldr	r1, [pc, #228]	; (80018a0 <ADC_EXT+0x1c8>)
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_2[ADC_Buff_size-1]=ADC_data[2];
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <ADC_EXT+0x1dc>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	4a3c      	ldr	r2, [pc, #240]	; (80018b8 <ADC_EXT+0x1e0>)
 80017c8:	6892      	ldr	r2, [r2, #8]
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <ADC_EXT+0x1cc>)
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_3[ADC_Buff_size-1]=ADC_data[3];
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <ADC_EXT+0x1dc>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <ADC_EXT+0x1e0>)
 80017d8:	68d2      	ldr	r2, [r2, #12]
 80017da:	4933      	ldr	r1, [pc, #204]	; (80018a8 <ADC_EXT+0x1d0>)
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_4[ADC_Buff_size-1]=ADC_data[4];
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <ADC_EXT+0x1dc>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <ADC_EXT+0x1e0>)
 80017e8:	6912      	ldr	r2, [r2, #16]
 80017ea:	4930      	ldr	r1, [pc, #192]	; (80018ac <ADC_EXT+0x1d4>)
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_channel_5[ADC_Buff_size-1]=ADC_data[5];
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <ADC_EXT+0x1dc>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <ADC_EXT+0x1e0>)
 80017f8:	6952      	ldr	r2, [r2, #20]
 80017fa:	492d      	ldr	r1, [pc, #180]	; (80018b0 <ADC_EXT+0x1d8>)
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001800:	e036      	b.n	8001870 <ADC_EXT+0x198>
		}
		else
		{
			if(read_off_gain==1)
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <ADC_EXT+0x1c0>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d103      	bne.n	8001812 <ADC_EXT+0x13a>
			{
				read_off_gain=2;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <ADC_EXT+0x1c0>)
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e02e      	b.n	8001870 <ADC_EXT+0x198>
			}
			else
			{
				for(i=1;i<ADC_Buff_size;i++)
 8001812:	2301      	movs	r3, #1
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	e00b      	b.n	8001830 <ADC_EXT+0x158>
				{ ADC_channel_OFF[i-1]=ADC_channel_OFF[i]; }
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	3b01      	subs	r3, #1
 800181e:	4927      	ldr	r1, [pc, #156]	; (80018bc <ADC_EXT+0x1e4>)
 8001820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001824:	4925      	ldr	r1, [pc, #148]	; (80018bc <ADC_EXT+0x1e4>)
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=1;i<ADC_Buff_size;i++)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	3301      	adds	r3, #1
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <ADC_EXT+0x1dc>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3ee      	bcc.n	8001818 <ADC_EXT+0x140>
				for(i=0;i<6;i++)ADC_data[i]=ADC_Read_DATA(i);
 800183a:	2300      	movs	r3, #0
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	e00c      	b.n	800185a <ADC_EXT+0x182>
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	88fc      	ldrh	r4, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fca6 	bl	8001198 <ADC_Read_DATA>
 800184c:	4603      	mov	r3, r0
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <ADC_EXT+0x1e0>)
 8001850:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	3301      	adds	r3, #1
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d9ef      	bls.n	8001840 <ADC_EXT+0x168>
				ADC_channel_OFF[ADC_Buff_size-1]=ADC_data[5];
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <ADC_EXT+0x1dc>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <ADC_EXT+0x1e0>)
 8001868:	6952      	ldr	r2, [r2, #20]
 800186a:	4914      	ldr	r1, [pc, #80]	; (80018bc <ADC_EXT+0x1e4>)
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

//	if(adc_full_buff<ADC_Buff_size)adc_full_buff++;
//	else{if(cal_ag<10)cal_ag++;}
//	if(cal_ag==10){cal_ag=20; for(i=0;i<6;i++) Kag[i]=(double)CALag[i]/(double)ADC_middle[i];}
	adc_full_buff++;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <ADC_EXT+0x1bc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <ADC_EXT+0x1bc>)
 8001878:	6013      	str	r3, [r2, #0]
	adc_timeout=adc_timeout_const;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <ADC_EXT+0x1e8>)
 800187c:	2205      	movs	r2, #5
 800187e:	701a      	strb	r2, [r3, #0]
	ADC_Conversion(ADC_SPS);
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <ADC_EXT+0x1ec>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc61 	bl	800114c <ADC_Conversion>
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	20000820 	.word	0x20000820
 8001898:	2000084a 	.word	0x2000084a
 800189c:	20004a90 	.word	0x20004a90
 80018a0:	20002290 	.word	0x20002290
 80018a4:	20002a90 	.word	0x20002a90
 80018a8:	20003290 	.word	0x20003290
 80018ac:	20004290 	.word	0x20004290
 80018b0:	20003a90 	.word	0x20003a90
 80018b4:	2000009c 	.word	0x2000009c
 80018b8:	20005290 	.word	0x20005290
 80018bc:	200052e8 	.word	0x200052e8
 80018c0:	20000048 	.word	0x20000048
 80018c4:	2000009b 	.word	0x2000009b

080018c8 <Measure_Kdiv>:


void Measure_Kdiv(void)
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	// Gain
	if(read_off_gain==0)
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <Measure_Kdiv+0x98>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d115      	bne.n	8001900 <Measure_Kdiv+0x38>
	{
		if(adc_full_buff>=AutoGainCoef_period)
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <Measure_Kdiv+0x9c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <Measure_Kdiv+0xa0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d825      	bhi.n	800192e <Measure_Kdiv+0x66>
		{
			ADC_PGA_Set(PGA_GAIN_OFF);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff fed0 	bl	8001688 <ADC_PGA_Set>
			ADC_Conversion(ADC_SPS);
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <Measure_Kdiv+0xa4>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc2d 	bl	800114c <ADC_Conversion>
			read_off_gain=1;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <Measure_Kdiv+0x98>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
			adc_full_buff=0;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <Measure_Kdiv+0xa0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e016      	b.n	800192e <Measure_Kdiv+0x66>
		}
	}
	// Gain OFF
	else
	{
		if(adc_full_buff>=AutoOffCoef_period)
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <Measure_Kdiv+0xa8>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <Measure_Kdiv+0xa0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d80f      	bhi.n	800192e <Measure_Kdiv+0x66>
		{
			ADC_PGA_Set(PGA_GAIN);
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <Measure_Kdiv+0xac>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff feb8 	bl	8001688 <ADC_PGA_Set>
			ADC_Conversion(ADC_SPS);
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <Measure_Kdiv+0xa4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc15 	bl	800114c <ADC_Conversion>
			adc_full_buff=0;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <Measure_Kdiv+0xa0>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
			read_off_gain=0;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <Measure_Kdiv+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
		}
	}
	Kdiv=(double)ADC_middle[5]/(double)ADC_middle[6];
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <Measure_Kdiv+0xb0>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe06 	bl	8000544 <__aeabi_i2d>
 8001938:	4604      	mov	r4, r0
 800193a:	460d      	mov	r5, r1
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <Measure_Kdiv+0xb0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdff 	bl	8000544 <__aeabi_i2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe ff8d 	bl	800086c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4909      	ldr	r1, [pc, #36]	; (800197c <Measure_Kdiv+0xb4>)
 8001958:	e9c1 2300 	strd	r2, r3, [r1]
}
 800195c:	bf00      	nop
 800195e:	bdb0      	pop	{r4, r5, r7, pc}
 8001960:	2000084a 	.word	0x2000084a
 8001964:	200020f4 	.word	0x200020f4
 8001968:	20000820 	.word	0x20000820
 800196c:	2000009b 	.word	0x2000009b
 8001970:	2000215c 	.word	0x2000215c
 8001974:	2000009a 	.word	0x2000009a
 8001978:	200020d8 	.word	0x200020d8
 800197c:	20000090 	.word	0x20000090

08001980 <ADC_process>:


void ADC_process(void)
{
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001984:	b099      	sub	sp, #100	; 0x64
 8001986:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8001988:	2300      	movs	r3, #0
 800198a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t aTxBuffer[4];
	int64_t SUM[7]={0,0,0,0,0,0};
 800198e:	f107 0020 	add.w	r0, r7, #32
 8001992:	2338      	movs	r3, #56	; 0x38
 8001994:	461a      	mov	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	f01b fb0e 	bl	801cfb8 <memset>

	// Скользящее среднее
	for(i=0;i<ADC_Buff_size;i++)
 800199c:	2300      	movs	r3, #0
 800199e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80019a2:	e07f      	b.n	8001aa4 <ADC_process+0x124>
	{
		SUM[0]+=ADC_channel_0[i];
 80019a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019a8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ac:	4bbe      	ldr	r3, [pc, #760]	; (8001ca8 <ADC_process+0x328>)
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	461a      	mov	r2, r3
 80019b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019b8:	1884      	adds	r4, r0, r2
 80019ba:	eb41 0503 	adc.w	r5, r1, r3
 80019be:	e9c7 4508 	strd	r4, r5, [r7, #32]
		SUM[1]+=ADC_channel_1[i];
 80019c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019c6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ca:	4bb8      	ldr	r3, [pc, #736]	; (8001cac <ADC_process+0x32c>)
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	461a      	mov	r2, r3
 80019d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019d6:	eb10 0802 	adds.w	r8, r0, r2
 80019da:	eb41 0903 	adc.w	r9, r1, r3
 80019de:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
		SUM[2]+=ADC_channel_2[i];
 80019e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019e6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80019ea:	4bb1      	ldr	r3, [pc, #708]	; (8001cb0 <ADC_process+0x330>)
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	461a      	mov	r2, r3
 80019f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019f6:	eb10 0a02 	adds.w	sl, r0, r2
 80019fa:	eb41 0b03 	adc.w	fp, r1, r3
 80019fe:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
		SUM[3]+=ADC_channel_3[i];
 8001a02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a06:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a0a:	4baa      	ldr	r3, [pc, #680]	; (8001cb4 <ADC_process+0x334>)
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	461a      	mov	r2, r3
 8001a12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a16:	1886      	adds	r6, r0, r2
 8001a18:	61be      	str	r6, [r7, #24]
 8001a1a:	eb41 0303 	adc.w	r3, r1, r3
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a24:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		SUM[4]+=ADC_channel_4[i];
 8001a28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a2c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a30:	4ba1      	ldr	r3, [pc, #644]	; (8001cb8 <ADC_process+0x338>)
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	461a      	mov	r2, r3
 8001a38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a3c:	1886      	adds	r6, r0, r2
 8001a3e:	613e      	str	r6, [r7, #16]
 8001a40:	eb41 0303 	adc.w	r3, r1, r3
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		SUM[5]+=ADC_channel_5[i];
 8001a4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a52:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a56:	4b99      	ldr	r3, [pc, #612]	; (8001cbc <ADC_process+0x33c>)
 8001a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a62:	1886      	adds	r6, r0, r2
 8001a64:	60be      	str	r6, [r7, #8]
 8001a66:	eb41 0303 	adc.w	r3, r1, r3
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a70:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		SUM[6]+=ADC_channel_OFF[i];
 8001a74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a78:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001a7c:	4b90      	ldr	r3, [pc, #576]	; (8001cc0 <ADC_process+0x340>)
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	461a      	mov	r2, r3
 8001a84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a88:	1886      	adds	r6, r0, r2
 8001a8a:	603e      	str	r6, [r7, #0]
 8001a8c:	eb41 0303 	adc.w	r3, r1, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(i=0;i<ADC_Buff_size;i++)
 8001a9a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001aa4:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <ADC_process+0x344>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001aac:	4293      	cmp	r3, r2
 8001aae:	f4ff af79 	bcc.w	80019a4 <ADC_process+0x24>
	}
	for(i=0;i<7;i++) ADC_middle[i]=SUM[i]/ADC_Buff_size;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001ab8:	e01e      	b.n	8001af8 <ADC_process+0x178>
 8001aba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b40      	subs	r3, #64	; 0x40
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <ADC_process+0x344>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	f7ff f8e7 	bl	8000ca8 <__aeabi_ldivmod>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <ADC_process+0x348>)
 8001aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001aee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001af2:	3301      	adds	r3, #1
 8001af4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001af8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d9dc      	bls.n	8001aba <ADC_process+0x13a>

	//for(i=0;i<7;i++) ADC_middle[i]*=Kag[i];

	// Перезапуск АЦП если нет ответа в течении adc_timeout_const
	if(adc_timeout>0)adc_timeout--;
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <ADC_process+0x34c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <ADC_process+0x196>
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <ADC_process+0x34c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <ADC_process+0x34c>)
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e05e      	b.n	8001bd4 <ADC_process+0x254>
	else
	{
		// Настройка АЦП
		aTxBuffer[0] = 0x09;
 8001b16:	2309      	movs	r3, #9
 8001b18:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001b1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b20:	2201      	movs	r2, #1
 8001b22:	4619      	mov	r1, r3
 8001b24:	2008      	movs	r0, #8
 8001b26:	f7ff fbc1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x0E;
 8001b2a:	230e      	movs	r3, #14
 8001b2c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x0A;
 8001b30:	230a      	movs	r3, #10
 8001b32:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x06;
 8001b36:	2306      	movs	r3, #6
 8001b38:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP0_REG, aTxBuffer, 3);
 8001b3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b40:	2203      	movs	r2, #3
 8001b42:	4619      	mov	r1, r3
 8001b44:	2007      	movs	r0, #7
 8001b46:	f7ff fbb1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x1A;
 8001b4a:	231a      	movs	r3, #26
 8001b4c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		aTxBuffer[1] = 0x16;
 8001b50:	2316      	movs	r3, #22
 8001b52:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		aTxBuffer[2] = 0x12;
 8001b56:	2312      	movs	r3, #18
 8001b58:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		ADC_Write_REG(CHMAP1_REG, aTxBuffer, 3);
 8001b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b60:	2203      	movs	r2, #3
 8001b62:	4619      	mov	r1, r3
 8001b64:	2006      	movs	r0, #6
 8001b66:	f7ff fba1 	bl	80012ac <ADC_Write_REG>
		aTxBuffer[0] = 0x02;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(CTRL1_REG, aTxBuffer, 1);
 8001b70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b74:	2201      	movs	r2, #1
 8001b76:	4619      	mov	r1, r3
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fb97 	bl	80012ac <ADC_Write_REG>
		// Self calibration
		aTxBuffer[0] = 0x01;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	2008      	movs	r0, #8
 8001b8e:	f7ff fb8d 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <ADC_process+0x350>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fca0 	bl	80014dc <ADC_Calibration>
		delay_ms(300);
 8001b9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ba0:	f001 fb58 	bl	8003254 <delay_ms>
		aTxBuffer[0] = 0x09;
 8001ba4:	2309      	movs	r3, #9
 8001ba6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2008      	movs	r0, #8
 8001bb4:	f7ff fb7a 	bl	80012ac <ADC_Write_REG>

		ADC_Conversion(ADC_SPS);
 8001bb8:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <ADC_process+0x354>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fac5 	bl	800114c <ADC_Conversion>
		adc_timeout=adc_timeout_const;
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <ADC_process+0x34c>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	701a      	strb	r2, [r3, #0]
		ERROR_REG|=(0x01<<ADC_err);
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <ADC_process+0x358>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <ADC_process+0x358>)
 8001bd2:	6013      	str	r3, [r2, #0]
	}


	if(adc_start_calibration==0)
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <ADC_process+0x35c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d120      	bne.n	8001c1e <ADC_process+0x29e>
	{
		if(adc_timeout_cal>0)
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <ADC_process+0x360>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d048      	beq.n	8001c76 <ADC_process+0x2f6>
		{
			adc_timeout_cal--;
 8001be4:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <ADC_process+0x360>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <ADC_process+0x360>)
 8001bee:	801a      	strh	r2, [r3, #0]
			if(adc_timeout_cal==0)
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <ADC_process+0x360>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d13e      	bne.n	8001c76 <ADC_process+0x2f6>
			{
				// Стартуем преобразование
				aTxBuffer[0] = 0x09;
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001bfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c02:	2201      	movs	r2, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	2008      	movs	r0, #8
 8001c08:	f7ff fb50 	bl	80012ac <ADC_Write_REG>
				ADC_Conversion(DATA_RATE_16SPS);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff fa9d 	bl	800114c <ADC_Conversion>
				LED(0,0,0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 faae 	bl	8002178 <LED>
 8001c1c:	e02b      	b.n	8001c76 <ADC_process+0x2f6>
		}
	}
	// Калибровка
	else
	{
		LED(1,0,0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 faa8 	bl	8002178 <LED>
		adc_start_calibration=0;
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <ADC_process+0x35c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
		aTxBuffer[0] = 0x01;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==offset_calibration)aTxBuffer[0]+=(0<<5); 		// Ноль это канал по которому производится калибровка
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <ADC_process+0x350>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d103      	bne.n	8001c44 <ADC_process+0x2c4>
 8001c3c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c40:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		if(adc_calibration_mode==full_scale_calibration)aTxBuffer[0]+=(5<<5);	// Ноль это канал по которому производится калибровка
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <ADC_process+0x350>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d105      	bne.n	8001c58 <ADC_process+0x2d8>
 8001c4c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c50:	3b60      	subs	r3, #96	; 0x60
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		ADC_Write_REG(SEQ_REG, aTxBuffer, 1);
 8001c58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2008      	movs	r0, #8
 8001c62:	f7ff fb23 	bl	80012ac <ADC_Write_REG>
		ADC_Calibration(adc_calibration_mode);
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <ADC_process+0x350>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fc36 	bl	80014dc <ADC_Calibration>
		adc_timeout_cal=50;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <ADC_process+0x360>)
 8001c72:	2232      	movs	r2, #50	; 0x32
 8001c74:	801a      	strh	r2, [r3, #0]
	}
	// Делитель для PGA
	if(PGA_GAIN==0)devider=1;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <ADC_process+0x364>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <ADC_process+0x306>
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <ADC_process+0x368>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e008      	b.n	8001c98 <ADC_process+0x318>
	else devider= (0x01<<(PGA_GAIN-1));
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <ADC_process+0x364>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <ADC_process+0x368>)
 8001c96:	701a      	strb	r2, [r3, #0]

	// Расчитываем Kdiv
	//Kdiv = 128.0/(OldData/(double)ADC_middle[5]);
	if(AutoAmpCoef==1)Measure_Kdiv();
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <ADC_process+0x36c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d127      	bne.n	8001cf0 <ADC_process+0x370>
 8001ca0:	f7ff fe12 	bl	80018c8 <Measure_Kdiv>
 8001ca4:	e02e      	b.n	8001d04 <ADC_process+0x384>
 8001ca6:	bf00      	nop
 8001ca8:	20004a90 	.word	0x20004a90
 8001cac:	20002290 	.word	0x20002290
 8001cb0:	20002a90 	.word	0x20002a90
 8001cb4:	20003290 	.word	0x20003290
 8001cb8:	20004290 	.word	0x20004290
 8001cbc:	20003a90 	.word	0x20003a90
 8001cc0:	200052e8 	.word	0x200052e8
 8001cc4:	2000009c 	.word	0x2000009c
 8001cc8:	200020d8 	.word	0x200020d8
 8001ccc:	20000048 	.word	0x20000048
 8001cd0:	2000089f 	.word	0x2000089f
 8001cd4:	2000009b 	.word	0x2000009b
 8001cd8:	20000888 	.word	0x20000888
 8001cdc:	2000081c 	.word	0x2000081c
 8001ce0:	2000081e 	.word	0x2000081e
 8001ce4:	2000009a 	.word	0x2000009a
 8001ce8:	20000848 	.word	0x20000848
 8001cec:	20000899 	.word	0x20000899
	else Kdiv=devider;
 8001cf0:	4ba4      	ldr	r3, [pc, #656]	; (8001f84 <ADC_process+0x604>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc15 	bl	8000524 <__aeabi_ui2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	49a2      	ldr	r1, [pc, #648]	; (8001f88 <ADC_process+0x608>)
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]

	ADC_volt[0]=ADC_middle[0]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d04:	4ba1      	ldr	r3, [pc, #644]	; (8001f8c <ADC_process+0x60c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc1b 	bl	8000544 <__aeabi_i2d>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	460d      	mov	r5, r1
 8001d12:	4b9f      	ldr	r3, [pc, #636]	; (8001f90 <ADC_process+0x610>)
 8001d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b9d      	ldr	r3, [pc, #628]	; (8001f94 <ADC_process+0x614>)
 8001d1e:	f7fe fc7b 	bl	8000618 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4690      	mov	r8, r2
 8001d28:	4699      	mov	r9, r3
 8001d2a:	4b97      	ldr	r3, [pc, #604]	; (8001f88 <ADC_process+0x608>)
 8001d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <ADC_process+0x618>)
 8001d36:	f7fe fc6f 	bl	8000618 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fd93 	bl	800086c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fc63 	bl	8000618 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4991      	ldr	r1, [pc, #580]	; (8001f9c <ADC_process+0x61c>)
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]
	ADC_volt[1]=ADC_middle[1]*((RefVoltage*1000)/(8388608*Kdiv));
 8001d5c:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <ADC_process+0x60c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbef 	bl	8000544 <__aeabi_i2d>
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <ADC_process+0x610>)
 8001d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b87      	ldr	r3, [pc, #540]	; (8001f94 <ADC_process+0x614>)
 8001d76:	f7fe fc4f 	bl	8000618 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4690      	mov	r8, r2
 8001d80:	4699      	mov	r9, r3
 8001d82:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <ADC_process+0x608>)
 8001d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <ADC_process+0x618>)
 8001d8e:	f7fe fc43 	bl	8000618 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4640      	mov	r0, r8
 8001d98:	4649      	mov	r1, r9
 8001d9a:	f7fe fd67 	bl	800086c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fc37 	bl	8000618 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	497b      	ldr	r1, [pc, #492]	; (8001f9c <ADC_process+0x61c>)
 8001db0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ADC_volt[2]=ADC_middle[2]*((RefVoltage*1000)/(8388608*Kdiv));
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <ADC_process+0x60c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbc3 	bl	8000544 <__aeabi_i2d>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	460d      	mov	r5, r1
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <ADC_process+0x610>)
 8001dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <ADC_process+0x614>)
 8001dce:	f7fe fc23 	bl	8000618 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4690      	mov	r8, r2
 8001dd8:	4699      	mov	r9, r3
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <ADC_process+0x608>)
 8001ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <ADC_process+0x618>)
 8001de6:	f7fe fc17 	bl	8000618 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4640      	mov	r0, r8
 8001df0:	4649      	mov	r1, r9
 8001df2:	f7fe fd3b 	bl	800086c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7fe fc0b 	bl	8000618 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4965      	ldr	r1, [pc, #404]	; (8001f9c <ADC_process+0x61c>)
 8001e08:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ADC_volt[3]=ADC_middle[3]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e0c:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <ADC_process+0x60c>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb97 	bl	8000544 <__aeabi_i2d>
 8001e16:	4604      	mov	r4, r0
 8001e18:	460d      	mov	r5, r1
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <ADC_process+0x610>)
 8001e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <ADC_process+0x614>)
 8001e26:	f7fe fbf7 	bl	8000618 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4699      	mov	r9, r3
 8001e32:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <ADC_process+0x608>)
 8001e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <ADC_process+0x618>)
 8001e3e:	f7fe fbeb 	bl	8000618 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4640      	mov	r0, r8
 8001e48:	4649      	mov	r1, r9
 8001e4a:	f7fe fd0f 	bl	800086c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fbdf 	bl	8000618 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	494f      	ldr	r1, [pc, #316]	; (8001f9c <ADC_process+0x61c>)
 8001e60:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ADC_volt[4]=ADC_middle[4]*((RefVoltage*1000)/(8388608*Kdiv));
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <ADC_process+0x60c>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb6b 	bl	8000544 <__aeabi_i2d>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	460d      	mov	r5, r1
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <ADC_process+0x610>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <ADC_process+0x614>)
 8001e7e:	f7fe fbcb 	bl	8000618 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4690      	mov	r8, r2
 8001e88:	4699      	mov	r9, r3
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <ADC_process+0x608>)
 8001e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <ADC_process+0x618>)
 8001e96:	f7fe fbbf 	bl	8000618 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4640      	mov	r0, r8
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	f7fe fce3 	bl	800086c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe fbb3 	bl	8000618 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4939      	ldr	r1, [pc, #228]	; (8001f9c <ADC_process+0x61c>)
 8001eb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ADC_volt[5]=ADC_middle[5]*((RefVoltage*1000)/(8388608*Kdiv));
 8001ebc:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <ADC_process+0x60c>)
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb3f 	bl	8000544 <__aeabi_i2d>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <ADC_process+0x610>)
 8001ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <ADC_process+0x614>)
 8001ed6:	f7fe fb9f 	bl	8000618 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4690      	mov	r8, r2
 8001ee0:	4699      	mov	r9, r3
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <ADC_process+0x608>)
 8001ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <ADC_process+0x618>)
 8001eee:	f7fe fb93 	bl	8000618 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4649      	mov	r1, r9
 8001efa:	f7fe fcb7 	bl	800086c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe fb87 	bl	8000618 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4923      	ldr	r1, [pc, #140]	; (8001f9c <ADC_process+0x61c>)
 8001f10:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Заводской номер 001
	current_4_20mA = calculate_current(ADC_volt[0]);
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <ADC_process+0x61c>)
 8001f16:	ed93 7b00 	vldr	d7, [r3]
 8001f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1e:	eef0 0a67 	vmov.f32	s1, s15
 8001f22:	f003 f919 	bl	8005158 <calculate_current>
 8001f26:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2a:	eef0 7a60 	vmov.f32	s15, s1
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <ADC_process+0x620>)
 8001f30:	ed83 7b00 	vstr	d7, [r3]
	voltage_measure = calculate_voltage(ADC_volt[1]);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <ADC_process+0x61c>)
 8001f36:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f3e:	eef0 0a67 	vmov.f32	s1, s15
 8001f42:	f003 f975 	bl	8005230 <calculate_voltage>
 8001f46:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4a:	eef0 7a60 	vmov.f32	s15, s1
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <ADC_process+0x624>)
 8001f50:	ed83 7b00 	vstr	d7, [r3]

	Approximation_MC110(ADC_middle[3], ADC_middle[4]);
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <ADC_process+0x60c>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <ADC_process+0x60c>)
 8001f5a:	6912      	ldr	r2, [r2, #16]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 fd86 	bl	8004a70 <Approximation_MC110>
	Calculate(ADC_middle[3], ADC_middle[4]);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <ADC_process+0x60c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <ADC_process+0x60c>)
 8001f6a:	6912      	ldr	r2, [r2, #16]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fe0a 	bl	8004b88 <Calculate>

	sleep(100);
 8001f74:	2064      	movs	r0, #100	; 0x64
 8001f76:	f001 f955 	bl	8003224 <sleep>
}
 8001f7a:	bf00      	nop
 8001f7c:	3764      	adds	r7, #100	; 0x64
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f84:	20000848 	.word	0x20000848
 8001f88:	20000090 	.word	0x20000090
 8001f8c:	200020d8 	.word	0x200020d8
 8001f90:	20000088 	.word	0x20000088
 8001f94:	408f4000 	.word	0x408f4000
 8001f98:	41600000 	.word	0x41600000
 8001f9c:	200052b0 	.word	0x200052b0
 8001fa0:	200052a8 	.word	0x200052a8
 8001fa4:	20002160 	.word	0x20002160

08001fa8 <Buttons_init>:
//--------------------------------------------------------------------------------------------------------
//									Инициализация расширителя
//--------------------------------------------------------------------------------------------------------

void Buttons_init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af02      	add	r7, sp, #8
	uint8_t tx_buf[2], rx_buf[2];

	TURN_ON_ADC_POWER();
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2140      	movs	r1, #64	; 0x40
 8001fb2:	4842      	ldr	r0, [pc, #264]	; (80020bc <Buttons_init+0x114>)
 8001fb4:	f008 f8f0 	bl	800a198 <HAL_GPIO_WritePin>
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	4840      	ldr	r0, [pc, #256]	; (80020c0 <Buttons_init+0x118>)
 8001fc0:	f008 f8ea 	bl	800a198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	483e      	ldr	r0, [pc, #248]	; (80020c4 <Buttons_init+0x11c>)
 8001fca:	f008 f8e5 	bl	800a198 <HAL_GPIO_WritePin>


	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 8001fce:	2303      	movs	r3, #3
 8001fd0:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x18;
 8001fd2:	2318      	movs	r3, #24
 8001fd4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 1000);
 8001fd6:	1d3a      	adds	r2, r7, #4
 8001fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	4839      	ldr	r0, [pc, #228]	; (80020c8 <Buttons_init+0x120>)
 8001fe4:	f008 f9a2 	bl	800a32c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_O_STT0; // rd from out-reg port0
 8001fe8:	2302      	movs	r3, #2
 8001fea:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8001fec:	1d3a      	adds	r2, r7, #4
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	4833      	ldr	r0, [pc, #204]	; (80020c8 <Buttons_init+0x120>)
 8001ffa:	f008 f997 	bl	800a32c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, &rx_buf[0], 0x02, 1000);
 8001ffe:	463a      	mov	r2, r7
 8002000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2302      	movs	r3, #2
 8002008:	2141      	movs	r1, #65	; 0x41
 800200a:	482f      	ldr	r0, [pc, #188]	; (80020c8 <Buttons_init+0x120>)
 800200c:	f008 fa82 	bl	800a514 <HAL_I2C_Master_Receive>

	tx_buf[0] = PI4IOE5V6416_REG_IO_DIR1; // set pin dir to be out
 8002010:	2307      	movs	r3, #7
 8002012:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0x07;
 8002014:	2307      	movs	r3, #7
 8002016:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002018:	1d3a      	adds	r2, r7, #4
 800201a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2302      	movs	r3, #2
 8002022:	2140      	movs	r1, #64	; 0x40
 8002024:	4828      	ldr	r0, [pc, #160]	; (80020c8 <Buttons_init+0x120>)
 8002026:	f008 f981 	bl	800a32c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD0; // pull-up port0
 800202a:	2348      	movs	r3, #72	; 0x48
 800202c:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800202e:	23ff      	movs	r3, #255	; 0xff
 8002030:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002032:	1d3a      	adds	r2, r7, #4
 8002034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2302      	movs	r3, #2
 800203c:	2140      	movs	r1, #64	; 0x40
 800203e:	4822      	ldr	r0, [pc, #136]	; (80020c8 <Buttons_init+0x120>)
 8002040:	f008 f974 	bl	800a32c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_UD1; // pull-up port1
 8002044:	2349      	movs	r3, #73	; 0x49
 8002046:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002048:	23ff      	movs	r3, #255	; 0xff
 800204a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 800204c:	1d3a      	adds	r2, r7, #4
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2302      	movs	r3, #2
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	481b      	ldr	r0, [pc, #108]	; (80020c8 <Buttons_init+0x120>)
 800205a:	f008 f967 	bl	800a32c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN0; // pull-up enable on port0
 800205e:	2346      	movs	r3, #70	; 0x46
 8002060:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 8002062:	23ff      	movs	r3, #255	; 0xff
 8002064:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002066:	1d3a      	adds	r2, r7, #4
 8002068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2302      	movs	r3, #2
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	4815      	ldr	r0, [pc, #84]	; (80020c8 <Buttons_init+0x120>)
 8002074:	f008 f95a 	bl	800a32c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_PL_EN1; // pull-up enable on port1
 8002078:	2347      	movs	r3, #71	; 0x47
 800207a:	713b      	strb	r3, [r7, #4]
	tx_buf[1] = 0xFF;
 800207c:	23ff      	movs	r3, #255	; 0xff
 800207e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, (uint8_t *)&tx_buf[0], 0x02, 1000);
 8002080:	1d3a      	adds	r2, r7, #4
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2302      	movs	r3, #2
 800208a:	2140      	movs	r1, #64	; 0x40
 800208c:	480e      	ldr	r0, [pc, #56]	; (80020c8 <Buttons_init+0x120>)
 800208e:	f008 f94d 	bl	800a32c <HAL_I2C_Master_Transmit>

	tx_buf[0] = PI4IOE5V6416_REG_I_MNTR0; // rd pins state port0
 8002092:	2300      	movs	r3, #0
 8002094:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x01, 1000);
 8002096:	1d3a      	adds	r2, r7, #4
 8002098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	4809      	ldr	r0, [pc, #36]	; (80020c8 <Buttons_init+0x120>)
 80020a4:	f008 f942 	bl	800a32c <HAL_I2C_Master_Transmit>

	LED(0,0,0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f863 	bl	8002178 <LED>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	48000800 	.word	0x48000800
 80020c0:	48000c00 	.word	0x48000c00
 80020c4:	48000400 	.word	0x48000400
 80020c8:	2000790c 	.word	0x2000790c

080020cc <BLueTooth_Configuration>:
//--------------------------------------------------------------------------------------------------------
//										Выбор режима работы блютус
//--------------------------------------------------------------------------------------------------------

void BLueTooth_Configuration(uint8_t state)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer[4], aRxBuffer[4];
	uint8_t BlueTooth_State = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
	// Читаем порт P1
	aTxBuffer[0] = 0x01;
 80020da:	2301      	movs	r3, #1
 80020dc:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, aTxBuffer, 1, 1000);
 80020de:	f107 0210 	add.w	r2, r7, #16
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	4821      	ldr	r0, [pc, #132]	; (8002174 <BLueTooth_Configuration+0xa8>)
 80020ee:	f008 f91d 	bl	800a32c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2141      	movs	r1, #65	; 0x41
 8002100:	481c      	ldr	r0, [pc, #112]	; (8002174 <BLueTooth_Configuration+0xa8>)
 8002102:	f008 fa07 	bl	800a514 <HAL_I2C_Master_Receive>
	BlueTooth_State=aRxBuffer[0];
 8002106:	7b3b      	ldrb	r3, [r7, #12]
 8002108:	75fb      	strb	r3, [r7, #23]

	// Очищаем P1_3 и P1_4
	BlueTooth_State&=0xE7;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	f023 0318 	bic.w	r3, r3, #24
 8002110:	75fb      	strb	r3, [r7, #23]
	// Записываем значение config
	BlueTooth_State|=(state<<4);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	b25a      	sxtb	r2, r3
 8002118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800211c:	4313      	orrs	r3, r2
 800211e:	b25b      	sxtb	r3, r3
 8002120:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 8002122:	2303      	movs	r3, #3
 8002124:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 800212a:	f107 0210 	add.w	r2, r7, #16
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2302      	movs	r3, #2
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	480e      	ldr	r0, [pc, #56]	; (8002174 <BLueTooth_Configuration+0xa8>)
 800213a:	f008 f8f7 	bl	800a32c <HAL_I2C_Master_Transmit>

	delay_ms(500);
 800213e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002142:	f001 f887 	bl	8003254 <delay_ms>

	// Reset
	BlueTooth_State|=(0x01<<5);
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	75fb      	strb	r3, [r7, #23]

	// Записываем состояние в порт
	aTxBuffer[0] = PI4IOE5V6416_REG_O_STT1;
 800214e:	2303      	movs	r3, #3
 8002150:	743b      	strb	r3, [r7, #16]
	aTxBuffer[1] = BlueTooth_State;
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer[0], 0x02, 1000);
 8002156:	f107 0210 	add.w	r2, r7, #16
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2302      	movs	r3, #2
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <BLueTooth_Configuration+0xa8>)
 8002166:	f008 f8e1 	bl	800a32c <HAL_I2C_Master_Transmit>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000790c 	.word	0x2000790c

08002178 <LED>:
//--------------------------------------------------------------------------------------------------------
//											Управление светодиодом
//--------------------------------------------------------------------------------------------------------

void LED(uint8_t RED, uint8_t GREEN, uint8_t BLUE)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	460b      	mov	r3, r1
 8002184:	71bb      	strb	r3, [r7, #6]
 8002186:	4613      	mov	r3, r2
 8002188:	717b      	strb	r3, [r7, #5]
	uint8_t color=0;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_buf[4];
	color=(RED<<7)+(GREEN<<6)+(BLUE<<5)+0x1F;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	b2da      	uxtb	r2, r3
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b2da      	uxtb	r2, r3
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	331f      	adds	r3, #31
 80021aa:	73fb      	strb	r3, [r7, #15]
	color=~color;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
	tx_buf[0] = PI4IOE5V6416_REG_O_STT1; // wr to out-reg  = 0x18
 80021b2:	2303      	movs	r3, #3
 80021b4:	723b      	strb	r3, [r7, #8]
	tx_buf[1] = color;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &tx_buf[0], 0x02, 10000);
 80021ba:	f107 0208 	add.w	r2, r7, #8
 80021be:	f242 7310 	movw	r3, #10000	; 0x2710
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2302      	movs	r3, #2
 80021c6:	2140      	movs	r1, #64	; 0x40
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <LED+0x60>)
 80021ca:	f008 f8af 	bl	800a32c <HAL_I2C_Master_Transmit>
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000790c 	.word	0x2000790c

080021dc <Button_S1_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										ON / OFF
//--------------------------------------------------------------------------------------------------------

void Button_S1_press_callback(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	if(OnOffCntr==-1)
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <Button_S1_press_callback+0x34>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d10f      	bne.n	800220c <Button_S1_press_callback+0x30>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)==1)
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <Button_S1_press_callback+0x38>)
 80021f0:	f007 ffba 	bl	800a168 <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <Button_S1_press_callback+0x30>
		{
			old_active_string=0xFF; OnOffCntr=on_off_time; screen=Off_screen;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <Button_S1_press_callback+0x3c>)
 80021fc:	22ff      	movs	r2, #255	; 0xff
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <Button_S1_press_callback+0x34>)
 8002202:	22c8      	movs	r2, #200	; 0xc8
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <Button_S1_press_callback+0x40>)
 8002208:	2203      	movs	r2, #3
 800220a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000004a 	.word	0x2000004a
 8002214:	48001000 	.word	0x48001000
 8002218:	20000398 	.word	0x20000398
 800221c:	2000004c 	.word	0x2000004c

08002220 <Button_S2_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										P zero
//--------------------------------------------------------------------------------------------------------

void Button_S2_press_callback(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <Button_S2_press_callback+0x70>)
 8002226:	2200      	movs	r2, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <Button_S2_press_callback+0x70>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <Button_S2_press_callback+0x74>)
 8002230:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <Button_S2_press_callback+0x78>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <Button_S2_press_callback+0x78>)
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <Button_S2_press_callback+0x7c>)
 800223e:	701a      	strb	r2, [r3, #0]
	// Таррирование давления
	if(Pressure_zero==0)Pressure_zero=Pressure;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f7fe fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <Button_S2_press_callback+0x46>
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Button_S2_press_callback+0x84>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	4910      	ldr	r1, [pc, #64]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002260:	e9c1 2300 	strd	r2, r3, [r1]
 8002264:	e006      	b.n	8002274 <Button_S2_press_callback+0x54>
	else Pressure_zero=0;
 8002266:	490e      	ldr	r1, [pc, #56]	; (80022a0 <Button_S2_press_callback+0x80>)
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9c1 2300 	strd	r2, r3, [r1]

	// Обнуление АЦП
	if(zero_ADC[0]==0)zero_ADC[0]=ADC_middle[3];
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <Button_S2_press_callback+0x66>
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <Button_S2_press_callback+0x8c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002282:	6013      	str	r3, [r2, #0]
		else zero_ADC[0]=0;

}
 8002284:	e002      	b.n	800228c <Button_S2_press_callback+0x6c>
		else zero_ADC[0]=0;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <Button_S2_press_callback+0x88>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20001c3e 	.word	0x20001c3e
 8002294:	20001c3c 	.word	0x20001c3c
 8002298:	20001c41 	.word	0x20001c41
 800229c:	20001c40 	.word	0x20001c40
 80022a0:	20000870 	.word	0x20000870
 80022a4:	20002280 	.word	0x20002280
 80022a8:	20002268 	.word	0x20002268
 80022ac:	200020d8 	.word	0x200020d8

080022b0 <Button_S3_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E zero
//--------------------------------------------------------------------------------------------------------

void Button_S3_press_callback(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <Button_S3_press_callback+0x8c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <Button_S3_press_callback+0x8c>)
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <Button_S3_press_callback+0x90>)
 80022c0:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <Button_S3_press_callback+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <Button_S3_press_callback+0x94>)
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <Button_S3_press_callback+0x98>)
 80022ce:	701a      	strb	r2, [r3, #0]
	// Таррирование электрики
	if(Electric_zero==0)
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <Button_S3_press_callback+0x9c>)
 80022d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f7fe fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <Button_S3_press_callback+0x78>
	switch(E_fun)
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <Button_S3_press_callback+0xa0>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d014      	beq.n	800231a <Button_S3_press_callback+0x6a>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	dc21      	bgt.n	8002338 <Button_S3_press_callback+0x88>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <Button_S3_press_callback+0x4e>
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d007      	beq.n	800230c <Button_S3_press_callback+0x5c>
		case 0: Electric_zero=Test_Pressure; break;
		case 1: Electric_zero=current_4_20mA; break;
		case 2: Electric_zero=voltage_measure; break;
	}
	else Electric_zero=0;
}
 80022fc:	e01c      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 0: Electric_zero=Test_Pressure; break;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <Button_S3_press_callback+0xa4>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	4911      	ldr	r1, [pc, #68]	; (800234c <Button_S3_press_callback+0x9c>)
 8002306:	e9c1 2300 	strd	r2, r3, [r1]
 800230a:	e015      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 1: Electric_zero=current_4_20mA; break;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <Button_S3_press_callback+0xa8>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	490e      	ldr	r1, [pc, #56]	; (800234c <Button_S3_press_callback+0x9c>)
 8002314:	e9c1 2300 	strd	r2, r3, [r1]
 8002318:	e00e      	b.n	8002338 <Button_S3_press_callback+0x88>
		case 2: Electric_zero=voltage_measure; break;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <Button_S3_press_callback+0xac>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	490a      	ldr	r1, [pc, #40]	; (800234c <Button_S3_press_callback+0x9c>)
 8002322:	e9c1 2300 	strd	r2, r3, [r1]
 8002326:	e007      	b.n	8002338 <Button_S3_press_callback+0x88>
	else Electric_zero=0;
 8002328:	4908      	ldr	r1, [pc, #32]	; (800234c <Button_S3_press_callback+0x9c>)
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002336:	e7ff      	b.n	8002338 <Button_S3_press_callback+0x88>
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001c3e 	.word	0x20001c3e
 8002340:	20001c3c 	.word	0x20001c3c
 8002344:	20001c41 	.word	0x20001c41
 8002348:	20001c40 	.word	0x20001c40
 800234c:	20000878 	.word	0x20000878
 8002350:	20000898 	.word	0x20000898
 8002354:	20002288 	.word	0x20002288
 8002358:	200052a8 	.word	0x200052a8
 800235c:	20002160 	.word	0x20002160

08002360 <Button_S4_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											ENTER
//--------------------------------------------------------------------------------------------------------

void Button_S4_press_callback(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	 switch(screen)
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <Button_S4_press_callback+0x6c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3b04      	subs	r3, #4
 800236a:	2b05      	cmp	r3, #5
 800236c:	d81d      	bhi.n	80023aa <Button_S4_press_callback+0x4a>
 800236e:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <Button_S4_press_callback+0x14>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	08002393 	.word	0x08002393
 8002378:	080023a5 	.word	0x080023a5
 800237c:	0800239f 	.word	0x0800239f
 8002380:	080023ab 	.word	0x080023ab
 8002384:	0800238d 	.word	0x0800238d
 8002388:	08002399 	.word	0x08002399
	 {
	 	 case Parameter_screen: Parameter_screen_S4(); break;
 800238c:	f016 fa4c 	bl	8018828 <Parameter_screen_S4>
 8002390:	e00b      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case Option_screen: Option_screen_S4(); break;
 8002392:	f016 fb17 	bl	80189c4 <Option_screen_S4>
 8002396:	e008      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case RTC_screen: RTC_screen_S4(); break;
 8002398:	f015 fece 	bl	8018138 <RTC_screen_S4>
 800239c:	e005      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case ADC_options_screen: ADC_options_screen_S4(); break;
 800239e:	f014 fbb5 	bl	8016b0c <ADC_options_screen_S4>
 80023a2:	e002      	b.n	80023aa <Button_S4_press_callback+0x4a>
	 	 case Display_options_screen: Display_options_screen_S4(); break;
 80023a4:	f014 feb4 	bl	8017110 <Display_options_screen_S4>
 80023a8:	bf00      	nop
	 }
	 off_sec=off_min=0;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <Button_S4_press_callback+0x70>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <Button_S4_press_callback+0x70>)
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <Button_S4_press_callback+0x74>)
 80023b6:	801a      	strh	r2, [r3, #0]
	 light_sec=light_min=0;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <Button_S4_press_callback+0x78>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <Button_S4_press_callback+0x78>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <Button_S4_press_callback+0x7c>)
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000004c 	.word	0x2000004c
 80023d0:	20001c3e 	.word	0x20001c3e
 80023d4:	20001c3c 	.word	0x20001c3c
 80023d8:	20001c41 	.word	0x20001c41
 80023dc:	20001c40 	.word	0x20001c40

080023e0 <Button_S5_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											FORWARD
//--------------------------------------------------------------------------------------------------------

void Button_S5_press_callback(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	switch(screen)
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <Button_S5_press_callback+0x78>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3b05      	subs	r3, #5
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	d824      	bhi.n	8002438 <Button_S5_press_callback+0x58>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <Button_S5_press_callback+0x14>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	0800241b 	.word	0x0800241b
 80023f8:	08002415 	.word	0x08002415
 80023fc:	08002421 	.word	0x08002421
 8002400:	08002439 	.word	0x08002439
 8002404:	08002427 	.word	0x08002427
 8002408:	0800242d 	.word	0x0800242d
 800240c:	08002439 	.word	0x08002439
 8002410:	08002433 	.word	0x08002433
	{
		case ADC_options_screen: ADC_options_screen_S5(); break;
 8002414:	f014 fc4c 	bl	8016cb0 <ADC_options_screen_S5>
 8002418:	e00e      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S5(); break;
 800241a:	f014 fee5 	bl	80171e8 <Display_options_screen_S5>
 800241e:	e00b      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S5(); break;
 8002420:	f015 f960 	bl	80176e4 <Measure_options_screen_S5>
 8002424:	e008      	b.n	8002438 <Button_S5_press_callback+0x58>
		case RTC_screen: RTC_screen_S5(); break;
 8002426:	f015 fd73 	bl	8017f10 <RTC_screen_S5>
 800242a:	e005      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S5(); break;
 800242c:	f014 fd1e 	bl	8016e6c <Auto_Off_option_screen_S5>
 8002430:	e002      	b.n	8002438 <Button_S5_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S5(); break;
 8002432:	f016 f8b9 	bl	80185a8 <Logging_options_screen_S5>
 8002436:	bf00      	nop
	}
	off_sec=off_min=0;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <Button_S5_press_callback+0x7c>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <Button_S5_press_callback+0x7c>)
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <Button_S5_press_callback+0x80>)
 8002444:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <Button_S5_press_callback+0x84>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <Button_S5_press_callback+0x84>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <Button_S5_press_callback+0x88>)
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000004c 	.word	0x2000004c
 800245c:	20001c3e 	.word	0x20001c3e
 8002460:	20001c3c 	.word	0x20001c3c
 8002464:	20001c41 	.word	0x20001c41
 8002468:	20001c40 	.word	0x20001c40

0800246c <Button_S6_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											UP
//--------------------------------------------------------------------------------------------------------

void Button_S6_press_callback(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	switch(screen)
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <Button_S6_press_callback+0x84>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b04      	subs	r3, #4
 8002476:	2b08      	cmp	r3, #8
 8002478:	d829      	bhi.n	80024ce <Button_S6_press_callback+0x62>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <Button_S6_press_callback+0x14>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	080024ab 	.word	0x080024ab
 8002484:	080024b7 	.word	0x080024b7
 8002488:	080024b1 	.word	0x080024b1
 800248c:	080024bd 	.word	0x080024bd
 8002490:	080024a5 	.word	0x080024a5
 8002494:	080024c3 	.word	0x080024c3
 8002498:	080024cf 	.word	0x080024cf
 800249c:	080024cf 	.word	0x080024cf
 80024a0:	080024c9 	.word	0x080024c9
	{
		case Parameter_screen: Parameter_screen_S6(); break;
 80024a4:	f016 fa1c 	bl	80188e0 <Parameter_screen_S6>
 80024a8:	e011      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Option_screen: Option_screen_S6(); break;
 80024aa:	f016 fa75 	bl	8018998 <Option_screen_S6>
 80024ae:	e00e      	b.n	80024ce <Button_S6_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S6(); break;
 80024b0:	f014 faee 	bl	8016a90 <ADC_options_screen_S6>
 80024b4:	e00b      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S6(); break;
 80024b6:	f014 fe03 	bl	80170c0 <Display_options_screen_S6>
 80024ba:	e008      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S6(); break;
 80024bc:	f015 f86e 	bl	801759c <Measure_options_screen_S6>
 80024c0:	e005      	b.n	80024ce <Button_S6_press_callback+0x62>
		case RTC_screen: RTC_screen_S6(); break;
 80024c2:	f015 fd4d 	bl	8017f60 <RTC_screen_S6>
 80024c6:	e002      	b.n	80024ce <Button_S6_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S6(); break;
 80024c8:	f015 ffba 	bl	8018440 <Logging_options_screen_S6>
 80024cc:	bf00      	nop
	}
	off_sec=off_min=0;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <Button_S6_press_callback+0x88>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <Button_S6_press_callback+0x88>)
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <Button_S6_press_callback+0x8c>)
 80024da:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <Button_S6_press_callback+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <Button_S6_press_callback+0x90>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <Button_S6_press_callback+0x94>)
 80024e8:	701a      	strb	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000004c 	.word	0x2000004c
 80024f4:	20001c3e 	.word	0x20001c3e
 80024f8:	20001c3c 	.word	0x20001c3c
 80024fc:	20001c41 	.word	0x20001c41
 8002500:	20001c40 	.word	0x20001c40

08002504 <Button_S7_press_callback>:
//--------------------------------------------------------------------------------------------------------
//										DOWN
//--------------------------------------------------------------------------------------------------------

void Button_S7_press_callback(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	switch(screen)
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <Button_S7_press_callback+0x84>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3b04      	subs	r3, #4
 800250e:	2b08      	cmp	r3, #8
 8002510:	d829      	bhi.n	8002566 <Button_S7_press_callback+0x62>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <Button_S7_press_callback+0x14>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002543 	.word	0x08002543
 800251c:	0800254f 	.word	0x0800254f
 8002520:	08002549 	.word	0x08002549
 8002524:	08002555 	.word	0x08002555
 8002528:	0800253d 	.word	0x0800253d
 800252c:	0800255b 	.word	0x0800255b
 8002530:	08002567 	.word	0x08002567
 8002534:	08002567 	.word	0x08002567
 8002538:	08002561 	.word	0x08002561
	{
		case Parameter_screen: Parameter_screen_S7(); break;
 800253c:	f016 f9b8 	bl	80188b0 <Parameter_screen_S7>
 8002540:	e011      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Option_screen: Option_screen_S7(); break;
 8002542:	f016 fa11 	bl	8018968 <Option_screen_S7>
 8002546:	e00e      	b.n	8002566 <Button_S7_press_callback+0x62>
		case ADC_options_screen: ADC_options_screen_S7(); break;
 8002548:	f014 fab6 	bl	8016ab8 <ADC_options_screen_S7>
 800254c:	e00b      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Display_options_screen: Display_options_screen_S7(); break;
 800254e:	f014 fdcb 	bl	80170e8 <Display_options_screen_S7>
 8002552:	e008      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Measure_options_screen: Measure_options_screen_S7(); break;
 8002554:	f015 f836 	bl	80175c4 <Measure_options_screen_S7>
 8002558:	e005      	b.n	8002566 <Button_S7_press_callback+0x62>
		case RTC_screen: RTC_screen_S7(); break;
 800255a:	f015 fd77 	bl	801804c <RTC_screen_S7>
 800255e:	e002      	b.n	8002566 <Button_S7_press_callback+0x62>
		case Logging_options_screen: Logging_options_screen_S7(); break;
 8002560:	f015 ff82 	bl	8018468 <Logging_options_screen_S7>
 8002564:	bf00      	nop
	}
	off_sec=off_min=0;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <Button_S7_press_callback+0x88>)
 8002568:	2200      	movs	r2, #0
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <Button_S7_press_callback+0x88>)
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <Button_S7_press_callback+0x8c>)
 8002572:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <Button_S7_press_callback+0x90>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <Button_S7_press_callback+0x90>)
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <Button_S7_press_callback+0x94>)
 8002580:	701a      	strb	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000004c 	.word	0x2000004c
 800258c:	20001c3e 	.word	0x20001c3e
 8002590:	20001c3c 	.word	0x20001c3c
 8002594:	20001c41 	.word	0x20001c41
 8002598:	20001c40 	.word	0x20001c40

0800259c <Button_S8_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											BACKWARD
//--------------------------------------------------------------------------------------------------------

void Button_S8_press_callback(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	switch(screen)
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <Button_S8_press_callback+0x78>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	3b05      	subs	r3, #5
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	d824      	bhi.n	80025f4 <Button_S8_press_callback+0x58>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <Button_S8_press_callback+0x14>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025d7 	.word	0x080025d7
 80025b4:	080025d1 	.word	0x080025d1
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025f5 	.word	0x080025f5
 80025c0:	080025e3 	.word	0x080025e3
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	080025f5 	.word	0x080025f5
 80025cc:	080025ef 	.word	0x080025ef
	{
		case ADC_options_screen: ADC_options_screen_S8(); break;
 80025d0:	f014 faf2 	bl	8016bb8 <ADC_options_screen_S8>
 80025d4:	e00e      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Display_options_screen: Display_options_screen_S8(); break;
 80025d6:	f014 fdc7 	bl	8017168 <Display_options_screen_S8>
 80025da:	e00b      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Measure_options_screen: Measure_options_screen_S8(); break;
 80025dc:	f015 f81c 	bl	8017618 <Measure_options_screen_S8>
 80025e0:	e008      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case RTC_screen: RTC_screen_S8(); break;
 80025e2:	f015 fca9 	bl	8017f38 <RTC_screen_S8>
 80025e6:	e005      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Auto_Off_option_screen: Auto_Off_option_screen_S8(); break;
 80025e8:	f014 fc2c 	bl	8016e44 <Auto_Off_option_screen_S8>
 80025ec:	e002      	b.n	80025f4 <Button_S8_press_callback+0x58>
		case Logging_options_screen: Logging_options_screen_S8(); break;
 80025ee:	f015 ff65 	bl	80184bc <Logging_options_screen_S8>
 80025f2:	bf00      	nop
	}
	off_sec=off_min=0;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <Button_S8_press_callback+0x7c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <Button_S8_press_callback+0x7c>)
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <Button_S8_press_callback+0x80>)
 8002600:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <Button_S8_press_callback+0x84>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <Button_S8_press_callback+0x84>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <Button_S8_press_callback+0x88>)
 800260e:	701a      	strb	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000004c 	.word	0x2000004c
 8002618:	20001c3e 	.word	0x20001c3e
 800261c:	20001c3c 	.word	0x20001c3c
 8002620:	20001c41 	.word	0x20001c41
 8002624:	20001c40 	.word	0x20001c40

08002628 <Button_S9_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											MENU
//--------------------------------------------------------------------------------------------------------

void Button_S9_press_callback(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	switch(screen)
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <Button_S9_press_callback+0xa0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	3b01      	subs	r3, #1
 8002632:	2b0b      	cmp	r3, #11
 8002634:	d838      	bhi.n	80026a8 <Button_S9_press_callback+0x80>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <Button_S9_press_callback+0x14>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800268b 	.word	0x0800268b
 8002640:	080026a9 	.word	0x080026a9
 8002644:	080026a9 	.word	0x080026a9
 8002648:	08002673 	.word	0x08002673
 800264c:	0800267f 	.word	0x0800267f
 8002650:	08002679 	.word	0x08002679
 8002654:	08002685 	.word	0x08002685
 8002658:	0800266d 	.word	0x0800266d
 800265c:	08002691 	.word	0x08002691
 8002660:	08002697 	.word	0x08002697
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026a3 	.word	0x080026a3
	{
		case Parameter_screen: Parameter_screen_S9(); break;
 800266c:	f016 f8c6 	bl	80187fc <Parameter_screen_S9>
 8002670:	e01a      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Option_screen: Option_screen_S9(); break;
 8002672:	f016 f967 	bl	8018944 <Option_screen_S9>
 8002676:	e017      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case ADC_options_screen: ADC_options_screen_S9(); break;
 8002678:	f014 fa32 	bl	8016ae0 <ADC_options_screen_S9>
 800267c:	e014      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Display_options_screen: Display_options_screen_S9(); break;
 800267e:	f014 fd09 	bl	8017094 <Display_options_screen_S9>
 8002682:	e011      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Measure_options_screen: Measure_options_screen_S9(); break;
 8002684:	f014 ffb2 	bl	80175ec <Measure_options_screen_S9>
 8002688:	e00e      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Main_screen: Main_screen_S9(); break;
 800268a:	f015 f987 	bl	801799c <Main_screen_S9>
 800268e:	e00b      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case RTC_screen: RTC_screen_S9(); break;
 8002690:	f015 fc28 	bl	8017ee4 <RTC_screen_S9>
 8002694:	e008      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Auto_Off_option_screen: Auto_Off_option_screen_S9(); break;
 8002696:	f014 fbbf 	bl	8016e18 <Auto_Off_option_screen_S9>
 800269a:	e005      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case About_options_screen: About_options_screen_S9(); break;
 800269c:	f015 fde8 	bl	8018270 <About_options_screen_S9>
 80026a0:	e002      	b.n	80026a8 <Button_S9_press_callback+0x80>
		case Logging_options_screen: Logging_options_screen_S9(); break;
 80026a2:	f015 fef5 	bl	8018490 <Logging_options_screen_S9>
 80026a6:	bf00      	nop
	}
	off_sec=off_min=0;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <Button_S9_press_callback+0xa4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <Button_S9_press_callback+0xa4>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <Button_S9_press_callback+0xa8>)
 80026b4:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <Button_S9_press_callback+0xac>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <Button_S9_press_callback+0xac>)
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <Button_S9_press_callback+0xb0>)
 80026c2:	701a      	strb	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	2000004c 	.word	0x2000004c
 80026cc:	20001c3e 	.word	0x20001c3e
 80026d0:	20001c3c 	.word	0x20001c3c
 80026d4:	20001c41 	.word	0x20001c41
 80026d8:	20001c40 	.word	0x20001c40

080026dc <Button_S10_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											E func
//--------------------------------------------------------------------------------------------------------

void Button_S10_press_callback(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	off_sec=off_min=0;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <Button_S10_press_callback+0x54>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <Button_S10_press_callback+0x54>)
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <Button_S10_press_callback+0x58>)
 80026ec:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <Button_S10_press_callback+0x5c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <Button_S10_press_callback+0x5c>)
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <Button_S10_press_callback+0x60>)
 80026fa:	701a      	strb	r2, [r3, #0]
	// Переключение отображения второй строки
	if(++E_fun==3)E_fun=0;
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <Button_S10_press_callback+0x64>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <Button_S10_press_callback+0x64>)
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <Button_S10_press_callback+0x64>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d102      	bne.n	8002716 <Button_S10_press_callback+0x3a>
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <Button_S10_press_callback+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
	Electric_zero=0;
 8002716:	490b      	ldr	r1, [pc, #44]	; (8002744 <Button_S10_press_callback+0x68>)
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20001c3e 	.word	0x20001c3e
 8002734:	20001c3c 	.word	0x20001c3c
 8002738:	20001c41 	.word	0x20001c41
 800273c:	20001c40 	.word	0x20001c40
 8002740:	20000898 	.word	0x20000898
 8002744:	20000878 	.word	0x20000878

08002748 <Button_S11_press_callback>:
//--------------------------------------------------------------------------------------------------------
//											P units
//--------------------------------------------------------------------------------------------------------

void Button_S11_press_callback(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	if(screen==Main_screen) screen=Test_screen;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <Button_S11_press_callback+0x50>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d103      	bne.n	800275c <Button_S11_press_callback+0x14>
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <Button_S11_press_callback+0x50>)
 8002756:	2202      	movs	r2, #2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e00a      	b.n	8002772 <Button_S11_press_callback+0x2a>
	else if(screen==Test_screen)screen=ADC_options_screen;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <Button_S11_press_callback+0x50>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d103      	bne.n	800276c <Button_S11_press_callback+0x24>
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <Button_S11_press_callback+0x50>)
 8002766:	2206      	movs	r2, #6
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e002      	b.n	8002772 <Button_S11_press_callback+0x2a>
	else screen=Main_screen;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <Button_S11_press_callback+0x50>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]

	off_sec=off_min=0;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <Button_S11_press_callback+0x54>)
 8002774:	2200      	movs	r2, #0
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <Button_S11_press_callback+0x54>)
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <Button_S11_press_callback+0x58>)
 800277e:	801a      	strh	r2, [r3, #0]
	light_sec=light_min=0;
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <Button_S11_press_callback+0x5c>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <Button_S11_press_callback+0x5c>)
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <Button_S11_press_callback+0x60>)
 800278c:	701a      	strb	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	2000004c 	.word	0x2000004c
 800279c:	20001c3e 	.word	0x20001c3e
 80027a0:	20001c3c 	.word	0x20001c3c
 80027a4:	20001c41 	.word	0x20001c41
 80027a8:	20001c40 	.word	0x20001c40

080027ac <Buttons_process>:
//--------------------------------------------------------------------------------------------------------
//											Обработчик кнопок
//--------------------------------------------------------------------------------------------------------

void Buttons_process(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
	uint16_t keypad = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	81fb      	strh	r3, [r7, #14]
	uint8_t aTxBuffer[4], aRxBuffer[4];

	aTxBuffer[0] = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer, 1, 1000);
 80027ba:	f107 0208 	add.w	r2, r7, #8
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	48ac      	ldr	r0, [pc, #688]	; (8002a7c <Buttons_process+0x2d0>)
 80027ca:	f007 fdaf 	bl	800a32c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 80027ce:	1d3a      	adds	r2, r7, #4
 80027d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	2141      	movs	r1, #65	; 0x41
 80027da:	48a8      	ldr	r0, [pc, #672]	; (8002a7c <Buttons_process+0x2d0>)
 80027dc:	f007 fe9a 	bl	800a514 <HAL_I2C_Master_Receive>
	keypad=aRxBuffer[0];
 80027e0:	793b      	ldrb	r3, [r7, #4]
 80027e2:	81fb      	strh	r3, [r7, #14]
	keypad<<=8;
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	81fb      	strh	r3, [r7, #14]
	aTxBuffer[0] = 0x01;
 80027ea:	2301      	movs	r3, #1
 80027ec:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, PI4IOE5V6416_WR, &aTxBuffer, 1, 1000);
 80027ee:	f107 0208 	add.w	r2, r7, #8
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2301      	movs	r3, #1
 80027fa:	2140      	movs	r1, #64	; 0x40
 80027fc:	489f      	ldr	r0, [pc, #636]	; (8002a7c <Buttons_process+0x2d0>)
 80027fe:	f007 fd95 	bl	800a32c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, PI4IOE5V6416_RD, (uint8_t *)aRxBuffer, 1, 1000);
 8002802:	1d3a      	adds	r2, r7, #4
 8002804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	2141      	movs	r1, #65	; 0x41
 800280e:	489b      	ldr	r0, [pc, #620]	; (8002a7c <Buttons_process+0x2d0>)
 8002810:	f007 fe80 	bl	800a514 <HAL_I2C_Master_Receive>
	keypad+=(aRxBuffer[0]&0x07);
 8002814:	793b      	ldrb	r3, [r7, #4]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	b29a      	uxth	r2, r3
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	4413      	add	r3, r2
 8002822:	81fb      	strh	r3, [r7, #14]

	keypad_code=keypad;
 8002824:	4a96      	ldr	r2, [pc, #600]	; (8002a80 <Buttons_process+0x2d4>)
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	8013      	strh	r3, [r2, #0]
	switch(keypad)
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	f64f 7207 	movw	r2, #65287	; 0xff07
 8002830:	4293      	cmp	r3, r2
 8002832:	f000 80f3 	beq.w	8002a1c <Buttons_process+0x270>
 8002836:	f64f 7207 	movw	r2, #65287	; 0xff07
 800283a:	4293      	cmp	r3, r2
 800283c:	f300 80fd 	bgt.w	8002a3a <Buttons_process+0x28e>
 8002840:	f64f 6206 	movw	r2, #65030	; 0xfe06
 8002844:	4293      	cmp	r3, r2
 8002846:	f000 80bc 	beq.w	80029c2 <Buttons_process+0x216>
 800284a:	f64f 6206 	movw	r2, #65030	; 0xfe06
 800284e:	4293      	cmp	r3, r2
 8002850:	f300 80f3 	bgt.w	8002a3a <Buttons_process+0x28e>
 8002854:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002858:	4293      	cmp	r3, r2
 800285a:	f000 80c1 	beq.w	80029e0 <Buttons_process+0x234>
 800285e:	f64f 6205 	movw	r2, #65029	; 0xfe05
 8002862:	4293      	cmp	r3, r2
 8002864:	f300 80e9 	bgt.w	8002a3a <Buttons_process+0x28e>
 8002868:	f64f 6203 	movw	r2, #65027	; 0xfe03
 800286c:	4293      	cmp	r3, r2
 800286e:	f000 80c6 	beq.w	80029fe <Buttons_process+0x252>
 8002872:	f64f 6203 	movw	r2, #65027	; 0xfe03
 8002876:	4293      	cmp	r3, r2
 8002878:	f300 80df 	bgt.w	8002a3a <Buttons_process+0x28e>
 800287c:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <Buttons_process+0x13c>
 8002884:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8002888:	4293      	cmp	r3, r2
 800288a:	f300 80d6 	bgt.w	8002a3a <Buttons_process+0x28e>
 800288e:	f64f 2207 	movw	r2, #64007	; 0xfa07
 8002892:	4293      	cmp	r3, r2
 8002894:	d038      	beq.n	8002908 <Buttons_process+0x15c>
 8002896:	f64f 2207 	movw	r2, #64007	; 0xfa07
 800289a:	4293      	cmp	r3, r2
 800289c:	f300 80cd 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028a0:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d03f      	beq.n	8002928 <Buttons_process+0x17c>
 80028a8:	f24f 6207 	movw	r2, #62983	; 0xf607
 80028ac:	4293      	cmp	r3, r2
 80028ae:	f300 80c4 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028b2:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d046      	beq.n	8002948 <Buttons_process+0x19c>
 80028ba:	f64e 6207 	movw	r2, #60935	; 0xee07
 80028be:	4293      	cmp	r3, r2
 80028c0:	f300 80bb 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028c4:	f64d 6207 	movw	r2, #56839	; 0xde07
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d04d      	beq.n	8002968 <Buttons_process+0x1bc>
 80028cc:	f64d 6207 	movw	r2, #56839	; 0xde07
 80028d0:	4293      	cmp	r3, r2
 80028d2:	f300 80b2 	bgt.w	8002a3a <Buttons_process+0x28e>
 80028d6:	f647 6207 	movw	r2, #32263	; 0x7e07
 80028da:	4293      	cmp	r3, r2
 80028dc:	d062      	beq.n	80029a4 <Buttons_process+0x1f8>
 80028de:	f64b 6207 	movw	r2, #48647	; 0xbe07
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04f      	beq.n	8002986 <Buttons_process+0x1da>
 80028e6:	e0a8      	b.n	8002a3a <Buttons_process+0x28e>
	{
		case 64519: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 80028e8:	2201      	movs	r2, #1
 80028ea:	2100      	movs	r1, #0
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff fc43 	bl	8002178 <LED>
 80028f2:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <Buttons_process+0x2d8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 80ab 	bne.w	8002a52 <Buttons_process+0x2a6>
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <Buttons_process+0x2d8>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	f7ff fc8d 	bl	8002220 <Button_S2_press_callback>
 8002906:	e0a4      	b.n	8002a52 <Buttons_process+0x2a6>
		case 64007: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002908:	2201      	movs	r2, #1
 800290a:	2100      	movs	r1, #0
 800290c:	2000      	movs	r0, #0
 800290e:	f7ff fc33 	bl	8002178 <LED>
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <Buttons_process+0x2d8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 809d 	bne.w	8002a56 <Buttons_process+0x2aa>
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <Buttons_process+0x2d8>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	f7ff fcc5 	bl	80022b0 <Button_S3_press_callback>
 8002926:	e096      	b.n	8002a56 <Buttons_process+0x2aa>
		case 62983: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002928:	2201      	movs	r2, #1
 800292a:	2100      	movs	r1, #0
 800292c:	2000      	movs	r0, #0
 800292e:	f7ff fc23 	bl	8002178 <LED>
 8002932:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <Buttons_process+0x2d8>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 808f 	bne.w	8002a5a <Buttons_process+0x2ae>
 800293c:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <Buttons_process+0x2d8>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	f7ff fd0d 	bl	8002360 <Button_S4_press_callback>
 8002946:	e088      	b.n	8002a5a <Buttons_process+0x2ae>
		case 60935: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002948:	2201      	movs	r2, #1
 800294a:	2100      	movs	r1, #0
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff fc13 	bl	8002178 <LED>
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <Buttons_process+0x2d8>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 8081 	bne.w	8002a5e <Buttons_process+0x2b2>
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <Buttons_process+0x2d8>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	f7ff fd3d 	bl	80023e0 <Button_S5_press_callback>
 8002966:	e07a      	b.n	8002a5e <Buttons_process+0x2b2>
		case 56839: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002968:	2201      	movs	r2, #1
 800296a:	2100      	movs	r1, #0
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fc03 	bl	8002178 <LED>
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <Buttons_process+0x2d8>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d173      	bne.n	8002a62 <Buttons_process+0x2b6>
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <Buttons_process+0x2d8>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	f7ff fd74 	bl	800246c <Button_S6_press_callback>
 8002984:	e06d      	b.n	8002a62 <Buttons_process+0x2b6>
		case 48647: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002986:	2201      	movs	r2, #1
 8002988:	2100      	movs	r1, #0
 800298a:	2000      	movs	r0, #0
 800298c:	f7ff fbf4 	bl	8002178 <LED>
 8002990:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <Buttons_process+0x2d8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d166      	bne.n	8002a66 <Buttons_process+0x2ba>
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <Buttons_process+0x2d8>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	f7ff fdb1 	bl	8002504 <Button_S7_press_callback>
 80029a2:	e060      	b.n	8002a66 <Buttons_process+0x2ba>
		case 32263: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 80029a4:	2201      	movs	r2, #1
 80029a6:	2100      	movs	r1, #0
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7ff fbe5 	bl	8002178 <LED>
 80029ae:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <Buttons_process+0x2d8>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d159      	bne.n	8002a6a <Buttons_process+0x2be>
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <Buttons_process+0x2d8>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	f7ff fdee 	bl	800259c <Button_S8_press_callback>
 80029c0:	e053      	b.n	8002a6a <Buttons_process+0x2be>
		case 65030: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 80029c2:	2201      	movs	r2, #1
 80029c4:	2100      	movs	r1, #0
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fbd6 	bl	8002178 <LED>
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <Buttons_process+0x2d8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d14c      	bne.n	8002a6e <Buttons_process+0x2c2>
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <Buttons_process+0x2d8>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	f7ff fe25 	bl	8002628 <Button_S9_press_callback>
 80029de:	e046      	b.n	8002a6e <Buttons_process+0x2c2>
		case 65029: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 80029e0:	2201      	movs	r2, #1
 80029e2:	2100      	movs	r1, #0
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff fbc7 	bl	8002178 <LED>
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <Buttons_process+0x2d8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d13f      	bne.n	8002a72 <Buttons_process+0x2c6>
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <Buttons_process+0x2d8>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	f7ff fe70 	bl	80026dc <Button_S10_press_callback>
 80029fc:	e039      	b.n	8002a72 <Buttons_process+0x2c6>
		case 65027: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 80029fe:	2201      	movs	r2, #1
 8002a00:	2100      	movs	r1, #0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff fbb8 	bl	8002178 <LED>
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <Buttons_process+0x2d8>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d132      	bne.n	8002a76 <Buttons_process+0x2ca>
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <Buttons_process+0x2d8>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	f7ff fe97 	bl	8002748 <Button_S11_press_callback>
 8002a1a:	e02c      	b.n	8002a76 <Buttons_process+0x2ca>
		case 65287: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff fba9 	bl	8002178 <LED>
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <Buttons_process+0x2d8>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12e      	bne.n	8002a8c <Buttons_process+0x2e0>
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <Buttons_process+0x2d8>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	f7ff fbd2 	bl	80021dc <Button_S1_press_callback>
 8002a38:	e028      	b.n	8002a8c <Buttons_process+0x2e0>
		default: LED(0,0,0); buttons_press=Button_State=0; break;
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fb9a 	bl	8002178 <LED>
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <Buttons_process+0x2d8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <Buttons_process+0x2dc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	e01d      	b.n	8002a8e <Buttons_process+0x2e2>
		case 64519: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S2_press_callback();} break;
 8002a52:	bf00      	nop
 8002a54:	e01b      	b.n	8002a8e <Buttons_process+0x2e2>
		case 64007: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S3_press_callback();} break;
 8002a56:	bf00      	nop
 8002a58:	e019      	b.n	8002a8e <Buttons_process+0x2e2>
		case 62983: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S4_press_callback();} break;
 8002a5a:	bf00      	nop
 8002a5c:	e017      	b.n	8002a8e <Buttons_process+0x2e2>
		case 60935: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S5_press_callback();} break;
 8002a5e:	bf00      	nop
 8002a60:	e015      	b.n	8002a8e <Buttons_process+0x2e2>
		case 56839: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S6_press_callback();} break;
 8002a62:	bf00      	nop
 8002a64:	e013      	b.n	8002a8e <Buttons_process+0x2e2>
		case 48647: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S7_press_callback();} break;
 8002a66:	bf00      	nop
 8002a68:	e011      	b.n	8002a8e <Buttons_process+0x2e2>
		case 32263: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S8_press_callback();} break;
 8002a6a:	bf00      	nop
 8002a6c:	e00f      	b.n	8002a8e <Buttons_process+0x2e2>
		case 65030: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S9_press_callback();} break;
 8002a6e:	bf00      	nop
 8002a70:	e00d      	b.n	8002a8e <Buttons_process+0x2e2>
		case 65029: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S10_press_callback();} break;
 8002a72:	bf00      	nop
 8002a74:	e00b      	b.n	8002a8e <Buttons_process+0x2e2>
		case 65027: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S11_press_callback();} break;
 8002a76:	bf00      	nop
 8002a78:	e009      	b.n	8002a8e <Buttons_process+0x2e2>
 8002a7a:	bf00      	nop
 8002a7c:	2000790c 	.word	0x2000790c
 8002a80:	20000850 	.word	0x20000850
 8002a84:	2000084b 	.word	0x2000084b
 8002a88:	2000084c 	.word	0x2000084c
		case 65287: LED(0,0,1); if(Button_State==0){Button_State=1; Button_S1_press_callback();} break; // Выключение
 8002a8c:	bf00      	nop
	}

	if((Button_State==1)&&(buttons_press<20))buttons_press++;
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <Buttons_process+0x3a0>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d109      	bne.n	8002aaa <Buttons_process+0x2fe>
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <Buttons_process+0x3a4>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	2b13      	cmp	r3, #19
 8002a9c:	d805      	bhi.n	8002aaa <Buttons_process+0x2fe>
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <Buttons_process+0x3a4>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <Buttons_process+0x3a4>)
 8002aa8:	801a      	strh	r2, [r3, #0]

	// Задержка на обработку кнопки включения
	if(OnOffCntr>on_off_time){ if(--OnOffCntr==on_off_time) OnOffCntr=-1; }
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <Buttons_process+0x3a8>)
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	2bc8      	cmp	r3, #200	; 0xc8
 8002ab2:	dd11      	ble.n	8002ad8 <Buttons_process+0x32c>
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <Buttons_process+0x3a8>)
 8002ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b21a      	sxth	r2, r3
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <Buttons_process+0x3a8>)
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <Buttons_process+0x3a8>)
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	2bc8      	cmp	r3, #200	; 0xc8
 8002ace:	d103      	bne.n	8002ad8 <Buttons_process+0x32c>
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <Buttons_process+0x3a8>)
 8002ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad6:	801a      	strh	r2, [r3, #0]
	if((OnOffCntr>0)&&(OnOffCntr<=on_off_time)) if(--OnOffCntr==0)
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <Buttons_process+0x3a8>)
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	dd2c      	ble.n	8002b3c <Buttons_process+0x390>
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <Buttons_process+0x3a8>)
 8002ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae8:	2bc8      	cmp	r3, #200	; 0xc8
 8002aea:	dc27      	bgt.n	8002b3c <Buttons_process+0x390>
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <Buttons_process+0x3a8>)
 8002aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <Buttons_process+0x3a8>)
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <Buttons_process+0x3a8>)
 8002b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d119      	bne.n	8002b3c <Buttons_process+0x390>
	{
		// Выключение
		TURN_OFF_ADC_POWER();
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <Buttons_process+0x3ac>)
 8002b0e:	f007 fb43 	bl	800a198 <HAL_GPIO_WritePin>
 8002b12:	2200      	movs	r2, #0
 8002b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b18:	4810      	ldr	r0, [pc, #64]	; (8002b5c <Buttons_process+0x3b0>)
 8002b1a:	f007 fb3d 	bl	800a198 <HAL_GPIO_WritePin>
		delay_ms(200);
 8002b1e:	20c8      	movs	r0, #200	; 0xc8
 8002b20:	f000 fb98 	bl	8003254 <delay_ms>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b24:	2200      	movs	r2, #0
 8002b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <Buttons_process+0x3ac>)
 8002b2c:	f007 fb34 	bl	800a198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_LCD_reserv_GPIO_Port, EN_LCD_reserv_Pin, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b36:	4809      	ldr	r0, [pc, #36]	; (8002b5c <Buttons_process+0x3b0>)
 8002b38:	f007 fb2e 	bl	800a198 <HAL_GPIO_WritePin>
	}

	sleep(5);
 8002b3c:	2005      	movs	r0, #5
 8002b3e:	f000 fb71 	bl	8003224 <sleep>
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000084b 	.word	0x2000084b
 8002b50:	2000084c 	.word	0x2000084c
 8002b54:	2000004a 	.word	0x2000004a
 8002b58:	48000800 	.word	0x48000800
 8002b5c:	48000c00 	.word	0x48000c00

08002b60 <Buttons_timer>:
//--------------------------------------------------------------------------------------------------------
//											Таймер долгого нажатия
//--------------------------------------------------------------------------------------------------------

void Buttons_timer(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	if(buttons_press==20)
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <Buttons_timer+0x44>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	2b14      	cmp	r3, #20
 8002b6a:	d112      	bne.n	8002b92 <Buttons_timer+0x32>
	{
		if(++buttons_ms>=1000)
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <Buttons_timer+0x48>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <Buttons_timer+0x48>)
 8002b76:	801a      	strh	r2, [r3, #0]
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <Buttons_timer+0x48>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b80:	d30a      	bcc.n	8002b98 <Buttons_timer+0x38>
		{
			buttons_ms=1000-100;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <Buttons_timer+0x48>)
 8002b84:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002b88:	801a      	strh	r2, [r3, #0]
			Button_State=0;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <Buttons_timer+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
		}
	}
	else {buttons_ms=0;}
}
 8002b90:	e002      	b.n	8002b98 <Buttons_timer+0x38>
	else {buttons_ms=0;}
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <Buttons_timer+0x48>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	801a      	strh	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000084c 	.word	0x2000084c
 8002ba8:	2000084e 	.word	0x2000084e
 8002bac:	2000084b 	.word	0x2000084b

08002bb0 <DrawImage>:
const char *PGA_name[9]={ "PGA OFF", "PGA 1", "PGA 2", "PGA 4", "PGA 8", "PGA 16", "PGA 32", "PGA 64", "PGA 128" };



void DrawImage(const uint8_t *image, uint16_t x, uint16_t y, uint8_t inverse)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	71fb      	strb	r3, [r7, #7]
	uint16_t xi = 0, yi = 0, bitnum=0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83fb      	strh	r3, [r7, #30]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	83bb      	strh	r3, [r7, #28]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	837b      	strh	r3, [r7, #26]
	uint8_t color;
	uint16_t SIZE_X, SIZE_Y;
	// Размер картинки
	SIZE_X = (uint16_t)(((image[0]<<8) + image[1])>>3);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	3201      	adds	r2, #1
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	10db      	asrs	r3, r3, #3
 8002be6:	833b      	strh	r3, [r7, #24]
	SIZE_Y = (uint16_t)(image[2]<<8) + image[3];
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3302      	adds	r3, #2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3303      	adds	r3, #3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	82fb      	strh	r3, [r7, #22]
	for(yi = 0; yi < SIZE_Y; yi++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	83bb      	strh	r3, [r7, #28]
 8002c04:	e03e      	b.n	8002c84 <DrawImage+0xd4>
	{
		for(xi = 0; xi < SIZE_X; xi++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	83fb      	strh	r3, [r7, #30]
 8002c0a:	e034      	b.n	8002c76 <DrawImage+0xc6>
		{
			for(bitnum=0;bitnum<8;bitnum++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	837b      	strh	r3, [r7, #26]
 8002c10:	e02b      	b.n	8002c6a <DrawImage+0xba>
			{
				color=((image[xi+yi*SIZE_X+4])>>(7-bitnum))&0x01;
 8002c12:	8bfa      	ldrh	r2, [r7, #30]
 8002c14:	8bbb      	ldrh	r3, [r7, #28]
 8002c16:	8b39      	ldrh	r1, [r7, #24]
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	fa42 f303 	asr.w	r3, r2, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	757b      	strb	r3, [r7, #21]
				if(color==inverse)u8g2_DrawPixel(&u8g2, x+(xi*8)+bitnum, y+yi);
 8002c3a:	7d7a      	ldrb	r2, [r7, #21]
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d110      	bne.n	8002c64 <DrawImage+0xb4>
 8002c42:	8bfb      	ldrh	r3, [r7, #30]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
 8002c50:	4413      	add	r3, r2
 8002c52:	b299      	uxth	r1, r3
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8bbb      	ldrh	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	480e      	ldr	r0, [pc, #56]	; (8002c98 <DrawImage+0xe8>)
 8002c60:	f012 ffe8 	bl	8015c34 <u8g2_DrawPixel>
			for(bitnum=0;bitnum<8;bitnum++)
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	3301      	adds	r3, #1
 8002c68:	837b      	strh	r3, [r7, #26]
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9d0      	bls.n	8002c12 <DrawImage+0x62>
		for(xi = 0; xi < SIZE_X; xi++)
 8002c70:	8bfb      	ldrh	r3, [r7, #30]
 8002c72:	3301      	adds	r3, #1
 8002c74:	83fb      	strh	r3, [r7, #30]
 8002c76:	8bfa      	ldrh	r2, [r7, #30]
 8002c78:	8b3b      	ldrh	r3, [r7, #24]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3c6      	bcc.n	8002c0c <DrawImage+0x5c>
	for(yi = 0; yi < SIZE_Y; yi++)
 8002c7e:	8bbb      	ldrh	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	83bb      	strh	r3, [r7, #28]
 8002c84:	8bba      	ldrh	r2, [r7, #28]
 8002c86:	8afb      	ldrh	r3, [r7, #22]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3bc      	bcc.n	8002c06 <DrawImage+0x56>
			}
		}
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20001fbc 	.word	0x20001fbc

08002c9c <Display_init>:




void Display_init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	u8g2_Setup_uc1638_240x160_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_cb_stm32l4);
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <Display_init+0xe8>)
 8002ca4:	4a38      	ldr	r2, [pc, #224]	; (8002d88 <Display_init+0xec>)
 8002ca6:	4939      	ldr	r1, [pc, #228]	; (8002d8c <Display_init+0xf0>)
 8002ca8:	4839      	ldr	r0, [pc, #228]	; (8002d90 <Display_init+0xf4>)
 8002caa:	f012 f8ff 	bl	8014eac <u8g2_Setup_uc1638_240x160_f>
	u8g2_InitDisplay(&u8g2);
 8002cae:	4838      	ldr	r0, [pc, #224]	; (8002d90 <Display_init+0xf4>)
 8002cb0:	f013 fd78 	bl	80167a4 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4836      	ldr	r0, [pc, #216]	; (8002d90 <Display_init+0xf4>)
 8002cb8:	f013 fd83 	bl	80167c2 <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 8002cbc:	4834      	ldr	r0, [pc, #208]	; (8002d90 <Display_init+0xf4>)
 8002cbe:	f012 f8d0 	bl	8014e62 <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002cc2:	4934      	ldr	r1, [pc, #208]	; (8002d94 <Display_init+0xf8>)
 8002cc4:	4832      	ldr	r0, [pc, #200]	; (8002d90 <Display_init+0xf4>)
 8002cc6:	f012 fea1 	bl	8015a0c <u8g2_SetFont>

	//Подсветка
	temp_light=display_brightness;
 8002cca:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <Display_init+0xfc>)
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <Display_init+0x100>)
 8002cd0:	701a      	strb	r2, [r3, #0]
	TIM2->CCR1=display_brightness;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <Display_init+0xfc>)
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

	// Контрастность
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ce2:	482f      	ldr	r0, [pc, #188]	; (8002da0 <Display_init+0x104>)
 8002ce4:	f007 fa58 	bl	800a198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2101      	movs	r1, #1
 8002cec:	482d      	ldr	r0, [pc, #180]	; (8002da4 <Display_init+0x108>)
 8002cee:	f007 fa53 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+1;
 8002cf2:	23e9      	movs	r3, #233	; 0xe9
 8002cf4:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002cf6:	463a      	mov	r2, r7
 8002cf8:	1d39      	adds	r1, r7, #4
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	4829      	ldr	r0, [pc, #164]	; (8002da8 <Display_init+0x10c>)
 8002d04:	f00b fb03 	bl	800e30e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4825      	ldr	r0, [pc, #148]	; (8002da4 <Display_init+0x108>)
 8002d0e:	f007 fa43 	bl	800a198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2101      	movs	r1, #1
 8002d16:	4823      	ldr	r0, [pc, #140]	; (8002da4 <Display_init+0x108>)
 8002d18:	f007 fa3e 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8002d1c:	2381      	movs	r3, #129	; 0x81
 8002d1e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002d20:	463a      	mov	r2, r7
 8002d22:	1d39      	adds	r1, r7, #4
 8002d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	481e      	ldr	r0, [pc, #120]	; (8002da8 <Display_init+0x10c>)
 8002d2e:	f00b faee 	bl	800e30e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8002d32:	2201      	movs	r2, #1
 8002d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d38:	4819      	ldr	r0, [pc, #100]	; (8002da0 <Display_init+0x104>)
 8002d3a:	f007 fa2d 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <Display_init+0x110>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	337d      	adds	r3, #125	; 0x7d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8002d48:	463a      	mov	r2, r7
 8002d4a:	1d39      	adds	r1, r7, #4
 8002d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2301      	movs	r3, #1
 8002d54:	4814      	ldr	r0, [pc, #80]	; (8002da8 <Display_init+0x10c>)
 8002d56:	f00b fada 	bl	800e30e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4811      	ldr	r0, [pc, #68]	; (8002da4 <Display_init+0x108>)
 8002d60:	f007 fa1a 	bl	800a198 <HAL_GPIO_WritePin>

	DrawImage(img1, 16, 61, 1);
 8002d64:	2301      	movs	r3, #1
 8002d66:	223d      	movs	r2, #61	; 0x3d
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4811      	ldr	r0, [pc, #68]	; (8002db0 <Display_init+0x114>)
 8002d6c:	f7ff ff20 	bl	8002bb0 <DrawImage>
	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002d70:	4807      	ldr	r0, [pc, #28]	; (8002d90 <Display_init+0xf4>)
 8002d72:	f012 f80e 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <Display_init+0xf4>)
 8002d78:	f011 ff98 	bl	8014cac <u8g2_ClearBuffer>
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	08007871 	.word	0x08007871
 8002d88:	08007991 	.word	0x08007991
 8002d8c:	080290b0 	.word	0x080290b0
 8002d90:	20001fbc 	.word	0x20001fbc
 8002d94:	0802716c 	.word	0x0802716c
 8002d98:	20000098 	.word	0x20000098
 8002d9c:	20001c44 	.word	0x20001c44
 8002da0:	48000400 	.word	0x48000400
 8002da4:	48001000 	.word	0x48001000
 8002da8:	20001f58 	.word	0x20001f58
 8002dac:	20000099 	.word	0x20000099
 8002db0:	08022440 	.word	0x08022440
 8002db4:	00000000 	.word	0x00000000

08002db8 <Gauge_loading>:



void Gauge_loading(uint8_t*text, uint8_t percent)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
	DrawImage(img1, 16, 61, 1);
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	223d      	movs	r2, #61	; 0x3d
 8002dc8:	2110      	movs	r1, #16
 8002dca:	481d      	ldr	r0, [pc, #116]	; (8002e40 <Gauge_loading+0x88>)
 8002dcc:	f7ff fef0 	bl	8002bb0 <DrawImage>

	u8g2_DrawFrame(&u8g2, 40, 120, 160, 12);
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	23a0      	movs	r3, #160	; 0xa0
 8002dd6:	2278      	movs	r2, #120	; 0x78
 8002dd8:	2128      	movs	r1, #40	; 0x28
 8002dda:	481a      	ldr	r0, [pc, #104]	; (8002e44 <Gauge_loading+0x8c>)
 8002ddc:	f011 ff09 	bl	8014bf2 <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, 40,120, percent*1.6, 12);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbae 	bl	8000544 <__aeabi_i2d>
 8002de8:	a313      	add	r3, pc, #76	; (adr r3, 8002e38 <Gauge_loading+0x80>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fc13 	bl	8000618 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fd fee5 	bl	8000bc8 <__aeabi_d2uiz>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	220c      	movs	r2, #12
 8002e04:	9200      	str	r2, [sp, #0]
 8002e06:	2278      	movs	r2, #120	; 0x78
 8002e08:	2128      	movs	r1, #40	; 0x28
 8002e0a:	480e      	ldr	r0, [pc, #56]	; (8002e44 <Gauge_loading+0x8c>)
 8002e0c:	f011 febb 	bl	8014b86 <u8g2_DrawBox>

	//sprintf(RAM,"%d", percent);
	//u8g2_DrawUTF8(&u8g2, 50, 120, RAM);
	u8g2_SetFont(&u8g2, u8g2_font_8x13_t_cyrillic);
 8002e10:	490d      	ldr	r1, [pc, #52]	; (8002e48 <Gauge_loading+0x90>)
 8002e12:	480c      	ldr	r0, [pc, #48]	; (8002e44 <Gauge_loading+0x8c>)
 8002e14:	f012 fdfa 	bl	8015a0c <u8g2_SetFont>
	u8g2_DrawUTF8(&u8g2, 40, 145, (char *)text);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2291      	movs	r2, #145	; 0x91
 8002e1c:	2128      	movs	r1, #40	; 0x28
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <Gauge_loading+0x8c>)
 8002e20:	f012 fd52 	bl	80158c8 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8002e24:	4807      	ldr	r0, [pc, #28]	; (8002e44 <Gauge_loading+0x8c>)
 8002e26:	f011 ffb4 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <Gauge_loading+0x8c>)
 8002e2c:	f011 ff3e 	bl	8014cac <u8g2_ClearBuffer>
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	9999999a 	.word	0x9999999a
 8002e3c:	3ff99999 	.word	0x3ff99999
 8002e40:	08022440 	.word	0x08022440
 8002e44:	20001fbc 	.word	0x20001fbc
 8002e48:	08024710 	.word	0x08024710

08002e4c <Off_screen_func>:




void Off_screen_func(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	// static
	if(old_active_string==0xFF)
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <Off_screen_func+0x30>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2bff      	cmp	r3, #255	; 0xff
 8002e56:	d10e      	bne.n	8002e76 <Off_screen_func+0x2a>
	{
		DrawImage(img2, 0, 0, 0);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4808      	ldr	r0, [pc, #32]	; (8002e80 <Off_screen_func+0x34>)
 8002e60:	f7ff fea6 	bl	8002bb0 <DrawImage>
		// Рисуем
		u8g2_SendBuffer(&u8g2);
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <Off_screen_func+0x38>)
 8002e66:	f011 ff94 	bl	8014d92 <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <Off_screen_func+0x38>)
 8002e6c:	f011 ff1e 	bl	8014cac <u8g2_ClearBuffer>
		old_active_string=0;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <Off_screen_func+0x30>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
	}
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000398 	.word	0x20000398
 8002e80:	08022820 	.word	0x08022820
 8002e84:	20001fbc 	.word	0x20001fbc

08002e88 <Blink_Edit_Parameter_timer>:

uint16_t blink_timer=0;
uint8_t blink_trig=0;
void Blink_Edit_Parameter_timer(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
	if(++blink_timer==200)blink_trig=1;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e9e:	d102      	bne.n	8002ea6 <Blink_Edit_Parameter_timer+0x1e>
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <Blink_Edit_Parameter_timer+0x44>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
	if(blink_timer>=500){blink_timer=blink_trig=0;}
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eae:	d305      	bcc.n	8002ebc <Blink_Edit_Parameter_timer+0x34>
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <Blink_Edit_Parameter_timer+0x44>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <Blink_Edit_Parameter_timer+0x40>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	801a      	strh	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000854 	.word	0x20000854
 8002ecc:	20000856 	.word	0x20000856

08002ed0 <Blink_Edit_Parameter>:


void Blink_Edit_Parameter(uint8_t x, uint8_t y, const char* text, uint8_t param_num, uint8_t curr_param)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	603a      	str	r2, [r7, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	71bb      	strb	r3, [r7, #6]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	717b      	strb	r3, [r7, #5]
	if(param_num==curr_param)
 8002ee6:	797a      	ldrb	r2, [r7, #5]
 8002ee8:	7c3b      	ldrb	r3, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10c      	bne.n	8002f08 <Blink_Edit_Parameter+0x38>
	{if(blink_trig==1)u8g2_DrawUTF8(&u8g2, x, y, text);}
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <Blink_Edit_Parameter+0x50>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d110      	bne.n	8002f18 <Blink_Edit_Parameter+0x48>
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	b299      	uxth	r1, r3
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4808      	ldr	r0, [pc, #32]	; (8002f24 <Blink_Edit_Parameter+0x54>)
 8002f02:	f012 fce1 	bl	80158c8 <u8g2_DrawUTF8>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
}
 8002f06:	e007      	b.n	8002f18 <Blink_Edit_Parameter+0x48>
	else u8g2_DrawUTF8(&u8g2, x, y, text);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	b299      	uxth	r1, r3
 8002f0c:	79bb      	ldrb	r3, [r7, #6]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4804      	ldr	r0, [pc, #16]	; (8002f24 <Blink_Edit_Parameter+0x54>)
 8002f14:	f012 fcd8 	bl	80158c8 <u8g2_DrawUTF8>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000856 	.word	0x20000856
 8002f24:	20001fbc 	.word	0x20001fbc

08002f28 <Test_screen_func>:


void Test_screen_func(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	71fb      	strb	r3, [r7, #7]
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8002f32:	4942      	ldr	r1, [pc, #264]	; (800303c <Test_screen_func+0x114>)
 8002f34:	4842      	ldr	r0, [pc, #264]	; (8003040 <Test_screen_func+0x118>)
 8002f36:	f012 fd69 	bl	8015a0c <u8g2_SetFont>

	// Индикация напряжения
	for(i=0;i<6;i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	e019      	b.n	8002f74 <Test_screen_func+0x4c>
	{
		sprintf((char *)RAM,"%+fmV", ADC_volt[i]);
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	4a40      	ldr	r2, [pc, #256]	; (8003044 <Test_screen_func+0x11c>)
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	493e      	ldr	r1, [pc, #248]	; (8003048 <Test_screen_func+0x120>)
 8002f4e:	483f      	ldr	r0, [pc, #252]	; (800304c <Test_screen_func+0x124>)
 8002f50:	f01a feba 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 30+i*15, (char *)RAM);
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	331e      	adds	r3, #30
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <Test_screen_func+0x124>)
 8002f66:	2178      	movs	r1, #120	; 0x78
 8002f68:	4835      	ldr	r0, [pc, #212]	; (8003040 <Test_screen_func+0x118>)
 8002f6a:	f012 fcad 	bl	80158c8 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	3301      	adds	r3, #1
 8002f72:	71fb      	strb	r3, [r7, #7]
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d9e2      	bls.n	8002f40 <Test_screen_func+0x18>
	}

	// Индикация АЦП
	for(i=0;i<6;i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	e018      	b.n	8002fb2 <Test_screen_func+0x8a>
	{
		//sprintf(RAM,"%d %+d", i, ADC_channel_0[i]);
		sprintf((char *)RAM,"%d %+d", i, ADC_middle[i]);
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4932      	ldr	r1, [pc, #200]	; (8003050 <Test_screen_func+0x128>)
 8002f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f8a:	4932      	ldr	r1, [pc, #200]	; (8003054 <Test_screen_func+0x12c>)
 8002f8c:	482f      	ldr	r0, [pc, #188]	; (800304c <Test_screen_func+0x124>)
 8002f8e:	f01a fe9b 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 30+i*15, (char *)RAM);
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	331e      	adds	r3, #30
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <Test_screen_func+0x124>)
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	4826      	ldr	r0, [pc, #152]	; (8003040 <Test_screen_func+0x118>)
 8002fa8:	f012 fc8e 	bl	80158c8 <u8g2_DrawUTF8>
	for(i=0;i<6;i++)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	71fb      	strb	r3, [r7, #7]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d9e3      	bls.n	8002f80 <Test_screen_func+0x58>
	}

	switch(adc_calibration_mode)
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <Test_screen_func+0x130>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d014      	beq.n	8002fea <Test_screen_func+0xc2>
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	dc19      	bgt.n	8002ff8 <Test_screen_func+0xd0>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <Test_screen_func+0xa6>
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <Test_screen_func+0xb4>
 8002fcc:	e014      	b.n	8002ff8 <Test_screen_func+0xd0>
	{
		case 0: u8g2_DrawUTF8(&u8g2, 5, 130, "self_calibration"); break;
 8002fce:	4b23      	ldr	r3, [pc, #140]	; (800305c <Test_screen_func+0x134>)
 8002fd0:	2282      	movs	r2, #130	; 0x82
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	481a      	ldr	r0, [pc, #104]	; (8003040 <Test_screen_func+0x118>)
 8002fd6:	f012 fc77 	bl	80158c8 <u8g2_DrawUTF8>
 8002fda:	e00d      	b.n	8002ff8 <Test_screen_func+0xd0>
		case 1: u8g2_DrawUTF8(&u8g2, 5, 130, "offset_calibration"); break;
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <Test_screen_func+0x138>)
 8002fde:	2282      	movs	r2, #130	; 0x82
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	4817      	ldr	r0, [pc, #92]	; (8003040 <Test_screen_func+0x118>)
 8002fe4:	f012 fc70 	bl	80158c8 <u8g2_DrawUTF8>
 8002fe8:	e006      	b.n	8002ff8 <Test_screen_func+0xd0>
		case 2: u8g2_DrawUTF8(&u8g2, 5, 130, "full_scale_calibration"); break;
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <Test_screen_func+0x13c>)
 8002fec:	2282      	movs	r2, #130	; 0x82
 8002fee:	2105      	movs	r1, #5
 8002ff0:	4813      	ldr	r0, [pc, #76]	; (8003040 <Test_screen_func+0x118>)
 8002ff2:	f012 fc69 	bl	80158c8 <u8g2_DrawUTF8>
 8002ff6:	bf00      	nop
	}

	// �?ндикация PGA
	u8g2_DrawUTF8(&u8g2, 5, 145, PGA_name[PGA_GAIN]);
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <Test_screen_func+0x140>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <Test_screen_func+0x144>)
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	2291      	movs	r2, #145	; 0x91
 8003006:	2105      	movs	r1, #5
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <Test_screen_func+0x118>)
 800300a:	f012 fc5d 	bl	80158c8 <u8g2_DrawUTF8>

	sprintf((char *)RAM,"%f", Kdiv);
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <Test_screen_func+0x148>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	4917      	ldr	r1, [pc, #92]	; (8003074 <Test_screen_func+0x14c>)
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <Test_screen_func+0x124>)
 8003018:	f01a fe56 	bl	801dcc8 <siprintf>
	u8g2_DrawUTF8(&u8g2, 120, 145, (char *)RAM);
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <Test_screen_func+0x124>)
 800301e:	2291      	movs	r2, #145	; 0x91
 8003020:	2178      	movs	r1, #120	; 0x78
 8003022:	4807      	ldr	r0, [pc, #28]	; (8003040 <Test_screen_func+0x118>)
 8003024:	f012 fc50 	bl	80158c8 <u8g2_DrawUTF8>

	// Рисуем
	u8g2_SendBuffer(&u8g2);
 8003028:	4805      	ldr	r0, [pc, #20]	; (8003040 <Test_screen_func+0x118>)
 800302a:	f011 feb2 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 800302e:	4804      	ldr	r0, [pc, #16]	; (8003040 <Test_screen_func+0x118>)
 8003030:	f011 fe3c 	bl	8014cac <u8g2_ClearBuffer>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	0802716c 	.word	0x0802716c
 8003040:	20001fbc 	.word	0x20001fbc
 8003044:	200052b0 	.word	0x200052b0
 8003048:	08021a88 	.word	0x08021a88
 800304c:	20002070 	.word	0x20002070
 8003050:	200020d8 	.word	0x200020d8
 8003054:	08021a90 	.word	0x08021a90
 8003058:	2000089f 	.word	0x2000089f
 800305c:	08021a98 	.word	0x08021a98
 8003060:	08021aac 	.word	0x08021aac
 8003064:	08021ac0 	.word	0x08021ac0
 8003068:	2000009a 	.word	0x2000009a
 800306c:	20000050 	.word	0x20000050
 8003070:	20000090 	.word	0x20000090
 8003074:	08021ad8 	.word	0x08021ad8

08003078 <Display_process>:




void Display_process(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	switch(screen)
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <Display_process+0x98>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	3b01      	subs	r3, #1
 8003082:	2b0b      	cmp	r3, #11
 8003084:	d83e      	bhi.n	8003104 <Display_process+0x8c>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <Display_process+0x14>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030c3 	.word	0x080030c3
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080030cf 	.word	0x080030cf
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030db 	.word	0x080030db
 80030a4:	080030e1 	.word	0x080030e1
 80030a8:	080030e7 	.word	0x080030e7
 80030ac:	080030ed 	.word	0x080030ed
 80030b0:	080030f3 	.word	0x080030f3
 80030b4:	080030f9 	.word	0x080030f9
 80030b8:	080030ff 	.word	0x080030ff
	{
		case Main_screen: Main_screen_func(); break;
 80030bc:	f014 fb78 	bl	80177b0 <Main_screen_func>
 80030c0:	e020      	b.n	8003104 <Display_process+0x8c>
		case Test_screen: Test_screen_func(); break;
 80030c2:	f7ff ff31 	bl	8002f28 <Test_screen_func>
 80030c6:	e01d      	b.n	8003104 <Display_process+0x8c>
		case Off_screen: Off_screen_func(); break;
 80030c8:	f7ff fec0 	bl	8002e4c <Off_screen_func>
 80030cc:	e01a      	b.n	8003104 <Display_process+0x8c>
		case Option_screen: Option_screen_func(); break;
 80030ce:	f015 fc1f 	bl	8018910 <Option_screen_func>
 80030d2:	e017      	b.n	8003104 <Display_process+0x8c>
		case Display_options_screen: Display_options_screen_func(); break;
 80030d4:	f013 ff1c 	bl	8016f10 <Display_options_screen_func>
 80030d8:	e014      	b.n	8003104 <Display_process+0x8c>
		case ADC_options_screen: ADC_options_screen_func(); break;
 80030da:	f013 fc01 	bl	80168e0 <ADC_options_screen_func>
 80030de:	e011      	b.n	8003104 <Display_process+0x8c>
		case Measure_options_screen: Measure_options_screen_func(); break;
 80030e0:	f014 f942 	bl	8017368 <Measure_options_screen_func>
 80030e4:	e00e      	b.n	8003104 <Display_process+0x8c>
		case Parameter_screen: Parameter_screen_func(); break;
 80030e6:	f015 fb6f 	bl	80187c8 <Parameter_screen_func>
 80030ea:	e00b      	b.n	8003104 <Display_process+0x8c>
		case RTC_screen: RTC_screen_func(); break;
 80030ec:	f014 fe30 	bl	8017d50 <RTC_screen_func>
 80030f0:	e008      	b.n	8003104 <Display_process+0x8c>
		case Auto_Off_option_screen: Auto_Off_option_screen_func(); break;
 80030f2:	f013 fe5b 	bl	8016dac <Auto_Off_option_screen_func>
 80030f6:	e005      	b.n	8003104 <Display_process+0x8c>
		case About_options_screen: About_options_screen_func(); break;
 80030f8:	f015 f842 	bl	8018180 <About_options_screen_func>
 80030fc:	e002      	b.n	8003104 <Display_process+0x8c>
		case Logging_options_screen: Logging_options_screen_func(); break;
 80030fe:	f015 f8cd 	bl	801829c <Logging_options_screen_func>
 8003102:	bf00      	nop
	}
	sleep(10);
 8003104:	200a      	movs	r0, #10
 8003106:	f000 f88d 	bl	8003224 <sleep>
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000004c 	.word	0x2000004c

08003114 <wait_scheduler>:
unsigned int delay_count=0;
unsigned char RAM[100];
unsigned int j=0;

void wait_scheduler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
	if(tasks_timer[task_ready_cnt]==0)task=task_ready_cnt+1;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <wait_scheduler+0x44>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <wait_scheduler+0x48>)
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <wait_scheduler+0x20>
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <wait_scheduler+0x44>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <wait_scheduler+0x4c>)
 8003132:	701a      	strb	r2, [r3, #0]
	if(++task_ready_cnt==num_of_tasks)task_ready_cnt=0;
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <wait_scheduler+0x44>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <wait_scheduler+0x44>)
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <wait_scheduler+0x44>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d102      	bne.n	800314e <wait_scheduler+0x3a>
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <wait_scheduler+0x44>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20000858 	.word	0x20000858
 800315c:	20002050 	.word	0x20002050
 8003160:	20000857 	.word	0x20000857

08003164 <ELSPIRE_OS_KERNEL>:

void ELSPIRE_OS_KERNEL(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	new_task[0]=wait_scheduler;
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <ELSPIRE_OS_KERNEL+0x40>)
 800316a:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <ELSPIRE_OS_KERNEL+0x44>)
 800316c:	601a      	str	r2, [r3, #0]
	while (1) for(j=0;j<=num_of_tasks;j++)if(task==j)new_task[j]();
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <ELSPIRE_OS_KERNEL+0x48>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e011      	b.n	800319a <ELSPIRE_OS_KERNEL+0x36>
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <ELSPIRE_OS_KERNEL+0x4c>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <ELSPIRE_OS_KERNEL+0x48>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d105      	bne.n	8003190 <ELSPIRE_OS_KERNEL+0x2c>
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <ELSPIRE_OS_KERNEL+0x48>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <ELSPIRE_OS_KERNEL+0x40>)
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	4798      	blx	r3
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <ELSPIRE_OS_KERNEL+0x48>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <ELSPIRE_OS_KERNEL+0x48>)
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <ELSPIRE_OS_KERNEL+0x48>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d9e9      	bls.n	8003176 <ELSPIRE_OS_KERNEL+0x12>
 80031a2:	e7e4      	b.n	800316e <ELSPIRE_OS_KERNEL+0xa>
 80031a4:	20001f34 	.word	0x20001f34
 80031a8:	08003115 	.word	0x08003115
 80031ac:	20000860 	.word	0x20000860
 80031b0:	20000857 	.word	0x20000857

080031b4 <ELSPIRE_OS_TIMER>:
	for(i=1;i<=num_of_tasks;i++)
	tasks_timer[i]=0xFFFF;
}

void ELSPIRE_OS_TIMER(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<num_of_tasks;i++)
 80031be:	2300      	movs	r3, #0
 80031c0:	71fb      	strb	r3, [r7, #7]
 80031c2:	e018      	b.n	80031f6 <ELSPIRE_OS_TIMER+0x42>
	{
		if(tasks_timer[i]>0)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <ELSPIRE_OS_TIMER+0x68>)
 80031c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00f      	beq.n	80031f0 <ELSPIRE_OS_TIMER+0x3c>
		{
			if(tasks_timer[i]!=0xFFFF) tasks_timer[i]--;
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <ELSPIRE_OS_TIMER+0x68>)
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <ELSPIRE_OS_TIMER+0x3c>
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <ELSPIRE_OS_TIMER+0x68>)
 80031e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031e8:	3a01      	subs	r2, #1
 80031ea:	490c      	ldr	r1, [pc, #48]	; (800321c <ELSPIRE_OS_TIMER+0x68>)
 80031ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<num_of_tasks;i++)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	3301      	adds	r3, #1
 80031f4:	71fb      	strb	r3, [r7, #7]
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b07      	cmp	r3, #7
 80031fa:	d9e3      	bls.n	80031c4 <ELSPIRE_OS_TIMER+0x10>
		}
	}
	// Задержка
	if (delay_count > 0)
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <ELSPIRE_OS_TIMER+0x6c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <ELSPIRE_OS_TIMER+0x5a>
	{ delay_count--; }
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <ELSPIRE_OS_TIMER+0x6c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <ELSPIRE_OS_TIMER+0x6c>)
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20002050 	.word	0x20002050
 8003220:	2000085c 	.word	0x2000085c

08003224 <sleep>:

void sleep(unsigned int ms)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	tasks_timer[task-1] = ms;
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <sleep+0x28>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3b01      	subs	r3, #1
 8003232:	4907      	ldr	r1, [pc, #28]	; (8003250 <sleep+0x2c>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	task = wait;
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <sleep+0x28>)
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	20000857 	.word	0x20000857
 8003250:	20002050 	.word	0x20002050

08003254 <delay_ms>:
	tasks_timer[task_num-1]=del;
	task=wait;
}

void delay_ms(unsigned int ms)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	delay_count = ms;
 800325c:	4a07      	ldr	r2, [pc, #28]	; (800327c <delay_ms+0x28>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
	while (delay_count){}
 8003262:	bf00      	nop
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <delay_ms+0x28>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1fb      	bne.n	8003264 <delay_ms+0x10>
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000085c 	.word	0x2000085c

08003280 <MAX77960_Read_Reg>:

extern I2C_HandleTypeDef hi2c2;


uint8_t MAX77960_Read_Reg(uint8_t REG)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[1], rx_buf[1];
	tx_buf[0]=REG;
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	733b      	strb	r3, [r7, #12]
	rx_buf[0]=0xFF;
 800328e:	23ff      	movs	r3, #255	; 0xff
 8003290:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c2, 0xDE, tx_buf, 1, 10000);
 8003292:	f107 020c 	add.w	r2, r7, #12
 8003296:	f242 7310 	movw	r3, #10000	; 0x2710
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2301      	movs	r3, #1
 800329e:	21de      	movs	r1, #222	; 0xde
 80032a0:	4808      	ldr	r0, [pc, #32]	; (80032c4 <MAX77960_Read_Reg+0x44>)
 80032a2:	f007 f843 	bl	800a32c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, 0xDE, (uint8_t *)rx_buf, 1, 10000);
 80032a6:	f107 0208 	add.w	r2, r7, #8
 80032aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2301      	movs	r3, #1
 80032b2:	21de      	movs	r1, #222	; 0xde
 80032b4:	4803      	ldr	r0, [pc, #12]	; (80032c4 <MAX77960_Read_Reg+0x44>)
 80032b6:	f007 f92d 	bl	800a514 <HAL_I2C_Master_Receive>
	return rx_buf[0];
 80032ba:	7a3b      	ldrb	r3, [r7, #8]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200078c0 	.word	0x200078c0

080032c8 <clear_buf>:
uint16_t ANSWER=0xFFFF;
uint8_t BSFlag=0;


void clear_buf(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<APP_RX_DATA_SIZE;i++)rx_buf[i]=0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	80fb      	strh	r3, [r7, #6]
 80032d2:	e006      	b.n	80032e2 <clear_buf+0x1a>
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <clear_buf+0x3c>)
 80032d8:	2100      	movs	r1, #0
 80032da:	54d1      	strb	r1, [r2, r3]
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	3301      	adds	r3, #1
 80032e0:	80fb      	strh	r3, [r7, #6]
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e8:	d3f4      	bcc.n	80032d4 <clear_buf+0xc>
	rxcntr=0;
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <clear_buf+0x40>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	801a      	strh	r2, [r3, #0]
	ANSWER=0xFFFF;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <clear_buf+0x44>)
 80032f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032f6:	801a      	strh	r2, [r3, #0]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	20005b4c 	.word	0x20005b4c
 8003308:	200008b2 	.word	0x200008b2
 800330c:	20000186 	.word	0x20000186

08003310 <scan_num32>:

int64_t scan_num32(uint8_t offset)
{
 8003310:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003314:	b089      	sub	sp, #36	; 0x24
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
	int64_t res=0;
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t i=0,sign=0;
 8003328:	2300      	movs	r3, #0
 800332a:	75fb      	strb	r3, [r7, #23]
 800332c:	2300      	movs	r3, #0
 800332e:	75bb      	strb	r3, [r7, #22]
	if(rx_buf[offset]=='-')sign=1;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <scan_num32+0xf4>)
 8003334:	5cd3      	ldrb	r3, [r2, r3]
 8003336:	2b2d      	cmp	r3, #45	; 0x2d
 8003338:	d101      	bne.n	800333e <scan_num32+0x2e>
 800333a:	2301      	movs	r3, #1
 800333c:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<15;i++){
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
 8003342:	e049      	b.n	80033d8 <scan_num32+0xc8>
	if((rx_buf[offset+i+sign]>=48)&&(rx_buf[offset+i+sign]<=58))res=(rx_buf[offset+i+sign]-48)+res*10;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	441a      	add	r2, r3
 800334a:	7dbb      	ldrb	r3, [r7, #22]
 800334c:	4413      	add	r3, r2
 800334e:	4a2d      	ldr	r2, [pc, #180]	; (8003404 <scan_num32+0xf4>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	2b2f      	cmp	r3, #47	; 0x2f
 8003354:	d934      	bls.n	80033c0 <scan_num32+0xb0>
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	441a      	add	r2, r3
 800335c:	7dbb      	ldrb	r3, [r7, #22]
 800335e:	4413      	add	r3, r2
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <scan_num32+0xf4>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	2b3a      	cmp	r3, #58	; 0x3a
 8003366:	d82b      	bhi.n	80033c0 <scan_num32+0xb0>
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	441a      	add	r2, r3
 800336e:	7dbb      	ldrb	r3, [r7, #22]
 8003370:	4413      	add	r3, r2
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <scan_num32+0xf4>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	3b30      	subs	r3, #48	; 0x30
 8003378:	4698      	mov	r8, r3
 800337a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800337e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003382:	4622      	mov	r2, r4
 8003384:	462b      	mov	r3, r5
 8003386:	f04f 0000 	mov.w	r0, #0
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003394:	0090      	lsls	r0, r2, #2
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	1912      	adds	r2, r2, r4
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	1891      	adds	r1, r2, r2
 80033a2:	6039      	str	r1, [r7, #0]
 80033a4:	415b      	adcs	r3, r3
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ac:	eb18 0a02 	adds.w	sl, r8, r2
 80033b0:	eb49 0b03 	adc.w	fp, r9, r3
 80033b4:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(i=0;i<15;i++){
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	3301      	adds	r3, #1
 80033bc:	75fb      	strb	r3, [r7, #23]
 80033be:	e00b      	b.n	80033d8 <scan_num32+0xc8>
	else {if(sign==1)return -res; else return res;}}
 80033c0:	7dbb      	ldrb	r3, [r7, #22]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <scan_num32+0xc2>
 80033c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ca:	4252      	negs	r2, r2
 80033cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80033d0:	e010      	b.n	80033f4 <scan_num32+0xe4>
 80033d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d6:	e00d      	b.n	80033f4 <scan_num32+0xe4>
	for(i=0;i<15;i++){
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b0e      	cmp	r3, #14
 80033dc:	d9b2      	bls.n	8003344 <scan_num32+0x34>
	if(sign==1)return -res;
 80033de:	7dbb      	ldrb	r3, [r7, #22]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <scan_num32+0xe0>
 80033e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e8:	4252      	negs	r2, r2
 80033ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80033ee:	e001      	b.n	80033f4 <scan_num32+0xe4>
	else return res;
 80033f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20005b4c 	.word	0x20005b4c

08003408 <scan_float>:

float scan_float(uint8_t offset)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
//	if(devider==0)devider=1;
//	RES = (float)res32/devider;
//	if(sign==1) return (float)-RES;
//	else return RES;

	return scan_double(offset, (uint8_t*)rx_buf);
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	b29b      	uxth	r3, r3
 8003416:	4909      	ldr	r1, [pc, #36]	; (800343c <scan_float+0x34>)
 8003418:	4618      	mov	r0, r3
 800341a:	f002 f839 	bl	8005490 <scan_double>
 800341e:	ec53 2b10 	vmov	r2, r3, d0
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f7fd fbef 	bl	8000c08 <__aeabi_d2f>
 800342a:	4603      	mov	r3, r0
 800342c:	ee07 3a90 	vmov	s15, r3
}
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20005b4c 	.word	0x20005b4c

08003440 <scan_num16>:

uint16_t scan_num16(uint8_t offset)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0,i=0;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	2300      	movs	r3, #0
 8003450:	73bb      	strb	r3, [r7, #14]
	if((rx_buf[offset]=='A')&&(rx_buf[offset+1]=='L')&&(rx_buf[offset+2]=='L'))return 0xFFFF;
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <scan_num16+0xa0>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	2b41      	cmp	r3, #65	; 0x41
 800345a:	d10e      	bne.n	800347a <scan_num16+0x3a>
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	3301      	adds	r3, #1
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <scan_num16+0xa0>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	2b4c      	cmp	r3, #76	; 0x4c
 8003466:	d108      	bne.n	800347a <scan_num16+0x3a>
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	3302      	adds	r3, #2
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <scan_num16+0xa0>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	2b4c      	cmp	r3, #76	; 0x4c
 8003472:	d102      	bne.n	800347a <scan_num16+0x3a>
 8003474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003478:	e02b      	b.n	80034d2 <scan_num16+0x92>
	for(i=0;i<10;i++){
 800347a:	2300      	movs	r3, #0
 800347c:	73bb      	strb	r3, [r7, #14]
 800347e:	e023      	b.n	80034c8 <scan_num16+0x88>
	if((rx_buf[offset+i]>=48)&&(rx_buf[offset+i]<=58))res=(rx_buf[offset+i]-48)+res*10;
 8003480:	79fa      	ldrb	r2, [r7, #7]
 8003482:	7bbb      	ldrb	r3, [r7, #14]
 8003484:	4413      	add	r3, r2
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <scan_num16+0xa0>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	2b2f      	cmp	r3, #47	; 0x2f
 800348c:	d919      	bls.n	80034c2 <scan_num16+0x82>
 800348e:	79fa      	ldrb	r2, [r7, #7]
 8003490:	7bbb      	ldrb	r3, [r7, #14]
 8003492:	4413      	add	r3, r2
 8003494:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <scan_num16+0xa0>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	2b3a      	cmp	r3, #58	; 0x3a
 800349a:	d812      	bhi.n	80034c2 <scan_num16+0x82>
 800349c:	79fa      	ldrb	r2, [r7, #7]
 800349e:	7bbb      	ldrb	r3, [r7, #14]
 80034a0:	4413      	add	r3, r2
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <scan_num16+0xa0>)
 80034a4:	5cd2      	ldrb	r2, [r2, r3]
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	4619      	mov	r1, r3
 80034aa:	0089      	lsls	r1, r1, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	3b30      	subs	r3, #48	; 0x30
 80034b8:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<10;i++){
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	3301      	adds	r3, #1
 80034be:	73bb      	strb	r3, [r7, #14]
 80034c0:	e002      	b.n	80034c8 <scan_num16+0x88>
	else return res;}
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	e004      	b.n	80034d2 <scan_num16+0x92>
	for(i=0;i<10;i++){
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d9d8      	bls.n	8003480 <scan_num16+0x40>
	return res;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	b29b      	uxth	r3, r3
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20005b4c 	.word	0x20005b4c

080034e4 <OneCommParseCycle>:

void OneCommParseCycle(uint8_t com, const char* compare, uint8_t offset, uint8_t len)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6039      	str	r1, [r7, #0]
 80034ec:	4611      	mov	r1, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
 80034f4:	460b      	mov	r3, r1
 80034f6:	71bb      	strb	r3, [r7, #6]
 80034f8:	4613      	mov	r3, r2
 80034fa:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	if(ANSWER==0xFFFF){
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <OneCommParseCycle+0x70>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003504:	4293      	cmp	r3, r2
 8003506:	d11f      	bne.n	8003548 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e018      	b.n	8003540 <OneCommParseCycle+0x5c>
	{
		if(rx_buf[i+offset]==compare[i]) ANSWER = com;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	79bb      	ldrb	r3, [r7, #6]
 8003512:	4413      	add	r3, r2
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <OneCommParseCycle+0x74>)
 8003516:	5cd2      	ldrb	r2, [r2, r3]
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	440b      	add	r3, r1
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d104      	bne.n	800352e <OneCommParseCycle+0x4a>
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <OneCommParseCycle+0x70>)
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	e005      	b.n	800353a <OneCommParseCycle+0x56>
		else {ANSWER=0xFFFF; break;}
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <OneCommParseCycle+0x70>)
 8003530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	bf00      	nop
	}}
}
 8003538:	e006      	b.n	8003548 <OneCommParseCycle+0x64>
	for(i=0;i<len;i++)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	3301      	adds	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	797b      	ldrb	r3, [r7, #5]
 8003544:	429a      	cmp	r2, r3
 8003546:	d3e2      	bcc.n	800350e <OneCommParseCycle+0x2a>
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	20000186 	.word	0x20000186
 8003558:	20005b4c 	.word	0x20005b4c

0800355c <parser>:

uint8_t parser(uint8_t offset)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	ANSWER=0xFFFF;
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <parser+0x90>)
 8003568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800356c:	801a      	strh	r2, [r3, #0]
	// Commands
	for(i=2;i<NUMBER_OF_COMMANDS;i++) OneCommParseCycle(i, COMMAND_STRING[i], offset, COMMAND_NUM_OF_SYM[i]);
 800356e:	2302      	movs	r3, #2
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e00d      	b.n	8003590 <parser+0x34>
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <parser+0x94>)
 8003578:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <parser+0x98>)
 8003580:	5cd3      	ldrb	r3, [r2, r3]
 8003582:	79fa      	ldrb	r2, [r7, #7]
 8003584:	7bf8      	ldrb	r0, [r7, #15]
 8003586:	f7ff ffad 	bl	80034e4 <OneCommParseCycle>
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	3301      	adds	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b0d      	cmp	r3, #13
 8003594:	d9ee      	bls.n	8003574 <parser+0x18>
	// Variables
	for(i=0;i<NUMBER_OF_VARIABLES;i++) OneCommParseCycle(i, GV_STRING[i], offset, GV_NUM_OF_SYM[i]);
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e00d      	b.n	80035b8 <parser+0x5c>
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <parser+0x9c>)
 80035a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <parser+0xa0>)
 80035a8:	5cd3      	ldrb	r3, [r2, r3]
 80035aa:	79fa      	ldrb	r2, [r7, #7]
 80035ac:	7bf8      	ldrb	r0, [r7, #15]
 80035ae:	f7ff ff99 	bl	80034e4 <OneCommParseCycle>
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	3301      	adds	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b0e      	cmp	r3, #14
 80035bc:	d9ee      	bls.n	800359c <parser+0x40>
	// UNKNOWING_CMD
	if((rx_buf[offset]!=0)&&(ANSWER==0xFFFF))ANSWER=0xFFFE;
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <parser+0xa4>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <parser+0x80>
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <parser+0x90>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <parser+0x80>
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <parser+0x90>)
 80035d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035da:	801a      	strh	r2, [r3, #0]
	return ANSWER;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <parser+0x90>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000186 	.word	0x20000186
 80035f0:	2000014c 	.word	0x2000014c
 80035f4:	08023b24 	.word	0x08023b24
 80035f8:	200000f0 	.word	0x200000f0
 80035fc:	08023ae4 	.word	0x08023ae4
 8003600:	20005b4c 	.word	0x20005b4c

08003604 <Set_uint8>:


void Set_uint8(uint8_t*arr, uint8_t offset)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff14 	bl	8003440 <scan_num16>
 8003618:	4603      	mov	r3, r0
 800361a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800361c:	2300      	movs	r3, #0
 800361e:	82fb      	strh	r3, [r7, #22]
 8003620:	e019      	b.n	8003656 <Set_uint8+0x52>
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	8afb      	ldrh	r3, [r7, #22]
 8003626:	4413      	add	r3, r2
 8003628:	4a1c      	ldr	r2, [pc, #112]	; (800369c <Set_uint8+0x98>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	2b20      	cmp	r3, #32
 800362e:	d006      	beq.n	800363e <Set_uint8+0x3a>
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	8afb      	ldrh	r3, [r7, #22]
 8003634:	4413      	add	r3, r2
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <Set_uint8+0x98>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	2b3d      	cmp	r3, #61	; 0x3d
 800363c:	d108      	bne.n	8003650 <Set_uint8+0x4c>
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	b29a      	uxth	r2, r3
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	4413      	add	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	82bb      	strh	r3, [r7, #20]
 800364c:	2364      	movs	r3, #100	; 0x64
 800364e:	82fb      	strh	r3, [r7, #22]
 8003650:	8afb      	ldrh	r3, [r7, #22]
 8003652:	3301      	adds	r3, #1
 8003654:	82fb      	strh	r3, [r7, #22]
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	2b63      	cmp	r3, #99	; 0x63
 800365a:	d9e2      	bls.n	8003622 <Set_uint8+0x1e>
	data=scan_num32(equal);
 800365c:	8abb      	ldrh	r3, [r7, #20]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fe55 	bl	8003310 <scan_num32>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
	if(data>255)CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2bff      	cmp	r3, #255	; 0xff
 8003672:	d904      	bls.n	800367e <Set_uint8+0x7a>
 8003674:	2117      	movs	r1, #23
 8003676:	480a      	ldr	r0, [pc, #40]	; (80036a0 <Set_uint8+0x9c>)
 8003678:	f015 feb0 	bl	80193dc <CDC_Transmit_FS>
	else
	{
		arr[index]=data;
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}
 800367c:	e009      	b.n	8003692 <Set_uint8+0x8e>
		arr[index]=data;
 800367e:	8a7b      	ldrh	r3, [r7, #18]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800368a:	2104      	movs	r1, #4
 800368c:	4805      	ldr	r0, [pc, #20]	; (80036a4 <Set_uint8+0xa0>)
 800368e:	f015 fea5 	bl	80193dc <CDC_Transmit_FS>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20005b4c 	.word	0x20005b4c
 80036a0:	08021c7c 	.word	0x08021c7c
 80036a4:	08021c94 	.word	0x08021c94

080036a8 <Set_int8>:
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
	}
}

void Set_int8(int8_t*arr, uint8_t offset)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fec2 	bl	8003440 <scan_num16>
 80036bc:	4603      	mov	r3, r0
 80036be:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80036c0:	2300      	movs	r3, #0
 80036c2:	82fb      	strh	r3, [r7, #22]
 80036c4:	e019      	b.n	80036fa <Set_int8+0x52>
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	8afb      	ldrh	r3, [r7, #22]
 80036ca:	4413      	add	r3, r2
 80036cc:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <Set_int8+0xa0>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d006      	beq.n	80036e2 <Set_int8+0x3a>
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	4413      	add	r3, r2
 80036da:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <Set_int8+0xa0>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	2b3d      	cmp	r3, #61	; 0x3d
 80036e0:	d108      	bne.n	80036f4 <Set_int8+0x4c>
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	8afb      	ldrh	r3, [r7, #22]
 80036e8:	4413      	add	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	82bb      	strh	r3, [r7, #20]
 80036f0:	2364      	movs	r3, #100	; 0x64
 80036f2:	82fb      	strh	r3, [r7, #22]
 80036f4:	8afb      	ldrh	r3, [r7, #22]
 80036f6:	3301      	adds	r3, #1
 80036f8:	82fb      	strh	r3, [r7, #22]
 80036fa:	8afb      	ldrh	r3, [r7, #22]
 80036fc:	2b63      	cmp	r3, #99	; 0x63
 80036fe:	d9e2      	bls.n	80036c6 <Set_int8+0x1e>
	data=scan_num32(equal);
 8003700:	8abb      	ldrh	r3, [r7, #20]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fe03 	bl	8003310 <scan_num32>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4613      	mov	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
	if((data>127)||(data<-127))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b7f      	cmp	r3, #127	; 0x7f
 8003716:	d803      	bhi.n	8003720 <Set_int8+0x78>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800371e:	d804      	bhi.n	800372a <Set_int8+0x82>
 8003720:	2117      	movs	r1, #23
 8003722:	480a      	ldr	r0, [pc, #40]	; (800374c <Set_int8+0xa4>)
 8003724:	f015 fe5a 	bl	80193dc <CDC_Transmit_FS>
 8003728:	e00a      	b.n	8003740 <Set_int8+0x98>
	else
	{
		arr[index]=data;
 800372a:	8a7b      	ldrh	r3, [r7, #18]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	b252      	sxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 8003736:	2104      	movs	r1, #4
 8003738:	4805      	ldr	r0, [pc, #20]	; (8003750 <Set_int8+0xa8>)
 800373a:	f015 fe4f 	bl	80193dc <CDC_Transmit_FS>
	}
}
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20005b4c 	.word	0x20005b4c
 800374c:	08021c7c 	.word	0x08021c7c
 8003750:	08021c94 	.word	0x08021c94

08003754 <Set_int16>:

void Set_int16(int16_t*arr, uint8_t offset)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	uint32_t data;
	index=scan_num16(offset);
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe6c 	bl	8003440 <scan_num16>
 8003768:	4603      	mov	r3, r0
 800376a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800376c:	2300      	movs	r3, #0
 800376e:	82fb      	strh	r3, [r7, #22]
 8003770:	e019      	b.n	80037a6 <Set_int16+0x52>
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	8afb      	ldrh	r3, [r7, #22]
 8003776:	4413      	add	r3, r2
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <Set_int16+0xa4>)
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	2b20      	cmp	r3, #32
 800377e:	d006      	beq.n	800378e <Set_int16+0x3a>
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	8afb      	ldrh	r3, [r7, #22]
 8003784:	4413      	add	r3, r2
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <Set_int16+0xa4>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	2b3d      	cmp	r3, #61	; 0x3d
 800378c:	d108      	bne.n	80037a0 <Set_int16+0x4c>
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	b29a      	uxth	r2, r3
 8003792:	8afb      	ldrh	r3, [r7, #22]
 8003794:	4413      	add	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	82bb      	strh	r3, [r7, #20]
 800379c:	2364      	movs	r3, #100	; 0x64
 800379e:	82fb      	strh	r3, [r7, #22]
 80037a0:	8afb      	ldrh	r3, [r7, #22]
 80037a2:	3301      	adds	r3, #1
 80037a4:	82fb      	strh	r3, [r7, #22]
 80037a6:	8afb      	ldrh	r3, [r7, #22]
 80037a8:	2b63      	cmp	r3, #99	; 0x63
 80037aa:	d9e2      	bls.n	8003772 <Set_int16+0x1e>
	data=scan_num32(equal);
 80037ac:	8abb      	ldrh	r3, [r7, #20]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fdad 	bl	8003310 <scan_num32>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4613      	mov	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
	if((data>32767)||(data<-32767))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c4:	d203      	bcs.n	80037ce <Set_int16+0x7a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80037cc:	d804      	bhi.n	80037d8 <Set_int16+0x84>
 80037ce:	2117      	movs	r1, #23
 80037d0:	480a      	ldr	r0, [pc, #40]	; (80037fc <Set_int16+0xa8>)
 80037d2:	f015 fe03 	bl	80193dc <CDC_Transmit_FS>
 80037d6:	e00b      	b.n	80037f0 <Set_int16+0x9c>
	else
	{
		arr[index]=data;
 80037d8:	8a7b      	ldrh	r3, [r7, #18]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	b212      	sxth	r2, r2
 80037e4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80037e6:	2104      	movs	r1, #4
 80037e8:	4805      	ldr	r0, [pc, #20]	; (8003800 <Set_int16+0xac>)
 80037ea:	f015 fdf7 	bl	80193dc <CDC_Transmit_FS>
	}
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20005b4c 	.word	0x20005b4c
 80037fc:	08021c7c 	.word	0x08021c7c
 8003800:	08021c94 	.word	0x08021c94

08003804 <Set_int32>:

void Set_int32(int32_t*arr, uint8_t offset)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int64_t data;
	index=scan_num16(offset);
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fe14 	bl	8003440 <scan_num16>
 8003818:	4603      	mov	r3, r0
 800381a:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 800381c:	2300      	movs	r3, #0
 800381e:	82fb      	strh	r3, [r7, #22]
 8003820:	e019      	b.n	8003856 <Set_int32+0x52>
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	8afb      	ldrh	r3, [r7, #22]
 8003826:	4413      	add	r3, r2
 8003828:	4a24      	ldr	r2, [pc, #144]	; (80038bc <Set_int32+0xb8>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	2b20      	cmp	r3, #32
 800382e:	d006      	beq.n	800383e <Set_int32+0x3a>
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	4413      	add	r3, r2
 8003836:	4a21      	ldr	r2, [pc, #132]	; (80038bc <Set_int32+0xb8>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	2b3d      	cmp	r3, #61	; 0x3d
 800383c:	d108      	bne.n	8003850 <Set_int32+0x4c>
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	b29a      	uxth	r2, r3
 8003842:	8afb      	ldrh	r3, [r7, #22]
 8003844:	4413      	add	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	3301      	adds	r3, #1
 800384a:	82bb      	strh	r3, [r7, #20]
 800384c:	2364      	movs	r3, #100	; 0x64
 800384e:	82fb      	strh	r3, [r7, #22]
 8003850:	8afb      	ldrh	r3, [r7, #22]
 8003852:	3301      	adds	r3, #1
 8003854:	82fb      	strh	r3, [r7, #22]
 8003856:	8afb      	ldrh	r3, [r7, #22]
 8003858:	2b63      	cmp	r3, #99	; 0x63
 800385a:	d9e2      	bls.n	8003822 <Set_int32+0x1e>
	data=scan_num32(equal);
 800385c:	8abb      	ldrh	r3, [r7, #20]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fd55 	bl	8003310 <scan_num32>
 8003866:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if((data>2147483647)||(data<-2147483647))CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 800386a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800386e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	4290      	cmp	r0, r2
 8003878:	eb71 0303 	sbcs.w	r3, r1, r3
 800387c:	db09      	blt.n	8003892 <Set_int32+0x8e>
 800387e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003882:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003886:	f04f 31ff 	mov.w	r1, #4294967295
 800388a:	4290      	cmp	r0, r2
 800388c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003890:	db04      	blt.n	800389c <Set_int32+0x98>
 8003892:	2117      	movs	r1, #23
 8003894:	480a      	ldr	r0, [pc, #40]	; (80038c0 <Set_int32+0xbc>)
 8003896:	f015 fda1 	bl	80193dc <CDC_Transmit_FS>
 800389a:	e00a      	b.n	80038b2 <Set_int32+0xae>
	else
	{
		arr[index]=(int32_t)data;
 800389c:	8a7b      	ldrh	r3, [r7, #18]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 80038a8:	2104      	movs	r1, #4
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <Set_int32+0xc0>)
 80038ac:	f015 fd96 	bl	80193dc <CDC_Transmit_FS>
	}

//	arr[index]=data;
//	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20005b4c 	.word	0x20005b4c
 80038c0:	08021c7c 	.word	0x08021c7c
 80038c4:	08021c94 	.word	0x08021c94

080038c8 <Set_uint32>:

void Set_uint32(uint32_t*arr, uint8_t offset)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	int32_t data;
	index=scan_num16(offset);
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fdb2 	bl	8003440 <scan_num16>
 80038dc:	4603      	mov	r3, r0
 80038de:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 80038e0:	2300      	movs	r3, #0
 80038e2:	82fb      	strh	r3, [r7, #22]
 80038e4:	e019      	b.n	800391a <Set_uint32+0x52>
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	8afb      	ldrh	r3, [r7, #22]
 80038ea:	4413      	add	r3, r2
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <Set_uint32+0x88>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d006      	beq.n	8003902 <Set_uint32+0x3a>
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	8afb      	ldrh	r3, [r7, #22]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <Set_uint32+0x88>)
 80038fc:	5cd3      	ldrb	r3, [r2, r3]
 80038fe:	2b3d      	cmp	r3, #61	; 0x3d
 8003900:	d108      	bne.n	8003914 <Set_uint32+0x4c>
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	b29a      	uxth	r2, r3
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	4413      	add	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	3301      	adds	r3, #1
 800390e:	82bb      	strh	r3, [r7, #20]
 8003910:	2364      	movs	r3, #100	; 0x64
 8003912:	82fb      	strh	r3, [r7, #22]
 8003914:	8afb      	ldrh	r3, [r7, #22]
 8003916:	3301      	adds	r3, #1
 8003918:	82fb      	strh	r3, [r7, #22]
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	2b63      	cmp	r3, #99	; 0x63
 800391e:	d9e2      	bls.n	80038e6 <Set_uint32+0x1e>
	data=scan_num32(equal);
 8003920:	8abb      	ldrh	r3, [r7, #20]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fcf3 	bl	8003310 <scan_num32>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4613      	mov	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
	arr[index]=data;
 8003932:	8a7b      	ldrh	r3, [r7, #18]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);
 800393e:	2104      	movs	r1, #4
 8003940:	4804      	ldr	r0, [pc, #16]	; (8003954 <Set_uint32+0x8c>)
 8003942:	f015 fd4b 	bl	80193dc <CDC_Transmit_FS>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20005b4c 	.word	0x20005b4c
 8003954:	08021c94 	.word	0x08021c94

08003958 <Set_float>:

void Set_float(float*arr, uint8_t offset)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
	uint16_t index,i,equal;
	float data;
	index=scan_num16(offset);
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fd6a 	bl	8003440 <scan_num16>
 800396c:	4603      	mov	r3, r0
 800396e:	827b      	strh	r3, [r7, #18]
	for(i=0;i<100;i++) if((rx_buf[offset+i]==' ')||(rx_buf[offset+i]=='=')){equal=offset+i+1;i=100;}
 8003970:	2300      	movs	r3, #0
 8003972:	82fb      	strh	r3, [r7, #22]
 8003974:	e019      	b.n	80039aa <Set_float+0x52>
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	8afb      	ldrh	r3, [r7, #22]
 800397a:	4413      	add	r3, r2
 800397c:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <Set_float+0x94>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	2b20      	cmp	r3, #32
 8003982:	d006      	beq.n	8003992 <Set_float+0x3a>
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	8afb      	ldrh	r3, [r7, #22]
 8003988:	4413      	add	r3, r2
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <Set_float+0x94>)
 800398c:	5cd3      	ldrb	r3, [r2, r3]
 800398e:	2b3d      	cmp	r3, #61	; 0x3d
 8003990:	d108      	bne.n	80039a4 <Set_float+0x4c>
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	b29a      	uxth	r2, r3
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	4413      	add	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	3301      	adds	r3, #1
 800399e:	82bb      	strh	r3, [r7, #20]
 80039a0:	2364      	movs	r3, #100	; 0x64
 80039a2:	82fb      	strh	r3, [r7, #22]
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	3301      	adds	r3, #1
 80039a8:	82fb      	strh	r3, [r7, #22]
 80039aa:	8afb      	ldrh	r3, [r7, #22]
 80039ac:	2b63      	cmp	r3, #99	; 0x63
 80039ae:	d9e2      	bls.n	8003976 <Set_float+0x1e>
	data=scan_float(equal);
 80039b0:	8abb      	ldrh	r3, [r7, #20]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fd27 	bl	8003408 <scan_float>
 80039ba:	ed87 0a03 	vstr	s0, [r7, #12]
	if(!BSFlag){
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <Set_float+0x98>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <Set_float+0x84>
	arr[index]=data;
 80039c6:	8a7b      	ldrh	r3, [r7, #18]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS((unsigned char*)"OK\r\n", 4);}
 80039d2:	2104      	movs	r1, #4
 80039d4:	4807      	ldr	r0, [pc, #28]	; (80039f4 <Set_float+0x9c>)
 80039d6:	f015 fd01 	bl	80193dc <CDC_Transmit_FS>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
}
 80039da:	e003      	b.n	80039e4 <Set_float+0x8c>
	else CDC_Transmit_FS((unsigned char*)"Argument Is Too Big!!\r\n", 23);
 80039dc:	2117      	movs	r1, #23
 80039de:	4806      	ldr	r0, [pc, #24]	; (80039f8 <Set_float+0xa0>)
 80039e0:	f015 fcfc 	bl	80193dc <CDC_Transmit_FS>
}
 80039e4:	bf00      	nop
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20005b4c 	.word	0x20005b4c
 80039f0:	200008b4 	.word	0x200008b4
 80039f4:	08021c94 	.word	0x08021c94
 80039f8:	08021c7c 	.word	0x08021c7c

080039fc <Get_uint8>:




void Get_uint8(uint8_t*arr, uint8_t offset, uint16_t size)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fd14 	bl	8003440 <scan_num16>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d132      	bne.n	8003a8c <Get_uint8+0x90>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003a26:	210e      	movs	r1, #14
 8003a28:	482a      	ldr	r0, [pc, #168]	; (8003ad4 <Get_uint8+0xd8>)
 8003a2a:	f015 fcd7 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	81fb      	strh	r3, [r7, #14]
 8003a32:	e022      	b.n	8003a7a <Get_uint8+0x7e>
		{
			if(!CSV_format)sprintf(RAM, "%d\t", arr[i]);
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <Get_uint8+0xdc>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <Get_uint8+0x54>
 8003a3c:	89fb      	ldrh	r3, [r7, #14]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4925      	ldr	r1, [pc, #148]	; (8003adc <Get_uint8+0xe0>)
 8003a48:	4825      	ldr	r0, [pc, #148]	; (8003ae0 <Get_uint8+0xe4>)
 8003a4a:	f01a f93d 	bl	801dcc8 <siprintf>
 8003a4e:	e008      	b.n	8003a62 <Get_uint8+0x66>
			else sprintf(RAM, "%d;", arr[i]);
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4922      	ldr	r1, [pc, #136]	; (8003ae4 <Get_uint8+0xe8>)
 8003a5c:	4820      	ldr	r0, [pc, #128]	; (8003ae0 <Get_uint8+0xe4>)
 8003a5e:	f01a f933 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003a62:	481f      	ldr	r0, [pc, #124]	; (8003ae0 <Get_uint8+0xe4>)
 8003a64:	f7fc fbc4 	bl	80001f0 <strlen>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	481c      	ldr	r0, [pc, #112]	; (8003ae0 <Get_uint8+0xe4>)
 8003a70:	f015 fcb4 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	3301      	adds	r3, #1
 8003a78:	81fb      	strh	r3, [r7, #14]
 8003a7a:	89fa      	ldrh	r2, [r7, #14]
 8003a7c:	883b      	ldrh	r3, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3d8      	bcc.n	8003a34 <Get_uint8+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003a82:	2102      	movs	r1, #2
 8003a84:	4818      	ldr	r0, [pc, #96]	; (8003ae8 <Get_uint8+0xec>)
 8003a86:	f015 fca9 	bl	80193dc <CDC_Transmit_FS>
		{
			sprintf(RAM, "%d\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003a8a:	e01e      	b.n	8003aca <Get_uint8+0xce>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003a8c:	883a      	ldrh	r2, [r7, #0]
 8003a8e:	89bb      	ldrh	r3, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d808      	bhi.n	8003aa6 <Get_uint8+0xaa>
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <Get_uint8+0xf0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2209      	movs	r2, #9
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f015 fc9c 	bl	80193dc <CDC_Transmit_FS>
}
 8003aa4:	e011      	b.n	8003aca <Get_uint8+0xce>
			sprintf(RAM, "%d\r\n", arr[index]);
 8003aa6:	89bb      	ldrh	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	490f      	ldr	r1, [pc, #60]	; (8003af0 <Get_uint8+0xf4>)
 8003ab2:	480b      	ldr	r0, [pc, #44]	; (8003ae0 <Get_uint8+0xe4>)
 8003ab4:	f01a f908 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003ab8:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <Get_uint8+0xe4>)
 8003aba:	f7fc fb99 	bl	80001f0 <strlen>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <Get_uint8+0xe4>)
 8003ac6:	f015 fc89 	bl	80193dc <CDC_Transmit_FS>
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08021c9c 	.word	0x08021c9c
 8003ad8:	200008af 	.word	0x200008af
 8003adc:	08021cac 	.word	0x08021cac
 8003ae0:	20002070 	.word	0x20002070
 8003ae4:	08021cb0 	.word	0x08021cb0
 8003ae8:	08021c18 	.word	0x08021c18
 8003aec:	2000014c 	.word	0x2000014c
 8003af0:	08021cb4 	.word	0x08021cb4

08003af4 <Get_int32>:


void Get_int32(int32_t*arr, uint8_t offset, uint16_t size)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
 8003b00:	4613      	mov	r3, r2
 8003b02:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003b04:	2300      	movs	r3, #0
 8003b06:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fc98 	bl	8003440 <scan_num16>
 8003b10:	4603      	mov	r3, r0
 8003b12:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003b14:	89bb      	ldrh	r3, [r7, #12]
 8003b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d134      	bne.n	8003b88 <Get_int32+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003b1e:	210e      	movs	r1, #14
 8003b20:	482b      	ldr	r0, [pc, #172]	; (8003bd0 <Get_int32+0xdc>)
 8003b22:	f015 fc5b 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	81fb      	strh	r3, [r7, #14]
 8003b2a:	e024      	b.n	8003b76 <Get_int32+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%i\t", arr[i]);
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <Get_int32+0xe0>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <Get_int32+0x56>
 8003b34:	89fb      	ldrh	r3, [r7, #14]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4925      	ldr	r1, [pc, #148]	; (8003bd8 <Get_int32+0xe4>)
 8003b42:	4826      	ldr	r0, [pc, #152]	; (8003bdc <Get_int32+0xe8>)
 8003b44:	f01a f8c0 	bl	801dcc8 <siprintf>
 8003b48:	e009      	b.n	8003b5e <Get_int32+0x6a>
			else sprintf(RAM, "%i;", arr[i]);
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	4922      	ldr	r1, [pc, #136]	; (8003be0 <Get_int32+0xec>)
 8003b58:	4820      	ldr	r0, [pc, #128]	; (8003bdc <Get_int32+0xe8>)
 8003b5a:	f01a f8b5 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003b5e:	481f      	ldr	r0, [pc, #124]	; (8003bdc <Get_int32+0xe8>)
 8003b60:	f7fc fb46 	bl	80001f0 <strlen>
 8003b64:	4603      	mov	r3, r0
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4619      	mov	r1, r3
 8003b6a:	481c      	ldr	r0, [pc, #112]	; (8003bdc <Get_int32+0xe8>)
 8003b6c:	f015 fc36 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	3301      	adds	r3, #1
 8003b74:	81fb      	strh	r3, [r7, #14]
 8003b76:	89fa      	ldrh	r2, [r7, #14]
 8003b78:	883b      	ldrh	r3, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3d6      	bcc.n	8003b2c <Get_int32+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4818      	ldr	r0, [pc, #96]	; (8003be4 <Get_int32+0xf0>)
 8003b82:	f015 fc2b 	bl	80193dc <CDC_Transmit_FS>
		{
			sprintf(RAM, "%i\r\n", arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003b86:	e01f      	b.n	8003bc8 <Get_int32+0xd4>
		if(index>size-1)CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003b88:	883a      	ldrh	r2, [r7, #0]
 8003b8a:	89bb      	ldrh	r3, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d808      	bhi.n	8003ba2 <Get_int32+0xae>
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <Get_int32+0xf4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2209      	movs	r2, #9
 8003b96:	b292      	uxth	r2, r2
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f015 fc1e 	bl	80193dc <CDC_Transmit_FS>
}
 8003ba0:	e012      	b.n	8003bc8 <Get_int32+0xd4>
			sprintf(RAM, "%i\r\n", arr[index]);
 8003ba2:	89bb      	ldrh	r3, [r7, #12]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	490f      	ldr	r1, [pc, #60]	; (8003bec <Get_int32+0xf8>)
 8003bb0:	480a      	ldr	r0, [pc, #40]	; (8003bdc <Get_int32+0xe8>)
 8003bb2:	f01a f889 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003bb6:	4809      	ldr	r0, [pc, #36]	; (8003bdc <Get_int32+0xe8>)
 8003bb8:	f7fc fb1a 	bl	80001f0 <strlen>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <Get_int32+0xe8>)
 8003bc4:	f015 fc0a 	bl	80193dc <CDC_Transmit_FS>
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08021c9c 	.word	0x08021c9c
 8003bd4:	200008af 	.word	0x200008af
 8003bd8:	08021cbc 	.word	0x08021cbc
 8003bdc:	20002070 	.word	0x20002070
 8003be0:	08021cc0 	.word	0x08021cc0
 8003be4:	08021c18 	.word	0x08021c18
 8003be8:	2000014c 	.word	0x2000014c
 8003bec:	08021cc4 	.word	0x08021cc4

08003bf0 <Get_float>:

void Get_float(float*arr, uint8_t offset, uint16_t size)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003c00:	2300      	movs	r3, #0
 8003c02:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fc1a 	bl	8003440 <scan_num16>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003c10:	89bb      	ldrh	r3, [r7, #12]
 8003c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d13c      	bne.n	8003c94 <Get_float+0xa4>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003c1a:	210e      	movs	r1, #14
 8003c1c:	4831      	ldr	r0, [pc, #196]	; (8003ce4 <Get_float+0xf4>)
 8003c1e:	f015 fbdd 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	81fb      	strh	r3, [r7, #14]
 8003c26:	e02c      	b.n	8003c82 <Get_float+0x92>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003c28:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <Get_float+0xf8>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10e      	bne.n	8003c4e <Get_float+0x5e>
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fc94 	bl	8000568 <__aeabi_f2d>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4929      	ldr	r1, [pc, #164]	; (8003cec <Get_float+0xfc>)
 8003c46:	482a      	ldr	r0, [pc, #168]	; (8003cf0 <Get_float+0x100>)
 8003c48:	f01a f83e 	bl	801dcc8 <siprintf>
 8003c4c:	e00d      	b.n	8003c6a <Get_float+0x7a>
			else sprintf(RAM, "%f;", arr[i]);
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc85 	bl	8000568 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4924      	ldr	r1, [pc, #144]	; (8003cf4 <Get_float+0x104>)
 8003c64:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <Get_float+0x100>)
 8003c66:	f01a f82f 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003c6a:	4821      	ldr	r0, [pc, #132]	; (8003cf0 <Get_float+0x100>)
 8003c6c:	f7fc fac0 	bl	80001f0 <strlen>
 8003c70:	4603      	mov	r3, r0
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	481e      	ldr	r0, [pc, #120]	; (8003cf0 <Get_float+0x100>)
 8003c78:	f015 fbb0 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	81fb      	strh	r3, [r7, #14]
 8003c82:	89fa      	ldrh	r2, [r7, #14]
 8003c84:	883b      	ldrh	r3, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3ce      	bcc.n	8003c28 <Get_float+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	481a      	ldr	r0, [pc, #104]	; (8003cf8 <Get_float+0x108>)
 8003c8e:	f015 fba5 	bl	80193dc <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003c92:	e023      	b.n	8003cdc <Get_float+0xec>
		if(index>size-1)
 8003c94:	883a      	ldrh	r2, [r7, #0]
 8003c96:	89bb      	ldrh	r3, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d808      	bhi.n	8003cae <Get_float+0xbe>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <Get_float+0x10c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2209      	movs	r2, #9
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f015 fb98 	bl	80193dc <CDC_Transmit_FS>
}
 8003cac:	e016      	b.n	8003cdc <Get_float+0xec>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003cae:	89bb      	ldrh	r3, [r7, #12]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fc55 	bl	8000568 <__aeabi_f2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	490f      	ldr	r1, [pc, #60]	; (8003d00 <Get_float+0x110>)
 8003cc4:	480a      	ldr	r0, [pc, #40]	; (8003cf0 <Get_float+0x100>)
 8003cc6:	f019 ffff 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003cca:	4809      	ldr	r0, [pc, #36]	; (8003cf0 <Get_float+0x100>)
 8003ccc:	f7fc fa90 	bl	80001f0 <strlen>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <Get_float+0x100>)
 8003cd8:	f015 fb80 	bl	80193dc <CDC_Transmit_FS>
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08021c9c 	.word	0x08021c9c
 8003ce8:	200008af 	.word	0x200008af
 8003cec:	08021ccc 	.word	0x08021ccc
 8003cf0:	20002070 	.word	0x20002070
 8003cf4:	08021cd0 	.word	0x08021cd0
 8003cf8:	08021c18 	.word	0x08021c18
 8003cfc:	2000014c 	.word	0x2000014c
 8003d00:	08021cd4 	.word	0x08021cd4

08003d04 <Get_double>:


void Get_double(double*arr, uint8_t offset, uint16_t size)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
 8003d10:	4613      	mov	r3, r2
 8003d12:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0,index;
 8003d14:	2300      	movs	r3, #0
 8003d16:	81fb      	strh	r3, [r7, #14]
	index=scan_num16(offset);
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fb90 	bl	8003440 <scan_num16>
 8003d20:	4603      	mov	r3, r0
 8003d22:	81bb      	strh	r3, [r7, #12]
	// Get All
	if(index==0xFFFF)
 8003d24:	89bb      	ldrh	r3, [r7, #12]
 8003d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d134      	bne.n	8003d98 <Get_double+0x94>
	{
		CDC_Transmit_FS((unsigned char*)"Get All Array\n", 14);
 8003d2e:	210e      	movs	r1, #14
 8003d30:	482b      	ldr	r0, [pc, #172]	; (8003de0 <Get_double+0xdc>)
 8003d32:	f015 fb53 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	81fb      	strh	r3, [r7, #14]
 8003d3a:	e024      	b.n	8003d86 <Get_double+0x82>
		{
			if(!CSV_format)sprintf(RAM, "%f\t", arr[i]);
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <Get_double+0xe0>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <Get_double+0x56>
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	4925      	ldr	r1, [pc, #148]	; (8003de8 <Get_double+0xe4>)
 8003d52:	4826      	ldr	r0, [pc, #152]	; (8003dec <Get_double+0xe8>)
 8003d54:	f019 ffb8 	bl	801dcc8 <siprintf>
 8003d58:	e009      	b.n	8003d6e <Get_double+0x6a>
			else sprintf(RAM, "%f;", (double)arr[i]);
 8003d5a:	89fb      	ldrh	r3, [r7, #14]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	4922      	ldr	r1, [pc, #136]	; (8003df0 <Get_double+0xec>)
 8003d68:	4820      	ldr	r0, [pc, #128]	; (8003dec <Get_double+0xe8>)
 8003d6a:	f019 ffad 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003d6e:	481f      	ldr	r0, [pc, #124]	; (8003dec <Get_double+0xe8>)
 8003d70:	f7fc fa3e 	bl	80001f0 <strlen>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4619      	mov	r1, r3
 8003d7a:	481c      	ldr	r0, [pc, #112]	; (8003dec <Get_double+0xe8>)
 8003d7c:	f015 fb2e 	bl	80193dc <CDC_Transmit_FS>
		for(i=0;i<size;i++)
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	3301      	adds	r3, #1
 8003d84:	81fb      	strh	r3, [r7, #14]
 8003d86:	89fa      	ldrh	r2, [r7, #14]
 8003d88:	883b      	ldrh	r3, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3d6      	bcc.n	8003d3c <Get_double+0x38>
		}
		CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4818      	ldr	r0, [pc, #96]	; (8003df4 <Get_double+0xf0>)
 8003d92:	f015 fb23 	bl	80193dc <CDC_Transmit_FS>
		{
			sprintf(RAM, "%f\r\n", (double)arr[index]);
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
		}
	}
}
 8003d96:	e01f      	b.n	8003dd8 <Get_double+0xd4>
		if(index>size-1)
 8003d98:	883a      	ldrh	r2, [r7, #0]
 8003d9a:	89bb      	ldrh	r3, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d808      	bhi.n	8003db2 <Get_double+0xae>
			CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <Get_double+0xf4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2209      	movs	r2, #9
 8003da6:	b292      	uxth	r2, r2
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f015 fb16 	bl	80193dc <CDC_Transmit_FS>
}
 8003db0:	e012      	b.n	8003dd8 <Get_double+0xd4>
			sprintf(RAM, "%f\r\n", (double)arr[index]);
 8003db2:	89bb      	ldrh	r3, [r7, #12]
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	490f      	ldr	r1, [pc, #60]	; (8003dfc <Get_double+0xf8>)
 8003dc0:	480a      	ldr	r0, [pc, #40]	; (8003dec <Get_double+0xe8>)
 8003dc2:	f019 ff81 	bl	801dcc8 <siprintf>
			CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 8003dc6:	4809      	ldr	r0, [pc, #36]	; (8003dec <Get_double+0xe8>)
 8003dc8:	f7fc fa12 	bl	80001f0 <strlen>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4806      	ldr	r0, [pc, #24]	; (8003dec <Get_double+0xe8>)
 8003dd4:	f015 fb02 	bl	80193dc <CDC_Transmit_FS>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	08021c9c 	.word	0x08021c9c
 8003de4:	200008af 	.word	0x200008af
 8003de8:	08021ccc 	.word	0x08021ccc
 8003dec:	20002070 	.word	0x20002070
 8003df0:	08021cd0 	.word	0x08021cd0
 8003df4:	08021c18 	.word	0x08021c18
 8003df8:	2000014c 	.word	0x2000014c
 8003dfc:	08021cd4 	.word	0x08021cd4

08003e00 <Parser_process>:




void Parser_process(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
	uint16_t RES=0,i;
 8003e06:	2300      	movs	r3, #0
 8003e08:	80bb      	strh	r3, [r7, #4]

	if(BLE_bridge!=0)
 8003e0a:	4bb4      	ldr	r3, [pc, #720]	; (80040dc <Parser_process+0x2dc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d015      	beq.n	8003e3e <Parser_process+0x3e>
	{
		if(usart1_counter!=0)
 8003e12:	4bb3      	ldr	r3, [pc, #716]	; (80040e0 <Parser_process+0x2e0>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d011      	beq.n	8003e3e <Parser_process+0x3e>
		{
			if(rx_cmplt==0)
 8003e1a:	4bb2      	ldr	r3, [pc, #712]	; (80040e4 <Parser_process+0x2e4>)
 8003e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10c      	bne.n	8003e3e <Parser_process+0x3e>
			{
				CDC_Transmit_FS((unsigned char*)usart1_data, usart1_counter);
 8003e24:	4bae      	ldr	r3, [pc, #696]	; (80040e0 <Parser_process+0x2e0>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	48ae      	ldr	r0, [pc, #696]	; (80040e8 <Parser_process+0x2e8>)
 8003e2e:	f015 fad5 	bl	80193dc <CDC_Transmit_FS>
				usart1_counter=0;
 8003e32:	4bab      	ldr	r3, [pc, #684]	; (80040e0 <Parser_process+0x2e0>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
				rx_cmplt=-1;
 8003e38:	4baa      	ldr	r3, [pc, #680]	; (80040e4 <Parser_process+0x2e4>)
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(USBTimeOutRX>0)USBTimeOutRX--;
 8003e3e:	4bab      	ldr	r3, [pc, #684]	; (80040ec <Parser_process+0x2ec>)
 8003e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	dd08      	ble.n	8003e5a <Parser_process+0x5a>
 8003e48:	4ba8      	ldr	r3, [pc, #672]	; (80040ec <Parser_process+0x2ec>)
 8003e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	b21a      	sxth	r2, r3
 8003e56:	4ba5      	ldr	r3, [pc, #660]	; (80040ec <Parser_process+0x2ec>)
 8003e58:	801a      	strh	r2, [r3, #0]
	if(USBTimeOutRX==0)
 8003e5a:	4ba4      	ldr	r3, [pc, #656]	; (80040ec <Parser_process+0x2ec>)
 8003e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 8361 	bne.w	8004528 <Parser_process+0x728>
	{
		// Bluetooth bridge
		if(BLE_bridge!=0)
 8003e66:	4b9d      	ldr	r3, [pc, #628]	; (80040dc <Parser_process+0x2dc>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d024      	beq.n	8003eb8 <Parser_process+0xb8>
		{
			for(i=0;i<rxcntr;i++)bluetoothbuf[i]=rx_buf[i];
 8003e6e:	2300      	movs	r3, #0
 8003e70:	80fb      	strh	r3, [r7, #6]
 8003e72:	e008      	b.n	8003e86 <Parser_process+0x86>
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	499d      	ldr	r1, [pc, #628]	; (80040f0 <Parser_process+0x2f0>)
 8003e7a:	5c89      	ldrb	r1, [r1, r2]
 8003e7c:	4a9d      	ldr	r2, [pc, #628]	; (80040f4 <Parser_process+0x2f4>)
 8003e7e:	54d1      	strb	r1, [r2, r3]
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	3301      	adds	r3, #1
 8003e84:	80fb      	strh	r3, [r7, #6]
 8003e86:	4b9c      	ldr	r3, [pc, #624]	; (80040f8 <Parser_process+0x2f8>)
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3f1      	bcc.n	8003e74 <Parser_process+0x74>
			bluetoothcntr=rxcntr;
 8003e90:	4b99      	ldr	r3, [pc, #612]	; (80040f8 <Parser_process+0x2f8>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b99      	ldr	r3, [pc, #612]	; (80040fc <Parser_process+0x2fc>)
 8003e98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)rx_buf, rxcntr, 1000);
 8003e9a:	4b97      	ldr	r3, [pc, #604]	; (80040f8 <Parser_process+0x2f8>)
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea2:	4993      	ldr	r1, [pc, #588]	; (80040f0 <Parser_process+0x2f0>)
 8003ea4:	4896      	ldr	r0, [pc, #600]	; (8004100 <Parser_process+0x300>)
 8003ea6:	f00b ff6d 	bl	800fd84 <HAL_UART_Transmit>
			clear_buf();
 8003eaa:	f7ff fa0d 	bl	80032c8 <clear_buf>
			USBTimeOutRX=-1;
 8003eae:	4b8f      	ldr	r3, [pc, #572]	; (80040ec <Parser_process+0x2ec>)
 8003eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	e337      	b.n	8004528 <Parser_process+0x728>
		}
		// Parser
		else
		{
			switch(parser(0))
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f7ff fb4f 	bl	800355c <parser>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	3b02      	subs	r3, #2
 8003ec2:	2b0b      	cmp	r3, #11
 8003ec4:	f200 831d 	bhi.w	8004502 <Parser_process+0x702>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <Parser_process+0xd0>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	080041fd 	.word	0x080041fd
 8003ed4:	08004379 	.word	0x08004379
 8003ed8:	080044f5 	.word	0x080044f5
 8003edc:	08004049 	.word	0x08004049
 8003ee0:	08003fbf 	.word	0x08003fbf
 8003ee4:	08003fe1 	.word	0x08003fe1
 8003ee8:	08004003 	.word	0x08004003
 8003eec:	08003f71 	.word	0x08003f71
 8003ef0:	08003f8b 	.word	0x08003f8b
 8003ef4:	08003f01 	.word	0x08003f01
 8003ef8:	08003f27 	.word	0x08003f27
 8003efc:	08003f21 	.word	0x08003f21
			{
				case 0xFFFF: break;
				case 0xFFFE: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;

				case BL_BRIDGE:
					CDC_Transmit_FS((unsigned char*)"BlueTooth Bridge Enabled", 24);
 8003f00:	2118      	movs	r1, #24
 8003f02:	4880      	ldr	r0, [pc, #512]	; (8004104 <Parser_process+0x304>)
 8003f04:	f015 fa6a 	bl	80193dc <CDC_Transmit_FS>
					BLE_bridge=1;
 8003f08:	4b74      	ldr	r3, [pc, #464]	; (80040dc <Parser_process+0x2dc>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
					usart1_counter=0;
 8003f0e:	4b74      	ldr	r3, [pc, #464]	; (80040e0 <Parser_process+0x2e0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
					rx_cmplt=-1;
 8003f14:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <Parser_process+0x2e4>)
 8003f16:	22ff      	movs	r2, #255	; 0xff
 8003f18:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003f1a:	f7ff f9d5 	bl	80032c8 <clear_buf>
					break;
 8003f1e:	e2fb      	b.n	8004518 <Parser_process+0x718>

				case CREATE:

					clear_buf();
 8003f20:	f7ff f9d2 	bl	80032c8 <clear_buf>
					break;
 8003f24:	e2f8      	b.n	8004518 <Parser_process+0x718>

				case BL_CONFIG:
					if(BLE_config==1)BLE_config=0;
 8003f26:	4b78      	ldr	r3, [pc, #480]	; (8004108 <Parser_process+0x308>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d103      	bne.n	8003f36 <Parser_process+0x136>
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <Parser_process+0x308>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <Parser_process+0x13c>
					else BLE_config=1;
 8003f36:	4b74      	ldr	r3, [pc, #464]	; (8004108 <Parser_process+0x308>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
					BLueTooth_Configuration(BLE_config);
 8003f3c:	4b72      	ldr	r3, [pc, #456]	; (8004108 <Parser_process+0x308>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe f8c3 	bl	80020cc <BLueTooth_Configuration>
					sprintf(RAM, "BlueTooth Config = %d", BLE_config);
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <Parser_process+0x308>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	496f      	ldr	r1, [pc, #444]	; (800410c <Parser_process+0x30c>)
 8003f4e:	4870      	ldr	r0, [pc, #448]	; (8004110 <Parser_process+0x310>)
 8003f50:	f019 feba 	bl	801dcc8 <siprintf>
					CDC_Transmit_FS((unsigned char*)RAM, 20);
 8003f54:	2114      	movs	r1, #20
 8003f56:	486e      	ldr	r0, [pc, #440]	; (8004110 <Parser_process+0x310>)
 8003f58:	f015 fa40 	bl	80193dc <CDC_Transmit_FS>
					HAL_UART_Transmit(&huart1, (unsigned char*)RAM, 20, 1000);
 8003f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f60:	2214      	movs	r2, #20
 8003f62:	496b      	ldr	r1, [pc, #428]	; (8004110 <Parser_process+0x310>)
 8003f64:	4866      	ldr	r0, [pc, #408]	; (8004100 <Parser_process+0x300>)
 8003f66:	f00b ff0d 	bl	800fd84 <HAL_UART_Transmit>
					clear_buf();
 8003f6a:	f7ff f9ad 	bl	80032c8 <clear_buf>
					break;
 8003f6e:	e2d3      	b.n	8004518 <Parser_process+0x718>

				case SELF_CAL:
					clear_buf();
 8003f70:	f7ff f9aa 	bl	80032c8 <clear_buf>
					adc_calibration_mode=self_calibration;
 8003f74:	4b67      	ldr	r3, [pc, #412]	; (8004114 <Parser_process+0x314>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
					adc_start_calibration=1;
 8003f7a:	4b67      	ldr	r3, [pc, #412]	; (8004118 <Parser_process+0x318>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003f80:	2102      	movs	r1, #2
 8003f82:	4866      	ldr	r0, [pc, #408]	; (800411c <Parser_process+0x31c>)
 8003f84:	f015 fa2a 	bl	80193dc <CDC_Transmit_FS>
				break;
 8003f88:	e2c6      	b.n	8004518 <Parser_process+0x718>
				case SYS_CAL:
					RES=screen;
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <Parser_process+0x320>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	80bb      	strh	r3, [r7, #4]
					Auto_System_Calibration();
 8003f90:	f7fd f9d2 	bl	8001338 <Auto_System_Calibration>
						ADC_Conversion(ADC_SPS);
 8003f94:	4b63      	ldr	r3, [pc, #396]	; (8004124 <Parser_process+0x324>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd f8d7 	bl	800114c <ADC_Conversion>
						LED(0,0,0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f7fe f8e8 	bl	8002178 <LED>
						screen=RES;
 8003fa8:	88bb      	ldrh	r3, [r7, #4]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <Parser_process+0x320>)
 8003fae:	701a      	strb	r2, [r3, #0]
					clear_buf();
 8003fb0:	f7ff f98a 	bl	80032c8 <clear_buf>
					CDC_Transmit_FS((unsigned char*)"OK", 2);
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4859      	ldr	r0, [pc, #356]	; (800411c <Parser_process+0x31c>)
 8003fb8:	f015 fa10 	bl	80193dc <CDC_Transmit_FS>
					break;
 8003fbc:	e2ac      	b.n	8004518 <Parser_process+0x718>

				case CSV_ON: CSV_format=1; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV enabled", 11); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV enabled", 11, 1000); break;
 8003fbe:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <Parser_process+0x328>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	f7ff f980 	bl	80032c8 <clear_buf>
 8003fc8:	210b      	movs	r1, #11
 8003fca:	4858      	ldr	r0, [pc, #352]	; (800412c <Parser_process+0x32c>)
 8003fcc:	f015 fa06 	bl	80193dc <CDC_Transmit_FS>
 8003fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fd4:	220b      	movs	r2, #11
 8003fd6:	4955      	ldr	r1, [pc, #340]	; (800412c <Parser_process+0x32c>)
 8003fd8:	4849      	ldr	r0, [pc, #292]	; (8004100 <Parser_process+0x300>)
 8003fda:	f00b fed3 	bl	800fd84 <HAL_UART_Transmit>
 8003fde:	e29b      	b.n	8004518 <Parser_process+0x718>
				case CSV_OFF: CSV_format=0; clear_buf(); CDC_Transmit_FS((unsigned char*)"CSV disabled", 12); HAL_UART_Transmit(&huart1, (unsigned char*)"CSV disabled", 12, 1000); break;
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <Parser_process+0x328>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	f7ff f96f 	bl	80032c8 <clear_buf>
 8003fea:	210c      	movs	r1, #12
 8003fec:	4850      	ldr	r0, [pc, #320]	; (8004130 <Parser_process+0x330>)
 8003fee:	f015 f9f5 	bl	80193dc <CDC_Transmit_FS>
 8003ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	494d      	ldr	r1, [pc, #308]	; (8004130 <Parser_process+0x330>)
 8003ffa:	4841      	ldr	r0, [pc, #260]	; (8004100 <Parser_process+0x300>)
 8003ffc:	f00b fec2 	bl	800fd84 <HAL_UART_Transmit>
 8004000:	e28a      	b.n	8004518 <Parser_process+0x718>

				case HELP:
					CDC_Transmit_FS((unsigned char*)CSV_ON_instruction, strlen(CSV_ON_instruction));
 8004002:	215a      	movs	r1, #90	; 0x5a
 8004004:	484b      	ldr	r0, [pc, #300]	; (8004134 <Parser_process+0x334>)
 8004006:	f015 f9e9 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)CSV_OFF_instruction, strlen(CSV_OFF_instruction));
 800400a:	215d      	movs	r1, #93	; 0x5d
 800400c:	484a      	ldr	r0, [pc, #296]	; (8004138 <Parser_process+0x338>)
 800400e:	f015 f9e5 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)HELP_instruction, strlen(HELP_instruction));
 8004012:	212d      	movs	r1, #45	; 0x2d
 8004014:	4849      	ldr	r0, [pc, #292]	; (800413c <Parser_process+0x33c>)
 8004016:	f015 f9e1 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GV_instruction, strlen(GV_instruction));
 800401a:	214f      	movs	r1, #79	; 0x4f
 800401c:	4848      	ldr	r0, [pc, #288]	; (8004140 <Parser_process+0x340>)
 800401e:	f015 f9dd 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SET_instruction, strlen(SET_instruction));
 8004022:	215e      	movs	r1, #94	; 0x5e
 8004024:	4847      	ldr	r0, [pc, #284]	; (8004144 <Parser_process+0x344>)
 8004026:	f015 f9d9 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)GET_instruction, strlen(GET_instruction));
 800402a:	215d      	movs	r1, #93	; 0x5d
 800402c:	4846      	ldr	r0, [pc, #280]	; (8004148 <Parser_process+0x348>)
 800402e:	f015 f9d5 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)ALL_instruction, strlen(ALL_instruction));
 8004032:	2150      	movs	r1, #80	; 0x50
 8004034:	4845      	ldr	r0, [pc, #276]	; (800414c <Parser_process+0x34c>)
 8004036:	f015 f9d1 	bl	80193dc <CDC_Transmit_FS>
					CDC_Transmit_FS((unsigned char*)SAVE_instruction, strlen(SAVE_instruction));
 800403a:	2158      	movs	r1, #88	; 0x58
 800403c:	4844      	ldr	r0, [pc, #272]	; (8004150 <Parser_process+0x350>)
 800403e:	f015 f9cd 	bl	80193dc <CDC_Transmit_FS>

					clear_buf(); break;
 8004042:	f7ff f941 	bl	80032c8 <clear_buf>
 8004046:	e267      	b.n	8004518 <Parser_process+0x718>

				case GV:
					if(CSV_format==0)
 8004048:	4b37      	ldr	r3, [pc, #220]	; (8004128 <Parser_process+0x328>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d142      	bne.n	80040d6 <Parser_process+0x2d6>
					{
						CDC_Transmit_FS((unsigned char*)"Available Global Variables:\n", 28);
 8004050:	211c      	movs	r1, #28
 8004052:	4840      	ldr	r0, [pc, #256]	; (8004154 <Parser_process+0x354>)
 8004054:	f015 f9c2 	bl	80193dc <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 8004058:	2300      	movs	r3, #0
 800405a:	80fb      	strh	r3, [r7, #6]
 800405c:	e037      	b.n	80040ce <Parser_process+0x2ce>
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	4a3d      	ldr	r2, [pc, #244]	; (8004158 <Parser_process+0x358>)
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	461a      	mov	r2, r3
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <Parser_process+0x35c>)
 8004068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406c:	210b      	movs	r1, #11
 800406e:	4618      	mov	r0, r3
 8004070:	f015 f9b4 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 8004074:	2101      	movs	r1, #1
 8004076:	483a      	ldr	r0, [pc, #232]	; (8004160 <Parser_process+0x360>)
 8004078:	f015 f9b0 	bl	80193dc <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	4a39      	ldr	r2, [pc, #228]	; (8004164 <Parser_process+0x364>)
 8004080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004084:	461a      	mov	r2, r3
 8004086:	4938      	ldr	r1, [pc, #224]	; (8004168 <Parser_process+0x368>)
 8004088:	4821      	ldr	r0, [pc, #132]	; (8004110 <Parser_process+0x310>)
 800408a:	f019 fe1d 	bl	801dcc8 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 800408e:	4820      	ldr	r0, [pc, #128]	; (8004110 <Parser_process+0x310>)
 8004090:	f7fc f8ae 	bl	80001f0 <strlen>
 8004094:	4603      	mov	r3, r0
 8004096:	b29b      	uxth	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	481d      	ldr	r0, [pc, #116]	; (8004110 <Parser_process+0x310>)
 800409c:	f015 f99e 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\t\t", 1);
 80040a0:	2101      	movs	r1, #1
 80040a2:	482f      	ldr	r0, [pc, #188]	; (8004160 <Parser_process+0x360>)
 80040a4:	f015 f99a 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	4a30      	ldr	r2, [pc, #192]	; (800416c <Parser_process+0x36c>)
 80040ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	492f      	ldr	r1, [pc, #188]	; (8004170 <Parser_process+0x370>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f015 f98e 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 80040c0:	2101      	movs	r1, #1
 80040c2:	482c      	ldr	r0, [pc, #176]	; (8004174 <Parser_process+0x374>)
 80040c4:	f015 f98a 	bl	80193dc <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	3301      	adds	r3, #1
 80040cc:	80fb      	strh	r3, [r7, #6]
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	2b0e      	cmp	r3, #14
 80040d2:	d9c4      	bls.n	800405e <Parser_process+0x25e>
 80040d4:	e08b      	b.n	80041ee <Parser_process+0x3ee>
						}
					}
					else
					{
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	80fb      	strh	r3, [r7, #6]
 80040da:	e085      	b.n	80041e8 <Parser_process+0x3e8>
 80040dc:	2000088c 	.word	0x2000088c
 80040e0:	2000088d 	.word	0x2000088d
 80040e4:	2000088e 	.word	0x2000088e
 80040e8:	200020f8 	.word	0x200020f8
 80040ec:	20000184 	.word	0x20000184
 80040f0:	20005b4c 	.word	0x20005b4c
 80040f4:	20005ae8 	.word	0x20005ae8
 80040f8:	200008b2 	.word	0x200008b2
 80040fc:	200008b0 	.word	0x200008b0
 8004100:	20007a30 	.word	0x20007a30
 8004104:	08021cdc 	.word	0x08021cdc
 8004108:	20000080 	.word	0x20000080
 800410c:	08021cf8 	.word	0x08021cf8
 8004110:	20002070 	.word	0x20002070
 8004114:	2000089f 	.word	0x2000089f
 8004118:	2000081c 	.word	0x2000081c
 800411c:	08021d10 	.word	0x08021d10
 8004120:	2000004c 	.word	0x2000004c
 8004124:	2000009b 	.word	0x2000009b
 8004128:	200008af 	.word	0x200008af
 800412c:	08021d14 	.word	0x08021d14
 8004130:	08021d20 	.word	0x08021d20
 8004134:	08023b34 	.word	0x08023b34
 8004138:	08023b90 	.word	0x08023b90
 800413c:	08023bf0 	.word	0x08023bf0
 8004140:	08023c20 	.word	0x08023c20
 8004144:	08023c70 	.word	0x08023c70
 8004148:	08023cd0 	.word	0x08023cd0
 800414c:	08023d30 	.word	0x08023d30
 8004150:	08023d84 	.word	0x08023d84
 8004154:	08021d30 	.word	0x08021d30
 8004158:	08023af4 	.word	0x08023af4
 800415c:	2000012c 	.word	0x2000012c
 8004160:	08021d50 	.word	0x08021d50
 8004164:	08023b04 	.word	0x08023b04
 8004168:	08021d54 	.word	0x08021d54
 800416c:	200000f0 	.word	0x200000f0
 8004170:	08023ae4 	.word	0x08023ae4
 8004174:	08021d58 	.word	0x08021d58
						{
							CDC_Transmit_FS((unsigned char*)TYPE_STRING[GV_TYPE[i]], 11);
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4ab5      	ldr	r2, [pc, #724]	; (8004450 <Parser_process+0x650>)
 800417c:	5cd3      	ldrb	r3, [r2, r3]
 800417e:	461a      	mov	r2, r3
 8004180:	4bb4      	ldr	r3, [pc, #720]	; (8004454 <Parser_process+0x654>)
 8004182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004186:	210b      	movs	r1, #11
 8004188:	4618      	mov	r0, r3
 800418a:	f015 f927 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 800418e:	2101      	movs	r1, #1
 8004190:	48b1      	ldr	r0, [pc, #708]	; (8004458 <Parser_process+0x658>)
 8004192:	f015 f923 	bl	80193dc <CDC_Transmit_FS>
							sprintf(RAM, "%i ", GV_LENGTH[i]);
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	4ab0      	ldr	r2, [pc, #704]	; (800445c <Parser_process+0x65c>)
 800419a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800419e:	461a      	mov	r2, r3
 80041a0:	49af      	ldr	r1, [pc, #700]	; (8004460 <Parser_process+0x660>)
 80041a2:	48b0      	ldr	r0, [pc, #704]	; (8004464 <Parser_process+0x664>)
 80041a4:	f019 fd90 	bl	801dcc8 <siprintf>
							CDC_Transmit_FS((unsigned char*)RAM, strlen(RAM));
 80041a8:	48ae      	ldr	r0, [pc, #696]	; (8004464 <Parser_process+0x664>)
 80041aa:	f7fc f821 	bl	80001f0 <strlen>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	48ab      	ldr	r0, [pc, #684]	; (8004464 <Parser_process+0x664>)
 80041b6:	f015 f911 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)";", 1);
 80041ba:	2101      	movs	r1, #1
 80041bc:	48a6      	ldr	r0, [pc, #664]	; (8004458 <Parser_process+0x658>)
 80041be:	f015 f90d 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)GV_STRING[i], GV_NUM_OF_SYM[i]);
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	4aa8      	ldr	r2, [pc, #672]	; (8004468 <Parser_process+0x668>)
 80041c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	49a7      	ldr	r1, [pc, #668]	; (800446c <Parser_process+0x66c>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f015 f901 	bl	80193dc <CDC_Transmit_FS>
							CDC_Transmit_FS((unsigned char*)"\n", 1);
 80041da:	2101      	movs	r1, #1
 80041dc:	48a4      	ldr	r0, [pc, #656]	; (8004470 <Parser_process+0x670>)
 80041de:	f015 f8fd 	bl	80193dc <CDC_Transmit_FS>
						for(i=0;i<NUMBER_OF_VARIABLES;i++)
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	3301      	adds	r3, #1
 80041e6:	80fb      	strh	r3, [r7, #6]
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	2b0e      	cmp	r3, #14
 80041ec:	d9c4      	bls.n	8004178 <Parser_process+0x378>
						}
					}

					CDC_Transmit_FS((unsigned char*)"\r\n", 1);
 80041ee:	2101      	movs	r1, #1
 80041f0:	48a0      	ldr	r0, [pc, #640]	; (8004474 <Parser_process+0x674>)
 80041f2:	f015 f8f3 	bl	80193dc <CDC_Transmit_FS>
					clear_buf();
 80041f6:	f7ff f867 	bl	80032c8 <clear_buf>
					break;
 80041fa:	e18d      	b.n	8004518 <Parser_process+0x718>

				case GET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 80041fc:	2303      	movs	r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f9aa 	bl	800355c <parser>
 8004208:	4603      	mov	r3, r0
 800420a:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 800420c:	88bb      	ldrh	r3, [r7, #4]
 800420e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8004212:	4293      	cmp	r3, r2
 8004214:	f200 80a3 	bhi.w	800435e <Parser_process+0x55e>
					{
						switch(GV_TYPE[RES])
 8004218:	88bb      	ldrh	r3, [r7, #4]
 800421a:	4a8d      	ldr	r2, [pc, #564]	; (8004450 <Parser_process+0x650>)
 800421c:	5cd3      	ldrb	r3, [r2, r3]
 800421e:	2b07      	cmp	r3, #7
 8004220:	f200 8092 	bhi.w	8004348 <Parser_process+0x548>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <Parser_process+0x42c>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	0800424d 	.word	0x0800424d
 8004230:	08004371 	.word	0x08004371
 8004234:	08004277 	.word	0x08004277
 8004238:	080042a1 	.word	0x080042a1
 800423c:	08004371 	.word	0x08004371
 8004240:	080042cb 	.word	0x080042cb
 8004244:	0800431f 	.word	0x0800431f
 8004248:	080042f5 	.word	0x080042f5
						{
							case type_INT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800424c:	88bb      	ldrh	r3, [r7, #4]
 800424e:	4a8a      	ldr	r2, [pc, #552]	; (8004478 <Parser_process+0x678>)
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	4618      	mov	r0, r3
 8004256:	2203      	movs	r2, #3
 8004258:	88bb      	ldrh	r3, [r7, #4]
 800425a:	4984      	ldr	r1, [pc, #528]	; (800446c <Parser_process+0x66c>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	4413      	add	r3, r2
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3302      	adds	r3, #2
 8004264:	b2d9      	uxtb	r1, r3
 8004266:	88bb      	ldrh	r3, [r7, #4]
 8004268:	4a7c      	ldr	r2, [pc, #496]	; (800445c <Parser_process+0x65c>)
 800426a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800426e:	461a      	mov	r2, r3
 8004270:	f7ff fbc4 	bl	80039fc <Get_uint8>
 8004274:	e07d      	b.n	8004372 <Parser_process+0x572>
							case type_INT16: break;
							case type_INT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 8004276:	88bb      	ldrh	r3, [r7, #4]
 8004278:	4a7f      	ldr	r2, [pc, #508]	; (8004478 <Parser_process+0x678>)
 800427a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427e:	4618      	mov	r0, r3
 8004280:	2203      	movs	r2, #3
 8004282:	88bb      	ldrh	r3, [r7, #4]
 8004284:	4979      	ldr	r1, [pc, #484]	; (800446c <Parser_process+0x66c>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	4413      	add	r3, r2
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3302      	adds	r3, #2
 800428e:	b2d9      	uxtb	r1, r3
 8004290:	88bb      	ldrh	r3, [r7, #4]
 8004292:	4a72      	ldr	r2, [pc, #456]	; (800445c <Parser_process+0x65c>)
 8004294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004298:	461a      	mov	r2, r3
 800429a:	f7ff fc2b 	bl	8003af4 <Get_int32>
 800429e:	e068      	b.n	8004372 <Parser_process+0x572>
							case type_UINT8: Get_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042a0:	88bb      	ldrh	r3, [r7, #4]
 80042a2:	4a75      	ldr	r2, [pc, #468]	; (8004478 <Parser_process+0x678>)
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	4618      	mov	r0, r3
 80042aa:	2203      	movs	r2, #3
 80042ac:	88bb      	ldrh	r3, [r7, #4]
 80042ae:	496f      	ldr	r1, [pc, #444]	; (800446c <Parser_process+0x66c>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	4413      	add	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3302      	adds	r3, #2
 80042b8:	b2d9      	uxtb	r1, r3
 80042ba:	88bb      	ldrh	r3, [r7, #4]
 80042bc:	4a67      	ldr	r2, [pc, #412]	; (800445c <Parser_process+0x65c>)
 80042be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f7ff fb9a 	bl	80039fc <Get_uint8>
 80042c8:	e053      	b.n	8004372 <Parser_process+0x572>
							case type_UINT16: break;
							case type_UINT32: Get_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042ca:	88bb      	ldrh	r3, [r7, #4]
 80042cc:	4a6a      	ldr	r2, [pc, #424]	; (8004478 <Parser_process+0x678>)
 80042ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d2:	4618      	mov	r0, r3
 80042d4:	2203      	movs	r2, #3
 80042d6:	88bb      	ldrh	r3, [r7, #4]
 80042d8:	4964      	ldr	r1, [pc, #400]	; (800446c <Parser_process+0x66c>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	4413      	add	r3, r2
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3302      	adds	r3, #2
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	88bb      	ldrh	r3, [r7, #4]
 80042e6:	4a5d      	ldr	r2, [pc, #372]	; (800445c <Parser_process+0x65c>)
 80042e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f7ff fc01 	bl	8003af4 <Get_int32>
 80042f2:	e03e      	b.n	8004372 <Parser_process+0x572>
							case type_DOUBLE: Get_double((double*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 80042f4:	88bb      	ldrh	r3, [r7, #4]
 80042f6:	4a60      	ldr	r2, [pc, #384]	; (8004478 <Parser_process+0x678>)
 80042f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fc:	4618      	mov	r0, r3
 80042fe:	2203      	movs	r2, #3
 8004300:	88bb      	ldrh	r3, [r7, #4]
 8004302:	495a      	ldr	r1, [pc, #360]	; (800446c <Parser_process+0x66c>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	4413      	add	r3, r2
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3302      	adds	r3, #2
 800430c:	b2d9      	uxtb	r1, r3
 800430e:	88bb      	ldrh	r3, [r7, #4]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <Parser_process+0x65c>)
 8004312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004316:	461a      	mov	r2, r3
 8004318:	f7ff fcf4 	bl	8003d04 <Get_double>
 800431c:	e029      	b.n	8004372 <Parser_process+0x572>
							case type_FLOAT:  Get_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2, GV_LENGTH[RES]); break;
 800431e:	88bb      	ldrh	r3, [r7, #4]
 8004320:	4a55      	ldr	r2, [pc, #340]	; (8004478 <Parser_process+0x678>)
 8004322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004326:	4618      	mov	r0, r3
 8004328:	2203      	movs	r2, #3
 800432a:	88bb      	ldrh	r3, [r7, #4]
 800432c:	494f      	ldr	r1, [pc, #316]	; (800446c <Parser_process+0x66c>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	4413      	add	r3, r2
 8004332:	b2db      	uxtb	r3, r3
 8004334:	3302      	adds	r3, #2
 8004336:	b2d9      	uxtb	r1, r3
 8004338:	88bb      	ldrh	r3, [r7, #4]
 800433a:	4a48      	ldr	r2, [pc, #288]	; (800445c <Parser_process+0x65c>)
 800433c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004340:	461a      	mov	r2, r3
 8004342:	f7ff fc55 	bl	8003bf0 <Get_float>
 8004346:	e014      	b.n	8004372 <Parser_process+0x572>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <Parser_process+0x67c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2209      	movs	r2, #9
 800434e:	b292      	uxth	r2, r2
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f015 f842 	bl	80193dc <CDC_Transmit_FS>
 8004358:	f7fe ffb6 	bl	80032c8 <clear_buf>
 800435c:	e009      	b.n	8004372 <Parser_process+0x572>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <Parser_process+0x67c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2209      	movs	r2, #9
 8004364:	b292      	uxth	r2, r2
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f015 f837 	bl	80193dc <CDC_Transmit_FS>
 800436e:	e000      	b.n	8004372 <Parser_process+0x572>
							case type_INT16: break;
 8004370:	bf00      	nop
					}
					clear_buf(); break;
 8004372:	f7fe ffa9 	bl	80032c8 <clear_buf>
 8004376:	e0cf      	b.n	8004518 <Parser_process+0x718>


				case SET_CMD:
					RES=parser(COMMAND_NUM_OF_SYM[GET_CMD]+1);
 8004378:	2303      	movs	r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f8ec 	bl	800355c <parser>
 8004384:	4603      	mov	r3, r0
 8004386:	80bb      	strh	r3, [r7, #4]
					if(RES<0xFFFE)
 8004388:	88bb      	ldrh	r3, [r7, #4]
 800438a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800438e:	4293      	cmp	r3, r2
 8004390:	f200 80a3 	bhi.w	80044da <Parser_process+0x6da>
					{
						switch(GV_TYPE[RES])
 8004394:	88bb      	ldrh	r3, [r7, #4]
 8004396:	4a2e      	ldr	r2, [pc, #184]	; (8004450 <Parser_process+0x650>)
 8004398:	5cd3      	ldrb	r3, [r2, r3]
 800439a:	2b07      	cmp	r3, #7
 800439c:	f200 8092 	bhi.w	80044c4 <Parser_process+0x6c4>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <Parser_process+0x5a8>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043c9 	.word	0x080043c9
 80043ac:	080043eb 	.word	0x080043eb
 80043b0:	0800440d 	.word	0x0800440d
 80043b4:	0800442f 	.word	0x0800442f
 80043b8:	080044ed 	.word	0x080044ed
 80043bc:	08004481 	.word	0x08004481
 80043c0:	080044a3 	.word	0x080044a3
 80043c4:	080044ed 	.word	0x080044ed
						{
							case type_INT8: Set_int8((int8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <Parser_process+0x678>)
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	4618      	mov	r0, r3
 80043d2:	2203      	movs	r2, #3
 80043d4:	88bb      	ldrh	r3, [r7, #4]
 80043d6:	4925      	ldr	r1, [pc, #148]	; (800446c <Parser_process+0x66c>)
 80043d8:	5ccb      	ldrb	r3, [r1, r3]
 80043da:	4413      	add	r3, r2
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3302      	adds	r3, #2
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7ff f960 	bl	80036a8 <Set_int8>
 80043e8:	e081      	b.n	80044ee <Parser_process+0x6ee>
							case type_INT16: Set_int16((int16_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <Parser_process+0x678>)
 80043ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f2:	4618      	mov	r0, r3
 80043f4:	2203      	movs	r2, #3
 80043f6:	88bb      	ldrh	r3, [r7, #4]
 80043f8:	491c      	ldr	r1, [pc, #112]	; (800446c <Parser_process+0x66c>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	4413      	add	r3, r2
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3302      	adds	r3, #2
 8004402:	b2db      	uxtb	r3, r3
 8004404:	4619      	mov	r1, r3
 8004406:	f7ff f9a5 	bl	8003754 <Set_int16>
 800440a:	e070      	b.n	80044ee <Parser_process+0x6ee>
							case type_INT32: Set_int32((int32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800440c:	88bb      	ldrh	r3, [r7, #4]
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <Parser_process+0x678>)
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	4618      	mov	r0, r3
 8004416:	2203      	movs	r2, #3
 8004418:	88bb      	ldrh	r3, [r7, #4]
 800441a:	4914      	ldr	r1, [pc, #80]	; (800446c <Parser_process+0x66c>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	4413      	add	r3, r2
 8004420:	b2db      	uxtb	r3, r3
 8004422:	3302      	adds	r3, #2
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	f7ff f9ec 	bl	8003804 <Set_int32>
 800442c:	e05f      	b.n	80044ee <Parser_process+0x6ee>
							case type_UINT8: Set_uint8((uint8_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 800442e:	88bb      	ldrh	r3, [r7, #4]
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <Parser_process+0x678>)
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	4618      	mov	r0, r3
 8004438:	2203      	movs	r2, #3
 800443a:	88bb      	ldrh	r3, [r7, #4]
 800443c:	490b      	ldr	r1, [pc, #44]	; (800446c <Parser_process+0x66c>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	4413      	add	r3, r2
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3302      	adds	r3, #2
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	f7ff f8db 	bl	8003604 <Set_uint8>
 800444e:	e04e      	b.n	80044ee <Parser_process+0x6ee>
 8004450:	08023af4 	.word	0x08023af4
 8004454:	2000012c 	.word	0x2000012c
 8004458:	08021d5c 	.word	0x08021d5c
 800445c:	08023b04 	.word	0x08023b04
 8004460:	08021d54 	.word	0x08021d54
 8004464:	20002070 	.word	0x20002070
 8004468:	200000f0 	.word	0x200000f0
 800446c:	08023ae4 	.word	0x08023ae4
 8004470:	08021d58 	.word	0x08021d58
 8004474:	08021c18 	.word	0x08021c18
 8004478:	200000b4 	.word	0x200000b4
 800447c:	2000014c 	.word	0x2000014c
							case type_UINT16: break;
							case type_UINT32: Set_uint32((uint32_t*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 8004480:	88bb      	ldrh	r3, [r7, #4]
 8004482:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <Parser_process+0x738>)
 8004484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004488:	4618      	mov	r0, r3
 800448a:	2203      	movs	r2, #3
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	492b      	ldr	r1, [pc, #172]	; (800453c <Parser_process+0x73c>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	4413      	add	r3, r2
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3302      	adds	r3, #2
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4619      	mov	r1, r3
 800449c:	f7ff fa14 	bl	80038c8 <Set_uint32>
 80044a0:	e025      	b.n	80044ee <Parser_process+0x6ee>
							case type_DOUBLE: break;
							case type_FLOAT: Set_float((float*)GV_LINKS[RES], COMMAND_NUM_OF_SYM[GET_CMD]+GV_NUM_OF_SYM[RES]+2); break;
 80044a2:	88bb      	ldrh	r3, [r7, #4]
 80044a4:	4a24      	ldr	r2, [pc, #144]	; (8004538 <Parser_process+0x738>)
 80044a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044aa:	4618      	mov	r0, r3
 80044ac:	2203      	movs	r2, #3
 80044ae:	88bb      	ldrh	r3, [r7, #4]
 80044b0:	4922      	ldr	r1, [pc, #136]	; (800453c <Parser_process+0x73c>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	4413      	add	r3, r2
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3302      	adds	r3, #2
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4619      	mov	r1, r3
 80044be:	f7ff fa4b 	bl	8003958 <Set_float>
 80044c2:	e014      	b.n	80044ee <Parser_process+0x6ee>
							default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <Parser_process+0x740>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2209      	movs	r2, #9
 80044ca:	b292      	uxth	r2, r2
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f014 ff84 	bl	80193dc <CDC_Transmit_FS>
 80044d4:	f7fe fef8 	bl	80032c8 <clear_buf>
 80044d8:	e009      	b.n	80044ee <Parser_process+0x6ee>
						}
					}
					else
					{
						CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]);
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <Parser_process+0x740>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2209      	movs	r2, #9
 80044e0:	b292      	uxth	r2, r2
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f014 ff79 	bl	80193dc <CDC_Transmit_FS>
 80044ea:	e000      	b.n	80044ee <Parser_process+0x6ee>
							case type_UINT16: break;
 80044ec:	bf00      	nop
					}
					clear_buf(); break;
 80044ee:	f7fe feeb 	bl	80032c8 <clear_buf>
 80044f2:	e011      	b.n	8004518 <Parser_process+0x718>


				case SAVE_CMD:
					CDC_Transmit_FS((unsigned char*)"FLASH MEMORY IS BROKEN!!", 24);
 80044f4:	2118      	movs	r1, #24
 80044f6:	4813      	ldr	r0, [pc, #76]	; (8004544 <Parser_process+0x744>)
 80044f8:	f014 ff70 	bl	80193dc <CDC_Transmit_FS>
					clear_buf(); break;
 80044fc:	f7fe fee4 	bl	80032c8 <clear_buf>
 8004500:	e00a      	b.n	8004518 <Parser_process+0x718>

				default: CDC_Transmit_FS((unsigned char*)COMMAND_STRING[UNKNOWING_CMD], COMMAND_NUM_OF_SYM[UNKNOWING_CMD]); clear_buf(); break;
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <Parser_process+0x740>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2209      	movs	r2, #9
 8004508:	b292      	uxth	r2, r2
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f014 ff65 	bl	80193dc <CDC_Transmit_FS>
 8004512:	f7fe fed9 	bl	80032c8 <clear_buf>
 8004516:	bf00      	nop

			}
			CDC_Transmit_FS((unsigned char*)"\r\n", 2);
 8004518:	2102      	movs	r1, #2
 800451a:	480b      	ldr	r0, [pc, #44]	; (8004548 <Parser_process+0x748>)
 800451c:	f014 ff5e 	bl	80193dc <CDC_Transmit_FS>
			USBTimeOutRX=-1;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <Parser_process+0x74c>)
 8004522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004526:	801a      	strh	r2, [r3, #0]
		}
	}
	sleep(5);
 8004528:	2005      	movs	r0, #5
 800452a:	f7fe fe7b 	bl	8003224 <sleep>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	200000b4 	.word	0x200000b4
 800453c:	08023ae4 	.word	0x08023ae4
 8004540:	2000014c 	.word	0x2000014c
 8004544:	08021d60 	.word	0x08021d60
 8004548:	08021c18 	.word	0x08021c18
 800454c:	20000184 	.word	0x20000184

08004550 <SPI1_Send>:
w25_info_t  w25_info;


//-------------------------------------------------------------
void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit (&hspi3, dt, cnt, 5000);
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4803      	ldr	r0, [pc, #12]	; (8004574 <SPI1_Send+0x24>)
 8004566:	f009 fc34 	bl	800ddd2 <HAL_SPI_Transmit>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000636c 	.word	0x2000636c

08004578 <SPI1_Recv>:
//-------------------------------------------------------------
void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive (&hspi3, dt, cnt, 5000);
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	f241 3388 	movw	r3, #5000	; 0x1388
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4803      	ldr	r0, [pc, #12]	; (800459c <SPI1_Recv+0x24>)
 800458e:	f009 fd8e 	bl	800e0ae <HAL_SPI_Receive>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000636c 	.word	0x2000636c

080045a0 <W25_WriteEnable>:
//-------------------------------------------------------------

void W25_WriteEnable(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
	uint8_t command[1];
	cs_set();
 80045a6:	2200      	movs	r2, #0
 80045a8:	2104      	movs	r1, #4
 80045aa:	4809      	ldr	r0, [pc, #36]	; (80045d0 <W25_WriteEnable+0x30>)
 80045ac:	f005 fdf4 	bl	800a198 <HAL_GPIO_WritePin>
	command[0]=0x06;
 80045b0:	2306      	movs	r3, #6
 80045b2:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	2101      	movs	r1, #1
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ffc9 	bl	8004550 <SPI1_Send>
	cs_reset();
 80045be:	2201      	movs	r2, #1
 80045c0:	2104      	movs	r1, #4
 80045c2:	4803      	ldr	r0, [pc, #12]	; (80045d0 <W25_WriteEnable+0x30>)
 80045c4:	f005 fde8 	bl	800a198 <HAL_GPIO_WritePin>
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	48000c00 	.word	0x48000c00

080045d4 <W25_Reset>:
	SPI1_Send(command, 1);
	cs_reset();
}

void W25_Reset (void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
	uint8_t command[1];
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80045da:	bf00      	nop
 80045dc:	20c0      	movs	r0, #192	; 0xc0
 80045de:	f000 f81d 	bl	800461c <W25_Read_Status>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d0f7      	beq.n	80045dc <W25_Reset+0x8>
	cs_set();
 80045ec:	2200      	movs	r2, #0
 80045ee:	2104      	movs	r1, #4
 80045f0:	4809      	ldr	r0, [pc, #36]	; (8004618 <W25_Reset+0x44>)
 80045f2:	f005 fdd1 	bl	800a198 <HAL_GPIO_WritePin>
	command[0] = W25_RESET;
 80045f6:	23ff      	movs	r3, #255	; 0xff
 80045f8:	713b      	strb	r3, [r7, #4]
	SPI1_Send(command, 1);
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ffa6 	bl	8004550 <SPI1_Send>
	cs_reset();
 8004604:	2201      	movs	r2, #1
 8004606:	2104      	movs	r1, #4
 8004608:	4803      	ldr	r0, [pc, #12]	; (8004618 <W25_Reset+0x44>)
 800460a:	f005 fdc5 	bl	800a198 <HAL_GPIO_WritePin>
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	48000c00 	.word	0x48000c00

0800461c <W25_Read_Status>:
//-------------------------------------------------------------

uint8_t W25_Read_Status(uint8_t StatusRegAdd)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint8_t data[1];
	command[0] = 0x0F; 		// Read Status Register
 8004626:	230f      	movs	r3, #15
 8004628:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	737b      	strb	r3, [r7, #13]
	cs_set();
 800462e:	2200      	movs	r2, #0
 8004630:	2104      	movs	r1, #4
 8004632:	480c      	ldr	r0, [pc, #48]	; (8004664 <W25_Read_Status+0x48>)
 8004634:	f005 fdb0 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff86 	bl	8004550 <SPI1_Send>
	SPI1_Recv(data, 1);
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff94 	bl	8004578 <SPI1_Recv>
	cs_reset();
 8004650:	2201      	movs	r2, #1
 8004652:	2104      	movs	r1, #4
 8004654:	4803      	ldr	r0, [pc, #12]	; (8004664 <W25_Read_Status+0x48>)
 8004656:	f005 fd9f 	bl	800a198 <HAL_GPIO_WritePin>
	return data[0];
 800465a:	7a3b      	ldrb	r3, [r7, #8]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	48000c00 	.word	0x48000c00

08004668 <W25_Write_Status>:

void W25_Write_Status(uint8_t StatusRegAdd, uint8_t data)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	460a      	mov	r2, r1
 8004672:	71fb      	strb	r3, [r7, #7]
 8004674:	4613      	mov	r3, r2
 8004676:	71bb      	strb	r3, [r7, #6]
	uint8_t command[3];
	command[0] = 0x1F; 		// Write Status Register
 8004678:	231f      	movs	r3, #31
 800467a:	733b      	strb	r3, [r7, #12]
	command[1] = StatusRegAdd;
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	737b      	strb	r3, [r7, #13]
	command[2] = data;
 8004680:	79bb      	ldrb	r3, [r7, #6]
 8004682:	73bb      	strb	r3, [r7, #14]
	cs_set();
 8004684:	2200      	movs	r2, #0
 8004686:	2104      	movs	r1, #4
 8004688:	4808      	ldr	r0, [pc, #32]	; (80046ac <W25_Write_Status+0x44>)
 800468a:	f005 fd85 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	2103      	movs	r1, #3
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff5b 	bl	8004550 <SPI1_Send>
	cs_reset();
 800469a:	2201      	movs	r2, #1
 800469c:	2104      	movs	r1, #4
 800469e:	4803      	ldr	r0, [pc, #12]	; (80046ac <W25_Write_Status+0x44>)
 80046a0:	f005 fd7a 	bl	800a198 <HAL_GPIO_WritePin>
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	48000c00 	.word	0x48000c00

080046b0 <W25_Block_Erase>:


void W25_Block_Erase(uint32_t page_addr)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	uint8_t command[4];

	W25_WriteEnable();
 80046b8:	f7ff ff72 	bl	80045a0 <W25_WriteEnable>

	command[0] = 0xD8;						// Block erase
 80046bc:	23d8      	movs	r3, #216	; 0xd8
 80046be:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;						// Dummy byte
 80046c0:	2300      	movs	r3, #0
 80046c2:	737b      	strb	r3, [r7, #13]
	command[2] = (page_addr >> 8) & 0xFF;	// Start page address
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	73bb      	strb	r3, [r7, #14]
	command[3] = page_addr & 0xFF;			// Start page address
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	73fb      	strb	r3, [r7, #15]

	cs_set();
 80046d2:	2200      	movs	r2, #0
 80046d4:	2104      	movs	r1, #4
 80046d6:	480e      	ldr	r0, [pc, #56]	; (8004710 <W25_Block_Erase+0x60>)
 80046d8:	f005 fd5e 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	2104      	movs	r1, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ff34 	bl	8004550 <SPI1_Send>
	cs_reset();
 80046e8:	2201      	movs	r2, #1
 80046ea:	2104      	movs	r1, #4
 80046ec:	4808      	ldr	r0, [pc, #32]	; (8004710 <W25_Block_Erase+0x60>)
 80046ee:	f005 fd53 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(3)&0x01)==1);
 80046f2:	bf00      	nop
 80046f4:	2003      	movs	r0, #3
 80046f6:	f7ff ff91 	bl	800461c <W25_Read_Status>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d0f7      	beq.n	80046f4 <W25_Block_Erase+0x44>
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	48000c00 	.word	0x48000c00

08004714 <W25_Read_ID>:
	SPI1_Recv(data, sz);
	cs_reset();
}
//-------------------------------------------------------------
uint32_t W25_Read_ID(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
	uint8_t command[4];
	uint8_t dt[3];
	command[0] = W25_GET_JEDEC_ID;
 800471a:	239f      	movs	r3, #159	; 0x9f
 800471c:	713b      	strb	r3, [r7, #4]
	command[1] = 0x00;
 800471e:	2300      	movs	r3, #0
 8004720:	717b      	strb	r3, [r7, #5]
	cs_set();
 8004722:	2200      	movs	r2, #0
 8004724:	2104      	movs	r1, #4
 8004726:	480e      	ldr	r0, [pc, #56]	; (8004760 <W25_Read_ID+0x4c>)
 8004728:	f005 fd36 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 2);
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ff0d 	bl	8004550 <SPI1_Send>
	SPI1_Recv(dt,3);
 8004736:	463b      	mov	r3, r7
 8004738:	2103      	movs	r1, #3
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ff1c 	bl	8004578 <SPI1_Recv>
	cs_reset();
 8004740:	2201      	movs	r2, #1
 8004742:	2104      	movs	r1, #4
 8004744:	4806      	ldr	r0, [pc, #24]	; (8004760 <W25_Read_ID+0x4c>)
 8004746:	f005 fd27 	bl	800a198 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800474a:	783b      	ldrb	r3, [r7, #0]
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	787b      	ldrb	r3, [r7, #1]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	4313      	orrs	r3, r2
 8004754:	78ba      	ldrb	r2, [r7, #2]
 8004756:	4313      	orrs	r3, r2
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	48000c00 	.word	0x48000c00

08004764 <W25_ReadBuf>:


void W25_ReadBuf(uint8_t*data, uint16_t blk_addr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t address=(blk_addr>>2)*64;
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	b29b      	uxth	r3, r3
 8004776:	019b      	lsls	r3, r3, #6
 8004778:	81fb      	strh	r3, [r7, #14]
	uint16_t column=(blk_addr&0x03)*512;
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	b29b      	uxth	r3, r3
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	81bb      	strh	r3, [r7, #12]

	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004786:	bf00      	nop
 8004788:	20c0      	movs	r0, #192	; 0xc0
 800478a:	f7ff ff47 	bl	800461c <W25_Read_Status>
 800478e:	4603      	mov	r3, r0
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d0f7      	beq.n	8004788 <W25_ReadBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 8004798:	2313      	movs	r3, #19
 800479a:	723b      	strb	r3, [r7, #8]
	command[1] = W25_DUMMY;
 800479c:	2300      	movs	r3, #0
 800479e:	727b      	strb	r3, [r7, #9]
	command[2] = (address >> 8) & 0xFF;
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	72bb      	strb	r3, [r7, #10]
	command[3] = address & 0xFF;
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	72fb      	strb	r3, [r7, #11]
	cs_set();
 80047b0:	2200      	movs	r2, #0
 80047b2:	2104      	movs	r1, #4
 80047b4:	4822      	ldr	r0, [pc, #136]	; (8004840 <W25_ReadBuf+0xdc>)
 80047b6:	f005 fcef 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	2104      	movs	r1, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fec5 	bl	8004550 <SPI1_Send>
	cs_reset();
 80047c6:	2201      	movs	r2, #1
 80047c8:	2104      	movs	r1, #4
 80047ca:	481d      	ldr	r0, [pc, #116]	; (8004840 <W25_ReadBuf+0xdc>)
 80047cc:	f005 fce4 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80047d0:	bf00      	nop
 80047d2:	20c0      	movs	r0, #192	; 0xc0
 80047d4:	f7ff ff22 	bl	800461c <W25_Read_Status>
 80047d8:	4603      	mov	r3, r0
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d0f7      	beq.n	80047d2 <W25_ReadBuf+0x6e>

	// Read from buffer
	command[0] = W25_FAST_READ;
 80047e2:	230b      	movs	r3, #11
 80047e4:	723b      	strb	r3, [r7, #8]
	command[1] = (column >> 8) & 0xFF;
 80047e6:	89bb      	ldrh	r3, [r7, #12]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	727b      	strb	r3, [r7, #9]
	command[2] = column & 0xFF;
 80047f0:	89bb      	ldrh	r3, [r7, #12]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	72bb      	strb	r3, [r7, #10]
	command[3] = W25_DUMMY;
 80047f6:	2300      	movs	r3, #0
 80047f8:	72fb      	strb	r3, [r7, #11]
	cs_set();
 80047fa:	2200      	movs	r2, #0
 80047fc:	2104      	movs	r1, #4
 80047fe:	4810      	ldr	r0, [pc, #64]	; (8004840 <W25_ReadBuf+0xdc>)
 8004800:	f005 fcca 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	2104      	movs	r1, #4
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fea0 	bl	8004550 <SPI1_Send>
	SPI1_Recv(data, 512);
 8004810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff feaf 	bl	8004578 <SPI1_Recv>
	cs_reset();
 800481a:	2201      	movs	r2, #1
 800481c:	2104      	movs	r1, #4
 800481e:	4808      	ldr	r0, [pc, #32]	; (8004840 <W25_ReadBuf+0xdc>)
 8004820:	f005 fcba 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004824:	bf00      	nop
 8004826:	20c0      	movs	r0, #192	; 0xc0
 8004828:	f7ff fef8 	bl	800461c <W25_Read_Status>
 800482c:	4603      	mov	r3, r0
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d0f7      	beq.n	8004826 <W25_ReadBuf+0xc2>
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	48000c00 	.word	0x48000c00

08004844 <W25_WriteBuf>:

void W25_WriteBuf(uint8_t*data, uint16_t blk_addr)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
	uint8_t command[4];
	uint16_t i;
	uint16_t address=(blk_addr>>2)*64;
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	b29b      	uxth	r3, r3
 8004856:	019b      	lsls	r3, r3, #6
 8004858:	82bb      	strh	r3, [r7, #20]
	uint16_t column=(blk_addr&0x03)*512;
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	b29b      	uxth	r3, r3
 8004862:	025b      	lsls	r3, r3, #9
 8004864:	827b      	strh	r3, [r7, #18]

	// Прочитаем блок 2048 прежде чем стереть
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004866:	bf00      	nop
 8004868:	20c0      	movs	r0, #192	; 0xc0
 800486a:	f7ff fed7 	bl	800461c <W25_Read_Status>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d0f7      	beq.n	8004868 <W25_WriteBuf+0x24>
	// Transfer from memory to buffer
	command[0] = PAGE_DATA_READ;
 8004878:	2313      	movs	r3, #19
 800487a:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 800487c:	2300      	movs	r3, #0
 800487e:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;
 8004880:	8abb      	ldrh	r3, [r7, #20]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	b29b      	uxth	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;
 800488a:	8abb      	ldrh	r3, [r7, #20]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004890:	2200      	movs	r2, #0
 8004892:	2104      	movs	r1, #4
 8004894:	4857      	ldr	r0, [pc, #348]	; (80049f4 <W25_WriteBuf+0x1b0>)
 8004896:	f005 fc7f 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	2104      	movs	r1, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fe55 	bl	8004550 <SPI1_Send>
	cs_reset();
 80048a6:	2201      	movs	r2, #1
 80048a8:	2104      	movs	r1, #4
 80048aa:	4852      	ldr	r0, [pc, #328]	; (80049f4 <W25_WriteBuf+0x1b0>)
 80048ac:	f005 fc74 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80048b0:	bf00      	nop
 80048b2:	20c0      	movs	r0, #192	; 0xc0
 80048b4:	f7ff feb2 	bl	800461c <W25_Read_Status>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d0f7      	beq.n	80048b2 <W25_WriteBuf+0x6e>
	// Read from buffer
	command[0] = W25_FAST_READ;
 80048c2:	230b      	movs	r3, #11
 80048c4:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73bb      	strb	r3, [r7, #14]
	command[3] = W25_DUMMY;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80048d2:	2200      	movs	r2, #0
 80048d4:	2104      	movs	r1, #4
 80048d6:	4847      	ldr	r0, [pc, #284]	; (80049f4 <W25_WriteBuf+0x1b0>)
 80048d8:	f005 fc5e 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80048dc:	f107 030c 	add.w	r3, r7, #12
 80048e0:	2104      	movs	r1, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fe34 	bl	8004550 <SPI1_Send>
	SPI1_Recv(buf, 2048);
 80048e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048ec:	4842      	ldr	r0, [pc, #264]	; (80049f8 <W25_WriteBuf+0x1b4>)
 80048ee:	f7ff fe43 	bl	8004578 <SPI1_Recv>
	cs_reset();
 80048f2:	2201      	movs	r2, #1
 80048f4:	2104      	movs	r1, #4
 80048f6:	483f      	ldr	r0, [pc, #252]	; (80049f4 <W25_WriteBuf+0x1b0>)
 80048f8:	f005 fc4e 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80048fc:	bf00      	nop
 80048fe:	20c0      	movs	r0, #192	; 0xc0
 8004900:	f7ff fe8c 	bl	800461c <W25_Read_Status>
 8004904:	4603      	mov	r3, r0
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d0f7      	beq.n	80048fe <W25_WriteBuf+0xba>

	for(i=0;i<512;i++)buf[column+i]=data[i];
 800490e:	2300      	movs	r3, #0
 8004910:	82fb      	strh	r3, [r7, #22]
 8004912:	e00b      	b.n	800492c <W25_WriteBuf+0xe8>
 8004914:	8afb      	ldrh	r3, [r7, #22]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	441a      	add	r2, r3
 800491a:	8a79      	ldrh	r1, [r7, #18]
 800491c:	8afb      	ldrh	r3, [r7, #22]
 800491e:	440b      	add	r3, r1
 8004920:	7811      	ldrb	r1, [r2, #0]
 8004922:	4a35      	ldr	r2, [pc, #212]	; (80049f8 <W25_WriteBuf+0x1b4>)
 8004924:	54d1      	strb	r1, [r2, r3]
 8004926:	8afb      	ldrh	r3, [r7, #22]
 8004928:	3301      	adds	r3, #1
 800492a:	82fb      	strh	r3, [r7, #22]
 800492c:	8afb      	ldrh	r3, [r7, #22]
 800492e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004932:	d3ef      	bcc.n	8004914 <W25_WriteBuf+0xd0>

	//memcpy(buf[column], data, 512);

	// Сотрем блок 128кБ
	W25_Block_Erase(address);
 8004934:	8abb      	ldrh	r3, [r7, #20]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff feba 	bl	80046b0 <W25_Block_Erase>

	while ((W25_Read_Status(0xC0)&0x01)==1);
 800493c:	bf00      	nop
 800493e:	20c0      	movs	r0, #192	; 0xc0
 8004940:	f7ff fe6c 	bl	800461c <W25_Read_Status>
 8004944:	4603      	mov	r3, r0
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d0f7      	beq.n	800493e <W25_WriteBuf+0xfa>
	// Пишем в буфер
	W25_WriteEnable();
 800494e:	f7ff fe27 	bl	80045a0 <W25_WriteEnable>
	command[0] = PROGRAM_DATA_LOAD;
 8004952:	2302      	movs	r3, #2
 8004954:	733b      	strb	r3, [r7, #12]
	command[1] = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	737b      	strb	r3, [r7, #13]
	command[2] = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	73bb      	strb	r3, [r7, #14]
	cs_set();
 800495e:	2200      	movs	r2, #0
 8004960:	2104      	movs	r1, #4
 8004962:	4824      	ldr	r0, [pc, #144]	; (80049f4 <W25_WriteBuf+0x1b0>)
 8004964:	f005 fc18 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 3);
 8004968:	f107 030c 	add.w	r3, r7, #12
 800496c:	2103      	movs	r1, #3
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fdee 	bl	8004550 <SPI1_Send>
	SPI1_Send(buf, 2048);
 8004974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004978:	481f      	ldr	r0, [pc, #124]	; (80049f8 <W25_WriteBuf+0x1b4>)
 800497a:	f7ff fde9 	bl	8004550 <SPI1_Send>
	cs_reset();
 800497e:	2201      	movs	r2, #1
 8004980:	2104      	movs	r1, #4
 8004982:	481c      	ldr	r0, [pc, #112]	; (80049f4 <W25_WriteBuf+0x1b0>)
 8004984:	f005 fc08 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 8004988:	bf00      	nop
 800498a:	20c0      	movs	r0, #192	; 0xc0
 800498c:	f7ff fe46 	bl	800461c <W25_Read_Status>
 8004990:	4603      	mov	r3, r0
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d0f7      	beq.n	800498a <W25_WriteBuf+0x146>

	// Переносим во внутреннюю память
	W25_WriteEnable();
 800499a:	f7ff fe01 	bl	80045a0 <W25_WriteEnable>
	command[0] = PROGRAM_EXECUTE;
 800499e:	2310      	movs	r3, #16
 80049a0:	733b      	strb	r3, [r7, #12]
	command[1] = W25_DUMMY;
 80049a2:	2300      	movs	r3, #0
 80049a4:	737b      	strb	r3, [r7, #13]
	command[2] = (address >> 8) & 0xFF;	// Адрес страницы
 80049a6:	8abb      	ldrh	r3, [r7, #20]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	73bb      	strb	r3, [r7, #14]
	command[3] = address & 0xFF;			// Адрес страницы
 80049b0:	8abb      	ldrh	r3, [r7, #20]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80049b6:	2200      	movs	r2, #0
 80049b8:	2104      	movs	r1, #4
 80049ba:	480e      	ldr	r0, [pc, #56]	; (80049f4 <W25_WriteBuf+0x1b0>)
 80049bc:	f005 fbec 	bl	800a198 <HAL_GPIO_WritePin>
	SPI1_Send(command, 4);
 80049c0:	f107 030c 	add.w	r3, r7, #12
 80049c4:	2104      	movs	r1, #4
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fdc2 	bl	8004550 <SPI1_Send>
	cs_reset();
 80049cc:	2201      	movs	r2, #1
 80049ce:	2104      	movs	r1, #4
 80049d0:	4808      	ldr	r0, [pc, #32]	; (80049f4 <W25_WriteBuf+0x1b0>)
 80049d2:	f005 fbe1 	bl	800a198 <HAL_GPIO_WritePin>
	while ((W25_Read_Status(0xC0)&0x01)==1);
 80049d6:	bf00      	nop
 80049d8:	20c0      	movs	r0, #192	; 0xc0
 80049da:	f7ff fe1f 	bl	800461c <W25_Read_Status>
 80049de:	4603      	mov	r3, r0
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d0f7      	beq.n	80049d8 <W25_WriteBuf+0x194>
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	48000c00 	.word	0x48000c00
 80049f8:	200063d0 	.word	0x200063d0

080049fc <W25_Init>:

//-------------------------------------------------------------
void W25_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8004a02:	2064      	movs	r0, #100	; 0x64
 8004a04:	f003 f8de 	bl	8007bc4 <HAL_Delay>
	W25_Reset();
 8004a08:	f7ff fde4 	bl	80045d4 <W25_Reset>
	HAL_Delay(100);
 8004a0c:	2064      	movs	r0, #100	; 0x64
 8004a0e:	f003 f8d9 	bl	8007bc4 <HAL_Delay>
	unsigned int id = W25_Read_ID();
 8004a12:	f7ff fe7f 	bl	8004714 <W25_Read_ID>
 8004a16:	6078      	str	r0, [r7, #4]

	if(id!=0xEFAA21)ERROR_REG|=(0x01<<Memory_err);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <W25_Init+0x68>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d005      	beq.n	8004a2c <W25_Init+0x30>
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <W25_Init+0x6c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <W25_Init+0x6c>)
 8004a2a:	6013      	str	r3, [r2, #0]

	w25_info.PageSize=2048;
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <W25_Init+0x70>)
 8004a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a32:	801a      	strh	r2, [r3, #0]
	w25_info.PageCount=0xFFFF;
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <W25_Init+0x70>)
 8004a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a3a:	605a      	str	r2, [r3, #4]
	w25_info.BlockSize=w25_info.PageSize*64;
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <W25_Init+0x70>)
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	019b      	lsls	r3, r3, #6
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <W25_Init+0x70>)
 8004a46:	611a      	str	r2, [r3, #16]
	w25_info.NumKB=(w25_info.BlockSize*128)/8;
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <W25_Init+0x70>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	01db      	lsls	r3, r3, #7
 8004a4e:	08db      	lsrs	r3, r3, #3
 8004a50:	4a06      	ldr	r2, [pc, #24]	; (8004a6c <W25_Init+0x70>)
 8004a52:	6193      	str	r3, [r2, #24]

	W25_Write_Status(0xA0, 0x00);
 8004a54:	2100      	movs	r1, #0
 8004a56:	20a0      	movs	r0, #160	; 0xa0
 8004a58:	f7ff fe06 	bl	8004668 <W25_Write_Status>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	00efaa21 	.word	0x00efaa21
 8004a68:	20000888 	.word	0x20000888
 8004a6c:	2000634c 	.word	0x2000634c

08004a70 <Approximation_MC110>:
double Temperature_correction(double uncorrect_Pressure, double affect_temp);



void Approximation_MC110(int32_t meas_data, int32_t power_data)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	double LSB;
	double temp_diff;

	int32_t ADC_MEAS_ZERO = meas_data-zero_ADC[0];
 8004a7a:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <Approximation_MC110+0x108>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	61fb      	str	r3, [r7, #28]

	// Считаем LSB
	LSB=0.00000000028857241176*(double)ADC_MEAS_ZERO+1.41200835380823000000;
 8004a84:	69f8      	ldr	r0, [r7, #28]
 8004a86:	f7fb fd5d 	bl	8000544 <__aeabi_i2d>
 8004a8a:	a32f      	add	r3, pc, #188	; (adr r3, 8004b48 <Approximation_MC110+0xd8>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fdc2 	bl	8000618 <__aeabi_dmul>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	a32c      	add	r3, pc, #176	; (adr r3, 8004b50 <Approximation_MC110+0xe0>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fc03 	bl	80002ac <__adddf3>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим температуру
	Temperature2=0.000128471469464*(double)power_data-420.277295988542;
 8004aae:	6838      	ldr	r0, [r7, #0]
 8004ab0:	f7fb fd48 	bl	8000544 <__aeabi_i2d>
 8004ab4:	a328      	add	r3, pc, #160	; (adr r3, 8004b58 <Approximation_MC110+0xe8>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fdad 	bl	8000618 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	a326      	add	r3, pc, #152	; (adr r3, 8004b60 <Approximation_MC110+0xf0>)
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f7fb fbec 	bl	80002a8 <__aeabi_dsub>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4929      	ldr	r1, [pc, #164]	; (8004b7c <Approximation_MC110+0x10c>)
 8004ad6:	e9c1 2300 	strd	r2, r3, [r1]
	// Дифференциал температуры
	temp_diff=Temperature2-cal_temperature;
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <Approximation_MC110+0x10c>)
 8004adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <Approximation_MC110+0x110>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fbdf 	bl	80002a8 <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Находим термостабилизированное LSB
	LSB=LSB-(temp_diff*0.0000418240259295);
 8004af2:	a31d      	add	r3, pc, #116	; (adr r3, 8004b68 <Approximation_MC110+0xf8>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004afc:	f7fb fd8c 	bl	8000618 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b08:	f7fb fbce 	bl	80002a8 <__aeabi_dsub>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Находим давление
	Pressure=(LSB*(double)ADC_MEAS_ZERO)/1000000.0;
 8004b14:	69f8      	ldr	r0, [r7, #28]
 8004b16:	f7fb fd15 	bl	8000544 <__aeabi_i2d>
 8004b1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b1e:	f7fb fd7b 	bl	8000618 <__aeabi_dmul>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	a311      	add	r3, pc, #68	; (adr r3, 8004b70 <Approximation_MC110+0x100>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fe9c 	bl	800086c <__aeabi_ddiv>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4912      	ldr	r1, [pc, #72]	; (8004b84 <Approximation_MC110+0x114>)
 8004b3a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004b3e:	bf00      	nop
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	9b278484 	.word	0x9b278484
 8004b4c:	3df3d49e 	.word	0x3df3d49e
 8004b50:	12548ff4 	.word	0x12548ff4
 8004b54:	3ff69796 	.word	0x3ff69796
 8004b58:	8506b9ef 	.word	0x8506b9ef
 8004b5c:	3f20d6c9 	.word	0x3f20d6c9
 8004b60:	cdeb2199 	.word	0xcdeb2199
 8004b64:	407a446f 	.word	0x407a446f
 8004b68:	96a39d76 	.word	0x96a39d76
 8004b6c:	3f05ed86 	.word	0x3f05ed86
 8004b70:	00000000 	.word	0x00000000
 8004b74:	412e8480 	.word	0x412e8480
 8004b78:	20002268 	.word	0x20002268
 8004b7c:	20000868 	.word	0x20000868
 8004b80:	20000278 	.word	0x20000278
 8004b84:	20002280 	.word	0x20002280

08004b88 <Calculate>:



void Calculate(int32_t adc_press, int32_t adc_pow)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	static double Press_old=0;
	// Считаем давлени
	Test_Pressure = Approximation_pressure(adc_press);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f85a 	bl	8004c4c <Approximation_pressure>
 8004b98:	eeb0 7a40 	vmov.f32	s14, s0
 8004b9c:	eef0 7a60 	vmov.f32	s15, s1
 8004ba0:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <Calculate+0xb4>)
 8004ba2:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температурный коэффициент
	Temperature_coeff_25 = Approximation_Tcoef(adc_press, adc_pow);
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f921 	bl	8004df0 <Approximation_Tcoef>
 8004bae:	eeb0 7a40 	vmov.f32	s14, s0
 8004bb2:	eef0 7a60 	vmov.f32	s15, s1
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <Calculate+0xb8>)
 8004bb8:	ed83 7b00 	vstr	d7, [r3]
	// Считаем температуру
	Temperature = Approximation_temperature(Temperature_coeff_25);
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <Calculate+0xb8>)
 8004bbe:	ed93 7b00 	vldr	d7, [r3]
 8004bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bc6:	eef0 0a67 	vmov.f32	s1, s15
 8004bca:	f000 f9db 	bl	8004f84 <Approximation_temperature>
 8004bce:	eeb0 7a40 	vmov.f32	s14, s0
 8004bd2:	eef0 7a60 	vmov.f32	s15, s1
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <Calculate+0xbc>)
 8004bd8:	ed83 7b00 	vstr	d7, [r3]
	// Корректируем давление по температуре
	Test_Pressure = (Temperature_correction(Test_Pressure, Temperature) + Press_old)/2.0;
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <Calculate+0xb4>)
 8004bde:	ed93 7b00 	vldr	d7, [r3]
 8004be2:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <Calculate+0xbc>)
 8004be4:	ed93 6b00 	vldr	d6, [r3]
 8004be8:	eeb0 1a46 	vmov.f32	s2, s12
 8004bec:	eef0 1a66 	vmov.f32	s3, s13
 8004bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8004bf4:	eef0 0a67 	vmov.f32	s1, s15
 8004bf8:	f000 fa80 	bl	80050fc <Temperature_correction>
 8004bfc:	ec51 0b10 	vmov	r0, r1, d0
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <Calculate+0xc0>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f7fb fb51 	bl	80002ac <__adddf3>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c1a:	f7fb fe27 	bl	800086c <__aeabi_ddiv>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4906      	ldr	r1, [pc, #24]	; (8004c3c <Calculate+0xb4>)
 8004c24:	e9c1 2300 	strd	r2, r3, [r1]
	Press_old = Test_Pressure;
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <Calculate+0xb4>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	4906      	ldr	r1, [pc, #24]	; (8004c48 <Calculate+0xc0>)
 8004c30:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20002288 	.word	0x20002288
 8004c40:	20000078 	.word	0x20000078
 8004c44:	20000880 	.word	0x20000880
 8004c48:	200008c0 	.word	0x200008c0

08004c4c <Approximation_pressure>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация давления
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_pressure(int32_t current_ADC_measure)
{
 8004c4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c50:	b08c      	sub	sp, #48	; 0x30
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
	double RES=0, a, b;
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004c6a:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <Approximation_pressure+0x198>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <Approximation_pressure+0x38>
 8004c72:	4b5d      	ldr	r3, [pc, #372]	; (8004de8 <Approximation_pressure+0x19c>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	441a      	add	r2, r3
 8004c7a:	4b5a      	ldr	r3, [pc, #360]	; (8004de4 <Approximation_pressure+0x198>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	623b      	str	r3, [r7, #32]
 8004c82:	e001      	b.n	8004c88 <Approximation_pressure+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if(ADC_MEAS_ZERO>ADC_measure_cal_points[i])index++;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e00c      	b.n	8004ca8 <Approximation_pressure+0x5c>
 8004c8e:	4a56      	ldr	r2, [pc, #344]	; (8004de8 <Approximation_pressure+0x19c>)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	dd02      	ble.n	8004ca2 <Approximation_pressure+0x56>
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	ddef      	ble.n	8004c8e <Approximation_pressure+0x42>

	if(index==0) a = (Pressure_cal_points[index+1] - Pressure_cal_points[index]) / (double)(ADC_measure_cal_points[index+1] - ADC_measure_cal_points[index]);
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d12a      	bne.n	8004d0a <Approximation_pressure+0xbe>
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a4c      	ldr	r2, [pc, #304]	; (8004dec <Approximation_pressure+0x1a0>)
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cc2:	4a4a      	ldr	r2, [pc, #296]	; (8004dec <Approximation_pressure+0x1a0>)
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f7fb faeb 	bl	80002a8 <__aeabi_dsub>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4614      	mov	r4, r2
 8004cd8:	461d      	mov	r5, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	3301      	adds	r3, #1
 8004cde:	4a42      	ldr	r2, [pc, #264]	; (8004de8 <Approximation_pressure+0x19c>)
 8004ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ce4:	4940      	ldr	r1, [pc, #256]	; (8004de8 <Approximation_pressure+0x19c>)
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fc28 	bl	8000544 <__aeabi_i2d>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f7fb fdb6 	bl	800086c <__aeabi_ddiv>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004d08:	e033      	b.n	8004d72 <Approximation_pressure+0x126>
	else a = (Pressure_cal_points[index]-Pressure_cal_points[index-1]) / ((double)ADC_measure_cal_points[index]-(double)ADC_measure_cal_points[index-1]);
 8004d0a:	4a38      	ldr	r2, [pc, #224]	; (8004dec <Approximation_pressure+0x1a0>)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4a34      	ldr	r2, [pc, #208]	; (8004dec <Approximation_pressure+0x1a0>)
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fac0 	bl	80002a8 <__aeabi_dsub>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4690      	mov	r8, r2
 8004d2e:	4699      	mov	r9, r3
 8004d30:	4a2d      	ldr	r2, [pc, #180]	; (8004de8 <Approximation_pressure+0x19c>)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb fc03 	bl	8000544 <__aeabi_i2d>
 8004d3e:	4604      	mov	r4, r0
 8004d40:	460d      	mov	r5, r1
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3b01      	subs	r3, #1
 8004d46:	4a28      	ldr	r2, [pc, #160]	; (8004de8 <Approximation_pressure+0x19c>)
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fbf9 	bl	8000544 <__aeabi_i2d>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4620      	mov	r0, r4
 8004d58:	4629      	mov	r1, r5
 8004d5a:	f7fb faa5 	bl	80002a8 <__aeabi_dsub>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fd81 	bl	800086c <__aeabi_ddiv>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	b = (double)Pressure_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <Approximation_pressure+0x1a0>)
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d7e:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <Approximation_pressure+0x19c>)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fb fbdc 	bl	8000544 <__aeabi_i2d>
 8004d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d90:	f7fb fc42 	bl	8000618 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7fb fa84 	bl	80002a8 <__aeabi_dsub>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004da8:	6a38      	ldr	r0, [r7, #32]
 8004daa:	f7fb fbcb 	bl	8000544 <__aeabi_i2d>
 8004dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004db2:	f7fb fc31 	bl	8000618 <__aeabi_dmul>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dbe:	f7fb fa75 	bl	80002ac <__adddf3>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 8004dca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dce:	ec43 2b17 	vmov	d7, r2, r3
}
 8004dd2:	eeb0 0a47 	vmov.f32	s0, s14
 8004dd6:	eef0 0a67 	vmov.f32	s1, s15
 8004dda:	3730      	adds	r7, #48	; 0x30
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004de2:	bf00      	nop
 8004de4:	20002268 	.word	0x20002268
 8004de8:	200001e0 	.word	0x200001e0
 8004dec:	20000188 	.word	0x20000188

08004df0 <Approximation_Tcoef>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температурного коэффициента
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_Tcoef(int32_t current_ADC_measure, int32_t current_ADC_power)
{
 8004df0:	b5b0      	push	{r4, r5, r7, lr}
 8004df2:	b08c      	sub	sp, #48	; 0x30
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	double RES = 0, a, b;
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t ADC_MEAS_ZERO=0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]

	if(zero_ADC[0]!=0)ADC_MEAS_ZERO = ADC_measure_cal_points[0]+current_ADC_measure-zero_ADC[0];
 8004e0e:	4b5a      	ldr	r3, [pc, #360]	; (8004f78 <Approximation_Tcoef+0x188>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <Approximation_Tcoef+0x38>
 8004e16:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	441a      	add	r2, r3
 8004e1e:	4b56      	ldr	r3, [pc, #344]	; (8004f78 <Approximation_Tcoef+0x188>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e001      	b.n	8004e2c <Approximation_Tcoef+0x3c>
	else ADC_MEAS_ZERO = current_ADC_measure;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < (num_of_cal_points-1); i++) if (ADC_MEAS_ZERO > ADC_measure_cal_points[i]) index++;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e00c      	b.n	8004e4c <Approximation_Tcoef+0x5c>
 8004e32:	4a52      	ldr	r2, [pc, #328]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	dd02      	ble.n	8004e46 <Approximation_Tcoef+0x56>
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	3301      	adds	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	ddef      	ble.n	8004e32 <Approximation_Tcoef+0x42>

	if (index == 0) a = (double)(ADC_power_cal_points[index + 1] - ADC_power_cal_points[index]) / (double)(ADC_measure_cal_points[index + 1] - ADC_measure_cal_points[index]);
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d126      	bne.n	8004ea6 <Approximation_Tcoef+0xb6>
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	4a48      	ldr	r2, [pc, #288]	; (8004f80 <Approximation_Tcoef+0x190>)
 8004e5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e62:	4947      	ldr	r1, [pc, #284]	; (8004f80 <Approximation_Tcoef+0x190>)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb fb69 	bl	8000544 <__aeabi_i2d>
 8004e72:	4604      	mov	r4, r0
 8004e74:	460d      	mov	r5, r1
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	3301      	adds	r3, #1
 8004e7a:	4a40      	ldr	r2, [pc, #256]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e80:	493e      	ldr	r1, [pc, #248]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb5a 	bl	8000544 <__aeabi_i2d>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7fb fce8 	bl	800086c <__aeabi_ddiv>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004ea4:	e025      	b.n	8004ef2 <Approximation_Tcoef+0x102>
	else a = (double)(ADC_power_cal_points[index] - ADC_power_cal_points[index - 1]) / (double)(ADC_measure_cal_points[index] - ADC_measure_cal_points[index - 1]);
 8004ea6:	4a36      	ldr	r2, [pc, #216]	; (8004f80 <Approximation_Tcoef+0x190>)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	4933      	ldr	r1, [pc, #204]	; (8004f80 <Approximation_Tcoef+0x190>)
 8004eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fb42 	bl	8000544 <__aeabi_i2d>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	4a2d      	ldr	r2, [pc, #180]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	492a      	ldr	r1, [pc, #168]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004ed2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fb33 	bl	8000544 <__aeabi_i2d>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	f7fb fcc1 	bl	800086c <__aeabi_ddiv>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	b = (double)ADC_power_cal_points[index] - (double)ADC_measure_cal_points[index] * a;
 8004ef2:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <Approximation_Tcoef+0x190>)
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fb fb22 	bl	8000544 <__aeabi_i2d>
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <Approximation_Tcoef+0x18c>)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fb19 	bl	8000544 <__aeabi_i2d>
 8004f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f16:	f7fb fb7f 	bl	8000618 <__aeabi_dmul>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb f9c1 	bl	80002a8 <__aeabi_dsub>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * (double)ADC_MEAS_ZERO;
 8004f2e:	6a38      	ldr	r0, [r7, #32]
 8004f30:	f7fb fb08 	bl	8000544 <__aeabi_i2d>
 8004f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f38:	f7fb fb6e 	bl	8000618 <__aeabi_dmul>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f44:	f7fb f9b2 	bl	80002ac <__adddf3>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES/current_ADC_power;
 8004f50:	6838      	ldr	r0, [r7, #0]
 8004f52:	f7fb faf7 	bl	8000544 <__aeabi_i2d>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f5e:	f7fb fc85 	bl	800086c <__aeabi_ddiv>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f6e:	eef0 0a67 	vmov.f32	s1, s15
 8004f72:	3730      	adds	r7, #48	; 0x30
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bdb0      	pop	{r4, r5, r7, pc}
 8004f78:	20002268 	.word	0x20002268
 8004f7c:	200001e0 	.word	0x200001e0
 8004f80:	2000020c 	.word	0x2000020c

08004f84 <Approximation_temperature>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Аппроксимация температуры
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Approximation_temperature(double T_coef)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	ed87 0b00 	vstr	d0, [r7]
	double RES = 0, a, b;
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int index = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < (num_of_temperature_cal_points-1); i++) if (T_coef > T_coef_cal[i]) index++;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	e012      	b.n	8004fca <Approximation_temperature+0x46>
 8004fa4:	4a53      	ldr	r2, [pc, #332]	; (80050f4 <Approximation_temperature+0x170>)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	4413      	add	r3, r2
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fb4:	f7fb fdc0 	bl	8000b38 <__aeabi_dcmpgt>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <Approximation_temperature+0x40>
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	dde9      	ble.n	8004fa4 <Approximation_temperature+0x20>

	if (index == 0) a = (double)(Temperature_cal_points[index + 1] - Temperature_cal_points[index]) / (double)(T_coef_cal[index + 1] - T_coef_cal[index]);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d12c      	bne.n	8005030 <Approximation_temperature+0xac>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a47      	ldr	r2, [pc, #284]	; (80050f8 <Approximation_temperature+0x174>)
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fe4:	4a44      	ldr	r2, [pc, #272]	; (80050f8 <Approximation_temperature+0x174>)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb f95a 	bl	80002a8 <__aeabi_dsub>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a3c      	ldr	r2, [pc, #240]	; (80050f4 <Approximation_temperature+0x170>)
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800500a:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <Approximation_temperature+0x170>)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb f947 	bl	80002a8 <__aeabi_dsub>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb fc23 	bl	800086c <__aeabi_ddiv>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800502e:	e02b      	b.n	8005088 <Approximation_temperature+0x104>
	else a = (double)(Temperature_cal_points[index] - Temperature_cal_points[index - 1]) / (double)(T_coef_cal[index] - T_coef_cal[index - 1]);
 8005030:	4a31      	ldr	r2, [pc, #196]	; (80050f8 <Approximation_temperature+0x174>)
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4413      	add	r3, r2
 8005038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <Approximation_temperature+0x174>)
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb f92d 	bl	80002a8 <__aeabi_dsub>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4614      	mov	r4, r2
 8005054:	461d      	mov	r5, r3
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <Approximation_temperature+0x170>)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3b01      	subs	r3, #1
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <Approximation_temperature+0x170>)
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb f91a 	bl	80002a8 <__aeabi_dsub>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fbf6 	bl	800086c <__aeabi_ddiv>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = (double)Temperature_cal_points[index] - (double)T_coef_cal[index] * a;
 8005088:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <Approximation_temperature+0x174>)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4413      	add	r3, r2
 8005090:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005094:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <Approximation_temperature+0x170>)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a4:	f7fb fab8 	bl	8000618 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4620      	mov	r0, r4
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fb f8fa 	bl	80002a8 <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	RES = b + a * T_coef;
 80050bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050c4:	f7fb faa8 	bl	8000618 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050d0:	f7fb f8ec 	bl	80002ac <__adddf3>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return RES;
 80050dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80050e4:	eeb0 0a47 	vmov.f32	s0, s14
 80050e8:	eef0 0a67 	vmov.f32	s1, s15
 80050ec:	3728      	adds	r7, #40	; 0x28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bdb0      	pop	{r4, r5, r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000238 	.word	0x20000238
 80050f8:	20000258 	.word	0x20000258

080050fc <Temperature_correction>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Коррекция давления по температуре
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double Temperature_correction(double uncorrect_Pressure, double affect_temp)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	ed87 0b02 	vstr	d0, [r7, #8]
 8005106:	ed87 1b00 	vstr	d1, [r7]
	return (uncorrect_Pressure + (cal_temperature - affect_temp) * affect);
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <Temperature_correction+0x54>)
 800510c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005114:	f7fb f8c8 	bl	80002a8 <__aeabi_dsub>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <Temperature_correction+0x58>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb fa77 	bl	8000618 <__aeabi_dmul>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4610      	mov	r0, r2
 8005130:	4619      	mov	r1, r3
 8005132:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005136:	f7fb f8b9 	bl	80002ac <__adddf3>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005142:	eeb0 0a47 	vmov.f32	s0, s14
 8005146:	eef0 0a67 	vmov.f32	s1, s15
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000278 	.word	0x20000278
 8005154:	200008b8 	.word	0x200008b8

08005158 <calculate_current>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------
//													Расчет тока и напряжения, формулы Тимура
//---------------------------------------------------------------------------------------------------------------------------------------------------------

double calculate_current(double data)
{
 8005158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_current = -0.0000741921796439735;
	//b_current = 9.9684133071094100000;
	//c_current = 0.0080740815705555100;
	RES = (-b_current+(sqrt((b_current*b_current)-(4*a_current*(c_current-data)))))/(2*a_current);
 8005164:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <calculate_current+0xc8>)
 8005166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800516a:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <calculate_current+0xc8>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fb fa52 	bl	8000618 <__aeabi_dmul>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	4b29      	ldr	r3, [pc, #164]	; (8005224 <calculate_current+0xcc>)
 800517e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	4b28      	ldr	r3, [pc, #160]	; (8005228 <calculate_current+0xd0>)
 8005188:	f7fb fa46 	bl	8000618 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4690      	mov	r8, r2
 8005192:	4699      	mov	r9, r3
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <calculate_current+0xd4>)
 8005196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800519a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800519e:	f7fb f883 	bl	80002a8 <__aeabi_dsub>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4640      	mov	r0, r8
 80051a8:	4649      	mov	r1, r9
 80051aa:	f7fb fa35 	bl	8000618 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4620      	mov	r0, r4
 80051b4:	4629      	mov	r1, r5
 80051b6:	f7fb f877 	bl	80002a8 <__aeabi_dsub>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	ec43 2b17 	vmov	d7, r2, r3
 80051c2:	eeb0 0a47 	vmov.f32	s0, s14
 80051c6:	eef0 0a67 	vmov.f32	s1, s15
 80051ca:	f01c fb35 	bl	8021838 <sqrt>
 80051ce:	ec51 0b10 	vmov	r0, r1, d0
 80051d2:	4b13      	ldr	r3, [pc, #76]	; (8005220 <calculate_current+0xc8>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb f866 	bl	80002a8 <__aeabi_dsub>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4614      	mov	r4, r2
 80051e2:	461d      	mov	r5, r3
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <calculate_current+0xcc>)
 80051e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	f7fb f85d 	bl	80002ac <__adddf3>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb fb37 	bl	800086c <__aeabi_ddiv>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 8005206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800520a:	ec43 2b17 	vmov	d7, r2, r3
}
 800520e:	eeb0 0a47 	vmov.f32	s0, s14
 8005212:	eef0 0a67 	vmov.f32	s1, s15
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800521e:	bf00      	nop
 8005220:	20006bf8 	.word	0x20006bf8
 8005224:	20006be0 	.word	0x20006be0
 8005228:	40100000 	.word	0x40100000
 800522c:	20006bd8 	.word	0x20006bd8

08005230 <calculate_voltage>:

double calculate_voltage(double data)
{
 8005230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	ed87 0b00 	vstr	d0, [r7]
	double RES;
	//a_voltage = 0.0000160989032721161;
	//b_voltage = 9.6660275246403800000;
	//c_voltage = 0.0066157945677234600;
	RES = (-b_voltage+(sqrt((b_voltage*b_voltage)-(4*a_voltage*(c_voltage-data)))))/(2*a_voltage);
 800523c:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <calculate_voltage+0xc8>)
 800523e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005242:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <calculate_voltage+0xc8>)
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f9e6 	bl	8000618 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	4b29      	ldr	r3, [pc, #164]	; (80052fc <calculate_voltage+0xcc>)
 8005256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	4b28      	ldr	r3, [pc, #160]	; (8005300 <calculate_voltage+0xd0>)
 8005260:	f7fb f9da 	bl	8000618 <__aeabi_dmul>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4690      	mov	r8, r2
 800526a:	4699      	mov	r9, r3
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <calculate_voltage+0xd4>)
 800526e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005276:	f7fb f817 	bl	80002a8 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4640      	mov	r0, r8
 8005280:	4649      	mov	r1, r9
 8005282:	f7fb f9c9 	bl	8000618 <__aeabi_dmul>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f7fb f80b 	bl	80002a8 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	ec43 2b17 	vmov	d7, r2, r3
 800529a:	eeb0 0a47 	vmov.f32	s0, s14
 800529e:	eef0 0a67 	vmov.f32	s1, s15
 80052a2:	f01c fac9 	bl	8021838 <sqrt>
 80052a6:	ec51 0b10 	vmov	r0, r1, d0
 80052aa:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <calculate_voltage+0xc8>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fa fffa 	bl	80002a8 <__aeabi_dsub>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <calculate_voltage+0xcc>)
 80052be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	f7fa fff1 	bl	80002ac <__adddf3>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fb facb 	bl	800086c <__aeabi_ddiv>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return RES;
 80052de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80052e6:	eeb0 0a47 	vmov.f32	s0, s14
 80052ea:	eef0 0a67 	vmov.f32	s1, s15
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052f6:	bf00      	nop
 80052f8:	20006bd0 	.word	0x20006bd0
 80052fc:	20006be8 	.word	0x20006be8
 8005300:	40100000 	.word	0x40100000
 8005304:	20006bf0 	.word	0x20006bf0

08005308 <Logging_init>:
	[RefVoltage_tag]=10,
	[AutoGainCoef_period_tag]=19,
};

void Logging_init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
	disk_initialize(W25FatFs.drv);
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <Logging_init+0x14>)
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	4618      	mov	r0, r3
 8005312:	f00c ff4f 	bl	80121b4 <disk_initialize>
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20007600 	.word	0x20007600

08005320 <Create_File>:



void Create_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	461a      	mov	r2, r3
 800532c:	460b      	mov	r3, r1
 800532e:	72fb      	strb	r3, [r7, #11]
 8005330:	4613      	mov	r3, r2
 8005332:	813b      	strh	r3, [r7, #8]
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005334:	2200      	movs	r2, #0
 8005336:	490b      	ldr	r1, [pc, #44]	; (8005364 <Create_File+0x44>)
 8005338:	480b      	ldr	r0, [pc, #44]	; (8005368 <Create_File+0x48>)
 800533a:	f00e fc5f 	bl	8013bfc <f_mount>
	f_open(&MyFile, (char*)FileName, FA_WRITE|FA_CREATE_ALWAYS);
 800533e:	220a      	movs	r2, #10
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	480a      	ldr	r0, [pc, #40]	; (800536c <Create_File+0x4c>)
 8005344:	f00e fca0 	bl	8013c88 <f_open>
	f_write(&MyFile, FileText, FileSize, &testBytes);
 8005348:	893a      	ldrh	r2, [r7, #8]
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <Create_File+0x50>)
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4807      	ldr	r0, [pc, #28]	; (800536c <Create_File+0x4c>)
 8005350:	f00e ff97 	bl	8014282 <f_write>
	f_close(&MyFile);
 8005354:	4805      	ldr	r0, [pc, #20]	; (800536c <Create_File+0x4c>)
 8005356:	f00f f987 	bl	8014668 <f_close>
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20008730 	.word	0x20008730
 8005368:	20007600 	.word	0x20007600
 800536c:	200073d0 	.word	0x200073d0
 8005370:	20007830 	.word	0x20007830

08005374 <Read_File>:



uint8_t Read_File(uint8_t*FileName, uint8_t NameSize, uint8_t*FileText, uint16_t FileSize)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	461a      	mov	r2, r3
 8005380:	460b      	mov	r3, r1
 8005382:	72fb      	strb	r3, [r7, #11]
 8005384:	4613      	mov	r3, r2
 8005386:	813b      	strh	r3, [r7, #8]
	uint8_t RES;
	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8005388:	2200      	movs	r2, #0
 800538a:	490c      	ldr	r1, [pc, #48]	; (80053bc <Read_File+0x48>)
 800538c:	480c      	ldr	r0, [pc, #48]	; (80053c0 <Read_File+0x4c>)
 800538e:	f00e fc35 	bl	8013bfc <f_mount>
	f_open(&MyFile, (char*)FileName, FA_READ|FA_OPEN_ALWAYS);
 8005392:	2211      	movs	r2, #17
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	480b      	ldr	r0, [pc, #44]	; (80053c4 <Read_File+0x50>)
 8005398:	f00e fc76 	bl	8013c88 <f_open>
	RES=f_read(&MyFile, FileText, FileSize, &testBytes);
 800539c:	893a      	ldrh	r2, [r7, #8]
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <Read_File+0x54>)
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4808      	ldr	r0, [pc, #32]	; (80053c4 <Read_File+0x50>)
 80053a4:	f00e fe2e 	bl	8014004 <f_read>
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]
	f_close(&MyFile);
 80053ac:	4805      	ldr	r0, [pc, #20]	; (80053c4 <Read_File+0x50>)
 80053ae:	f00f f95b 	bl	8014668 <f_close>
	return RES;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20008730 	.word	0x20008730
 80053c0:	20007600 	.word	0x20007600
 80053c4:	200073d0 	.word	0x200073d0
 80053c8:	20007830 	.word	0x20007830

080053cc <FileParser>:

uint16_t FileParser(uint8_t tag)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
	uint16_t i=0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	81fb      	strh	r3, [r7, #14]
	uint16_t RES=0, Sym_cntr=0;
 80053da:	2300      	movs	r3, #0
 80053dc:	81bb      	strh	r3, [r7, #12]
 80053de:	2300      	movs	r3, #0
 80053e0:	817b      	strh	r3, [r7, #10]

	for(i=0;i<file_size;i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	81fb      	strh	r3, [r7, #14]
 80053e6:	e042      	b.n	800546e <FileParser+0xa2>
	{
		if(ReadFileBuf[i]==TAG_STRING[tag][Sym_cntr])
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	4a26      	ldr	r2, [pc, #152]	; (8005484 <FileParser+0xb8>)
 80053ec:	5cd2      	ldrb	r2, [r2, r3]
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	4925      	ldr	r1, [pc, #148]	; (8005488 <FileParser+0xbc>)
 80053f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	440b      	add	r3, r1
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d133      	bne.n	8005468 <FileParser+0x9c>
		{
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005400:	e013      	b.n	800542a <FileParser+0x5e>
			{
				if(ReadFileBuf[i+Sym_cntr]==TAG_STRING[tag][Sym_cntr])
 8005402:	89fa      	ldrh	r2, [r7, #14]
 8005404:	897b      	ldrh	r3, [r7, #10]
 8005406:	4413      	add	r3, r2
 8005408:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <FileParser+0xb8>)
 800540a:	5cd2      	ldrb	r2, [r2, r3]
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	491e      	ldr	r1, [pc, #120]	; (8005488 <FileParser+0xbc>)
 8005410:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	440b      	add	r3, r1
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d102      	bne.n	8005424 <FileParser+0x58>
				{RES++;}
 800541e:	89bb      	ldrh	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	81bb      	strh	r3, [r7, #12]
			for(;Sym_cntr<TAG_NUM_OF_SYM[tag];Sym_cntr++)
 8005424:	897b      	ldrh	r3, [r7, #10]
 8005426:	3301      	adds	r3, #1
 8005428:	817b      	strh	r3, [r7, #10]
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	4a17      	ldr	r2, [pc, #92]	; (800548c <FileParser+0xc0>)
 800542e:	5cd3      	ldrb	r3, [r2, r3]
 8005430:	b29b      	uxth	r3, r3
 8005432:	897a      	ldrh	r2, [r7, #10]
 8005434:	429a      	cmp	r2, r3
 8005436:	d3e4      	bcc.n	8005402 <FileParser+0x36>
			}
			if(RES==TAG_NUM_OF_SYM[tag])
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4a14      	ldr	r2, [pc, #80]	; (800548c <FileParser+0xc0>)
 800543c:	5cd3      	ldrb	r3, [r2, r3]
 800543e:	b29b      	uxth	r3, r3
 8005440:	89ba      	ldrh	r2, [r7, #12]
 8005442:	429a      	cmp	r2, r3
 8005444:	d10c      	bne.n	8005460 <FileParser+0x94>
			{RES=i+TAG_NUM_OF_SYM[tag]+1; i=file_size;}
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	4a10      	ldr	r2, [pc, #64]	; (800548c <FileParser+0xc0>)
 800544a:	5cd3      	ldrb	r3, [r2, r3]
 800544c:	b29a      	uxth	r2, r3
 800544e:	89fb      	ldrh	r3, [r7, #14]
 8005450:	4413      	add	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	3301      	adds	r3, #1
 8005456:	81bb      	strh	r3, [r7, #12]
 8005458:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800545c:	81fb      	strh	r3, [r7, #14]
 800545e:	e003      	b.n	8005468 <FileParser+0x9c>
			else {RES=Sym_cntr=0;}
 8005460:	2300      	movs	r3, #0
 8005462:	817b      	strh	r3, [r7, #10]
 8005464:	897b      	ldrh	r3, [r7, #10]
 8005466:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<file_size;i++)
 8005468:	89fb      	ldrh	r3, [r7, #14]
 800546a:	3301      	adds	r3, #1
 800546c:	81fb      	strh	r3, [r7, #14]
 800546e:	89fb      	ldrh	r3, [r7, #14]
 8005470:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005474:	d3b8      	bcc.n	80053e8 <FileParser+0x1c>
		}
	}

	return RES;
 8005476:	89bb      	ldrh	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20006c00 	.word	0x20006c00
 8005488:	20000280 	.word	0x20000280
 800548c:	08023de0 	.word	0x08023de0

08005490 <scan_double>:
	}
}


double scan_double(uint16_t offset, uint8_t *buff)
{
 8005490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005494:	b088      	sub	sp, #32
 8005496:	af00      	add	r7, sp, #0
 8005498:	4603      	mov	r3, r0
 800549a:	6039      	str	r1, [r7, #0]
 800549c:	80fb      	strh	r3, [r7, #6]
	uint64_t res64=0;
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t i=0, point=0, sign=0, after_size=0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	82fb      	strh	r3, [r7, #22]
 80054ae:	2300      	movs	r3, #0
 80054b0:	82bb      	strh	r3, [r7, #20]
 80054b2:	2300      	movs	r3, #0
 80054b4:	827b      	strh	r3, [r7, #18]
 80054b6:	2300      	movs	r3, #0
 80054b8:	823b      	strh	r3, [r7, #16]
	double RES=0;
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(buff[offset]=='-')sign=1;
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b2d      	cmp	r3, #45	; 0x2d
 80054d0:	d101      	bne.n	80054d6 <scan_double+0x46>
 80054d2:	2301      	movs	r3, #1
 80054d4:	827b      	strh	r3, [r7, #18]

	// Find point
	for(i=0;i<30;i++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	82fb      	strh	r3, [r7, #22]
 80054da:	e034      	b.n	8005546 <scan_double+0xb6>
	{
		if((buff[i+sign+offset]==',')||(buff[i+sign+offset]=='.')) point=i;
 80054dc:	8afa      	ldrh	r2, [r7, #22]
 80054de:	8a7b      	ldrh	r3, [r7, #18]
 80054e0:	441a      	add	r2, r3
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	4413      	add	r3, r2
 80054e6:	461a      	mov	r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	4413      	add	r3, r2
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b2c      	cmp	r3, #44	; 0x2c
 80054f0:	d00a      	beq.n	8005508 <scan_double+0x78>
 80054f2:	8afa      	ldrh	r2, [r7, #22]
 80054f4:	8a7b      	ldrh	r3, [r7, #18]
 80054f6:	441a      	add	r2, r3
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	4413      	add	r3, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b2e      	cmp	r3, #46	; 0x2e
 8005506:	d101      	bne.n	800550c <scan_double+0x7c>
 8005508:	8afb      	ldrh	r3, [r7, #22]
 800550a:	82bb      	strh	r3, [r7, #20]
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) {after_size=i; i=30;}
 800550c:	8afa      	ldrh	r2, [r7, #22]
 800550e:	8a7b      	ldrh	r3, [r7, #18]
 8005510:	441a      	add	r2, r3
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	4413      	add	r3, r2
 8005516:	461a      	mov	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	4413      	add	r3, r2
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b0d      	cmp	r3, #13
 8005520:	d00a      	beq.n	8005538 <scan_double+0xa8>
 8005522:	8afa      	ldrh	r2, [r7, #22]
 8005524:	8a7b      	ldrh	r3, [r7, #18]
 8005526:	441a      	add	r2, r3
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	4413      	add	r3, r2
 800552c:	461a      	mov	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	4413      	add	r3, r2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b0a      	cmp	r3, #10
 8005536:	d103      	bne.n	8005540 <scan_double+0xb0>
 8005538:	8afb      	ldrh	r3, [r7, #22]
 800553a:	823b      	strh	r3, [r7, #16]
 800553c:	231e      	movs	r3, #30
 800553e:	82fb      	strh	r3, [r7, #22]
	for(i=0;i<30;i++)
 8005540:	8afb      	ldrh	r3, [r7, #22]
 8005542:	3301      	adds	r3, #1
 8005544:	82fb      	strh	r3, [r7, #22]
 8005546:	8afb      	ldrh	r3, [r7, #22]
 8005548:	2b1d      	cmp	r3, #29
 800554a:	d9c7      	bls.n	80054dc <scan_double+0x4c>
	}

	if(after_size>19)after_size=19;
 800554c:	8a3b      	ldrh	r3, [r7, #16]
 800554e:	2b13      	cmp	r3, #19
 8005550:	d901      	bls.n	8005556 <scan_double+0xc6>
 8005552:	2313      	movs	r3, #19
 8005554:	823b      	strh	r3, [r7, #16]
	for(i=0;i<after_size;i++)
 8005556:	2300      	movs	r3, #0
 8005558:	82fb      	strh	r3, [r7, #22]
 800555a:	e04d      	b.n	80055f8 <scan_double+0x168>
	{
		if((buff[i+sign+offset]==0x0D)||(buff[i+sign+offset]==0x0A)) break;
 800555c:	8afa      	ldrh	r2, [r7, #22]
 800555e:	8a7b      	ldrh	r3, [r7, #18]
 8005560:	441a      	add	r2, r3
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	4413      	add	r3, r2
 8005566:	461a      	mov	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b0d      	cmp	r3, #13
 8005570:	d046      	beq.n	8005600 <scan_double+0x170>
 8005572:	8afa      	ldrh	r2, [r7, #22]
 8005574:	8a7b      	ldrh	r3, [r7, #18]
 8005576:	441a      	add	r2, r3
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	4413      	add	r3, r2
 800557c:	461a      	mov	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b0a      	cmp	r3, #10
 8005586:	d03b      	beq.n	8005600 <scan_double+0x170>
		if((i!=point)||(point==0))
 8005588:	8afa      	ldrh	r2, [r7, #22]
 800558a:	8abb      	ldrh	r3, [r7, #20]
 800558c:	429a      	cmp	r2, r3
 800558e:	d102      	bne.n	8005596 <scan_double+0x106>
 8005590:	8abb      	ldrh	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d12d      	bne.n	80055f2 <scan_double+0x162>
		{
			res64*=10;
 8005596:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800559a:	4622      	mov	r2, r4
 800559c:	462b      	mov	r3, r5
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	f04f 0100 	mov.w	r1, #0
 80055a6:	0099      	lsls	r1, r3, #2
 80055a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80055ac:	0090      	lsls	r0, r2, #2
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	1912      	adds	r2, r2, r4
 80055b4:	eb45 0303 	adc.w	r3, r5, r3
 80055b8:	eb12 0a02 	adds.w	sl, r2, r2
 80055bc:	eb43 0b03 	adc.w	fp, r3, r3
 80055c0:	4652      	mov	r2, sl
 80055c2:	465b      	mov	r3, fp
 80055c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			res64+=buff[i+sign+offset]-48;
 80055c8:	8afa      	ldrh	r2, [r7, #22]
 80055ca:	8a7b      	ldrh	r3, [r7, #18]
 80055cc:	441a      	add	r2, r3
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	4413      	add	r3, r2
 80055d2:	461a      	mov	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4413      	add	r3, r2
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	3b30      	subs	r3, #48	; 0x30
 80055dc:	461a      	mov	r2, r3
 80055de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055e6:	eb10 0802 	adds.w	r8, r0, r2
 80055ea:	eb41 0903 	adc.w	r9, r1, r3
 80055ee:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for(i=0;i<after_size;i++)
 80055f2:	8afb      	ldrh	r3, [r7, #22]
 80055f4:	3301      	adds	r3, #1
 80055f6:	82fb      	strh	r3, [r7, #22]
 80055f8:	8afa      	ldrh	r2, [r7, #22]
 80055fa:	8a3b      	ldrh	r3, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3ad      	bcc.n	800555c <scan_double+0xcc>
		}
	}

	if(point!=0){after_size-=1;
 8005600:	8abb      	ldrh	r3, [r7, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <scan_double+0x1bc>
 8005606:	8a3b      	ldrh	r3, [r7, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	823b      	strh	r3, [r7, #16]
	RES = (double)res64;
 800560c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005610:	f7fa ffcc 	bl	80005ac <__aeabi_ul2d>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<(after_size-point);i++)RES *= 0.1;}
 800561c:	2300      	movs	r3, #0
 800561e:	82fb      	strh	r3, [r7, #22]
 8005620:	e00d      	b.n	800563e <scan_double+0x1ae>
 8005622:	a319      	add	r3, pc, #100	; (adr r3, 8005688 <scan_double+0x1f8>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800562c:	f7fa fff4 	bl	8000618 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005638:	8afb      	ldrh	r3, [r7, #22]
 800563a:	3301      	adds	r3, #1
 800563c:	82fb      	strh	r3, [r7, #22]
 800563e:	8afa      	ldrh	r2, [r7, #22]
 8005640:	8a39      	ldrh	r1, [r7, #16]
 8005642:	8abb      	ldrh	r3, [r7, #20]
 8005644:	1acb      	subs	r3, r1, r3
 8005646:	429a      	cmp	r2, r3
 8005648:	dbeb      	blt.n	8005622 <scan_double+0x192>
 800564a:	e007      	b.n	800565c <scan_double+0x1cc>
	else RES = (double)res64;
 800564c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005650:	f7fa ffac 	bl	80005ac <__aeabi_ul2d>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(sign==1)RES=-RES;
 800565c:	8a7b      	ldrh	r3, [r7, #18]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d105      	bne.n	800566e <scan_double+0x1de>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800566c:	60fb      	str	r3, [r7, #12]
	return RES;
 800566e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005672:	ec43 2b17 	vmov	d7, r2, r3
}
 8005676:	eeb0 0a47 	vmov.f32	s0, s14
 800567a:	eef0 0a67 	vmov.f32	s1, s15
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005686:	bf00      	nop
 8005688:	9999999a 	.word	0x9999999a
 800568c:	3fb99999 	.word	0x3fb99999

08005690 <Save_Settings>:

void Save_Settings(uint8_t TAG, int32_t data)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	6039      	str	r1, [r7, #0]
 800569a:	71fb      	strb	r3, [r7, #7]
	uint8_t Name[11]="CONFIG.CSV\0";
 800569c:	4a4c      	ldr	r2, [pc, #304]	; (80057d0 <Save_Settings+0x140>)
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80056a4:	c303      	stmia	r3!, {r0, r1}
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	3302      	adds	r3, #2
 80056aa:	0c12      	lsrs	r2, r2, #16
 80056ac:	701a      	strb	r2, [r3, #0]
	uint16_t index, i, end_index;
	while(Read_File(Name, 11, ReadFileBuf, file_size)!=FR_OK){};
 80056ae:	bf00      	nop
 80056b0:	f107 000c 	add.w	r0, r7, #12
 80056b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80056b8:	4a46      	ldr	r2, [pc, #280]	; (80057d4 <Save_Settings+0x144>)
 80056ba:	210b      	movs	r1, #11
 80056bc:	f7ff fe5a 	bl	8005374 <Read_File>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f4      	bne.n	80056b0 <Save_Settings+0x20>
	//{
		index=FileParser(TAG);
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fe7f 	bl	80053cc <FileParser>
 80056ce:	4603      	mov	r3, r0
 80056d0:	837b      	strh	r3, [r7, #26]
		for(i=index;i<file_size-1;i++)
 80056d2:	8b7b      	ldrh	r3, [r7, #26]
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	e013      	b.n	8005700 <Save_Settings+0x70>
		{
			if((ReadFileBuf[i]==0x0D)&&(ReadFileBuf[i+1]==0x0A))
 80056d8:	8bfb      	ldrh	r3, [r7, #30]
 80056da:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <Save_Settings+0x144>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	2b0d      	cmp	r3, #13
 80056e0:	d10b      	bne.n	80056fa <Save_Settings+0x6a>
 80056e2:	8bfb      	ldrh	r3, [r7, #30]
 80056e4:	3301      	adds	r3, #1
 80056e6:	4a3b      	ldr	r2, [pc, #236]	; (80057d4 <Save_Settings+0x144>)
 80056e8:	5cd3      	ldrb	r3, [r2, r3]
 80056ea:	2b0a      	cmp	r3, #10
 80056ec:	d105      	bne.n	80056fa <Save_Settings+0x6a>
			{
				end_index=i+2;
 80056ee:	8bfb      	ldrh	r3, [r7, #30]
 80056f0:	3302      	adds	r3, #2
 80056f2:	83bb      	strh	r3, [r7, #28]
				i=file_size-1;
 80056f4:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80056f8:	83fb      	strh	r3, [r7, #30]
		for(i=index;i<file_size-1;i++)
 80056fa:	8bfb      	ldrh	r3, [r7, #30]
 80056fc:	3301      	adds	r3, #1
 80056fe:	83fb      	strh	r3, [r7, #30]
 8005700:	8bfb      	ldrh	r3, [r7, #30]
 8005702:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8005706:	4293      	cmp	r3, r2
 8005708:	d9e6      	bls.n	80056d8 <Save_Settings+0x48>
			}
		}

		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	4a32      	ldr	r2, [pc, #200]	; (80057d8 <Save_Settings+0x148>)
 800570e:	5cd3      	ldrb	r3, [r2, r3]
 8005710:	b29b      	uxth	r3, r3
 8005712:	8b7a      	ldrh	r2, [r7, #26]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	83fb      	strh	r3, [r7, #30]
 800571c:	e011      	b.n	8005742 <Save_Settings+0xb2>
		{
			ReadFileBuf[i]=ReadFileBuf[i+end_index-(index-TAG_NUM_OF_SYM[TAG]-1)];
 800571e:	8bfa      	ldrh	r2, [r7, #30]
 8005720:	8bbb      	ldrh	r3, [r7, #28]
 8005722:	441a      	add	r2, r3
 8005724:	8b7b      	ldrh	r3, [r7, #26]
 8005726:	79f9      	ldrb	r1, [r7, #7]
 8005728:	482b      	ldr	r0, [pc, #172]	; (80057d8 <Save_Settings+0x148>)
 800572a:	5c41      	ldrb	r1, [r0, r1]
 800572c:	1a5b      	subs	r3, r3, r1
 800572e:	3b01      	subs	r3, #1
 8005730:	1ad2      	subs	r2, r2, r3
 8005732:	8bfb      	ldrh	r3, [r7, #30]
 8005734:	4927      	ldr	r1, [pc, #156]	; (80057d4 <Save_Settings+0x144>)
 8005736:	5c89      	ldrb	r1, [r1, r2]
 8005738:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <Save_Settings+0x144>)
 800573a:	54d1      	strb	r1, [r2, r3]
		for(i=(index-TAG_NUM_OF_SYM[TAG]-1); i<file_size-end_index; i++)
 800573c:	8bfb      	ldrh	r3, [r7, #30]
 800573e:	3301      	adds	r3, #1
 8005740:	83fb      	strh	r3, [r7, #30]
 8005742:	8bfa      	ldrh	r2, [r7, #30]
 8005744:	8bbb      	ldrh	r3, [r7, #28]
 8005746:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800574a:	429a      	cmp	r2, r3
 800574c:	dbe7      	blt.n	800571e <Save_Settings+0x8e>
		}

		index=FileParser(end_of_file_tag)-TAG_NUM_OF_SYM[end_of_file_tag]-1;
 800574e:	2000      	movs	r0, #0
 8005750:	f7ff fe3c 	bl	80053cc <FileParser>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	230b      	movs	r3, #11
 800575a:	b29b      	uxth	r3, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	837b      	strh	r3, [r7, #26]

		for(i=0;i<TAG_NUM_OF_SYM[TAG];i++)ReadFileBuf[i+index]=TAG_STRING[TAG][i];
 8005764:	2300      	movs	r3, #0
 8005766:	83fb      	strh	r3, [r7, #30]
 8005768:	e00e      	b.n	8005788 <Save_Settings+0xf8>
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <Save_Settings+0x14c>)
 800576e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005772:	8bfb      	ldrh	r3, [r7, #30]
 8005774:	441a      	add	r2, r3
 8005776:	8bf9      	ldrh	r1, [r7, #30]
 8005778:	8b7b      	ldrh	r3, [r7, #26]
 800577a:	440b      	add	r3, r1
 800577c:	7811      	ldrb	r1, [r2, #0]
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <Save_Settings+0x144>)
 8005780:	54d1      	strb	r1, [r2, r3]
 8005782:	8bfb      	ldrh	r3, [r7, #30]
 8005784:	3301      	adds	r3, #1
 8005786:	83fb      	strh	r3, [r7, #30]
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <Save_Settings+0x148>)
 800578c:	5cd3      	ldrb	r3, [r2, r3]
 800578e:	b29b      	uxth	r3, r3
 8005790:	8bfa      	ldrh	r2, [r7, #30]
 8005792:	429a      	cmp	r2, r3
 8005794:	d3e9      	bcc.n	800576a <Save_Settings+0xda>
		sprintf(ReadFileBuf+index+TAG_NUM_OF_SYM[TAG],";%d\r\nend_of_file;\r\n", data);
 8005796:	8b7b      	ldrh	r3, [r7, #26]
 8005798:	79fa      	ldrb	r2, [r7, #7]
 800579a:	490f      	ldr	r1, [pc, #60]	; (80057d8 <Save_Settings+0x148>)
 800579c:	5c8a      	ldrb	r2, [r1, r2]
 800579e:	4413      	add	r3, r2
 80057a0:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <Save_Settings+0x144>)
 80057a2:	4413      	add	r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	490e      	ldr	r1, [pc, #56]	; (80057e0 <Save_Settings+0x150>)
 80057a8:	4618      	mov	r0, r3
 80057aa:	f018 fa8d 	bl	801dcc8 <siprintf>
		ReadFileBuf[file_size-1]="\0";
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <Save_Settings+0x154>)
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <Save_Settings+0x144>)
 80057b4:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
		Create_File(Name, 11, ReadFileBuf, file_size);
 80057b8:	f107 000c 	add.w	r0, r7, #12
 80057bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <Save_Settings+0x144>)
 80057c2:	210b      	movs	r1, #11
 80057c4:	f7ff fdac 	bl	8005320 <Create_File>
	//}
}
 80057c8:	bf00      	nop
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	08021f6c 	.word	0x08021f6c
 80057d4:	20006c00 	.word	0x20006c00
 80057d8:	08023de0 	.word	0x08023de0
 80057dc:	20000280 	.word	0x20000280
 80057e0:	08021f54 	.word	0x08021f54
 80057e4:	08021f68 	.word	0x08021f68

080057e8 <Read_Variable_From_File>:



double Read_Variable_From_File(uint8_t name)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
	return scan_double(FileParser(name), ReadFileBuf);
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fde9 	bl	80053cc <FileParser>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4907      	ldr	r1, [pc, #28]	; (800581c <Read_Variable_From_File+0x34>)
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fe46 	bl	8005490 <scan_double>
 8005804:	eeb0 7a40 	vmov.f32	s14, s0
 8005808:	eef0 7a60 	vmov.f32	s15, s1
}
 800580c:	eeb0 0a47 	vmov.f32	s0, s14
 8005810:	eef0 0a67 	vmov.f32	s1, s15
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20006c00 	.word	0x20006c00

08005820 <Load_Settings>:



void Load_Settings(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
	uint8_t Name_settings[11]="CONFIG.CSV\0";
 8005826:	4ad2      	ldr	r2, [pc, #840]	; (8005b70 <Load_Settings+0x350>)
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	ca07      	ldmia	r2, {r0, r1, r2}
 800582e:	c303      	stmia	r3!, {r0, r1}
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	3302      	adds	r3, #2
 8005834:	0c12      	lsrs	r2, r2, #16
 8005836:	701a      	strb	r2, [r3, #0]
	uint8_t Name_calibr[8]="CAL.CSV\0";
 8005838:	4ace      	ldr	r2, [pc, #824]	; (8005b74 <Load_Settings+0x354>)
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005840:	e883 0003 	stmia.w	r3, {r0, r1}

	// Читаем конфигурационный файл
	while(Read_File(Name_settings, 11, ReadFileBuf, file_size)!=FR_OK){};
 8005844:	bf00      	nop
 8005846:	f107 000c 	add.w	r0, r7, #12
 800584a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800584e:	4aca      	ldr	r2, [pc, #808]	; (8005b78 <Load_Settings+0x358>)
 8005850:	210b      	movs	r1, #11
 8005852:	f7ff fd8f 	bl	8005374 <Read_File>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f4      	bne.n	8005846 <Load_Settings+0x26>
	//{
		gauge_error = Read_Variable_From_File(gauge_error_tag);
 800585c:	200f      	movs	r0, #15
 800585e:	f7ff ffc3 	bl	80057e8 <Read_Variable_From_File>
 8005862:	eeb0 7a40 	vmov.f32	s14, s0
 8005866:	eef0 7a60 	vmov.f32	s15, s1
 800586a:	4bc4      	ldr	r3, [pc, #784]	; (8005b7c <Load_Settings+0x35c>)
 800586c:	ed83 7b00 	vstr	d7, [r3]
		display_brightness = (uint16_t)Read_Variable_From_File(display_brightness_tag);
 8005870:	2001      	movs	r0, #1
 8005872:	f7ff ffb9 	bl	80057e8 <Read_Variable_From_File>
 8005876:	ec53 2b10 	vmov	r2, r3, d0
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	f7fb f9a3 	bl	8000bc8 <__aeabi_d2uiz>
 8005882:	4603      	mov	r3, r0
 8005884:	b29b      	uxth	r3, r3
 8005886:	b2da      	uxtb	r2, r3
 8005888:	4bbd      	ldr	r3, [pc, #756]	; (8005b80 <Load_Settings+0x360>)
 800588a:	701a      	strb	r2, [r3, #0]
		display_contrast = (uint16_t)Read_Variable_From_File(display_contrast_tag);
 800588c:	2002      	movs	r0, #2
 800588e:	f7ff ffab 	bl	80057e8 <Read_Variable_From_File>
 8005892:	ec53 2b10 	vmov	r2, r3, d0
 8005896:	4610      	mov	r0, r2
 8005898:	4619      	mov	r1, r3
 800589a:	f7fb f995 	bl	8000bc8 <__aeabi_d2uiz>
 800589e:	4603      	mov	r3, r0
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4bb7      	ldr	r3, [pc, #732]	; (8005b84 <Load_Settings+0x364>)
 80058a6:	701a      	strb	r2, [r3, #0]
		mm_peak = (uint16_t)Read_Variable_From_File(mm_peak_tag);
 80058a8:	2003      	movs	r0, #3
 80058aa:	f7ff ff9d 	bl	80057e8 <Read_Variable_From_File>
 80058ae:	ec53 2b10 	vmov	r2, r3, d0
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7fb f987 	bl	8000bc8 <__aeabi_d2uiz>
 80058ba:	4603      	mov	r3, r0
 80058bc:	b29b      	uxth	r3, r3
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4bb1      	ldr	r3, [pc, #708]	; (8005b88 <Load_Settings+0x368>)
 80058c2:	701a      	strb	r2, [r3, #0]
		leak_detect = (uint16_t)Read_Variable_From_File(leak_detect_tag);
 80058c4:	2004      	movs	r0, #4
 80058c6:	f7ff ff8f 	bl	80057e8 <Read_Variable_From_File>
 80058ca:	ec53 2b10 	vmov	r2, r3, d0
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	f7fb f979 	bl	8000bc8 <__aeabi_d2uiz>
 80058d6:	4603      	mov	r3, r0
 80058d8:	b29b      	uxth	r3, r3
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4bab      	ldr	r3, [pc, #684]	; (8005b8c <Load_Settings+0x36c>)
 80058de:	701a      	strb	r2, [r3, #0]
		PV = (uint16_t)Read_Variable_From_File(PV_tag);
 80058e0:	2005      	movs	r0, #5
 80058e2:	f7ff ff81 	bl	80057e8 <Read_Variable_From_File>
 80058e6:	ec53 2b10 	vmov	r2, r3, d0
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	f7fb f96b 	bl	8000bc8 <__aeabi_d2uiz>
 80058f2:	4603      	mov	r3, r0
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	4ba5      	ldr	r3, [pc, #660]	; (8005b90 <Load_Settings+0x370>)
 80058fa:	701a      	strb	r2, [r3, #0]
		PI = (uint16_t)Read_Variable_From_File(PI_tag);
 80058fc:	2006      	movs	r0, #6
 80058fe:	f7ff ff73 	bl	80057e8 <Read_Variable_From_File>
 8005902:	ec53 2b10 	vmov	r2, r3, d0
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	f7fb f95d 	bl	8000bc8 <__aeabi_d2uiz>
 800590e:	4603      	mov	r3, r0
 8005910:	b29b      	uxth	r3, r3
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b9f      	ldr	r3, [pc, #636]	; (8005b94 <Load_Settings+0x374>)
 8005916:	701a      	strb	r2, [r3, #0]
		PE = (uint16_t)Read_Variable_From_File(PE_tag);
 8005918:	2007      	movs	r0, #7
 800591a:	f7ff ff65 	bl	80057e8 <Read_Variable_From_File>
 800591e:	ec53 2b10 	vmov	r2, r3, d0
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	f7fb f94f 	bl	8000bc8 <__aeabi_d2uiz>
 800592a:	4603      	mov	r3, r0
 800592c:	b29b      	uxth	r3, r3
 800592e:	b2da      	uxtb	r2, r3
 8005930:	4b99      	ldr	r3, [pc, #612]	; (8005b98 <Load_Settings+0x378>)
 8005932:	701a      	strb	r2, [r3, #0]
		PGA_GAIN = (uint16_t)Read_Variable_From_File(PGA_GAIN_tag);
 8005934:	2008      	movs	r0, #8
 8005936:	f7ff ff57 	bl	80057e8 <Read_Variable_From_File>
 800593a:	ec53 2b10 	vmov	r2, r3, d0
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	f7fb f941 	bl	8000bc8 <__aeabi_d2uiz>
 8005946:	4603      	mov	r3, r0
 8005948:	b29b      	uxth	r3, r3
 800594a:	b2da      	uxtb	r2, r3
 800594c:	4b93      	ldr	r3, [pc, #588]	; (8005b9c <Load_Settings+0x37c>)
 800594e:	701a      	strb	r2, [r3, #0]
		ADC_SPS = (uint16_t)Read_Variable_From_File(ADC_SPS_tag);
 8005950:	2009      	movs	r0, #9
 8005952:	f7ff ff49 	bl	80057e8 <Read_Variable_From_File>
 8005956:	ec53 2b10 	vmov	r2, r3, d0
 800595a:	4610      	mov	r0, r2
 800595c:	4619      	mov	r1, r3
 800595e:	f7fb f933 	bl	8000bc8 <__aeabi_d2uiz>
 8005962:	4603      	mov	r3, r0
 8005964:	b29b      	uxth	r3, r3
 8005966:	b2da      	uxtb	r2, r3
 8005968:	4b8d      	ldr	r3, [pc, #564]	; (8005ba0 <Load_Settings+0x380>)
 800596a:	701a      	strb	r2, [r3, #0]
		adc_calibration_mode = (uint16_t)Read_Variable_From_File(adc_calibration_mode_tag);
 800596c:	200a      	movs	r0, #10
 800596e:	f7ff ff3b 	bl	80057e8 <Read_Variable_From_File>
 8005972:	ec53 2b10 	vmov	r2, r3, d0
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	f7fb f925 	bl	8000bc8 <__aeabi_d2uiz>
 800597e:	4603      	mov	r3, r0
 8005980:	b29b      	uxth	r3, r3
 8005982:	b2da      	uxtb	r2, r3
 8005984:	4b87      	ldr	r3, [pc, #540]	; (8005ba4 <Load_Settings+0x384>)
 8005986:	701a      	strb	r2, [r3, #0]
		ADC_Buff_size = (uint16_t)Read_Variable_From_File(ADC_Buff_size_tag);
 8005988:	200b      	movs	r0, #11
 800598a:	f7ff ff2d 	bl	80057e8 <Read_Variable_From_File>
 800598e:	ec53 2b10 	vmov	r2, r3, d0
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	f7fb f917 	bl	8000bc8 <__aeabi_d2uiz>
 800599a:	4603      	mov	r3, r0
 800599c:	b29a      	uxth	r2, r3
 800599e:	4b82      	ldr	r3, [pc, #520]	; (8005ba8 <Load_Settings+0x388>)
 80059a0:	801a      	strh	r2, [r3, #0]
		Auto_Off_Time = (uint16_t)Read_Variable_From_File(Auto_Off_Time_tag);
 80059a2:	200c      	movs	r0, #12
 80059a4:	f7ff ff20 	bl	80057e8 <Read_Variable_From_File>
 80059a8:	ec53 2b10 	vmov	r2, r3, d0
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	f7fb f90a 	bl	8000bc8 <__aeabi_d2uiz>
 80059b4:	4603      	mov	r3, r0
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	4b7c      	ldr	r3, [pc, #496]	; (8005bac <Load_Settings+0x38c>)
 80059ba:	801a      	strh	r2, [r3, #0]
		serial_num = (uint16_t)Read_Variable_From_File(serial_num_tag);
 80059bc:	200d      	movs	r0, #13
 80059be:	f7ff ff13 	bl	80057e8 <Read_Variable_From_File>
 80059c2:	ec53 2b10 	vmov	r2, r3, d0
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7fb f8fd 	bl	8000bc8 <__aeabi_d2uiz>
 80059ce:	4603      	mov	r3, r0
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	4b76      	ldr	r3, [pc, #472]	; (8005bb0 <Load_Settings+0x390>)
 80059d6:	601a      	str	r2, [r3, #0]
		gauge_range = (uint16_t)Read_Variable_From_File(gauge_range_tag);
 80059d8:	200e      	movs	r0, #14
 80059da:	f7ff ff05 	bl	80057e8 <Read_Variable_From_File>
 80059de:	ec53 2b10 	vmov	r2, r3, d0
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	f7fb f8ef 	bl	8000bc8 <__aeabi_d2uiz>
 80059ea:	4603      	mov	r3, r0
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b70      	ldr	r3, [pc, #448]	; (8005bb4 <Load_Settings+0x394>)
 80059f2:	601a      	str	r2, [r3, #0]
		light_delay = (uint16_t)Read_Variable_From_File(light_delay_tag);
 80059f4:	2010      	movs	r0, #16
 80059f6:	f7ff fef7 	bl	80057e8 <Read_Variable_From_File>
 80059fa:	ec53 2b10 	vmov	r2, r3, d0
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7fb f8e1 	bl	8000bc8 <__aeabi_d2uiz>
 8005a06:	4603      	mov	r3, r0
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	4b6b      	ldr	r3, [pc, #428]	; (8005bb8 <Load_Settings+0x398>)
 8005a0c:	801a      	strh	r2, [r3, #0]
		logging = (uint16_t)Read_Variable_From_File(logging_tag);
 8005a0e:	2011      	movs	r0, #17
 8005a10:	f7ff feea 	bl	80057e8 <Read_Variable_From_File>
 8005a14:	ec53 2b10 	vmov	r2, r3, d0
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fb f8d4 	bl	8000bc8 <__aeabi_d2uiz>
 8005a20:	4603      	mov	r3, r0
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <Load_Settings+0x39c>)
 8005a28:	701a      	strb	r2, [r3, #0]
		logging_start_hour = (uint16_t)Read_Variable_From_File(logging_start_hour_tag);
 8005a2a:	2012      	movs	r0, #18
 8005a2c:	f7ff fedc 	bl	80057e8 <Read_Variable_From_File>
 8005a30:	ec53 2b10 	vmov	r2, r3, d0
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	f7fb f8c6 	bl	8000bc8 <__aeabi_d2uiz>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	4b5f      	ldr	r3, [pc, #380]	; (8005bc0 <Load_Settings+0x3a0>)
 8005a44:	701a      	strb	r2, [r3, #0]
		logging_start_min = (uint16_t)Read_Variable_From_File(logging_start_min_tag);
 8005a46:	2013      	movs	r0, #19
 8005a48:	f7ff fece 	bl	80057e8 <Read_Variable_From_File>
 8005a4c:	ec53 2b10 	vmov	r2, r3, d0
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	f7fb f8b8 	bl	8000bc8 <__aeabi_d2uiz>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <Load_Settings+0x3a4>)
 8005a60:	701a      	strb	r2, [r3, #0]
		logging_start_sec = (uint16_t)Read_Variable_From_File(logging_start_sec_tag);
 8005a62:	2014      	movs	r0, #20
 8005a64:	f7ff fec0 	bl	80057e8 <Read_Variable_From_File>
 8005a68:	ec53 2b10 	vmov	r2, r3, d0
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f7fb f8aa 	bl	8000bc8 <__aeabi_d2uiz>
 8005a74:	4603      	mov	r3, r0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <Load_Settings+0x3a8>)
 8005a7c:	701a      	strb	r2, [r3, #0]
		logging_period = (uint16_t)Read_Variable_From_File(logging_period_tag);
 8005a7e:	2015      	movs	r0, #21
 8005a80:	f7ff feb2 	bl	80057e8 <Read_Variable_From_File>
 8005a84:	ec53 2b10 	vmov	r2, r3, d0
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7fb f89c 	bl	8000bc8 <__aeabi_d2uiz>
 8005a90:	4603      	mov	r3, r0
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4b4d      	ldr	r3, [pc, #308]	; (8005bcc <Load_Settings+0x3ac>)
 8005a98:	701a      	strb	r2, [r3, #0]
		logging_len = (uint16_t)Read_Variable_From_File(logging_len_tag);
 8005a9a:	2016      	movs	r0, #22
 8005a9c:	f7ff fea4 	bl	80057e8 <Read_Variable_From_File>
 8005aa0:	ec53 2b10 	vmov	r2, r3, d0
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f7fb f88e 	bl	8000bc8 <__aeabi_d2uiz>
 8005aac:	4603      	mov	r3, r0
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <Load_Settings+0x3b0>)
 8005ab4:	701a      	strb	r2, [r3, #0]
		logging_num = (uint16_t)Read_Variable_From_File(logging_num_tag);
 8005ab6:	2017      	movs	r0, #23
 8005ab8:	f7ff fe96 	bl	80057e8 <Read_Variable_From_File>
 8005abc:	ec53 2b10 	vmov	r2, r3, d0
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f7fb f880 	bl	8000bc8 <__aeabi_d2uiz>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4b41      	ldr	r3, [pc, #260]	; (8005bd4 <Load_Settings+0x3b4>)
 8005ad0:	701a      	strb	r2, [r3, #0]
		AutoAmpCoef=(uint8_t)Read_Variable_From_File(AutoAmpCoef_tag);
 8005ad2:	201e      	movs	r0, #30
 8005ad4:	f7ff fe88 	bl	80057e8 <Read_Variable_From_File>
 8005ad8:	ec53 2b10 	vmov	r2, r3, d0
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	f7fb f872 	bl	8000bc8 <__aeabi_d2uiz>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <Load_Settings+0x3b8>)
 8005aea:	701a      	strb	r2, [r3, #0]
		AutoOffCoef_period=(uint16_t)Read_Variable_From_File(AutoOffCoef_period_tag);
 8005aec:	201f      	movs	r0, #31
 8005aee:	f7ff fe7b 	bl	80057e8 <Read_Variable_From_File>
 8005af2:	ec53 2b10 	vmov	r2, r3, d0
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	f7fb f865 	bl	8000bc8 <__aeabi_d2uiz>
 8005afe:	4603      	mov	r3, r0
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <Load_Settings+0x3bc>)
 8005b04:	801a      	strh	r2, [r3, #0]
		AutoGainCoef_period=(uint16_t)Read_Variable_From_File(AutoGainCoef_period_tag);
 8005b06:	2021      	movs	r0, #33	; 0x21
 8005b08:	f7ff fe6e 	bl	80057e8 <Read_Variable_From_File>
 8005b0c:	ec53 2b10 	vmov	r2, r3, d0
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	f7fb f858 	bl	8000bc8 <__aeabi_d2uiz>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <Load_Settings+0x3c0>)
 8005b1e:	801a      	strh	r2, [r3, #0]

	//}

		// Читаем калибровочный файл
		while(Read_File(Name_calibr, 8, ReadFileBuf, file_size)!=FR_OK){};
 8005b20:	bf00      	nop
 8005b22:	1d38      	adds	r0, r7, #4
 8005b24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b28:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <Load_Settings+0x358>)
 8005b2a:	2108      	movs	r1, #8
 8005b2c:	f7ff fc22 	bl	8005374 <Read_File>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f5      	bne.n	8005b22 <Load_Settings+0x302>
		a_current=Read_Variable_From_File(a_current_tag);
 8005b36:	2018      	movs	r0, #24
 8005b38:	f7ff fe56 	bl	80057e8 <Read_Variable_From_File>
 8005b3c:	eeb0 7a40 	vmov.f32	s14, s0
 8005b40:	eef0 7a60 	vmov.f32	s15, s1
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <Load_Settings+0x3c4>)
 8005b46:	ed83 7b00 	vstr	d7, [r3]
		b_current=Read_Variable_From_File(b_current_tag);
 8005b4a:	2019      	movs	r0, #25
 8005b4c:	f7ff fe4c 	bl	80057e8 <Read_Variable_From_File>
 8005b50:	eeb0 7a40 	vmov.f32	s14, s0
 8005b54:	eef0 7a60 	vmov.f32	s15, s1
 8005b58:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <Load_Settings+0x3c8>)
 8005b5a:	ed83 7b00 	vstr	d7, [r3]
		c_current=Read_Variable_From_File(c_current_tag);
 8005b5e:	201a      	movs	r0, #26
 8005b60:	f7ff fe42 	bl	80057e8 <Read_Variable_From_File>
 8005b64:	eeb0 7a40 	vmov.f32	s14, s0
 8005b68:	eef0 7a60 	vmov.f32	s15, s1
 8005b6c:	e03e      	b.n	8005bec <Load_Settings+0x3cc>
 8005b6e:	bf00      	nop
 8005b70:	08021f6c 	.word	0x08021f6c
 8005b74:	08021f78 	.word	0x08021f78
 8005b78:	20006c00 	.word	0x20006c00
 8005b7c:	200000a8 	.word	0x200000a8
 8005b80:	20000098 	.word	0x20000098
 8005b84:	20000099 	.word	0x20000099
 8005b88:	2000089a 	.word	0x2000089a
 8005b8c:	2000089b 	.word	0x2000089b
 8005b90:	2000089c 	.word	0x2000089c
 8005b94:	2000089d 	.word	0x2000089d
 8005b98:	2000089e 	.word	0x2000089e
 8005b9c:	2000009a 	.word	0x2000009a
 8005ba0:	2000009b 	.word	0x2000009b
 8005ba4:	2000089f 	.word	0x2000089f
 8005ba8:	2000009c 	.word	0x2000009c
 8005bac:	200008a0 	.word	0x200008a0
 8005bb0:	200000a0 	.word	0x200000a0
 8005bb4:	200008a4 	.word	0x200008a4
 8005bb8:	200000b0 	.word	0x200000b0
 8005bbc:	200008a8 	.word	0x200008a8
 8005bc0:	200008a9 	.word	0x200008a9
 8005bc4:	200008aa 	.word	0x200008aa
 8005bc8:	200008ab 	.word	0x200008ab
 8005bcc:	200008ac 	.word	0x200008ac
 8005bd0:	200008ad 	.word	0x200008ad
 8005bd4:	200008ae 	.word	0x200008ae
 8005bd8:	20000899 	.word	0x20000899
 8005bdc:	2000215c 	.word	0x2000215c
 8005be0:	200020f4 	.word	0x200020f4
 8005be4:	20006be0 	.word	0x20006be0
 8005be8:	20006bf8 	.word	0x20006bf8
 8005bec:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <Load_Settings+0x42c>)
 8005bee:	ed83 7b00 	vstr	d7, [r3]
		a_voltage=Read_Variable_From_File(a_voltage_tag);
 8005bf2:	201b      	movs	r0, #27
 8005bf4:	f7ff fdf8 	bl	80057e8 <Read_Variable_From_File>
 8005bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8005bfc:	eef0 7a60 	vmov.f32	s15, s1
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <Load_Settings+0x430>)
 8005c02:	ed83 7b00 	vstr	d7, [r3]
		b_voltage=Read_Variable_From_File(b_voltage_tag);
 8005c06:	201c      	movs	r0, #28
 8005c08:	f7ff fdee 	bl	80057e8 <Read_Variable_From_File>
 8005c0c:	eeb0 7a40 	vmov.f32	s14, s0
 8005c10:	eef0 7a60 	vmov.f32	s15, s1
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <Load_Settings+0x434>)
 8005c16:	ed83 7b00 	vstr	d7, [r3]
		c_voltage=Read_Variable_From_File(c_voltage_tag);
 8005c1a:	201d      	movs	r0, #29
 8005c1c:	f7ff fde4 	bl	80057e8 <Read_Variable_From_File>
 8005c20:	eeb0 7a40 	vmov.f32	s14, s0
 8005c24:	eef0 7a60 	vmov.f32	s15, s1
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <Load_Settings+0x438>)
 8005c2a:	ed83 7b00 	vstr	d7, [r3]
		RefVoltage=Read_Variable_From_File(RefVoltage_tag);
 8005c2e:	2020      	movs	r0, #32
 8005c30:	f7ff fdda 	bl	80057e8 <Read_Variable_From_File>
 8005c34:	eeb0 7a40 	vmov.f32	s14, s0
 8005c38:	eef0 7a60 	vmov.f32	s15, s1
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <Load_Settings+0x43c>)
 8005c3e:	ed83 7b00 	vstr	d7, [r3]
//		my_itoa(123456.654321, RAM, 0, 20);
//		my_itoa(-654321.123456, RAM, 0, 20);
//		my_itoa(555555, RAM, 0, 20);
//		my_itoa(-444444, RAM, 0, 20);
//		RAM[0]=0;
}
 8005c42:	bf00      	nop
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20006bd8 	.word	0x20006bd8
 8005c50:	20006be8 	.word	0x20006be8
 8005c54:	20006bd0 	.word	0x20006bd0
 8005c58:	20006bf0 	.word	0x20006bf0
 8005c5c:	20000088 	.word	0x20000088

08005c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c66:	f001 ff74 	bl	8007b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c6a:	f000 f87d 	bl	8005d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c6e:	f000 fca5 	bl	80065bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8005c72:	f000 f9e9 	bl	8006048 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005c76:	f000 fa27 	bl	80060c8 <MX_I2C2_Init>
  MX_RTC_Init();
 8005c7a:	f000 fa65 	bl	8006148 <MX_RTC_Init>
  MX_SPI1_Init();
 8005c7e:	f000 fa8f 	bl	80061a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005c82:	f000 facb 	bl	800621c <MX_SPI2_Init>
  MX_SPI3_Init();
 8005c86:	f000 fb07 	bl	8006298 <MX_SPI3_Init>
  MX_TIM2_Init();
 8005c8a:	f000 fb43 	bl	8006314 <MX_TIM2_Init>
  MX_TIM4_Init();
 8005c8e:	f000 fb9f 	bl	80063d0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8005c92:	f000 fc2d 	bl	80064f0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8005c96:	f00c f999 	bl	8011fcc <MX_FATFS_Init>
  MX_DMA_Init();
 8005c9a:	f000 fc61 	bl	8006560 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8005c9e:	f012 ff07 	bl	8018ab0 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8005ca2:	f000 f93b 	bl	8005f1c <MX_ADC2_Init>
  MX_ADC1_Init();
 8005ca6:	f000 f8bf 	bl	8005e28 <MX_ADC1_Init>
  MX_TIM6_Init();
 8005caa:	f000 fbeb 	bl	8006484 <MX_TIM6_Init>
  MX_DAC1_Init();
 8005cae:	f000 f999 	bl	8005fe4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  // Таски
  	new_task[1]=Parser_process;			// Парсинг команд через виртуальный компорт
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <main+0xd4>)
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <main+0xd8>)
 8005cb6:	605a      	str	r2, [r3, #4]
	new_task[2]=ADC_process;			// АЦП
 8005cb8:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <main+0xd4>)
 8005cba:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <main+0xdc>)
 8005cbc:	609a      	str	r2, [r3, #8]
	new_task[3]=Display_process;		// Дисплей
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <main+0xd4>)
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <main+0xe0>)
 8005cc2:	60da      	str	r2, [r3, #12]
	new_task[4]=Buttons_process;		// Кнопки
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <main+0xd4>)
 8005cc6:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <main+0xe4>)
 8005cc8:	611a      	str	r2, [r3, #16]
	new_task[5]=RTC_process;			// Часы реального времени
 8005cca:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <main+0xd4>)
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <main+0xe8>)
 8005cce:	615a      	str	r2, [r3, #20]
	new_task[6]=Auto_OFF_process;		// Автовыключение
 8005cd0:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <main+0xd4>)
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	; (8005d4c <main+0xec>)
 8005cd4:	619a      	str	r2, [r3, #24]
	new_task[7]=Temperature_process;	// Температура МКУ
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <main+0xd4>)
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <main+0xf0>)
 8005cda:	61da      	str	r2, [r3, #28]
	new_task[8]=Battery_process;		// Напряжение на батарее
 8005cdc:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <main+0xd4>)
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <main+0xf4>)
 8005ce0:	621a      	str	r2, [r3, #32]


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Питание на самоблокировку
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ce8:	481b      	ldr	r0, [pc, #108]	; (8005d58 <main+0xf8>)
 8005cea:	f004 fa55 	bl	800a198 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Питание на самоблокировку
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cf4:	4819      	ldr	r0, [pc, #100]	; (8005d5c <main+0xfc>)
 8005cf6:	f004 fa4f 	bl	800a198 <HAL_GPIO_WritePin>
  Buttons_init();
 8005cfa:	f7fc f955 	bl	8001fa8 <Buttons_init>
  Display_init();
 8005cfe:	f7fc ffcd 	bl	8002c9c <Display_init>
  ADC_init();
 8005d02:	f7fb fc1d 	bl	8001540 <ADC_init>
  W25_Init();
 8005d06:	f7fe fe79 	bl	80049fc <W25_Init>
  BLueTooth_Configuration(BLE_config);
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <main+0x100>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fc f9dc 	bl	80020cc <BLueTooth_Configuration>
  Logging_init();
 8005d14:	f7ff faf8 	bl	8005308 <Logging_init>
  Load_Settings();
 8005d18:	f7ff fd82 	bl	8005820 <Load_Settings>

  uint8_t CID = MAX77960_Read_Reg(MAX77960_CID);
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f7fd faaf 	bl	8003280 <MAX77960_Read_Reg>
 8005d22:	4603      	mov	r3, r0
 8005d24:	71fb      	strb	r3, [r7, #7]

  Play_Sound((char*)"INTRO.WAV");
 8005d26:	480f      	ldr	r0, [pc, #60]	; (8005d64 <main+0x104>)
 8005d28:	f000 fd7a 	bl	8006820 <Play_Sound>
  ELSPIRE_OS_KERNEL();
 8005d2c:	f7fd fa1a 	bl	8003164 <ELSPIRE_OS_KERNEL>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005d30:	e7fe      	b.n	8005d30 <main+0xd0>
 8005d32:	bf00      	nop
 8005d34:	20001f34 	.word	0x20001f34
 8005d38:	08003e01 	.word	0x08003e01
 8005d3c:	08001981 	.word	0x08001981
 8005d40:	08003079 	.word	0x08003079
 8005d44:	080027ad 	.word	0x080027ad
 8005d48:	08017be9 	.word	0x08017be9
 8005d4c:	08016e95 	.word	0x08016e95
 8005d50:	08007751 	.word	0x08007751
 8005d54:	08017a09 	.word	0x08017a09
 8005d58:	48000800 	.word	0x48000800
 8005d5c:	48000c00 	.word	0x48000c00
 8005d60:	20000080 	.word	0x20000080
 8005d64:	08021f80 	.word	0x08021f80

08005d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b096      	sub	sp, #88	; 0x58
 8005d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	2244      	movs	r2, #68	; 0x44
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f017 f91e 	bl	801cfb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	609a      	str	r2, [r3, #8]
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005d8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d8e:	f006 f819 	bl	800bdc4 <HAL_PWREx_ControlVoltageScaling>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005d98:	f000 fd3c 	bl	8006814 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005d9c:	f005 fff4 	bl	800bd88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8005da0:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <SystemClock_Config+0xbc>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <SystemClock_Config+0xbc>)
 8005da8:	f023 0318 	bic.w	r3, r3, #24
 8005dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005db0:	2305      	movs	r3, #5
 8005db2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005db8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8005dca:	2314      	movs	r3, #20
 8005dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dda:	f107 0314 	add.w	r3, r7, #20
 8005dde:	4618      	mov	r0, r3
 8005de0:	f006 f856 	bl	800be90 <HAL_RCC_OscConfig>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005dea:	f000 fd13 	bl	8006814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005dee:	230f      	movs	r3, #15
 8005df0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005df2:	2303      	movs	r3, #3
 8005df4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e02:	463b      	mov	r3, r7
 8005e04:	2104      	movs	r1, #4
 8005e06:	4618      	mov	r0, r3
 8005e08:	f006 fc68 	bl	800c6dc <HAL_RCC_ClockConfig>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005e12:	f000 fcff 	bl	8006814 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8005e16:	f007 f995 	bl	800d144 <HAL_RCCEx_EnableLSECSS>
}
 8005e1a:	bf00      	nop
 8005e1c:	3758      	adds	r7, #88	; 0x58
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40021000 	.word	0x40021000

08005e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005e2e:	f107 031c 	add.w	r3, r7, #28
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
 8005e48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e4c:	4a31      	ldr	r2, [pc, #196]	; (8005f14 <MX_ADC1_Init+0xec>)
 8005e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005e50:	4b2f      	ldr	r3, [pc, #188]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005e56:	4b2e      	ldr	r3, [pc, #184]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e5c:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e68:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005e6e:	4b28      	ldr	r3, [pc, #160]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005e74:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005e7a:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005e80:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e88:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005e94:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005eaa:	4819      	ldr	r0, [pc, #100]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005eac:	f002 f896 	bl	8007fdc <HAL_ADC_Init>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8005eb6:	f000 fcad 	bl	8006814 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005ebe:	f107 031c 	add.w	r3, r7, #28
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4812      	ldr	r0, [pc, #72]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005ec6:	f003 f897 	bl	8008ff8 <HAL_ADCEx_MultiModeConfigChannel>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005ed0:	f000 fca0 	bl	8006814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <MX_ADC1_Init+0xf0>)
 8005ed6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005ed8:	2306      	movs	r3, #6
 8005eda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005edc:	2304      	movs	r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005ee0:	237f      	movs	r3, #127	; 0x7f
 8005ee2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4807      	ldr	r0, [pc, #28]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005ef2:	f002 fb59 	bl	80085a8 <HAL_ADC_ConfigChannel>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005efc:	f000 fc8a 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start(&hadc1);
 8005f00:	4803      	ldr	r0, [pc, #12]	; (8005f10 <MX_ADC1_Init+0xe8>)
 8005f02:	f002 f9c5 	bl	8008290 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8005f06:	bf00      	nop
 8005f08:	3728      	adds	r7, #40	; 0x28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20007b1c 	.word	0x20007b1c
 8005f14:	50040000 	.word	0x50040000
 8005f18:	c7520000 	.word	0xc7520000

08005f1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f22:	463b      	mov	r3, r7
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	611a      	str	r2, [r3, #16]
 8005f30:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8005f32:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f34:	4a29      	ldr	r2, [pc, #164]	; (8005fdc <MX_ADC2_Init+0xc0>)
 8005f36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005f38:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f3e:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f50:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f52:	2204      	movs	r2, #4
 8005f54:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005f56:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005f5c:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f70:	4b19      	ldr	r3, [pc, #100]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f76:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005f84:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005f92:	4811      	ldr	r0, [pc, #68]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005f94:	f002 f822 	bl	8007fdc <HAL_ADC_Init>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8005f9e:	f000 fc39 	bl	8006814 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <MX_ADC2_Init+0xc4>)
 8005fa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005fa6:	2306      	movs	r3, #6
 8005fa8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8005faa:	2304      	movs	r3, #4
 8005fac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005fae:	237f      	movs	r3, #127	; 0x7f
 8005fb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fba:	463b      	mov	r3, r7
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4806      	ldr	r0, [pc, #24]	; (8005fd8 <MX_ADC2_Init+0xbc>)
 8005fc0:	f002 faf2 	bl	80085a8 <HAL_ADC_ConfigChannel>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8005fca:	f000 fc23 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005fce:	bf00      	nop
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20007ab4 	.word	0x20007ab4
 8005fdc:	50040100 	.word	0x50040100
 8005fe0:	21800100 	.word	0x21800100

08005fe4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	2224      	movs	r2, #36	; 0x24
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f016 ffe1 	bl	801cfb8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <MX_DAC1_Init+0x5c>)
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <MX_DAC1_Init+0x60>)
 8005ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005ffc:	4810      	ldr	r0, [pc, #64]	; (8006040 <MX_DAC1_Init+0x5c>)
 8005ffe:	f003 f98d 	bl	800931c <HAL_DAC_Init>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006008:	f000 fc04 	bl	8006814 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800600c:	2300      	movs	r3, #0
 800600e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8006010:	2304      	movs	r3, #4
 8006012:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	2210      	movs	r2, #16
 8006024:	4619      	mov	r1, r3
 8006026:	4806      	ldr	r0, [pc, #24]	; (8006040 <MX_DAC1_Init+0x5c>)
 8006028:	f003 fae8 	bl	80095fc <HAL_DAC_ConfigChannel>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8006032:	f000 fbef 	bl	8006814 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_Start_DMA (&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf, 512, DAC_ALIGN_12B_R);
  /* USER CODE END DAC1_Init 2 */

}
 8006036:	bf00      	nop
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20007b84 	.word	0x20007b84
 8006044:	40007400 	.word	0x40007400

08006048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800604c:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <MX_I2C1_Init+0x74>)
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <MX_I2C1_Init+0x78>)
 8006050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8006052:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <MX_I2C1_Init+0x74>)
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <MX_I2C1_Init+0x7c>)
 8006056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006058:	4b18      	ldr	r3, [pc, #96]	; (80060bc <MX_I2C1_Init+0x74>)
 800605a:	2200      	movs	r2, #0
 800605c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <MX_I2C1_Init+0x74>)
 8006060:	2201      	movs	r2, #1
 8006062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006064:	4b15      	ldr	r3, [pc, #84]	; (80060bc <MX_I2C1_Init+0x74>)
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <MX_I2C1_Init+0x74>)
 800606c:	2200      	movs	r2, #0
 800606e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <MX_I2C1_Init+0x74>)
 8006072:	2200      	movs	r2, #0
 8006074:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <MX_I2C1_Init+0x74>)
 8006078:	2200      	movs	r2, #0
 800607a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800607c:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <MX_I2C1_Init+0x74>)
 800607e:	2200      	movs	r2, #0
 8006080:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006082:	480e      	ldr	r0, [pc, #56]	; (80060bc <MX_I2C1_Init+0x74>)
 8006084:	f004 f8c3 	bl	800a20e <HAL_I2C_Init>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800608e:	f000 fbc1 	bl	8006814 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006092:	2100      	movs	r1, #0
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <MX_I2C1_Init+0x74>)
 8006096:	f004 fd13 	bl	800aac0 <HAL_I2CEx_ConfigAnalogFilter>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80060a0:	f000 fbb8 	bl	8006814 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80060a4:	2100      	movs	r1, #0
 80060a6:	4805      	ldr	r0, [pc, #20]	; (80060bc <MX_I2C1_Init+0x74>)
 80060a8:	f004 fd55 	bl	800ab56 <HAL_I2CEx_ConfigDigitalFilter>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80060b2:	f000 fbaf 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	2000790c 	.word	0x2000790c
 80060c0:	40005400 	.word	0x40005400
 80060c4:	10909cec 	.word	0x10909cec

080060c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <MX_I2C2_Init+0x74>)
 80060ce:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <MX_I2C2_Init+0x78>)
 80060d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <MX_I2C2_Init+0x74>)
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <MX_I2C2_Init+0x7c>)
 80060d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80060d8:	4b18      	ldr	r3, [pc, #96]	; (800613c <MX_I2C2_Init+0x74>)
 80060da:	2200      	movs	r2, #0
 80060dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060de:	4b17      	ldr	r3, [pc, #92]	; (800613c <MX_I2C2_Init+0x74>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <MX_I2C2_Init+0x74>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <MX_I2C2_Init+0x74>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80060f0:	4b12      	ldr	r3, [pc, #72]	; (800613c <MX_I2C2_Init+0x74>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <MX_I2C2_Init+0x74>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <MX_I2C2_Init+0x74>)
 80060fe:	2200      	movs	r2, #0
 8006100:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006102:	480e      	ldr	r0, [pc, #56]	; (800613c <MX_I2C2_Init+0x74>)
 8006104:	f004 f883 	bl	800a20e <HAL_I2C_Init>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800610e:	f000 fb81 	bl	8006814 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006112:	2100      	movs	r1, #0
 8006114:	4809      	ldr	r0, [pc, #36]	; (800613c <MX_I2C2_Init+0x74>)
 8006116:	f004 fcd3 	bl	800aac0 <HAL_I2CEx_ConfigAnalogFilter>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006120:	f000 fb78 	bl	8006814 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006124:	2100      	movs	r1, #0
 8006126:	4805      	ldr	r0, [pc, #20]	; (800613c <MX_I2C2_Init+0x74>)
 8006128:	f004 fd15 	bl	800ab56 <HAL_I2CEx_ConfigDigitalFilter>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006132:	f000 fb6f 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	200078c0 	.word	0x200078c0
 8006140:	40005800 	.word	0x40005800
 8006144:	10909cec 	.word	0x10909cec

08006148 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800614c:	4b12      	ldr	r3, [pc, #72]	; (8006198 <MX_RTC_Init+0x50>)
 800614e:	4a13      	ldr	r2, [pc, #76]	; (800619c <MX_RTC_Init+0x54>)
 8006150:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <MX_RTC_Init+0x50>)
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006158:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <MX_RTC_Init+0x50>)
 800615a:	227f      	movs	r2, #127	; 0x7f
 800615c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <MX_RTC_Init+0x50>)
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <MX_RTC_Init+0x50>)
 8006166:	2200      	movs	r2, #0
 8006168:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <MX_RTC_Init+0x50>)
 800616c:	2200      	movs	r2, #0
 800616e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <MX_RTC_Init+0x50>)
 8006172:	2200      	movs	r2, #0
 8006174:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006176:	4b08      	ldr	r3, [pc, #32]	; (8006198 <MX_RTC_Init+0x50>)
 8006178:	2200      	movs	r2, #0
 800617a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800617c:	4806      	ldr	r0, [pc, #24]	; (8006198 <MX_RTC_Init+0x50>)
 800617e:	f007 f9c1 	bl	800d504 <HAL_RTC_Init>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006188:	f000 fb44 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_RTCEx_EnableBypassShadow(&hrtc);
 800618c:	4802      	ldr	r0, [pc, #8]	; (8006198 <MX_RTC_Init+0x50>)
 800618e:	f007 fd47 	bl	800dc20 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_Init 2 */

}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20007838 	.word	0x20007838
 800619c:	40002800 	.word	0x40002800

080061a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <MX_SPI1_Init+0x74>)
 80061a6:	4a1c      	ldr	r2, [pc, #112]	; (8006218 <MX_SPI1_Init+0x78>)
 80061a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061aa:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <MX_SPI1_Init+0x74>)
 80061ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061b2:	4b18      	ldr	r3, [pc, #96]	; (8006214 <MX_SPI1_Init+0x74>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <MX_SPI1_Init+0x74>)
 80061ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80061be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c0:	4b14      	ldr	r3, [pc, #80]	; (8006214 <MX_SPI1_Init+0x74>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061c6:	4b13      	ldr	r3, [pc, #76]	; (8006214 <MX_SPI1_Init+0x74>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <MX_SPI1_Init+0x74>)
 80061ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <MX_SPI1_Init+0x74>)
 80061d6:	2228      	movs	r2, #40	; 0x28
 80061d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061da:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <MX_SPI1_Init+0x74>)
 80061dc:	2200      	movs	r2, #0
 80061de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061e0:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <MX_SPI1_Init+0x74>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <MX_SPI1_Init+0x74>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <MX_SPI1_Init+0x74>)
 80061ee:	2207      	movs	r2, #7
 80061f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <MX_SPI1_Init+0x74>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <MX_SPI1_Init+0x74>)
 80061fa:	2208      	movs	r2, #8
 80061fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80061fe:	4805      	ldr	r0, [pc, #20]	; (8006214 <MX_SPI1_Init+0x74>)
 8006200:	f007 fd44 	bl	800dc8c <HAL_SPI_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800620a:	f000 fb03 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2000785c 	.word	0x2000785c
 8006218:	40013000 	.word	0x40013000

0800621c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006220:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <MX_SPI2_Init+0x74>)
 8006222:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <MX_SPI2_Init+0x78>)
 8006224:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <MX_SPI2_Init+0x74>)
 8006228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800622c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800622e:	4b18      	ldr	r3, [pc, #96]	; (8006290 <MX_SPI2_Init+0x74>)
 8006230:	2200      	movs	r2, #0
 8006232:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <MX_SPI2_Init+0x74>)
 8006236:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800623a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800623c:	4b14      	ldr	r3, [pc, #80]	; (8006290 <MX_SPI2_Init+0x74>)
 800623e:	2200      	movs	r2, #0
 8006240:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <MX_SPI2_Init+0x74>)
 8006244:	2200      	movs	r2, #0
 8006246:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <MX_SPI2_Init+0x74>)
 800624a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <MX_SPI2_Init+0x74>)
 8006252:	2228      	movs	r2, #40	; 0x28
 8006254:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006256:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <MX_SPI2_Init+0x74>)
 8006258:	2200      	movs	r2, #0
 800625a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <MX_SPI2_Init+0x74>)
 800625e:	2200      	movs	r2, #0
 8006260:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <MX_SPI2_Init+0x74>)
 8006264:	2200      	movs	r2, #0
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <MX_SPI2_Init+0x74>)
 800626a:	2207      	movs	r2, #7
 800626c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800626e:	4b08      	ldr	r3, [pc, #32]	; (8006290 <MX_SPI2_Init+0x74>)
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <MX_SPI2_Init+0x74>)
 8006276:	2208      	movs	r2, #8
 8006278:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800627a:	4805      	ldr	r0, [pc, #20]	; (8006290 <MX_SPI2_Init+0x74>)
 800627c:	f007 fd06 	bl	800dc8c <HAL_SPI_Init>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006286:	f000 fac5 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20001f58 	.word	0x20001f58
 8006294:	40003800 	.word	0x40003800

08006298 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <MX_SPI3_Init+0x74>)
 800629e:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <MX_SPI3_Init+0x78>)
 80062a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80062a2:	4b1a      	ldr	r3, [pc, #104]	; (800630c <MX_SPI3_Init+0x74>)
 80062a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <MX_SPI3_Init+0x74>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80062b0:	4b16      	ldr	r3, [pc, #88]	; (800630c <MX_SPI3_Init+0x74>)
 80062b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80062b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062b8:	4b14      	ldr	r3, [pc, #80]	; (800630c <MX_SPI3_Init+0x74>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <MX_SPI3_Init+0x74>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80062c4:	4b11      	ldr	r3, [pc, #68]	; (800630c <MX_SPI3_Init+0x74>)
 80062c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <MX_SPI3_Init+0x74>)
 80062ce:	2220      	movs	r2, #32
 80062d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062d2:	4b0e      	ldr	r3, [pc, #56]	; (800630c <MX_SPI3_Init+0x74>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <MX_SPI3_Init+0x74>)
 80062da:	2200      	movs	r2, #0
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <MX_SPI3_Init+0x74>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <MX_SPI3_Init+0x74>)
 80062e6:	2207      	movs	r2, #7
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80062ea:	4b08      	ldr	r3, [pc, #32]	; (800630c <MX_SPI3_Init+0x74>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <MX_SPI3_Init+0x74>)
 80062f2:	2208      	movs	r2, #8
 80062f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80062f6:	4805      	ldr	r0, [pc, #20]	; (800630c <MX_SPI3_Init+0x74>)
 80062f8:	f007 fcc8 	bl	800dc8c <HAL_SPI_Init>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006302:	f000 fa87 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006306:	bf00      	nop
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	2000636c 	.word	0x2000636c
 8006310:	40003c00 	.word	0x40003c00

08006314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800631a:	f107 031c 	add.w	r3, r7, #28
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006326:	463b      	mov	r3, r7
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	611a      	str	r2, [r3, #16]
 8006334:	615a      	str	r2, [r3, #20]
 8006336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006338:	4b24      	ldr	r3, [pc, #144]	; (80063cc <MX_TIM2_Init+0xb8>)
 800633a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800633e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8006340:	4b22      	ldr	r3, [pc, #136]	; (80063cc <MX_TIM2_Init+0xb8>)
 8006342:	2202      	movs	r2, #2
 8006344:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006346:	4b21      	ldr	r3, [pc, #132]	; (80063cc <MX_TIM2_Init+0xb8>)
 8006348:	2200      	movs	r2, #0
 800634a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <MX_TIM2_Init+0xb8>)
 800634e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <MX_TIM2_Init+0xb8>)
 8006356:	2200      	movs	r2, #0
 8006358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <MX_TIM2_Init+0xb8>)
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006360:	481a      	ldr	r0, [pc, #104]	; (80063cc <MX_TIM2_Init+0xb8>)
 8006362:	f008 fccf 	bl	800ed04 <HAL_TIM_PWM_Init>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800636c:	f000 fa52 	bl	8006814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006374:	2300      	movs	r3, #0
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006378:	f107 031c 	add.w	r3, r7, #28
 800637c:	4619      	mov	r1, r3
 800637e:	4813      	ldr	r0, [pc, #76]	; (80063cc <MX_TIM2_Init+0xb8>)
 8006380:	f009 fc0c 	bl	800fb9c <HAL_TIMEx_MasterConfigSynchronization>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800638a:	f000 fa43 	bl	8006814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800638e:	2360      	movs	r3, #96	; 0x60
 8006390:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8006392:	2332      	movs	r3, #50	; 0x32
 8006394:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800639e:	463b      	mov	r3, r7
 80063a0:	2200      	movs	r2, #0
 80063a2:	4619      	mov	r1, r3
 80063a4:	4809      	ldr	r0, [pc, #36]	; (80063cc <MX_TIM2_Init+0xb8>)
 80063a6:	f008 ff2b 	bl	800f200 <HAL_TIM_PWM_ConfigChannel>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80063b0:	f000 fa30 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80063b4:	2100      	movs	r1, #0
 80063b6:	4805      	ldr	r0, [pc, #20]	; (80063cc <MX_TIM2_Init+0xb8>)
 80063b8:	f008 fcfc 	bl	800edb4 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80063bc:	4803      	ldr	r0, [pc, #12]	; (80063cc <MX_TIM2_Init+0xb8>)
 80063be:	f000 ff0f 	bl	80071e0 <HAL_TIM_MspPostInit>

}
 80063c2:	bf00      	nop
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20007c30 	.word	0x20007c30

080063d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063d6:	f107 031c 	add.w	r3, r7, #28
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063e2:	463b      	mov	r3, r7
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	611a      	str	r2, [r3, #16]
 80063f0:	615a      	str	r2, [r3, #20]
 80063f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80063f4:	4b21      	ldr	r3, [pc, #132]	; (800647c <MX_TIM4_Init+0xac>)
 80063f6:	4a22      	ldr	r2, [pc, #136]	; (8006480 <MX_TIM4_Init+0xb0>)
 80063f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80063fa:	4b20      	ldr	r3, [pc, #128]	; (800647c <MX_TIM4_Init+0xac>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006400:	4b1e      	ldr	r3, [pc, #120]	; (800647c <MX_TIM4_Init+0xac>)
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <MX_TIM4_Init+0xac>)
 8006408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800640c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800640e:	4b1b      	ldr	r3, [pc, #108]	; (800647c <MX_TIM4_Init+0xac>)
 8006410:	2200      	movs	r2, #0
 8006412:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <MX_TIM4_Init+0xac>)
 8006416:	2200      	movs	r2, #0
 8006418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800641a:	4818      	ldr	r0, [pc, #96]	; (800647c <MX_TIM4_Init+0xac>)
 800641c:	f008 fc72 	bl	800ed04 <HAL_TIM_PWM_Init>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8006426:	f000 f9f5 	bl	8006814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800642e:	2300      	movs	r3, #0
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006432:	f107 031c 	add.w	r3, r7, #28
 8006436:	4619      	mov	r1, r3
 8006438:	4810      	ldr	r0, [pc, #64]	; (800647c <MX_TIM4_Init+0xac>)
 800643a:	f009 fbaf 	bl	800fb9c <HAL_TIMEx_MasterConfigSynchronization>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8006444:	f000 f9e6 	bl	8006814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006448:	2360      	movs	r3, #96	; 0x60
 800644a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006450:	2300      	movs	r3, #0
 8006452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006458:	463b      	mov	r3, r7
 800645a:	2204      	movs	r2, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4807      	ldr	r0, [pc, #28]	; (800647c <MX_TIM4_Init+0xac>)
 8006460:	f008 fece 	bl	800f200 <HAL_TIM_PWM_ConfigChannel>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800646a:	f000 f9d3 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800646e:	4803      	ldr	r0, [pc, #12]	; (800647c <MX_TIM4_Init+0xac>)
 8006470:	f000 feb6 	bl	80071e0 <HAL_TIM_MspPostInit>

}
 8006474:	bf00      	nop
 8006476:	3728      	adds	r7, #40	; 0x28
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20007be4 	.word	0x20007be4
 8006480:	40000800 	.word	0x40000800

08006484 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006494:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <MX_TIM6_Init+0x64>)
 8006496:	4a15      	ldr	r2, [pc, #84]	; (80064ec <MX_TIM6_Init+0x68>)
 8006498:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 800649a:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <MX_TIM6_Init+0x64>)
 800649c:	2202      	movs	r2, #2
 800649e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <MX_TIM6_Init+0x64>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1666;
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <MX_TIM6_Init+0x64>)
 80064a8:	f240 6282 	movw	r2, #1666	; 0x682
 80064ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <MX_TIM6_Init+0x64>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80064b4:	480c      	ldr	r0, [pc, #48]	; (80064e8 <MX_TIM6_Init+0x64>)
 80064b6:	f008 faf5 	bl	800eaa4 <HAL_TIM_Base_Init>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80064c0:	f000 f9a8 	bl	8006814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80064c4:	2320      	movs	r3, #32
 80064c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4805      	ldr	r0, [pc, #20]	; (80064e8 <MX_TIM6_Init+0x64>)
 80064d2:	f009 fb63 	bl	800fb9c <HAL_TIMEx_MasterConfigSynchronization>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80064dc:	f000 f99a 	bl	8006814 <Error_Handler>
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//    HAL_TIM_Base_Start_IT(&htim6);
 //   HAL_TIM_Base_Start(&htim6);
  /* USER CODE END TIM6_Init 2 */

}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20007b98 	.word	0x20007b98
 80064ec:	40001000 	.word	0x40001000

080064f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <MX_USART1_UART_Init+0x68>)
 80064f6:	4a19      	ldr	r2, [pc, #100]	; (800655c <MX_USART1_UART_Init+0x6c>)
 80064f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <MX_USART1_UART_Init+0x68>)
 80064fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006504:	2200      	movs	r2, #0
 8006506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <MX_USART1_UART_Init+0x68>)
 800650a:	2200      	movs	r2, #0
 800650c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006510:	2200      	movs	r2, #0
 8006512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006516:	220c      	movs	r2, #12
 8006518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <MX_USART1_UART_Init+0x68>)
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006522:	2200      	movs	r2, #0
 8006524:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006528:	2200      	movs	r2, #0
 800652a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <MX_USART1_UART_Init+0x68>)
 800652e:	2200      	movs	r2, #0
 8006530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006532:	4809      	ldr	r0, [pc, #36]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006534:	f009 fbd8 	bl	800fce8 <HAL_UART_Init>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800653e:	f000 f969 	bl	8006814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8006542:	4b05      	ldr	r3, [pc, #20]	; (8006558 <MX_USART1_UART_Init+0x68>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <MX_USART1_UART_Init+0x68>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0220 	orr.w	r2, r2, #32
 8006550:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_Init 2 */

}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20007a30 	.word	0x20007a30
 800655c:	40013800 	.word	0x40013800

08006560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <MX_DMA_Init+0x58>)
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <MX_DMA_Init+0x58>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6493      	str	r3, [r2, #72]	; 0x48
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <MX_DMA_Init+0x58>)
 8006574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800657e:	2200      	movs	r2, #0
 8006580:	2100      	movs	r1, #0
 8006582:	200b      	movs	r0, #11
 8006584:	f002 fea0 	bl	80092c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006588:	200b      	movs	r0, #11
 800658a:	f002 feb9 	bl	8009300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	200c      	movs	r0, #12
 8006594:	f002 fe98 	bl	80092c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006598:	200c      	movs	r0, #12
 800659a:	f002 feb1 	bl	8009300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800659e:	2200      	movs	r2, #0
 80065a0:	2100      	movs	r1, #0
 80065a2:	200e      	movs	r0, #14
 80065a4:	f002 fe90 	bl	80092c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80065a8:	200e      	movs	r0, #14
 80065aa:	f002 fea9 	bl	8009300 <HAL_NVIC_EnableIRQ>

}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000

080065bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08c      	sub	sp, #48	; 0x30
 80065c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c2:	f107 031c 	add.w	r3, r7, #28
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	609a      	str	r2, [r3, #8]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065d2:	4b71      	ldr	r3, [pc, #452]	; (8006798 <MX_GPIO_Init+0x1dc>)
 80065d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d6:	4a70      	ldr	r2, [pc, #448]	; (8006798 <MX_GPIO_Init+0x1dc>)
 80065d8:	f043 0310 	orr.w	r3, r3, #16
 80065dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065de:	4b6e      	ldr	r3, [pc, #440]	; (8006798 <MX_GPIO_Init+0x1dc>)
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ea:	4b6b      	ldr	r3, [pc, #428]	; (8006798 <MX_GPIO_Init+0x1dc>)
 80065ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ee:	4a6a      	ldr	r2, [pc, #424]	; (8006798 <MX_GPIO_Init+0x1dc>)
 80065f0:	f043 0304 	orr.w	r3, r3, #4
 80065f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065f6:	4b68      	ldr	r3, [pc, #416]	; (8006798 <MX_GPIO_Init+0x1dc>)
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006602:	4b65      	ldr	r3, [pc, #404]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006606:	4a64      	ldr	r2, [pc, #400]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800660e:	4b62      	ldr	r3, [pc, #392]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800661a:	4b5f      	ldr	r3, [pc, #380]	; (8006798 <MX_GPIO_Init+0x1dc>)
 800661c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661e:	4a5e      	ldr	r2, [pc, #376]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006626:	4b5c      	ldr	r3, [pc, #368]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006632:	4b59      	ldr	r3, [pc, #356]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	4a58      	ldr	r2, [pc, #352]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800663e:	4b56      	ldr	r3, [pc, #344]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800664a:	4b53      	ldr	r3, [pc, #332]	; (8006798 <MX_GPIO_Init+0x1dc>)
 800664c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664e:	4a52      	ldr	r2, [pc, #328]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006650:	f043 0308 	orr.w	r3, r3, #8
 8006654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006656:	4b50      	ldr	r3, [pc, #320]	; (8006798 <MX_GPIO_Init+0x1dc>)
 8006658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8006662:	2200      	movs	r2, #0
 8006664:	2115      	movs	r1, #21
 8006666:	484d      	ldr	r0, [pc, #308]	; (800679c <MX_GPIO_Init+0x1e0>)
 8006668:	f003 fd96 	bl	800a198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin, GPIO_PIN_RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8006672:	484b      	ldr	r0, [pc, #300]	; (80067a0 <MX_GPIO_Init+0x1e4>)
 8006674:	f003 fd90 	bl	800a198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 8006678:	2200      	movs	r2, #0
 800667a:	f241 3126 	movw	r1, #4902	; 0x1326
 800667e:	4849      	ldr	r0, [pc, #292]	; (80067a4 <MX_GPIO_Init+0x1e8>)
 8006680:	f003 fd8a 	bl	800a198 <HAL_GPIO_WritePin>
                          |I2C_ADDR_Pin|LCD_CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 8006684:	2200      	movs	r2, #0
 8006686:	f24c 014c 	movw	r1, #49228	; 0xc04c
 800668a:	4847      	ldr	r0, [pc, #284]	; (80067a8 <MX_GPIO_Init+0x1ec>)
 800668c:	f003 fd84 	bl	800a198 <HAL_GPIO_WritePin>
                          |LCD_BL_EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_ARK_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_ARK_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8006690:	2315      	movs	r3, #21
 8006692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006694:	2301      	movs	r3, #1
 8006696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669c:	2300      	movs	r3, #0
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	4619      	mov	r1, r3
 80066a6:	483d      	ldr	r0, [pc, #244]	; (800679c <MX_GPIO_Init+0x1e0>)
 80066a8:	f003 fbcc 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reserved_Pin */
  GPIO_InitStruct.Pin = Reserved_Pin;
 80066ac:	2308      	movs	r3, #8
 80066ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b0:	2300      	movs	r3, #0
 80066b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reserved_GPIO_Port, &GPIO_InitStruct);
 80066b8:	f107 031c 	add.w	r3, r7, #28
 80066bc:	4619      	mov	r1, r3
 80066be:	4837      	ldr	r0, [pc, #220]	; (800679c <MX_GPIO_Init+0x1e0>)
 80066c0:	f003 fbc0 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066c8:	2300      	movs	r3, #0
 80066ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80066cc:	2302      	movs	r3, #2
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066d0:	f107 031c 	add.w	r3, r7, #28
 80066d4:	4619      	mov	r1, r3
 80066d6:	4831      	ldr	r0, [pc, #196]	; (800679c <MX_GPIO_Init+0x1e0>)
 80066d8:	f003 fbb4 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDYB_Pin */
  GPIO_InitStruct.Pin = ADC_RDYB_Pin;
 80066dc:	2310      	movs	r3, #16
 80066de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066e0:	4b32      	ldr	r3, [pc, #200]	; (80067ac <MX_GPIO_Init+0x1f0>)
 80066e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC_RDYB_GPIO_Port, &GPIO_InitStruct);
 80066e8:	f107 031c 	add.w	r3, r7, #28
 80066ec:	4619      	mov	r1, r3
 80066ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066f2:	f003 fba7 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CS_Pin EN_AV6_Pin EN_V24_Pin EN_LCD_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|EN_AV6_Pin|EN_V24_Pin|EN_LCD_Pin;
 80066f6:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80066fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066fc:	2301      	movs	r3, #1
 80066fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006704:	2300      	movs	r3, #0
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006708:	f107 031c 	add.w	r3, r7, #28
 800670c:	4619      	mov	r1, r3
 800670e:	4824      	ldr	r0, [pc, #144]	; (80067a0 <MX_GPIO_Init+0x1e4>)
 8006710:	f003 fb98 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_P_Pin */
  GPIO_InitStruct.Pin = SW_P_Pin;
 8006714:	2320      	movs	r3, #32
 8006716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006718:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <MX_GPIO_Init+0x1f4>)
 800671a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671c:	2300      	movs	r3, #0
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_P_GPIO_Port, &GPIO_InitStruct);
 8006720:	f107 031c 	add.w	r3, r7, #28
 8006724:	4619      	mov	r1, r3
 8006726:	481e      	ldr	r0, [pc, #120]	; (80067a0 <MX_GPIO_Init+0x1e4>)
 8006728:	f003 fb8c 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : I_P_ERROR_Pin */
  GPIO_InitStruct.Pin = I_P_ERROR_Pin;
 800672c:	2301      	movs	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006730:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <MX_GPIO_Init+0x1f4>)
 8006732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	2300      	movs	r3, #0
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I_P_ERROR_GPIO_Port, &GPIO_InitStruct);
 8006738:	f107 031c 	add.w	r3, r7, #28
 800673c:	4619      	mov	r1, r3
 800673e:	4819      	ldr	r0, [pc, #100]	; (80067a4 <MX_GPIO_Init+0x1e8>)
 8006740:	f003 fb80 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_EN_Pin INT_CHARGER_Pin LCD_SPI_CS_Pin PB5
                           I2C_ADDR_Pin LCD_CD_Pin */
  GPIO_InitStruct.Pin = Audio_EN_Pin|INT_CHARGER_Pin|LCD_SPI_CS_Pin|GPIO_PIN_5
 8006744:	f241 3326 	movw	r3, #4902	; 0x1326
 8006748:	61fb      	str	r3, [r7, #28]
                          |I2C_ADDR_Pin|LCD_CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800674a:	2301      	movs	r3, #1
 800674c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674e:	2300      	movs	r3, #0
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006752:	2300      	movs	r3, #0
 8006754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006756:	f107 031c 	add.w	r3, r7, #28
 800675a:	4619      	mov	r1, r3
 800675c:	4811      	ldr	r0, [pc, #68]	; (80067a4 <MX_GPIO_Init+0x1e8>)
 800675e:	f003 fb71 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_LCD_reserv_Pin EN_AV6_reserv_Pin MEM1_CS_Pin MEM2_CS_Pin
                           LCD_BL_EN2_Pin */
  GPIO_InitStruct.Pin = EN_LCD_reserv_Pin|EN_AV6_reserv_Pin|MEM1_CS_Pin|MEM2_CS_Pin
 8006762:	f24c 034c 	movw	r3, #49228	; 0xc04c
 8006766:	61fb      	str	r3, [r7, #28]
                          |LCD_BL_EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006768:	2301      	movs	r3, #1
 800676a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676c:	2300      	movs	r3, #0
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006770:	2300      	movs	r3, #0
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006774:	f107 031c 	add.w	r3, r7, #28
 8006778:	4619      	mov	r1, r3
 800677a:	480b      	ldr	r0, [pc, #44]	; (80067a8 <MX_GPIO_Init+0x1ec>)
 800677c:	f003 fb62 	bl	8009e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006780:	2200      	movs	r2, #0
 8006782:	2100      	movs	r1, #0
 8006784:	200a      	movs	r0, #10
 8006786:	f002 fd9f 	bl	80092c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800678a:	200a      	movs	r0, #10
 800678c:	f002 fdb8 	bl	8009300 <HAL_NVIC_EnableIRQ>

}
 8006790:	bf00      	nop
 8006792:	3730      	adds	r7, #48	; 0x30
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40021000 	.word	0x40021000
 800679c:	48001000 	.word	0x48001000
 80067a0:	48000800 	.word	0x48000800
 80067a4:	48000400 	.word	0x48000400
 80067a8:	48000c00 	.word	0x48000c00
 80067ac:	10210000 	.word	0x10210000
 80067b0:	10110000 	.word	0x10110000

080067b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	ELSPIRE_OS_TIMER();
 80067bc:	f7fc fcfa 	bl	80031b4 <ELSPIRE_OS_TIMER>

	Buttons_timer();
 80067c0:	f7fc f9ce 	bl	8002b60 <Buttons_timer>
	Blink_Edit_Parameter_timer();
 80067c4:	f7fc fb60 	bl	8002e88 <Blink_Edit_Parameter_timer>
	menu_timer();
 80067c8:	f012 f93e 	bl	8018a48 <menu_timer>
	Viewer_timer();
 80067cc:	f011 f900 	bl	80179d0 <Viewer_timer>
	Light_OFF_process();
 80067d0:	f010 fd4a 	bl	8017268 <Light_OFF_process>
	if(rx_cmplt>0)rx_cmplt--;
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80067d6:	f993 3000 	ldrsb.w	r3, [r3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dd08      	ble.n	80067f0 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80067de:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80067e0:	f993 3000 	ldrsb.w	r3, [r3]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	b25a      	sxtb	r2, r3
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80067ee:	701a      	strb	r2, [r3, #0]
	spi_timeout();
 80067f0:	f001 f828 	bl	8007844 <spi_timeout>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a05      	ldr	r2, [pc, #20]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 80067fe:	f001 f9c1 	bl	8007b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	2000088e 	.word	0x2000088e
 8006810:	40012c00 	.word	0x40012c00

08006814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006818:	b672      	cpsid	i
}
 800681a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800681c:	e7fe      	b.n	800681c <Error_Handler+0x8>
	...

08006820 <Play_Sound>:
uint8_t ReadComplete=0;			// Выставляется в 1, когда прочитана очередная порция данных
uint16_t sizecntr=0; 			// Счетчик байт
uint32_t wavcounter=0;

void Play_Sound(char*name)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af02      	add	r7, sp, #8
 8006826:	6078      	str	r0, [r7, #4]
	//uint8_t path[11] = "AUDIO_5.WAV";
	uint16_t i;

	// Открываем файл

	f_mount(&W25FatFs,(TCHAR const*)USERPath,0);
 8006828:	2200      	movs	r2, #0
 800682a:	4934      	ldr	r1, [pc, #208]	; (80068fc <Play_Sound+0xdc>)
 800682c:	4834      	ldr	r0, [pc, #208]	; (8006900 <Play_Sound+0xe0>)
 800682e:	f00d f9e5 	bl	8013bfc <f_mount>
	f_open(&MyFile, (char*)name, FA_READ|FA_OPEN_ALWAYS);
 8006832:	2211      	movs	r2, #17
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4833      	ldr	r0, [pc, #204]	; (8006904 <Play_Sound+0xe4>)
 8006838:	f00d fa26 	bl	8013c88 <f_open>
	f_read(&MyFile, sound_buf, WAV_BUF_SIZE, &testBytes);
 800683c:	4b32      	ldr	r3, [pc, #200]	; (8006908 <Play_Sound+0xe8>)
 800683e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006842:	4932      	ldr	r1, [pc, #200]	; (800690c <Play_Sound+0xec>)
 8006844:	482f      	ldr	r0, [pc, #188]	; (8006904 <Play_Sound+0xe4>)
 8006846:	f00d fbdd 	bl	8014004 <f_read>

	// Находим начало данных
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 800684a:	2300      	movs	r3, #0
 800684c:	81fb      	strh	r3, [r7, #14]
 800684e:	e01f      	b.n	8006890 <Play_Sound+0x70>
	{
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	4a2e      	ldr	r2, [pc, #184]	; (800690c <Play_Sound+0xec>)
 8006854:	5cd3      	ldrb	r3, [r2, r3]
 8006856:	2b64      	cmp	r3, #100	; 0x64
 8006858:	d117      	bne.n	800688a <Play_Sound+0x6a>
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	3301      	adds	r3, #1
 800685e:	4a2b      	ldr	r2, [pc, #172]	; (800690c <Play_Sound+0xec>)
 8006860:	5cd3      	ldrb	r3, [r2, r3]
 8006862:	2b61      	cmp	r3, #97	; 0x61
 8006864:	d111      	bne.n	800688a <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	3302      	adds	r3, #2
 800686a:	4a28      	ldr	r2, [pc, #160]	; (800690c <Play_Sound+0xec>)
 800686c:	5cd3      	ldrb	r3, [r2, r3]
	    if ((sound_buf[0][i] == 'd') && (sound_buf[0][i + 1] == 'a') &&
 800686e:	2b74      	cmp	r3, #116	; 0x74
 8006870:	d10b      	bne.n	800688a <Play_Sound+0x6a>
	        (sound_buf[0][i + 2] == 't') && (sound_buf[0][i + 3] == 'a'))
 8006872:	89fb      	ldrh	r3, [r7, #14]
 8006874:	3303      	adds	r3, #3
 8006876:	4a25      	ldr	r2, [pc, #148]	; (800690c <Play_Sound+0xec>)
 8006878:	5cd3      	ldrb	r3, [r2, r3]
 800687a:	2b61      	cmp	r3, #97	; 0x61
 800687c:	d105      	bne.n	800688a <Play_Sound+0x6a>
	    {
	        dataOffset = i + 8;
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	3308      	adds	r3, #8
 8006882:	b29a      	uxth	r2, r3
 8006884:	4b22      	ldr	r3, [pc, #136]	; (8006910 <Play_Sound+0xf0>)
 8006886:	801a      	strh	r2, [r3, #0]
	        break;
 8006888:	e006      	b.n	8006898 <Play_Sound+0x78>
	for (i = 0; i < (WAV_BUF_SIZE - 3); i++)
 800688a:	89fb      	ldrh	r3, [r7, #14]
 800688c:	3301      	adds	r3, #1
 800688e:	81fb      	strh	r3, [r7, #14]
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8006896:	d9db      	bls.n	8006850 <Play_Sound+0x30>
	    }
	}

	//  перемещаем указатель FatFs
	f_lseek(&MyFile, dataOffset);
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <Play_Sound+0xf0>)
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	4619      	mov	r1, r3
 800689e:	4819      	ldr	r0, [pc, #100]	; (8006904 <Play_Sound+0xe4>)
 80068a0:	f00d ff0c 	bl	80146bc <f_lseek>
	// определяем количество байт данных
	wavDataSize = f_size(&MyFile) - dataOffset;
 80068a4:	4b17      	ldr	r3, [pc, #92]	; (8006904 <Play_Sound+0xe4>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	4a19      	ldr	r2, [pc, #100]	; (8006910 <Play_Sound+0xf0>)
 80068aa:	8812      	ldrh	r2, [r2, #0]
 80068ac:	1a9b      	subs	r3, r3, r2
 80068ae:	4a19      	ldr	r2, [pc, #100]	; (8006914 <Play_Sound+0xf4>)
 80068b0:	6013      	str	r3, [r2, #0]

	// Заполняем оба буфера данными
	f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <Play_Sound+0xe8>)
 80068b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b8:	4914      	ldr	r1, [pc, #80]	; (800690c <Play_Sound+0xec>)
 80068ba:	4812      	ldr	r0, [pc, #72]	; (8006904 <Play_Sound+0xe4>)
 80068bc:	f00d fba2 	bl	8014004 <f_read>

	ReadComplete=1;
 80068c0:	4b15      	ldr	r3, [pc, #84]	; (8006918 <Play_Sound+0xf8>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]

	TURN_ON_SOUND();
 80068c6:	2201      	movs	r2, #1
 80068c8:	2102      	movs	r1, #2
 80068ca:	4814      	ldr	r0, [pc, #80]	; (800691c <Play_Sound+0xfc>)
 80068cc:	f003 fc64 	bl	800a198 <HAL_GPIO_WritePin>
	//HAL_TIM_Base_Start_IT(&htim6);
	HAL_TIM_Base_Start(&htim6);
 80068d0:	4813      	ldr	r0, [pc, #76]	; (8006920 <Play_Sound+0x100>)
 80068d2:	f008 f93f 	bl	800eb54 <HAL_TIM_Base_Start>
	DMA1_Channel4->CCR |= (DMA_CCR_TCIE_Msk);
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <Play_Sound+0x104>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a12      	ldr	r2, [pc, #72]	; (8006924 <Play_Sound+0x104>)
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	6013      	str	r3, [r2, #0]
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)sound_buf[0], WAV_BUF_SIZE, DAC_ALIGN_8B_R);
 80068e2:	2308      	movs	r3, #8
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ea:	4a08      	ldr	r2, [pc, #32]	; (800690c <Play_Sound+0xec>)
 80068ec:	2110      	movs	r1, #16
 80068ee:	480e      	ldr	r0, [pc, #56]	; (8006928 <Play_Sound+0x108>)
 80068f0:	f002 fd36 	bl	8009360 <HAL_DAC_Start_DMA>
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20008730 	.word	0x20008730
 8006900:	20007600 	.word	0x20007600
 8006904:	200073d0 	.word	0x200073d0
 8006908:	20007830 	.word	0x20007830
 800690c:	20007c7c 	.word	0x20007c7c
 8006910:	200008c8 	.word	0x200008c8
 8006914:	200008cc 	.word	0x200008cc
 8006918:	200008d0 	.word	0x200008d0
 800691c:	48000400 	.word	0x48000400
 8006920:	20007b98 	.word	0x20007b98
 8006924:	40020044 	.word	0x40020044
 8006928:	20007b84 	.word	0x20007b84

0800692c <StartReadNextSoundBuf>:


void StartReadNextSoundBuf(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
	if((DMA1->ISR&DMA_ISR_TCIF4_Msk)!=0)
 8006930:	4b18      	ldr	r3, [pc, #96]	; (8006994 <StartReadNextSoundBuf+0x68>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d028      	beq.n	800698e <StartReadNextSoundBuf+0x62>
	{

		ReadComplete=0;
 800693c:	4b16      	ldr	r3, [pc, #88]	; (8006998 <StartReadNextSoundBuf+0x6c>)
 800693e:	2200      	movs	r2, #0
 8006940:	701a      	strb	r2, [r3, #0]
		if(buf_num==1)buf_num=0;
 8006942:	4b16      	ldr	r3, [pc, #88]	; (800699c <StartReadNextSoundBuf+0x70>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d103      	bne.n	8006952 <StartReadNextSoundBuf+0x26>
 800694a:	4b14      	ldr	r3, [pc, #80]	; (800699c <StartReadNextSoundBuf+0x70>)
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e002      	b.n	8006958 <StartReadNextSoundBuf+0x2c>
		else buf_num=1;
 8006952:	4b12      	ldr	r3, [pc, #72]	; (800699c <StartReadNextSoundBuf+0x70>)
 8006954:	2201      	movs	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]

		DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <StartReadNextSoundBuf+0x74>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a10      	ldr	r2, [pc, #64]	; (80069a0 <StartReadNextSoundBuf+0x74>)
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	6013      	str	r3, [r2, #0]
		DMA1_Channel4->CMAR=(uint32_t)sound_buf[buf_num];
 8006964:	4b0d      	ldr	r3, [pc, #52]	; (800699c <StartReadNextSoundBuf+0x70>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	025b      	lsls	r3, r3, #9
 800696a:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <StartReadNextSoundBuf+0x78>)
 800696c:	441a      	add	r2, r3
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <StartReadNextSoundBuf+0x74>)
 8006970:	60da      	str	r2, [r3, #12]
		//DMA1_Channel4->CNDTR=(uint32_t)WAV_BUF_SIZE;
		DMA1_Channel4->CCR |= (1 << DMA_CCR_EN_Pos);
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <StartReadNextSoundBuf+0x74>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <StartReadNextSoundBuf+0x74>)
 8006978:	f043 0301 	orr.w	r3, r3, #1
 800697c:	6013      	str	r3, [r2, #0]

		wavcounter+=WAV_BUF_SIZE;
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <StartReadNextSoundBuf+0x7c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006986:	4a08      	ldr	r2, [pc, #32]	; (80069a8 <StartReadNextSoundBuf+0x7c>)
 8006988:	6013      	str	r3, [r2, #0]
		Sound_process();
 800698a:	f000 f80f 	bl	80069ac <Sound_process>
	}
}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40020000 	.word	0x40020000
 8006998:	200008d0 	.word	0x200008d0
 800699c:	200008ca 	.word	0x200008ca
 80069a0:	40020044 	.word	0x40020044
 80069a4:	20007c7c 	.word	0x20007c7c
 80069a8:	200008d4 	.word	0x200008d4

080069ac <Sound_process>:


void Sound_process(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	80fb      	strh	r3, [r7, #6]
	uint8_t sign=0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	717b      	strb	r3, [r7, #5]
	if(ReadComplete==0)
 80069ba:	4b2c      	ldr	r3, [pc, #176]	; (8006a6c <Sound_process+0xc0>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d14f      	bne.n	8006a62 <Sound_process+0xb6>
	{
		if(wavDataSize>wavcounter)
 80069c2:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <Sound_process+0xc4>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b2b      	ldr	r3, [pc, #172]	; (8006a74 <Sound_process+0xc8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d938      	bls.n	8006a40 <Sound_process+0x94>
		{
			if(buf_num==0)
 80069ce:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <Sound_process+0xcc>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d117      	bne.n	8006a06 <Sound_process+0x5a>
			{
				f_read(&MyFile, sound_buf[0], WAV_BUF_SIZE, &testBytes);
 80069d6:	4b29      	ldr	r3, [pc, #164]	; (8006a7c <Sound_process+0xd0>)
 80069d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069dc:	4928      	ldr	r1, [pc, #160]	; (8006a80 <Sound_process+0xd4>)
 80069de:	4829      	ldr	r0, [pc, #164]	; (8006a84 <Sound_process+0xd8>)
 80069e0:	f00d fb10 	bl	8014004 <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	80fb      	strh	r3, [r7, #6]
 80069e8:	e008      	b.n	80069fc <Sound_process+0x50>
				{
					//sign=sound_buf[0][i]&0x80;
					//sound_buf[0][i]=(sound_buf[0][i]&0x7F);
					//sound_buf[0][i]|=sign;
					sound_buf[0][i]=(sound_buf[0][i])&0xFF;
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	4924      	ldr	r1, [pc, #144]	; (8006a80 <Sound_process+0xd4>)
 80069f0:	5c89      	ldrb	r1, [r1, r2]
 80069f2:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <Sound_process+0xd4>)
 80069f4:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<WAV_BUF_SIZE;i++)
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	3301      	adds	r3, #1
 80069fa:	80fb      	strh	r3, [r7, #6]
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a02:	d3f2      	bcc.n	80069ea <Sound_process+0x3e>
 8006a04:	e02a      	b.n	8006a5c <Sound_process+0xb0>
				}
			}
			else
			{
				f_read(&MyFile, sound_buf[1], WAV_BUF_SIZE, &testBytes);
 8006a06:	4b1d      	ldr	r3, [pc, #116]	; (8006a7c <Sound_process+0xd0>)
 8006a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0c:	491e      	ldr	r1, [pc, #120]	; (8006a88 <Sound_process+0xdc>)
 8006a0e:	481d      	ldr	r0, [pc, #116]	; (8006a84 <Sound_process+0xd8>)
 8006a10:	f00d faf8 	bl	8014004 <f_read>
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	80fb      	strh	r3, [r7, #6]
 8006a18:	e00d      	b.n	8006a36 <Sound_process+0x8a>
				{
					//sign=sound_buf[1][i]&0x80;
					//sound_buf[1][i]=(sound_buf[1][i]&0x7F);
					//sound_buf[1][i]|=sign;
					sound_buf[1][i]=(sound_buf[1][i])&0xFF;
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	4918      	ldr	r1, [pc, #96]	; (8006a80 <Sound_process+0xd4>)
 8006a20:	440a      	add	r2, r1
 8006a22:	f892 1200 	ldrb.w	r1, [r2, #512]	; 0x200
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <Sound_process+0xd4>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	460a      	mov	r2, r1
 8006a2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				for(i=0;i<WAV_BUF_SIZE;i++)
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	3301      	adds	r3, #1
 8006a34:	80fb      	strh	r3, [r7, #6]
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3c:	d3ed      	bcc.n	8006a1a <Sound_process+0x6e>
 8006a3e:	e00d      	b.n	8006a5c <Sound_process+0xb0>
				}
			}
		}
		else
		{
			TURN_OFF_SOUND();
 8006a40:	2200      	movs	r2, #0
 8006a42:	2102      	movs	r1, #2
 8006a44:	4811      	ldr	r0, [pc, #68]	; (8006a8c <Sound_process+0xe0>)
 8006a46:	f003 fba7 	bl	800a198 <HAL_GPIO_WritePin>
			DMA1_Channel4->CCR &= ~(1 << DMA_CCR_EN_Pos);
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <Sound_process+0xe4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a10      	ldr	r2, [pc, #64]	; (8006a90 <Sound_process+0xe4>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	6013      	str	r3, [r2, #0]
			f_close(&MyFile);
 8006a56:	480b      	ldr	r0, [pc, #44]	; (8006a84 <Sound_process+0xd8>)
 8006a58:	f00d fe06 	bl	8014668 <f_close>
		}
		ReadComplete=1;
 8006a5c:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <Sound_process+0xc0>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
	}
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200008d0 	.word	0x200008d0
 8006a70:	200008cc 	.word	0x200008cc
 8006a74:	200008d4 	.word	0x200008d4
 8006a78:	200008ca 	.word	0x200008ca
 8006a7c:	20007830 	.word	0x20007830
 8006a80:	20007c7c 	.word	0x20007c7c
 8006a84:	200073d0 	.word	0x200073d0
 8006a88:	20007e7c 	.word	0x20007e7c
 8006a8c:	48000400 	.word	0x48000400
 8006a90:	40020044 	.word	0x40020044

08006a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <HAL_MspInit+0x44>)
 8006a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <HAL_MspInit+0x44>)
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <HAL_MspInit+0x44>)
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <HAL_MspInit+0x44>)
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab6:	4a08      	ldr	r2, [pc, #32]	; (8006ad8 <HAL_MspInit+0x44>)
 8006ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abc:	6593      	str	r3, [r2, #88]	; 0x58
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <HAL_MspInit+0x44>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40021000 	.word	0x40021000

08006adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b0ae      	sub	sp, #184	; 0xb8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006af4:	f107 0318 	add.w	r3, r7, #24
 8006af8:	228c      	movs	r2, #140	; 0x8c
 8006afa:	2100      	movs	r1, #0
 8006afc:	4618      	mov	r0, r3
 8006afe:	f016 fa5b 	bl	801cfb8 <memset>
  if(hadc->Instance==ADC1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a66      	ldr	r2, [pc, #408]	; (8006ca0 <HAL_ADC_MspInit+0x1c4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d152      	bne.n	8006bb2 <HAL_ADC_MspInit+0xd6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006b12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f006 f814 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8006b2a:	f7ff fe73 	bl	8006814 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8006b2e:	4b5d      	ldr	r3, [pc, #372]	; (8006ca4 <HAL_ADC_MspInit+0x1c8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a5b      	ldr	r2, [pc, #364]	; (8006ca4 <HAL_ADC_MspInit+0x1c8>)
 8006b36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006b38:	4b5a      	ldr	r3, [pc, #360]	; (8006ca4 <HAL_ADC_MspInit+0x1c8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10b      	bne.n	8006b58 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006b40:	4b59      	ldr	r3, [pc, #356]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	4a58      	ldr	r2, [pc, #352]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b4c:	4b56      	ldr	r3, [pc, #344]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006b58:	4b54      	ldr	r3, [pc, #336]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b5a:	4a55      	ldr	r2, [pc, #340]	; (8006cb0 <HAL_ADC_MspInit+0x1d4>)
 8006b5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006b5e:	4b53      	ldr	r3, [pc, #332]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b64:	4b51      	ldr	r3, [pc, #324]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b6a:	4b50      	ldr	r3, [pc, #320]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006b70:	4b4e      	ldr	r3, [pc, #312]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b76:	4b4d      	ldr	r3, [pc, #308]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006b7e:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006b86:	4b49      	ldr	r3, [pc, #292]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b88:	2220      	movs	r2, #32
 8006b8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b8c:	4b47      	ldr	r3, [pc, #284]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006b94:	4845      	ldr	r0, [pc, #276]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006b96:	f002 fedf 	bl	8009958 <HAL_DMA_Init>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8006ba0:	f7ff fe38 	bl	8006814 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a41      	ldr	r2, [pc, #260]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8006baa:	4a40      	ldr	r2, [pc, #256]	; (8006cac <HAL_ADC_MspInit+0x1d0>)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bb0:	e072      	b.n	8006c98 <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC2)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3f      	ldr	r2, [pc, #252]	; (8006cb4 <HAL_ADC_MspInit+0x1d8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d16d      	bne.n	8006c98 <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006bbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006bc2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006bca:	f107 0318 	add.w	r3, r7, #24
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f005 ffbc 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_ADC_MspInit+0x102>
      Error_Handler();
 8006bda:	f7ff fe1b 	bl	8006814 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <HAL_ADC_MspInit+0x1c8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <HAL_ADC_MspInit+0x1c8>)
 8006be6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8006be8:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <HAL_ADC_MspInit+0x1c8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10b      	bne.n	8006c08 <HAL_ADC_MspInit+0x12c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8006bf0:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf4:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c08:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <HAL_ADC_MspInit+0x1cc>)
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006c20:	2308      	movs	r3, #8
 8006c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006c26:	230b      	movs	r3, #11
 8006c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006c36:	4619      	mov	r1, r3
 8006c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c3c:	f003 f902 	bl	8009e44 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c42:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <HAL_ADC_MspInit+0x1e0>)
 8006c44:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c52:	4b19      	ldr	r3, [pc, #100]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006c58:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006c5e:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c64:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c6c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c70:	2220      	movs	r2, #32
 8006c72:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006c74:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006c7c:	480e      	ldr	r0, [pc, #56]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c7e:	f002 fe6b 	bl	8009958 <HAL_DMA_Init>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8006c88:	f7ff fdc4 	bl	8006814 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a0a      	ldr	r2, [pc, #40]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c90:	651a      	str	r2, [r3, #80]	; 0x50
 8006c92:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <HAL_ADC_MspInit+0x1dc>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006c98:	bf00      	nop
 8006c9a:	37b8      	adds	r7, #184	; 0xb8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	50040000 	.word	0x50040000
 8006ca4:	200008d8 	.word	0x200008d8
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	20007958 	.word	0x20007958
 8006cb0:	40020008 	.word	0x40020008
 8006cb4:	50040100 	.word	0x50040100
 8006cb8:	200079a0 	.word	0x200079a0
 8006cbc:	4002001c 	.word	0x4002001c

08006cc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc8:	f107 0314 	add.w	r3, r7, #20
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	60da      	str	r2, [r3, #12]
 8006cd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2e      	ldr	r2, [pc, #184]	; (8006d98 <HAL_DAC_MspInit+0xd8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d156      	bne.n	8006d90 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <HAL_DAC_MspInit+0xdc>)
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <HAL_DAC_MspInit+0xdc>)
 8006ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cec:	6593      	str	r3, [r2, #88]	; 0x58
 8006cee:	4b2b      	ldr	r3, [pc, #172]	; (8006d9c <HAL_DAC_MspInit+0xdc>)
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfa:	4b28      	ldr	r3, [pc, #160]	; (8006d9c <HAL_DAC_MspInit+0xdc>)
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfe:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <HAL_DAC_MspInit+0xdc>)
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d06:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <HAL_DAC_MspInit+0xdc>)
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 8006d12:	2320      	movs	r3, #32
 8006d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d16:	2303      	movs	r3, #3
 8006d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8006d1e:	f107 0314 	add.w	r3, r7, #20
 8006d22:	4619      	mov	r1, r3
 8006d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d28:	f003 f88c 	bl	8009e44 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8006d2c:	4b1c      	ldr	r3, [pc, #112]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <HAL_DAC_MspInit+0xe4>)
 8006d30:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d34:	2205      	movs	r2, #5
 8006d36:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d38:	4b19      	ldr	r3, [pc, #100]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d3e:	4b18      	ldr	r3, [pc, #96]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006d44:	4b16      	ldr	r3, [pc, #88]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d50:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8006d56:	4b12      	ldr	r3, [pc, #72]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d58:	2220      	movs	r2, #32
 8006d5a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8006d64:	480e      	ldr	r0, [pc, #56]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d66:	f002 fdf7 	bl	8009958 <HAL_DMA_Init>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8006d70:	f7ff fd50 	bl	8006814 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d78:	60da      	str	r2, [r3, #12]
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <HAL_DAC_MspInit+0xe0>)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	2036      	movs	r0, #54	; 0x36
 8006d86:	f002 fa9f 	bl	80092c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006d8a:	2036      	movs	r0, #54	; 0x36
 8006d8c:	f002 fab8 	bl	8009300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006d90:	bf00      	nop
 8006d92:	3728      	adds	r7, #40	; 0x28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40007400 	.word	0x40007400
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	200079e8 	.word	0x200079e8
 8006da4:	40020044 	.word	0x40020044

08006da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b0ae      	sub	sp, #184	; 0xb8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	605a      	str	r2, [r3, #4]
 8006dba:	609a      	str	r2, [r3, #8]
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006dc0:	f107 0318 	add.w	r3, r7, #24
 8006dc4:	228c      	movs	r2, #140	; 0x8c
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f016 f8f5 	bl	801cfb8 <memset>
  if(hi2c->Instance==I2C1)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a42      	ldr	r2, [pc, #264]	; (8006edc <HAL_I2C_MspInit+0x134>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d13b      	bne.n	8006e50 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006de0:	f107 0318 	add.w	r3, r7, #24
 8006de4:	4618      	mov	r0, r3
 8006de6:	f005 feb1 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006df0:	f7ff fd10 	bl	8006814 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006df4:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df8:	4a39      	ldr	r2, [pc, #228]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006dfa:	f043 0302 	orr.w	r3, r3, #2
 8006dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e00:	4b37      	ldr	r3, [pc, #220]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = KEYPAD_SCL_Pin|KEYPAD_SDA_Pin;
 8006e0c:	23c0      	movs	r3, #192	; 0xc0
 8006e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e12:	2312      	movs	r3, #18
 8006e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e24:	2304      	movs	r3, #4
 8006e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	482c      	ldr	r0, [pc, #176]	; (8006ee4 <HAL_I2C_MspInit+0x13c>)
 8006e32:	f003 f807 	bl	8009e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e36:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e40:	6593      	str	r3, [r2, #88]	; 0x58
 8006e42:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e4e:	e040      	b.n	8006ed2 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a24      	ldr	r2, [pc, #144]	; (8006ee8 <HAL_I2C_MspInit+0x140>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d13b      	bne.n	8006ed2 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e62:	f107 0318 	add.w	r3, r7, #24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f005 fe70 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8006e72:	f7ff fccf 	bl	8006814 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	4a19      	ldr	r2, [pc, #100]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POWER_SCL_Pin|POWER_SDA_Pin;
 8006e8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e96:	2312      	movs	r3, #18
 8006e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	480b      	ldr	r0, [pc, #44]	; (8006ee4 <HAL_I2C_MspInit+0x13c>)
 8006eb6:	f002 ffc5 	bl	8009e44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebe:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <HAL_I2C_MspInit+0x138>)
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
}
 8006ed2:	bf00      	nop
 8006ed4:	37b8      	adds	r7, #184	; 0xb8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40005400 	.word	0x40005400
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	48000400 	.word	0x48000400
 8006ee8:	40005800 	.word	0x40005800

08006eec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b0a6      	sub	sp, #152	; 0x98
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	228c      	movs	r2, #140	; 0x8c
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f016 f85b 	bl	801cfb8 <memset>
  if(hrtc->Instance==RTC)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a10      	ldr	r2, [pc, #64]	; (8006f48 <HAL_RTC_MspInit+0x5c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d118      	bne.n	8006f3e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f1a:	f107 030c 	add.w	r3, r7, #12
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f005 fe14 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006f2a:	f7ff fc73 	bl	8006814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <HAL_RTC_MspInit+0x60>)
 8006f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f34:	4a05      	ldr	r2, [pc, #20]	; (8006f4c <HAL_RTC_MspInit+0x60>)
 8006f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006f3e:	bf00      	nop
 8006f40:	3798      	adds	r7, #152	; 0x98
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40002800 	.word	0x40002800
 8006f4c:	40021000 	.word	0x40021000

08006f50 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a08      	ldr	r2, [pc, #32]	; (8006f80 <HAL_RTC_MspDeInit+0x30>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d107      	bne.n	8006f72 <HAL_RTC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <HAL_RTC_MspDeInit+0x34>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <HAL_RTC_MspDeInit+0x34>)
 8006f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40002800 	.word	0x40002800
 8006f84:	40021000 	.word	0x40021000

08006f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08e      	sub	sp, #56	; 0x38
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	605a      	str	r2, [r3, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a5c      	ldr	r2, [pc, #368]	; (8007118 <HAL_SPI_MspInit+0x190>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d129      	bne.n	8006ffe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006faa:	4b5c      	ldr	r3, [pc, #368]	; (800711c <HAL_SPI_MspInit+0x194>)
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	4a5b      	ldr	r2, [pc, #364]	; (800711c <HAL_SPI_MspInit+0x194>)
 8006fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8006fb6:	4b59      	ldr	r3, [pc, #356]	; (800711c <HAL_SPI_MspInit+0x194>)
 8006fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fbe:	623b      	str	r3, [r7, #32]
 8006fc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fc2:	4b56      	ldr	r3, [pc, #344]	; (800711c <HAL_SPI_MspInit+0x194>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	4a55      	ldr	r2, [pc, #340]	; (800711c <HAL_SPI_MspInit+0x194>)
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fce:	4b53      	ldr	r3, [pc, #332]	; (800711c <HAL_SPI_MspInit+0x194>)
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 8006fda:	23c2      	movs	r3, #194	; 0xc2
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006fea:	2305      	movs	r3, #5
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ff8:	f002 ff24 	bl	8009e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006ffc:	e088      	b.n	8007110 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a47      	ldr	r2, [pc, #284]	; (8007120 <HAL_SPI_MspInit+0x198>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d155      	bne.n	80070b4 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007008:	4b44      	ldr	r3, [pc, #272]	; (800711c <HAL_SPI_MspInit+0x194>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	4a43      	ldr	r2, [pc, #268]	; (800711c <HAL_SPI_MspInit+0x194>)
 800700e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007012:	6593      	str	r3, [r2, #88]	; 0x58
 8007014:	4b41      	ldr	r3, [pc, #260]	; (800711c <HAL_SPI_MspInit+0x194>)
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007020:	4b3e      	ldr	r3, [pc, #248]	; (800711c <HAL_SPI_MspInit+0x194>)
 8007022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007024:	4a3d      	ldr	r2, [pc, #244]	; (800711c <HAL_SPI_MspInit+0x194>)
 8007026:	f043 0304 	orr.w	r3, r3, #4
 800702a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800702c:	4b3b      	ldr	r3, [pc, #236]	; (800711c <HAL_SPI_MspInit+0x194>)
 800702e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007038:	4b38      	ldr	r3, [pc, #224]	; (800711c <HAL_SPI_MspInit+0x194>)
 800703a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703c:	4a37      	ldr	r2, [pc, #220]	; (800711c <HAL_SPI_MspInit+0x194>)
 800703e:	f043 0302 	orr.w	r3, r3, #2
 8007042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007044:	4b35      	ldr	r3, [pc, #212]	; (800711c <HAL_SPI_MspInit+0x194>)
 8007046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8007050:	2302      	movs	r3, #2
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007054:	2302      	movs	r3, #2
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007058:	2300      	movs	r3, #0
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800705c:	2303      	movs	r3, #3
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8007060:	2303      	movs	r3, #3
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8007064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007068:	4619      	mov	r1, r3
 800706a:	482e      	ldr	r0, [pc, #184]	; (8007124 <HAL_SPI_MspInit+0x19c>)
 800706c:	f002 feea 	bl	8009e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8007070:	2304      	movs	r3, #4
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007074:	2302      	movs	r3, #2
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007078:	2300      	movs	r3, #0
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800707c:	2303      	movs	r3, #3
 800707e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007080:	2305      	movs	r3, #5
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8007084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007088:	4619      	mov	r1, r3
 800708a:	4826      	ldr	r0, [pc, #152]	; (8007124 <HAL_SPI_MspInit+0x19c>)
 800708c:	f002 feda 	bl	8009e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8007090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007096:	2302      	movs	r3, #2
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800709a:	2300      	movs	r3, #0
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800709e:	2303      	movs	r3, #3
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070a2:	2305      	movs	r3, #5
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 80070a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070aa:	4619      	mov	r1, r3
 80070ac:	481e      	ldr	r0, [pc, #120]	; (8007128 <HAL_SPI_MspInit+0x1a0>)
 80070ae:	f002 fec9 	bl	8009e44 <HAL_GPIO_Init>
}
 80070b2:	e02d      	b.n	8007110 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI3)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1c      	ldr	r2, [pc, #112]	; (800712c <HAL_SPI_MspInit+0x1a4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d128      	bne.n	8007110 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80070be:	4b17      	ldr	r3, [pc, #92]	; (800711c <HAL_SPI_MspInit+0x194>)
 80070c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c2:	4a16      	ldr	r2, [pc, #88]	; (800711c <HAL_SPI_MspInit+0x194>)
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c8:	6593      	str	r3, [r2, #88]	; 0x58
 80070ca:	4b14      	ldr	r3, [pc, #80]	; (800711c <HAL_SPI_MspInit+0x194>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <HAL_SPI_MspInit+0x194>)
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	4a10      	ldr	r2, [pc, #64]	; (800711c <HAL_SPI_MspInit+0x194>)
 80070dc:	f043 0304 	orr.w	r3, r3, #4
 80070e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070e2:	4b0e      	ldr	r3, [pc, #56]	; (800711c <HAL_SPI_MspInit+0x194>)
 80070e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	60bb      	str	r3, [r7, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MEM_SCK_Pin|MEM_MISO_Pin|MEM_MOSI_Pin;
 80070ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f4:	2302      	movs	r3, #2
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070fc:	2303      	movs	r3, #3
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007100:	2306      	movs	r3, #6
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007108:	4619      	mov	r1, r3
 800710a:	4806      	ldr	r0, [pc, #24]	; (8007124 <HAL_SPI_MspInit+0x19c>)
 800710c:	f002 fe9a 	bl	8009e44 <HAL_GPIO_Init>
}
 8007110:	bf00      	nop
 8007112:	3738      	adds	r7, #56	; 0x38
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40013000 	.word	0x40013000
 800711c:	40021000 	.word	0x40021000
 8007120:	40003800 	.word	0x40003800
 8007124:	48000800 	.word	0x48000800
 8007128:	48000400 	.word	0x48000400
 800712c:	40003c00 	.word	0x40003c00

08007130 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007140:	d10c      	bne.n	800715c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <HAL_TIM_PWM_MspInit+0x5c>)
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	4a11      	ldr	r2, [pc, #68]	; (800718c <HAL_TIM_PWM_MspInit+0x5c>)
 8007148:	f043 0301 	orr.w	r3, r3, #1
 800714c:	6593      	str	r3, [r2, #88]	; 0x58
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_TIM_PWM_MspInit+0x5c>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800715a:	e010      	b.n	800717e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <HAL_TIM_PWM_MspInit+0x60>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d10b      	bne.n	800717e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_TIM_PWM_MspInit+0x5c>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	4a08      	ldr	r2, [pc, #32]	; (800718c <HAL_TIM_PWM_MspInit+0x5c>)
 800716c:	f043 0304 	orr.w	r3, r3, #4
 8007170:	6593      	str	r3, [r2, #88]	; 0x58
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_TIM_PWM_MspInit+0x5c>)
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	60bb      	str	r3, [r7, #8]
 800717c:	68bb      	ldr	r3, [r7, #8]
}
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40021000 	.word	0x40021000
 8007190:	40000800 	.word	0x40000800

08007194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0d      	ldr	r2, [pc, #52]	; (80071d8 <HAL_TIM_Base_MspInit+0x44>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d113      	bne.n	80071ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <HAL_TIM_Base_MspInit+0x48>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <HAL_TIM_Base_MspInit+0x48>)
 80071ac:	f043 0310 	orr.w	r3, r3, #16
 80071b0:	6593      	str	r3, [r2, #88]	; 0x58
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <HAL_TIM_Base_MspInit+0x48>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80071be:	2200      	movs	r2, #0
 80071c0:	2100      	movs	r1, #0
 80071c2:	2036      	movs	r0, #54	; 0x36
 80071c4:	f002 f880 	bl	80092c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80071c8:	2036      	movs	r0, #54	; 0x36
 80071ca:	f002 f899 	bl	8009300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40001000 	.word	0x40001000
 80071dc:	40021000 	.word	0x40021000

080071e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e8:	f107 0314 	add.w	r3, r7, #20
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	609a      	str	r2, [r3, #8]
 80071f4:	60da      	str	r2, [r3, #12]
 80071f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007200:	d11d      	bne.n	800723e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007202:	4b22      	ldr	r3, [pc, #136]	; (800728c <HAL_TIM_MspPostInit+0xac>)
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	4a21      	ldr	r2, [pc, #132]	; (800728c <HAL_TIM_MspPostInit+0xac>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800720e:	4b1f      	ldr	r3, [pc, #124]	; (800728c <HAL_TIM_MspPostInit+0xac>)
 8007210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721e:	2302      	movs	r3, #2
 8007220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007226:	2300      	movs	r3, #0
 8007228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800722a:	2301      	movs	r3, #1
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	4619      	mov	r1, r3
 8007234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007238:	f002 fe04 	bl	8009e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800723c:	e021      	b.n	8007282 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a13      	ldr	r2, [pc, #76]	; (8007290 <HAL_TIM_MspPostInit+0xb0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d11c      	bne.n	8007282 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007248:	4b10      	ldr	r3, [pc, #64]	; (800728c <HAL_TIM_MspPostInit+0xac>)
 800724a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724c:	4a0f      	ldr	r2, [pc, #60]	; (800728c <HAL_TIM_MspPostInit+0xac>)
 800724e:	f043 0308 	orr.w	r3, r3, #8
 8007252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007254:	4b0d      	ldr	r3, [pc, #52]	; (800728c <HAL_TIM_MspPostInit+0xac>)
 8007256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P_meter_UGen_Pin;
 8007260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007266:	2302      	movs	r3, #2
 8007268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800726e:	2300      	movs	r3, #0
 8007270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007272:	2302      	movs	r3, #2
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P_meter_UGen_GPIO_Port, &GPIO_InitStruct);
 8007276:	f107 0314 	add.w	r3, r7, #20
 800727a:	4619      	mov	r1, r3
 800727c:	4805      	ldr	r0, [pc, #20]	; (8007294 <HAL_TIM_MspPostInit+0xb4>)
 800727e:	f002 fde1 	bl	8009e44 <HAL_GPIO_Init>
}
 8007282:	bf00      	nop
 8007284:	3728      	adds	r7, #40	; 0x28
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000
 8007290:	40000800 	.word	0x40000800
 8007294:	48000c00 	.word	0x48000c00

08007298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b0ac      	sub	sp, #176	; 0xb0
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072b0:	f107 0310 	add.w	r3, r7, #16
 80072b4:	228c      	movs	r2, #140	; 0x8c
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f015 fe7d 	bl	801cfb8 <memset>
  if(huart->Instance==USART1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a26      	ldr	r2, [pc, #152]	; (800735c <HAL_UART_MspInit+0xc4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d144      	bne.n	8007352 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80072c8:	2301      	movs	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80072cc:	2300      	movs	r3, #0
 80072ce:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072d0:	f107 0310 	add.w	r3, r7, #16
 80072d4:	4618      	mov	r0, r3
 80072d6:	f005 fc39 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80072e0:	f7ff fa98 	bl	8006814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80072e4:	4b1e      	ldr	r3, [pc, #120]	; (8007360 <HAL_UART_MspInit+0xc8>)
 80072e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e8:	4a1d      	ldr	r2, [pc, #116]	; (8007360 <HAL_UART_MspInit+0xc8>)
 80072ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072ee:	6613      	str	r3, [r2, #96]	; 0x60
 80072f0:	4b1b      	ldr	r3, [pc, #108]	; (8007360 <HAL_UART_MspInit+0xc8>)
 80072f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fc:	4b18      	ldr	r3, [pc, #96]	; (8007360 <HAL_UART_MspInit+0xc8>)
 80072fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007300:	4a17      	ldr	r2, [pc, #92]	; (8007360 <HAL_UART_MspInit+0xc8>)
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007308:	4b15      	ldr	r3, [pc, #84]	; (8007360 <HAL_UART_MspInit+0xc8>)
 800730a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007314:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800731c:	2302      	movs	r3, #2
 800731e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007328:	2303      	movs	r3, #3
 800732a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800732e:	2307      	movs	r3, #7
 8007330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007334:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007338:	4619      	mov	r1, r3
 800733a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800733e:	f002 fd81 	bl	8009e44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007342:	2200      	movs	r2, #0
 8007344:	2100      	movs	r1, #0
 8007346:	2025      	movs	r0, #37	; 0x25
 8007348:	f001 ffbe 	bl	80092c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800734c:	2025      	movs	r0, #37	; 0x25
 800734e:	f001 ffd7 	bl	8009300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007352:	bf00      	nop
 8007354:	37b0      	adds	r7, #176	; 0xb0
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40013800 	.word	0x40013800
 8007360:	40021000 	.word	0x40021000

08007364 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08c      	sub	sp, #48	; 0x30
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8007374:	2200      	movs	r2, #0
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	2019      	movs	r0, #25
 800737a:	f001 ffa5 	bl	80092c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800737e:	2019      	movs	r0, #25
 8007380:	f001 ffbe 	bl	8009300 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007384:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <HAL_InitTick+0x9c>)
 8007386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007388:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <HAL_InitTick+0x9c>)
 800738a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800738e:	6613      	str	r3, [r2, #96]	; 0x60
 8007390:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <HAL_InitTick+0x9c>)
 8007392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800739c:	f107 0210 	add.w	r2, r7, #16
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f005 fb3e 	bl	800ca28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80073ac:	f005 fb26 	bl	800c9fc <HAL_RCC_GetPCLK2Freq>
 80073b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	4a13      	ldr	r2, [pc, #76]	; (8007404 <HAL_InitTick+0xa0>)
 80073b6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ba:	0c9b      	lsrs	r3, r3, #18
 80073bc:	3b01      	subs	r3, #1
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <HAL_InitTick+0xa4>)
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <HAL_InitTick+0xa8>)
 80073c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <HAL_InitTick+0xa4>)
 80073c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80073cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80073ce:	4a0e      	ldr	r2, [pc, #56]	; (8007408 <HAL_InitTick+0xa4>)
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <HAL_InitTick+0xa4>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <HAL_InitTick+0xa4>)
 80073dc:	2200      	movs	r2, #0
 80073de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <HAL_InitTick+0xa4>)
 80073e2:	f007 fb5f 	bl	800eaa4 <HAL_TIM_Base_Init>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80073ec:	4806      	ldr	r0, [pc, #24]	; (8007408 <HAL_InitTick+0xa4>)
 80073ee:	f007 fc19 	bl	800ec24 <HAL_TIM_Base_Start_IT>
 80073f2:	4603      	mov	r3, r0
 80073f4:	e000      	b.n	80073f8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3730      	adds	r7, #48	; 0x30
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	431bde83 	.word	0x431bde83
 8007408:	2000807c 	.word	0x2000807c
 800740c:	40012c00 	.word	0x40012c00

08007410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007414:	e7fe      	b.n	8007414 <NMI_Handler+0x4>

08007416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007416:	b480      	push	{r7}
 8007418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800741a:	e7fe      	b.n	800741a <HardFault_Handler+0x4>

0800741c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007420:	e7fe      	b.n	8007420 <MemManage_Handler+0x4>

08007422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007422:	b480      	push	{r7}
 8007424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007426:	e7fe      	b.n	8007426 <BusFault_Handler+0x4>

08007428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800742c:	e7fe      	b.n	800742c <UsageFault_Handler+0x4>

0800742e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800742e:	b480      	push	{r7}
 8007430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800744a:	b480      	push	{r7}
 800744c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800744e:	bf00      	nop
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  ADC_EXT();
 800746a:	f7fa f935 	bl	80016d8 <ADC_EXT>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800746e:	2010      	movs	r0, #16
 8007470:	f002 feaa 	bl	800a1c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007474:	bf00      	nop
 8007476:	bd80      	pop	{r7, pc}

08007478 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800747c:	4802      	ldr	r0, [pc, #8]	; (8007488 <DMA1_Channel1_IRQHandler+0x10>)
 800747e:	f002 fc02 	bl	8009c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007482:	bf00      	nop
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20007958 	.word	0x20007958

0800748c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007490:	4802      	ldr	r0, [pc, #8]	; (800749c <DMA1_Channel2_IRQHandler+0x10>)
 8007492:	f002 fbf8 	bl	8009c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	200079a0 	.word	0x200079a0

080074a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	//
	StartReadNextSoundBuf();
 80074a4:	f7ff fa42 	bl	800692c <StartReadNextSoundBuf>
  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80074a8:	4802      	ldr	r0, [pc, #8]	; (80074b4 <DMA1_Channel4_IRQHandler+0x14>)
 80074aa:	f002 fbec 	bl	8009c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80074ae:	bf00      	nop
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200079e8 	.word	0x200079e8

080074b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80074bc:	4802      	ldr	r0, [pc, #8]	; (80074c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80074be:	f007 fd7f 	bl	800efc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80074c2:	bf00      	nop
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	2000807c 	.word	0x2000807c

080074cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1, UART_IT_RXNE)==SET)
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <USART1_IRQHandler+0x4c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <USART1_IRQHandler+0x40>
	{
		usart1_data[usart1_counter]=(uint8_t)USART1->RDR;
 80074de:	4b0f      	ldr	r3, [pc, #60]	; (800751c <USART1_IRQHandler+0x50>)
 80074e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80074e2:	b299      	uxth	r1, r3
 80074e4:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <USART1_IRQHandler+0x54>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	b2c9      	uxtb	r1, r1
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <USART1_IRQHandler+0x58>)
 80074ee:	5499      	strb	r1, [r3, r2]
		usart1_counter++;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <USART1_IRQHandler+0x54>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	3301      	adds	r3, #1
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <USART1_IRQHandler+0x54>)
 80074fa:	701a      	strb	r2, [r3, #0]
		rx_cmplt=5;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <USART1_IRQHandler+0x5c>)
 80074fe:	2205      	movs	r2, #5
 8007500:	701a      	strb	r2, [r3, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_IT_RXNE);
 8007502:	4b05      	ldr	r3, [pc, #20]	; (8007518 <USART1_IRQHandler+0x4c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f240 5225 	movw	r2, #1317	; 0x525
 800750a:	621a      	str	r2, [r3, #32]
//		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	}

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800750c:	4802      	ldr	r0, [pc, #8]	; (8007518 <USART1_IRQHandler+0x4c>)
 800750e:	f008 fccd 	bl	800feac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20007a30 	.word	0x20007a30
 800751c:	40013800 	.word	0x40013800
 8007520:	2000088d 	.word	0x2000088d
 8007524:	200020f8 	.word	0x200020f8
 8007528:	2000088e 	.word	0x2000088e

0800752c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//StartReadNextSoundBuf();
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007530:	4803      	ldr	r0, [pc, #12]	; (8007540 <TIM6_DAC_IRQHandler+0x14>)
 8007532:	f007 fd45 	bl	800efc0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8007536:	4803      	ldr	r0, [pc, #12]	; (8007544 <TIM6_DAC_IRQHandler+0x18>)
 8007538:	f001 ffde 	bl	80094f8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800753c:	bf00      	nop
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20007b98 	.word	0x20007b98
 8007544:	20007b84 	.word	0x20007b84

08007548 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800754c:	4802      	ldr	r0, [pc, #8]	; (8007558 <OTG_FS_IRQHandler+0x10>)
 800754e:	f003 fca1 	bl	800ae94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007552:	bf00      	nop
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20009a18 	.word	0x20009a18

0800755c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
	return 1;
 8007560:	2301      	movs	r3, #1
}
 8007562:	4618      	mov	r0, r3
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <_kill>:

int _kill(int pid, int sig)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007576:	f015 fcf5 	bl	801cf64 <__errno>
 800757a:	4603      	mov	r3, r0
 800757c:	2216      	movs	r2, #22
 800757e:	601a      	str	r2, [r3, #0]
	return -1;
 8007580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <_exit>:

void _exit (int status)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007594:	f04f 31ff 	mov.w	r1, #4294967295
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff ffe7 	bl	800756c <_kill>
	while (1) {}		/* Make sure we hang here */
 800759e:	e7fe      	b.n	800759e <_exit+0x12>

080075a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e00a      	b.n	80075c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80075b2:	f3af 8000 	nop.w
 80075b6:	4601      	mov	r1, r0
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	60ba      	str	r2, [r7, #8]
 80075be:	b2ca      	uxtb	r2, r1
 80075c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	3301      	adds	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	dbf0      	blt.n	80075b2 <_read+0x12>
	}

return len;
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	e009      	b.n	8007600 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	60ba      	str	r2, [r7, #8]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	3301      	adds	r3, #1
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	dbf1      	blt.n	80075ec <_write+0x12>
	}
	return len;
 8007608:	687b      	ldr	r3, [r7, #4]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <_close>:

int _close(int file)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
	return -1;
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800763a:	605a      	str	r2, [r3, #4]
	return 0;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <_isatty>:

int _isatty(int file)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
	return 1;
 8007652:	2301      	movs	r3, #1
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
	return 0;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007684:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <_sbrk+0x5c>)
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <_sbrk+0x60>)
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <_sbrk+0x64>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <_sbrk+0x64>)
 800769a:	4a12      	ldr	r2, [pc, #72]	; (80076e4 <_sbrk+0x68>)
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <_sbrk+0x64>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4413      	add	r3, r2
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d207      	bcs.n	80076bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076ac:	f015 fc5a 	bl	801cf64 <__errno>
 80076b0:	4603      	mov	r3, r0
 80076b2:	220c      	movs	r2, #12
 80076b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ba:	e009      	b.n	80076d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076bc:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <_sbrk+0x64>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076c2:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <_sbrk+0x64>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	4a05      	ldr	r2, [pc, #20]	; (80076e0 <_sbrk+0x64>)
 80076cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20040000 	.word	0x20040000
 80076dc:	00000400 	.word	0x00000400
 80076e0:	200008dc 	.word	0x200008dc
 80076e4:	2000a030 	.word	0x2000a030

080076e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80076ec:	4b15      	ldr	r3, [pc, #84]	; (8007744 <SystemInit+0x5c>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	4a14      	ldr	r2, [pc, #80]	; (8007744 <SystemInit+0x5c>)
 80076f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <SystemInit+0x60>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a11      	ldr	r2, [pc, #68]	; (8007748 <SystemInit+0x60>)
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007708:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <SystemInit+0x60>)
 800770a:	2200      	movs	r2, #0
 800770c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <SystemInit+0x60>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a0d      	ldr	r2, [pc, #52]	; (8007748 <SystemInit+0x60>)
 8007714:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007718:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800771c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800771e:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <SystemInit+0x60>)
 8007720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007724:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007726:	4b08      	ldr	r3, [pc, #32]	; (8007748 <SystemInit+0x60>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a07      	ldr	r2, [pc, #28]	; (8007748 <SystemInit+0x60>)
 800772c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007730:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <SystemInit+0x60>)
 8007734:	2200      	movs	r2, #0
 8007736:	619a      	str	r2, [r3, #24]
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	e000ed00 	.word	0xe000ed00
 8007748:	40021000 	.word	0x40021000
 800774c:	00000000 	.word	0x00000000

08007750 <Temperature_process>:
extern ADC_HandleTypeDef hadc1;

uint16_t temperature_buf[256];

void Temperature_process(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_sum=0;
 800775a:	2300      	movs	r3, #0
 800775c:	60bb      	str	r3, [r7, #8]
	uint16_t temperature_middle = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) &temperature_buf, 128);
 8007762:	2280      	movs	r2, #128	; 0x80
 8007764:	4932      	ldr	r1, [pc, #200]	; (8007830 <Temperature_process+0xe0>)
 8007766:	4833      	ldr	r0, [pc, #204]	; (8007834 <Temperature_process+0xe4>)
 8007768:	f000 fe4c 	bl	8008404 <HAL_ADC_Start_DMA>

	for(i=0;i<128;i++)temp_sum+=temperature_buf[i];
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
 8007770:	e00a      	b.n	8007788 <Temperature_process+0x38>
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	4a2e      	ldr	r2, [pc, #184]	; (8007830 <Temperature_process+0xe0>)
 8007776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800777a:	461a      	mov	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4413      	add	r3, r2
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	3301      	adds	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
 8007788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778c:	2b00      	cmp	r3, #0
 800778e:	daf0      	bge.n	8007772 <Temperature_process+0x22>
	temperature_middle = (temp_sum>>7);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	09db      	lsrs	r3, r3, #7
 8007794:	80fb      	strh	r3, [r7, #6]

	MCU_temp = (double)(temperature_middle/4096.0)*Vref;   // Напряжение в вольтах на датчике.
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	4618      	mov	r0, r3
 800779a:	f7f8 fed3 	bl	8000544 <__aeabi_i2d>
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	4b25      	ldr	r3, [pc, #148]	; (8007838 <Temperature_process+0xe8>)
 80077a4:	f7f9 f862 	bl	800086c <__aeabi_ddiv>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4610      	mov	r0, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	a319      	add	r3, pc, #100	; (adr r3, 8007818 <Temperature_process+0xc8>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 ff2f 	bl	8000618 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	491f      	ldr	r1, [pc, #124]	; (800783c <Temperature_process+0xec>)
 80077c0:	e9c1 2300 	strd	r2, r3, [r1]
	MCU_temp = (tV_25-MCU_temp)/tSlope + 25.0;             // Температура в градусах.
 80077c4:	4b1d      	ldr	r3, [pc, #116]	; (800783c <Temperature_process+0xec>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	a115      	add	r1, pc, #84	; (adr r1, 8007820 <Temperature_process+0xd0>)
 80077cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d0:	f7f8 fd6a 	bl	80002a8 <__aeabi_dsub>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	a312      	add	r3, pc, #72	; (adr r3, 8007828 <Temperature_process+0xd8>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f9 f843 	bl	800086c <__aeabi_ddiv>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <Temperature_process+0xf0>)
 80077f4:	f7f8 fd5a 	bl	80002ac <__adddf3>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	490f      	ldr	r1, [pc, #60]	; (800783c <Temperature_process+0xec>)
 80077fe:	e9c1 2300 	strd	r2, r3, [r1]


	sleep(1000);
 8007802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007806:	f7fb fd0d 	bl	8003224 <sleep>
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	66666666 	.word	0x66666666
 800781c:	400a6666 	.word	0x400a6666
 8007820:	22d0e560 	.word	0x22d0e560
 8007824:	3ff2f9db 	.word	0x3ff2f9db
 8007828:	75f6fd22 	.word	0x75f6fd22
 800782c:	3f719ce0 	.word	0x3f719ce0
 8007830:	200080c8 	.word	0x200080c8
 8007834:	20007b1c 	.word	0x20007b1c
 8007838:	40b00000 	.word	0x40b00000
 800783c:	20000890 	.word	0x20000890
 8007840:	40390000 	.word	0x40390000

08007844 <spi_timeout>:
static SPI_HandleTypeDef hdisplayspi;



uint8_t spi_timeout(void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
	if(++spitimeout==100) return 1;
 8007848:	4b08      	ldr	r3, [pc, #32]	; (800786c <spi_timeout+0x28>)
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <spi_timeout+0x28>)
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <spi_timeout+0x28>)
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	2b64      	cmp	r3, #100	; 0x64
 800785a:	d101      	bne.n	8007860 <spi_timeout+0x1c>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <spi_timeout+0x1e>
	else return 0;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	200008e0 	.word	0x200008e0

08007870 <u8x8_gpio_and_delay_cb_stm32l4>:
/** @addtogroup _Exported_Functions
  * @{
  */
uint8_t u8x8_gpio_and_delay_cb_stm32l4 (U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
		U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	72fb      	strb	r3, [r7, #11]
 800787e:	4613      	mov	r3, r2
 8007880:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007882:	f107 0314 	add.w	r3, r7, #20
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	605a      	str	r2, [r3, #4]
 800788c:	609a      	str	r2, [r3, #8]
 800788e:	60da      	str	r2, [r3, #12]
 8007890:	611a      	str	r2, [r3, #16]
	  switch (msg)
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	3b28      	subs	r3, #40	; 0x28
 8007896:	2b23      	cmp	r3, #35	; 0x23
 8007898:	d870      	bhi.n	800797c <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <u8x8_gpio_and_delay_cb_stm32l4+0x30>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	08007931 	.word	0x08007931
 80078a4:	08007947 	.word	0x08007947
 80078a8:	0800797d 	.word	0x0800797d
 80078ac:	0800797d 	.word	0x0800797d
 80078b0:	0800797d 	.word	0x0800797d
 80078b4:	0800797d 	.word	0x0800797d
 80078b8:	0800797d 	.word	0x0800797d
 80078bc:	0800797d 	.word	0x0800797d
 80078c0:	0800797d 	.word	0x0800797d
 80078c4:	0800797d 	.word	0x0800797d
 80078c8:	0800797d 	.word	0x0800797d
 80078cc:	0800797d 	.word	0x0800797d
 80078d0:	0800797d 	.word	0x0800797d
 80078d4:	0800797d 	.word	0x0800797d
 80078d8:	0800797d 	.word	0x0800797d
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	0800797d 	.word	0x0800797d
 80078e4:	0800797d 	.word	0x0800797d
 80078e8:	0800797d 	.word	0x0800797d
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800797d 	.word	0x0800797d
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	0800797d 	.word	0x0800797d
 8007900:	0800797d 	.word	0x0800797d
 8007904:	0800797d 	.word	0x0800797d
 8007908:	0800797d 	.word	0x0800797d
 800790c:	0800797d 	.word	0x0800797d
 8007910:	0800797d 	.word	0x0800797d
 8007914:	0800797d 	.word	0x0800797d
 8007918:	0800797d 	.word	0x0800797d
 800791c:	0800797d 	.word	0x0800797d
 8007920:	0800797d 	.word	0x0800797d
 8007924:	08007961 	.word	0x08007961
 8007928:	08007951 	.word	0x08007951
 800792c:	0800796f 	.word	0x0800796f
	  {
	  case U8X8_MSG_GPIO_AND_DELAY_INIT:
		  LCD_NRST_NOT_ACTIVE();
 8007930:	2201      	movs	r2, #1
 8007932:	2110      	movs	r1, #16
 8007934:	4814      	ldr	r0, [pc, #80]	; (8007988 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007936:	f002 fc2f 	bl	800a198 <HAL_GPIO_WritePin>
		  LCD_NCS_NOT_ACTIVE();
 800793a:	2201      	movs	r2, #1
 800793c:	2101      	movs	r1, #1
 800793e:	4812      	ldr	r0, [pc, #72]	; (8007988 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007940:	f002 fc2a 	bl	800a198 <HAL_GPIO_WritePin>
	    break;
 8007944:	e01a      	b.n	800797c <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_DELAY_MILLI:
		  delay_ms(arg_int);
 8007946:	7abb      	ldrb	r3, [r7, #10]
 8007948:	4618      	mov	r0, r3
 800794a:	f7fb fc83 	bl	8003254 <delay_ms>
	    break;
 800794e:	e015      	b.n	800797c <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_DC:
	    HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, arg_int); //?
 8007950:	7abb      	ldrb	r3, [r7, #10]
 8007952:	461a      	mov	r2, r3
 8007954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007958:	480c      	ldr	r0, [pc, #48]	; (800798c <u8x8_gpio_and_delay_cb_stm32l4+0x11c>)
 800795a:	f002 fc1d 	bl	800a198 <HAL_GPIO_WritePin>
	    break;
 800795e:	e00d      	b.n	800797c <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_CS:
	    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, arg_int); //?
 8007960:	7abb      	ldrb	r3, [r7, #10]
 8007962:	461a      	mov	r2, r3
 8007964:	2101      	movs	r1, #1
 8007966:	4808      	ldr	r0, [pc, #32]	; (8007988 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007968:	f002 fc16 	bl	800a198 <HAL_GPIO_WritePin>
	    break;
 800796c:	e006      	b.n	800797c <u8x8_gpio_and_delay_cb_stm32l4+0x10c>
	  case U8X8_MSG_GPIO_RESET:
	    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, arg_int);
 800796e:	7abb      	ldrb	r3, [r7, #10]
 8007970:	461a      	mov	r2, r3
 8007972:	2110      	movs	r1, #16
 8007974:	4804      	ldr	r0, [pc, #16]	; (8007988 <u8x8_gpio_and_delay_cb_stm32l4+0x118>)
 8007976:	f002 fc0f 	bl	800a198 <HAL_GPIO_WritePin>
	    break;
 800797a:	bf00      	nop
	  }
	  return 1;
 800797c:	2301      	movs	r3, #1
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	48001000 	.word	0x48001000
 800798c:	48000400 	.word	0x48000400

08007990 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	607b      	str	r3, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	72fb      	strb	r3, [r7, #11]
 800799e:	4613      	mov	r3, r2
 80079a0:	72bb      	strb	r3, [r7, #10]
	uint8_t *data;//, a_flag;
#ifdef  USE_BSP_SPI2
 hdisplayspi.Instance = huc1638_hspi.Instance;
#else
 hdisplayspi.Instance = hspi2.Instance;
 80079a2:	4b54      	ldr	r3, [pc, #336]	; (8007af4 <u8x8_byte_4wire_hw_spi+0x164>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a54      	ldr	r2, [pc, #336]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 80079a8:	6013      	str	r3, [r2, #0]
#endif

  switch (msg)
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	3b14      	subs	r3, #20
 80079ae:	2b0c      	cmp	r3, #12
 80079b0:	f200 8098 	bhi.w	8007ae4 <u8x8_byte_4wire_hw_spi+0x154>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <u8x8_byte_4wire_hw_spi+0x2c>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	08007a81 	.word	0x08007a81
 80079c0:	08007ae5 	.word	0x08007ae5
 80079c4:	08007ae5 	.word	0x08007ae5
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	08007aa1 	.word	0x08007aa1
 80079d0:	08007ac3 	.word	0x08007ac3
 80079d4:	08007ae5 	.word	0x08007ae5
 80079d8:	08007ae5 	.word	0x08007ae5
 80079dc:	08007ae5 	.word	0x08007ae5
 80079e0:	08007ae5 	.word	0x08007ae5
 80079e4:	08007ae5 	.word	0x08007ae5
 80079e8:	08007ae5 	.word	0x08007ae5
 80079ec:	08007a93 	.word	0x08007a93
  {
  case U8X8_MSG_BYTE_SEND:
	data = (uint8_t *)arg_ptr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 80079f4:	e040      	b.n	8007a78 <u8x8_byte_4wire_hw_spi+0xe8>
    {
    	/* check TXE flag */
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
    	{
    		spitimeout = 0;
 80079f6:	4b41      	ldr	r3, [pc, #260]	; (8007afc <u8x8_byte_4wire_hw_spi+0x16c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 80079fc:	f7ff ff22 	bl	8007844 <spi_timeout>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d007      	beq.n	8007a16 <u8x8_byte_4wire_hw_spi+0x86>
    	while((hdisplayspi.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 8007a06:	4b3c      	ldr	r3, [pc, #240]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d1f0      	bne.n	80079f6 <u8x8_byte_4wire_hw_spi+0x66>
 8007a14:	e000      	b.n	8007a18 <u8x8_byte_4wire_hw_spi+0x88>
    		if(spi_timeout()==1) break;
 8007a16:	bf00      	nop
    	}
    	/* Write the data */
    	*((__IO uint8_t*) &hdisplayspi.Instance->DR ) = (uint8_t) * data;
 8007a18:	4b37      	ldr	r3, [pc, #220]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	701a      	strb	r2, [r3, #0]
    	/* Wait BSY flag */
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a24:	e007      	b.n	8007a36 <u8x8_byte_4wire_hw_spi+0xa6>
    		{
    			spitimeout = 0;
 8007a26:	4b35      	ldr	r3, [pc, #212]	; (8007afc <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	801a      	strh	r2, [r3, #0]
    		    if(spi_timeout()==1) break;
 8007a2c:	f7ff ff0a 	bl	8007844 <spi_timeout>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d007      	beq.n	8007a46 <u8x8_byte_4wire_hw_spi+0xb6>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY)
 8007a36:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f0      	bne.n	8007a26 <u8x8_byte_4wire_hw_spi+0x96>
 8007a44:	e009      	b.n	8007a5a <u8x8_byte_4wire_hw_spi+0xca>
    		    if(spi_timeout()==1) break;
 8007a46:	bf00      	nop
    		}
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007a48:	e007      	b.n	8007a5a <u8x8_byte_4wire_hw_spi+0xca>
    	{
    		spitimeout = 0;
 8007a4a:	4b2c      	ldr	r3, [pc, #176]	; (8007afc <u8x8_byte_4wire_hw_spi+0x16c>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	801a      	strh	r2, [r3, #0]
    		if(spi_timeout()==1) break;
 8007a50:	f7ff fef8 	bl	8007844 <spi_timeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d007      	beq.n	8007a6a <u8x8_byte_4wire_hw_spi+0xda>
    	while ((hdisplayspi.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY)
 8007a5a:	4b27      	ldr	r3, [pc, #156]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d0f0      	beq.n	8007a4a <u8x8_byte_4wire_hw_spi+0xba>
 8007a68:	e000      	b.n	8007a6c <u8x8_byte_4wire_hw_spi+0xdc>
    		if(spi_timeout()==1) break;
 8007a6a:	bf00      	nop
    	}
        data++;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	617b      	str	r3, [r7, #20]
        arg_int--;
 8007a72:	7abb      	ldrb	r3, [r7, #10]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 8007a78:	7abb      	ldrb	r3, [r7, #10]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1c3      	bne.n	8007a06 <u8x8_byte_4wire_hw_spi+0x76>
    }
//	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, arg_int, 1000);
    break;
 8007a7e:	e033      	b.n	8007ae8 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_INIT:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	461a      	mov	r2, r3
 8007a88:	2149      	movs	r1, #73	; 0x49
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f00e feb9 	bl	8016802 <u8x8_gpio_call>
    break;
 8007a90:	e02a      	b.n	8007ae8 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_SET_DC:
	  u8x8_gpio_SetDC(u8x8, arg_int);
 8007a92:	7abb      	ldrb	r3, [r7, #10]
 8007a94:	461a      	mov	r2, r3
 8007a96:	214a      	movs	r1, #74	; 0x4a
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f00e feb2 	bl	8016802 <u8x8_gpio_call>
    break;
 8007a9e:	e023      	b.n	8007ae8 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_START_TRANSFER:
	  __HAL_SPI_ENABLE(&hdisplayspi);
 8007aa0:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aae:	601a      	str	r2, [r3, #0]
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2149      	movs	r1, #73	; 0x49
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f00e fea1 	bl	8016802 <u8x8_gpio_call>
    break;
 8007ac0:	e012      	b.n	8007ae8 <u8x8_byte_4wire_hw_spi+0x158>
  case U8X8_MSG_BYTE_END_TRANSFER:
	  u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	2149      	movs	r1, #73	; 0x49
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f00e fe98 	bl	8016802 <u8x8_gpio_call>
	  __HAL_SPI_DISABLE(&hdisplayspi);
 8007ad2:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <u8x8_byte_4wire_hw_spi+0x168>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae0:	601a      	str	r2, [r3, #0]
    break;
 8007ae2:	e001      	b.n	8007ae8 <u8x8_byte_4wire_hw_spi+0x158>
  default:
    return 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e000      	b.n	8007aea <u8x8_byte_4wire_hw_spi+0x15a>
  }
  return 1;
 8007ae8:	2301      	movs	r3, #1
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20001f58 	.word	0x20001f58
 8007af8:	200008e4 	.word	0x200008e4
 8007afc:	200008e0 	.word	0x200008e0

08007b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007b04:	f7ff fdf0 	bl	80076e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007b08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007b0a:	e003      	b.n	8007b14 <LoopCopyDataInit>

08007b0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007b0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007b10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007b12:	3104      	adds	r1, #4

08007b14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007b14:	480a      	ldr	r0, [pc, #40]	; (8007b40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007b18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007b1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007b1c:	d3f6      	bcc.n	8007b0c <CopyDataInit>
	ldr	r2, =_sbss
 8007b1e:	4a0a      	ldr	r2, [pc, #40]	; (8007b48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007b20:	e002      	b.n	8007b28 <LoopFillZerobss>

08007b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007b22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007b24:	f842 3b04 	str.w	r3, [r2], #4

08007b28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <LoopForever+0x16>)
	cmp	r2, r3
 8007b2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007b2c:	d3f9      	bcc.n	8007b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007b2e:	f015 fa1f 	bl	801cf70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b32:	f7fe f895 	bl	8005c60 <main>

08007b36 <LoopForever>:

LoopForever:
    b LoopForever
 8007b36:	e7fe      	b.n	8007b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007b38:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8007b3c:	08029aec 	.word	0x08029aec
	ldr	r0, =_sdata
 8007b40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007b44:	200007fc 	.word	0x200007fc
	ldr	r2, =_sbss
 8007b48:	20000800 	.word	0x20000800
	ldr	r3, = _ebss
 8007b4c:	2000a030 	.word	0x2000a030

08007b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b50:	e7fe      	b.n	8007b50 <ADC1_2_IRQHandler>

08007b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b5c:	2003      	movs	r0, #3
 8007b5e:	f001 fba8 	bl	80092b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007b62:	200f      	movs	r0, #15
 8007b64:	f7ff fbfe 	bl	8007364 <HAL_InitTick>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	71fb      	strb	r3, [r7, #7]
 8007b72:	e001      	b.n	8007b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007b74:	f7fe ff8e 	bl	8006a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007b78:	79fb      	ldrb	r3, [r7, #7]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007b88:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <HAL_IncTick+0x20>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <HAL_IncTick+0x24>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4413      	add	r3, r2
 8007b94:	4a04      	ldr	r2, [pc, #16]	; (8007ba8 <HAL_IncTick+0x24>)
 8007b96:	6013      	str	r3, [r2, #0]
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000310 	.word	0x20000310
 8007ba8:	200082c8 	.word	0x200082c8

08007bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  return uwTick;
 8007bb0:	4b03      	ldr	r3, [pc, #12]	; (8007bc0 <HAL_GetTick+0x14>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	200082c8 	.word	0x200082c8

08007bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bcc:	f7ff ffee 	bl	8007bac <HAL_GetTick>
 8007bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d005      	beq.n	8007bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <HAL_Delay+0x44>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bea:	bf00      	nop
 8007bec:	f7ff ffde 	bl	8007bac <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d8f7      	bhi.n	8007bec <HAL_Delay+0x28>
  {
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20000310 	.word	0x20000310

08007c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	609a      	str	r2, [r3, #8]
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	609a      	str	r2, [r3, #8]
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3360      	adds	r3, #96	; 0x60
 8007c86:	461a      	mov	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <LL_ADC_SetOffset+0x44>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	03fff000 	.word	0x03fff000

08007cbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3360      	adds	r3, #96	; 0x60
 8007cca:	461a      	mov	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3360      	adds	r3, #96	; 0x60
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	615a      	str	r2, [r3, #20]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b087      	sub	sp, #28
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3330      	adds	r3, #48	; 0x30
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	f003 030c 	and.w	r3, r3, #12
 8007d86:	4413      	add	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	211f      	movs	r1, #31
 8007d96:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	401a      	ands	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	0e9b      	lsrs	r3, r3, #26
 8007da2:	f003 011f 	and.w	r1, r3, #31
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f003 031f 	and.w	r3, r3, #31
 8007dac:	fa01 f303 	lsl.w	r3, r1, r3
 8007db0:	431a      	orrs	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007db6:	bf00      	nop
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b087      	sub	sp, #28
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	0e5b      	lsrs	r3, r3, #25
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	0d1b      	lsrs	r3, r3, #20
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	2107      	movs	r1, #7
 8007df0:	fa01 f303 	lsl.w	r3, r1, r3
 8007df4:	43db      	mvns	r3, r3
 8007df6:	401a      	ands	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	0d1b      	lsrs	r3, r3, #20
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	fa01 f303 	lsl.w	r3, r1, r3
 8007e06:	431a      	orrs	r2, r3
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0318 	and.w	r3, r3, #24
 8007e3a:	4908      	ldr	r1, [pc, #32]	; (8007e5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8007e3c:	40d9      	lsrs	r1, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	400b      	ands	r3, r1
 8007e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	0007ffff 	.word	0x0007ffff

08007e60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 031f 	and.w	r3, r3, #31
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6093      	str	r3, [r2, #8]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb4:	d101      	bne.n	8007eba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007edc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f04:	d101      	bne.n	8007f0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f2c:	f043 0201 	orr.w	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <LL_ADC_IsEnabled+0x18>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <LL_ADC_IsEnabled+0x1a>
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d101      	bne.n	8007fa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d101      	bne.n	8007fcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
	...

08007fdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b089      	sub	sp, #36	; 0x24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e139      	b.n	800826a <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fe fd69 	bl	8006adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff ff3f 	bl	8007ea0 <LL_ADC_IsDeepPowerDownEnabled>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff ff25 	bl	8007e7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff ff5a 	bl	8007ef0 <LL_ADC_IsInternalRegulatorEnabled>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d115      	bne.n	800806e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff ff3e 	bl	8007ec8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800804c:	4b89      	ldr	r3, [pc, #548]	; (8008274 <HAL_ADC_Init+0x298>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	4a89      	ldr	r2, [pc, #548]	; (8008278 <HAL_ADC_Init+0x29c>)
 8008054:	fba2 2303 	umull	r2, r3, r2, r3
 8008058:	099b      	lsrs	r3, r3, #6
 800805a:	3301      	adds	r3, #1
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008060:	e002      	b.n	8008068 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	3b01      	subs	r3, #1
 8008066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f9      	bne.n	8008062 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff ff3c 	bl	8007ef0 <LL_ADC_IsInternalRegulatorEnabled>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10d      	bne.n	800809a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	f043 0210 	orr.w	r2, r3, #16
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808e:	f043 0201 	orr.w	r2, r3, #1
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff75 	bl	8007f8e <LL_ADC_REG_IsConversionOngoing>
 80080a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 80d2 	bne.w	8008258 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 80ce 	bne.w	8008258 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80080c4:	f043 0202 	orr.w	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff ff35 	bl	8007f40 <LL_ADC_IsEnabled>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d115      	bne.n	8008108 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80080dc:	4867      	ldr	r0, [pc, #412]	; (800827c <HAL_ADC_Init+0x2a0>)
 80080de:	f7ff ff2f 	bl	8007f40 <LL_ADC_IsEnabled>
 80080e2:	4604      	mov	r4, r0
 80080e4:	4866      	ldr	r0, [pc, #408]	; (8008280 <HAL_ADC_Init+0x2a4>)
 80080e6:	f7ff ff2b 	bl	8007f40 <LL_ADC_IsEnabled>
 80080ea:	4603      	mov	r3, r0
 80080ec:	431c      	orrs	r4, r3
 80080ee:	4865      	ldr	r0, [pc, #404]	; (8008284 <HAL_ADC_Init+0x2a8>)
 80080f0:	f7ff ff26 	bl	8007f40 <LL_ADC_IsEnabled>
 80080f4:	4603      	mov	r3, r0
 80080f6:	4323      	orrs	r3, r4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4619      	mov	r1, r3
 8008102:	4861      	ldr	r0, [pc, #388]	; (8008288 <HAL_ADC_Init+0x2ac>)
 8008104:	f7ff fd82 	bl	8007c0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7e5b      	ldrb	r3, [r3, #25]
 800810c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008112:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008118:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800811e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008126:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008128:	4313      	orrs	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d106      	bne.n	8008144 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	3b01      	subs	r3, #1
 800813c:	045b      	lsls	r3, r3, #17
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	4313      	orrs	r3, r2
 8008142:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	4313      	orrs	r3, r2
 800815e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	4b49      	ldr	r3, [pc, #292]	; (800828c <HAL_ADC_Init+0x2b0>)
 8008168:	4013      	ands	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	69b9      	ldr	r1, [r7, #24]
 8008170:	430b      	orrs	r3, r1
 8008172:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff ff08 	bl	8007f8e <LL_ADC_REG_IsConversionOngoing>
 800817e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff ff15 	bl	8007fb4 <LL_ADC_INJ_IsConversionOngoing>
 800818a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d140      	bne.n	8008214 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d13d      	bne.n	8008214 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7e1b      	ldrb	r3, [r3, #24]
 80081a0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081a2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80081ac:	4313      	orrs	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ba:	f023 0306 	bic.w	r3, r3, #6
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	69b9      	ldr	r1, [r7, #24]
 80081c4:	430b      	orrs	r3, r1
 80081c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d118      	bne.n	8008204 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081dc:	f023 0304 	bic.w	r3, r3, #4
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80081e8:	4311      	orrs	r1, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80081ee:	4311      	orrs	r1, r2
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081f4:	430a      	orrs	r2, r1
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0201 	orr.w	r2, r2, #1
 8008200:	611a      	str	r2, [r3, #16]
 8008202:	e007      	b.n	8008214 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d10c      	bne.n	8008236 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	f023 010f 	bic.w	r1, r3, #15
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	1e5a      	subs	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	631a      	str	r2, [r3, #48]	; 0x30
 8008234:	e007      	b.n	8008246 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 020f 	bic.w	r2, r2, #15
 8008244:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	f043 0201 	orr.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	659a      	str	r2, [r3, #88]	; 0x58
 8008256:	e007      	b.n	8008268 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825c:	f043 0210 	orr.w	r2, r3, #16
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008268:	7ffb      	ldrb	r3, [r7, #31]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3724      	adds	r7, #36	; 0x24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd90      	pop	{r4, r7, pc}
 8008272:	bf00      	nop
 8008274:	20000308 	.word	0x20000308
 8008278:	053e2d63 	.word	0x053e2d63
 800827c:	50040000 	.word	0x50040000
 8008280:	50040100 	.word	0x50040100
 8008284:	50040200 	.word	0x50040200
 8008288:	50040300 	.word	0x50040300
 800828c:	fff0c007 	.word	0xfff0c007

08008290 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008298:	4857      	ldr	r0, [pc, #348]	; (80083f8 <HAL_ADC_Start+0x168>)
 800829a:	f7ff fde1 	bl	8007e60 <LL_ADC_GetMultimode>
 800829e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fe72 	bl	8007f8e <LL_ADC_REG_IsConversionOngoing>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 809c 	bne.w	80083ea <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_ADC_Start+0x30>
 80082bc:	2302      	movs	r3, #2
 80082be:	e097      	b.n	80083f0 <HAL_ADC_Start+0x160>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fd79 	bl	8008dc0 <ADC_Enable>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f040 8083 	bne.w	80083e0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a42      	ldr	r2, [pc, #264]	; (80083fc <HAL_ADC_Start+0x16c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d002      	beq.n	80082fe <HAL_ADC_Start+0x6e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	e000      	b.n	8008300 <HAL_ADC_Start+0x70>
 80082fe:	4b40      	ldr	r3, [pc, #256]	; (8008400 <HAL_ADC_Start+0x170>)
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	4293      	cmp	r3, r2
 8008306:	d002      	beq.n	800830e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d105      	bne.n	800831a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008326:	d106      	bne.n	8008336 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832c:	f023 0206 	bic.w	r2, r3, #6
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	65da      	str	r2, [r3, #92]	; 0x5c
 8008334:	e002      	b.n	800833c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	221c      	movs	r2, #28
 8008342:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a2a      	ldr	r2, [pc, #168]	; (80083fc <HAL_ADC_Start+0x16c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d002      	beq.n	800835c <HAL_ADC_Start+0xcc>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	e000      	b.n	800835e <HAL_ADC_Start+0xce>
 800835c:	4b28      	ldr	r3, [pc, #160]	; (8008400 <HAL_ADC_Start+0x170>)
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6812      	ldr	r2, [r2, #0]
 8008362:	4293      	cmp	r3, r2
 8008364:	d008      	beq.n	8008378 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b05      	cmp	r3, #5
 8008370:	d002      	beq.n	8008378 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b09      	cmp	r3, #9
 8008376:	d114      	bne.n	80083a2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800838e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff fde3 	bl	8007f66 <LL_ADC_REG_StartConversion>
 80083a0:	e025      	b.n	80083ee <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a12      	ldr	r2, [pc, #72]	; (80083fc <HAL_ADC_Start+0x16c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d002      	beq.n	80083be <HAL_ADC_Start+0x12e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	e000      	b.n	80083c0 <HAL_ADC_Start+0x130>
 80083be:	4b10      	ldr	r3, [pc, #64]	; (8008400 <HAL_ADC_Start+0x170>)
 80083c0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00f      	beq.n	80083ee <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80083d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	659a      	str	r2, [r3, #88]	; 0x58
 80083de:	e006      	b.n	80083ee <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80083e8:	e001      	b.n	80083ee <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80083ea:	2302      	movs	r3, #2
 80083ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	50040300 	.word	0x50040300
 80083fc:	50040100 	.word	0x50040100
 8008400:	50040000 	.word	0x50040000

08008404 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008410:	4850      	ldr	r0, [pc, #320]	; (8008554 <HAL_ADC_Start_DMA+0x150>)
 8008412:	f7ff fd25 	bl	8007e60 <LL_ADC_GetMultimode>
 8008416:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fdb6 	bl	8007f8e <LL_ADC_REG_IsConversionOngoing>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 808e 	bne.w	8008546 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_ADC_Start_DMA+0x34>
 8008434:	2302      	movs	r3, #2
 8008436:	e089      	b.n	800854c <HAL_ADC_Start_DMA+0x148>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b05      	cmp	r3, #5
 800844a:	d002      	beq.n	8008452 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b09      	cmp	r3, #9
 8008450:	d172      	bne.n	8008538 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fcb4 	bl	8008dc0 <ADC_Enable>
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d165      	bne.n	800852e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a37      	ldr	r2, [pc, #220]	; (8008558 <HAL_ADC_Start_DMA+0x154>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d002      	beq.n	8008486 <HAL_ADC_Start_DMA+0x82>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	e000      	b.n	8008488 <HAL_ADC_Start_DMA+0x84>
 8008486:	4b35      	ldr	r3, [pc, #212]	; (800855c <HAL_ADC_Start_DMA+0x158>)
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	4293      	cmp	r3, r2
 800848e:	d002      	beq.n	8008496 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d006      	beq.n	80084bc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b2:	f023 0206 	bic.w	r2, r3, #6
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80084ba:	e002      	b.n	80084c2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	4a26      	ldr	r2, [pc, #152]	; (8008560 <HAL_ADC_Start_DMA+0x15c>)
 80084c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ce:	4a25      	ldr	r2, [pc, #148]	; (8008564 <HAL_ADC_Start_DMA+0x160>)
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d6:	4a24      	ldr	r2, [pc, #144]	; (8008568 <HAL_ADC_Start_DMA+0x164>)
 80084d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	221c      	movs	r2, #28
 80084e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 0210 	orr.w	r2, r2, #16
 80084f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0201 	orr.w	r2, r2, #1
 8008508:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3340      	adds	r3, #64	; 0x40
 8008514:	4619      	mov	r1, r3
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f001 fad5 	bl	8009ac8 <HAL_DMA_Start_IT>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff fd1d 	bl	8007f66 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800852c:	e00d      	b.n	800854a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8008536:	e008      	b.n	800854a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008544:	e001      	b.n	800854a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008546:	2302      	movs	r3, #2
 8008548:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	50040300 	.word	0x50040300
 8008558:	50040100 	.word	0x50040100
 800855c:	50040000 	.word	0x50040000
 8008560:	08008e85 	.word	0x08008e85
 8008564:	08008f5d 	.word	0x08008f5d
 8008568:	08008f79 	.word	0x08008f79

0800856c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b0b6      	sub	sp, #216	; 0xd8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_ADC_ConfigChannel+0x22>
 80085c6:	2302      	movs	r3, #2
 80085c8:	e3e3      	b.n	8008d92 <HAL_ADC_ConfigChannel+0x7ea>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fcd9 	bl	8007f8e <LL_ADC_REG_IsConversionOngoing>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f040 83c4 	bne.w	8008d6c <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	d824      	bhi.n	8008636 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	3b02      	subs	r3, #2
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d81b      	bhi.n	800862e <HAL_ADC_ConfigChannel+0x86>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <HAL_ADC_ConfigChannel+0x54>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008615 	.word	0x08008615
 8008604:	0800861d 	.word	0x0800861d
 8008608:	08008625 	.word	0x08008625
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	220c      	movs	r2, #12
 8008610:	605a      	str	r2, [r3, #4]
          break;
 8008612:	e011      	b.n	8008638 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2212      	movs	r2, #18
 8008618:	605a      	str	r2, [r3, #4]
          break;
 800861a:	e00d      	b.n	8008638 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2218      	movs	r2, #24
 8008620:	605a      	str	r2, [r3, #4]
          break;
 8008622:	e009      	b.n	8008638 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800862a:	605a      	str	r2, [r3, #4]
          break;
 800862c:	e004      	b.n	8008638 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2206      	movs	r2, #6
 8008632:	605a      	str	r2, [r3, #4]
          break;
 8008634:	e000      	b.n	8008638 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8008636:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	6859      	ldr	r1, [r3, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	f7ff fb90 	bl	8007d6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fc9d 	bl	8007f8e <LL_ADC_REG_IsConversionOngoing>
 8008654:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff fca9 	bl	8007fb4 <LL_ADC_INJ_IsConversionOngoing>
 8008662:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008666:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800866a:	2b00      	cmp	r3, #0
 800866c:	f040 81c1 	bne.w	80089f2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008674:	2b00      	cmp	r3, #0
 8008676:	f040 81bc 	bne.w	80089f2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008682:	d10f      	bne.n	80086a4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2200      	movs	r2, #0
 800868e:	4619      	mov	r1, r3
 8008690:	f7ff fb97 	bl	8007dc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fb3e 	bl	8007d1e <LL_ADC_SetSamplingTimeCommonConfig>
 80086a2:	e00e      	b.n	80086c2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6819      	ldr	r1, [r3, #0]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	461a      	mov	r2, r3
 80086b2:	f7ff fb86 	bl	8007dc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fb2e 	bl	8007d1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	08db      	lsrs	r3, r3, #3
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d00a      	beq.n	80086fa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6919      	ldr	r1, [r3, #16]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086f4:	f7ff fabe 	bl	8007c74 <LL_ADC_SetOffset>
 80086f8:	e17b      	b.n	80089f2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff fadb 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008706:	4603      	mov	r3, r0
 8008708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <HAL_ADC_ConfigChannel+0x17e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fad0 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 800871c:	4603      	mov	r3, r0
 800871e:	0e9b      	lsrs	r3, r3, #26
 8008720:	f003 021f 	and.w	r2, r3, #31
 8008724:	e01e      	b.n	8008764 <HAL_ADC_ConfigChannel+0x1bc>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2100      	movs	r1, #0
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fac5 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008732:	4603      	mov	r3, r0
 8008734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008738:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800873c:	fa93 f3a3 	rbit	r3, r3
 8008740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800874c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8008754:	2320      	movs	r3, #32
 8008756:	e004      	b.n	8008762 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8008758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800875c:	fab3 f383 	clz	r3, r3
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <HAL_ADC_ConfigChannel+0x1d4>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	0e9b      	lsrs	r3, r3, #26
 8008776:	f003 031f 	and.w	r3, r3, #31
 800877a:	e018      	b.n	80087ae <HAL_ADC_ConfigChannel+0x206>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008788:	fa93 f3a3 	rbit	r3, r3
 800878c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80087a0:	2320      	movs	r3, #32
 80087a2:	e004      	b.n	80087ae <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80087a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087a8:	fab3 f383 	clz	r3, r3
 80087ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d106      	bne.n	80087c0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fa94 	bl	8007ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2101      	movs	r1, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fa78 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10a      	bne.n	80087ec <HAL_ADC_ConfigChannel+0x244>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2101      	movs	r1, #1
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff fa6d 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80087e2:	4603      	mov	r3, r0
 80087e4:	0e9b      	lsrs	r3, r3, #26
 80087e6:	f003 021f 	and.w	r2, r3, #31
 80087ea:	e01e      	b.n	800882a <HAL_ADC_ConfigChannel+0x282>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2101      	movs	r1, #1
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fa62 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008802:	fa93 f3a3 	rbit	r3, r3
 8008806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800880a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800880e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800881a:	2320      	movs	r3, #32
 800881c:	e004      	b.n	8008828 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800881e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008822:	fab3 f383 	clz	r3, r3
 8008826:	b2db      	uxtb	r3, r3
 8008828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_ADC_ConfigChannel+0x29a>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	0e9b      	lsrs	r3, r3, #26
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	e018      	b.n	8008874 <HAL_ADC_ConfigChannel+0x2cc>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800884a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800884e:	fa93 f3a3 	rbit	r3, r3
 8008852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008856:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800885a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800885e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8008866:	2320      	movs	r3, #32
 8008868:	e004      	b.n	8008874 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800886a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800886e:	fab3 f383 	clz	r3, r3
 8008872:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008874:	429a      	cmp	r2, r3
 8008876:	d106      	bne.n	8008886 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2200      	movs	r2, #0
 800887e:	2101      	movs	r1, #1
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fa31 	bl	8007ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2102      	movs	r1, #2
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fa15 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008892:	4603      	mov	r3, r0
 8008894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <HAL_ADC_ConfigChannel+0x30a>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2102      	movs	r1, #2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fa0a 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80088a8:	4603      	mov	r3, r0
 80088aa:	0e9b      	lsrs	r3, r3, #26
 80088ac:	f003 021f 	and.w	r2, r3, #31
 80088b0:	e01e      	b.n	80088f0 <HAL_ADC_ConfigChannel+0x348>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2102      	movs	r1, #2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff f9ff 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 80088be:	4603      	mov	r3, r0
 80088c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c8:	fa93 f3a3 	rbit	r3, r3
 80088cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80088d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80088d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80088e0:	2320      	movs	r3, #32
 80088e2:	e004      	b.n	80088ee <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80088e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088e8:	fab3 f383 	clz	r3, r3
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <HAL_ADC_ConfigChannel+0x360>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0e9b      	lsrs	r3, r3, #26
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	e016      	b.n	8008936 <HAL_ADC_ConfigChannel+0x38e>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008914:	fa93 f3a3 	rbit	r3, r3
 8008918:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800891a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800891c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8008928:	2320      	movs	r3, #32
 800892a:	e004      	b.n	8008936 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800892c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008930:	fab3 f383 	clz	r3, r3
 8008934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008936:	429a      	cmp	r2, r3
 8008938:	d106      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	2102      	movs	r1, #2
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff f9d0 	bl	8007ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2103      	movs	r1, #3
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff f9b4 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008954:	4603      	mov	r3, r0
 8008956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <HAL_ADC_ConfigChannel+0x3cc>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2103      	movs	r1, #3
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff f9a9 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 800896a:	4603      	mov	r3, r0
 800896c:	0e9b      	lsrs	r3, r3, #26
 800896e:	f003 021f 	and.w	r2, r3, #31
 8008972:	e017      	b.n	80089a4 <HAL_ADC_ConfigChannel+0x3fc>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2103      	movs	r1, #3
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff f99e 	bl	8007cbc <LL_ADC_GetOffsetChannel>
 8008980:	4603      	mov	r3, r0
 8008982:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008986:	fa93 f3a3 	rbit	r3, r3
 800898a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800898c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800898e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8008996:	2320      	movs	r3, #32
 8008998:	e003      	b.n	80089a2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800899a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800899c:	fab3 f383 	clz	r3, r3
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d105      	bne.n	80089bc <HAL_ADC_ConfigChannel+0x414>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	0e9b      	lsrs	r3, r3, #26
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	e011      	b.n	80089e0 <HAL_ADC_ConfigChannel+0x438>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089c4:	fa93 f3a3 	rbit	r3, r3
 80089c8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80089ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80089ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80089d4:	2320      	movs	r3, #32
 80089d6:	e003      	b.n	80089e0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80089d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089da:	fab3 f383 	clz	r3, r3
 80089de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d106      	bne.n	80089f2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	2103      	movs	r1, #3
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff f97b 	bl	8007ce8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff faa2 	bl	8007f40 <LL_ADC_IsEnabled>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 8140 	bne.w	8008c84 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6818      	ldr	r0, [r3, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	6819      	ldr	r1, [r3, #0]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	461a      	mov	r2, r3
 8008a12:	f7ff fa01 	bl	8007e18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	4a8f      	ldr	r2, [pc, #572]	; (8008c58 <HAL_ADC_ConfigChannel+0x6b0>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	f040 8131 	bne.w	8008c84 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <HAL_ADC_ConfigChannel+0x4a2>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	0e9b      	lsrs	r3, r3, #26
 8008a38:	3301      	adds	r3, #1
 8008a3a:	f003 031f 	and.w	r3, r3, #31
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	bf94      	ite	ls
 8008a42:	2301      	movls	r3, #1
 8008a44:	2300      	movhi	r3, #0
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	e019      	b.n	8008a7e <HAL_ADC_ConfigChannel+0x4d6>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a52:	fa93 f3a3 	rbit	r3, r3
 8008a56:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a5a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8008a62:	2320      	movs	r3, #32
 8008a64:	e003      	b.n	8008a6e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8008a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a68:	fab3 f383 	clz	r3, r3
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	bf94      	ite	ls
 8008a78:	2301      	movls	r3, #1
 8008a7a:	2300      	movhi	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d079      	beq.n	8008b76 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d107      	bne.n	8008a9e <HAL_ADC_ConfigChannel+0x4f6>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	0e9b      	lsrs	r3, r3, #26
 8008a94:	3301      	adds	r3, #1
 8008a96:	069b      	lsls	r3, r3, #26
 8008a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a9c:	e015      	b.n	8008aca <HAL_ADC_ConfigChannel+0x522>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa6:	fa93 f3a3 	rbit	r3, r3
 8008aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aae:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	e003      	b.n	8008ac2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8008aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008abc:	fab3 f383 	clz	r3, r3
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	069b      	lsls	r3, r3, #26
 8008ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <HAL_ADC_ConfigChannel+0x542>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0e9b      	lsrs	r3, r3, #26
 8008adc:	3301      	adds	r3, #1
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae8:	e017      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x572>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af2:	fa93 f3a3 	rbit	r3, r3
 8008af6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008afa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8008b02:	2320      	movs	r3, #32
 8008b04:	e003      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8008b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b08:	fab3 f383 	clz	r3, r3
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	3301      	adds	r3, #1
 8008b10:	f003 031f 	and.w	r3, r3, #31
 8008b14:	2101      	movs	r1, #1
 8008b16:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1a:	ea42 0103 	orr.w	r1, r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <HAL_ADC_ConfigChannel+0x598>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	0e9b      	lsrs	r3, r3, #26
 8008b30:	3301      	adds	r3, #1
 8008b32:	f003 021f 	and.w	r2, r3, #31
 8008b36:	4613      	mov	r3, r2
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4413      	add	r3, r2
 8008b3c:	051b      	lsls	r3, r3, #20
 8008b3e:	e018      	b.n	8008b72 <HAL_ADC_ConfigChannel+0x5ca>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	fa93 f3a3 	rbit	r3, r3
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8008b58:	2320      	movs	r3, #32
 8008b5a:	e003      	b.n	8008b64 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5e:	fab3 f383 	clz	r3, r3
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	3301      	adds	r3, #1
 8008b66:	f003 021f 	and.w	r2, r3, #31
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b72:	430b      	orrs	r3, r1
 8008b74:	e081      	b.n	8008c7a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d107      	bne.n	8008b92 <HAL_ADC_ConfigChannel+0x5ea>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	0e9b      	lsrs	r3, r3, #26
 8008b88:	3301      	adds	r3, #1
 8008b8a:	069b      	lsls	r3, r3, #26
 8008b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b90:	e015      	b.n	8008bbe <HAL_ADC_ConfigChannel+0x616>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	fa93 f3a3 	rbit	r3, r3
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8008baa:	2320      	movs	r3, #32
 8008bac:	e003      	b.n	8008bb6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	fab3 f383 	clz	r3, r3
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	069b      	lsls	r3, r3, #26
 8008bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <HAL_ADC_ConfigChannel+0x636>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	0e9b      	lsrs	r3, r3, #26
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bdc:	e017      	b.n	8008c0e <HAL_ADC_ConfigChannel+0x666>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	fa93 f3a3 	rbit	r3, r3
 8008bea:	61fb      	str	r3, [r7, #28]
  return result;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8008bf6:	2320      	movs	r3, #32
 8008bf8:	e003      	b.n	8008c02 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	fab3 f383 	clz	r3, r3
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	3301      	adds	r3, #1
 8008c04:	f003 031f 	and.w	r3, r3, #31
 8008c08:	2101      	movs	r1, #1
 8008c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0e:	ea42 0103 	orr.w	r1, r2, r3
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10d      	bne.n	8008c3a <HAL_ADC_ConfigChannel+0x692>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	0e9b      	lsrs	r3, r3, #26
 8008c24:	3301      	adds	r3, #1
 8008c26:	f003 021f 	and.w	r2, r3, #31
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	4413      	add	r3, r2
 8008c30:	3b1e      	subs	r3, #30
 8008c32:	051b      	lsls	r3, r3, #20
 8008c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c38:	e01e      	b.n	8008c78 <HAL_ADC_ConfigChannel+0x6d0>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	fa93 f3a3 	rbit	r3, r3
 8008c46:	613b      	str	r3, [r7, #16]
  return result;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8008c52:	2320      	movs	r3, #32
 8008c54:	e006      	b.n	8008c64 <HAL_ADC_ConfigChannel+0x6bc>
 8008c56:	bf00      	nop
 8008c58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	fab3 f383 	clz	r3, r3
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	3301      	adds	r3, #1
 8008c66:	f003 021f 	and.w	r2, r3, #31
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	3b1e      	subs	r3, #30
 8008c72:	051b      	lsls	r3, r3, #20
 8008c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c78:	430b      	orrs	r3, r1
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	6892      	ldr	r2, [r2, #8]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f7ff f89f 	bl	8007dc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	4b44      	ldr	r3, [pc, #272]	; (8008d9c <HAL_ADC_ConfigChannel+0x7f4>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d07a      	beq.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008c90:	4843      	ldr	r0, [pc, #268]	; (8008da0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008c92:	f7fe ffe1 	bl	8007c58 <LL_ADC_GetCommonPathInternalCh>
 8008c96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a41      	ldr	r2, [pc, #260]	; (8008da4 <HAL_ADC_ConfigChannel+0x7fc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d12c      	bne.n	8008cfe <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d126      	bne.n	8008cfe <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a3c      	ldr	r2, [pc, #240]	; (8008da8 <HAL_ADC_ConfigChannel+0x800>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d004      	beq.n	8008cc4 <HAL_ADC_ConfigChannel+0x71c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a3b      	ldr	r2, [pc, #236]	; (8008dac <HAL_ADC_ConfigChannel+0x804>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d15d      	bne.n	8008d80 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008cc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4834      	ldr	r0, [pc, #208]	; (8008da0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008cd0:	f7fe ffaf 	bl	8007c32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008cd4:	4b36      	ldr	r3, [pc, #216]	; (8008db0 <HAL_ADC_ConfigChannel+0x808>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	099b      	lsrs	r3, r3, #6
 8008cda:	4a36      	ldr	r2, [pc, #216]	; (8008db4 <HAL_ADC_ConfigChannel+0x80c>)
 8008cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce0:	099b      	lsrs	r3, r3, #6
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008cee:	e002      	b.n	8008cf6 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1f9      	bne.n	8008cf0 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008cfc:	e040      	b.n	8008d80 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a2d      	ldr	r2, [pc, #180]	; (8008db8 <HAL_ADC_ConfigChannel+0x810>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d118      	bne.n	8008d3a <HAL_ADC_ConfigChannel+0x792>
 8008d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d112      	bne.n	8008d3a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a23      	ldr	r2, [pc, #140]	; (8008da8 <HAL_ADC_ConfigChannel+0x800>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d004      	beq.n	8008d28 <HAL_ADC_ConfigChannel+0x780>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a22      	ldr	r2, [pc, #136]	; (8008dac <HAL_ADC_ConfigChannel+0x804>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d12d      	bne.n	8008d84 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d30:	4619      	mov	r1, r3
 8008d32:	481b      	ldr	r0, [pc, #108]	; (8008da0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d34:	f7fe ff7d 	bl	8007c32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d38:	e024      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <HAL_ADC_ConfigChannel+0x814>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d120      	bne.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11a      	bne.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a14      	ldr	r2, [pc, #80]	; (8008da8 <HAL_ADC_ConfigChannel+0x800>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d115      	bne.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d62:	4619      	mov	r1, r3
 8008d64:	480e      	ldr	r0, [pc, #56]	; (8008da0 <HAL_ADC_ConfigChannel+0x7f8>)
 8008d66:	f7fe ff64 	bl	8007c32 <LL_ADC_SetCommonPathInternalCh>
 8008d6a:	e00c      	b.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	f043 0220 	orr.w	r2, r3, #32
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008d7e:	e002      	b.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008d84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008d8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	37d8      	adds	r7, #216	; 0xd8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	80080000 	.word	0x80080000
 8008da0:	50040300 	.word	0x50040300
 8008da4:	c7520000 	.word	0xc7520000
 8008da8:	50040000 	.word	0x50040000
 8008dac:	50040200 	.word	0x50040200
 8008db0:	20000308 	.word	0x20000308
 8008db4:	053e2d63 	.word	0x053e2d63
 8008db8:	cb840000 	.word	0xcb840000
 8008dbc:	80000001 	.word	0x80000001

08008dc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff f8b7 	bl	8007f40 <LL_ADC_IsEnabled>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d14d      	bne.n	8008e74 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <ADC_Enable+0xc0>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00d      	beq.n	8008e02 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dea:	f043 0210 	orr.w	r2, r3, #16
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df6:	f043 0201 	orr.w	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e039      	b.n	8008e76 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff f886 	bl	8007f18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008e0c:	f7fe fece 	bl	8007bac <HAL_GetTick>
 8008e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e12:	e028      	b.n	8008e66 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff f891 	bl	8007f40 <LL_ADC_IsEnabled>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d104      	bne.n	8008e2e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff f875 	bl	8007f18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e2e:	f7fe febd 	bl	8007bac <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d914      	bls.n	8008e66 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d00d      	beq.n	8008e66 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4e:	f043 0210 	orr.w	r2, r3, #16
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e007      	b.n	8008e76 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d1cf      	bne.n	8008e14 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	8000003f 	.word	0x8000003f

08008e84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d14b      	bne.n	8008f36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d021      	beq.n	8008efc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe ff41 	bl	8007d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d032      	beq.n	8008f2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d12b      	bne.n	8008f2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11f      	bne.n	8008f2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef2:	f043 0201 	orr.w	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	659a      	str	r2, [r3, #88]	; 0x58
 8008efa:	e018      	b.n	8008f2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d111      	bne.n	8008f2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d105      	bne.n	8008f2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	f043 0201 	orr.w	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fb1c 	bl	800856c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008f34:	e00e      	b.n	8008f54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3a:	f003 0310 	and.w	r3, r3, #16
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7ff fb26 	bl	8008594 <HAL_ADC_ErrorCallback>
}
 8008f48:	e004      	b.n	8008f54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fb08 	bl	8008580 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f96:	f043 0204 	orr.w	r2, r3, #4
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff faf8 	bl	8008594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fa4:	bf00      	nop
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <LL_ADC_IsEnabled>:
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <LL_ADC_IsEnabled+0x18>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <LL_ADC_IsEnabled+0x1a>
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d101      	bne.n	8008fea <LL_ADC_REG_IsConversionOngoing+0x18>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e000      	b.n	8008fec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b0a1      	sub	sp, #132	; 0x84
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009012:	2302      	movs	r3, #2
 8009014:	e093      	b.n	800913e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800901e:	2300      	movs	r3, #0
 8009020:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8009022:	2300      	movs	r3, #0
 8009024:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a47      	ldr	r2, [pc, #284]	; (8009148 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d102      	bne.n	8009036 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009030:	4b46      	ldr	r3, [pc, #280]	; (800914c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	e001      	b.n	800903a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	f043 0220 	orr.w	r2, r3, #32
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e072      	b.n	800913e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffb9 	bl	8008fd2 <LL_ADC_REG_IsConversionOngoing>
 8009060:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff ffb3 	bl	8008fd2 <LL_ADC_REG_IsConversionOngoing>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d154      	bne.n	800911c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009074:	2b00      	cmp	r3, #0
 8009076:	d151      	bne.n	800911c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009078:	4b35      	ldr	r3, [pc, #212]	; (8009150 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800907a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02c      	beq.n	80090de <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	6859      	ldr	r1, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009096:	035b      	lsls	r3, r3, #13
 8009098:	430b      	orrs	r3, r1
 800909a:	431a      	orrs	r2, r3
 800909c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800909e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090a0:	4829      	ldr	r0, [pc, #164]	; (8009148 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80090a2:	f7ff ff83 	bl	8008fac <LL_ADC_IsEnabled>
 80090a6:	4604      	mov	r4, r0
 80090a8:	4828      	ldr	r0, [pc, #160]	; (800914c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80090aa:	f7ff ff7f 	bl	8008fac <LL_ADC_IsEnabled>
 80090ae:	4603      	mov	r3, r0
 80090b0:	431c      	orrs	r4, r3
 80090b2:	4828      	ldr	r0, [pc, #160]	; (8009154 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80090b4:	f7ff ff7a 	bl	8008fac <LL_ADC_IsEnabled>
 80090b8:	4603      	mov	r3, r0
 80090ba:	4323      	orrs	r3, r4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d137      	bne.n	8009130 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80090c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80090c8:	f023 030f 	bic.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	6811      	ldr	r1, [r2, #0]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	6892      	ldr	r2, [r2, #8]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	431a      	orrs	r2, r3
 80090d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090dc:	e028      	b.n	8009130 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80090de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090ea:	4817      	ldr	r0, [pc, #92]	; (8009148 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80090ec:	f7ff ff5e 	bl	8008fac <LL_ADC_IsEnabled>
 80090f0:	4604      	mov	r4, r0
 80090f2:	4816      	ldr	r0, [pc, #88]	; (800914c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80090f4:	f7ff ff5a 	bl	8008fac <LL_ADC_IsEnabled>
 80090f8:	4603      	mov	r3, r0
 80090fa:	431c      	orrs	r4, r3
 80090fc:	4815      	ldr	r0, [pc, #84]	; (8009154 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80090fe:	f7ff ff55 	bl	8008fac <LL_ADC_IsEnabled>
 8009102:	4603      	mov	r3, r0
 8009104:	4323      	orrs	r3, r4
 8009106:	2b00      	cmp	r3, #0
 8009108:	d112      	bne.n	8009130 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800910a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009112:	f023 030f 	bic.w	r3, r3, #15
 8009116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009118:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800911a:	e009      	b.n	8009130 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009120:	f043 0220 	orr.w	r2, r3, #32
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800912e:	e000      	b.n	8009132 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009130:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800913a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800913e:	4618      	mov	r0, r3
 8009140:	3784      	adds	r7, #132	; 0x84
 8009142:	46bd      	mov	sp, r7
 8009144:	bd90      	pop	{r4, r7, pc}
 8009146:	bf00      	nop
 8009148:	50040000 	.word	0x50040000
 800914c:	50040100 	.word	0x50040100
 8009150:	50040300 	.word	0x50040300
 8009154:	50040200 	.word	0x50040200

08009158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <__NVIC_SetPriorityGrouping+0x44>)
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009174:	4013      	ands	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800918a:	4a04      	ldr	r2, [pc, #16]	; (800919c <__NVIC_SetPriorityGrouping+0x44>)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	60d3      	str	r3, [r2, #12]
}
 8009190:	bf00      	nop
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	e000ed00 	.word	0xe000ed00

080091a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091a4:	4b04      	ldr	r3, [pc, #16]	; (80091b8 <__NVIC_GetPriorityGrouping+0x18>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	0a1b      	lsrs	r3, r3, #8
 80091aa:	f003 0307 	and.w	r3, r3, #7
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	e000ed00 	.word	0xe000ed00

080091bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db0b      	blt.n	80091e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	f003 021f 	and.w	r2, r3, #31
 80091d4:	4907      	ldr	r1, [pc, #28]	; (80091f4 <__NVIC_EnableIRQ+0x38>)
 80091d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091da:	095b      	lsrs	r3, r3, #5
 80091dc:	2001      	movs	r0, #1
 80091de:	fa00 f202 	lsl.w	r2, r0, r2
 80091e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	e000e100 	.word	0xe000e100

080091f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009208:	2b00      	cmp	r3, #0
 800920a:	db0a      	blt.n	8009222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	490c      	ldr	r1, [pc, #48]	; (8009244 <__NVIC_SetPriority+0x4c>)
 8009212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009216:	0112      	lsls	r2, r2, #4
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	440b      	add	r3, r1
 800921c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009220:	e00a      	b.n	8009238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	4908      	ldr	r1, [pc, #32]	; (8009248 <__NVIC_SetPriority+0x50>)
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	3b04      	subs	r3, #4
 8009230:	0112      	lsls	r2, r2, #4
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	440b      	add	r3, r1
 8009236:	761a      	strb	r2, [r3, #24]
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	e000e100 	.word	0xe000e100
 8009248:	e000ed00 	.word	0xe000ed00

0800924c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800924c:	b480      	push	{r7}
 800924e:	b089      	sub	sp, #36	; 0x24
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f1c3 0307 	rsb	r3, r3, #7
 8009266:	2b04      	cmp	r3, #4
 8009268:	bf28      	it	cs
 800926a:	2304      	movcs	r3, #4
 800926c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	3304      	adds	r3, #4
 8009272:	2b06      	cmp	r3, #6
 8009274:	d902      	bls.n	800927c <NVIC_EncodePriority+0x30>
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	3b03      	subs	r3, #3
 800927a:	e000      	b.n	800927e <NVIC_EncodePriority+0x32>
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	fa02 f303 	lsl.w	r3, r2, r3
 800928a:	43da      	mvns	r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	401a      	ands	r2, r3
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009294:	f04f 31ff 	mov.w	r1, #4294967295
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	fa01 f303 	lsl.w	r3, r1, r3
 800929e:	43d9      	mvns	r1, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092a4:	4313      	orrs	r3, r2
         );
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3724      	adds	r7, #36	; 0x24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ff4c 	bl	8009158 <__NVIC_SetPriorityGrouping>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80092da:	f7ff ff61 	bl	80091a0 <__NVIC_GetPriorityGrouping>
 80092de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	6978      	ldr	r0, [r7, #20]
 80092e6:	f7ff ffb1 	bl	800924c <NVIC_EncodePriority>
 80092ea:	4602      	mov	r2, r0
 80092ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092f0:	4611      	mov	r1, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff ff80 	bl	80091f8 <__NVIC_SetPriority>
}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800930a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ff54 	bl	80091bc <__NVIC_EnableIRQ>
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e014      	b.n	8009358 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	791b      	ldrb	r3, [r3, #4]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7fd fcbe 	bl	8006cc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2202      	movs	r2, #2
 8009348:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	795b      	ldrb	r3, [r3, #5]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <HAL_DAC_Start_DMA+0x1e>
 800937a:	2302      	movs	r3, #2
 800937c:	e0ab      	b.n	80094d6 <HAL_DAC_Start_DMA+0x176>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2202      	movs	r2, #2
 8009388:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d12f      	bne.n	80093f0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	4a52      	ldr	r2, [pc, #328]	; (80094e0 <HAL_DAC_Start_DMA+0x180>)
 8009396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	4a51      	ldr	r2, [pc, #324]	; (80094e4 <HAL_DAC_Start_DMA+0x184>)
 800939e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	4a50      	ldr	r2, [pc, #320]	; (80094e8 <HAL_DAC_Start_DMA+0x188>)
 80093a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	2b08      	cmp	r3, #8
 80093bc:	d013      	beq.n	80093e6 <HAL_DAC_Start_DMA+0x86>
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d845      	bhi.n	8009450 <HAL_DAC_Start_DMA+0xf0>
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_DAC_Start_DMA+0x72>
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d005      	beq.n	80093dc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80093d0:	e03e      	b.n	8009450 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	613b      	str	r3, [r7, #16]
        break;
 80093da:	e03c      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	330c      	adds	r3, #12
 80093e2:	613b      	str	r3, [r7, #16]
        break;
 80093e4:	e037      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3310      	adds	r3, #16
 80093ec:	613b      	str	r3, [r7, #16]
        break;
 80093ee:	e032      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	4a3d      	ldr	r2, [pc, #244]	; (80094ec <HAL_DAC_Start_DMA+0x18c>)
 80093f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	4a3c      	ldr	r2, [pc, #240]	; (80094f0 <HAL_DAC_Start_DMA+0x190>)
 80093fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a3b      	ldr	r2, [pc, #236]	; (80094f4 <HAL_DAC_Start_DMA+0x194>)
 8009406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009416:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	2b08      	cmp	r3, #8
 800941c:	d013      	beq.n	8009446 <HAL_DAC_Start_DMA+0xe6>
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	2b08      	cmp	r3, #8
 8009422:	d817      	bhi.n	8009454 <HAL_DAC_Start_DMA+0xf4>
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_DAC_Start_DMA+0xd2>
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	2b04      	cmp	r3, #4
 800942e:	d005      	beq.n	800943c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009430:	e010      	b.n	8009454 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3314      	adds	r3, #20
 8009438:	613b      	str	r3, [r7, #16]
        break;
 800943a:	e00c      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3318      	adds	r3, #24
 8009442:	613b      	str	r3, [r7, #16]
        break;
 8009444:	e007      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	331c      	adds	r3, #28
 800944c:	613b      	str	r3, [r7, #16]
        break;
 800944e:	e002      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009450:	bf00      	nop
 8009452:	e000      	b.n	8009456 <HAL_DAC_Start_DMA+0xf6>
        break;
 8009454:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d111      	bne.n	8009480 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800946a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6898      	ldr	r0, [r3, #8]
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	f000 fb27 	bl	8009ac8 <HAL_DMA_Start_IT>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]
 800947e:	e010      	b.n	80094a2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800948e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68d8      	ldr	r0, [r3, #12]
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	f000 fb15 	bl	8009ac8 <HAL_DMA_Start_IT>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10c      	bne.n	80094c8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	2201      	movs	r2, #1
 80094bc:	409a      	lsls	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e005      	b.n	80094d4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f043 0204 	orr.w	r2, r3, #4
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	08009831 	.word	0x08009831
 80094e4:	08009853 	.word	0x08009853
 80094e8:	0800986f 	.word	0x0800986f
 80094ec:	080098ed 	.word	0x080098ed
 80094f0:	0800990f 	.word	0x0800990f
 80094f4:	0800992b 	.word	0x0800992b

080094f8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800950a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950e:	d120      	bne.n	8009552 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800951a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800951e:	d118      	bne.n	8009552 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2204      	movs	r2, #4
 8009524:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f043 0201 	orr.w	r2, r3, #1
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800953a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800954a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f84b 	bl	80095e8 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800955c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009560:	d120      	bne.n	80095a4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800956c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009570:	d118      	bne.n	80095a4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2204      	movs	r2, #4
 8009576:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f043 0202 	orr.w	r2, r3, #2
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800958c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800959c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f99a 	bl	80098d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	795b      	ldrb	r3, [r3, #5]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_DAC_ConfigChannel+0x1c>
 8009614:	2302      	movs	r3, #2
 8009616:	e107      	b.n	8009828 <HAL_DAC_ConfigChannel+0x22c>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2202      	movs	r2, #2
 8009622:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b04      	cmp	r3, #4
 800962a:	d174      	bne.n	8009716 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800962c:	f7fe fabe 	bl	8007bac <HAL_GetTick>
 8009630:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d134      	bne.n	80096a2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009638:	e011      	b.n	800965e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800963a:	f7fe fab7 	bl	8007bac <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	2b01      	cmp	r3, #1
 8009646:	d90a      	bls.n	800965e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f043 0208 	orr.w	r2, r3, #8
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2203      	movs	r2, #3
 8009658:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e0e4      	b.n	8009828 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e6      	bne.n	800963a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800966c:	2001      	movs	r0, #1
 800966e:	f7fe faa9 	bl	8007bc4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	6992      	ldr	r2, [r2, #24]
 800967a:	641a      	str	r2, [r3, #64]	; 0x40
 800967c:	e01e      	b.n	80096bc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800967e:	f7fe fa95 	bl	8007bac <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b01      	cmp	r3, #1
 800968a:	d90a      	bls.n	80096a2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f043 0208 	orr.w	r2, r3, #8
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2203      	movs	r2, #3
 800969c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e0c2      	b.n	8009828 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dbe8      	blt.n	800967e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80096ac:	2001      	movs	r0, #1
 80096ae:	f7fe fa89 	bl	8007bc4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	6992      	ldr	r2, [r2, #24]
 80096ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80096cc:	fa01 f303 	lsl.w	r3, r1, r3
 80096d0:	43db      	mvns	r3, r3
 80096d2:	ea02 0103 	and.w	r1, r2, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	69da      	ldr	r2, [r3, #28]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f003 0310 	and.w	r3, r3, #16
 80096e0:	409a      	lsls	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	21ff      	movs	r1, #255	; 0xff
 80096f8:	fa01 f303 	lsl.w	r3, r1, r3
 80096fc:	43db      	mvns	r3, r3
 80096fe:	ea02 0103 	and.w	r1, r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6a1a      	ldr	r2, [r3, #32]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f003 0310 	and.w	r3, r3, #16
 800970c:	409a      	lsls	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d11d      	bne.n	800975a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f003 0310 	and.w	r3, r3, #16
 800972c:	221f      	movs	r2, #31
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	43db      	mvns	r3, r3
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	4013      	ands	r3, r2
 8009738:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009760:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2207      	movs	r2, #7
 800976a:	fa02 f303 	lsl.w	r3, r2, r3
 800976e:	43db      	mvns	r3, r3
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	4013      	ands	r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	431a      	orrs	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	4313      	orrs	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6819      	ldr	r1, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f003 0310 	and.w	r3, r3, #16
 80097ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43da      	mvns	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	400a      	ands	r2, r1
 80097be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f003 0310 	and.w	r3, r3, #16
 80097ce:	f640 72fc 	movw	r2, #4092	; 0xffc
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	43db      	mvns	r3, r3
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	4013      	ands	r3, r2
 80097dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f003 0310 	and.w	r3, r3, #16
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	fa02 f303 	lsl.w	r3, r2, r3
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6819      	ldr	r1, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f003 0310 	and.w	r3, r3, #16
 800980a:	22c0      	movs	r2, #192	; 0xc0
 800980c:	fa02 f303 	lsl.w	r3, r2, r3
 8009810:	43da      	mvns	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	400a      	ands	r2, r1
 8009818:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff feb4 	bl	80095ac <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2201      	movs	r2, #1
 8009848:	711a      	strb	r2, [r3, #4]
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff fead 	bl	80095c0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f043 0204 	orr.w	r2, r3, #4
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff fea3 	bl	80095d4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	711a      	strb	r2, [r3, #4]
}
 8009894:	bf00      	nop
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f7ff ffce 	bl	800989c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	711a      	strb	r2, [r3, #4]
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f7ff ffc7 	bl	80098b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009936:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f043 0204 	orr.w	r2, r3, #4
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff ffbd 	bl	80098c4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	711a      	strb	r2, [r3, #4]
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e098      	b.n	8009a9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	4b4d      	ldr	r3, [pc, #308]	; (8009aa8 <HAL_DMA_Init+0x150>)
 8009972:	429a      	cmp	r2, r3
 8009974:	d80f      	bhi.n	8009996 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	4b4b      	ldr	r3, [pc, #300]	; (8009aac <HAL_DMA_Init+0x154>)
 800997e:	4413      	add	r3, r2
 8009980:	4a4b      	ldr	r2, [pc, #300]	; (8009ab0 <HAL_DMA_Init+0x158>)
 8009982:	fba2 2303 	umull	r2, r3, r2, r3
 8009986:	091b      	lsrs	r3, r3, #4
 8009988:	009a      	lsls	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a48      	ldr	r2, [pc, #288]	; (8009ab4 <HAL_DMA_Init+0x15c>)
 8009992:	641a      	str	r2, [r3, #64]	; 0x40
 8009994:	e00e      	b.n	80099b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	4b46      	ldr	r3, [pc, #280]	; (8009ab8 <HAL_DMA_Init+0x160>)
 800999e:	4413      	add	r3, r2
 80099a0:	4a43      	ldr	r2, [pc, #268]	; (8009ab0 <HAL_DMA_Init+0x158>)
 80099a2:	fba2 2303 	umull	r2, r3, r2, r3
 80099a6:	091b      	lsrs	r3, r3, #4
 80099a8:	009a      	lsls	r2, r3, #2
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a42      	ldr	r2, [pc, #264]	; (8009abc <HAL_DMA_Init+0x164>)
 80099b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80099ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80099d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a0e:	d039      	beq.n	8009a84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	4a27      	ldr	r2, [pc, #156]	; (8009ab4 <HAL_DMA_Init+0x15c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d11a      	bne.n	8009a50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a1a:	4b29      	ldr	r3, [pc, #164]	; (8009ac0 <HAL_DMA_Init+0x168>)
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f003 031c 	and.w	r3, r3, #28
 8009a26:	210f      	movs	r1, #15
 8009a28:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	4924      	ldr	r1, [pc, #144]	; (8009ac0 <HAL_DMA_Init+0x168>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009a34:	4b22      	ldr	r3, [pc, #136]	; (8009ac0 <HAL_DMA_Init+0x168>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6859      	ldr	r1, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a40:	f003 031c 	and.w	r3, r3, #28
 8009a44:	fa01 f303 	lsl.w	r3, r1, r3
 8009a48:	491d      	ldr	r1, [pc, #116]	; (8009ac0 <HAL_DMA_Init+0x168>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	e019      	b.n	8009a84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a50:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <HAL_DMA_Init+0x16c>)
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a58:	f003 031c 	and.w	r3, r3, #28
 8009a5c:	210f      	movs	r1, #15
 8009a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a62:	43db      	mvns	r3, r3
 8009a64:	4917      	ldr	r1, [pc, #92]	; (8009ac4 <HAL_DMA_Init+0x16c>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009a6a:	4b16      	ldr	r3, [pc, #88]	; (8009ac4 <HAL_DMA_Init+0x16c>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6859      	ldr	r1, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	f003 031c 	and.w	r3, r3, #28
 8009a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7e:	4911      	ldr	r1, [pc, #68]	; (8009ac4 <HAL_DMA_Init+0x16c>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40020407 	.word	0x40020407
 8009aac:	bffdfff8 	.word	0xbffdfff8
 8009ab0:	cccccccd 	.word	0xcccccccd
 8009ab4:	40020000 	.word	0x40020000
 8009ab8:	bffdfbf8 	.word	0xbffdfbf8
 8009abc:	40020400 	.word	0x40020400
 8009ac0:	400200a8 	.word	0x400200a8
 8009ac4:	400204a8 	.word	0x400204a8

08009ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_DMA_Start_IT+0x20>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e04b      	b.n	8009b80 <HAL_DMA_Start_IT+0xb8>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d13a      	bne.n	8009b72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0201 	bic.w	r2, r2, #1
 8009b18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f95f 	bl	8009de4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d008      	beq.n	8009b40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 020e 	orr.w	r2, r2, #14
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e00f      	b.n	8009b60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0204 	bic.w	r2, r2, #4
 8009b4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 020a 	orr.w	r2, r2, #10
 8009b5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0201 	orr.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	e005      	b.n	8009b7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d008      	beq.n	8009bb2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2204      	movs	r2, #4
 8009ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e022      	b.n	8009bf8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 020e 	bic.w	r2, r2, #14
 8009bc0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd6:	f003 021c 	and.w	r2, r3, #28
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	2101      	movs	r1, #1
 8009be0:	fa01 f202 	lsl.w	r2, r1, r2
 8009be4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d005      	beq.n	8009c28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2204      	movs	r2, #4
 8009c20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	73fb      	strb	r3, [r7, #15]
 8009c26:	e029      	b.n	8009c7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 020e 	bic.w	r2, r2, #14
 8009c36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0201 	bic.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4c:	f003 021c 	and.w	r2, r3, #28
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c54:	2101      	movs	r1, #1
 8009c56:	fa01 f202 	lsl.w	r2, r1, r2
 8009c5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4798      	blx	r3
    }
  }
  return status;
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	f003 031c 	and.w	r3, r3, #28
 8009ca6:	2204      	movs	r2, #4
 8009ca8:	409a      	lsls	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d026      	beq.n	8009d00 <HAL_DMA_IRQHandler+0x7a>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d021      	beq.n	8009d00 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d107      	bne.n	8009cda <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0204 	bic.w	r2, r2, #4
 8009cd8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cde:	f003 021c 	and.w	r2, r3, #28
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	2104      	movs	r1, #4
 8009ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8009cec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d071      	beq.n	8009dda <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009cfe:	e06c      	b.n	8009dda <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d04:	f003 031c 	and.w	r3, r3, #28
 8009d08:	2202      	movs	r2, #2
 8009d0a:	409a      	lsls	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d02e      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xec>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d029      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0320 	and.w	r3, r3, #32
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 020a 	bic.w	r2, r2, #10
 8009d3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d48:	f003 021c 	and.w	r2, r3, #28
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d50:	2102      	movs	r1, #2
 8009d52:	fa01 f202 	lsl.w	r2, r1, r2
 8009d56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d038      	beq.n	8009dda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009d70:	e033      	b.n	8009dda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d76:	f003 031c 	and.w	r3, r3, #28
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	409a      	lsls	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4013      	ands	r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d02a      	beq.n	8009ddc <HAL_DMA_IRQHandler+0x156>
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d025      	beq.n	8009ddc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f022 020e 	bic.w	r2, r2, #14
 8009d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da4:	f003 021c 	and.w	r2, r3, #28
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f202 	lsl.w	r2, r1, r2
 8009db2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
}
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df6:	f003 021c 	and.w	r2, r3, #28
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	2101      	movs	r1, #1
 8009e00:	fa01 f202 	lsl.w	r2, r1, r2
 8009e04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	2b10      	cmp	r3, #16
 8009e14:	d108      	bne.n	8009e28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e26:	e007      	b.n	8009e38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	60da      	str	r2, [r3, #12]
}
 8009e38:	bf00      	nop
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e52:	e166      	b.n	800a122 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	2101      	movs	r1, #1
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e60:	4013      	ands	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 8158 	beq.w	800a11c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d00b      	beq.n	8009e8c <HAL_GPIO_Init+0x48>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d007      	beq.n	8009e8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009e80:	2b11      	cmp	r3, #17
 8009e82:	d003      	beq.n	8009e8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b12      	cmp	r3, #18
 8009e8a:	d130      	bne.n	8009eee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	2203      	movs	r2, #3
 8009e98:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eca:	43db      	mvns	r3, r3
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	091b      	lsrs	r3, r3, #4
 8009ed8:	f003 0201 	and.w	r2, r3, #1
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	005b      	lsls	r3, r3, #1
 8009ef8:	2203      	movs	r2, #3
 8009efa:	fa02 f303 	lsl.w	r3, r2, r3
 8009efe:	43db      	mvns	r3, r3
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4013      	ands	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d003      	beq.n	8009f2e <HAL_GPIO_Init+0xea>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	2b12      	cmp	r3, #18
 8009f2c:	d123      	bne.n	8009f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	08da      	lsrs	r2, r3, #3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3208      	adds	r2, #8
 8009f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	220f      	movs	r2, #15
 8009f46:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	691a      	ldr	r2, [r3, #16]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	08da      	lsrs	r2, r3, #3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3208      	adds	r2, #8
 8009f70:	6939      	ldr	r1, [r7, #16]
 8009f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	2203      	movs	r2, #3
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43db      	mvns	r3, r3
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f003 0203 	and.w	r2, r3, #3
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80b2 	beq.w	800a11c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fb8:	4b61      	ldr	r3, [pc, #388]	; (800a140 <HAL_GPIO_Init+0x2fc>)
 8009fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fbc:	4a60      	ldr	r2, [pc, #384]	; (800a140 <HAL_GPIO_Init+0x2fc>)
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	6613      	str	r3, [r2, #96]	; 0x60
 8009fc4:	4b5e      	ldr	r3, [pc, #376]	; (800a140 <HAL_GPIO_Init+0x2fc>)
 8009fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009fd0:	4a5c      	ldr	r2, [pc, #368]	; (800a144 <HAL_GPIO_Init+0x300>)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	089b      	lsrs	r3, r3, #2
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 0303 	and.w	r3, r3, #3
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	220f      	movs	r2, #15
 8009fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fec:	43db      	mvns	r3, r3
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ffa:	d02b      	beq.n	800a054 <HAL_GPIO_Init+0x210>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a52      	ldr	r2, [pc, #328]	; (800a148 <HAL_GPIO_Init+0x304>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d025      	beq.n	800a050 <HAL_GPIO_Init+0x20c>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a51      	ldr	r2, [pc, #324]	; (800a14c <HAL_GPIO_Init+0x308>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d01f      	beq.n	800a04c <HAL_GPIO_Init+0x208>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a50      	ldr	r2, [pc, #320]	; (800a150 <HAL_GPIO_Init+0x30c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d019      	beq.n	800a048 <HAL_GPIO_Init+0x204>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a4f      	ldr	r2, [pc, #316]	; (800a154 <HAL_GPIO_Init+0x310>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_GPIO_Init+0x200>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a4e      	ldr	r2, [pc, #312]	; (800a158 <HAL_GPIO_Init+0x314>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00d      	beq.n	800a040 <HAL_GPIO_Init+0x1fc>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a4d      	ldr	r2, [pc, #308]	; (800a15c <HAL_GPIO_Init+0x318>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d007      	beq.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a4c      	ldr	r2, [pc, #304]	; (800a160 <HAL_GPIO_Init+0x31c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d101      	bne.n	800a038 <HAL_GPIO_Init+0x1f4>
 800a034:	2307      	movs	r3, #7
 800a036:	e00e      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a038:	2308      	movs	r3, #8
 800a03a:	e00c      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a03c:	2306      	movs	r3, #6
 800a03e:	e00a      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a040:	2305      	movs	r3, #5
 800a042:	e008      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a044:	2304      	movs	r3, #4
 800a046:	e006      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a048:	2303      	movs	r3, #3
 800a04a:	e004      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a04c:	2302      	movs	r3, #2
 800a04e:	e002      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <HAL_GPIO_Init+0x212>
 800a054:	2300      	movs	r3, #0
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	f002 0203 	and.w	r2, r2, #3
 800a05c:	0092      	lsls	r2, r2, #2
 800a05e:	4093      	lsls	r3, r2
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a066:	4937      	ldr	r1, [pc, #220]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	089b      	lsrs	r3, r3, #2
 800a06c:	3302      	adds	r3, #2
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a074:	4b3b      	ldr	r3, [pc, #236]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	43db      	mvns	r3, r3
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4013      	ands	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d003      	beq.n	800a098 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a098:	4a32      	ldr	r2, [pc, #200]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a09e:	4b31      	ldr	r3, [pc, #196]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	43db      	mvns	r3, r3
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a0c2:	4a28      	ldr	r2, [pc, #160]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a0c8:	4b26      	ldr	r3, [pc, #152]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	43db      	mvns	r3, r3
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a0ec:	4a1d      	ldr	r2, [pc, #116]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	43db      	mvns	r3, r3
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4013      	ands	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a116:	4a13      	ldr	r2, [pc, #76]	; (800a164 <HAL_GPIO_Init+0x320>)
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	3301      	adds	r3, #1
 800a120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	fa22 f303 	lsr.w	r3, r2, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f47f ae91 	bne.w	8009e54 <HAL_GPIO_Init+0x10>
  }
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	40021000 	.word	0x40021000
 800a144:	40010000 	.word	0x40010000
 800a148:	48000400 	.word	0x48000400
 800a14c:	48000800 	.word	0x48000800
 800a150:	48000c00 	.word	0x48000c00
 800a154:	48001000 	.word	0x48001000
 800a158:	48001400 	.word	0x48001400
 800a15c:	48001800 	.word	0x48001800
 800a160:	48001c00 	.word	0x48001c00
 800a164:	40010400 	.word	0x40010400

0800a168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	887b      	ldrh	r3, [r7, #2]
 800a17a:	4013      	ands	r3, r2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a180:	2301      	movs	r3, #1
 800a182:	73fb      	strb	r3, [r7, #15]
 800a184:	e001      	b.n	800a18a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a186:	2300      	movs	r3, #0
 800a188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	807b      	strh	r3, [r7, #2]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a1a8:	787b      	ldrb	r3, [r7, #1]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a1ae:	887a      	ldrh	r2, [r7, #2]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a1b4:	e002      	b.n	800a1bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a1b6:	887a      	ldrh	r2, [r7, #2]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a1d2:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a1d4:	695a      	ldr	r2, [r3, #20]
 800a1d6:	88fb      	ldrh	r3, [r7, #6]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d006      	beq.n	800a1ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a1de:	4a05      	ldr	r2, [pc, #20]	; (800a1f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a1e0:	88fb      	ldrh	r3, [r7, #6]
 800a1e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a1e4:	88fb      	ldrh	r3, [r7, #6]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 f806 	bl	800a1f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	40010400 	.word	0x40010400

0800a1f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a202:	bf00      	nop
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e081      	b.n	800a324 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7fc fdb7 	bl	8006da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2224      	movs	r2, #36	; 0x24
 800a23e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 0201 	bic.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a25e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a26e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d107      	bne.n	800a288 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a284:	609a      	str	r2, [r3, #8]
 800a286:	e006      	b.n	800a296 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a294:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d104      	bne.n	800a2a8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68da      	ldr	r2, [r3, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	691a      	ldr	r2, [r3, #16]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	ea42 0103 	orr.w	r1, r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	021a      	lsls	r2, r3, #8
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	69d9      	ldr	r1, [r3, #28]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1a      	ldr	r2, [r3, #32]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f042 0201 	orr.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	461a      	mov	r2, r3
 800a338:	460b      	mov	r3, r1
 800a33a:	817b      	strh	r3, [r7, #10]
 800a33c:	4613      	mov	r3, r2
 800a33e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b20      	cmp	r3, #32
 800a34a:	f040 80da 	bne.w	800a502 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a354:	2b01      	cmp	r3, #1
 800a356:	d101      	bne.n	800a35c <HAL_I2C_Master_Transmit+0x30>
 800a358:	2302      	movs	r3, #2
 800a35a:	e0d3      	b.n	800a504 <HAL_I2C_Master_Transmit+0x1d8>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a364:	f7fd fc22 	bl	8007bac <HAL_GetTick>
 800a368:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	2319      	movs	r3, #25
 800a370:	2201      	movs	r2, #1
 800a372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 f9e6 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e0be      	b.n	800a504 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2221      	movs	r2, #33	; 0x21
 800a38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2210      	movs	r2, #16
 800a392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	893a      	ldrh	r2, [r7, #8]
 800a3a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	2bff      	cmp	r3, #255	; 0xff
 800a3b6:	d90e      	bls.n	800a3d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	22ff      	movs	r2, #255	; 0xff
 800a3bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	8979      	ldrh	r1, [r7, #10]
 800a3c6:	4b51      	ldr	r3, [pc, #324]	; (800a50c <HAL_I2C_Master_Transmit+0x1e0>)
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 fb48 	bl	800aa64 <I2C_TransferConfig>
 800a3d4:	e06c      	b.n	800a4b0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	8979      	ldrh	r1, [r7, #10]
 800a3e8:	4b48      	ldr	r3, [pc, #288]	; (800a50c <HAL_I2C_Master_Transmit+0x1e0>)
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 fb37 	bl	800aa64 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a3f6:	e05b      	b.n	800a4b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	6a39      	ldr	r1, [r7, #32]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f9e3 	bl	800a7c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e07b      	b.n	800a504 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a434:	3b01      	subs	r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a440:	b29b      	uxth	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d034      	beq.n	800a4b0 <HAL_I2C_Master_Transmit+0x184>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d130      	bne.n	800a4b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	2200      	movs	r2, #0
 800a456:	2180      	movs	r1, #128	; 0x80
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f975 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e04d      	b.n	800a504 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	2bff      	cmp	r3, #255	; 0xff
 800a470:	d90e      	bls.n	800a490 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	8979      	ldrh	r1, [r7, #10]
 800a480:	2300      	movs	r3, #0
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 faeb 	bl	800aa64 <I2C_TransferConfig>
 800a48e:	e00f      	b.n	800a4b0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a494:	b29a      	uxth	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	8979      	ldrh	r1, [r7, #10]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 fada 	bl	800aa64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d19e      	bne.n	800a3f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	6a39      	ldr	r1, [r7, #32]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f9c2 	bl	800a848 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e01a      	b.n	800a504 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6859      	ldr	r1, [r3, #4]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <HAL_I2C_Master_Transmit+0x1e4>)
 800a4e2:	400b      	ands	r3, r1
 800a4e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e000      	b.n	800a504 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
  }
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	80002000 	.word	0x80002000
 800a510:	fe00e800 	.word	0xfe00e800

0800a514 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af02      	add	r7, sp, #8
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	607a      	str	r2, [r7, #4]
 800a51e:	461a      	mov	r2, r3
 800a520:	460b      	mov	r3, r1
 800a522:	817b      	strh	r3, [r7, #10]
 800a524:	4613      	mov	r3, r2
 800a526:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b20      	cmp	r3, #32
 800a532:	f040 80db 	bne.w	800a6ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_I2C_Master_Receive+0x30>
 800a540:	2302      	movs	r3, #2
 800a542:	e0d4      	b.n	800a6ee <HAL_I2C_Master_Receive+0x1da>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a54c:	f7fd fb2e 	bl	8007bac <HAL_GetTick>
 800a550:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2319      	movs	r3, #25
 800a558:	2201      	movs	r2, #1
 800a55a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 f8f2 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e0bf      	b.n	800a6ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2222      	movs	r2, #34	; 0x22
 800a572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2210      	movs	r2, #16
 800a57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	893a      	ldrh	r2, [r7, #8]
 800a58e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	2bff      	cmp	r3, #255	; 0xff
 800a59e:	d90e      	bls.n	800a5be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	22ff      	movs	r2, #255	; 0xff
 800a5a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	8979      	ldrh	r1, [r7, #10]
 800a5ae:	4b52      	ldr	r3, [pc, #328]	; (800a6f8 <HAL_I2C_Master_Receive+0x1e4>)
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fa54 	bl	800aa64 <I2C_TransferConfig>
 800a5bc:	e06d      	b.n	800a69a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	8979      	ldrh	r1, [r7, #10]
 800a5d0:	4b49      	ldr	r3, [pc, #292]	; (800a6f8 <HAL_I2C_Master_Receive+0x1e4>)
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 fa43 	bl	800aa64 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a5de:	e05c      	b.n	800a69a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	6a39      	ldr	r1, [r7, #32]
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 f96b 	bl	800a8c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e07c      	b.n	800a6ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a610:	3b01      	subs	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	b29a      	uxth	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d034      	beq.n	800a69a <HAL_I2C_Master_Receive+0x186>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a634:	2b00      	cmp	r3, #0
 800a636:	d130      	bne.n	800a69a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	2200      	movs	r2, #0
 800a640:	2180      	movs	r1, #128	; 0x80
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f880 	bl	800a748 <I2C_WaitOnFlagUntilTimeout>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e04d      	b.n	800a6ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a656:	b29b      	uxth	r3, r3
 800a658:	2bff      	cmp	r3, #255	; 0xff
 800a65a:	d90e      	bls.n	800a67a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	22ff      	movs	r2, #255	; 0xff
 800a660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a666:	b2da      	uxtb	r2, r3
 800a668:	8979      	ldrh	r1, [r7, #10]
 800a66a:	2300      	movs	r3, #0
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f000 f9f6 	bl	800aa64 <I2C_TransferConfig>
 800a678:	e00f      	b.n	800a69a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67e:	b29a      	uxth	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	8979      	ldrh	r1, [r7, #10]
 800a68c:	2300      	movs	r3, #0
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f9e5 	bl	800aa64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d19d      	bne.n	800a5e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	6a39      	ldr	r1, [r7, #32]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f8cd 	bl	800a848 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e01a      	b.n	800a6ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6859      	ldr	r1, [r3, #4]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <HAL_I2C_Master_Receive+0x1e8>)
 800a6cc:	400b      	ands	r3, r1
 800a6ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e000      	b.n	800a6ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a6ec:	2302      	movs	r3, #2
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	80002400 	.word	0x80002400
 800a6fc:	fe00e800 	.word	0xfe00e800

0800a700 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b02      	cmp	r3, #2
 800a714:	d103      	bne.n	800a71e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d007      	beq.n	800a73c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	619a      	str	r2, [r3, #24]
  }
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	4613      	mov	r3, r2
 800a756:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a758:	e022      	b.n	800a7a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d01e      	beq.n	800a7a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a762:	f7fd fa23 	bl	8007bac <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d302      	bcc.n	800a778 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d113      	bne.n	800a7a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77c:	f043 0220 	orr.w	r2, r3, #32
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2220      	movs	r2, #32
 800a788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e00f      	b.n	800a7c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2301      	moveq	r3, #1
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d0cd      	beq.n	800a75a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7d4:	e02c      	b.n	800a830 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	68b9      	ldr	r1, [r7, #8]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 f8dc 	bl	800a998 <I2C_IsAcknowledgeFailed>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e02a      	b.n	800a840 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d01e      	beq.n	800a830 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7f2:	f7fd f9db 	bl	8007bac <HAL_GetTick>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d302      	bcc.n	800a808 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d113      	bne.n	800a830 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80c:	f043 0220 	orr.w	r2, r3, #32
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2220      	movs	r2, #32
 800a818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e007      	b.n	800a840 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	f003 0302 	and.w	r3, r3, #2
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d1cb      	bne.n	800a7d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a854:	e028      	b.n	800a8a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 f89c 	bl	800a998 <I2C_IsAcknowledgeFailed>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e026      	b.n	800a8b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a86a:	f7fd f99f 	bl	8007bac <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	429a      	cmp	r2, r3
 800a878:	d302      	bcc.n	800a880 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d113      	bne.n	800a8a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a884:	f043 0220 	orr.w	r2, r3, #32
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2220      	movs	r2, #32
 800a890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e007      	b.n	800a8b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d1cf      	bne.n	800a856 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a8cc:	e055      	b.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	68b9      	ldr	r1, [r7, #8]
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 f860 	bl	800a998 <I2C_IsAcknowledgeFailed>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e053      	b.n	800a98a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	f003 0320 	and.w	r3, r3, #32
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	d129      	bne.n	800a944 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d105      	bne.n	800a90a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	e03f      	b.n	800a98a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2220      	movs	r2, #32
 800a910:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6859      	ldr	r1, [r3, #4]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4b1d      	ldr	r3, [pc, #116]	; (800a994 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a91e:	400b      	ands	r3, r1
 800a920:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e022      	b.n	800a98a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a944:	f7fd f932 	bl	8007bac <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	429a      	cmp	r2, r3
 800a952:	d302      	bcc.n	800a95a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10f      	bne.n	800a97a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95e:	f043 0220 	orr.w	r2, r3, #32
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2220      	movs	r2, #32
 800a96a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e007      	b.n	800a98a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b04      	cmp	r3, #4
 800a986:	d1a2      	bne.n	800a8ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	fe00e800 	.word	0xfe00e800

0800a998 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	2b10      	cmp	r3, #16
 800a9b0:	d151      	bne.n	800aa56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9b2:	e022      	b.n	800a9fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ba:	d01e      	beq.n	800a9fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9bc:	f7fd f8f6 	bl	8007bac <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d302      	bcc.n	800a9d2 <I2C_IsAcknowledgeFailed+0x3a>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d113      	bne.n	800a9fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d6:	f043 0220 	orr.w	r2, r3, #32
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e02e      	b.n	800aa58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d1d5      	bne.n	800a9b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2210      	movs	r2, #16
 800aa0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2220      	movs	r2, #32
 800aa16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7ff fe71 	bl	800a700 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6859      	ldr	r1, [r3, #4]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa2a:	400b      	ands	r3, r1
 800aa2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa32:	f043 0204 	orr.w	r2, r3, #4
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	fe00e800 	.word	0xfe00e800

0800aa64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	607b      	str	r3, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	817b      	strh	r3, [r7, #10]
 800aa72:	4613      	mov	r3, r2
 800aa74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	0d5b      	lsrs	r3, r3, #21
 800aa80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aa84:	4b0d      	ldr	r3, [pc, #52]	; (800aabc <I2C_TransferConfig+0x58>)
 800aa86:	430b      	orrs	r3, r1
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	ea02 0103 	and.w	r1, r2, r3
 800aa8e:	897b      	ldrh	r3, [r7, #10]
 800aa90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa94:	7a7b      	ldrb	r3, [r7, #9]
 800aa96:	041b      	lsls	r3, r3, #16
 800aa98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	03ff63ff 	.word	0x03ff63ff

0800aac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b20      	cmp	r3, #32
 800aad4:	d138      	bne.n	800ab48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d101      	bne.n	800aae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e032      	b.n	800ab4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2224      	movs	r2, #36	; 0x24
 800aaf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0201 	bic.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6819      	ldr	r1, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0201 	orr.w	r2, r2, #1
 800ab32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e000      	b.n	800ab4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab48:	2302      	movs	r3, #2
  }
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b20      	cmp	r3, #32
 800ab6a:	d139      	bne.n	800abe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d101      	bne.n	800ab7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab76:	2302      	movs	r3, #2
 800ab78:	e033      	b.n	800abe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2224      	movs	r2, #36	; 0x24
 800ab86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0201 	bic.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aba8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	021b      	lsls	r3, r3, #8
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2220      	movs	r2, #32
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	e000      	b.n	800abe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800abe0:	2302      	movs	r3, #2
  }
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800abee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abf0:	b08f      	sub	sp, #60	; 0x3c
 800abf2:	af0a      	add	r7, sp, #40	; 0x28
 800abf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e116      	b.n	800ae2e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f00e fc30 	bl	8019480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2203      	movs	r2, #3
 800ac24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f006 f889 	bl	8010d56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	603b      	str	r3, [r7, #0]
 800ac4a:	687e      	ldr	r6, [r7, #4]
 800ac4c:	466d      	mov	r5, sp
 800ac4e:	f106 0410 	add.w	r4, r6, #16
 800ac52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ac5e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ac62:	1d33      	adds	r3, r6, #4
 800ac64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac66:	6838      	ldr	r0, [r7, #0]
 800ac68:	f005 ff9b 	bl	8010ba2 <USB_CoreInit>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2202      	movs	r2, #2
 800ac76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e0d7      	b.n	800ae2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2100      	movs	r1, #0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f006 f877 	bl	8010d78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73fb      	strb	r3, [r7, #15]
 800ac8e:	e04a      	b.n	800ad26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ac90:	7bfa      	ldrb	r2, [r7, #15]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	1a9b      	subs	r3, r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	333d      	adds	r3, #61	; 0x3d
 800aca0:	2201      	movs	r2, #1
 800aca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aca4:	7bfa      	ldrb	r2, [r7, #15]
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	4613      	mov	r3, r2
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	333c      	adds	r3, #60	; 0x3c
 800acb4:	7bfa      	ldrb	r2, [r7, #15]
 800acb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800acb8:	7bfa      	ldrb	r2, [r7, #15]
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	b298      	uxth	r0, r3
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	00db      	lsls	r3, r3, #3
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	440b      	add	r3, r1
 800acca:	3342      	adds	r3, #66	; 0x42
 800accc:	4602      	mov	r2, r0
 800acce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800acd0:	7bfa      	ldrb	r2, [r7, #15]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	333f      	adds	r3, #63	; 0x3f
 800ace0:	2200      	movs	r2, #0
 800ace2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ace4:	7bfa      	ldrb	r2, [r7, #15]
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	4613      	mov	r3, r2
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	440b      	add	r3, r1
 800acf2:	3344      	adds	r3, #68	; 0x44
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800acf8:	7bfa      	ldrb	r2, [r7, #15]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	1a9b      	subs	r3, r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	3348      	adds	r3, #72	; 0x48
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad0c:	7bfa      	ldrb	r2, [r7, #15]
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	3350      	adds	r3, #80	; 0x50
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	3301      	adds	r3, #1
 800ad24:	73fb      	strb	r3, [r7, #15]
 800ad26:	7bfa      	ldrb	r2, [r7, #15]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d3af      	bcc.n	800ac90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
 800ad34:	e044      	b.n	800adc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad36:	7bfa      	ldrb	r2, [r7, #15]
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	1a9b      	subs	r3, r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ad48:	2200      	movs	r2, #0
 800ad4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ad4c:	7bfa      	ldrb	r2, [r7, #15]
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	4613      	mov	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	440b      	add	r3, r1
 800ad5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ad5e:	7bfa      	ldrb	r2, [r7, #15]
 800ad60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ad62:	7bfa      	ldrb	r2, [r7, #15]
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	4613      	mov	r3, r2
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	440b      	add	r3, r1
 800ad70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ad74:	2200      	movs	r2, #0
 800ad76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ad78:	7bfa      	ldrb	r2, [r7, #15]
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	440b      	add	r3, r1
 800ad86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ad8e:	7bfa      	ldrb	r2, [r7, #15]
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4613      	mov	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	440b      	add	r3, r1
 800ad9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ada4:	7bfa      	ldrb	r2, [r7, #15]
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4613      	mov	r3, r2
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	1a9b      	subs	r3, r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	440b      	add	r3, r1
 800adb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	3301      	adds	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
 800adc0:	7bfa      	ldrb	r2, [r7, #15]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d3b5      	bcc.n	800ad36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	603b      	str	r3, [r7, #0]
 800add0:	687e      	ldr	r6, [r7, #4]
 800add2:	466d      	mov	r5, sp
 800add4:	f106 0410 	add.w	r4, r6, #16
 800add8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800adda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800addc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800adde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ade0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ade4:	e885 0003 	stmia.w	r5, {r0, r1}
 800ade8:	1d33      	adds	r3, r6, #4
 800adea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adec:	6838      	ldr	r0, [r7, #0]
 800adee:	f005 ffed 	bl	8010dcc <USB_DevInit>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e014      	b.n	800ae2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d102      	bne.n	800ae22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 ff8f 	bl	800bd40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f006 ff6f 	bl	8011d0a <USB_DevDisconnect>

  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d101      	bne.n	800ae52 <HAL_PCD_Start+0x1c>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e01c      	b.n	800ae8c <HAL_PCD_Start+0x56>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d105      	bne.n	800ae6e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f005 ff5e 	bl	8010d34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f006 ff23 	bl	8011cc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae94:	b590      	push	{r4, r7, lr}
 800ae96:	b08d      	sub	sp, #52	; 0x34
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f006 ffe1 	bl	8011e72 <USB_GetMode>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f040 838f 	bne.w	800b5d6 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f006 ff45 	bl	8011d4c <USB_ReadInterrupts>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 8385 	beq.w	800b5d4 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f006 ff3c 	bl	8011d4c <USB_ReadInterrupts>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d107      	bne.n	800aeee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	695a      	ldr	r2, [r3, #20]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f002 0202 	and.w	r2, r2, #2
 800aeec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f006 ff2a 	bl	8011d4c <USB_ReadInterrupts>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f003 0310 	and.w	r3, r3, #16
 800aefe:	2b10      	cmp	r3, #16
 800af00:	d161      	bne.n	800afc6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	699a      	ldr	r2, [r3, #24]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0210 	bic.w	r2, r2, #16
 800af10:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	f003 020f 	and.w	r2, r3, #15
 800af1e:	4613      	mov	r3, r2
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	4413      	add	r3, r2
 800af2e:	3304      	adds	r3, #4
 800af30:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	0c5b      	lsrs	r3, r3, #17
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d124      	bne.n	800af88 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800af44:	4013      	ands	r3, r2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d035      	beq.n	800afb6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	091b      	lsrs	r3, r3, #4
 800af52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800af54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af58:	b29b      	uxth	r3, r3
 800af5a:	461a      	mov	r2, r3
 800af5c:	6a38      	ldr	r0, [r7, #32]
 800af5e:	f006 fd90 	bl	8011a82 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	091b      	lsrs	r3, r3, #4
 800af6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af6e:	441a      	add	r2, r3
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	091b      	lsrs	r3, r3, #4
 800af7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af80:	441a      	add	r2, r3
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	619a      	str	r2, [r3, #24]
 800af86:	e016      	b.n	800afb6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	0c5b      	lsrs	r3, r3, #17
 800af8c:	f003 030f 	and.w	r3, r3, #15
 800af90:	2b06      	cmp	r3, #6
 800af92:	d110      	bne.n	800afb6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af9a:	2208      	movs	r2, #8
 800af9c:	4619      	mov	r1, r3
 800af9e:	6a38      	ldr	r0, [r7, #32]
 800afa0:	f006 fd6f 	bl	8011a82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	699a      	ldr	r2, [r3, #24]
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	091b      	lsrs	r3, r3, #4
 800afac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afb0:	441a      	add	r2, r3
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	699a      	ldr	r2, [r3, #24]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f042 0210 	orr.w	r2, r2, #16
 800afc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4618      	mov	r0, r3
 800afcc:	f006 febe 	bl	8011d4c <USB_ReadInterrupts>
 800afd0:	4603      	mov	r3, r0
 800afd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afda:	d16e      	bne.n	800b0ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f006 fec4 	bl	8011d72 <USB_ReadDevAllOutEpInterrupt>
 800afea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800afec:	e062      	b.n	800b0b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d057      	beq.n	800b0a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affe:	b2d2      	uxtb	r2, r2
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f006 fee9 	bl	8011dda <USB_ReadDevOutEPInterrupt>
 800b008:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00c      	beq.n	800b02e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b020:	461a      	mov	r2, r3
 800b022:	2301      	movs	r3, #1
 800b024:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fdaf 	bl	800bb8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f003 0308 	and.w	r3, r3, #8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00c      	beq.n	800b052 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	461a      	mov	r2, r3
 800b046:	2308      	movs	r3, #8
 800b048:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b04a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fdeb 	bl	800bc28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f003 0310 	and.w	r3, r3, #16
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d008      	beq.n	800b06e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b068:	461a      	mov	r2, r3
 800b06a:	2310      	movs	r3, #16
 800b06c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f003 0320 	and.w	r3, r3, #32
 800b074:	2b00      	cmp	r3, #0
 800b076:	d008      	beq.n	800b08a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b084:	461a      	mov	r2, r3
 800b086:	2320      	movs	r3, #32
 800b088:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d009      	beq.n	800b0a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	015a      	lsls	r2, r3, #5
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d199      	bne.n	800afee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f006 fe44 	bl	8011d4c <USB_ReadInterrupts>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0ce:	f040 8087 	bne.w	800b1e0 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f006 fe65 	bl	8011da6 <USB_ReadDevAllInEpInterrupt>
 800b0dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b0e2:	e07a      	b.n	800b1da <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d06f      	beq.n	800b1ce <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f4:	b2d2      	uxtb	r2, r2
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f006 fe8c 	bl	8011e16 <USB_ReadDevInEPInterrupt>
 800b0fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d020      	beq.n	800b14c <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	f003 030f 	and.w	r3, r3, #15
 800b110:	2201      	movs	r2, #1
 800b112:	fa02 f303 	lsl.w	r3, r2, r3
 800b116:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	43db      	mvns	r3, r3
 800b124:	69f9      	ldr	r1, [r7, #28]
 800b126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b12a:	4013      	ands	r3, r2
 800b12c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	4413      	add	r3, r2
 800b136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13a:	461a      	mov	r2, r3
 800b13c:	2301      	movs	r3, #1
 800b13e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	b2db      	uxtb	r3, r3
 800b144:	4619      	mov	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f00e fa59 	bl	80195fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	f003 0308 	and.w	r3, r3, #8
 800b152:	2b00      	cmp	r3, #0
 800b154:	d008      	beq.n	800b168 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b162:	461a      	mov	r2, r3
 800b164:	2308      	movs	r3, #8
 800b166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f003 0310 	and.w	r3, r3, #16
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d008      	beq.n	800b184 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17e:	461a      	mov	r2, r3
 800b180:	2310      	movs	r3, #16
 800b182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d008      	beq.n	800b1a0 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	4413      	add	r3, r2
 800b196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19a:	461a      	mov	r2, r3
 800b19c:	2340      	movs	r3, #64	; 0x40
 800b19e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f003 0302 	and.w	r3, r3, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d008      	beq.n	800b1bc <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b1c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fc56 	bl	800ba7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	085b      	lsrs	r3, r3, #1
 800b1d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d181      	bne.n	800b0e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f006 fdb1 	bl	8011d4c <USB_ReadInterrupts>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1f4:	d122      	bne.n	800b23c <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b204:	f023 0301 	bic.w	r3, r3, #1
 800b208:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b210:	2b01      	cmp	r3, #1
 800b212:	d108      	bne.n	800b226 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b21c:	2100      	movs	r1, #0
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f00e fd46 	bl	8019cb0 <HAL_PCDEx_LPM_Callback>
 800b224:	e002      	b.n	800b22c <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f00e fa56 	bl	80196d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b23a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4618      	mov	r0, r3
 800b242:	f006 fd83 	bl	8011d4c <USB_ReadInterrupts>
 800b246:	4603      	mov	r3, r0
 800b248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b250:	d112      	bne.n	800b278 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d102      	bne.n	800b268 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f00e fa12 	bl	801968c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	695a      	ldr	r2, [r3, #20]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b276:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f006 fd65 	bl	8011d4c <USB_ReadInterrupts>
 800b282:	4603      	mov	r3, r0
 800b284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b28c:	d121      	bne.n	800b2d2 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	695a      	ldr	r2, [r3, #20]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b29c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d111      	bne.n	800b2cc <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2b6:	089b      	lsrs	r3, r3, #2
 800b2b8:	f003 020f 	and.w	r2, r3, #15
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f00e fcf3 	bl	8019cb0 <HAL_PCDEx_LPM_Callback>
 800b2ca:	e002      	b.n	800b2d2 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f00e f9dd 	bl	801968c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f006 fd38 	bl	8011d4c <USB_ReadInterrupts>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e6:	f040 80c5 	bne.w	800b474 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2110      	movs	r1, #16
 800b304:	4618      	mov	r0, r3
 800b306:	f005 fead 	bl	8011064 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b30a:	2300      	movs	r3, #0
 800b30c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b30e:	e056      	b.n	800b3be <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31c:	461a      	mov	r2, r3
 800b31e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b322:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b334:	0151      	lsls	r1, r2, #5
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	440a      	add	r2, r1
 800b33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b342:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b35e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b362:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b370:	461a      	mov	r2, r3
 800b372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b376:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b388:	0151      	lsls	r1, r2, #5
 800b38a:	69fa      	ldr	r2, [r7, #28]
 800b38c:	440a      	add	r2, r1
 800b38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b392:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b396:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3a8:	0151      	lsls	r1, r2, #5
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d3a3      	bcc.n	800b310 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	69fa      	ldr	r2, [r7, #28]
 800b3d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b3da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d016      	beq.n	800b412 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ee:	69fa      	ldr	r2, [r7, #28]
 800b3f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3f4:	f043 030b 	orr.w	r3, r3, #11
 800b3f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b40a:	f043 030b 	orr.w	r3, r3, #11
 800b40e:	6453      	str	r3, [r2, #68]	; 0x44
 800b410:	e015      	b.n	800b43e <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	69fa      	ldr	r2, [r7, #28]
 800b41c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b424:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b428:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b438:	f043 030b 	orr.w	r3, r3, #11
 800b43c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69fa      	ldr	r2, [r7, #28]
 800b448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b44c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b450:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f006 fd38 	bl	8011ed4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	695a      	ldr	r2, [r3, #20]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f006 fc67 	bl	8011d4c <USB_ReadInterrupts>
 800b47e:	4603      	mov	r3, r0
 800b480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b488:	d124      	bne.n	800b4d4 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f006 fcfd 	bl	8011e8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4618      	mov	r0, r3
 800b49a:	f005 fe44 	bl	8011126 <USB_GetDevSpeed>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681c      	ldr	r4, [r3, #0]
 800b4aa:	f001 fa85 	bl	800c9b8 <HAL_RCC_GetHCLKFreq>
 800b4ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f005 fb9f 	bl	8010bfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f00e f8c5 	bl	801964e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	695a      	ldr	r2, [r3, #20]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b4d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f006 fc37 	bl	8011d4c <USB_ReadInterrupts>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d10a      	bne.n	800b4fe <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f00e f8a2 	bl	8019632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695a      	ldr	r2, [r3, #20]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f002 0208 	and.w	r2, r2, #8
 800b4fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f006 fc22 	bl	8011d4c <USB_ReadInterrupts>
 800b508:	4603      	mov	r3, r0
 800b50a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b50e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b512:	d10f      	bne.n	800b534 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f00e f914 	bl	801974c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695a      	ldr	r2, [r3, #20]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f006 fc07 	bl	8011d4c <USB_ReadInterrupts>
 800b53e:	4603      	mov	r3, r0
 800b540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b548:	d10f      	bne.n	800b56a <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	b2db      	uxtb	r3, r3
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f00e f8e7 	bl	8019728 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	695a      	ldr	r2, [r3, #20]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	f006 fbec 	bl	8011d4c <USB_ReadInterrupts>
 800b574:	4603      	mov	r3, r0
 800b576:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b57a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b57e:	d10a      	bne.n	800b596 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f00e f8f5 	bl	8019770 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	695a      	ldr	r2, [r3, #20]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f006 fbd6 	bl	8011d4c <USB_ReadInterrupts>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f003 0304 	and.w	r3, r3, #4
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	d115      	bne.n	800b5d6 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f00e f8e5 	bl	801978c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6859      	ldr	r1, [r3, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	69ba      	ldr	r2, [r7, #24]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	605a      	str	r2, [r3, #4]
 800b5d2:	e000      	b.n	800b5d6 <HAL_PCD_IRQHandler+0x742>
      return;
 800b5d4:	bf00      	nop
    }
  }
}
 800b5d6:	3734      	adds	r7, #52	; 0x34
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd90      	pop	{r4, r7, pc}

0800b5dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d101      	bne.n	800b5f6 <HAL_PCD_SetAddress+0x1a>
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	e013      	b.n	800b61e <HAL_PCD_SetAddress+0x42>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	78fa      	ldrb	r2, [r7, #3]
 800b602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	78fa      	ldrb	r2, [r7, #3]
 800b60c:	4611      	mov	r1, r2
 800b60e:	4618      	mov	r0, r3
 800b610:	f006 fb34 	bl	8011c7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	4608      	mov	r0, r1
 800b630:	4611      	mov	r1, r2
 800b632:	461a      	mov	r2, r3
 800b634:	4603      	mov	r3, r0
 800b636:	70fb      	strb	r3, [r7, #3]
 800b638:	460b      	mov	r3, r1
 800b63a:	803b      	strh	r3, [r7, #0]
 800b63c:	4613      	mov	r3, r2
 800b63e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	da0f      	bge.n	800b66c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b64c:	78fb      	ldrb	r3, [r7, #3]
 800b64e:	f003 020f 	and.w	r2, r3, #15
 800b652:	4613      	mov	r3, r2
 800b654:	00db      	lsls	r3, r3, #3
 800b656:	1a9b      	subs	r3, r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	3338      	adds	r3, #56	; 0x38
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	4413      	add	r3, r2
 800b660:	3304      	adds	r3, #4
 800b662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2201      	movs	r2, #1
 800b668:	705a      	strb	r2, [r3, #1]
 800b66a:	e00f      	b.n	800b68c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	f003 020f 	and.w	r2, r3, #15
 800b672:	4613      	mov	r3, r2
 800b674:	00db      	lsls	r3, r3, #3
 800b676:	1a9b      	subs	r3, r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	4413      	add	r3, r2
 800b682:	3304      	adds	r3, #4
 800b684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	b2da      	uxtb	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b698:	883a      	ldrh	r2, [r7, #0]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	78ba      	ldrb	r2, [r7, #2]
 800b6a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	785b      	ldrb	r3, [r3, #1]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d004      	beq.n	800b6b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b6b6:	78bb      	ldrb	r3, [r7, #2]
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d102      	bne.n	800b6c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d101      	bne.n	800b6d0 <HAL_PCD_EP_Open+0xaa>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e00e      	b.n	800b6ee <HAL_PCD_EP_Open+0xc8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68f9      	ldr	r1, [r7, #12]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f005 fd40 	bl	8011164 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b706:	2b00      	cmp	r3, #0
 800b708:	da0f      	bge.n	800b72a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b70a:	78fb      	ldrb	r3, [r7, #3]
 800b70c:	f003 020f 	and.w	r2, r3, #15
 800b710:	4613      	mov	r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	1a9b      	subs	r3, r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	3338      	adds	r3, #56	; 0x38
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	3304      	adds	r3, #4
 800b720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	705a      	strb	r2, [r3, #1]
 800b728:	e00f      	b.n	800b74a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	f003 020f 	and.w	r2, r3, #15
 800b730:	4613      	mov	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	1a9b      	subs	r3, r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	4413      	add	r3, r2
 800b740:	3304      	adds	r3, #4
 800b742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b74a:	78fb      	ldrb	r3, [r7, #3]
 800b74c:	f003 030f 	and.w	r3, r3, #15
 800b750:	b2da      	uxtb	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d101      	bne.n	800b764 <HAL_PCD_EP_Close+0x6e>
 800b760:	2302      	movs	r3, #2
 800b762:	e00e      	b.n	800b782 <HAL_PCD_EP_Close+0x8c>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68f9      	ldr	r1, [r7, #12]
 800b772:	4618      	mov	r0, r3
 800b774:	f005 fd7e 	bl	8011274 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b086      	sub	sp, #24
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
 800b796:	460b      	mov	r3, r1
 800b798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b79a:	7afb      	ldrb	r3, [r7, #11]
 800b79c:	f003 020f 	and.w	r2, r3, #15
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7cc:	7afb      	ldrb	r3, [r7, #11]
 800b7ce:	f003 030f 	and.w	r3, r3, #15
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b7d8:	7afb      	ldrb	r3, [r7, #11]
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d106      	bne.n	800b7f0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6979      	ldr	r1, [r7, #20]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f005 fffb 	bl	80117e4 <USB_EP0StartXfer>
 800b7ee:	e005      	b.n	800b7fc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6979      	ldr	r1, [r7, #20]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f005 fe18 	bl	801142c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	f003 020f 	and.w	r2, r3, #15
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	4613      	mov	r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	1a9b      	subs	r3, r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	440b      	add	r3, r1
 800b824:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b828:	681b      	ldr	r3, [r3, #0]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b086      	sub	sp, #24
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	60f8      	str	r0, [r7, #12]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
 800b842:	460b      	mov	r3, r1
 800b844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b846:	7afb      	ldrb	r3, [r7, #11]
 800b848:	f003 020f 	and.w	r2, r3, #15
 800b84c:	4613      	mov	r3, r2
 800b84e:	00db      	lsls	r3, r3, #3
 800b850:	1a9b      	subs	r3, r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	3338      	adds	r3, #56	; 0x38
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	4413      	add	r3, r2
 800b85a:	3304      	adds	r3, #4
 800b85c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2200      	movs	r2, #0
 800b86e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2201      	movs	r2, #1
 800b874:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b876:	7afb      	ldrb	r3, [r7, #11]
 800b878:	f003 030f 	and.w	r3, r3, #15
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b882:	7afb      	ldrb	r3, [r7, #11]
 800b884:	f003 030f 	and.w	r3, r3, #15
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6979      	ldr	r1, [r7, #20]
 800b892:	4618      	mov	r0, r3
 800b894:	f005 ffa6 	bl	80117e4 <USB_EP0StartXfer>
 800b898:	e005      	b.n	800b8a6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6979      	ldr	r1, [r7, #20]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f005 fdc3 	bl	801142c <USB_EPStartXfer>
  }

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b8bc:	78fb      	ldrb	r3, [r7, #3]
 800b8be:	f003 020f 	and.w	r2, r3, #15
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d901      	bls.n	800b8ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e04e      	b.n	800b96c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da0f      	bge.n	800b8f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8d6:	78fb      	ldrb	r3, [r7, #3]
 800b8d8:	f003 020f 	and.w	r2, r3, #15
 800b8dc:	4613      	mov	r3, r2
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	1a9b      	subs	r3, r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	3338      	adds	r3, #56	; 0x38
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	705a      	strb	r2, [r3, #1]
 800b8f4:	e00d      	b.n	800b912 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b8f6:	78fa      	ldrb	r2, [r7, #3]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	1a9b      	subs	r3, r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	4413      	add	r3, r2
 800b908:	3304      	adds	r3, #4
 800b90a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2201      	movs	r2, #1
 800b916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	f003 030f 	and.w	r3, r3, #15
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d101      	bne.n	800b932 <HAL_PCD_EP_SetStall+0x82>
 800b92e:	2302      	movs	r3, #2
 800b930:	e01c      	b.n	800b96c <HAL_PCD_EP_SetStall+0xbc>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68f9      	ldr	r1, [r7, #12]
 800b940:	4618      	mov	r0, r3
 800b942:	f006 f8c7 	bl	8011ad4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b946:	78fb      	ldrb	r3, [r7, #3]
 800b948:	f003 030f 	and.w	r3, r3, #15
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d108      	bne.n	800b962 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b95a:	4619      	mov	r1, r3
 800b95c:	4610      	mov	r0, r2
 800b95e:	f006 fab9 	bl	8011ed4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	f003 020f 	and.w	r2, r3, #15
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d901      	bls.n	800b992 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e042      	b.n	800ba18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b996:	2b00      	cmp	r3, #0
 800b998:	da0f      	bge.n	800b9ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	f003 020f 	and.w	r2, r3, #15
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	3338      	adds	r3, #56	; 0x38
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	705a      	strb	r2, [r3, #1]
 800b9b8:	e00f      	b.n	800b9da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9ba:	78fb      	ldrb	r3, [r7, #3]
 800b9bc:	f003 020f 	and.w	r2, r3, #15
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d101      	bne.n	800b9fa <HAL_PCD_EP_ClrStall+0x86>
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	e00e      	b.n	800ba18 <HAL_PCD_EP_ClrStall+0xa4>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68f9      	ldr	r1, [r7, #12]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f006 f8d1 	bl	8011bb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <HAL_PCD_EP_Flush+0x1a>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e01b      	b.n	800ba72 <HAL_PCD_EP_Flush+0x52>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800ba42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	da09      	bge.n	800ba5e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f005 fb04 	bl	8011064 <USB_FlushTxFifo>
 800ba5c:	e004      	b.n	800ba68 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f005 fb24 	bl	80110b0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b088      	sub	sp, #32
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	3338      	adds	r3, #56	; 0x38
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	3304      	adds	r3, #4
 800baa0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	699a      	ldr	r2, [r3, #24]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d901      	bls.n	800bab2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e067      	b.n	800bb82 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	695a      	ldr	r2, [r3, #20]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	69fa      	ldr	r2, [r7, #28]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d902      	bls.n	800bace <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	3303      	adds	r3, #3
 800bad2:	089b      	lsrs	r3, r3, #2
 800bad4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bad6:	e026      	b.n	800bb26 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	695a      	ldr	r2, [r3, #20]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	429a      	cmp	r2, r3
 800baec:	d902      	bls.n	800baf4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	3303      	adds	r3, #3
 800baf8:	089b      	lsrs	r3, r3, #2
 800bafa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	68d9      	ldr	r1, [r3, #12]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	6978      	ldr	r0, [r7, #20]
 800bb0a:	f005 ff89 	bl	8011a20 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	699a      	ldr	r2, [r3, #24]
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	441a      	add	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	69ba      	ldr	r2, [r7, #24]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d809      	bhi.n	800bb50 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	699a      	ldr	r2, [r3, #24]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d203      	bcs.n	800bb50 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1c3      	bne.n	800bad8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	695a      	ldr	r2, [r3, #20]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d811      	bhi.n	800bb80 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	f003 030f 	and.w	r3, r3, #15
 800bb62:	2201      	movs	r2, #1
 800bb64:	fa02 f303 	lsl.w	r3, r2, r3
 800bb68:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	43db      	mvns	r3, r3
 800bb76:	6939      	ldr	r1, [r7, #16]
 800bb78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3720      	adds	r7, #32
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	333c      	adds	r3, #60	; 0x3c
 800bba4:	3304      	adds	r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	015a      	lsls	r2, r3, #5
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	4a19      	ldr	r2, [pc, #100]	; (800bc24 <PCD_EP_OutXfrComplete_int+0x98>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d124      	bne.n	800bc0c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00a      	beq.n	800bbe2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	015a      	lsls	r2, r3, #5
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd8:	461a      	mov	r2, r3
 800bbda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbde:	6093      	str	r3, [r2, #8]
 800bbe0:	e01a      	b.n	800bc18 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f003 0320 	and.w	r3, r3, #32
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d008      	beq.n	800bbfe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	2320      	movs	r3, #32
 800bbfc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f00d fcdf 	bl	80195c8 <HAL_PCD_DataOutStageCallback>
 800bc0a:	e005      	b.n	800bc18 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f00d fcd8 	bl	80195c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	4f54310a 	.word	0x4f54310a

0800bc28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	333c      	adds	r3, #60	; 0x3c
 800bc40:	3304      	adds	r3, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	015a      	lsls	r2, r3, #5
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4a0c      	ldr	r2, [pc, #48]	; (800bc8c <PCD_EP_OutSetupPacket_int+0x64>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d90e      	bls.n	800bc7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc74:	461a      	mov	r2, r3
 800bc76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f00d fc91 	bl	80195a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	4f54300a 	.word	0x4f54300a

0800bc90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	70fb      	strb	r3, [r7, #3]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bca8:	78fb      	ldrb	r3, [r7, #3]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d107      	bne.n	800bcbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bcae:	883b      	ldrh	r3, [r7, #0]
 800bcb0:	0419      	lsls	r1, r3, #16
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	629a      	str	r2, [r3, #40]	; 0x28
 800bcbc:	e028      	b.n	800bd10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc4:	0c1b      	lsrs	r3, r3, #16
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	4413      	add	r3, r2
 800bcca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
 800bcd0:	e00d      	b.n	800bcee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	3340      	adds	r3, #64	; 0x40
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	0c1b      	lsrs	r3, r3, #16
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	4413      	add	r3, r2
 800bce6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	3301      	adds	r3, #1
 800bcec:	73fb      	strb	r3, [r7, #15]
 800bcee:	7bfa      	ldrb	r2, [r7, #15]
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d3ec      	bcc.n	800bcd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bcf8:	883b      	ldrh	r3, [r7, #0]
 800bcfa:	0418      	lsls	r0, r3, #16
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6819      	ldr	r1, [r3, #0]
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	4302      	orrs	r2, r0
 800bd08:	3340      	adds	r3, #64	; 0x40
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	887a      	ldrh	r2, [r7, #2]
 800bd30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd72:	f043 0303 	orr.w	r3, r3, #3
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd8c:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a04      	ldr	r2, [pc, #16]	; (800bda4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bd92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd96:	6013      	str	r3, [r2, #0]
}
 800bd98:	bf00      	nop
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	40007000 	.word	0x40007000

0800bda8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bdac:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <HAL_PWREx_GetVoltageRange+0x18>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	40007000 	.word	0x40007000

0800bdc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd2:	d130      	bne.n	800be36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bdd4:	4b23      	ldr	r3, [pc, #140]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bde0:	d038      	beq.n	800be54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bde2:	4b20      	ldr	r3, [pc, #128]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bdea:	4a1e      	ldr	r2, [pc, #120]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bdec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bdf2:	4b1d      	ldr	r3, [pc, #116]	; (800be68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2232      	movs	r2, #50	; 0x32
 800bdf8:	fb02 f303 	mul.w	r3, r2, r3
 800bdfc:	4a1b      	ldr	r2, [pc, #108]	; (800be6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bdfe:	fba2 2303 	umull	r2, r3, r2, r3
 800be02:	0c9b      	lsrs	r3, r3, #18
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be08:	e002      	b.n	800be10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800be10:	4b14      	ldr	r3, [pc, #80]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be1c:	d102      	bne.n	800be24 <HAL_PWREx_ControlVoltageScaling+0x60>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1f2      	bne.n	800be0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800be24:	4b0f      	ldr	r3, [pc, #60]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be30:	d110      	bne.n	800be54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e00f      	b.n	800be56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800be36:	4b0b      	ldr	r3, [pc, #44]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be42:	d007      	beq.n	800be54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800be44:	4b07      	ldr	r3, [pc, #28]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800be4c:	4a05      	ldr	r2, [pc, #20]	; (800be64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800be4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	40007000 	.word	0x40007000
 800be68:	20000308 	.word	0x20000308
 800be6c:	431bde83 	.word	0x431bde83

0800be70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800be70:	b480      	push	{r7}
 800be72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800be74:	4b05      	ldr	r3, [pc, #20]	; (800be8c <HAL_PWREx_EnableVddUSB+0x1c>)
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	4a04      	ldr	r2, [pc, #16]	; (800be8c <HAL_PWREx_EnableVddUSB+0x1c>)
 800be7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be7e:	6053      	str	r3, [r2, #4]
}
 800be80:	bf00      	nop
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	40007000 	.word	0x40007000

0800be90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	f000 bc16 	b.w	800c6d0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bea4:	4ba0      	ldr	r3, [pc, #640]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	f003 030c 	and.w	r3, r3, #12
 800beac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800beae:	4b9e      	ldr	r3, [pc, #632]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0310 	and.w	r3, r3, #16
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 80e4 	beq.w	800c08e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d007      	beq.n	800bedc <HAL_RCC_OscConfig+0x4c>
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b0c      	cmp	r3, #12
 800bed0:	f040 808b 	bne.w	800bfea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	f040 8087 	bne.w	800bfea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bedc:	4b92      	ldr	r3, [pc, #584]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <HAL_RCC_OscConfig+0x64>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e3ed      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a1a      	ldr	r2, [r3, #32]
 800bef8:	4b8b      	ldr	r3, [pc, #556]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d004      	beq.n	800bf0e <HAL_RCC_OscConfig+0x7e>
 800bf04:	4b88      	ldr	r3, [pc, #544]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf0c:	e005      	b.n	800bf1a <HAL_RCC_OscConfig+0x8a>
 800bf0e:	4b86      	ldr	r3, [pc, #536]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf14:	091b      	lsrs	r3, r3, #4
 800bf16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d223      	bcs.n	800bf66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fdb2 	bl	800ca8c <RCC_SetFlashLatencyFromMSIRange>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e3ce      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf32:	4b7d      	ldr	r3, [pc, #500]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a7c      	ldr	r2, [pc, #496]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf38:	f043 0308 	orr.w	r3, r3, #8
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	4b7a      	ldr	r3, [pc, #488]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	4977      	ldr	r1, [pc, #476]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf50:	4b75      	ldr	r3, [pc, #468]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	69db      	ldr	r3, [r3, #28]
 800bf5c:	021b      	lsls	r3, r3, #8
 800bf5e:	4972      	ldr	r1, [pc, #456]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	604b      	str	r3, [r1, #4]
 800bf64:	e025      	b.n	800bfb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf66:	4b70      	ldr	r3, [pc, #448]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a6f      	ldr	r2, [pc, #444]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf6c:	f043 0308 	orr.w	r3, r3, #8
 800bf70:	6013      	str	r3, [r2, #0]
 800bf72:	4b6d      	ldr	r3, [pc, #436]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	496a      	ldr	r1, [pc, #424]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf80:	4313      	orrs	r3, r2
 800bf82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf84:	4b68      	ldr	r3, [pc, #416]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	69db      	ldr	r3, [r3, #28]
 800bf90:	021b      	lsls	r3, r3, #8
 800bf92:	4965      	ldr	r1, [pc, #404]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d109      	bne.n	800bfb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fd72 	bl	800ca8c <RCC_SetFlashLatencyFromMSIRange>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e38e      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bfb2:	f000 fc75 	bl	800c8a0 <HAL_RCC_GetSysClockFreq>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	4b5b      	ldr	r3, [pc, #364]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	091b      	lsrs	r3, r3, #4
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	495a      	ldr	r1, [pc, #360]	; (800c12c <HAL_RCC_OscConfig+0x29c>)
 800bfc4:	5ccb      	ldrb	r3, [r1, r3]
 800bfc6:	f003 031f 	and.w	r3, r3, #31
 800bfca:	fa22 f303 	lsr.w	r3, r2, r3
 800bfce:	4a58      	ldr	r2, [pc, #352]	; (800c130 <HAL_RCC_OscConfig+0x2a0>)
 800bfd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bfd2:	4b58      	ldr	r3, [pc, #352]	; (800c134 <HAL_RCC_OscConfig+0x2a4>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fb f9c4 	bl	8007364 <HAL_InitTick>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d052      	beq.n	800c08c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	e372      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d032      	beq.n	800c058 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bff2:	4b4d      	ldr	r3, [pc, #308]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a4c      	ldr	r2, [pc, #304]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800bff8:	f043 0301 	orr.w	r3, r3, #1
 800bffc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bffe:	f7fb fdd5 	bl	8007bac <HAL_GetTick>
 800c002:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c004:	e008      	b.n	800c018 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c006:	f7fb fdd1 	bl	8007bac <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	2b02      	cmp	r3, #2
 800c012:	d901      	bls.n	800c018 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e35b      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c018:	4b43      	ldr	r3, [pc, #268]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d0f0      	beq.n	800c006 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c024:	4b40      	ldr	r3, [pc, #256]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a3f      	ldr	r2, [pc, #252]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c02a:	f043 0308 	orr.w	r3, r3, #8
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	4b3d      	ldr	r3, [pc, #244]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	493a      	ldr	r1, [pc, #232]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c042:	4b39      	ldr	r3, [pc, #228]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	021b      	lsls	r3, r3, #8
 800c050:	4935      	ldr	r1, [pc, #212]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c052:	4313      	orrs	r3, r2
 800c054:	604b      	str	r3, [r1, #4]
 800c056:	e01a      	b.n	800c08e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c058:	4b33      	ldr	r3, [pc, #204]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a32      	ldr	r2, [pc, #200]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c05e:	f023 0301 	bic.w	r3, r3, #1
 800c062:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c064:	f7fb fda2 	bl	8007bac <HAL_GetTick>
 800c068:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c06a:	e008      	b.n	800c07e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c06c:	f7fb fd9e 	bl	8007bac <HAL_GetTick>
 800c070:	4602      	mov	r2, r0
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	2b02      	cmp	r3, #2
 800c078:	d901      	bls.n	800c07e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c07a:	2303      	movs	r3, #3
 800c07c:	e328      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c07e:	4b2a      	ldr	r3, [pc, #168]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1f0      	bne.n	800c06c <HAL_RCC_OscConfig+0x1dc>
 800c08a:	e000      	b.n	800c08e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c08c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d073      	beq.n	800c182 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	d005      	beq.n	800c0ac <HAL_RCC_OscConfig+0x21c>
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b0c      	cmp	r3, #12
 800c0a4:	d10e      	bne.n	800c0c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	d10b      	bne.n	800c0c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c0ac:	4b1e      	ldr	r3, [pc, #120]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d063      	beq.n	800c180 <HAL_RCC_OscConfig+0x2f0>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d15f      	bne.n	800c180 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e305      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0cc:	d106      	bne.n	800c0dc <HAL_RCC_OscConfig+0x24c>
 800c0ce:	4b16      	ldr	r3, [pc, #88]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a15      	ldr	r2, [pc, #84]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	e01d      	b.n	800c118 <HAL_RCC_OscConfig+0x288>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0e4:	d10c      	bne.n	800c100 <HAL_RCC_OscConfig+0x270>
 800c0e6:	4b10      	ldr	r3, [pc, #64]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a0f      	ldr	r2, [pc, #60]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c0f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	e00b      	b.n	800c118 <HAL_RCC_OscConfig+0x288>
 800c100:	4b09      	ldr	r3, [pc, #36]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a08      	ldr	r2, [pc, #32]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a05      	ldr	r2, [pc, #20]	; (800c128 <HAL_RCC_OscConfig+0x298>)
 800c112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d01b      	beq.n	800c158 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c120:	f7fb fd44 	bl	8007bac <HAL_GetTick>
 800c124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c126:	e010      	b.n	800c14a <HAL_RCC_OscConfig+0x2ba>
 800c128:	40021000 	.word	0x40021000
 800c12c:	08023e04 	.word	0x08023e04
 800c130:	20000308 	.word	0x20000308
 800c134:	2000030c 	.word	0x2000030c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c138:	f7fb fd38 	bl	8007bac <HAL_GetTick>
 800c13c:	4602      	mov	r2, r0
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	2b64      	cmp	r3, #100	; 0x64
 800c144:	d901      	bls.n	800c14a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c146:	2303      	movs	r3, #3
 800c148:	e2c2      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c14a:	4baf      	ldr	r3, [pc, #700]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0f0      	beq.n	800c138 <HAL_RCC_OscConfig+0x2a8>
 800c156:	e014      	b.n	800c182 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c158:	f7fb fd28 	bl	8007bac <HAL_GetTick>
 800c15c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c15e:	e008      	b.n	800c172 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c160:	f7fb fd24 	bl	8007bac <HAL_GetTick>
 800c164:	4602      	mov	r2, r0
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	2b64      	cmp	r3, #100	; 0x64
 800c16c:	d901      	bls.n	800c172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e2ae      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c172:	4ba5      	ldr	r3, [pc, #660]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1f0      	bne.n	800c160 <HAL_RCC_OscConfig+0x2d0>
 800c17e:	e000      	b.n	800c182 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d060      	beq.n	800c250 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	2b04      	cmp	r3, #4
 800c192:	d005      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x310>
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	2b0c      	cmp	r3, #12
 800c198:	d119      	bne.n	800c1ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d116      	bne.n	800c1ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c1a0:	4b99      	ldr	r3, [pc, #612]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d005      	beq.n	800c1b8 <HAL_RCC_OscConfig+0x328>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e28b      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1b8:	4b93      	ldr	r3, [pc, #588]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	061b      	lsls	r3, r3, #24
 800c1c6:	4990      	ldr	r1, [pc, #576]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c1cc:	e040      	b.n	800c250 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d023      	beq.n	800c21e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c1d6:	4b8c      	ldr	r3, [pc, #560]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a8b      	ldr	r2, [pc, #556]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c1dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e2:	f7fb fce3 	bl	8007bac <HAL_GetTick>
 800c1e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c1e8:	e008      	b.n	800c1fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c1ea:	f7fb fcdf 	bl	8007bac <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d901      	bls.n	800c1fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	e269      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c1fc:	4b82      	ldr	r3, [pc, #520]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c204:	2b00      	cmp	r3, #0
 800c206:	d0f0      	beq.n	800c1ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c208:	4b7f      	ldr	r3, [pc, #508]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	061b      	lsls	r3, r3, #24
 800c216:	497c      	ldr	r1, [pc, #496]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c218:	4313      	orrs	r3, r2
 800c21a:	604b      	str	r3, [r1, #4]
 800c21c:	e018      	b.n	800c250 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c21e:	4b7a      	ldr	r3, [pc, #488]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a79      	ldr	r2, [pc, #484]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c22a:	f7fb fcbf 	bl	8007bac <HAL_GetTick>
 800c22e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c230:	e008      	b.n	800c244 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c232:	f7fb fcbb 	bl	8007bac <HAL_GetTick>
 800c236:	4602      	mov	r2, r0
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d901      	bls.n	800c244 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e245      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c244:	4b70      	ldr	r3, [pc, #448]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1f0      	bne.n	800c232 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 0308 	and.w	r3, r3, #8
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d03c      	beq.n	800c2d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d01c      	beq.n	800c29e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c264:	4b68      	ldr	r3, [pc, #416]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c26a:	4a67      	ldr	r2, [pc, #412]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c26c:	f043 0301 	orr.w	r3, r3, #1
 800c270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c274:	f7fb fc9a 	bl	8007bac <HAL_GetTick>
 800c278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c27a:	e008      	b.n	800c28e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c27c:	f7fb fc96 	bl	8007bac <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	2b02      	cmp	r3, #2
 800c288:	d901      	bls.n	800c28e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	e220      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c28e:	4b5e      	ldr	r3, [pc, #376]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d0ef      	beq.n	800c27c <HAL_RCC_OscConfig+0x3ec>
 800c29c:	e01b      	b.n	800c2d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c29e:	4b5a      	ldr	r3, [pc, #360]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2a4:	4a58      	ldr	r2, [pc, #352]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c2a6:	f023 0301 	bic.w	r3, r3, #1
 800c2aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ae:	f7fb fc7d 	bl	8007bac <HAL_GetTick>
 800c2b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c2b4:	e008      	b.n	800c2c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c2b6:	f7fb fc79 	bl	8007bac <HAL_GetTick>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d901      	bls.n	800c2c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e203      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c2c8:	4b4f      	ldr	r3, [pc, #316]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c2ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2ce:	f003 0302 	and.w	r3, r3, #2
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1ef      	bne.n	800c2b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0304 	and.w	r3, r3, #4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 80a6 	beq.w	800c430 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c2e8:	4b47      	ldr	r3, [pc, #284]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10d      	bne.n	800c310 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c2f4:	4b44      	ldr	r3, [pc, #272]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f8:	4a43      	ldr	r2, [pc, #268]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2fe:	6593      	str	r3, [r2, #88]	; 0x58
 800c300:	4b41      	ldr	r3, [pc, #260]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c308:	60bb      	str	r3, [r7, #8]
 800c30a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c30c:	2301      	movs	r3, #1
 800c30e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c310:	4b3e      	ldr	r3, [pc, #248]	; (800c40c <HAL_RCC_OscConfig+0x57c>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d118      	bne.n	800c34e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c31c:	4b3b      	ldr	r3, [pc, #236]	; (800c40c <HAL_RCC_OscConfig+0x57c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a3a      	ldr	r2, [pc, #232]	; (800c40c <HAL_RCC_OscConfig+0x57c>)
 800c322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c328:	f7fb fc40 	bl	8007bac <HAL_GetTick>
 800c32c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c32e:	e008      	b.n	800c342 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c330:	f7fb fc3c 	bl	8007bac <HAL_GetTick>
 800c334:	4602      	mov	r2, r0
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d901      	bls.n	800c342 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e1c6      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c342:	4b32      	ldr	r3, [pc, #200]	; (800c40c <HAL_RCC_OscConfig+0x57c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0f0      	beq.n	800c330 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d108      	bne.n	800c368 <HAL_RCC_OscConfig+0x4d8>
 800c356:	4b2c      	ldr	r3, [pc, #176]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c35c:	4a2a      	ldr	r2, [pc, #168]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c35e:	f043 0301 	orr.w	r3, r3, #1
 800c362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c366:	e024      	b.n	800c3b2 <HAL_RCC_OscConfig+0x522>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	2b05      	cmp	r3, #5
 800c36e:	d110      	bne.n	800c392 <HAL_RCC_OscConfig+0x502>
 800c370:	4b25      	ldr	r3, [pc, #148]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c376:	4a24      	ldr	r2, [pc, #144]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c378:	f043 0304 	orr.w	r3, r3, #4
 800c37c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c380:	4b21      	ldr	r3, [pc, #132]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c386:	4a20      	ldr	r2, [pc, #128]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c388:	f043 0301 	orr.w	r3, r3, #1
 800c38c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c390:	e00f      	b.n	800c3b2 <HAL_RCC_OscConfig+0x522>
 800c392:	4b1d      	ldr	r3, [pc, #116]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c398:	4a1b      	ldr	r2, [pc, #108]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c39a:	f023 0301 	bic.w	r3, r3, #1
 800c39e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c3a2:	4b19      	ldr	r3, [pc, #100]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a8:	4a17      	ldr	r2, [pc, #92]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c3aa:	f023 0304 	bic.w	r3, r3, #4
 800c3ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d016      	beq.n	800c3e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3ba:	f7fb fbf7 	bl	8007bac <HAL_GetTick>
 800c3be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c3c0:	e00a      	b.n	800c3d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3c2:	f7fb fbf3 	bl	8007bac <HAL_GetTick>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d901      	bls.n	800c3d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e17b      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c3d8:	4b0b      	ldr	r3, [pc, #44]	; (800c408 <HAL_RCC_OscConfig+0x578>)
 800c3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3de:	f003 0302 	and.w	r3, r3, #2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0ed      	beq.n	800c3c2 <HAL_RCC_OscConfig+0x532>
 800c3e6:	e01a      	b.n	800c41e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3e8:	f7fb fbe0 	bl	8007bac <HAL_GetTick>
 800c3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c3ee:	e00f      	b.n	800c410 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3f0:	f7fb fbdc 	bl	8007bac <HAL_GetTick>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d906      	bls.n	800c410 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	e164      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
 800c406:	bf00      	nop
 800c408:	40021000 	.word	0x40021000
 800c40c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c410:	4ba8      	ldr	r3, [pc, #672]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c416:	f003 0302 	and.w	r3, r3, #2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e8      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c41e:	7ffb      	ldrb	r3, [r7, #31]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d105      	bne.n	800c430 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c424:	4ba3      	ldr	r3, [pc, #652]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c428:	4aa2      	ldr	r2, [pc, #648]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c42a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c42e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0320 	and.w	r3, r3, #32
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d03c      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	d01c      	beq.n	800c47e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c444:	4b9b      	ldr	r3, [pc, #620]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c44a:	4a9a      	ldr	r2, [pc, #616]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c44c:	f043 0301 	orr.w	r3, r3, #1
 800c450:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c454:	f7fb fbaa 	bl	8007bac <HAL_GetTick>
 800c458:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c45a:	e008      	b.n	800c46e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c45c:	f7fb fba6 	bl	8007bac <HAL_GetTick>
 800c460:	4602      	mov	r2, r0
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b02      	cmp	r3, #2
 800c468:	d901      	bls.n	800c46e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e130      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c46e:	4b91      	ldr	r3, [pc, #580]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d0ef      	beq.n	800c45c <HAL_RCC_OscConfig+0x5cc>
 800c47c:	e01b      	b.n	800c4b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c47e:	4b8d      	ldr	r3, [pc, #564]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c484:	4a8b      	ldr	r2, [pc, #556]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c486:	f023 0301 	bic.w	r3, r3, #1
 800c48a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c48e:	f7fb fb8d 	bl	8007bac <HAL_GetTick>
 800c492:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c494:	e008      	b.n	800c4a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c496:	f7fb fb89 	bl	8007bac <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d901      	bls.n	800c4a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e113      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c4a8:	4b82      	ldr	r3, [pc, #520]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c4aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1ef      	bne.n	800c496 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 8107 	beq.w	800c6ce <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	f040 80cb 	bne.w	800c660 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c4ca:	4b7a      	ldr	r3, [pc, #488]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f003 0203 	and.w	r2, r3, #3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d12c      	bne.n	800c538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d123      	bne.n	800c538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d11b      	bne.n	800c538 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d113      	bne.n	800c538 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51a:	085b      	lsrs	r3, r3, #1
 800c51c:	3b01      	subs	r3, #1
 800c51e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c520:	429a      	cmp	r2, r3
 800c522:	d109      	bne.n	800c538 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52e:	085b      	lsrs	r3, r3, #1
 800c530:	3b01      	subs	r3, #1
 800c532:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c534:	429a      	cmp	r2, r3
 800c536:	d06d      	beq.n	800c614 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2b0c      	cmp	r3, #12
 800c53c:	d068      	beq.n	800c610 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c53e:	4b5d      	ldr	r3, [pc, #372]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d105      	bne.n	800c556 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c54a:	4b5a      	ldr	r3, [pc, #360]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	e0ba      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c55a:	4b56      	ldr	r3, [pc, #344]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a55      	ldr	r2, [pc, #340]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c564:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c566:	f7fb fb21 	bl	8007bac <HAL_GetTick>
 800c56a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c56c:	e008      	b.n	800c580 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c56e:	f7fb fb1d 	bl	8007bac <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d901      	bls.n	800c580 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e0a7      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c580:	4b4c      	ldr	r3, [pc, #304]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1f0      	bne.n	800c56e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c58c:	4b49      	ldr	r3, [pc, #292]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	4b49      	ldr	r3, [pc, #292]	; (800c6b8 <HAL_RCC_OscConfig+0x828>)
 800c592:	4013      	ands	r3, r2
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c59c:	3a01      	subs	r2, #1
 800c59e:	0112      	lsls	r2, r2, #4
 800c5a0:	4311      	orrs	r1, r2
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c5a6:	0212      	lsls	r2, r2, #8
 800c5a8:	4311      	orrs	r1, r2
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c5ae:	0852      	lsrs	r2, r2, #1
 800c5b0:	3a01      	subs	r2, #1
 800c5b2:	0552      	lsls	r2, r2, #21
 800c5b4:	4311      	orrs	r1, r2
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c5ba:	0852      	lsrs	r2, r2, #1
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	0652      	lsls	r2, r2, #25
 800c5c0:	4311      	orrs	r1, r2
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c5c6:	06d2      	lsls	r2, r2, #27
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	493a      	ldr	r1, [pc, #232]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c5d0:	4b38      	ldr	r3, [pc, #224]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a37      	ldr	r2, [pc, #220]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c5d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c5dc:	4b35      	ldr	r3, [pc, #212]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	4a34      	ldr	r2, [pc, #208]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c5e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c5e8:	f7fb fae0 	bl	8007bac <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5f0:	f7fb fadc 	bl	8007bac <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e066      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c602:	4b2c      	ldr	r3, [pc, #176]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0f0      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c60e:	e05e      	b.n	800c6ce <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	e05d      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c614:	4b27      	ldr	r3, [pc, #156]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d156      	bne.n	800c6ce <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c620:	4b24      	ldr	r3, [pc, #144]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a23      	ldr	r2, [pc, #140]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c62a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c62c:	4b21      	ldr	r3, [pc, #132]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	4a20      	ldr	r2, [pc, #128]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c638:	f7fb fab8 	bl	8007bac <HAL_GetTick>
 800c63c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c63e:	e008      	b.n	800c652 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c640:	f7fb fab4 	bl	8007bac <HAL_GetTick>
 800c644:	4602      	mov	r2, r0
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d901      	bls.n	800c652 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800c64e:	2303      	movs	r3, #3
 800c650:	e03e      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c652:	4b18      	ldr	r3, [pc, #96]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0f0      	beq.n	800c640 <HAL_RCC_OscConfig+0x7b0>
 800c65e:	e036      	b.n	800c6ce <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	2b0c      	cmp	r3, #12
 800c664:	d031      	beq.n	800c6ca <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c666:	4b13      	ldr	r3, [pc, #76]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a12      	ldr	r2, [pc, #72]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c66c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c670:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800c672:	4b10      	ldr	r3, [pc, #64]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d105      	bne.n	800c68a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c67e:	4b0d      	ldr	r3, [pc, #52]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	4a0c      	ldr	r2, [pc, #48]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c684:	f023 0303 	bic.w	r3, r3, #3
 800c688:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c68a:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	4a09      	ldr	r2, [pc, #36]	; (800c6b4 <HAL_RCC_OscConfig+0x824>)
 800c690:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c698:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c69a:	f7fb fa87 	bl	8007bac <HAL_GetTick>
 800c69e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6a0:	e00c      	b.n	800c6bc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6a2:	f7fb fa83 	bl	8007bac <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d905      	bls.n	800c6bc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e00d      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
 800c6b4:	40021000 	.word	0x40021000
 800c6b8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6bc:	4b06      	ldr	r3, [pc, #24]	; (800c6d8 <HAL_RCC_OscConfig+0x848>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1ec      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x812>
 800c6c8:	e001      	b.n	800c6ce <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e000      	b.n	800c6d0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	40021000 	.word	0x40021000

0800c6dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d101      	bne.n	800c6f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e0c8      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c6f0:	4b66      	ldr	r3, [pc, #408]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0307 	and.w	r3, r3, #7
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d910      	bls.n	800c720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6fe:	4b63      	ldr	r3, [pc, #396]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f023 0207 	bic.w	r2, r3, #7
 800c706:	4961      	ldr	r1, [pc, #388]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c70e:	4b5f      	ldr	r3, [pc, #380]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d001      	beq.n	800c720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e0b0      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d04c      	beq.n	800c7c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	2b03      	cmp	r3, #3
 800c732:	d107      	bne.n	800c744 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c734:	4b56      	ldr	r3, [pc, #344]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d121      	bne.n	800c784 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e09e      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d107      	bne.n	800c75c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c74c:	4b50      	ldr	r3, [pc, #320]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d115      	bne.n	800c784 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e092      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d107      	bne.n	800c774 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c764:	4b4a      	ldr	r3, [pc, #296]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0302 	and.w	r3, r3, #2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d109      	bne.n	800c784 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e086      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c774:	4b46      	ldr	r3, [pc, #280]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e07e      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c784:	4b42      	ldr	r3, [pc, #264]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	f023 0203 	bic.w	r2, r3, #3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	493f      	ldr	r1, [pc, #252]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c792:	4313      	orrs	r3, r2
 800c794:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c796:	f7fb fa09 	bl	8007bac <HAL_GetTick>
 800c79a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c79c:	e00a      	b.n	800c7b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c79e:	f7fb fa05 	bl	8007bac <HAL_GetTick>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d901      	bls.n	800c7b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	e066      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7b4:	4b36      	ldr	r3, [pc, #216]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f003 020c 	and.w	r2, r3, #12
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d1eb      	bne.n	800c79e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 0302 	and.w	r3, r3, #2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d008      	beq.n	800c7e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c7d2:	4b2f      	ldr	r3, [pc, #188]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	492c      	ldr	r1, [pc, #176]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c7e4:	4b29      	ldr	r3, [pc, #164]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d210      	bcs.n	800c814 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7f2:	4b26      	ldr	r3, [pc, #152]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f023 0207 	bic.w	r2, r3, #7
 800c7fa:	4924      	ldr	r1, [pc, #144]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c802:	4b22      	ldr	r3, [pc, #136]	; (800c88c <HAL_RCC_ClockConfig+0x1b0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 0307 	and.w	r3, r3, #7
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d001      	beq.n	800c814 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e036      	b.n	800c882 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d008      	beq.n	800c832 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c820:	4b1b      	ldr	r3, [pc, #108]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	4918      	ldr	r1, [pc, #96]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 0308 	and.w	r3, r3, #8
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d009      	beq.n	800c852 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c83e:	4b14      	ldr	r3, [pc, #80]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	4910      	ldr	r1, [pc, #64]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c852:	f000 f825 	bl	800c8a0 <HAL_RCC_GetSysClockFreq>
 800c856:	4602      	mov	r2, r0
 800c858:	4b0d      	ldr	r3, [pc, #52]	; (800c890 <HAL_RCC_ClockConfig+0x1b4>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	091b      	lsrs	r3, r3, #4
 800c85e:	f003 030f 	and.w	r3, r3, #15
 800c862:	490c      	ldr	r1, [pc, #48]	; (800c894 <HAL_RCC_ClockConfig+0x1b8>)
 800c864:	5ccb      	ldrb	r3, [r1, r3]
 800c866:	f003 031f 	and.w	r3, r3, #31
 800c86a:	fa22 f303 	lsr.w	r3, r2, r3
 800c86e:	4a0a      	ldr	r2, [pc, #40]	; (800c898 <HAL_RCC_ClockConfig+0x1bc>)
 800c870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <HAL_RCC_ClockConfig+0x1c0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4618      	mov	r0, r3
 800c878:	f7fa fd74 	bl	8007364 <HAL_InitTick>
 800c87c:	4603      	mov	r3, r0
 800c87e:	72fb      	strb	r3, [r7, #11]

  return status;
 800c880:	7afb      	ldrb	r3, [r7, #11]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	40022000 	.word	0x40022000
 800c890:	40021000 	.word	0x40021000
 800c894:	08023e04 	.word	0x08023e04
 800c898:	20000308 	.word	0x20000308
 800c89c:	2000030c 	.word	0x2000030c

0800c8a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b089      	sub	sp, #36	; 0x24
 800c8a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8ae:	4b3e      	ldr	r3, [pc, #248]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f003 030c 	and.w	r3, r3, #12
 800c8b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8b8:	4b3b      	ldr	r3, [pc, #236]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <HAL_RCC_GetSysClockFreq+0x34>
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b0c      	cmp	r3, #12
 800c8cc:	d121      	bne.n	800c912 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d11e      	bne.n	800c912 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c8d4:	4b34      	ldr	r3, [pc, #208]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0308 	and.w	r3, r3, #8
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d107      	bne.n	800c8f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c8e0:	4b31      	ldr	r3, [pc, #196]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	f003 030f 	and.w	r3, r3, #15
 800c8ec:	61fb      	str	r3, [r7, #28]
 800c8ee:	e005      	b.n	800c8fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c8f0:	4b2d      	ldr	r3, [pc, #180]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	091b      	lsrs	r3, r3, #4
 800c8f6:	f003 030f 	and.w	r3, r3, #15
 800c8fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c8fc:	4a2b      	ldr	r2, [pc, #172]	; (800c9ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c904:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10d      	bne.n	800c928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c910:	e00a      	b.n	800c928 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b04      	cmp	r3, #4
 800c916:	d102      	bne.n	800c91e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c918:	4b25      	ldr	r3, [pc, #148]	; (800c9b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800c91a:	61bb      	str	r3, [r7, #24]
 800c91c:	e004      	b.n	800c928 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	2b08      	cmp	r3, #8
 800c922:	d101      	bne.n	800c928 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c924:	4b23      	ldr	r3, [pc, #140]	; (800c9b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800c926:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	2b0c      	cmp	r3, #12
 800c92c:	d134      	bne.n	800c998 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c92e:	4b1e      	ldr	r3, [pc, #120]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	f003 0303 	and.w	r3, r3, #3
 800c936:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d003      	beq.n	800c946 <HAL_RCC_GetSysClockFreq+0xa6>
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2b03      	cmp	r3, #3
 800c942:	d003      	beq.n	800c94c <HAL_RCC_GetSysClockFreq+0xac>
 800c944:	e005      	b.n	800c952 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c946:	4b1a      	ldr	r3, [pc, #104]	; (800c9b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800c948:	617b      	str	r3, [r7, #20]
      break;
 800c94a:	e005      	b.n	800c958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c94c:	4b19      	ldr	r3, [pc, #100]	; (800c9b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800c94e:	617b      	str	r3, [r7, #20]
      break;
 800c950:	e002      	b.n	800c958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	617b      	str	r3, [r7, #20]
      break;
 800c956:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c958:	4b13      	ldr	r3, [pc, #76]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	091b      	lsrs	r3, r3, #4
 800c95e:	f003 0307 	and.w	r3, r3, #7
 800c962:	3301      	adds	r3, #1
 800c964:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c966:	4b10      	ldr	r3, [pc, #64]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	0a1b      	lsrs	r3, r3, #8
 800c96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	fb02 f203 	mul.w	r2, r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	fbb2 f3f3 	udiv	r3, r2, r3
 800c97c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c97e:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	0e5b      	lsrs	r3, r3, #25
 800c984:	f003 0303 	and.w	r3, r3, #3
 800c988:	3301      	adds	r3, #1
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	fbb2 f3f3 	udiv	r3, r2, r3
 800c996:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c998:	69bb      	ldr	r3, [r7, #24]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3724      	adds	r7, #36	; 0x24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	40021000 	.word	0x40021000
 800c9ac:	08023e1c 	.word	0x08023e1c
 800c9b0:	00f42400 	.word	0x00f42400
 800c9b4:	007a1200 	.word	0x007a1200

0800c9b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c9bc:	4b03      	ldr	r3, [pc, #12]	; (800c9cc <HAL_RCC_GetHCLKFreq+0x14>)
 800c9be:	681b      	ldr	r3, [r3, #0]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20000308 	.word	0x20000308

0800c9d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c9d4:	f7ff fff0 	bl	800c9b8 <HAL_RCC_GetHCLKFreq>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	0a1b      	lsrs	r3, r3, #8
 800c9e0:	f003 0307 	and.w	r3, r3, #7
 800c9e4:	4904      	ldr	r1, [pc, #16]	; (800c9f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c9e6:	5ccb      	ldrb	r3, [r1, r3]
 800c9e8:	f003 031f 	and.w	r3, r3, #31
 800c9ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	40021000 	.word	0x40021000
 800c9f8:	08023e14 	.word	0x08023e14

0800c9fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ca00:	f7ff ffda 	bl	800c9b8 <HAL_RCC_GetHCLKFreq>
 800ca04:	4602      	mov	r2, r0
 800ca06:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	0adb      	lsrs	r3, r3, #11
 800ca0c:	f003 0307 	and.w	r3, r3, #7
 800ca10:	4904      	ldr	r1, [pc, #16]	; (800ca24 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca12:	5ccb      	ldrb	r3, [r1, r3]
 800ca14:	f003 031f 	and.w	r3, r3, #31
 800ca18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	40021000 	.word	0x40021000
 800ca24:	08023e14 	.word	0x08023e14

0800ca28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	220f      	movs	r2, #15
 800ca36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ca38:	4b12      	ldr	r3, [pc, #72]	; (800ca84 <HAL_RCC_GetClockConfig+0x5c>)
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f003 0203 	and.w	r2, r3, #3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ca44:	4b0f      	ldr	r3, [pc, #60]	; (800ca84 <HAL_RCC_GetClockConfig+0x5c>)
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ca50:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <HAL_RCC_GetClockConfig+0x5c>)
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca5c:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <HAL_RCC_GetClockConfig+0x5c>)
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	08db      	lsrs	r3, r3, #3
 800ca62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca6a:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <HAL_RCC_GetClockConfig+0x60>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 0207 	and.w	r2, r3, #7
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	601a      	str	r2, [r3, #0]
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	40021000 	.word	0x40021000
 800ca88:	40022000 	.word	0x40022000

0800ca8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ca94:	2300      	movs	r3, #0
 800ca96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ca98:	4b2a      	ldr	r3, [pc, #168]	; (800cb44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800caa4:	f7ff f980 	bl	800bda8 <HAL_PWREx_GetVoltageRange>
 800caa8:	6178      	str	r0, [r7, #20]
 800caaa:	e014      	b.n	800cad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800caac:	4b25      	ldr	r3, [pc, #148]	; (800cb44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab0:	4a24      	ldr	r2, [pc, #144]	; (800cb44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cab6:	6593      	str	r3, [r2, #88]	; 0x58
 800cab8:	4b22      	ldr	r3, [pc, #136]	; (800cb44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cabc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cac4:	f7ff f970 	bl	800bda8 <HAL_PWREx_GetVoltageRange>
 800cac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800caca:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cace:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cadc:	d10b      	bne.n	800caf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b80      	cmp	r3, #128	; 0x80
 800cae2:	d919      	bls.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2ba0      	cmp	r3, #160	; 0xa0
 800cae8:	d902      	bls.n	800caf0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800caea:	2302      	movs	r3, #2
 800caec:	613b      	str	r3, [r7, #16]
 800caee:	e013      	b.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800caf0:	2301      	movs	r3, #1
 800caf2:	613b      	str	r3, [r7, #16]
 800caf4:	e010      	b.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b80      	cmp	r3, #128	; 0x80
 800cafa:	d902      	bls.n	800cb02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cafc:	2303      	movs	r3, #3
 800cafe:	613b      	str	r3, [r7, #16]
 800cb00:	e00a      	b.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2b80      	cmp	r3, #128	; 0x80
 800cb06:	d102      	bne.n	800cb0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cb08:	2302      	movs	r3, #2
 800cb0a:	613b      	str	r3, [r7, #16]
 800cb0c:	e004      	b.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b70      	cmp	r3, #112	; 0x70
 800cb12:	d101      	bne.n	800cb18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cb14:	2301      	movs	r3, #1
 800cb16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cb18:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f023 0207 	bic.w	r2, r3, #7
 800cb20:	4909      	ldr	r1, [pc, #36]	; (800cb48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cb28:	4b07      	ldr	r3, [pc, #28]	; (800cb48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 0307 	and.w	r3, r3, #7
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d001      	beq.n	800cb3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	40021000 	.word	0x40021000
 800cb48:	40022000 	.word	0x40022000

0800cb4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb54:	2300      	movs	r3, #0
 800cb56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb58:	2300      	movs	r3, #0
 800cb5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d041      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb70:	d02a      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cb72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cb76:	d824      	bhi.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cb78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb7c:	d008      	beq.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cb7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb82:	d81e      	bhi.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00a      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cb88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb8c:	d010      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cb8e:	e018      	b.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cb90:	4b86      	ldr	r3, [pc, #536]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	4a85      	ldr	r2, [pc, #532]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cb9c:	e015      	b.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	3304      	adds	r3, #4
 800cba2:	2100      	movs	r1, #0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 fadf 	bl	800d168 <RCCEx_PLLSAI1_Config>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbae:	e00c      	b.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3320      	adds	r3, #32
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 fbc8 	bl	800d34c <RCCEx_PLLSAI2_Config>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cbc0:	e003      	b.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	74fb      	strb	r3, [r7, #19]
      break;
 800cbc6:	e000      	b.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cbc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbca:	7cfb      	ldrb	r3, [r7, #19]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10b      	bne.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cbd0:	4b76      	ldr	r3, [pc, #472]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbde:	4973      	ldr	r1, [pc, #460]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cbe6:	e001      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe8:	7cfb      	ldrb	r3, [r7, #19]
 800cbea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d041      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc00:	d02a      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800cc02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc06:	d824      	bhi.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc0c:	d008      	beq.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cc0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc12:	d81e      	bhi.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00a      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800cc18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc1c:	d010      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800cc1e:	e018      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800cc20:	4b62      	ldr	r3, [pc, #392]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	4a61      	ldr	r2, [pc, #388]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc2c:	e015      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3304      	adds	r3, #4
 800cc32:	2100      	movs	r1, #0
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 fa97 	bl	800d168 <RCCEx_PLLSAI1_Config>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc3e:	e00c      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	3320      	adds	r3, #32
 800cc44:	2100      	movs	r1, #0
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fb80 	bl	800d34c <RCCEx_PLLSAI2_Config>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800cc50:	e003      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	74fb      	strb	r3, [r7, #19]
      break;
 800cc56:	e000      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800cc58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc5a:	7cfb      	ldrb	r3, [r7, #19]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10b      	bne.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cc60:	4b52      	ldr	r3, [pc, #328]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc6e:	494f      	ldr	r1, [pc, #316]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc70:	4313      	orrs	r3, r2
 800cc72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cc76:	e001      	b.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc78:	7cfb      	ldrb	r3, [r7, #19]
 800cc7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 80a0 	beq.w	800cdca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cc8e:	4b47      	ldr	r3, [pc, #284]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cc90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e000      	b.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00d      	beq.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cca4:	4b41      	ldr	r3, [pc, #260]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca8:	4a40      	ldr	r2, [pc, #256]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccae:	6593      	str	r3, [r2, #88]	; 0x58
 800ccb0:	4b3e      	ldr	r3, [pc, #248]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccb8:	60bb      	str	r3, [r7, #8]
 800ccba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccc0:	4b3b      	ldr	r3, [pc, #236]	; (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a3a      	ldr	r2, [pc, #232]	; (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ccc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cccc:	f7fa ff6e 	bl	8007bac <HAL_GetTick>
 800ccd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ccd2:	e009      	b.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ccd4:	f7fa ff6a 	bl	8007bac <HAL_GetTick>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d902      	bls.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800cce2:	2303      	movs	r3, #3
 800cce4:	74fb      	strb	r3, [r7, #19]
        break;
 800cce6:	e005      	b.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cce8:	4b31      	ldr	r3, [pc, #196]	; (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d0ef      	beq.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ccf4:	7cfb      	ldrb	r3, [r7, #19]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d15c      	bne.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ccfa:	4b2c      	ldr	r3, [pc, #176]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ccfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01f      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d019      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd18:	4b24      	ldr	r3, [pc, #144]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd24:	4b21      	ldr	r3, [pc, #132]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd2a:	4a20      	ldr	r2, [pc, #128]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd34:	4b1d      	ldr	r3, [pc, #116]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd3a:	4a1c      	ldr	r2, [pc, #112]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cd44:	4a19      	ldr	r2, [pc, #100]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d016      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd56:	f7fa ff29 	bl	8007bac <HAL_GetTick>
 800cd5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd5c:	e00b      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd5e:	f7fa ff25 	bl	8007bac <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d902      	bls.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	74fb      	strb	r3, [r7, #19]
            break;
 800cd74:	e006      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd76:	4b0d      	ldr	r3, [pc, #52]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0ec      	beq.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cd84:	7cfb      	ldrb	r3, [r7, #19]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10c      	bne.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cd8a:	4b08      	ldr	r3, [pc, #32]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd9a:	4904      	ldr	r1, [pc, #16]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cda2:	e009      	b.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cda4:	7cfb      	ldrb	r3, [r7, #19]
 800cda6:	74bb      	strb	r3, [r7, #18]
 800cda8:	e006      	b.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cdaa:	bf00      	nop
 800cdac:	40021000 	.word	0x40021000
 800cdb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdb4:	7cfb      	ldrb	r3, [r7, #19]
 800cdb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdb8:	7c7b      	ldrb	r3, [r7, #17]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d105      	bne.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdbe:	4ba6      	ldr	r3, [pc, #664]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdc2:	4aa5      	ldr	r2, [pc, #660]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00a      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cdd6:	4ba0      	ldr	r3, [pc, #640]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cddc:	f023 0203 	bic.w	r2, r3, #3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde4:	499c      	ldr	r1, [pc, #624]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0302 	and.w	r3, r3, #2
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00a      	beq.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cdf8:	4b97      	ldr	r3, [pc, #604]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdfe:	f023 020c 	bic.w	r2, r3, #12
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce06:	4994      	ldr	r1, [pc, #592]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 0304 	and.w	r3, r3, #4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce1a:	4b8f      	ldr	r3, [pc, #572]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce28:	498b      	ldr	r1, [pc, #556]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0308 	and.w	r3, r3, #8
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00a      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce3c:	4b86      	ldr	r3, [pc, #536]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4a:	4983      	ldr	r1, [pc, #524]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 0310 	and.w	r3, r3, #16
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00a      	beq.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ce5e:	4b7e      	ldr	r3, [pc, #504]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce6c:	497a      	ldr	r1, [pc, #488]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00a      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce80:	4b75      	ldr	r3, [pc, #468]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce8e:	4972      	ldr	r1, [pc, #456]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ce90:	4313      	orrs	r3, r2
 800ce92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cea2:	4b6d      	ldr	r3, [pc, #436]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceb0:	4969      	ldr	r1, [pc, #420]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00a      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cec4:	4b64      	ldr	r3, [pc, #400]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ced2:	4961      	ldr	r1, [pc, #388]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ced4:	4313      	orrs	r3, r2
 800ced6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00a      	beq.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cee6:	4b5c      	ldr	r3, [pc, #368]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef4:	4958      	ldr	r1, [pc, #352]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00a      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf08:	4b53      	ldr	r3, [pc, #332]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf16:	4950      	ldr	r1, [pc, #320]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf2a:	4b4b      	ldr	r3, [pc, #300]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf38:	4947      	ldr	r1, [pc, #284]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf4c:	4b42      	ldr	r3, [pc, #264]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf52:	f023 0203 	bic.w	r2, r3, #3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf5a:	493f      	ldr	r1, [pc, #252]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d028      	beq.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cf6e:	4b3a      	ldr	r3, [pc, #232]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf7c:	4936      	ldr	r1, [pc, #216]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf8c:	d106      	bne.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cf8e:	4b32      	ldr	r3, [pc, #200]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	4a31      	ldr	r2, [pc, #196]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cf94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf98:	60d3      	str	r3, [r2, #12]
 800cf9a:	e011      	b.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfa4:	d10c      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	2101      	movs	r1, #1
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 f8db 	bl	800d168 <RCCEx_PLLSAI1_Config>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cfb6:	7cfb      	ldrb	r3, [r7, #19]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800cfbc:	7cfb      	ldrb	r3, [r7, #19]
 800cfbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d028      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cfcc:	4b22      	ldr	r3, [pc, #136]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfda:	491f      	ldr	r1, [pc, #124]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfea:	d106      	bne.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfec:	4b1a      	ldr	r3, [pc, #104]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	4a19      	ldr	r2, [pc, #100]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800cff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cff6:	60d3      	str	r3, [r2, #12]
 800cff8:	e011      	b.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d002:	d10c      	bne.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	3304      	adds	r3, #4
 800d008:	2101      	movs	r1, #1
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 f8ac 	bl	800d168 <RCCEx_PLLSAI1_Config>
 800d010:	4603      	mov	r3, r0
 800d012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d014:	7cfb      	ldrb	r3, [r7, #19]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800d01a:	7cfb      	ldrb	r3, [r7, #19]
 800d01c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d026:	2b00      	cmp	r3, #0
 800d028:	d02a      	beq.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d02a:	4b0b      	ldr	r3, [pc, #44]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d038:	4907      	ldr	r1, [pc, #28]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d03a:	4313      	orrs	r3, r2
 800d03c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d048:	d108      	bne.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d04a:	4b03      	ldr	r3, [pc, #12]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	4a02      	ldr	r2, [pc, #8]	; (800d058 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800d050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d054:	60d3      	str	r3, [r2, #12]
 800d056:	e013      	b.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800d058:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d064:	d10c      	bne.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3304      	adds	r3, #4
 800d06a:	2101      	movs	r1, #1
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 f87b 	bl	800d168 <RCCEx_PLLSAI1_Config>
 800d072:	4603      	mov	r3, r0
 800d074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d076:	7cfb      	ldrb	r3, [r7, #19]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800d07c:	7cfb      	ldrb	r3, [r7, #19]
 800d07e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d02f      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d08c:	4b2c      	ldr	r3, [pc, #176]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d092:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09a:	4929      	ldr	r1, [pc, #164]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0aa:	d10d      	bne.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	2102      	movs	r1, #2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f858 	bl	800d168 <RCCEx_PLLSAI1_Config>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0bc:	7cfb      	ldrb	r3, [r7, #19]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d014      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d0c2:	7cfb      	ldrb	r3, [r7, #19]
 800d0c4:	74bb      	strb	r3, [r7, #18]
 800d0c6:	e011      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0d0:	d10c      	bne.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3320      	adds	r3, #32
 800d0d6:	2102      	movs	r1, #2
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 f937 	bl	800d34c <RCCEx_PLLSAI2_Config>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0e2:	7cfb      	ldrb	r3, [r7, #19]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800d0e8:	7cfb      	ldrb	r3, [r7, #19]
 800d0ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00b      	beq.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d0f8:	4b11      	ldr	r3, [pc, #68]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d108:	490d      	ldr	r1, [pc, #52]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d10a:	4313      	orrs	r3, r2
 800d10c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00b      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d11c:	4b08      	ldr	r3, [pc, #32]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d12c:	4904      	ldr	r1, [pc, #16]	; (800d140 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d12e:	4313      	orrs	r3, r2
 800d130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d134:	7cbb      	ldrb	r3, [r7, #18]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	40021000 	.word	0x40021000

0800d144 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800d144:	b480      	push	{r7}
 800d146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800d148:	4b06      	ldr	r3, [pc, #24]	; (800d164 <HAL_RCCEx_EnableLSECSS+0x20>)
 800d14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d14e:	4a05      	ldr	r2, [pc, #20]	; (800d164 <HAL_RCCEx_EnableLSECSS+0x20>)
 800d150:	f043 0320 	orr.w	r3, r3, #32
 800d154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d158:	bf00      	nop
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	40021000 	.word	0x40021000

0800d168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d176:	4b74      	ldr	r3, [pc, #464]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	f003 0303 	and.w	r3, r3, #3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d018      	beq.n	800d1b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d182:	4b71      	ldr	r3, [pc, #452]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	f003 0203 	and.w	r2, r3, #3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d10d      	bne.n	800d1ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
       ||
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d19a:	4b6b      	ldr	r3, [pc, #428]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	091b      	lsrs	r3, r3, #4
 800d1a0:	f003 0307 	and.w	r3, r3, #7
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
       ||
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d047      	beq.n	800d23e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	73fb      	strb	r3, [r7, #15]
 800d1b2:	e044      	b.n	800d23e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d018      	beq.n	800d1ee <RCCEx_PLLSAI1_Config+0x86>
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d825      	bhi.n	800d20c <RCCEx_PLLSAI1_Config+0xa4>
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d002      	beq.n	800d1ca <RCCEx_PLLSAI1_Config+0x62>
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d009      	beq.n	800d1dc <RCCEx_PLLSAI1_Config+0x74>
 800d1c8:	e020      	b.n	800d20c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d1ca:	4b5f      	ldr	r3, [pc, #380]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 0302 	and.w	r3, r3, #2
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d11d      	bne.n	800d212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d1da:	e01a      	b.n	800d212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d1dc:	4b5a      	ldr	r3, [pc, #360]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d116      	bne.n	800d216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d1ec:	e013      	b.n	800d216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d1ee:	4b56      	ldr	r3, [pc, #344]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10f      	bne.n	800d21a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d1fa:	4b53      	ldr	r3, [pc, #332]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d202:	2b00      	cmp	r3, #0
 800d204:	d109      	bne.n	800d21a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d20a:	e006      	b.n	800d21a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	73fb      	strb	r3, [r7, #15]
      break;
 800d210:	e004      	b.n	800d21c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d212:	bf00      	nop
 800d214:	e002      	b.n	800d21c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d216:	bf00      	nop
 800d218:	e000      	b.n	800d21c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d21a:	bf00      	nop
    }

    if(status == HAL_OK)
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10d      	bne.n	800d23e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d222:	4b49      	ldr	r3, [pc, #292]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6819      	ldr	r1, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	3b01      	subs	r3, #1
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	430b      	orrs	r3, r1
 800d238:	4943      	ldr	r1, [pc, #268]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d17c      	bne.n	800d33e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d244:	4b40      	ldr	r3, [pc, #256]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a3f      	ldr	r2, [pc, #252]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d24a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d24e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d250:	f7fa fcac 	bl	8007bac <HAL_GetTick>
 800d254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d256:	e009      	b.n	800d26c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d258:	f7fa fca8 	bl	8007bac <HAL_GetTick>
 800d25c:	4602      	mov	r2, r0
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	2b02      	cmp	r3, #2
 800d264:	d902      	bls.n	800d26c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d266:	2303      	movs	r3, #3
 800d268:	73fb      	strb	r3, [r7, #15]
        break;
 800d26a:	e005      	b.n	800d278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d26c:	4b36      	ldr	r3, [pc, #216]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1ef      	bne.n	800d258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d15f      	bne.n	800d33e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d110      	bne.n	800d2a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d284:	4b30      	ldr	r3, [pc, #192]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d28c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	6892      	ldr	r2, [r2, #8]
 800d294:	0211      	lsls	r1, r2, #8
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	68d2      	ldr	r2, [r2, #12]
 800d29a:	06d2      	lsls	r2, r2, #27
 800d29c:	430a      	orrs	r2, r1
 800d29e:	492a      	ldr	r1, [pc, #168]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	610b      	str	r3, [r1, #16]
 800d2a4:	e027      	b.n	800d2f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d112      	bne.n	800d2d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2ac:	4b26      	ldr	r3, [pc, #152]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d2b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6892      	ldr	r2, [r2, #8]
 800d2bc:	0211      	lsls	r1, r2, #8
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	6912      	ldr	r2, [r2, #16]
 800d2c2:	0852      	lsrs	r2, r2, #1
 800d2c4:	3a01      	subs	r2, #1
 800d2c6:	0552      	lsls	r2, r2, #21
 800d2c8:	430a      	orrs	r2, r1
 800d2ca:	491f      	ldr	r1, [pc, #124]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	610b      	str	r3, [r1, #16]
 800d2d0:	e011      	b.n	800d2f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2d2:	4b1d      	ldr	r3, [pc, #116]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d2da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	6892      	ldr	r2, [r2, #8]
 800d2e2:	0211      	lsls	r1, r2, #8
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	6952      	ldr	r2, [r2, #20]
 800d2e8:	0852      	lsrs	r2, r2, #1
 800d2ea:	3a01      	subs	r2, #1
 800d2ec:	0652      	lsls	r2, r2, #25
 800d2ee:	430a      	orrs	r2, r1
 800d2f0:	4915      	ldr	r1, [pc, #84]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d2f6:	4b14      	ldr	r3, [pc, #80]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a13      	ldr	r2, [pc, #76]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d300:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d302:	f7fa fc53 	bl	8007bac <HAL_GetTick>
 800d306:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d308:	e009      	b.n	800d31e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d30a:	f7fa fc4f 	bl	8007bac <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	2b02      	cmp	r3, #2
 800d316:	d902      	bls.n	800d31e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d318:	2303      	movs	r3, #3
 800d31a:	73fb      	strb	r3, [r7, #15]
          break;
 800d31c:	e005      	b.n	800d32a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d31e:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0ef      	beq.n	800d30a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d106      	bne.n	800d33e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d330:	4b05      	ldr	r3, [pc, #20]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d332:	691a      	ldr	r2, [r3, #16]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	4903      	ldr	r1, [pc, #12]	; (800d348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d33a:	4313      	orrs	r3, r2
 800d33c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	40021000 	.word	0x40021000

0800d34c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d35a:	4b69      	ldr	r3, [pc, #420]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	f003 0303 	and.w	r3, r3, #3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d018      	beq.n	800d398 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d366:	4b66      	ldr	r3, [pc, #408]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	f003 0203 	and.w	r2, r3, #3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	429a      	cmp	r2, r3
 800d374:	d10d      	bne.n	800d392 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
       ||
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d009      	beq.n	800d392 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d37e:	4b60      	ldr	r3, [pc, #384]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	091b      	lsrs	r3, r3, #4
 800d384:	f003 0307 	and.w	r3, r3, #7
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
       ||
 800d38e:	429a      	cmp	r2, r3
 800d390:	d047      	beq.n	800d422 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	e044      	b.n	800d422 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	d018      	beq.n	800d3d2 <RCCEx_PLLSAI2_Config+0x86>
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d825      	bhi.n	800d3f0 <RCCEx_PLLSAI2_Config+0xa4>
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d002      	beq.n	800d3ae <RCCEx_PLLSAI2_Config+0x62>
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d009      	beq.n	800d3c0 <RCCEx_PLLSAI2_Config+0x74>
 800d3ac:	e020      	b.n	800d3f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d3ae:	4b54      	ldr	r3, [pc, #336]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d11d      	bne.n	800d3f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d3be:	e01a      	b.n	800d3f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d3c0:	4b4f      	ldr	r3, [pc, #316]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d116      	bne.n	800d3fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d3d0:	e013      	b.n	800d3fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d3d2:	4b4b      	ldr	r3, [pc, #300]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10f      	bne.n	800d3fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d3de:	4b48      	ldr	r3, [pc, #288]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d109      	bne.n	800d3fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3ee:	e006      	b.n	800d3fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f4:	e004      	b.n	800d400 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d3f6:	bf00      	nop
 800d3f8:	e002      	b.n	800d400 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d3fa:	bf00      	nop
 800d3fc:	e000      	b.n	800d400 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d3fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10d      	bne.n	800d422 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d406:	4b3e      	ldr	r3, [pc, #248]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6819      	ldr	r1, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	3b01      	subs	r3, #1
 800d418:	011b      	lsls	r3, r3, #4
 800d41a:	430b      	orrs	r3, r1
 800d41c:	4938      	ldr	r1, [pc, #224]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d422:	7bfb      	ldrb	r3, [r7, #15]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d166      	bne.n	800d4f6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d428:	4b35      	ldr	r3, [pc, #212]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a34      	ldr	r2, [pc, #208]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d42e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d434:	f7fa fbba 	bl	8007bac <HAL_GetTick>
 800d438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d43a:	e009      	b.n	800d450 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d43c:	f7fa fbb6 	bl	8007bac <HAL_GetTick>
 800d440:	4602      	mov	r2, r0
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	1ad3      	subs	r3, r2, r3
 800d446:	2b02      	cmp	r3, #2
 800d448:	d902      	bls.n	800d450 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d44a:	2303      	movs	r3, #3
 800d44c:	73fb      	strb	r3, [r7, #15]
        break;
 800d44e:	e005      	b.n	800d45c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d450:	4b2b      	ldr	r3, [pc, #172]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1ef      	bne.n	800d43c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d149      	bne.n	800d4f6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d110      	bne.n	800d48a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d468:	4b25      	ldr	r3, [pc, #148]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d46a:	695b      	ldr	r3, [r3, #20]
 800d46c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	6892      	ldr	r2, [r2, #8]
 800d478:	0211      	lsls	r1, r2, #8
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	68d2      	ldr	r2, [r2, #12]
 800d47e:	06d2      	lsls	r2, r2, #27
 800d480:	430a      	orrs	r2, r1
 800d482:	491f      	ldr	r1, [pc, #124]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d484:	4313      	orrs	r3, r2
 800d486:	614b      	str	r3, [r1, #20]
 800d488:	e011      	b.n	800d4ae <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d48a:	4b1d      	ldr	r3, [pc, #116]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d492:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	6892      	ldr	r2, [r2, #8]
 800d49a:	0211      	lsls	r1, r2, #8
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	6912      	ldr	r2, [r2, #16]
 800d4a0:	0852      	lsrs	r2, r2, #1
 800d4a2:	3a01      	subs	r2, #1
 800d4a4:	0652      	lsls	r2, r2, #25
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	4915      	ldr	r1, [pc, #84]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d4ae:	4b14      	ldr	r3, [pc, #80]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a13      	ldr	r2, [pc, #76]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ba:	f7fa fb77 	bl	8007bac <HAL_GetTick>
 800d4be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d4c0:	e009      	b.n	800d4d6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d4c2:	f7fa fb73 	bl	8007bac <HAL_GetTick>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d902      	bls.n	800d4d6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	73fb      	strb	r3, [r7, #15]
          break;
 800d4d4:	e005      	b.n	800d4e2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d4d6:	4b0a      	ldr	r3, [pc, #40]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d0ef      	beq.n	800d4c2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d106      	bne.n	800d4f6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4ea:	695a      	ldr	r2, [r3, #20]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	695b      	ldr	r3, [r3, #20]
 800d4f0:	4903      	ldr	r1, [pc, #12]	; (800d500 <RCCEx_PLLSAI2_Config+0x1b4>)
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	40021000 	.word	0x40021000

0800d504 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d06c      	beq.n	800d5f0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7f9 fcde 	bl	8006eec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	22ca      	movs	r2, #202	; 0xca
 800d53e:	625a      	str	r2, [r3, #36]	; 0x24
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2253      	movs	r2, #83	; 0x53
 800d546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fabe 	bl	800daca <RTC_EnterInitMode>
 800d54e:	4603      	mov	r3, r0
 800d550:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d552:	7bfb      	ldrb	r3, [r7, #15]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d14b      	bne.n	800d5f0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6812      	ldr	r2, [r2, #0]
 800d562:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d56a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6899      	ldr	r1, [r3, #8]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	685a      	ldr	r2, [r3, #4]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	431a      	orrs	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	431a      	orrs	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	68d2      	ldr	r2, [r2, #12]
 800d592:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6919      	ldr	r1, [r3, #16]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	041a      	lsls	r2, r3, #16
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 fac1 	bl	800db30 <RTC_ExitInitMode>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d11b      	bne.n	800d5f0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f022 0203 	bic.w	r2, r2, #3
 800d5c6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	69da      	ldr	r2, [r3, #28]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	431a      	orrs	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	22ff      	movs	r2, #255	; 0xff
 800d5e6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <HAL_RTC_DeInit>:
  * @note   This function does not reset the RTC Backup Data registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d063      	beq.n	800d6d6 <HAL_RTC_DeInit+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2202      	movs	r2, #2
 800d612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	22ca      	movs	r2, #202	; 0xca
 800d61c:	625a      	str	r2, [r3, #36]	; 0x24
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2253      	movs	r2, #83	; 0x53
 800d624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 fa4f 	bl	800daca <RTC_EnterInitMode>
 800d62c:	4603      	mov	r3, r0
 800d62e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d630:	7bfb      	ldrb	r3, [r7, #15]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d14f      	bne.n	800d6d6 <HAL_RTC_DeInit+0xda>
    {
      /* Reset all RTC CR register bits */
      hrtc->Instance->TR = 0x00000000U;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2200      	movs	r2, #0
 800d63c:	601a      	str	r2, [r3, #0]
      hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f242 1201 	movw	r2, #8449	; 0x2101
 800d646:	605a      	str	r2, [r3, #4]
      hrtc->Instance->CR &= 0x00000000U;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2200      	movs	r2, #0
 800d654:	609a      	str	r2, [r3, #8]

      hrtc->Instance->WUTR = RTC_WUTR_WUT;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d65e:	615a      	str	r2, [r3, #20]
      hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a1e      	ldr	r2, [pc, #120]	; (800d6e0 <HAL_RTC_DeInit+0xe4>)
 800d666:	611a      	str	r2, [r3, #16]
      hrtc->Instance->ALRMAR = 0x00000000U;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2200      	movs	r2, #0
 800d66e:	61da      	str	r2, [r3, #28]
      hrtc->Instance->ALRMBR = 0x00000000U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2200      	movs	r2, #0
 800d676:	621a      	str	r2, [r3, #32]
      hrtc->Instance->SHIFTR = 0x00000000U;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2200      	movs	r2, #0
 800d67e:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->Instance->CALR = 0x00000000U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2200      	movs	r2, #0
 800d686:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Instance->ALRMASSR = 0x00000000U;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2200      	movs	r2, #0
 800d68e:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Instance->ALRMBSSR = 0x00000000U;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2200      	movs	r2, #0
 800d696:	649a      	str	r2, [r3, #72]	; 0x48

      /* Exit initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 fa49 	bl	800db30 <RTC_ExitInitMode>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	73fb      	strb	r3, [r7, #15]


      if (status == HAL_OK)
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d116      	bne.n	800d6d6 <HAL_RTC_DeInit+0xda>
        /* Reset TAMP registers */
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR1 = 0xFFFF0000U;
        ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset))->CR2 = 0x00000000U;
#else
        /* Reset Tamper configuration register */
        hrtc->Instance->TAMPCR = 0x00000000U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Reset Option register */
        hrtc->Instance->OR = 0x00000000U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	22ff      	movs	r2, #255	; 0xff
 800d6be:	625a      	str	r2, [r3, #36]	; 0x24

        /* DeInit the low level hardware: CLOCK, NVIC.*/
        hrtc->MspDeInitCallback(hrtc);
#else
        /* De-Initialize RTC MSP */
        HAL_RTC_MspDeInit(hrtc);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7f9 fc45 	bl	8006f50 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

        hrtc->State = HAL_RTC_STATE_RESET;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Release Lock */
        __HAL_UNLOCK(hrtc);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f883 2020 	strb.w	r2, [r3, #32]
      }
    }
  }

  return status;
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	007f00ff 	.word	0x007f00ff

0800d6e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d6e4:	b590      	push	{r4, r7, lr}
 800d6e6:	b087      	sub	sp, #28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d101      	bne.n	800d6fe <HAL_RTC_SetTime+0x1a>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e08b      	b.n	800d816 <HAL_RTC_SetTime+0x132>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2202      	movs	r2, #2
 800d70a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	22ca      	movs	r2, #202	; 0xca
 800d714:	625a      	str	r2, [r3, #36]	; 0x24
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2253      	movs	r2, #83	; 0x53
 800d71c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f000 f9d3 	bl	800daca <RTC_EnterInitMode>
 800d724:	4603      	mov	r3, r0
 800d726:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d728:	7cfb      	ldrb	r3, [r7, #19]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d163      	bne.n	800d7f6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d126      	bne.n	800d782 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d102      	bne.n	800d748 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	2200      	movs	r2, #0
 800d746:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 fa2d 	bl	800dbac <RTC_ByteToBcd2>
 800d752:	4603      	mov	r3, r0
 800d754:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	785b      	ldrb	r3, [r3, #1]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fa26 	bl	800dbac <RTC_ByteToBcd2>
 800d760:	4603      	mov	r3, r0
 800d762:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d764:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	789b      	ldrb	r3, [r3, #2]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fa1e 	bl	800dbac <RTC_ByteToBcd2>
 800d770:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d772:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	78db      	ldrb	r3, [r3, #3]
 800d77a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d77c:	4313      	orrs	r3, r2
 800d77e:	617b      	str	r3, [r7, #20]
 800d780:	e018      	b.n	800d7b4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2200      	movs	r2, #0
 800d794:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	785b      	ldrb	r3, [r3, #1]
 800d7a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d7a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	78db      	ldrb	r3, [r3, #3]
 800d7ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d7be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d7c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	689a      	ldr	r2, [r3, #8]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d7d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6899      	ldr	r1, [r3, #8]
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	68da      	ldr	r2, [r3, #12]
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f000 f99f 	bl	800db30 <RTC_ExitInitMode>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	22ff      	movs	r2, #255	; 0xff
 800d7fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d7fe:	7cfb      	ldrb	r3, [r7, #19]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d103      	bne.n	800d80c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d814:	7cfb      	ldrb	r3, [r7, #19]
}
 800d816:	4618      	mov	r0, r3
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd90      	pop	{r4, r7, pc}

0800d81e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b086      	sub	sp, #24
 800d822:	af00      	add	r7, sp, #0
 800d824:	60f8      	str	r0, [r7, #12]
 800d826:	60b9      	str	r1, [r7, #8]
 800d828:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d84c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d850:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	0c1b      	lsrs	r3, r3, #16
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	0a1b      	lsrs	r3, r3, #8
 800d866:	b2db      	uxtb	r3, r3
 800d868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	0d9b      	lsrs	r3, r3, #22
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f003 0301 	and.w	r3, r3, #1
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d11a      	bne.n	800d8cc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f9a6 	bl	800dbec <RTC_Bcd2ToByte>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	785b      	ldrb	r3, [r3, #1]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f99d 	bl	800dbec <RTC_Bcd2ToByte>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	789b      	ldrb	r3, [r3, #2]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 f994 	bl	800dbec <RTC_Bcd2ToByte>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d8d6:	b590      	push	{r4, r7, lr}
 800d8d8:	b087      	sub	sp, #28
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d101      	bne.n	800d8f0 <HAL_RTC_SetDate+0x1a>
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	e075      	b.n	800d9dc <HAL_RTC_SetDate+0x106>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10e      	bne.n	800d924 <HAL_RTC_SetDate+0x4e>
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	785b      	ldrb	r3, [r3, #1]
 800d90a:	f003 0310 	and.w	r3, r3, #16
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d008      	beq.n	800d924 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	785b      	ldrb	r3, [r3, #1]
 800d916:	f023 0310 	bic.w	r3, r3, #16
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	330a      	adds	r3, #10
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d11c      	bne.n	800d964 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	78db      	ldrb	r3, [r3, #3]
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 f93c 	bl	800dbac <RTC_ByteToBcd2>
 800d934:	4603      	mov	r3, r0
 800d936:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 f935 	bl	800dbac <RTC_ByteToBcd2>
 800d942:	4603      	mov	r3, r0
 800d944:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d946:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	789b      	ldrb	r3, [r3, #2]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 f92d 	bl	800dbac <RTC_ByteToBcd2>
 800d952:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d954:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d95e:	4313      	orrs	r3, r2
 800d960:	617b      	str	r3, [r7, #20]
 800d962:	e00e      	b.n	800d982 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	78db      	ldrb	r3, [r3, #3]
 800d968:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	785b      	ldrb	r3, [r3, #1]
 800d96e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d970:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d976:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d97e:	4313      	orrs	r3, r2
 800d980:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	22ca      	movs	r2, #202	; 0xca
 800d988:	625a      	str	r2, [r3, #36]	; 0x24
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2253      	movs	r2, #83	; 0x53
 800d990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 f899 	bl	800daca <RTC_EnterInitMode>
 800d998:	4603      	mov	r3, r0
 800d99a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d99c:	7cfb      	ldrb	r3, [r7, #19]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10c      	bne.n	800d9bc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f000 f8bc 	bl	800db30 <RTC_ExitInitMode>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	22ff      	movs	r2, #255	; 0xff
 800d9c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d9c4:	7cfb      	ldrb	r3, [r7, #19]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d103      	bne.n	800d9d2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d9da:	7cfb      	ldrb	r3, [r7, #19]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	371c      	adds	r7, #28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd90      	pop	{r4, r7, pc}

0800d9e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d9fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	0c1b      	lsrs	r3, r3, #16
 800da04:	b2da      	uxtb	r2, r3
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	0a1b      	lsrs	r3, r3, #8
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 031f 	and.w	r3, r3, #31
 800da14:	b2da      	uxtb	r2, r3
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da22:	b2da      	uxtb	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	0b5b      	lsrs	r3, r3, #13
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	b2da      	uxtb	r2, r3
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d11a      	bne.n	800da74 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	78db      	ldrb	r3, [r3, #3]
 800da42:	4618      	mov	r0, r3
 800da44:	f000 f8d2 	bl	800dbec <RTC_Bcd2ToByte>
 800da48:	4603      	mov	r3, r0
 800da4a:	461a      	mov	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	785b      	ldrb	r3, [r3, #1]
 800da54:	4618      	mov	r0, r3
 800da56:	f000 f8c9 	bl	800dbec <RTC_Bcd2ToByte>
 800da5a:	4603      	mov	r3, r0
 800da5c:	461a      	mov	r2, r3
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	789b      	ldrb	r3, [r3, #2]
 800da66:	4618      	mov	r0, r3
 800da68:	f000 f8c0 	bl	800dbec <RTC_Bcd2ToByte>
 800da6c:	4603      	mov	r3, r0
 800da6e:	461a      	mov	r2, r3
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	68da      	ldr	r2, [r3, #12]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800da94:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800da96:	f7fa f889 	bl	8007bac <HAL_GetTick>
 800da9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800da9c:	e009      	b.n	800dab2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da9e:	f7fa f885 	bl	8007bac <HAL_GetTick>
 800daa2:	4602      	mov	r2, r0
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daac:	d901      	bls.n	800dab2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800daae:	2303      	movs	r3, #3
 800dab0:	e007      	b.n	800dac2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	f003 0320 	and.w	r3, r3, #32
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d0ee      	beq.n	800da9e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d120      	bne.n	800db26 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f04f 32ff 	mov.w	r2, #4294967295
 800daec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800daee:	f7fa f85d 	bl	8007bac <HAL_GetTick>
 800daf2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800daf4:	e00d      	b.n	800db12 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800daf6:	f7fa f859 	bl	8007bac <HAL_GetTick>
 800dafa:	4602      	mov	r2, r0
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db04:	d905      	bls.n	800db12 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2203      	movs	r2, #3
 800db0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d102      	bne.n	800db26 <RTC_EnterInitMode+0x5c>
 800db20:	7bfb      	ldrb	r3, [r7, #15]
 800db22:	2b03      	cmp	r3, #3
 800db24:	d1e7      	bne.n	800daf6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800db26:	7bfb      	ldrb	r3, [r7, #15]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800db3c:	4b1a      	ldr	r3, [pc, #104]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	4a19      	ldr	r2, [pc, #100]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db46:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800db48:	4b17      	ldr	r3, [pc, #92]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	f003 0320 	and.w	r3, r3, #32
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10c      	bne.n	800db6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff ff92 	bl	800da7e <HAL_RTC_WaitForSynchro>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01e      	beq.n	800db9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2203      	movs	r2, #3
 800db64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800db68:	2303      	movs	r3, #3
 800db6a:	73fb      	strb	r3, [r7, #15]
 800db6c:	e017      	b.n	800db9e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800db6e:	4b0e      	ldr	r3, [pc, #56]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	4a0d      	ldr	r2, [pc, #52]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db74:	f023 0320 	bic.w	r3, r3, #32
 800db78:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff ff7f 	bl	800da7e <HAL_RTC_WaitForSynchro>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d005      	beq.n	800db92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2203      	movs	r2, #3
 800db8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800db8e:	2303      	movs	r3, #3
 800db90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800db92:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	4a04      	ldr	r2, [pc, #16]	; (800dba8 <RTC_ExitInitMode+0x78>)
 800db98:	f043 0320 	orr.w	r3, r3, #32
 800db9c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	40002800 	.word	0x40002800

0800dbac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800dbbe:	e005      	b.n	800dbcc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800dbc6:	7afb      	ldrb	r3, [r7, #11]
 800dbc8:	3b0a      	subs	r3, #10
 800dbca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800dbcc:	7afb      	ldrb	r3, [r7, #11]
 800dbce:	2b09      	cmp	r3, #9
 800dbd0:	d8f6      	bhi.n	800dbc0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	011b      	lsls	r3, r3, #4
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	7afb      	ldrb	r3, [r7, #11]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	b2db      	uxtb	r3, r3
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	091b      	lsrs	r3, r3, #4
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	0092      	lsls	r2, r2, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	f003 030f 	and.w	r3, r3, #15
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
 800dc10:	4413      	add	r3, r2
 800dc12:	b2db      	uxtb	r3, r3
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d101      	bne.n	800dc36 <HAL_RTCEx_EnableBypassShadow+0x16>
 800dc32:	2302      	movs	r3, #2
 800dc34:	e024      	b.n	800dc80 <HAL_RTCEx_EnableBypassShadow+0x60>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2202      	movs	r2, #2
 800dc42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	22ca      	movs	r2, #202	; 0xca
 800dc4c:	625a      	str	r2, [r3, #36]	; 0x24
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2253      	movs	r2, #83	; 0x53
 800dc54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	689a      	ldr	r2, [r3, #8]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f042 0220 	orr.w	r2, r2, #32
 800dc64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	22ff      	movs	r2, #255	; 0xff
 800dc6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e095      	b.n	800ddca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d108      	bne.n	800dcb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcae:	d009      	beq.n	800dcc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	61da      	str	r2, [r3, #28]
 800dcb6:	e005      	b.n	800dcc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7f9 f952 	bl	8006f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2202      	movs	r2, #2
 800dce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd04:	d902      	bls.n	800dd0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]
 800dd0a:	e002      	b.n	800dd12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dd1a:	d007      	beq.n	800dd2c <HAL_SPI_Init+0xa0>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd24:	d002      	beq.n	800dd2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dd3c:	431a      	orrs	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	f003 0302 	and.w	r3, r3, #2
 800dd46:	431a      	orrs	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	f003 0301 	and.w	r3, r3, #1
 800dd50:	431a      	orrs	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	69db      	ldr	r3, [r3, #28]
 800dd60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd6e:	ea42 0103 	orr.w	r1, r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	430a      	orrs	r2, r1
 800dd80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	0c1b      	lsrs	r3, r3, #16
 800dd88:	f003 0204 	and.w	r2, r3, #4
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd90:	f003 0310 	and.w	r3, r3, #16
 800dd94:	431a      	orrs	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9a:	f003 0308 	and.w	r3, r3, #8
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dda8:	ea42 0103 	orr.w	r1, r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b088      	sub	sp, #32
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	60b9      	str	r1, [r7, #8]
 800dddc:	603b      	str	r3, [r7, #0]
 800ddde:	4613      	mov	r3, r2
 800dde0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dde2:	2300      	movs	r3, #0
 800dde4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d101      	bne.n	800ddf4 <HAL_SPI_Transmit+0x22>
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	e158      	b.n	800e0a6 <HAL_SPI_Transmit+0x2d4>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddfc:	f7f9 fed6 	bl	8007bac <HAL_GetTick>
 800de00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de02:	88fb      	ldrh	r3, [r7, #6]
 800de04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d002      	beq.n	800de18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de12:	2302      	movs	r3, #2
 800de14:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de16:	e13d      	b.n	800e094 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <HAL_SPI_Transmit+0x52>
 800de1e:	88fb      	ldrh	r3, [r7, #6]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d102      	bne.n	800de2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de24:	2301      	movs	r3, #1
 800de26:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de28:	e134      	b.n	800e094 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2203      	movs	r2, #3
 800de2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	88fa      	ldrh	r2, [r7, #6]
 800de42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	88fa      	ldrh	r2, [r7, #6]
 800de48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2200      	movs	r2, #0
 800de4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de74:	d10f      	bne.n	800de96 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dea0:	2b40      	cmp	r3, #64	; 0x40
 800dea2:	d007      	beq.n	800deb4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800deb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800debc:	d94b      	bls.n	800df56 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <HAL_SPI_Transmit+0xfa>
 800dec6:	8afb      	ldrh	r3, [r7, #22]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d13e      	bne.n	800df4a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded0:	881a      	ldrh	r2, [r3, #0]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dedc:	1c9a      	adds	r2, r3, #2
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	3b01      	subs	r3, #1
 800deea:	b29a      	uxth	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800def0:	e02b      	b.n	800df4a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	f003 0302 	and.w	r3, r3, #2
 800defc:	2b02      	cmp	r3, #2
 800defe:	d112      	bne.n	800df26 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df04:	881a      	ldrh	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df10:	1c9a      	adds	r2, r3, #2
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	3b01      	subs	r3, #1
 800df1e:	b29a      	uxth	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df24:	e011      	b.n	800df4a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df26:	f7f9 fe41 	bl	8007bac <HAL_GetTick>
 800df2a:	4602      	mov	r2, r0
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	429a      	cmp	r2, r3
 800df34:	d803      	bhi.n	800df3e <HAL_SPI_Transmit+0x16c>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3c:	d102      	bne.n	800df44 <HAL_SPI_Transmit+0x172>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d102      	bne.n	800df4a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800df44:	2303      	movs	r3, #3
 800df46:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df48:	e0a4      	b.n	800e094 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df4e:	b29b      	uxth	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1ce      	bne.n	800def2 <HAL_SPI_Transmit+0x120>
 800df54:	e07c      	b.n	800e050 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d002      	beq.n	800df64 <HAL_SPI_Transmit+0x192>
 800df5e:	8afb      	ldrh	r3, [r7, #22]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d170      	bne.n	800e046 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df68:	b29b      	uxth	r3, r3
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d912      	bls.n	800df94 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df72:	881a      	ldrh	r2, [r3, #0]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7e:	1c9a      	adds	r2, r3, #2
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df88:	b29b      	uxth	r3, r3
 800df8a:	3b02      	subs	r3, #2
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df92:	e058      	b.n	800e046 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	330c      	adds	r3, #12
 800df9e:	7812      	ldrb	r2, [r2, #0]
 800dfa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa6:	1c5a      	adds	r2, r3, #1
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800dfba:	e044      	b.n	800e046 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	f003 0302 	and.w	r3, r3, #2
 800dfc6:	2b02      	cmp	r3, #2
 800dfc8:	d12b      	bne.n	800e022 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d912      	bls.n	800dffa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	881a      	ldrh	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe4:	1c9a      	adds	r2, r3, #2
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	3b02      	subs	r3, #2
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dff8:	e025      	b.n	800e046 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	330c      	adds	r3, #12
 800e004:	7812      	ldrb	r2, [r2, #0]
 800e006:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00c:	1c5a      	adds	r2, r3, #1
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e016:	b29b      	uxth	r3, r3
 800e018:	3b01      	subs	r3, #1
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e020:	e011      	b.n	800e046 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e022:	f7f9 fdc3 	bl	8007bac <HAL_GetTick>
 800e026:	4602      	mov	r2, r0
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	683a      	ldr	r2, [r7, #0]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d803      	bhi.n	800e03a <HAL_SPI_Transmit+0x268>
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e038:	d102      	bne.n	800e040 <HAL_SPI_Transmit+0x26e>
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d102      	bne.n	800e046 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e044:	e026      	b.n	800e094 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1b5      	bne.n	800dfbc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e050:	69ba      	ldr	r2, [r7, #24]
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 fcdf 	bl	800ea18 <SPI_EndRxTxTransaction>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2220      	movs	r2, #32
 800e064:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10a      	bne.n	800e084 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e06e:	2300      	movs	r3, #0
 800e070:	613b      	str	r3, [r7, #16]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	613b      	str	r3, [r7, #16]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	613b      	str	r3, [r7, #16]
 800e082:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	77fb      	strb	r3, [r7, #31]
 800e090:	e000      	b.n	800e094 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e092:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e0a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b088      	sub	sp, #32
 800e0b2:	af02      	add	r7, sp, #8
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	603b      	str	r3, [r7, #0]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0ca:	d112      	bne.n	800e0f2 <HAL_SPI_Receive+0x44>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10e      	bne.n	800e0f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2204      	movs	r2, #4
 800e0d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0dc:	88fa      	ldrh	r2, [r7, #6]
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 f910 	bl	800e30e <HAL_SPI_TransmitReceive>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	e109      	b.n	800e306 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d101      	bne.n	800e100 <HAL_SPI_Receive+0x52>
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	e102      	b.n	800e306 <HAL_SPI_Receive+0x258>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e108:	f7f9 fd50 	bl	8007bac <HAL_GetTick>
 800e10c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b01      	cmp	r3, #1
 800e118:	d002      	beq.n	800e120 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e11a:	2302      	movs	r3, #2
 800e11c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e11e:	e0e9      	b.n	800e2f4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <HAL_SPI_Receive+0x7e>
 800e126:	88fb      	ldrh	r3, [r7, #6]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d102      	bne.n	800e132 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e130:	e0e0      	b.n	800e2f4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2204      	movs	r2, #4
 800e136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	88fa      	ldrh	r2, [r7, #6]
 800e14a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	88fa      	ldrh	r2, [r7, #6]
 800e152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e17c:	d908      	bls.n	800e190 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e18c:	605a      	str	r2, [r3, #4]
 800e18e:	e007      	b.n	800e1a0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e19e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1a8:	d10f      	bne.n	800e1ca <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e1c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d4:	2b40      	cmp	r3, #64	; 0x40
 800e1d6:	d007      	beq.n	800e1e8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e1f0:	d867      	bhi.n	800e2c2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e1f2:	e030      	b.n	800e256 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d117      	bne.n	800e232 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f103 020c 	add.w	r2, r3, #12
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20e:	7812      	ldrb	r2, [r2, #0]
 800e210:	b2d2      	uxtb	r2, r2
 800e212:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e218:	1c5a      	adds	r2, r3, #1
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e224:	b29b      	uxth	r3, r3
 800e226:	3b01      	subs	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e230:	e011      	b.n	800e256 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e232:	f7f9 fcbb 	bl	8007bac <HAL_GetTick>
 800e236:	4602      	mov	r2, r0
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d803      	bhi.n	800e24a <HAL_SPI_Receive+0x19c>
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e248:	d102      	bne.n	800e250 <HAL_SPI_Receive+0x1a2>
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e250:	2303      	movs	r3, #3
 800e252:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e254:	e04e      	b.n	800e2f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1c8      	bne.n	800e1f4 <HAL_SPI_Receive+0x146>
 800e262:	e034      	b.n	800e2ce <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d115      	bne.n	800e29e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	68da      	ldr	r2, [r3, #12]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e27c:	b292      	uxth	r2, r2
 800e27e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e284:	1c9a      	adds	r2, r3, #2
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e290:	b29b      	uxth	r3, r3
 800e292:	3b01      	subs	r3, #1
 800e294:	b29a      	uxth	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e29c:	e011      	b.n	800e2c2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e29e:	f7f9 fc85 	bl	8007bac <HAL_GetTick>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d803      	bhi.n	800e2b6 <HAL_SPI_Receive+0x208>
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b4:	d102      	bne.n	800e2bc <HAL_SPI_Receive+0x20e>
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d102      	bne.n	800e2c2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e2bc:	2303      	movs	r3, #3
 800e2be:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e2c0:	e018      	b.n	800e2f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1ca      	bne.n	800e264 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2ce:	693a      	ldr	r2, [r7, #16]
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f000 fb48 	bl	800e968 <SPI_EndRxTransaction>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2220      	movs	r2, #32
 800e2e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	75fb      	strb	r3, [r7, #23]
 800e2f0:	e000      	b.n	800e2f4 <HAL_SPI_Receive+0x246>
  }

error :
 800e2f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e304:	7dfb      	ldrb	r3, [r7, #23]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b08a      	sub	sp, #40	; 0x28
 800e312:	af00      	add	r7, sp, #0
 800e314:	60f8      	str	r0, [r7, #12]
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
 800e31a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e31c:	2301      	movs	r3, #1
 800e31e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d101      	bne.n	800e334 <HAL_SPI_TransmitReceive+0x26>
 800e330:	2302      	movs	r3, #2
 800e332:	e1fb      	b.n	800e72c <HAL_SPI_TransmitReceive+0x41e>
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e33c:	f7f9 fc36 	bl	8007bac <HAL_GetTick>
 800e340:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e348:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e350:	887b      	ldrh	r3, [r7, #2]
 800e352:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e354:	887b      	ldrh	r3, [r7, #2]
 800e356:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e358:	7efb      	ldrb	r3, [r7, #27]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d00e      	beq.n	800e37c <HAL_SPI_TransmitReceive+0x6e>
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e364:	d106      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d102      	bne.n	800e374 <HAL_SPI_TransmitReceive+0x66>
 800e36e:	7efb      	ldrb	r3, [r7, #27]
 800e370:	2b04      	cmp	r3, #4
 800e372:	d003      	beq.n	800e37c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e374:	2302      	movs	r3, #2
 800e376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e37a:	e1cd      	b.n	800e718 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d005      	beq.n	800e38e <HAL_SPI_TransmitReceive+0x80>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <HAL_SPI_TransmitReceive+0x80>
 800e388:	887b      	ldrh	r3, [r7, #2]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d103      	bne.n	800e396 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e38e:	2301      	movs	r3, #1
 800e390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e394:	e1c0      	b.n	800e718 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d003      	beq.n	800e3aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2205      	movs	r2, #5
 800e3a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	887a      	ldrh	r2, [r7, #2]
 800e3ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	887a      	ldrh	r2, [r7, #2]
 800e3c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	887a      	ldrh	r2, [r7, #2]
 800e3d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	887a      	ldrh	r2, [r7, #2]
 800e3d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e3ec:	d802      	bhi.n	800e3f4 <HAL_SPI_TransmitReceive+0xe6>
 800e3ee:	8a3b      	ldrh	r3, [r7, #16]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d908      	bls.n	800e406 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	685a      	ldr	r2, [r3, #4]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e402:	605a      	str	r2, [r3, #4]
 800e404:	e007      	b.n	800e416 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e414:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e420:	2b40      	cmp	r3, #64	; 0x40
 800e422:	d007      	beq.n	800e434 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e43c:	d97c      	bls.n	800e538 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <HAL_SPI_TransmitReceive+0x13e>
 800e446:	8a7b      	ldrh	r3, [r7, #18]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d169      	bne.n	800e520 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e450:	881a      	ldrh	r2, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e45c:	1c9a      	adds	r2, r3, #2
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e466:	b29b      	uxth	r3, r3
 800e468:	3b01      	subs	r3, #1
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e470:	e056      	b.n	800e520 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	f003 0302 	and.w	r3, r3, #2
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d11b      	bne.n	800e4b8 <HAL_SPI_TransmitReceive+0x1aa>
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e484:	b29b      	uxth	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d016      	beq.n	800e4b8 <HAL_SPI_TransmitReceive+0x1aa>
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d113      	bne.n	800e4b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e494:	881a      	ldrh	r2, [r3, #0]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a0:	1c9a      	adds	r2, r3, #2
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d11c      	bne.n	800e500 <HAL_SPI_TransmitReceive+0x1f2>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d016      	beq.n	800e500 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68da      	ldr	r2, [r3, #12]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4e4:	1c9a      	adds	r2, r3, #2
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e500:	f7f9 fb54 	bl	8007bac <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d807      	bhi.n	800e520 <HAL_SPI_TransmitReceive+0x212>
 800e510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e516:	d003      	beq.n	800e520 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e518:	2303      	movs	r3, #3
 800e51a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e51e:	e0fb      	b.n	800e718 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e524:	b29b      	uxth	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1a3      	bne.n	800e472 <HAL_SPI_TransmitReceive+0x164>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e530:	b29b      	uxth	r3, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	d19d      	bne.n	800e472 <HAL_SPI_TransmitReceive+0x164>
 800e536:	e0df      	b.n	800e6f8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <HAL_SPI_TransmitReceive+0x23a>
 800e540:	8a7b      	ldrh	r3, [r7, #18]
 800e542:	2b01      	cmp	r3, #1
 800e544:	f040 80cb 	bne.w	800e6de <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d912      	bls.n	800e578 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e556:	881a      	ldrh	r2, [r3, #0]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e562:	1c9a      	adds	r2, r3, #2
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	3b02      	subs	r3, #2
 800e570:	b29a      	uxth	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e576:	e0b2      	b.n	800e6de <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	330c      	adds	r3, #12
 800e582:	7812      	ldrb	r2, [r2, #0]
 800e584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e58a:	1c5a      	adds	r2, r3, #1
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e594:	b29b      	uxth	r3, r3
 800e596:	3b01      	subs	r3, #1
 800e598:	b29a      	uxth	r2, r3
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e59e:	e09e      	b.n	800e6de <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f003 0302 	and.w	r3, r3, #2
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d134      	bne.n	800e618 <HAL_SPI_TransmitReceive+0x30a>
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d02f      	beq.n	800e618 <HAL_SPI_TransmitReceive+0x30a>
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d12c      	bne.n	800e618 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d912      	bls.n	800e5ee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5cc:	881a      	ldrh	r2, [r3, #0]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d8:	1c9a      	adds	r2, r3, #2
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	3b02      	subs	r3, #2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5ec:	e012      	b.n	800e614 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	330c      	adds	r3, #12
 800e5f8:	7812      	ldrb	r2, [r2, #0]
 800e5fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e600:	1c5a      	adds	r2, r3, #1
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	3b01      	subs	r3, #1
 800e60e:	b29a      	uxth	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e614:	2300      	movs	r3, #0
 800e616:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b01      	cmp	r3, #1
 800e624:	d148      	bne.n	800e6b8 <HAL_SPI_TransmitReceive+0x3aa>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d042      	beq.n	800e6b8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e638:	b29b      	uxth	r3, r3
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d923      	bls.n	800e686 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	68da      	ldr	r2, [r3, #12]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e648:	b292      	uxth	r2, r2
 800e64a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e650:	1c9a      	adds	r2, r3, #2
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	3b02      	subs	r3, #2
 800e660:	b29a      	uxth	r2, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e66e:	b29b      	uxth	r3, r3
 800e670:	2b01      	cmp	r3, #1
 800e672:	d81f      	bhi.n	800e6b4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	685a      	ldr	r2, [r3, #4]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e682:	605a      	str	r2, [r3, #4]
 800e684:	e016      	b.n	800e6b4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f103 020c 	add.w	r2, r3, #12
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e692:	7812      	ldrb	r2, [r2, #0]
 800e694:	b2d2      	uxtb	r2, r2
 800e696:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e6b8:	f7f9 fa78 	bl	8007bac <HAL_GetTick>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d803      	bhi.n	800e6d0 <HAL_SPI_TransmitReceive+0x3c2>
 800e6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ce:	d102      	bne.n	800e6d6 <HAL_SPI_TransmitReceive+0x3c8>
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d103      	bne.n	800e6de <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e6dc:	e01c      	b.n	800e718 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f47f af5b 	bne.w	800e5a0 <HAL_SPI_TransmitReceive+0x292>
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f47f af54 	bne.w	800e5a0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6f8:	69fa      	ldr	r2, [r7, #28]
 800e6fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f000 f98b 	bl	800ea18 <SPI_EndRxTxTransaction>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d006      	beq.n	800e716 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e708:	2301      	movs	r3, #1
 800e70a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2220      	movs	r2, #32
 800e712:	661a      	str	r2, [r3, #96]	; 0x60
 800e714:	e000      	b.n	800e718 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2201      	movs	r2, #1
 800e71c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3728      	adds	r7, #40	; 0x28
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	603b      	str	r3, [r7, #0]
 800e740:	4613      	mov	r3, r2
 800e742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e744:	f7f9 fa32 	bl	8007bac <HAL_GetTick>
 800e748:	4602      	mov	r2, r0
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	4413      	add	r3, r2
 800e752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e754:	f7f9 fa2a 	bl	8007bac <HAL_GetTick>
 800e758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e75a:	4b39      	ldr	r3, [pc, #228]	; (800e840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	015b      	lsls	r3, r3, #5
 800e760:	0d1b      	lsrs	r3, r3, #20
 800e762:	69fa      	ldr	r2, [r7, #28]
 800e764:	fb02 f303 	mul.w	r3, r2, r3
 800e768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e76a:	e054      	b.n	800e816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e772:	d050      	beq.n	800e816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e774:	f7f9 fa1a 	bl	8007bac <HAL_GetTick>
 800e778:	4602      	mov	r2, r0
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	69fa      	ldr	r2, [r7, #28]
 800e780:	429a      	cmp	r2, r3
 800e782:	d902      	bls.n	800e78a <SPI_WaitFlagStateUntilTimeout+0x56>
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d13d      	bne.n	800e806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7a2:	d111      	bne.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7ac:	d004      	beq.n	800e7b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7b6:	d107      	bne.n	800e7c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7d0:	d10f      	bne.n	800e7f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e802:	2303      	movs	r3, #3
 800e804:	e017      	b.n	800e836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d101      	bne.n	800e810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e80c:	2300      	movs	r3, #0
 800e80e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	3b01      	subs	r3, #1
 800e814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	689a      	ldr	r2, [r3, #8]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	4013      	ands	r3, r2
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	429a      	cmp	r2, r3
 800e824:	bf0c      	ite	eq
 800e826:	2301      	moveq	r3, #1
 800e828:	2300      	movne	r3, #0
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	461a      	mov	r2, r3
 800e82e:	79fb      	ldrb	r3, [r7, #7]
 800e830:	429a      	cmp	r2, r3
 800e832:	d19b      	bne.n	800e76c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3720      	adds	r7, #32
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	20000308 	.word	0x20000308

0800e844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e852:	f7f9 f9ab 	bl	8007bac <HAL_GetTick>
 800e856:	4602      	mov	r2, r0
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	1a9b      	subs	r3, r3, r2
 800e85c:	683a      	ldr	r2, [r7, #0]
 800e85e:	4413      	add	r3, r2
 800e860:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e862:	f7f9 f9a3 	bl	8007bac <HAL_GetTick>
 800e866:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e868:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	00da      	lsls	r2, r3, #3
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	0d1b      	lsrs	r3, r3, #20
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	fb02 f303 	mul.w	r3, r2, r3
 800e87e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800e880:	e062      	b.n	800e948 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e888:	d109      	bne.n	800e89e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d106      	bne.n	800e89e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	330c      	adds	r3, #12
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800e89c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a4:	d050      	beq.n	800e948 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8a6:	f7f9 f981 	bl	8007bac <HAL_GetTick>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	69fa      	ldr	r2, [r7, #28]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d902      	bls.n	800e8bc <SPI_WaitFifoStateUntilTimeout+0x78>
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d13d      	bne.n	800e938 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e8ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8d4:	d111      	bne.n	800e8fa <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8de:	d004      	beq.n	800e8ea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e8:	d107      	bne.n	800e8fa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e902:	d10f      	bne.n	800e924 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2200      	movs	r2, #0
 800e930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e934:	2303      	movs	r3, #3
 800e936:	e010      	b.n	800e95a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	3b01      	subs	r3, #1
 800e946:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	689a      	ldr	r2, [r3, #8]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	4013      	ands	r3, r2
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	429a      	cmp	r2, r3
 800e956:	d194      	bne.n	800e882 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3720      	adds	r7, #32
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000308 	.word	0x20000308

0800e968 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af02      	add	r7, sp, #8
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e97c:	d111      	bne.n	800e9a2 <SPI_EndRxTransaction+0x3a>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e986:	d004      	beq.n	800e992 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e990:	d107      	bne.n	800e9a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	9300      	str	r3, [sp, #0]
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2180      	movs	r1, #128	; 0x80
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff fec1 	bl	800e734 <SPI_WaitFlagStateUntilTimeout>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d007      	beq.n	800e9c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9bc:	f043 0220 	orr.w	r2, r3, #32
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	e023      	b.n	800ea10 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9d0:	d11d      	bne.n	800ea0e <SPI_EndRxTransaction+0xa6>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9da:	d004      	beq.n	800e9e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9e4:	d113      	bne.n	800ea0e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7ff ff26 	bl	800e844 <SPI_WaitFifoStateUntilTimeout>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea02:	f043 0220 	orr.w	r2, r3, #32
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	e000      	b.n	800ea10 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b086      	sub	sp, #24
 800ea1c:	af02      	add	r7, sp, #8
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f7ff ff07 	bl	800e844 <SPI_WaitFifoStateUntilTimeout>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d007      	beq.n	800ea4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea40:	f043 0220 	orr.w	r2, r3, #32
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	e027      	b.n	800ea9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	2200      	movs	r2, #0
 800ea54:	2180      	movs	r1, #128	; 0x80
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f7ff fe6c 	bl	800e734 <SPI_WaitFlagStateUntilTimeout>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d007      	beq.n	800ea72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea66:	f043 0220 	orr.w	r2, r3, #32
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea6e:	2303      	movs	r3, #3
 800ea70:	e014      	b.n	800ea9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f7ff fee0 	bl	800e844 <SPI_WaitFifoStateUntilTimeout>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d007      	beq.n	800ea9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea8e:	f043 0220 	orr.w	r2, r3, #32
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e000      	b.n	800ea9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d101      	bne.n	800eab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e049      	b.n	800eb4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7f8 fb62 	bl	8007194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3304      	adds	r3, #4
 800eae0:	4619      	mov	r1, r3
 800eae2:	4610      	mov	r0, r2
 800eae4:	f000 fcc4 	bl	800f470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
	...

0800eb54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d001      	beq.n	800eb6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e047      	b.n	800ebfc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a23      	ldr	r2, [pc, #140]	; (800ec08 <HAL_TIM_Base_Start+0xb4>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d01d      	beq.n	800ebba <HAL_TIM_Base_Start+0x66>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb86:	d018      	beq.n	800ebba <HAL_TIM_Base_Start+0x66>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a1f      	ldr	r2, [pc, #124]	; (800ec0c <HAL_TIM_Base_Start+0xb8>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d013      	beq.n	800ebba <HAL_TIM_Base_Start+0x66>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a1e      	ldr	r2, [pc, #120]	; (800ec10 <HAL_TIM_Base_Start+0xbc>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d00e      	beq.n	800ebba <HAL_TIM_Base_Start+0x66>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a1c      	ldr	r2, [pc, #112]	; (800ec14 <HAL_TIM_Base_Start+0xc0>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d009      	beq.n	800ebba <HAL_TIM_Base_Start+0x66>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a1b      	ldr	r2, [pc, #108]	; (800ec18 <HAL_TIM_Base_Start+0xc4>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d004      	beq.n	800ebba <HAL_TIM_Base_Start+0x66>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a19      	ldr	r2, [pc, #100]	; (800ec1c <HAL_TIM_Base_Start+0xc8>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d115      	bne.n	800ebe6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	689a      	ldr	r2, [r3, #8]
 800ebc0:	4b17      	ldr	r3, [pc, #92]	; (800ec20 <HAL_TIM_Base_Start+0xcc>)
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b06      	cmp	r3, #6
 800ebca:	d015      	beq.n	800ebf8 <HAL_TIM_Base_Start+0xa4>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebd2:	d011      	beq.n	800ebf8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f042 0201 	orr.w	r2, r2, #1
 800ebe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebe4:	e008      	b.n	800ebf8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f042 0201 	orr.w	r2, r2, #1
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	e000      	b.n	800ebfa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	40012c00 	.word	0x40012c00
 800ec0c:	40000400 	.word	0x40000400
 800ec10:	40000800 	.word	0x40000800
 800ec14:	40000c00 	.word	0x40000c00
 800ec18:	40013400 	.word	0x40013400
 800ec1c:	40014000 	.word	0x40014000
 800ec20:	00010007 	.word	0x00010007

0800ec24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d001      	beq.n	800ec3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e04f      	b.n	800ecdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2202      	movs	r2, #2
 800ec40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68da      	ldr	r2, [r3, #12]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f042 0201 	orr.w	r2, r2, #1
 800ec52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a23      	ldr	r2, [pc, #140]	; (800ece8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d01d      	beq.n	800ec9a <HAL_TIM_Base_Start_IT+0x76>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec66:	d018      	beq.n	800ec9a <HAL_TIM_Base_Start_IT+0x76>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a1f      	ldr	r2, [pc, #124]	; (800ecec <HAL_TIM_Base_Start_IT+0xc8>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d013      	beq.n	800ec9a <HAL_TIM_Base_Start_IT+0x76>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a1e      	ldr	r2, [pc, #120]	; (800ecf0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d00e      	beq.n	800ec9a <HAL_TIM_Base_Start_IT+0x76>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a1c      	ldr	r2, [pc, #112]	; (800ecf4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d009      	beq.n	800ec9a <HAL_TIM_Base_Start_IT+0x76>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a1b      	ldr	r2, [pc, #108]	; (800ecf8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d004      	beq.n	800ec9a <HAL_TIM_Base_Start_IT+0x76>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a19      	ldr	r2, [pc, #100]	; (800ecfc <HAL_TIM_Base_Start_IT+0xd8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d115      	bne.n	800ecc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	689a      	ldr	r2, [r3, #8]
 800eca0:	4b17      	ldr	r3, [pc, #92]	; (800ed00 <HAL_TIM_Base_Start_IT+0xdc>)
 800eca2:	4013      	ands	r3, r2
 800eca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2b06      	cmp	r3, #6
 800ecaa:	d015      	beq.n	800ecd8 <HAL_TIM_Base_Start_IT+0xb4>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecb2:	d011      	beq.n	800ecd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f042 0201 	orr.w	r2, r2, #1
 800ecc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecc4:	e008      	b.n	800ecd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f042 0201 	orr.w	r2, r2, #1
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	e000      	b.n	800ecda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	40012c00 	.word	0x40012c00
 800ecec:	40000400 	.word	0x40000400
 800ecf0:	40000800 	.word	0x40000800
 800ecf4:	40000c00 	.word	0x40000c00
 800ecf8:	40013400 	.word	0x40013400
 800ecfc:	40014000 	.word	0x40014000
 800ed00:	00010007 	.word	0x00010007

0800ed04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e049      	b.n	800edaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d106      	bne.n	800ed30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7f8 fa00 	bl	8007130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2202      	movs	r2, #2
 800ed34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	4619      	mov	r1, r3
 800ed42:	4610      	mov	r0, r2
 800ed44:	f000 fb94 	bl	800f470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
	...

0800edb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d109      	bne.n	800edd8 <HAL_TIM_PWM_Start+0x24>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	2b01      	cmp	r3, #1
 800edce:	bf14      	ite	ne
 800edd0:	2301      	movne	r3, #1
 800edd2:	2300      	moveq	r3, #0
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	e03c      	b.n	800ee52 <HAL_TIM_PWM_Start+0x9e>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	2b04      	cmp	r3, #4
 800eddc:	d109      	bne.n	800edf2 <HAL_TIM_PWM_Start+0x3e>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	bf14      	ite	ne
 800edea:	2301      	movne	r3, #1
 800edec:	2300      	moveq	r3, #0
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	e02f      	b.n	800ee52 <HAL_TIM_PWM_Start+0x9e>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	2b08      	cmp	r3, #8
 800edf6:	d109      	bne.n	800ee0c <HAL_TIM_PWM_Start+0x58>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	bf14      	ite	ne
 800ee04:	2301      	movne	r3, #1
 800ee06:	2300      	moveq	r3, #0
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	e022      	b.n	800ee52 <HAL_TIM_PWM_Start+0x9e>
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	2b0c      	cmp	r3, #12
 800ee10:	d109      	bne.n	800ee26 <HAL_TIM_PWM_Start+0x72>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	bf14      	ite	ne
 800ee1e:	2301      	movne	r3, #1
 800ee20:	2300      	moveq	r3, #0
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	e015      	b.n	800ee52 <HAL_TIM_PWM_Start+0x9e>
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	2b10      	cmp	r3, #16
 800ee2a:	d109      	bne.n	800ee40 <HAL_TIM_PWM_Start+0x8c>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	bf14      	ite	ne
 800ee38:	2301      	movne	r3, #1
 800ee3a:	2300      	moveq	r3, #0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	e008      	b.n	800ee52 <HAL_TIM_PWM_Start+0x9e>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e09c      	b.n	800ef94 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d104      	bne.n	800ee6a <HAL_TIM_PWM_Start+0xb6>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee68:	e023      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xfe>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b04      	cmp	r3, #4
 800ee6e:	d104      	bne.n	800ee7a <HAL_TIM_PWM_Start+0xc6>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2202      	movs	r2, #2
 800ee74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee78:	e01b      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xfe>
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b08      	cmp	r3, #8
 800ee7e:	d104      	bne.n	800ee8a <HAL_TIM_PWM_Start+0xd6>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2202      	movs	r2, #2
 800ee84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee88:	e013      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xfe>
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2b0c      	cmp	r3, #12
 800ee8e:	d104      	bne.n	800ee9a <HAL_TIM_PWM_Start+0xe6>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2202      	movs	r2, #2
 800ee94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee98:	e00b      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xfe>
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b10      	cmp	r3, #16
 800ee9e:	d104      	bne.n	800eeaa <HAL_TIM_PWM_Start+0xf6>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eea8:	e003      	b.n	800eeb2 <HAL_TIM_PWM_Start+0xfe>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2202      	movs	r2, #2
 800eeae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	6839      	ldr	r1, [r7, #0]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 fe48 	bl	800fb50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a35      	ldr	r2, [pc, #212]	; (800ef9c <HAL_TIM_PWM_Start+0x1e8>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d013      	beq.n	800eef2 <HAL_TIM_PWM_Start+0x13e>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a34      	ldr	r2, [pc, #208]	; (800efa0 <HAL_TIM_PWM_Start+0x1ec>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d00e      	beq.n	800eef2 <HAL_TIM_PWM_Start+0x13e>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a32      	ldr	r2, [pc, #200]	; (800efa4 <HAL_TIM_PWM_Start+0x1f0>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d009      	beq.n	800eef2 <HAL_TIM_PWM_Start+0x13e>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a31      	ldr	r2, [pc, #196]	; (800efa8 <HAL_TIM_PWM_Start+0x1f4>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d004      	beq.n	800eef2 <HAL_TIM_PWM_Start+0x13e>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a2f      	ldr	r2, [pc, #188]	; (800efac <HAL_TIM_PWM_Start+0x1f8>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d101      	bne.n	800eef6 <HAL_TIM_PWM_Start+0x142>
 800eef2:	2301      	movs	r3, #1
 800eef4:	e000      	b.n	800eef8 <HAL_TIM_PWM_Start+0x144>
 800eef6:	2300      	movs	r3, #0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d007      	beq.n	800ef0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a22      	ldr	r2, [pc, #136]	; (800ef9c <HAL_TIM_PWM_Start+0x1e8>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d01d      	beq.n	800ef52 <HAL_TIM_PWM_Start+0x19e>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef1e:	d018      	beq.n	800ef52 <HAL_TIM_PWM_Start+0x19e>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a22      	ldr	r2, [pc, #136]	; (800efb0 <HAL_TIM_PWM_Start+0x1fc>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d013      	beq.n	800ef52 <HAL_TIM_PWM_Start+0x19e>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a21      	ldr	r2, [pc, #132]	; (800efb4 <HAL_TIM_PWM_Start+0x200>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d00e      	beq.n	800ef52 <HAL_TIM_PWM_Start+0x19e>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a1f      	ldr	r2, [pc, #124]	; (800efb8 <HAL_TIM_PWM_Start+0x204>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d009      	beq.n	800ef52 <HAL_TIM_PWM_Start+0x19e>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a17      	ldr	r2, [pc, #92]	; (800efa0 <HAL_TIM_PWM_Start+0x1ec>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d004      	beq.n	800ef52 <HAL_TIM_PWM_Start+0x19e>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a15      	ldr	r2, [pc, #84]	; (800efa4 <HAL_TIM_PWM_Start+0x1f0>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d115      	bne.n	800ef7e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	689a      	ldr	r2, [r3, #8]
 800ef58:	4b18      	ldr	r3, [pc, #96]	; (800efbc <HAL_TIM_PWM_Start+0x208>)
 800ef5a:	4013      	ands	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2b06      	cmp	r3, #6
 800ef62:	d015      	beq.n	800ef90 <HAL_TIM_PWM_Start+0x1dc>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef6a:	d011      	beq.n	800ef90 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f042 0201 	orr.w	r2, r2, #1
 800ef7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef7c:	e008      	b.n	800ef90 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f042 0201 	orr.w	r2, r2, #1
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	e000      	b.n	800ef92 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	40012c00 	.word	0x40012c00
 800efa0:	40013400 	.word	0x40013400
 800efa4:	40014000 	.word	0x40014000
 800efa8:	40014400 	.word	0x40014400
 800efac:	40014800 	.word	0x40014800
 800efb0:	40000400 	.word	0x40000400
 800efb4:	40000800 	.word	0x40000800
 800efb8:	40000c00 	.word	0x40000c00
 800efbc:	00010007 	.word	0x00010007

0800efc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	f003 0302 	and.w	r3, r3, #2
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d122      	bne.n	800f01c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	f003 0302 	and.w	r3, r3, #2
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d11b      	bne.n	800f01c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f06f 0202 	mvn.w	r2, #2
 800efec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2201      	movs	r2, #1
 800eff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	f003 0303 	and.w	r3, r3, #3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d003      	beq.n	800f00a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fa16 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800f008:	e005      	b.n	800f016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 fa08 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fa19 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	f003 0304 	and.w	r3, r3, #4
 800f026:	2b04      	cmp	r3, #4
 800f028:	d122      	bne.n	800f070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	f003 0304 	and.w	r3, r3, #4
 800f034:	2b04      	cmp	r3, #4
 800f036:	d11b      	bne.n	800f070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f06f 0204 	mvn.w	r2, #4
 800f040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2202      	movs	r2, #2
 800f046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f052:	2b00      	cmp	r3, #0
 800f054:	d003      	beq.n	800f05e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f9ec 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800f05c:	e005      	b.n	800f06a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f9de 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f9ef 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	f003 0308 	and.w	r3, r3, #8
 800f07a:	2b08      	cmp	r3, #8
 800f07c:	d122      	bne.n	800f0c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	f003 0308 	and.w	r3, r3, #8
 800f088:	2b08      	cmp	r3, #8
 800f08a:	d11b      	bne.n	800f0c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f06f 0208 	mvn.w	r2, #8
 800f094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2204      	movs	r2, #4
 800f09a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	f003 0303 	and.w	r3, r3, #3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f9c2 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800f0b0:	e005      	b.n	800f0be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 f9b4 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f9c5 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	f003 0310 	and.w	r3, r3, #16
 800f0ce:	2b10      	cmp	r3, #16
 800f0d0:	d122      	bne.n	800f118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	f003 0310 	and.w	r3, r3, #16
 800f0dc:	2b10      	cmp	r3, #16
 800f0de:	d11b      	bne.n	800f118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f06f 0210 	mvn.w	r2, #16
 800f0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2208      	movs	r2, #8
 800f0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	69db      	ldr	r3, [r3, #28]
 800f0f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f998 	bl	800f434 <HAL_TIM_IC_CaptureCallback>
 800f104:	e005      	b.n	800f112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 f98a 	bl	800f420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 f99b 	bl	800f448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	f003 0301 	and.w	r3, r3, #1
 800f122:	2b01      	cmp	r3, #1
 800f124:	d10e      	bne.n	800f144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	2b01      	cmp	r3, #1
 800f132:	d107      	bne.n	800f144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f06f 0201 	mvn.w	r2, #1
 800f13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7f7 fb38 	bl	80067b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f14e:	2b80      	cmp	r3, #128	; 0x80
 800f150:	d10e      	bne.n	800f170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f15c:	2b80      	cmp	r3, #128	; 0x80
 800f15e:	d107      	bne.n	800f170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fda8 	bl	800fcc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f17e:	d10e      	bne.n	800f19e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f18a:	2b80      	cmp	r3, #128	; 0x80
 800f18c:	d107      	bne.n	800f19e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fd9b 	bl	800fcd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a8:	2b40      	cmp	r3, #64	; 0x40
 800f1aa:	d10e      	bne.n	800f1ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1b6:	2b40      	cmp	r3, #64	; 0x40
 800f1b8:	d107      	bne.n	800f1ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f1c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 f949 	bl	800f45c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	f003 0320 	and.w	r3, r3, #32
 800f1d4:	2b20      	cmp	r3, #32
 800f1d6:	d10e      	bne.n	800f1f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	f003 0320 	and.w	r3, r3, #32
 800f1e2:	2b20      	cmp	r3, #32
 800f1e4:	d107      	bne.n	800f1f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f06f 0220 	mvn.w	r2, #32
 800f1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fd5b 	bl	800fcac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
	...

0800f200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f212:	2b01      	cmp	r3, #1
 800f214:	d101      	bne.n	800f21a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f216:	2302      	movs	r3, #2
 800f218:	e0fd      	b.n	800f416 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2201      	movs	r2, #1
 800f21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b14      	cmp	r3, #20
 800f226:	f200 80f0 	bhi.w	800f40a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f22a:	a201      	add	r2, pc, #4	; (adr r2, 800f230 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f230:	0800f285 	.word	0x0800f285
 800f234:	0800f40b 	.word	0x0800f40b
 800f238:	0800f40b 	.word	0x0800f40b
 800f23c:	0800f40b 	.word	0x0800f40b
 800f240:	0800f2c5 	.word	0x0800f2c5
 800f244:	0800f40b 	.word	0x0800f40b
 800f248:	0800f40b 	.word	0x0800f40b
 800f24c:	0800f40b 	.word	0x0800f40b
 800f250:	0800f307 	.word	0x0800f307
 800f254:	0800f40b 	.word	0x0800f40b
 800f258:	0800f40b 	.word	0x0800f40b
 800f25c:	0800f40b 	.word	0x0800f40b
 800f260:	0800f347 	.word	0x0800f347
 800f264:	0800f40b 	.word	0x0800f40b
 800f268:	0800f40b 	.word	0x0800f40b
 800f26c:	0800f40b 	.word	0x0800f40b
 800f270:	0800f389 	.word	0x0800f389
 800f274:	0800f40b 	.word	0x0800f40b
 800f278:	0800f40b 	.word	0x0800f40b
 800f27c:	0800f40b 	.word	0x0800f40b
 800f280:	0800f3c9 	.word	0x0800f3c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68b9      	ldr	r1, [r7, #8]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 f98a 	bl	800f5a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	699a      	ldr	r2, [r3, #24]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f042 0208 	orr.w	r2, r2, #8
 800f29e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	699a      	ldr	r2, [r3, #24]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f022 0204 	bic.w	r2, r2, #4
 800f2ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	6999      	ldr	r1, [r3, #24]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	691a      	ldr	r2, [r3, #16]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	430a      	orrs	r2, r1
 800f2c0:	619a      	str	r2, [r3, #24]
      break;
 800f2c2:	e0a3      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68b9      	ldr	r1, [r7, #8]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 f9fa 	bl	800f6c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	699a      	ldr	r2, [r3, #24]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	699a      	ldr	r2, [r3, #24]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6999      	ldr	r1, [r3, #24]
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	021a      	lsls	r2, r3, #8
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	430a      	orrs	r2, r1
 800f302:	619a      	str	r2, [r3, #24]
      break;
 800f304:	e082      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	68b9      	ldr	r1, [r7, #8]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f000 fa63 	bl	800f7d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	69da      	ldr	r2, [r3, #28]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f042 0208 	orr.w	r2, r2, #8
 800f320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	69da      	ldr	r2, [r3, #28]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f022 0204 	bic.w	r2, r2, #4
 800f330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	69d9      	ldr	r1, [r3, #28]
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	691a      	ldr	r2, [r3, #16]
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	430a      	orrs	r2, r1
 800f342:	61da      	str	r2, [r3, #28]
      break;
 800f344:	e062      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 facb 	bl	800f8e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	69da      	ldr	r2, [r3, #28]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	69da      	ldr	r2, [r3, #28]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	69d9      	ldr	r1, [r3, #28]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	021a      	lsls	r2, r3, #8
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	430a      	orrs	r2, r1
 800f384:	61da      	str	r2, [r3, #28]
      break;
 800f386:	e041      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68b9      	ldr	r1, [r7, #8]
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 fb14 	bl	800f9bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f042 0208 	orr.w	r2, r2, #8
 800f3a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f022 0204 	bic.w	r2, r2, #4
 800f3b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	691a      	ldr	r2, [r3, #16]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	430a      	orrs	r2, r1
 800f3c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f3c6:	e021      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68b9      	ldr	r1, [r7, #8]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 fb58 	bl	800fa84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	021a      	lsls	r2, r3, #8
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	430a      	orrs	r2, r1
 800f406:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f408:	e000      	b.n	800f40c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f40a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop

0800f420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f464:	bf00      	nop
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a40      	ldr	r2, [pc, #256]	; (800f584 <TIM_Base_SetConfig+0x114>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d013      	beq.n	800f4b0 <TIM_Base_SetConfig+0x40>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f48e:	d00f      	beq.n	800f4b0 <TIM_Base_SetConfig+0x40>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a3d      	ldr	r2, [pc, #244]	; (800f588 <TIM_Base_SetConfig+0x118>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d00b      	beq.n	800f4b0 <TIM_Base_SetConfig+0x40>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a3c      	ldr	r2, [pc, #240]	; (800f58c <TIM_Base_SetConfig+0x11c>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d007      	beq.n	800f4b0 <TIM_Base_SetConfig+0x40>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a3b      	ldr	r2, [pc, #236]	; (800f590 <TIM_Base_SetConfig+0x120>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d003      	beq.n	800f4b0 <TIM_Base_SetConfig+0x40>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a3a      	ldr	r2, [pc, #232]	; (800f594 <TIM_Base_SetConfig+0x124>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d108      	bne.n	800f4c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a2f      	ldr	r2, [pc, #188]	; (800f584 <TIM_Base_SetConfig+0x114>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d01f      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4d0:	d01b      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a2c      	ldr	r2, [pc, #176]	; (800f588 <TIM_Base_SetConfig+0x118>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d017      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a2b      	ldr	r2, [pc, #172]	; (800f58c <TIM_Base_SetConfig+0x11c>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d013      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a2a      	ldr	r2, [pc, #168]	; (800f590 <TIM_Base_SetConfig+0x120>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d00f      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a29      	ldr	r2, [pc, #164]	; (800f594 <TIM_Base_SetConfig+0x124>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d00b      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a28      	ldr	r2, [pc, #160]	; (800f598 <TIM_Base_SetConfig+0x128>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d007      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a27      	ldr	r2, [pc, #156]	; (800f59c <TIM_Base_SetConfig+0x12c>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d003      	beq.n	800f50a <TIM_Base_SetConfig+0x9a>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a26      	ldr	r2, [pc, #152]	; (800f5a0 <TIM_Base_SetConfig+0x130>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d108      	bne.n	800f51c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	68fa      	ldr	r2, [r7, #12]
 800f518:	4313      	orrs	r3, r2
 800f51a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	695b      	ldr	r3, [r3, #20]
 800f526:	4313      	orrs	r3, r2
 800f528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	689a      	ldr	r2, [r3, #8]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a10      	ldr	r2, [pc, #64]	; (800f584 <TIM_Base_SetConfig+0x114>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d00f      	beq.n	800f568 <TIM_Base_SetConfig+0xf8>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a12      	ldr	r2, [pc, #72]	; (800f594 <TIM_Base_SetConfig+0x124>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d00b      	beq.n	800f568 <TIM_Base_SetConfig+0xf8>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a11      	ldr	r2, [pc, #68]	; (800f598 <TIM_Base_SetConfig+0x128>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d007      	beq.n	800f568 <TIM_Base_SetConfig+0xf8>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a10      	ldr	r2, [pc, #64]	; (800f59c <TIM_Base_SetConfig+0x12c>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d003      	beq.n	800f568 <TIM_Base_SetConfig+0xf8>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a0f      	ldr	r2, [pc, #60]	; (800f5a0 <TIM_Base_SetConfig+0x130>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d103      	bne.n	800f570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	691a      	ldr	r2, [r3, #16]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	615a      	str	r2, [r3, #20]
}
 800f576:	bf00      	nop
 800f578:	3714      	adds	r7, #20
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	40012c00 	.word	0x40012c00
 800f588:	40000400 	.word	0x40000400
 800f58c:	40000800 	.word	0x40000800
 800f590:	40000c00 	.word	0x40000c00
 800f594:	40013400 	.word	0x40013400
 800f598:	40014000 	.word	0x40014000
 800f59c:	40014400 	.word	0x40014400
 800f5a0:	40014800 	.word	0x40014800

0800f5a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b087      	sub	sp, #28
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	f023 0201 	bic.w	r2, r3, #1
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a1b      	ldr	r3, [r3, #32]
 800f5be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f023 0303 	bic.w	r3, r3, #3
 800f5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	f023 0302 	bic.w	r3, r3, #2
 800f5f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a2c      	ldr	r2, [pc, #176]	; (800f6b0 <TIM_OC1_SetConfig+0x10c>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d00f      	beq.n	800f624 <TIM_OC1_SetConfig+0x80>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a2b      	ldr	r2, [pc, #172]	; (800f6b4 <TIM_OC1_SetConfig+0x110>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d00b      	beq.n	800f624 <TIM_OC1_SetConfig+0x80>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a2a      	ldr	r2, [pc, #168]	; (800f6b8 <TIM_OC1_SetConfig+0x114>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d007      	beq.n	800f624 <TIM_OC1_SetConfig+0x80>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a29      	ldr	r2, [pc, #164]	; (800f6bc <TIM_OC1_SetConfig+0x118>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d003      	beq.n	800f624 <TIM_OC1_SetConfig+0x80>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a28      	ldr	r2, [pc, #160]	; (800f6c0 <TIM_OC1_SetConfig+0x11c>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d10c      	bne.n	800f63e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	f023 0308 	bic.w	r3, r3, #8
 800f62a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	697a      	ldr	r2, [r7, #20]
 800f632:	4313      	orrs	r3, r2
 800f634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	f023 0304 	bic.w	r3, r3, #4
 800f63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a1b      	ldr	r2, [pc, #108]	; (800f6b0 <TIM_OC1_SetConfig+0x10c>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d00f      	beq.n	800f666 <TIM_OC1_SetConfig+0xc2>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a1a      	ldr	r2, [pc, #104]	; (800f6b4 <TIM_OC1_SetConfig+0x110>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d00b      	beq.n	800f666 <TIM_OC1_SetConfig+0xc2>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a19      	ldr	r2, [pc, #100]	; (800f6b8 <TIM_OC1_SetConfig+0x114>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d007      	beq.n	800f666 <TIM_OC1_SetConfig+0xc2>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a18      	ldr	r2, [pc, #96]	; (800f6bc <TIM_OC1_SetConfig+0x118>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d003      	beq.n	800f666 <TIM_OC1_SetConfig+0xc2>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a17      	ldr	r2, [pc, #92]	; (800f6c0 <TIM_OC1_SetConfig+0x11c>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d111      	bne.n	800f68a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f66c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	695b      	ldr	r3, [r3, #20]
 800f67a:	693a      	ldr	r2, [r7, #16]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	4313      	orrs	r3, r2
 800f688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	685a      	ldr	r2, [r3, #4]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	697a      	ldr	r2, [r7, #20]
 800f6a2:	621a      	str	r2, [r3, #32]
}
 800f6a4:	bf00      	nop
 800f6a6:	371c      	adds	r7, #28
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr
 800f6b0:	40012c00 	.word	0x40012c00
 800f6b4:	40013400 	.word	0x40013400
 800f6b8:	40014000 	.word	0x40014000
 800f6bc:	40014400 	.word	0x40014400
 800f6c0:	40014800 	.word	0x40014800

0800f6c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	f023 0210 	bic.w	r2, r3, #16
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	699b      	ldr	r3, [r3, #24]
 800f6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	021b      	lsls	r3, r3, #8
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	4313      	orrs	r3, r2
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	f023 0320 	bic.w	r3, r3, #32
 800f712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	011b      	lsls	r3, r3, #4
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a28      	ldr	r2, [pc, #160]	; (800f7c4 <TIM_OC2_SetConfig+0x100>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d003      	beq.n	800f730 <TIM_OC2_SetConfig+0x6c>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4a27      	ldr	r2, [pc, #156]	; (800f7c8 <TIM_OC2_SetConfig+0x104>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d10d      	bne.n	800f74c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	011b      	lsls	r3, r3, #4
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	4313      	orrs	r3, r2
 800f742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f74a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4a1d      	ldr	r2, [pc, #116]	; (800f7c4 <TIM_OC2_SetConfig+0x100>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d00f      	beq.n	800f774 <TIM_OC2_SetConfig+0xb0>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a1c      	ldr	r2, [pc, #112]	; (800f7c8 <TIM_OC2_SetConfig+0x104>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d00b      	beq.n	800f774 <TIM_OC2_SetConfig+0xb0>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a1b      	ldr	r2, [pc, #108]	; (800f7cc <TIM_OC2_SetConfig+0x108>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d007      	beq.n	800f774 <TIM_OC2_SetConfig+0xb0>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a1a      	ldr	r2, [pc, #104]	; (800f7d0 <TIM_OC2_SetConfig+0x10c>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d003      	beq.n	800f774 <TIM_OC2_SetConfig+0xb0>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4a19      	ldr	r2, [pc, #100]	; (800f7d4 <TIM_OC2_SetConfig+0x110>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d113      	bne.n	800f79c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f77a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	695b      	ldr	r3, [r3, #20]
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	4313      	orrs	r3, r2
 800f79a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	621a      	str	r2, [r3, #32]
}
 800f7b6:	bf00      	nop
 800f7b8:	371c      	adds	r7, #28
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop
 800f7c4:	40012c00 	.word	0x40012c00
 800f7c8:	40013400 	.word	0x40013400
 800f7cc:	40014000 	.word	0x40014000
 800f7d0:	40014400 	.word	0x40014400
 800f7d4:	40014800 	.word	0x40014800

0800f7d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b087      	sub	sp, #28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a1b      	ldr	r3, [r3, #32]
 800f7f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	69db      	ldr	r3, [r3, #28]
 800f7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f80a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f023 0303 	bic.w	r3, r3, #3
 800f812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	021b      	lsls	r3, r3, #8
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	4313      	orrs	r3, r2
 800f830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4a27      	ldr	r2, [pc, #156]	; (800f8d4 <TIM_OC3_SetConfig+0xfc>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d003      	beq.n	800f842 <TIM_OC3_SetConfig+0x6a>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4a26      	ldr	r2, [pc, #152]	; (800f8d8 <TIM_OC3_SetConfig+0x100>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d10d      	bne.n	800f85e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	021b      	lsls	r3, r3, #8
 800f850:	697a      	ldr	r2, [r7, #20]
 800f852:	4313      	orrs	r3, r2
 800f854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f85c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a1c      	ldr	r2, [pc, #112]	; (800f8d4 <TIM_OC3_SetConfig+0xfc>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d00f      	beq.n	800f886 <TIM_OC3_SetConfig+0xae>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4a1b      	ldr	r2, [pc, #108]	; (800f8d8 <TIM_OC3_SetConfig+0x100>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d00b      	beq.n	800f886 <TIM_OC3_SetConfig+0xae>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a1a      	ldr	r2, [pc, #104]	; (800f8dc <TIM_OC3_SetConfig+0x104>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d007      	beq.n	800f886 <TIM_OC3_SetConfig+0xae>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a19      	ldr	r2, [pc, #100]	; (800f8e0 <TIM_OC3_SetConfig+0x108>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d003      	beq.n	800f886 <TIM_OC3_SetConfig+0xae>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4a18      	ldr	r2, [pc, #96]	; (800f8e4 <TIM_OC3_SetConfig+0x10c>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d113      	bne.n	800f8ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f88c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	695b      	ldr	r3, [r3, #20]
 800f89a:	011b      	lsls	r3, r3, #4
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	011b      	lsls	r3, r3, #4
 800f8a8:	693a      	ldr	r2, [r7, #16]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	693a      	ldr	r2, [r7, #16]
 800f8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	621a      	str	r2, [r3, #32]
}
 800f8c8:	bf00      	nop
 800f8ca:	371c      	adds	r7, #28
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	40012c00 	.word	0x40012c00
 800f8d8:	40013400 	.word	0x40013400
 800f8dc:	40014000 	.word	0x40014000
 800f8e0:	40014400 	.word	0x40014400
 800f8e4:	40014800 	.word	0x40014800

0800f8e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	021b      	lsls	r3, r3, #8
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	031b      	lsls	r3, r3, #12
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	4313      	orrs	r3, r2
 800f942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a18      	ldr	r2, [pc, #96]	; (800f9a8 <TIM_OC4_SetConfig+0xc0>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d00f      	beq.n	800f96c <TIM_OC4_SetConfig+0x84>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a17      	ldr	r2, [pc, #92]	; (800f9ac <TIM_OC4_SetConfig+0xc4>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d00b      	beq.n	800f96c <TIM_OC4_SetConfig+0x84>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a16      	ldr	r2, [pc, #88]	; (800f9b0 <TIM_OC4_SetConfig+0xc8>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d007      	beq.n	800f96c <TIM_OC4_SetConfig+0x84>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a15      	ldr	r2, [pc, #84]	; (800f9b4 <TIM_OC4_SetConfig+0xcc>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d003      	beq.n	800f96c <TIM_OC4_SetConfig+0x84>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a14      	ldr	r2, [pc, #80]	; (800f9b8 <TIM_OC4_SetConfig+0xd0>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d109      	bne.n	800f980 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	695b      	ldr	r3, [r3, #20]
 800f978:	019b      	lsls	r3, r3, #6
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	68fa      	ldr	r2, [r7, #12]
 800f98a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	685a      	ldr	r2, [r3, #4]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	621a      	str	r2, [r3, #32]
}
 800f99a:	bf00      	nop
 800f99c:	371c      	adds	r7, #28
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop
 800f9a8:	40012c00 	.word	0x40012c00
 800f9ac:	40013400 	.word	0x40013400
 800f9b0:	40014000 	.word	0x40014000
 800f9b4:	40014400 	.word	0x40014400
 800f9b8:	40014800 	.word	0x40014800

0800f9bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b087      	sub	sp, #28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6a1b      	ldr	r3, [r3, #32]
 800f9d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	041b      	lsls	r3, r3, #16
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a17      	ldr	r2, [pc, #92]	; (800fa70 <TIM_OC5_SetConfig+0xb4>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d00f      	beq.n	800fa36 <TIM_OC5_SetConfig+0x7a>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a16      	ldr	r2, [pc, #88]	; (800fa74 <TIM_OC5_SetConfig+0xb8>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d00b      	beq.n	800fa36 <TIM_OC5_SetConfig+0x7a>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a15      	ldr	r2, [pc, #84]	; (800fa78 <TIM_OC5_SetConfig+0xbc>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d007      	beq.n	800fa36 <TIM_OC5_SetConfig+0x7a>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a14      	ldr	r2, [pc, #80]	; (800fa7c <TIM_OC5_SetConfig+0xc0>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d003      	beq.n	800fa36 <TIM_OC5_SetConfig+0x7a>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a13      	ldr	r2, [pc, #76]	; (800fa80 <TIM_OC5_SetConfig+0xc4>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d109      	bne.n	800fa4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	695b      	ldr	r3, [r3, #20]
 800fa42:	021b      	lsls	r3, r3, #8
 800fa44:	697a      	ldr	r2, [r7, #20]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	697a      	ldr	r2, [r7, #20]
 800fa4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	685a      	ldr	r2, [r3, #4]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	621a      	str	r2, [r3, #32]
}
 800fa64:	bf00      	nop
 800fa66:	371c      	adds	r7, #28
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	40012c00 	.word	0x40012c00
 800fa74:	40013400 	.word	0x40013400
 800fa78:	40014000 	.word	0x40014000
 800fa7c:	40014400 	.word	0x40014400
 800fa80:	40014800 	.word	0x40014800

0800fa84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	021b      	lsls	r3, r3, #8
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800faca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	051b      	lsls	r3, r3, #20
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a18      	ldr	r2, [pc, #96]	; (800fb3c <TIM_OC6_SetConfig+0xb8>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d00f      	beq.n	800fb00 <TIM_OC6_SetConfig+0x7c>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a17      	ldr	r2, [pc, #92]	; (800fb40 <TIM_OC6_SetConfig+0xbc>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d00b      	beq.n	800fb00 <TIM_OC6_SetConfig+0x7c>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a16      	ldr	r2, [pc, #88]	; (800fb44 <TIM_OC6_SetConfig+0xc0>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d007      	beq.n	800fb00 <TIM_OC6_SetConfig+0x7c>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a15      	ldr	r2, [pc, #84]	; (800fb48 <TIM_OC6_SetConfig+0xc4>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d003      	beq.n	800fb00 <TIM_OC6_SetConfig+0x7c>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a14      	ldr	r2, [pc, #80]	; (800fb4c <TIM_OC6_SetConfig+0xc8>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d109      	bne.n	800fb14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	695b      	ldr	r3, [r3, #20]
 800fb0c:	029b      	lsls	r3, r3, #10
 800fb0e:	697a      	ldr	r2, [r7, #20]
 800fb10:	4313      	orrs	r3, r2
 800fb12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68fa      	ldr	r2, [r7, #12]
 800fb1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	685a      	ldr	r2, [r3, #4]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	621a      	str	r2, [r3, #32]
}
 800fb2e:	bf00      	nop
 800fb30:	371c      	adds	r7, #28
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	40012c00 	.word	0x40012c00
 800fb40:	40013400 	.word	0x40013400
 800fb44:	40014000 	.word	0x40014000
 800fb48:	40014400 	.word	0x40014400
 800fb4c:	40014800 	.word	0x40014800

0800fb50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b087      	sub	sp, #28
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	f003 031f 	and.w	r3, r3, #31
 800fb62:	2201      	movs	r2, #1
 800fb64:	fa02 f303 	lsl.w	r3, r2, r3
 800fb68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6a1a      	ldr	r2, [r3, #32]
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	43db      	mvns	r3, r3
 800fb72:	401a      	ands	r2, r3
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6a1a      	ldr	r2, [r3, #32]
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	f003 031f 	and.w	r3, r3, #31
 800fb82:	6879      	ldr	r1, [r7, #4]
 800fb84:	fa01 f303 	lsl.w	r3, r1, r3
 800fb88:	431a      	orrs	r2, r3
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	621a      	str	r2, [r3, #32]
}
 800fb8e:	bf00      	nop
 800fb90:	371c      	adds	r7, #28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr
	...

0800fb9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d101      	bne.n	800fbb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	e068      	b.n	800fc86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a2e      	ldr	r2, [pc, #184]	; (800fc94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d004      	beq.n	800fbe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a2d      	ldr	r2, [pc, #180]	; (800fc98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d108      	bne.n	800fbfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fbee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a1e      	ldr	r2, [pc, #120]	; (800fc94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d01d      	beq.n	800fc5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc26:	d018      	beq.n	800fc5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a1b      	ldr	r2, [pc, #108]	; (800fc9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d013      	beq.n	800fc5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	4a1a      	ldr	r2, [pc, #104]	; (800fca0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d00e      	beq.n	800fc5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a18      	ldr	r2, [pc, #96]	; (800fca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d009      	beq.n	800fc5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a13      	ldr	r2, [pc, #76]	; (800fc98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d004      	beq.n	800fc5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a14      	ldr	r2, [pc, #80]	; (800fca8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d10c      	bne.n	800fc74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	68ba      	ldr	r2, [r7, #8]
 800fc72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3714      	adds	r7, #20
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	40012c00 	.word	0x40012c00
 800fc98:	40013400 	.word	0x40013400
 800fc9c:	40000400 	.word	0x40000400
 800fca0:	40000800 	.word	0x40000800
 800fca4:	40000c00 	.word	0x40000c00
 800fca8:	40014000 	.word	0x40014000

0800fcac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fcb4:	bf00      	nop
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fcdc:	bf00      	nop
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr

0800fce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d101      	bne.n	800fcfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	e040      	b.n	800fd7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f7 fac4 	bl	8007298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2224      	movs	r2, #36	; 0x24
 800fd14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f022 0201 	bic.w	r2, r2, #1
 800fd24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fae2 	bl	80102f0 <UART_SetConfig>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d101      	bne.n	800fd36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	e022      	b.n	800fd7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d002      	beq.n	800fd44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 fd60 	bl	8010804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	685a      	ldr	r2, [r3, #4]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	689a      	ldr	r2, [r3, #8]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f042 0201 	orr.w	r2, r2, #1
 800fd72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 fde7 	bl	8010948 <UART_CheckIdleState>
 800fd7a:	4603      	mov	r3, r0
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b08a      	sub	sp, #40	; 0x28
 800fd88:	af02      	add	r7, sp, #8
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	603b      	str	r3, [r7, #0]
 800fd90:	4613      	mov	r3, r2
 800fd92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd98:	2b20      	cmp	r3, #32
 800fd9a:	f040 8082 	bne.w	800fea2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <HAL_UART_Transmit+0x26>
 800fda4:	88fb      	ldrh	r3, [r7, #6]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d101      	bne.n	800fdae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e07a      	b.n	800fea4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d101      	bne.n	800fdbc <HAL_UART_Transmit+0x38>
 800fdb8:	2302      	movs	r3, #2
 800fdba:	e073      	b.n	800fea4 <HAL_UART_Transmit+0x120>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2221      	movs	r2, #33	; 0x21
 800fdd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fdd2:	f7f7 feeb 	bl	8007bac <HAL_GetTick>
 800fdd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	88fa      	ldrh	r2, [r7, #6]
 800fddc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	88fa      	ldrh	r2, [r7, #6]
 800fde4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdf0:	d108      	bne.n	800fe04 <HAL_UART_Transmit+0x80>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d104      	bne.n	800fe04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	61bb      	str	r3, [r7, #24]
 800fe02:	e003      	b.n	800fe0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fe14:	e02d      	b.n	800fe72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2180      	movs	r1, #128	; 0x80
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 fdda 	bl	80109da <UART_WaitOnFlagUntilTimeout>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d001      	beq.n	800fe30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	e039      	b.n	800fea4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10b      	bne.n	800fe4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	881a      	ldrh	r2, [r3, #0]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe42:	b292      	uxth	r2, r2
 800fe44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	3302      	adds	r3, #2
 800fe4a:	61bb      	str	r3, [r7, #24]
 800fe4c:	e008      	b.n	800fe60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	781a      	ldrb	r2, [r3, #0]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	b292      	uxth	r2, r2
 800fe58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1cb      	bne.n	800fe16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	2200      	movs	r2, #0
 800fe86:	2140      	movs	r1, #64	; 0x40
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f000 fda6 	bl	80109da <UART_WaitOnFlagUntilTimeout>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d001      	beq.n	800fe98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800fe94:	2303      	movs	r3, #3
 800fe96:	e005      	b.n	800fea4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2220      	movs	r2, #32
 800fe9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	e000      	b.n	800fea4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800fea2:	2302      	movs	r3, #2
  }
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3720      	adds	r7, #32
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	69db      	ldr	r3, [r3, #28]
 800feba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fecc:	69fa      	ldr	r2, [r7, #28]
 800fece:	f640 030f 	movw	r3, #2063	; 0x80f
 800fed2:	4013      	ands	r3, r2
 800fed4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d113      	bne.n	800ff04 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	f003 0320 	and.w	r3, r3, #32
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00e      	beq.n	800ff04 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	f003 0320 	and.w	r3, r3, #32
 800feec:	2b00      	cmp	r3, #0
 800feee:	d009      	beq.n	800ff04 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f000 81ce 	beq.w	8010296 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	4798      	blx	r3
      }
      return;
 800ff02:	e1c8      	b.n	8010296 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 80e3 	beq.w	80100d2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d105      	bne.n	800ff22 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ff16:	69ba      	ldr	r2, [r7, #24]
 800ff18:	4ba6      	ldr	r3, [pc, #664]	; (80101b4 <HAL_UART_IRQHandler+0x308>)
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 80d8 	beq.w	80100d2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	f003 0301 	and.w	r3, r3, #1
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d010      	beq.n	800ff4e <HAL_UART_IRQHandler+0xa2>
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00b      	beq.n	800ff4e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff44:	f043 0201 	orr.w	r2, r3, #1
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	f003 0302 	and.w	r3, r3, #2
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d010      	beq.n	800ff7a <HAL_UART_IRQHandler+0xce>
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00b      	beq.n	800ff7a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2202      	movs	r2, #2
 800ff68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff70:	f043 0204 	orr.w	r2, r3, #4
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	f003 0304 	and.w	r3, r3, #4
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d010      	beq.n	800ffa6 <HAL_UART_IRQHandler+0xfa>
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00b      	beq.n	800ffa6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2204      	movs	r2, #4
 800ff94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff9c:	f043 0202 	orr.w	r2, r3, #2
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	f003 0308 	and.w	r3, r3, #8
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d015      	beq.n	800ffdc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	f003 0320 	and.w	r3, r3, #32
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d104      	bne.n	800ffc4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00b      	beq.n	800ffdc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2208      	movs	r2, #8
 800ffca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffd2:	f043 0208 	orr.w	r2, r3, #8
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d011      	beq.n	801000a <HAL_UART_IRQHandler+0x15e>
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00c      	beq.n	801000a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010000:	f043 0220 	orr.w	r2, r3, #32
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010010:	2b00      	cmp	r3, #0
 8010012:	f000 8142 	beq.w	801029a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	f003 0320 	and.w	r3, r3, #32
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00c      	beq.n	801003a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	f003 0320 	and.w	r3, r3, #32
 8010026:	2b00      	cmp	r3, #0
 8010028:	d007      	beq.n	801003a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801002e:	2b00      	cmp	r3, #0
 8010030:	d003      	beq.n	801003a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010040:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801004c:	2b40      	cmp	r3, #64	; 0x40
 801004e:	d004      	beq.n	801005a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010056:	2b00      	cmp	r3, #0
 8010058:	d031      	beq.n	80100be <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fd39 	bl	8010ad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801006a:	2b40      	cmp	r3, #64	; 0x40
 801006c:	d123      	bne.n	80100b6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	689a      	ldr	r2, [r3, #8]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801007c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010082:	2b00      	cmp	r3, #0
 8010084:	d013      	beq.n	80100ae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801008a:	4a4b      	ldr	r2, [pc, #300]	; (80101b8 <HAL_UART_IRQHandler+0x30c>)
 801008c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010092:	4618      	mov	r0, r3
 8010094:	f7f9 fdb6 	bl	8009c04 <HAL_DMA_Abort_IT>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d017      	beq.n	80100ce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80100a8:	4610      	mov	r0, r2
 80100aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ac:	e00f      	b.n	80100ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f908 	bl	80102c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100b4:	e00b      	b.n	80100ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 f904 	bl	80102c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100bc:	e007      	b.n	80100ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f900 	bl	80102c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80100cc:	e0e5      	b.n	801029a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ce:	bf00      	nop
    return;
 80100d0:	e0e3      	b.n	801029a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	f040 80a9 	bne.w	801022e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	f003 0310 	and.w	r3, r3, #16
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 80a3 	beq.w	801022e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	f003 0310 	and.w	r3, r3, #16
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	f000 809d 	beq.w	801022e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2210      	movs	r2, #16
 80100fa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010106:	2b40      	cmp	r3, #64	; 0x40
 8010108:	d158      	bne.n	80101bc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8010114:	893b      	ldrh	r3, [r7, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80c1 	beq.w	801029e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010122:	893a      	ldrh	r2, [r7, #8]
 8010124:	429a      	cmp	r2, r3
 8010126:	f080 80ba 	bcs.w	801029e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	893a      	ldrh	r2, [r7, #8]
 801012e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f003 0320 	and.w	r3, r3, #32
 801013e:	2b00      	cmp	r3, #0
 8010140:	d12a      	bne.n	8010198 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010150:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f022 0201 	bic.w	r2, r2, #1
 8010160:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	689a      	ldr	r2, [r3, #8]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010170:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2220      	movs	r2, #32
 8010176:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f022 0210 	bic.w	r2, r2, #16
 801018c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010192:	4618      	mov	r0, r3
 8010194:	f7f9 fcf8 	bl	8009b88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	4619      	mov	r1, r3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f893 	bl	80102d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80101b2:	e074      	b.n	801029e <HAL_UART_IRQHandler+0x3f2>
 80101b4:	04000120 	.word	0x04000120
 80101b8:	08010b31 	.word	0x08010b31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d063      	beq.n	80102a2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80101da:	897b      	ldrh	r3, [r7, #10]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d060      	beq.n	80102a2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80101ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	689a      	ldr	r2, [r3, #8]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f022 0201 	bic.w	r2, r2, #1
 80101fe:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2220      	movs	r2, #32
 8010204:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2200      	movs	r2, #0
 801020a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f022 0210 	bic.w	r2, r2, #16
 8010220:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010222:	897b      	ldrh	r3, [r7, #10]
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f856 	bl	80102d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801022c:	e039      	b.n	80102a2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00d      	beq.n	8010254 <HAL_UART_IRQHandler+0x3a8>
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801023e:	2b00      	cmp	r3, #0
 8010240:	d008      	beq.n	8010254 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801024a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 fc9e 	bl	8010b8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010252:	e029      	b.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00d      	beq.n	801027a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010264:	2b00      	cmp	r3, #0
 8010266:	d008      	beq.n	801027a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801026c:	2b00      	cmp	r3, #0
 801026e:	d01a      	beq.n	80102a6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	4798      	blx	r3
    }
    return;
 8010278:	e015      	b.n	80102a6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010280:	2b00      	cmp	r3, #0
 8010282:	d011      	beq.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00c      	beq.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fc64 	bl	8010b5c <UART_EndTransmit_IT>
    return;
 8010294:	e008      	b.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8010296:	bf00      	nop
 8010298:	e006      	b.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 801029a:	bf00      	nop
 801029c:	e004      	b.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 801029e:	bf00      	nop
 80102a0:	e002      	b.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80102a2:	bf00      	nop
 80102a4:	e000      	b.n	80102a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80102a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80102a8:	3720      	adds	r7, #32
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop

080102b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80102b8:	bf00      	nop
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80102cc:	bf00      	nop
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80102e4:	bf00      	nop
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80102f0:	b5b0      	push	{r4, r5, r7, lr}
 80102f2:	b088      	sub	sp, #32
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80102f8:	2300      	movs	r3, #0
 80102fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	689a      	ldr	r2, [r3, #8]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	431a      	orrs	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	431a      	orrs	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	69db      	ldr	r3, [r3, #28]
 8010310:	4313      	orrs	r3, r2
 8010312:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	4bad      	ldr	r3, [pc, #692]	; (80105d0 <UART_SetConfig+0x2e0>)
 801031c:	4013      	ands	r3, r2
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	6812      	ldr	r2, [r2, #0]
 8010322:	69f9      	ldr	r1, [r7, #28]
 8010324:	430b      	orrs	r3, r1
 8010326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68da      	ldr	r2, [r3, #12]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	430a      	orrs	r2, r1
 801033c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	699b      	ldr	r3, [r3, #24]
 8010342:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4aa2      	ldr	r2, [pc, #648]	; (80105d4 <UART_SetConfig+0x2e4>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d004      	beq.n	8010358 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	69fa      	ldr	r2, [r7, #28]
 8010354:	4313      	orrs	r3, r2
 8010356:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	69fa      	ldr	r2, [r7, #28]
 8010368:	430a      	orrs	r2, r1
 801036a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a99      	ldr	r2, [pc, #612]	; (80105d8 <UART_SetConfig+0x2e8>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d121      	bne.n	80103ba <UART_SetConfig+0xca>
 8010376:	4b99      	ldr	r3, [pc, #612]	; (80105dc <UART_SetConfig+0x2ec>)
 8010378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801037c:	f003 0303 	and.w	r3, r3, #3
 8010380:	2b03      	cmp	r3, #3
 8010382:	d817      	bhi.n	80103b4 <UART_SetConfig+0xc4>
 8010384:	a201      	add	r2, pc, #4	; (adr r2, 801038c <UART_SetConfig+0x9c>)
 8010386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801038a:	bf00      	nop
 801038c:	0801039d 	.word	0x0801039d
 8010390:	080103a9 	.word	0x080103a9
 8010394:	080103a3 	.word	0x080103a3
 8010398:	080103af 	.word	0x080103af
 801039c:	2301      	movs	r3, #1
 801039e:	76fb      	strb	r3, [r7, #27]
 80103a0:	e0e7      	b.n	8010572 <UART_SetConfig+0x282>
 80103a2:	2302      	movs	r3, #2
 80103a4:	76fb      	strb	r3, [r7, #27]
 80103a6:	e0e4      	b.n	8010572 <UART_SetConfig+0x282>
 80103a8:	2304      	movs	r3, #4
 80103aa:	76fb      	strb	r3, [r7, #27]
 80103ac:	e0e1      	b.n	8010572 <UART_SetConfig+0x282>
 80103ae:	2308      	movs	r3, #8
 80103b0:	76fb      	strb	r3, [r7, #27]
 80103b2:	e0de      	b.n	8010572 <UART_SetConfig+0x282>
 80103b4:	2310      	movs	r3, #16
 80103b6:	76fb      	strb	r3, [r7, #27]
 80103b8:	e0db      	b.n	8010572 <UART_SetConfig+0x282>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a88      	ldr	r2, [pc, #544]	; (80105e0 <UART_SetConfig+0x2f0>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d132      	bne.n	801042a <UART_SetConfig+0x13a>
 80103c4:	4b85      	ldr	r3, [pc, #532]	; (80105dc <UART_SetConfig+0x2ec>)
 80103c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103ca:	f003 030c 	and.w	r3, r3, #12
 80103ce:	2b0c      	cmp	r3, #12
 80103d0:	d828      	bhi.n	8010424 <UART_SetConfig+0x134>
 80103d2:	a201      	add	r2, pc, #4	; (adr r2, 80103d8 <UART_SetConfig+0xe8>)
 80103d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103d8:	0801040d 	.word	0x0801040d
 80103dc:	08010425 	.word	0x08010425
 80103e0:	08010425 	.word	0x08010425
 80103e4:	08010425 	.word	0x08010425
 80103e8:	08010419 	.word	0x08010419
 80103ec:	08010425 	.word	0x08010425
 80103f0:	08010425 	.word	0x08010425
 80103f4:	08010425 	.word	0x08010425
 80103f8:	08010413 	.word	0x08010413
 80103fc:	08010425 	.word	0x08010425
 8010400:	08010425 	.word	0x08010425
 8010404:	08010425 	.word	0x08010425
 8010408:	0801041f 	.word	0x0801041f
 801040c:	2300      	movs	r3, #0
 801040e:	76fb      	strb	r3, [r7, #27]
 8010410:	e0af      	b.n	8010572 <UART_SetConfig+0x282>
 8010412:	2302      	movs	r3, #2
 8010414:	76fb      	strb	r3, [r7, #27]
 8010416:	e0ac      	b.n	8010572 <UART_SetConfig+0x282>
 8010418:	2304      	movs	r3, #4
 801041a:	76fb      	strb	r3, [r7, #27]
 801041c:	e0a9      	b.n	8010572 <UART_SetConfig+0x282>
 801041e:	2308      	movs	r3, #8
 8010420:	76fb      	strb	r3, [r7, #27]
 8010422:	e0a6      	b.n	8010572 <UART_SetConfig+0x282>
 8010424:	2310      	movs	r3, #16
 8010426:	76fb      	strb	r3, [r7, #27]
 8010428:	e0a3      	b.n	8010572 <UART_SetConfig+0x282>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4a6d      	ldr	r2, [pc, #436]	; (80105e4 <UART_SetConfig+0x2f4>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d120      	bne.n	8010476 <UART_SetConfig+0x186>
 8010434:	4b69      	ldr	r3, [pc, #420]	; (80105dc <UART_SetConfig+0x2ec>)
 8010436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801043a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801043e:	2b30      	cmp	r3, #48	; 0x30
 8010440:	d013      	beq.n	801046a <UART_SetConfig+0x17a>
 8010442:	2b30      	cmp	r3, #48	; 0x30
 8010444:	d814      	bhi.n	8010470 <UART_SetConfig+0x180>
 8010446:	2b20      	cmp	r3, #32
 8010448:	d009      	beq.n	801045e <UART_SetConfig+0x16e>
 801044a:	2b20      	cmp	r3, #32
 801044c:	d810      	bhi.n	8010470 <UART_SetConfig+0x180>
 801044e:	2b00      	cmp	r3, #0
 8010450:	d002      	beq.n	8010458 <UART_SetConfig+0x168>
 8010452:	2b10      	cmp	r3, #16
 8010454:	d006      	beq.n	8010464 <UART_SetConfig+0x174>
 8010456:	e00b      	b.n	8010470 <UART_SetConfig+0x180>
 8010458:	2300      	movs	r3, #0
 801045a:	76fb      	strb	r3, [r7, #27]
 801045c:	e089      	b.n	8010572 <UART_SetConfig+0x282>
 801045e:	2302      	movs	r3, #2
 8010460:	76fb      	strb	r3, [r7, #27]
 8010462:	e086      	b.n	8010572 <UART_SetConfig+0x282>
 8010464:	2304      	movs	r3, #4
 8010466:	76fb      	strb	r3, [r7, #27]
 8010468:	e083      	b.n	8010572 <UART_SetConfig+0x282>
 801046a:	2308      	movs	r3, #8
 801046c:	76fb      	strb	r3, [r7, #27]
 801046e:	e080      	b.n	8010572 <UART_SetConfig+0x282>
 8010470:	2310      	movs	r3, #16
 8010472:	76fb      	strb	r3, [r7, #27]
 8010474:	e07d      	b.n	8010572 <UART_SetConfig+0x282>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a5b      	ldr	r2, [pc, #364]	; (80105e8 <UART_SetConfig+0x2f8>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d120      	bne.n	80104c2 <UART_SetConfig+0x1d2>
 8010480:	4b56      	ldr	r3, [pc, #344]	; (80105dc <UART_SetConfig+0x2ec>)
 8010482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801048a:	2bc0      	cmp	r3, #192	; 0xc0
 801048c:	d013      	beq.n	80104b6 <UART_SetConfig+0x1c6>
 801048e:	2bc0      	cmp	r3, #192	; 0xc0
 8010490:	d814      	bhi.n	80104bc <UART_SetConfig+0x1cc>
 8010492:	2b80      	cmp	r3, #128	; 0x80
 8010494:	d009      	beq.n	80104aa <UART_SetConfig+0x1ba>
 8010496:	2b80      	cmp	r3, #128	; 0x80
 8010498:	d810      	bhi.n	80104bc <UART_SetConfig+0x1cc>
 801049a:	2b00      	cmp	r3, #0
 801049c:	d002      	beq.n	80104a4 <UART_SetConfig+0x1b4>
 801049e:	2b40      	cmp	r3, #64	; 0x40
 80104a0:	d006      	beq.n	80104b0 <UART_SetConfig+0x1c0>
 80104a2:	e00b      	b.n	80104bc <UART_SetConfig+0x1cc>
 80104a4:	2300      	movs	r3, #0
 80104a6:	76fb      	strb	r3, [r7, #27]
 80104a8:	e063      	b.n	8010572 <UART_SetConfig+0x282>
 80104aa:	2302      	movs	r3, #2
 80104ac:	76fb      	strb	r3, [r7, #27]
 80104ae:	e060      	b.n	8010572 <UART_SetConfig+0x282>
 80104b0:	2304      	movs	r3, #4
 80104b2:	76fb      	strb	r3, [r7, #27]
 80104b4:	e05d      	b.n	8010572 <UART_SetConfig+0x282>
 80104b6:	2308      	movs	r3, #8
 80104b8:	76fb      	strb	r3, [r7, #27]
 80104ba:	e05a      	b.n	8010572 <UART_SetConfig+0x282>
 80104bc:	2310      	movs	r3, #16
 80104be:	76fb      	strb	r3, [r7, #27]
 80104c0:	e057      	b.n	8010572 <UART_SetConfig+0x282>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a49      	ldr	r2, [pc, #292]	; (80105ec <UART_SetConfig+0x2fc>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d125      	bne.n	8010518 <UART_SetConfig+0x228>
 80104cc:	4b43      	ldr	r3, [pc, #268]	; (80105dc <UART_SetConfig+0x2ec>)
 80104ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80104d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104da:	d017      	beq.n	801050c <UART_SetConfig+0x21c>
 80104dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104e0:	d817      	bhi.n	8010512 <UART_SetConfig+0x222>
 80104e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104e6:	d00b      	beq.n	8010500 <UART_SetConfig+0x210>
 80104e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104ec:	d811      	bhi.n	8010512 <UART_SetConfig+0x222>
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d003      	beq.n	80104fa <UART_SetConfig+0x20a>
 80104f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104f6:	d006      	beq.n	8010506 <UART_SetConfig+0x216>
 80104f8:	e00b      	b.n	8010512 <UART_SetConfig+0x222>
 80104fa:	2300      	movs	r3, #0
 80104fc:	76fb      	strb	r3, [r7, #27]
 80104fe:	e038      	b.n	8010572 <UART_SetConfig+0x282>
 8010500:	2302      	movs	r3, #2
 8010502:	76fb      	strb	r3, [r7, #27]
 8010504:	e035      	b.n	8010572 <UART_SetConfig+0x282>
 8010506:	2304      	movs	r3, #4
 8010508:	76fb      	strb	r3, [r7, #27]
 801050a:	e032      	b.n	8010572 <UART_SetConfig+0x282>
 801050c:	2308      	movs	r3, #8
 801050e:	76fb      	strb	r3, [r7, #27]
 8010510:	e02f      	b.n	8010572 <UART_SetConfig+0x282>
 8010512:	2310      	movs	r3, #16
 8010514:	76fb      	strb	r3, [r7, #27]
 8010516:	e02c      	b.n	8010572 <UART_SetConfig+0x282>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	4a2d      	ldr	r2, [pc, #180]	; (80105d4 <UART_SetConfig+0x2e4>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d125      	bne.n	801056e <UART_SetConfig+0x27e>
 8010522:	4b2e      	ldr	r3, [pc, #184]	; (80105dc <UART_SetConfig+0x2ec>)
 8010524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801052c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010530:	d017      	beq.n	8010562 <UART_SetConfig+0x272>
 8010532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010536:	d817      	bhi.n	8010568 <UART_SetConfig+0x278>
 8010538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801053c:	d00b      	beq.n	8010556 <UART_SetConfig+0x266>
 801053e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010542:	d811      	bhi.n	8010568 <UART_SetConfig+0x278>
 8010544:	2b00      	cmp	r3, #0
 8010546:	d003      	beq.n	8010550 <UART_SetConfig+0x260>
 8010548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801054c:	d006      	beq.n	801055c <UART_SetConfig+0x26c>
 801054e:	e00b      	b.n	8010568 <UART_SetConfig+0x278>
 8010550:	2300      	movs	r3, #0
 8010552:	76fb      	strb	r3, [r7, #27]
 8010554:	e00d      	b.n	8010572 <UART_SetConfig+0x282>
 8010556:	2302      	movs	r3, #2
 8010558:	76fb      	strb	r3, [r7, #27]
 801055a:	e00a      	b.n	8010572 <UART_SetConfig+0x282>
 801055c:	2304      	movs	r3, #4
 801055e:	76fb      	strb	r3, [r7, #27]
 8010560:	e007      	b.n	8010572 <UART_SetConfig+0x282>
 8010562:	2308      	movs	r3, #8
 8010564:	76fb      	strb	r3, [r7, #27]
 8010566:	e004      	b.n	8010572 <UART_SetConfig+0x282>
 8010568:	2310      	movs	r3, #16
 801056a:	76fb      	strb	r3, [r7, #27]
 801056c:	e001      	b.n	8010572 <UART_SetConfig+0x282>
 801056e:	2310      	movs	r3, #16
 8010570:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a17      	ldr	r2, [pc, #92]	; (80105d4 <UART_SetConfig+0x2e4>)
 8010578:	4293      	cmp	r3, r2
 801057a:	f040 8087 	bne.w	801068c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801057e:	7efb      	ldrb	r3, [r7, #27]
 8010580:	2b08      	cmp	r3, #8
 8010582:	d837      	bhi.n	80105f4 <UART_SetConfig+0x304>
 8010584:	a201      	add	r2, pc, #4	; (adr r2, 801058c <UART_SetConfig+0x29c>)
 8010586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058a:	bf00      	nop
 801058c:	080105b1 	.word	0x080105b1
 8010590:	080105f5 	.word	0x080105f5
 8010594:	080105b9 	.word	0x080105b9
 8010598:	080105f5 	.word	0x080105f5
 801059c:	080105bf 	.word	0x080105bf
 80105a0:	080105f5 	.word	0x080105f5
 80105a4:	080105f5 	.word	0x080105f5
 80105a8:	080105f5 	.word	0x080105f5
 80105ac:	080105c7 	.word	0x080105c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105b0:	f7fc fa0e 	bl	800c9d0 <HAL_RCC_GetPCLK1Freq>
 80105b4:	6178      	str	r0, [r7, #20]
        break;
 80105b6:	e022      	b.n	80105fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80105b8:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <UART_SetConfig+0x300>)
 80105ba:	617b      	str	r3, [r7, #20]
        break;
 80105bc:	e01f      	b.n	80105fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80105be:	f7fc f96f 	bl	800c8a0 <HAL_RCC_GetSysClockFreq>
 80105c2:	6178      	str	r0, [r7, #20]
        break;
 80105c4:	e01b      	b.n	80105fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105ca:	617b      	str	r3, [r7, #20]
        break;
 80105cc:	e017      	b.n	80105fe <UART_SetConfig+0x30e>
 80105ce:	bf00      	nop
 80105d0:	efff69f3 	.word	0xefff69f3
 80105d4:	40008000 	.word	0x40008000
 80105d8:	40013800 	.word	0x40013800
 80105dc:	40021000 	.word	0x40021000
 80105e0:	40004400 	.word	0x40004400
 80105e4:	40004800 	.word	0x40004800
 80105e8:	40004c00 	.word	0x40004c00
 80105ec:	40005000 	.word	0x40005000
 80105f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80105f4:	2300      	movs	r3, #0
 80105f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80105f8:	2301      	movs	r3, #1
 80105fa:	76bb      	strb	r3, [r7, #26]
        break;
 80105fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 80f1 	beq.w	80107e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	685a      	ldr	r2, [r3, #4]
 801060a:	4613      	mov	r3, r2
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	4413      	add	r3, r2
 8010610:	697a      	ldr	r2, [r7, #20]
 8010612:	429a      	cmp	r2, r3
 8010614:	d305      	bcc.n	8010622 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801061c:	697a      	ldr	r2, [r7, #20]
 801061e:	429a      	cmp	r2, r3
 8010620:	d902      	bls.n	8010628 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8010622:	2301      	movs	r3, #1
 8010624:	76bb      	strb	r3, [r7, #26]
 8010626:	e0df      	b.n	80107e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	4618      	mov	r0, r3
 801062c:	f04f 0100 	mov.w	r1, #0
 8010630:	f04f 0200 	mov.w	r2, #0
 8010634:	f04f 0300 	mov.w	r3, #0
 8010638:	020b      	lsls	r3, r1, #8
 801063a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801063e:	0202      	lsls	r2, r0, #8
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	6849      	ldr	r1, [r1, #4]
 8010644:	0849      	lsrs	r1, r1, #1
 8010646:	4608      	mov	r0, r1
 8010648:	f04f 0100 	mov.w	r1, #0
 801064c:	1814      	adds	r4, r2, r0
 801064e:	eb43 0501 	adc.w	r5, r3, r1
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	461a      	mov	r2, r3
 8010658:	f04f 0300 	mov.w	r3, #0
 801065c:	4620      	mov	r0, r4
 801065e:	4629      	mov	r1, r5
 8010660:	f7f0 fb72 	bl	8000d48 <__aeabi_uldivmod>
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	4613      	mov	r3, r2
 801066a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010672:	d308      	bcc.n	8010686 <UART_SetConfig+0x396>
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801067a:	d204      	bcs.n	8010686 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	693a      	ldr	r2, [r7, #16]
 8010682:	60da      	str	r2, [r3, #12]
 8010684:	e0b0      	b.n	80107e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8010686:	2301      	movs	r3, #1
 8010688:	76bb      	strb	r3, [r7, #26]
 801068a:	e0ad      	b.n	80107e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	69db      	ldr	r3, [r3, #28]
 8010690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010694:	d15c      	bne.n	8010750 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8010696:	7efb      	ldrb	r3, [r7, #27]
 8010698:	2b08      	cmp	r3, #8
 801069a:	d828      	bhi.n	80106ee <UART_SetConfig+0x3fe>
 801069c:	a201      	add	r2, pc, #4	; (adr r2, 80106a4 <UART_SetConfig+0x3b4>)
 801069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a2:	bf00      	nop
 80106a4:	080106c9 	.word	0x080106c9
 80106a8:	080106d1 	.word	0x080106d1
 80106ac:	080106d9 	.word	0x080106d9
 80106b0:	080106ef 	.word	0x080106ef
 80106b4:	080106df 	.word	0x080106df
 80106b8:	080106ef 	.word	0x080106ef
 80106bc:	080106ef 	.word	0x080106ef
 80106c0:	080106ef 	.word	0x080106ef
 80106c4:	080106e7 	.word	0x080106e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106c8:	f7fc f982 	bl	800c9d0 <HAL_RCC_GetPCLK1Freq>
 80106cc:	6178      	str	r0, [r7, #20]
        break;
 80106ce:	e013      	b.n	80106f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106d0:	f7fc f994 	bl	800c9fc <HAL_RCC_GetPCLK2Freq>
 80106d4:	6178      	str	r0, [r7, #20]
        break;
 80106d6:	e00f      	b.n	80106f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80106d8:	4b49      	ldr	r3, [pc, #292]	; (8010800 <UART_SetConfig+0x510>)
 80106da:	617b      	str	r3, [r7, #20]
        break;
 80106dc:	e00c      	b.n	80106f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80106de:	f7fc f8df 	bl	800c8a0 <HAL_RCC_GetSysClockFreq>
 80106e2:	6178      	str	r0, [r7, #20]
        break;
 80106e4:	e008      	b.n	80106f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106ea:	617b      	str	r3, [r7, #20]
        break;
 80106ec:	e004      	b.n	80106f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80106ee:	2300      	movs	r3, #0
 80106f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	76bb      	strb	r3, [r7, #26]
        break;
 80106f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d074      	beq.n	80107e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	005a      	lsls	r2, r3, #1
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	085b      	lsrs	r3, r3, #1
 8010708:	441a      	add	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010712:	b29b      	uxth	r3, r3
 8010714:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	2b0f      	cmp	r3, #15
 801071a:	d916      	bls.n	801074a <UART_SetConfig+0x45a>
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010722:	d212      	bcs.n	801074a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	b29b      	uxth	r3, r3
 8010728:	f023 030f 	bic.w	r3, r3, #15
 801072c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	085b      	lsrs	r3, r3, #1
 8010732:	b29b      	uxth	r3, r3
 8010734:	f003 0307 	and.w	r3, r3, #7
 8010738:	b29a      	uxth	r2, r3
 801073a:	89fb      	ldrh	r3, [r7, #14]
 801073c:	4313      	orrs	r3, r2
 801073e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	89fa      	ldrh	r2, [r7, #14]
 8010746:	60da      	str	r2, [r3, #12]
 8010748:	e04e      	b.n	80107e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	76bb      	strb	r3, [r7, #26]
 801074e:	e04b      	b.n	80107e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010750:	7efb      	ldrb	r3, [r7, #27]
 8010752:	2b08      	cmp	r3, #8
 8010754:	d827      	bhi.n	80107a6 <UART_SetConfig+0x4b6>
 8010756:	a201      	add	r2, pc, #4	; (adr r2, 801075c <UART_SetConfig+0x46c>)
 8010758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075c:	08010781 	.word	0x08010781
 8010760:	08010789 	.word	0x08010789
 8010764:	08010791 	.word	0x08010791
 8010768:	080107a7 	.word	0x080107a7
 801076c:	08010797 	.word	0x08010797
 8010770:	080107a7 	.word	0x080107a7
 8010774:	080107a7 	.word	0x080107a7
 8010778:	080107a7 	.word	0x080107a7
 801077c:	0801079f 	.word	0x0801079f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010780:	f7fc f926 	bl	800c9d0 <HAL_RCC_GetPCLK1Freq>
 8010784:	6178      	str	r0, [r7, #20]
        break;
 8010786:	e013      	b.n	80107b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010788:	f7fc f938 	bl	800c9fc <HAL_RCC_GetPCLK2Freq>
 801078c:	6178      	str	r0, [r7, #20]
        break;
 801078e:	e00f      	b.n	80107b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010790:	4b1b      	ldr	r3, [pc, #108]	; (8010800 <UART_SetConfig+0x510>)
 8010792:	617b      	str	r3, [r7, #20]
        break;
 8010794:	e00c      	b.n	80107b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010796:	f7fc f883 	bl	800c8a0 <HAL_RCC_GetSysClockFreq>
 801079a:	6178      	str	r0, [r7, #20]
        break;
 801079c:	e008      	b.n	80107b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801079e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107a2:	617b      	str	r3, [r7, #20]
        break;
 80107a4:	e004      	b.n	80107b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80107aa:	2301      	movs	r3, #1
 80107ac:	76bb      	strb	r3, [r7, #26]
        break;
 80107ae:	bf00      	nop
    }

    if (pclk != 0U)
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d018      	beq.n	80107e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	085a      	lsrs	r2, r3, #1
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	441a      	add	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	2b0f      	cmp	r3, #15
 80107d0:	d908      	bls.n	80107e4 <UART_SetConfig+0x4f4>
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107d8:	d204      	bcs.n	80107e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	60da      	str	r2, [r3, #12]
 80107e2:	e001      	b.n	80107e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80107e4:	2301      	movs	r3, #1
 80107e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80107f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3720      	adds	r7, #32
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bdb0      	pop	{r4, r5, r7, pc}
 80107fe:	bf00      	nop
 8010800:	00f42400 	.word	0x00f42400

08010804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00a      	beq.n	801082e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	430a      	orrs	r2, r1
 801082c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010832:	f003 0302 	and.w	r3, r3, #2
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00a      	beq.n	8010850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	430a      	orrs	r2, r1
 801084e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010854:	f003 0304 	and.w	r3, r3, #4
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	430a      	orrs	r2, r1
 8010870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010876:	f003 0308 	and.w	r3, r3, #8
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00a      	beq.n	8010894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	430a      	orrs	r2, r1
 8010892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010898:	f003 0310 	and.w	r3, r3, #16
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00a      	beq.n	80108b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	430a      	orrs	r2, r1
 80108b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ba:	f003 0320 	and.w	r3, r3, #32
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d00a      	beq.n	80108d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	430a      	orrs	r2, r1
 80108d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d01a      	beq.n	801091a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	430a      	orrs	r2, r1
 80108f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010902:	d10a      	bne.n	801091a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	430a      	orrs	r2, r1
 8010918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00a      	beq.n	801093c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	430a      	orrs	r2, r1
 801093a:	605a      	str	r2, [r3, #4]
  }
}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b086      	sub	sp, #24
 801094c:	af02      	add	r7, sp, #8
 801094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010958:	f7f7 f928 	bl	8007bac <HAL_GetTick>
 801095c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f003 0308 	and.w	r3, r3, #8
 8010968:	2b08      	cmp	r3, #8
 801096a:	d10e      	bne.n	801098a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801096c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 f82d 	bl	80109da <UART_WaitOnFlagUntilTimeout>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	d001      	beq.n	801098a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010986:	2303      	movs	r3, #3
 8010988:	e023      	b.n	80109d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f003 0304 	and.w	r3, r3, #4
 8010994:	2b04      	cmp	r3, #4
 8010996:	d10e      	bne.n	80109b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 f817 	bl	80109da <UART_WaitOnFlagUntilTimeout>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80109b2:	2303      	movs	r3, #3
 80109b4:	e00d      	b.n	80109d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2220      	movs	r2, #32
 80109ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2220      	movs	r2, #32
 80109c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80109d0:	2300      	movs	r3, #0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b084      	sub	sp, #16
 80109de:	af00      	add	r7, sp, #0
 80109e0:	60f8      	str	r0, [r7, #12]
 80109e2:	60b9      	str	r1, [r7, #8]
 80109e4:	603b      	str	r3, [r7, #0]
 80109e6:	4613      	mov	r3, r2
 80109e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109ea:	e05e      	b.n	8010aaa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f2:	d05a      	beq.n	8010aaa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109f4:	f7f7 f8da 	bl	8007bac <HAL_GetTick>
 80109f8:	4602      	mov	r2, r0
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	69ba      	ldr	r2, [r7, #24]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d302      	bcc.n	8010a0a <UART_WaitOnFlagUntilTimeout+0x30>
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d11b      	bne.n	8010a42 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	689a      	ldr	r2, [r3, #8]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f022 0201 	bic.w	r2, r2, #1
 8010a28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2220      	movs	r2, #32
 8010a2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2220      	movs	r2, #32
 8010a34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e043      	b.n	8010aca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f003 0304 	and.w	r3, r3, #4
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d02c      	beq.n	8010aaa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	69db      	ldr	r3, [r3, #28]
 8010a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a5e:	d124      	bne.n	8010aaa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010a68:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	689a      	ldr	r2, [r3, #8]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f022 0201 	bic.w	r2, r2, #1
 8010a88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2220      	movs	r2, #32
 8010a8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2220      	movs	r2, #32
 8010a94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2220      	movs	r2, #32
 8010a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	e00f      	b.n	8010aca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	69da      	ldr	r2, [r3, #28]
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	4013      	ands	r3, r2
 8010ab4:	68ba      	ldr	r2, [r7, #8]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	bf0c      	ite	eq
 8010aba:	2301      	moveq	r3, #1
 8010abc:	2300      	movne	r3, #0
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	79fb      	ldrb	r3, [r7, #7]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d091      	beq.n	80109ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010ac8:	2300      	movs	r3, #0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ad2:	b480      	push	{r7}
 8010ad4:	b083      	sub	sp, #12
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010ae8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689a      	ldr	r2, [r3, #8]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f022 0201 	bic.w	r2, r2, #1
 8010af8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d107      	bne.n	8010b12 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f022 0210 	bic.w	r2, r2, #16
 8010b10:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2220      	movs	r2, #32
 8010b16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010b24:	bf00      	nop
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f7ff fbb8 	bl	80102c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b54:	bf00      	nop
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b72:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2220      	movs	r2, #32
 8010b78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff fb95 	bl	80102b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b86:	bf00      	nop
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b8e:	b480      	push	{r7}
 8010b90:	b083      	sub	sp, #12
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b96:	bf00      	nop
 8010b98:	370c      	adds	r7, #12
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	f107 001c 	add.w	r0, r7, #28
 8010bb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f001 f9cf 	bl	8011f64 <USB_CoreReset>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8010bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d106      	bne.n	8010bde <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	639a      	str	r2, [r3, #56]	; 0x38
 8010bdc:	e005      	b.n	8010bea <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010bf6:	b004      	add	sp, #16
 8010bf8:	4770      	bx	lr
	...

08010bfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b087      	sub	sp, #28
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	4613      	mov	r3, r2
 8010c08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c0a:	79fb      	ldrb	r3, [r7, #7]
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d165      	bne.n	8010cdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	4a3e      	ldr	r2, [pc, #248]	; (8010d0c <USB_SetTurnaroundTime+0x110>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d906      	bls.n	8010c26 <USB_SetTurnaroundTime+0x2a>
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	4a3d      	ldr	r2, [pc, #244]	; (8010d10 <USB_SetTurnaroundTime+0x114>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d202      	bcs.n	8010c26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c20:	230f      	movs	r3, #15
 8010c22:	617b      	str	r3, [r7, #20]
 8010c24:	e05c      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	4a39      	ldr	r2, [pc, #228]	; (8010d10 <USB_SetTurnaroundTime+0x114>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d306      	bcc.n	8010c3c <USB_SetTurnaroundTime+0x40>
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	4a38      	ldr	r2, [pc, #224]	; (8010d14 <USB_SetTurnaroundTime+0x118>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d202      	bcs.n	8010c3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c36:	230e      	movs	r3, #14
 8010c38:	617b      	str	r3, [r7, #20]
 8010c3a:	e051      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	4a35      	ldr	r2, [pc, #212]	; (8010d14 <USB_SetTurnaroundTime+0x118>)
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d306      	bcc.n	8010c52 <USB_SetTurnaroundTime+0x56>
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	4a34      	ldr	r2, [pc, #208]	; (8010d18 <USB_SetTurnaroundTime+0x11c>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d202      	bcs.n	8010c52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010c4c:	230d      	movs	r3, #13
 8010c4e:	617b      	str	r3, [r7, #20]
 8010c50:	e046      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	4a30      	ldr	r2, [pc, #192]	; (8010d18 <USB_SetTurnaroundTime+0x11c>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d306      	bcc.n	8010c68 <USB_SetTurnaroundTime+0x6c>
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	4a2f      	ldr	r2, [pc, #188]	; (8010d1c <USB_SetTurnaroundTime+0x120>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d802      	bhi.n	8010c68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010c62:	230c      	movs	r3, #12
 8010c64:	617b      	str	r3, [r7, #20]
 8010c66:	e03b      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	4a2c      	ldr	r2, [pc, #176]	; (8010d1c <USB_SetTurnaroundTime+0x120>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d906      	bls.n	8010c7e <USB_SetTurnaroundTime+0x82>
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	4a2b      	ldr	r2, [pc, #172]	; (8010d20 <USB_SetTurnaroundTime+0x124>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d802      	bhi.n	8010c7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010c78:	230b      	movs	r3, #11
 8010c7a:	617b      	str	r3, [r7, #20]
 8010c7c:	e030      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	4a27      	ldr	r2, [pc, #156]	; (8010d20 <USB_SetTurnaroundTime+0x124>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d906      	bls.n	8010c94 <USB_SetTurnaroundTime+0x98>
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	4a26      	ldr	r2, [pc, #152]	; (8010d24 <USB_SetTurnaroundTime+0x128>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d802      	bhi.n	8010c94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010c8e:	230a      	movs	r3, #10
 8010c90:	617b      	str	r3, [r7, #20]
 8010c92:	e025      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	4a23      	ldr	r2, [pc, #140]	; (8010d24 <USB_SetTurnaroundTime+0x128>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d906      	bls.n	8010caa <USB_SetTurnaroundTime+0xae>
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	4a22      	ldr	r2, [pc, #136]	; (8010d28 <USB_SetTurnaroundTime+0x12c>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d202      	bcs.n	8010caa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010ca4:	2309      	movs	r3, #9
 8010ca6:	617b      	str	r3, [r7, #20]
 8010ca8:	e01a      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	4a1e      	ldr	r2, [pc, #120]	; (8010d28 <USB_SetTurnaroundTime+0x12c>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d306      	bcc.n	8010cc0 <USB_SetTurnaroundTime+0xc4>
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	4a1d      	ldr	r2, [pc, #116]	; (8010d2c <USB_SetTurnaroundTime+0x130>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d802      	bhi.n	8010cc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010cba:	2308      	movs	r3, #8
 8010cbc:	617b      	str	r3, [r7, #20]
 8010cbe:	e00f      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	4a1a      	ldr	r2, [pc, #104]	; (8010d2c <USB_SetTurnaroundTime+0x130>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d906      	bls.n	8010cd6 <USB_SetTurnaroundTime+0xda>
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	4a19      	ldr	r2, [pc, #100]	; (8010d30 <USB_SetTurnaroundTime+0x134>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d202      	bcs.n	8010cd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010cd0:	2307      	movs	r3, #7
 8010cd2:	617b      	str	r3, [r7, #20]
 8010cd4:	e004      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010cd6:	2306      	movs	r3, #6
 8010cd8:	617b      	str	r3, [r7, #20]
 8010cda:	e001      	b.n	8010ce0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010cdc:	2309      	movs	r3, #9
 8010cde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	68da      	ldr	r2, [r3, #12]
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	029b      	lsls	r3, r3, #10
 8010cf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010cf8:	431a      	orrs	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	371c      	adds	r7, #28
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr
 8010d0c:	00d8acbf 	.word	0x00d8acbf
 8010d10:	00e4e1c0 	.word	0x00e4e1c0
 8010d14:	00f42400 	.word	0x00f42400
 8010d18:	01067380 	.word	0x01067380
 8010d1c:	011a499f 	.word	0x011a499f
 8010d20:	01312cff 	.word	0x01312cff
 8010d24:	014ca43f 	.word	0x014ca43f
 8010d28:	016e3600 	.word	0x016e3600
 8010d2c:	01a6ab1f 	.word	0x01a6ab1f
 8010d30:	01e84800 	.word	0x01e84800

08010d34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	f043 0201 	orr.w	r2, r3, #1
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d48:	2300      	movs	r3, #0
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d56:	b480      	push	{r7}
 8010d58:	b083      	sub	sp, #12
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f023 0201 	bic.w	r2, r3, #1
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	370c      	adds	r7, #12
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr

08010d78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	460b      	mov	r3, r1
 8010d82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010d90:	78fb      	ldrb	r3, [r7, #3]
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	d106      	bne.n	8010da4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	60da      	str	r2, [r3, #12]
 8010da2:	e00b      	b.n	8010dbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010da4:	78fb      	ldrb	r3, [r7, #3]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d106      	bne.n	8010db8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	60da      	str	r2, [r3, #12]
 8010db6:	e001      	b.n	8010dbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010db8:	2301      	movs	r3, #1
 8010dba:	e003      	b.n	8010dc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010dbc:	2032      	movs	r0, #50	; 0x32
 8010dbe:	f7f6 ff01 	bl	8007bc4 <HAL_Delay>

  return HAL_OK;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010dcc:	b084      	sub	sp, #16
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b086      	sub	sp, #24
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
 8010dd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010dde:	2300      	movs	r3, #0
 8010de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010de6:	2300      	movs	r3, #0
 8010de8:	613b      	str	r3, [r7, #16]
 8010dea:	e009      	b.n	8010e00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	3340      	adds	r3, #64	; 0x40
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4413      	add	r3, r2
 8010df6:	2200      	movs	r2, #0
 8010df8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	613b      	str	r3, [r7, #16]
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	2b0e      	cmp	r3, #14
 8010e04:	d9f2      	bls.n	8010dec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d11c      	bne.n	8010e46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	68fa      	ldr	r2, [r7, #12]
 8010e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e1a:	f043 0302 	orr.w	r3, r3, #2
 8010e1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	601a      	str	r2, [r3, #0]
 8010e44:	e005      	b.n	8010e52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e58:	461a      	mov	r2, r3
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e64:	4619      	mov	r1, r3
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	680b      	ldr	r3, [r1, #0]
 8010e70:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010e72:	2103      	movs	r1, #3
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 f93d 	bl	80110f4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010e7a:	2110      	movs	r1, #16
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 f8f1 	bl	8011064 <USB_FlushTxFifo>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f000 f90f 	bl	80110b0 <USB_FlushRxFifo>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eae:	461a      	mov	r2, r3
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eba:	461a      	mov	r2, r3
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	613b      	str	r3, [r7, #16]
 8010ec4:	e043      	b.n	8010f4e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	015a      	lsls	r2, r3, #5
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	4413      	add	r3, r2
 8010ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010edc:	d118      	bne.n	8010f10 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d10a      	bne.n	8010efa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	015a      	lsls	r2, r3, #5
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	4413      	add	r3, r2
 8010eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010ef6:	6013      	str	r3, [r2, #0]
 8010ef8:	e013      	b.n	8010f22 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	015a      	lsls	r2, r3, #5
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	4413      	add	r3, r2
 8010f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f06:	461a      	mov	r2, r3
 8010f08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f0c:	6013      	str	r3, [r2, #0]
 8010f0e:	e008      	b.n	8010f22 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	015a      	lsls	r2, r3, #5
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	4413      	add	r3, r2
 8010f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	2300      	movs	r3, #0
 8010f20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	015a      	lsls	r2, r3, #5
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	4413      	add	r3, r2
 8010f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f2e:	461a      	mov	r2, r3
 8010f30:	2300      	movs	r3, #0
 8010f32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	015a      	lsls	r2, r3, #5
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	4413      	add	r3, r2
 8010f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f40:	461a      	mov	r2, r3
 8010f42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010f46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	613b      	str	r3, [r7, #16]
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d3b7      	bcc.n	8010ec6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f56:	2300      	movs	r3, #0
 8010f58:	613b      	str	r3, [r7, #16]
 8010f5a:	e043      	b.n	8010fe4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f72:	d118      	bne.n	8010fa6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10a      	bne.n	8010f90 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	015a      	lsls	r2, r3, #5
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	4413      	add	r3, r2
 8010f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f86:	461a      	mov	r2, r3
 8010f88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f8c:	6013      	str	r3, [r2, #0]
 8010f8e:	e013      	b.n	8010fb8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	015a      	lsls	r2, r3, #5
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	4413      	add	r3, r2
 8010f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fa2:	6013      	str	r3, [r2, #0]
 8010fa4:	e008      	b.n	8010fb8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	4413      	add	r3, r2
 8010fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	015a      	lsls	r2, r3, #5
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	015a      	lsls	r2, r3, #5
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010fdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	613b      	str	r3, [r7, #16]
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe6:	693a      	ldr	r2, [r7, #16]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d3b7      	bcc.n	8010f5c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	68fa      	ldr	r2, [r7, #12]
 8010ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ffe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2200      	movs	r2, #0
 8011004:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801100c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	699b      	ldr	r3, [r3, #24]
 8011012:	f043 0210 	orr.w	r2, r3, #16
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	699a      	ldr	r2, [r3, #24]
 801101e:	4b10      	ldr	r3, [pc, #64]	; (8011060 <USB_DevInit+0x294>)
 8011020:	4313      	orrs	r3, r2
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	699b      	ldr	r3, [r3, #24]
 8011030:	f043 0208 	orr.w	r2, r3, #8
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801103a:	2b01      	cmp	r3, #1
 801103c:	d107      	bne.n	801104e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	699b      	ldr	r3, [r3, #24]
 8011042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011046:	f043 0304 	orr.w	r3, r3, #4
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801104e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3718      	adds	r7, #24
 8011054:	46bd      	mov	sp, r7
 8011056:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801105a:	b004      	add	sp, #16
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	803c3800 	.word	0x803c3800

08011064 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011064:	b480      	push	{r7}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801106e:	2300      	movs	r3, #0
 8011070:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	019b      	lsls	r3, r3, #6
 8011076:	f043 0220 	orr.w	r2, r3, #32
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3301      	adds	r3, #1
 8011082:	60fb      	str	r3, [r7, #12]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	4a09      	ldr	r2, [pc, #36]	; (80110ac <USB_FlushTxFifo+0x48>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d901      	bls.n	8011090 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801108c:	2303      	movs	r3, #3
 801108e:	e006      	b.n	801109e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	691b      	ldr	r3, [r3, #16]
 8011094:	f003 0320 	and.w	r3, r3, #32
 8011098:	2b20      	cmp	r3, #32
 801109a:	d0f0      	beq.n	801107e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3714      	adds	r7, #20
 80110a2:	46bd      	mov	sp, r7
 80110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a8:	4770      	bx	lr
 80110aa:	bf00      	nop
 80110ac:	00030d40 	.word	0x00030d40

080110b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80110b8:	2300      	movs	r3, #0
 80110ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2210      	movs	r2, #16
 80110c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	3301      	adds	r3, #1
 80110c6:	60fb      	str	r3, [r7, #12]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	4a09      	ldr	r2, [pc, #36]	; (80110f0 <USB_FlushRxFifo+0x40>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d901      	bls.n	80110d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80110d0:	2303      	movs	r3, #3
 80110d2:	e006      	b.n	80110e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	691b      	ldr	r3, [r3, #16]
 80110d8:	f003 0310 	and.w	r3, r3, #16
 80110dc:	2b10      	cmp	r3, #16
 80110de:	d0f0      	beq.n	80110c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3714      	adds	r7, #20
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	00030d40 	.word	0x00030d40

080110f4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b085      	sub	sp, #20
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	78fb      	ldrb	r3, [r7, #3]
 801110e:	68f9      	ldr	r1, [r7, #12]
 8011110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011114:	4313      	orrs	r3, r2
 8011116:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr

08011126 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011126:	b480      	push	{r7}
 8011128:	b087      	sub	sp, #28
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	f003 0306 	and.w	r3, r3, #6
 801113e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2b02      	cmp	r3, #2
 8011144:	d002      	beq.n	801114c <USB_GetDevSpeed+0x26>
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2b06      	cmp	r3, #6
 801114a:	d102      	bne.n	8011152 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801114c:	2302      	movs	r3, #2
 801114e:	75fb      	strb	r3, [r7, #23]
 8011150:	e001      	b.n	8011156 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011152:	230f      	movs	r3, #15
 8011154:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011156:	7dfb      	ldrb	r3, [r7, #23]
}
 8011158:	4618      	mov	r0, r3
 801115a:	371c      	adds	r7, #28
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011164:	b480      	push	{r7}
 8011166:	b085      	sub	sp, #20
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	785b      	ldrb	r3, [r3, #1]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d13a      	bne.n	80111f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011186:	69da      	ldr	r2, [r3, #28]
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	2101      	movs	r1, #1
 8011192:	fa01 f303 	lsl.w	r3, r1, r3
 8011196:	b29b      	uxth	r3, r3
 8011198:	68f9      	ldr	r1, [r7, #12]
 801119a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801119e:	4313      	orrs	r3, r2
 80111a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	015a      	lsls	r2, r3, #5
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	4413      	add	r3, r2
 80111aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d155      	bne.n	8011264 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	015a      	lsls	r2, r3, #5
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	4413      	add	r3, r2
 80111c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	78db      	ldrb	r3, [r3, #3]
 80111d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80111d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	059b      	lsls	r3, r3, #22
 80111da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80111dc:	4313      	orrs	r3, r2
 80111de:	68ba      	ldr	r2, [r7, #8]
 80111e0:	0151      	lsls	r1, r2, #5
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	440a      	add	r2, r1
 80111e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111f2:	6013      	str	r3, [r2, #0]
 80111f4:	e036      	b.n	8011264 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111fc:	69da      	ldr	r2, [r3, #28]
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	f003 030f 	and.w	r3, r3, #15
 8011206:	2101      	movs	r1, #1
 8011208:	fa01 f303 	lsl.w	r3, r1, r3
 801120c:	041b      	lsls	r3, r3, #16
 801120e:	68f9      	ldr	r1, [r7, #12]
 8011210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011214:	4313      	orrs	r3, r2
 8011216:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	015a      	lsls	r2, r3, #5
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	4413      	add	r3, r2
 8011220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801122a:	2b00      	cmp	r3, #0
 801122c:	d11a      	bne.n	8011264 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	015a      	lsls	r2, r3, #5
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	4413      	add	r3, r2
 8011236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	689b      	ldr	r3, [r3, #8]
 8011240:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	78db      	ldrb	r3, [r3, #3]
 8011248:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801124a:	430b      	orrs	r3, r1
 801124c:	4313      	orrs	r3, r2
 801124e:	68ba      	ldr	r2, [r7, #8]
 8011250:	0151      	lsls	r1, r2, #5
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	440a      	add	r2, r1
 8011256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801125e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011262:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3714      	adds	r7, #20
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr
	...

08011274 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	785b      	ldrb	r3, [r3, #1]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d161      	bne.n	8011354 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	015a      	lsls	r2, r3, #5
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	4413      	add	r3, r2
 8011298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112a6:	d11f      	bne.n	80112e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	015a      	lsls	r2, r3, #5
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	4413      	add	r3, r2
 80112b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	68ba      	ldr	r2, [r7, #8]
 80112b8:	0151      	lsls	r1, r2, #5
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	440a      	add	r2, r1
 80112be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80112c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	015a      	lsls	r2, r3, #5
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	4413      	add	r3, r2
 80112d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	0151      	lsls	r1, r2, #5
 80112da:	68fa      	ldr	r2, [r7, #12]
 80112dc:	440a      	add	r2, r1
 80112de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80112e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	f003 030f 	and.w	r3, r3, #15
 80112f8:	2101      	movs	r1, #1
 80112fa:	fa01 f303 	lsl.w	r3, r1, r3
 80112fe:	b29b      	uxth	r3, r3
 8011300:	43db      	mvns	r3, r3
 8011302:	68f9      	ldr	r1, [r7, #12]
 8011304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011308:	4013      	ands	r3, r2
 801130a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011312:	69da      	ldr	r2, [r3, #28]
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	f003 030f 	and.w	r3, r3, #15
 801131c:	2101      	movs	r1, #1
 801131e:	fa01 f303 	lsl.w	r3, r1, r3
 8011322:	b29b      	uxth	r3, r3
 8011324:	43db      	mvns	r3, r3
 8011326:	68f9      	ldr	r1, [r7, #12]
 8011328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801132c:	4013      	ands	r3, r2
 801132e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	015a      	lsls	r2, r3, #5
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	4413      	add	r3, r2
 8011338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	0159      	lsls	r1, r3, #5
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	440b      	add	r3, r1
 8011346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801134a:	4619      	mov	r1, r3
 801134c:	4b35      	ldr	r3, [pc, #212]	; (8011424 <USB_DeactivateEndpoint+0x1b0>)
 801134e:	4013      	ands	r3, r2
 8011350:	600b      	str	r3, [r1, #0]
 8011352:	e060      	b.n	8011416 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	015a      	lsls	r2, r3, #5
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	4413      	add	r3, r2
 801135c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801136a:	d11f      	bne.n	80113ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	015a      	lsls	r2, r3, #5
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	4413      	add	r3, r2
 8011374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	0151      	lsls	r1, r2, #5
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	440a      	add	r2, r1
 8011382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801138a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	015a      	lsls	r2, r3, #5
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	4413      	add	r3, r2
 8011394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68ba      	ldr	r2, [r7, #8]
 801139c:	0151      	lsls	r1, r2, #5
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	440a      	add	r2, r1
 80113a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80113aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	f003 030f 	and.w	r3, r3, #15
 80113bc:	2101      	movs	r1, #1
 80113be:	fa01 f303 	lsl.w	r3, r1, r3
 80113c2:	041b      	lsls	r3, r3, #16
 80113c4:	43db      	mvns	r3, r3
 80113c6:	68f9      	ldr	r1, [r7, #12]
 80113c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113cc:	4013      	ands	r3, r2
 80113ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113d6:	69da      	ldr	r2, [r3, #28]
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	f003 030f 	and.w	r3, r3, #15
 80113e0:	2101      	movs	r1, #1
 80113e2:	fa01 f303 	lsl.w	r3, r1, r3
 80113e6:	041b      	lsls	r3, r3, #16
 80113e8:	43db      	mvns	r3, r3
 80113ea:	68f9      	ldr	r1, [r7, #12]
 80113ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113f0:	4013      	ands	r3, r2
 80113f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	015a      	lsls	r2, r3, #5
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	0159      	lsls	r1, r3, #5
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	440b      	add	r3, r1
 801140a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801140e:	4619      	mov	r1, r3
 8011410:	4b05      	ldr	r3, [pc, #20]	; (8011428 <USB_DeactivateEndpoint+0x1b4>)
 8011412:	4013      	ands	r3, r2
 8011414:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3714      	adds	r7, #20
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr
 8011424:	ec337800 	.word	0xec337800
 8011428:	eff37800 	.word	0xeff37800

0801142c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b086      	sub	sp, #24
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	785b      	ldrb	r3, [r3, #1]
 8011444:	2b01      	cmp	r3, #1
 8011446:	f040 810a 	bne.w	801165e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	695b      	ldr	r3, [r3, #20]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d132      	bne.n	80114b8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	015a      	lsls	r2, r3, #5
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	4413      	add	r3, r2
 801145a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	693a      	ldr	r2, [r7, #16]
 8011462:	0151      	lsls	r1, r2, #5
 8011464:	697a      	ldr	r2, [r7, #20]
 8011466:	440a      	add	r2, r1
 8011468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801146c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	015a      	lsls	r2, r3, #5
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	4413      	add	r3, r2
 801147e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	693a      	ldr	r2, [r7, #16]
 8011486:	0151      	lsls	r1, r2, #5
 8011488:	697a      	ldr	r2, [r7, #20]
 801148a:	440a      	add	r2, r1
 801148c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	015a      	lsls	r2, r3, #5
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	4413      	add	r3, r2
 801149e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	693a      	ldr	r2, [r7, #16]
 80114a6:	0151      	lsls	r1, r2, #5
 80114a8:	697a      	ldr	r2, [r7, #20]
 80114aa:	440a      	add	r2, r1
 80114ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114b0:	0cdb      	lsrs	r3, r3, #19
 80114b2:	04db      	lsls	r3, r3, #19
 80114b4:	6113      	str	r3, [r2, #16]
 80114b6:	e074      	b.n	80115a2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	015a      	lsls	r2, r3, #5
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	4413      	add	r3, r2
 80114c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	693a      	ldr	r2, [r7, #16]
 80114c8:	0151      	lsls	r1, r2, #5
 80114ca:	697a      	ldr	r2, [r7, #20]
 80114cc:	440a      	add	r2, r1
 80114ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114d2:	0cdb      	lsrs	r3, r3, #19
 80114d4:	04db      	lsls	r3, r3, #19
 80114d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	015a      	lsls	r2, r3, #5
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	4413      	add	r3, r2
 80114e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	693a      	ldr	r2, [r7, #16]
 80114e8:	0151      	lsls	r1, r2, #5
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	440a      	add	r2, r1
 80114ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80114f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80114fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	015a      	lsls	r2, r3, #5
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	4413      	add	r3, r2
 8011504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011508:	691a      	ldr	r2, [r3, #16]
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	6959      	ldr	r1, [r3, #20]
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	689b      	ldr	r3, [r3, #8]
 8011512:	440b      	add	r3, r1
 8011514:	1e59      	subs	r1, r3, #1
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	fbb1 f3f3 	udiv	r3, r1, r3
 801151e:	04d9      	lsls	r1, r3, #19
 8011520:	4baf      	ldr	r3, [pc, #700]	; (80117e0 <USB_EPStartXfer+0x3b4>)
 8011522:	400b      	ands	r3, r1
 8011524:	6939      	ldr	r1, [r7, #16]
 8011526:	0148      	lsls	r0, r1, #5
 8011528:	6979      	ldr	r1, [r7, #20]
 801152a:	4401      	add	r1, r0
 801152c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011530:	4313      	orrs	r3, r2
 8011532:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	015a      	lsls	r2, r3, #5
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	4413      	add	r3, r2
 801153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011540:	691a      	ldr	r2, [r3, #16]
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	695b      	ldr	r3, [r3, #20]
 8011546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801154a:	6939      	ldr	r1, [r7, #16]
 801154c:	0148      	lsls	r0, r1, #5
 801154e:	6979      	ldr	r1, [r7, #20]
 8011550:	4401      	add	r1, r0
 8011552:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011556:	4313      	orrs	r3, r2
 8011558:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	78db      	ldrb	r3, [r3, #3]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d11f      	bne.n	80115a2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	015a      	lsls	r2, r3, #5
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	4413      	add	r3, r2
 801156a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	693a      	ldr	r2, [r7, #16]
 8011572:	0151      	lsls	r1, r2, #5
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	440a      	add	r2, r1
 8011578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801157c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011580:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	015a      	lsls	r2, r3, #5
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	4413      	add	r3, r2
 801158a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801158e:	691b      	ldr	r3, [r3, #16]
 8011590:	693a      	ldr	r2, [r7, #16]
 8011592:	0151      	lsls	r1, r2, #5
 8011594:	697a      	ldr	r2, [r7, #20]
 8011596:	440a      	add	r2, r1
 8011598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801159c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80115a0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	015a      	lsls	r2, r3, #5
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	4413      	add	r3, r2
 80115aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	693a      	ldr	r2, [r7, #16]
 80115b2:	0151      	lsls	r1, r2, #5
 80115b4:	697a      	ldr	r2, [r7, #20]
 80115b6:	440a      	add	r2, r1
 80115b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80115c0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	78db      	ldrb	r3, [r3, #3]
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d015      	beq.n	80115f6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	695b      	ldr	r3, [r3, #20]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f000 8100 	beq.w	80117d4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	f003 030f 	and.w	r3, r3, #15
 80115e4:	2101      	movs	r1, #1
 80115e6:	fa01 f303 	lsl.w	r3, r1, r3
 80115ea:	6979      	ldr	r1, [r7, #20]
 80115ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115f0:	4313      	orrs	r3, r2
 80115f2:	634b      	str	r3, [r1, #52]	; 0x34
 80115f4:	e0ee      	b.n	80117d4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115fc:	689b      	ldr	r3, [r3, #8]
 80115fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011602:	2b00      	cmp	r3, #0
 8011604:	d110      	bne.n	8011628 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	015a      	lsls	r2, r3, #5
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	4413      	add	r3, r2
 801160e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	693a      	ldr	r2, [r7, #16]
 8011616:	0151      	lsls	r1, r2, #5
 8011618:	697a      	ldr	r2, [r7, #20]
 801161a:	440a      	add	r2, r1
 801161c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011624:	6013      	str	r3, [r2, #0]
 8011626:	e00f      	b.n	8011648 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	015a      	lsls	r2, r3, #5
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	4413      	add	r3, r2
 8011630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	693a      	ldr	r2, [r7, #16]
 8011638:	0151      	lsls	r1, r2, #5
 801163a:	697a      	ldr	r2, [r7, #20]
 801163c:	440a      	add	r2, r1
 801163e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011646:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	68d9      	ldr	r1, [r3, #12]
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	781a      	ldrb	r2, [r3, #0]
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	695b      	ldr	r3, [r3, #20]
 8011654:	b29b      	uxth	r3, r3
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 f9e2 	bl	8011a20 <USB_WritePacket>
 801165c:	e0ba      	b.n	80117d4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	015a      	lsls	r2, r3, #5
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	4413      	add	r3, r2
 8011666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	693a      	ldr	r2, [r7, #16]
 801166e:	0151      	lsls	r1, r2, #5
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	440a      	add	r2, r1
 8011674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011678:	0cdb      	lsrs	r3, r3, #19
 801167a:	04db      	lsls	r3, r3, #19
 801167c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	015a      	lsls	r2, r3, #5
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	4413      	add	r3, r2
 8011686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	0151      	lsls	r1, r2, #5
 8011690:	697a      	ldr	r2, [r7, #20]
 8011692:	440a      	add	r2, r1
 8011694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801169c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80116a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	695b      	ldr	r3, [r3, #20]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d123      	bne.n	80116f2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	015a      	lsls	r2, r3, #5
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	4413      	add	r3, r2
 80116b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116b6:	691a      	ldr	r2, [r3, #16]
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116c0:	6939      	ldr	r1, [r7, #16]
 80116c2:	0148      	lsls	r0, r1, #5
 80116c4:	6979      	ldr	r1, [r7, #20]
 80116c6:	4401      	add	r1, r0
 80116c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80116cc:	4313      	orrs	r3, r2
 80116ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	015a      	lsls	r2, r3, #5
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	4413      	add	r3, r2
 80116d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	693a      	ldr	r2, [r7, #16]
 80116e0:	0151      	lsls	r1, r2, #5
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	440a      	add	r2, r1
 80116e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116ee:	6113      	str	r3, [r2, #16]
 80116f0:	e033      	b.n	801175a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	695a      	ldr	r2, [r3, #20]
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	689b      	ldr	r3, [r3, #8]
 80116fa:	4413      	add	r3, r2
 80116fc:	1e5a      	subs	r2, r3, #1
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	689b      	ldr	r3, [r3, #8]
 8011702:	fbb2 f3f3 	udiv	r3, r2, r3
 8011706:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	015a      	lsls	r2, r3, #5
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	4413      	add	r3, r2
 8011710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011714:	691a      	ldr	r2, [r3, #16]
 8011716:	89fb      	ldrh	r3, [r7, #14]
 8011718:	04d9      	lsls	r1, r3, #19
 801171a:	4b31      	ldr	r3, [pc, #196]	; (80117e0 <USB_EPStartXfer+0x3b4>)
 801171c:	400b      	ands	r3, r1
 801171e:	6939      	ldr	r1, [r7, #16]
 8011720:	0148      	lsls	r0, r1, #5
 8011722:	6979      	ldr	r1, [r7, #20]
 8011724:	4401      	add	r1, r0
 8011726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801172a:	4313      	orrs	r3, r2
 801172c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	015a      	lsls	r2, r3, #5
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	4413      	add	r3, r2
 8011736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801173a:	691a      	ldr	r2, [r3, #16]
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	89f9      	ldrh	r1, [r7, #14]
 8011742:	fb01 f303 	mul.w	r3, r1, r3
 8011746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801174a:	6939      	ldr	r1, [r7, #16]
 801174c:	0148      	lsls	r0, r1, #5
 801174e:	6979      	ldr	r1, [r7, #20]
 8011750:	4401      	add	r1, r0
 8011752:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011756:	4313      	orrs	r3, r2
 8011758:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	78db      	ldrb	r3, [r3, #3]
 801175e:	2b01      	cmp	r3, #1
 8011760:	d128      	bne.n	80117b4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011768:	689b      	ldr	r3, [r3, #8]
 801176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801176e:	2b00      	cmp	r3, #0
 8011770:	d110      	bne.n	8011794 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	015a      	lsls	r2, r3, #5
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	4413      	add	r3, r2
 801177a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	0151      	lsls	r1, r2, #5
 8011784:	697a      	ldr	r2, [r7, #20]
 8011786:	440a      	add	r2, r1
 8011788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801178c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011790:	6013      	str	r3, [r2, #0]
 8011792:	e00f      	b.n	80117b4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	015a      	lsls	r2, r3, #5
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	4413      	add	r3, r2
 801179c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	693a      	ldr	r2, [r7, #16]
 80117a4:	0151      	lsls	r1, r2, #5
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	440a      	add	r2, r1
 80117aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	015a      	lsls	r2, r3, #5
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	4413      	add	r3, r2
 80117bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	693a      	ldr	r2, [r7, #16]
 80117c4:	0151      	lsls	r1, r2, #5
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	440a      	add	r2, r1
 80117ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80117d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	1ff80000 	.word	0x1ff80000

080117e4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	785b      	ldrb	r3, [r3, #1]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	f040 80ab 	bne.w	8011958 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d132      	bne.n	8011870 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	015a      	lsls	r2, r3, #5
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	4413      	add	r3, r2
 8011812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011816:	691b      	ldr	r3, [r3, #16]
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	0151      	lsls	r1, r2, #5
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	440a      	add	r2, r1
 8011820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801182c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	015a      	lsls	r2, r3, #5
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	4413      	add	r3, r2
 8011836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801183a:	691b      	ldr	r3, [r3, #16]
 801183c:	68ba      	ldr	r2, [r7, #8]
 801183e:	0151      	lsls	r1, r2, #5
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	440a      	add	r2, r1
 8011844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801184c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	015a      	lsls	r2, r3, #5
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	4413      	add	r3, r2
 8011856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	0151      	lsls	r1, r2, #5
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	440a      	add	r2, r1
 8011864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011868:	0cdb      	lsrs	r3, r3, #19
 801186a:	04db      	lsls	r3, r3, #19
 801186c:	6113      	str	r3, [r2, #16]
 801186e:	e04e      	b.n	801190e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	015a      	lsls	r2, r3, #5
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	4413      	add	r3, r2
 8011878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	0151      	lsls	r1, r2, #5
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	440a      	add	r2, r1
 8011886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801188a:	0cdb      	lsrs	r3, r3, #19
 801188c:	04db      	lsls	r3, r3, #19
 801188e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	015a      	lsls	r2, r3, #5
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	4413      	add	r3, r2
 8011898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	68ba      	ldr	r2, [r7, #8]
 80118a0:	0151      	lsls	r1, r2, #5
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	440a      	add	r2, r1
 80118a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80118ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80118b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	695a      	ldr	r2, [r3, #20]
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d903      	bls.n	80118c8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	689a      	ldr	r2, [r3, #8]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d4:	691b      	ldr	r3, [r3, #16]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	0151      	lsls	r1, r2, #5
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	440a      	add	r2, r1
 80118de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80118e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118f4:	691a      	ldr	r2, [r3, #16]
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118fe:	68b9      	ldr	r1, [r7, #8]
 8011900:	0148      	lsls	r0, r1, #5
 8011902:	68f9      	ldr	r1, [r7, #12]
 8011904:	4401      	add	r1, r0
 8011906:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801190a:	4313      	orrs	r3, r2
 801190c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	015a      	lsls	r2, r3, #5
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	4413      	add	r3, r2
 8011916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68ba      	ldr	r2, [r7, #8]
 801191e:	0151      	lsls	r1, r2, #5
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	440a      	add	r2, r1
 8011924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801192c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d06d      	beq.n	8011a12 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	f003 030f 	and.w	r3, r3, #15
 8011946:	2101      	movs	r1, #1
 8011948:	fa01 f303 	lsl.w	r3, r1, r3
 801194c:	68f9      	ldr	r1, [r7, #12]
 801194e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011952:	4313      	orrs	r3, r2
 8011954:	634b      	str	r3, [r1, #52]	; 0x34
 8011956:	e05c      	b.n	8011a12 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	015a      	lsls	r2, r3, #5
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	4413      	add	r3, r2
 8011960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	68ba      	ldr	r2, [r7, #8]
 8011968:	0151      	lsls	r1, r2, #5
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	440a      	add	r2, r1
 801196e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011972:	0cdb      	lsrs	r3, r3, #19
 8011974:	04db      	lsls	r3, r3, #19
 8011976:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	015a      	lsls	r2, r3, #5
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	4413      	add	r3, r2
 8011980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	68ba      	ldr	r2, [r7, #8]
 8011988:	0151      	lsls	r1, r2, #5
 801198a:	68fa      	ldr	r2, [r7, #12]
 801198c:	440a      	add	r2, r1
 801198e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011992:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011996:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801199a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	695b      	ldr	r3, [r3, #20]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d003      	beq.n	80119ac <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	689a      	ldr	r2, [r3, #8]
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	015a      	lsls	r2, r3, #5
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	4413      	add	r3, r2
 80119b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119b8:	691b      	ldr	r3, [r3, #16]
 80119ba:	68ba      	ldr	r2, [r7, #8]
 80119bc:	0151      	lsls	r1, r2, #5
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	440a      	add	r2, r1
 80119c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	015a      	lsls	r2, r3, #5
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	4413      	add	r3, r2
 80119d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119d8:	691a      	ldr	r2, [r3, #16]
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119e2:	68b9      	ldr	r1, [r7, #8]
 80119e4:	0148      	lsls	r0, r1, #5
 80119e6:	68f9      	ldr	r1, [r7, #12]
 80119e8:	4401      	add	r1, r0
 80119ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80119ee:	4313      	orrs	r3, r2
 80119f0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	015a      	lsls	r2, r3, #5
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	4413      	add	r3, r2
 80119fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	0151      	lsls	r1, r2, #5
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	440a      	add	r2, r1
 8011a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011a10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b089      	sub	sp, #36	; 0x24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	4611      	mov	r1, r2
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	460b      	mov	r3, r1
 8011a30:	71fb      	strb	r3, [r7, #7]
 8011a32:	4613      	mov	r3, r2
 8011a34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011a3e:	88bb      	ldrh	r3, [r7, #4]
 8011a40:	3303      	adds	r3, #3
 8011a42:	089b      	lsrs	r3, r3, #2
 8011a44:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011a46:	2300      	movs	r3, #0
 8011a48:	61bb      	str	r3, [r7, #24]
 8011a4a:	e00f      	b.n	8011a6c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011a4c:	79fb      	ldrb	r3, [r7, #7]
 8011a4e:	031a      	lsls	r2, r3, #12
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	4413      	add	r3, r2
 8011a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a58:	461a      	mov	r2, r3
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	3304      	adds	r3, #4
 8011a64:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	3301      	adds	r3, #1
 8011a6a:	61bb      	str	r3, [r7, #24]
 8011a6c:	69ba      	ldr	r2, [r7, #24]
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d3eb      	bcc.n	8011a4c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3724      	adds	r7, #36	; 0x24
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011a82:	b480      	push	{r7}
 8011a84:	b089      	sub	sp, #36	; 0x24
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011a98:	88fb      	ldrh	r3, [r7, #6]
 8011a9a:	3303      	adds	r3, #3
 8011a9c:	089b      	lsrs	r3, r3, #2
 8011a9e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	61bb      	str	r3, [r7, #24]
 8011aa4:	e00b      	b.n	8011abe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	601a      	str	r2, [r3, #0]
    pDest++;
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	3301      	adds	r3, #1
 8011abc:	61bb      	str	r3, [r7, #24]
 8011abe:	69ba      	ldr	r2, [r7, #24]
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d3ef      	bcc.n	8011aa6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011ac6:	69fb      	ldr	r3, [r7, #28]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3724      	adds	r7, #36	; 0x24
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b085      	sub	sp, #20
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	785b      	ldrb	r3, [r3, #1]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d12c      	bne.n	8011b4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	015a      	lsls	r2, r3, #5
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	4413      	add	r3, r2
 8011af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	db12      	blt.n	8011b28 <USB_EPSetStall+0x54>
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00f      	beq.n	8011b28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	015a      	lsls	r2, r3, #5
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	4413      	add	r3, r2
 8011b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	68ba      	ldr	r2, [r7, #8]
 8011b18:	0151      	lsls	r1, r2, #5
 8011b1a:	68fa      	ldr	r2, [r7, #12]
 8011b1c:	440a      	add	r2, r1
 8011b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011b26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	015a      	lsls	r2, r3, #5
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	4413      	add	r3, r2
 8011b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	68ba      	ldr	r2, [r7, #8]
 8011b38:	0151      	lsls	r1, r2, #5
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	440a      	add	r2, r1
 8011b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b46:	6013      	str	r3, [r2, #0]
 8011b48:	e02b      	b.n	8011ba2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	015a      	lsls	r2, r3, #5
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	4413      	add	r3, r2
 8011b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	db12      	blt.n	8011b82 <USB_EPSetStall+0xae>
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00f      	beq.n	8011b82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	015a      	lsls	r2, r3, #5
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	4413      	add	r3, r2
 8011b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	0151      	lsls	r1, r2, #5
 8011b74:	68fa      	ldr	r2, [r7, #12]
 8011b76:	440a      	add	r2, r1
 8011b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011b80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	015a      	lsls	r2, r3, #5
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	4413      	add	r3, r2
 8011b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	0151      	lsls	r1, r2, #5
 8011b94:	68fa      	ldr	r2, [r7, #12]
 8011b96:	440a      	add	r2, r1
 8011b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011ba0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3714      	adds	r7, #20
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr

08011bb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b085      	sub	sp, #20
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	785b      	ldrb	r3, [r3, #1]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d128      	bne.n	8011c1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	015a      	lsls	r2, r3, #5
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	0151      	lsls	r1, r2, #5
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	440a      	add	r2, r1
 8011be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011bea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	78db      	ldrb	r3, [r3, #3]
 8011bf0:	2b03      	cmp	r3, #3
 8011bf2:	d003      	beq.n	8011bfc <USB_EPClearStall+0x4c>
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	78db      	ldrb	r3, [r3, #3]
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d138      	bne.n	8011c6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	015a      	lsls	r2, r3, #5
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4413      	add	r3, r2
 8011c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	68ba      	ldr	r2, [r7, #8]
 8011c0c:	0151      	lsls	r1, r2, #5
 8011c0e:	68fa      	ldr	r2, [r7, #12]
 8011c10:	440a      	add	r2, r1
 8011c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c1a:	6013      	str	r3, [r2, #0]
 8011c1c:	e027      	b.n	8011c6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	015a      	lsls	r2, r3, #5
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	4413      	add	r3, r2
 8011c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	68ba      	ldr	r2, [r7, #8]
 8011c2e:	0151      	lsls	r1, r2, #5
 8011c30:	68fa      	ldr	r2, [r7, #12]
 8011c32:	440a      	add	r2, r1
 8011c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	78db      	ldrb	r3, [r3, #3]
 8011c42:	2b03      	cmp	r3, #3
 8011c44:	d003      	beq.n	8011c4e <USB_EPClearStall+0x9e>
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	78db      	ldrb	r3, [r3, #3]
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d10f      	bne.n	8011c6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	015a      	lsls	r2, r3, #5
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	4413      	add	r3, r2
 8011c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	0151      	lsls	r1, r2, #5
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	440a      	add	r2, r1
 8011c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011c6e:	2300      	movs	r3, #0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr

08011c7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b085      	sub	sp, #20
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011c9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011c9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	78fb      	ldrb	r3, [r7, #3]
 8011caa:	011b      	lsls	r3, r3, #4
 8011cac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011cb0:	68f9      	ldr	r1, [r7, #12]
 8011cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3714      	adds	r7, #20
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ce2:	f023 0303 	bic.w	r3, r3, #3
 8011ce6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011cf6:	f023 0302 	bic.w	r3, r3, #2
 8011cfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3714      	adds	r7, #20
 8011d02:	46bd      	mov	sp, r7
 8011d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d08:	4770      	bx	lr

08011d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011d0a:	b480      	push	{r7}
 8011d0c:	b085      	sub	sp, #20
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d24:	f023 0303 	bic.w	r3, r3, #3
 8011d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d38:	f043 0302 	orr.w	r3, r3, #2
 8011d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d3e:	2300      	movs	r3, #0
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3714      	adds	r7, #20
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr

08011d4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b085      	sub	sp, #20
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	695b      	ldr	r3, [r3, #20]
 8011d58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	699b      	ldr	r3, [r3, #24]
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	4013      	ands	r3, r2
 8011d62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011d64:	68fb      	ldr	r3, [r7, #12]
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3714      	adds	r7, #20
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr

08011d72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d72:	b480      	push	{r7}
 8011d74:	b085      	sub	sp, #20
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d84:	699b      	ldr	r3, [r3, #24]
 8011d86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d8e:	69db      	ldr	r3, [r3, #28]
 8011d90:	68ba      	ldr	r2, [r7, #8]
 8011d92:	4013      	ands	r3, r2
 8011d94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	0c1b      	lsrs	r3, r3, #16
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3714      	adds	r7, #20
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr

08011da6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011da6:	b480      	push	{r7}
 8011da8:	b085      	sub	sp, #20
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011db8:	699b      	ldr	r3, [r3, #24]
 8011dba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dc2:	69db      	ldr	r3, [r3, #28]
 8011dc4:	68ba      	ldr	r2, [r7, #8]
 8011dc6:	4013      	ands	r3, r2
 8011dc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	b29b      	uxth	r3, r3
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3714      	adds	r7, #20
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd8:	4770      	bx	lr

08011dda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011dda:	b480      	push	{r7}
 8011ddc:	b085      	sub	sp, #20
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	6078      	str	r0, [r7, #4]
 8011de2:	460b      	mov	r3, r1
 8011de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011dea:	78fb      	ldrb	r3, [r7, #3]
 8011dec:	015a      	lsls	r2, r3, #5
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	4413      	add	r3, r2
 8011df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e00:	695b      	ldr	r3, [r3, #20]
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	4013      	ands	r3, r2
 8011e06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e08:	68bb      	ldr	r3, [r7, #8]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3714      	adds	r7, #20
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr

08011e16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e16:	b480      	push	{r7}
 8011e18:	b087      	sub	sp, #28
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
 8011e1e:	460b      	mov	r3, r1
 8011e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e2c:	691b      	ldr	r3, [r3, #16]
 8011e2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011e3a:	78fb      	ldrb	r3, [r7, #3]
 8011e3c:	f003 030f 	and.w	r3, r3, #15
 8011e40:	68fa      	ldr	r2, [r7, #12]
 8011e42:	fa22 f303 	lsr.w	r3, r2, r3
 8011e46:	01db      	lsls	r3, r3, #7
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	693a      	ldr	r2, [r7, #16]
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	015a      	lsls	r2, r3, #5
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	4413      	add	r3, r2
 8011e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	693a      	ldr	r2, [r7, #16]
 8011e60:	4013      	ands	r3, r2
 8011e62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011e64:	68bb      	ldr	r3, [r7, #8]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	371c      	adds	r7, #28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011e72:	b480      	push	{r7}
 8011e74:	b083      	sub	sp, #12
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	695b      	ldr	r3, [r3, #20]
 8011e7e:	f003 0301 	and.w	r3, r3, #1
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	370c      	adds	r7, #12
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011e8e:	b480      	push	{r7}
 8011e90:	b085      	sub	sp, #20
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	68fa      	ldr	r2, [r7, #12]
 8011ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011eac:	f023 0307 	bic.w	r3, r3, #7
 8011eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	333c      	adds	r3, #60	; 0x3c
 8011ee6:	3304      	adds	r3, #4
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	4a1c      	ldr	r2, [pc, #112]	; (8011f60 <USB_EP0_OutStart+0x8c>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d90a      	bls.n	8011f0a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f04:	d101      	bne.n	8011f0a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8011f06:	2300      	movs	r3, #0
 8011f08:	e024      	b.n	8011f54 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f10:	461a      	mov	r2, r3
 8011f12:	2300      	movs	r3, #0
 8011f14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	68fa      	ldr	r2, [r7, #12]
 8011f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f38:	f043 0318 	orr.w	r3, r3, #24
 8011f3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011f50:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8011f52:	2300      	movs	r3, #0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	4f54300a 	.word	0x4f54300a

08011f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	3301      	adds	r3, #1
 8011f74:	60fb      	str	r3, [r7, #12]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	4a13      	ldr	r2, [pc, #76]	; (8011fc8 <USB_CoreReset+0x64>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d901      	bls.n	8011f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	e01b      	b.n	8011fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	daf2      	bge.n	8011f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	691b      	ldr	r3, [r3, #16]
 8011f92:	f043 0201 	orr.w	r2, r3, #1
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	60fb      	str	r3, [r7, #12]
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	4a09      	ldr	r2, [pc, #36]	; (8011fc8 <USB_CoreReset+0x64>)
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d901      	bls.n	8011fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011fa8:	2303      	movs	r3, #3
 8011faa:	e006      	b.n	8011fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	691b      	ldr	r3, [r3, #16]
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	d0f0      	beq.n	8011f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8011fb8:	2300      	movs	r3, #0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3714      	adds	r7, #20
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	00030d40 	.word	0x00030d40

08011fcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011fd0:	4904      	ldr	r1, [pc, #16]	; (8011fe4 <MX_FATFS_Init+0x18>)
 8011fd2:	4805      	ldr	r0, [pc, #20]	; (8011fe8 <MX_FATFS_Init+0x1c>)
 8011fd4:	f002 fdc8 	bl	8014b68 <FATFS_LinkDriver>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	461a      	mov	r2, r3
 8011fdc:	4b03      	ldr	r3, [pc, #12]	; (8011fec <MX_FATFS_Init+0x20>)
 8011fde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011fe0:	bf00      	nop
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20008730 	.word	0x20008730
 8011fe8:	20000314 	.word	0x20000314
 8011fec:	2000872c 	.word	0x2000872c

08011ff0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011ff4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	4603      	mov	r3, r0
 8012008:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat &= ~STA_NOINIT;
 801200a:	4b08      	ldr	r3, [pc, #32]	; (801202c <USER_initialize+0x2c>)
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	b2db      	uxtb	r3, r3
 8012010:	f023 0301 	bic.w	r3, r3, #1
 8012014:	b2da      	uxtb	r2, r3
 8012016:	4b05      	ldr	r3, [pc, #20]	; (801202c <USER_initialize+0x2c>)
 8012018:	701a      	strb	r2, [r3, #0]
    return Stat;
 801201a:	4b04      	ldr	r3, [pc, #16]	; (801202c <USER_initialize+0x2c>)
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8012020:	4618      	mov	r0, r3
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr
 801202c:	20000311 	.word	0x20000311

08012030 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	4603      	mov	r3, r0
 8012038:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(pdrv) return STA_NOINIT;
 801203a:	79fb      	ldrb	r3, [r7, #7]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d001      	beq.n	8012044 <USER_status+0x14>
 8012040:	2301      	movs	r3, #1
 8012042:	e002      	b.n	801204a <USER_status+0x1a>
    return Stat;
 8012044:	4b04      	ldr	r3, [pc, #16]	; (8012058 <USER_status+0x28>)
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 801204a:	4618      	mov	r0, r3
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	20000311 	.word	0x20000311

0801205c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b086      	sub	sp, #24
 8012060:	af00      	add	r7, sp, #0
 8012062:	60b9      	str	r1, [r7, #8]
 8012064:	607a      	str	r2, [r7, #4]
 8012066:	603b      	str	r3, [r7, #0]
 8012068:	4603      	mov	r3, r0
 801206a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		uint8_t block_cnt = 0;
 801206c:	2300      	movs	r3, #0
 801206e:	75fb      	strb	r3, [r7, #23]
		for(block_cnt=0;block_cnt<count;block_cnt++) W25_ReadBuf(&buff[block_cnt*512], sector+block_cnt);
 8012070:	2300      	movs	r3, #0
 8012072:	75fb      	strb	r3, [r7, #23]
 8012074:	e010      	b.n	8012098 <USER_read+0x3c>
 8012076:	7dfb      	ldrb	r3, [r7, #23]
 8012078:	025b      	lsls	r3, r3, #9
 801207a:	461a      	mov	r2, r3
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	1898      	adds	r0, r3, r2
 8012080:	7dfb      	ldrb	r3, [r7, #23]
 8012082:	b29a      	uxth	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	b29b      	uxth	r3, r3
 8012088:	4413      	add	r3, r2
 801208a:	b29b      	uxth	r3, r3
 801208c:	4619      	mov	r1, r3
 801208e:	f7f2 fb69 	bl	8004764 <W25_ReadBuf>
 8012092:	7dfb      	ldrb	r3, [r7, #23]
 8012094:	3301      	adds	r3, #1
 8012096:	75fb      	strb	r3, [r7, #23]
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	683a      	ldr	r2, [r7, #0]
 801209c:	429a      	cmp	r2, r3
 801209e:	d8ea      	bhi.n	8012076 <USER_read+0x1a>
		return RES_OK;
 80120a0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3718      	adds	r7, #24
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}

080120aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b086      	sub	sp, #24
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	603b      	str	r3, [r7, #0]
 80120b6:	4603      	mov	r3, r0
 80120b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t block_cnt = 0;
 80120ba:	2300      	movs	r3, #0
 80120bc:	75fb      	strb	r3, [r7, #23]
	for(block_cnt=0;block_cnt<count;block_cnt++) W25_WriteBuf(&buff[block_cnt*512], sector+block_cnt);
 80120be:	2300      	movs	r3, #0
 80120c0:	75fb      	strb	r3, [r7, #23]
 80120c2:	e010      	b.n	80120e6 <USER_write+0x3c>
 80120c4:	7dfb      	ldrb	r3, [r7, #23]
 80120c6:	025b      	lsls	r3, r3, #9
 80120c8:	461a      	mov	r2, r3
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	1898      	adds	r0, r3, r2
 80120ce:	7dfb      	ldrb	r3, [r7, #23]
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	4413      	add	r3, r2
 80120d8:	b29b      	uxth	r3, r3
 80120da:	4619      	mov	r1, r3
 80120dc:	f7f2 fbb2 	bl	8004844 <W25_WriteBuf>
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	3301      	adds	r3, #1
 80120e4:	75fb      	strb	r3, [r7, #23]
 80120e6:	7dfb      	ldrb	r3, [r7, #23]
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d8ea      	bhi.n	80120c4 <USER_write+0x1a>

	return RES_OK;
 80120ee:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	4603      	mov	r3, r0
 8012100:	603a      	str	r2, [r7, #0]
 8012102:	71fb      	strb	r3, [r7, #7]
 8012104:	460b      	mov	r3, r1
 8012106:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 8012108:	2300      	movs	r3, #0
 801210a:	73fb      	strb	r3, [r7, #15]
	    if(pdrv) return RES_PARERR;
 801210c:	79fb      	ldrb	r3, [r7, #7]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d001      	beq.n	8012116 <USER_ioctl+0x1e>
 8012112:	2304      	movs	r3, #4
 8012114:	e02b      	b.n	801216e <USER_ioctl+0x76>
	    if(Stat&STA_NOINIT) return RES_NOTRDY;
 8012116:	4b19      	ldr	r3, [pc, #100]	; (801217c <USER_ioctl+0x84>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	b2db      	uxtb	r3, r3
 801211c:	f003 0301 	and.w	r3, r3, #1
 8012120:	2b00      	cmp	r3, #0
 8012122:	d001      	beq.n	8012128 <USER_ioctl+0x30>
 8012124:	2303      	movs	r3, #3
 8012126:	e022      	b.n	801216e <USER_ioctl+0x76>
	    switch(cmd)
 8012128:	79bb      	ldrb	r3, [r7, #6]
 801212a:	2b03      	cmp	r3, #3
 801212c:	d81b      	bhi.n	8012166 <USER_ioctl+0x6e>
 801212e:	a201      	add	r2, pc, #4	; (adr r2, 8012134 <USER_ioctl+0x3c>)
 8012130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012134:	08012161 	.word	0x08012161
 8012138:	08012151 	.word	0x08012151
 801213c:	08012145 	.word	0x08012145
 8012140:	08012159 	.word	0x08012159
	    {
			case GET_SECTOR_SIZE:
				*(WORD*)buff=50; // Размер сектора
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	2232      	movs	r2, #50	; 0x32
 8012148:	801a      	strh	r2, [r3, #0]
				res=RES_OK;
 801214a:	2300      	movs	r3, #0
 801214c:	73fb      	strb	r3, [r7, #15]
				break;
 801214e:	e00d      	b.n	801216c <USER_ioctl+0x74>
			case GET_SECTOR_COUNT: *(WORD*)buff=50; break;
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	2232      	movs	r2, #50	; 0x32
 8012154:	801a      	strh	r2, [r3, #0]
 8012156:	e009      	b.n	801216c <USER_ioctl+0x74>
			case GET_BLOCK_SIZE: *(WORD*)buff=50; break;
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2232      	movs	r2, #50	; 0x32
 801215c:	801a      	strh	r2, [r3, #0]
 801215e:	e005      	b.n	801216c <USER_ioctl+0x74>
			case CTRL_SYNC: res=RES_OK; break;
 8012160:	2300      	movs	r3, #0
 8012162:	73fb      	strb	r3, [r7, #15]
 8012164:	e002      	b.n	801216c <USER_ioctl+0x74>
			default: res = RES_PARERR; break;
 8012166:	2304      	movs	r3, #4
 8012168:	73fb      	strb	r3, [r7, #15]
 801216a:	bf00      	nop
	    }

	    return res;
 801216c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801216e:	4618      	mov	r0, r3
 8012170:	3714      	adds	r7, #20
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop
 801217c:	20000311 	.word	0x20000311

08012180 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801218a:	79fb      	ldrb	r3, [r7, #7]
 801218c:	4a08      	ldr	r2, [pc, #32]	; (80121b0 <disk_status+0x30>)
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	4413      	add	r3, r2
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	79fa      	ldrb	r2, [r7, #7]
 8012198:	4905      	ldr	r1, [pc, #20]	; (80121b0 <disk_status+0x30>)
 801219a:	440a      	add	r2, r1
 801219c:	7a12      	ldrb	r2, [r2, #8]
 801219e:	4610      	mov	r0, r2
 80121a0:	4798      	blx	r3
 80121a2:	4603      	mov	r3, r0
 80121a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80121a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	20000970 	.word	0x20000970

080121b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b084      	sub	sp, #16
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	4603      	mov	r3, r0
 80121bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80121be:	2300      	movs	r3, #0
 80121c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80121c2:	79fb      	ldrb	r3, [r7, #7]
 80121c4:	4a0d      	ldr	r2, [pc, #52]	; (80121fc <disk_initialize+0x48>)
 80121c6:	5cd3      	ldrb	r3, [r2, r3]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d111      	bne.n	80121f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80121cc:	79fb      	ldrb	r3, [r7, #7]
 80121ce:	4a0b      	ldr	r2, [pc, #44]	; (80121fc <disk_initialize+0x48>)
 80121d0:	2101      	movs	r1, #1
 80121d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80121d4:	79fb      	ldrb	r3, [r7, #7]
 80121d6:	4a09      	ldr	r2, [pc, #36]	; (80121fc <disk_initialize+0x48>)
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	4413      	add	r3, r2
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	79fa      	ldrb	r2, [r7, #7]
 80121e2:	4906      	ldr	r1, [pc, #24]	; (80121fc <disk_initialize+0x48>)
 80121e4:	440a      	add	r2, r1
 80121e6:	7a12      	ldrb	r2, [r2, #8]
 80121e8:	4610      	mov	r0, r2
 80121ea:	4798      	blx	r3
 80121ec:	4603      	mov	r3, r0
 80121ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80121f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3710      	adds	r7, #16
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	20000970 	.word	0x20000970

08012200 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012200:	b590      	push	{r4, r7, lr}
 8012202:	b087      	sub	sp, #28
 8012204:	af00      	add	r7, sp, #0
 8012206:	60b9      	str	r1, [r7, #8]
 8012208:	607a      	str	r2, [r7, #4]
 801220a:	603b      	str	r3, [r7, #0]
 801220c:	4603      	mov	r3, r0
 801220e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012210:	7bfb      	ldrb	r3, [r7, #15]
 8012212:	4a0a      	ldr	r2, [pc, #40]	; (801223c <disk_read+0x3c>)
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	4413      	add	r3, r2
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	689c      	ldr	r4, [r3, #8]
 801221c:	7bfb      	ldrb	r3, [r7, #15]
 801221e:	4a07      	ldr	r2, [pc, #28]	; (801223c <disk_read+0x3c>)
 8012220:	4413      	add	r3, r2
 8012222:	7a18      	ldrb	r0, [r3, #8]
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	68b9      	ldr	r1, [r7, #8]
 801222a:	47a0      	blx	r4
 801222c:	4603      	mov	r3, r0
 801222e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012230:	7dfb      	ldrb	r3, [r7, #23]
}
 8012232:	4618      	mov	r0, r3
 8012234:	371c      	adds	r7, #28
 8012236:	46bd      	mov	sp, r7
 8012238:	bd90      	pop	{r4, r7, pc}
 801223a:	bf00      	nop
 801223c:	20000970 	.word	0x20000970

08012240 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012240:	b590      	push	{r4, r7, lr}
 8012242:	b087      	sub	sp, #28
 8012244:	af00      	add	r7, sp, #0
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	607a      	str	r2, [r7, #4]
 801224a:	603b      	str	r3, [r7, #0]
 801224c:	4603      	mov	r3, r0
 801224e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	4a0a      	ldr	r2, [pc, #40]	; (801227c <disk_write+0x3c>)
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	4413      	add	r3, r2
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	68dc      	ldr	r4, [r3, #12]
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	4a07      	ldr	r2, [pc, #28]	; (801227c <disk_write+0x3c>)
 8012260:	4413      	add	r3, r2
 8012262:	7a18      	ldrb	r0, [r3, #8]
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	68b9      	ldr	r1, [r7, #8]
 801226a:	47a0      	blx	r4
 801226c:	4603      	mov	r3, r0
 801226e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012270:	7dfb      	ldrb	r3, [r7, #23]
}
 8012272:	4618      	mov	r0, r3
 8012274:	371c      	adds	r7, #28
 8012276:	46bd      	mov	sp, r7
 8012278:	bd90      	pop	{r4, r7, pc}
 801227a:	bf00      	nop
 801227c:	20000970 	.word	0x20000970

08012280 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	4603      	mov	r3, r0
 8012288:	603a      	str	r2, [r7, #0]
 801228a:	71fb      	strb	r3, [r7, #7]
 801228c:	460b      	mov	r3, r1
 801228e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012290:	79fb      	ldrb	r3, [r7, #7]
 8012292:	4a09      	ldr	r2, [pc, #36]	; (80122b8 <disk_ioctl+0x38>)
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	4413      	add	r3, r2
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	79fa      	ldrb	r2, [r7, #7]
 801229e:	4906      	ldr	r1, [pc, #24]	; (80122b8 <disk_ioctl+0x38>)
 80122a0:	440a      	add	r2, r1
 80122a2:	7a10      	ldrb	r0, [r2, #8]
 80122a4:	79b9      	ldrb	r1, [r7, #6]
 80122a6:	683a      	ldr	r2, [r7, #0]
 80122a8:	4798      	blx	r3
 80122aa:	4603      	mov	r3, r0
 80122ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3710      	adds	r7, #16
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20000970 	.word	0x20000970

080122bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80122bc:	b480      	push	{r7}
 80122be:	b085      	sub	sp, #20
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	3301      	adds	r3, #1
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80122cc:	89fb      	ldrh	r3, [r7, #14]
 80122ce:	021b      	lsls	r3, r3, #8
 80122d0:	b21a      	sxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	b21b      	sxth	r3, r3
 80122d8:	4313      	orrs	r3, r2
 80122da:	b21b      	sxth	r3, r3
 80122dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80122de:	89fb      	ldrh	r3, [r7, #14]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3714      	adds	r7, #20
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr

080122ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	3303      	adds	r3, #3
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	021b      	lsls	r3, r3, #8
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	3202      	adds	r2, #2
 8012304:	7812      	ldrb	r2, [r2, #0]
 8012306:	4313      	orrs	r3, r2
 8012308:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	021b      	lsls	r3, r3, #8
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	3201      	adds	r2, #1
 8012312:	7812      	ldrb	r2, [r2, #0]
 8012314:	4313      	orrs	r3, r2
 8012316:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	021b      	lsls	r3, r3, #8
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	7812      	ldrb	r2, [r2, #0]
 8012320:	4313      	orrs	r3, r2
 8012322:	60fb      	str	r3, [r7, #12]
	return rv;
 8012324:	68fb      	ldr	r3, [r7, #12]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3714      	adds	r7, #20
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr

08012332 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012332:	b480      	push	{r7}
 8012334:	b083      	sub	sp, #12
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	460b      	mov	r3, r1
 801233c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	1c5a      	adds	r2, r3, #1
 8012342:	607a      	str	r2, [r7, #4]
 8012344:	887a      	ldrh	r2, [r7, #2]
 8012346:	b2d2      	uxtb	r2, r2
 8012348:	701a      	strb	r2, [r3, #0]
 801234a:	887b      	ldrh	r3, [r7, #2]
 801234c:	0a1b      	lsrs	r3, r3, #8
 801234e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	1c5a      	adds	r2, r3, #1
 8012354:	607a      	str	r2, [r7, #4]
 8012356:	887a      	ldrh	r2, [r7, #2]
 8012358:	b2d2      	uxtb	r2, r2
 801235a:	701a      	strb	r2, [r3, #0]
}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	1c5a      	adds	r2, r3, #1
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	b2d2      	uxtb	r2, r2
 801237c:	701a      	strb	r2, [r3, #0]
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	0a1b      	lsrs	r3, r3, #8
 8012382:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	607a      	str	r2, [r7, #4]
 801238a:	683a      	ldr	r2, [r7, #0]
 801238c:	b2d2      	uxtb	r2, r2
 801238e:	701a      	strb	r2, [r3, #0]
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	0a1b      	lsrs	r3, r3, #8
 8012394:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	1c5a      	adds	r2, r3, #1
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	683a      	ldr	r2, [r7, #0]
 801239e:	b2d2      	uxtb	r2, r2
 80123a0:	701a      	strb	r2, [r3, #0]
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	0a1b      	lsrs	r3, r3, #8
 80123a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	607a      	str	r2, [r7, #4]
 80123ae:	683a      	ldr	r2, [r7, #0]
 80123b0:	b2d2      	uxtb	r2, r2
 80123b2:	701a      	strb	r2, [r3, #0]
}
 80123b4:	bf00      	nop
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr

080123c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80123c0:	b480      	push	{r7}
 80123c2:	b087      	sub	sp, #28
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d00d      	beq.n	80123f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80123da:	693a      	ldr	r2, [r7, #16]
 80123dc:	1c53      	adds	r3, r2, #1
 80123de:	613b      	str	r3, [r7, #16]
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	1c59      	adds	r1, r3, #1
 80123e4:	6179      	str	r1, [r7, #20]
 80123e6:	7812      	ldrb	r2, [r2, #0]
 80123e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	3b01      	subs	r3, #1
 80123ee:	607b      	str	r3, [r7, #4]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1f1      	bne.n	80123da <mem_cpy+0x1a>
	}
}
 80123f6:	bf00      	nop
 80123f8:	371c      	adds	r7, #28
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr

08012402 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012402:	b480      	push	{r7}
 8012404:	b087      	sub	sp, #28
 8012406:	af00      	add	r7, sp, #0
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	1c5a      	adds	r2, r3, #1
 8012416:	617a      	str	r2, [r7, #20]
 8012418:	68ba      	ldr	r2, [r7, #8]
 801241a:	b2d2      	uxtb	r2, r2
 801241c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3b01      	subs	r3, #1
 8012422:	607b      	str	r3, [r7, #4]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1f3      	bne.n	8012412 <mem_set+0x10>
}
 801242a:	bf00      	nop
 801242c:	bf00      	nop
 801242e:	371c      	adds	r7, #28
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012438:	b480      	push	{r7}
 801243a:	b089      	sub	sp, #36	; 0x24
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	61fb      	str	r3, [r7, #28]
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801244c:	2300      	movs	r3, #0
 801244e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	61fa      	str	r2, [r7, #28]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	4619      	mov	r1, r3
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	1c5a      	adds	r2, r3, #1
 801245e:	61ba      	str	r2, [r7, #24]
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	1acb      	subs	r3, r1, r3
 8012464:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	3b01      	subs	r3, #1
 801246a:	607b      	str	r3, [r7, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d002      	beq.n	8012478 <mem_cmp+0x40>
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d0eb      	beq.n	8012450 <mem_cmp+0x18>

	return r;
 8012478:	697b      	ldr	r3, [r7, #20]
}
 801247a:	4618      	mov	r0, r3
 801247c:	3724      	adds	r7, #36	; 0x24
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr

08012486 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012486:	b480      	push	{r7}
 8012488:	b083      	sub	sp, #12
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
 801248e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012490:	e002      	b.n	8012498 <chk_chr+0x12>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	3301      	adds	r3, #1
 8012496:	607b      	str	r3, [r7, #4]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d005      	beq.n	80124ac <chk_chr+0x26>
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	461a      	mov	r2, r3
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d1f2      	bne.n	8012492 <chk_chr+0xc>
	return *str;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	781b      	ldrb	r3, [r3, #0]
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	370c      	adds	r7, #12
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80124c6:	2300      	movs	r3, #0
 80124c8:	60bb      	str	r3, [r7, #8]
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	60fb      	str	r3, [r7, #12]
 80124ce:	e029      	b.n	8012524 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80124d0:	4a27      	ldr	r2, [pc, #156]	; (8012570 <chk_lock+0xb4>)
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	011b      	lsls	r3, r3, #4
 80124d6:	4413      	add	r3, r2
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d01d      	beq.n	801251a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80124de:	4a24      	ldr	r2, [pc, #144]	; (8012570 <chk_lock+0xb4>)
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	011b      	lsls	r3, r3, #4
 80124e4:	4413      	add	r3, r2
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d116      	bne.n	801251e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80124f0:	4a1f      	ldr	r2, [pc, #124]	; (8012570 <chk_lock+0xb4>)
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	011b      	lsls	r3, r3, #4
 80124f6:	4413      	add	r3, r2
 80124f8:	3304      	adds	r3, #4
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012500:	429a      	cmp	r2, r3
 8012502:	d10c      	bne.n	801251e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012504:	4a1a      	ldr	r2, [pc, #104]	; (8012570 <chk_lock+0xb4>)
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	011b      	lsls	r3, r3, #4
 801250a:	4413      	add	r3, r2
 801250c:	3308      	adds	r3, #8
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012514:	429a      	cmp	r2, r3
 8012516:	d102      	bne.n	801251e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012518:	e007      	b.n	801252a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801251a:	2301      	movs	r3, #1
 801251c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	3301      	adds	r3, #1
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b01      	cmp	r3, #1
 8012528:	d9d2      	bls.n	80124d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2b02      	cmp	r3, #2
 801252e:	d109      	bne.n	8012544 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d102      	bne.n	801253c <chk_lock+0x80>
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	2b02      	cmp	r3, #2
 801253a:	d101      	bne.n	8012540 <chk_lock+0x84>
 801253c:	2300      	movs	r3, #0
 801253e:	e010      	b.n	8012562 <chk_lock+0xa6>
 8012540:	2312      	movs	r3, #18
 8012542:	e00e      	b.n	8012562 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d108      	bne.n	801255c <chk_lock+0xa0>
 801254a:	4a09      	ldr	r2, [pc, #36]	; (8012570 <chk_lock+0xb4>)
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	011b      	lsls	r3, r3, #4
 8012550:	4413      	add	r3, r2
 8012552:	330c      	adds	r3, #12
 8012554:	881b      	ldrh	r3, [r3, #0]
 8012556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801255a:	d101      	bne.n	8012560 <chk_lock+0xa4>
 801255c:	2310      	movs	r3, #16
 801255e:	e000      	b.n	8012562 <chk_lock+0xa6>
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3714      	adds	r7, #20
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	20000950 	.word	0x20000950

08012574 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012574:	b480      	push	{r7}
 8012576:	b083      	sub	sp, #12
 8012578:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801257a:	2300      	movs	r3, #0
 801257c:	607b      	str	r3, [r7, #4]
 801257e:	e002      	b.n	8012586 <enq_lock+0x12>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	3301      	adds	r3, #1
 8012584:	607b      	str	r3, [r7, #4]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b01      	cmp	r3, #1
 801258a:	d806      	bhi.n	801259a <enq_lock+0x26>
 801258c:	4a09      	ldr	r2, [pc, #36]	; (80125b4 <enq_lock+0x40>)
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	011b      	lsls	r3, r3, #4
 8012592:	4413      	add	r3, r2
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d1f2      	bne.n	8012580 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b02      	cmp	r3, #2
 801259e:	bf14      	ite	ne
 80125a0:	2301      	movne	r3, #1
 80125a2:	2300      	moveq	r3, #0
 80125a4:	b2db      	uxtb	r3, r3
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	370c      	adds	r7, #12
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	20000950 	.word	0x20000950

080125b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b085      	sub	sp, #20
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80125c2:	2300      	movs	r3, #0
 80125c4:	60fb      	str	r3, [r7, #12]
 80125c6:	e01f      	b.n	8012608 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80125c8:	4a41      	ldr	r2, [pc, #260]	; (80126d0 <inc_lock+0x118>)
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	011b      	lsls	r3, r3, #4
 80125ce:	4413      	add	r3, r2
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d113      	bne.n	8012602 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80125da:	4a3d      	ldr	r2, [pc, #244]	; (80126d0 <inc_lock+0x118>)
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	011b      	lsls	r3, r3, #4
 80125e0:	4413      	add	r3, r2
 80125e2:	3304      	adds	r3, #4
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d109      	bne.n	8012602 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80125ee:	4a38      	ldr	r2, [pc, #224]	; (80126d0 <inc_lock+0x118>)
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	011b      	lsls	r3, r3, #4
 80125f4:	4413      	add	r3, r2
 80125f6:	3308      	adds	r3, #8
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80125fe:	429a      	cmp	r2, r3
 8012600:	d006      	beq.n	8012610 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	3301      	adds	r3, #1
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2b01      	cmp	r3, #1
 801260c:	d9dc      	bls.n	80125c8 <inc_lock+0x10>
 801260e:	e000      	b.n	8012612 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012610:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b02      	cmp	r3, #2
 8012616:	d132      	bne.n	801267e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012618:	2300      	movs	r3, #0
 801261a:	60fb      	str	r3, [r7, #12]
 801261c:	e002      	b.n	8012624 <inc_lock+0x6c>
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	3301      	adds	r3, #1
 8012622:	60fb      	str	r3, [r7, #12]
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2b01      	cmp	r3, #1
 8012628:	d806      	bhi.n	8012638 <inc_lock+0x80>
 801262a:	4a29      	ldr	r2, [pc, #164]	; (80126d0 <inc_lock+0x118>)
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	011b      	lsls	r3, r3, #4
 8012630:	4413      	add	r3, r2
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d1f2      	bne.n	801261e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d101      	bne.n	8012642 <inc_lock+0x8a>
 801263e:	2300      	movs	r3, #0
 8012640:	e040      	b.n	80126c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	4922      	ldr	r1, [pc, #136]	; (80126d0 <inc_lock+0x118>)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	011b      	lsls	r3, r3, #4
 801264c:	440b      	add	r3, r1
 801264e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	689a      	ldr	r2, [r3, #8]
 8012654:	491e      	ldr	r1, [pc, #120]	; (80126d0 <inc_lock+0x118>)
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	011b      	lsls	r3, r3, #4
 801265a:	440b      	add	r3, r1
 801265c:	3304      	adds	r3, #4
 801265e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	695a      	ldr	r2, [r3, #20]
 8012664:	491a      	ldr	r1, [pc, #104]	; (80126d0 <inc_lock+0x118>)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	011b      	lsls	r3, r3, #4
 801266a:	440b      	add	r3, r1
 801266c:	3308      	adds	r3, #8
 801266e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012670:	4a17      	ldr	r2, [pc, #92]	; (80126d0 <inc_lock+0x118>)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	011b      	lsls	r3, r3, #4
 8012676:	4413      	add	r3, r2
 8012678:	330c      	adds	r3, #12
 801267a:	2200      	movs	r2, #0
 801267c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d009      	beq.n	8012698 <inc_lock+0xe0>
 8012684:	4a12      	ldr	r2, [pc, #72]	; (80126d0 <inc_lock+0x118>)
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	011b      	lsls	r3, r3, #4
 801268a:	4413      	add	r3, r2
 801268c:	330c      	adds	r3, #12
 801268e:	881b      	ldrh	r3, [r3, #0]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <inc_lock+0xe0>
 8012694:	2300      	movs	r3, #0
 8012696:	e015      	b.n	80126c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d108      	bne.n	80126b0 <inc_lock+0xf8>
 801269e:	4a0c      	ldr	r2, [pc, #48]	; (80126d0 <inc_lock+0x118>)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	011b      	lsls	r3, r3, #4
 80126a4:	4413      	add	r3, r2
 80126a6:	330c      	adds	r3, #12
 80126a8:	881b      	ldrh	r3, [r3, #0]
 80126aa:	3301      	adds	r3, #1
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	e001      	b.n	80126b4 <inc_lock+0xfc>
 80126b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126b4:	4906      	ldr	r1, [pc, #24]	; (80126d0 <inc_lock+0x118>)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	011b      	lsls	r3, r3, #4
 80126ba:	440b      	add	r3, r1
 80126bc:	330c      	adds	r3, #12
 80126be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	3301      	adds	r3, #1
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	20000950 	.word	0x20000950

080126d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80126d4:	b480      	push	{r7}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	3b01      	subs	r3, #1
 80126e0:	607b      	str	r3, [r7, #4]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d825      	bhi.n	8012734 <dec_lock+0x60>
		n = Files[i].ctr;
 80126e8:	4a17      	ldr	r2, [pc, #92]	; (8012748 <dec_lock+0x74>)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	011b      	lsls	r3, r3, #4
 80126ee:	4413      	add	r3, r2
 80126f0:	330c      	adds	r3, #12
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80126f6:	89fb      	ldrh	r3, [r7, #14]
 80126f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126fc:	d101      	bne.n	8012702 <dec_lock+0x2e>
 80126fe:	2300      	movs	r3, #0
 8012700:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012702:	89fb      	ldrh	r3, [r7, #14]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <dec_lock+0x3a>
 8012708:	89fb      	ldrh	r3, [r7, #14]
 801270a:	3b01      	subs	r3, #1
 801270c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801270e:	4a0e      	ldr	r2, [pc, #56]	; (8012748 <dec_lock+0x74>)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	011b      	lsls	r3, r3, #4
 8012714:	4413      	add	r3, r2
 8012716:	330c      	adds	r3, #12
 8012718:	89fa      	ldrh	r2, [r7, #14]
 801271a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801271c:	89fb      	ldrh	r3, [r7, #14]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d105      	bne.n	801272e <dec_lock+0x5a>
 8012722:	4a09      	ldr	r2, [pc, #36]	; (8012748 <dec_lock+0x74>)
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	011b      	lsls	r3, r3, #4
 8012728:	4413      	add	r3, r2
 801272a:	2200      	movs	r2, #0
 801272c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801272e:	2300      	movs	r3, #0
 8012730:	737b      	strb	r3, [r7, #13]
 8012732:	e001      	b.n	8012738 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012734:	2302      	movs	r3, #2
 8012736:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012738:	7b7b      	ldrb	r3, [r7, #13]
}
 801273a:	4618      	mov	r0, r3
 801273c:	3714      	adds	r7, #20
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	20000950 	.word	0x20000950

0801274c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012754:	2300      	movs	r3, #0
 8012756:	60fb      	str	r3, [r7, #12]
 8012758:	e010      	b.n	801277c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801275a:	4a0d      	ldr	r2, [pc, #52]	; (8012790 <clear_lock+0x44>)
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	011b      	lsls	r3, r3, #4
 8012760:	4413      	add	r3, r2
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	687a      	ldr	r2, [r7, #4]
 8012766:	429a      	cmp	r2, r3
 8012768:	d105      	bne.n	8012776 <clear_lock+0x2a>
 801276a:	4a09      	ldr	r2, [pc, #36]	; (8012790 <clear_lock+0x44>)
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	011b      	lsls	r3, r3, #4
 8012770:	4413      	add	r3, r2
 8012772:	2200      	movs	r2, #0
 8012774:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3301      	adds	r3, #1
 801277a:	60fb      	str	r3, [r7, #12]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2b01      	cmp	r3, #1
 8012780:	d9eb      	bls.n	801275a <clear_lock+0xe>
	}
}
 8012782:	bf00      	nop
 8012784:	bf00      	nop
 8012786:	3714      	adds	r7, #20
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	20000950 	.word	0x20000950

08012794 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801279c:	2300      	movs	r3, #0
 801279e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	78db      	ldrb	r3, [r3, #3]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d034      	beq.n	8012812 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	7858      	ldrb	r0, [r3, #1]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127b8:	2301      	movs	r3, #1
 80127ba:	697a      	ldr	r2, [r7, #20]
 80127bc:	f7ff fd40 	bl	8012240 <disk_write>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d002      	beq.n	80127cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80127c6:	2301      	movs	r3, #1
 80127c8:	73fb      	strb	r3, [r7, #15]
 80127ca:	e022      	b.n	8012812 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2200      	movs	r2, #0
 80127d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6a1b      	ldr	r3, [r3, #32]
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	1ad2      	subs	r2, r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d217      	bcs.n	8012812 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	789b      	ldrb	r3, [r3, #2]
 80127e6:	613b      	str	r3, [r7, #16]
 80127e8:	e010      	b.n	801280c <sync_window+0x78>
					wsect += fs->fsize;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	699b      	ldr	r3, [r3, #24]
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	4413      	add	r3, r2
 80127f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	7858      	ldrb	r0, [r3, #1]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127fe:	2301      	movs	r3, #1
 8012800:	697a      	ldr	r2, [r7, #20]
 8012802:	f7ff fd1d 	bl	8012240 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	3b01      	subs	r3, #1
 801280a:	613b      	str	r3, [r7, #16]
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	2b01      	cmp	r3, #1
 8012810:	d8eb      	bhi.n	80127ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012812:	7bfb      	ldrb	r3, [r7, #15]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3718      	adds	r7, #24
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012826:	2300      	movs	r3, #0
 8012828:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801282e:	683a      	ldr	r2, [r7, #0]
 8012830:	429a      	cmp	r2, r3
 8012832:	d01b      	beq.n	801286c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7ff ffad 	bl	8012794 <sync_window>
 801283a:	4603      	mov	r3, r0
 801283c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801283e:	7bfb      	ldrb	r3, [r7, #15]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d113      	bne.n	801286c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	7858      	ldrb	r0, [r3, #1]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801284e:	2301      	movs	r3, #1
 8012850:	683a      	ldr	r2, [r7, #0]
 8012852:	f7ff fcd5 	bl	8012200 <disk_read>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d004      	beq.n	8012866 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801285c:	f04f 33ff 	mov.w	r3, #4294967295
 8012860:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012862:	2301      	movs	r3, #1
 8012864:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	683a      	ldr	r2, [r7, #0]
 801286a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801286c:	7bfb      	ldrb	r3, [r7, #15]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
	...

08012878 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff ff87 	bl	8012794 <sync_window>
 8012886:	4603      	mov	r3, r0
 8012888:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801288a:	7bfb      	ldrb	r3, [r7, #15]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d158      	bne.n	8012942 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	2b03      	cmp	r3, #3
 8012896:	d148      	bne.n	801292a <sync_fs+0xb2>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	791b      	ldrb	r3, [r3, #4]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d144      	bne.n	801292a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	3330      	adds	r3, #48	; 0x30
 80128a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128a8:	2100      	movs	r1, #0
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff fda9 	bl	8012402 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3330      	adds	r3, #48	; 0x30
 80128b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff fd38 	bl	8012332 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	3330      	adds	r3, #48	; 0x30
 80128c6:	4921      	ldr	r1, [pc, #132]	; (801294c <sync_fs+0xd4>)
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7ff fd4d 	bl	8012368 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	3330      	adds	r3, #48	; 0x30
 80128d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80128d6:	491e      	ldr	r1, [pc, #120]	; (8012950 <sync_fs+0xd8>)
 80128d8:	4618      	mov	r0, r3
 80128da:	f7ff fd45 	bl	8012368 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	3330      	adds	r3, #48	; 0x30
 80128e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	691b      	ldr	r3, [r3, #16]
 80128ea:	4619      	mov	r1, r3
 80128ec:	4610      	mov	r0, r2
 80128ee:	f7ff fd3b 	bl	8012368 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	3330      	adds	r3, #48	; 0x30
 80128f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	4619      	mov	r1, r3
 8012900:	4610      	mov	r0, r2
 8012902:	f7ff fd31 	bl	8012368 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	69db      	ldr	r3, [r3, #28]
 801290a:	1c5a      	adds	r2, r3, #1
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	7858      	ldrb	r0, [r3, #1]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801291e:	2301      	movs	r3, #1
 8012920:	f7ff fc8e 	bl	8012240 <disk_write>
			fs->fsi_flag = 0;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	785b      	ldrb	r3, [r3, #1]
 801292e:	2200      	movs	r2, #0
 8012930:	2100      	movs	r1, #0
 8012932:	4618      	mov	r0, r3
 8012934:	f7ff fca4 	bl	8012280 <disk_ioctl>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d001      	beq.n	8012942 <sync_fs+0xca>
 801293e:	2301      	movs	r3, #1
 8012940:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012942:	7bfb      	ldrb	r3, [r7, #15]
}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	41615252 	.word	0x41615252
 8012950:	61417272 	.word	0x61417272

08012954 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	3b02      	subs	r3, #2
 8012962:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	695b      	ldr	r3, [r3, #20]
 8012968:	3b02      	subs	r3, #2
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	429a      	cmp	r2, r3
 801296e:	d301      	bcc.n	8012974 <clust2sect+0x20>
 8012970:	2300      	movs	r3, #0
 8012972:	e008      	b.n	8012986 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	895b      	ldrh	r3, [r3, #10]
 8012978:	461a      	mov	r2, r3
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	fb03 f202 	mul.w	r2, r3, r2
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012984:	4413      	add	r3, r2
}
 8012986:	4618      	mov	r0, r3
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b086      	sub	sp, #24
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
 801299a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2b01      	cmp	r3, #1
 80129a6:	d904      	bls.n	80129b2 <get_fat+0x20>
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	695b      	ldr	r3, [r3, #20]
 80129ac:	683a      	ldr	r2, [r7, #0]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d302      	bcc.n	80129b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80129b2:	2301      	movs	r3, #1
 80129b4:	617b      	str	r3, [r7, #20]
 80129b6:	e08f      	b.n	8012ad8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80129b8:	f04f 33ff 	mov.w	r3, #4294967295
 80129bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	2b03      	cmp	r3, #3
 80129c4:	d062      	beq.n	8012a8c <get_fat+0xfa>
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	dc7c      	bgt.n	8012ac4 <get_fat+0x132>
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d002      	beq.n	80129d4 <get_fat+0x42>
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	d042      	beq.n	8012a58 <get_fat+0xc6>
 80129d2:	e077      	b.n	8012ac4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	60fb      	str	r3, [r7, #12]
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	085b      	lsrs	r3, r3, #1
 80129dc:	68fa      	ldr	r2, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	6a1a      	ldr	r2, [r3, #32]
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	0a5b      	lsrs	r3, r3, #9
 80129ea:	4413      	add	r3, r2
 80129ec:	4619      	mov	r1, r3
 80129ee:	6938      	ldr	r0, [r7, #16]
 80129f0:	f7ff ff14 	bl	801281c <move_window>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d167      	bne.n	8012aca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	1c5a      	adds	r2, r3, #1
 80129fe:	60fa      	str	r2, [r7, #12]
 8012a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a04:	693a      	ldr	r2, [r7, #16]
 8012a06:	4413      	add	r3, r2
 8012a08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	6a1a      	ldr	r2, [r3, #32]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	0a5b      	lsrs	r3, r3, #9
 8012a16:	4413      	add	r3, r2
 8012a18:	4619      	mov	r1, r3
 8012a1a:	6938      	ldr	r0, [r7, #16]
 8012a1c:	f7ff fefe 	bl	801281c <move_window>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d153      	bne.n	8012ace <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a2c:	693a      	ldr	r2, [r7, #16]
 8012a2e:	4413      	add	r3, r2
 8012a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a34:	021b      	lsls	r3, r3, #8
 8012a36:	461a      	mov	r2, r3
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	f003 0301 	and.w	r3, r3, #1
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <get_fat+0xbc>
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	091b      	lsrs	r3, r3, #4
 8012a4c:	e002      	b.n	8012a54 <get_fat+0xc2>
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a54:	617b      	str	r3, [r7, #20]
			break;
 8012a56:	e03f      	b.n	8012ad8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	6a1a      	ldr	r2, [r3, #32]
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	0a1b      	lsrs	r3, r3, #8
 8012a60:	4413      	add	r3, r2
 8012a62:	4619      	mov	r1, r3
 8012a64:	6938      	ldr	r0, [r7, #16]
 8012a66:	f7ff fed9 	bl	801281c <move_window>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d130      	bne.n	8012ad2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	005b      	lsls	r3, r3, #1
 8012a7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012a7e:	4413      	add	r3, r2
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7ff fc1b 	bl	80122bc <ld_word>
 8012a86:	4603      	mov	r3, r0
 8012a88:	617b      	str	r3, [r7, #20]
			break;
 8012a8a:	e025      	b.n	8012ad8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	6a1a      	ldr	r2, [r3, #32]
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	09db      	lsrs	r3, r3, #7
 8012a94:	4413      	add	r3, r2
 8012a96:	4619      	mov	r1, r3
 8012a98:	6938      	ldr	r0, [r7, #16]
 8012a9a:	f7ff febf 	bl	801281c <move_window>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d118      	bne.n	8012ad6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012ab2:	4413      	add	r3, r2
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff fc19 	bl	80122ec <ld_dword>
 8012aba:	4603      	mov	r3, r0
 8012abc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012ac0:	617b      	str	r3, [r7, #20]
			break;
 8012ac2:	e009      	b.n	8012ad8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	617b      	str	r3, [r7, #20]
 8012ac8:	e006      	b.n	8012ad8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012aca:	bf00      	nop
 8012acc:	e004      	b.n	8012ad8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ace:	bf00      	nop
 8012ad0:	e002      	b.n	8012ad8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ad2:	bf00      	nop
 8012ad4:	e000      	b.n	8012ad8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ad6:	bf00      	nop
		}
	}

	return val;
 8012ad8:	697b      	ldr	r3, [r7, #20]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3718      	adds	r7, #24
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012ae2:	b590      	push	{r4, r7, lr}
 8012ae4:	b089      	sub	sp, #36	; 0x24
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	60f8      	str	r0, [r7, #12]
 8012aea:	60b9      	str	r1, [r7, #8]
 8012aec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012aee:	2302      	movs	r3, #2
 8012af0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	f240 80d2 	bls.w	8012c9e <put_fat+0x1bc>
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	695b      	ldr	r3, [r3, #20]
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	f080 80cc 	bcs.w	8012c9e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	2b03      	cmp	r3, #3
 8012b0c:	f000 8096 	beq.w	8012c3c <put_fat+0x15a>
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	f300 80cd 	bgt.w	8012cb0 <put_fat+0x1ce>
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d002      	beq.n	8012b20 <put_fat+0x3e>
 8012b1a:	2b02      	cmp	r3, #2
 8012b1c:	d06e      	beq.n	8012bfc <put_fat+0x11a>
 8012b1e:	e0c7      	b.n	8012cb0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	61bb      	str	r3, [r7, #24]
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	085b      	lsrs	r3, r3, #1
 8012b28:	69ba      	ldr	r2, [r7, #24]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	6a1a      	ldr	r2, [r3, #32]
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	0a5b      	lsrs	r3, r3, #9
 8012b36:	4413      	add	r3, r2
 8012b38:	4619      	mov	r1, r3
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	f7ff fe6e 	bl	801281c <move_window>
 8012b40:	4603      	mov	r3, r0
 8012b42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012b44:	7ffb      	ldrb	r3, [r7, #31]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f040 80ab 	bne.w	8012ca2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	1c59      	adds	r1, r3, #1
 8012b56:	61b9      	str	r1, [r7, #24]
 8012b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b5c:	4413      	add	r3, r2
 8012b5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	f003 0301 	and.w	r3, r3, #1
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d00d      	beq.n	8012b86 <put_fat+0xa4>
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	b25b      	sxtb	r3, r3
 8012b70:	f003 030f 	and.w	r3, r3, #15
 8012b74:	b25a      	sxtb	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	011b      	lsls	r3, r3, #4
 8012b7c:	b25b      	sxtb	r3, r3
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	b25b      	sxtb	r3, r3
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	e001      	b.n	8012b8a <put_fat+0xa8>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	697a      	ldr	r2, [r7, #20]
 8012b8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2201      	movs	r2, #1
 8012b92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	6a1a      	ldr	r2, [r3, #32]
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	0a5b      	lsrs	r3, r3, #9
 8012b9c:	4413      	add	r3, r2
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	68f8      	ldr	r0, [r7, #12]
 8012ba2:	f7ff fe3b 	bl	801281c <move_window>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012baa:	7ffb      	ldrb	r3, [r7, #31]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d17a      	bne.n	8012ca6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bbc:	4413      	add	r3, r2
 8012bbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	f003 0301 	and.w	r3, r3, #1
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d003      	beq.n	8012bd2 <put_fat+0xf0>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	091b      	lsrs	r3, r3, #4
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	e00e      	b.n	8012bf0 <put_fat+0x10e>
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	b25b      	sxtb	r3, r3
 8012bd8:	f023 030f 	bic.w	r3, r3, #15
 8012bdc:	b25a      	sxtb	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	0a1b      	lsrs	r3, r3, #8
 8012be2:	b25b      	sxtb	r3, r3
 8012be4:	f003 030f 	and.w	r3, r3, #15
 8012be8:	b25b      	sxtb	r3, r3
 8012bea:	4313      	orrs	r3, r2
 8012bec:	b25b      	sxtb	r3, r3
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	697a      	ldr	r2, [r7, #20]
 8012bf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	70da      	strb	r2, [r3, #3]
			break;
 8012bfa:	e059      	b.n	8012cb0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	6a1a      	ldr	r2, [r3, #32]
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	0a1b      	lsrs	r3, r3, #8
 8012c04:	4413      	add	r3, r2
 8012c06:	4619      	mov	r1, r3
 8012c08:	68f8      	ldr	r0, [r7, #12]
 8012c0a:	f7ff fe07 	bl	801281c <move_window>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c12:	7ffb      	ldrb	r3, [r7, #31]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d148      	bne.n	8012caa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	005b      	lsls	r3, r3, #1
 8012c22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012c26:	4413      	add	r3, r2
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	b292      	uxth	r2, r2
 8012c2c:	4611      	mov	r1, r2
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7ff fb7f 	bl	8012332 <st_word>
			fs->wflag = 1;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2201      	movs	r2, #1
 8012c38:	70da      	strb	r2, [r3, #3]
			break;
 8012c3a:	e039      	b.n	8012cb0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	6a1a      	ldr	r2, [r3, #32]
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	09db      	lsrs	r3, r3, #7
 8012c44:	4413      	add	r3, r2
 8012c46:	4619      	mov	r1, r3
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7ff fde7 	bl	801281c <move_window>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c52:	7ffb      	ldrb	r3, [r7, #31]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d12a      	bne.n	8012cae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012c6c:	4413      	add	r3, r2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff fb3c 	bl	80122ec <ld_dword>
 8012c74:	4603      	mov	r3, r0
 8012c76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012c7a:	4323      	orrs	r3, r4
 8012c7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	009b      	lsls	r3, r3, #2
 8012c88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012c8c:	4413      	add	r3, r2
 8012c8e:	6879      	ldr	r1, [r7, #4]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7ff fb69 	bl	8012368 <st_dword>
			fs->wflag = 1;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	70da      	strb	r2, [r3, #3]
			break;
 8012c9c:	e008      	b.n	8012cb0 <put_fat+0x1ce>
		}
	}
 8012c9e:	bf00      	nop
 8012ca0:	e006      	b.n	8012cb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012ca2:	bf00      	nop
 8012ca4:	e004      	b.n	8012cb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012ca6:	bf00      	nop
 8012ca8:	e002      	b.n	8012cb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012caa:	bf00      	nop
 8012cac:	e000      	b.n	8012cb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012cae:	bf00      	nop
	return res;
 8012cb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3724      	adds	r7, #36	; 0x24
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd90      	pop	{r4, r7, pc}

08012cba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b088      	sub	sp, #32
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	60f8      	str	r0, [r7, #12]
 8012cc2:	60b9      	str	r1, [r7, #8]
 8012cc4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d904      	bls.n	8012ce0 <remove_chain+0x26>
 8012cd6:	69bb      	ldr	r3, [r7, #24]
 8012cd8:	695b      	ldr	r3, [r3, #20]
 8012cda:	68ba      	ldr	r2, [r7, #8]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d301      	bcc.n	8012ce4 <remove_chain+0x2a>
 8012ce0:	2302      	movs	r3, #2
 8012ce2:	e04b      	b.n	8012d7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00c      	beq.n	8012d04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012cea:	f04f 32ff 	mov.w	r2, #4294967295
 8012cee:	6879      	ldr	r1, [r7, #4]
 8012cf0:	69b8      	ldr	r0, [r7, #24]
 8012cf2:	f7ff fef6 	bl	8012ae2 <put_fat>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012cfa:	7ffb      	ldrb	r3, [r7, #31]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d001      	beq.n	8012d04 <remove_chain+0x4a>
 8012d00:	7ffb      	ldrb	r3, [r7, #31]
 8012d02:	e03b      	b.n	8012d7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	68f8      	ldr	r0, [r7, #12]
 8012d08:	f7ff fe43 	bl	8012992 <get_fat>
 8012d0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d031      	beq.n	8012d78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d101      	bne.n	8012d1e <remove_chain+0x64>
 8012d1a:	2302      	movs	r3, #2
 8012d1c:	e02e      	b.n	8012d7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d24:	d101      	bne.n	8012d2a <remove_chain+0x70>
 8012d26:	2301      	movs	r3, #1
 8012d28:	e028      	b.n	8012d7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	68b9      	ldr	r1, [r7, #8]
 8012d2e:	69b8      	ldr	r0, [r7, #24]
 8012d30:	f7ff fed7 	bl	8012ae2 <put_fat>
 8012d34:	4603      	mov	r3, r0
 8012d36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012d38:	7ffb      	ldrb	r3, [r7, #31]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d001      	beq.n	8012d42 <remove_chain+0x88>
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
 8012d40:	e01c      	b.n	8012d7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	691a      	ldr	r2, [r3, #16]
 8012d46:	69bb      	ldr	r3, [r7, #24]
 8012d48:	695b      	ldr	r3, [r3, #20]
 8012d4a:	3b02      	subs	r3, #2
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d20b      	bcs.n	8012d68 <remove_chain+0xae>
			fs->free_clst++;
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	691b      	ldr	r3, [r3, #16]
 8012d54:	1c5a      	adds	r2, r3, #1
 8012d56:	69bb      	ldr	r3, [r7, #24]
 8012d58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	791b      	ldrb	r3, [r3, #4]
 8012d5e:	f043 0301 	orr.w	r3, r3, #1
 8012d62:	b2da      	uxtb	r2, r3
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	695b      	ldr	r3, [r3, #20]
 8012d70:	68ba      	ldr	r2, [r7, #8]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d3c6      	bcc.n	8012d04 <remove_chain+0x4a>
 8012d76:	e000      	b.n	8012d7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012d78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012d7a:	2300      	movs	r3, #0
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3720      	adds	r7, #32
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b088      	sub	sp, #32
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d10d      	bne.n	8012db6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012da0:	69bb      	ldr	r3, [r7, #24]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d004      	beq.n	8012db0 <create_chain+0x2c>
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	695b      	ldr	r3, [r3, #20]
 8012daa:	69ba      	ldr	r2, [r7, #24]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d31b      	bcc.n	8012de8 <create_chain+0x64>
 8012db0:	2301      	movs	r3, #1
 8012db2:	61bb      	str	r3, [r7, #24]
 8012db4:	e018      	b.n	8012de8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012db6:	6839      	ldr	r1, [r7, #0]
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7ff fdea 	bl	8012992 <get_fat>
 8012dbe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d801      	bhi.n	8012dca <create_chain+0x46>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e070      	b.n	8012eac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd0:	d101      	bne.n	8012dd6 <create_chain+0x52>
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	e06a      	b.n	8012eac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	695b      	ldr	r3, [r3, #20]
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d201      	bcs.n	8012de4 <create_chain+0x60>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	e063      	b.n	8012eac <create_chain+0x128>
		scl = clst;
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	3301      	adds	r3, #1
 8012df0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	69fa      	ldr	r2, [r7, #28]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d307      	bcc.n	8012e0c <create_chain+0x88>
				ncl = 2;
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e00:	69fa      	ldr	r2, [r7, #28]
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d901      	bls.n	8012e0c <create_chain+0x88>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e04f      	b.n	8012eac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e0c:	69f9      	ldr	r1, [r7, #28]
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7ff fdbf 	bl	8012992 <get_fat>
 8012e14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d00e      	beq.n	8012e3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d003      	beq.n	8012e2a <create_chain+0xa6>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e28:	d101      	bne.n	8012e2e <create_chain+0xaa>
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	e03e      	b.n	8012eac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012e2e:	69fa      	ldr	r2, [r7, #28]
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d1da      	bne.n	8012dec <create_chain+0x68>
 8012e36:	2300      	movs	r3, #0
 8012e38:	e038      	b.n	8012eac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012e3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e40:	69f9      	ldr	r1, [r7, #28]
 8012e42:	6938      	ldr	r0, [r7, #16]
 8012e44:	f7ff fe4d 	bl	8012ae2 <put_fat>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e4c:	7dfb      	ldrb	r3, [r7, #23]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d109      	bne.n	8012e66 <create_chain+0xe2>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d006      	beq.n	8012e66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012e58:	69fa      	ldr	r2, [r7, #28]
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6938      	ldr	r0, [r7, #16]
 8012e5e:	f7ff fe40 	bl	8012ae2 <put_fat>
 8012e62:	4603      	mov	r3, r0
 8012e64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012e66:	7dfb      	ldrb	r3, [r7, #23]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d116      	bne.n	8012e9a <create_chain+0x116>
		fs->last_clst = ncl;
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	69fa      	ldr	r2, [r7, #28]
 8012e70:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	691a      	ldr	r2, [r3, #16]
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	695b      	ldr	r3, [r3, #20]
 8012e7a:	3b02      	subs	r3, #2
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d804      	bhi.n	8012e8a <create_chain+0x106>
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	1e5a      	subs	r2, r3, #1
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	791b      	ldrb	r3, [r3, #4]
 8012e8e:	f043 0301 	orr.w	r3, r3, #1
 8012e92:	b2da      	uxtb	r2, r3
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	711a      	strb	r2, [r3, #4]
 8012e98:	e007      	b.n	8012eaa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012e9a:	7dfb      	ldrb	r3, [r7, #23]
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d102      	bne.n	8012ea6 <create_chain+0x122>
 8012ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea4:	e000      	b.n	8012ea8 <create_chain+0x124>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012eaa:	69fb      	ldr	r3, [r7, #28]
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3720      	adds	r7, #32
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b087      	sub	sp, #28
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec8:	3304      	adds	r3, #4
 8012eca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	0a5b      	lsrs	r3, r3, #9
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	8952      	ldrh	r2, [r2, #10]
 8012ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ed8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	1d1a      	adds	r2, r3, #4
 8012ede:	613a      	str	r2, [r7, #16]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d101      	bne.n	8012eee <clmt_clust+0x3a>
 8012eea:	2300      	movs	r3, #0
 8012eec:	e010      	b.n	8012f10 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012eee:	697a      	ldr	r2, [r7, #20]
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d307      	bcc.n	8012f06 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	3304      	adds	r3, #4
 8012f02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f04:	e7e9      	b.n	8012eda <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	4413      	add	r3, r2
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	371c      	adds	r7, #28
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr

08012f1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f32:	d204      	bcs.n	8012f3e <dir_sdi+0x22>
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	f003 031f 	and.w	r3, r3, #31
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d001      	beq.n	8012f42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012f3e:	2302      	movs	r3, #2
 8012f40:	e063      	b.n	801300a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	683a      	ldr	r2, [r7, #0]
 8012f46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	689b      	ldr	r3, [r3, #8]
 8012f4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d106      	bne.n	8012f62 <dir_sdi+0x46>
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d902      	bls.n	8012f62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d10c      	bne.n	8012f82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	095b      	lsrs	r3, r3, #5
 8012f6c:	693a      	ldr	r2, [r7, #16]
 8012f6e:	8912      	ldrh	r2, [r2, #8]
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d301      	bcc.n	8012f78 <dir_sdi+0x5c>
 8012f74:	2302      	movs	r3, #2
 8012f76:	e048      	b.n	801300a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	61da      	str	r2, [r3, #28]
 8012f80:	e029      	b.n	8012fd6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	895b      	ldrh	r3, [r3, #10]
 8012f86:	025b      	lsls	r3, r3, #9
 8012f88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012f8a:	e019      	b.n	8012fc0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6979      	ldr	r1, [r7, #20]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7ff fcfe 	bl	8012992 <get_fat>
 8012f96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f9e:	d101      	bne.n	8012fa4 <dir_sdi+0x88>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e032      	b.n	801300a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d904      	bls.n	8012fb4 <dir_sdi+0x98>
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	695b      	ldr	r3, [r3, #20]
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d301      	bcc.n	8012fb8 <dir_sdi+0x9c>
 8012fb4:	2302      	movs	r3, #2
 8012fb6:	e028      	b.n	801300a <dir_sdi+0xee>
			ofs -= csz;
 8012fb8:	683a      	ldr	r2, [r7, #0]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	1ad3      	subs	r3, r2, r3
 8012fbe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012fc0:	683a      	ldr	r2, [r7, #0]
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d2e1      	bcs.n	8012f8c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012fc8:	6979      	ldr	r1, [r7, #20]
 8012fca:	6938      	ldr	r0, [r7, #16]
 8012fcc:	f7ff fcc2 	bl	8012954 <clust2sect>
 8012fd0:	4602      	mov	r2, r0
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	697a      	ldr	r2, [r7, #20]
 8012fda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	69db      	ldr	r3, [r3, #28]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d101      	bne.n	8012fe8 <dir_sdi+0xcc>
 8012fe4:	2302      	movs	r3, #2
 8012fe6:	e010      	b.n	801300a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	69da      	ldr	r2, [r3, #28]
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	0a5b      	lsrs	r3, r3, #9
 8012ff0:	441a      	add	r2, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013002:	441a      	add	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013012:	b580      	push	{r7, lr}
 8013014:	b086      	sub	sp, #24
 8013016:	af00      	add	r7, sp, #0
 8013018:	6078      	str	r0, [r7, #4]
 801301a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	695b      	ldr	r3, [r3, #20]
 8013026:	3320      	adds	r3, #32
 8013028:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	69db      	ldr	r3, [r3, #28]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d003      	beq.n	801303a <dir_next+0x28>
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013038:	d301      	bcc.n	801303e <dir_next+0x2c>
 801303a:	2304      	movs	r3, #4
 801303c:	e0aa      	b.n	8013194 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013044:	2b00      	cmp	r3, #0
 8013046:	f040 8098 	bne.w	801317a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	69db      	ldr	r3, [r3, #28]
 801304e:	1c5a      	adds	r2, r3, #1
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	699b      	ldr	r3, [r3, #24]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d10b      	bne.n	8013074 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	095b      	lsrs	r3, r3, #5
 8013060:	68fa      	ldr	r2, [r7, #12]
 8013062:	8912      	ldrh	r2, [r2, #8]
 8013064:	4293      	cmp	r3, r2
 8013066:	f0c0 8088 	bcc.w	801317a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2200      	movs	r2, #0
 801306e:	61da      	str	r2, [r3, #28]
 8013070:	2304      	movs	r3, #4
 8013072:	e08f      	b.n	8013194 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	0a5b      	lsrs	r3, r3, #9
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	8952      	ldrh	r2, [r2, #10]
 801307c:	3a01      	subs	r2, #1
 801307e:	4013      	ands	r3, r2
 8013080:	2b00      	cmp	r3, #0
 8013082:	d17a      	bne.n	801317a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	699b      	ldr	r3, [r3, #24]
 801308a:	4619      	mov	r1, r3
 801308c:	4610      	mov	r0, r2
 801308e:	f7ff fc80 	bl	8012992 <get_fat>
 8013092:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d801      	bhi.n	801309e <dir_next+0x8c>
 801309a:	2302      	movs	r3, #2
 801309c:	e07a      	b.n	8013194 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130a4:	d101      	bne.n	80130aa <dir_next+0x98>
 80130a6:	2301      	movs	r3, #1
 80130a8:	e074      	b.n	8013194 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	697a      	ldr	r2, [r7, #20]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d358      	bcc.n	8013166 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d104      	bne.n	80130c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2200      	movs	r2, #0
 80130be:	61da      	str	r2, [r3, #28]
 80130c0:	2304      	movs	r3, #4
 80130c2:	e067      	b.n	8013194 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	699b      	ldr	r3, [r3, #24]
 80130ca:	4619      	mov	r1, r3
 80130cc:	4610      	mov	r0, r2
 80130ce:	f7ff fe59 	bl	8012d84 <create_chain>
 80130d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d101      	bne.n	80130de <dir_next+0xcc>
 80130da:	2307      	movs	r3, #7
 80130dc:	e05a      	b.n	8013194 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d101      	bne.n	80130e8 <dir_next+0xd6>
 80130e4:	2302      	movs	r3, #2
 80130e6:	e055      	b.n	8013194 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ee:	d101      	bne.n	80130f4 <dir_next+0xe2>
 80130f0:	2301      	movs	r3, #1
 80130f2:	e04f      	b.n	8013194 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f7ff fb4d 	bl	8012794 <sync_window>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <dir_next+0xf2>
 8013100:	2301      	movs	r3, #1
 8013102:	e047      	b.n	8013194 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	3330      	adds	r3, #48	; 0x30
 8013108:	f44f 7200 	mov.w	r2, #512	; 0x200
 801310c:	2100      	movs	r1, #0
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff f977 	bl	8012402 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013114:	2300      	movs	r3, #0
 8013116:	613b      	str	r3, [r7, #16]
 8013118:	6979      	ldr	r1, [r7, #20]
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f7ff fc1a 	bl	8012954 <clust2sect>
 8013120:	4602      	mov	r2, r0
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	62da      	str	r2, [r3, #44]	; 0x2c
 8013126:	e012      	b.n	801314e <dir_next+0x13c>
						fs->wflag = 1;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2201      	movs	r2, #1
 801312c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801312e:	68f8      	ldr	r0, [r7, #12]
 8013130:	f7ff fb30 	bl	8012794 <sync_window>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d001      	beq.n	801313e <dir_next+0x12c>
 801313a:	2301      	movs	r3, #1
 801313c:	e02a      	b.n	8013194 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	3301      	adds	r3, #1
 8013142:	613b      	str	r3, [r7, #16]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013148:	1c5a      	adds	r2, r3, #1
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	62da      	str	r2, [r3, #44]	; 0x2c
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	895b      	ldrh	r3, [r3, #10]
 8013152:	461a      	mov	r2, r3
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	4293      	cmp	r3, r2
 8013158:	d3e6      	bcc.n	8013128 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	1ad2      	subs	r2, r2, r3
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	697a      	ldr	r2, [r7, #20]
 801316a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801316c:	6979      	ldr	r1, [r7, #20]
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f7ff fbf0 	bl	8012954 <clust2sect>
 8013174:	4602      	mov	r2, r0
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801318c:	441a      	add	r2, r3
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013192:	2300      	movs	r3, #0
}
 8013194:	4618      	mov	r0, r3
 8013196:	3718      	adds	r7, #24
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80131ac:	2100      	movs	r1, #0
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f7ff feb4 	bl	8012f1c <dir_sdi>
 80131b4:	4603      	mov	r3, r0
 80131b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80131b8:	7dfb      	ldrb	r3, [r7, #23]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d12b      	bne.n	8013216 <dir_alloc+0x7a>
		n = 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	69db      	ldr	r3, [r3, #28]
 80131c6:	4619      	mov	r1, r3
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f7ff fb27 	bl	801281c <move_window>
 80131ce:	4603      	mov	r3, r0
 80131d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80131d2:	7dfb      	ldrb	r3, [r7, #23]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d11d      	bne.n	8013214 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6a1b      	ldr	r3, [r3, #32]
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	2be5      	cmp	r3, #229	; 0xe5
 80131e0:	d004      	beq.n	80131ec <dir_alloc+0x50>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6a1b      	ldr	r3, [r3, #32]
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d107      	bne.n	80131fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	3301      	adds	r3, #1
 80131f0:	613b      	str	r3, [r7, #16]
 80131f2:	693a      	ldr	r2, [r7, #16]
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d102      	bne.n	8013200 <dir_alloc+0x64>
 80131fa:	e00c      	b.n	8013216 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80131fc:	2300      	movs	r3, #0
 80131fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013200:	2101      	movs	r1, #1
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f7ff ff05 	bl	8013012 <dir_next>
 8013208:	4603      	mov	r3, r0
 801320a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801320c:	7dfb      	ldrb	r3, [r7, #23]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d0d7      	beq.n	80131c2 <dir_alloc+0x26>
 8013212:	e000      	b.n	8013216 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013214:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	2b04      	cmp	r3, #4
 801321a:	d101      	bne.n	8013220 <dir_alloc+0x84>
 801321c:	2307      	movs	r3, #7
 801321e:	75fb      	strb	r3, [r7, #23]
	return res;
 8013220:	7dfb      	ldrb	r3, [r7, #23]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3718      	adds	r7, #24
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}

0801322a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801322a:	b580      	push	{r7, lr}
 801322c:	b084      	sub	sp, #16
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	331a      	adds	r3, #26
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff f83f 	bl	80122bc <ld_word>
 801323e:	4603      	mov	r3, r0
 8013240:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	2b03      	cmp	r3, #3
 8013248:	d109      	bne.n	801325e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	3314      	adds	r3, #20
 801324e:	4618      	mov	r0, r3
 8013250:	f7ff f834 	bl	80122bc <ld_word>
 8013254:	4603      	mov	r3, r0
 8013256:	041b      	lsls	r3, r3, #16
 8013258:	68fa      	ldr	r2, [r7, #12]
 801325a:	4313      	orrs	r3, r2
 801325c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801325e:	68fb      	ldr	r3, [r7, #12]
}
 8013260:	4618      	mov	r0, r3
 8013262:	3710      	adds	r7, #16
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}

08013268 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	331a      	adds	r3, #26
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	b292      	uxth	r2, r2
 801327c:	4611      	mov	r1, r2
 801327e:	4618      	mov	r0, r3
 8013280:	f7ff f857 	bl	8012332 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	2b03      	cmp	r3, #3
 801328a:	d109      	bne.n	80132a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	f103 0214 	add.w	r2, r3, #20
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	0c1b      	lsrs	r3, r3, #16
 8013296:	b29b      	uxth	r3, r3
 8013298:	4619      	mov	r1, r3
 801329a:	4610      	mov	r0, r2
 801329c:	f7ff f849 	bl	8012332 <st_word>
	}
}
 80132a0:	bf00      	nop
 80132a2:	3710      	adds	r7, #16
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80132b6:	2100      	movs	r1, #0
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7ff fe2f 	bl	8012f1c <dir_sdi>
 80132be:	4603      	mov	r3, r0
 80132c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80132c2:	7dfb      	ldrb	r3, [r7, #23]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d001      	beq.n	80132cc <dir_find+0x24>
 80132c8:	7dfb      	ldrb	r3, [r7, #23]
 80132ca:	e03e      	b.n	801334a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	69db      	ldr	r3, [r3, #28]
 80132d0:	4619      	mov	r1, r3
 80132d2:	6938      	ldr	r0, [r7, #16]
 80132d4:	f7ff faa2 	bl	801281c <move_window>
 80132d8:	4603      	mov	r3, r0
 80132da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80132dc:	7dfb      	ldrb	r3, [r7, #23]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d12f      	bne.n	8013342 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a1b      	ldr	r3, [r3, #32]
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80132ea:	7bfb      	ldrb	r3, [r7, #15]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d102      	bne.n	80132f6 <dir_find+0x4e>
 80132f0:	2304      	movs	r3, #4
 80132f2:	75fb      	strb	r3, [r7, #23]
 80132f4:	e028      	b.n	8013348 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6a1b      	ldr	r3, [r3, #32]
 80132fa:	330b      	adds	r3, #11
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013302:	b2da      	uxtb	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6a1b      	ldr	r3, [r3, #32]
 801330c:	330b      	adds	r3, #11
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	f003 0308 	and.w	r3, r3, #8
 8013314:	2b00      	cmp	r3, #0
 8013316:	d10a      	bne.n	801332e <dir_find+0x86>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6a18      	ldr	r0, [r3, #32]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3324      	adds	r3, #36	; 0x24
 8013320:	220b      	movs	r2, #11
 8013322:	4619      	mov	r1, r3
 8013324:	f7ff f888 	bl	8012438 <mem_cmp>
 8013328:	4603      	mov	r3, r0
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00b      	beq.n	8013346 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801332e:	2100      	movs	r1, #0
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7ff fe6e 	bl	8013012 <dir_next>
 8013336:	4603      	mov	r3, r0
 8013338:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801333a:	7dfb      	ldrb	r3, [r7, #23]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d0c5      	beq.n	80132cc <dir_find+0x24>
 8013340:	e002      	b.n	8013348 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013342:	bf00      	nop
 8013344:	e000      	b.n	8013348 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013346:	bf00      	nop

	return res;
 8013348:	7dfb      	ldrb	r3, [r7, #23]
}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b084      	sub	sp, #16
 8013356:	af00      	add	r7, sp, #0
 8013358:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013360:	2101      	movs	r1, #1
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7ff ff1a 	bl	801319c <dir_alloc>
 8013368:	4603      	mov	r3, r0
 801336a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801336c:	7bfb      	ldrb	r3, [r7, #15]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d11c      	bne.n	80133ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	69db      	ldr	r3, [r3, #28]
 8013376:	4619      	mov	r1, r3
 8013378:	68b8      	ldr	r0, [r7, #8]
 801337a:	f7ff fa4f 	bl	801281c <move_window>
 801337e:	4603      	mov	r3, r0
 8013380:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013382:	7bfb      	ldrb	r3, [r7, #15]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d111      	bne.n	80133ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6a1b      	ldr	r3, [r3, #32]
 801338c:	2220      	movs	r2, #32
 801338e:	2100      	movs	r1, #0
 8013390:	4618      	mov	r0, r3
 8013392:	f7ff f836 	bl	8012402 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6a18      	ldr	r0, [r3, #32]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	3324      	adds	r3, #36	; 0x24
 801339e:	220b      	movs	r2, #11
 80133a0:	4619      	mov	r1, r3
 80133a2:	f7ff f80d 	bl	80123c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	2201      	movs	r2, #1
 80133aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
	...

080133b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b088      	sub	sp, #32
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	60fb      	str	r3, [r7, #12]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	3324      	adds	r3, #36	; 0x24
 80133cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80133ce:	220b      	movs	r2, #11
 80133d0:	2120      	movs	r1, #32
 80133d2:	68b8      	ldr	r0, [r7, #8]
 80133d4:	f7ff f815 	bl	8012402 <mem_set>
	si = i = 0; ni = 8;
 80133d8:	2300      	movs	r3, #0
 80133da:	613b      	str	r3, [r7, #16]
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	61fb      	str	r3, [r7, #28]
 80133e0:	2308      	movs	r3, #8
 80133e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	1c5a      	adds	r2, r3, #1
 80133e8:	61fa      	str	r2, [r7, #28]
 80133ea:	68fa      	ldr	r2, [r7, #12]
 80133ec:	4413      	add	r3, r2
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80133f2:	7efb      	ldrb	r3, [r7, #27]
 80133f4:	2b20      	cmp	r3, #32
 80133f6:	d94e      	bls.n	8013496 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80133f8:	7efb      	ldrb	r3, [r7, #27]
 80133fa:	2b2f      	cmp	r3, #47	; 0x2f
 80133fc:	d006      	beq.n	801340c <create_name+0x54>
 80133fe:	7efb      	ldrb	r3, [r7, #27]
 8013400:	2b5c      	cmp	r3, #92	; 0x5c
 8013402:	d110      	bne.n	8013426 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013404:	e002      	b.n	801340c <create_name+0x54>
 8013406:	69fb      	ldr	r3, [r7, #28]
 8013408:	3301      	adds	r3, #1
 801340a:	61fb      	str	r3, [r7, #28]
 801340c:	68fa      	ldr	r2, [r7, #12]
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	4413      	add	r3, r2
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	2b2f      	cmp	r3, #47	; 0x2f
 8013416:	d0f6      	beq.n	8013406 <create_name+0x4e>
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	4413      	add	r3, r2
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	2b5c      	cmp	r3, #92	; 0x5c
 8013422:	d0f0      	beq.n	8013406 <create_name+0x4e>
			break;
 8013424:	e038      	b.n	8013498 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013426:	7efb      	ldrb	r3, [r7, #27]
 8013428:	2b2e      	cmp	r3, #46	; 0x2e
 801342a:	d003      	beq.n	8013434 <create_name+0x7c>
 801342c:	693a      	ldr	r2, [r7, #16]
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	429a      	cmp	r2, r3
 8013432:	d30c      	bcc.n	801344e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	2b0b      	cmp	r3, #11
 8013438:	d002      	beq.n	8013440 <create_name+0x88>
 801343a:	7efb      	ldrb	r3, [r7, #27]
 801343c:	2b2e      	cmp	r3, #46	; 0x2e
 801343e:	d001      	beq.n	8013444 <create_name+0x8c>
 8013440:	2306      	movs	r3, #6
 8013442:	e044      	b.n	80134ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013444:	2308      	movs	r3, #8
 8013446:	613b      	str	r3, [r7, #16]
 8013448:	230b      	movs	r3, #11
 801344a:	617b      	str	r3, [r7, #20]
			continue;
 801344c:	e022      	b.n	8013494 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801344e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013452:	2b00      	cmp	r3, #0
 8013454:	da04      	bge.n	8013460 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013456:	7efb      	ldrb	r3, [r7, #27]
 8013458:	3b80      	subs	r3, #128	; 0x80
 801345a:	4a1f      	ldr	r2, [pc, #124]	; (80134d8 <create_name+0x120>)
 801345c:	5cd3      	ldrb	r3, [r2, r3]
 801345e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013460:	7efb      	ldrb	r3, [r7, #27]
 8013462:	4619      	mov	r1, r3
 8013464:	481d      	ldr	r0, [pc, #116]	; (80134dc <create_name+0x124>)
 8013466:	f7ff f80e 	bl	8012486 <chk_chr>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d001      	beq.n	8013474 <create_name+0xbc>
 8013470:	2306      	movs	r3, #6
 8013472:	e02c      	b.n	80134ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013474:	7efb      	ldrb	r3, [r7, #27]
 8013476:	2b60      	cmp	r3, #96	; 0x60
 8013478:	d905      	bls.n	8013486 <create_name+0xce>
 801347a:	7efb      	ldrb	r3, [r7, #27]
 801347c:	2b7a      	cmp	r3, #122	; 0x7a
 801347e:	d802      	bhi.n	8013486 <create_name+0xce>
 8013480:	7efb      	ldrb	r3, [r7, #27]
 8013482:	3b20      	subs	r3, #32
 8013484:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	1c5a      	adds	r2, r3, #1
 801348a:	613a      	str	r2, [r7, #16]
 801348c:	68ba      	ldr	r2, [r7, #8]
 801348e:	4413      	add	r3, r2
 8013490:	7efa      	ldrb	r2, [r7, #27]
 8013492:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013494:	e7a6      	b.n	80133e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013496:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	69fb      	ldr	r3, [r7, #28]
 801349c:	441a      	add	r2, r3
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d101      	bne.n	80134ac <create_name+0xf4>
 80134a8:	2306      	movs	r3, #6
 80134aa:	e010      	b.n	80134ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	2be5      	cmp	r3, #229	; 0xe5
 80134b2:	d102      	bne.n	80134ba <create_name+0x102>
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	2205      	movs	r2, #5
 80134b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80134ba:	7efb      	ldrb	r3, [r7, #27]
 80134bc:	2b20      	cmp	r3, #32
 80134be:	d801      	bhi.n	80134c4 <create_name+0x10c>
 80134c0:	2204      	movs	r2, #4
 80134c2:	e000      	b.n	80134c6 <create_name+0x10e>
 80134c4:	2200      	movs	r2, #0
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	330b      	adds	r3, #11
 80134ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80134cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3720      	adds	r7, #32
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	08023e4c 	.word	0x08023e4c
 80134dc:	08021f8c 	.word	0x08021f8c

080134e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80134f4:	e002      	b.n	80134fc <follow_path+0x1c>
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	3301      	adds	r3, #1
 80134fa:	603b      	str	r3, [r7, #0]
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	2b2f      	cmp	r3, #47	; 0x2f
 8013502:	d0f8      	beq.n	80134f6 <follow_path+0x16>
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b5c      	cmp	r3, #92	; 0x5c
 801350a:	d0f4      	beq.n	80134f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	2200      	movs	r2, #0
 8013510:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	2b1f      	cmp	r3, #31
 8013518:	d80a      	bhi.n	8013530 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2280      	movs	r2, #128	; 0x80
 801351e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013522:	2100      	movs	r1, #0
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff fcf9 	bl	8012f1c <dir_sdi>
 801352a:	4603      	mov	r3, r0
 801352c:	75fb      	strb	r3, [r7, #23]
 801352e:	e043      	b.n	80135b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013530:	463b      	mov	r3, r7
 8013532:	4619      	mov	r1, r3
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff ff3f 	bl	80133b8 <create_name>
 801353a:	4603      	mov	r3, r0
 801353c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801353e:	7dfb      	ldrb	r3, [r7, #23]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d134      	bne.n	80135ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7ff feaf 	bl	80132a8 <dir_find>
 801354a:	4603      	mov	r3, r0
 801354c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013554:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013556:	7dfb      	ldrb	r3, [r7, #23]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d00a      	beq.n	8013572 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801355c:	7dfb      	ldrb	r3, [r7, #23]
 801355e:	2b04      	cmp	r3, #4
 8013560:	d127      	bne.n	80135b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013562:	7afb      	ldrb	r3, [r7, #11]
 8013564:	f003 0304 	and.w	r3, r3, #4
 8013568:	2b00      	cmp	r3, #0
 801356a:	d122      	bne.n	80135b2 <follow_path+0xd2>
 801356c:	2305      	movs	r3, #5
 801356e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013570:	e01f      	b.n	80135b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013572:	7afb      	ldrb	r3, [r7, #11]
 8013574:	f003 0304 	and.w	r3, r3, #4
 8013578:	2b00      	cmp	r3, #0
 801357a:	d11c      	bne.n	80135b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801357c:	693b      	ldr	r3, [r7, #16]
 801357e:	799b      	ldrb	r3, [r3, #6]
 8013580:	f003 0310 	and.w	r3, r3, #16
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013588:	2305      	movs	r3, #5
 801358a:	75fb      	strb	r3, [r7, #23]
 801358c:	e014      	b.n	80135b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	695b      	ldr	r3, [r3, #20]
 8013598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801359c:	4413      	add	r3, r2
 801359e:	4619      	mov	r1, r3
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f7ff fe42 	bl	801322a <ld_clust>
 80135a6:	4602      	mov	r2, r0
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135ac:	e7c0      	b.n	8013530 <follow_path+0x50>
			if (res != FR_OK) break;
 80135ae:	bf00      	nop
 80135b0:	e002      	b.n	80135b8 <follow_path+0xd8>
				break;
 80135b2:	bf00      	nop
 80135b4:	e000      	b.n	80135b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135b6:	bf00      	nop
			}
		}
	}

	return res;
 80135b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3718      	adds	r7, #24
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}

080135c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80135c2:	b480      	push	{r7}
 80135c4:	b087      	sub	sp, #28
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80135ca:	f04f 33ff 	mov.w	r3, #4294967295
 80135ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d031      	beq.n	801363c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	617b      	str	r3, [r7, #20]
 80135de:	e002      	b.n	80135e6 <get_ldnumber+0x24>
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	3301      	adds	r3, #1
 80135e4:	617b      	str	r3, [r7, #20]
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b20      	cmp	r3, #32
 80135ec:	d903      	bls.n	80135f6 <get_ldnumber+0x34>
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	2b3a      	cmp	r3, #58	; 0x3a
 80135f4:	d1f4      	bne.n	80135e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	2b3a      	cmp	r3, #58	; 0x3a
 80135fc:	d11c      	bne.n	8013638 <get_ldnumber+0x76>
			tp = *path;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	1c5a      	adds	r2, r3, #1
 8013608:	60fa      	str	r2, [r7, #12]
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	3b30      	subs	r3, #48	; 0x30
 801360e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	2b09      	cmp	r3, #9
 8013614:	d80e      	bhi.n	8013634 <get_ldnumber+0x72>
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	429a      	cmp	r2, r3
 801361c:	d10a      	bne.n	8013634 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d107      	bne.n	8013634 <get_ldnumber+0x72>
					vol = (int)i;
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	3301      	adds	r3, #1
 801362c:	617b      	str	r3, [r7, #20]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	697a      	ldr	r2, [r7, #20]
 8013632:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	e002      	b.n	801363e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013638:	2300      	movs	r3, #0
 801363a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801363c:	693b      	ldr	r3, [r7, #16]
}
 801363e:	4618      	mov	r0, r3
 8013640:	371c      	adds	r7, #28
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr
	...

0801364c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	70da      	strb	r2, [r3, #3]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f04f 32ff 	mov.w	r2, #4294967295
 8013662:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013664:	6839      	ldr	r1, [r7, #0]
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f7ff f8d8 	bl	801281c <move_window>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <check_fs+0x2a>
 8013672:	2304      	movs	r3, #4
 8013674:	e038      	b.n	80136e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	3330      	adds	r3, #48	; 0x30
 801367a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801367e:	4618      	mov	r0, r3
 8013680:	f7fe fe1c 	bl	80122bc <ld_word>
 8013684:	4603      	mov	r3, r0
 8013686:	461a      	mov	r2, r3
 8013688:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801368c:	429a      	cmp	r2, r3
 801368e:	d001      	beq.n	8013694 <check_fs+0x48>
 8013690:	2303      	movs	r3, #3
 8013692:	e029      	b.n	80136e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801369a:	2be9      	cmp	r3, #233	; 0xe9
 801369c:	d009      	beq.n	80136b2 <check_fs+0x66>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136a4:	2beb      	cmp	r3, #235	; 0xeb
 80136a6:	d11e      	bne.n	80136e6 <check_fs+0x9a>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80136ae:	2b90      	cmp	r3, #144	; 0x90
 80136b0:	d119      	bne.n	80136e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	3330      	adds	r3, #48	; 0x30
 80136b6:	3336      	adds	r3, #54	; 0x36
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fe fe17 	bl	80122ec <ld_dword>
 80136be:	4603      	mov	r3, r0
 80136c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80136c4:	4a0a      	ldr	r2, [pc, #40]	; (80136f0 <check_fs+0xa4>)
 80136c6:	4293      	cmp	r3, r2
 80136c8:	d101      	bne.n	80136ce <check_fs+0x82>
 80136ca:	2300      	movs	r3, #0
 80136cc:	e00c      	b.n	80136e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	3330      	adds	r3, #48	; 0x30
 80136d2:	3352      	adds	r3, #82	; 0x52
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fe fe09 	bl	80122ec <ld_dword>
 80136da:	4603      	mov	r3, r0
 80136dc:	4a05      	ldr	r2, [pc, #20]	; (80136f4 <check_fs+0xa8>)
 80136de:	4293      	cmp	r3, r2
 80136e0:	d101      	bne.n	80136e6 <check_fs+0x9a>
 80136e2:	2300      	movs	r3, #0
 80136e4:	e000      	b.n	80136e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80136e6:	2302      	movs	r3, #2
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3708      	adds	r7, #8
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	00544146 	.word	0x00544146
 80136f4:	33544146 	.word	0x33544146

080136f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b096      	sub	sp, #88	; 0x58
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	4613      	mov	r3, r2
 8013704:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2200      	movs	r2, #0
 801370a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7ff ff58 	bl	80135c2 <get_ldnumber>
 8013712:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013716:	2b00      	cmp	r3, #0
 8013718:	da01      	bge.n	801371e <find_volume+0x26>
 801371a:	230b      	movs	r3, #11
 801371c:	e22e      	b.n	8013b7c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801371e:	4aa8      	ldr	r2, [pc, #672]	; (80139c0 <find_volume+0x2c8>)
 8013720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013726:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372a:	2b00      	cmp	r3, #0
 801372c:	d101      	bne.n	8013732 <find_volume+0x3a>
 801372e:	230c      	movs	r3, #12
 8013730:	e224      	b.n	8013b7c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013736:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013738:	79fb      	ldrb	r3, [r7, #7]
 801373a:	f023 0301 	bic.w	r3, r3, #1
 801373e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d01a      	beq.n	801377e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374a:	785b      	ldrb	r3, [r3, #1]
 801374c:	4618      	mov	r0, r3
 801374e:	f7fe fd17 	bl	8012180 <disk_status>
 8013752:	4603      	mov	r3, r0
 8013754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801375c:	f003 0301 	and.w	r3, r3, #1
 8013760:	2b00      	cmp	r3, #0
 8013762:	d10c      	bne.n	801377e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013764:	79fb      	ldrb	r3, [r7, #7]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d007      	beq.n	801377a <find_volume+0x82>
 801376a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801376e:	f003 0304 	and.w	r3, r3, #4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d001      	beq.n	801377a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013776:	230a      	movs	r3, #10
 8013778:	e200      	b.n	8013b7c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801377a:	2300      	movs	r3, #0
 801377c:	e1fe      	b.n	8013b7c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013780:	2200      	movs	r2, #0
 8013782:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013786:	b2da      	uxtb	r2, r3
 8013788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378e:	785b      	ldrb	r3, [r3, #1]
 8013790:	4618      	mov	r0, r3
 8013792:	f7fe fd0f 	bl	80121b4 <disk_initialize>
 8013796:	4603      	mov	r3, r0
 8013798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801379c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d001      	beq.n	80137ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80137a8:	2303      	movs	r3, #3
 80137aa:	e1e7      	b.n	8013b7c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d007      	beq.n	80137c2 <find_volume+0xca>
 80137b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137b6:	f003 0304 	and.w	r3, r3, #4
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d001      	beq.n	80137c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80137be:	230a      	movs	r3, #10
 80137c0:	e1dc      	b.n	8013b7c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80137c2:	2300      	movs	r3, #0
 80137c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80137c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80137c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80137ca:	f7ff ff3f 	bl	801364c <check_fs>
 80137ce:	4603      	mov	r3, r0
 80137d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80137d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80137d8:	2b02      	cmp	r3, #2
 80137da:	d14b      	bne.n	8013874 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80137dc:	2300      	movs	r3, #0
 80137de:	643b      	str	r3, [r7, #64]	; 0x40
 80137e0:	e01f      	b.n	8013822 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80137e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80137e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ea:	011b      	lsls	r3, r3, #4
 80137ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80137f0:	4413      	add	r3, r2
 80137f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80137f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f6:	3304      	adds	r3, #4
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d006      	beq.n	801380c <find_volume+0x114>
 80137fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013800:	3308      	adds	r3, #8
 8013802:	4618      	mov	r0, r3
 8013804:	f7fe fd72 	bl	80122ec <ld_dword>
 8013808:	4602      	mov	r2, r0
 801380a:	e000      	b.n	801380e <find_volume+0x116>
 801380c:	2200      	movs	r2, #0
 801380e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013816:	440b      	add	r3, r1
 8013818:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801381e:	3301      	adds	r3, #1
 8013820:	643b      	str	r3, [r7, #64]	; 0x40
 8013822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013824:	2b03      	cmp	r3, #3
 8013826:	d9dc      	bls.n	80137e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013828:	2300      	movs	r3, #0
 801382a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801382c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801382e:	2b00      	cmp	r3, #0
 8013830:	d002      	beq.n	8013838 <find_volume+0x140>
 8013832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013834:	3b01      	subs	r3, #1
 8013836:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013840:	4413      	add	r3, r2
 8013842:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013846:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801384a:	2b00      	cmp	r3, #0
 801384c:	d005      	beq.n	801385a <find_volume+0x162>
 801384e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013852:	f7ff fefb 	bl	801364c <check_fs>
 8013856:	4603      	mov	r3, r0
 8013858:	e000      	b.n	801385c <find_volume+0x164>
 801385a:	2303      	movs	r3, #3
 801385c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013864:	2b01      	cmp	r3, #1
 8013866:	d905      	bls.n	8013874 <find_volume+0x17c>
 8013868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801386a:	3301      	adds	r3, #1
 801386c:	643b      	str	r3, [r7, #64]	; 0x40
 801386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013870:	2b03      	cmp	r3, #3
 8013872:	d9e1      	bls.n	8013838 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013878:	2b04      	cmp	r3, #4
 801387a:	d101      	bne.n	8013880 <find_volume+0x188>
 801387c:	2301      	movs	r3, #1
 801387e:	e17d      	b.n	8013b7c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013884:	2b01      	cmp	r3, #1
 8013886:	d901      	bls.n	801388c <find_volume+0x194>
 8013888:	230d      	movs	r3, #13
 801388a:	e177      	b.n	8013b7c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388e:	3330      	adds	r3, #48	; 0x30
 8013890:	330b      	adds	r3, #11
 8013892:	4618      	mov	r0, r3
 8013894:	f7fe fd12 	bl	80122bc <ld_word>
 8013898:	4603      	mov	r3, r0
 801389a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801389e:	d001      	beq.n	80138a4 <find_volume+0x1ac>
 80138a0:	230d      	movs	r3, #13
 80138a2:	e16b      	b.n	8013b7c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a6:	3330      	adds	r3, #48	; 0x30
 80138a8:	3316      	adds	r3, #22
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7fe fd06 	bl	80122bc <ld_word>
 80138b0:	4603      	mov	r3, r0
 80138b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80138b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d106      	bne.n	80138c8 <find_volume+0x1d0>
 80138ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138bc:	3330      	adds	r3, #48	; 0x30
 80138be:	3324      	adds	r3, #36	; 0x24
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fe fd13 	bl	80122ec <ld_dword>
 80138c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80138c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80138cc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80138ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138d0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80138d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80138d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138da:	789b      	ldrb	r3, [r3, #2]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d005      	beq.n	80138ec <find_volume+0x1f4>
 80138e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e2:	789b      	ldrb	r3, [r3, #2]
 80138e4:	2b02      	cmp	r3, #2
 80138e6:	d001      	beq.n	80138ec <find_volume+0x1f4>
 80138e8:	230d      	movs	r3, #13
 80138ea:	e147      	b.n	8013b7c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80138ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ee:	789b      	ldrb	r3, [r3, #2]
 80138f0:	461a      	mov	r2, r3
 80138f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138f4:	fb02 f303 	mul.w	r3, r2, r3
 80138f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80138fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013900:	b29a      	uxth	r2, r3
 8013902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013904:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013908:	895b      	ldrh	r3, [r3, #10]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d008      	beq.n	8013920 <find_volume+0x228>
 801390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013910:	895b      	ldrh	r3, [r3, #10]
 8013912:	461a      	mov	r2, r3
 8013914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013916:	895b      	ldrh	r3, [r3, #10]
 8013918:	3b01      	subs	r3, #1
 801391a:	4013      	ands	r3, r2
 801391c:	2b00      	cmp	r3, #0
 801391e:	d001      	beq.n	8013924 <find_volume+0x22c>
 8013920:	230d      	movs	r3, #13
 8013922:	e12b      	b.n	8013b7c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013926:	3330      	adds	r3, #48	; 0x30
 8013928:	3311      	adds	r3, #17
 801392a:	4618      	mov	r0, r3
 801392c:	f7fe fcc6 	bl	80122bc <ld_word>
 8013930:	4603      	mov	r3, r0
 8013932:	461a      	mov	r2, r3
 8013934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013936:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393a:	891b      	ldrh	r3, [r3, #8]
 801393c:	f003 030f 	and.w	r3, r3, #15
 8013940:	b29b      	uxth	r3, r3
 8013942:	2b00      	cmp	r3, #0
 8013944:	d001      	beq.n	801394a <find_volume+0x252>
 8013946:	230d      	movs	r3, #13
 8013948:	e118      	b.n	8013b7c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394c:	3330      	adds	r3, #48	; 0x30
 801394e:	3313      	adds	r3, #19
 8013950:	4618      	mov	r0, r3
 8013952:	f7fe fcb3 	bl	80122bc <ld_word>
 8013956:	4603      	mov	r3, r0
 8013958:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801395c:	2b00      	cmp	r3, #0
 801395e:	d106      	bne.n	801396e <find_volume+0x276>
 8013960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013962:	3330      	adds	r3, #48	; 0x30
 8013964:	3320      	adds	r3, #32
 8013966:	4618      	mov	r0, r3
 8013968:	f7fe fcc0 	bl	80122ec <ld_dword>
 801396c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013970:	3330      	adds	r3, #48	; 0x30
 8013972:	330e      	adds	r3, #14
 8013974:	4618      	mov	r0, r3
 8013976:	f7fe fca1 	bl	80122bc <ld_word>
 801397a:	4603      	mov	r3, r0
 801397c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801397e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013980:	2b00      	cmp	r3, #0
 8013982:	d101      	bne.n	8013988 <find_volume+0x290>
 8013984:	230d      	movs	r3, #13
 8013986:	e0f9      	b.n	8013b7c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801398c:	4413      	add	r3, r2
 801398e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013990:	8912      	ldrh	r2, [r2, #8]
 8013992:	0912      	lsrs	r2, r2, #4
 8013994:	b292      	uxth	r2, r2
 8013996:	4413      	add	r3, r2
 8013998:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801399a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	429a      	cmp	r2, r3
 80139a0:	d201      	bcs.n	80139a6 <find_volume+0x2ae>
 80139a2:	230d      	movs	r3, #13
 80139a4:	e0ea      	b.n	8013b7c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80139a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139aa:	1ad3      	subs	r3, r2, r3
 80139ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139ae:	8952      	ldrh	r2, [r2, #10]
 80139b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80139b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80139b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d103      	bne.n	80139c4 <find_volume+0x2cc>
 80139bc:	230d      	movs	r3, #13
 80139be:	e0dd      	b.n	8013b7c <find_volume+0x484>
 80139c0:	20000948 	.word	0x20000948
		fmt = FS_FAT32;
 80139c4:	2303      	movs	r3, #3
 80139c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80139ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d802      	bhi.n	80139da <find_volume+0x2e2>
 80139d4:	2302      	movs	r3, #2
 80139d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80139da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d802      	bhi.n	80139ea <find_volume+0x2f2>
 80139e4:	2301      	movs	r3, #1
 80139e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80139ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ec:	1c9a      	adds	r2, r3, #2
 80139ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80139f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139f6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80139f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139fc:	441a      	add	r2, r3
 80139fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a00:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	441a      	add	r2, r3
 8013a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a10:	2b03      	cmp	r3, #3
 8013a12:	d11e      	bne.n	8013a52 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a16:	3330      	adds	r3, #48	; 0x30
 8013a18:	332a      	adds	r3, #42	; 0x2a
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fe fc4e 	bl	80122bc <ld_word>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d001      	beq.n	8013a2a <find_volume+0x332>
 8013a26:	230d      	movs	r3, #13
 8013a28:	e0a8      	b.n	8013b7c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2c:	891b      	ldrh	r3, [r3, #8]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <find_volume+0x33e>
 8013a32:	230d      	movs	r3, #13
 8013a34:	e0a2      	b.n	8013b7c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a38:	3330      	adds	r3, #48	; 0x30
 8013a3a:	332c      	adds	r3, #44	; 0x2c
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fe fc55 	bl	80122ec <ld_dword>
 8013a42:	4602      	mov	r2, r0
 8013a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a46:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	009b      	lsls	r3, r3, #2
 8013a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8013a50:	e01f      	b.n	8013a92 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a54:	891b      	ldrh	r3, [r3, #8]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <find_volume+0x366>
 8013a5a:	230d      	movs	r3, #13
 8013a5c:	e08e      	b.n	8013b7c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a60:	6a1a      	ldr	r2, [r3, #32]
 8013a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a64:	441a      	add	r2, r3
 8013a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a68:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a6e:	2b02      	cmp	r3, #2
 8013a70:	d103      	bne.n	8013a7a <find_volume+0x382>
 8013a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a74:	695b      	ldr	r3, [r3, #20]
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	e00a      	b.n	8013a90 <find_volume+0x398>
 8013a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7c:	695a      	ldr	r2, [r3, #20]
 8013a7e:	4613      	mov	r3, r2
 8013a80:	005b      	lsls	r3, r3, #1
 8013a82:	4413      	add	r3, r2
 8013a84:	085a      	lsrs	r2, r3, #1
 8013a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a88:	695b      	ldr	r3, [r3, #20]
 8013a8a:	f003 0301 	and.w	r3, r3, #1
 8013a8e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013a90:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a94:	699a      	ldr	r2, [r3, #24]
 8013a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013a9c:	0a5b      	lsrs	r3, r3, #9
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d201      	bcs.n	8013aa6 <find_volume+0x3ae>
 8013aa2:	230d      	movs	r3, #13
 8013aa4:	e06a      	b.n	8013b7c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8013aac:	611a      	str	r2, [r3, #16]
 8013aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab0:	691a      	ldr	r2, [r3, #16]
 8013ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab8:	2280      	movs	r2, #128	; 0x80
 8013aba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ac0:	2b03      	cmp	r3, #3
 8013ac2:	d149      	bne.n	8013b58 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac6:	3330      	adds	r3, #48	; 0x30
 8013ac8:	3330      	adds	r3, #48	; 0x30
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7fe fbf6 	bl	80122bc <ld_word>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d140      	bne.n	8013b58 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad8:	3301      	adds	r3, #1
 8013ada:	4619      	mov	r1, r3
 8013adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ade:	f7fe fe9d 	bl	801281c <move_window>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d137      	bne.n	8013b58 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aea:	2200      	movs	r2, #0
 8013aec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	3330      	adds	r3, #48	; 0x30
 8013af2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fe fbe0 	bl	80122bc <ld_word>
 8013afc:	4603      	mov	r3, r0
 8013afe:	461a      	mov	r2, r3
 8013b00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d127      	bne.n	8013b58 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0a:	3330      	adds	r3, #48	; 0x30
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fe fbed 	bl	80122ec <ld_dword>
 8013b12:	4603      	mov	r3, r0
 8013b14:	4a1b      	ldr	r2, [pc, #108]	; (8013b84 <find_volume+0x48c>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d11e      	bne.n	8013b58 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1c:	3330      	adds	r3, #48	; 0x30
 8013b1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fe fbe2 	bl	80122ec <ld_dword>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	4a17      	ldr	r2, [pc, #92]	; (8013b88 <find_volume+0x490>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d113      	bne.n	8013b58 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b32:	3330      	adds	r3, #48	; 0x30
 8013b34:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fe fbd7 	bl	80122ec <ld_dword>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b42:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b46:	3330      	adds	r3, #48	; 0x30
 8013b48:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fe fbcd 	bl	80122ec <ld_dword>
 8013b52:	4602      	mov	r2, r0
 8013b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b56:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013b5e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013b60:	4b0a      	ldr	r3, [pc, #40]	; (8013b8c <find_volume+0x494>)
 8013b62:	881b      	ldrh	r3, [r3, #0]
 8013b64:	3301      	adds	r3, #1
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	4b08      	ldr	r3, [pc, #32]	; (8013b8c <find_volume+0x494>)
 8013b6a:	801a      	strh	r2, [r3, #0]
 8013b6c:	4b07      	ldr	r3, [pc, #28]	; (8013b8c <find_volume+0x494>)
 8013b6e:	881a      	ldrh	r2, [r3, #0]
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b76:	f7fe fde9 	bl	801274c <clear_lock>
#endif
	return FR_OK;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3758      	adds	r7, #88	; 0x58
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	41615252 	.word	0x41615252
 8013b88:	61417272 	.word	0x61417272
 8013b8c:	2000094c 	.word	0x2000094c

08013b90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013b9a:	2309      	movs	r3, #9
 8013b9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d01c      	beq.n	8013bde <validate+0x4e>
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d018      	beq.n	8013bde <validate+0x4e>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	781b      	ldrb	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d013      	beq.n	8013bde <validate+0x4e>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	889a      	ldrh	r2, [r3, #4]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	88db      	ldrh	r3, [r3, #6]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d10c      	bne.n	8013bde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	785b      	ldrb	r3, [r3, #1]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7fe fad8 	bl	8012180 <disk_status>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	f003 0301 	and.w	r3, r3, #1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <validate+0x4e>
			res = FR_OK;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013bde:	7bfb      	ldrb	r3, [r7, #15]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d102      	bne.n	8013bea <validate+0x5a>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	e000      	b.n	8013bec <validate+0x5c>
 8013bea:	2300      	movs	r3, #0
 8013bec:	683a      	ldr	r2, [r7, #0]
 8013bee:	6013      	str	r3, [r2, #0]
	return res;
 8013bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
	...

08013bfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b088      	sub	sp, #32
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	4613      	mov	r3, r2
 8013c08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c0e:	f107 0310 	add.w	r3, r7, #16
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7ff fcd5 	bl	80135c2 <get_ldnumber>
 8013c18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	da01      	bge.n	8013c24 <f_mount+0x28>
 8013c20:	230b      	movs	r3, #11
 8013c22:	e02b      	b.n	8013c7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c24:	4a17      	ldr	r2, [pc, #92]	; (8013c84 <f_mount+0x88>)
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013c2e:	69bb      	ldr	r3, [r7, #24]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d005      	beq.n	8013c40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013c34:	69b8      	ldr	r0, [r7, #24]
 8013c36:	f7fe fd89 	bl	801274c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d002      	beq.n	8013c4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	490d      	ldr	r1, [pc, #52]	; (8013c84 <f_mount+0x88>)
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d002      	beq.n	8013c62 <f_mount+0x66>
 8013c5c:	79fb      	ldrb	r3, [r7, #7]
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	d001      	beq.n	8013c66 <f_mount+0x6a>
 8013c62:	2300      	movs	r3, #0
 8013c64:	e00a      	b.n	8013c7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013c66:	f107 010c 	add.w	r1, r7, #12
 8013c6a:	f107 0308 	add.w	r3, r7, #8
 8013c6e:	2200      	movs	r2, #0
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff fd41 	bl	80136f8 <find_volume>
 8013c76:	4603      	mov	r3, r0
 8013c78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3720      	adds	r7, #32
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	20000948 	.word	0x20000948

08013c88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b098      	sub	sp, #96	; 0x60
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	4613      	mov	r3, r2
 8013c94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d101      	bne.n	8013ca0 <f_open+0x18>
 8013c9c:	2309      	movs	r3, #9
 8013c9e:	e1ad      	b.n	8013ffc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013ca0:	79fb      	ldrb	r3, [r7, #7]
 8013ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ca6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013ca8:	79fa      	ldrb	r2, [r7, #7]
 8013caa:	f107 0110 	add.w	r1, r7, #16
 8013cae:	f107 0308 	add.w	r3, r7, #8
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7ff fd20 	bl	80136f8 <find_volume>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f040 8191 	bne.w	8013fea <f_open+0x362>
		dj.obj.fs = fs;
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ccc:	68ba      	ldr	r2, [r7, #8]
 8013cce:	f107 0314 	add.w	r3, r7, #20
 8013cd2:	4611      	mov	r1, r2
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff fc03 	bl	80134e0 <follow_path>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d11a      	bne.n	8013d1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013ce8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013cec:	b25b      	sxtb	r3, r3
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	da03      	bge.n	8013cfa <f_open+0x72>
				res = FR_INVALID_NAME;
 8013cf2:	2306      	movs	r3, #6
 8013cf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013cf8:	e011      	b.n	8013d1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013cfa:	79fb      	ldrb	r3, [r7, #7]
 8013cfc:	f023 0301 	bic.w	r3, r3, #1
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	bf14      	ite	ne
 8013d04:	2301      	movne	r3, #1
 8013d06:	2300      	moveq	r3, #0
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	f107 0314 	add.w	r3, r7, #20
 8013d10:	4611      	mov	r1, r2
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7fe fbd2 	bl	80124bc <chk_lock>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d1e:	79fb      	ldrb	r3, [r7, #7]
 8013d20:	f003 031c 	and.w	r3, r3, #28
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d07f      	beq.n	8013e28 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d017      	beq.n	8013d60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d34:	2b04      	cmp	r3, #4
 8013d36:	d10e      	bne.n	8013d56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013d38:	f7fe fc1c 	bl	8012574 <enq_lock>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d006      	beq.n	8013d50 <f_open+0xc8>
 8013d42:	f107 0314 	add.w	r3, r7, #20
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7ff fb03 	bl	8013352 <dir_register>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	e000      	b.n	8013d52 <f_open+0xca>
 8013d50:	2312      	movs	r3, #18
 8013d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d56:	79fb      	ldrb	r3, [r7, #7]
 8013d58:	f043 0308 	orr.w	r3, r3, #8
 8013d5c:	71fb      	strb	r3, [r7, #7]
 8013d5e:	e010      	b.n	8013d82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013d60:	7ebb      	ldrb	r3, [r7, #26]
 8013d62:	f003 0311 	and.w	r3, r3, #17
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d003      	beq.n	8013d72 <f_open+0xea>
					res = FR_DENIED;
 8013d6a:	2307      	movs	r3, #7
 8013d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013d70:	e007      	b.n	8013d82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013d72:	79fb      	ldrb	r3, [r7, #7]
 8013d74:	f003 0304 	and.w	r3, r3, #4
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d002      	beq.n	8013d82 <f_open+0xfa>
 8013d7c:	2308      	movs	r3, #8
 8013d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d168      	bne.n	8013e5c <f_open+0x1d4>
 8013d8a:	79fb      	ldrb	r3, [r7, #7]
 8013d8c:	f003 0308 	and.w	r3, r3, #8
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d063      	beq.n	8013e5c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013d94:	f7fe f92c 	bl	8011ff0 <get_fattime>
 8013d98:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d9c:	330e      	adds	r3, #14
 8013d9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fe fae1 	bl	8012368 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013da8:	3316      	adds	r3, #22
 8013daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fe fadb 	bl	8012368 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013db4:	330b      	adds	r3, #11
 8013db6:	2220      	movs	r2, #32
 8013db8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7ff fa32 	bl	801322a <ld_clust>
 8013dc6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013dcc:	2200      	movs	r2, #0
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7ff fa4a 	bl	8013268 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dd6:	331c      	adds	r3, #28
 8013dd8:	2100      	movs	r1, #0
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fe fac4 	bl	8012368 <st_dword>
					fs->wflag = 1;
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	2201      	movs	r2, #1
 8013de4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d037      	beq.n	8013e5c <f_open+0x1d4>
						dw = fs->winsect;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013df2:	f107 0314 	add.w	r3, r7, #20
 8013df6:	2200      	movs	r2, #0
 8013df8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fe ff5d 	bl	8012cba <remove_chain>
 8013e00:	4603      	mov	r3, r0
 8013e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013e06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d126      	bne.n	8013e5c <f_open+0x1d4>
							res = move_window(fs, dw);
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fe fd02 	bl	801281c <move_window>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e22:	3a01      	subs	r2, #1
 8013e24:	60da      	str	r2, [r3, #12]
 8013e26:	e019      	b.n	8013e5c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d115      	bne.n	8013e5c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e30:	7ebb      	ldrb	r3, [r7, #26]
 8013e32:	f003 0310 	and.w	r3, r3, #16
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d003      	beq.n	8013e42 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013e3a:	2304      	movs	r3, #4
 8013e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013e40:	e00c      	b.n	8013e5c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e42:	79fb      	ldrb	r3, [r7, #7]
 8013e44:	f003 0302 	and.w	r3, r3, #2
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d007      	beq.n	8013e5c <f_open+0x1d4>
 8013e4c:	7ebb      	ldrb	r3, [r7, #26]
 8013e4e:	f003 0301 	and.w	r3, r3, #1
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d002      	beq.n	8013e5c <f_open+0x1d4>
						res = FR_DENIED;
 8013e56:	2307      	movs	r3, #7
 8013e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d128      	bne.n	8013eb6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013e64:	79fb      	ldrb	r3, [r7, #7]
 8013e66:	f003 0308 	and.w	r3, r3, #8
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d003      	beq.n	8013e76 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013e6e:	79fb      	ldrb	r3, [r7, #7]
 8013e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013e84:	79fb      	ldrb	r3, [r7, #7]
 8013e86:	f023 0301 	bic.w	r3, r3, #1
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	bf14      	ite	ne
 8013e8e:	2301      	movne	r3, #1
 8013e90:	2300      	moveq	r3, #0
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	461a      	mov	r2, r3
 8013e96:	f107 0314 	add.w	r3, r7, #20
 8013e9a:	4611      	mov	r1, r2
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7fe fb8b 	bl	80125b8 <inc_lock>
 8013ea2:	4602      	mov	r2, r0
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d102      	bne.n	8013eb6 <f_open+0x22e>
 8013eb0:	2302      	movs	r3, #2
 8013eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f040 8095 	bne.w	8013fea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7ff f9af 	bl	801322a <ld_clust>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ed4:	331c      	adds	r3, #28
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fe fa08 	bl	80122ec <ld_dword>
 8013edc:	4602      	mov	r2, r0
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013ee8:	693a      	ldr	r2, [r7, #16]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	88da      	ldrh	r2, [r3, #6]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	79fa      	ldrb	r2, [r7, #7]
 8013efa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2200      	movs	r2, #0
 8013f00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2200      	movs	r2, #0
 8013f06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	3330      	adds	r3, #48	; 0x30
 8013f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f16:	2100      	movs	r1, #0
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7fe fa72 	bl	8012402 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f1e:	79fb      	ldrb	r3, [r7, #7]
 8013f20:	f003 0320 	and.w	r3, r3, #32
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d060      	beq.n	8013fea <f_open+0x362>
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d05c      	beq.n	8013fea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	68da      	ldr	r2, [r3, #12]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	895b      	ldrh	r3, [r3, #10]
 8013f3c:	025b      	lsls	r3, r3, #9
 8013f3e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	689b      	ldr	r3, [r3, #8]
 8013f44:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8013f4c:	e016      	b.n	8013f7c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7fe fd1d 	bl	8012992 <get_fat>
 8013f58:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f5c:	2b01      	cmp	r3, #1
 8013f5e:	d802      	bhi.n	8013f66 <f_open+0x2de>
 8013f60:	2302      	movs	r3, #2
 8013f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f6c:	d102      	bne.n	8013f74 <f_open+0x2ec>
 8013f6e:	2301      	movs	r3, #1
 8013f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8013f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d103      	bne.n	8013f8c <f_open+0x304>
 8013f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d8e0      	bhi.n	8013f4e <f_open+0x2c6>
				}
				fp->clust = clst;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013f90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d127      	bne.n	8013fea <f_open+0x362>
 8013f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d022      	beq.n	8013fea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7fe fcd3 	bl	8012954 <clust2sect>
 8013fae:	6478      	str	r0, [r7, #68]	; 0x44
 8013fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d103      	bne.n	8013fbe <f_open+0x336>
						res = FR_INT_ERR;
 8013fb6:	2302      	movs	r3, #2
 8013fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013fbc:	e015      	b.n	8013fea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fc0:	0a5a      	lsrs	r2, r3, #9
 8013fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fc4:	441a      	add	r2, r3
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	7858      	ldrb	r0, [r3, #1]
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	6a1a      	ldr	r2, [r3, #32]
 8013fd8:	2301      	movs	r3, #1
 8013fda:	f7fe f911 	bl	8012200 <disk_read>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d002      	beq.n	8013fea <f_open+0x362>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d002      	beq.n	8013ff8 <f_open+0x370>
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3760      	adds	r7, #96	; 0x60
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b08e      	sub	sp, #56	; 0x38
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
 8014010:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	2200      	movs	r2, #0
 801401a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f107 0214 	add.w	r2, r7, #20
 8014022:	4611      	mov	r1, r2
 8014024:	4618      	mov	r0, r3
 8014026:	f7ff fdb3 	bl	8013b90 <validate>
 801402a:	4603      	mov	r3, r0
 801402c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014034:	2b00      	cmp	r3, #0
 8014036:	d107      	bne.n	8014048 <f_read+0x44>
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	7d5b      	ldrb	r3, [r3, #21]
 801403c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014044:	2b00      	cmp	r3, #0
 8014046:	d002      	beq.n	801404e <f_read+0x4a>
 8014048:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801404c:	e115      	b.n	801427a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	7d1b      	ldrb	r3, [r3, #20]
 8014052:	f003 0301 	and.w	r3, r3, #1
 8014056:	2b00      	cmp	r3, #0
 8014058:	d101      	bne.n	801405e <f_read+0x5a>
 801405a:	2307      	movs	r3, #7
 801405c:	e10d      	b.n	801427a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	68da      	ldr	r2, [r3, #12]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	699b      	ldr	r3, [r3, #24]
 8014066:	1ad3      	subs	r3, r2, r3
 8014068:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	6a3b      	ldr	r3, [r7, #32]
 801406e:	429a      	cmp	r2, r3
 8014070:	f240 80fe 	bls.w	8014270 <f_read+0x26c>
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014078:	e0fa      	b.n	8014270 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	699b      	ldr	r3, [r3, #24]
 801407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014082:	2b00      	cmp	r3, #0
 8014084:	f040 80c6 	bne.w	8014214 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	699b      	ldr	r3, [r3, #24]
 801408c:	0a5b      	lsrs	r3, r3, #9
 801408e:	697a      	ldr	r2, [r7, #20]
 8014090:	8952      	ldrh	r2, [r2, #10]
 8014092:	3a01      	subs	r2, #1
 8014094:	4013      	ands	r3, r2
 8014096:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014098:	69fb      	ldr	r3, [r7, #28]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d12f      	bne.n	80140fe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	699b      	ldr	r3, [r3, #24]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d103      	bne.n	80140ae <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	689b      	ldr	r3, [r3, #8]
 80140aa:	633b      	str	r3, [r7, #48]	; 0x30
 80140ac:	e013      	b.n	80140d6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d007      	beq.n	80140c6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	699b      	ldr	r3, [r3, #24]
 80140ba:	4619      	mov	r1, r3
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7fe fef9 	bl	8012eb4 <clmt_clust>
 80140c2:	6338      	str	r0, [r7, #48]	; 0x30
 80140c4:	e007      	b.n	80140d6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80140c6:	68fa      	ldr	r2, [r7, #12]
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	69db      	ldr	r3, [r3, #28]
 80140cc:	4619      	mov	r1, r3
 80140ce:	4610      	mov	r0, r2
 80140d0:	f7fe fc5f 	bl	8012992 <get_fat>
 80140d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80140d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d804      	bhi.n	80140e6 <f_read+0xe2>
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2202      	movs	r2, #2
 80140e0:	755a      	strb	r2, [r3, #21]
 80140e2:	2302      	movs	r3, #2
 80140e4:	e0c9      	b.n	801427a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ec:	d104      	bne.n	80140f8 <f_read+0xf4>
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2201      	movs	r2, #1
 80140f2:	755a      	strb	r2, [r3, #21]
 80140f4:	2301      	movs	r3, #1
 80140f6:	e0c0      	b.n	801427a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80140fe:	697a      	ldr	r2, [r7, #20]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	69db      	ldr	r3, [r3, #28]
 8014104:	4619      	mov	r1, r3
 8014106:	4610      	mov	r0, r2
 8014108:	f7fe fc24 	bl	8012954 <clust2sect>
 801410c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d104      	bne.n	801411e <f_read+0x11a>
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	2202      	movs	r2, #2
 8014118:	755a      	strb	r2, [r3, #21]
 801411a:	2302      	movs	r3, #2
 801411c:	e0ad      	b.n	801427a <f_read+0x276>
			sect += csect;
 801411e:	69ba      	ldr	r2, [r7, #24]
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	4413      	add	r3, r2
 8014124:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	0a5b      	lsrs	r3, r3, #9
 801412a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412e:	2b00      	cmp	r3, #0
 8014130:	d039      	beq.n	80141a6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014132:	69fa      	ldr	r2, [r7, #28]
 8014134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014136:	4413      	add	r3, r2
 8014138:	697a      	ldr	r2, [r7, #20]
 801413a:	8952      	ldrh	r2, [r2, #10]
 801413c:	4293      	cmp	r3, r2
 801413e:	d905      	bls.n	801414c <f_read+0x148>
					cc = fs->csize - csect;
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	895b      	ldrh	r3, [r3, #10]
 8014144:	461a      	mov	r2, r3
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	7858      	ldrb	r0, [r3, #1]
 8014150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014152:	69ba      	ldr	r2, [r7, #24]
 8014154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014156:	f7fe f853 	bl	8012200 <disk_read>
 801415a:	4603      	mov	r3, r0
 801415c:	2b00      	cmp	r3, #0
 801415e:	d004      	beq.n	801416a <f_read+0x166>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2201      	movs	r2, #1
 8014164:	755a      	strb	r2, [r3, #21]
 8014166:	2301      	movs	r3, #1
 8014168:	e087      	b.n	801427a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	7d1b      	ldrb	r3, [r3, #20]
 801416e:	b25b      	sxtb	r3, r3
 8014170:	2b00      	cmp	r3, #0
 8014172:	da14      	bge.n	801419e <f_read+0x19a>
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	6a1a      	ldr	r2, [r3, #32]
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801417e:	429a      	cmp	r2, r3
 8014180:	d90d      	bls.n	801419e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6a1a      	ldr	r2, [r3, #32]
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	025b      	lsls	r3, r3, #9
 801418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801418e:	18d0      	adds	r0, r2, r3
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	3330      	adds	r3, #48	; 0x30
 8014194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014198:	4619      	mov	r1, r3
 801419a:	f7fe f911 	bl	80123c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a0:	025b      	lsls	r3, r3, #9
 80141a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80141a4:	e050      	b.n	8014248 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6a1b      	ldr	r3, [r3, #32]
 80141aa:	69ba      	ldr	r2, [r7, #24]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d02e      	beq.n	801420e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	7d1b      	ldrb	r3, [r3, #20]
 80141b4:	b25b      	sxtb	r3, r3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	da18      	bge.n	80141ec <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	7858      	ldrb	r0, [r3, #1]
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	6a1a      	ldr	r2, [r3, #32]
 80141c8:	2301      	movs	r3, #1
 80141ca:	f7fe f839 	bl	8012240 <disk_write>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d004      	beq.n	80141de <f_read+0x1da>
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	2201      	movs	r2, #1
 80141d8:	755a      	strb	r2, [r3, #21]
 80141da:	2301      	movs	r3, #1
 80141dc:	e04d      	b.n	801427a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	7d1b      	ldrb	r3, [r3, #20]
 80141e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141e6:	b2da      	uxtb	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	7858      	ldrb	r0, [r3, #1]
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141f6:	2301      	movs	r3, #1
 80141f8:	69ba      	ldr	r2, [r7, #24]
 80141fa:	f7fe f801 	bl	8012200 <disk_read>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d004      	beq.n	801420e <f_read+0x20a>
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2201      	movs	r2, #1
 8014208:	755a      	strb	r2, [r3, #21]
 801420a:	2301      	movs	r3, #1
 801420c:	e035      	b.n	801427a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	69ba      	ldr	r2, [r7, #24]
 8014212:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	699b      	ldr	r3, [r3, #24]
 8014218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801421c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014220:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	429a      	cmp	r2, r3
 8014228:	d901      	bls.n	801422e <f_read+0x22a>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	699b      	ldr	r3, [r3, #24]
 8014238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801423c:	4413      	add	r3, r2
 801423e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014240:	4619      	mov	r1, r3
 8014242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014244:	f7fe f8bc 	bl	80123c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424c:	4413      	add	r3, r2
 801424e:	627b      	str	r3, [r7, #36]	; 0x24
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	699a      	ldr	r2, [r3, #24]
 8014254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014256:	441a      	add	r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	619a      	str	r2, [r3, #24]
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014262:	441a      	add	r2, r3
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	601a      	str	r2, [r3, #0]
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	f47f af01 	bne.w	801407a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014278:	2300      	movs	r3, #0
}
 801427a:	4618      	mov	r0, r3
 801427c:	3738      	adds	r7, #56	; 0x38
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b08c      	sub	sp, #48	; 0x30
 8014286:	af00      	add	r7, sp, #0
 8014288:	60f8      	str	r0, [r7, #12]
 801428a:	60b9      	str	r1, [r7, #8]
 801428c:	607a      	str	r2, [r7, #4]
 801428e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	2200      	movs	r2, #0
 8014298:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	f107 0210 	add.w	r2, r7, #16
 80142a0:	4611      	mov	r1, r2
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7ff fc74 	bl	8013b90 <validate>
 80142a8:	4603      	mov	r3, r0
 80142aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80142ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d107      	bne.n	80142c6 <f_write+0x44>
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	7d5b      	ldrb	r3, [r3, #21]
 80142ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80142be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d002      	beq.n	80142cc <f_write+0x4a>
 80142c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142ca:	e14b      	b.n	8014564 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	7d1b      	ldrb	r3, [r3, #20]
 80142d0:	f003 0302 	and.w	r3, r3, #2
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d101      	bne.n	80142dc <f_write+0x5a>
 80142d8:	2307      	movs	r3, #7
 80142da:	e143      	b.n	8014564 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	699a      	ldr	r2, [r3, #24]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	441a      	add	r2, r3
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	f080 812d 	bcs.w	8014548 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	699b      	ldr	r3, [r3, #24]
 80142f2:	43db      	mvns	r3, r3
 80142f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80142f6:	e127      	b.n	8014548 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	699b      	ldr	r3, [r3, #24]
 80142fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014300:	2b00      	cmp	r3, #0
 8014302:	f040 80e3 	bne.w	80144cc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	699b      	ldr	r3, [r3, #24]
 801430a:	0a5b      	lsrs	r3, r3, #9
 801430c:	693a      	ldr	r2, [r7, #16]
 801430e:	8952      	ldrh	r2, [r2, #10]
 8014310:	3a01      	subs	r2, #1
 8014312:	4013      	ands	r3, r2
 8014314:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d143      	bne.n	80143a4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	699b      	ldr	r3, [r3, #24]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10c      	bne.n	801433e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	689b      	ldr	r3, [r3, #8]
 8014328:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432c:	2b00      	cmp	r3, #0
 801432e:	d11a      	bne.n	8014366 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2100      	movs	r1, #0
 8014334:	4618      	mov	r0, r3
 8014336:	f7fe fd25 	bl	8012d84 <create_chain>
 801433a:	62b8      	str	r0, [r7, #40]	; 0x28
 801433c:	e013      	b.n	8014366 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014342:	2b00      	cmp	r3, #0
 8014344:	d007      	beq.n	8014356 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	699b      	ldr	r3, [r3, #24]
 801434a:	4619      	mov	r1, r3
 801434c:	68f8      	ldr	r0, [r7, #12]
 801434e:	f7fe fdb1 	bl	8012eb4 <clmt_clust>
 8014352:	62b8      	str	r0, [r7, #40]	; 0x28
 8014354:	e007      	b.n	8014366 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014356:	68fa      	ldr	r2, [r7, #12]
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	69db      	ldr	r3, [r3, #28]
 801435c:	4619      	mov	r1, r3
 801435e:	4610      	mov	r0, r2
 8014360:	f7fe fd10 	bl	8012d84 <create_chain>
 8014364:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014368:	2b00      	cmp	r3, #0
 801436a:	f000 80f2 	beq.w	8014552 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014370:	2b01      	cmp	r3, #1
 8014372:	d104      	bne.n	801437e <f_write+0xfc>
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	2202      	movs	r2, #2
 8014378:	755a      	strb	r2, [r3, #21]
 801437a:	2302      	movs	r3, #2
 801437c:	e0f2      	b.n	8014564 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014384:	d104      	bne.n	8014390 <f_write+0x10e>
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	2201      	movs	r2, #1
 801438a:	755a      	strb	r2, [r3, #21]
 801438c:	2301      	movs	r3, #1
 801438e:	e0e9      	b.n	8014564 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014394:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	689b      	ldr	r3, [r3, #8]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d102      	bne.n	80143a4 <f_write+0x122>
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	7d1b      	ldrb	r3, [r3, #20]
 80143a8:	b25b      	sxtb	r3, r3
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	da18      	bge.n	80143e0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	7858      	ldrb	r0, [r3, #1]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	6a1a      	ldr	r2, [r3, #32]
 80143bc:	2301      	movs	r3, #1
 80143be:	f7fd ff3f 	bl	8012240 <disk_write>
 80143c2:	4603      	mov	r3, r0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d004      	beq.n	80143d2 <f_write+0x150>
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	2201      	movs	r2, #1
 80143cc:	755a      	strb	r2, [r3, #21]
 80143ce:	2301      	movs	r3, #1
 80143d0:	e0c8      	b.n	8014564 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	7d1b      	ldrb	r3, [r3, #20]
 80143d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143da:	b2da      	uxtb	r2, r3
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80143e0:	693a      	ldr	r2, [r7, #16]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	69db      	ldr	r3, [r3, #28]
 80143e6:	4619      	mov	r1, r3
 80143e8:	4610      	mov	r0, r2
 80143ea:	f7fe fab3 	bl	8012954 <clust2sect>
 80143ee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d104      	bne.n	8014400 <f_write+0x17e>
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2202      	movs	r2, #2
 80143fa:	755a      	strb	r2, [r3, #21]
 80143fc:	2302      	movs	r3, #2
 80143fe:	e0b1      	b.n	8014564 <f_write+0x2e2>
			sect += csect;
 8014400:	697a      	ldr	r2, [r7, #20]
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	4413      	add	r3, r2
 8014406:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	0a5b      	lsrs	r3, r3, #9
 801440c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801440e:	6a3b      	ldr	r3, [r7, #32]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d03c      	beq.n	801448e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014414:	69ba      	ldr	r2, [r7, #24]
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	4413      	add	r3, r2
 801441a:	693a      	ldr	r2, [r7, #16]
 801441c:	8952      	ldrh	r2, [r2, #10]
 801441e:	4293      	cmp	r3, r2
 8014420:	d905      	bls.n	801442e <f_write+0x1ac>
					cc = fs->csize - csect;
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	895b      	ldrh	r3, [r3, #10]
 8014426:	461a      	mov	r2, r3
 8014428:	69bb      	ldr	r3, [r7, #24]
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	7858      	ldrb	r0, [r3, #1]
 8014432:	6a3b      	ldr	r3, [r7, #32]
 8014434:	697a      	ldr	r2, [r7, #20]
 8014436:	69f9      	ldr	r1, [r7, #28]
 8014438:	f7fd ff02 	bl	8012240 <disk_write>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d004      	beq.n	801444c <f_write+0x1ca>
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2201      	movs	r2, #1
 8014446:	755a      	strb	r2, [r3, #21]
 8014448:	2301      	movs	r3, #1
 801444a:	e08b      	b.n	8014564 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	6a1a      	ldr	r2, [r3, #32]
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	1ad3      	subs	r3, r2, r3
 8014454:	6a3a      	ldr	r2, [r7, #32]
 8014456:	429a      	cmp	r2, r3
 8014458:	d915      	bls.n	8014486 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	6a1a      	ldr	r2, [r3, #32]
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	1ad3      	subs	r3, r2, r3
 8014468:	025b      	lsls	r3, r3, #9
 801446a:	69fa      	ldr	r2, [r7, #28]
 801446c:	4413      	add	r3, r2
 801446e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014472:	4619      	mov	r1, r3
 8014474:	f7fd ffa4 	bl	80123c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	7d1b      	ldrb	r3, [r3, #20]
 801447c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014480:	b2da      	uxtb	r2, r3
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014486:	6a3b      	ldr	r3, [r7, #32]
 8014488:	025b      	lsls	r3, r3, #9
 801448a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801448c:	e03f      	b.n	801450e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	6a1b      	ldr	r3, [r3, #32]
 8014492:	697a      	ldr	r2, [r7, #20]
 8014494:	429a      	cmp	r2, r3
 8014496:	d016      	beq.n	80144c6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	699a      	ldr	r2, [r3, #24]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d210      	bcs.n	80144c6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	7858      	ldrb	r0, [r3, #1]
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144ae:	2301      	movs	r3, #1
 80144b0:	697a      	ldr	r2, [r7, #20]
 80144b2:	f7fd fea5 	bl	8012200 <disk_read>
 80144b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d004      	beq.n	80144c6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2201      	movs	r2, #1
 80144c0:	755a      	strb	r2, [r3, #21]
 80144c2:	2301      	movs	r3, #1
 80144c4:	e04e      	b.n	8014564 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	697a      	ldr	r2, [r7, #20]
 80144ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	699b      	ldr	r3, [r3, #24]
 80144d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80144d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80144da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d901      	bls.n	80144e6 <f_write+0x264>
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	699b      	ldr	r3, [r3, #24]
 80144f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144f4:	4413      	add	r3, r2
 80144f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144f8:	69f9      	ldr	r1, [r7, #28]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fd ff60 	bl	80123c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	7d1b      	ldrb	r3, [r3, #20]
 8014504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014508:	b2da      	uxtb	r2, r3
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801450e:	69fa      	ldr	r2, [r7, #28]
 8014510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014512:	4413      	add	r3, r2
 8014514:	61fb      	str	r3, [r7, #28]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	699a      	ldr	r2, [r3, #24]
 801451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801451c:	441a      	add	r2, r3
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	619a      	str	r2, [r3, #24]
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	68da      	ldr	r2, [r3, #12]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	699b      	ldr	r3, [r3, #24]
 801452a:	429a      	cmp	r2, r3
 801452c:	bf38      	it	cc
 801452e:	461a      	movcc	r2, r3
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	60da      	str	r2, [r3, #12]
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	681a      	ldr	r2, [r3, #0]
 8014538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453a:	441a      	add	r2, r3
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	601a      	str	r2, [r3, #0]
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	f47f aed4 	bne.w	80142f8 <f_write+0x76>
 8014550:	e000      	b.n	8014554 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014552:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	7d1b      	ldrb	r3, [r3, #20]
 8014558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801455c:	b2da      	uxtb	r2, r3
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014562:	2300      	movs	r3, #0
}
 8014564:	4618      	mov	r0, r3
 8014566:	3730      	adds	r7, #48	; 0x30
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f107 0208 	add.w	r2, r7, #8
 801457a:	4611      	mov	r1, r2
 801457c:	4618      	mov	r0, r3
 801457e:	f7ff fb07 	bl	8013b90 <validate>
 8014582:	4603      	mov	r3, r0
 8014584:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014586:	7dfb      	ldrb	r3, [r7, #23]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d168      	bne.n	801465e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	7d1b      	ldrb	r3, [r3, #20]
 8014590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014594:	2b00      	cmp	r3, #0
 8014596:	d062      	beq.n	801465e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	7d1b      	ldrb	r3, [r3, #20]
 801459c:	b25b      	sxtb	r3, r3
 801459e:	2b00      	cmp	r3, #0
 80145a0:	da15      	bge.n	80145ce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	7858      	ldrb	r0, [r3, #1]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6a1a      	ldr	r2, [r3, #32]
 80145b0:	2301      	movs	r3, #1
 80145b2:	f7fd fe45 	bl	8012240 <disk_write>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <f_sync+0x54>
 80145bc:	2301      	movs	r3, #1
 80145be:	e04f      	b.n	8014660 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	7d1b      	ldrb	r3, [r3, #20]
 80145c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80145ce:	f7fd fd0f 	bl	8011ff0 <get_fattime>
 80145d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80145d4:	68ba      	ldr	r2, [r7, #8]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145da:	4619      	mov	r1, r3
 80145dc:	4610      	mov	r0, r2
 80145de:	f7fe f91d 	bl	801281c <move_window>
 80145e2:	4603      	mov	r3, r0
 80145e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80145e6:	7dfb      	ldrb	r3, [r7, #23]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d138      	bne.n	801465e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	330b      	adds	r3, #11
 80145f6:	781a      	ldrb	r2, [r3, #0]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	330b      	adds	r3, #11
 80145fc:	f042 0220 	orr.w	r2, r2, #32
 8014600:	b2d2      	uxtb	r2, r2
 8014602:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6818      	ldr	r0, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	461a      	mov	r2, r3
 801460e:	68f9      	ldr	r1, [r7, #12]
 8014610:	f7fe fe2a 	bl	8013268 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f103 021c 	add.w	r2, r3, #28
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	4619      	mov	r1, r3
 8014620:	4610      	mov	r0, r2
 8014622:	f7fd fea1 	bl	8012368 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	3316      	adds	r3, #22
 801462a:	6939      	ldr	r1, [r7, #16]
 801462c:	4618      	mov	r0, r3
 801462e:	f7fd fe9b 	bl	8012368 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	3312      	adds	r3, #18
 8014636:	2100      	movs	r1, #0
 8014638:	4618      	mov	r0, r3
 801463a:	f7fd fe7a 	bl	8012332 <st_word>
					fs->wflag = 1;
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	2201      	movs	r2, #1
 8014642:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	4618      	mov	r0, r3
 8014648:	f7fe f916 	bl	8012878 <sync_fs>
 801464c:	4603      	mov	r3, r0
 801464e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	7d1b      	ldrb	r3, [r3, #20]
 8014654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014658:	b2da      	uxtb	r2, r3
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014660:	4618      	mov	r0, r3
 8014662:	3718      	adds	r7, #24
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f7ff ff7b 	bl	801456c <f_sync>
 8014676:	4603      	mov	r3, r0
 8014678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d118      	bne.n	80146b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f107 0208 	add.w	r2, r7, #8
 8014686:	4611      	mov	r1, r2
 8014688:	4618      	mov	r0, r3
 801468a:	f7ff fa81 	bl	8013b90 <validate>
 801468e:	4603      	mov	r3, r0
 8014690:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014692:	7bfb      	ldrb	r3, [r7, #15]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d10c      	bne.n	80146b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	691b      	ldr	r3, [r3, #16]
 801469c:	4618      	mov	r0, r3
 801469e:	f7fe f819 	bl	80126d4 <dec_lock>
 80146a2:	4603      	mov	r3, r0
 80146a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d102      	bne.n	80146b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2200      	movs	r2, #0
 80146b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80146b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3710      	adds	r7, #16
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b090      	sub	sp, #64	; 0x40
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f107 0208 	add.w	r2, r7, #8
 80146cc:	4611      	mov	r1, r2
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7ff fa5e 	bl	8013b90 <validate>
 80146d4:	4603      	mov	r3, r0
 80146d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80146da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d103      	bne.n	80146ea <f_lseek+0x2e>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	7d5b      	ldrb	r3, [r3, #21]
 80146e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80146ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d002      	beq.n	80146f8 <f_lseek+0x3c>
 80146f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80146f6:	e1e6      	b.n	8014ac6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f000 80d1 	beq.w	80148a4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014708:	d15a      	bne.n	80147c0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801470e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	1d1a      	adds	r2, r3, #4
 8014714:	627a      	str	r2, [r7, #36]	; 0x24
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	617b      	str	r3, [r7, #20]
 801471a:	2302      	movs	r3, #2
 801471c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	689b      	ldr	r3, [r3, #8]
 8014722:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014726:	2b00      	cmp	r3, #0
 8014728:	d03a      	beq.n	80147a0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	613b      	str	r3, [r7, #16]
 801472e:	2300      	movs	r3, #0
 8014730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014734:	3302      	adds	r3, #2
 8014736:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473a:	60fb      	str	r3, [r7, #12]
 801473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473e:	3301      	adds	r3, #1
 8014740:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014746:	4618      	mov	r0, r3
 8014748:	f7fe f923 	bl	8012992 <get_fat>
 801474c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014750:	2b01      	cmp	r3, #1
 8014752:	d804      	bhi.n	801475e <f_lseek+0xa2>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2202      	movs	r2, #2
 8014758:	755a      	strb	r2, [r3, #21]
 801475a:	2302      	movs	r3, #2
 801475c:	e1b3      	b.n	8014ac6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014764:	d104      	bne.n	8014770 <f_lseek+0xb4>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2201      	movs	r2, #1
 801476a:	755a      	strb	r2, [r3, #21]
 801476c:	2301      	movs	r3, #1
 801476e:	e1aa      	b.n	8014ac6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	3301      	adds	r3, #1
 8014774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014776:	429a      	cmp	r2, r3
 8014778:	d0de      	beq.n	8014738 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801477a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	429a      	cmp	r2, r3
 8014780:	d809      	bhi.n	8014796 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014784:	1d1a      	adds	r2, r3, #4
 8014786:	627a      	str	r2, [r7, #36]	; 0x24
 8014788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801478a:	601a      	str	r2, [r3, #0]
 801478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478e:	1d1a      	adds	r2, r3, #4
 8014790:	627a      	str	r2, [r7, #36]	; 0x24
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	695b      	ldr	r3, [r3, #20]
 801479a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801479c:	429a      	cmp	r2, r3
 801479e:	d3c4      	bcc.n	801472a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147a6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80147a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d803      	bhi.n	80147b8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80147b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b2:	2200      	movs	r2, #0
 80147b4:	601a      	str	r2, [r3, #0]
 80147b6:	e184      	b.n	8014ac2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80147b8:	2311      	movs	r3, #17
 80147ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80147be:	e180      	b.n	8014ac2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	68db      	ldr	r3, [r3, #12]
 80147c4:	683a      	ldr	r2, [r7, #0]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d902      	bls.n	80147d0 <f_lseek+0x114>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	f000 8172 	beq.w	8014ac2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	3b01      	subs	r3, #1
 80147e2:	4619      	mov	r1, r3
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f7fe fb65 	bl	8012eb4 <clmt_clust>
 80147ea:	4602      	mov	r2, r0
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80147f0:	68ba      	ldr	r2, [r7, #8]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	69db      	ldr	r3, [r3, #28]
 80147f6:	4619      	mov	r1, r3
 80147f8:	4610      	mov	r0, r2
 80147fa:	f7fe f8ab 	bl	8012954 <clust2sect>
 80147fe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d104      	bne.n	8014810 <f_lseek+0x154>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2202      	movs	r2, #2
 801480a:	755a      	strb	r2, [r3, #21]
 801480c:	2302      	movs	r3, #2
 801480e:	e15a      	b.n	8014ac6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	3b01      	subs	r3, #1
 8014814:	0a5b      	lsrs	r3, r3, #9
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	8952      	ldrh	r2, [r2, #10]
 801481a:	3a01      	subs	r2, #1
 801481c:	4013      	ands	r3, r2
 801481e:	69ba      	ldr	r2, [r7, #24]
 8014820:	4413      	add	r3, r2
 8014822:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	699b      	ldr	r3, [r3, #24]
 8014828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801482c:	2b00      	cmp	r3, #0
 801482e:	f000 8148 	beq.w	8014ac2 <f_lseek+0x406>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6a1b      	ldr	r3, [r3, #32]
 8014836:	69ba      	ldr	r2, [r7, #24]
 8014838:	429a      	cmp	r2, r3
 801483a:	f000 8142 	beq.w	8014ac2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	7d1b      	ldrb	r3, [r3, #20]
 8014842:	b25b      	sxtb	r3, r3
 8014844:	2b00      	cmp	r3, #0
 8014846:	da18      	bge.n	801487a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	7858      	ldrb	r0, [r3, #1]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	6a1a      	ldr	r2, [r3, #32]
 8014856:	2301      	movs	r3, #1
 8014858:	f7fd fcf2 	bl	8012240 <disk_write>
 801485c:	4603      	mov	r3, r0
 801485e:	2b00      	cmp	r3, #0
 8014860:	d004      	beq.n	801486c <f_lseek+0x1b0>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2201      	movs	r2, #1
 8014866:	755a      	strb	r2, [r3, #21]
 8014868:	2301      	movs	r3, #1
 801486a:	e12c      	b.n	8014ac6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	7d1b      	ldrb	r3, [r3, #20]
 8014870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014874:	b2da      	uxtb	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	7858      	ldrb	r0, [r3, #1]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014884:	2301      	movs	r3, #1
 8014886:	69ba      	ldr	r2, [r7, #24]
 8014888:	f7fd fcba 	bl	8012200 <disk_read>
 801488c:	4603      	mov	r3, r0
 801488e:	2b00      	cmp	r3, #0
 8014890:	d004      	beq.n	801489c <f_lseek+0x1e0>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2201      	movs	r2, #1
 8014896:	755a      	strb	r2, [r3, #21]
 8014898:	2301      	movs	r3, #1
 801489a:	e114      	b.n	8014ac6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	69ba      	ldr	r2, [r7, #24]
 80148a0:	621a      	str	r2, [r3, #32]
 80148a2:	e10e      	b.n	8014ac2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	68db      	ldr	r3, [r3, #12]
 80148a8:	683a      	ldr	r2, [r7, #0]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d908      	bls.n	80148c0 <f_lseek+0x204>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	7d1b      	ldrb	r3, [r3, #20]
 80148b2:	f003 0302 	and.w	r3, r3, #2
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d102      	bne.n	80148c0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68db      	ldr	r3, [r3, #12]
 80148be:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	699b      	ldr	r3, [r3, #24]
 80148c4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80148c6:	2300      	movs	r3, #0
 80148c8:	637b      	str	r3, [r7, #52]	; 0x34
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80148ce:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f000 80a7 	beq.w	8014a26 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	895b      	ldrh	r3, [r3, #10]
 80148dc:	025b      	lsls	r3, r3, #9
 80148de:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80148e0:	6a3b      	ldr	r3, [r7, #32]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d01b      	beq.n	801491e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	1e5a      	subs	r2, r3, #1
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80148f0:	6a3b      	ldr	r3, [r7, #32]
 80148f2:	1e59      	subs	r1, r3, #1
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d30f      	bcc.n	801491e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80148fe:	6a3b      	ldr	r3, [r7, #32]
 8014900:	1e5a      	subs	r2, r3, #1
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	425b      	negs	r3, r3
 8014906:	401a      	ands	r2, r3
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	699b      	ldr	r3, [r3, #24]
 8014910:	683a      	ldr	r2, [r7, #0]
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	69db      	ldr	r3, [r3, #28]
 801491a:	63bb      	str	r3, [r7, #56]	; 0x38
 801491c:	e022      	b.n	8014964 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	689b      	ldr	r3, [r3, #8]
 8014922:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014926:	2b00      	cmp	r3, #0
 8014928:	d119      	bne.n	801495e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2100      	movs	r1, #0
 801492e:	4618      	mov	r0, r3
 8014930:	f7fe fa28 	bl	8012d84 <create_chain>
 8014934:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014938:	2b01      	cmp	r3, #1
 801493a:	d104      	bne.n	8014946 <f_lseek+0x28a>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2202      	movs	r2, #2
 8014940:	755a      	strb	r2, [r3, #21]
 8014942:	2302      	movs	r3, #2
 8014944:	e0bf      	b.n	8014ac6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014948:	f1b3 3fff 	cmp.w	r3, #4294967295
 801494c:	d104      	bne.n	8014958 <f_lseek+0x29c>
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2201      	movs	r2, #1
 8014952:	755a      	strb	r2, [r3, #21]
 8014954:	2301      	movs	r3, #1
 8014956:	e0b6      	b.n	8014ac6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801495c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014962:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014966:	2b00      	cmp	r3, #0
 8014968:	d05d      	beq.n	8014a26 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801496a:	e03a      	b.n	80149e2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	603b      	str	r3, [r7, #0]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	699a      	ldr	r2, [r3, #24]
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	441a      	add	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	7d1b      	ldrb	r3, [r3, #20]
 8014984:	f003 0302 	and.w	r3, r3, #2
 8014988:	2b00      	cmp	r3, #0
 801498a:	d00b      	beq.n	80149a4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014990:	4618      	mov	r0, r3
 8014992:	f7fe f9f7 	bl	8012d84 <create_chain>
 8014996:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499a:	2b00      	cmp	r3, #0
 801499c:	d108      	bne.n	80149b0 <f_lseek+0x2f4>
							ofs = 0; break;
 801499e:	2300      	movs	r3, #0
 80149a0:	603b      	str	r3, [r7, #0]
 80149a2:	e022      	b.n	80149ea <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7fd fff2 	bl	8012992 <get_fat>
 80149ae:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80149b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149b6:	d104      	bne.n	80149c2 <f_lseek+0x306>
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2201      	movs	r2, #1
 80149bc:	755a      	strb	r2, [r3, #21]
 80149be:	2301      	movs	r3, #1
 80149c0:	e081      	b.n	8014ac6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80149c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d904      	bls.n	80149d2 <f_lseek+0x316>
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	695b      	ldr	r3, [r3, #20]
 80149cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d304      	bcc.n	80149dc <f_lseek+0x320>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2202      	movs	r2, #2
 80149d6:	755a      	strb	r2, [r3, #21]
 80149d8:	2302      	movs	r3, #2
 80149da:	e074      	b.n	8014ac6 <f_lseek+0x40a>
					fp->clust = clst;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149e0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80149e2:	683a      	ldr	r2, [r7, #0]
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d8c0      	bhi.n	801496c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	699a      	ldr	r2, [r3, #24]
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	441a      	add	r2, r3
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d012      	beq.n	8014a26 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7fd ffa5 	bl	8012954 <clust2sect>
 8014a0a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d104      	bne.n	8014a1c <f_lseek+0x360>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2202      	movs	r2, #2
 8014a16:	755a      	strb	r2, [r3, #21]
 8014a18:	2302      	movs	r3, #2
 8014a1a:	e054      	b.n	8014ac6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	0a5b      	lsrs	r3, r3, #9
 8014a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a22:	4413      	add	r3, r2
 8014a24:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	699a      	ldr	r2, [r3, #24]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d90a      	bls.n	8014a48 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	699a      	ldr	r2, [r3, #24]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	7d1b      	ldrb	r3, [r3, #20]
 8014a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a42:	b2da      	uxtb	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	699b      	ldr	r3, [r3, #24]
 8014a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d036      	beq.n	8014ac2 <f_lseek+0x406>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6a1b      	ldr	r3, [r3, #32]
 8014a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d031      	beq.n	8014ac2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7d1b      	ldrb	r3, [r3, #20]
 8014a62:	b25b      	sxtb	r3, r3
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	da18      	bge.n	8014a9a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	7858      	ldrb	r0, [r3, #1]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	6a1a      	ldr	r2, [r3, #32]
 8014a76:	2301      	movs	r3, #1
 8014a78:	f7fd fbe2 	bl	8012240 <disk_write>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d004      	beq.n	8014a8c <f_lseek+0x3d0>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2201      	movs	r2, #1
 8014a86:	755a      	strb	r2, [r3, #21]
 8014a88:	2301      	movs	r3, #1
 8014a8a:	e01c      	b.n	8014ac6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	7d1b      	ldrb	r3, [r3, #20]
 8014a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a94:	b2da      	uxtb	r2, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	7858      	ldrb	r0, [r3, #1]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014aa8:	f7fd fbaa 	bl	8012200 <disk_read>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d004      	beq.n	8014abc <f_lseek+0x400>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	755a      	strb	r2, [r3, #21]
 8014ab8:	2301      	movs	r3, #1
 8014aba:	e004      	b.n	8014ac6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ac0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3740      	adds	r7, #64	; 0x40
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
	...

08014ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b087      	sub	sp, #28
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	4613      	mov	r3, r2
 8014adc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014ade:	2301      	movs	r3, #1
 8014ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014ae6:	4b1f      	ldr	r3, [pc, #124]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014ae8:	7a5b      	ldrb	r3, [r3, #9]
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d131      	bne.n	8014b54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014af0:	4b1c      	ldr	r3, [pc, #112]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014af2:	7a5b      	ldrb	r3, [r3, #9]
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	461a      	mov	r2, r3
 8014af8:	4b1a      	ldr	r3, [pc, #104]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014afa:	2100      	movs	r1, #0
 8014afc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014afe:	4b19      	ldr	r3, [pc, #100]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014b00:	7a5b      	ldrb	r3, [r3, #9]
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	4a17      	ldr	r2, [pc, #92]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	68fa      	ldr	r2, [r7, #12]
 8014b0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014b0e:	4b15      	ldr	r3, [pc, #84]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014b10:	7a5b      	ldrb	r3, [r3, #9]
 8014b12:	b2db      	uxtb	r3, r3
 8014b14:	461a      	mov	r2, r3
 8014b16:	4b13      	ldr	r3, [pc, #76]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014b18:	4413      	add	r3, r2
 8014b1a:	79fa      	ldrb	r2, [r7, #7]
 8014b1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014b1e:	4b11      	ldr	r3, [pc, #68]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014b20:	7a5b      	ldrb	r3, [r3, #9]
 8014b22:	b2db      	uxtb	r3, r3
 8014b24:	1c5a      	adds	r2, r3, #1
 8014b26:	b2d1      	uxtb	r1, r2
 8014b28:	4a0e      	ldr	r2, [pc, #56]	; (8014b64 <FATFS_LinkDriverEx+0x94>)
 8014b2a:	7251      	strb	r1, [r2, #9]
 8014b2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014b2e:	7dbb      	ldrb	r3, [r7, #22]
 8014b30:	3330      	adds	r3, #48	; 0x30
 8014b32:	b2da      	uxtb	r2, r3
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	223a      	movs	r2, #58	; 0x3a
 8014b3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	3302      	adds	r3, #2
 8014b44:	222f      	movs	r2, #47	; 0x2f
 8014b46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	3303      	adds	r3, #3
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014b50:	2300      	movs	r3, #0
 8014b52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	371c      	adds	r7, #28
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b60:	4770      	bx	lr
 8014b62:	bf00      	nop
 8014b64:	20000970 	.word	0x20000970

08014b68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014b72:	2200      	movs	r2, #0
 8014b74:	6839      	ldr	r1, [r7, #0]
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f7ff ffaa 	bl	8014ad0 <FATFS_LinkDriverEx>
 8014b7c:	4603      	mov	r3, r0
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}

08014b86 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014b86:	b580      	push	{r7, lr}
 8014b88:	b086      	sub	sp, #24
 8014b8a:	af02      	add	r7, sp, #8
 8014b8c:	60f8      	str	r0, [r7, #12]
 8014b8e:	4608      	mov	r0, r1
 8014b90:	4611      	mov	r1, r2
 8014b92:	461a      	mov	r2, r3
 8014b94:	4603      	mov	r3, r0
 8014b96:	817b      	strh	r3, [r7, #10]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	813b      	strh	r3, [r7, #8]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014ba0:	897a      	ldrh	r2, [r7, #10]
 8014ba2:	88fb      	ldrh	r3, [r7, #6]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	b298      	uxth	r0, r3
 8014ba8:	893a      	ldrh	r2, [r7, #8]
 8014baa:	8b3b      	ldrh	r3, [r7, #24]
 8014bac:	4413      	add	r3, r2
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	893a      	ldrh	r2, [r7, #8]
 8014bb2:	8979      	ldrh	r1, [r7, #10]
 8014bb4:	9300      	str	r3, [sp, #0]
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f001 f8a1 	bl	8015d00 <u8g2_IsIntersection>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d012      	beq.n	8014bea <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8014bc4:	e00d      	b.n	8014be2 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014bc6:	88fb      	ldrh	r3, [r7, #6]
 8014bc8:	893a      	ldrh	r2, [r7, #8]
 8014bca:	8979      	ldrh	r1, [r7, #10]
 8014bcc:	2000      	movs	r0, #0
 8014bce:	9000      	str	r0, [sp, #0]
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f000 ffa4 	bl	8015b1e <u8g2_DrawHVLine>
    y++;    
 8014bd6:	893b      	ldrh	r3, [r7, #8]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	813b      	strh	r3, [r7, #8]
    h--;
 8014bdc:	8b3b      	ldrh	r3, [r7, #24]
 8014bde:	3b01      	subs	r3, #1
 8014be0:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8014be2:	8b3b      	ldrh	r3, [r7, #24]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1ee      	bne.n	8014bc6 <u8g2_DrawBox+0x40>
 8014be8:	e000      	b.n	8014bec <u8g2_DrawBox+0x66>
    return;
 8014bea:	bf00      	nop
  }
}
 8014bec:	3710      	adds	r7, #16
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}

08014bf2 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b088      	sub	sp, #32
 8014bf6:	af02      	add	r7, sp, #8
 8014bf8:	60f8      	str	r0, [r7, #12]
 8014bfa:	4608      	mov	r0, r1
 8014bfc:	4611      	mov	r1, r2
 8014bfe:	461a      	mov	r2, r3
 8014c00:	4603      	mov	r3, r0
 8014c02:	817b      	strh	r3, [r7, #10]
 8014c04:	460b      	mov	r3, r1
 8014c06:	813b      	strh	r3, [r7, #8]
 8014c08:	4613      	mov	r3, r2
 8014c0a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8014c0c:	897b      	ldrh	r3, [r7, #10]
 8014c0e:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8014c10:	897a      	ldrh	r2, [r7, #10]
 8014c12:	88fb      	ldrh	r3, [r7, #6]
 8014c14:	4413      	add	r3, r2
 8014c16:	b298      	uxth	r0, r3
 8014c18:	893a      	ldrh	r2, [r7, #8]
 8014c1a:	8c3b      	ldrh	r3, [r7, #32]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	893a      	ldrh	r2, [r7, #8]
 8014c22:	8979      	ldrh	r1, [r7, #10]
 8014c24:	9300      	str	r3, [sp, #0]
 8014c26:	4603      	mov	r3, r0
 8014c28:	68f8      	ldr	r0, [r7, #12]
 8014c2a:	f001 f869 	bl	8015d00 <u8g2_IsIntersection>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d037      	beq.n	8014ca4 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8014c34:	88fb      	ldrh	r3, [r7, #6]
 8014c36:	893a      	ldrh	r2, [r7, #8]
 8014c38:	8979      	ldrh	r1, [r7, #10]
 8014c3a:	2000      	movs	r0, #0
 8014c3c:	9000      	str	r0, [sp, #0]
 8014c3e:	68f8      	ldr	r0, [r7, #12]
 8014c40:	f000 ff6d 	bl	8015b1e <u8g2_DrawHVLine>
  if (h >= 2) {
 8014c44:	8c3b      	ldrh	r3, [r7, #32]
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d92d      	bls.n	8014ca6 <u8g2_DrawFrame+0xb4>
    h-=2;
 8014c4a:	8c3b      	ldrh	r3, [r7, #32]
 8014c4c:	3b02      	subs	r3, #2
 8014c4e:	843b      	strh	r3, [r7, #32]
    y++;
 8014c50:	893b      	ldrh	r3, [r7, #8]
 8014c52:	3301      	adds	r3, #1
 8014c54:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8014c56:	8c3b      	ldrh	r3, [r7, #32]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d01a      	beq.n	8014c92 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014c5c:	8c3b      	ldrh	r3, [r7, #32]
 8014c5e:	893a      	ldrh	r2, [r7, #8]
 8014c60:	8979      	ldrh	r1, [r7, #10]
 8014c62:	2001      	movs	r0, #1
 8014c64:	9000      	str	r0, [sp, #0]
 8014c66:	68f8      	ldr	r0, [r7, #12]
 8014c68:	f000 ff59 	bl	8015b1e <u8g2_DrawHVLine>
      x+=w;
 8014c6c:	897a      	ldrh	r2, [r7, #10]
 8014c6e:	88fb      	ldrh	r3, [r7, #6]
 8014c70:	4413      	add	r3, r2
 8014c72:	817b      	strh	r3, [r7, #10]
      x--;
 8014c74:	897b      	ldrh	r3, [r7, #10]
 8014c76:	3b01      	subs	r3, #1
 8014c78:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8014c7a:	8c3b      	ldrh	r3, [r7, #32]
 8014c7c:	893a      	ldrh	r2, [r7, #8]
 8014c7e:	8979      	ldrh	r1, [r7, #10]
 8014c80:	2001      	movs	r0, #1
 8014c82:	9000      	str	r0, [sp, #0]
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f000 ff4a 	bl	8015b1e <u8g2_DrawHVLine>
      y+=h;
 8014c8a:	893a      	ldrh	r2, [r7, #8]
 8014c8c:	8c3b      	ldrh	r3, [r7, #32]
 8014c8e:	4413      	add	r3, r2
 8014c90:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8014c92:	88fb      	ldrh	r3, [r7, #6]
 8014c94:	893a      	ldrh	r2, [r7, #8]
 8014c96:	8af9      	ldrh	r1, [r7, #22]
 8014c98:	2000      	movs	r0, #0
 8014c9a:	9000      	str	r0, [sp, #0]
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	f000 ff3e 	bl	8015b1e <u8g2_DrawHVLine>
 8014ca2:	e000      	b.n	8014ca6 <u8g2_DrawFrame+0xb4>
    return;
 8014ca4:	bf00      	nop
  }
}
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <u8g2_ClearBuffer>:
#include <string.h>
#include "../u8g2/u8g2.h"

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	7c1b      	ldrb	r3, [r3, #16]
 8014cba:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	fb02 f303 	mul.w	r3, r2, r3
 8014cca:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	00db      	lsls	r3, r3, #3
 8014cd0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cd6:	68fa      	ldr	r2, [r7, #12]
 8014cd8:	2100      	movs	r1, #0
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f008 f96c 	bl	801cfb8 <memset>
}
 8014ce0:	bf00      	nop
 8014ce2:	3710      	adds	r7, #16
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b086      	sub	sp, #24
 8014cec:	af02      	add	r7, sp, #8
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	70fb      	strb	r3, [r7, #3]
 8014cf4:	4613      	mov	r3, r2
 8014cf6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	7c1b      	ldrb	r3, [r3, #16]
 8014cfe:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8014d00:	78fb      	ldrb	r3, [r7, #3]
 8014d02:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d08:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8014d0a:	7bfb      	ldrb	r3, [r7, #15]
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	89ba      	ldrh	r2, [r7, #12]
 8014d10:	fb12 f303 	smulbb	r3, r2, r3
 8014d14:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8014d16:	89bb      	ldrh	r3, [r7, #12]
 8014d18:	00db      	lsls	r3, r3, #3
 8014d1a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8014d1c:	89bb      	ldrh	r3, [r7, #12]
 8014d1e:	68ba      	ldr	r2, [r7, #8]
 8014d20:	4413      	add	r3, r2
 8014d22:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8014d24:	7bf9      	ldrb	r1, [r7, #15]
 8014d26:	78ba      	ldrb	r2, [r7, #2]
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	9300      	str	r3, [sp, #0]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	2100      	movs	r1, #0
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f001 fd06 	bl	8016742 <u8x8_DrawTile>
}
 8014d36:	bf00      	nop
 8014d38:	3710      	adds	r7, #16
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b084      	sub	sp, #16
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8014d46:	2300      	movs	r3, #0
 8014d48:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d50:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014d58:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	7c5b      	ldrb	r3, [r3, #17]
 8014d60:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8014d62:	7bba      	ldrb	r2, [r7, #14]
 8014d64:	7bfb      	ldrb	r3, [r7, #15]
 8014d66:	4619      	mov	r1, r3
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f7ff ffbd 	bl	8014ce8 <u8g2_send_tile_row>
    src_row++;
 8014d6e:	7bfb      	ldrb	r3, [r7, #15]
 8014d70:	3301      	adds	r3, #1
 8014d72:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8014d74:	7bbb      	ldrb	r3, [r7, #14]
 8014d76:	3301      	adds	r3, #1
 8014d78:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8014d7a:	7bfa      	ldrb	r2, [r7, #15]
 8014d7c:	7b7b      	ldrb	r3, [r7, #13]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d203      	bcs.n	8014d8a <u8g2_send_buffer+0x4c>
 8014d82:	7bba      	ldrb	r2, [r7, #14]
 8014d84:	7b3b      	ldrb	r3, [r7, #12]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	d3eb      	bcc.n	8014d62 <u8g2_send_buffer+0x24>
}
 8014d8a:	bf00      	nop
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b082      	sub	sp, #8
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f7ff ffcf 	bl	8014d3e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f001 fd1f 	bl	80167e4 <u8x8_RefreshDisplay>
}
 8014da6:	bf00      	nop
 8014da8:	3708      	adds	r7, #8
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b082      	sub	sp, #8
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
 8014db6:	460b      	mov	r3, r1
 8014db8:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	78fa      	ldrb	r2, [r7, #3]
 8014dbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	4798      	blx	r3
}
 8014dd6:	bf00      	nop
 8014dd8:	3708      	adds	r7, #8
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d002      	beq.n	8014df6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f7ff ff5b 	bl	8014cac <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8014df6:	2100      	movs	r1, #0
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f7ff ffd8 	bl	8014dae <u8g2_SetBufferCurrTileRow>
}
 8014dfe:	bf00      	nop
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}

08014e06 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8014e06:	b580      	push	{r7, lr}
 8014e08:	b084      	sub	sp, #16
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f7ff ff95 	bl	8014d3e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e1a:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8014e22:	7bfb      	ldrb	r3, [r7, #15]
 8014e24:	4413      	add	r3, r2
 8014e26:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	7c5b      	ldrb	r3, [r3, #17]
 8014e2e:	7bfa      	ldrb	r2, [r7, #15]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d304      	bcc.n	8014e3e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f001 fcd5 	bl	80167e4 <u8x8_RefreshDisplay>
    return 0;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e00d      	b.n	8014e5a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d002      	beq.n	8014e4e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7ff ff2f 	bl	8014cac <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8014e4e:	7bfb      	ldrb	r3, [r7, #15]
 8014e50:	4619      	mov	r1, r3
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7ff ffab 	bl	8014dae <u8g2_SetBufferCurrTileRow>
  return 1;
 8014e58:	2301      	movs	r3, #1
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3710      	adds	r7, #16
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <u8g2_ClearDisplay>:
#include "../u8g2/u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b082      	sub	sp, #8
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f7ff ffb7 	bl	8014dde <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ff ffc8 	bl	8014e06 <u8g2_NextPage>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d1f9      	bne.n	8014e70 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7ff ff95 	bl	8014dae <u8g2_SetBufferCurrTileRow>
}
 8014e84:	bf00      	nop
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <u8g2_m_30_20_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_30_20_f(uint8_t *page_cnt)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 20;
  return 0;
  #else
  static uint8_t buf[4800];
  *page_cnt = 20;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2214      	movs	r2, #20
 8014e98:	701a      	strb	r2, [r3, #0]
  return buf;
 8014e9a:	4b03      	ldr	r3, [pc, #12]	; (8014ea8 <u8g2_m_30_20_f+0x1c>)
  #endif
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	370c      	adds	r7, #12
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea6:	4770      	bx	lr
 8014ea8:	2000097c 	.word	0x2000097c

08014eac <u8g2_Setup_uc1638_240x160_f>:
  buf = u8g2_m_30_20_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1638 f */
void u8g2_Setup_uc1638_240x160_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b088      	sub	sp, #32
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	607a      	str	r2, [r7, #4]
 8014eb8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1638_240x160, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	9300      	str	r3, [sp, #0]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	4a0b      	ldr	r2, [pc, #44]	; (8014ef0 <u8g2_Setup_uc1638_240x160_f+0x44>)
 8014ec2:	490c      	ldr	r1, [pc, #48]	; (8014ef4 <u8g2_Setup_uc1638_240x160_f+0x48>)
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f001 fced 	bl	80168a4 <u8x8_Setup>
  buf = u8g2_m_30_20_f(&tile_buf_height);
 8014eca:	f107 0313 	add.w	r3, r7, #19
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff ffdc 	bl	8014e8c <u8g2_m_30_20_f>
 8014ed4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8014ed6:	7cfa      	ldrb	r2, [r7, #19]
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	9300      	str	r3, [sp, #0]
 8014edc:	4b06      	ldr	r3, [pc, #24]	; (8014ef8 <u8g2_Setup_uc1638_240x160_f+0x4c>)
 8014ede:	6979      	ldr	r1, [r7, #20]
 8014ee0:	68f8      	ldr	r0, [r7, #12]
 8014ee2:	f000 fff7 	bl	8015ed4 <u8g2_SetupBuffer>
}
 8014ee6:	bf00      	nop
 8014ee8:	3718      	adds	r7, #24
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	0801643d 	.word	0x0801643d
 8014ef4:	0801663d 	.word	0x0801663d
 8014ef8:	08015d57 	.word	0x08015d57

08014efc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	460b      	mov	r3, r1
 8014f06:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8014f08:	78fb      	ldrb	r3, [r7, #3]
 8014f0a:	687a      	ldr	r2, [r7, #4]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	781b      	ldrb	r3, [r3, #0]
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	370c      	adds	r7, #12
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1e:	4770      	bx	lr

08014f20 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b085      	sub	sp, #20
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	460b      	mov	r3, r1
 8014f2a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8014f2c:	78fb      	ldrb	r3, [r7, #3]
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	4413      	add	r3, r2
 8014f32:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	81fb      	strh	r3, [r7, #14]
    font++;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8014f40:	89fb      	ldrh	r3, [r7, #14]
 8014f42:	021b      	lsls	r3, r3, #8
 8014f44:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	b29a      	uxth	r2, r3
 8014f4c:	89fb      	ldrh	r3, [r7, #14]
 8014f4e:	4413      	add	r3, r2
 8014f50:	81fb      	strh	r3, [r7, #14]
    return pos;
 8014f52:	89fb      	ldrh	r3, [r7, #14]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3714      	adds	r7, #20
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr

08014f60 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	6838      	ldr	r0, [r7, #0]
 8014f6e:	f7ff ffc5 	bl	8014efc <u8g2_font_get_byte>
 8014f72:	4603      	mov	r3, r0
 8014f74:	461a      	mov	r2, r3
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8014f7a:	2101      	movs	r1, #1
 8014f7c:	6838      	ldr	r0, [r7, #0]
 8014f7e:	f7ff ffbd 	bl	8014efc <u8g2_font_get_byte>
 8014f82:	4603      	mov	r3, r0
 8014f84:	461a      	mov	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8014f8a:	2102      	movs	r1, #2
 8014f8c:	6838      	ldr	r0, [r7, #0]
 8014f8e:	f7ff ffb5 	bl	8014efc <u8g2_font_get_byte>
 8014f92:	4603      	mov	r3, r0
 8014f94:	461a      	mov	r2, r3
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8014f9a:	2103      	movs	r1, #3
 8014f9c:	6838      	ldr	r0, [r7, #0]
 8014f9e:	f7ff ffad 	bl	8014efc <u8g2_font_get_byte>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8014faa:	2104      	movs	r1, #4
 8014fac:	6838      	ldr	r0, [r7, #0]
 8014fae:	f7ff ffa5 	bl	8014efc <u8g2_font_get_byte>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8014fba:	2105      	movs	r1, #5
 8014fbc:	6838      	ldr	r0, [r7, #0]
 8014fbe:	f7ff ff9d 	bl	8014efc <u8g2_font_get_byte>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8014fca:	2106      	movs	r1, #6
 8014fcc:	6838      	ldr	r0, [r7, #0]
 8014fce:	f7ff ff95 	bl	8014efc <u8g2_font_get_byte>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8014fda:	2107      	movs	r1, #7
 8014fdc:	6838      	ldr	r0, [r7, #0]
 8014fde:	f7ff ff8d 	bl	8014efc <u8g2_font_get_byte>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8014fea:	2108      	movs	r1, #8
 8014fec:	6838      	ldr	r0, [r7, #0]
 8014fee:	f7ff ff85 	bl	8014efc <u8g2_font_get_byte>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8014ffa:	2109      	movs	r1, #9
 8014ffc:	6838      	ldr	r0, [r7, #0]
 8014ffe:	f7ff ff7d 	bl	8014efc <u8g2_font_get_byte>
 8015002:	4603      	mov	r3, r0
 8015004:	b25a      	sxtb	r2, r3
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 801500a:	210a      	movs	r1, #10
 801500c:	6838      	ldr	r0, [r7, #0]
 801500e:	f7ff ff75 	bl	8014efc <u8g2_font_get_byte>
 8015012:	4603      	mov	r3, r0
 8015014:	b25a      	sxtb	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 801501a:	210b      	movs	r1, #11
 801501c:	6838      	ldr	r0, [r7, #0]
 801501e:	f7ff ff6d 	bl	8014efc <u8g2_font_get_byte>
 8015022:	4603      	mov	r3, r0
 8015024:	b25a      	sxtb	r2, r3
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 801502a:	210c      	movs	r1, #12
 801502c:	6838      	ldr	r0, [r7, #0]
 801502e:	f7ff ff65 	bl	8014efc <u8g2_font_get_byte>
 8015032:	4603      	mov	r3, r0
 8015034:	b25a      	sxtb	r2, r3
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 801503a:	210d      	movs	r1, #13
 801503c:	6838      	ldr	r0, [r7, #0]
 801503e:	f7ff ff5d 	bl	8014efc <u8g2_font_get_byte>
 8015042:	4603      	mov	r3, r0
 8015044:	b25a      	sxtb	r2, r3
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 801504a:	210e      	movs	r1, #14
 801504c:	6838      	ldr	r0, [r7, #0]
 801504e:	f7ff ff55 	bl	8014efc <u8g2_font_get_byte>
 8015052:	4603      	mov	r3, r0
 8015054:	b25a      	sxtb	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 801505a:	210f      	movs	r1, #15
 801505c:	6838      	ldr	r0, [r7, #0]
 801505e:	f7ff ff4d 	bl	8014efc <u8g2_font_get_byte>
 8015062:	4603      	mov	r3, r0
 8015064:	b25a      	sxtb	r2, r3
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 801506a:	2110      	movs	r1, #16
 801506c:	6838      	ldr	r0, [r7, #0]
 801506e:	f7ff ff45 	bl	8014efc <u8g2_font_get_byte>
 8015072:	4603      	mov	r3, r0
 8015074:	b25a      	sxtb	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 801507a:	2111      	movs	r1, #17
 801507c:	6838      	ldr	r0, [r7, #0]
 801507e:	f7ff ff4f 	bl	8014f20 <u8g2_font_get_word>
 8015082:	4603      	mov	r3, r0
 8015084:	461a      	mov	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 801508a:	2113      	movs	r1, #19
 801508c:	6838      	ldr	r0, [r7, #0]
 801508e:	f7ff ff47 	bl	8014f20 <u8g2_font_get_word>
 8015092:	4603      	mov	r3, r0
 8015094:	461a      	mov	r2, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 801509a:	2115      	movs	r1, #21
 801509c:	6838      	ldr	r0, [r7, #0]
 801509e:	f7ff ff3f 	bl	8014f20 <u8g2_font_get_word>
 80150a2:	4603      	mov	r3, r0
 80150a4:	461a      	mov	r2, r3
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	82da      	strh	r2, [r3, #22]
#endif
}
 80150aa:	bf00      	nop
 80150ac:	3708      	adds	r7, #8
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80150b2:	b480      	push	{r7}
 80150b4:	b085      	sub	sp, #20
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	460b      	mov	r3, r1
 80150bc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	7b1b      	ldrb	r3, [r3, #12]
 80150c2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80150cc:	7bfa      	ldrb	r2, [r7, #15]
 80150ce:	7b7b      	ldrb	r3, [r7, #13]
 80150d0:	fa42 f303 	asr.w	r3, r2, r3
 80150d4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80150d6:	7b7b      	ldrb	r3, [r7, #13]
 80150d8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80150da:	7bba      	ldrb	r2, [r7, #14]
 80150dc:	78fb      	ldrb	r3, [r7, #3]
 80150de:	4413      	add	r3, r2
 80150e0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80150e2:	7bbb      	ldrb	r3, [r7, #14]
 80150e4:	2b07      	cmp	r3, #7
 80150e6:	d91a      	bls.n	801511e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80150e8:	2308      	movs	r3, #8
 80150ea:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80150ec:	7b3a      	ldrb	r2, [r7, #12]
 80150ee:	7b7b      	ldrb	r3, [r7, #13]
 80150f0:	1ad3      	subs	r3, r2, r3
 80150f2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	1c5a      	adds	r2, r3, #1
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	461a      	mov	r2, r3
 8015106:	7b3b      	ldrb	r3, [r7, #12]
 8015108:	fa02 f303 	lsl.w	r3, r2, r3
 801510c:	b25a      	sxtb	r2, r3
 801510e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015112:	4313      	orrs	r3, r2
 8015114:	b25b      	sxtb	r3, r3
 8015116:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8015118:	7bbb      	ldrb	r3, [r7, #14]
 801511a:	3b08      	subs	r3, #8
 801511c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 801511e:	78fb      	ldrb	r3, [r7, #3]
 8015120:	f04f 32ff 	mov.w	r2, #4294967295
 8015124:	fa02 f303 	lsl.w	r3, r2, r3
 8015128:	b2db      	uxtb	r3, r3
 801512a:	43db      	mvns	r3, r3
 801512c:	b2da      	uxtb	r2, r3
 801512e:	7bfb      	ldrb	r3, [r7, #15]
 8015130:	4013      	ands	r3, r2
 8015132:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	7bba      	ldrb	r2, [r7, #14]
 8015138:	731a      	strb	r2, [r3, #12]
  return val;
 801513a:	7bfb      	ldrb	r3, [r7, #15]
}
 801513c:	4618      	mov	r0, r3
 801513e:	3714      	adds	r7, #20
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	460b      	mov	r3, r1
 8015152:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8015154:	78fb      	ldrb	r3, [r7, #3]
 8015156:	4619      	mov	r1, r3
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f7ff ffaa 	bl	80150b2 <u8g2_font_decode_get_unsigned_bits>
 801515e:	4603      	mov	r3, r0
 8015160:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8015162:	2301      	movs	r3, #1
 8015164:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8015166:	78fb      	ldrb	r3, [r7, #3]
 8015168:	3b01      	subs	r3, #1
 801516a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 801516c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8015170:	78fb      	ldrb	r3, [r7, #3]
 8015172:	fa02 f303 	lsl.w	r3, r2, r3
 8015176:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8015178:	7bfa      	ldrb	r2, [r7, #15]
 801517a:	7bbb      	ldrb	r3, [r7, #14]
 801517c:	1ad3      	subs	r3, r2, r3
 801517e:	b2db      	uxtb	r3, r3
 8015180:	73fb      	strb	r3, [r7, #15]
  return v;
 8015182:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8015186:	4618      	mov	r0, r3
 8015188:	3710      	adds	r7, #16
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 801518e:	b490      	push	{r4, r7}
 8015190:	b082      	sub	sp, #8
 8015192:	af00      	add	r7, sp, #0
 8015194:	4604      	mov	r4, r0
 8015196:	4608      	mov	r0, r1
 8015198:	4611      	mov	r1, r2
 801519a:	461a      	mov	r2, r3
 801519c:	4623      	mov	r3, r4
 801519e:	80fb      	strh	r3, [r7, #6]
 80151a0:	4603      	mov	r3, r0
 80151a2:	717b      	strb	r3, [r7, #5]
 80151a4:	460b      	mov	r3, r1
 80151a6:	713b      	strb	r3, [r7, #4]
 80151a8:	4613      	mov	r3, r2
 80151aa:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80151ac:	78fb      	ldrb	r3, [r7, #3]
 80151ae:	2b02      	cmp	r3, #2
 80151b0:	d014      	beq.n	80151dc <u8g2_add_vector_y+0x4e>
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	dc19      	bgt.n	80151ea <u8g2_add_vector_y+0x5c>
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d002      	beq.n	80151c0 <u8g2_add_vector_y+0x32>
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	d007      	beq.n	80151ce <u8g2_add_vector_y+0x40>
 80151be:	e014      	b.n	80151ea <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80151c0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80151c4:	b29a      	uxth	r2, r3
 80151c6:	88fb      	ldrh	r3, [r7, #6]
 80151c8:	4413      	add	r3, r2
 80151ca:	80fb      	strh	r3, [r7, #6]
      break;
 80151cc:	e014      	b.n	80151f8 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80151ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	88fb      	ldrh	r3, [r7, #6]
 80151d6:	4413      	add	r3, r2
 80151d8:	80fb      	strh	r3, [r7, #6]
      break;
 80151da:	e00d      	b.n	80151f8 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80151dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	88fa      	ldrh	r2, [r7, #6]
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	80fb      	strh	r3, [r7, #6]
      break;
 80151e8:	e006      	b.n	80151f8 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80151ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	88fa      	ldrh	r2, [r7, #6]
 80151f2:	1ad3      	subs	r3, r2, r3
 80151f4:	80fb      	strh	r3, [r7, #6]
      break;      
 80151f6:	bf00      	nop
  }
  return dy;
 80151f8:	88fb      	ldrh	r3, [r7, #6]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bc90      	pop	{r4, r7}
 8015202:	4770      	bx	lr

08015204 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8015204:	b490      	push	{r4, r7}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	4604      	mov	r4, r0
 801520c:	4608      	mov	r0, r1
 801520e:	4611      	mov	r1, r2
 8015210:	461a      	mov	r2, r3
 8015212:	4623      	mov	r3, r4
 8015214:	80fb      	strh	r3, [r7, #6]
 8015216:	4603      	mov	r3, r0
 8015218:	717b      	strb	r3, [r7, #5]
 801521a:	460b      	mov	r3, r1
 801521c:	713b      	strb	r3, [r7, #4]
 801521e:	4613      	mov	r3, r2
 8015220:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8015222:	78fb      	ldrb	r3, [r7, #3]
 8015224:	2b02      	cmp	r3, #2
 8015226:	d014      	beq.n	8015252 <u8g2_add_vector_x+0x4e>
 8015228:	2b02      	cmp	r3, #2
 801522a:	dc19      	bgt.n	8015260 <u8g2_add_vector_x+0x5c>
 801522c:	2b00      	cmp	r3, #0
 801522e:	d002      	beq.n	8015236 <u8g2_add_vector_x+0x32>
 8015230:	2b01      	cmp	r3, #1
 8015232:	d007      	beq.n	8015244 <u8g2_add_vector_x+0x40>
 8015234:	e014      	b.n	8015260 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8015236:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801523a:	b29a      	uxth	r2, r3
 801523c:	88fb      	ldrh	r3, [r7, #6]
 801523e:	4413      	add	r3, r2
 8015240:	80fb      	strh	r3, [r7, #6]
      break;
 8015242:	e014      	b.n	801526e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8015244:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015248:	b29b      	uxth	r3, r3
 801524a:	88fa      	ldrh	r2, [r7, #6]
 801524c:	1ad3      	subs	r3, r2, r3
 801524e:	80fb      	strh	r3, [r7, #6]
      break;
 8015250:	e00d      	b.n	801526e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8015252:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015256:	b29b      	uxth	r3, r3
 8015258:	88fa      	ldrh	r2, [r7, #6]
 801525a:	1ad3      	subs	r3, r2, r3
 801525c:	80fb      	strh	r3, [r7, #6]
      break;
 801525e:	e006      	b.n	801526e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8015260:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8015264:	b29a      	uxth	r2, r3
 8015266:	88fb      	ldrh	r3, [r7, #6]
 8015268:	4413      	add	r3, r2
 801526a:	80fb      	strh	r3, [r7, #6]
      break;      
 801526c:	bf00      	nop
  }
  return dx;
 801526e:	88fb      	ldrh	r3, [r7, #6]
}
 8015270:	4618      	mov	r0, r3
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bc90      	pop	{r4, r7}
 8015278:	4770      	bx	lr

0801527a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 801527a:	b580      	push	{r7, lr}
 801527c:	b088      	sub	sp, #32
 801527e:	af02      	add	r7, sp, #8
 8015280:	6078      	str	r0, [r7, #4]
 8015282:	460b      	mov	r3, r1
 8015284:	70fb      	strb	r3, [r7, #3]
 8015286:	4613      	mov	r3, r2
 8015288:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	3360      	adds	r3, #96	; 0x60
 801528e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8015290:	78fb      	ldrb	r3, [r7, #3]
 8015292:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801529a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80152a2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80152aa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80152ac:	7bfa      	ldrb	r2, [r7, #15]
 80152ae:	7d7b      	ldrb	r3, [r7, #21]
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80152b4:	7bfb      	ldrb	r3, [r7, #15]
 80152b6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80152b8:	7dfa      	ldrb	r2, [r7, #23]
 80152ba:	7bfb      	ldrb	r3, [r7, #15]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d201      	bcs.n	80152c4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80152c0:	7dfb      	ldrb	r3, [r7, #23]
 80152c2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	889b      	ldrh	r3, [r3, #4]
 80152c8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	88db      	ldrh	r3, [r3, #6]
 80152ce:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80152d0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80152d4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	7c1b      	ldrb	r3, [r3, #16]
 80152dc:	89b8      	ldrh	r0, [r7, #12]
 80152de:	f7ff ff91 	bl	8015204 <u8g2_add_vector_x>
 80152e2:	4603      	mov	r3, r0
 80152e4:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80152e6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80152ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	7c1b      	ldrb	r3, [r3, #16]
 80152f2:	8978      	ldrh	r0, [r7, #10]
 80152f4:	f7ff ff4b 	bl	801518e <u8g2_add_vector_y>
 80152f8:	4603      	mov	r3, r0
 80152fa:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80152fc:	78bb      	ldrb	r3, [r7, #2]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d010      	beq.n	8015324 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	7b9a      	ldrb	r2, [r3, #14]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 801530c:	7dbb      	ldrb	r3, [r7, #22]
 801530e:	b298      	uxth	r0, r3
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	7c1b      	ldrb	r3, [r3, #16]
 8015314:	897a      	ldrh	r2, [r7, #10]
 8015316:	89b9      	ldrh	r1, [r7, #12]
 8015318:	9300      	str	r3, [sp, #0]
 801531a:	4603      	mov	r3, r0
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f000 fbfe 	bl	8015b1e <u8g2_DrawHVLine>
 8015322:	e013      	b.n	801534c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	7b5b      	ldrb	r3, [r3, #13]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d10f      	bne.n	801534c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	7bda      	ldrb	r2, [r3, #15]
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8015336:	7dbb      	ldrb	r3, [r7, #22]
 8015338:	b298      	uxth	r0, r3
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	7c1b      	ldrb	r3, [r3, #16]
 801533e:	897a      	ldrh	r2, [r7, #10]
 8015340:	89b9      	ldrh	r1, [r7, #12]
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	4603      	mov	r3, r0
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f000 fbe9 	bl	8015b1e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 801534c:	7dfa      	ldrb	r2, [r7, #23]
 801534e:	7bfb      	ldrb	r3, [r7, #15]
 8015350:	429a      	cmp	r2, r3
 8015352:	d309      	bcc.n	8015368 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8015354:	7dfa      	ldrb	r2, [r7, #23]
 8015356:	7bfb      	ldrb	r3, [r7, #15]
 8015358:	1ad3      	subs	r3, r2, r3
 801535a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 801535c:	2300      	movs	r3, #0
 801535e:	757b      	strb	r3, [r7, #21]
    ly++;
 8015360:	7d3b      	ldrb	r3, [r7, #20]
 8015362:	3301      	adds	r3, #1
 8015364:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8015366:	e79d      	b.n	80152a4 <u8g2_font_decode_len+0x2a>
      break;
 8015368:	bf00      	nop
  }
  lx += cnt;
 801536a:	7d7a      	ldrb	r2, [r7, #21]
 801536c:	7dfb      	ldrb	r3, [r7, #23]
 801536e:	4413      	add	r3, r2
 8015370:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8015372:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 801537a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	725a      	strb	r2, [r3, #9]
  
}
 8015382:	bf00      	nop
 8015384:	3718      	adds	r7, #24
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b084      	sub	sp, #16
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
 8015392:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	3360      	adds	r3, #96	; 0x60
 8015398:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	683a      	ldr	r2, [r7, #0]
 801539e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2200      	movs	r2, #0
 80153a4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80153ac:	4619      	mov	r1, r3
 80153ae:	68f8      	ldr	r0, [r7, #12]
 80153b0:	f7ff fe7f 	bl	80150b2 <u8g2_font_decode_get_unsigned_bits>
 80153b4:	4603      	mov	r3, r0
 80153b6:	b25a      	sxtb	r2, r3
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80153c2:	4619      	mov	r1, r3
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	f7ff fe74 	bl	80150b2 <u8g2_font_decode_get_unsigned_bits>
 80153ca:	4603      	mov	r3, r0
 80153cc:	b25a      	sxtb	r2, r3
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	7b9b      	ldrb	r3, [r3, #14]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	bf0c      	ite	eq
 80153e4:	2301      	moveq	r3, #1
 80153e6:	2300      	movne	r3, #0
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	461a      	mov	r2, r3
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	73da      	strb	r2, [r3, #15]
}
 80153f0:	bf00      	nop
 80153f2:	3710      	adds	r7, #16
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b08a      	sub	sp, #40	; 0x28
 80153fc:	af02      	add	r7, sp, #8
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	3360      	adds	r3, #96	; 0x60
 8015406:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8015408:	6839      	ldr	r1, [r7, #0]
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	f7ff ffbd 	bl	801538a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8015416:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 801541e:	4619      	mov	r1, r3
 8015420:	6978      	ldr	r0, [r7, #20]
 8015422:	f7ff fe91 	bl	8015148 <u8g2_font_decode_get_signed_bits>
 8015426:	4603      	mov	r3, r0
 8015428:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8015430:	4619      	mov	r1, r3
 8015432:	6978      	ldr	r0, [r7, #20]
 8015434:	f7ff fe88 	bl	8015148 <u8g2_font_decode_get_signed_bits>
 8015438:	4603      	mov	r3, r0
 801543a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015442:	4619      	mov	r1, r3
 8015444:	6978      	ldr	r0, [r7, #20]
 8015446:	f7ff fe7f 	bl	8015148 <u8g2_font_decode_get_signed_bits>
 801544a:	4603      	mov	r3, r0
 801544c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015454:	2b00      	cmp	r3, #0
 8015456:	f340 80d7 	ble.w	8015608 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	8898      	ldrh	r0, [r3, #4]
 801545e:	7cfa      	ldrb	r2, [r7, #19]
 8015460:	7c7b      	ldrb	r3, [r7, #17]
 8015462:	4413      	add	r3, r2
 8015464:	b2db      	uxtb	r3, r3
 8015466:	425b      	negs	r3, r3
 8015468:	b2db      	uxtb	r3, r3
 801546a:	b25a      	sxtb	r2, r3
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	7c1b      	ldrb	r3, [r3, #16]
 8015470:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8015474:	f7ff fec6 	bl	8015204 <u8g2_add_vector_x>
 8015478:	4603      	mov	r3, r0
 801547a:	461a      	mov	r2, r3
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	88d8      	ldrh	r0, [r3, #6]
 8015484:	7cfa      	ldrb	r2, [r7, #19]
 8015486:	7c7b      	ldrb	r3, [r7, #17]
 8015488:	4413      	add	r3, r2
 801548a:	b2db      	uxtb	r3, r3
 801548c:	425b      	negs	r3, r3
 801548e:	b2db      	uxtb	r3, r3
 8015490:	b25a      	sxtb	r2, r3
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	7c1b      	ldrb	r3, [r3, #16]
 8015496:	f997 1012 	ldrsb.w	r1, [r7, #18]
 801549a:	f7ff fe78 	bl	801518e <u8g2_add_vector_y>
 801549e:	4603      	mov	r3, r0
 80154a0:	461a      	mov	r2, r3
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	889b      	ldrh	r3, [r3, #4]
 80154aa:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	88db      	ldrh	r3, [r3, #6]
 80154b0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80154b2:	8bfb      	ldrh	r3, [r7, #30]
 80154b4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80154b6:	8b7b      	ldrh	r3, [r7, #26]
 80154b8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	7c1b      	ldrb	r3, [r3, #16]
 80154be:	2b03      	cmp	r3, #3
 80154c0:	d85a      	bhi.n	8015578 <u8g2_font_decode_glyph+0x180>
 80154c2:	a201      	add	r2, pc, #4	; (adr r2, 80154c8 <u8g2_font_decode_glyph+0xd0>)
 80154c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154c8:	080154d9 	.word	0x080154d9
 80154cc:	080154f5 	.word	0x080154f5
 80154d0:	0801551d 	.word	0x0801551d
 80154d4:	08015551 	.word	0x08015551
      {
	case 0:
	    x1 += decode->glyph_width;
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80154de:	b29a      	uxth	r2, r3
 80154e0:	8bbb      	ldrh	r3, [r7, #28]
 80154e2:	4413      	add	r3, r2
 80154e4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80154e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154ea:	b29a      	uxth	r2, r3
 80154ec:	8b3b      	ldrh	r3, [r7, #24]
 80154ee:	4413      	add	r3, r2
 80154f0:	833b      	strh	r3, [r7, #24]
	    break;
 80154f2:	e041      	b.n	8015578 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80154f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	8bfa      	ldrh	r2, [r7, #30]
 80154fc:	1ad3      	subs	r3, r2, r3
 80154fe:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015500:	8bfb      	ldrh	r3, [r7, #30]
 8015502:	3301      	adds	r3, #1
 8015504:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8015506:	8bbb      	ldrh	r3, [r7, #28]
 8015508:	3301      	adds	r3, #1
 801550a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015512:	b29a      	uxth	r2, r3
 8015514:	8b3b      	ldrh	r3, [r7, #24]
 8015516:	4413      	add	r3, r2
 8015518:	833b      	strh	r3, [r7, #24]
	    break;
 801551a:	e02d      	b.n	8015578 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015522:	b29b      	uxth	r3, r3
 8015524:	8bfa      	ldrh	r2, [r7, #30]
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801552a:	8bfb      	ldrh	r3, [r7, #30]
 801552c:	3301      	adds	r3, #1
 801552e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8015530:	8bbb      	ldrh	r3, [r7, #28]
 8015532:	3301      	adds	r3, #1
 8015534:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8015536:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801553a:	b29b      	uxth	r3, r3
 801553c:	8b7a      	ldrh	r2, [r7, #26]
 801553e:	1ad3      	subs	r3, r2, r3
 8015540:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8015542:	8b7b      	ldrh	r3, [r7, #26]
 8015544:	3301      	adds	r3, #1
 8015546:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015548:	8b3b      	ldrh	r3, [r7, #24]
 801554a:	3301      	adds	r3, #1
 801554c:	833b      	strh	r3, [r7, #24]
	    break;	  
 801554e:	e013      	b.n	8015578 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8015550:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015554:	b29a      	uxth	r2, r3
 8015556:	8bbb      	ldrh	r3, [r7, #28]
 8015558:	4413      	add	r3, r2
 801555a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8015562:	b29b      	uxth	r3, r3
 8015564:	8b7a      	ldrh	r2, [r7, #26]
 8015566:	1ad3      	subs	r3, r2, r3
 8015568:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801556a:	8b7b      	ldrh	r3, [r7, #26]
 801556c:	3301      	adds	r3, #1
 801556e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8015570:	8b3b      	ldrh	r3, [r7, #24]
 8015572:	3301      	adds	r3, #1
 8015574:	833b      	strh	r3, [r7, #24]
	    break;	  
 8015576:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8015578:	8bb8      	ldrh	r0, [r7, #28]
 801557a:	8b7a      	ldrh	r2, [r7, #26]
 801557c:	8bf9      	ldrh	r1, [r7, #30]
 801557e:	8b3b      	ldrh	r3, [r7, #24]
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	4603      	mov	r3, r0
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f000 fbbb 	bl	8015d00 <u8g2_IsIntersection>
 801558a:	4603      	mov	r3, r0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d102      	bne.n	8015596 <u8g2_font_decode_glyph+0x19e>
	return d;
 8015590:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8015594:	e03a      	b.n	801560c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	2200      	movs	r2, #0
 801559a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	2200      	movs	r2, #0
 80155a0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80155a8:	4619      	mov	r1, r3
 80155aa:	6978      	ldr	r0, [r7, #20]
 80155ac:	f7ff fd81 	bl	80150b2 <u8g2_font_decode_get_unsigned_bits>
 80155b0:	4603      	mov	r3, r0
 80155b2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80155ba:	4619      	mov	r1, r3
 80155bc:	6978      	ldr	r0, [r7, #20]
 80155be:	f7ff fd78 	bl	80150b2 <u8g2_font_decode_get_unsigned_bits>
 80155c2:	4603      	mov	r3, r0
 80155c4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80155c6:	7bfb      	ldrb	r3, [r7, #15]
 80155c8:	2200      	movs	r2, #0
 80155ca:	4619      	mov	r1, r3
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f7ff fe54 	bl	801527a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80155d2:	7bbb      	ldrb	r3, [r7, #14]
 80155d4:	2201      	movs	r2, #1
 80155d6:	4619      	mov	r1, r3
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7ff fe4e 	bl	801527a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80155de:	2101      	movs	r1, #1
 80155e0:	6978      	ldr	r0, [r7, #20]
 80155e2:	f7ff fd66 	bl	80150b2 <u8g2_font_decode_get_unsigned_bits>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d1ec      	bne.n	80155c6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80155f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	dd00      	ble.n	80155fc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80155fa:	e7d2      	b.n	80155a2 <u8g2_font_decode_glyph+0x1aa>
	break;
 80155fc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	7b9a      	ldrb	r2, [r3, #14]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8015608:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 801560c:	4618      	mov	r0, r3
 801560e:	3720      	adds	r7, #32
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}

08015614 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b086      	sub	sp, #24
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	460b      	mov	r3, r1
 801561e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015624:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	3317      	adds	r3, #23
 801562a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 801562c:	887b      	ldrh	r3, [r7, #2]
 801562e:	2bff      	cmp	r3, #255	; 0xff
 8015630:	d82a      	bhi.n	8015688 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8015632:	887b      	ldrh	r3, [r7, #2]
 8015634:	2b60      	cmp	r3, #96	; 0x60
 8015636:	d907      	bls.n	8015648 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801563e:	461a      	mov	r2, r3
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	4413      	add	r3, r2
 8015644:	617b      	str	r3, [r7, #20]
 8015646:	e009      	b.n	801565c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8015648:	887b      	ldrh	r3, [r7, #2]
 801564a:	2b40      	cmp	r3, #64	; 0x40
 801564c:	d906      	bls.n	801565c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8015654:	461a      	mov	r2, r3
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	4413      	add	r3, r2
 801565a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	3301      	adds	r3, #1
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d04e      	beq.n	8015704 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	b29b      	uxth	r3, r3
 801566c:	887a      	ldrh	r2, [r7, #2]
 801566e:	429a      	cmp	r2, r3
 8015670:	d102      	bne.n	8015678 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	3302      	adds	r3, #2
 8015676:	e049      	b.n	801570c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	3301      	adds	r3, #1
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	461a      	mov	r2, r3
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	4413      	add	r3, r2
 8015684:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8015686:	e7e9      	b.n	801565c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801568e:	461a      	mov	r2, r3
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	4413      	add	r3, r2
 8015694:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 801569a:	2100      	movs	r1, #0
 801569c:	6938      	ldr	r0, [r7, #16]
 801569e:	f7ff fc3f 	bl	8014f20 <u8g2_font_get_word>
 80156a2:	4603      	mov	r3, r0
 80156a4:	461a      	mov	r2, r3
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	4413      	add	r3, r2
 80156aa:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80156ac:	2102      	movs	r1, #2
 80156ae:	6938      	ldr	r0, [r7, #16]
 80156b0:	f7ff fc36 	bl	8014f20 <u8g2_font_get_word>
 80156b4:	4603      	mov	r3, r0
 80156b6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	3304      	adds	r3, #4
 80156bc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80156be:	89fa      	ldrh	r2, [r7, #14]
 80156c0:	887b      	ldrh	r3, [r7, #2]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d3e9      	bcc.n	801569a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80156cc:	89fb      	ldrh	r3, [r7, #14]
 80156ce:	021b      	lsls	r3, r3, #8
 80156d0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	3301      	adds	r3, #1
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	b29a      	uxth	r2, r3
 80156da:	89fb      	ldrh	r3, [r7, #14]
 80156dc:	4313      	orrs	r3, r2
 80156de:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80156e0:	89fb      	ldrh	r3, [r7, #14]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d010      	beq.n	8015708 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80156e6:	89fa      	ldrh	r2, [r7, #14]
 80156e8:	887b      	ldrh	r3, [r7, #2]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d102      	bne.n	80156f4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	3303      	adds	r3, #3
 80156f2:	e00b      	b.n	801570c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	3302      	adds	r3, #2
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	461a      	mov	r2, r3
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	4413      	add	r3, r2
 8015700:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8015702:	e7e0      	b.n	80156c6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8015704:	bf00      	nop
 8015706:	e000      	b.n	801570a <u8g2_font_get_glyph_data+0xf6>
	break;
 8015708:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 801570a:	2300      	movs	r3, #0
}
 801570c:	4618      	mov	r0, r3
 801570e:	3718      	adds	r7, #24
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b086      	sub	sp, #24
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	4608      	mov	r0, r1
 801571e:	4611      	mov	r1, r2
 8015720:	461a      	mov	r2, r3
 8015722:	4603      	mov	r3, r0
 8015724:	817b      	strh	r3, [r7, #10]
 8015726:	460b      	mov	r3, r1
 8015728:	813b      	strh	r3, [r7, #8]
 801572a:	4613      	mov	r3, r2
 801572c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 801572e:	2300      	movs	r3, #0
 8015730:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	897a      	ldrh	r2, [r7, #10]
 8015736:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	893a      	ldrh	r2, [r7, #8]
 801573e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8015742:	88fb      	ldrh	r3, [r7, #6]
 8015744:	4619      	mov	r1, r3
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f7ff ff64 	bl	8015614 <u8g2_font_get_glyph_data>
 801574c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d005      	beq.n	8015760 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8015754:	6939      	ldr	r1, [r7, #16]
 8015756:	68f8      	ldr	r0, [r7, #12]
 8015758:	f7ff fe4e 	bl	80153f8 <u8g2_font_decode_glyph>
 801575c:	4603      	mov	r3, r0
 801575e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8015760:	8afb      	ldrh	r3, [r7, #22]
}
 8015762:	4618      	mov	r0, r3
 8015764:	3718      	adds	r7, #24
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
	...

0801576c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b084      	sub	sp, #16
 8015770:	af00      	add	r7, sp, #0
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	4608      	mov	r0, r1
 8015776:	4611      	mov	r1, r2
 8015778:	461a      	mov	r2, r3
 801577a:	4603      	mov	r3, r0
 801577c:	817b      	strh	r3, [r7, #10]
 801577e:	460b      	mov	r3, r1
 8015780:	813b      	strh	r3, [r7, #8]
 8015782:	4613      	mov	r3, r2
 8015784:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801578c:	2b03      	cmp	r3, #3
 801578e:	d833      	bhi.n	80157f8 <u8g2_DrawGlyph+0x8c>
 8015790:	a201      	add	r2, pc, #4	; (adr r2, 8015798 <u8g2_DrawGlyph+0x2c>)
 8015792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015796:	bf00      	nop
 8015798:	080157a9 	.word	0x080157a9
 801579c:	080157bd 	.word	0x080157bd
 80157a0:	080157d1 	.word	0x080157d1
 80157a4:	080157e5 	.word	0x080157e5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157ac:	68f8      	ldr	r0, [r7, #12]
 80157ae:	4798      	blx	r3
 80157b0:	4603      	mov	r3, r0
 80157b2:	461a      	mov	r2, r3
 80157b4:	893b      	ldrh	r3, [r7, #8]
 80157b6:	4413      	add	r3, r2
 80157b8:	813b      	strh	r3, [r7, #8]
      break;
 80157ba:	e01d      	b.n	80157f8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157c0:	68f8      	ldr	r0, [r7, #12]
 80157c2:	4798      	blx	r3
 80157c4:	4603      	mov	r3, r0
 80157c6:	461a      	mov	r2, r3
 80157c8:	897b      	ldrh	r3, [r7, #10]
 80157ca:	1a9b      	subs	r3, r3, r2
 80157cc:	817b      	strh	r3, [r7, #10]
      break;
 80157ce:	e013      	b.n	80157f8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	4798      	blx	r3
 80157d8:	4603      	mov	r3, r0
 80157da:	461a      	mov	r2, r3
 80157dc:	893b      	ldrh	r3, [r7, #8]
 80157de:	1a9b      	subs	r3, r3, r2
 80157e0:	813b      	strh	r3, [r7, #8]
      break;
 80157e2:	e009      	b.n	80157f8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157e8:	68f8      	ldr	r0, [r7, #12]
 80157ea:	4798      	blx	r3
 80157ec:	4603      	mov	r3, r0
 80157ee:	461a      	mov	r2, r3
 80157f0:	897b      	ldrh	r3, [r7, #10]
 80157f2:	4413      	add	r3, r2
 80157f4:	817b      	strh	r3, [r7, #10]
      break;
 80157f6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80157f8:	88fb      	ldrh	r3, [r7, #6]
 80157fa:	893a      	ldrh	r2, [r7, #8]
 80157fc:	8979      	ldrh	r1, [r7, #10]
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f7ff ff88 	bl	8015714 <u8g2_font_draw_glyph>
 8015804:	4603      	mov	r3, r0
}
 8015806:	4618      	mov	r0, r3
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop

08015810 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b086      	sub	sp, #24
 8015814:	af00      	add	r7, sp, #0
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	607b      	str	r3, [r7, #4]
 801581a:	460b      	mov	r3, r1
 801581c:	817b      	strh	r3, [r7, #10]
 801581e:	4613      	mov	r3, r2
 8015820:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8015822:	68f8      	ldr	r0, [r7, #12]
 8015824:	f000 fc99 	bl	801615a <u8x8_utf8_init>
  sum = 0;
 8015828:	2300      	movs	r3, #0
 801582a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	7812      	ldrb	r2, [r2, #0]
 8015834:	4611      	mov	r1, r2
 8015836:	68f8      	ldr	r0, [r7, #12]
 8015838:	4798      	blx	r3
 801583a:	4603      	mov	r3, r0
 801583c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 801583e:	8abb      	ldrh	r3, [r7, #20]
 8015840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015844:	4293      	cmp	r3, r2
 8015846:	d038      	beq.n	80158ba <u8g2_draw_string+0xaa>
      break;
    str++;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	3301      	adds	r3, #1
 801584c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 801584e:	8abb      	ldrh	r3, [r7, #20]
 8015850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015854:	4293      	cmp	r3, r2
 8015856:	d0e9      	beq.n	801582c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8015858:	8abb      	ldrh	r3, [r7, #20]
 801585a:	893a      	ldrh	r2, [r7, #8]
 801585c:	8979      	ldrh	r1, [r7, #10]
 801585e:	68f8      	ldr	r0, [r7, #12]
 8015860:	f7ff ff84 	bl	801576c <u8g2_DrawGlyph>
 8015864:	4603      	mov	r3, r0
 8015866:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801586e:	2b03      	cmp	r3, #3
 8015870:	d81e      	bhi.n	80158b0 <u8g2_draw_string+0xa0>
 8015872:	a201      	add	r2, pc, #4	; (adr r2, 8015878 <u8g2_draw_string+0x68>)
 8015874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015878:	08015889 	.word	0x08015889
 801587c:	08015893 	.word	0x08015893
 8015880:	0801589d 	.word	0x0801589d
 8015884:	080158a7 	.word	0x080158a7
      {
	case 0:
	  x += delta;
 8015888:	897a      	ldrh	r2, [r7, #10]
 801588a:	8a7b      	ldrh	r3, [r7, #18]
 801588c:	4413      	add	r3, r2
 801588e:	817b      	strh	r3, [r7, #10]
	  break;
 8015890:	e00e      	b.n	80158b0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8015892:	893a      	ldrh	r2, [r7, #8]
 8015894:	8a7b      	ldrh	r3, [r7, #18]
 8015896:	4413      	add	r3, r2
 8015898:	813b      	strh	r3, [r7, #8]
	  break;
 801589a:	e009      	b.n	80158b0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 801589c:	897a      	ldrh	r2, [r7, #10]
 801589e:	8a7b      	ldrh	r3, [r7, #18]
 80158a0:	1ad3      	subs	r3, r2, r3
 80158a2:	817b      	strh	r3, [r7, #10]
	  break;
 80158a4:	e004      	b.n	80158b0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80158a6:	893a      	ldrh	r2, [r7, #8]
 80158a8:	8a7b      	ldrh	r3, [r7, #18]
 80158aa:	1ad3      	subs	r3, r2, r3
 80158ac:	813b      	strh	r3, [r7, #8]
	  break;
 80158ae:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80158b0:	8afa      	ldrh	r2, [r7, #22]
 80158b2:	8a7b      	ldrh	r3, [r7, #18]
 80158b4:	4413      	add	r3, r2
 80158b6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80158b8:	e7b8      	b.n	801582c <u8g2_draw_string+0x1c>
      break;
 80158ba:	bf00      	nop
    }
  }
  return sum;
 80158bc:	8afb      	ldrh	r3, [r7, #22]
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3718      	adds	r7, #24
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
 80158c6:	bf00      	nop

080158c8 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b084      	sub	sp, #16
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	607b      	str	r3, [r7, #4]
 80158d2:	460b      	mov	r3, r1
 80158d4:	817b      	strh	r3, [r7, #10]
 80158d6:	4613      	mov	r3, r2
 80158d8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	4a06      	ldr	r2, [pc, #24]	; (80158f8 <u8g2_DrawUTF8+0x30>)
 80158de:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80158e0:	893a      	ldrh	r2, [r7, #8]
 80158e2:	8979      	ldrh	r1, [r7, #10]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	68f8      	ldr	r0, [r7, #12]
 80158e8:	f7ff ff92 	bl	8015810 <u8g2_draw_string>
 80158ec:	4603      	mov	r3, r0
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3710      	adds	r7, #16
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}
 80158f6:	bf00      	nop
 80158f8:	08016177 	.word	0x08016177

080158fc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80158fc:	b480      	push	{r7}
 80158fe:	b083      	sub	sp, #12
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015908:	2b00      	cmp	r3, #0
 801590a:	d05d      	beq.n	80159c8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 801592a:	2b00      	cmp	r3, #0
 801592c:	d04d      	beq.n	80159ca <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8015934:	2b01      	cmp	r3, #1
 8015936:	d11c      	bne.n	8015972 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8015944:	429a      	cmp	r2, r3
 8015946:	da05      	bge.n	8015954 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8015960:	429a      	cmp	r2, r3
 8015962:	dd32      	ble.n	80159ca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8015970:	e02b      	b.n	80159ca <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8015978:	461a      	mov	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015980:	4619      	mov	r1, r3
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8015988:	440b      	add	r3, r1
 801598a:	429a      	cmp	r2, r3
 801598c:	da0d      	bge.n	80159aa <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015994:	b2da      	uxtb	r2, r3
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 801599c:	b2db      	uxtb	r3, r3
 801599e:	4413      	add	r3, r2
 80159a0:	b2db      	uxtb	r3, r3
 80159a2:	b25a      	sxtb	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80159b6:	429a      	cmp	r2, r3
 80159b8:	dd07      	ble.n	80159ca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80159c6:	e000      	b.n	80159ca <u8g2_UpdateRefHeight+0xce>
    return;
 80159c8:	bf00      	nop
  }  
}
 80159ca:	370c      	adds	r7, #12
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80159d4:	b480      	push	{r7}
 80159d6:	b083      	sub	sp, #12
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  return 0;
 80159dc:	2300      	movs	r3, #0
}
 80159de:	4618      	mov	r0, r3
 80159e0:	370c      	adds	r7, #12
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
	...

080159ec <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b083      	sub	sp, #12
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	4a04      	ldr	r2, [pc, #16]	; (8015a08 <u8g2_SetFontPosBaseline+0x1c>)
 80159f8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80159fa:	bf00      	nop
 80159fc:	370c      	adds	r7, #12
 80159fe:	46bd      	mov	sp, r7
 8015a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop
 8015a08:	080159d5 	.word	0x080159d5

08015a0c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a1a:	683a      	ldr	r2, [r7, #0]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d00b      	beq.n	8015a38 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	683a      	ldr	r2, [r7, #0]
 8015a24:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	3374      	adds	r3, #116	; 0x74
 8015a2a:	6839      	ldr	r1, [r7, #0]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7ff fa97 	bl	8014f60 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f7ff ff62 	bl	80158fc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8015a38:	bf00      	nop
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8015a40:	b480      	push	{r7}
 8015a42:	b087      	sub	sp, #28
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	4611      	mov	r1, r2
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	460b      	mov	r3, r1
 8015a50:	80fb      	strh	r3, [r7, #6]
 8015a52:	4613      	mov	r3, r2
 8015a54:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	881b      	ldrh	r3, [r3, #0]
 8015a5a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8015a5c:	8afb      	ldrh	r3, [r7, #22]
 8015a5e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	881a      	ldrh	r2, [r3, #0]
 8015a64:	8abb      	ldrh	r3, [r7, #20]
 8015a66:	4413      	add	r3, r2
 8015a68:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8015a6a:	8afa      	ldrh	r2, [r7, #22]
 8015a6c:	8abb      	ldrh	r3, [r7, #20]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d90b      	bls.n	8015a8a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8015a72:	8afa      	ldrh	r2, [r7, #22]
 8015a74:	88bb      	ldrh	r3, [r7, #4]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d205      	bcs.n	8015a86 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8015a7a:	88bb      	ldrh	r3, [r7, #4]
 8015a7c:	82bb      	strh	r3, [r7, #20]
      b--;
 8015a7e:	8abb      	ldrh	r3, [r7, #20]
 8015a80:	3b01      	subs	r3, #1
 8015a82:	82bb      	strh	r3, [r7, #20]
 8015a84:	e001      	b.n	8015a8a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8015a86:	88fb      	ldrh	r3, [r7, #6]
 8015a88:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8015a8a:	8afa      	ldrh	r2, [r7, #22]
 8015a8c:	88bb      	ldrh	r3, [r7, #4]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d301      	bcc.n	8015a96 <u8g2_clip_intersection2+0x56>
    return 0;
 8015a92:	2300      	movs	r3, #0
 8015a94:	e01c      	b.n	8015ad0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8015a96:	8aba      	ldrh	r2, [r7, #20]
 8015a98:	88fb      	ldrh	r3, [r7, #6]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d801      	bhi.n	8015aa2 <u8g2_clip_intersection2+0x62>
    return 0;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	e016      	b.n	8015ad0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8015aa2:	8afa      	ldrh	r2, [r7, #22]
 8015aa4:	88fb      	ldrh	r3, [r7, #6]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d201      	bcs.n	8015aae <u8g2_clip_intersection2+0x6e>
    a = c;
 8015aaa:	88fb      	ldrh	r3, [r7, #6]
 8015aac:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8015aae:	8aba      	ldrh	r2, [r7, #20]
 8015ab0:	88bb      	ldrh	r3, [r7, #4]
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d901      	bls.n	8015aba <u8g2_clip_intersection2+0x7a>
    b = d;
 8015ab6:	88bb      	ldrh	r3, [r7, #4]
 8015ab8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	8afa      	ldrh	r2, [r7, #22]
 8015abe:	801a      	strh	r2, [r3, #0]
  b -= a;
 8015ac0:	8aba      	ldrh	r2, [r7, #20]
 8015ac2:	8afb      	ldrh	r3, [r7, #22]
 8015ac4:	1ad3      	subs	r3, r2, r3
 8015ac6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	8aba      	ldrh	r2, [r7, #20]
 8015acc:	801a      	strh	r2, [r3, #0]
  return 1;
 8015ace:	2301      	movs	r3, #1
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	371c      	adds	r7, #28
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ada:	4770      	bx	lr

08015adc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015adc:	b590      	push	{r4, r7, lr}
 8015ade:	b087      	sub	sp, #28
 8015ae0:	af02      	add	r7, sp, #8
 8015ae2:	60f8      	str	r0, [r7, #12]
 8015ae4:	4608      	mov	r0, r1
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	461a      	mov	r2, r3
 8015aea:	4603      	mov	r3, r0
 8015aec:	817b      	strh	r3, [r7, #10]
 8015aee:	460b      	mov	r3, r1
 8015af0:	813b      	strh	r3, [r7, #8]
 8015af2:	4613      	mov	r3, r2
 8015af4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015afa:	893a      	ldrh	r2, [r7, #8]
 8015afc:	1ad3      	subs	r3, r2, r3
 8015afe:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015b04:	88f8      	ldrh	r0, [r7, #6]
 8015b06:	893a      	ldrh	r2, [r7, #8]
 8015b08:	8979      	ldrh	r1, [r7, #10]
 8015b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b0e:	9300      	str	r3, [sp, #0]
 8015b10:	4603      	mov	r3, r0
 8015b12:	68f8      	ldr	r0, [r7, #12]
 8015b14:	47a0      	blx	r4
}
 8015b16:	bf00      	nop
 8015b18:	3714      	adds	r7, #20
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd90      	pop	{r4, r7, pc}

08015b1e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015b1e:	b590      	push	{r4, r7, lr}
 8015b20:	b087      	sub	sp, #28
 8015b22:	af02      	add	r7, sp, #8
 8015b24:	60f8      	str	r0, [r7, #12]
 8015b26:	4608      	mov	r0, r1
 8015b28:	4611      	mov	r1, r2
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	817b      	strh	r3, [r7, #10]
 8015b30:	460b      	mov	r3, r1
 8015b32:	813b      	strh	r3, [r7, #8]
 8015b34:	4613      	mov	r3, r2
 8015b36:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d075      	beq.n	8015c2e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8015b42:	88fb      	ldrh	r3, [r7, #6]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d072      	beq.n	8015c2e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8015b48:	88fb      	ldrh	r3, [r7, #6]
 8015b4a:	2b01      	cmp	r3, #1
 8015b4c:	d91a      	bls.n	8015b84 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8015b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b52:	2b02      	cmp	r3, #2
 8015b54:	d109      	bne.n	8015b6a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8015b56:	897a      	ldrh	r2, [r7, #10]
 8015b58:	88fb      	ldrh	r3, [r7, #6]
 8015b5a:	1ad3      	subs	r3, r2, r3
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	817b      	strh	r3, [r7, #10]
	  x++;
 8015b60:	897b      	ldrh	r3, [r7, #10]
 8015b62:	3301      	adds	r3, #1
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	817b      	strh	r3, [r7, #10]
 8015b68:	e00c      	b.n	8015b84 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8015b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b6e:	2b03      	cmp	r3, #3
 8015b70:	d108      	bne.n	8015b84 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8015b72:	893a      	ldrh	r2, [r7, #8]
 8015b74:	88fb      	ldrh	r3, [r7, #6]
 8015b76:	1ad3      	subs	r3, r2, r3
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	813b      	strh	r3, [r7, #8]
	  y++;
 8015b7c:	893b      	ldrh	r3, [r7, #8]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8015b84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b88:	f003 0301 	and.w	r3, r3, #1
 8015b8c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8015b90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d11a      	bne.n	8015bce <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015b9e:	893b      	ldrh	r3, [r7, #8]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d83b      	bhi.n	8015c1c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8015baa:	893b      	ldrh	r3, [r7, #8]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d937      	bls.n	8015c20 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015bbc:	1db9      	adds	r1, r7, #6
 8015bbe:	f107 000a 	add.w	r0, r7, #10
 8015bc2:	f7ff ff3d 	bl	8015a40 <u8g2_clip_intersection2>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d11a      	bne.n	8015c02 <u8g2_DrawHVLine+0xe4>
	  return;
 8015bcc:	e02f      	b.n	8015c2e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015bd4:	897b      	ldrh	r3, [r7, #10]
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d824      	bhi.n	8015c24 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015be0:	897b      	ldrh	r3, [r7, #10]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d920      	bls.n	8015c28 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015bf2:	1db9      	adds	r1, r7, #6
 8015bf4:	f107 0008 	add.w	r0, r7, #8
 8015bf8:	f7ff ff22 	bl	8015a40 <u8g2_clip_intersection2>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d014      	beq.n	8015c2c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c06:	689c      	ldr	r4, [r3, #8]
 8015c08:	8979      	ldrh	r1, [r7, #10]
 8015c0a:	893a      	ldrh	r2, [r7, #8]
 8015c0c:	88f8      	ldrh	r0, [r7, #6]
 8015c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	4603      	mov	r3, r0
 8015c16:	68f8      	ldr	r0, [r7, #12]
 8015c18:	47a0      	blx	r4
 8015c1a:	e008      	b.n	8015c2e <u8g2_DrawHVLine+0x110>
	  return;
 8015c1c:	bf00      	nop
 8015c1e:	e006      	b.n	8015c2e <u8g2_DrawHVLine+0x110>
	  return;
 8015c20:	bf00      	nop
 8015c22:	e004      	b.n	8015c2e <u8g2_DrawHVLine+0x110>
	  return;
 8015c24:	bf00      	nop
 8015c26:	e002      	b.n	8015c2e <u8g2_DrawHVLine+0x110>
	  return;
 8015c28:	bf00      	nop
 8015c2a:	e000      	b.n	8015c2e <u8g2_DrawHVLine+0x110>
	  return;
 8015c2c:	bf00      	nop
    }
}
 8015c2e:	3714      	adds	r7, #20
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd90      	pop	{r4, r7, pc}

08015c34 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b084      	sub	sp, #16
 8015c38:	af02      	add	r7, sp, #8
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	807b      	strh	r3, [r7, #2]
 8015c40:	4613      	mov	r3, r2
 8015c42:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015c4a:	883a      	ldrh	r2, [r7, #0]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d31a      	bcc.n	8015c86 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8015c56:	883a      	ldrh	r2, [r7, #0]
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d216      	bcs.n	8015c8a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015c62:	887a      	ldrh	r2, [r7, #2]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d312      	bcc.n	8015c8e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015c6e:	887a      	ldrh	r2, [r7, #2]
 8015c70:	429a      	cmp	r2, r3
 8015c72:	d20e      	bcs.n	8015c92 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8015c74:	883a      	ldrh	r2, [r7, #0]
 8015c76:	8879      	ldrh	r1, [r7, #2]
 8015c78:	2300      	movs	r3, #0
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7ff ff4d 	bl	8015b1e <u8g2_DrawHVLine>
 8015c84:	e006      	b.n	8015c94 <u8g2_DrawPixel+0x60>
    return;
 8015c86:	bf00      	nop
 8015c88:	e004      	b.n	8015c94 <u8g2_DrawPixel+0x60>
    return;
 8015c8a:	bf00      	nop
 8015c8c:	e002      	b.n	8015c94 <u8g2_DrawPixel+0x60>
    return;
 8015c8e:	bf00      	nop
 8015c90:	e000      	b.n	8015c94 <u8g2_DrawPixel+0x60>
    return;
 8015c92:	bf00      	nop
}
 8015c94:	3708      	adds	r7, #8
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}

08015c9a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8015c9a:	b490      	push	{r4, r7}
 8015c9c:	b082      	sub	sp, #8
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	4604      	mov	r4, r0
 8015ca2:	4608      	mov	r0, r1
 8015ca4:	4611      	mov	r1, r2
 8015ca6:	461a      	mov	r2, r3
 8015ca8:	4623      	mov	r3, r4
 8015caa:	80fb      	strh	r3, [r7, #6]
 8015cac:	4603      	mov	r3, r0
 8015cae:	80bb      	strh	r3, [r7, #4]
 8015cb0:	460b      	mov	r3, r1
 8015cb2:	807b      	strh	r3, [r7, #2]
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8015cb8:	887a      	ldrh	r2, [r7, #2]
 8015cba:	88bb      	ldrh	r3, [r7, #4]
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d20d      	bcs.n	8015cdc <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015cc0:	883a      	ldrh	r2, [r7, #0]
 8015cc2:	88fb      	ldrh	r3, [r7, #6]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d901      	bls.n	8015ccc <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e014      	b.n	8015cf6 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015ccc:	887a      	ldrh	r2, [r7, #2]
 8015cce:	883b      	ldrh	r3, [r7, #0]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d901      	bls.n	8015cd8 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	e00e      	b.n	8015cf6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015cd8:	2300      	movs	r3, #0
 8015cda:	e00c      	b.n	8015cf6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015cdc:	883a      	ldrh	r2, [r7, #0]
 8015cde:	88fb      	ldrh	r3, [r7, #6]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d907      	bls.n	8015cf4 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8015ce4:	887a      	ldrh	r2, [r7, #2]
 8015ce6:	883b      	ldrh	r3, [r7, #0]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d901      	bls.n	8015cf0 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015cec:	2301      	movs	r3, #1
 8015cee:	e002      	b.n	8015cf6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	e000      	b.n	8015cf6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8015cf4:	2300      	movs	r3, #0
    }
  }
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bc90      	pop	{r4, r7}
 8015cfe:	4770      	bx	lr

08015d00 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b084      	sub	sp, #16
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	60f8      	str	r0, [r7, #12]
 8015d08:	4608      	mov	r0, r1
 8015d0a:	4611      	mov	r1, r2
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	4603      	mov	r3, r0
 8015d10:	817b      	strh	r3, [r7, #10]
 8015d12:	460b      	mov	r3, r1
 8015d14:	813b      	strh	r3, [r7, #8]
 8015d16:	4613      	mov	r3, r2
 8015d18:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8015d26:	8b3b      	ldrh	r3, [r7, #24]
 8015d28:	893a      	ldrh	r2, [r7, #8]
 8015d2a:	f7ff ffb6 	bl	8015c9a <u8g2_is_intersection_decision_tree>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d101      	bne.n	8015d38 <u8g2_IsIntersection+0x38>
    return 0; 
 8015d34:	2300      	movs	r3, #0
 8015d36:	e00a      	b.n	8015d4e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8015d44:	88fb      	ldrh	r3, [r7, #6]
 8015d46:	897a      	ldrh	r2, [r7, #10]
 8015d48:	f7ff ffa7 	bl	8015c9a <u8g2_is_intersection_decision_tree>
 8015d4c:	4603      	mov	r3, r0
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3710      	adds	r7, #16
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}

08015d56 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015d56:	b480      	push	{r7}
 8015d58:	b089      	sub	sp, #36	; 0x24
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	60f8      	str	r0, [r7, #12]
 8015d5e:	4608      	mov	r0, r1
 8015d60:	4611      	mov	r1, r2
 8015d62:	461a      	mov	r2, r3
 8015d64:	4603      	mov	r3, r0
 8015d66:	817b      	strh	r3, [r7, #10]
 8015d68:	460b      	mov	r3, r1
 8015d6a:	813b      	strh	r3, [r7, #8]
 8015d6c:	4613      	mov	r3, r2
 8015d6e:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8015d70:	893b      	ldrh	r3, [r7, #8]
 8015d72:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8015d74:	7efb      	ldrb	r3, [r7, #27]
 8015d76:	f003 0307 	and.w	r3, r3, #7
 8015d7a:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8015d80:	7e3a      	ldrb	r2, [r7, #24]
 8015d82:	7efb      	ldrb	r3, [r7, #27]
 8015d84:	fa02 f303 	lsl.w	r3, r2, r3
 8015d88:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d801      	bhi.n	8015da0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015d9c:	7e3b      	ldrb	r3, [r7, #24]
 8015d9e:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	d001      	beq.n	8015dae <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015daa:	7e3b      	ldrb	r3, [r7, #24]
 8015dac:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015dae:	893b      	ldrh	r3, [r7, #8]
 8015db0:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8015db2:	8afb      	ldrh	r3, [r7, #22]
 8015db4:	f023 0307 	bic.w	r3, r3, #7
 8015db8:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	7c1b      	ldrb	r3, [r3, #16]
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	8afa      	ldrh	r2, [r7, #22]
 8015dc4:	fb12 f303 	smulbb	r3, r2, r3
 8015dc8:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dce:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8015dd0:	8afb      	ldrh	r3, [r7, #22]
 8015dd2:	69fa      	ldr	r2, [r7, #28]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8015dd8:	897b      	ldrh	r3, [r7, #10]
 8015dda:	69fa      	ldr	r2, [r7, #28]
 8015ddc:	4413      	add	r3, r2
 8015dde:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8015de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d117      	bne.n	8015e18 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	781a      	ldrb	r2, [r3, #0]
 8015dec:	7ebb      	ldrb	r3, [r7, #26]
 8015dee:	4313      	orrs	r3, r2
 8015df0:	b2da      	uxtb	r2, r3
 8015df2:	69fb      	ldr	r3, [r7, #28]
 8015df4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	781a      	ldrb	r2, [r3, #0]
 8015dfa:	7e7b      	ldrb	r3, [r7, #25]
 8015dfc:	4053      	eors	r3, r2
 8015dfe:	b2da      	uxtb	r2, r3
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	3301      	adds	r3, #1
 8015e08:	61fb      	str	r3, [r7, #28]
	len--;
 8015e0a:	88fb      	ldrh	r3, [r7, #6]
 8015e0c:	3b01      	subs	r3, #1
 8015e0e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8015e10:	88fb      	ldrh	r3, [r7, #6]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d1e8      	bne.n	8015de8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015e16:	e038      	b.n	8015e8a <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8015e18:	69fb      	ldr	r3, [r7, #28]
 8015e1a:	781a      	ldrb	r2, [r3, #0]
 8015e1c:	7ebb      	ldrb	r3, [r7, #26]
 8015e1e:	4313      	orrs	r3, r2
 8015e20:	b2da      	uxtb	r2, r3
 8015e22:	69fb      	ldr	r3, [r7, #28]
 8015e24:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	781a      	ldrb	r2, [r3, #0]
 8015e2a:	7e7b      	ldrb	r3, [r7, #25]
 8015e2c:	4053      	eors	r3, r2
 8015e2e:	b2da      	uxtb	r2, r3
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8015e34:	7efb      	ldrb	r3, [r7, #27]
 8015e36:	3301      	adds	r3, #1
 8015e38:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8015e3a:	7efb      	ldrb	r3, [r7, #27]
 8015e3c:	f003 0307 	and.w	r3, r3, #7
 8015e40:	76fb      	strb	r3, [r7, #27]
      len--;
 8015e42:	88fb      	ldrh	r3, [r7, #6]
 8015e44:	3b01      	subs	r3, #1
 8015e46:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8015e48:	7efb      	ldrb	r3, [r7, #27]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d114      	bne.n	8015e78 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8015e52:	461a      	mov	r2, r3
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	4413      	add	r3, r2
 8015e58:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e60:	2b01      	cmp	r3, #1
 8015e62:	d801      	bhi.n	8015e68 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8015e64:	2301      	movs	r3, #1
 8015e66:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8015e6e:	2b01      	cmp	r3, #1
 8015e70:	d008      	beq.n	8015e84 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8015e72:	2301      	movs	r3, #1
 8015e74:	767b      	strb	r3, [r7, #25]
 8015e76:	e005      	b.n	8015e84 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8015e78:	7ebb      	ldrb	r3, [r7, #26]
 8015e7a:	005b      	lsls	r3, r3, #1
 8015e7c:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8015e7e:	7e7b      	ldrb	r3, [r7, #25]
 8015e80:	005b      	lsls	r3, r3, #1
 8015e82:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8015e84:	88fb      	ldrh	r3, [r7, #6]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d1c6      	bne.n	8015e18 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015e8a:	bf00      	nop
 8015e8c:	3724      	adds	r7, #36	; 0x24
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e94:	4770      	bx	lr

08015e96 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b082      	sub	sp, #8
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	4798      	blx	r3
}
 8015ecc:	bf00      	nop
 8015ece:	3708      	adds	r7, #8
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}

08015ed4 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	603b      	str	r3, [r7, #0]
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	683a      	ldr	r2, [r7, #0]
 8015eee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	68ba      	ldr	r2, [r7, #8]
 8015ef4:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	79fa      	ldrb	r2, [r7, #7]
 8015efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	2200      	movs	r2, #0
 8015f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2200      	movs	r2, #0
 8015f12:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2201      	movs	r2, #1
 8015f1a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2201      	movs	r2, #1
 8015f22:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	69ba      	ldr	r2, [r7, #24]
 8015f2a:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	68f8      	ldr	r0, [r7, #12]
 8015f34:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015f36:	68f8      	ldr	r0, [r7, #12]
 8015f38:	f7ff ffad 	bl	8015e96 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015f3c:	68f8      	ldr	r0, [r7, #12]
 8015f3e:	f7ff fd55 	bl	80159ec <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8015f4a:	bf00      	nop
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015f52:	b480      	push	{r7}
 8015f54:	b085      	sub	sp, #20
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f66:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015f68:	89fb      	ldrh	r3, [r7, #14]
 8015f6a:	00db      	lsls	r3, r3, #3
 8015f6c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	89fa      	ldrh	r2, [r7, #14]
 8015f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	7c1b      	ldrb	r3, [r3, #16]
 8015f78:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8015f7a:	89fb      	ldrh	r3, [r7, #14]
 8015f7c:	00db      	lsls	r3, r3, #3
 8015f7e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	89fa      	ldrh	r2, [r7, #14]
 8015f84:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015f8c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015f8e:	89fb      	ldrh	r3, [r7, #14]
 8015f90:	00db      	lsls	r3, r3, #3
 8015f92:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	89fa      	ldrh	r2, [r7, #14]
 8015f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fa0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8015fa2:	89fb      	ldrh	r3, [r7, #14]
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8015faa:	4413      	add	r3, r2
 8015fac:	68ba      	ldr	r2, [r7, #8]
 8015fae:	7c52      	ldrb	r2, [r2, #17]
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	dd08      	ble.n	8015fc6 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	7c5b      	ldrb	r3, [r3, #17]
 8015fb8:	b29a      	uxth	r2, r3
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	1ad3      	subs	r3, r2, r3
 8015fc4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8015fc6:	89fb      	ldrh	r3, [r7, #14]
 8015fc8:	00db      	lsls	r3, r3, #3
 8015fca:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8015fe8:	89fb      	ldrh	r3, [r7, #14]
 8015fea:	4413      	add	r3, r2
 8015fec:	b29a      	uxth	r2, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	8a9a      	ldrh	r2, [r3, #20]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	8ada      	ldrh	r2, [r3, #22]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8016008:	bf00      	nop
 801600a:	3714      	adds	r7, #20
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b084      	sub	sp, #16
 8016018:	af02      	add	r7, sp, #8
 801601a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	4603      	mov	r3, r0
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f7ff fe61 	bl	8015d00 <u8g2_IsIntersection>
 801603e:	4603      	mov	r3, r0
 8016040:	2b00      	cmp	r3, #0
 8016042:	d104      	bne.n	801604e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2200      	movs	r2, #0
 8016048:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 801604c:	e03b      	b.n	80160c6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2201      	movs	r2, #1
 8016052:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8016062:	429a      	cmp	r2, r3
 8016064:	d205      	bcs.n	8016072 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801607e:	429a      	cmp	r2, r3
 8016080:	d905      	bls.n	801608e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801609a:	429a      	cmp	r2, r3
 801609c:	d205      	bcs.n	80160aa <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d905      	bls.n	80160c6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80160c6:	bf00      	nop
 80160c8:	3708      	adds	r7, #8
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}

080160ce <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80160ce:	b580      	push	{r7, lr}
 80160d0:	b082      	sub	sp, #8
 80160d2:	af00      	add	r7, sp, #0
 80160d4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f7ff ff3b 	bl	8015f52 <u8g2_update_dimension_common>
}
 80160dc:	bf00      	nop
 80160de:	3708      	adds	r7, #8
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f7ff ff7b 	bl	8016014 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 801611e:	bf00      	nop
 8016120:	3708      	adds	r7, #8
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}

08016126 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8016126:	b580      	push	{r7, lr}
 8016128:	b086      	sub	sp, #24
 801612a:	af02      	add	r7, sp, #8
 801612c:	60f8      	str	r0, [r7, #12]
 801612e:	4608      	mov	r0, r1
 8016130:	4611      	mov	r1, r2
 8016132:	461a      	mov	r2, r3
 8016134:	4603      	mov	r3, r0
 8016136:	817b      	strh	r3, [r7, #10]
 8016138:	460b      	mov	r3, r1
 801613a:	813b      	strh	r3, [r7, #8]
 801613c:	4613      	mov	r3, r2
 801613e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8016140:	88f8      	ldrh	r0, [r7, #6]
 8016142:	893a      	ldrh	r2, [r7, #8]
 8016144:	8979      	ldrh	r1, [r7, #10]
 8016146:	7e3b      	ldrb	r3, [r7, #24]
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	4603      	mov	r3, r0
 801614c:	68f8      	ldr	r0, [r7, #12]
 801614e:	f7ff fcc5 	bl	8015adc <u8g2_draw_hv_line_2dir>
}
 8016152:	bf00      	nop
 8016154:	3710      	adds	r7, #16
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}

0801615a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 801615a:	b480      	push	{r7}
 801615c:	b083      	sub	sp, #12
 801615e:	af00      	add	r7, sp, #0
 8016160:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	2200      	movs	r2, #0
 8016166:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 801616a:	bf00      	nop
 801616c:	370c      	adds	r7, #12
 801616e:	46bd      	mov	sp, r7
 8016170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016174:	4770      	bx	lr

08016176 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8016176:	b480      	push	{r7}
 8016178:	b083      	sub	sp, #12
 801617a:	af00      	add	r7, sp, #0
 801617c:	6078      	str	r0, [r7, #4]
 801617e:	460b      	mov	r3, r1
 8016180:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8016182:	78fb      	ldrb	r3, [r7, #3]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d002      	beq.n	801618e <u8x8_utf8_next+0x18>
 8016188:	78fb      	ldrb	r3, [r7, #3]
 801618a:	2b0a      	cmp	r3, #10
 801618c:	d102      	bne.n	8016194 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 801618e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016192:	e06e      	b.n	8016272 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801619a:	2b00      	cmp	r3, #0
 801619c:	d145      	bne.n	801622a <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 801619e:	78fb      	ldrb	r3, [r7, #3]
 80161a0:	2bfb      	cmp	r3, #251	; 0xfb
 80161a2:	d908      	bls.n	80161b6 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2205      	movs	r2, #5
 80161a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80161ac:	78fb      	ldrb	r3, [r7, #3]
 80161ae:	f003 0301 	and.w	r3, r3, #1
 80161b2:	70fb      	strb	r3, [r7, #3]
 80161b4:	e032      	b.n	801621c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80161b6:	78fb      	ldrb	r3, [r7, #3]
 80161b8:	2bf7      	cmp	r3, #247	; 0xf7
 80161ba:	d908      	bls.n	80161ce <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2204      	movs	r2, #4
 80161c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 80161c4:	78fb      	ldrb	r3, [r7, #3]
 80161c6:	f003 0303 	and.w	r3, r3, #3
 80161ca:	70fb      	strb	r3, [r7, #3]
 80161cc:	e026      	b.n	801621c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80161ce:	78fb      	ldrb	r3, [r7, #3]
 80161d0:	2bef      	cmp	r3, #239	; 0xef
 80161d2:	d908      	bls.n	80161e6 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2203      	movs	r2, #3
 80161d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 80161dc:	78fb      	ldrb	r3, [r7, #3]
 80161de:	f003 0307 	and.w	r3, r3, #7
 80161e2:	70fb      	strb	r3, [r7, #3]
 80161e4:	e01a      	b.n	801621c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80161e6:	78fb      	ldrb	r3, [r7, #3]
 80161e8:	2bdf      	cmp	r3, #223	; 0xdf
 80161ea:	d908      	bls.n	80161fe <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2202      	movs	r2, #2
 80161f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80161f4:	78fb      	ldrb	r3, [r7, #3]
 80161f6:	f003 030f 	and.w	r3, r3, #15
 80161fa:	70fb      	strb	r3, [r7, #3]
 80161fc:	e00e      	b.n	801621c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80161fe:	78fb      	ldrb	r3, [r7, #3]
 8016200:	2bbf      	cmp	r3, #191	; 0xbf
 8016202:	d908      	bls.n	8016216 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2201      	movs	r2, #1
 8016208:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 801620c:	78fb      	ldrb	r3, [r7, #3]
 801620e:	f003 031f 	and.w	r3, r3, #31
 8016212:	70fb      	strb	r3, [r7, #3]
 8016214:	e002      	b.n	801621c <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8016216:	78fb      	ldrb	r3, [r7, #3]
 8016218:	b29b      	uxth	r3, r3
 801621a:	e02a      	b.n	8016272 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 801621c:	78fb      	ldrb	r3, [r7, #3]
 801621e:	b29a      	uxth	r2, r3
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8016224:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016228:	e023      	b.n	8016272 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016230:	3b01      	subs	r3, #1
 8016232:	b2da      	uxtb	r2, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	8c1b      	ldrh	r3, [r3, #32]
 801623e:	019b      	lsls	r3, r3, #6
 8016240:	b29a      	uxth	r2, r3
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8016246:	78fb      	ldrb	r3, [r7, #3]
 8016248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801624c:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	8c1a      	ldrh	r2, [r3, #32]
 8016252:	78fb      	ldrb	r3, [r7, #3]
 8016254:	b29b      	uxth	r3, r3
 8016256:	4313      	orrs	r3, r2
 8016258:	b29a      	uxth	r2, r3
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016264:	2b00      	cmp	r3, #0
 8016266:	d002      	beq.n	801626e <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8016268:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801626c:	e001      	b.n	8016272 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	8c1b      	ldrh	r3, [r3, #32]
}
 8016272:	4618      	mov	r0, r3
 8016274:	370c      	adds	r7, #12
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr

0801627e <u8x8_byte_SetDC>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 801627e:	b590      	push	{r4, r7, lr}
 8016280:	b083      	sub	sp, #12
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	460b      	mov	r3, r1
 8016288:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	691c      	ldr	r4, [r3, #16]
 801628e:	78fa      	ldrb	r2, [r7, #3]
 8016290:	2300      	movs	r3, #0
 8016292:	2120      	movs	r1, #32
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	47a0      	blx	r4
 8016298:	4603      	mov	r3, r0
}
 801629a:	4618      	mov	r0, r3
 801629c:	370c      	adds	r7, #12
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd90      	pop	{r4, r7, pc}

080162a2 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80162a2:	b590      	push	{r4, r7, lr}
 80162a4:	b085      	sub	sp, #20
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	60f8      	str	r0, [r7, #12]
 80162aa:	460b      	mov	r3, r1
 80162ac:	607a      	str	r2, [r7, #4]
 80162ae:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	691c      	ldr	r4, [r3, #16]
 80162b4:	7afa      	ldrb	r2, [r7, #11]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2117      	movs	r1, #23
 80162ba:	68f8      	ldr	r0, [r7, #12]
 80162bc:	47a0      	blx	r4
 80162be:	4603      	mov	r3, r0
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3714      	adds	r7, #20
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd90      	pop	{r4, r7, pc}

080162c8 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	460b      	mov	r3, r1
 80162d2:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80162d4:	1cfb      	adds	r3, r7, #3
 80162d6:	461a      	mov	r2, r3
 80162d8:	2101      	movs	r1, #1
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7ff ffe1 	bl	80162a2 <u8x8_byte_SendBytes>
 80162e0:	4603      	mov	r3, r0
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}

080162ea <u8x8_cad_SendCmd>:
*/

#include "../u8g2/u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80162ea:	b590      	push	{r4, r7, lr}
 80162ec:	b083      	sub	sp, #12
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	6078      	str	r0, [r7, #4]
 80162f2:	460b      	mov	r3, r1
 80162f4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	68dc      	ldr	r4, [r3, #12]
 80162fa:	78fa      	ldrb	r2, [r7, #3]
 80162fc:	2300      	movs	r3, #0
 80162fe:	2115      	movs	r1, #21
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	47a0      	blx	r4
 8016304:	4603      	mov	r3, r0
}
 8016306:	4618      	mov	r0, r3
 8016308:	370c      	adds	r7, #12
 801630a:	46bd      	mov	sp, r7
 801630c:	bd90      	pop	{r4, r7, pc}

0801630e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 801630e:	b590      	push	{r4, r7, lr}
 8016310:	b083      	sub	sp, #12
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]
 8016316:	460b      	mov	r3, r1
 8016318:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	68dc      	ldr	r4, [r3, #12]
 801631e:	78fa      	ldrb	r2, [r7, #3]
 8016320:	2300      	movs	r3, #0
 8016322:	2116      	movs	r1, #22
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	47a0      	blx	r4
 8016328:	4603      	mov	r3, r0
}
 801632a:	4618      	mov	r0, r3
 801632c:	370c      	adds	r7, #12
 801632e:	46bd      	mov	sp, r7
 8016330:	bd90      	pop	{r4, r7, pc}

08016332 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8016332:	b590      	push	{r4, r7, lr}
 8016334:	b085      	sub	sp, #20
 8016336:	af00      	add	r7, sp, #0
 8016338:	60f8      	str	r0, [r7, #12]
 801633a:	460b      	mov	r3, r1
 801633c:	607a      	str	r2, [r7, #4]
 801633e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	68dc      	ldr	r4, [r3, #12]
 8016344:	7afa      	ldrb	r2, [r7, #11]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2117      	movs	r1, #23
 801634a:	68f8      	ldr	r0, [r7, #12]
 801634c:	47a0      	blx	r4
 801634e:	4603      	mov	r3, r0
}
 8016350:	4618      	mov	r0, r3
 8016352:	3714      	adds	r7, #20
 8016354:	46bd      	mov	sp, r7
 8016356:	bd90      	pop	{r4, r7, pc}

08016358 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8016358:	b590      	push	{r4, r7, lr}
 801635a:	b083      	sub	sp, #12
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	68dc      	ldr	r4, [r3, #12]
 8016364:	2300      	movs	r3, #0
 8016366:	2200      	movs	r2, #0
 8016368:	2118      	movs	r1, #24
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	47a0      	blx	r4
 801636e:	4603      	mov	r3, r0
}
 8016370:	4618      	mov	r0, r3
 8016372:	370c      	adds	r7, #12
 8016374:	46bd      	mov	sp, r7
 8016376:	bd90      	pop	{r4, r7, pc}

08016378 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8016378:	b590      	push	{r4, r7, lr}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	68dc      	ldr	r4, [r3, #12]
 8016384:	2300      	movs	r3, #0
 8016386:	2200      	movs	r2, #0
 8016388:	2119      	movs	r1, #25
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	47a0      	blx	r4
 801638e:	4603      	mov	r3, r0
}
 8016390:	4618      	mov	r0, r3
 8016392:	370c      	adds	r7, #12
 8016394:	46bd      	mov	sp, r7
 8016396:	bd90      	pop	{r4, r7, pc}

08016398 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8016398:	b590      	push	{r4, r7, lr}
 801639a:	b085      	sub	sp, #20
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
 80163a0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	73fb      	strb	r3, [r7, #15]
    data++;
 80163a8:	683b      	ldr	r3, [r7, #0]
 80163aa:	3301      	adds	r3, #1
 80163ac:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80163ae:	7bfb      	ldrb	r3, [r7, #15]
 80163b0:	2bfe      	cmp	r3, #254	; 0xfe
 80163b2:	d031      	beq.n	8016418 <u8x8_cad_SendSequence+0x80>
 80163b4:	2bfe      	cmp	r3, #254	; 0xfe
 80163b6:	dc3d      	bgt.n	8016434 <u8x8_cad_SendSequence+0x9c>
 80163b8:	2b19      	cmp	r3, #25
 80163ba:	dc3b      	bgt.n	8016434 <u8x8_cad_SendSequence+0x9c>
 80163bc:	2b18      	cmp	r3, #24
 80163be:	da23      	bge.n	8016408 <u8x8_cad_SendSequence+0x70>
 80163c0:	2b16      	cmp	r3, #22
 80163c2:	dc02      	bgt.n	80163ca <u8x8_cad_SendSequence+0x32>
 80163c4:	2b15      	cmp	r3, #21
 80163c6:	da03      	bge.n	80163d0 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80163c8:	e034      	b.n	8016434 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80163ca:	2b17      	cmp	r3, #23
 80163cc:	d00e      	beq.n	80163ec <u8x8_cad_SendSequence+0x54>
	return;
 80163ce:	e031      	b.n	8016434 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	68dc      	ldr	r4, [r3, #12]
 80163da:	7bba      	ldrb	r2, [r7, #14]
 80163dc:	7bf9      	ldrb	r1, [r7, #15]
 80163de:	2300      	movs	r3, #0
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	47a0      	blx	r4
	  data++;
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	3301      	adds	r3, #1
 80163e8:	603b      	str	r3, [r7, #0]
	  break;
 80163ea:	e022      	b.n	8016432 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80163f2:	f107 030e 	add.w	r3, r7, #14
 80163f6:	461a      	mov	r2, r3
 80163f8:	2101      	movs	r1, #1
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7ff ff99 	bl	8016332 <u8x8_cad_SendData>
	  data++;
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	3301      	adds	r3, #1
 8016404:	603b      	str	r3, [r7, #0]
	  break;
 8016406:	e014      	b.n	8016432 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	68dc      	ldr	r4, [r3, #12]
 801640c:	7bf9      	ldrb	r1, [r7, #15]
 801640e:	2300      	movs	r3, #0
 8016410:	2200      	movs	r2, #0
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	47a0      	blx	r4
	  break;
 8016416:	e00c      	b.n	8016432 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 801641e:	7bbb      	ldrb	r3, [r7, #14]
 8016420:	461a      	mov	r2, r3
 8016422:	2129      	movs	r1, #41	; 0x29
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	f000 f9ec 	bl	8016802 <u8x8_gpio_call>
	  data++;
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	3301      	adds	r3, #1
 801642e:	603b      	str	r3, [r7, #0]
	  break;
 8016430:	bf00      	nop
    cmd = *data;
 8016432:	e7b6      	b.n	80163a2 <u8x8_cad_SendSequence+0xa>
	return;
 8016434:	bf00      	nop
    }
  }
}
 8016436:	3714      	adds	r7, #20
 8016438:	46bd      	mov	sp, r7
 801643a:	bd90      	pop	{r4, r7, pc}

0801643c <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801643c:	b590      	push	{r4, r7, lr}
 801643e:	b085      	sub	sp, #20
 8016440:	af00      	add	r7, sp, #0
 8016442:	60f8      	str	r0, [r7, #12]
 8016444:	607b      	str	r3, [r7, #4]
 8016446:	460b      	mov	r3, r1
 8016448:	72fb      	strb	r3, [r7, #11]
 801644a:	4613      	mov	r3, r2
 801644c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 801644e:	7afb      	ldrb	r3, [r7, #11]
 8016450:	3b14      	subs	r3, #20
 8016452:	2b05      	cmp	r3, #5
 8016454:	d82f      	bhi.n	80164b6 <u8x8_cad_011+0x7a>
 8016456:	a201      	add	r2, pc, #4	; (adr r2, 801645c <u8x8_cad_011+0x20>)
 8016458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801645c:	080164a5 	.word	0x080164a5
 8016460:	08016475 	.word	0x08016475
 8016464:	08016489 	.word	0x08016489
 8016468:	0801649d 	.word	0x0801649d
 801646c:	080164a5 	.word	0x080164a5
 8016470:	080164a5 	.word	0x080164a5
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8016474:	2100      	movs	r1, #0
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f7ff ff01 	bl	801627e <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 801647c:	7abb      	ldrb	r3, [r7, #10]
 801647e:	4619      	mov	r1, r3
 8016480:	68f8      	ldr	r0, [r7, #12]
 8016482:	f7ff ff21 	bl	80162c8 <u8x8_byte_SendByte>
      break;
 8016486:	e018      	b.n	80164ba <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8016488:	2101      	movs	r1, #1
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f7ff fef7 	bl	801627e <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016490:	7abb      	ldrb	r3, [r7, #10]
 8016492:	4619      	mov	r1, r3
 8016494:	68f8      	ldr	r0, [r7, #12]
 8016496:	f7ff ff17 	bl	80162c8 <u8x8_byte_SendByte>
      break;
 801649a:	e00e      	b.n	80164ba <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 801649c:	2101      	movs	r1, #1
 801649e:	68f8      	ldr	r0, [r7, #12]
 80164a0:	f7ff feed 	bl	801627e <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	691c      	ldr	r4, [r3, #16]
 80164a8:	7aba      	ldrb	r2, [r7, #10]
 80164aa:	7af9      	ldrb	r1, [r7, #11]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	68f8      	ldr	r0, [r7, #12]
 80164b0:	47a0      	blx	r4
 80164b2:	4603      	mov	r3, r0
 80164b4:	e002      	b.n	80164bc <u8x8_cad_011+0x80>
    default:
      return 0;
 80164b6:	2300      	movs	r3, #0
 80164b8:	e000      	b.n	80164bc <u8x8_cad_011+0x80>
  }
  return 1;
 80164ba:	2301      	movs	r3, #1
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3714      	adds	r7, #20
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd90      	pop	{r4, r7, pc}

080164c4 <u8x8_d_uc1638_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1638_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b086      	sub	sp, #24
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	60f8      	str	r0, [r7, #12]
 80164cc:	607b      	str	r3, [r7, #4]
 80164ce:	460b      	mov	r3, r1
 80164d0:	72fb      	strb	r3, [r7, #11]
 80164d2:	4613      	mov	r3, r2
 80164d4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 80164d6:	7afb      	ldrb	r3, [r7, #11]
 80164d8:	3b0b      	subs	r3, #11
 80164da:	2b04      	cmp	r3, #4
 80164dc:	f200 809e 	bhi.w	801661c <u8x8_d_uc1638_common+0x158>
 80164e0:	a201      	add	r2, pc, #4	; (adr r2, 80164e8 <u8x8_d_uc1638_common+0x24>)
 80164e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164e6:	bf00      	nop
 80164e8:	080165b1 	.word	0x080165b1
 80164ec:	0801661d 	.word	0x0801661d
 80164f0:	080165cb 	.word	0x080165cb
 80164f4:	080165fd 	.word	0x080165fd
 80164f8:	080164fd 	.word	0x080164fd
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80164fc:	68f8      	ldr	r0, [r7, #12]
 80164fe:	f7ff ff2b 	bl	8016358 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	795b      	ldrb	r3, [r3, #5]
 8016506:	75fb      	strb	r3, [r7, #23]
	  x += u8x8->x_offset & 15; //I find this string in the new version
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801650e:	f003 030f 	and.w	r3, r3, #15
 8016512:	b2da      	uxtb	r2, r3
 8016514:	7dfb      	ldrb	r3, [r7, #23]
 8016516:	4413      	add	r3, r2
 8016518:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 801651a:	7dfb      	ldrb	r3, [r7, #23]
 801651c:	00db      	lsls	r3, r3, #3
 801651e:	75fb      	strb	r3, [r7, #23]

      u8x8_cad_SendCmd(u8x8, 0x004);  /* UC1638 */
 8016520:	2104      	movs	r1, #4
 8016522:	68f8      	ldr	r0, [r7, #12]
 8016524:	f7ff fee1 	bl	80162ea <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, x);
 8016528:	7dfb      	ldrb	r3, [r7, #23]
 801652a:	4619      	mov	r1, r3
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f7ff feee 	bl	801630e <u8x8_cad_SendArg>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	799b      	ldrb	r3, [r3, #6]
 8016536:	75bb      	strb	r3, [r7, #22]
	  y += u8x8->x_offset >> 4;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801653e:	091b      	lsrs	r3, r3, #4
 8016540:	b2da      	uxtb	r2, r3
 8016542:	7dbb      	ldrb	r3, [r7, #22]
 8016544:	4413      	add	r3, r2
 8016546:	75bb      	strb	r3, [r7, #22]
      //y += u8x8->x_offset;
      //y *= 2;		/* for B/W mode, use only every second page */

      u8x8_cad_SendCmd(u8x8, 0x060 | (y&15));  /* UC1638 */
 8016548:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801654c:	f003 030f 	and.w	r3, r3, #15
 8016550:	b25b      	sxtb	r3, r3
 8016552:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8016556:	b25b      	sxtb	r3, r3
 8016558:	b2db      	uxtb	r3, r3
 801655a:	4619      	mov	r1, r3
 801655c:	68f8      	ldr	r0, [r7, #12]
 801655e:	f7ff fec4 	bl	80162ea <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x070 | (y>>4));  /* UC1638 */
 8016562:	7dbb      	ldrb	r3, [r7, #22]
 8016564:	091b      	lsrs	r3, r3, #4
 8016566:	b2db      	uxtb	r3, r3
 8016568:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801656c:	b2db      	uxtb	r3, r3
 801656e:	4619      	mov	r1, r3
 8016570:	68f8      	ldr	r0, [r7, #12]
 8016572:	f7ff feba 	bl	80162ea <u8x8_cad_SendCmd>
    
    
      u8x8_cad_SendCmd(u8x8, 0x001); /* UC1638 */
 8016576:	2101      	movs	r1, #1
 8016578:	68f8      	ldr	r0, [r7, #12]
 801657a:	f7ff feb6 	bl	80162ea <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	791b      	ldrb	r3, [r3, #4]
 8016582:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8016584:	7d7b      	ldrb	r3, [r7, #21]
 8016586:	00db      	lsls	r3, r3, #3
 8016588:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8016590:	7d7b      	ldrb	r3, [r7, #21]
 8016592:	693a      	ldr	r2, [r7, #16]
 8016594:	4619      	mov	r1, r3
 8016596:	68f8      	ldr	r0, [r7, #12]
 8016598:	f7ff fecb 	bl	8016332 <u8x8_cad_SendData>
	arg_int--;
 801659c:	7abb      	ldrb	r3, [r7, #10]
 801659e:	3b01      	subs	r3, #1
 80165a0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80165a2:	7abb      	ldrb	r3, [r7, #10]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d1f3      	bne.n	8016590 <u8x8_d_uc1638_common+0xcc>
      
      u8x8_cad_EndTransfer(u8x8);
 80165a8:	68f8      	ldr	r0, [r7, #12]
 80165aa:	f7ff fee5 	bl	8016378 <u8x8_cad_EndTransfer>
      break;
 80165ae:	e037      	b.n	8016620 <u8x8_d_uc1638_common+0x15c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80165b0:	7abb      	ldrb	r3, [r7, #10]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d104      	bne.n	80165c0 <u8x8_d_uc1638_common+0xfc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave0_seq);
 80165b6:	491d      	ldr	r1, [pc, #116]	; (801662c <u8x8_d_uc1638_common+0x168>)
 80165b8:	68f8      	ldr	r0, [r7, #12]
 80165ba:	f7ff feed 	bl	8016398 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
      break;
 80165be:	e02f      	b.n	8016620 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_powersave1_seq);
 80165c0:	491b      	ldr	r1, [pc, #108]	; (8016630 <u8x8_d_uc1638_common+0x16c>)
 80165c2:	68f8      	ldr	r0, [r7, #12]
 80165c4:	f7ff fee8 	bl	8016398 <u8x8_cad_SendSequence>
      break;
 80165c8:	e02a      	b.n	8016620 <u8x8_d_uc1638_common+0x15c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80165ca:	7abb      	ldrb	r3, [r7, #10]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d10a      	bne.n	80165e6 <u8x8_d_uc1638_common+0x122>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip0_seq);
 80165d0:	4918      	ldr	r1, [pc, #96]	; (8016634 <u8x8_d_uc1638_common+0x170>)
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f7ff fee0 	bl	8016398 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	7c9a      	ldrb	r2, [r3, #18]
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 80165e4:	e01c      	b.n	8016620 <u8x8_d_uc1638_common+0x15c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_flip1_seq);
 80165e6:	4914      	ldr	r1, [pc, #80]	; (8016638 <u8x8_d_uc1638_common+0x174>)
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f7ff fed5 	bl	8016398 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	7cda      	ldrb	r2, [r3, #19]
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80165fa:	e011      	b.n	8016620 <u8x8_d_uc1638_common+0x15c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80165fc:	68f8      	ldr	r0, [r7, #12]
 80165fe:	f7ff feab 	bl	8016358 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8016602:	2181      	movs	r1, #129	; 0x81
 8016604:	68f8      	ldr	r0, [r7, #12]
 8016606:	f7ff fe70 	bl	80162ea <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1638 has range from 0 to 255 */
 801660a:	7abb      	ldrb	r3, [r7, #10]
 801660c:	4619      	mov	r1, r3
 801660e:	68f8      	ldr	r0, [r7, #12]
 8016610:	f7ff fe7d 	bl	801630e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8016614:	68f8      	ldr	r0, [r7, #12]
 8016616:	f7ff feaf 	bl	8016378 <u8x8_cad_EndTransfer>
      break;
 801661a:	e001      	b.n	8016620 <u8x8_d_uc1638_common+0x15c>
#endif
    default:
      return 0;
 801661c:	2300      	movs	r3, #0
 801661e:	e000      	b.n	8016622 <u8x8_d_uc1638_common+0x15e>
  }
  return 1;
 8016620:	2301      	movs	r3, #1
}
 8016622:	4618      	mov	r0, r3
 8016624:	3718      	adds	r7, #24
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	080290bc 	.word	0x080290bc
 8016630:	080290c4 	.word	0x080290c4
 8016634:	080290cc 	.word	0x080290cc
 8016638:	080290d4 	.word	0x080290d4

0801663c <u8x8_d_uc1638_240x160>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1638_240x160(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b084      	sub	sp, #16
 8016640:	af00      	add	r7, sp, #0
 8016642:	60f8      	str	r0, [r7, #12]
 8016644:	607b      	str	r3, [r7, #4]
 8016646:	460b      	mov	r3, r1
 8016648:	72fb      	strb	r3, [r7, #11]
 801664a:	4613      	mov	r3, r2
 801664c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1638_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 801664e:	7aba      	ldrb	r2, [r7, #10]
 8016650:	7af9      	ldrb	r1, [r7, #11]
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	68f8      	ldr	r0, [r7, #12]
 8016656:	f7ff ff35 	bl	80164c4 <u8x8_d_uc1638_common>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d114      	bne.n	801668a <u8x8_d_uc1638_240x160+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8016660:	7afb      	ldrb	r3, [r7, #11]
 8016662:	2b09      	cmp	r3, #9
 8016664:	d002      	beq.n	801666c <u8x8_d_uc1638_240x160+0x30>
 8016666:	2b0a      	cmp	r3, #10
 8016668:	d005      	beq.n	8016676 <u8x8_d_uc1638_240x160+0x3a>
 801666a:	e00c      	b.n	8016686 <u8x8_d_uc1638_240x160+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1638_240x160_display_info);
 801666c:	490a      	ldr	r1, [pc, #40]	; (8016698 <u8x8_d_uc1638_240x160+0x5c>)
 801666e:	68f8      	ldr	r0, [r7, #12]
 8016670:	f000 f816 	bl	80166a0 <u8x8_d_helper_display_setup_memory>
	break;
 8016674:	e00a      	b.n	801668c <u8x8_d_uc1638_240x160+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8016676:	68f8      	ldr	r0, [r7, #12]
 8016678:	f000 f826 	bl	80166c8 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1638_240x160_init_seq);
 801667c:	4907      	ldr	r1, [pc, #28]	; (801669c <u8x8_d_uc1638_240x160+0x60>)
 801667e:	68f8      	ldr	r0, [r7, #12]
 8016680:	f7ff fe8a 	bl	8016398 <u8x8_cad_SendSequence>
	break;
 8016684:	e002      	b.n	801668c <u8x8_d_uc1638_240x160+0x50>
      default:
	return 0;		/* msg unknown */
 8016686:	2300      	movs	r3, #0
 8016688:	e001      	b.n	801668e <u8x8_d_uc1638_240x160+0x52>
    }
  }
 801668a:	bf00      	nop
  return 1;
 801668c:	2301      	movs	r3, #1
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	080290dc 	.word	0x080290dc
 801669c:	080290f4 	.word	0x080290f4

080166a0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80166a0:	b480      	push	{r7}
 80166a2:	b083      	sub	sp, #12
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	683a      	ldr	r2, [r7, #0]
 80166ae:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	7c9a      	ldrb	r2, [r3, #18]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80166bc:	bf00      	nop
 80166be:	370c      	adds	r7, #12
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr

080166c8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80166c8:	b590      	push	{r4, r7, lr}
 80166ca:	b083      	sub	sp, #12
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	695c      	ldr	r4, [r3, #20]
 80166d4:	2300      	movs	r3, #0
 80166d6:	2200      	movs	r2, #0
 80166d8:	2128      	movs	r1, #40	; 0x28
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	68dc      	ldr	r4, [r3, #12]
 80166e2:	2300      	movs	r3, #0
 80166e4:	2200      	movs	r2, #0
 80166e6:	2114      	movs	r1, #20
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80166ec:	2201      	movs	r2, #1
 80166ee:	214b      	movs	r1, #75	; 0x4b
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	f000 f886 	bl	8016802 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	791b      	ldrb	r3, [r3, #4]
 80166fc:	461a      	mov	r2, r3
 80166fe:	2129      	movs	r1, #41	; 0x29
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f000 f87e 	bl	8016802 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8016706:	2200      	movs	r2, #0
 8016708:	214b      	movs	r1, #75	; 0x4b
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f000 f879 	bl	8016802 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	791b      	ldrb	r3, [r3, #4]
 8016716:	461a      	mov	r2, r3
 8016718:	2129      	movs	r1, #41	; 0x29
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f000 f871 	bl	8016802 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8016720:	2201      	movs	r2, #1
 8016722:	214b      	movs	r1, #75	; 0x4b
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 f86c 	bl	8016802 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	795b      	ldrb	r3, [r3, #5]
 8016730:	461a      	mov	r2, r3
 8016732:	2129      	movs	r1, #41	; 0x29
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f000 f864 	bl	8016802 <u8x8_gpio_call>
}    
 801673a:	bf00      	nop
 801673c:	370c      	adds	r7, #12
 801673e:	46bd      	mov	sp, r7
 8016740:	bd90      	pop	{r4, r7, pc}

08016742 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8016742:	b590      	push	{r4, r7, lr}
 8016744:	b085      	sub	sp, #20
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]
 801674a:	4608      	mov	r0, r1
 801674c:	4611      	mov	r1, r2
 801674e:	461a      	mov	r2, r3
 8016750:	4603      	mov	r3, r0
 8016752:	70fb      	strb	r3, [r7, #3]
 8016754:	460b      	mov	r3, r1
 8016756:	70bb      	strb	r3, [r7, #2]
 8016758:	4613      	mov	r3, r2
 801675a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 801675c:	78fb      	ldrb	r3, [r7, #3]
 801675e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8016760:	78bb      	ldrb	r3, [r7, #2]
 8016762:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8016764:	787b      	ldrb	r3, [r7, #1]
 8016766:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8016768:	6a3b      	ldr	r3, [r7, #32]
 801676a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	689c      	ldr	r4, [r3, #8]
 8016770:	f107 0308 	add.w	r3, r7, #8
 8016774:	2201      	movs	r2, #1
 8016776:	210f      	movs	r1, #15
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	47a0      	blx	r4
 801677c:	4603      	mov	r3, r0
}
 801677e:	4618      	mov	r0, r3
 8016780:	3714      	adds	r7, #20
 8016782:	46bd      	mov	sp, r7
 8016784:	bd90      	pop	{r4, r7, pc}

08016786 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8016786:	b590      	push	{r4, r7, lr}
 8016788:	b083      	sub	sp, #12
 801678a:	af00      	add	r7, sp, #0
 801678c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	689c      	ldr	r4, [r3, #8]
 8016792:	2300      	movs	r3, #0
 8016794:	2200      	movs	r2, #0
 8016796:	2109      	movs	r1, #9
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	47a0      	blx	r4
}
 801679c:	bf00      	nop
 801679e:	370c      	adds	r7, #12
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd90      	pop	{r4, r7, pc}

080167a4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80167a4:	b590      	push	{r4, r7, lr}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	689c      	ldr	r4, [r3, #8]
 80167b0:	2300      	movs	r3, #0
 80167b2:	2200      	movs	r2, #0
 80167b4:	210a      	movs	r1, #10
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	47a0      	blx	r4
}
 80167ba:	bf00      	nop
 80167bc:	370c      	adds	r7, #12
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd90      	pop	{r4, r7, pc}

080167c2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80167c2:	b590      	push	{r4, r7, lr}
 80167c4:	b083      	sub	sp, #12
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
 80167ca:	460b      	mov	r3, r1
 80167cc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	689c      	ldr	r4, [r3, #8]
 80167d2:	78fa      	ldrb	r2, [r7, #3]
 80167d4:	2300      	movs	r3, #0
 80167d6:	210b      	movs	r1, #11
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	47a0      	blx	r4
}
 80167dc:	bf00      	nop
 80167de:	370c      	adds	r7, #12
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd90      	pop	{r4, r7, pc}

080167e4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80167e4:	b590      	push	{r4, r7, lr}
 80167e6:	b083      	sub	sp, #12
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	689c      	ldr	r4, [r3, #8]
 80167f0:	2300      	movs	r3, #0
 80167f2:	2200      	movs	r2, #0
 80167f4:	2110      	movs	r1, #16
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	47a0      	blx	r4
}
 80167fa:	bf00      	nop
 80167fc:	370c      	adds	r7, #12
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd90      	pop	{r4, r7, pc}

08016802 <u8x8_gpio_call>:

#include "../u8g2/u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8016802:	b590      	push	{r4, r7, lr}
 8016804:	b083      	sub	sp, #12
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
 801680a:	460b      	mov	r3, r1
 801680c:	70fb      	strb	r3, [r7, #3]
 801680e:	4613      	mov	r3, r2
 8016810:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	695c      	ldr	r4, [r3, #20]
 8016816:	78ba      	ldrb	r2, [r7, #2]
 8016818:	78f9      	ldrb	r1, [r7, #3]
 801681a:	2300      	movs	r3, #0
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	47a0      	blx	r4
}
 8016820:	bf00      	nop
 8016822:	370c      	adds	r7, #12
 8016824:	46bd      	mov	sp, r7
 8016826:	bd90      	pop	{r4, r7, pc}

08016828 <u8x8_dummy_cb>:

#include "../u8g2/u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8016828:	b480      	push	{r7}
 801682a:	b085      	sub	sp, #20
 801682c:	af00      	add	r7, sp, #0
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	607b      	str	r3, [r7, #4]
 8016832:	460b      	mov	r3, r1
 8016834:	72fb      	strb	r3, [r7, #11]
 8016836:	4613      	mov	r3, r2
 8016838:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 801683a:	2300      	movs	r3, #0
}
 801683c:	4618      	mov	r0, r3
 801683e:	3714      	adds	r7, #20
 8016840:	46bd      	mov	sp, r7
 8016842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016846:	4770      	bx	lr

08016848 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2200      	movs	r2, #0
 8016854:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	4a11      	ldr	r2, [pc, #68]	; (80168a0 <u8x8_SetupDefaults+0x58>)
 801685a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	4a10      	ldr	r2, [pc, #64]	; (80168a0 <u8x8_SetupDefaults+0x58>)
 8016860:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	4a0e      	ldr	r2, [pc, #56]	; (80168a0 <u8x8_SetupDefaults+0x58>)
 8016866:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	4a0d      	ldr	r2, [pc, #52]	; (80168a0 <u8x8_SetupDefaults+0x58>)
 801686c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2200      	movs	r2, #0
 8016872:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2200      	movs	r2, #0
 801687a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	2200      	movs	r2, #0
 8016882:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	22ff      	movs	r2, #255	; 0xff
 8016888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	22ff      	movs	r2, #255	; 0xff
 8016890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8016894:	bf00      	nop
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	08016829 	.word	0x08016829

080168a4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b084      	sub	sp, #16
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	60b9      	str	r1, [r7, #8]
 80168ae:	607a      	str	r2, [r7, #4]
 80168b0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80168b2:	68f8      	ldr	r0, [r7, #12]
 80168b4:	f7ff ffc8 	bl	8016848 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	68ba      	ldr	r2, [r7, #8]
 80168bc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	687a      	ldr	r2, [r7, #4]
 80168c2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	683a      	ldr	r2, [r7, #0]
 80168c8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	69ba      	ldr	r2, [r7, #24]
 80168ce:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80168d0:	68f8      	ldr	r0, [r7, #12]
 80168d2:	f7ff ff58 	bl	8016786 <u8x8_SetupMemory>
}
 80168d6:	bf00      	nop
 80168d8:	3710      	adds	r7, #16
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}
	...

080168e0 <ADC_options_screen_func>:

const char* SPS_name[16]={ "RATE_2SPS", "RATE_4SPS", "RATE_8SPS", "RATE_16SPS", "RATE_32SPS", "RATE_63SPS", "RATE_125SPS", "RATE_250SPS",
		"RATE_500SPS", "RATE_1000SPS", "RATE_2000SPS", "RATE_4000SPS", "RATE_8000SPS", "RATE_16000SPS", "RATE_32000SPS", "RATE_64000SPS"};

void ADC_options_screen_func(void)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af02      	add	r7, sp, #8
	RTC_view();
 80168e6:	f001 f89f 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80168ea:	4953      	ldr	r1, [pc, #332]	; (8016a38 <ADC_options_screen_func+0x158>)
 80168ec:	4853      	ldr	r0, [pc, #332]	; (8016a3c <ADC_options_screen_func+0x15c>)
 80168ee:	f7ff f88d 	bl	8015a0c <u8g2_SetFont>

	// PGA
	u8g2_DrawUTF8(&u8g2, 10, 40, "PGA:");
 80168f2:	4b53      	ldr	r3, [pc, #332]	; (8016a40 <ADC_options_screen_func+0x160>)
 80168f4:	2228      	movs	r2, #40	; 0x28
 80168f6:	210a      	movs	r1, #10
 80168f8:	4850      	ldr	r0, [pc, #320]	; (8016a3c <ADC_options_screen_func+0x15c>)
 80168fa:	f7fe ffe5 	bl	80158c8 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 40, PGA_name[PGA_GAIN], edit_param, 0);
 80168fe:	4b51      	ldr	r3, [pc, #324]	; (8016a44 <ADC_options_screen_func+0x164>)
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	461a      	mov	r2, r3
 8016904:	4b50      	ldr	r3, [pc, #320]	; (8016a48 <ADC_options_screen_func+0x168>)
 8016906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801690a:	4b50      	ldr	r3, [pc, #320]	; (8016a4c <ADC_options_screen_func+0x16c>)
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	2100      	movs	r1, #0
 8016910:	9100      	str	r1, [sp, #0]
 8016912:	2128      	movs	r1, #40	; 0x28
 8016914:	2078      	movs	r0, #120	; 0x78
 8016916:	f7ec fadb 	bl	8002ed0 <Blink_Edit_Parameter>

	// SPS
	u8g2_DrawUTF8(&u8g2, 10, 60, "SPS:");
 801691a:	4b4d      	ldr	r3, [pc, #308]	; (8016a50 <ADC_options_screen_func+0x170>)
 801691c:	223c      	movs	r2, #60	; 0x3c
 801691e:	210a      	movs	r1, #10
 8016920:	4846      	ldr	r0, [pc, #280]	; (8016a3c <ADC_options_screen_func+0x15c>)
 8016922:	f7fe ffd1 	bl	80158c8 <u8g2_DrawUTF8>
	Blink_Edit_Parameter(120, 60,SPS_name[ADC_SPS], edit_param, 1);
 8016926:	4b4b      	ldr	r3, [pc, #300]	; (8016a54 <ADC_options_screen_func+0x174>)
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	461a      	mov	r2, r3
 801692c:	4b4a      	ldr	r3, [pc, #296]	; (8016a58 <ADC_options_screen_func+0x178>)
 801692e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016932:	4b46      	ldr	r3, [pc, #280]	; (8016a4c <ADC_options_screen_func+0x16c>)
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	2101      	movs	r1, #1
 8016938:	9100      	str	r1, [sp, #0]
 801693a:	213c      	movs	r1, #60	; 0x3c
 801693c:	2078      	movs	r0, #120	; 0x78
 801693e:	f7ec fac7 	bl	8002ed0 <Blink_Edit_Parameter>

	// Calibration
	u8g2_DrawUTF8(&u8g2, 10, 80, "CAL:");
 8016942:	4b46      	ldr	r3, [pc, #280]	; (8016a5c <ADC_options_screen_func+0x17c>)
 8016944:	2250      	movs	r2, #80	; 0x50
 8016946:	210a      	movs	r1, #10
 8016948:	483c      	ldr	r0, [pc, #240]	; (8016a3c <ADC_options_screen_func+0x15c>)
 801694a:	f7fe ffbd 	bl	80158c8 <u8g2_DrawUTF8>
	switch(adc_calibration_mode)
 801694e:	4b44      	ldr	r3, [pc, #272]	; (8016a60 <ADC_options_screen_func+0x180>)
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	2b02      	cmp	r3, #2
 8016954:	d01a      	beq.n	801698c <ADC_options_screen_func+0xac>
 8016956:	2b02      	cmp	r3, #2
 8016958:	dc22      	bgt.n	80169a0 <ADC_options_screen_func+0xc0>
 801695a:	2b00      	cmp	r3, #0
 801695c:	d002      	beq.n	8016964 <ADC_options_screen_func+0x84>
 801695e:	2b01      	cmp	r3, #1
 8016960:	d00a      	beq.n	8016978 <ADC_options_screen_func+0x98>
 8016962:	e01d      	b.n	80169a0 <ADC_options_screen_func+0xc0>
	{
		case 0: Blink_Edit_Parameter(120, 80, "SELF", edit_param, 2); break;
 8016964:	4b39      	ldr	r3, [pc, #228]	; (8016a4c <ADC_options_screen_func+0x16c>)
 8016966:	781b      	ldrb	r3, [r3, #0]
 8016968:	2202      	movs	r2, #2
 801696a:	9200      	str	r2, [sp, #0]
 801696c:	4a3d      	ldr	r2, [pc, #244]	; (8016a64 <ADC_options_screen_func+0x184>)
 801696e:	2150      	movs	r1, #80	; 0x50
 8016970:	2078      	movs	r0, #120	; 0x78
 8016972:	f7ec faad 	bl	8002ed0 <Blink_Edit_Parameter>
 8016976:	e013      	b.n	80169a0 <ADC_options_screen_func+0xc0>
		case 1: Blink_Edit_Parameter(120, 80, "OFFSET", edit_param, 2); break;
 8016978:	4b34      	ldr	r3, [pc, #208]	; (8016a4c <ADC_options_screen_func+0x16c>)
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2202      	movs	r2, #2
 801697e:	9200      	str	r2, [sp, #0]
 8016980:	4a39      	ldr	r2, [pc, #228]	; (8016a68 <ADC_options_screen_func+0x188>)
 8016982:	2150      	movs	r1, #80	; 0x50
 8016984:	2078      	movs	r0, #120	; 0x78
 8016986:	f7ec faa3 	bl	8002ed0 <Blink_Edit_Parameter>
 801698a:	e009      	b.n	80169a0 <ADC_options_screen_func+0xc0>
		case 2: Blink_Edit_Parameter(120, 80, "FULL SCALE", edit_param, 2); break;
 801698c:	4b2f      	ldr	r3, [pc, #188]	; (8016a4c <ADC_options_screen_func+0x16c>)
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	2202      	movs	r2, #2
 8016992:	9200      	str	r2, [sp, #0]
 8016994:	4a35      	ldr	r2, [pc, #212]	; (8016a6c <ADC_options_screen_func+0x18c>)
 8016996:	2150      	movs	r1, #80	; 0x50
 8016998:	2078      	movs	r0, #120	; 0x78
 801699a:	f7ec fa99 	bl	8002ed0 <Blink_Edit_Parameter>
 801699e:	bf00      	nop
	}

	// Window size
	u8g2_DrawUTF8(&u8g2, 10, 100, "SIZE:");
 80169a0:	4b33      	ldr	r3, [pc, #204]	; (8016a70 <ADC_options_screen_func+0x190>)
 80169a2:	2264      	movs	r2, #100	; 0x64
 80169a4:	210a      	movs	r1, #10
 80169a6:	4825      	ldr	r0, [pc, #148]	; (8016a3c <ADC_options_screen_func+0x15c>)
 80169a8:	f7fe ff8e 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", ADC_Buff_size);
 80169ac:	4b31      	ldr	r3, [pc, #196]	; (8016a74 <ADC_options_screen_func+0x194>)
 80169ae:	881b      	ldrh	r3, [r3, #0]
 80169b0:	461a      	mov	r2, r3
 80169b2:	4931      	ldr	r1, [pc, #196]	; (8016a78 <ADC_options_screen_func+0x198>)
 80169b4:	4831      	ldr	r0, [pc, #196]	; (8016a7c <ADC_options_screen_func+0x19c>)
 80169b6:	f007 f987 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(120, 100, RAM, edit_param, 3);
 80169ba:	4b24      	ldr	r3, [pc, #144]	; (8016a4c <ADC_options_screen_func+0x16c>)
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	2203      	movs	r2, #3
 80169c0:	9200      	str	r2, [sp, #0]
 80169c2:	4a2e      	ldr	r2, [pc, #184]	; (8016a7c <ADC_options_screen_func+0x19c>)
 80169c4:	2164      	movs	r1, #100	; 0x64
 80169c6:	2078      	movs	r0, #120	; 0x78
 80169c8:	f7ec fa82 	bl	8002ed0 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 120, "OFF PERIOD:");
 80169cc:	4b2c      	ldr	r3, [pc, #176]	; (8016a80 <ADC_options_screen_func+0x1a0>)
 80169ce:	2278      	movs	r2, #120	; 0x78
 80169d0:	210a      	movs	r1, #10
 80169d2:	481a      	ldr	r0, [pc, #104]	; (8016a3c <ADC_options_screen_func+0x15c>)
 80169d4:	f7fe ff78 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoOffCoef_period);
 80169d8:	4b2a      	ldr	r3, [pc, #168]	; (8016a84 <ADC_options_screen_func+0x1a4>)
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	461a      	mov	r2, r3
 80169de:	4926      	ldr	r1, [pc, #152]	; (8016a78 <ADC_options_screen_func+0x198>)
 80169e0:	4826      	ldr	r0, [pc, #152]	; (8016a7c <ADC_options_screen_func+0x19c>)
 80169e2:	f007 f971 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(160, 120, RAM, edit_param, 4);
 80169e6:	4b19      	ldr	r3, [pc, #100]	; (8016a4c <ADC_options_screen_func+0x16c>)
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	2204      	movs	r2, #4
 80169ec:	9200      	str	r2, [sp, #0]
 80169ee:	4a23      	ldr	r2, [pc, #140]	; (8016a7c <ADC_options_screen_func+0x19c>)
 80169f0:	2178      	movs	r1, #120	; 0x78
 80169f2:	20a0      	movs	r0, #160	; 0xa0
 80169f4:	f7ec fa6c 	bl	8002ed0 <Blink_Edit_Parameter>

	// Period
	u8g2_DrawUTF8(&u8g2, 10, 140, "GAIN PERIOD:");
 80169f8:	4b23      	ldr	r3, [pc, #140]	; (8016a88 <ADC_options_screen_func+0x1a8>)
 80169fa:	228c      	movs	r2, #140	; 0x8c
 80169fc:	210a      	movs	r1, #10
 80169fe:	480f      	ldr	r0, [pc, #60]	; (8016a3c <ADC_options_screen_func+0x15c>)
 8016a00:	f7fe ff62 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", AutoGainCoef_period);
 8016a04:	4b21      	ldr	r3, [pc, #132]	; (8016a8c <ADC_options_screen_func+0x1ac>)
 8016a06:	881b      	ldrh	r3, [r3, #0]
 8016a08:	461a      	mov	r2, r3
 8016a0a:	491b      	ldr	r1, [pc, #108]	; (8016a78 <ADC_options_screen_func+0x198>)
 8016a0c:	481b      	ldr	r0, [pc, #108]	; (8016a7c <ADC_options_screen_func+0x19c>)
 8016a0e:	f007 f95b 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(160, 140, RAM, edit_param, 5);
 8016a12:	4b0e      	ldr	r3, [pc, #56]	; (8016a4c <ADC_options_screen_func+0x16c>)
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	2205      	movs	r2, #5
 8016a18:	9200      	str	r2, [sp, #0]
 8016a1a:	4a18      	ldr	r2, [pc, #96]	; (8016a7c <ADC_options_screen_func+0x19c>)
 8016a1c:	218c      	movs	r1, #140	; 0x8c
 8016a1e:	20a0      	movs	r0, #160	; 0xa0
 8016a20:	f7ec fa56 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016a24:	4805      	ldr	r0, [pc, #20]	; (8016a3c <ADC_options_screen_func+0x15c>)
 8016a26:	f7fe f9b4 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016a2a:	4804      	ldr	r0, [pc, #16]	; (8016a3c <ADC_options_screen_func+0x15c>)
 8016a2c:	f7fe f93e 	bl	8014cac <u8g2_ClearBuffer>
}
 8016a30:	bf00      	nop
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	0802716c 	.word	0x0802716c
 8016a3c:	20001fbc 	.word	0x20001fbc
 8016a40:	080220ac 	.word	0x080220ac
 8016a44:	2000009a 	.word	0x2000009a
 8016a48:	20000050 	.word	0x20000050
 8016a4c:	20000852 	.word	0x20000852
 8016a50:	080220b4 	.word	0x080220b4
 8016a54:	2000009b 	.word	0x2000009b
 8016a58:	20000328 	.word	0x20000328
 8016a5c:	080220bc 	.word	0x080220bc
 8016a60:	2000089f 	.word	0x2000089f
 8016a64:	080220c4 	.word	0x080220c4
 8016a68:	080220cc 	.word	0x080220cc
 8016a6c:	080220d4 	.word	0x080220d4
 8016a70:	080220e0 	.word	0x080220e0
 8016a74:	2000009c 	.word	0x2000009c
 8016a78:	080220e8 	.word	0x080220e8
 8016a7c:	20002070 	.word	0x20002070
 8016a80:	080220ec 	.word	0x080220ec
 8016a84:	2000215c 	.word	0x2000215c
 8016a88:	080220f8 	.word	0x080220f8
 8016a8c:	200020f4 	.word	0x200020f4

08016a90 <ADC_options_screen_S6>:



// DOWN
void ADC_options_screen_S6(void)
{
 8016a90:	b480      	push	{r7}
 8016a92:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8016a94:	4b07      	ldr	r3, [pc, #28]	; (8016ab4 <ADC_options_screen_S6+0x24>)
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	2b04      	cmp	r3, #4
 8016a9a:	d805      	bhi.n	8016aa8 <ADC_options_screen_S6+0x18>
 8016a9c:	4b05      	ldr	r3, [pc, #20]	; (8016ab4 <ADC_options_screen_S6+0x24>)
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	b2da      	uxtb	r2, r3
 8016aa4:	4b03      	ldr	r3, [pc, #12]	; (8016ab4 <ADC_options_screen_S6+0x24>)
 8016aa6:	701a      	strb	r2, [r3, #0]
}
 8016aa8:	bf00      	nop
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab0:	4770      	bx	lr
 8016ab2:	bf00      	nop
 8016ab4:	20000852 	.word	0x20000852

08016ab8 <ADC_options_screen_S7>:

// UP
void ADC_options_screen_S7(void)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8016abc:	4b07      	ldr	r3, [pc, #28]	; (8016adc <ADC_options_screen_S7+0x24>)
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d005      	beq.n	8016ad0 <ADC_options_screen_S7+0x18>
 8016ac4:	4b05      	ldr	r3, [pc, #20]	; (8016adc <ADC_options_screen_S7+0x24>)
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	3b01      	subs	r3, #1
 8016aca:	b2da      	uxtb	r2, r3
 8016acc:	4b03      	ldr	r3, [pc, #12]	; (8016adc <ADC_options_screen_S7+0x24>)
 8016ace:	701a      	strb	r2, [r3, #0]
}
 8016ad0:	bf00      	nop
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad8:	4770      	bx	lr
 8016ada:	bf00      	nop
 8016adc:	20000852 	.word	0x20000852

08016ae0 <ADC_options_screen_S9>:


// MENU
void ADC_options_screen_S9(void)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016ae4:	4b06      	ldr	r3, [pc, #24]	; (8016b00 <ADC_options_screen_S9+0x20>)
 8016ae6:	2208      	movs	r2, #8
 8016ae8:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016aea:	4b06      	ldr	r3, [pc, #24]	; (8016b04 <ADC_options_screen_S9+0x24>)
 8016aec:	22ff      	movs	r2, #255	; 0xff
 8016aee:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 8016af0:	4b05      	ldr	r3, [pc, #20]	; (8016b08 <ADC_options_screen_S9+0x28>)
 8016af2:	2205      	movs	r2, #5
 8016af4:	701a      	strb	r2, [r3, #0]
}
 8016af6:	bf00      	nop
 8016af8:	46bd      	mov	sp, r7
 8016afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afe:	4770      	bx	lr
 8016b00:	2000004c 	.word	0x2000004c
 8016b04:	20000398 	.word	0x20000398
 8016b08:	20000399 	.word	0x20000399

08016b0c <ADC_options_screen_S4>:



// ENTER
void ADC_options_screen_S4(void)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016b10:	4b21      	ldr	r3, [pc, #132]	; (8016b98 <ADC_options_screen_S4+0x8c>)
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2b05      	cmp	r3, #5
 8016b16:	d83c      	bhi.n	8016b92 <ADC_options_screen_S4+0x86>
 8016b18:	a201      	add	r2, pc, #4	; (adr r2, 8016b20 <ADC_options_screen_S4+0x14>)
 8016b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b1e:	bf00      	nop
 8016b20:	08016b39 	.word	0x08016b39
 8016b24:	08016b47 	.word	0x08016b47
 8016b28:	08016b55 	.word	0x08016b55
 8016b2c:	08016b69 	.word	0x08016b69
 8016b30:	08016b77 	.word	0x08016b77
 8016b34:	08016b85 	.word	0x08016b85
	{
		case 0: Save_Settings(PGA_GAIN_tag, PGA_GAIN); break;
 8016b38:	4b18      	ldr	r3, [pc, #96]	; (8016b9c <ADC_options_screen_S4+0x90>)
 8016b3a:	781b      	ldrb	r3, [r3, #0]
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	2008      	movs	r0, #8
 8016b40:	f7ee fda6 	bl	8005690 <Save_Settings>
 8016b44:	e025      	b.n	8016b92 <ADC_options_screen_S4+0x86>
		case 1: Save_Settings(ADC_SPS_tag, ADC_SPS); break;
 8016b46:	4b16      	ldr	r3, [pc, #88]	; (8016ba0 <ADC_options_screen_S4+0x94>)
 8016b48:	781b      	ldrb	r3, [r3, #0]
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	2009      	movs	r0, #9
 8016b4e:	f7ee fd9f 	bl	8005690 <Save_Settings>
 8016b52:	e01e      	b.n	8016b92 <ADC_options_screen_S4+0x86>
		case 2: Save_Settings(adc_calibration_mode_tag, adc_calibration_mode); adc_start_calibration=1; break;
 8016b54:	4b13      	ldr	r3, [pc, #76]	; (8016ba4 <ADC_options_screen_S4+0x98>)
 8016b56:	781b      	ldrb	r3, [r3, #0]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	200a      	movs	r0, #10
 8016b5c:	f7ee fd98 	bl	8005690 <Save_Settings>
 8016b60:	4b11      	ldr	r3, [pc, #68]	; (8016ba8 <ADC_options_screen_S4+0x9c>)
 8016b62:	2201      	movs	r2, #1
 8016b64:	701a      	strb	r2, [r3, #0]
 8016b66:	e014      	b.n	8016b92 <ADC_options_screen_S4+0x86>
		case 3: Save_Settings(ADC_Buff_size_tag, ADC_Buff_size); break;
 8016b68:	4b10      	ldr	r3, [pc, #64]	; (8016bac <ADC_options_screen_S4+0xa0>)
 8016b6a:	881b      	ldrh	r3, [r3, #0]
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	200b      	movs	r0, #11
 8016b70:	f7ee fd8e 	bl	8005690 <Save_Settings>
 8016b74:	e00d      	b.n	8016b92 <ADC_options_screen_S4+0x86>
		case 4: Save_Settings(AutoOffCoef_period_tag, AutoOffCoef_period); break;
 8016b76:	4b0e      	ldr	r3, [pc, #56]	; (8016bb0 <ADC_options_screen_S4+0xa4>)
 8016b78:	881b      	ldrh	r3, [r3, #0]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	201f      	movs	r0, #31
 8016b7e:	f7ee fd87 	bl	8005690 <Save_Settings>
 8016b82:	e006      	b.n	8016b92 <ADC_options_screen_S4+0x86>
		case 5: Save_Settings(AutoGainCoef_period_tag, AutoGainCoef_period); break;
 8016b84:	4b0b      	ldr	r3, [pc, #44]	; (8016bb4 <ADC_options_screen_S4+0xa8>)
 8016b86:	881b      	ldrh	r3, [r3, #0]
 8016b88:	4619      	mov	r1, r3
 8016b8a:	2021      	movs	r0, #33	; 0x21
 8016b8c:	f7ee fd80 	bl	8005690 <Save_Settings>
 8016b90:	bf00      	nop
	}
}
 8016b92:	bf00      	nop
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	20000852 	.word	0x20000852
 8016b9c:	2000009a 	.word	0x2000009a
 8016ba0:	2000009b 	.word	0x2000009b
 8016ba4:	2000089f 	.word	0x2000089f
 8016ba8:	2000081c 	.word	0x2000081c
 8016bac:	2000009c 	.word	0x2000009c
 8016bb0:	2000215c 	.word	0x2000215c
 8016bb4:	200020f4 	.word	0x200020f4

08016bb8 <ADC_options_screen_S8>:



// BACKWARD
void ADC_options_screen_S8(void)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016bbc:	4b35      	ldr	r3, [pc, #212]	; (8016c94 <ADC_options_screen_S8+0xdc>)
 8016bbe:	781b      	ldrb	r3, [r3, #0]
 8016bc0:	2b05      	cmp	r3, #5
 8016bc2:	d864      	bhi.n	8016c8e <ADC_options_screen_S8+0xd6>
 8016bc4:	a201      	add	r2, pc, #4	; (adr r2, 8016bcc <ADC_options_screen_S8+0x14>)
 8016bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bca:	bf00      	nop
 8016bcc:	08016be5 	.word	0x08016be5
 8016bd0:	08016c0f 	.word	0x08016c0f
 8016bd4:	08016c25 	.word	0x08016c25
 8016bd8:	08016c3b 	.word	0x08016c3b
 8016bdc:	08016c51 	.word	0x08016c51
 8016be0:	08016c67 	.word	0x08016c67
	{
		case 0: if(PGA_GAIN>0)PGA_GAIN--;
 8016be4:	4b2c      	ldr	r3, [pc, #176]	; (8016c98 <ADC_options_screen_S8+0xe0>)
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d005      	beq.n	8016bf8 <ADC_options_screen_S8+0x40>
 8016bec:	4b2a      	ldr	r3, [pc, #168]	; (8016c98 <ADC_options_screen_S8+0xe0>)
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	3b01      	subs	r3, #1
 8016bf2:	b2da      	uxtb	r2, r3
 8016bf4:	4b28      	ldr	r3, [pc, #160]	; (8016c98 <ADC_options_screen_S8+0xe0>)
 8016bf6:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016bf8:	4b27      	ldr	r3, [pc, #156]	; (8016c98 <ADC_options_screen_S8+0xe0>)
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7ea fd43 	bl	8001688 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016c02:	4b26      	ldr	r3, [pc, #152]	; (8016c9c <ADC_options_screen_S8+0xe4>)
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7ea faa0 	bl	800114c <ADC_Conversion>
		break;
 8016c0c:	e03f      	b.n	8016c8e <ADC_options_screen_S8+0xd6>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016c0e:	4b23      	ldr	r3, [pc, #140]	; (8016c9c <ADC_options_screen_S8+0xe4>)
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d032      	beq.n	8016c7c <ADC_options_screen_S8+0xc4>
 8016c16:	4b21      	ldr	r3, [pc, #132]	; (8016c9c <ADC_options_screen_S8+0xe4>)
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	3b01      	subs	r3, #1
 8016c1c:	b2da      	uxtb	r2, r3
 8016c1e:	4b1f      	ldr	r3, [pc, #124]	; (8016c9c <ADC_options_screen_S8+0xe4>)
 8016c20:	701a      	strb	r2, [r3, #0]
 8016c22:	e02b      	b.n	8016c7c <ADC_options_screen_S8+0xc4>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016c24:	4b1e      	ldr	r3, [pc, #120]	; (8016ca0 <ADC_options_screen_S8+0xe8>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d029      	beq.n	8016c80 <ADC_options_screen_S8+0xc8>
 8016c2c:	4b1c      	ldr	r3, [pc, #112]	; (8016ca0 <ADC_options_screen_S8+0xe8>)
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	3b01      	subs	r3, #1
 8016c32:	b2da      	uxtb	r2, r3
 8016c34:	4b1a      	ldr	r3, [pc, #104]	; (8016ca0 <ADC_options_screen_S8+0xe8>)
 8016c36:	701a      	strb	r2, [r3, #0]
 8016c38:	e022      	b.n	8016c80 <ADC_options_screen_S8+0xc8>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016c3a:	4b1a      	ldr	r3, [pc, #104]	; (8016ca4 <ADC_options_screen_S8+0xec>)
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	2b01      	cmp	r3, #1
 8016c40:	d920      	bls.n	8016c84 <ADC_options_screen_S8+0xcc>
 8016c42:	4b18      	ldr	r3, [pc, #96]	; (8016ca4 <ADC_options_screen_S8+0xec>)
 8016c44:	881b      	ldrh	r3, [r3, #0]
 8016c46:	3b01      	subs	r3, #1
 8016c48:	b29a      	uxth	r2, r3
 8016c4a:	4b16      	ldr	r3, [pc, #88]	; (8016ca4 <ADC_options_screen_S8+0xec>)
 8016c4c:	801a      	strh	r2, [r3, #0]
 8016c4e:	e019      	b.n	8016c84 <ADC_options_screen_S8+0xcc>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016c50:	4b15      	ldr	r3, [pc, #84]	; (8016ca8 <ADC_options_screen_S8+0xf0>)
 8016c52:	881b      	ldrh	r3, [r3, #0]
 8016c54:	2b05      	cmp	r3, #5
 8016c56:	d917      	bls.n	8016c88 <ADC_options_screen_S8+0xd0>
 8016c58:	4b13      	ldr	r3, [pc, #76]	; (8016ca8 <ADC_options_screen_S8+0xf0>)
 8016c5a:	881b      	ldrh	r3, [r3, #0]
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	b29a      	uxth	r2, r3
 8016c60:	4b11      	ldr	r3, [pc, #68]	; (8016ca8 <ADC_options_screen_S8+0xf0>)
 8016c62:	801a      	strh	r2, [r3, #0]
 8016c64:	e010      	b.n	8016c88 <ADC_options_screen_S8+0xd0>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016c66:	4b11      	ldr	r3, [pc, #68]	; (8016cac <ADC_options_screen_S8+0xf4>)
 8016c68:	881b      	ldrh	r3, [r3, #0]
 8016c6a:	2b05      	cmp	r3, #5
 8016c6c:	d90e      	bls.n	8016c8c <ADC_options_screen_S8+0xd4>
 8016c6e:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <ADC_options_screen_S8+0xf4>)
 8016c70:	881b      	ldrh	r3, [r3, #0]
 8016c72:	3b01      	subs	r3, #1
 8016c74:	b29a      	uxth	r2, r3
 8016c76:	4b0d      	ldr	r3, [pc, #52]	; (8016cac <ADC_options_screen_S8+0xf4>)
 8016c78:	801a      	strh	r2, [r3, #0]
 8016c7a:	e007      	b.n	8016c8c <ADC_options_screen_S8+0xd4>
		case 1: if(ADC_SPS>0)ADC_SPS--; break;
 8016c7c:	bf00      	nop
 8016c7e:	e006      	b.n	8016c8e <ADC_options_screen_S8+0xd6>
		case 2: if(adc_calibration_mode>0)adc_calibration_mode--; break;
 8016c80:	bf00      	nop
 8016c82:	e004      	b.n	8016c8e <ADC_options_screen_S8+0xd6>
		case 3: if(ADC_Buff_size>1)ADC_Buff_size--; break;
 8016c84:	bf00      	nop
 8016c86:	e002      	b.n	8016c8e <ADC_options_screen_S8+0xd6>
		case 4: if(AutoOffCoef_period>5)AutoOffCoef_period--; break;
 8016c88:	bf00      	nop
 8016c8a:	e000      	b.n	8016c8e <ADC_options_screen_S8+0xd6>
		case 5: if(AutoGainCoef_period>5)AutoGainCoef_period--; break;
 8016c8c:	bf00      	nop
	}
}
 8016c8e:	bf00      	nop
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	20000852 	.word	0x20000852
 8016c98:	2000009a 	.word	0x2000009a
 8016c9c:	2000009b 	.word	0x2000009b
 8016ca0:	2000089f 	.word	0x2000089f
 8016ca4:	2000009c 	.word	0x2000009c
 8016ca8:	2000215c 	.word	0x2000215c
 8016cac:	200020f4 	.word	0x200020f4

08016cb0 <ADC_options_screen_S5>:


// FORWARD
void ADC_options_screen_S5(void)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	af00      	add	r7, sp, #0
	switch(edit_param)
 8016cb4:	4b36      	ldr	r3, [pc, #216]	; (8016d90 <ADC_options_screen_S5+0xe0>)
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	2b05      	cmp	r3, #5
 8016cba:	d867      	bhi.n	8016d8c <ADC_options_screen_S5+0xdc>
 8016cbc:	a201      	add	r2, pc, #4	; (adr r2, 8016cc4 <ADC_options_screen_S5+0x14>)
 8016cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cc2:	bf00      	nop
 8016cc4:	08016cdd 	.word	0x08016cdd
 8016cc8:	08016d07 	.word	0x08016d07
 8016ccc:	08016d1d 	.word	0x08016d1d
 8016cd0:	08016d33 	.word	0x08016d33
 8016cd4:	08016d4b 	.word	0x08016d4b
 8016cd8:	08016d63 	.word	0x08016d63
	{
		case 0: if(PGA_GAIN<8)PGA_GAIN++;
 8016cdc:	4b2d      	ldr	r3, [pc, #180]	; (8016d94 <ADC_options_screen_S5+0xe4>)
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	2b07      	cmp	r3, #7
 8016ce2:	d805      	bhi.n	8016cf0 <ADC_options_screen_S5+0x40>
 8016ce4:	4b2b      	ldr	r3, [pc, #172]	; (8016d94 <ADC_options_screen_S5+0xe4>)
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	3301      	adds	r3, #1
 8016cea:	b2da      	uxtb	r2, r3
 8016cec:	4b29      	ldr	r3, [pc, #164]	; (8016d94 <ADC_options_screen_S5+0xe4>)
 8016cee:	701a      	strb	r2, [r3, #0]
		ADC_PGA_Set(PGA_GAIN);
 8016cf0:	4b28      	ldr	r3, [pc, #160]	; (8016d94 <ADC_options_screen_S5+0xe4>)
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7ea fcc7 	bl	8001688 <ADC_PGA_Set>
		ADC_Conversion(ADC_SPS);
 8016cfa:	4b27      	ldr	r3, [pc, #156]	; (8016d98 <ADC_options_screen_S5+0xe8>)
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7ea fa24 	bl	800114c <ADC_Conversion>
		break;
 8016d04:	e042      	b.n	8016d8c <ADC_options_screen_S5+0xdc>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016d06:	4b24      	ldr	r3, [pc, #144]	; (8016d98 <ADC_options_screen_S5+0xe8>)
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	2b0e      	cmp	r3, #14
 8016d0c:	d835      	bhi.n	8016d7a <ADC_options_screen_S5+0xca>
 8016d0e:	4b22      	ldr	r3, [pc, #136]	; (8016d98 <ADC_options_screen_S5+0xe8>)
 8016d10:	781b      	ldrb	r3, [r3, #0]
 8016d12:	3301      	adds	r3, #1
 8016d14:	b2da      	uxtb	r2, r3
 8016d16:	4b20      	ldr	r3, [pc, #128]	; (8016d98 <ADC_options_screen_S5+0xe8>)
 8016d18:	701a      	strb	r2, [r3, #0]
 8016d1a:	e02e      	b.n	8016d7a <ADC_options_screen_S5+0xca>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016d1c:	4b1f      	ldr	r3, [pc, #124]	; (8016d9c <ADC_options_screen_S5+0xec>)
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	2b01      	cmp	r3, #1
 8016d22:	d82c      	bhi.n	8016d7e <ADC_options_screen_S5+0xce>
 8016d24:	4b1d      	ldr	r3, [pc, #116]	; (8016d9c <ADC_options_screen_S5+0xec>)
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	3301      	adds	r3, #1
 8016d2a:	b2da      	uxtb	r2, r3
 8016d2c:	4b1b      	ldr	r3, [pc, #108]	; (8016d9c <ADC_options_screen_S5+0xec>)
 8016d2e:	701a      	strb	r2, [r3, #0]
 8016d30:	e025      	b.n	8016d7e <ADC_options_screen_S5+0xce>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016d32:	4b1b      	ldr	r3, [pc, #108]	; (8016da0 <ADC_options_screen_S5+0xf0>)
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d3a:	d222      	bcs.n	8016d82 <ADC_options_screen_S5+0xd2>
 8016d3c:	4b18      	ldr	r3, [pc, #96]	; (8016da0 <ADC_options_screen_S5+0xf0>)
 8016d3e:	881b      	ldrh	r3, [r3, #0]
 8016d40:	3301      	adds	r3, #1
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	4b16      	ldr	r3, [pc, #88]	; (8016da0 <ADC_options_screen_S5+0xf0>)
 8016d46:	801a      	strh	r2, [r3, #0]
 8016d48:	e01b      	b.n	8016d82 <ADC_options_screen_S5+0xd2>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016d4a:	4b16      	ldr	r3, [pc, #88]	; (8016da4 <ADC_options_screen_S5+0xf4>)
 8016d4c:	881b      	ldrh	r3, [r3, #0]
 8016d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d52:	d218      	bcs.n	8016d86 <ADC_options_screen_S5+0xd6>
 8016d54:	4b13      	ldr	r3, [pc, #76]	; (8016da4 <ADC_options_screen_S5+0xf4>)
 8016d56:	881b      	ldrh	r3, [r3, #0]
 8016d58:	3301      	adds	r3, #1
 8016d5a:	b29a      	uxth	r2, r3
 8016d5c:	4b11      	ldr	r3, [pc, #68]	; (8016da4 <ADC_options_screen_S5+0xf4>)
 8016d5e:	801a      	strh	r2, [r3, #0]
 8016d60:	e011      	b.n	8016d86 <ADC_options_screen_S5+0xd6>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016d62:	4b11      	ldr	r3, [pc, #68]	; (8016da8 <ADC_options_screen_S5+0xf8>)
 8016d64:	881b      	ldrh	r3, [r3, #0]
 8016d66:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8016d6a:	d20e      	bcs.n	8016d8a <ADC_options_screen_S5+0xda>
 8016d6c:	4b0e      	ldr	r3, [pc, #56]	; (8016da8 <ADC_options_screen_S5+0xf8>)
 8016d6e:	881b      	ldrh	r3, [r3, #0]
 8016d70:	3301      	adds	r3, #1
 8016d72:	b29a      	uxth	r2, r3
 8016d74:	4b0c      	ldr	r3, [pc, #48]	; (8016da8 <ADC_options_screen_S5+0xf8>)
 8016d76:	801a      	strh	r2, [r3, #0]
 8016d78:	e007      	b.n	8016d8a <ADC_options_screen_S5+0xda>
		case 1: if(ADC_SPS<15)ADC_SPS++; break;
 8016d7a:	bf00      	nop
 8016d7c:	e006      	b.n	8016d8c <ADC_options_screen_S5+0xdc>
		case 2: if(adc_calibration_mode<2)adc_calibration_mode++; break;
 8016d7e:	bf00      	nop
 8016d80:	e004      	b.n	8016d8c <ADC_options_screen_S5+0xdc>
		case 3: if(ADC_Buff_size<ADC_BUFF_SIZE)ADC_Buff_size++; break;
 8016d82:	bf00      	nop
 8016d84:	e002      	b.n	8016d8c <ADC_options_screen_S5+0xdc>
		case 4: if(AutoOffCoef_period<ADC_BUFF_SIZE)AutoOffCoef_period++; break;
 8016d86:	bf00      	nop
 8016d88:	e000      	b.n	8016d8c <ADC_options_screen_S5+0xdc>
		case 5: if(AutoGainCoef_period<ADC_BUFF_SIZE*100)AutoGainCoef_period++; break;
 8016d8a:	bf00      	nop
	}
}
 8016d8c:	bf00      	nop
 8016d8e:	bd80      	pop	{r7, pc}
 8016d90:	20000852 	.word	0x20000852
 8016d94:	2000009a 	.word	0x2000009a
 8016d98:	2000009b 	.word	0x2000009b
 8016d9c:	2000089f 	.word	0x2000089f
 8016da0:	2000009c 	.word	0x2000009c
 8016da4:	2000215c 	.word	0x2000215c
 8016da8:	200020f4 	.word	0x200020f4

08016dac <Auto_Off_option_screen_func>:
uint16_t off_min = 0;



void Auto_Off_option_screen_func(void)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af02      	add	r7, sp, #8
	RTC_view();
 8016db2:	f000 fe39 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016db6:	4911      	ldr	r1, [pc, #68]	; (8016dfc <Auto_Off_option_screen_func+0x50>)
 8016db8:	4811      	ldr	r0, [pc, #68]	; (8016e00 <Auto_Off_option_screen_func+0x54>)
 8016dba:	f7fe fe27 	bl	8015a0c <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 20, 60, "Автовыключение:");
 8016dbe:	4b11      	ldr	r3, [pc, #68]	; (8016e04 <Auto_Off_option_screen_func+0x58>)
 8016dc0:	223c      	movs	r2, #60	; 0x3c
 8016dc2:	2114      	movs	r1, #20
 8016dc4:	480e      	ldr	r0, [pc, #56]	; (8016e00 <Auto_Off_option_screen_func+0x54>)
 8016dc6:	f7fe fd7f 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", Auto_Off_Time);
 8016dca:	4b0f      	ldr	r3, [pc, #60]	; (8016e08 <Auto_Off_option_screen_func+0x5c>)
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	461a      	mov	r2, r3
 8016dd0:	490e      	ldr	r1, [pc, #56]	; (8016e0c <Auto_Off_option_screen_func+0x60>)
 8016dd2:	480f      	ldr	r0, [pc, #60]	; (8016e10 <Auto_Off_option_screen_func+0x64>)
 8016dd4:	f006 ff78 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(180, 60, RAM, edit_param, 0);
 8016dd8:	4b0e      	ldr	r3, [pc, #56]	; (8016e14 <Auto_Off_option_screen_func+0x68>)
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	9200      	str	r2, [sp, #0]
 8016de0:	4a0b      	ldr	r2, [pc, #44]	; (8016e10 <Auto_Off_option_screen_func+0x64>)
 8016de2:	213c      	movs	r1, #60	; 0x3c
 8016de4:	20b4      	movs	r0, #180	; 0xb4
 8016de6:	f7ec f873 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8016dea:	4805      	ldr	r0, [pc, #20]	; (8016e00 <Auto_Off_option_screen_func+0x54>)
 8016dec:	f7fd ffd1 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016df0:	4803      	ldr	r0, [pc, #12]	; (8016e00 <Auto_Off_option_screen_func+0x54>)
 8016df2:	f7fd ff5b 	bl	8014cac <u8g2_ClearBuffer>
}
 8016df6:	bf00      	nop
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}
 8016dfc:	0802716c 	.word	0x0802716c
 8016e00:	20001fbc 	.word	0x20001fbc
 8016e04:	08022108 	.word	0x08022108
 8016e08:	200008a0 	.word	0x200008a0
 8016e0c:	08022128 	.word	0x08022128
 8016e10:	20002070 	.word	0x20002070
 8016e14:	20000852 	.word	0x20000852

08016e18 <Auto_Off_option_screen_S9>:



// MENU
void Auto_Off_option_screen_S9(void)
{
 8016e18:	b480      	push	{r7}
 8016e1a:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8016e1c:	4b06      	ldr	r3, [pc, #24]	; (8016e38 <Auto_Off_option_screen_S9+0x20>)
 8016e1e:	2208      	movs	r2, #8
 8016e20:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8016e22:	4b06      	ldr	r3, [pc, #24]	; (8016e3c <Auto_Off_option_screen_S9+0x24>)
 8016e24:	22ff      	movs	r2, #255	; 0xff
 8016e26:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8016e28:	4b05      	ldr	r3, [pc, #20]	; (8016e40 <Auto_Off_option_screen_S9+0x28>)
 8016e2a:	2203      	movs	r2, #3
 8016e2c:	701a      	strb	r2, [r3, #0]
}
 8016e2e:	bf00      	nop
 8016e30:	46bd      	mov	sp, r7
 8016e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e36:	4770      	bx	lr
 8016e38:	2000004c 	.word	0x2000004c
 8016e3c:	20000398 	.word	0x20000398
 8016e40:	20000399 	.word	0x20000399

08016e44 <Auto_Off_option_screen_S8>:

// BACKWARD
void Auto_Off_option_screen_S8(void)
{ if(Auto_Off_Time>1)Auto_Off_Time--; }
 8016e44:	b480      	push	{r7}
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	4b07      	ldr	r3, [pc, #28]	; (8016e68 <Auto_Off_option_screen_S8+0x24>)
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	d905      	bls.n	8016e5c <Auto_Off_option_screen_S8+0x18>
 8016e50:	4b05      	ldr	r3, [pc, #20]	; (8016e68 <Auto_Off_option_screen_S8+0x24>)
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	3b01      	subs	r3, #1
 8016e56:	b29a      	uxth	r2, r3
 8016e58:	4b03      	ldr	r3, [pc, #12]	; (8016e68 <Auto_Off_option_screen_S8+0x24>)
 8016e5a:	801a      	strh	r2, [r3, #0]
 8016e5c:	bf00      	nop
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e64:	4770      	bx	lr
 8016e66:	bf00      	nop
 8016e68:	200008a0 	.word	0x200008a0

08016e6c <Auto_Off_option_screen_S5>:

// FORWARD
void Auto_Off_option_screen_S5(void)
{ if(Auto_Off_Time<120)Auto_Off_Time++; }
 8016e6c:	b480      	push	{r7}
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	4b07      	ldr	r3, [pc, #28]	; (8016e90 <Auto_Off_option_screen_S5+0x24>)
 8016e72:	881b      	ldrh	r3, [r3, #0]
 8016e74:	2b77      	cmp	r3, #119	; 0x77
 8016e76:	d805      	bhi.n	8016e84 <Auto_Off_option_screen_S5+0x18>
 8016e78:	4b05      	ldr	r3, [pc, #20]	; (8016e90 <Auto_Off_option_screen_S5+0x24>)
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	4b03      	ldr	r3, [pc, #12]	; (8016e90 <Auto_Off_option_screen_S5+0x24>)
 8016e82:	801a      	strh	r2, [r3, #0]
 8016e84:	bf00      	nop
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr
 8016e8e:	bf00      	nop
 8016e90:	200008a0 	.word	0x200008a0

08016e94 <Auto_OFF_process>:




void Auto_OFF_process(void)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	af00      	add	r7, sp, #0
	if(Auto_Off_Time!=0)
 8016e98:	4b17      	ldr	r3, [pc, #92]	; (8016ef8 <Auto_OFF_process+0x64>)
 8016e9a:	881b      	ldrh	r3, [r3, #0]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d025      	beq.n	8016eec <Auto_OFF_process+0x58>
	{
		if(++off_sec>=59){off_min++;off_sec=0;}
 8016ea0:	4b16      	ldr	r3, [pc, #88]	; (8016efc <Auto_OFF_process+0x68>)
 8016ea2:	881b      	ldrh	r3, [r3, #0]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	b29a      	uxth	r2, r3
 8016ea8:	4b14      	ldr	r3, [pc, #80]	; (8016efc <Auto_OFF_process+0x68>)
 8016eaa:	801a      	strh	r2, [r3, #0]
 8016eac:	4b13      	ldr	r3, [pc, #76]	; (8016efc <Auto_OFF_process+0x68>)
 8016eae:	881b      	ldrh	r3, [r3, #0]
 8016eb0:	2b3a      	cmp	r3, #58	; 0x3a
 8016eb2:	d908      	bls.n	8016ec6 <Auto_OFF_process+0x32>
 8016eb4:	4b12      	ldr	r3, [pc, #72]	; (8016f00 <Auto_OFF_process+0x6c>)
 8016eb6:	881b      	ldrh	r3, [r3, #0]
 8016eb8:	3301      	adds	r3, #1
 8016eba:	b29a      	uxth	r2, r3
 8016ebc:	4b10      	ldr	r3, [pc, #64]	; (8016f00 <Auto_OFF_process+0x6c>)
 8016ebe:	801a      	strh	r2, [r3, #0]
 8016ec0:	4b0e      	ldr	r3, [pc, #56]	; (8016efc <Auto_OFF_process+0x68>)
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	801a      	strh	r2, [r3, #0]

		if(screen != Off_screen)
 8016ec6:	4b0f      	ldr	r3, [pc, #60]	; (8016f04 <Auto_OFF_process+0x70>)
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	2b03      	cmp	r3, #3
 8016ecc:	d00e      	beq.n	8016eec <Auto_OFF_process+0x58>
		{
			if(off_min>=Auto_Off_Time)
 8016ece:	4b0c      	ldr	r3, [pc, #48]	; (8016f00 <Auto_OFF_process+0x6c>)
 8016ed0:	881a      	ldrh	r2, [r3, #0]
 8016ed2:	4b09      	ldr	r3, [pc, #36]	; (8016ef8 <Auto_OFF_process+0x64>)
 8016ed4:	881b      	ldrh	r3, [r3, #0]
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	d308      	bcc.n	8016eec <Auto_OFF_process+0x58>
			{
				old_active_string=0xFF;
 8016eda:	4b0b      	ldr	r3, [pc, #44]	; (8016f08 <Auto_OFF_process+0x74>)
 8016edc:	22ff      	movs	r2, #255	; 0xff
 8016ede:	701a      	strb	r2, [r3, #0]
				OnOffCntr = on_off_time;
 8016ee0:	4b0a      	ldr	r3, [pc, #40]	; (8016f0c <Auto_OFF_process+0x78>)
 8016ee2:	22c8      	movs	r2, #200	; 0xc8
 8016ee4:	801a      	strh	r2, [r3, #0]
				screen = Off_screen;
 8016ee6:	4b07      	ldr	r3, [pc, #28]	; (8016f04 <Auto_OFF_process+0x70>)
 8016ee8:	2203      	movs	r2, #3
 8016eea:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	sleep(1000);
 8016eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016ef0:	f7ec f998 	bl	8003224 <sleep>
}
 8016ef4:	bf00      	nop
 8016ef6:	bd80      	pop	{r7, pc}
 8016ef8:	200008a0 	.word	0x200008a0
 8016efc:	20001c3c 	.word	0x20001c3c
 8016f00:	20001c3e 	.word	0x20001c3e
 8016f04:	2000004c 	.word	0x2000004c
 8016f08:	20000398 	.word	0x20000398
 8016f0c:	2000004a 	.word	0x2000004a

08016f10 <Display_options_screen_func>:
uint8_t temp_light=0;
uint8_t soft_onoff_cntr=0;


void Display_options_screen_func(void)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b084      	sub	sp, #16
 8016f14:	af02      	add	r7, sp, #8
	uint8_t aTxBuffer[4], aRxBuffer[4];
	RTC_view();
 8016f16:	f000 fd87 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8016f1a:	494e      	ldr	r1, [pc, #312]	; (8017054 <Display_options_screen_func+0x144>)
 8016f1c:	484e      	ldr	r0, [pc, #312]	; (8017058 <Display_options_screen_func+0x148>)
 8016f1e:	f7fe fd75 	bl	8015a0c <u8g2_SetFont>

	// brightness
	u8g2_DrawUTF8(&u8g2, 20, 60, "Яркость:");
 8016f22:	4b4e      	ldr	r3, [pc, #312]	; (801705c <Display_options_screen_func+0x14c>)
 8016f24:	223c      	movs	r2, #60	; 0x3c
 8016f26:	2114      	movs	r1, #20
 8016f28:	484b      	ldr	r0, [pc, #300]	; (8017058 <Display_options_screen_func+0x148>)
 8016f2a:	f7fe fccd 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_brightness);
 8016f2e:	4b4c      	ldr	r3, [pc, #304]	; (8017060 <Display_options_screen_func+0x150>)
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	461a      	mov	r2, r3
 8016f34:	494b      	ldr	r1, [pc, #300]	; (8017064 <Display_options_screen_func+0x154>)
 8016f36:	484c      	ldr	r0, [pc, #304]	; (8017068 <Display_options_screen_func+0x158>)
 8016f38:	f006 fec6 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(170, 60, RAM, edit_param, 0);
 8016f3c:	4b4b      	ldr	r3, [pc, #300]	; (801706c <Display_options_screen_func+0x15c>)
 8016f3e:	781b      	ldrb	r3, [r3, #0]
 8016f40:	2200      	movs	r2, #0
 8016f42:	9200      	str	r2, [sp, #0]
 8016f44:	4a48      	ldr	r2, [pc, #288]	; (8017068 <Display_options_screen_func+0x158>)
 8016f46:	213c      	movs	r1, #60	; 0x3c
 8016f48:	20aa      	movs	r0, #170	; 0xaa
 8016f4a:	f7eb ffc1 	bl	8002ed0 <Blink_Edit_Parameter>
	// contrast
	u8g2_DrawUTF8(&u8g2, 20, 80, "Контрастность:");
 8016f4e:	4b48      	ldr	r3, [pc, #288]	; (8017070 <Display_options_screen_func+0x160>)
 8016f50:	2250      	movs	r2, #80	; 0x50
 8016f52:	2114      	movs	r1, #20
 8016f54:	4840      	ldr	r0, [pc, #256]	; (8017058 <Display_options_screen_func+0x148>)
 8016f56:	f7fe fcb7 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", display_contrast);
 8016f5a:	4b46      	ldr	r3, [pc, #280]	; (8017074 <Display_options_screen_func+0x164>)
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	4940      	ldr	r1, [pc, #256]	; (8017064 <Display_options_screen_func+0x154>)
 8016f62:	4841      	ldr	r0, [pc, #260]	; (8017068 <Display_options_screen_func+0x158>)
 8016f64:	f006 feb0 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(170, 80, RAM, edit_param, 1);
 8016f68:	4b40      	ldr	r3, [pc, #256]	; (801706c <Display_options_screen_func+0x15c>)
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	9200      	str	r2, [sp, #0]
 8016f70:	4a3d      	ldr	r2, [pc, #244]	; (8017068 <Display_options_screen_func+0x158>)
 8016f72:	2150      	movs	r1, #80	; 0x50
 8016f74:	20aa      	movs	r0, #170	; 0xaa
 8016f76:	f7eb ffab 	bl	8002ed0 <Blink_Edit_Parameter>
	// delay
	u8g2_DrawUTF8(&u8g2, 20, 100, "Длительность:");
 8016f7a:	4b3f      	ldr	r3, [pc, #252]	; (8017078 <Display_options_screen_func+0x168>)
 8016f7c:	2264      	movs	r2, #100	; 0x64
 8016f7e:	2114      	movs	r1, #20
 8016f80:	4835      	ldr	r0, [pc, #212]	; (8017058 <Display_options_screen_func+0x148>)
 8016f82:	f7fe fca1 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%d", light_delay);
 8016f86:	4b3d      	ldr	r3, [pc, #244]	; (801707c <Display_options_screen_func+0x16c>)
 8016f88:	881b      	ldrh	r3, [r3, #0]
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	4935      	ldr	r1, [pc, #212]	; (8017064 <Display_options_screen_func+0x154>)
 8016f8e:	4836      	ldr	r0, [pc, #216]	; (8017068 <Display_options_screen_func+0x158>)
 8016f90:	f006 fe9a 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(170, 100, RAM, edit_param, 2);
 8016f94:	4b35      	ldr	r3, [pc, #212]	; (801706c <Display_options_screen_func+0x15c>)
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	2202      	movs	r2, #2
 8016f9a:	9200      	str	r2, [sp, #0]
 8016f9c:	4a32      	ldr	r2, [pc, #200]	; (8017068 <Display_options_screen_func+0x158>)
 8016f9e:	2164      	movs	r1, #100	; 0x64
 8016fa0:	20aa      	movs	r0, #170	; 0xaa
 8016fa2:	f7eb ff95 	bl	8002ed0 <Blink_Edit_Parameter>

	u8g2_SendBuffer(&u8g2);
 8016fa6:	482c      	ldr	r0, [pc, #176]	; (8017058 <Display_options_screen_func+0x148>)
 8016fa8:	f7fd fef3 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8016fac:	482a      	ldr	r0, [pc, #168]	; (8017058 <Display_options_screen_func+0x148>)
 8016fae:	f7fd fe7d 	bl	8014cac <u8g2_ClearBuffer>

	TIM2->CCR1=temp_light;//display_brightness;
 8016fb2:	4b33      	ldr	r3, [pc, #204]	; (8017080 <Display_options_screen_func+0x170>)
 8016fb4:	781a      	ldrb	r2, [r3, #0]
 8016fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016fba:	635a      	str	r2, [r3, #52]	; 0x34

	// Vbias
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_RESET);
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016fc2:	4830      	ldr	r0, [pc, #192]	; (8017084 <Display_options_screen_func+0x174>)
 8016fc4:	f7f3 f8e8 	bl	800a198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8016fc8:	2200      	movs	r2, #0
 8016fca:	2101      	movs	r1, #1
 8016fcc:	482e      	ldr	r0, [pc, #184]	; (8017088 <Display_options_screen_func+0x178>)
 8016fce:	f7f3 f8e3 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0xE8+Vbias;
 8016fd2:	4b2e      	ldr	r3, [pc, #184]	; (801708c <Display_options_screen_func+0x17c>)
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	3b18      	subs	r3, #24
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8016fdc:	463a      	mov	r2, r7
 8016fde:	1d39      	adds	r1, r7, #4
 8016fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016fe4:	9300      	str	r3, [sp, #0]
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	4829      	ldr	r0, [pc, #164]	; (8017090 <Display_options_screen_func+0x180>)
 8016fea:	f7f7 f990 	bl	800e30e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8016fee:	2201      	movs	r2, #1
 8016ff0:	2101      	movs	r1, #1
 8016ff2:	4825      	ldr	r0, [pc, #148]	; (8017088 <Display_options_screen_func+0x178>)
 8016ff4:	f7f3 f8d0 	bl	800a198 <HAL_GPIO_WritePin>
	// Temp compensation
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	2101      	movs	r1, #1
 8016ffc:	4822      	ldr	r0, [pc, #136]	; (8017088 <Display_options_screen_func+0x178>)
 8016ffe:	f7f3 f8cb 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=0x81;
 8017002:	2381      	movs	r3, #129	; 0x81
 8017004:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 8017006:	463a      	mov	r2, r7
 8017008:	1d39      	adds	r1, r7, #4
 801700a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801700e:	9300      	str	r3, [sp, #0]
 8017010:	2301      	movs	r3, #1
 8017012:	481f      	ldr	r0, [pc, #124]	; (8017090 <Display_options_screen_func+0x180>)
 8017014:	f7f7 f97b 	bl	800e30e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CD_GPIO_Port, LCD_CD_Pin, GPIO_PIN_SET);
 8017018:	2201      	movs	r2, #1
 801701a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801701e:	4819      	ldr	r0, [pc, #100]	; (8017084 <Display_options_screen_func+0x174>)
 8017020:	f7f3 f8ba 	bl	800a198 <HAL_GPIO_WritePin>
	aTxBuffer[0]=display_contrast+125;
 8017024:	4b13      	ldr	r3, [pc, #76]	; (8017074 <Display_options_screen_func+0x164>)
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	337d      	adds	r3, #125	; 0x7d
 801702a:	b2db      	uxtb	r3, r3
 801702c:	713b      	strb	r3, [r7, #4]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, 1, 1000);
 801702e:	463a      	mov	r2, r7
 8017030:	1d39      	adds	r1, r7, #4
 8017032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017036:	9300      	str	r3, [sp, #0]
 8017038:	2301      	movs	r3, #1
 801703a:	4815      	ldr	r0, [pc, #84]	; (8017090 <Display_options_screen_func+0x180>)
 801703c:	f7f7 f967 	bl	800e30e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8017040:	2201      	movs	r2, #1
 8017042:	2101      	movs	r1, #1
 8017044:	4810      	ldr	r0, [pc, #64]	; (8017088 <Display_options_screen_func+0x178>)
 8017046:	f7f3 f8a7 	bl	800a198 <HAL_GPIO_WritePin>
}
 801704a:	bf00      	nop
 801704c:	3708      	adds	r7, #8
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}
 8017052:	bf00      	nop
 8017054:	0802716c 	.word	0x0802716c
 8017058:	20001fbc 	.word	0x20001fbc
 801705c:	0802212c 	.word	0x0802212c
 8017060:	20000098 	.word	0x20000098
 8017064:	0802213c 	.word	0x0802213c
 8017068:	20002070 	.word	0x20002070
 801706c:	20000852 	.word	0x20000852
 8017070:	08022140 	.word	0x08022140
 8017074:	20000099 	.word	0x20000099
 8017078:	0802215c 	.word	0x0802215c
 801707c:	200000b0 	.word	0x200000b0
 8017080:	20001c44 	.word	0x20001c44
 8017084:	48000400 	.word	0x48000400
 8017088:	48001000 	.word	0x48001000
 801708c:	20000368 	.word	0x20000368
 8017090:	20001f58 	.word	0x20001f58

08017094 <Display_options_screen_S9>:


// MENU
void Display_options_screen_S9(void)
{
 8017094:	b480      	push	{r7}
 8017096:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017098:	4b06      	ldr	r3, [pc, #24]	; (80170b4 <Display_options_screen_S9+0x20>)
 801709a:	2208      	movs	r2, #8
 801709c:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801709e:	4b06      	ldr	r3, [pc, #24]	; (80170b8 <Display_options_screen_S9+0x24>)
 80170a0:	22ff      	movs	r2, #255	; 0xff
 80170a2:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 80170a4:	4b05      	ldr	r3, [pc, #20]	; (80170bc <Display_options_screen_S9+0x28>)
 80170a6:	2200      	movs	r2, #0
 80170a8:	701a      	strb	r2, [r3, #0]
}
 80170aa:	bf00      	nop
 80170ac:	46bd      	mov	sp, r7
 80170ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b2:	4770      	bx	lr
 80170b4:	2000004c 	.word	0x2000004c
 80170b8:	20000398 	.word	0x20000398
 80170bc:	20000399 	.word	0x20000399

080170c0 <Display_options_screen_S6>:

// DOWN
void Display_options_screen_S6(void)
{
 80170c0:	b480      	push	{r7}
 80170c2:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80170c4:	4b07      	ldr	r3, [pc, #28]	; (80170e4 <Display_options_screen_S6+0x24>)
 80170c6:	781b      	ldrb	r3, [r3, #0]
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d805      	bhi.n	80170d8 <Display_options_screen_S6+0x18>
 80170cc:	4b05      	ldr	r3, [pc, #20]	; (80170e4 <Display_options_screen_S6+0x24>)
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	3301      	adds	r3, #1
 80170d2:	b2da      	uxtb	r2, r3
 80170d4:	4b03      	ldr	r3, [pc, #12]	; (80170e4 <Display_options_screen_S6+0x24>)
 80170d6:	701a      	strb	r2, [r3, #0]
}
 80170d8:	bf00      	nop
 80170da:	46bd      	mov	sp, r7
 80170dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop
 80170e4:	20000852 	.word	0x20000852

080170e8 <Display_options_screen_S7>:

// UP
void Display_options_screen_S7(void)
{
 80170e8:	b480      	push	{r7}
 80170ea:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80170ec:	4b07      	ldr	r3, [pc, #28]	; (801710c <Display_options_screen_S7+0x24>)
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d005      	beq.n	8017100 <Display_options_screen_S7+0x18>
 80170f4:	4b05      	ldr	r3, [pc, #20]	; (801710c <Display_options_screen_S7+0x24>)
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	3b01      	subs	r3, #1
 80170fa:	b2da      	uxtb	r2, r3
 80170fc:	4b03      	ldr	r3, [pc, #12]	; (801710c <Display_options_screen_S7+0x24>)
 80170fe:	701a      	strb	r2, [r3, #0]
}
 8017100:	bf00      	nop
 8017102:	46bd      	mov	sp, r7
 8017104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017108:	4770      	bx	lr
 801710a:	bf00      	nop
 801710c:	20000852 	.word	0x20000852

08017110 <Display_options_screen_S4>:

// ENTER
void Display_options_screen_S4(void)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017114:	4b10      	ldr	r3, [pc, #64]	; (8017158 <Display_options_screen_S4+0x48>)
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	2b02      	cmp	r3, #2
 801711a:	d014      	beq.n	8017146 <Display_options_screen_S4+0x36>
 801711c:	2b02      	cmp	r3, #2
 801711e:	dc19      	bgt.n	8017154 <Display_options_screen_S4+0x44>
 8017120:	2b00      	cmp	r3, #0
 8017122:	d002      	beq.n	801712a <Display_options_screen_S4+0x1a>
 8017124:	2b01      	cmp	r3, #1
 8017126:	d007      	beq.n	8017138 <Display_options_screen_S4+0x28>
	{
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
		case 2: Save_Settings(light_delay_tag, light_delay); break;
	}
}
 8017128:	e014      	b.n	8017154 <Display_options_screen_S4+0x44>
		case 0: Save_Settings(display_brightness_tag, display_brightness); break;
 801712a:	4b0c      	ldr	r3, [pc, #48]	; (801715c <Display_options_screen_S4+0x4c>)
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	4619      	mov	r1, r3
 8017130:	2001      	movs	r0, #1
 8017132:	f7ee faad 	bl	8005690 <Save_Settings>
 8017136:	e00d      	b.n	8017154 <Display_options_screen_S4+0x44>
		case 1: Save_Settings(display_contrast_tag, display_contrast); break;
 8017138:	4b09      	ldr	r3, [pc, #36]	; (8017160 <Display_options_screen_S4+0x50>)
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	4619      	mov	r1, r3
 801713e:	2002      	movs	r0, #2
 8017140:	f7ee faa6 	bl	8005690 <Save_Settings>
 8017144:	e006      	b.n	8017154 <Display_options_screen_S4+0x44>
		case 2: Save_Settings(light_delay_tag, light_delay); break;
 8017146:	4b07      	ldr	r3, [pc, #28]	; (8017164 <Display_options_screen_S4+0x54>)
 8017148:	881b      	ldrh	r3, [r3, #0]
 801714a:	4619      	mov	r1, r3
 801714c:	2010      	movs	r0, #16
 801714e:	f7ee fa9f 	bl	8005690 <Save_Settings>
 8017152:	bf00      	nop
}
 8017154:	bf00      	nop
 8017156:	bd80      	pop	{r7, pc}
 8017158:	20000852 	.word	0x20000852
 801715c:	20000098 	.word	0x20000098
 8017160:	20000099 	.word	0x20000099
 8017164:	200000b0 	.word	0x200000b0

08017168 <Display_options_screen_S8>:



// BACKWARD
void Display_options_screen_S8(void)
{
 8017168:	b480      	push	{r7}
 801716a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801716c:	4b1a      	ldr	r3, [pc, #104]	; (80171d8 <Display_options_screen_S8+0x70>)
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	2b02      	cmp	r3, #2
 8017172:	d01c      	beq.n	80171ae <Display_options_screen_S8+0x46>
 8017174:	2b02      	cmp	r3, #2
 8017176:	dc2a      	bgt.n	80171ce <Display_options_screen_S8+0x66>
 8017178:	2b00      	cmp	r3, #0
 801717a:	d002      	beq.n	8017182 <Display_options_screen_S8+0x1a>
 801717c:	2b01      	cmp	r3, #1
 801717e:	d00b      	beq.n	8017198 <Display_options_screen_S8+0x30>
	{
		case 0: if(display_brightness>0)display_brightness--; break;
		case 1: if(display_contrast>0)display_contrast--; break;
		case 2: if(light_delay>0)light_delay--; break;
	}
}
 8017180:	e025      	b.n	80171ce <Display_options_screen_S8+0x66>
		case 0: if(display_brightness>0)display_brightness--; break;
 8017182:	4b16      	ldr	r3, [pc, #88]	; (80171dc <Display_options_screen_S8+0x74>)
 8017184:	781b      	ldrb	r3, [r3, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d01c      	beq.n	80171c4 <Display_options_screen_S8+0x5c>
 801718a:	4b14      	ldr	r3, [pc, #80]	; (80171dc <Display_options_screen_S8+0x74>)
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	3b01      	subs	r3, #1
 8017190:	b2da      	uxtb	r2, r3
 8017192:	4b12      	ldr	r3, [pc, #72]	; (80171dc <Display_options_screen_S8+0x74>)
 8017194:	701a      	strb	r2, [r3, #0]
 8017196:	e015      	b.n	80171c4 <Display_options_screen_S8+0x5c>
		case 1: if(display_contrast>0)display_contrast--; break;
 8017198:	4b11      	ldr	r3, [pc, #68]	; (80171e0 <Display_options_screen_S8+0x78>)
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d013      	beq.n	80171c8 <Display_options_screen_S8+0x60>
 80171a0:	4b0f      	ldr	r3, [pc, #60]	; (80171e0 <Display_options_screen_S8+0x78>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	3b01      	subs	r3, #1
 80171a6:	b2da      	uxtb	r2, r3
 80171a8:	4b0d      	ldr	r3, [pc, #52]	; (80171e0 <Display_options_screen_S8+0x78>)
 80171aa:	701a      	strb	r2, [r3, #0]
 80171ac:	e00c      	b.n	80171c8 <Display_options_screen_S8+0x60>
		case 2: if(light_delay>0)light_delay--; break;
 80171ae:	4b0d      	ldr	r3, [pc, #52]	; (80171e4 <Display_options_screen_S8+0x7c>)
 80171b0:	881b      	ldrh	r3, [r3, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d00a      	beq.n	80171cc <Display_options_screen_S8+0x64>
 80171b6:	4b0b      	ldr	r3, [pc, #44]	; (80171e4 <Display_options_screen_S8+0x7c>)
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	3b01      	subs	r3, #1
 80171bc:	b29a      	uxth	r2, r3
 80171be:	4b09      	ldr	r3, [pc, #36]	; (80171e4 <Display_options_screen_S8+0x7c>)
 80171c0:	801a      	strh	r2, [r3, #0]
 80171c2:	e003      	b.n	80171cc <Display_options_screen_S8+0x64>
		case 0: if(display_brightness>0)display_brightness--; break;
 80171c4:	bf00      	nop
 80171c6:	e002      	b.n	80171ce <Display_options_screen_S8+0x66>
		case 1: if(display_contrast>0)display_contrast--; break;
 80171c8:	bf00      	nop
 80171ca:	e000      	b.n	80171ce <Display_options_screen_S8+0x66>
		case 2: if(light_delay>0)light_delay--; break;
 80171cc:	bf00      	nop
}
 80171ce:	bf00      	nop
 80171d0:	46bd      	mov	sp, r7
 80171d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d6:	4770      	bx	lr
 80171d8:	20000852 	.word	0x20000852
 80171dc:	20000098 	.word	0x20000098
 80171e0:	20000099 	.word	0x20000099
 80171e4:	200000b0 	.word	0x200000b0

080171e8 <Display_options_screen_S5>:

// FORWARD
void Display_options_screen_S5(void)
{
 80171e8:	b480      	push	{r7}
 80171ea:	af00      	add	r7, sp, #0
	switch(edit_param)
 80171ec:	4b1a      	ldr	r3, [pc, #104]	; (8017258 <Display_options_screen_S5+0x70>)
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	2b02      	cmp	r3, #2
 80171f2:	d01c      	beq.n	801722e <Display_options_screen_S5+0x46>
 80171f4:	2b02      	cmp	r3, #2
 80171f6:	dc2a      	bgt.n	801724e <Display_options_screen_S5+0x66>
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d002      	beq.n	8017202 <Display_options_screen_S5+0x1a>
 80171fc:	2b01      	cmp	r3, #1
 80171fe:	d00b      	beq.n	8017218 <Display_options_screen_S5+0x30>
	{
		case 0:if(display_brightness<50)display_brightness++; break;
		case 1: if(display_contrast<50)display_contrast++; break;
		case 2: if(light_delay<50)light_delay++; break;
	}
}
 8017200:	e025      	b.n	801724e <Display_options_screen_S5+0x66>
		case 0:if(display_brightness<50)display_brightness++; break;
 8017202:	4b16      	ldr	r3, [pc, #88]	; (801725c <Display_options_screen_S5+0x74>)
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	2b31      	cmp	r3, #49	; 0x31
 8017208:	d81c      	bhi.n	8017244 <Display_options_screen_S5+0x5c>
 801720a:	4b14      	ldr	r3, [pc, #80]	; (801725c <Display_options_screen_S5+0x74>)
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	3301      	adds	r3, #1
 8017210:	b2da      	uxtb	r2, r3
 8017212:	4b12      	ldr	r3, [pc, #72]	; (801725c <Display_options_screen_S5+0x74>)
 8017214:	701a      	strb	r2, [r3, #0]
 8017216:	e015      	b.n	8017244 <Display_options_screen_S5+0x5c>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017218:	4b11      	ldr	r3, [pc, #68]	; (8017260 <Display_options_screen_S5+0x78>)
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	2b31      	cmp	r3, #49	; 0x31
 801721e:	d813      	bhi.n	8017248 <Display_options_screen_S5+0x60>
 8017220:	4b0f      	ldr	r3, [pc, #60]	; (8017260 <Display_options_screen_S5+0x78>)
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	3301      	adds	r3, #1
 8017226:	b2da      	uxtb	r2, r3
 8017228:	4b0d      	ldr	r3, [pc, #52]	; (8017260 <Display_options_screen_S5+0x78>)
 801722a:	701a      	strb	r2, [r3, #0]
 801722c:	e00c      	b.n	8017248 <Display_options_screen_S5+0x60>
		case 2: if(light_delay<50)light_delay++; break;
 801722e:	4b0d      	ldr	r3, [pc, #52]	; (8017264 <Display_options_screen_S5+0x7c>)
 8017230:	881b      	ldrh	r3, [r3, #0]
 8017232:	2b31      	cmp	r3, #49	; 0x31
 8017234:	d80a      	bhi.n	801724c <Display_options_screen_S5+0x64>
 8017236:	4b0b      	ldr	r3, [pc, #44]	; (8017264 <Display_options_screen_S5+0x7c>)
 8017238:	881b      	ldrh	r3, [r3, #0]
 801723a:	3301      	adds	r3, #1
 801723c:	b29a      	uxth	r2, r3
 801723e:	4b09      	ldr	r3, [pc, #36]	; (8017264 <Display_options_screen_S5+0x7c>)
 8017240:	801a      	strh	r2, [r3, #0]
 8017242:	e003      	b.n	801724c <Display_options_screen_S5+0x64>
		case 0:if(display_brightness<50)display_brightness++; break;
 8017244:	bf00      	nop
 8017246:	e002      	b.n	801724e <Display_options_screen_S5+0x66>
		case 1: if(display_contrast<50)display_contrast++; break;
 8017248:	bf00      	nop
 801724a:	e000      	b.n	801724e <Display_options_screen_S5+0x66>
		case 2: if(light_delay<50)light_delay++; break;
 801724c:	bf00      	nop
}
 801724e:	bf00      	nop
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr
 8017258:	20000852 	.word	0x20000852
 801725c:	20000098 	.word	0x20000098
 8017260:	20000099 	.word	0x20000099
 8017264:	200000b0 	.word	0x200000b0

08017268 <Light_OFF_process>:



void Light_OFF_process(void)
{
 8017268:	b480      	push	{r7}
 801726a:	af00      	add	r7, sp, #0
	if(++light_ms>=1000)
 801726c:	4b37      	ldr	r3, [pc, #220]	; (801734c <Light_OFF_process+0xe4>)
 801726e:	881b      	ldrh	r3, [r3, #0]
 8017270:	3301      	adds	r3, #1
 8017272:	b29a      	uxth	r2, r3
 8017274:	4b35      	ldr	r3, [pc, #212]	; (801734c <Light_OFF_process+0xe4>)
 8017276:	801a      	strh	r2, [r3, #0]
 8017278:	4b34      	ldr	r3, [pc, #208]	; (801734c <Light_OFF_process+0xe4>)
 801727a:	881b      	ldrh	r3, [r3, #0]
 801727c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017280:	d315      	bcc.n	80172ae <Light_OFF_process+0x46>
	{
		light_ms=0;
 8017282:	4b32      	ldr	r3, [pc, #200]	; (801734c <Light_OFF_process+0xe4>)
 8017284:	2200      	movs	r2, #0
 8017286:	801a      	strh	r2, [r3, #0]
		if(++light_sec>59){light_min++; light_sec=0;}
 8017288:	4b31      	ldr	r3, [pc, #196]	; (8017350 <Light_OFF_process+0xe8>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	3301      	adds	r3, #1
 801728e:	b2da      	uxtb	r2, r3
 8017290:	4b2f      	ldr	r3, [pc, #188]	; (8017350 <Light_OFF_process+0xe8>)
 8017292:	701a      	strb	r2, [r3, #0]
 8017294:	4b2e      	ldr	r3, [pc, #184]	; (8017350 <Light_OFF_process+0xe8>)
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	2b3b      	cmp	r3, #59	; 0x3b
 801729a:	d908      	bls.n	80172ae <Light_OFF_process+0x46>
 801729c:	4b2d      	ldr	r3, [pc, #180]	; (8017354 <Light_OFF_process+0xec>)
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	3301      	adds	r3, #1
 80172a2:	b2da      	uxtb	r2, r3
 80172a4:	4b2b      	ldr	r3, [pc, #172]	; (8017354 <Light_OFF_process+0xec>)
 80172a6:	701a      	strb	r2, [r3, #0]
 80172a8:	4b29      	ldr	r3, [pc, #164]	; (8017350 <Light_OFF_process+0xe8>)
 80172aa:	2200      	movs	r2, #0
 80172ac:	701a      	strb	r2, [r3, #0]
	}

	if(++soft_onoff_cntr>=50)
 80172ae:	4b2a      	ldr	r3, [pc, #168]	; (8017358 <Light_OFF_process+0xf0>)
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	3301      	adds	r3, #1
 80172b4:	b2da      	uxtb	r2, r3
 80172b6:	4b28      	ldr	r3, [pc, #160]	; (8017358 <Light_OFF_process+0xf0>)
 80172b8:	701a      	strb	r2, [r3, #0]
 80172ba:	4b27      	ldr	r3, [pc, #156]	; (8017358 <Light_OFF_process+0xf0>)
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	2b31      	cmp	r3, #49	; 0x31
 80172c0:	d93e      	bls.n	8017340 <Light_OFF_process+0xd8>
	{
		soft_onoff_cntr=0;
 80172c2:	4b25      	ldr	r3, [pc, #148]	; (8017358 <Light_OFF_process+0xf0>)
 80172c4:	2200      	movs	r2, #0
 80172c6:	701a      	strb	r2, [r3, #0]
		if(light_min>=light_delay)
 80172c8:	4b22      	ldr	r3, [pc, #136]	; (8017354 <Light_OFF_process+0xec>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	4b23      	ldr	r3, [pc, #140]	; (801735c <Light_OFF_process+0xf4>)
 80172d0:	881b      	ldrh	r3, [r3, #0]
 80172d2:	429a      	cmp	r2, r3
 80172d4:	d319      	bcc.n	801730a <Light_OFF_process+0xa2>
		{
			light_min=light_delay;
 80172d6:	4b21      	ldr	r3, [pc, #132]	; (801735c <Light_OFF_process+0xf4>)
 80172d8:	881b      	ldrh	r3, [r3, #0]
 80172da:	b2da      	uxtb	r2, r3
 80172dc:	4b1d      	ldr	r3, [pc, #116]	; (8017354 <Light_OFF_process+0xec>)
 80172de:	701a      	strb	r2, [r3, #0]
			if(temp_light>0)temp_light--;
 80172e0:	4b1f      	ldr	r3, [pc, #124]	; (8017360 <Light_OFF_process+0xf8>)
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d005      	beq.n	80172f4 <Light_OFF_process+0x8c>
 80172e8:	4b1d      	ldr	r3, [pc, #116]	; (8017360 <Light_OFF_process+0xf8>)
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	3b01      	subs	r3, #1
 80172ee:	b2da      	uxtb	r2, r3
 80172f0:	4b1b      	ldr	r3, [pc, #108]	; (8017360 <Light_OFF_process+0xf8>)
 80172f2:	701a      	strb	r2, [r3, #0]
			light_min=light_delay;
 80172f4:	4b19      	ldr	r3, [pc, #100]	; (801735c <Light_OFF_process+0xf4>)
 80172f6:	881b      	ldrh	r3, [r3, #0]
 80172f8:	b2da      	uxtb	r2, r3
 80172fa:	4b16      	ldr	r3, [pc, #88]	; (8017354 <Light_OFF_process+0xec>)
 80172fc:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 80172fe:	4b18      	ldr	r3, [pc, #96]	; (8017360 <Light_OFF_process+0xf8>)
 8017300:	781a      	ldrb	r2, [r3, #0]
 8017302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017306:	635a      	str	r2, [r3, #52]	; 0x34
			if(temp_light<display_brightness)temp_light++;
			if(temp_light>=display_brightness)temp_light=display_brightness;
			TIM2->CCR1=temp_light;
		}
	}
}
 8017308:	e01a      	b.n	8017340 <Light_OFF_process+0xd8>
			if(temp_light<display_brightness)temp_light++;
 801730a:	4b15      	ldr	r3, [pc, #84]	; (8017360 <Light_OFF_process+0xf8>)
 801730c:	781a      	ldrb	r2, [r3, #0]
 801730e:	4b15      	ldr	r3, [pc, #84]	; (8017364 <Light_OFF_process+0xfc>)
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	429a      	cmp	r2, r3
 8017314:	d205      	bcs.n	8017322 <Light_OFF_process+0xba>
 8017316:	4b12      	ldr	r3, [pc, #72]	; (8017360 <Light_OFF_process+0xf8>)
 8017318:	781b      	ldrb	r3, [r3, #0]
 801731a:	3301      	adds	r3, #1
 801731c:	b2da      	uxtb	r2, r3
 801731e:	4b10      	ldr	r3, [pc, #64]	; (8017360 <Light_OFF_process+0xf8>)
 8017320:	701a      	strb	r2, [r3, #0]
			if(temp_light>=display_brightness)temp_light=display_brightness;
 8017322:	4b0f      	ldr	r3, [pc, #60]	; (8017360 <Light_OFF_process+0xf8>)
 8017324:	781a      	ldrb	r2, [r3, #0]
 8017326:	4b0f      	ldr	r3, [pc, #60]	; (8017364 <Light_OFF_process+0xfc>)
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	429a      	cmp	r2, r3
 801732c:	d303      	bcc.n	8017336 <Light_OFF_process+0xce>
 801732e:	4b0d      	ldr	r3, [pc, #52]	; (8017364 <Light_OFF_process+0xfc>)
 8017330:	781a      	ldrb	r2, [r3, #0]
 8017332:	4b0b      	ldr	r3, [pc, #44]	; (8017360 <Light_OFF_process+0xf8>)
 8017334:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1=temp_light;
 8017336:	4b0a      	ldr	r3, [pc, #40]	; (8017360 <Light_OFF_process+0xf8>)
 8017338:	781a      	ldrb	r2, [r3, #0]
 801733a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801733e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8017340:	bf00      	nop
 8017342:	46bd      	mov	sp, r7
 8017344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017348:	4770      	bx	lr
 801734a:	bf00      	nop
 801734c:	20001c42 	.word	0x20001c42
 8017350:	20001c40 	.word	0x20001c40
 8017354:	20001c41 	.word	0x20001c41
 8017358:	20001c45 	.word	0x20001c45
 801735c:	200000b0 	.word	0x200000b0
 8017360:	20001c44 	.word	0x20001c44
 8017364:	20000098 	.word	0x20000098

08017368 <Measure_options_screen_func>:
const uint8_t time_icon[]={0,24,0,24,0x1F, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFE, 0xF0, 0x00, 0x0F, 0xE0, 0x00, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0xFC, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x30, 0x07, 0xE0, 0x31, 0x87, 0xE0, 0x33, 0x87, 0xE0, 0x3F, 0x07, 0xE0, 0x1E, 0x07, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x0F, 0x7F, 0xFF, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xF8};



void Measure_options_screen_func(void)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af02      	add	r7, sp, #8
	RTC_view();
 801736e:	f000 fb5b 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017372:	4974      	ldr	r1, [pc, #464]	; (8017544 <Measure_options_screen_func+0x1dc>)
 8017374:	4874      	ldr	r0, [pc, #464]	; (8017548 <Measure_options_screen_func+0x1e0>)
 8017376:	f7fe fb49 	bl	8015a0c <u8g2_SetFont>


		// "ПИКОВЫЕ ЗНАЧЕНИЯ");
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*0+6, "ПИКОВЫЕ ЗНАЧЕНИЯ", edit_param, 0);
 801737a:	4b74      	ldr	r3, [pc, #464]	; (801754c <Measure_options_screen_func+0x1e4>)
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	2200      	movs	r2, #0
 8017380:	9200      	str	r2, [sp, #0]
 8017382:	4a73      	ldr	r2, [pc, #460]	; (8017550 <Measure_options_screen_func+0x1e8>)
 8017384:	211f      	movs	r1, #31
 8017386:	200f      	movs	r0, #15
 8017388:	f7eb fda2 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(mm_peak)
 801738c:	4b71      	ldr	r3, [pc, #452]	; (8017554 <Measure_options_screen_func+0x1ec>)
 801738e:	781b      	ldrb	r3, [r3, #0]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d002      	beq.n	801739a <Measure_options_screen_func+0x32>
 8017394:	2b01      	cmp	r3, #1
 8017396:	d007      	beq.n	80173a8 <Measure_options_screen_func+0x40>
 8017398:	e00d      	b.n	80173b6 <Measure_options_screen_func+0x4e>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 801739a:	2301      	movs	r3, #1
 801739c:	2219      	movs	r2, #25
 801739e:	21c8      	movs	r1, #200	; 0xc8
 80173a0:	486d      	ldr	r0, [pc, #436]	; (8017558 <Measure_options_screen_func+0x1f0>)
 80173a2:	f7eb fc05 	bl	8002bb0 <DrawImage>
 80173a6:	e006      	b.n	80173b6 <Measure_options_screen_func+0x4e>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*0, 1); break;
 80173a8:	2301      	movs	r3, #1
 80173aa:	2219      	movs	r2, #25
 80173ac:	21c8      	movs	r1, #200	; 0xc8
 80173ae:	486b      	ldr	r0, [pc, #428]	; (801755c <Measure_options_screen_func+0x1f4>)
 80173b0:	f7eb fbfe 	bl	8002bb0 <DrawImage>
 80173b4:	bf00      	nop
		}

		// "ОБНАРУЖЕНИЕ УТЕЧЕК"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*1+6, "ОБНАРУЖЕНИЕ УТЕЧЕК", edit_param, 1);
 80173b6:	4b65      	ldr	r3, [pc, #404]	; (801754c <Measure_options_screen_func+0x1e4>)
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	2201      	movs	r2, #1
 80173bc:	9200      	str	r2, [sp, #0]
 80173be:	4a68      	ldr	r2, [pc, #416]	; (8017560 <Measure_options_screen_func+0x1f8>)
 80173c0:	2139      	movs	r1, #57	; 0x39
 80173c2:	200f      	movs	r0, #15
 80173c4:	f7eb fd84 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(leak_detect)
 80173c8:	4b66      	ldr	r3, [pc, #408]	; (8017564 <Measure_options_screen_func+0x1fc>)
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	2b02      	cmp	r3, #2
 80173ce:	d014      	beq.n	80173fa <Measure_options_screen_func+0x92>
 80173d0:	2b02      	cmp	r3, #2
 80173d2:	dc19      	bgt.n	8017408 <Measure_options_screen_func+0xa0>
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d002      	beq.n	80173de <Measure_options_screen_func+0x76>
 80173d8:	2b01      	cmp	r3, #1
 80173da:	d007      	beq.n	80173ec <Measure_options_screen_func+0x84>
 80173dc:	e014      	b.n	8017408 <Measure_options_screen_func+0xa0>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80173de:	2301      	movs	r3, #1
 80173e0:	2233      	movs	r2, #51	; 0x33
 80173e2:	21c8      	movs	r1, #200	; 0xc8
 80173e4:	485c      	ldr	r0, [pc, #368]	; (8017558 <Measure_options_screen_func+0x1f0>)
 80173e6:	f7eb fbe3 	bl	8002bb0 <DrawImage>
 80173ea:	e00d      	b.n	8017408 <Measure_options_screen_func+0xa0>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80173ec:	2301      	movs	r3, #1
 80173ee:	2233      	movs	r2, #51	; 0x33
 80173f0:	21c8      	movs	r1, #200	; 0xc8
 80173f2:	485a      	ldr	r0, [pc, #360]	; (801755c <Measure_options_screen_func+0x1f4>)
 80173f4:	f7eb fbdc 	bl	8002bb0 <DrawImage>
 80173f8:	e006      	b.n	8017408 <Measure_options_screen_func+0xa0>
			case 2: DrawImage(time_icon, X_POSITION, Y_POSITION+STR2STR*1, 1); break;
 80173fa:	2301      	movs	r3, #1
 80173fc:	2233      	movs	r2, #51	; 0x33
 80173fe:	21c8      	movs	r1, #200	; 0xc8
 8017400:	4859      	ldr	r0, [pc, #356]	; (8017568 <Measure_options_screen_func+0x200>)
 8017402:	f7eb fbd5 	bl	8002bb0 <DrawImage>
 8017406:	bf00      	nop
		}

		// "P+V"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*2+6, "P+V", edit_param, 2);
 8017408:	4b50      	ldr	r3, [pc, #320]	; (801754c <Measure_options_screen_func+0x1e4>)
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	2202      	movs	r2, #2
 801740e:	9200      	str	r2, [sp, #0]
 8017410:	4a56      	ldr	r2, [pc, #344]	; (801756c <Measure_options_screen_func+0x204>)
 8017412:	2153      	movs	r1, #83	; 0x53
 8017414:	200f      	movs	r0, #15
 8017416:	f7eb fd5b 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(PV)
 801741a:	4b55      	ldr	r3, [pc, #340]	; (8017570 <Measure_options_screen_func+0x208>)
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d002      	beq.n	8017428 <Measure_options_screen_func+0xc0>
 8017422:	2b01      	cmp	r3, #1
 8017424:	d007      	beq.n	8017436 <Measure_options_screen_func+0xce>
 8017426:	e00d      	b.n	8017444 <Measure_options_screen_func+0xdc>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 8017428:	2301      	movs	r3, #1
 801742a:	224d      	movs	r2, #77	; 0x4d
 801742c:	21c8      	movs	r1, #200	; 0xc8
 801742e:	484a      	ldr	r0, [pc, #296]	; (8017558 <Measure_options_screen_func+0x1f0>)
 8017430:	f7eb fbbe 	bl	8002bb0 <DrawImage>
 8017434:	e006      	b.n	8017444 <Measure_options_screen_func+0xdc>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*2, 1); break;
 8017436:	2301      	movs	r3, #1
 8017438:	224d      	movs	r2, #77	; 0x4d
 801743a:	21c8      	movs	r1, #200	; 0xc8
 801743c:	4847      	ldr	r0, [pc, #284]	; (801755c <Measure_options_screen_func+0x1f4>)
 801743e:	f7eb fbb7 	bl	8002bb0 <DrawImage>
 8017442:	bf00      	nop
		}

		// "P+I"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*3+6, "P+I", edit_param, 3);
 8017444:	4b41      	ldr	r3, [pc, #260]	; (801754c <Measure_options_screen_func+0x1e4>)
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	2203      	movs	r2, #3
 801744a:	9200      	str	r2, [sp, #0]
 801744c:	4a49      	ldr	r2, [pc, #292]	; (8017574 <Measure_options_screen_func+0x20c>)
 801744e:	216d      	movs	r1, #109	; 0x6d
 8017450:	200f      	movs	r0, #15
 8017452:	f7eb fd3d 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(PI)
 8017456:	4b48      	ldr	r3, [pc, #288]	; (8017578 <Measure_options_screen_func+0x210>)
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d002      	beq.n	8017464 <Measure_options_screen_func+0xfc>
 801745e:	2b01      	cmp	r3, #1
 8017460:	d007      	beq.n	8017472 <Measure_options_screen_func+0x10a>
 8017462:	e00d      	b.n	8017480 <Measure_options_screen_func+0x118>
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 8017464:	2301      	movs	r3, #1
 8017466:	2267      	movs	r2, #103	; 0x67
 8017468:	21c8      	movs	r1, #200	; 0xc8
 801746a:	483b      	ldr	r0, [pc, #236]	; (8017558 <Measure_options_screen_func+0x1f0>)
 801746c:	f7eb fba0 	bl	8002bb0 <DrawImage>
 8017470:	e006      	b.n	8017480 <Measure_options_screen_func+0x118>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*3, 1); break;
 8017472:	2301      	movs	r3, #1
 8017474:	2267      	movs	r2, #103	; 0x67
 8017476:	21c8      	movs	r1, #200	; 0xc8
 8017478:	4838      	ldr	r0, [pc, #224]	; (801755c <Measure_options_screen_func+0x1f4>)
 801747a:	f7eb fb99 	bl	8002bb0 <DrawImage>
 801747e:	bf00      	nop
		}

		// "P+E"
		Blink_Edit_Parameter(15, Y_POSITION+STR2STR*4+6, "P+E", edit_param, 4);
 8017480:	4b32      	ldr	r3, [pc, #200]	; (801754c <Measure_options_screen_func+0x1e4>)
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	2204      	movs	r2, #4
 8017486:	9200      	str	r2, [sp, #0]
 8017488:	4a3c      	ldr	r2, [pc, #240]	; (801757c <Measure_options_screen_func+0x214>)
 801748a:	2187      	movs	r1, #135	; 0x87
 801748c:	200f      	movs	r0, #15
 801748e:	f7eb fd1f 	bl	8002ed0 <Blink_Edit_Parameter>
		switch(PE)
 8017492:	4b3b      	ldr	r3, [pc, #236]	; (8017580 <Measure_options_screen_func+0x218>)
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	2b07      	cmp	r3, #7
 8017498:	d84a      	bhi.n	8017530 <Measure_options_screen_func+0x1c8>
 801749a:	a201      	add	r2, pc, #4	; (adr r2, 80174a0 <Measure_options_screen_func+0x138>)
 801749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174a0:	080174c1 	.word	0x080174c1
 80174a4:	080174cf 	.word	0x080174cf
 80174a8:	080174dd 	.word	0x080174dd
 80174ac:	080174eb 	.word	0x080174eb
 80174b0:	080174f9 	.word	0x080174f9
 80174b4:	08017507 	.word	0x08017507
 80174b8:	08017515 	.word	0x08017515
 80174bc:	08017523 	.word	0x08017523
		{
			case 0: DrawImage(on_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80174c0:	2301      	movs	r3, #1
 80174c2:	2281      	movs	r2, #129	; 0x81
 80174c4:	21c8      	movs	r1, #200	; 0xc8
 80174c6:	4824      	ldr	r0, [pc, #144]	; (8017558 <Measure_options_screen_func+0x1f0>)
 80174c8:	f7eb fb72 	bl	8002bb0 <DrawImage>
 80174cc:	e030      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 1: DrawImage(off_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80174ce:	2301      	movs	r3, #1
 80174d0:	2281      	movs	r2, #129	; 0x81
 80174d2:	21c8      	movs	r1, #200	; 0xc8
 80174d4:	4821      	ldr	r0, [pc, #132]	; (801755c <Measure_options_screen_func+0x1f4>)
 80174d6:	f7eb fb6b 	bl	8002bb0 <DrawImage>
 80174da:	e029      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 2: DrawImage(press_on_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80174dc:	2301      	movs	r3, #1
 80174de:	2281      	movs	r2, #129	; 0x81
 80174e0:	21c8      	movs	r1, #200	; 0xc8
 80174e2:	4828      	ldr	r0, [pc, #160]	; (8017584 <Measure_options_screen_func+0x21c>)
 80174e4:	f7eb fb64 	bl	8002bb0 <DrawImage>
 80174e8:	e022      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 3: DrawImage(press_off_icon,X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80174ea:	2301      	movs	r3, #1
 80174ec:	2281      	movs	r2, #129	; 0x81
 80174ee:	21c8      	movs	r1, #200	; 0xc8
 80174f0:	4825      	ldr	r0, [pc, #148]	; (8017588 <Measure_options_screen_func+0x220>)
 80174f2:	f7eb fb5d 	bl	8002bb0 <DrawImage>
 80174f6:	e01b      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 4: DrawImage(up_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 80174f8:	2301      	movs	r3, #1
 80174fa:	2281      	movs	r2, #129	; 0x81
 80174fc:	21c8      	movs	r1, #200	; 0xc8
 80174fe:	4823      	ldr	r0, [pc, #140]	; (801758c <Measure_options_screen_func+0x224>)
 8017500:	f7eb fb56 	bl	8002bb0 <DrawImage>
 8017504:	e014      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 5: DrawImage(down_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017506:	2301      	movs	r3, #1
 8017508:	2281      	movs	r2, #129	; 0x81
 801750a:	21c8      	movs	r1, #200	; 0xc8
 801750c:	4820      	ldr	r0, [pc, #128]	; (8017590 <Measure_options_screen_func+0x228>)
 801750e:	f7eb fb4f 	bl	8002bb0 <DrawImage>
 8017512:	e00d      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 6: DrawImage(pos_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017514:	2301      	movs	r3, #1
 8017516:	2281      	movs	r2, #129	; 0x81
 8017518:	21c8      	movs	r1, #200	; 0xc8
 801751a:	481e      	ldr	r0, [pc, #120]	; (8017594 <Measure_options_screen_func+0x22c>)
 801751c:	f7eb fb48 	bl	8002bb0 <DrawImage>
 8017520:	e006      	b.n	8017530 <Measure_options_screen_func+0x1c8>
			case 7: DrawImage(neg_pulse_icon, X_POSITION, Y_POSITION+STR2STR*4, 1); break;
 8017522:	2301      	movs	r3, #1
 8017524:	2281      	movs	r2, #129	; 0x81
 8017526:	21c8      	movs	r1, #200	; 0xc8
 8017528:	481b      	ldr	r0, [pc, #108]	; (8017598 <Measure_options_screen_func+0x230>)
 801752a:	f7eb fb41 	bl	8002bb0 <DrawImage>
 801752e:	bf00      	nop
		}



	u8g2_SendBuffer(&u8g2);
 8017530:	4805      	ldr	r0, [pc, #20]	; (8017548 <Measure_options_screen_func+0x1e0>)
 8017532:	f7fd fc2e 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017536:	4804      	ldr	r0, [pc, #16]	; (8017548 <Measure_options_screen_func+0x1e0>)
 8017538:	f7fd fbb8 	bl	8014cac <u8g2_ClearBuffer>
}
 801753c:	bf00      	nop
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
 8017542:	bf00      	nop
 8017544:	0802716c 	.word	0x0802716c
 8017548:	20001fbc 	.word	0x20001fbc
 801754c:	20000852 	.word	0x20000852
 8017550:	08022178 	.word	0x08022178
 8017554:	2000089a 	.word	0x2000089a
 8017558:	08029140 	.word	0x08029140
 801755c:	0802918c 	.word	0x0802918c
 8017560:	08022198 	.word	0x08022198
 8017564:	2000089b 	.word	0x2000089b
 8017568:	080293a0 	.word	0x080293a0
 801756c:	080221bc 	.word	0x080221bc
 8017570:	2000089c 	.word	0x2000089c
 8017574:	080221c0 	.word	0x080221c0
 8017578:	2000089d 	.word	0x2000089d
 801757c:	080221c4 	.word	0x080221c4
 8017580:	2000089e 	.word	0x2000089e
 8017584:	08029308 	.word	0x08029308
 8017588:	08029354 	.word	0x08029354
 801758c:	080291d8 	.word	0x080291d8
 8017590:	08029224 	.word	0x08029224
 8017594:	080292bc 	.word	0x080292bc
 8017598:	08029270 	.word	0x08029270

0801759c <Measure_options_screen_S6>:


// DOWN
void Measure_options_screen_S6(void)
{
 801759c:	b480      	push	{r7}
 801759e:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 80175a0:	4b07      	ldr	r3, [pc, #28]	; (80175c0 <Measure_options_screen_S6+0x24>)
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	2b03      	cmp	r3, #3
 80175a6:	d805      	bhi.n	80175b4 <Measure_options_screen_S6+0x18>
 80175a8:	4b05      	ldr	r3, [pc, #20]	; (80175c0 <Measure_options_screen_S6+0x24>)
 80175aa:	781b      	ldrb	r3, [r3, #0]
 80175ac:	3301      	adds	r3, #1
 80175ae:	b2da      	uxtb	r2, r3
 80175b0:	4b03      	ldr	r3, [pc, #12]	; (80175c0 <Measure_options_screen_S6+0x24>)
 80175b2:	701a      	strb	r2, [r3, #0]
}
 80175b4:	bf00      	nop
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr
 80175be:	bf00      	nop
 80175c0:	20000852 	.word	0x20000852

080175c4 <Measure_options_screen_S7>:

// UP
void Measure_options_screen_S7(void)
{
 80175c4:	b480      	push	{r7}
 80175c6:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 80175c8:	4b07      	ldr	r3, [pc, #28]	; (80175e8 <Measure_options_screen_S7+0x24>)
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d005      	beq.n	80175dc <Measure_options_screen_S7+0x18>
 80175d0:	4b05      	ldr	r3, [pc, #20]	; (80175e8 <Measure_options_screen_S7+0x24>)
 80175d2:	781b      	ldrb	r3, [r3, #0]
 80175d4:	3b01      	subs	r3, #1
 80175d6:	b2da      	uxtb	r2, r3
 80175d8:	4b03      	ldr	r3, [pc, #12]	; (80175e8 <Measure_options_screen_S7+0x24>)
 80175da:	701a      	strb	r2, [r3, #0]
}
 80175dc:	bf00      	nop
 80175de:	46bd      	mov	sp, r7
 80175e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e4:	4770      	bx	lr
 80175e6:	bf00      	nop
 80175e8:	20000852 	.word	0x20000852

080175ec <Measure_options_screen_S9>:



// MENU
void Measure_options_screen_S9(void)
{
 80175ec:	b480      	push	{r7}
 80175ee:	af00      	add	r7, sp, #0
	screen=Option_screen;
 80175f0:	4b06      	ldr	r3, [pc, #24]	; (801760c <Measure_options_screen_S9+0x20>)
 80175f2:	2204      	movs	r2, #4
 80175f4:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 80175f6:	4b06      	ldr	r3, [pc, #24]	; (8017610 <Measure_options_screen_S9+0x24>)
 80175f8:	22ff      	movs	r2, #255	; 0xff
 80175fa:	701a      	strb	r2, [r3, #0]
	Menu_num=0;
 80175fc:	4b05      	ldr	r3, [pc, #20]	; (8017614 <Measure_options_screen_S9+0x28>)
 80175fe:	2200      	movs	r2, #0
 8017600:	701a      	strb	r2, [r3, #0]
}
 8017602:	bf00      	nop
 8017604:	46bd      	mov	sp, r7
 8017606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760a:	4770      	bx	lr
 801760c:	2000004c 	.word	0x2000004c
 8017610:	20000398 	.word	0x20000398
 8017614:	20000399 	.word	0x20000399

08017618 <Measure_options_screen_S8>:

// BACKWARD
void Measure_options_screen_S8(void)
{
 8017618:	b480      	push	{r7}
 801761a:	af00      	add	r7, sp, #0
	switch(edit_param)
 801761c:	4b2b      	ldr	r3, [pc, #172]	; (80176cc <Measure_options_screen_S8+0xb4>)
 801761e:	781b      	ldrb	r3, [r3, #0]
 8017620:	2b04      	cmp	r3, #4
 8017622:	d84d      	bhi.n	80176c0 <Measure_options_screen_S8+0xa8>
 8017624:	a201      	add	r2, pc, #4	; (adr r2, 801762c <Measure_options_screen_S8+0x14>)
 8017626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801762a:	bf00      	nop
 801762c:	08017641 	.word	0x08017641
 8017630:	08017657 	.word	0x08017657
 8017634:	0801766d 	.word	0x0801766d
 8017638:	08017683 	.word	0x08017683
 801763c:	08017699 	.word	0x08017699
	{
		case 0: if(mm_peak>0)mm_peak--; break;
 8017640:	4b23      	ldr	r3, [pc, #140]	; (80176d0 <Measure_options_screen_S8+0xb8>)
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d032      	beq.n	80176ae <Measure_options_screen_S8+0x96>
 8017648:	4b21      	ldr	r3, [pc, #132]	; (80176d0 <Measure_options_screen_S8+0xb8>)
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	3b01      	subs	r3, #1
 801764e:	b2da      	uxtb	r2, r3
 8017650:	4b1f      	ldr	r3, [pc, #124]	; (80176d0 <Measure_options_screen_S8+0xb8>)
 8017652:	701a      	strb	r2, [r3, #0]
 8017654:	e02b      	b.n	80176ae <Measure_options_screen_S8+0x96>
		case 1: if(leak_detect>0)leak_detect--; break;
 8017656:	4b1f      	ldr	r3, [pc, #124]	; (80176d4 <Measure_options_screen_S8+0xbc>)
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d029      	beq.n	80176b2 <Measure_options_screen_S8+0x9a>
 801765e:	4b1d      	ldr	r3, [pc, #116]	; (80176d4 <Measure_options_screen_S8+0xbc>)
 8017660:	781b      	ldrb	r3, [r3, #0]
 8017662:	3b01      	subs	r3, #1
 8017664:	b2da      	uxtb	r2, r3
 8017666:	4b1b      	ldr	r3, [pc, #108]	; (80176d4 <Measure_options_screen_S8+0xbc>)
 8017668:	701a      	strb	r2, [r3, #0]
 801766a:	e022      	b.n	80176b2 <Measure_options_screen_S8+0x9a>
		case 2: if(PV>0)PV--; break;
 801766c:	4b1a      	ldr	r3, [pc, #104]	; (80176d8 <Measure_options_screen_S8+0xc0>)
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d020      	beq.n	80176b6 <Measure_options_screen_S8+0x9e>
 8017674:	4b18      	ldr	r3, [pc, #96]	; (80176d8 <Measure_options_screen_S8+0xc0>)
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	3b01      	subs	r3, #1
 801767a:	b2da      	uxtb	r2, r3
 801767c:	4b16      	ldr	r3, [pc, #88]	; (80176d8 <Measure_options_screen_S8+0xc0>)
 801767e:	701a      	strb	r2, [r3, #0]
 8017680:	e019      	b.n	80176b6 <Measure_options_screen_S8+0x9e>
		case 3: if(PI>0)PI--; break;
 8017682:	4b16      	ldr	r3, [pc, #88]	; (80176dc <Measure_options_screen_S8+0xc4>)
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d017      	beq.n	80176ba <Measure_options_screen_S8+0xa2>
 801768a:	4b14      	ldr	r3, [pc, #80]	; (80176dc <Measure_options_screen_S8+0xc4>)
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	3b01      	subs	r3, #1
 8017690:	b2da      	uxtb	r2, r3
 8017692:	4b12      	ldr	r3, [pc, #72]	; (80176dc <Measure_options_screen_S8+0xc4>)
 8017694:	701a      	strb	r2, [r3, #0]
 8017696:	e010      	b.n	80176ba <Measure_options_screen_S8+0xa2>
		case 4: if(PE>0)PE--; break;
 8017698:	4b11      	ldr	r3, [pc, #68]	; (80176e0 <Measure_options_screen_S8+0xc8>)
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d00e      	beq.n	80176be <Measure_options_screen_S8+0xa6>
 80176a0:	4b0f      	ldr	r3, [pc, #60]	; (80176e0 <Measure_options_screen_S8+0xc8>)
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	3b01      	subs	r3, #1
 80176a6:	b2da      	uxtb	r2, r3
 80176a8:	4b0d      	ldr	r3, [pc, #52]	; (80176e0 <Measure_options_screen_S8+0xc8>)
 80176aa:	701a      	strb	r2, [r3, #0]
 80176ac:	e007      	b.n	80176be <Measure_options_screen_S8+0xa6>
		case 0: if(mm_peak>0)mm_peak--; break;
 80176ae:	bf00      	nop
 80176b0:	e006      	b.n	80176c0 <Measure_options_screen_S8+0xa8>
		case 1: if(leak_detect>0)leak_detect--; break;
 80176b2:	bf00      	nop
 80176b4:	e004      	b.n	80176c0 <Measure_options_screen_S8+0xa8>
		case 2: if(PV>0)PV--; break;
 80176b6:	bf00      	nop
 80176b8:	e002      	b.n	80176c0 <Measure_options_screen_S8+0xa8>
		case 3: if(PI>0)PI--; break;
 80176ba:	bf00      	nop
 80176bc:	e000      	b.n	80176c0 <Measure_options_screen_S8+0xa8>
		case 4: if(PE>0)PE--; break;
 80176be:	bf00      	nop
	}
}
 80176c0:	bf00      	nop
 80176c2:	46bd      	mov	sp, r7
 80176c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c8:	4770      	bx	lr
 80176ca:	bf00      	nop
 80176cc:	20000852 	.word	0x20000852
 80176d0:	2000089a 	.word	0x2000089a
 80176d4:	2000089b 	.word	0x2000089b
 80176d8:	2000089c 	.word	0x2000089c
 80176dc:	2000089d 	.word	0x2000089d
 80176e0:	2000089e 	.word	0x2000089e

080176e4 <Measure_options_screen_S5>:

// FORWARD
void Measure_options_screen_S5(void)
{
 80176e4:	b480      	push	{r7}
 80176e6:	af00      	add	r7, sp, #0
	switch(edit_param)
 80176e8:	4b2b      	ldr	r3, [pc, #172]	; (8017798 <Measure_options_screen_S5+0xb4>)
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	2b04      	cmp	r3, #4
 80176ee:	d84d      	bhi.n	801778c <Measure_options_screen_S5+0xa8>
 80176f0:	a201      	add	r2, pc, #4	; (adr r2, 80176f8 <Measure_options_screen_S5+0x14>)
 80176f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176f6:	bf00      	nop
 80176f8:	0801770d 	.word	0x0801770d
 80176fc:	08017723 	.word	0x08017723
 8017700:	08017739 	.word	0x08017739
 8017704:	0801774f 	.word	0x0801774f
 8017708:	08017765 	.word	0x08017765
	{
		case 0: if(mm_peak<1)mm_peak++; break;
 801770c:	4b23      	ldr	r3, [pc, #140]	; (801779c <Measure_options_screen_S5+0xb8>)
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d132      	bne.n	801777a <Measure_options_screen_S5+0x96>
 8017714:	4b21      	ldr	r3, [pc, #132]	; (801779c <Measure_options_screen_S5+0xb8>)
 8017716:	781b      	ldrb	r3, [r3, #0]
 8017718:	3301      	adds	r3, #1
 801771a:	b2da      	uxtb	r2, r3
 801771c:	4b1f      	ldr	r3, [pc, #124]	; (801779c <Measure_options_screen_S5+0xb8>)
 801771e:	701a      	strb	r2, [r3, #0]
 8017720:	e02b      	b.n	801777a <Measure_options_screen_S5+0x96>
		case 1: if(leak_detect<2)leak_detect++; break;
 8017722:	4b1f      	ldr	r3, [pc, #124]	; (80177a0 <Measure_options_screen_S5+0xbc>)
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d829      	bhi.n	801777e <Measure_options_screen_S5+0x9a>
 801772a:	4b1d      	ldr	r3, [pc, #116]	; (80177a0 <Measure_options_screen_S5+0xbc>)
 801772c:	781b      	ldrb	r3, [r3, #0]
 801772e:	3301      	adds	r3, #1
 8017730:	b2da      	uxtb	r2, r3
 8017732:	4b1b      	ldr	r3, [pc, #108]	; (80177a0 <Measure_options_screen_S5+0xbc>)
 8017734:	701a      	strb	r2, [r3, #0]
 8017736:	e022      	b.n	801777e <Measure_options_screen_S5+0x9a>
		case 2: if(PV<1)PV++; break;
 8017738:	4b1a      	ldr	r3, [pc, #104]	; (80177a4 <Measure_options_screen_S5+0xc0>)
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d120      	bne.n	8017782 <Measure_options_screen_S5+0x9e>
 8017740:	4b18      	ldr	r3, [pc, #96]	; (80177a4 <Measure_options_screen_S5+0xc0>)
 8017742:	781b      	ldrb	r3, [r3, #0]
 8017744:	3301      	adds	r3, #1
 8017746:	b2da      	uxtb	r2, r3
 8017748:	4b16      	ldr	r3, [pc, #88]	; (80177a4 <Measure_options_screen_S5+0xc0>)
 801774a:	701a      	strb	r2, [r3, #0]
 801774c:	e019      	b.n	8017782 <Measure_options_screen_S5+0x9e>
		case 3: if(PI<1)PI++; break;
 801774e:	4b16      	ldr	r3, [pc, #88]	; (80177a8 <Measure_options_screen_S5+0xc4>)
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d117      	bne.n	8017786 <Measure_options_screen_S5+0xa2>
 8017756:	4b14      	ldr	r3, [pc, #80]	; (80177a8 <Measure_options_screen_S5+0xc4>)
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	3301      	adds	r3, #1
 801775c:	b2da      	uxtb	r2, r3
 801775e:	4b12      	ldr	r3, [pc, #72]	; (80177a8 <Measure_options_screen_S5+0xc4>)
 8017760:	701a      	strb	r2, [r3, #0]
 8017762:	e010      	b.n	8017786 <Measure_options_screen_S5+0xa2>
		case 4: if(PE<7)PE++; break;
 8017764:	4b11      	ldr	r3, [pc, #68]	; (80177ac <Measure_options_screen_S5+0xc8>)
 8017766:	781b      	ldrb	r3, [r3, #0]
 8017768:	2b06      	cmp	r3, #6
 801776a:	d80e      	bhi.n	801778a <Measure_options_screen_S5+0xa6>
 801776c:	4b0f      	ldr	r3, [pc, #60]	; (80177ac <Measure_options_screen_S5+0xc8>)
 801776e:	781b      	ldrb	r3, [r3, #0]
 8017770:	3301      	adds	r3, #1
 8017772:	b2da      	uxtb	r2, r3
 8017774:	4b0d      	ldr	r3, [pc, #52]	; (80177ac <Measure_options_screen_S5+0xc8>)
 8017776:	701a      	strb	r2, [r3, #0]
 8017778:	e007      	b.n	801778a <Measure_options_screen_S5+0xa6>
		case 0: if(mm_peak<1)mm_peak++; break;
 801777a:	bf00      	nop
 801777c:	e006      	b.n	801778c <Measure_options_screen_S5+0xa8>
		case 1: if(leak_detect<2)leak_detect++; break;
 801777e:	bf00      	nop
 8017780:	e004      	b.n	801778c <Measure_options_screen_S5+0xa8>
		case 2: if(PV<1)PV++; break;
 8017782:	bf00      	nop
 8017784:	e002      	b.n	801778c <Measure_options_screen_S5+0xa8>
		case 3: if(PI<1)PI++; break;
 8017786:	bf00      	nop
 8017788:	e000      	b.n	801778c <Measure_options_screen_S5+0xa8>
		case 4: if(PE<7)PE++; break;
 801778a:	bf00      	nop
	}
}
 801778c:	bf00      	nop
 801778e:	46bd      	mov	sp, r7
 8017790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	20000852 	.word	0x20000852
 801779c:	2000089a 	.word	0x2000089a
 80177a0:	2000089b 	.word	0x2000089b
 80177a4:	2000089c 	.word	0x2000089c
 80177a8:	2000089d 	.word	0x2000089d
 80177ac:	2000089e 	.word	0x2000089e

080177b0 <Main_screen_func>:

uint16_t view_tim=0;
uint8_t view =0;

void Main_screen_func(void)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	af00      	add	r7, sp, #0
	if(view==1)
 80177b4:	4b61      	ldr	r3, [pc, #388]	; (801793c <Main_screen_func+0x18c>)
 80177b6:	781b      	ldrb	r3, [r3, #0]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	f040 80bd 	bne.w	8017938 <Main_screen_func+0x188>
	{
		RTC_view();
 80177be:	f000 f933 	bl	8017a28 <RTC_view>

		view=0;
 80177c2:	4b5e      	ldr	r3, [pc, #376]	; (801793c <Main_screen_func+0x18c>)
 80177c4:	2200      	movs	r2, #0
 80177c6:	701a      	strb	r2, [r3, #0]
		u8g2_SetFont(&u8g2, u8g2_font_inr30_mn);
 80177c8:	495d      	ldr	r1, [pc, #372]	; (8017940 <Main_screen_func+0x190>)
 80177ca:	485e      	ldr	r0, [pc, #376]	; (8017944 <Main_screen_func+0x194>)
 80177cc:	f7fe f91e 	bl	8015a0c <u8g2_SetFont>

		sprintf(RAM,"%+fV", Pressure);
 80177d0:	4b5d      	ldr	r3, [pc, #372]	; (8017948 <Main_screen_func+0x198>)
 80177d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d6:	495d      	ldr	r1, [pc, #372]	; (801794c <Main_screen_func+0x19c>)
 80177d8:	485d      	ldr	r0, [pc, #372]	; (8017950 <Main_screen_func+0x1a0>)
 80177da:	f006 fa75 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 70, RAM);
 80177de:	4b5c      	ldr	r3, [pc, #368]	; (8017950 <Main_screen_func+0x1a0>)
 80177e0:	2246      	movs	r2, #70	; 0x46
 80177e2:	2105      	movs	r1, #5
 80177e4:	4857      	ldr	r0, [pc, #348]	; (8017944 <Main_screen_func+0x194>)
 80177e6:	f7fe f86f 	bl	80158c8 <u8g2_DrawUTF8>

		switch(E_fun)
 80177ea:	4b5a      	ldr	r3, [pc, #360]	; (8017954 <Main_screen_func+0x1a4>)
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	2b02      	cmp	r3, #2
 80177f0:	d03d      	beq.n	801786e <Main_screen_func+0xbe>
 80177f2:	2b02      	cmp	r3, #2
 80177f4:	dc5a      	bgt.n	80178ac <Main_screen_func+0xfc>
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d002      	beq.n	8017800 <Main_screen_func+0x50>
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d018      	beq.n	8017830 <Main_screen_func+0x80>
 80177fe:	e055      	b.n	80178ac <Main_screen_func+0xfc>
		{
		// Давление
		case 0:
			sprintf(RAM,"%+fV", Test_Pressure);
 8017800:	4b55      	ldr	r3, [pc, #340]	; (8017958 <Main_screen_func+0x1a8>)
 8017802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017806:	4951      	ldr	r1, [pc, #324]	; (801794c <Main_screen_func+0x19c>)
 8017808:	4851      	ldr	r0, [pc, #324]	; (8017950 <Main_screen_func+0x1a0>)
 801780a:	f006 fa5d 	bl	801dcc8 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 801780e:	4b50      	ldr	r3, [pc, #320]	; (8017950 <Main_screen_func+0x1a0>)
 8017810:	2282      	movs	r2, #130	; 0x82
 8017812:	2105      	movs	r1, #5
 8017814:	484b      	ldr	r0, [pc, #300]	; (8017944 <Main_screen_func+0x194>)
 8017816:	f7fe f857 	bl	80158c8 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 801781a:	4950      	ldr	r1, [pc, #320]	; (801795c <Main_screen_func+0x1ac>)
 801781c:	4849      	ldr	r0, [pc, #292]	; (8017944 <Main_screen_func+0x194>)
 801781e:	f7fe f8f5 	bl	8015a0c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "давление");
 8017822:	4b4f      	ldr	r3, [pc, #316]	; (8017960 <Main_screen_func+0x1b0>)
 8017824:	229b      	movs	r2, #155	; 0x9b
 8017826:	21a0      	movs	r1, #160	; 0xa0
 8017828:	4846      	ldr	r0, [pc, #280]	; (8017944 <Main_screen_func+0x194>)
 801782a:	f7fe f84d 	bl	80158c8 <u8g2_DrawUTF8>
			break;
 801782e:	e03d      	b.n	80178ac <Main_screen_func+0xfc>

			// Ток
		case 1:
			sprintf(RAM,"%+fV", current_4_20mA-Electric_zero);
 8017830:	4b4c      	ldr	r3, [pc, #304]	; (8017964 <Main_screen_func+0x1b4>)
 8017832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017836:	4b4c      	ldr	r3, [pc, #304]	; (8017968 <Main_screen_func+0x1b8>)
 8017838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801783c:	f7e8 fd34 	bl	80002a8 <__aeabi_dsub>
 8017840:	4602      	mov	r2, r0
 8017842:	460b      	mov	r3, r1
 8017844:	4941      	ldr	r1, [pc, #260]	; (801794c <Main_screen_func+0x19c>)
 8017846:	4842      	ldr	r0, [pc, #264]	; (8017950 <Main_screen_func+0x1a0>)
 8017848:	f006 fa3e 	bl	801dcc8 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 801784c:	4b40      	ldr	r3, [pc, #256]	; (8017950 <Main_screen_func+0x1a0>)
 801784e:	2282      	movs	r2, #130	; 0x82
 8017850:	2105      	movs	r1, #5
 8017852:	483c      	ldr	r0, [pc, #240]	; (8017944 <Main_screen_func+0x194>)
 8017854:	f7fe f838 	bl	80158c8 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017858:	4940      	ldr	r1, [pc, #256]	; (801795c <Main_screen_func+0x1ac>)
 801785a:	483a      	ldr	r0, [pc, #232]	; (8017944 <Main_screen_func+0x194>)
 801785c:	f7fe f8d6 	bl	8015a0c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "ток");
 8017860:	4b42      	ldr	r3, [pc, #264]	; (801796c <Main_screen_func+0x1bc>)
 8017862:	229b      	movs	r2, #155	; 0x9b
 8017864:	21a0      	movs	r1, #160	; 0xa0
 8017866:	4837      	ldr	r0, [pc, #220]	; (8017944 <Main_screen_func+0x194>)
 8017868:	f7fe f82e 	bl	80158c8 <u8g2_DrawUTF8>
			break;
 801786c:	e01e      	b.n	80178ac <Main_screen_func+0xfc>

			// Напряжение
		case 2:
			sprintf(RAM,"%+fV", voltage_measure-Electric_zero);
 801786e:	4b40      	ldr	r3, [pc, #256]	; (8017970 <Main_screen_func+0x1c0>)
 8017870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017874:	4b3c      	ldr	r3, [pc, #240]	; (8017968 <Main_screen_func+0x1b8>)
 8017876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787a:	f7e8 fd15 	bl	80002a8 <__aeabi_dsub>
 801787e:	4602      	mov	r2, r0
 8017880:	460b      	mov	r3, r1
 8017882:	4932      	ldr	r1, [pc, #200]	; (801794c <Main_screen_func+0x19c>)
 8017884:	4832      	ldr	r0, [pc, #200]	; (8017950 <Main_screen_func+0x1a0>)
 8017886:	f006 fa1f 	bl	801dcc8 <siprintf>
				u8g2_DrawUTF8(&u8g2, 5, 130, RAM);
 801788a:	4b31      	ldr	r3, [pc, #196]	; (8017950 <Main_screen_func+0x1a0>)
 801788c:	2282      	movs	r2, #130	; 0x82
 801788e:	2105      	movs	r1, #5
 8017890:	482c      	ldr	r0, [pc, #176]	; (8017944 <Main_screen_func+0x194>)
 8017892:	f7fe f819 	bl	80158c8 <u8g2_DrawUTF8>
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017896:	4931      	ldr	r1, [pc, #196]	; (801795c <Main_screen_func+0x1ac>)
 8017898:	482a      	ldr	r0, [pc, #168]	; (8017944 <Main_screen_func+0x194>)
 801789a:	f7fe f8b7 	bl	8015a0c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, 160, 155, "напряжение");
 801789e:	4b35      	ldr	r3, [pc, #212]	; (8017974 <Main_screen_func+0x1c4>)
 80178a0:	229b      	movs	r2, #155	; 0x9b
 80178a2:	21a0      	movs	r1, #160	; 0xa0
 80178a4:	4827      	ldr	r0, [pc, #156]	; (8017944 <Main_screen_func+0x194>)
 80178a6:	f7fe f80f 	bl	80158c8 <u8g2_DrawUTF8>
			break;
 80178aa:	bf00      	nop
		}

		u8g2_DrawUTF8(&u8g2, 5, 35, "Каюков А.Н.");
 80178ac:	4b32      	ldr	r3, [pc, #200]	; (8017978 <Main_screen_func+0x1c8>)
 80178ae:	2223      	movs	r2, #35	; 0x23
 80178b0:	2105      	movs	r1, #5
 80178b2:	4824      	ldr	r0, [pc, #144]	; (8017944 <Main_screen_func+0x194>)
 80178b4:	f7fe f808 	bl	80158c8 <u8g2_DrawUTF8>
		u8g2_DrawUTF8(&u8g2, 5, 95, "Агапов А.Д.");
 80178b8:	4b30      	ldr	r3, [pc, #192]	; (801797c <Main_screen_func+0x1cc>)
 80178ba:	225f      	movs	r2, #95	; 0x5f
 80178bc:	2105      	movs	r1, #5
 80178be:	4821      	ldr	r0, [pc, #132]	; (8017944 <Main_screen_func+0x194>)
 80178c0:	f7fe f802 	bl	80158c8 <u8g2_DrawUTF8>

		sprintf(RAM,"t %.2f", Temperature2);
 80178c4:	4b2e      	ldr	r3, [pc, #184]	; (8017980 <Main_screen_func+0x1d0>)
 80178c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ca:	492e      	ldr	r1, [pc, #184]	; (8017984 <Main_screen_func+0x1d4>)
 80178cc:	4820      	ldr	r0, [pc, #128]	; (8017950 <Main_screen_func+0x1a0>)
 80178ce:	f006 f9fb 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 35, RAM);
 80178d2:	4b1f      	ldr	r3, [pc, #124]	; (8017950 <Main_screen_func+0x1a0>)
 80178d4:	2223      	movs	r2, #35	; 0x23
 80178d6:	2178      	movs	r1, #120	; 0x78
 80178d8:	481a      	ldr	r0, [pc, #104]	; (8017944 <Main_screen_func+0x194>)
 80178da:	f7fd fff5 	bl	80158c8 <u8g2_DrawUTF8>

		sprintf(RAM,"%.6f", Temperature_coeff_25);
 80178de:	4b2a      	ldr	r3, [pc, #168]	; (8017988 <Main_screen_func+0x1d8>)
 80178e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e4:	4929      	ldr	r1, [pc, #164]	; (801798c <Main_screen_func+0x1dc>)
 80178e6:	481a      	ldr	r0, [pc, #104]	; (8017950 <Main_screen_func+0x1a0>)
 80178e8:	f006 f9ee 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 5, 155, RAM);
 80178ec:	4b18      	ldr	r3, [pc, #96]	; (8017950 <Main_screen_func+0x1a0>)
 80178ee:	229b      	movs	r2, #155	; 0x9b
 80178f0:	2105      	movs	r1, #5
 80178f2:	4814      	ldr	r0, [pc, #80]	; (8017944 <Main_screen_func+0x194>)
 80178f4:	f7fd ffe8 	bl	80158c8 <u8g2_DrawUTF8>

		sprintf(RAM,"%.2f", MCU_temp);
 80178f8:	4b25      	ldr	r3, [pc, #148]	; (8017990 <Main_screen_func+0x1e0>)
 80178fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178fe:	4925      	ldr	r1, [pc, #148]	; (8017994 <Main_screen_func+0x1e4>)
 8017900:	4813      	ldr	r0, [pc, #76]	; (8017950 <Main_screen_func+0x1a0>)
 8017902:	f006 f9e1 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 95, 155, RAM);
 8017906:	4b12      	ldr	r3, [pc, #72]	; (8017950 <Main_screen_func+0x1a0>)
 8017908:	229b      	movs	r2, #155	; 0x9b
 801790a:	215f      	movs	r1, #95	; 0x5f
 801790c:	480d      	ldr	r0, [pc, #52]	; (8017944 <Main_screen_func+0x194>)
 801790e:	f7fd ffdb 	bl	80158c8 <u8g2_DrawUTF8>


		sprintf(RAM,"t %.2f", Temperature);
 8017912:	4b21      	ldr	r3, [pc, #132]	; (8017998 <Main_screen_func+0x1e8>)
 8017914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017918:	491a      	ldr	r1, [pc, #104]	; (8017984 <Main_screen_func+0x1d4>)
 801791a:	480d      	ldr	r0, [pc, #52]	; (8017950 <Main_screen_func+0x1a0>)
 801791c:	f006 f9d4 	bl	801dcc8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 120, 95, RAM);
 8017920:	4b0b      	ldr	r3, [pc, #44]	; (8017950 <Main_screen_func+0x1a0>)
 8017922:	225f      	movs	r2, #95	; 0x5f
 8017924:	2178      	movs	r1, #120	; 0x78
 8017926:	4807      	ldr	r0, [pc, #28]	; (8017944 <Main_screen_func+0x194>)
 8017928:	f7fd ffce 	bl	80158c8 <u8g2_DrawUTF8>

		u8g2_SendBuffer(&u8g2);
 801792c:	4805      	ldr	r0, [pc, #20]	; (8017944 <Main_screen_func+0x194>)
 801792e:	f7fd fa30 	bl	8014d92 <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 8017932:	4804      	ldr	r0, [pc, #16]	; (8017944 <Main_screen_func+0x194>)
 8017934:	f7fd f9ba 	bl	8014cac <u8g2_ClearBuffer>
	}
}
 8017938:	bf00      	nop
 801793a:	bd80      	pop	{r7, pc}
 801793c:	20001c48 	.word	0x20001c48
 8017940:	08028d98 	.word	0x08028d98
 8017944:	20001fbc 	.word	0x20001fbc
 8017948:	20002280 	.word	0x20002280
 801794c:	080221c8 	.word	0x080221c8
 8017950:	20002070 	.word	0x20002070
 8017954:	20000898 	.word	0x20000898
 8017958:	20002288 	.word	0x20002288
 801795c:	08025b40 	.word	0x08025b40
 8017960:	080221d0 	.word	0x080221d0
 8017964:	200052a8 	.word	0x200052a8
 8017968:	20000878 	.word	0x20000878
 801796c:	080221e4 	.word	0x080221e4
 8017970:	20002160 	.word	0x20002160
 8017974:	080221ec 	.word	0x080221ec
 8017978:	08022204 	.word	0x08022204
 801797c:	08022218 	.word	0x08022218
 8017980:	20000868 	.word	0x20000868
 8017984:	0802222c 	.word	0x0802222c
 8017988:	20000078 	.word	0x20000078
 801798c:	08022234 	.word	0x08022234
 8017990:	20000890 	.word	0x20000890
 8017994:	0802223c 	.word	0x0802223c
 8017998:	20000880 	.word	0x20000880

0801799c <Main_screen_S9>:



// Меню
void Main_screen_S9(void)
{
 801799c:	b480      	push	{r7}
 801799e:	af00      	add	r7, sp, #0
	if(screen=Main_screen)
 80179a0:	4b08      	ldr	r3, [pc, #32]	; (80179c4 <Main_screen_S9+0x28>)
 80179a2:	2201      	movs	r2, #1
 80179a4:	701a      	strb	r2, [r3, #0]
	{
		screen=Option_screen;
 80179a6:	4b07      	ldr	r3, [pc, #28]	; (80179c4 <Main_screen_S9+0x28>)
 80179a8:	2204      	movs	r2, #4
 80179aa:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 80179ac:	4b06      	ldr	r3, [pc, #24]	; (80179c8 <Main_screen_S9+0x2c>)
 80179ae:	22ff      	movs	r2, #255	; 0xff
 80179b0:	701a      	strb	r2, [r3, #0]
		Menu_num=0;
 80179b2:	4b06      	ldr	r3, [pc, #24]	; (80179cc <Main_screen_S9+0x30>)
 80179b4:	2200      	movs	r2, #0
 80179b6:	701a      	strb	r2, [r3, #0]
	}
}
 80179b8:	bf00      	nop
 80179ba:	46bd      	mov	sp, r7
 80179bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c0:	4770      	bx	lr
 80179c2:	bf00      	nop
 80179c4:	2000004c 	.word	0x2000004c
 80179c8:	20000398 	.word	0x20000398
 80179cc:	20000399 	.word	0x20000399

080179d0 <Viewer_timer>:


void Viewer_timer(void)
{
 80179d0:	b480      	push	{r7}
 80179d2:	af00      	add	r7, sp, #0
	if(++view_tim==300){view=1;view_tim=0;}
 80179d4:	4b0a      	ldr	r3, [pc, #40]	; (8017a00 <Viewer_timer+0x30>)
 80179d6:	881b      	ldrh	r3, [r3, #0]
 80179d8:	3301      	adds	r3, #1
 80179da:	b29a      	uxth	r2, r3
 80179dc:	4b08      	ldr	r3, [pc, #32]	; (8017a00 <Viewer_timer+0x30>)
 80179de:	801a      	strh	r2, [r3, #0]
 80179e0:	4b07      	ldr	r3, [pc, #28]	; (8017a00 <Viewer_timer+0x30>)
 80179e2:	881b      	ldrh	r3, [r3, #0]
 80179e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80179e8:	d105      	bne.n	80179f6 <Viewer_timer+0x26>
 80179ea:	4b06      	ldr	r3, [pc, #24]	; (8017a04 <Viewer_timer+0x34>)
 80179ec:	2201      	movs	r2, #1
 80179ee:	701a      	strb	r2, [r3, #0]
 80179f0:	4b03      	ldr	r3, [pc, #12]	; (8017a00 <Viewer_timer+0x30>)
 80179f2:	2200      	movs	r2, #0
 80179f4:	801a      	strh	r2, [r3, #0]
}
 80179f6:	bf00      	nop
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr
 8017a00:	20001c46 	.word	0x20001c46
 8017a04:	20001c48 	.word	0x20001c48

08017a08 <Battery_process>:
const uint8_t eltara_icon[]={0,16,0,16, 0x3F, 0xFC, 0x40, 0x02, 0x80, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x86, 0x01, 0x86, 0x01, 0x87, 0x81, 0x87, 0x81, 0x86, 0x01, 0x86, 0x01, 0x87, 0xE1, 0x87, 0xE1, 0x80, 0x01, 0x40, 0x02, 0x3F, 0xFC};



void Battery_process(void)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*) &Vbat_uint,128);
 8017a0c:	2280      	movs	r2, #128	; 0x80
 8017a0e:	4904      	ldr	r1, [pc, #16]	; (8017a20 <Battery_process+0x18>)
 8017a10:	4804      	ldr	r0, [pc, #16]	; (8017a24 <Battery_process+0x1c>)
 8017a12:	f7f0 fcf7 	bl	8008404 <HAL_ADC_Start_DMA>
	sleep(100);
 8017a16:	2064      	movs	r0, #100	; 0x64
 8017a18:	f7eb fc04 	bl	8003224 <sleep>
}
 8017a1c:	bf00      	nop
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	20002168 	.word	0x20002168
 8017a24:	20007ab4 	.word	0x20007ab4

08017a28 <RTC_view>:



void RTC_view(void)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b086      	sub	sp, #24
 8017a2c:	af02      	add	r7, sp, #8
	uint8_t battery_percent, i;
	uint32_t bat_sum=0;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	60bb      	str	r3, [r7, #8]
	float battery_volt;

	// date & time
	u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 8017a32:	4959      	ldr	r1, [pc, #356]	; (8017b98 <RTC_view+0x170>)
 8017a34:	4859      	ldr	r0, [pc, #356]	; (8017b9c <RTC_view+0x174>)
 8017a36:	f7fd ffe9 	bl	8015a0c <u8g2_SetFont>
	sprintf(RAM,"%02d.%02d.%02d", day, month, year);
 8017a3a:	4b59      	ldr	r3, [pc, #356]	; (8017ba0 <RTC_view+0x178>)
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	461a      	mov	r2, r3
 8017a40:	4b58      	ldr	r3, [pc, #352]	; (8017ba4 <RTC_view+0x17c>)
 8017a42:	781b      	ldrb	r3, [r3, #0]
 8017a44:	4619      	mov	r1, r3
 8017a46:	4b58      	ldr	r3, [pc, #352]	; (8017ba8 <RTC_view+0x180>)
 8017a48:	781b      	ldrb	r3, [r3, #0]
 8017a4a:	9300      	str	r3, [sp, #0]
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	4957      	ldr	r1, [pc, #348]	; (8017bac <RTC_view+0x184>)
 8017a50:	4857      	ldr	r0, [pc, #348]	; (8017bb0 <RTC_view+0x188>)
 8017a52:	f006 f939 	bl	801dcc8 <siprintf>
	u8g2_DrawUTF8(&u8g2, 0, 12, RAM);
 8017a56:	4b56      	ldr	r3, [pc, #344]	; (8017bb0 <RTC_view+0x188>)
 8017a58:	220c      	movs	r2, #12
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	484f      	ldr	r0, [pc, #316]	; (8017b9c <RTC_view+0x174>)
 8017a5e:	f7fd ff33 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:%02d:%02d", hour, minute, sec);
 8017a62:	4b54      	ldr	r3, [pc, #336]	; (8017bb4 <RTC_view+0x18c>)
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	461a      	mov	r2, r3
 8017a68:	4b53      	ldr	r3, [pc, #332]	; (8017bb8 <RTC_view+0x190>)
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	4619      	mov	r1, r3
 8017a6e:	4b53      	ldr	r3, [pc, #332]	; (8017bbc <RTC_view+0x194>)
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	9300      	str	r3, [sp, #0]
 8017a74:	460b      	mov	r3, r1
 8017a76:	4952      	ldr	r1, [pc, #328]	; (8017bc0 <RTC_view+0x198>)
 8017a78:	484d      	ldr	r0, [pc, #308]	; (8017bb0 <RTC_view+0x188>)
 8017a7a:	f006 f925 	bl	801dcc8 <siprintf>
	u8g2_DrawUTF8(&u8g2, 81, 12, RAM);
 8017a7e:	4b4c      	ldr	r3, [pc, #304]	; (8017bb0 <RTC_view+0x188>)
 8017a80:	220c      	movs	r2, #12
 8017a82:	2151      	movs	r1, #81	; 0x51
 8017a84:	4845      	ldr	r0, [pc, #276]	; (8017b9c <RTC_view+0x174>)
 8017a86:	f7fd ff1f 	bl	80158c8 <u8g2_DrawUTF8>

	// Tarring
	if(Pressure_zero!=0)DrawImage(tara_icon, 194, 2, 1);
 8017a8a:	4b4e      	ldr	r3, [pc, #312]	; (8017bc4 <RTC_view+0x19c>)
 8017a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a90:	f04f 0200 	mov.w	r2, #0
 8017a94:	f04f 0300 	mov.w	r3, #0
 8017a98:	f7e9 f826 	bl	8000ae8 <__aeabi_dcmpeq>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d105      	bne.n	8017aae <RTC_view+0x86>
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	2202      	movs	r2, #2
 8017aa6:	21c2      	movs	r1, #194	; 0xc2
 8017aa8:	4847      	ldr	r0, [pc, #284]	; (8017bc8 <RTC_view+0x1a0>)
 8017aaa:	f7eb f881 	bl	8002bb0 <DrawImage>

	//El tarring
	if(Electric_zero!=0)DrawImage(eltara_icon, 176, 2, 1);
 8017aae:	4b47      	ldr	r3, [pc, #284]	; (8017bcc <RTC_view+0x1a4>)
 8017ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017ab4:	f04f 0200 	mov.w	r2, #0
 8017ab8:	f04f 0300 	mov.w	r3, #0
 8017abc:	f7e9 f814 	bl	8000ae8 <__aeabi_dcmpeq>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d105      	bne.n	8017ad2 <RTC_view+0xaa>
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	2202      	movs	r2, #2
 8017aca:	21b0      	movs	r1, #176	; 0xb0
 8017acc:	4840      	ldr	r0, [pc, #256]	; (8017bd0 <RTC_view+0x1a8>)
 8017ace:	f7eb f86f 	bl	8002bb0 <DrawImage>

	// Battery
	for(i=0;i<128;i++)bat_sum+=Vbat_uint[i];
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	73fb      	strb	r3, [r7, #15]
 8017ad6:	e00a      	b.n	8017aee <RTC_view+0xc6>
 8017ad8:	7bfb      	ldrb	r3, [r7, #15]
 8017ada:	4a3e      	ldr	r2, [pc, #248]	; (8017bd4 <RTC_view+0x1ac>)
 8017adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	68bb      	ldr	r3, [r7, #8]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	60bb      	str	r3, [r7, #8]
 8017ae8:	7bfb      	ldrb	r3, [r7, #15]
 8017aea:	3301      	adds	r3, #1
 8017aec:	73fb      	strb	r3, [r7, #15]
 8017aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	daf0      	bge.n	8017ad8 <RTC_view+0xb0>
	battery_volt = 0.0074258*(bat_sum>>7);
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	09db      	lsrs	r3, r3, #7
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7e8 fd12 	bl	8000524 <__aeabi_ui2d>
 8017b00:	a321      	add	r3, pc, #132	; (adr r3, 8017b88 <RTC_view+0x160>)
 8017b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b06:	f7e8 fd87 	bl	8000618 <__aeabi_dmul>
 8017b0a:	4602      	mov	r2, r0
 8017b0c:	460b      	mov	r3, r1
 8017b0e:	4610      	mov	r0, r2
 8017b10:	4619      	mov	r1, r3
 8017b12:	f7e9 f879 	bl	8000c08 <__aeabi_d2f>
 8017b16:	4603      	mov	r3, r0
 8017b18:	607b      	str	r3, [r7, #4]
	DrawImage(bat_icon, 216, 4, 1);
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	2204      	movs	r2, #4
 8017b1e:	21d8      	movs	r1, #216	; 0xd8
 8017b20:	482d      	ldr	r0, [pc, #180]	; (8017bd8 <RTC_view+0x1b0>)
 8017b22:	f7eb f845 	bl	8002bb0 <DrawImage>
	battery_percent = (uint8_t)((battery_volt-2.9)*100);
 8017b26:	6878      	ldr	r0, [r7, #4]
 8017b28:	f7e8 fd1e 	bl	8000568 <__aeabi_f2d>
 8017b2c:	a318      	add	r3, pc, #96	; (adr r3, 8017b90 <RTC_view+0x168>)
 8017b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b32:	f7e8 fbb9 	bl	80002a8 <__aeabi_dsub>
 8017b36:	4602      	mov	r2, r0
 8017b38:	460b      	mov	r3, r1
 8017b3a:	4610      	mov	r0, r2
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	f04f 0200 	mov.w	r2, #0
 8017b42:	4b26      	ldr	r3, [pc, #152]	; (8017bdc <RTC_view+0x1b4>)
 8017b44:	f7e8 fd68 	bl	8000618 <__aeabi_dmul>
 8017b48:	4602      	mov	r2, r0
 8017b4a:	460b      	mov	r3, r1
 8017b4c:	4610      	mov	r0, r2
 8017b4e:	4619      	mov	r1, r3
 8017b50:	f7e9 f83a 	bl	8000bc8 <__aeabi_d2uiz>
 8017b54:	4603      	mov	r3, r0
 8017b56:	70fb      	strb	r3, [r7, #3]

	u8g2_SetFont(&u8g2, u8g2_font_5x8_t_cyrillic);
 8017b58:	4921      	ldr	r1, [pc, #132]	; (8017be0 <RTC_view+0x1b8>)
 8017b5a:	4810      	ldr	r0, [pc, #64]	; (8017b9c <RTC_view+0x174>)
 8017b5c:	f7fd ff56 	bl	8015a0c <u8g2_SetFont>
	sprintf(RAM,"%.2f", battery_volt);
 8017b60:	6878      	ldr	r0, [r7, #4]
 8017b62:	f7e8 fd01 	bl	8000568 <__aeabi_f2d>
 8017b66:	4602      	mov	r2, r0
 8017b68:	460b      	mov	r3, r1
 8017b6a:	491e      	ldr	r1, [pc, #120]	; (8017be4 <RTC_view+0x1bc>)
 8017b6c:	4810      	ldr	r0, [pc, #64]	; (8017bb0 <RTC_view+0x188>)
 8017b6e:	f006 f8ab 	bl	801dcc8 <siprintf>
	//sprintf(RAM,"%d", battery_percent);
	u8g2_DrawUTF8(&u8g2, 219, 13, RAM);
 8017b72:	4b0f      	ldr	r3, [pc, #60]	; (8017bb0 <RTC_view+0x188>)
 8017b74:	220d      	movs	r2, #13
 8017b76:	21db      	movs	r1, #219	; 0xdb
 8017b78:	4808      	ldr	r0, [pc, #32]	; (8017b9c <RTC_view+0x174>)
 8017b7a:	f7fd fea5 	bl	80158c8 <u8g2_DrawUTF8>
}
 8017b7e:	bf00      	nop
 8017b80:	3710      	adds	r7, #16
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}
 8017b86:	bf00      	nop
 8017b88:	02589fd4 	.word	0x02589fd4
 8017b8c:	3f7e6a84 	.word	0x3f7e6a84
 8017b90:	33333333 	.word	0x33333333
 8017b94:	40073333 	.word	0x40073333
 8017b98:	08025b40 	.word	0x08025b40
 8017b9c:	20001fbc 	.word	0x20001fbc
 8017ba0:	20008734 	.word	0x20008734
 8017ba4:	2000873b 	.word	0x2000873b
 8017ba8:	2000873c 	.word	0x2000873c
 8017bac:	08022244 	.word	0x08022244
 8017bb0:	20002070 	.word	0x20002070
 8017bb4:	20008737 	.word	0x20008737
 8017bb8:	2000873e 	.word	0x2000873e
 8017bbc:	20008738 	.word	0x20008738
 8017bc0:	08022254 	.word	0x08022254
 8017bc4:	20000870 	.word	0x20000870
 8017bc8:	08029414 	.word	0x08029414
 8017bcc:	20000878 	.word	0x20000878
 8017bd0:	08029438 	.word	0x08029438
 8017bd4:	20002168 	.word	0x20002168
 8017bd8:	080293ec 	.word	0x080293ec
 8017bdc:	40590000 	.word	0x40590000
 8017be0:	08023ecc 	.word	0x08023ecc
 8017be4:	08022264 	.word	0x08022264

08017be8 <RTC_process>:


void RTC_process(void)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b086      	sub	sp, #24
 8017bec:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8017bee:	1d3b      	adds	r3, r7, #4
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	601a      	str	r2, [r3, #0]
 8017bf4:	605a      	str	r2, [r3, #4]
 8017bf6:	609a      	str	r2, [r3, #8]
 8017bf8:	60da      	str	r2, [r3, #12]
 8017bfa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8017c00:	463b      	mov	r3, r7
 8017c02:	2200      	movs	r2, #0
 8017c04:	4619      	mov	r1, r3
 8017c06:	4811      	ldr	r0, [pc, #68]	; (8017c4c <RTC_process+0x64>)
 8017c08:	f7f5 feec 	bl	800d9e4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8017c0c:	1d3b      	adds	r3, r7, #4
 8017c0e:	2200      	movs	r2, #0
 8017c10:	4619      	mov	r1, r3
 8017c12:	480e      	ldr	r0, [pc, #56]	; (8017c4c <RTC_process+0x64>)
 8017c14:	f7f5 fe03 	bl	800d81e <HAL_RTC_GetTime>

	year=sDate.Year;
 8017c18:	78fa      	ldrb	r2, [r7, #3]
 8017c1a:	4b0d      	ldr	r3, [pc, #52]	; (8017c50 <RTC_process+0x68>)
 8017c1c:	701a      	strb	r2, [r3, #0]
	month=sDate.Month;
 8017c1e:	787a      	ldrb	r2, [r7, #1]
 8017c20:	4b0c      	ldr	r3, [pc, #48]	; (8017c54 <RTC_process+0x6c>)
 8017c22:	701a      	strb	r2, [r3, #0]
	day=sDate.Date;
 8017c24:	78ba      	ldrb	r2, [r7, #2]
 8017c26:	4b0c      	ldr	r3, [pc, #48]	; (8017c58 <RTC_process+0x70>)
 8017c28:	701a      	strb	r2, [r3, #0]
	hour=sTime.Hours;
 8017c2a:	793a      	ldrb	r2, [r7, #4]
 8017c2c:	4b0b      	ldr	r3, [pc, #44]	; (8017c5c <RTC_process+0x74>)
 8017c2e:	701a      	strb	r2, [r3, #0]
	minute=sTime.Minutes;
 8017c30:	797a      	ldrb	r2, [r7, #5]
 8017c32:	4b0b      	ldr	r3, [pc, #44]	; (8017c60 <RTC_process+0x78>)
 8017c34:	701a      	strb	r2, [r3, #0]
	sec=sTime.Seconds;
 8017c36:	79ba      	ldrb	r2, [r7, #6]
 8017c38:	4b0a      	ldr	r3, [pc, #40]	; (8017c64 <RTC_process+0x7c>)
 8017c3a:	701a      	strb	r2, [r3, #0]

	sleep(1000);
 8017c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017c40:	f7eb faf0 	bl	8003224 <sleep>
}
 8017c44:	bf00      	nop
 8017c46:	3718      	adds	r7, #24
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	20007838 	.word	0x20007838
 8017c50:	2000873c 	.word	0x2000873c
 8017c54:	2000873b 	.word	0x2000873b
 8017c58:	20008734 	.word	0x20008734
 8017c5c:	20008737 	.word	0x20008737
 8017c60:	2000873e 	.word	0x2000873e
 8017c64:	20008738 	.word	0x20008738

08017c68 <RTC_set>:


void RTC_set(uint8_t rtc_year, uint8_t rtc_month, uint8_t rtc_day, uint8_t rtc_hour, uint8_t rtc_min, uint8_t rtc_sec)
{
 8017c68:	b590      	push	{r4, r7, lr}
 8017c6a:	b089      	sub	sp, #36	; 0x24
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	4604      	mov	r4, r0
 8017c70:	4608      	mov	r0, r1
 8017c72:	4611      	mov	r1, r2
 8017c74:	461a      	mov	r2, r3
 8017c76:	4623      	mov	r3, r4
 8017c78:	71fb      	strb	r3, [r7, #7]
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	71bb      	strb	r3, [r7, #6]
 8017c7e:	460b      	mov	r3, r1
 8017c80:	717b      	strb	r3, [r7, #5]
 8017c82:	4613      	mov	r3, r2
 8017c84:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8017c86:	f107 030c 	add.w	r3, r7, #12
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	601a      	str	r2, [r3, #0]
 8017c8e:	605a      	str	r2, [r3, #4]
 8017c90:	609a      	str	r2, [r3, #8]
 8017c92:	60da      	str	r2, [r3, #12]
 8017c94:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8017c96:	2300      	movs	r3, #0
 8017c98:	60bb      	str	r3, [r7, #8]
	HAL_RTC_DeInit(&hrtc);
 8017c9a:	482b      	ldr	r0, [pc, #172]	; (8017d48 <RTC_set+0xe0>)
 8017c9c:	f7f5 fcae 	bl	800d5fc <HAL_RTC_DeInit>


	hrtc.Instance = RTC;
 8017ca0:	4b29      	ldr	r3, [pc, #164]	; (8017d48 <RTC_set+0xe0>)
 8017ca2:	4a2a      	ldr	r2, [pc, #168]	; (8017d4c <RTC_set+0xe4>)
 8017ca4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8017ca6:	4b28      	ldr	r3, [pc, #160]	; (8017d48 <RTC_set+0xe0>)
 8017ca8:	2200      	movs	r2, #0
 8017caa:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8017cac:	4b26      	ldr	r3, [pc, #152]	; (8017d48 <RTC_set+0xe0>)
 8017cae:	227f      	movs	r2, #127	; 0x7f
 8017cb0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8017cb2:	4b25      	ldr	r3, [pc, #148]	; (8017d48 <RTC_set+0xe0>)
 8017cb4:	22ff      	movs	r2, #255	; 0xff
 8017cb6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017cb8:	4b23      	ldr	r3, [pc, #140]	; (8017d48 <RTC_set+0xe0>)
 8017cba:	2200      	movs	r2, #0
 8017cbc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8017cbe:	4b22      	ldr	r3, [pc, #136]	; (8017d48 <RTC_set+0xe0>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017cc4:	4b20      	ldr	r3, [pc, #128]	; (8017d48 <RTC_set+0xe0>)
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8017cca:	4b1f      	ldr	r3, [pc, #124]	; (8017d48 <RTC_set+0xe0>)
 8017ccc:	2200      	movs	r2, #0
 8017cce:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017cd0:	481d      	ldr	r0, [pc, #116]	; (8017d48 <RTC_set+0xe0>)
 8017cd2:	f7f5 fc17 	bl	800d504 <HAL_RTC_Init>
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d001      	beq.n	8017ce0 <RTC_set+0x78>
	{
	Error_Handler();
 8017cdc:	f7ee fd9a 	bl	8006814 <Error_Handler>
	}


	sTime.Hours = rtc_hour;
 8017ce0:	793b      	ldrb	r3, [r7, #4]
 8017ce2:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtc_min;
 8017ce4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017ce8:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtc_sec;
 8017cea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017cee:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8017cf8:	f107 030c 	add.w	r3, r7, #12
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	4619      	mov	r1, r3
 8017d00:	4811      	ldr	r0, [pc, #68]	; (8017d48 <RTC_set+0xe0>)
 8017d02:	f7f5 fcef 	bl	800d6e4 <HAL_RTC_SetTime>
 8017d06:	4603      	mov	r3, r0
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d001      	beq.n	8017d10 <RTC_set+0xa8>
	{
		Error_Handler();
 8017d0c:	f7ee fd82 	bl	8006814 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017d10:	2301      	movs	r3, #1
 8017d12:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtc_month;
 8017d14:	79bb      	ldrb	r3, [r7, #6]
 8017d16:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtc_day;
 8017d18:	797b      	ldrb	r3, [r7, #5]
 8017d1a:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtc_year;
 8017d1c:	79fb      	ldrb	r3, [r7, #7]
 8017d1e:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8017d20:	f107 0308 	add.w	r3, r7, #8
 8017d24:	2200      	movs	r2, #0
 8017d26:	4619      	mov	r1, r3
 8017d28:	4807      	ldr	r0, [pc, #28]	; (8017d48 <RTC_set+0xe0>)
 8017d2a:	f7f5 fdd4 	bl	800d8d6 <HAL_RTC_SetDate>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d001      	beq.n	8017d38 <RTC_set+0xd0>
	{
		Error_Handler();
 8017d34:	f7ee fd6e 	bl	8006814 <Error_Handler>
	}

	HAL_RTCEx_EnableBypassShadow(&hrtc);
 8017d38:	4803      	ldr	r0, [pc, #12]	; (8017d48 <RTC_set+0xe0>)
 8017d3a:	f7f5 ff71 	bl	800dc20 <HAL_RTCEx_EnableBypassShadow>
}
 8017d3e:	bf00      	nop
 8017d40:	3724      	adds	r7, #36	; 0x24
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd90      	pop	{r4, r7, pc}
 8017d46:	bf00      	nop
 8017d48:	20007838 	.word	0x20007838
 8017d4c:	40002800 	.word	0x40002800

08017d50 <RTC_screen_func>:


void RTC_screen_func(void)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b082      	sub	sp, #8
 8017d54:	af02      	add	r7, sp, #8
	if(old_active_string==0xFF)
 8017d56:	4b4d      	ldr	r3, [pc, #308]	; (8017e8c <RTC_screen_func+0x13c>)
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	2bff      	cmp	r3, #255	; 0xff
 8017d5c:	d11a      	bne.n	8017d94 <RTC_screen_func+0x44>
	{
		old_active_string=0;
 8017d5e:	4b4b      	ldr	r3, [pc, #300]	; (8017e8c <RTC_screen_func+0x13c>)
 8017d60:	2200      	movs	r2, #0
 8017d62:	701a      	strb	r2, [r3, #0]
		year_temp=year;
 8017d64:	4b4a      	ldr	r3, [pc, #296]	; (8017e90 <RTC_screen_func+0x140>)
 8017d66:	781a      	ldrb	r2, [r3, #0]
 8017d68:	4b4a      	ldr	r3, [pc, #296]	; (8017e94 <RTC_screen_func+0x144>)
 8017d6a:	701a      	strb	r2, [r3, #0]
		month_temp=month;
 8017d6c:	4b4a      	ldr	r3, [pc, #296]	; (8017e98 <RTC_screen_func+0x148>)
 8017d6e:	781a      	ldrb	r2, [r3, #0]
 8017d70:	4b4a      	ldr	r3, [pc, #296]	; (8017e9c <RTC_screen_func+0x14c>)
 8017d72:	701a      	strb	r2, [r3, #0]
		day_temp=day;
 8017d74:	4b4a      	ldr	r3, [pc, #296]	; (8017ea0 <RTC_screen_func+0x150>)
 8017d76:	781a      	ldrb	r2, [r3, #0]
 8017d78:	4b4a      	ldr	r3, [pc, #296]	; (8017ea4 <RTC_screen_func+0x154>)
 8017d7a:	701a      	strb	r2, [r3, #0]
		hour_temp=hour;
 8017d7c:	4b4a      	ldr	r3, [pc, #296]	; (8017ea8 <RTC_screen_func+0x158>)
 8017d7e:	781a      	ldrb	r2, [r3, #0]
 8017d80:	4b4a      	ldr	r3, [pc, #296]	; (8017eac <RTC_screen_func+0x15c>)
 8017d82:	701a      	strb	r2, [r3, #0]
		minute_temp=minute;
 8017d84:	4b4a      	ldr	r3, [pc, #296]	; (8017eb0 <RTC_screen_func+0x160>)
 8017d86:	781a      	ldrb	r2, [r3, #0]
 8017d88:	4b4a      	ldr	r3, [pc, #296]	; (8017eb4 <RTC_screen_func+0x164>)
 8017d8a:	701a      	strb	r2, [r3, #0]
		sec_temp=sec;
 8017d8c:	4b4a      	ldr	r3, [pc, #296]	; (8017eb8 <RTC_screen_func+0x168>)
 8017d8e:	781a      	ldrb	r2, [r3, #0]
 8017d90:	4b4a      	ldr	r3, [pc, #296]	; (8017ebc <RTC_screen_func+0x16c>)
 8017d92:	701a      	strb	r2, [r3, #0]
	}

	// date time
	RTC_view();
 8017d94:	f7ff fe48 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8017d98:	4949      	ldr	r1, [pc, #292]	; (8017ec0 <RTC_screen_func+0x170>)
 8017d9a:	484a      	ldr	r0, [pc, #296]	; (8017ec4 <RTC_screen_func+0x174>)
 8017d9c:	f7fd fe36 	bl	8015a0c <u8g2_SetFont>

	// Date
	u8g2_DrawUTF8(&u8g2, 20, 50, "Дата:");
 8017da0:	4b49      	ldr	r3, [pc, #292]	; (8017ec8 <RTC_screen_func+0x178>)
 8017da2:	2232      	movs	r2, #50	; 0x32
 8017da4:	2114      	movs	r1, #20
 8017da6:	4847      	ldr	r0, [pc, #284]	; (8017ec4 <RTC_screen_func+0x174>)
 8017da8:	f7fd fd8e 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d.", day_temp);
 8017dac:	4b3d      	ldr	r3, [pc, #244]	; (8017ea4 <RTC_screen_func+0x154>)
 8017dae:	781b      	ldrb	r3, [r3, #0]
 8017db0:	461a      	mov	r2, r3
 8017db2:	4946      	ldr	r1, [pc, #280]	; (8017ecc <RTC_screen_func+0x17c>)
 8017db4:	4846      	ldr	r0, [pc, #280]	; (8017ed0 <RTC_screen_func+0x180>)
 8017db6:	f005 ff87 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(120, 50, RAM, edit_param, 0);
 8017dba:	4b46      	ldr	r3, [pc, #280]	; (8017ed4 <RTC_screen_func+0x184>)
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	9200      	str	r2, [sp, #0]
 8017dc2:	4a43      	ldr	r2, [pc, #268]	; (8017ed0 <RTC_screen_func+0x180>)
 8017dc4:	2132      	movs	r1, #50	; 0x32
 8017dc6:	2078      	movs	r0, #120	; 0x78
 8017dc8:	f7eb f882 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d.", month_temp);
 8017dcc:	4b33      	ldr	r3, [pc, #204]	; (8017e9c <RTC_screen_func+0x14c>)
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	493e      	ldr	r1, [pc, #248]	; (8017ecc <RTC_screen_func+0x17c>)
 8017dd4:	483e      	ldr	r0, [pc, #248]	; (8017ed0 <RTC_screen_func+0x180>)
 8017dd6:	f005 ff77 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(150, 50, RAM, edit_param, 1);
 8017dda:	4b3e      	ldr	r3, [pc, #248]	; (8017ed4 <RTC_screen_func+0x184>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	2201      	movs	r2, #1
 8017de0:	9200      	str	r2, [sp, #0]
 8017de2:	4a3b      	ldr	r2, [pc, #236]	; (8017ed0 <RTC_screen_func+0x180>)
 8017de4:	2132      	movs	r1, #50	; 0x32
 8017de6:	2096      	movs	r0, #150	; 0x96
 8017de8:	f7eb f872 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", year_temp);
 8017dec:	4b29      	ldr	r3, [pc, #164]	; (8017e94 <RTC_screen_func+0x144>)
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	461a      	mov	r2, r3
 8017df2:	4939      	ldr	r1, [pc, #228]	; (8017ed8 <RTC_screen_func+0x188>)
 8017df4:	4836      	ldr	r0, [pc, #216]	; (8017ed0 <RTC_screen_func+0x180>)
 8017df6:	f005 ff67 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(180, 50, RAM, edit_param, 2);
 8017dfa:	4b36      	ldr	r3, [pc, #216]	; (8017ed4 <RTC_screen_func+0x184>)
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	2202      	movs	r2, #2
 8017e00:	9200      	str	r2, [sp, #0]
 8017e02:	4a33      	ldr	r2, [pc, #204]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e04:	2132      	movs	r1, #50	; 0x32
 8017e06:	20b4      	movs	r0, #180	; 0xb4
 8017e08:	f7eb f862 	bl	8002ed0 <Blink_Edit_Parameter>


	// Date
	u8g2_DrawUTF8(&u8g2, 20, 70, "Время:");
 8017e0c:	4b33      	ldr	r3, [pc, #204]	; (8017edc <RTC_screen_func+0x18c>)
 8017e0e:	2246      	movs	r2, #70	; 0x46
 8017e10:	2114      	movs	r1, #20
 8017e12:	482c      	ldr	r0, [pc, #176]	; (8017ec4 <RTC_screen_func+0x174>)
 8017e14:	f7fd fd58 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf(RAM,"%02d:", hour_temp);
 8017e18:	4b24      	ldr	r3, [pc, #144]	; (8017eac <RTC_screen_func+0x15c>)
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	461a      	mov	r2, r3
 8017e1e:	4930      	ldr	r1, [pc, #192]	; (8017ee0 <RTC_screen_func+0x190>)
 8017e20:	482b      	ldr	r0, [pc, #172]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e22:	f005 ff51 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(120, 70, RAM, edit_param, 3);
 8017e26:	4b2b      	ldr	r3, [pc, #172]	; (8017ed4 <RTC_screen_func+0x184>)
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	2203      	movs	r2, #3
 8017e2c:	9200      	str	r2, [sp, #0]
 8017e2e:	4a28      	ldr	r2, [pc, #160]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e30:	2146      	movs	r1, #70	; 0x46
 8017e32:	2078      	movs	r0, #120	; 0x78
 8017e34:	f7eb f84c 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d:", minute_temp);
 8017e38:	4b1e      	ldr	r3, [pc, #120]	; (8017eb4 <RTC_screen_func+0x164>)
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	4928      	ldr	r1, [pc, #160]	; (8017ee0 <RTC_screen_func+0x190>)
 8017e40:	4823      	ldr	r0, [pc, #140]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e42:	f005 ff41 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(150, 70, RAM, edit_param, 4);
 8017e46:	4b23      	ldr	r3, [pc, #140]	; (8017ed4 <RTC_screen_func+0x184>)
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	2204      	movs	r2, #4
 8017e4c:	9200      	str	r2, [sp, #0]
 8017e4e:	4a20      	ldr	r2, [pc, #128]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e50:	2146      	movs	r1, #70	; 0x46
 8017e52:	2096      	movs	r0, #150	; 0x96
 8017e54:	f7eb f83c 	bl	8002ed0 <Blink_Edit_Parameter>
	sprintf(RAM,"%02d", sec_temp);
 8017e58:	4b18      	ldr	r3, [pc, #96]	; (8017ebc <RTC_screen_func+0x16c>)
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	491e      	ldr	r1, [pc, #120]	; (8017ed8 <RTC_screen_func+0x188>)
 8017e60:	481b      	ldr	r0, [pc, #108]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e62:	f005 ff31 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(180, 70, RAM, edit_param, 5);
 8017e66:	4b1b      	ldr	r3, [pc, #108]	; (8017ed4 <RTC_screen_func+0x184>)
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	2205      	movs	r2, #5
 8017e6c:	9200      	str	r2, [sp, #0]
 8017e6e:	4a18      	ldr	r2, [pc, #96]	; (8017ed0 <RTC_screen_func+0x180>)
 8017e70:	2146      	movs	r1, #70	; 0x46
 8017e72:	20b4      	movs	r0, #180	; 0xb4
 8017e74:	f7eb f82c 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 8017e78:	4812      	ldr	r0, [pc, #72]	; (8017ec4 <RTC_screen_func+0x174>)
 8017e7a:	f7fc ff8a 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8017e7e:	4811      	ldr	r0, [pc, #68]	; (8017ec4 <RTC_screen_func+0x174>)
 8017e80:	f7fc ff14 	bl	8014cac <u8g2_ClearBuffer>
}
 8017e84:	bf00      	nop
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}
 8017e8a:	bf00      	nop
 8017e8c:	20000398 	.word	0x20000398
 8017e90:	2000873c 	.word	0x2000873c
 8017e94:	2000873d 	.word	0x2000873d
 8017e98:	2000873b 	.word	0x2000873b
 8017e9c:	20008739 	.word	0x20008739
 8017ea0:	20008734 	.word	0x20008734
 8017ea4:	20008736 	.word	0x20008736
 8017ea8:	20008737 	.word	0x20008737
 8017eac:	2000873f 	.word	0x2000873f
 8017eb0:	2000873e 	.word	0x2000873e
 8017eb4:	20008735 	.word	0x20008735
 8017eb8:	20008738 	.word	0x20008738
 8017ebc:	2000873a 	.word	0x2000873a
 8017ec0:	0802716c 	.word	0x0802716c
 8017ec4:	20001fbc 	.word	0x20001fbc
 8017ec8:	0802226c 	.word	0x0802226c
 8017ecc:	08022278 	.word	0x08022278
 8017ed0:	20002070 	.word	0x20002070
 8017ed4:	20000852 	.word	0x20000852
 8017ed8:	08022280 	.word	0x08022280
 8017edc:	08022288 	.word	0x08022288
 8017ee0:	08022294 	.word	0x08022294

08017ee4 <RTC_screen_S9>:



// MENU
void RTC_screen_S9(void)
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	af00      	add	r7, sp, #0
	screen=Parameter_screen;
 8017ee8:	4b06      	ldr	r3, [pc, #24]	; (8017f04 <RTC_screen_S9+0x20>)
 8017eea:	2208      	movs	r2, #8
 8017eec:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8017eee:	4b06      	ldr	r3, [pc, #24]	; (8017f08 <RTC_screen_S9+0x24>)
 8017ef0:	22ff      	movs	r2, #255	; 0xff
 8017ef2:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 8017ef4:	4b05      	ldr	r3, [pc, #20]	; (8017f0c <RTC_screen_S9+0x28>)
 8017ef6:	2202      	movs	r2, #2
 8017ef8:	701a      	strb	r2, [r3, #0]
}
 8017efa:	bf00      	nop
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr
 8017f04:	2000004c 	.word	0x2000004c
 8017f08:	20000398 	.word	0x20000398
 8017f0c:	20000399 	.word	0x20000399

08017f10 <RTC_screen_S5>:

// DOWN
void RTC_screen_S5(void)
{
 8017f10:	b480      	push	{r7}
 8017f12:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8017f14:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <RTC_screen_S5+0x24>)
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	2b04      	cmp	r3, #4
 8017f1a:	d805      	bhi.n	8017f28 <RTC_screen_S5+0x18>
 8017f1c:	4b05      	ldr	r3, [pc, #20]	; (8017f34 <RTC_screen_S5+0x24>)
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	3301      	adds	r3, #1
 8017f22:	b2da      	uxtb	r2, r3
 8017f24:	4b03      	ldr	r3, [pc, #12]	; (8017f34 <RTC_screen_S5+0x24>)
 8017f26:	701a      	strb	r2, [r3, #0]
}
 8017f28:	bf00      	nop
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f30:	4770      	bx	lr
 8017f32:	bf00      	nop
 8017f34:	20000852 	.word	0x20000852

08017f38 <RTC_screen_S8>:

// UP
void RTC_screen_S8(void)
{
 8017f38:	b480      	push	{r7}
 8017f3a:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 8017f3c:	4b07      	ldr	r3, [pc, #28]	; (8017f5c <RTC_screen_S8+0x24>)
 8017f3e:	781b      	ldrb	r3, [r3, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d005      	beq.n	8017f50 <RTC_screen_S8+0x18>
 8017f44:	4b05      	ldr	r3, [pc, #20]	; (8017f5c <RTC_screen_S8+0x24>)
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	3b01      	subs	r3, #1
 8017f4a:	b2da      	uxtb	r2, r3
 8017f4c:	4b03      	ldr	r3, [pc, #12]	; (8017f5c <RTC_screen_S8+0x24>)
 8017f4e:	701a      	strb	r2, [r3, #0]
}
 8017f50:	bf00      	nop
 8017f52:	46bd      	mov	sp, r7
 8017f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f58:	4770      	bx	lr
 8017f5a:	bf00      	nop
 8017f5c:	20000852 	.word	0x20000852

08017f60 <RTC_screen_S6>:



// BACKWARD
void RTC_screen_S6(void)
{
 8017f60:	b480      	push	{r7}
 8017f62:	af00      	add	r7, sp, #0
	switch(edit_param)
 8017f64:	4b32      	ldr	r3, [pc, #200]	; (8018030 <RTC_screen_S6+0xd0>)
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	2b05      	cmp	r3, #5
 8017f6a:	d85c      	bhi.n	8018026 <RTC_screen_S6+0xc6>
 8017f6c:	a201      	add	r2, pc, #4	; (adr r2, 8017f74 <RTC_screen_S6+0x14>)
 8017f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f72:	bf00      	nop
 8017f74:	08017f8d 	.word	0x08017f8d
 8017f78:	08017fa3 	.word	0x08017fa3
 8017f7c:	08017fb9 	.word	0x08017fb9
 8017f80:	08017fcf 	.word	0x08017fcf
 8017f84:	08017fe5 	.word	0x08017fe5
 8017f88:	08017ffb 	.word	0x08017ffb
	{
		case 0: if(day_temp>0)day_temp--; break;
 8017f8c:	4b29      	ldr	r3, [pc, #164]	; (8018034 <RTC_screen_S6+0xd4>)
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d03d      	beq.n	8018010 <RTC_screen_S6+0xb0>
 8017f94:	4b27      	ldr	r3, [pc, #156]	; (8018034 <RTC_screen_S6+0xd4>)
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	3b01      	subs	r3, #1
 8017f9a:	b2da      	uxtb	r2, r3
 8017f9c:	4b25      	ldr	r3, [pc, #148]	; (8018034 <RTC_screen_S6+0xd4>)
 8017f9e:	701a      	strb	r2, [r3, #0]
 8017fa0:	e036      	b.n	8018010 <RTC_screen_S6+0xb0>
		case 1: if(month_temp>0)month_temp--; break;
 8017fa2:	4b25      	ldr	r3, [pc, #148]	; (8018038 <RTC_screen_S6+0xd8>)
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d034      	beq.n	8018014 <RTC_screen_S6+0xb4>
 8017faa:	4b23      	ldr	r3, [pc, #140]	; (8018038 <RTC_screen_S6+0xd8>)
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	b2da      	uxtb	r2, r3
 8017fb2:	4b21      	ldr	r3, [pc, #132]	; (8018038 <RTC_screen_S6+0xd8>)
 8017fb4:	701a      	strb	r2, [r3, #0]
 8017fb6:	e02d      	b.n	8018014 <RTC_screen_S6+0xb4>
		case 2: if(year_temp>0)year_temp--; break;
 8017fb8:	4b20      	ldr	r3, [pc, #128]	; (801803c <RTC_screen_S6+0xdc>)
 8017fba:	781b      	ldrb	r3, [r3, #0]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d02b      	beq.n	8018018 <RTC_screen_S6+0xb8>
 8017fc0:	4b1e      	ldr	r3, [pc, #120]	; (801803c <RTC_screen_S6+0xdc>)
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	3b01      	subs	r3, #1
 8017fc6:	b2da      	uxtb	r2, r3
 8017fc8:	4b1c      	ldr	r3, [pc, #112]	; (801803c <RTC_screen_S6+0xdc>)
 8017fca:	701a      	strb	r2, [r3, #0]
 8017fcc:	e024      	b.n	8018018 <RTC_screen_S6+0xb8>
		case 3: if(hour_temp>0)hour_temp--; break;
 8017fce:	4b1c      	ldr	r3, [pc, #112]	; (8018040 <RTC_screen_S6+0xe0>)
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d022      	beq.n	801801c <RTC_screen_S6+0xbc>
 8017fd6:	4b1a      	ldr	r3, [pc, #104]	; (8018040 <RTC_screen_S6+0xe0>)
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	3b01      	subs	r3, #1
 8017fdc:	b2da      	uxtb	r2, r3
 8017fde:	4b18      	ldr	r3, [pc, #96]	; (8018040 <RTC_screen_S6+0xe0>)
 8017fe0:	701a      	strb	r2, [r3, #0]
 8017fe2:	e01b      	b.n	801801c <RTC_screen_S6+0xbc>
		case 4: if(minute_temp>0)minute_temp--; break;
 8017fe4:	4b17      	ldr	r3, [pc, #92]	; (8018044 <RTC_screen_S6+0xe4>)
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d019      	beq.n	8018020 <RTC_screen_S6+0xc0>
 8017fec:	4b15      	ldr	r3, [pc, #84]	; (8018044 <RTC_screen_S6+0xe4>)
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	3b01      	subs	r3, #1
 8017ff2:	b2da      	uxtb	r2, r3
 8017ff4:	4b13      	ldr	r3, [pc, #76]	; (8018044 <RTC_screen_S6+0xe4>)
 8017ff6:	701a      	strb	r2, [r3, #0]
 8017ff8:	e012      	b.n	8018020 <RTC_screen_S6+0xc0>
		case 5: if(sec_temp>0)sec_temp--; break;
 8017ffa:	4b13      	ldr	r3, [pc, #76]	; (8018048 <RTC_screen_S6+0xe8>)
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d010      	beq.n	8018024 <RTC_screen_S6+0xc4>
 8018002:	4b11      	ldr	r3, [pc, #68]	; (8018048 <RTC_screen_S6+0xe8>)
 8018004:	781b      	ldrb	r3, [r3, #0]
 8018006:	3b01      	subs	r3, #1
 8018008:	b2da      	uxtb	r2, r3
 801800a:	4b0f      	ldr	r3, [pc, #60]	; (8018048 <RTC_screen_S6+0xe8>)
 801800c:	701a      	strb	r2, [r3, #0]
 801800e:	e009      	b.n	8018024 <RTC_screen_S6+0xc4>
		case 0: if(day_temp>0)day_temp--; break;
 8018010:	bf00      	nop
 8018012:	e008      	b.n	8018026 <RTC_screen_S6+0xc6>
		case 1: if(month_temp>0)month_temp--; break;
 8018014:	bf00      	nop
 8018016:	e006      	b.n	8018026 <RTC_screen_S6+0xc6>
		case 2: if(year_temp>0)year_temp--; break;
 8018018:	bf00      	nop
 801801a:	e004      	b.n	8018026 <RTC_screen_S6+0xc6>
		case 3: if(hour_temp>0)hour_temp--; break;
 801801c:	bf00      	nop
 801801e:	e002      	b.n	8018026 <RTC_screen_S6+0xc6>
		case 4: if(minute_temp>0)minute_temp--; break;
 8018020:	bf00      	nop
 8018022:	e000      	b.n	8018026 <RTC_screen_S6+0xc6>
		case 5: if(sec_temp>0)sec_temp--; break;
 8018024:	bf00      	nop
	}
}
 8018026:	bf00      	nop
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr
 8018030:	20000852 	.word	0x20000852
 8018034:	20008736 	.word	0x20008736
 8018038:	20008739 	.word	0x20008739
 801803c:	2000873d 	.word	0x2000873d
 8018040:	2000873f 	.word	0x2000873f
 8018044:	20008735 	.word	0x20008735
 8018048:	2000873a 	.word	0x2000873a

0801804c <RTC_screen_S7>:

// FORWARD
void RTC_screen_S7(void)
{
 801804c:	b480      	push	{r7}
 801804e:	af00      	add	r7, sp, #0
	switch(edit_param)
 8018050:	4b32      	ldr	r3, [pc, #200]	; (801811c <RTC_screen_S7+0xd0>)
 8018052:	781b      	ldrb	r3, [r3, #0]
 8018054:	2b05      	cmp	r3, #5
 8018056:	d85c      	bhi.n	8018112 <RTC_screen_S7+0xc6>
 8018058:	a201      	add	r2, pc, #4	; (adr r2, 8018060 <RTC_screen_S7+0x14>)
 801805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801805e:	bf00      	nop
 8018060:	08018079 	.word	0x08018079
 8018064:	0801808f 	.word	0x0801808f
 8018068:	080180a5 	.word	0x080180a5
 801806c:	080180bb 	.word	0x080180bb
 8018070:	080180d1 	.word	0x080180d1
 8018074:	080180e7 	.word	0x080180e7
	{
		case 0: if(day_temp<31)day_temp++; break;
 8018078:	4b29      	ldr	r3, [pc, #164]	; (8018120 <RTC_screen_S7+0xd4>)
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	2b1e      	cmp	r3, #30
 801807e:	d83d      	bhi.n	80180fc <RTC_screen_S7+0xb0>
 8018080:	4b27      	ldr	r3, [pc, #156]	; (8018120 <RTC_screen_S7+0xd4>)
 8018082:	781b      	ldrb	r3, [r3, #0]
 8018084:	3301      	adds	r3, #1
 8018086:	b2da      	uxtb	r2, r3
 8018088:	4b25      	ldr	r3, [pc, #148]	; (8018120 <RTC_screen_S7+0xd4>)
 801808a:	701a      	strb	r2, [r3, #0]
 801808c:	e036      	b.n	80180fc <RTC_screen_S7+0xb0>
		case 1: if(month_temp<12)month_temp++; break;
 801808e:	4b25      	ldr	r3, [pc, #148]	; (8018124 <RTC_screen_S7+0xd8>)
 8018090:	781b      	ldrb	r3, [r3, #0]
 8018092:	2b0b      	cmp	r3, #11
 8018094:	d834      	bhi.n	8018100 <RTC_screen_S7+0xb4>
 8018096:	4b23      	ldr	r3, [pc, #140]	; (8018124 <RTC_screen_S7+0xd8>)
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	3301      	adds	r3, #1
 801809c:	b2da      	uxtb	r2, r3
 801809e:	4b21      	ldr	r3, [pc, #132]	; (8018124 <RTC_screen_S7+0xd8>)
 80180a0:	701a      	strb	r2, [r3, #0]
 80180a2:	e02d      	b.n	8018100 <RTC_screen_S7+0xb4>
		case 2: if(year_temp<60)year_temp++; break;
 80180a4:	4b20      	ldr	r3, [pc, #128]	; (8018128 <RTC_screen_S7+0xdc>)
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	2b3b      	cmp	r3, #59	; 0x3b
 80180aa:	d82b      	bhi.n	8018104 <RTC_screen_S7+0xb8>
 80180ac:	4b1e      	ldr	r3, [pc, #120]	; (8018128 <RTC_screen_S7+0xdc>)
 80180ae:	781b      	ldrb	r3, [r3, #0]
 80180b0:	3301      	adds	r3, #1
 80180b2:	b2da      	uxtb	r2, r3
 80180b4:	4b1c      	ldr	r3, [pc, #112]	; (8018128 <RTC_screen_S7+0xdc>)
 80180b6:	701a      	strb	r2, [r3, #0]
 80180b8:	e024      	b.n	8018104 <RTC_screen_S7+0xb8>
		case 3: if(hour_temp<24)hour_temp++; break;
 80180ba:	4b1c      	ldr	r3, [pc, #112]	; (801812c <RTC_screen_S7+0xe0>)
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	2b17      	cmp	r3, #23
 80180c0:	d822      	bhi.n	8018108 <RTC_screen_S7+0xbc>
 80180c2:	4b1a      	ldr	r3, [pc, #104]	; (801812c <RTC_screen_S7+0xe0>)
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	3301      	adds	r3, #1
 80180c8:	b2da      	uxtb	r2, r3
 80180ca:	4b18      	ldr	r3, [pc, #96]	; (801812c <RTC_screen_S7+0xe0>)
 80180cc:	701a      	strb	r2, [r3, #0]
 80180ce:	e01b      	b.n	8018108 <RTC_screen_S7+0xbc>
		case 4: if(minute_temp<60)minute_temp++; break;
 80180d0:	4b17      	ldr	r3, [pc, #92]	; (8018130 <RTC_screen_S7+0xe4>)
 80180d2:	781b      	ldrb	r3, [r3, #0]
 80180d4:	2b3b      	cmp	r3, #59	; 0x3b
 80180d6:	d819      	bhi.n	801810c <RTC_screen_S7+0xc0>
 80180d8:	4b15      	ldr	r3, [pc, #84]	; (8018130 <RTC_screen_S7+0xe4>)
 80180da:	781b      	ldrb	r3, [r3, #0]
 80180dc:	3301      	adds	r3, #1
 80180de:	b2da      	uxtb	r2, r3
 80180e0:	4b13      	ldr	r3, [pc, #76]	; (8018130 <RTC_screen_S7+0xe4>)
 80180e2:	701a      	strb	r2, [r3, #0]
 80180e4:	e012      	b.n	801810c <RTC_screen_S7+0xc0>
		case 5: if(sec_temp<60)sec_temp++; break;
 80180e6:	4b13      	ldr	r3, [pc, #76]	; (8018134 <RTC_screen_S7+0xe8>)
 80180e8:	781b      	ldrb	r3, [r3, #0]
 80180ea:	2b3b      	cmp	r3, #59	; 0x3b
 80180ec:	d810      	bhi.n	8018110 <RTC_screen_S7+0xc4>
 80180ee:	4b11      	ldr	r3, [pc, #68]	; (8018134 <RTC_screen_S7+0xe8>)
 80180f0:	781b      	ldrb	r3, [r3, #0]
 80180f2:	3301      	adds	r3, #1
 80180f4:	b2da      	uxtb	r2, r3
 80180f6:	4b0f      	ldr	r3, [pc, #60]	; (8018134 <RTC_screen_S7+0xe8>)
 80180f8:	701a      	strb	r2, [r3, #0]
 80180fa:	e009      	b.n	8018110 <RTC_screen_S7+0xc4>
		case 0: if(day_temp<31)day_temp++; break;
 80180fc:	bf00      	nop
 80180fe:	e008      	b.n	8018112 <RTC_screen_S7+0xc6>
		case 1: if(month_temp<12)month_temp++; break;
 8018100:	bf00      	nop
 8018102:	e006      	b.n	8018112 <RTC_screen_S7+0xc6>
		case 2: if(year_temp<60)year_temp++; break;
 8018104:	bf00      	nop
 8018106:	e004      	b.n	8018112 <RTC_screen_S7+0xc6>
		case 3: if(hour_temp<24)hour_temp++; break;
 8018108:	bf00      	nop
 801810a:	e002      	b.n	8018112 <RTC_screen_S7+0xc6>
		case 4: if(minute_temp<60)minute_temp++; break;
 801810c:	bf00      	nop
 801810e:	e000      	b.n	8018112 <RTC_screen_S7+0xc6>
		case 5: if(sec_temp<60)sec_temp++; break;
 8018110:	bf00      	nop
	}
}
 8018112:	bf00      	nop
 8018114:	46bd      	mov	sp, r7
 8018116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811a:	4770      	bx	lr
 801811c:	20000852 	.word	0x20000852
 8018120:	20008736 	.word	0x20008736
 8018124:	20008739 	.word	0x20008739
 8018128:	2000873d 	.word	0x2000873d
 801812c:	2000873f 	.word	0x2000873f
 8018130:	20008735 	.word	0x20008735
 8018134:	2000873a 	.word	0x2000873a

08018138 <RTC_screen_S4>:

// ENTER
void RTC_screen_S4(void)
{
 8018138:	b5b0      	push	{r4, r5, r7, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	af02      	add	r7, sp, #8
	RTC_set(year_temp, month_temp, day_temp, hour_temp, minute_temp, sec_temp);
 801813e:	4b0a      	ldr	r3, [pc, #40]	; (8018168 <RTC_screen_S4+0x30>)
 8018140:	7818      	ldrb	r0, [r3, #0]
 8018142:	4b0a      	ldr	r3, [pc, #40]	; (801816c <RTC_screen_S4+0x34>)
 8018144:	7819      	ldrb	r1, [r3, #0]
 8018146:	4b0a      	ldr	r3, [pc, #40]	; (8018170 <RTC_screen_S4+0x38>)
 8018148:	781c      	ldrb	r4, [r3, #0]
 801814a:	4b0a      	ldr	r3, [pc, #40]	; (8018174 <RTC_screen_S4+0x3c>)
 801814c:	781d      	ldrb	r5, [r3, #0]
 801814e:	4b0a      	ldr	r3, [pc, #40]	; (8018178 <RTC_screen_S4+0x40>)
 8018150:	781b      	ldrb	r3, [r3, #0]
 8018152:	4a0a      	ldr	r2, [pc, #40]	; (801817c <RTC_screen_S4+0x44>)
 8018154:	7812      	ldrb	r2, [r2, #0]
 8018156:	9201      	str	r2, [sp, #4]
 8018158:	9300      	str	r3, [sp, #0]
 801815a:	462b      	mov	r3, r5
 801815c:	4622      	mov	r2, r4
 801815e:	f7ff fd83 	bl	8017c68 <RTC_set>
}
 8018162:	bf00      	nop
 8018164:	46bd      	mov	sp, r7
 8018166:	bdb0      	pop	{r4, r5, r7, pc}
 8018168:	2000873d 	.word	0x2000873d
 801816c:	20008739 	.word	0x20008739
 8018170:	20008736 	.word	0x20008736
 8018174:	2000873f 	.word	0x2000873f
 8018178:	20008735 	.word	0x20008735
 801817c:	2000873a 	.word	0x2000873a

08018180 <About_options_screen_func>:
};



void About_options_screen_func(void)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	af00      	add	r7, sp, #0
	RTC_view();
 8018184:	f7ff fc50 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8018188:	492a      	ldr	r1, [pc, #168]	; (8018234 <About_options_screen_func+0xb4>)
 801818a:	482b      	ldr	r0, [pc, #172]	; (8018238 <About_options_screen_func+0xb8>)
 801818c:	f7fd fc3e 	bl	8015a0c <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 10, 35, "Серийный номер:");
 8018190:	4b2a      	ldr	r3, [pc, #168]	; (801823c <About_options_screen_func+0xbc>)
 8018192:	2223      	movs	r2, #35	; 0x23
 8018194:	210a      	movs	r1, #10
 8018196:	4828      	ldr	r0, [pc, #160]	; (8018238 <About_options_screen_func+0xb8>)
 8018198:	f7fd fb96 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%05d", serial_num);
 801819c:	4b28      	ldr	r3, [pc, #160]	; (8018240 <About_options_screen_func+0xc0>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	461a      	mov	r2, r3
 80181a2:	4928      	ldr	r1, [pc, #160]	; (8018244 <About_options_screen_func+0xc4>)
 80181a4:	4828      	ldr	r0, [pc, #160]	; (8018248 <About_options_screen_func+0xc8>)
 80181a6:	f005 fd8f 	bl	801dcc8 <siprintf>
	u8g2_DrawUTF8(&u8g2, 170, 35, (char*)RAM);
 80181aa:	4b27      	ldr	r3, [pc, #156]	; (8018248 <About_options_screen_func+0xc8>)
 80181ac:	2223      	movs	r2, #35	; 0x23
 80181ae:	21aa      	movs	r1, #170	; 0xaa
 80181b0:	4821      	ldr	r0, [pc, #132]	; (8018238 <About_options_screen_func+0xb8>)
 80181b2:	f7fd fb89 	bl	80158c8 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 50, "Диапазон:");
 80181b6:	4b25      	ldr	r3, [pc, #148]	; (801824c <About_options_screen_func+0xcc>)
 80181b8:	2232      	movs	r2, #50	; 0x32
 80181ba:	210a      	movs	r1, #10
 80181bc:	481e      	ldr	r0, [pc, #120]	; (8018238 <About_options_screen_func+0xb8>)
 80181be:	f7fd fb83 	bl	80158c8 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 110, 50, GAUGE_RANGE_TEXT[gauge_range]);
 80181c2:	4b23      	ldr	r3, [pc, #140]	; (8018250 <About_options_screen_func+0xd0>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	4a23      	ldr	r2, [pc, #140]	; (8018254 <About_options_screen_func+0xd4>)
 80181c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181cc:	2232      	movs	r2, #50	; 0x32
 80181ce:	216e      	movs	r1, #110	; 0x6e
 80181d0:	4819      	ldr	r0, [pc, #100]	; (8018238 <About_options_screen_func+0xb8>)
 80181d2:	f7fd fb79 	bl	80158c8 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 65, "Погрешность:");
 80181d6:	4b20      	ldr	r3, [pc, #128]	; (8018258 <About_options_screen_func+0xd8>)
 80181d8:	2241      	movs	r2, #65	; 0x41
 80181da:	210a      	movs	r1, #10
 80181dc:	4816      	ldr	r0, [pc, #88]	; (8018238 <About_options_screen_func+0xb8>)
 80181de:	f7fd fb73 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%.4f", gauge_error);
 80181e2:	4b1e      	ldr	r3, [pc, #120]	; (801825c <About_options_screen_func+0xdc>)
 80181e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e8:	491d      	ldr	r1, [pc, #116]	; (8018260 <About_options_screen_func+0xe0>)
 80181ea:	4817      	ldr	r0, [pc, #92]	; (8018248 <About_options_screen_func+0xc8>)
 80181ec:	f005 fd6c 	bl	801dcc8 <siprintf>
	u8g2_DrawUTF8(&u8g2, 140, 65, (char*)RAM);
 80181f0:	4b15      	ldr	r3, [pc, #84]	; (8018248 <About_options_screen_func+0xc8>)
 80181f2:	2241      	movs	r2, #65	; 0x41
 80181f4:	218c      	movs	r1, #140	; 0x8c
 80181f6:	4810      	ldr	r0, [pc, #64]	; (8018238 <About_options_screen_func+0xb8>)
 80181f8:	f7fd fb66 	bl	80158c8 <u8g2_DrawUTF8>

	u8g2_DrawUTF8(&u8g2, 10, 145, "Код ошибки:");
 80181fc:	4b19      	ldr	r3, [pc, #100]	; (8018264 <About_options_screen_func+0xe4>)
 80181fe:	2291      	movs	r2, #145	; 0x91
 8018200:	210a      	movs	r1, #10
 8018202:	480d      	ldr	r0, [pc, #52]	; (8018238 <About_options_screen_func+0xb8>)
 8018204:	f7fd fb60 	bl	80158c8 <u8g2_DrawUTF8>
	sprintf((char*)RAM, "%d", ERROR_REG);
 8018208:	4b17      	ldr	r3, [pc, #92]	; (8018268 <About_options_screen_func+0xe8>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	461a      	mov	r2, r3
 801820e:	4917      	ldr	r1, [pc, #92]	; (801826c <About_options_screen_func+0xec>)
 8018210:	480d      	ldr	r0, [pc, #52]	; (8018248 <About_options_screen_func+0xc8>)
 8018212:	f005 fd59 	bl	801dcc8 <siprintf>
	u8g2_DrawUTF8(&u8g2, 130, 145, (char*)RAM);
 8018216:	4b0c      	ldr	r3, [pc, #48]	; (8018248 <About_options_screen_func+0xc8>)
 8018218:	2291      	movs	r2, #145	; 0x91
 801821a:	2182      	movs	r1, #130	; 0x82
 801821c:	4806      	ldr	r0, [pc, #24]	; (8018238 <About_options_screen_func+0xb8>)
 801821e:	f7fd fb53 	bl	80158c8 <u8g2_DrawUTF8>



	u8g2_SendBuffer(&u8g2);
 8018222:	4805      	ldr	r0, [pc, #20]	; (8018238 <About_options_screen_func+0xb8>)
 8018224:	f7fc fdb5 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 8018228:	4803      	ldr	r0, [pc, #12]	; (8018238 <About_options_screen_func+0xb8>)
 801822a:	f7fc fd3f 	bl	8014cac <u8g2_ClearBuffer>
}
 801822e:	bf00      	nop
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	0802716c 	.word	0x0802716c
 8018238:	20001fbc 	.word	0x20001fbc
 801823c:	080222d0 	.word	0x080222d0
 8018240:	200000a0 	.word	0x200000a0
 8018244:	080222f0 	.word	0x080222f0
 8018248:	20002070 	.word	0x20002070
 801824c:	080222f8 	.word	0x080222f8
 8018250:	200008a4 	.word	0x200008a4
 8018254:	2000036c 	.word	0x2000036c
 8018258:	0802230c 	.word	0x0802230c
 801825c:	200000a8 	.word	0x200000a8
 8018260:	08022324 	.word	0x08022324
 8018264:	0802232c 	.word	0x0802232c
 8018268:	20000888 	.word	0x20000888
 801826c:	08022344 	.word	0x08022344

08018270 <About_options_screen_S9>:


// MENU
void About_options_screen_S9(void)
{
 8018270:	b480      	push	{r7}
 8018272:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8018274:	4b06      	ldr	r3, [pc, #24]	; (8018290 <About_options_screen_S9+0x20>)
 8018276:	2204      	movs	r2, #4
 8018278:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801827a:	4b06      	ldr	r3, [pc, #24]	; (8018294 <About_options_screen_S9+0x24>)
 801827c:	22ff      	movs	r2, #255	; 0xff
 801827e:	701a      	strb	r2, [r3, #0]
	Menu_num=3;
 8018280:	4b05      	ldr	r3, [pc, #20]	; (8018298 <About_options_screen_S9+0x28>)
 8018282:	2203      	movs	r2, #3
 8018284:	701a      	strb	r2, [r3, #0]
}
 8018286:	bf00      	nop
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr
 8018290:	2000004c 	.word	0x2000004c
 8018294:	20000398 	.word	0x20000398
 8018298:	20000399 	.word	0x20000399

0801829c <Logging_options_screen_func>:
#define max_edit_param 6



void Logging_options_screen_func(void)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	af02      	add	r7, sp, #8
	RTC_view();
 80182a2:	f7ff fbc1 	bl	8017a28 <RTC_view>
	u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80182a6:	4951      	ldr	r1, [pc, #324]	; (80183ec <Logging_options_screen_func+0x150>)
 80182a8:	4851      	ldr	r0, [pc, #324]	; (80183f0 <Logging_options_screen_func+0x154>)
 80182aa:	f7fd fbaf 	bl	8015a0c <u8g2_SetFont>

	u8g2_DrawUTF8(&u8g2, 5, 40, "Логгирование:");
 80182ae:	4b51      	ldr	r3, [pc, #324]	; (80183f4 <Logging_options_screen_func+0x158>)
 80182b0:	2228      	movs	r2, #40	; 0x28
 80182b2:	2105      	movs	r1, #5
 80182b4:	484e      	ldr	r0, [pc, #312]	; (80183f0 <Logging_options_screen_func+0x154>)
 80182b6:	f7fd fb07 	bl	80158c8 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 60, "Время старта:");
 80182ba:	4b4f      	ldr	r3, [pc, #316]	; (80183f8 <Logging_options_screen_func+0x15c>)
 80182bc:	223c      	movs	r2, #60	; 0x3c
 80182be:	2105      	movs	r1, #5
 80182c0:	484b      	ldr	r0, [pc, #300]	; (80183f0 <Logging_options_screen_func+0x154>)
 80182c2:	f7fd fb01 	bl	80158c8 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 80, "Период сохранения:");
 80182c6:	4b4d      	ldr	r3, [pc, #308]	; (80183fc <Logging_options_screen_func+0x160>)
 80182c8:	2250      	movs	r2, #80	; 0x50
 80182ca:	2105      	movs	r1, #5
 80182cc:	4848      	ldr	r0, [pc, #288]	; (80183f0 <Logging_options_screen_func+0x154>)
 80182ce:	f7fd fafb 	bl	80158c8 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 100, "Длительность:");
 80182d2:	4b4b      	ldr	r3, [pc, #300]	; (8018400 <Logging_options_screen_func+0x164>)
 80182d4:	2264      	movs	r2, #100	; 0x64
 80182d6:	2105      	movs	r1, #5
 80182d8:	4845      	ldr	r0, [pc, #276]	; (80183f0 <Logging_options_screen_func+0x154>)
 80182da:	f7fd faf5 	bl	80158c8 <u8g2_DrawUTF8>
	u8g2_DrawUTF8(&u8g2, 5, 120, "Всего файлов:");
 80182de:	4b49      	ldr	r3, [pc, #292]	; (8018404 <Logging_options_screen_func+0x168>)
 80182e0:	2278      	movs	r2, #120	; 0x78
 80182e2:	2105      	movs	r1, #5
 80182e4:	4842      	ldr	r0, [pc, #264]	; (80183f0 <Logging_options_screen_func+0x154>)
 80182e6:	f7fd faef 	bl	80158c8 <u8g2_DrawUTF8>


	// 0 parameter
	if(logging==0)Blink_Edit_Parameter(155, 40, "ДА", edit_param, 0);
 80182ea:	4b47      	ldr	r3, [pc, #284]	; (8018408 <Logging_options_screen_func+0x16c>)
 80182ec:	781b      	ldrb	r3, [r3, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d109      	bne.n	8018306 <Logging_options_screen_func+0x6a>
 80182f2:	4b46      	ldr	r3, [pc, #280]	; (801840c <Logging_options_screen_func+0x170>)
 80182f4:	781b      	ldrb	r3, [r3, #0]
 80182f6:	2200      	movs	r2, #0
 80182f8:	9200      	str	r2, [sp, #0]
 80182fa:	4a45      	ldr	r2, [pc, #276]	; (8018410 <Logging_options_screen_func+0x174>)
 80182fc:	2128      	movs	r1, #40	; 0x28
 80182fe:	209b      	movs	r0, #155	; 0x9b
 8018300:	f7ea fde6 	bl	8002ed0 <Blink_Edit_Parameter>
 8018304:	e008      	b.n	8018318 <Logging_options_screen_func+0x7c>
	else Blink_Edit_Parameter(155, 40, "НЕТ", edit_param, 0);
 8018306:	4b41      	ldr	r3, [pc, #260]	; (801840c <Logging_options_screen_func+0x170>)
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	2200      	movs	r2, #0
 801830c:	9200      	str	r2, [sp, #0]
 801830e:	4a41      	ldr	r2, [pc, #260]	; (8018414 <Logging_options_screen_func+0x178>)
 8018310:	2128      	movs	r1, #40	; 0x28
 8018312:	209b      	movs	r0, #155	; 0x9b
 8018314:	f7ea fddc 	bl	8002ed0 <Blink_Edit_Parameter>
	// 1 parameter
	sprintf(RAM,"%02d:", logging_start_hour);
 8018318:	4b3f      	ldr	r3, [pc, #252]	; (8018418 <Logging_options_screen_func+0x17c>)
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	461a      	mov	r2, r3
 801831e:	493f      	ldr	r1, [pc, #252]	; (801841c <Logging_options_screen_func+0x180>)
 8018320:	483f      	ldr	r0, [pc, #252]	; (8018420 <Logging_options_screen_func+0x184>)
 8018322:	f005 fcd1 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(155, 60, RAM, edit_param, 1);
 8018326:	4b39      	ldr	r3, [pc, #228]	; (801840c <Logging_options_screen_func+0x170>)
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	2201      	movs	r2, #1
 801832c:	9200      	str	r2, [sp, #0]
 801832e:	4a3c      	ldr	r2, [pc, #240]	; (8018420 <Logging_options_screen_func+0x184>)
 8018330:	213c      	movs	r1, #60	; 0x3c
 8018332:	209b      	movs	r0, #155	; 0x9b
 8018334:	f7ea fdcc 	bl	8002ed0 <Blink_Edit_Parameter>
	// 2 parameter
	sprintf(RAM,"%02d:", logging_start_min);
 8018338:	4b3a      	ldr	r3, [pc, #232]	; (8018424 <Logging_options_screen_func+0x188>)
 801833a:	781b      	ldrb	r3, [r3, #0]
 801833c:	461a      	mov	r2, r3
 801833e:	4937      	ldr	r1, [pc, #220]	; (801841c <Logging_options_screen_func+0x180>)
 8018340:	4837      	ldr	r0, [pc, #220]	; (8018420 <Logging_options_screen_func+0x184>)
 8018342:	f005 fcc1 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(185, 60, RAM, edit_param, 2);
 8018346:	4b31      	ldr	r3, [pc, #196]	; (801840c <Logging_options_screen_func+0x170>)
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	2202      	movs	r2, #2
 801834c:	9200      	str	r2, [sp, #0]
 801834e:	4a34      	ldr	r2, [pc, #208]	; (8018420 <Logging_options_screen_func+0x184>)
 8018350:	213c      	movs	r1, #60	; 0x3c
 8018352:	20b9      	movs	r0, #185	; 0xb9
 8018354:	f7ea fdbc 	bl	8002ed0 <Blink_Edit_Parameter>
	// 3 parameter
	sprintf(RAM,"%02d", logging_start_sec);
 8018358:	4b33      	ldr	r3, [pc, #204]	; (8018428 <Logging_options_screen_func+0x18c>)
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	461a      	mov	r2, r3
 801835e:	4933      	ldr	r1, [pc, #204]	; (801842c <Logging_options_screen_func+0x190>)
 8018360:	482f      	ldr	r0, [pc, #188]	; (8018420 <Logging_options_screen_func+0x184>)
 8018362:	f005 fcb1 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(215, 60, RAM, edit_param, 3);
 8018366:	4b29      	ldr	r3, [pc, #164]	; (801840c <Logging_options_screen_func+0x170>)
 8018368:	781b      	ldrb	r3, [r3, #0]
 801836a:	2203      	movs	r2, #3
 801836c:	9200      	str	r2, [sp, #0]
 801836e:	4a2c      	ldr	r2, [pc, #176]	; (8018420 <Logging_options_screen_func+0x184>)
 8018370:	213c      	movs	r1, #60	; 0x3c
 8018372:	20d7      	movs	r0, #215	; 0xd7
 8018374:	f7ea fdac 	bl	8002ed0 <Blink_Edit_Parameter>
	// 4 parameter
	sprintf(RAM,"%d", logging_period);
 8018378:	4b2d      	ldr	r3, [pc, #180]	; (8018430 <Logging_options_screen_func+0x194>)
 801837a:	781b      	ldrb	r3, [r3, #0]
 801837c:	461a      	mov	r2, r3
 801837e:	492d      	ldr	r1, [pc, #180]	; (8018434 <Logging_options_screen_func+0x198>)
 8018380:	4827      	ldr	r0, [pc, #156]	; (8018420 <Logging_options_screen_func+0x184>)
 8018382:	f005 fca1 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(195, 80, RAM, edit_param, 4);
 8018386:	4b21      	ldr	r3, [pc, #132]	; (801840c <Logging_options_screen_func+0x170>)
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	2204      	movs	r2, #4
 801838c:	9200      	str	r2, [sp, #0]
 801838e:	4a24      	ldr	r2, [pc, #144]	; (8018420 <Logging_options_screen_func+0x184>)
 8018390:	2150      	movs	r1, #80	; 0x50
 8018392:	20c3      	movs	r0, #195	; 0xc3
 8018394:	f7ea fd9c 	bl	8002ed0 <Blink_Edit_Parameter>
	// 5 parameter
	sprintf(RAM,"%d", logging_len);
 8018398:	4b27      	ldr	r3, [pc, #156]	; (8018438 <Logging_options_screen_func+0x19c>)
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	461a      	mov	r2, r3
 801839e:	4925      	ldr	r1, [pc, #148]	; (8018434 <Logging_options_screen_func+0x198>)
 80183a0:	481f      	ldr	r0, [pc, #124]	; (8018420 <Logging_options_screen_func+0x184>)
 80183a2:	f005 fc91 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(155, 100, RAM, edit_param, 5);
 80183a6:	4b19      	ldr	r3, [pc, #100]	; (801840c <Logging_options_screen_func+0x170>)
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	2205      	movs	r2, #5
 80183ac:	9200      	str	r2, [sp, #0]
 80183ae:	4a1c      	ldr	r2, [pc, #112]	; (8018420 <Logging_options_screen_func+0x184>)
 80183b0:	2164      	movs	r1, #100	; 0x64
 80183b2:	209b      	movs	r0, #155	; 0x9b
 80183b4:	f7ea fd8c 	bl	8002ed0 <Blink_Edit_Parameter>
	// 6 parameter
	sprintf(RAM,"%d", logging_num);
 80183b8:	4b20      	ldr	r3, [pc, #128]	; (801843c <Logging_options_screen_func+0x1a0>)
 80183ba:	781b      	ldrb	r3, [r3, #0]
 80183bc:	461a      	mov	r2, r3
 80183be:	491d      	ldr	r1, [pc, #116]	; (8018434 <Logging_options_screen_func+0x198>)
 80183c0:	4817      	ldr	r0, [pc, #92]	; (8018420 <Logging_options_screen_func+0x184>)
 80183c2:	f005 fc81 	bl	801dcc8 <siprintf>
	Blink_Edit_Parameter(155, 120, RAM, edit_param, 6);
 80183c6:	4b11      	ldr	r3, [pc, #68]	; (801840c <Logging_options_screen_func+0x170>)
 80183c8:	781b      	ldrb	r3, [r3, #0]
 80183ca:	2206      	movs	r2, #6
 80183cc:	9200      	str	r2, [sp, #0]
 80183ce:	4a14      	ldr	r2, [pc, #80]	; (8018420 <Logging_options_screen_func+0x184>)
 80183d0:	2178      	movs	r1, #120	; 0x78
 80183d2:	209b      	movs	r0, #155	; 0x9b
 80183d4:	f7ea fd7c 	bl	8002ed0 <Blink_Edit_Parameter>


	u8g2_SendBuffer(&u8g2);
 80183d8:	4805      	ldr	r0, [pc, #20]	; (80183f0 <Logging_options_screen_func+0x154>)
 80183da:	f7fc fcda 	bl	8014d92 <u8g2_SendBuffer>
	u8g2_ClearBuffer(&u8g2);
 80183de:	4804      	ldr	r0, [pc, #16]	; (80183f0 <Logging_options_screen_func+0x154>)
 80183e0:	f7fc fc64 	bl	8014cac <u8g2_ClearBuffer>
}
 80183e4:	bf00      	nop
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}
 80183ea:	bf00      	nop
 80183ec:	0802716c 	.word	0x0802716c
 80183f0:	20001fbc 	.word	0x20001fbc
 80183f4:	08022348 	.word	0x08022348
 80183f8:	08022364 	.word	0x08022364
 80183fc:	08022380 	.word	0x08022380
 8018400:	080223a4 	.word	0x080223a4
 8018404:	080223c0 	.word	0x080223c0
 8018408:	200008a8 	.word	0x200008a8
 801840c:	20000852 	.word	0x20000852
 8018410:	080223dc 	.word	0x080223dc
 8018414:	080223e4 	.word	0x080223e4
 8018418:	200008a9 	.word	0x200008a9
 801841c:	080223ec 	.word	0x080223ec
 8018420:	20002070 	.word	0x20002070
 8018424:	200008aa 	.word	0x200008aa
 8018428:	200008ab 	.word	0x200008ab
 801842c:	080223f4 	.word	0x080223f4
 8018430:	200008ac 	.word	0x200008ac
 8018434:	080223fc 	.word	0x080223fc
 8018438:	200008ad 	.word	0x200008ad
 801843c:	200008ae 	.word	0x200008ae

08018440 <Logging_options_screen_S6>:


// DOWN
void Logging_options_screen_S6(void)
{
 8018440:	b480      	push	{r7}
 8018442:	af00      	add	r7, sp, #0
	if(edit_param<(max_edit_param-1))edit_param++;
 8018444:	4b07      	ldr	r3, [pc, #28]	; (8018464 <Logging_options_screen_S6+0x24>)
 8018446:	781b      	ldrb	r3, [r3, #0]
 8018448:	2b04      	cmp	r3, #4
 801844a:	d805      	bhi.n	8018458 <Logging_options_screen_S6+0x18>
 801844c:	4b05      	ldr	r3, [pc, #20]	; (8018464 <Logging_options_screen_S6+0x24>)
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	3301      	adds	r3, #1
 8018452:	b2da      	uxtb	r2, r3
 8018454:	4b03      	ldr	r3, [pc, #12]	; (8018464 <Logging_options_screen_S6+0x24>)
 8018456:	701a      	strb	r2, [r3, #0]
}
 8018458:	bf00      	nop
 801845a:	46bd      	mov	sp, r7
 801845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018460:	4770      	bx	lr
 8018462:	bf00      	nop
 8018464:	20000852 	.word	0x20000852

08018468 <Logging_options_screen_S7>:

// UP
void Logging_options_screen_S7(void)
{
 8018468:	b480      	push	{r7}
 801846a:	af00      	add	r7, sp, #0
	if(edit_param>0)edit_param--;
 801846c:	4b07      	ldr	r3, [pc, #28]	; (801848c <Logging_options_screen_S7+0x24>)
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d005      	beq.n	8018480 <Logging_options_screen_S7+0x18>
 8018474:	4b05      	ldr	r3, [pc, #20]	; (801848c <Logging_options_screen_S7+0x24>)
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	3b01      	subs	r3, #1
 801847a:	b2da      	uxtb	r2, r3
 801847c:	4b03      	ldr	r3, [pc, #12]	; (801848c <Logging_options_screen_S7+0x24>)
 801847e:	701a      	strb	r2, [r3, #0]
}
 8018480:	bf00      	nop
 8018482:	46bd      	mov	sp, r7
 8018484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018488:	4770      	bx	lr
 801848a:	bf00      	nop
 801848c:	20000852 	.word	0x20000852

08018490 <Logging_options_screen_S9>:



// MENU
void Logging_options_screen_S9(void)
{
 8018490:	b480      	push	{r7}
 8018492:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8018494:	4b06      	ldr	r3, [pc, #24]	; (80184b0 <Logging_options_screen_S9+0x20>)
 8018496:	2204      	movs	r2, #4
 8018498:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 801849a:	4b06      	ldr	r3, [pc, #24]	; (80184b4 <Logging_options_screen_S9+0x24>)
 801849c:	22ff      	movs	r2, #255	; 0xff
 801849e:	701a      	strb	r2, [r3, #0]
	Menu_num=5;
 80184a0:	4b05      	ldr	r3, [pc, #20]	; (80184b8 <Logging_options_screen_S9+0x28>)
 80184a2:	2205      	movs	r2, #5
 80184a4:	701a      	strb	r2, [r3, #0]
}
 80184a6:	bf00      	nop
 80184a8:	46bd      	mov	sp, r7
 80184aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ae:	4770      	bx	lr
 80184b0:	2000004c 	.word	0x2000004c
 80184b4:	20000398 	.word	0x20000398
 80184b8:	20000399 	.word	0x20000399

080184bc <Logging_options_screen_S8>:

// BACKWARD
void Logging_options_screen_S8(void)
{
 80184bc:	b480      	push	{r7}
 80184be:	af00      	add	r7, sp, #0
	switch(edit_param)
 80184c0:	4b32      	ldr	r3, [pc, #200]	; (801858c <Logging_options_screen_S8+0xd0>)
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	2b05      	cmp	r3, #5
 80184c6:	d85c      	bhi.n	8018582 <Logging_options_screen_S8+0xc6>
 80184c8:	a201      	add	r2, pc, #4	; (adr r2, 80184d0 <Logging_options_screen_S8+0x14>)
 80184ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184ce:	bf00      	nop
 80184d0:	080184e9 	.word	0x080184e9
 80184d4:	080184ff 	.word	0x080184ff
 80184d8:	08018515 	.word	0x08018515
 80184dc:	0801852b 	.word	0x0801852b
 80184e0:	08018541 	.word	0x08018541
 80184e4:	08018557 	.word	0x08018557
	{
		case 0: if(logging>0)logging--; break;
 80184e8:	4b29      	ldr	r3, [pc, #164]	; (8018590 <Logging_options_screen_S8+0xd4>)
 80184ea:	781b      	ldrb	r3, [r3, #0]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d03d      	beq.n	801856c <Logging_options_screen_S8+0xb0>
 80184f0:	4b27      	ldr	r3, [pc, #156]	; (8018590 <Logging_options_screen_S8+0xd4>)
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	3b01      	subs	r3, #1
 80184f6:	b2da      	uxtb	r2, r3
 80184f8:	4b25      	ldr	r3, [pc, #148]	; (8018590 <Logging_options_screen_S8+0xd4>)
 80184fa:	701a      	strb	r2, [r3, #0]
 80184fc:	e036      	b.n	801856c <Logging_options_screen_S8+0xb0>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 80184fe:	4b25      	ldr	r3, [pc, #148]	; (8018594 <Logging_options_screen_S8+0xd8>)
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d034      	beq.n	8018570 <Logging_options_screen_S8+0xb4>
 8018506:	4b23      	ldr	r3, [pc, #140]	; (8018594 <Logging_options_screen_S8+0xd8>)
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	3b01      	subs	r3, #1
 801850c:	b2da      	uxtb	r2, r3
 801850e:	4b21      	ldr	r3, [pc, #132]	; (8018594 <Logging_options_screen_S8+0xd8>)
 8018510:	701a      	strb	r2, [r3, #0]
 8018512:	e02d      	b.n	8018570 <Logging_options_screen_S8+0xb4>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 8018514:	4b20      	ldr	r3, [pc, #128]	; (8018598 <Logging_options_screen_S8+0xdc>)
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d02b      	beq.n	8018574 <Logging_options_screen_S8+0xb8>
 801851c:	4b1e      	ldr	r3, [pc, #120]	; (8018598 <Logging_options_screen_S8+0xdc>)
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	3b01      	subs	r3, #1
 8018522:	b2da      	uxtb	r2, r3
 8018524:	4b1c      	ldr	r3, [pc, #112]	; (8018598 <Logging_options_screen_S8+0xdc>)
 8018526:	701a      	strb	r2, [r3, #0]
 8018528:	e024      	b.n	8018574 <Logging_options_screen_S8+0xb8>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 801852a:	4b1c      	ldr	r3, [pc, #112]	; (801859c <Logging_options_screen_S8+0xe0>)
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d022      	beq.n	8018578 <Logging_options_screen_S8+0xbc>
 8018532:	4b1a      	ldr	r3, [pc, #104]	; (801859c <Logging_options_screen_S8+0xe0>)
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	3b01      	subs	r3, #1
 8018538:	b2da      	uxtb	r2, r3
 801853a:	4b18      	ldr	r3, [pc, #96]	; (801859c <Logging_options_screen_S8+0xe0>)
 801853c:	701a      	strb	r2, [r3, #0]
 801853e:	e01b      	b.n	8018578 <Logging_options_screen_S8+0xbc>
		case 4: if(logging_period>0)logging_period--; break;
 8018540:	4b17      	ldr	r3, [pc, #92]	; (80185a0 <Logging_options_screen_S8+0xe4>)
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d019      	beq.n	801857c <Logging_options_screen_S8+0xc0>
 8018548:	4b15      	ldr	r3, [pc, #84]	; (80185a0 <Logging_options_screen_S8+0xe4>)
 801854a:	781b      	ldrb	r3, [r3, #0]
 801854c:	3b01      	subs	r3, #1
 801854e:	b2da      	uxtb	r2, r3
 8018550:	4b13      	ldr	r3, [pc, #76]	; (80185a0 <Logging_options_screen_S8+0xe4>)
 8018552:	701a      	strb	r2, [r3, #0]
 8018554:	e012      	b.n	801857c <Logging_options_screen_S8+0xc0>
		case 5: if(logging_len>0)logging_len--; break;
 8018556:	4b13      	ldr	r3, [pc, #76]	; (80185a4 <Logging_options_screen_S8+0xe8>)
 8018558:	781b      	ldrb	r3, [r3, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d010      	beq.n	8018580 <Logging_options_screen_S8+0xc4>
 801855e:	4b11      	ldr	r3, [pc, #68]	; (80185a4 <Logging_options_screen_S8+0xe8>)
 8018560:	781b      	ldrb	r3, [r3, #0]
 8018562:	3b01      	subs	r3, #1
 8018564:	b2da      	uxtb	r2, r3
 8018566:	4b0f      	ldr	r3, [pc, #60]	; (80185a4 <Logging_options_screen_S8+0xe8>)
 8018568:	701a      	strb	r2, [r3, #0]
 801856a:	e009      	b.n	8018580 <Logging_options_screen_S8+0xc4>
		case 0: if(logging>0)logging--; break;
 801856c:	bf00      	nop
 801856e:	e008      	b.n	8018582 <Logging_options_screen_S8+0xc6>
		case 1: if(logging_start_hour>0)logging_start_hour--; break;
 8018570:	bf00      	nop
 8018572:	e006      	b.n	8018582 <Logging_options_screen_S8+0xc6>
		case 2: if(logging_start_min>0)logging_start_min--; break;
 8018574:	bf00      	nop
 8018576:	e004      	b.n	8018582 <Logging_options_screen_S8+0xc6>
		case 3: if(logging_start_sec>0)logging_start_sec--; break;
 8018578:	bf00      	nop
 801857a:	e002      	b.n	8018582 <Logging_options_screen_S8+0xc6>
		case 4: if(logging_period>0)logging_period--; break;
 801857c:	bf00      	nop
 801857e:	e000      	b.n	8018582 <Logging_options_screen_S8+0xc6>
		case 5: if(logging_len>0)logging_len--; break;
 8018580:	bf00      	nop
	}
}
 8018582:	bf00      	nop
 8018584:	46bd      	mov	sp, r7
 8018586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858a:	4770      	bx	lr
 801858c:	20000852 	.word	0x20000852
 8018590:	200008a8 	.word	0x200008a8
 8018594:	200008a9 	.word	0x200008a9
 8018598:	200008aa 	.word	0x200008aa
 801859c:	200008ab 	.word	0x200008ab
 80185a0:	200008ac 	.word	0x200008ac
 80185a4:	200008ad 	.word	0x200008ad

080185a8 <Logging_options_screen_S5>:

// FORWARD
void Logging_options_screen_S5(void)
{
 80185a8:	b480      	push	{r7}
 80185aa:	af00      	add	r7, sp, #0
	switch(edit_param)
 80185ac:	4b32      	ldr	r3, [pc, #200]	; (8018678 <Logging_options_screen_S5+0xd0>)
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	2b05      	cmp	r3, #5
 80185b2:	d85c      	bhi.n	801866e <Logging_options_screen_S5+0xc6>
 80185b4:	a201      	add	r2, pc, #4	; (adr r2, 80185bc <Logging_options_screen_S5+0x14>)
 80185b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ba:	bf00      	nop
 80185bc:	080185d5 	.word	0x080185d5
 80185c0:	080185eb 	.word	0x080185eb
 80185c4:	08018601 	.word	0x08018601
 80185c8:	08018617 	.word	0x08018617
 80185cc:	0801862d 	.word	0x0801862d
 80185d0:	08018643 	.word	0x08018643
	{
		case 0: if(logging<1)logging++; break;
 80185d4:	4b29      	ldr	r3, [pc, #164]	; (801867c <Logging_options_screen_S5+0xd4>)
 80185d6:	781b      	ldrb	r3, [r3, #0]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d13d      	bne.n	8018658 <Logging_options_screen_S5+0xb0>
 80185dc:	4b27      	ldr	r3, [pc, #156]	; (801867c <Logging_options_screen_S5+0xd4>)
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	3301      	adds	r3, #1
 80185e2:	b2da      	uxtb	r2, r3
 80185e4:	4b25      	ldr	r3, [pc, #148]	; (801867c <Logging_options_screen_S5+0xd4>)
 80185e6:	701a      	strb	r2, [r3, #0]
 80185e8:	e036      	b.n	8018658 <Logging_options_screen_S5+0xb0>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 80185ea:	4b25      	ldr	r3, [pc, #148]	; (8018680 <Logging_options_screen_S5+0xd8>)
 80185ec:	781b      	ldrb	r3, [r3, #0]
 80185ee:	2b16      	cmp	r3, #22
 80185f0:	d834      	bhi.n	801865c <Logging_options_screen_S5+0xb4>
 80185f2:	4b23      	ldr	r3, [pc, #140]	; (8018680 <Logging_options_screen_S5+0xd8>)
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	3301      	adds	r3, #1
 80185f8:	b2da      	uxtb	r2, r3
 80185fa:	4b21      	ldr	r3, [pc, #132]	; (8018680 <Logging_options_screen_S5+0xd8>)
 80185fc:	701a      	strb	r2, [r3, #0]
 80185fe:	e02d      	b.n	801865c <Logging_options_screen_S5+0xb4>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018600:	4b20      	ldr	r3, [pc, #128]	; (8018684 <Logging_options_screen_S5+0xdc>)
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	2b3a      	cmp	r3, #58	; 0x3a
 8018606:	d82b      	bhi.n	8018660 <Logging_options_screen_S5+0xb8>
 8018608:	4b1e      	ldr	r3, [pc, #120]	; (8018684 <Logging_options_screen_S5+0xdc>)
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	3301      	adds	r3, #1
 801860e:	b2da      	uxtb	r2, r3
 8018610:	4b1c      	ldr	r3, [pc, #112]	; (8018684 <Logging_options_screen_S5+0xdc>)
 8018612:	701a      	strb	r2, [r3, #0]
 8018614:	e024      	b.n	8018660 <Logging_options_screen_S5+0xb8>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 8018616:	4b1c      	ldr	r3, [pc, #112]	; (8018688 <Logging_options_screen_S5+0xe0>)
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	2b3a      	cmp	r3, #58	; 0x3a
 801861c:	d822      	bhi.n	8018664 <Logging_options_screen_S5+0xbc>
 801861e:	4b1a      	ldr	r3, [pc, #104]	; (8018688 <Logging_options_screen_S5+0xe0>)
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	3301      	adds	r3, #1
 8018624:	b2da      	uxtb	r2, r3
 8018626:	4b18      	ldr	r3, [pc, #96]	; (8018688 <Logging_options_screen_S5+0xe0>)
 8018628:	701a      	strb	r2, [r3, #0]
 801862a:	e01b      	b.n	8018664 <Logging_options_screen_S5+0xbc>
		case 4: if(logging_period<30)logging_period++; break;
 801862c:	4b17      	ldr	r3, [pc, #92]	; (801868c <Logging_options_screen_S5+0xe4>)
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	2b1d      	cmp	r3, #29
 8018632:	d819      	bhi.n	8018668 <Logging_options_screen_S5+0xc0>
 8018634:	4b15      	ldr	r3, [pc, #84]	; (801868c <Logging_options_screen_S5+0xe4>)
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	3301      	adds	r3, #1
 801863a:	b2da      	uxtb	r2, r3
 801863c:	4b13      	ldr	r3, [pc, #76]	; (801868c <Logging_options_screen_S5+0xe4>)
 801863e:	701a      	strb	r2, [r3, #0]
 8018640:	e012      	b.n	8018668 <Logging_options_screen_S5+0xc0>
		case 5: if(logging_len<100)logging_len++; break;
 8018642:	4b13      	ldr	r3, [pc, #76]	; (8018690 <Logging_options_screen_S5+0xe8>)
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	2b63      	cmp	r3, #99	; 0x63
 8018648:	d810      	bhi.n	801866c <Logging_options_screen_S5+0xc4>
 801864a:	4b11      	ldr	r3, [pc, #68]	; (8018690 <Logging_options_screen_S5+0xe8>)
 801864c:	781b      	ldrb	r3, [r3, #0]
 801864e:	3301      	adds	r3, #1
 8018650:	b2da      	uxtb	r2, r3
 8018652:	4b0f      	ldr	r3, [pc, #60]	; (8018690 <Logging_options_screen_S5+0xe8>)
 8018654:	701a      	strb	r2, [r3, #0]
 8018656:	e009      	b.n	801866c <Logging_options_screen_S5+0xc4>
		case 0: if(logging<1)logging++; break;
 8018658:	bf00      	nop
 801865a:	e008      	b.n	801866e <Logging_options_screen_S5+0xc6>
		case 1: if(logging_start_hour<23)logging_start_hour++; break;
 801865c:	bf00      	nop
 801865e:	e006      	b.n	801866e <Logging_options_screen_S5+0xc6>
		case 2: if(logging_start_min<59)logging_start_min++; break;
 8018660:	bf00      	nop
 8018662:	e004      	b.n	801866e <Logging_options_screen_S5+0xc6>
		case 3: if(logging_start_sec<59)logging_start_sec++; break;
 8018664:	bf00      	nop
 8018666:	e002      	b.n	801866e <Logging_options_screen_S5+0xc6>
		case 4: if(logging_period<30)logging_period++; break;
 8018668:	bf00      	nop
 801866a:	e000      	b.n	801866e <Logging_options_screen_S5+0xc6>
		case 5: if(logging_len<100)logging_len++; break;
 801866c:	bf00      	nop
	}
}
 801866e:	bf00      	nop
 8018670:	46bd      	mov	sp, r7
 8018672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018676:	4770      	bx	lr
 8018678:	20000852 	.word	0x20000852
 801867c:	200008a8 	.word	0x200008a8
 8018680:	200008a9 	.word	0x200008a9
 8018684:	200008aa 	.word	0x200008aa
 8018688:	200008ab 	.word	0x200008ab
 801868c:	200008ac 	.word	0x200008ac
 8018690:	200008ad 	.word	0x200008ad

08018694 <Menu_GUI>:



void Menu_GUI(uint16_t x_pos, uint16_t y_pos, const unsigned char *menu_string[], uint8_t *str_size,
		uint8_t str_to_str, uint8_t menu_size, uint8_t active_string)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b086      	sub	sp, #24
 8018698:	af00      	add	r7, sp, #0
 801869a:	60ba      	str	r2, [r7, #8]
 801869c:	607b      	str	r3, [r7, #4]
 801869e:	4603      	mov	r3, r0
 80186a0:	81fb      	strh	r3, [r7, #14]
 80186a2:	460b      	mov	r3, r1
 80186a4:	81bb      	strh	r3, [r7, #12]
	uint8_t i=0;
 80186a6:	2300      	movs	r3, #0
 80186a8:	75fb      	strb	r3, [r7, #23]
	if((old_active_string!=active_string)||(float_menu!=0))
 80186aa:	4b42      	ldr	r3, [pc, #264]	; (80187b4 <Menu_GUI+0x120>)
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d104      	bne.n	80186c0 <Menu_GUI+0x2c>
 80186b6:	4b40      	ldr	r3, [pc, #256]	; (80187b8 <Menu_GUI+0x124>)
 80186b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d075      	beq.n	80187ac <Menu_GUI+0x118>
	{
		for(i=0;i<menu_size;i++)
 80186c0:	2300      	movs	r3, #0
 80186c2:	75fb      	strb	r3, [r7, #23]
 80186c4:	e063      	b.n	801878e <Menu_GUI+0xfa>
		{
			if(active_string==i)
 80186c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80186ca:	7dfb      	ldrb	r3, [r7, #23]
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d12d      	bne.n	801872c <Menu_GUI+0x98>
			{
				u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 80186d0:	493a      	ldr	r1, [pc, #232]	; (80187bc <Menu_GUI+0x128>)
 80186d2:	483b      	ldr	r0, [pc, #236]	; (80187c0 <Menu_GUI+0x12c>)
 80186d4:	f7fd f99a 	bl	8015a0c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*10))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 80186d8:	7dfb      	ldrb	r3, [r7, #23]
 80186da:	687a      	ldr	r2, [r7, #4]
 80186dc:	4413      	add	r3, r2
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	461a      	mov	r2, r3
 80186e2:	f06f 0309 	mvn.w	r3, #9
 80186e6:	fb03 f302 	mul.w	r3, r3, r2
 80186ea:	33f0      	adds	r3, #240	; 0xf0
 80186ec:	105b      	asrs	r3, r3, #1
 80186ee:	b29a      	uxth	r2, r3
 80186f0:	89fb      	ldrh	r3, [r7, #14]
 80186f2:	4413      	add	r3, r2
 80186f4:	b299      	uxth	r1, r3
 80186f6:	7dfb      	ldrb	r3, [r7, #23]
 80186f8:	b29a      	uxth	r2, r3
 80186fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186fe:	b29b      	uxth	r3, r3
 8018700:	fb12 f303 	smulbb	r3, r2, r3
 8018704:	b29a      	uxth	r2, r3
 8018706:	89bb      	ldrh	r3, [r7, #12]
 8018708:	4413      	add	r3, r2
 801870a:	b29a      	uxth	r2, r3
 801870c:	4b2a      	ldr	r3, [pc, #168]	; (80187b8 <Menu_GUI+0x124>)
 801870e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018712:	b29b      	uxth	r3, r3
 8018714:	4413      	add	r3, r2
 8018716:	b298      	uxth	r0, r3
 8018718:	7dfb      	ldrb	r3, [r7, #23]
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	68ba      	ldr	r2, [r7, #8]
 801871e:	4413      	add	r3, r2
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	4602      	mov	r2, r0
 8018724:	4826      	ldr	r0, [pc, #152]	; (80187c0 <Menu_GUI+0x12c>)
 8018726:	f7fd f8cf 	bl	80158c8 <u8g2_DrawUTF8>
 801872a:	e02d      	b.n	8018788 <Menu_GUI+0xf4>
			}
			else
			{
				u8g2_SetFont(&u8g2, u8g2_font_9x15_t_cyrillic);
 801872c:	4925      	ldr	r1, [pc, #148]	; (80187c4 <Menu_GUI+0x130>)
 801872e:	4824      	ldr	r0, [pc, #144]	; (80187c0 <Menu_GUI+0x12c>)
 8018730:	f7fd f96c 	bl	8015a0c <u8g2_SetFont>
				u8g2_DrawUTF8(&u8g2, x_pos+((MAX_X-(str_size[i]*9))>>1), (y_pos+i*str_to_str)+float_menu, (char *)menu_string[i]);
 8018734:	7dfb      	ldrb	r3, [r7, #23]
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	4413      	add	r3, r2
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	461a      	mov	r2, r3
 801873e:	4613      	mov	r3, r2
 8018740:	075b      	lsls	r3, r3, #29
 8018742:	1a9b      	subs	r3, r3, r2
 8018744:	00db      	lsls	r3, r3, #3
 8018746:	1a9b      	subs	r3, r3, r2
 8018748:	33f0      	adds	r3, #240	; 0xf0
 801874a:	105b      	asrs	r3, r3, #1
 801874c:	b29a      	uxth	r2, r3
 801874e:	89fb      	ldrh	r3, [r7, #14]
 8018750:	4413      	add	r3, r2
 8018752:	b299      	uxth	r1, r3
 8018754:	7dfb      	ldrb	r3, [r7, #23]
 8018756:	b29a      	uxth	r2, r3
 8018758:	f897 3020 	ldrb.w	r3, [r7, #32]
 801875c:	b29b      	uxth	r3, r3
 801875e:	fb12 f303 	smulbb	r3, r2, r3
 8018762:	b29a      	uxth	r2, r3
 8018764:	89bb      	ldrh	r3, [r7, #12]
 8018766:	4413      	add	r3, r2
 8018768:	b29a      	uxth	r2, r3
 801876a:	4b13      	ldr	r3, [pc, #76]	; (80187b8 <Menu_GUI+0x124>)
 801876c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018770:	b29b      	uxth	r3, r3
 8018772:	4413      	add	r3, r2
 8018774:	b298      	uxth	r0, r3
 8018776:	7dfb      	ldrb	r3, [r7, #23]
 8018778:	009b      	lsls	r3, r3, #2
 801877a:	68ba      	ldr	r2, [r7, #8]
 801877c:	4413      	add	r3, r2
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	4602      	mov	r2, r0
 8018782:	480f      	ldr	r0, [pc, #60]	; (80187c0 <Menu_GUI+0x12c>)
 8018784:	f7fd f8a0 	bl	80158c8 <u8g2_DrawUTF8>
		for(i=0;i<menu_size;i++)
 8018788:	7dfb      	ldrb	r3, [r7, #23]
 801878a:	3301      	adds	r3, #1
 801878c:	75fb      	strb	r3, [r7, #23]
 801878e:	7dfa      	ldrb	r2, [r7, #23]
 8018790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018794:	429a      	cmp	r2, r3
 8018796:	d396      	bcc.n	80186c6 <Menu_GUI+0x32>
			}
		}
		old_active_string=active_string;
 8018798:	4a06      	ldr	r2, [pc, #24]	; (80187b4 <Menu_GUI+0x120>)
 801879a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801879e:	7013      	strb	r3, [r2, #0]

		// Рисуем
		u8g2_SendBuffer(&u8g2);
 80187a0:	4807      	ldr	r0, [pc, #28]	; (80187c0 <Menu_GUI+0x12c>)
 80187a2:	f7fc faf6 	bl	8014d92 <u8g2_SendBuffer>
		u8g2_ClearBuffer(&u8g2);
 80187a6:	4806      	ldr	r0, [pc, #24]	; (80187c0 <Menu_GUI+0x12c>)
 80187a8:	f7fc fa80 	bl	8014cac <u8g2_ClearBuffer>
	}
}
 80187ac:	bf00      	nop
 80187ae:	3718      	adds	r7, #24
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	20000398 	.word	0x20000398
 80187b8:	20001c4a 	.word	0x20001c4a
 80187bc:	0802716c 	.word	0x0802716c
 80187c0:	20001fbc 	.word	0x20001fbc
 80187c4:	08025b40 	.word	0x08025b40

080187c8 <Parameter_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Parameter_screen_func(void)
{ Menu_GUI(0, 40, menu_parameter, menu_parameter_size, 17, Menu_parameter_num, Menu_num); }
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b084      	sub	sp, #16
 80187cc:	af04      	add	r7, sp, #16
 80187ce:	4b08      	ldr	r3, [pc, #32]	; (80187f0 <Parameter_screen_func+0x28>)
 80187d0:	781b      	ldrb	r3, [r3, #0]
 80187d2:	9302      	str	r3, [sp, #8]
 80187d4:	2307      	movs	r3, #7
 80187d6:	9301      	str	r3, [sp, #4]
 80187d8:	2311      	movs	r3, #17
 80187da:	9300      	str	r3, [sp, #0]
 80187dc:	4b05      	ldr	r3, [pc, #20]	; (80187f4 <Parameter_screen_func+0x2c>)
 80187de:	4a06      	ldr	r2, [pc, #24]	; (80187f8 <Parameter_screen_func+0x30>)
 80187e0:	2128      	movs	r1, #40	; 0x28
 80187e2:	2000      	movs	r0, #0
 80187e4:	f7ff ff56 	bl	8018694 <Menu_GUI>
 80187e8:	bf00      	nop
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	20000399 	.word	0x20000399
 80187f4:	080295f8 	.word	0x080295f8
 80187f8:	200003c0 	.word	0x200003c0

080187fc <Parameter_screen_S9>:



// MENU
void Parameter_screen_S9(void)
{
 80187fc:	b480      	push	{r7}
 80187fe:	af00      	add	r7, sp, #0
	screen=Option_screen;
 8018800:	4b06      	ldr	r3, [pc, #24]	; (801881c <Parameter_screen_S9+0x20>)
 8018802:	2204      	movs	r2, #4
 8018804:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018806:	4b06      	ldr	r3, [pc, #24]	; (8018820 <Parameter_screen_S9+0x24>)
 8018808:	22ff      	movs	r2, #255	; 0xff
 801880a:	701a      	strb	r2, [r3, #0]
	Menu_num=2;
 801880c:	4b05      	ldr	r3, [pc, #20]	; (8018824 <Parameter_screen_S9+0x28>)
 801880e:	2202      	movs	r2, #2
 8018810:	701a      	strb	r2, [r3, #0]
}
 8018812:	bf00      	nop
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr
 801881c:	2000004c 	.word	0x2000004c
 8018820:	20000398 	.word	0x20000398
 8018824:	20000399 	.word	0x20000399

08018828 <Parameter_screen_S4>:


// ENTER
void Parameter_screen_S4(void)
{
 8018828:	b480      	push	{r7}
 801882a:	af00      	add	r7, sp, #0
	switch(Menu_num)
 801882c:	4b1c      	ldr	r3, [pc, #112]	; (80188a0 <Parameter_screen_S4+0x78>)
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	2b06      	cmp	r3, #6
 8018832:	d82d      	bhi.n	8018890 <Parameter_screen_S4+0x68>
 8018834:	a201      	add	r2, pc, #4	; (adr r2, 801883c <Parameter_screen_S4+0x14>)
 8018836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801883a:	bf00      	nop
 801883c:	08018859 	.word	0x08018859
 8018840:	08018891 	.word	0x08018891
 8018844:	08018867 	.word	0x08018867
 8018848:	08018875 	.word	0x08018875
 801884c:	08018891 	.word	0x08018891
 8018850:	08018883 	.word	0x08018883
 8018854:	08018891 	.word	0x08018891
	{
		// ДИСПЛЕЙ
		case 0: screen=Display_options_screen; old_active_string=0xFF; break;
 8018858:	4b12      	ldr	r3, [pc, #72]	; (80188a4 <Parameter_screen_S4+0x7c>)
 801885a:	2205      	movs	r2, #5
 801885c:	701a      	strb	r2, [r3, #0]
 801885e:	4b12      	ldr	r3, [pc, #72]	; (80188a8 <Parameter_screen_S4+0x80>)
 8018860:	22ff      	movs	r2, #255	; 0xff
 8018862:	701a      	strb	r2, [r3, #0]
 8018864:	e014      	b.n	8018890 <Parameter_screen_S4+0x68>
		// ГРОМКОСТЬ
		case 1:
		break;
		// ДАТА И ВРЕМЯ
		case 2: screen=RTC_screen; old_active_string=0xFF; break;
 8018866:	4b0f      	ldr	r3, [pc, #60]	; (80188a4 <Parameter_screen_S4+0x7c>)
 8018868:	2209      	movs	r2, #9
 801886a:	701a      	strb	r2, [r3, #0]
 801886c:	4b0e      	ldr	r3, [pc, #56]	; (80188a8 <Parameter_screen_S4+0x80>)
 801886e:	22ff      	movs	r2, #255	; 0xff
 8018870:	701a      	strb	r2, [r3, #0]
 8018872:	e00d      	b.n	8018890 <Parameter_screen_S4+0x68>
		// АВТООТКЛЮЧЕНИЕ
		case 3: screen=Auto_Off_option_screen; old_active_string=0xFF; break;
 8018874:	4b0b      	ldr	r3, [pc, #44]	; (80188a4 <Parameter_screen_S4+0x7c>)
 8018876:	220a      	movs	r2, #10
 8018878:	701a      	strb	r2, [r3, #0]
 801887a:	4b0b      	ldr	r3, [pc, #44]	; (80188a8 <Parameter_screen_S4+0x80>)
 801887c:	22ff      	movs	r2, #255	; 0xff
 801887e:	701a      	strb	r2, [r3, #0]
 8018880:	e006      	b.n	8018890 <Parameter_screen_S4+0x68>
		// НАСТРОЙКА ПОДКЛЮЧЕНИЯ
		case 4: break;
		// НАСТРОЙКА АЦП
		case 5: screen=ADC_options_screen; old_active_string=0xFF; break;
 8018882:	4b08      	ldr	r3, [pc, #32]	; (80188a4 <Parameter_screen_S4+0x7c>)
 8018884:	2206      	movs	r2, #6
 8018886:	701a      	strb	r2, [r3, #0]
 8018888:	4b07      	ldr	r3, [pc, #28]	; (80188a8 <Parameter_screen_S4+0x80>)
 801888a:	22ff      	movs	r2, #255	; 0xff
 801888c:	701a      	strb	r2, [r3, #0]
 801888e:	bf00      	nop
		// РЕЧЕВОЕ ИНФОРМИРОВАНИЕ
		case 6: break;
	}
	edit_param=0;
 8018890:	4b06      	ldr	r3, [pc, #24]	; (80188ac <Parameter_screen_S4+0x84>)
 8018892:	2200      	movs	r2, #0
 8018894:	701a      	strb	r2, [r3, #0]
}
 8018896:	bf00      	nop
 8018898:	46bd      	mov	sp, r7
 801889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889e:	4770      	bx	lr
 80188a0:	20000399 	.word	0x20000399
 80188a4:	2000004c 	.word	0x2000004c
 80188a8:	20000398 	.word	0x20000398
 80188ac:	20000852 	.word	0x20000852

080188b0 <Parameter_screen_S7>:

// DOWN
void Parameter_screen_S7(void)
{
 80188b0:	b480      	push	{r7}
 80188b2:	af00      	add	r7, sp, #0
		if(Menu_num>0)
 80188b4:	4b09      	ldr	r3, [pc, #36]	; (80188dc <Parameter_screen_S7+0x2c>)
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d006      	beq.n	80188ca <Parameter_screen_S7+0x1a>
		{
			Menu_num--;
 80188bc:	4b07      	ldr	r3, [pc, #28]	; (80188dc <Parameter_screen_S7+0x2c>)
 80188be:	781b      	ldrb	r3, [r3, #0]
 80188c0:	3b01      	subs	r3, #1
 80188c2:	b2da      	uxtb	r2, r3
 80188c4:	4b05      	ldr	r3, [pc, #20]	; (80188dc <Parameter_screen_S7+0x2c>)
 80188c6:	701a      	strb	r2, [r3, #0]
			//float_menu=-2;
		}
		else Menu_num=Menu_parameter_num-1;
}
 80188c8:	e002      	b.n	80188d0 <Parameter_screen_S7+0x20>
		else Menu_num=Menu_parameter_num-1;
 80188ca:	4b04      	ldr	r3, [pc, #16]	; (80188dc <Parameter_screen_S7+0x2c>)
 80188cc:	2206      	movs	r2, #6
 80188ce:	701a      	strb	r2, [r3, #0]
}
 80188d0:	bf00      	nop
 80188d2:	46bd      	mov	sp, r7
 80188d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d8:	4770      	bx	lr
 80188da:	bf00      	nop
 80188dc:	20000399 	.word	0x20000399

080188e0 <Parameter_screen_S6>:

// UP
void Parameter_screen_S6(void)
{
 80188e0:	b480      	push	{r7}
 80188e2:	af00      	add	r7, sp, #0
		if(Menu_num<(Menu_parameter_num-1))
 80188e4:	4b09      	ldr	r3, [pc, #36]	; (801890c <Parameter_screen_S6+0x2c>)
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	2b05      	cmp	r3, #5
 80188ea:	d806      	bhi.n	80188fa <Parameter_screen_S6+0x1a>
		{
			Menu_num++;
 80188ec:	4b07      	ldr	r3, [pc, #28]	; (801890c <Parameter_screen_S6+0x2c>)
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	3301      	adds	r3, #1
 80188f2:	b2da      	uxtb	r2, r3
 80188f4:	4b05      	ldr	r3, [pc, #20]	; (801890c <Parameter_screen_S6+0x2c>)
 80188f6:	701a      	strb	r2, [r3, #0]
			//float_menu=2;
		}
		else Menu_num=0;
}
 80188f8:	e002      	b.n	8018900 <Parameter_screen_S6+0x20>
		else Menu_num=0;
 80188fa:	4b04      	ldr	r3, [pc, #16]	; (801890c <Parameter_screen_S6+0x2c>)
 80188fc:	2200      	movs	r2, #0
 80188fe:	701a      	strb	r2, [r3, #0]
}
 8018900:	bf00      	nop
 8018902:	46bd      	mov	sp, r7
 8018904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018908:	4770      	bx	lr
 801890a:	bf00      	nop
 801890c:	20000399 	.word	0x20000399

08018910 <Option_screen_func>:
//------------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------------

void Option_screen_func(void)
{ Menu_GUI(0, 16, menu_option, menu_option_size, 17, Menu_option_num, Menu_num); }
 8018910:	b580      	push	{r7, lr}
 8018912:	b084      	sub	sp, #16
 8018914:	af04      	add	r7, sp, #16
 8018916:	4b08      	ldr	r3, [pc, #32]	; (8018938 <Option_screen_func+0x28>)
 8018918:	781b      	ldrb	r3, [r3, #0]
 801891a:	9302      	str	r3, [sp, #8]
 801891c:	2309      	movs	r3, #9
 801891e:	9301      	str	r3, [sp, #4]
 8018920:	2311      	movs	r3, #17
 8018922:	9300      	str	r3, [sp, #0]
 8018924:	4b05      	ldr	r3, [pc, #20]	; (801893c <Option_screen_func+0x2c>)
 8018926:	4a06      	ldr	r2, [pc, #24]	; (8018940 <Option_screen_func+0x30>)
 8018928:	2110      	movs	r1, #16
 801892a:	2000      	movs	r0, #0
 801892c:	f7ff feb2 	bl	8018694 <Menu_GUI>
 8018930:	bf00      	nop
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}
 8018936:	bf00      	nop
 8018938:	20000399 	.word	0x20000399
 801893c:	08029520 	.word	0x08029520
 8018940:	2000039c 	.word	0x2000039c

08018944 <Option_screen_S9>:


// MENU
void Option_screen_S9(void)
{
 8018944:	b480      	push	{r7}
 8018946:	af00      	add	r7, sp, #0
		screen=Main_screen;
 8018948:	4b05      	ldr	r3, [pc, #20]	; (8018960 <Option_screen_S9+0x1c>)
 801894a:	2201      	movs	r2, #1
 801894c:	701a      	strb	r2, [r3, #0]
		old_active_string=0xFF;
 801894e:	4b05      	ldr	r3, [pc, #20]	; (8018964 <Option_screen_S9+0x20>)
 8018950:	22ff      	movs	r2, #255	; 0xff
 8018952:	701a      	strb	r2, [r3, #0]
}
 8018954:	bf00      	nop
 8018956:	46bd      	mov	sp, r7
 8018958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895c:	4770      	bx	lr
 801895e:	bf00      	nop
 8018960:	2000004c 	.word	0x2000004c
 8018964:	20000398 	.word	0x20000398

08018968 <Option_screen_S7>:

// DOWN
void Option_screen_S7(void)
{
 8018968:	b480      	push	{r7}
 801896a:	af00      	add	r7, sp, #0
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 801896c:	4b09      	ldr	r3, [pc, #36]	; (8018994 <Option_screen_S7+0x2c>)
 801896e:	781b      	ldrb	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d006      	beq.n	8018982 <Option_screen_S7+0x1a>
 8018974:	4b07      	ldr	r3, [pc, #28]	; (8018994 <Option_screen_S7+0x2c>)
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	3b01      	subs	r3, #1
 801897a:	b2da      	uxtb	r2, r3
 801897c:	4b05      	ldr	r3, [pc, #20]	; (8018994 <Option_screen_S7+0x2c>)
 801897e:	701a      	strb	r2, [r3, #0]
}
 8018980:	e002      	b.n	8018988 <Option_screen_S7+0x20>
		if(Menu_num>0)Menu_num--; else Menu_num=Menu_option_num-1;
 8018982:	4b04      	ldr	r3, [pc, #16]	; (8018994 <Option_screen_S7+0x2c>)
 8018984:	2208      	movs	r2, #8
 8018986:	701a      	strb	r2, [r3, #0]
}
 8018988:	bf00      	nop
 801898a:	46bd      	mov	sp, r7
 801898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018990:	4770      	bx	lr
 8018992:	bf00      	nop
 8018994:	20000399 	.word	0x20000399

08018998 <Option_screen_S6>:

// UP
void Option_screen_S6(void)
{
 8018998:	b480      	push	{r7}
 801899a:	af00      	add	r7, sp, #0
		if(++Menu_num==Menu_option_num)Menu_num=0;
 801899c:	4b08      	ldr	r3, [pc, #32]	; (80189c0 <Option_screen_S6+0x28>)
 801899e:	781b      	ldrb	r3, [r3, #0]
 80189a0:	3301      	adds	r3, #1
 80189a2:	b2da      	uxtb	r2, r3
 80189a4:	4b06      	ldr	r3, [pc, #24]	; (80189c0 <Option_screen_S6+0x28>)
 80189a6:	701a      	strb	r2, [r3, #0]
 80189a8:	4b05      	ldr	r3, [pc, #20]	; (80189c0 <Option_screen_S6+0x28>)
 80189aa:	781b      	ldrb	r3, [r3, #0]
 80189ac:	2b09      	cmp	r3, #9
 80189ae:	d102      	bne.n	80189b6 <Option_screen_S6+0x1e>
 80189b0:	4b03      	ldr	r3, [pc, #12]	; (80189c0 <Option_screen_S6+0x28>)
 80189b2:	2200      	movs	r2, #0
 80189b4:	701a      	strb	r2, [r3, #0]
}
 80189b6:	bf00      	nop
 80189b8:	46bd      	mov	sp, r7
 80189ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189be:	4770      	bx	lr
 80189c0:	20000399 	.word	0x20000399

080189c4 <Option_screen_S4>:

// ENTER
void Option_screen_S4(void)
{
 80189c4:	b480      	push	{r7}
 80189c6:	af00      	add	r7, sp, #0
	switch(Menu_num)
 80189c8:	4b1b      	ldr	r3, [pc, #108]	; (8018a38 <Option_screen_S4+0x74>)
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	2b08      	cmp	r3, #8
 80189ce:	d825      	bhi.n	8018a1c <Option_screen_S4+0x58>
 80189d0:	a201      	add	r2, pc, #4	; (adr r2, 80189d8 <Option_screen_S4+0x14>)
 80189d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189d6:	bf00      	nop
 80189d8:	080189fd 	.word	0x080189fd
 80189dc:	08018a1d 	.word	0x08018a1d
 80189e0:	08018a05 	.word	0x08018a05
 80189e4:	08018a0d 	.word	0x08018a0d
 80189e8:	08018a1d 	.word	0x08018a1d
 80189ec:	08018a15 	.word	0x08018a15
 80189f0:	08018a1d 	.word	0x08018a1d
 80189f4:	08018a1d 	.word	0x08018a1d
 80189f8:	08018a1d 	.word	0x08018a1d
	{
		// ИЗМЕРЕНИЕ
		case 0: screen=Measure_options_screen; break;
 80189fc:	4b0f      	ldr	r3, [pc, #60]	; (8018a3c <Option_screen_S4+0x78>)
 80189fe:	2207      	movs	r2, #7
 8018a00:	701a      	strb	r2, [r3, #0]
 8018a02:	e00b      	b.n	8018a1c <Option_screen_S4+0x58>
		// 24 ВОЛЬТА
		case 1: break;
		// ПАРАМЕТРЫ
		case 2: screen=Parameter_screen; break;
 8018a04:	4b0d      	ldr	r3, [pc, #52]	; (8018a3c <Option_screen_S4+0x78>)
 8018a06:	2208      	movs	r2, #8
 8018a08:	701a      	strb	r2, [r3, #0]
 8018a0a:	e007      	b.n	8018a1c <Option_screen_S4+0x58>
		// О ПРИБОРЕ
		case 3: screen=About_options_screen; break;
 8018a0c:	4b0b      	ldr	r3, [pc, #44]	; (8018a3c <Option_screen_S4+0x78>)
 8018a0e:	220b      	movs	r2, #11
 8018a10:	701a      	strb	r2, [r3, #0]
 8018a12:	e003      	b.n	8018a1c <Option_screen_S4+0x58>
		// КАЛИБРОВКА
		case 4: break;
		// ЛОГГИРОВАНИЕ
		case 5: screen=Logging_options_screen; break;
 8018a14:	4b09      	ldr	r3, [pc, #36]	; (8018a3c <Option_screen_S4+0x78>)
 8018a16:	220c      	movs	r2, #12
 8018a18:	701a      	strb	r2, [r3, #0]
 8018a1a:	bf00      	nop
		// ТЕХ ПАРАМЕТРЫ
		case 7: break;
		// СЕРВИСНОЕ МЕНЮ
		case 8: break;
	}
	Menu_num=0;
 8018a1c:	4b06      	ldr	r3, [pc, #24]	; (8018a38 <Option_screen_S4+0x74>)
 8018a1e:	2200      	movs	r2, #0
 8018a20:	701a      	strb	r2, [r3, #0]
	old_active_string=0xFF;
 8018a22:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <Option_screen_S4+0x7c>)
 8018a24:	22ff      	movs	r2, #255	; 0xff
 8018a26:	701a      	strb	r2, [r3, #0]
	edit_param=0;
 8018a28:	4b06      	ldr	r3, [pc, #24]	; (8018a44 <Option_screen_S4+0x80>)
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	701a      	strb	r2, [r3, #0]
}
 8018a2e:	bf00      	nop
 8018a30:	46bd      	mov	sp, r7
 8018a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a36:	4770      	bx	lr
 8018a38:	20000399 	.word	0x20000399
 8018a3c:	2000004c 	.word	0x2000004c
 8018a40:	20000398 	.word	0x20000398
 8018a44:	20000852 	.word	0x20000852

08018a48 <menu_timer>:
//
//------------------------------------------------------------------------------------------------------------------

uint8_t menu_delay = 0;
void menu_timer(void)
{
 8018a48:	b480      	push	{r7}
 8018a4a:	af00      	add	r7, sp, #0
	if(++menu_delay==25)
 8018a4c:	4b16      	ldr	r3, [pc, #88]	; (8018aa8 <menu_timer+0x60>)
 8018a4e:	781b      	ldrb	r3, [r3, #0]
 8018a50:	3301      	adds	r3, #1
 8018a52:	b2da      	uxtb	r2, r3
 8018a54:	4b14      	ldr	r3, [pc, #80]	; (8018aa8 <menu_timer+0x60>)
 8018a56:	701a      	strb	r2, [r3, #0]
 8018a58:	4b13      	ldr	r3, [pc, #76]	; (8018aa8 <menu_timer+0x60>)
 8018a5a:	781b      	ldrb	r3, [r3, #0]
 8018a5c:	2b19      	cmp	r3, #25
 8018a5e:	d11e      	bne.n	8018a9e <menu_timer+0x56>
	{
		if(float_menu>0)float_menu--;
 8018a60:	4b12      	ldr	r3, [pc, #72]	; (8018aac <menu_timer+0x64>)
 8018a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	dd08      	ble.n	8018a7c <menu_timer+0x34>
 8018a6a:	4b10      	ldr	r3, [pc, #64]	; (8018aac <menu_timer+0x64>)
 8018a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a70:	b29b      	uxth	r3, r3
 8018a72:	3b01      	subs	r3, #1
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	b21a      	sxth	r2, r3
 8018a78:	4b0c      	ldr	r3, [pc, #48]	; (8018aac <menu_timer+0x64>)
 8018a7a:	801a      	strh	r2, [r3, #0]
		if(float_menu<0)float_menu++;
 8018a7c:	4b0b      	ldr	r3, [pc, #44]	; (8018aac <menu_timer+0x64>)
 8018a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	da08      	bge.n	8018a98 <menu_timer+0x50>
 8018a86:	4b09      	ldr	r3, [pc, #36]	; (8018aac <menu_timer+0x64>)
 8018a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	3301      	adds	r3, #1
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	b21a      	sxth	r2, r3
 8018a94:	4b05      	ldr	r3, [pc, #20]	; (8018aac <menu_timer+0x64>)
 8018a96:	801a      	strh	r2, [r3, #0]
		menu_delay=0;
 8018a98:	4b03      	ldr	r3, [pc, #12]	; (8018aa8 <menu_timer+0x60>)
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	701a      	strb	r2, [r3, #0]
	}
}
 8018a9e:	bf00      	nop
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa6:	4770      	bx	lr
 8018aa8:	20001c4c 	.word	0x20001c4c
 8018aac:	20001c4a 	.word	0x20001c4a

08018ab0 <MX_USB_DEVICE_Init>:




void MX_USB_DEVICE_Init(void)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	490a      	ldr	r1, [pc, #40]	; (8018ae0 <MX_USB_DEVICE_Init+0x30>)
 8018ab8:	480a      	ldr	r0, [pc, #40]	; (8018ae4 <MX_USB_DEVICE_Init+0x34>)
 8018aba:	f001 f965 	bl	8019d88 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC_CDC);
 8018abe:	490a      	ldr	r1, [pc, #40]	; (8018ae8 <MX_USB_DEVICE_Init+0x38>)
 8018ac0:	4808      	ldr	r0, [pc, #32]	; (8018ae4 <MX_USB_DEVICE_Init+0x34>)
 8018ac2:	f001 f995 	bl	8019df0 <USBD_RegisterClass>

	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8018ac6:	4909      	ldr	r1, [pc, #36]	; (8018aec <MX_USB_DEVICE_Init+0x3c>)
 8018ac8:	4806      	ldr	r0, [pc, #24]	; (8018ae4 <MX_USB_DEVICE_Init+0x34>)
 8018aca:	f000 fb3c 	bl	8019146 <USBD_CDC_RegisterInterface>
	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018ace:	4908      	ldr	r1, [pc, #32]	; (8018af0 <MX_USB_DEVICE_Init+0x40>)
 8018ad0:	4804      	ldr	r0, [pc, #16]	; (8018ae4 <MX_USB_DEVICE_Init+0x34>)
 8018ad2:	f002 fd9d 	bl	801b610 <USBD_MSC_RegisterStorage>
	USBD_Start(&hUsbDeviceFS);
 8018ad6:	4803      	ldr	r0, [pc, #12]	; (8018ae4 <MX_USB_DEVICE_Init+0x34>)
 8018ad8:	f001 f9b1 	bl	8019e3e <USBD_Start>
}
 8018adc:	bf00      	nop
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	20000560 	.word	0x20000560
 8018ae4:	20008740 	.word	0x20008740
 8018ae8:	200003dc 	.word	0x200003dc
 8018aec:	2000054c 	.word	0x2000054c
 8018af0:	20000604 	.word	0x20000604

08018af4 <USBD_MSC_CDC_GetDeviceQualifierDescriptor>:
};



uint8_t *USBD_MSC_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018af4:	b480      	push	{r7}
 8018af6:	b083      	sub	sp, #12
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_DeviceQualifierDesc);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	220a      	movs	r2, #10
 8018b00:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_DeviceQualifierDesc;
 8018b02:	4b03      	ldr	r3, [pc, #12]	; (8018b10 <USBD_MSC_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018b04:	4618      	mov	r0, r3
 8018b06:	370c      	adds	r7, #12
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0e:	4770      	bx	lr
 8018b10:	20000540 	.word	0x20000540

08018b14 <USBD_MSC_CDC_GetOtherSpeedCfgDesc>:


uint8_t *USBD_MSC_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018b14:	b480      	push	{r7}
 8018b16:	b083      	sub	sp, #12
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_OtherSpeedCfgDesc);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2262      	movs	r2, #98	; 0x62
 8018b20:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_OtherSpeedCfgDesc;
 8018b22:	4b03      	ldr	r3, [pc, #12]	; (8018b30 <USBD_MSC_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	370c      	adds	r7, #12
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2e:	4770      	bx	lr
 8018b30:	200004dc 	.word	0x200004dc

08018b34 <USBD_MSC_CDC_GetHSCfgDesc>:

uint8_t *USBD_MSC_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018b34:	b480      	push	{r7}
 8018b36:	b083      	sub	sp, #12
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgHSDesc);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2262      	movs	r2, #98	; 0x62
 8018b40:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgHSDesc;
 8018b42:	4b03      	ldr	r3, [pc, #12]	; (8018b50 <USBD_MSC_CDC_GetHSCfgDesc+0x1c>)
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	370c      	adds	r7, #12
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr
 8018b50:	20000414 	.word	0x20000414

08018b54 <USBD_MSC_CDC_GetFSCfgDesc>:


uint8_t *USBD_MSC_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018b54:	b480      	push	{r7}
 8018b56:	b083      	sub	sp, #12
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CDC_CfgFSDesc);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2262      	movs	r2, #98	; 0x62
 8018b60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CDC_CfgFSDesc;
 8018b62:	4b03      	ldr	r3, [pc, #12]	; (8018b70 <USBD_MSC_CDC_GetFSCfgDesc+0x1c>)
}
 8018b64:	4618      	mov	r0, r3
 8018b66:	370c      	adds	r7, #12
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6e:	4770      	bx	lr
 8018b70:	20000478 	.word	0x20000478

08018b74 <USBD_MSC_CDC_Init>:


// Инициализация композитного устройства
static uint8_t  USBD_MSC_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b084      	sub	sp, #16
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	460b      	mov	r3, r1
 8018b7e:	70fb      	strb	r3, [r7, #3]
	/* MSC initialization */
	uint8_t ret = USBD_MSC_Init (pdev, cfgidx);
 8018b80:	78fb      	ldrb	r3, [r7, #3]
 8018b82:	4619      	mov	r1, r3
 8018b84:	6878      	ldr	r0, [r7, #4]
 8018b86:	f002 fbb8 	bl	801b2fa <USBD_MSC_Init>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018b8e:	7bfb      	ldrb	r3, [r7, #15]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d001      	beq.n	8018b98 <USBD_MSC_CDC_Init+0x24>
			return ret;
 8018b94:	7bfb      	ldrb	r3, [r7, #15]
 8018b96:	e00c      	b.n	8018bb2 <USBD_MSC_CDC_Init+0x3e>

	/* CDC initialization */
	ret = USBD_CDC_Init (pdev, cfgidx);
 8018b98:	78fb      	ldrb	r3, [r7, #3]
 8018b9a:	4619      	mov	r1, r3
 8018b9c:	6878      	ldr	r0, [r7, #4]
 8018b9e:	f000 f88b 	bl	8018cb8 <USBD_CDC_Init>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	73fb      	strb	r3, [r7, #15]
	if(ret != USBD_OK)
 8018ba6:	7bfb      	ldrb	r3, [r7, #15]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d001      	beq.n	8018bb0 <USBD_MSC_CDC_Init+0x3c>
			return ret;
 8018bac:	7bfb      	ldrb	r3, [r7, #15]
 8018bae:	e000      	b.n	8018bb2 <USBD_MSC_CDC_Init+0x3e>

	return USBD_OK;
 8018bb0:	2300      	movs	r3, #0
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3710      	adds	r7, #16
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}

08018bba <USBD_MSC_CDC_DeInit>:


// Деинициализация композитного устройства
static uint8_t  USBD_MSC_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018bba:	b580      	push	{r7, lr}
 8018bbc:	b082      	sub	sp, #8
 8018bbe:	af00      	add	r7, sp, #0
 8018bc0:	6078      	str	r0, [r7, #4]
 8018bc2:	460b      	mov	r3, r1
 8018bc4:	70fb      	strb	r3, [r7, #3]
       	/* MSC De-initialization */
       	USBD_MSC_DeInit(pdev, cfgidx);
 8018bc6:	78fb      	ldrb	r3, [r7, #3]
 8018bc8:	4619      	mov	r1, r3
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f002 fbe2 	bl	801b394 <USBD_MSC_DeInit>

       	/* CDC De-initialization */
       	USBD_CDC_DeInit(pdev, cfgidx);
 8018bd0:	78fb      	ldrb	r3, [r7, #3]
 8018bd2:	4619      	mov	r1, r3
 8018bd4:	6878      	ldr	r0, [r7, #4]
 8018bd6:	f000 f8ed 	bl	8018db4 <USBD_CDC_DeInit>

       	return USBD_OK;
 8018bda:	2300      	movs	r3, #0
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	3708      	adds	r7, #8
 8018be0:	46bd      	mov	sp, r7
 8018be2:	bd80      	pop	{r7, pc}

08018be4 <USBD_MSC_CDC_Setup>:



// Setup для композитного устройства
static uint8_t  USBD_MSC_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b082      	sub	sp, #8
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
 8018bec:	6039      	str	r1, [r7, #0]
	// Route requests to MSC interface or its endpoints to MSC class implementaion
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	781b      	ldrb	r3, [r3, #0]
 8018bf2:	f003 0303 	and.w	r3, r3, #3
 8018bf6:	2b01      	cmp	r3, #1
 8018bf8:	d103      	bne.n	8018c02 <USBD_MSC_CDC_Setup+0x1e>
 8018bfa:	683b      	ldr	r3, [r7, #0]
 8018bfc:	889b      	ldrh	r3, [r3, #4]
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d00b      	beq.n	8018c1a <USBD_MSC_CDC_Setup+0x36>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	781b      	ldrb	r3, [r3, #0]
 8018c06:	f003 0303 	and.w	r3, r3, #3
	if(((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE && req->wIndex == MSC_OUT_EP) ||
 8018c0a:	2b02      	cmp	r3, #2
 8018c0c:	d10b      	bne.n	8018c26 <USBD_MSC_CDC_Setup+0x42>
		((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_ENDPOINT && ((req->wIndex & 0x7F) == MSC_OUT_EP)))
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	889b      	ldrh	r3, [r3, #4]
 8018c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d105      	bne.n	8018c26 <USBD_MSC_CDC_Setup+0x42>
	{
		return USBD_MSC_Setup(pdev, req);
 8018c1a:	6839      	ldr	r1, [r7, #0]
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f002 fbe5 	bl	801b3ec <USBD_MSC_Setup>
 8018c22:	4603      	mov	r3, r0
 8018c24:	e004      	b.n	8018c30 <USBD_MSC_CDC_Setup+0x4c>
	}

	return USBD_CDC_Setup(pdev, req);
 8018c26:	6839      	ldr	r1, [r7, #0]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f000 f8ff 	bl	8018e2c <USBD_CDC_Setup>
 8018c2e:	4603      	mov	r3, r0
}
 8018c30:	4618      	mov	r0, r3
 8018c32:	3708      	adds	r7, #8
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}

08018c38 <USBD_MSC_CDC_DataIn>:


// Data IN для композитного устройства
static uint8_t  USBD_MSC_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b082      	sub	sp, #8
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
 8018c40:	460b      	mov	r3, r1
 8018c42:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018c44:	78fb      	ldrb	r3, [r7, #3]
 8018c46:	2b01      	cmp	r3, #1
 8018c48:	d106      	bne.n	8018c58 <USBD_MSC_CDC_DataIn+0x20>
		return USBD_MSC_DataIn(pdev, epnum);
 8018c4a:	78fb      	ldrb	r3, [r7, #3]
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	6878      	ldr	r0, [r7, #4]
 8018c50:	f002 fcbe 	bl	801b5d0 <USBD_MSC_DataIn>
 8018c54:	4603      	mov	r3, r0
 8018c56:	e005      	b.n	8018c64 <USBD_MSC_CDC_DataIn+0x2c>

	return USBD_CDC_DataIn(pdev, epnum);
 8018c58:	78fb      	ldrb	r3, [r7, #3]
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f000 f9b3 	bl	8018fc8 <USBD_CDC_DataIn>
 8018c62:	4603      	mov	r3, r0
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	3708      	adds	r7, #8
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd80      	pop	{r7, pc}

08018c6c <USBD_MSC_CDC_DataOut>:


// Data OUT для композитного устройства
static uint8_t  USBD_MSC_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b082      	sub	sp, #8
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
 8018c74:	460b      	mov	r3, r1
 8018c76:	70fb      	strb	r3, [r7, #3]
	if(epnum == MSC_OUT_EP)
 8018c78:	78fb      	ldrb	r3, [r7, #3]
 8018c7a:	2b01      	cmp	r3, #1
 8018c7c:	d106      	bne.n	8018c8c <USBD_MSC_CDC_DataOut+0x20>
		return USBD_MSC_DataOut(pdev, epnum);
 8018c7e:	78fb      	ldrb	r3, [r7, #3]
 8018c80:	4619      	mov	r1, r3
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f002 fcb4 	bl	801b5f0 <USBD_MSC_DataOut>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	e005      	b.n	8018c98 <USBD_MSC_CDC_DataOut+0x2c>

	return USBD_CDC_DataOut(pdev, epnum);
 8018c8c:	78fb      	ldrb	r3, [r7, #3]
 8018c8e:	4619      	mov	r1, r3
 8018c90:	6878      	ldr	r0, [r7, #4]
 8018c92:	f000 f9fe 	bl	8019092 <USBD_CDC_DataOut>
 8018c96:	4603      	mov	r3, r0
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	3708      	adds	r7, #8
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}

08018ca0 <USBD_MSC_CDC_EP0_RxReady>:


// Обработчик приема EP0
static uint8_t  USBD_MSC_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
    	return USBD_CDC_EP0_RxReady(pdev);
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f000 fa1d 	bl	80190e8 <USBD_CDC_EP0_RxReady>
 8018cae:	4603      	mov	r3, r0
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3708      	adds	r7, #8
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}

08018cb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b084      	sub	sp, #16
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	460b      	mov	r3, r1
 8018cc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hcdc;


  hcdc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 8018cc4:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8018cc8:	f001 f840 	bl	8019d4c <USBD_static_malloc>
 8018ccc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d105      	bne.n	8018ce0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassDataCDC = NULL;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    return (uint8_t)USBD_EMEM;
 8018cdc:	2302      	movs	r3, #2
 8018cde:	e065      	b.n	8018dac <USBD_CDC_Init+0xf4>
  }

  pdev->pClassDataCDC = (void *)hcdc;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	68fa      	ldr	r2, [r7, #12]
 8018ce4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	7c1b      	ldrb	r3, [r3, #16]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d118      	bne.n	8018d22 <USBD_CDC_Init+0x6a>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018cf0:	2340      	movs	r3, #64	; 0x40
 8018cf2:	2202      	movs	r2, #2
 8018cf4:	2183      	movs	r1, #131	; 0x83
 8018cf6:	6878      	ldr	r0, [r7, #4]
 8018cf8:	f000 fdde 	bl	80198b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2201      	movs	r2, #1
 8018d00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018d04:	2340      	movs	r3, #64	; 0x40
 8018d06:	2202      	movs	r2, #2
 8018d08:	2103      	movs	r1, #3
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	f000 fdd4 	bl	80198b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2201      	movs	r2, #1
 8018d14:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2264      	movs	r2, #100	; 0x64
 8018d1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8018d20:	e017      	b.n	8018d52 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8018d22:	2340      	movs	r3, #64	; 0x40
 8018d24:	2202      	movs	r2, #2
 8018d26:	2183      	movs	r1, #131	; 0x83
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f000 fdc5 	bl	80198b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	2201      	movs	r2, #1
 8018d32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8018d36:	2340      	movs	r3, #64	; 0x40
 8018d38:	2202      	movs	r2, #2
 8018d3a:	2103      	movs	r1, #3
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f000 fdbb 	bl	80198b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	2201      	movs	r2, #1
 8018d46:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	2264      	movs	r2, #100	; 0x64
 8018d4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018d52:	2340      	movs	r3, #64	; 0x40
 8018d54:	2203      	movs	r2, #3
 8018d56:	2182      	movs	r1, #130	; 0x82
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	f000 fdad 	bl	80198b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	2201      	movs	r2, #1
 8018d62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Init();
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	2200      	movs	r2, #0
 8018d74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hcdc->RxState = 0U;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	7c1b      	ldrb	r3, [r3, #16]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d108      	bne.n	8018d9a <USBD_CDC_Init+0xe2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018d8e:	2340      	movs	r3, #64	; 0x40
 8018d90:	2103      	movs	r1, #3
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f000 ff40 	bl	8019c18 <USBD_LL_PrepareReceive>
 8018d98:	e007      	b.n	8018daa <USBD_CDC_Init+0xf2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8018da0:	2340      	movs	r3, #64	; 0x40
 8018da2:	2103      	movs	r1, #3
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	f000 ff37 	bl	8019c18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018daa:	2300      	movs	r3, #0
}
 8018dac:	4618      	mov	r0, r3
 8018dae:	3710      	adds	r7, #16
 8018db0:	46bd      	mov	sp, r7
 8018db2:	bd80      	pop	{r7, pc}

08018db4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b082      	sub	sp, #8
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
 8018dbc:	460b      	mov	r3, r1
 8018dbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018dc0:	2183      	movs	r1, #131	; 0x83
 8018dc2:	6878      	ldr	r0, [r7, #4]
 8018dc4:	f000 fdb6 	bl	8019934 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018dd0:	2103      	movs	r1, #3
 8018dd2:	6878      	ldr	r0, [r7, #4]
 8018dd4:	f000 fdae 	bl	8019934 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8018de0:	2182      	movs	r1, #130	; 0x82
 8018de2:	6878      	ldr	r0, [r7, #4]
 8018de4:	f000 fda6 	bl	8019934 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2200      	movs	r2, #0
 8018dec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2200      	movs	r2, #0
 8018df4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCDC != NULL)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d00e      	beq.n	8018e20 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->DeInit();
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e08:	685b      	ldr	r3, [r3, #4]
 8018e0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCDC);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018e12:	4618      	mov	r0, r3
 8018e14:	f000 ffa8 	bl	8019d68 <USBD_static_free>
    pdev->pClassDataCDC = NULL;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  }

  return (uint8_t)USBD_OK;
 8018e20:	2300      	movs	r3, #0
}
 8018e22:	4618      	mov	r0, r3
 8018e24:	3708      	adds	r7, #8
 8018e26:	46bd      	mov	sp, r7
 8018e28:	bd80      	pop	{r7, pc}
	...

08018e2c <USBD_CDC_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b086      	sub	sp, #24
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
 8018e34:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018e3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018e42:	2300      	movs	r3, #0
 8018e44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018e46:	2300      	movs	r3, #0
 8018e48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018e4a:	693b      	ldr	r3, [r7, #16]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d101      	bne.n	8018e54 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8018e50:	2303      	movs	r3, #3
 8018e52:	e0b5      	b.n	8018fc0 <USBD_CDC_Setup+0x194>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d045      	beq.n	8018eec <USBD_CDC_Setup+0xc0>
 8018e60:	2b20      	cmp	r3, #32
 8018e62:	f040 80a5 	bne.w	8018fb0 <USBD_CDC_Setup+0x184>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8018e66:	683b      	ldr	r3, [r7, #0]
 8018e68:	88db      	ldrh	r3, [r3, #6]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d034      	beq.n	8018ed8 <USBD_CDC_Setup+0xac>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	781b      	ldrb	r3, [r3, #0]
 8018e72:	b25b      	sxtb	r3, r3
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	da1a      	bge.n	8018eae <USBD_CDC_Setup+0x82>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018e7e:	689b      	ldr	r3, [r3, #8]
 8018e80:	683a      	ldr	r2, [r7, #0]
 8018e82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018e84:	693a      	ldr	r2, [r7, #16]
 8018e86:	f502 711d 	add.w	r1, r2, #628	; 0x274
          ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018e8a:	683a      	ldr	r2, [r7, #0]
 8018e8c:	88d2      	ldrh	r2, [r2, #6]
 8018e8e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	88db      	ldrh	r3, [r3, #6]
 8018e94:	2b08      	cmp	r3, #8
 8018e96:	bf28      	it	cs
 8018e98:	2308      	movcs	r3, #8
 8018e9a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8018e9c:	693b      	ldr	r3, [r7, #16]
 8018e9e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8018ea2:	89fa      	ldrh	r2, [r7, #14]
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	6878      	ldr	r0, [r7, #4]
 8018ea8:	f002 f9a7 	bl	801b1fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8018eac:	e087      	b.n	8018fbe <USBD_CDC_Setup+0x192>
          hcdc->CmdOpCode = req->bRequest;
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	785a      	ldrb	r2, [r3, #1]
 8018eb2:	693b      	ldr	r3, [r7, #16]
 8018eb4:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	88db      	ldrh	r3, [r3, #6]
 8018ebc:	b2da      	uxtb	r2, r3
 8018ebe:	693b      	ldr	r3, [r7, #16]
 8018ec0:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8018ec4:	693b      	ldr	r3, [r7, #16]
 8018ec6:	f503 711d 	add.w	r1, r3, #628	; 0x274
 8018eca:	683b      	ldr	r3, [r7, #0]
 8018ecc:	88db      	ldrh	r3, [r3, #6]
 8018ece:	461a      	mov	r2, r3
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f002 f9be 	bl	801b252 <USBD_CtlPrepareRx>
      break;
 8018ed6:	e072      	b.n	8018fbe <USBD_CDC_Setup+0x192>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(req->bRequest,
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018ede:	689b      	ldr	r3, [r3, #8]
 8018ee0:	683a      	ldr	r2, [r7, #0]
 8018ee2:	7850      	ldrb	r0, [r2, #1]
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	6839      	ldr	r1, [r7, #0]
 8018ee8:	4798      	blx	r3
      break;
 8018eea:	e068      	b.n	8018fbe <USBD_CDC_Setup+0x192>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	785b      	ldrb	r3, [r3, #1]
 8018ef0:	2b0b      	cmp	r3, #11
 8018ef2:	d852      	bhi.n	8018f9a <USBD_CDC_Setup+0x16e>
 8018ef4:	a201      	add	r2, pc, #4	; (adr r2, 8018efc <USBD_CDC_Setup+0xd0>)
 8018ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018efa:	bf00      	nop
 8018efc:	08018f2d 	.word	0x08018f2d
 8018f00:	08018fa9 	.word	0x08018fa9
 8018f04:	08018f9b 	.word	0x08018f9b
 8018f08:	08018f9b 	.word	0x08018f9b
 8018f0c:	08018f9b 	.word	0x08018f9b
 8018f10:	08018f9b 	.word	0x08018f9b
 8018f14:	08018f9b 	.word	0x08018f9b
 8018f18:	08018f9b 	.word	0x08018f9b
 8018f1c:	08018f9b 	.word	0x08018f9b
 8018f20:	08018f9b 	.word	0x08018f9b
 8018f24:	08018f57 	.word	0x08018f57
 8018f28:	08018f81 	.word	0x08018f81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	2b03      	cmp	r3, #3
 8018f36:	d107      	bne.n	8018f48 <USBD_CDC_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018f38:	f107 030a 	add.w	r3, r7, #10
 8018f3c:	2202      	movs	r2, #2
 8018f3e:	4619      	mov	r1, r3
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f002 f95a 	bl	801b1fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018f46:	e032      	b.n	8018fae <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 8018f48:	6839      	ldr	r1, [r7, #0]
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f001 ffc2 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8018f50:	2303      	movs	r3, #3
 8018f52:	75fb      	strb	r3, [r7, #23]
          break;
 8018f54:	e02b      	b.n	8018fae <USBD_CDC_Setup+0x182>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	2b03      	cmp	r3, #3
 8018f60:	d107      	bne.n	8018f72 <USBD_CDC_Setup+0x146>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8018f62:	f107 030d 	add.w	r3, r7, #13
 8018f66:	2201      	movs	r2, #1
 8018f68:	4619      	mov	r1, r3
 8018f6a:	6878      	ldr	r0, [r7, #4]
 8018f6c:	f002 f945 	bl	801b1fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018f70:	e01d      	b.n	8018fae <USBD_CDC_Setup+0x182>
            USBD_CtlError(pdev, req);
 8018f72:	6839      	ldr	r1, [r7, #0]
 8018f74:	6878      	ldr	r0, [r7, #4]
 8018f76:	f001 ffad 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8018f7a:	2303      	movs	r3, #3
 8018f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8018f7e:	e016      	b.n	8018fae <USBD_CDC_Setup+0x182>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	2b03      	cmp	r3, #3
 8018f8a:	d00f      	beq.n	8018fac <USBD_CDC_Setup+0x180>
          {
            USBD_CtlError(pdev, req);
 8018f8c:	6839      	ldr	r1, [r7, #0]
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f001 ffa0 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 8018f94:	2303      	movs	r3, #3
 8018f96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8018f98:	e008      	b.n	8018fac <USBD_CDC_Setup+0x180>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8018f9a:	6839      	ldr	r1, [r7, #0]
 8018f9c:	6878      	ldr	r0, [r7, #4]
 8018f9e:	f001 ff99 	bl	801aed4 <USBD_CtlError>
          ret = USBD_FAIL;
 8018fa2:	2303      	movs	r3, #3
 8018fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8018fa6:	e002      	b.n	8018fae <USBD_CDC_Setup+0x182>
          break;
 8018fa8:	bf00      	nop
 8018faa:	e008      	b.n	8018fbe <USBD_CDC_Setup+0x192>
          break;
 8018fac:	bf00      	nop
      }
      break;
 8018fae:	e006      	b.n	8018fbe <USBD_CDC_Setup+0x192>

    default:
      USBD_CtlError(pdev, req);
 8018fb0:	6839      	ldr	r1, [r7, #0]
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f001 ff8e 	bl	801aed4 <USBD_CtlError>
      ret = USBD_FAIL;
 8018fb8:	2303      	movs	r3, #3
 8018fba:	75fb      	strb	r3, [r7, #23]
      break;
 8018fbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8018fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3718      	adds	r7, #24
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}

08018fc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b084      	sub	sp, #16
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
 8018fd0:	460b      	mov	r3, r1
 8018fd2:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8018fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d101      	bne.n	8018fea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018fe6:	2303      	movs	r3, #3
 8018fe8:	e04f      	b.n	801908a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ff0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8018ff2:	78fa      	ldrb	r2, [r7, #3]
 8018ff4:	6879      	ldr	r1, [r7, #4]
 8018ff6:	4613      	mov	r3, r2
 8018ff8:	009b      	lsls	r3, r3, #2
 8018ffa:	4413      	add	r3, r2
 8018ffc:	009b      	lsls	r3, r3, #2
 8018ffe:	440b      	add	r3, r1
 8019000:	3318      	adds	r3, #24
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d029      	beq.n	801905c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8019008:	78fa      	ldrb	r2, [r7, #3]
 801900a:	6879      	ldr	r1, [r7, #4]
 801900c:	4613      	mov	r3, r2
 801900e:	009b      	lsls	r3, r3, #2
 8019010:	4413      	add	r3, r2
 8019012:	009b      	lsls	r3, r3, #2
 8019014:	440b      	add	r3, r1
 8019016:	3318      	adds	r3, #24
 8019018:	681a      	ldr	r2, [r3, #0]
 801901a:	78f9      	ldrb	r1, [r7, #3]
 801901c:	68f8      	ldr	r0, [r7, #12]
 801901e:	460b      	mov	r3, r1
 8019020:	00db      	lsls	r3, r3, #3
 8019022:	1a5b      	subs	r3, r3, r1
 8019024:	009b      	lsls	r3, r3, #2
 8019026:	4403      	add	r3, r0
 8019028:	3344      	adds	r3, #68	; 0x44
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	fbb2 f1f3 	udiv	r1, r2, r3
 8019030:	fb03 f301 	mul.w	r3, r3, r1
 8019034:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8019036:	2b00      	cmp	r3, #0
 8019038:	d110      	bne.n	801905c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801903a:	78fa      	ldrb	r2, [r7, #3]
 801903c:	6879      	ldr	r1, [r7, #4]
 801903e:	4613      	mov	r3, r2
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	4413      	add	r3, r2
 8019044:	009b      	lsls	r3, r3, #2
 8019046:	440b      	add	r3, r1
 8019048:	3318      	adds	r3, #24
 801904a:	2200      	movs	r2, #0
 801904c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801904e:	78f9      	ldrb	r1, [r7, #3]
 8019050:	2300      	movs	r3, #0
 8019052:	2200      	movs	r2, #0
 8019054:	6878      	ldr	r0, [r7, #4]
 8019056:	f000 fda7 	bl	8019ba8 <USBD_LL_Transmit>
 801905a:	e015      	b.n	8019088 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	2200      	movs	r2, #0
 8019060:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt != NULL)
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801906a:	691b      	ldr	r3, [r3, #16]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d00b      	beq.n	8019088 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019076:	691b      	ldr	r3, [r3, #16]
 8019078:	68ba      	ldr	r2, [r7, #8]
 801907a:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
 801907e:	68ba      	ldr	r2, [r7, #8]
 8019080:	f502 7131 	add.w	r1, r2, #708	; 0x2c4
 8019084:	78fa      	ldrb	r2, [r7, #3]
 8019086:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8019088:	2300      	movs	r3, #0
}
 801908a:	4618      	mov	r0, r3
 801908c:	3710      	adds	r7, #16
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}

08019092 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019092:	b580      	push	{r7, lr}
 8019094:	b084      	sub	sp, #16
 8019096:	af00      	add	r7, sp, #0
 8019098:	6078      	str	r0, [r7, #4]
 801909a:	460b      	mov	r3, r1
 801909c:	70fb      	strb	r3, [r7, #3]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d101      	bne.n	80190b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80190b0:	2303      	movs	r3, #3
 80190b2:	e015      	b.n	80190e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80190b4:	78fb      	ldrb	r3, [r7, #3]
 80190b6:	4619      	mov	r1, r3
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f000 fde5 	bl	8019c88 <USBD_LL_GetRxDataSize>
 80190be:	4602      	mov	r2, r0
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80190cc:	68db      	ldr	r3, [r3, #12]
 80190ce:	68fa      	ldr	r2, [r7, #12]
 80190d0:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
 80190d4:	68fa      	ldr	r2, [r7, #12]
 80190d6:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 80190da:	4611      	mov	r1, r2
 80190dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80190de:	2300      	movs	r3, #0
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	3710      	adds	r7, #16
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}

080190e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b084      	sub	sp, #16
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d101      	bne.n	8019102 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80190fe:	2303      	movs	r3, #3
 8019100:	e01d      	b.n	801913e <USBD_CDC_EP0_RxReady+0x56>
  }

  if ((pdev->pUserDataCDC != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019108:	2b00      	cmp	r3, #0
 801910a:	d017      	beq.n	801913c <USBD_CDC_EP0_RxReady+0x54>
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 8019112:	2bff      	cmp	r3, #255	; 0xff
 8019114:	d012      	beq.n	801913c <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801911c:	689b      	ldr	r3, [r3, #8]
 801911e:	68fa      	ldr	r2, [r7, #12]
 8019120:	f892 02b4 	ldrb.w	r0, [r2, #692]	; 0x2b4
                                                      (uint8_t *)hcdc->data,
 8019124:	68fa      	ldr	r2, [r7, #12]
 8019126:	f502 711d 	add.w	r1, r2, #628	; 0x274
                                                      (uint16_t)hcdc->CmdLength);
 801912a:	68fa      	ldr	r2, [r7, #12]
 801912c:	f892 22b5 	ldrb.w	r2, [r2, #693]	; 0x2b5
    ((USBD_CDC_ItfTypeDef *)pdev->pUserDataCDC)->Control(hcdc->CmdOpCode,
 8019130:	b292      	uxth	r2, r2
 8019132:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	22ff      	movs	r2, #255	; 0xff
 8019138:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
  }

  return (uint8_t)USBD_OK;
 801913c:	2300      	movs	r3, #0
}
 801913e:	4618      	mov	r0, r3
 8019140:	3710      	adds	r7, #16
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}

08019146 <USBD_CDC_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_CDC_ItfTypeDef *fops)
{
 8019146:	b480      	push	{r7}
 8019148:	b083      	sub	sp, #12
 801914a:	af00      	add	r7, sp, #0
 801914c:	6078      	str	r0, [r7, #4]
 801914e:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d101      	bne.n	801915a <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8019156:	2303      	movs	r3, #3
 8019158:	e004      	b.n	8019164 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserDataCDC = fops;
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	683a      	ldr	r2, [r7, #0]
 801915e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  return (uint8_t)USBD_OK;
 8019162:	2300      	movs	r3, #0
}
 8019164:	4618      	mov	r0, r3
 8019166:	370c      	adds	r7, #12
 8019168:	46bd      	mov	sp, r7
 801916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916e:	4770      	bx	lr

08019170 <USBD_CDC_SetTxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 8019170:	b480      	push	{r7}
 8019172:	b087      	sub	sp, #28
 8019174:	af00      	add	r7, sp, #0
 8019176:	60f8      	str	r0, [r7, #12]
 8019178:	60b9      	str	r1, [r7, #8]
 801917a:	607a      	str	r2, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019182:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8019184:	697b      	ldr	r3, [r7, #20]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d101      	bne.n	801918e <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801918a:	2303      	movs	r3, #3
 801918c:	e008      	b.n	80191a0 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801918e:	697b      	ldr	r3, [r7, #20]
 8019190:	68ba      	ldr	r2, [r7, #8]
 8019192:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  hcdc->TxLength = length;
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	687a      	ldr	r2, [r7, #4]
 801919a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 801919e:	2300      	movs	r3, #0
}
 80191a0:	4618      	mov	r0, r3
 80191a2:	371c      	adds	r7, #28
 80191a4:	46bd      	mov	sp, r7
 80191a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191aa:	4770      	bx	lr

080191ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80191ac:	b480      	push	{r7}
 80191ae:	b085      	sub	sp, #20
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
 80191b4:	6039      	str	r1, [r7, #0]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d101      	bne.n	80191c8 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80191c4:	2303      	movs	r3, #3
 80191c6:	e004      	b.n	80191d2 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	683a      	ldr	r2, [r7, #0]
 80191cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  return (uint8_t)USBD_OK;
 80191d0:	2300      	movs	r3, #0
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3714      	adds	r7, #20
 80191d6:	46bd      	mov	sp, r7
 80191d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191dc:	4770      	bx	lr

080191de <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80191de:	b580      	push	{r7, lr}
 80191e0:	b084      	sub	sp, #16
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191ec:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80191ee:	2301      	movs	r3, #1
 80191f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassDataCDC == NULL)
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d101      	bne.n	8019200 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80191fc:	2303      	movs	r3, #3
 80191fe:	e01a      	b.n	8019236 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019206:	2b00      	cmp	r3, #0
 8019208:	d114      	bne.n	8019234 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801920a:	68bb      	ldr	r3, [r7, #8]
 801920c:	2201      	movs	r2, #1
 801920e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
 8019222:	68bb      	ldr	r3, [r7, #8]
 8019224:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019228:	2183      	movs	r1, #131	; 0x83
 801922a:	6878      	ldr	r0, [r7, #4]
 801922c:	f000 fcbc 	bl	8019ba8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8019230:	2300      	movs	r3, #0
 8019232:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8019234:	7bfb      	ldrb	r3, [r7, #15]
}
 8019236:	4618      	mov	r0, r3
 8019238:	3710      	adds	r7, #16
 801923a:	46bd      	mov	sp, r7
 801923c:	bd80      	pop	{r7, pc}

0801923e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801923e:	b580      	push	{r7, lr}
 8019240:	b084      	sub	sp, #16
 8019242:	af00      	add	r7, sp, #0
 8019244:	6078      	str	r0, [r7, #4]
	USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataCDC;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801924c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCDC == NULL)
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019254:	2b00      	cmp	r3, #0
 8019256:	d101      	bne.n	801925c <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8019258:	2303      	movs	r3, #3
 801925a:	e015      	b.n	8019288 <USBD_CDC_ReceivePacket+0x4a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	7c1b      	ldrb	r3, [r3, #16]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d108      	bne.n	8019276 <USBD_CDC_ReceivePacket+0x38>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 801926a:	2340      	movs	r3, #64	; 0x40
 801926c:	2103      	movs	r1, #3
 801926e:	6878      	ldr	r0, [r7, #4]
 8019270:	f000 fcd2 	bl	8019c18 <USBD_LL_PrepareReceive>
 8019274:	e007      	b.n	8019286 <USBD_CDC_ReceivePacket+0x48>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 801927c:	2340      	movs	r3, #64	; 0x40
 801927e:	2103      	movs	r1, #3
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f000 fcc9 	bl	8019c18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8019286:	2300      	movs	r3, #0
}
 8019288:	4618      	mov	r0, r3
 801928a:	3710      	adds	r7, #16
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}

08019290 <CDC_Init_FS>:
};



static int8_t CDC_Init_FS(void)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019294:	2200      	movs	r2, #0
 8019296:	4905      	ldr	r1, [pc, #20]	; (80192ac <CDC_Init_FS+0x1c>)
 8019298:	4805      	ldr	r0, [pc, #20]	; (80192b0 <CDC_Init_FS+0x20>)
 801929a:	f7ff ff69 	bl	8019170 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801929e:	4905      	ldr	r1, [pc, #20]	; (80192b4 <CDC_Init_FS+0x24>)
 80192a0:	4803      	ldr	r0, [pc, #12]	; (80192b0 <CDC_Init_FS+0x20>)
 80192a2:	f7ff ff83 	bl	80191ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80192a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80192a8:	4618      	mov	r0, r3
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	20008a18 	.word	0x20008a18
 80192b0:	20008740 	.word	0x20008740
 80192b4:	20009218 	.word	0x20009218

080192b8 <CDC_DeInit_FS>:



static int8_t CDC_DeInit_FS(void)
{
 80192b8:	b480      	push	{r7}
 80192ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80192bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80192be:	4618      	mov	r0, r3
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr

080192c8 <CDC_Control_FS>:


static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80192c8:	b480      	push	{r7}
 80192ca:	b083      	sub	sp, #12
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	4603      	mov	r3, r0
 80192d0:	6039      	str	r1, [r7, #0]
 80192d2:	71fb      	strb	r3, [r7, #7]
 80192d4:	4613      	mov	r3, r2
 80192d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80192d8:	79fb      	ldrb	r3, [r7, #7]
 80192da:	2b23      	cmp	r3, #35	; 0x23
 80192dc:	d84a      	bhi.n	8019374 <CDC_Control_FS+0xac>
 80192de:	a201      	add	r2, pc, #4	; (adr r2, 80192e4 <CDC_Control_FS+0x1c>)
 80192e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192e4:	08019375 	.word	0x08019375
 80192e8:	08019375 	.word	0x08019375
 80192ec:	08019375 	.word	0x08019375
 80192f0:	08019375 	.word	0x08019375
 80192f4:	08019375 	.word	0x08019375
 80192f8:	08019375 	.word	0x08019375
 80192fc:	08019375 	.word	0x08019375
 8019300:	08019375 	.word	0x08019375
 8019304:	08019375 	.word	0x08019375
 8019308:	08019375 	.word	0x08019375
 801930c:	08019375 	.word	0x08019375
 8019310:	08019375 	.word	0x08019375
 8019314:	08019375 	.word	0x08019375
 8019318:	08019375 	.word	0x08019375
 801931c:	08019375 	.word	0x08019375
 8019320:	08019375 	.word	0x08019375
 8019324:	08019375 	.word	0x08019375
 8019328:	08019375 	.word	0x08019375
 801932c:	08019375 	.word	0x08019375
 8019330:	08019375 	.word	0x08019375
 8019334:	08019375 	.word	0x08019375
 8019338:	08019375 	.word	0x08019375
 801933c:	08019375 	.word	0x08019375
 8019340:	08019375 	.word	0x08019375
 8019344:	08019375 	.word	0x08019375
 8019348:	08019375 	.word	0x08019375
 801934c:	08019375 	.word	0x08019375
 8019350:	08019375 	.word	0x08019375
 8019354:	08019375 	.word	0x08019375
 8019358:	08019375 	.word	0x08019375
 801935c:	08019375 	.word	0x08019375
 8019360:	08019375 	.word	0x08019375
 8019364:	08019375 	.word	0x08019375
 8019368:	08019375 	.word	0x08019375
 801936c:	08019375 	.word	0x08019375
 8019370:	08019375 	.word	0x08019375
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019374:	bf00      	nop
  }

  return (USBD_OK);
 8019376:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019378:	4618      	mov	r0, r3
 801937a:	370c      	adds	r7, #12
 801937c:	46bd      	mov	sp, r7
 801937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019382:	4770      	bx	lr

08019384 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b082      	sub	sp, #8
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
 801938c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(rx_buf+rxcntr, (char*)Buf, *Len);
 801938e:	4b0f      	ldr	r3, [pc, #60]	; (80193cc <CDC_Receive_FS+0x48>)
 8019390:	881b      	ldrh	r3, [r3, #0]
 8019392:	461a      	mov	r2, r3
 8019394:	4b0e      	ldr	r3, [pc, #56]	; (80193d0 <CDC_Receive_FS+0x4c>)
 8019396:	18d0      	adds	r0, r2, r3
 8019398:	683b      	ldr	r3, [r7, #0]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	461a      	mov	r2, r3
 801939e:	6879      	ldr	r1, [r7, #4]
 80193a0:	f004 fcb2 	bl	801dd08 <strncpy>
  	rxcntr+=*Len;
 80193a4:	683b      	ldr	r3, [r7, #0]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	b29a      	uxth	r2, r3
 80193aa:	4b08      	ldr	r3, [pc, #32]	; (80193cc <CDC_Receive_FS+0x48>)
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	4413      	add	r3, r2
 80193b0:	b29a      	uxth	r2, r3
 80193b2:	4b06      	ldr	r3, [pc, #24]	; (80193cc <CDC_Receive_FS+0x48>)
 80193b4:	801a      	strh	r2, [r3, #0]
  	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80193b6:	4807      	ldr	r0, [pc, #28]	; (80193d4 <CDC_Receive_FS+0x50>)
 80193b8:	f7ff ff41 	bl	801923e <USBD_CDC_ReceivePacket>
  	USBTimeOutRX=timeout_const;
 80193bc:	4b06      	ldr	r3, [pc, #24]	; (80193d8 <CDC_Receive_FS+0x54>)
 80193be:	2202      	movs	r2, #2
 80193c0:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80193c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80193c4:	4618      	mov	r0, r3
 80193c6:	3708      	adds	r7, #8
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	200008b2 	.word	0x200008b2
 80193d0:	20005b4c 	.word	0x20005b4c
 80193d4:	20008740 	.word	0x20008740
 80193d8:	20000184 	.word	0x20000184

080193dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80193dc:	b580      	push	{r7, lr}
 80193de:	b084      	sub	sp, #16
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
 80193e4:	460b      	mov	r3, r1
 80193e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80193e8:	2300      	movs	r3, #0
 80193ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDCMSC_HandleTypeDef *hcdc = (USBD_CDCMSC_HandleTypeDef*)hUsbDeviceFS.pClassDataCDC;
 80193ec:	4b18      	ldr	r3, [pc, #96]	; (8019450 <CDC_Transmit_FS+0x74>)
 80193ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193f2:	60bb      	str	r3, [r7, #8]
  USB_timeout=1500;
 80193f4:	4b17      	ldr	r3, [pc, #92]	; (8019454 <CDC_Transmit_FS+0x78>)
 80193f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80193fa:	601a      	str	r2, [r3, #0]
  while(hcdc->TxState!=0)
 80193fc:	e013      	b.n	8019426 <CDC_Transmit_FS+0x4a>
  {
	  USB_timeout--;
 80193fe:	4b15      	ldr	r3, [pc, #84]	; (8019454 <CDC_Transmit_FS+0x78>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	3b01      	subs	r3, #1
 8019404:	4a13      	ldr	r2, [pc, #76]	; (8019454 <CDC_Transmit_FS+0x78>)
 8019406:	6013      	str	r3, [r2, #0]
	  if(USB_timeout==0) {ERROR_REG|=(0x01<<USB_CVC_err); hcdc->TxState=0; break;}
 8019408:	4b12      	ldr	r3, [pc, #72]	; (8019454 <CDC_Transmit_FS+0x78>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d10a      	bne.n	8019426 <CDC_Transmit_FS+0x4a>
 8019410:	4b11      	ldr	r3, [pc, #68]	; (8019458 <CDC_Transmit_FS+0x7c>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	f043 0308 	orr.w	r3, r3, #8
 8019418:	4a0f      	ldr	r2, [pc, #60]	; (8019458 <CDC_Transmit_FS+0x7c>)
 801941a:	6013      	str	r3, [r2, #0]
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	2200      	movs	r2, #0
 8019420:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8019424:	e004      	b.n	8019430 <CDC_Transmit_FS+0x54>
  while(hcdc->TxState!=0)
 8019426:	68bb      	ldr	r3, [r7, #8]
 8019428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801942c:	2b00      	cmp	r3, #0
 801942e:	d1e6      	bne.n	80193fe <CDC_Transmit_FS+0x22>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019430:	887b      	ldrh	r3, [r7, #2]
 8019432:	461a      	mov	r2, r3
 8019434:	6879      	ldr	r1, [r7, #4]
 8019436:	4806      	ldr	r0, [pc, #24]	; (8019450 <CDC_Transmit_FS+0x74>)
 8019438:	f7ff fe9a 	bl	8019170 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801943c:	4804      	ldr	r0, [pc, #16]	; (8019450 <CDC_Transmit_FS+0x74>)
 801943e:	f7ff fece 	bl	80191de <USBD_CDC_TransmitPacket>
 8019442:	4603      	mov	r3, r0
 8019444:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019446:	7bfb      	ldrb	r3, [r7, #15]
}
 8019448:	4618      	mov	r0, r3
 801944a:	3710      	adds	r7, #16
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}
 8019450:	20008740 	.word	0x20008740
 8019454:	20001c50 	.word	0x20001c50
 8019458:	20000888 	.word	0x20000888

0801945c <CDC_TransmitCplt_FS>:



static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801945c:	b480      	push	{r7}
 801945e:	b087      	sub	sp, #28
 8019460:	af00      	add	r7, sp, #0
 8019462:	60f8      	str	r0, [r7, #12]
 8019464:	60b9      	str	r1, [r7, #8]
 8019466:	4613      	mov	r3, r2
 8019468:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801946a:	2300      	movs	r3, #0
 801946c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801946e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019472:	4618      	mov	r0, r3
 8019474:	371c      	adds	r7, #28
 8019476:	46bd      	mov	sp, r7
 8019478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947c:	4770      	bx	lr
	...

08019480 <HAL_PCD_MspInit>:




void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b0ae      	sub	sp, #184	; 0xb8
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019488:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801948c:	2200      	movs	r2, #0
 801948e:	601a      	str	r2, [r3, #0]
 8019490:	605a      	str	r2, [r3, #4]
 8019492:	609a      	str	r2, [r3, #8]
 8019494:	60da      	str	r2, [r3, #12]
 8019496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019498:	f107 0318 	add.w	r3, r7, #24
 801949c:	228c      	movs	r2, #140	; 0x8c
 801949e:	2100      	movs	r1, #0
 80194a0:	4618      	mov	r0, r3
 80194a2:	f003 fd89 	bl	801cfb8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80194ae:	d173      	bne.n	8019598 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80194b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80194b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80194b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80194ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80194be:	2303      	movs	r3, #3
 80194c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80194c2:	2301      	movs	r3, #1
 80194c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80194c6:	230c      	movs	r3, #12
 80194c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80194ca:	2302      	movs	r3, #2
 80194cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80194ce:	2302      	movs	r3, #2
 80194d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80194d2:	2302      	movs	r3, #2
 80194d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80194d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80194da:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80194dc:	f107 0318 	add.w	r3, r7, #24
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7f3 fb33 	bl	800cb4c <HAL_RCCEx_PeriphCLKConfig>
 80194e6:	4603      	mov	r3, r0
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d001      	beq.n	80194f0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80194ec:	f7ed f992 	bl	8006814 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80194f0:	4b2b      	ldr	r3, [pc, #172]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 80194f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80194f4:	4a2a      	ldr	r2, [pc, #168]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 80194f6:	f043 0301 	orr.w	r3, r3, #1
 80194fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80194fc:	4b28      	ldr	r3, [pc, #160]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 80194fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019500:	f003 0301 	and.w	r3, r3, #1
 8019504:	617b      	str	r3, [r7, #20]
 8019506:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019508:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801950c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019510:	2302      	movs	r3, #2
 8019512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019516:	2300      	movs	r3, #0
 8019518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801951c:	2303      	movs	r3, #3
 801951e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019522:	230a      	movs	r3, #10
 8019524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801952c:	4619      	mov	r1, r3
 801952e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019532:	f7f0 fc87 	bl	8009e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019536:	4b1a      	ldr	r3, [pc, #104]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 8019538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801953a:	4a19      	ldr	r2, [pc, #100]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 801953c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019542:	4b17      	ldr	r3, [pc, #92]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 8019544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801954a:	613b      	str	r3, [r7, #16]
 801954c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801954e:	4b14      	ldr	r3, [pc, #80]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 8019550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019556:	2b00      	cmp	r3, #0
 8019558:	d114      	bne.n	8019584 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801955a:	4b11      	ldr	r3, [pc, #68]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 801955c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801955e:	4a10      	ldr	r2, [pc, #64]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 8019560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019564:	6593      	str	r3, [r2, #88]	; 0x58
 8019566:	4b0e      	ldr	r3, [pc, #56]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 8019568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801956a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801956e:	60fb      	str	r3, [r7, #12]
 8019570:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8019572:	f7f2 fc7d 	bl	800be70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8019576:	4b0a      	ldr	r3, [pc, #40]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 8019578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801957a:	4a09      	ldr	r2, [pc, #36]	; (80195a0 <HAL_PCD_MspInit+0x120>)
 801957c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019580:	6593      	str	r3, [r2, #88]	; 0x58
 8019582:	e001      	b.n	8019588 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8019584:	f7f2 fc74 	bl	800be70 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019588:	2200      	movs	r2, #0
 801958a:	2100      	movs	r1, #0
 801958c:	2043      	movs	r0, #67	; 0x43
 801958e:	f7ef fe9b 	bl	80092c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019592:	2043      	movs	r0, #67	; 0x43
 8019594:	f7ef feb4 	bl	8009300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019598:	bf00      	nop
 801959a:	37b8      	adds	r7, #184	; 0xb8
 801959c:	46bd      	mov	sp, r7
 801959e:	bd80      	pop	{r7, pc}
 80195a0:	40021000 	.word	0x40021000

080195a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b082      	sub	sp, #8
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80195b8:	4619      	mov	r1, r3
 80195ba:	4610      	mov	r0, r2
 80195bc:	f000 fc8a 	bl	8019ed4 <USBD_LL_SetupStage>
}
 80195c0:	bf00      	nop
 80195c2:	3708      	adds	r7, #8
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b082      	sub	sp, #8
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
 80195d0:	460b      	mov	r3, r1
 80195d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80195da:	78fa      	ldrb	r2, [r7, #3]
 80195dc:	6879      	ldr	r1, [r7, #4]
 80195de:	4613      	mov	r3, r2
 80195e0:	00db      	lsls	r3, r3, #3
 80195e2:	1a9b      	subs	r3, r3, r2
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	440b      	add	r3, r1
 80195e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80195ec:	681a      	ldr	r2, [r3, #0]
 80195ee:	78fb      	ldrb	r3, [r7, #3]
 80195f0:	4619      	mov	r1, r3
 80195f2:	f000 fcc4 	bl	8019f7e <USBD_LL_DataOutStage>
}
 80195f6:	bf00      	nop
 80195f8:	3708      	adds	r7, #8
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}

080195fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195fe:	b580      	push	{r7, lr}
 8019600:	b082      	sub	sp, #8
 8019602:	af00      	add	r7, sp, #0
 8019604:	6078      	str	r0, [r7, #4]
 8019606:	460b      	mov	r3, r1
 8019608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019610:	78fa      	ldrb	r2, [r7, #3]
 8019612:	6879      	ldr	r1, [r7, #4]
 8019614:	4613      	mov	r3, r2
 8019616:	00db      	lsls	r3, r3, #3
 8019618:	1a9b      	subs	r3, r3, r2
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	440b      	add	r3, r1
 801961e:	3348      	adds	r3, #72	; 0x48
 8019620:	681a      	ldr	r2, [r3, #0]
 8019622:	78fb      	ldrb	r3, [r7, #3]
 8019624:	4619      	mov	r1, r3
 8019626:	f000 fd0d 	bl	801a044 <USBD_LL_DataInStage>
}
 801962a:	bf00      	nop
 801962c:	3708      	adds	r7, #8
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}

08019632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019632:	b580      	push	{r7, lr}
 8019634:	b082      	sub	sp, #8
 8019636:	af00      	add	r7, sp, #0
 8019638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019640:	4618      	mov	r0, r3
 8019642:	f000 fe21 	bl	801a288 <USBD_LL_SOF>
}
 8019646:	bf00      	nop
 8019648:	3708      	adds	r7, #8
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801964e:	b580      	push	{r7, lr}
 8019650:	b084      	sub	sp, #16
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019656:	2301      	movs	r3, #1
 8019658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	68db      	ldr	r3, [r3, #12]
 801965e:	2b02      	cmp	r3, #2
 8019660:	d001      	beq.n	8019666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019662:	f7ed f8d7 	bl	8006814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801966c:	7bfa      	ldrb	r2, [r7, #15]
 801966e:	4611      	mov	r1, r2
 8019670:	4618      	mov	r0, r3
 8019672:	f000 fdcb 	bl	801a20c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801967c:	4618      	mov	r0, r3
 801967e:	f000 fd77 	bl	801a170 <USBD_LL_Reset>
}
 8019682:	bf00      	nop
 8019684:	3710      	adds	r7, #16
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}
	...

0801968c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	687a      	ldr	r2, [r7, #4]
 80196a0:	6812      	ldr	r2, [r2, #0]
 80196a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80196a6:	f043 0301 	orr.w	r3, r3, #1
 80196aa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80196b2:	4618      	mov	r0, r3
 80196b4:	f000 fdba 	bl	801a22c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6a1b      	ldr	r3, [r3, #32]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d005      	beq.n	80196cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80196c0:	4b04      	ldr	r3, [pc, #16]	; (80196d4 <HAL_PCD_SuspendCallback+0x48>)
 80196c2:	691b      	ldr	r3, [r3, #16]
 80196c4:	4a03      	ldr	r2, [pc, #12]	; (80196d4 <HAL_PCD_SuspendCallback+0x48>)
 80196c6:	f043 0306 	orr.w	r3, r3, #6
 80196ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80196cc:	bf00      	nop
 80196ce:	3708      	adds	r7, #8
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd80      	pop	{r7, pc}
 80196d4:	e000ed00 	.word	0xe000ed00

080196d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b082      	sub	sp, #8
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	687a      	ldr	r2, [r7, #4]
 80196ec:	6812      	ldr	r2, [r2, #0]
 80196ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80196f2:	f023 0301 	bic.w	r3, r3, #1
 80196f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	6a1b      	ldr	r3, [r3, #32]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d007      	beq.n	8019710 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019700:	4b08      	ldr	r3, [pc, #32]	; (8019724 <HAL_PCD_ResumeCallback+0x4c>)
 8019702:	691b      	ldr	r3, [r3, #16]
 8019704:	4a07      	ldr	r2, [pc, #28]	; (8019724 <HAL_PCD_ResumeCallback+0x4c>)
 8019706:	f023 0306 	bic.w	r3, r3, #6
 801970a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801970c:	f000 fb36 	bl	8019d7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019716:	4618      	mov	r0, r3
 8019718:	f000 fd9e 	bl	801a258 <USBD_LL_Resume>
}
 801971c:	bf00      	nop
 801971e:	3708      	adds	r7, #8
 8019720:	46bd      	mov	sp, r7
 8019722:	bd80      	pop	{r7, pc}
 8019724:	e000ed00 	.word	0xe000ed00

08019728 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b082      	sub	sp, #8
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
 8019730:	460b      	mov	r3, r1
 8019732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801973a:	78fa      	ldrb	r2, [r7, #3]
 801973c:	4611      	mov	r1, r2
 801973e:	4618      	mov	r0, r3
 8019740:	f000 fdea 	bl	801a318 <USBD_LL_IsoOUTIncomplete>
}
 8019744:	bf00      	nop
 8019746:	3708      	adds	r7, #8
 8019748:	46bd      	mov	sp, r7
 801974a:	bd80      	pop	{r7, pc}

0801974c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b082      	sub	sp, #8
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
 8019754:	460b      	mov	r3, r1
 8019756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801975e:	78fa      	ldrb	r2, [r7, #3]
 8019760:	4611      	mov	r1, r2
 8019762:	4618      	mov	r0, r3
 8019764:	f000 fdb2 	bl	801a2cc <USBD_LL_IsoINIncomplete>
}
 8019768:	bf00      	nop
 801976a:	3708      	adds	r7, #8
 801976c:	46bd      	mov	sp, r7
 801976e:	bd80      	pop	{r7, pc}

08019770 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b082      	sub	sp, #8
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801977e:	4618      	mov	r0, r3
 8019780:	f000 fdf0 	bl	801a364 <USBD_LL_DevConnected>
}
 8019784:	bf00      	nop
 8019786:	3708      	adds	r7, #8
 8019788:	46bd      	mov	sp, r7
 801978a:	bd80      	pop	{r7, pc}

0801978c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801979a:	4618      	mov	r0, r3
 801979c:	f000 fded 	bl	801a37a <USBD_LL_DevDisconnected>
}
 80197a0:	bf00      	nop
 80197a2:	3708      	adds	r7, #8
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bd80      	pop	{r7, pc}

080197a8 <USBD_LL_Init>:
/*******************************************************************************
                       LL Driver Interface (USB Device Library --> PCD)
*******************************************************************************/

USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d146      	bne.n	8019846 <USBD_LL_Init+0x9e>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80197b8:	4a25      	ldr	r2, [pc, #148]	; (8019850 <USBD_LL_Init+0xa8>)
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	4a23      	ldr	r2, [pc, #140]	; (8019850 <USBD_LL_Init+0xa8>)
 80197c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80197c8:	4b21      	ldr	r3, [pc, #132]	; (8019850 <USBD_LL_Init+0xa8>)
 80197ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80197ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 7;
 80197d0:	4b1f      	ldr	r3, [pc, #124]	; (8019850 <USBD_LL_Init+0xa8>)
 80197d2:	2207      	movs	r2, #7
 80197d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80197d6:	4b1e      	ldr	r3, [pc, #120]	; (8019850 <USBD_LL_Init+0xa8>)
 80197d8:	2202      	movs	r2, #2
 80197da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80197dc:	4b1c      	ldr	r3, [pc, #112]	; (8019850 <USBD_LL_Init+0xa8>)
 80197de:	2202      	movs	r2, #2
 80197e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80197e2:	4b1b      	ldr	r3, [pc, #108]	; (8019850 <USBD_LL_Init+0xa8>)
 80197e4:	2200      	movs	r2, #0
 80197e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80197e8:	4b19      	ldr	r3, [pc, #100]	; (8019850 <USBD_LL_Init+0xa8>)
 80197ea:	2200      	movs	r2, #0
 80197ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80197ee:	4b18      	ldr	r3, [pc, #96]	; (8019850 <USBD_LL_Init+0xa8>)
 80197f0:	2200      	movs	r2, #0
 80197f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80197f4:	4b16      	ldr	r3, [pc, #88]	; (8019850 <USBD_LL_Init+0xa8>)
 80197f6:	2200      	movs	r2, #0
 80197f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80197fa:	4b15      	ldr	r3, [pc, #84]	; (8019850 <USBD_LL_Init+0xa8>)
 80197fc:	2200      	movs	r2, #0
 80197fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019800:	4b13      	ldr	r3, [pc, #76]	; (8019850 <USBD_LL_Init+0xa8>)
 8019802:	2200      	movs	r2, #0
 8019804:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019806:	4812      	ldr	r0, [pc, #72]	; (8019850 <USBD_LL_Init+0xa8>)
 8019808:	f7f1 f9f1 	bl	800abee <HAL_PCD_Init>
 801980c:	4603      	mov	r3, r0
 801980e:	2b00      	cmp	r3, #0
 8019810:	d001      	beq.n	8019816 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019812:	f7ec ffff 	bl	8006814 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
	HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 8019816:	2140      	movs	r1, #64	; 0x40
 8019818:	480d      	ldr	r0, [pc, #52]	; (8019850 <USBD_LL_Init+0xa8>)
 801981a:	f7f2 fa80 	bl	800bd1e <HAL_PCDEx_SetRxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801981e:	2240      	movs	r2, #64	; 0x40
 8019820:	2100      	movs	r1, #0
 8019822:	480b      	ldr	r0, [pc, #44]	; (8019850 <USBD_LL_Init+0xa8>)
 8019824:	f7f2 fa34 	bl	800bc90 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8019828:	2240      	movs	r2, #64	; 0x40
 801982a:	2101      	movs	r1, #1
 801982c:	4808      	ldr	r0, [pc, #32]	; (8019850 <USBD_LL_Init+0xa8>)
 801982e:	f7f2 fa2f 	bl	800bc90 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 8019832:	2240      	movs	r2, #64	; 0x40
 8019834:	2102      	movs	r1, #2
 8019836:	4806      	ldr	r0, [pc, #24]	; (8019850 <USBD_LL_Init+0xa8>)
 8019838:	f7f2 fa2a 	bl	800bc90 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 801983c:	2240      	movs	r2, #64	; 0x40
 801983e:	2103      	movs	r1, #3
 8019840:	4803      	ldr	r0, [pc, #12]	; (8019850 <USBD_LL_Init+0xa8>)
 8019842:	f7f2 fa25 	bl	800bc90 <HAL_PCDEx_SetTxFiFo>

	//


  }
  return USBD_OK;
 8019846:	2300      	movs	r3, #0
}
 8019848:	4618      	mov	r0, r3
 801984a:	3708      	adds	r7, #8
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}
 8019850:	20009a18 	.word	0x20009a18

08019854 <USBD_LL_Start>:




USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b084      	sub	sp, #16
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801985c:	2300      	movs	r3, #0
 801985e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019860:	2300      	movs	r3, #0
 8019862:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801986a:	4618      	mov	r0, r3
 801986c:	f7f1 fae3 	bl	800ae36 <HAL_PCD_Start>
 8019870:	4603      	mov	r3, r0
 8019872:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019874:	7bbb      	ldrb	r3, [r7, #14]
 8019876:	2b03      	cmp	r3, #3
 8019878:	d816      	bhi.n	80198a8 <USBD_LL_Start+0x54>
 801987a:	a201      	add	r2, pc, #4	; (adr r2, 8019880 <USBD_LL_Start+0x2c>)
 801987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019880:	08019891 	.word	0x08019891
 8019884:	08019897 	.word	0x08019897
 8019888:	0801989d 	.word	0x0801989d
 801988c:	080198a3 	.word	0x080198a3
    case HAL_OK :
      usb_status = USBD_OK;
 8019890:	2300      	movs	r3, #0
 8019892:	73fb      	strb	r3, [r7, #15]
    break;
 8019894:	e00b      	b.n	80198ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019896:	2303      	movs	r3, #3
 8019898:	73fb      	strb	r3, [r7, #15]
    break;
 801989a:	e008      	b.n	80198ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801989c:	2301      	movs	r3, #1
 801989e:	73fb      	strb	r3, [r7, #15]
    break;
 80198a0:	e005      	b.n	80198ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80198a2:	2303      	movs	r3, #3
 80198a4:	73fb      	strb	r3, [r7, #15]
    break;
 80198a6:	e002      	b.n	80198ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80198a8:	2303      	movs	r3, #3
 80198aa:	73fb      	strb	r3, [r7, #15]
    break;
 80198ac:	bf00      	nop
  }
  return usb_status;
 80198ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80198b0:	4618      	mov	r0, r3
 80198b2:	3710      	adds	r7, #16
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd80      	pop	{r7, pc}

080198b8 <USBD_LL_OpenEP>:




USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b084      	sub	sp, #16
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
 80198c0:	4608      	mov	r0, r1
 80198c2:	4611      	mov	r1, r2
 80198c4:	461a      	mov	r2, r3
 80198c6:	4603      	mov	r3, r0
 80198c8:	70fb      	strb	r3, [r7, #3]
 80198ca:	460b      	mov	r3, r1
 80198cc:	70bb      	strb	r3, [r7, #2]
 80198ce:	4613      	mov	r3, r2
 80198d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198d2:	2300      	movs	r3, #0
 80198d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198d6:	2300      	movs	r3, #0
 80198d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80198e0:	78bb      	ldrb	r3, [r7, #2]
 80198e2:	883a      	ldrh	r2, [r7, #0]
 80198e4:	78f9      	ldrb	r1, [r7, #3]
 80198e6:	f7f1 fe9e 	bl	800b626 <HAL_PCD_EP_Open>
 80198ea:	4603      	mov	r3, r0
 80198ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80198ee:	7bbb      	ldrb	r3, [r7, #14]
 80198f0:	2b03      	cmp	r3, #3
 80198f2:	d817      	bhi.n	8019924 <USBD_LL_OpenEP+0x6c>
 80198f4:	a201      	add	r2, pc, #4	; (adr r2, 80198fc <USBD_LL_OpenEP+0x44>)
 80198f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198fa:	bf00      	nop
 80198fc:	0801990d 	.word	0x0801990d
 8019900:	08019913 	.word	0x08019913
 8019904:	08019919 	.word	0x08019919
 8019908:	0801991f 	.word	0x0801991f
    case HAL_OK :
      usb_status = USBD_OK;
 801990c:	2300      	movs	r3, #0
 801990e:	73fb      	strb	r3, [r7, #15]
    break;
 8019910:	e00b      	b.n	801992a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019912:	2303      	movs	r3, #3
 8019914:	73fb      	strb	r3, [r7, #15]
    break;
 8019916:	e008      	b.n	801992a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019918:	2301      	movs	r3, #1
 801991a:	73fb      	strb	r3, [r7, #15]
    break;
 801991c:	e005      	b.n	801992a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801991e:	2303      	movs	r3, #3
 8019920:	73fb      	strb	r3, [r7, #15]
    break;
 8019922:	e002      	b.n	801992a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019924:	2303      	movs	r3, #3
 8019926:	73fb      	strb	r3, [r7, #15]
    break;
 8019928:	bf00      	nop
  }
  return usb_status;
 801992a:	7bfb      	ldrb	r3, [r7, #15]
}
 801992c:	4618      	mov	r0, r3
 801992e:	3710      	adds	r7, #16
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}

08019934 <USBD_LL_CloseEP>:



USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b084      	sub	sp, #16
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	460b      	mov	r3, r1
 801993e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019940:	2300      	movs	r3, #0
 8019942:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019944:	2300      	movs	r3, #0
 8019946:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801994e:	78fa      	ldrb	r2, [r7, #3]
 8019950:	4611      	mov	r1, r2
 8019952:	4618      	mov	r0, r3
 8019954:	f7f1 fecf 	bl	800b6f6 <HAL_PCD_EP_Close>
 8019958:	4603      	mov	r3, r0
 801995a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801995c:	7bbb      	ldrb	r3, [r7, #14]
 801995e:	2b03      	cmp	r3, #3
 8019960:	d816      	bhi.n	8019990 <USBD_LL_CloseEP+0x5c>
 8019962:	a201      	add	r2, pc, #4	; (adr r2, 8019968 <USBD_LL_CloseEP+0x34>)
 8019964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019968:	08019979 	.word	0x08019979
 801996c:	0801997f 	.word	0x0801997f
 8019970:	08019985 	.word	0x08019985
 8019974:	0801998b 	.word	0x0801998b
    case HAL_OK :
      usb_status = USBD_OK;
 8019978:	2300      	movs	r3, #0
 801997a:	73fb      	strb	r3, [r7, #15]
    break;
 801997c:	e00b      	b.n	8019996 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801997e:	2303      	movs	r3, #3
 8019980:	73fb      	strb	r3, [r7, #15]
    break;
 8019982:	e008      	b.n	8019996 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019984:	2301      	movs	r3, #1
 8019986:	73fb      	strb	r3, [r7, #15]
    break;
 8019988:	e005      	b.n	8019996 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801998a:	2303      	movs	r3, #3
 801998c:	73fb      	strb	r3, [r7, #15]
    break;
 801998e:	e002      	b.n	8019996 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019990:	2303      	movs	r3, #3
 8019992:	73fb      	strb	r3, [r7, #15]
    break;
 8019994:	bf00      	nop
  }
  return usb_status;
 8019996:	7bfb      	ldrb	r3, [r7, #15]
}
 8019998:	4618      	mov	r0, r3
 801999a:	3710      	adds	r7, #16
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}

080199a0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b084      	sub	sp, #16
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
 80199a8:	460b      	mov	r3, r1
 80199aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199ac:	2300      	movs	r3, #0
 80199ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199b0:	2300      	movs	r3, #0
 80199b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80199ba:	78fa      	ldrb	r2, [r7, #3]
 80199bc:	4611      	mov	r1, r2
 80199be:	4618      	mov	r0, r3
 80199c0:	f7f2 f82e 	bl	800ba20 <HAL_PCD_EP_Flush>
 80199c4:	4603      	mov	r3, r0
 80199c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80199c8:	7bbb      	ldrb	r3, [r7, #14]
 80199ca:	2b03      	cmp	r3, #3
 80199cc:	d816      	bhi.n	80199fc <USBD_LL_FlushEP+0x5c>
 80199ce:	a201      	add	r2, pc, #4	; (adr r2, 80199d4 <USBD_LL_FlushEP+0x34>)
 80199d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199d4:	080199e5 	.word	0x080199e5
 80199d8:	080199eb 	.word	0x080199eb
 80199dc:	080199f1 	.word	0x080199f1
 80199e0:	080199f7 	.word	0x080199f7
    case HAL_OK :
      usb_status = USBD_OK;
 80199e4:	2300      	movs	r3, #0
 80199e6:	73fb      	strb	r3, [r7, #15]
    break;
 80199e8:	e00b      	b.n	8019a02 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80199ea:	2303      	movs	r3, #3
 80199ec:	73fb      	strb	r3, [r7, #15]
    break;
 80199ee:	e008      	b.n	8019a02 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80199f0:	2301      	movs	r3, #1
 80199f2:	73fb      	strb	r3, [r7, #15]
    break;
 80199f4:	e005      	b.n	8019a02 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80199f6:	2303      	movs	r3, #3
 80199f8:	73fb      	strb	r3, [r7, #15]
    break;
 80199fa:	e002      	b.n	8019a02 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80199fc:	2303      	movs	r3, #3
 80199fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019a00:	bf00      	nop
  }
  return usb_status;
 8019a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a04:	4618      	mov	r0, r3
 8019a06:	3710      	adds	r7, #16
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	bd80      	pop	{r7, pc}

08019a0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b084      	sub	sp, #16
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
 8019a14:	460b      	mov	r3, r1
 8019a16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a26:	78fa      	ldrb	r2, [r7, #3]
 8019a28:	4611      	mov	r1, r2
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7f1 ff40 	bl	800b8b0 <HAL_PCD_EP_SetStall>
 8019a30:	4603      	mov	r3, r0
 8019a32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a34:	7bbb      	ldrb	r3, [r7, #14]
 8019a36:	2b03      	cmp	r3, #3
 8019a38:	d816      	bhi.n	8019a68 <USBD_LL_StallEP+0x5c>
 8019a3a:	a201      	add	r2, pc, #4	; (adr r2, 8019a40 <USBD_LL_StallEP+0x34>)
 8019a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a40:	08019a51 	.word	0x08019a51
 8019a44:	08019a57 	.word	0x08019a57
 8019a48:	08019a5d 	.word	0x08019a5d
 8019a4c:	08019a63 	.word	0x08019a63
    case HAL_OK :
      usb_status = USBD_OK;
 8019a50:	2300      	movs	r3, #0
 8019a52:	73fb      	strb	r3, [r7, #15]
    break;
 8019a54:	e00b      	b.n	8019a6e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a56:	2303      	movs	r3, #3
 8019a58:	73fb      	strb	r3, [r7, #15]
    break;
 8019a5a:	e008      	b.n	8019a6e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8019a60:	e005      	b.n	8019a6e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a62:	2303      	movs	r3, #3
 8019a64:	73fb      	strb	r3, [r7, #15]
    break;
 8019a66:	e002      	b.n	8019a6e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019a68:	2303      	movs	r3, #3
 8019a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a6c:	bf00      	nop
  }
  return usb_status;
 8019a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	3710      	adds	r7, #16
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd80      	pop	{r7, pc}

08019a78 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b084      	sub	sp, #16
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
 8019a80:	460b      	mov	r3, r1
 8019a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a84:	2300      	movs	r3, #0
 8019a86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a88:	2300      	movs	r3, #0
 8019a8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019a92:	78fa      	ldrb	r2, [r7, #3]
 8019a94:	4611      	mov	r1, r2
 8019a96:	4618      	mov	r0, r3
 8019a98:	f7f1 ff6c 	bl	800b974 <HAL_PCD_EP_ClrStall>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019aa0:	7bbb      	ldrb	r3, [r7, #14]
 8019aa2:	2b03      	cmp	r3, #3
 8019aa4:	d816      	bhi.n	8019ad4 <USBD_LL_ClearStallEP+0x5c>
 8019aa6:	a201      	add	r2, pc, #4	; (adr r2, 8019aac <USBD_LL_ClearStallEP+0x34>)
 8019aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019aac:	08019abd 	.word	0x08019abd
 8019ab0:	08019ac3 	.word	0x08019ac3
 8019ab4:	08019ac9 	.word	0x08019ac9
 8019ab8:	08019acf 	.word	0x08019acf
    case HAL_OK :
      usb_status = USBD_OK;
 8019abc:	2300      	movs	r3, #0
 8019abe:	73fb      	strb	r3, [r7, #15]
    break;
 8019ac0:	e00b      	b.n	8019ada <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019ac2:	2303      	movs	r3, #3
 8019ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8019ac6:	e008      	b.n	8019ada <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ac8:	2301      	movs	r3, #1
 8019aca:	73fb      	strb	r3, [r7, #15]
    break;
 8019acc:	e005      	b.n	8019ada <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ace:	2303      	movs	r3, #3
 8019ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8019ad2:	e002      	b.n	8019ada <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019ad4:	2303      	movs	r3, #3
 8019ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ad8:	bf00      	nop
  }
  return usb_status;
 8019ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8019adc:	4618      	mov	r0, r3
 8019ade:	3710      	adds	r7, #16
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	bd80      	pop	{r7, pc}

08019ae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ae4:	b480      	push	{r7}
 8019ae6:	b085      	sub	sp, #20
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
 8019aec:	460b      	mov	r3, r1
 8019aee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019af6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	da0b      	bge.n	8019b18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019b00:	78fb      	ldrb	r3, [r7, #3]
 8019b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019b06:	68f9      	ldr	r1, [r7, #12]
 8019b08:	4613      	mov	r3, r2
 8019b0a:	00db      	lsls	r3, r3, #3
 8019b0c:	1a9b      	subs	r3, r3, r2
 8019b0e:	009b      	lsls	r3, r3, #2
 8019b10:	440b      	add	r3, r1
 8019b12:	333e      	adds	r3, #62	; 0x3e
 8019b14:	781b      	ldrb	r3, [r3, #0]
 8019b16:	e00b      	b.n	8019b30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019b18:	78fb      	ldrb	r3, [r7, #3]
 8019b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019b1e:	68f9      	ldr	r1, [r7, #12]
 8019b20:	4613      	mov	r3, r2
 8019b22:	00db      	lsls	r3, r3, #3
 8019b24:	1a9b      	subs	r3, r3, r2
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	440b      	add	r3, r1
 8019b2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019b2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	3714      	adds	r7, #20
 8019b34:	46bd      	mov	sp, r7
 8019b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3a:	4770      	bx	lr

08019b3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b084      	sub	sp, #16
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
 8019b44:	460b      	mov	r3, r1
 8019b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019b56:	78fa      	ldrb	r2, [r7, #3]
 8019b58:	4611      	mov	r1, r2
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f7f1 fd3e 	bl	800b5dc <HAL_PCD_SetAddress>
 8019b60:	4603      	mov	r3, r0
 8019b62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b64:	7bbb      	ldrb	r3, [r7, #14]
 8019b66:	2b03      	cmp	r3, #3
 8019b68:	d816      	bhi.n	8019b98 <USBD_LL_SetUSBAddress+0x5c>
 8019b6a:	a201      	add	r2, pc, #4	; (adr r2, 8019b70 <USBD_LL_SetUSBAddress+0x34>)
 8019b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b70:	08019b81 	.word	0x08019b81
 8019b74:	08019b87 	.word	0x08019b87
 8019b78:	08019b8d 	.word	0x08019b8d
 8019b7c:	08019b93 	.word	0x08019b93
    case HAL_OK :
      usb_status = USBD_OK;
 8019b80:	2300      	movs	r3, #0
 8019b82:	73fb      	strb	r3, [r7, #15]
    break;
 8019b84:	e00b      	b.n	8019b9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b86:	2303      	movs	r3, #3
 8019b88:	73fb      	strb	r3, [r7, #15]
    break;
 8019b8a:	e008      	b.n	8019b9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b8c:	2301      	movs	r3, #1
 8019b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8019b90:	e005      	b.n	8019b9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b92:	2303      	movs	r3, #3
 8019b94:	73fb      	strb	r3, [r7, #15]
    break;
 8019b96:	e002      	b.n	8019b9e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b98:	2303      	movs	r3, #3
 8019b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b9c:	bf00      	nop
  }
  return usb_status;
 8019b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	3710      	adds	r7, #16
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	bd80      	pop	{r7, pc}

08019ba8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b086      	sub	sp, #24
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	60f8      	str	r0, [r7, #12]
 8019bb0:	607a      	str	r2, [r7, #4]
 8019bb2:	603b      	str	r3, [r7, #0]
 8019bb4:	460b      	mov	r3, r1
 8019bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bb8:	2300      	movs	r3, #0
 8019bba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019bc6:	7af9      	ldrb	r1, [r7, #11]
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	f7f1 fe33 	bl	800b836 <HAL_PCD_EP_Transmit>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019bd4:	7dbb      	ldrb	r3, [r7, #22]
 8019bd6:	2b03      	cmp	r3, #3
 8019bd8:	d816      	bhi.n	8019c08 <USBD_LL_Transmit+0x60>
 8019bda:	a201      	add	r2, pc, #4	; (adr r2, 8019be0 <USBD_LL_Transmit+0x38>)
 8019bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019be0:	08019bf1 	.word	0x08019bf1
 8019be4:	08019bf7 	.word	0x08019bf7
 8019be8:	08019bfd 	.word	0x08019bfd
 8019bec:	08019c03 	.word	0x08019c03
    case HAL_OK :
      usb_status = USBD_OK;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	75fb      	strb	r3, [r7, #23]
    break;
 8019bf4:	e00b      	b.n	8019c0e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bf6:	2303      	movs	r3, #3
 8019bf8:	75fb      	strb	r3, [r7, #23]
    break;
 8019bfa:	e008      	b.n	8019c0e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	75fb      	strb	r3, [r7, #23]
    break;
 8019c00:	e005      	b.n	8019c0e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c02:	2303      	movs	r3, #3
 8019c04:	75fb      	strb	r3, [r7, #23]
    break;
 8019c06:	e002      	b.n	8019c0e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019c08:	2303      	movs	r3, #3
 8019c0a:	75fb      	strb	r3, [r7, #23]
    break;
 8019c0c:	bf00      	nop
  }
  return usb_status;
 8019c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	3718      	adds	r7, #24
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b086      	sub	sp, #24
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	60f8      	str	r0, [r7, #12]
 8019c20:	607a      	str	r2, [r7, #4]
 8019c22:	603b      	str	r3, [r7, #0]
 8019c24:	460b      	mov	r3, r1
 8019c26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c28:	2300      	movs	r3, #0
 8019c2a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8019c36:	7af9      	ldrb	r1, [r7, #11]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	687a      	ldr	r2, [r7, #4]
 8019c3c:	f7f1 fda5 	bl	800b78a <HAL_PCD_EP_Receive>
 8019c40:	4603      	mov	r3, r0
 8019c42:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019c44:	7dbb      	ldrb	r3, [r7, #22]
 8019c46:	2b03      	cmp	r3, #3
 8019c48:	d816      	bhi.n	8019c78 <USBD_LL_PrepareReceive+0x60>
 8019c4a:	a201      	add	r2, pc, #4	; (adr r2, 8019c50 <USBD_LL_PrepareReceive+0x38>)
 8019c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c50:	08019c61 	.word	0x08019c61
 8019c54:	08019c67 	.word	0x08019c67
 8019c58:	08019c6d 	.word	0x08019c6d
 8019c5c:	08019c73 	.word	0x08019c73
    case HAL_OK :
      usb_status = USBD_OK;
 8019c60:	2300      	movs	r3, #0
 8019c62:	75fb      	strb	r3, [r7, #23]
    break;
 8019c64:	e00b      	b.n	8019c7e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c66:	2303      	movs	r3, #3
 8019c68:	75fb      	strb	r3, [r7, #23]
    break;
 8019c6a:	e008      	b.n	8019c7e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c6c:	2301      	movs	r3, #1
 8019c6e:	75fb      	strb	r3, [r7, #23]
    break;
 8019c70:	e005      	b.n	8019c7e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c72:	2303      	movs	r3, #3
 8019c74:	75fb      	strb	r3, [r7, #23]
    break;
 8019c76:	e002      	b.n	8019c7e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019c78:	2303      	movs	r3, #3
 8019c7a:	75fb      	strb	r3, [r7, #23]
    break;
 8019c7c:	bf00      	nop
  }
  return usb_status;
 8019c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3718      	adds	r7, #24
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}

08019c88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
 8019c90:	460b      	mov	r3, r1
 8019c92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8019c9a:	78fa      	ldrb	r2, [r7, #3]
 8019c9c:	4611      	mov	r1, r2
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7f1 fdb1 	bl	800b806 <HAL_PCD_EP_GetRxCount>
 8019ca4:	4603      	mov	r3, r0
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3708      	adds	r7, #8
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}
	...

08019cb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b082      	sub	sp, #8
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	460b      	mov	r3, r1
 8019cba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019cbc:	78fb      	ldrb	r3, [r7, #3]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d002      	beq.n	8019cc8 <HAL_PCDEx_LPM_Callback+0x18>
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d01f      	beq.n	8019d06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019cc6:	e03b      	b.n	8019d40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	6a1b      	ldr	r3, [r3, #32]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d007      	beq.n	8019ce0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019cd0:	f000 f854 	bl	8019d7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019cd4:	4b1c      	ldr	r3, [pc, #112]	; (8019d48 <HAL_PCDEx_LPM_Callback+0x98>)
 8019cd6:	691b      	ldr	r3, [r3, #16]
 8019cd8:	4a1b      	ldr	r2, [pc, #108]	; (8019d48 <HAL_PCDEx_LPM_Callback+0x98>)
 8019cda:	f023 0306 	bic.w	r3, r3, #6
 8019cde:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	687a      	ldr	r2, [r7, #4]
 8019cec:	6812      	ldr	r2, [r2, #0]
 8019cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019cf2:	f023 0301 	bic.w	r3, r3, #1
 8019cf6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f000 faaa 	bl	801a258 <USBD_LL_Resume>
    break;
 8019d04:	e01c      	b.n	8019d40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	687a      	ldr	r2, [r7, #4]
 8019d12:	6812      	ldr	r2, [r2, #0]
 8019d14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019d18:	f043 0301 	orr.w	r3, r3, #1
 8019d1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d24:	4618      	mov	r0, r3
 8019d26:	f000 fa81 	bl	801a22c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6a1b      	ldr	r3, [r3, #32]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d005      	beq.n	8019d3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019d32:	4b05      	ldr	r3, [pc, #20]	; (8019d48 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d34:	691b      	ldr	r3, [r3, #16]
 8019d36:	4a04      	ldr	r2, [pc, #16]	; (8019d48 <HAL_PCDEx_LPM_Callback+0x98>)
 8019d38:	f043 0306 	orr.w	r3, r3, #6
 8019d3c:	6113      	str	r3, [r2, #16]
    break;
 8019d3e:	bf00      	nop
}
 8019d40:	bf00      	nop
 8019d42:	3708      	adds	r7, #8
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}
 8019d48:	e000ed00 	.word	0xe000ed00

08019d4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019d4c:	b480      	push	{r7}
 8019d4e:	b083      	sub	sp, #12
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
  //static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  static uint32_t mem[(sizeof(USBD_CDCMSC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  //static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */

  return mem;
 8019d54:	4b03      	ldr	r3, [pc, #12]	; (8019d64 <USBD_static_malloc+0x18>)
}
 8019d56:	4618      	mov	r0, r3
 8019d58:	370c      	adds	r7, #12
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d60:	4770      	bx	lr
 8019d62:	bf00      	nop
 8019d64:	20001c54 	.word	0x20001c54

08019d68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019d68:	b480      	push	{r7}
 8019d6a:	b083      	sub	sp, #12
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]

}
 8019d70:	bf00      	nop
 8019d72:	370c      	adds	r7, #12
 8019d74:	46bd      	mov	sp, r7
 8019d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7a:	4770      	bx	lr

08019d7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019d80:	f7eb fff2 	bl	8005d68 <SystemClock_Config>
}
 8019d84:	bf00      	nop
 8019d86:	bd80      	pop	{r7, pc}

08019d88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b086      	sub	sp, #24
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	4613      	mov	r3, r2
 8019d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d101      	bne.n	8019da0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019d9c:	2303      	movs	r3, #3
 8019d9e:	e023      	b.n	8019de8 <USBD_Init+0x60>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	2200      	movs	r2, #0
 8019da4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserDataCDC = NULL;
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	2200      	movs	r2, #0
 8019dac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  pdev->pUserDataMSC = NULL;
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	2200      	movs	r2, #0
 8019db4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d003      	beq.n	8019dce <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	68ba      	ldr	r2, [r7, #8]
 8019dca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	2201      	movs	r2, #1
 8019dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	79fa      	ldrb	r2, [r7, #7]
 8019dda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8019ddc:	68f8      	ldr	r0, [r7, #12]
 8019dde:	f7ff fce3 	bl	80197a8 <USBD_LL_Init>
 8019de2:	4603      	mov	r3, r0
 8019de4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8019de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	3718      	adds	r7, #24
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d101      	bne.n	8019e08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8019e04:	2303      	movs	r3, #3
 8019e06:	e016      	b.n	8019e36 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	683a      	ldr	r2, [r7, #0]
 8019e0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d00b      	beq.n	8019e34 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e24:	f107 020e 	add.w	r2, r7, #14
 8019e28:	4610      	mov	r0, r2
 8019e2a:	4798      	blx	r3
 8019e2c:	4602      	mov	r2, r0
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8019e34:	2300      	movs	r3, #0
}
 8019e36:	4618      	mov	r0, r3
 8019e38:	3710      	adds	r7, #16
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}

08019e3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019e3e:	b580      	push	{r7, lr}
 8019e40:	b082      	sub	sp, #8
 8019e42:	af00      	add	r7, sp, #0
 8019e44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8019e46:	6878      	ldr	r0, [r7, #4]
 8019e48:	f7ff fd04 	bl	8019854 <USBD_LL_Start>
 8019e4c:	4603      	mov	r3, r0
}
 8019e4e:	4618      	mov	r0, r3
 8019e50:	3708      	adds	r7, #8
 8019e52:	46bd      	mov	sp, r7
 8019e54:	bd80      	pop	{r7, pc}

08019e56 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019e56:	b480      	push	{r7}
 8019e58:	b083      	sub	sp, #12
 8019e5a:	af00      	add	r7, sp, #0
 8019e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019e5e:	2300      	movs	r3, #0
}
 8019e60:	4618      	mov	r0, r3
 8019e62:	370c      	adds	r7, #12
 8019e64:	46bd      	mov	sp, r7
 8019e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6a:	4770      	bx	lr

08019e6c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b084      	sub	sp, #16
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	460b      	mov	r3, r1
 8019e76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019e78:	2303      	movs	r3, #3
 8019e7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d009      	beq.n	8019e9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	78fa      	ldrb	r2, [r7, #3]
 8019e90:	4611      	mov	r1, r2
 8019e92:	6878      	ldr	r0, [r7, #4]
 8019e94:	4798      	blx	r3
 8019e96:	4603      	mov	r3, r0
 8019e98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8019e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	3710      	adds	r7, #16
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd80      	pop	{r7, pc}

08019ea4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	b082      	sub	sp, #8
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	6078      	str	r0, [r7, #4]
 8019eac:	460b      	mov	r3, r1
 8019eae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d007      	beq.n	8019eca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ec0:	685b      	ldr	r3, [r3, #4]
 8019ec2:	78fa      	ldrb	r2, [r7, #3]
 8019ec4:	4611      	mov	r1, r2
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	4798      	blx	r3
  }

  return USBD_OK;
 8019eca:	2300      	movs	r3, #0
}
 8019ecc:	4618      	mov	r0, r3
 8019ece:	3708      	adds	r7, #8
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}

08019ed4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b084      	sub	sp, #16
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
 8019edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019ee4:	6839      	ldr	r1, [r7, #0]
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f000 ffba 	bl	801ae60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	2201      	movs	r2, #1
 8019ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8019efa:	461a      	mov	r2, r3
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019f08:	f003 031f 	and.w	r3, r3, #31
 8019f0c:	2b02      	cmp	r3, #2
 8019f0e:	d01a      	beq.n	8019f46 <USBD_LL_SetupStage+0x72>
 8019f10:	2b02      	cmp	r3, #2
 8019f12:	d822      	bhi.n	8019f5a <USBD_LL_SetupStage+0x86>
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d002      	beq.n	8019f1e <USBD_LL_SetupStage+0x4a>
 8019f18:	2b01      	cmp	r3, #1
 8019f1a:	d00a      	beq.n	8019f32 <USBD_LL_SetupStage+0x5e>
 8019f1c:	e01d      	b.n	8019f5a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f24:	4619      	mov	r1, r3
 8019f26:	6878      	ldr	r0, [r7, #4]
 8019f28:	f000 fa62 	bl	801a3f0 <USBD_StdDevReq>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8019f30:	e020      	b.n	8019f74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f38:	4619      	mov	r1, r3
 8019f3a:	6878      	ldr	r0, [r7, #4]
 8019f3c:	f000 fac6 	bl	801a4cc <USBD_StdItfReq>
 8019f40:	4603      	mov	r3, r0
 8019f42:	73fb      	strb	r3, [r7, #15]
      break;
 8019f44:	e016      	b.n	8019f74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019f4c:	4619      	mov	r1, r3
 8019f4e:	6878      	ldr	r0, [r7, #4]
 8019f50:	f000 fb05 	bl	801a55e <USBD_StdEPReq>
 8019f54:	4603      	mov	r3, r0
 8019f56:	73fb      	strb	r3, [r7, #15]
      break;
 8019f58:	e00c      	b.n	8019f74 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019f60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019f64:	b2db      	uxtb	r3, r3
 8019f66:	4619      	mov	r1, r3
 8019f68:	6878      	ldr	r0, [r7, #4]
 8019f6a:	f7ff fd4f 	bl	8019a0c <USBD_LL_StallEP>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	73fb      	strb	r3, [r7, #15]
      break;
 8019f72:	bf00      	nop
  }

  return ret;
 8019f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	3710      	adds	r7, #16
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}

08019f7e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019f7e:	b580      	push	{r7, lr}
 8019f80:	b086      	sub	sp, #24
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	60f8      	str	r0, [r7, #12]
 8019f86:	460b      	mov	r3, r1
 8019f88:	607a      	str	r2, [r7, #4]
 8019f8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8019f8c:	7afb      	ldrb	r3, [r7, #11]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d138      	bne.n	801a004 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8019f98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8019fa0:	2b03      	cmp	r3, #3
 8019fa2:	d14a      	bne.n	801a03a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8019fa4:	693b      	ldr	r3, [r7, #16]
 8019fa6:	689a      	ldr	r2, [r3, #8]
 8019fa8:	693b      	ldr	r3, [r7, #16]
 8019faa:	68db      	ldr	r3, [r3, #12]
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d913      	bls.n	8019fd8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8019fb0:	693b      	ldr	r3, [r7, #16]
 8019fb2:	689a      	ldr	r2, [r3, #8]
 8019fb4:	693b      	ldr	r3, [r7, #16]
 8019fb6:	68db      	ldr	r3, [r3, #12]
 8019fb8:	1ad2      	subs	r2, r2, r3
 8019fba:	693b      	ldr	r3, [r7, #16]
 8019fbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8019fbe:	693b      	ldr	r3, [r7, #16]
 8019fc0:	68da      	ldr	r2, [r3, #12]
 8019fc2:	693b      	ldr	r3, [r7, #16]
 8019fc4:	689b      	ldr	r3, [r3, #8]
 8019fc6:	4293      	cmp	r3, r2
 8019fc8:	bf28      	it	cs
 8019fca:	4613      	movcs	r3, r2
 8019fcc:	461a      	mov	r2, r3
 8019fce:	6879      	ldr	r1, [r7, #4]
 8019fd0:	68f8      	ldr	r0, [r7, #12]
 8019fd2:	f001 f95b 	bl	801b28c <USBD_CtlContinueRx>
 8019fd6:	e030      	b.n	801a03a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	2b03      	cmp	r3, #3
 8019fe2:	d10b      	bne.n	8019ffc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019fea:	691b      	ldr	r3, [r3, #16]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d005      	beq.n	8019ffc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ff6:	691b      	ldr	r3, [r3, #16]
 8019ff8:	68f8      	ldr	r0, [r7, #12]
 8019ffa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8019ffc:	68f8      	ldr	r0, [r7, #12]
 8019ffe:	f001 f956 	bl	801b2ae <USBD_CtlSendStatus>
 801a002:	e01a      	b.n	801a03a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a00a:	b2db      	uxtb	r3, r3
 801a00c:	2b03      	cmp	r3, #3
 801a00e:	d114      	bne.n	801a03a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a016:	699b      	ldr	r3, [r3, #24]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d00e      	beq.n	801a03a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a022:	699b      	ldr	r3, [r3, #24]
 801a024:	7afa      	ldrb	r2, [r7, #11]
 801a026:	4611      	mov	r1, r2
 801a028:	68f8      	ldr	r0, [r7, #12]
 801a02a:	4798      	blx	r3
 801a02c:	4603      	mov	r3, r0
 801a02e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a030:	7dfb      	ldrb	r3, [r7, #23]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d001      	beq.n	801a03a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801a036:	7dfb      	ldrb	r3, [r7, #23]
 801a038:	e000      	b.n	801a03c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801a03a:	2300      	movs	r3, #0
}
 801a03c:	4618      	mov	r0, r3
 801a03e:	3718      	adds	r7, #24
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}

0801a044 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b086      	sub	sp, #24
 801a048:	af00      	add	r7, sp, #0
 801a04a:	60f8      	str	r0, [r7, #12]
 801a04c:	460b      	mov	r3, r1
 801a04e:	607a      	str	r2, [r7, #4]
 801a050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801a052:	7afb      	ldrb	r3, [r7, #11]
 801a054:	2b00      	cmp	r3, #0
 801a056:	d16b      	bne.n	801a130 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	3314      	adds	r3, #20
 801a05c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a064:	2b02      	cmp	r3, #2
 801a066:	d156      	bne.n	801a116 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a068:	693b      	ldr	r3, [r7, #16]
 801a06a:	689a      	ldr	r2, [r3, #8]
 801a06c:	693b      	ldr	r3, [r7, #16]
 801a06e:	68db      	ldr	r3, [r3, #12]
 801a070:	429a      	cmp	r2, r3
 801a072:	d914      	bls.n	801a09e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801a074:	693b      	ldr	r3, [r7, #16]
 801a076:	689a      	ldr	r2, [r3, #8]
 801a078:	693b      	ldr	r3, [r7, #16]
 801a07a:	68db      	ldr	r3, [r3, #12]
 801a07c:	1ad2      	subs	r2, r2, r3
 801a07e:	693b      	ldr	r3, [r7, #16]
 801a080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801a082:	693b      	ldr	r3, [r7, #16]
 801a084:	689b      	ldr	r3, [r3, #8]
 801a086:	461a      	mov	r2, r3
 801a088:	6879      	ldr	r1, [r7, #4]
 801a08a:	68f8      	ldr	r0, [r7, #12]
 801a08c:	f001 f8d0 	bl	801b230 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a090:	2300      	movs	r3, #0
 801a092:	2200      	movs	r2, #0
 801a094:	2100      	movs	r1, #0
 801a096:	68f8      	ldr	r0, [r7, #12]
 801a098:	f7ff fdbe 	bl	8019c18 <USBD_LL_PrepareReceive>
 801a09c:	e03b      	b.n	801a116 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	68da      	ldr	r2, [r3, #12]
 801a0a2:	693b      	ldr	r3, [r7, #16]
 801a0a4:	689b      	ldr	r3, [r3, #8]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d11c      	bne.n	801a0e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801a0aa:	693b      	ldr	r3, [r7, #16]
 801a0ac:	685a      	ldr	r2, [r3, #4]
 801a0ae:	693b      	ldr	r3, [r7, #16]
 801a0b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d316      	bcc.n	801a0e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801a0b6:	693b      	ldr	r3, [r7, #16]
 801a0b8:	685a      	ldr	r2, [r3, #4]
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a0c0:	429a      	cmp	r2, r3
 801a0c2:	d20f      	bcs.n	801a0e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	2100      	movs	r1, #0
 801a0c8:	68f8      	ldr	r0, [r7, #12]
 801a0ca:	f001 f8b1 	bl	801b230 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	2200      	movs	r2, #0
 801a0da:	2100      	movs	r1, #0
 801a0dc:	68f8      	ldr	r0, [r7, #12]
 801a0de:	f7ff fd9b 	bl	8019c18 <USBD_LL_PrepareReceive>
 801a0e2:	e018      	b.n	801a116 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	2b03      	cmp	r3, #3
 801a0ee:	d10b      	bne.n	801a108 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a0f6:	68db      	ldr	r3, [r3, #12]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d005      	beq.n	801a108 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a102:	68db      	ldr	r3, [r3, #12]
 801a104:	68f8      	ldr	r0, [r7, #12]
 801a106:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801a108:	2180      	movs	r1, #128	; 0x80
 801a10a:	68f8      	ldr	r0, [r7, #12]
 801a10c:	f7ff fc7e 	bl	8019a0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801a110:	68f8      	ldr	r0, [r7, #12]
 801a112:	f001 f8df 	bl	801b2d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a11c:	2b01      	cmp	r3, #1
 801a11e:	d122      	bne.n	801a166 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801a120:	68f8      	ldr	r0, [r7, #12]
 801a122:	f7ff fe98 	bl	8019e56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	2200      	movs	r2, #0
 801a12a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a12e:	e01a      	b.n	801a166 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a136:	b2db      	uxtb	r3, r3
 801a138:	2b03      	cmp	r3, #3
 801a13a:	d114      	bne.n	801a166 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a142:	695b      	ldr	r3, [r3, #20]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d00e      	beq.n	801a166 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a14e:	695b      	ldr	r3, [r3, #20]
 801a150:	7afa      	ldrb	r2, [r7, #11]
 801a152:	4611      	mov	r1, r2
 801a154:	68f8      	ldr	r0, [r7, #12]
 801a156:	4798      	blx	r3
 801a158:	4603      	mov	r3, r0
 801a15a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801a15c:	7dfb      	ldrb	r3, [r7, #23]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d001      	beq.n	801a166 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801a162:	7dfb      	ldrb	r3, [r7, #23]
 801a164:	e000      	b.n	801a168 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801a166:	2300      	movs	r3, #0
}
 801a168:	4618      	mov	r0, r3
 801a16a:	3718      	adds	r7, #24
 801a16c:	46bd      	mov	sp, r7
 801a16e:	bd80      	pop	{r7, pc}

0801a170 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b082      	sub	sp, #8
 801a174:	af00      	add	r7, sp, #0
 801a176:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2201      	movs	r2, #1
 801a17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2200      	movs	r2, #0
 801a184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	2200      	movs	r2, #0
 801a18c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2200      	movs	r2, #0
 801a192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d101      	bne.n	801a1a4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801a1a0:	2303      	movs	r3, #3
 801a1a2:	e02f      	b.n	801a204 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassDataCDC != NULL)
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d00f      	beq.n	801a1ce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1b4:	685b      	ldr	r3, [r3, #4]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d009      	beq.n	801a1ce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a1c0:	685b      	ldr	r3, [r3, #4]
 801a1c2:	687a      	ldr	r2, [r7, #4]
 801a1c4:	6852      	ldr	r2, [r2, #4]
 801a1c6:	b2d2      	uxtb	r2, r2
 801a1c8:	4611      	mov	r1, r2
 801a1ca:	6878      	ldr	r0, [r7, #4]
 801a1cc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a1ce:	2340      	movs	r3, #64	; 0x40
 801a1d0:	2200      	movs	r2, #0
 801a1d2:	2100      	movs	r1, #0
 801a1d4:	6878      	ldr	r0, [r7, #4]
 801a1d6:	f7ff fb6f 	bl	80198b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	2201      	movs	r2, #1
 801a1de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	2240      	movs	r2, #64	; 0x40
 801a1e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a1ea:	2340      	movs	r3, #64	; 0x40
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	2180      	movs	r1, #128	; 0x80
 801a1f0:	6878      	ldr	r0, [r7, #4]
 801a1f2:	f7ff fb61 	bl	80198b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	2201      	movs	r2, #1
 801a1fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	2240      	movs	r2, #64	; 0x40
 801a200:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801a202:	2300      	movs	r3, #0
}
 801a204:	4618      	mov	r0, r3
 801a206:	3708      	adds	r7, #8
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}

0801a20c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a20c:	b480      	push	{r7}
 801a20e:	b083      	sub	sp, #12
 801a210:	af00      	add	r7, sp, #0
 801a212:	6078      	str	r0, [r7, #4]
 801a214:	460b      	mov	r3, r1
 801a216:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	78fa      	ldrb	r2, [r7, #3]
 801a21c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a21e:	2300      	movs	r3, #0
}
 801a220:	4618      	mov	r0, r3
 801a222:	370c      	adds	r7, #12
 801a224:	46bd      	mov	sp, r7
 801a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22a:	4770      	bx	lr

0801a22c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a22c:	b480      	push	{r7}
 801a22e:	b083      	sub	sp, #12
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a23a:	b2da      	uxtb	r2, r3
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	2204      	movs	r2, #4
 801a246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a24a:	2300      	movs	r3, #0
}
 801a24c:	4618      	mov	r0, r3
 801a24e:	370c      	adds	r7, #12
 801a250:	46bd      	mov	sp, r7
 801a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a256:	4770      	bx	lr

0801a258 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a258:	b480      	push	{r7}
 801a25a:	b083      	sub	sp, #12
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a266:	b2db      	uxtb	r3, r3
 801a268:	2b04      	cmp	r3, #4
 801a26a:	d106      	bne.n	801a27a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801a272:	b2da      	uxtb	r2, r3
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a27a:	2300      	movs	r3, #0
}
 801a27c:	4618      	mov	r0, r3
 801a27e:	370c      	adds	r7, #12
 801a280:	46bd      	mov	sp, r7
 801a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a286:	4770      	bx	lr

0801a288 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a296:	2b00      	cmp	r3, #0
 801a298:	d101      	bne.n	801a29e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801a29a:	2303      	movs	r3, #3
 801a29c:	e012      	b.n	801a2c4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2a4:	b2db      	uxtb	r3, r3
 801a2a6:	2b03      	cmp	r3, #3
 801a2a8:	d10b      	bne.n	801a2c2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2b0:	69db      	ldr	r3, [r3, #28]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d005      	beq.n	801a2c2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2bc:	69db      	ldr	r3, [r3, #28]
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a2c2:	2300      	movs	r3, #0
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	3708      	adds	r7, #8
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}

0801a2cc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b082      	sub	sp, #8
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	460b      	mov	r3, r1
 801a2d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d101      	bne.n	801a2e6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a2e2:	2303      	movs	r3, #3
 801a2e4:	e014      	b.n	801a310 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	2b03      	cmp	r3, #3
 801a2f0:	d10d      	bne.n	801a30e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a2f8:	6a1b      	ldr	r3, [r3, #32]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d007      	beq.n	801a30e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a304:	6a1b      	ldr	r3, [r3, #32]
 801a306:	78fa      	ldrb	r2, [r7, #3]
 801a308:	4611      	mov	r1, r2
 801a30a:	6878      	ldr	r0, [r7, #4]
 801a30c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a30e:	2300      	movs	r3, #0
}
 801a310:	4618      	mov	r0, r3
 801a312:	3708      	adds	r7, #8
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	460b      	mov	r3, r1
 801a322:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d101      	bne.n	801a332 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801a32e:	2303      	movs	r3, #3
 801a330:	e014      	b.n	801a35c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a338:	b2db      	uxtb	r3, r3
 801a33a:	2b03      	cmp	r3, #3
 801a33c:	d10d      	bne.n	801a35a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a346:	2b00      	cmp	r3, #0
 801a348:	d007      	beq.n	801a35a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a352:	78fa      	ldrb	r2, [r7, #3]
 801a354:	4611      	mov	r1, r2
 801a356:	6878      	ldr	r0, [r7, #4]
 801a358:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a35a:	2300      	movs	r3, #0
}
 801a35c:	4618      	mov	r0, r3
 801a35e:	3708      	adds	r7, #8
 801a360:	46bd      	mov	sp, r7
 801a362:	bd80      	pop	{r7, pc}

0801a364 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801a364:	b480      	push	{r7}
 801a366:	b083      	sub	sp, #12
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a36c:	2300      	movs	r3, #0
}
 801a36e:	4618      	mov	r0, r3
 801a370:	370c      	adds	r7, #12
 801a372:	46bd      	mov	sp, r7
 801a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a378:	4770      	bx	lr

0801a37a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801a37a:	b580      	push	{r7, lr}
 801a37c:	b082      	sub	sp, #8
 801a37e:	af00      	add	r7, sp, #0
 801a380:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	2201      	movs	r2, #1
 801a386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a390:	2b00      	cmp	r3, #0
 801a392:	d009      	beq.n	801a3a8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a39a:	685b      	ldr	r3, [r3, #4]
 801a39c:	687a      	ldr	r2, [r7, #4]
 801a39e:	6852      	ldr	r2, [r2, #4]
 801a3a0:	b2d2      	uxtb	r2, r2
 801a3a2:	4611      	mov	r1, r2
 801a3a4:	6878      	ldr	r0, [r7, #4]
 801a3a6:	4798      	blx	r3
  }

  return USBD_OK;
 801a3a8:	2300      	movs	r3, #0
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3708      	adds	r7, #8
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bd80      	pop	{r7, pc}

0801a3b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a3b2:	b480      	push	{r7}
 801a3b4:	b087      	sub	sp, #28
 801a3b6:	af00      	add	r7, sp, #0
 801a3b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a3be:	697b      	ldr	r3, [r7, #20]
 801a3c0:	781b      	ldrb	r3, [r3, #0]
 801a3c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801a3c4:	697b      	ldr	r3, [r7, #20]
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a3ca:	697b      	ldr	r3, [r7, #20]
 801a3cc:	781b      	ldrb	r3, [r3, #0]
 801a3ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a3d0:	8a3b      	ldrh	r3, [r7, #16]
 801a3d2:	021b      	lsls	r3, r3, #8
 801a3d4:	b21a      	sxth	r2, r3
 801a3d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a3da:	4313      	orrs	r3, r2
 801a3dc:	b21b      	sxth	r3, r3
 801a3de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801a3e0:	89fb      	ldrh	r3, [r7, #14]
}
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	371c      	adds	r7, #28
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ec:	4770      	bx	lr
	...

0801a3f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b084      	sub	sp, #16
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a3fe:	683b      	ldr	r3, [r7, #0]
 801a400:	781b      	ldrb	r3, [r3, #0]
 801a402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a406:	2b40      	cmp	r3, #64	; 0x40
 801a408:	d005      	beq.n	801a416 <USBD_StdDevReq+0x26>
 801a40a:	2b40      	cmp	r3, #64	; 0x40
 801a40c:	d853      	bhi.n	801a4b6 <USBD_StdDevReq+0xc6>
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d00b      	beq.n	801a42a <USBD_StdDevReq+0x3a>
 801a412:	2b20      	cmp	r3, #32
 801a414:	d14f      	bne.n	801a4b6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a41c:	689b      	ldr	r3, [r3, #8]
 801a41e:	6839      	ldr	r1, [r7, #0]
 801a420:	6878      	ldr	r0, [r7, #4]
 801a422:	4798      	blx	r3
 801a424:	4603      	mov	r3, r0
 801a426:	73fb      	strb	r3, [r7, #15]
      break;
 801a428:	e04a      	b.n	801a4c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	785b      	ldrb	r3, [r3, #1]
 801a42e:	2b09      	cmp	r3, #9
 801a430:	d83b      	bhi.n	801a4aa <USBD_StdDevReq+0xba>
 801a432:	a201      	add	r2, pc, #4	; (adr r2, 801a438 <USBD_StdDevReq+0x48>)
 801a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a438:	0801a48d 	.word	0x0801a48d
 801a43c:	0801a4a1 	.word	0x0801a4a1
 801a440:	0801a4ab 	.word	0x0801a4ab
 801a444:	0801a497 	.word	0x0801a497
 801a448:	0801a4ab 	.word	0x0801a4ab
 801a44c:	0801a46b 	.word	0x0801a46b
 801a450:	0801a461 	.word	0x0801a461
 801a454:	0801a4ab 	.word	0x0801a4ab
 801a458:	0801a483 	.word	0x0801a483
 801a45c:	0801a475 	.word	0x0801a475
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a460:	6839      	ldr	r1, [r7, #0]
 801a462:	6878      	ldr	r0, [r7, #4]
 801a464:	f000 f9de 	bl	801a824 <USBD_GetDescriptor>
          break;
 801a468:	e024      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a46a:	6839      	ldr	r1, [r7, #0]
 801a46c:	6878      	ldr	r0, [r7, #4]
 801a46e:	f000 fb6d 	bl	801ab4c <USBD_SetAddress>
          break;
 801a472:	e01f      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a474:	6839      	ldr	r1, [r7, #0]
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	f000 fbac 	bl	801abd4 <USBD_SetConfig>
 801a47c:	4603      	mov	r3, r0
 801a47e:	73fb      	strb	r3, [r7, #15]
          break;
 801a480:	e018      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a482:	6839      	ldr	r1, [r7, #0]
 801a484:	6878      	ldr	r0, [r7, #4]
 801a486:	f000 fc4b 	bl	801ad20 <USBD_GetConfig>
          break;
 801a48a:	e013      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a48c:	6839      	ldr	r1, [r7, #0]
 801a48e:	6878      	ldr	r0, [r7, #4]
 801a490:	f000 fc7c 	bl	801ad8c <USBD_GetStatus>
          break;
 801a494:	e00e      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a496:	6839      	ldr	r1, [r7, #0]
 801a498:	6878      	ldr	r0, [r7, #4]
 801a49a:	f000 fcab 	bl	801adf4 <USBD_SetFeature>
          break;
 801a49e:	e009      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a4a0:	6839      	ldr	r1, [r7, #0]
 801a4a2:	6878      	ldr	r0, [r7, #4]
 801a4a4:	f000 fcba 	bl	801ae1c <USBD_ClrFeature>
          break;
 801a4a8:	e004      	b.n	801a4b4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801a4aa:	6839      	ldr	r1, [r7, #0]
 801a4ac:	6878      	ldr	r0, [r7, #4]
 801a4ae:	f000 fd11 	bl	801aed4 <USBD_CtlError>
          break;
 801a4b2:	bf00      	nop
      }
      break;
 801a4b4:	e004      	b.n	801a4c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a4b6:	6839      	ldr	r1, [r7, #0]
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f000 fd0b 	bl	801aed4 <USBD_CtlError>
      break;
 801a4be:	bf00      	nop
  }

  return ret;
 801a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	3710      	adds	r7, #16
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop

0801a4cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b084      	sub	sp, #16
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
 801a4d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a4da:	683b      	ldr	r3, [r7, #0]
 801a4dc:	781b      	ldrb	r3, [r3, #0]
 801a4de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a4e2:	2b40      	cmp	r3, #64	; 0x40
 801a4e4:	d005      	beq.n	801a4f2 <USBD_StdItfReq+0x26>
 801a4e6:	2b40      	cmp	r3, #64	; 0x40
 801a4e8:	d82f      	bhi.n	801a54a <USBD_StdItfReq+0x7e>
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d001      	beq.n	801a4f2 <USBD_StdItfReq+0x26>
 801a4ee:	2b20      	cmp	r3, #32
 801a4f0:	d12b      	bne.n	801a54a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4f8:	b2db      	uxtb	r3, r3
 801a4fa:	3b01      	subs	r3, #1
 801a4fc:	2b02      	cmp	r3, #2
 801a4fe:	d81d      	bhi.n	801a53c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a500:	683b      	ldr	r3, [r7, #0]
 801a502:	889b      	ldrh	r3, [r3, #4]
 801a504:	b2db      	uxtb	r3, r3
 801a506:	2b03      	cmp	r3, #3
 801a508:	d813      	bhi.n	801a532 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a510:	689b      	ldr	r3, [r3, #8]
 801a512:	6839      	ldr	r1, [r7, #0]
 801a514:	6878      	ldr	r0, [r7, #4]
 801a516:	4798      	blx	r3
 801a518:	4603      	mov	r3, r0
 801a51a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a51c:	683b      	ldr	r3, [r7, #0]
 801a51e:	88db      	ldrh	r3, [r3, #6]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d110      	bne.n	801a546 <USBD_StdItfReq+0x7a>
 801a524:	7bfb      	ldrb	r3, [r7, #15]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d10d      	bne.n	801a546 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a52a:	6878      	ldr	r0, [r7, #4]
 801a52c:	f000 febf 	bl	801b2ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a530:	e009      	b.n	801a546 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801a532:	6839      	ldr	r1, [r7, #0]
 801a534:	6878      	ldr	r0, [r7, #4]
 801a536:	f000 fccd 	bl	801aed4 <USBD_CtlError>
          break;
 801a53a:	e004      	b.n	801a546 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801a53c:	6839      	ldr	r1, [r7, #0]
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f000 fcc8 	bl	801aed4 <USBD_CtlError>
          break;
 801a544:	e000      	b.n	801a548 <USBD_StdItfReq+0x7c>
          break;
 801a546:	bf00      	nop
      }
      break;
 801a548:	e004      	b.n	801a554 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801a54a:	6839      	ldr	r1, [r7, #0]
 801a54c:	6878      	ldr	r0, [r7, #4]
 801a54e:	f000 fcc1 	bl	801aed4 <USBD_CtlError>
      break;
 801a552:	bf00      	nop
  }

  return ret;
 801a554:	7bfb      	ldrb	r3, [r7, #15]
}
 801a556:	4618      	mov	r0, r3
 801a558:	3710      	adds	r7, #16
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}

0801a55e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a55e:	b580      	push	{r7, lr}
 801a560:	b084      	sub	sp, #16
 801a562:	af00      	add	r7, sp, #0
 801a564:	6078      	str	r0, [r7, #4]
 801a566:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a568:	2300      	movs	r3, #0
 801a56a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	889b      	ldrh	r3, [r3, #4]
 801a570:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a572:	683b      	ldr	r3, [r7, #0]
 801a574:	781b      	ldrb	r3, [r3, #0]
 801a576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a57a:	2b40      	cmp	r3, #64	; 0x40
 801a57c:	d007      	beq.n	801a58e <USBD_StdEPReq+0x30>
 801a57e:	2b40      	cmp	r3, #64	; 0x40
 801a580:	f200 8145 	bhi.w	801a80e <USBD_StdEPReq+0x2b0>
 801a584:	2b00      	cmp	r3, #0
 801a586:	d00c      	beq.n	801a5a2 <USBD_StdEPReq+0x44>
 801a588:	2b20      	cmp	r3, #32
 801a58a:	f040 8140 	bne.w	801a80e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a594:	689b      	ldr	r3, [r3, #8]
 801a596:	6839      	ldr	r1, [r7, #0]
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	4798      	blx	r3
 801a59c:	4603      	mov	r3, r0
 801a59e:	73fb      	strb	r3, [r7, #15]
      break;
 801a5a0:	e13a      	b.n	801a818 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a5a2:	683b      	ldr	r3, [r7, #0]
 801a5a4:	785b      	ldrb	r3, [r3, #1]
 801a5a6:	2b03      	cmp	r3, #3
 801a5a8:	d007      	beq.n	801a5ba <USBD_StdEPReq+0x5c>
 801a5aa:	2b03      	cmp	r3, #3
 801a5ac:	f300 8129 	bgt.w	801a802 <USBD_StdEPReq+0x2a4>
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d07f      	beq.n	801a6b4 <USBD_StdEPReq+0x156>
 801a5b4:	2b01      	cmp	r3, #1
 801a5b6:	d03c      	beq.n	801a632 <USBD_StdEPReq+0xd4>
 801a5b8:	e123      	b.n	801a802 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	2b02      	cmp	r3, #2
 801a5c4:	d002      	beq.n	801a5cc <USBD_StdEPReq+0x6e>
 801a5c6:	2b03      	cmp	r3, #3
 801a5c8:	d016      	beq.n	801a5f8 <USBD_StdEPReq+0x9a>
 801a5ca:	e02c      	b.n	801a626 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a5cc:	7bbb      	ldrb	r3, [r7, #14]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d00d      	beq.n	801a5ee <USBD_StdEPReq+0x90>
 801a5d2:	7bbb      	ldrb	r3, [r7, #14]
 801a5d4:	2b80      	cmp	r3, #128	; 0x80
 801a5d6:	d00a      	beq.n	801a5ee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a5d8:	7bbb      	ldrb	r3, [r7, #14]
 801a5da:	4619      	mov	r1, r3
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	f7ff fa15 	bl	8019a0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a5e2:	2180      	movs	r1, #128	; 0x80
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f7ff fa11 	bl	8019a0c <USBD_LL_StallEP>
 801a5ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a5ec:	e020      	b.n	801a630 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801a5ee:	6839      	ldr	r1, [r7, #0]
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f000 fc6f 	bl	801aed4 <USBD_CtlError>
              break;
 801a5f6:	e01b      	b.n	801a630 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	885b      	ldrh	r3, [r3, #2]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d10e      	bne.n	801a61e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a600:	7bbb      	ldrb	r3, [r7, #14]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d00b      	beq.n	801a61e <USBD_StdEPReq+0xc0>
 801a606:	7bbb      	ldrb	r3, [r7, #14]
 801a608:	2b80      	cmp	r3, #128	; 0x80
 801a60a:	d008      	beq.n	801a61e <USBD_StdEPReq+0xc0>
 801a60c:	683b      	ldr	r3, [r7, #0]
 801a60e:	88db      	ldrh	r3, [r3, #6]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d104      	bne.n	801a61e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a614:	7bbb      	ldrb	r3, [r7, #14]
 801a616:	4619      	mov	r1, r3
 801a618:	6878      	ldr	r0, [r7, #4]
 801a61a:	f7ff f9f7 	bl	8019a0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a61e:	6878      	ldr	r0, [r7, #4]
 801a620:	f000 fe45 	bl	801b2ae <USBD_CtlSendStatus>

              break;
 801a624:	e004      	b.n	801a630 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801a626:	6839      	ldr	r1, [r7, #0]
 801a628:	6878      	ldr	r0, [r7, #4]
 801a62a:	f000 fc53 	bl	801aed4 <USBD_CtlError>
              break;
 801a62e:	bf00      	nop
          }
          break;
 801a630:	e0ec      	b.n	801a80c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a638:	b2db      	uxtb	r3, r3
 801a63a:	2b02      	cmp	r3, #2
 801a63c:	d002      	beq.n	801a644 <USBD_StdEPReq+0xe6>
 801a63e:	2b03      	cmp	r3, #3
 801a640:	d016      	beq.n	801a670 <USBD_StdEPReq+0x112>
 801a642:	e030      	b.n	801a6a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a644:	7bbb      	ldrb	r3, [r7, #14]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d00d      	beq.n	801a666 <USBD_StdEPReq+0x108>
 801a64a:	7bbb      	ldrb	r3, [r7, #14]
 801a64c:	2b80      	cmp	r3, #128	; 0x80
 801a64e:	d00a      	beq.n	801a666 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a650:	7bbb      	ldrb	r3, [r7, #14]
 801a652:	4619      	mov	r1, r3
 801a654:	6878      	ldr	r0, [r7, #4]
 801a656:	f7ff f9d9 	bl	8019a0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a65a:	2180      	movs	r1, #128	; 0x80
 801a65c:	6878      	ldr	r0, [r7, #4]
 801a65e:	f7ff f9d5 	bl	8019a0c <USBD_LL_StallEP>
 801a662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a664:	e025      	b.n	801a6b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801a666:	6839      	ldr	r1, [r7, #0]
 801a668:	6878      	ldr	r0, [r7, #4]
 801a66a:	f000 fc33 	bl	801aed4 <USBD_CtlError>
              break;
 801a66e:	e020      	b.n	801a6b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a670:	683b      	ldr	r3, [r7, #0]
 801a672:	885b      	ldrh	r3, [r3, #2]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d11b      	bne.n	801a6b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a678:	7bbb      	ldrb	r3, [r7, #14]
 801a67a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d004      	beq.n	801a68c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a682:	7bbb      	ldrb	r3, [r7, #14]
 801a684:	4619      	mov	r1, r3
 801a686:	6878      	ldr	r0, [r7, #4]
 801a688:	f7ff f9f6 	bl	8019a78 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a68c:	6878      	ldr	r0, [r7, #4]
 801a68e:	f000 fe0e 	bl	801b2ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a698:	689b      	ldr	r3, [r3, #8]
 801a69a:	6839      	ldr	r1, [r7, #0]
 801a69c:	6878      	ldr	r0, [r7, #4]
 801a69e:	4798      	blx	r3
 801a6a0:	4603      	mov	r3, r0
 801a6a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801a6a4:	e004      	b.n	801a6b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801a6a6:	6839      	ldr	r1, [r7, #0]
 801a6a8:	6878      	ldr	r0, [r7, #4]
 801a6aa:	f000 fc13 	bl	801aed4 <USBD_CtlError>
              break;
 801a6ae:	e000      	b.n	801a6b2 <USBD_StdEPReq+0x154>
              break;
 801a6b0:	bf00      	nop
          }
          break;
 801a6b2:	e0ab      	b.n	801a80c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a6ba:	b2db      	uxtb	r3, r3
 801a6bc:	2b02      	cmp	r3, #2
 801a6be:	d002      	beq.n	801a6c6 <USBD_StdEPReq+0x168>
 801a6c0:	2b03      	cmp	r3, #3
 801a6c2:	d032      	beq.n	801a72a <USBD_StdEPReq+0x1cc>
 801a6c4:	e097      	b.n	801a7f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a6c6:	7bbb      	ldrb	r3, [r7, #14]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d007      	beq.n	801a6dc <USBD_StdEPReq+0x17e>
 801a6cc:	7bbb      	ldrb	r3, [r7, #14]
 801a6ce:	2b80      	cmp	r3, #128	; 0x80
 801a6d0:	d004      	beq.n	801a6dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801a6d2:	6839      	ldr	r1, [r7, #0]
 801a6d4:	6878      	ldr	r0, [r7, #4]
 801a6d6:	f000 fbfd 	bl	801aed4 <USBD_CtlError>
                break;
 801a6da:	e091      	b.n	801a800 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a6dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	da0b      	bge.n	801a6fc <USBD_StdEPReq+0x19e>
 801a6e4:	7bbb      	ldrb	r3, [r7, #14]
 801a6e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a6ea:	4613      	mov	r3, r2
 801a6ec:	009b      	lsls	r3, r3, #2
 801a6ee:	4413      	add	r3, r2
 801a6f0:	009b      	lsls	r3, r3, #2
 801a6f2:	3310      	adds	r3, #16
 801a6f4:	687a      	ldr	r2, [r7, #4]
 801a6f6:	4413      	add	r3, r2
 801a6f8:	3304      	adds	r3, #4
 801a6fa:	e00b      	b.n	801a714 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a6fc:	7bbb      	ldrb	r3, [r7, #14]
 801a6fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a702:	4613      	mov	r3, r2
 801a704:	009b      	lsls	r3, r3, #2
 801a706:	4413      	add	r3, r2
 801a708:	009b      	lsls	r3, r3, #2
 801a70a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	4413      	add	r3, r2
 801a712:	3304      	adds	r3, #4
 801a714:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a716:	68bb      	ldr	r3, [r7, #8]
 801a718:	2200      	movs	r2, #0
 801a71a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a71c:	68bb      	ldr	r3, [r7, #8]
 801a71e:	2202      	movs	r2, #2
 801a720:	4619      	mov	r1, r3
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f000 fd69 	bl	801b1fa <USBD_CtlSendData>
              break;
 801a728:	e06a      	b.n	801a800 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a72a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	da11      	bge.n	801a756 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a732:	7bbb      	ldrb	r3, [r7, #14]
 801a734:	f003 020f 	and.w	r2, r3, #15
 801a738:	6879      	ldr	r1, [r7, #4]
 801a73a:	4613      	mov	r3, r2
 801a73c:	009b      	lsls	r3, r3, #2
 801a73e:	4413      	add	r3, r2
 801a740:	009b      	lsls	r3, r3, #2
 801a742:	440b      	add	r3, r1
 801a744:	3324      	adds	r3, #36	; 0x24
 801a746:	881b      	ldrh	r3, [r3, #0]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d117      	bne.n	801a77c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a74c:	6839      	ldr	r1, [r7, #0]
 801a74e:	6878      	ldr	r0, [r7, #4]
 801a750:	f000 fbc0 	bl	801aed4 <USBD_CtlError>
                  break;
 801a754:	e054      	b.n	801a800 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a756:	7bbb      	ldrb	r3, [r7, #14]
 801a758:	f003 020f 	and.w	r2, r3, #15
 801a75c:	6879      	ldr	r1, [r7, #4]
 801a75e:	4613      	mov	r3, r2
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	4413      	add	r3, r2
 801a764:	009b      	lsls	r3, r3, #2
 801a766:	440b      	add	r3, r1
 801a768:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801a76c:	881b      	ldrh	r3, [r3, #0]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d104      	bne.n	801a77c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801a772:	6839      	ldr	r1, [r7, #0]
 801a774:	6878      	ldr	r0, [r7, #4]
 801a776:	f000 fbad 	bl	801aed4 <USBD_CtlError>
                  break;
 801a77a:	e041      	b.n	801a800 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a77c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a780:	2b00      	cmp	r3, #0
 801a782:	da0b      	bge.n	801a79c <USBD_StdEPReq+0x23e>
 801a784:	7bbb      	ldrb	r3, [r7, #14]
 801a786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a78a:	4613      	mov	r3, r2
 801a78c:	009b      	lsls	r3, r3, #2
 801a78e:	4413      	add	r3, r2
 801a790:	009b      	lsls	r3, r3, #2
 801a792:	3310      	adds	r3, #16
 801a794:	687a      	ldr	r2, [r7, #4]
 801a796:	4413      	add	r3, r2
 801a798:	3304      	adds	r3, #4
 801a79a:	e00b      	b.n	801a7b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a79c:	7bbb      	ldrb	r3, [r7, #14]
 801a79e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a7a2:	4613      	mov	r3, r2
 801a7a4:	009b      	lsls	r3, r3, #2
 801a7a6:	4413      	add	r3, r2
 801a7a8:	009b      	lsls	r3, r3, #2
 801a7aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a7ae:	687a      	ldr	r2, [r7, #4]
 801a7b0:	4413      	add	r3, r2
 801a7b2:	3304      	adds	r3, #4
 801a7b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a7b6:	7bbb      	ldrb	r3, [r7, #14]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d002      	beq.n	801a7c2 <USBD_StdEPReq+0x264>
 801a7bc:	7bbb      	ldrb	r3, [r7, #14]
 801a7be:	2b80      	cmp	r3, #128	; 0x80
 801a7c0:	d103      	bne.n	801a7ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801a7c2:	68bb      	ldr	r3, [r7, #8]
 801a7c4:	2200      	movs	r2, #0
 801a7c6:	601a      	str	r2, [r3, #0]
 801a7c8:	e00e      	b.n	801a7e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a7ca:	7bbb      	ldrb	r3, [r7, #14]
 801a7cc:	4619      	mov	r1, r3
 801a7ce:	6878      	ldr	r0, [r7, #4]
 801a7d0:	f7ff f988 	bl	8019ae4 <USBD_LL_IsStallEP>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d003      	beq.n	801a7e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	2201      	movs	r2, #1
 801a7de:	601a      	str	r2, [r3, #0]
 801a7e0:	e002      	b.n	801a7e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801a7e2:	68bb      	ldr	r3, [r7, #8]
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a7e8:	68bb      	ldr	r3, [r7, #8]
 801a7ea:	2202      	movs	r2, #2
 801a7ec:	4619      	mov	r1, r3
 801a7ee:	6878      	ldr	r0, [r7, #4]
 801a7f0:	f000 fd03 	bl	801b1fa <USBD_CtlSendData>
              break;
 801a7f4:	e004      	b.n	801a800 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801a7f6:	6839      	ldr	r1, [r7, #0]
 801a7f8:	6878      	ldr	r0, [r7, #4]
 801a7fa:	f000 fb6b 	bl	801aed4 <USBD_CtlError>
              break;
 801a7fe:	bf00      	nop
          }
          break;
 801a800:	e004      	b.n	801a80c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801a802:	6839      	ldr	r1, [r7, #0]
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f000 fb65 	bl	801aed4 <USBD_CtlError>
          break;
 801a80a:	bf00      	nop
      }
      break;
 801a80c:	e004      	b.n	801a818 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801a80e:	6839      	ldr	r1, [r7, #0]
 801a810:	6878      	ldr	r0, [r7, #4]
 801a812:	f000 fb5f 	bl	801aed4 <USBD_CtlError>
      break;
 801a816:	bf00      	nop
  }

  return ret;
 801a818:	7bfb      	ldrb	r3, [r7, #15]
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	3710      	adds	r7, #16
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}
	...

0801a824 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b084      	sub	sp, #16
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a82e:	2300      	movs	r3, #0
 801a830:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801a832:	2300      	movs	r3, #0
 801a834:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a836:	2300      	movs	r3, #0
 801a838:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	885b      	ldrh	r3, [r3, #2]
 801a83e:	0a1b      	lsrs	r3, r3, #8
 801a840:	b29b      	uxth	r3, r3
 801a842:	3b01      	subs	r3, #1
 801a844:	2b0e      	cmp	r3, #14
 801a846:	f200 8152 	bhi.w	801aaee <USBD_GetDescriptor+0x2ca>
 801a84a:	a201      	add	r2, pc, #4	; (adr r2, 801a850 <USBD_GetDescriptor+0x2c>)
 801a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a850:	0801a8c1 	.word	0x0801a8c1
 801a854:	0801a8d9 	.word	0x0801a8d9
 801a858:	0801a919 	.word	0x0801a919
 801a85c:	0801aaef 	.word	0x0801aaef
 801a860:	0801aaef 	.word	0x0801aaef
 801a864:	0801aa8f 	.word	0x0801aa8f
 801a868:	0801aabb 	.word	0x0801aabb
 801a86c:	0801aaef 	.word	0x0801aaef
 801a870:	0801aaef 	.word	0x0801aaef
 801a874:	0801aaef 	.word	0x0801aaef
 801a878:	0801aaef 	.word	0x0801aaef
 801a87c:	0801aaef 	.word	0x0801aaef
 801a880:	0801aaef 	.word	0x0801aaef
 801a884:	0801aaef 	.word	0x0801aaef
 801a888:	0801a88d 	.word	0x0801a88d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a892:	69db      	ldr	r3, [r3, #28]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d00b      	beq.n	801a8b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a89e:	69db      	ldr	r3, [r3, #28]
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	7c12      	ldrb	r2, [r2, #16]
 801a8a4:	f107 0108 	add.w	r1, r7, #8
 801a8a8:	4610      	mov	r0, r2
 801a8aa:	4798      	blx	r3
 801a8ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a8ae:	e126      	b.n	801aafe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801a8b0:	6839      	ldr	r1, [r7, #0]
 801a8b2:	6878      	ldr	r0, [r7, #4]
 801a8b4:	f000 fb0e 	bl	801aed4 <USBD_CtlError>
        err++;
 801a8b8:	7afb      	ldrb	r3, [r7, #11]
 801a8ba:	3301      	adds	r3, #1
 801a8bc:	72fb      	strb	r3, [r7, #11]
      break;
 801a8be:	e11e      	b.n	801aafe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	687a      	ldr	r2, [r7, #4]
 801a8ca:	7c12      	ldrb	r2, [r2, #16]
 801a8cc:	f107 0108 	add.w	r1, r7, #8
 801a8d0:	4610      	mov	r0, r2
 801a8d2:	4798      	blx	r3
 801a8d4:	60f8      	str	r0, [r7, #12]
      break;
 801a8d6:	e112      	b.n	801aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	7c1b      	ldrb	r3, [r3, #16]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d10d      	bne.n	801a8fc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8e8:	f107 0208 	add.w	r2, r7, #8
 801a8ec:	4610      	mov	r0, r2
 801a8ee:	4798      	blx	r3
 801a8f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	3301      	adds	r3, #1
 801a8f6:	2202      	movs	r2, #2
 801a8f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a8fa:	e100      	b.n	801aafe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a904:	f107 0208 	add.w	r2, r7, #8
 801a908:	4610      	mov	r0, r2
 801a90a:	4798      	blx	r3
 801a90c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	3301      	adds	r3, #1
 801a912:	2202      	movs	r2, #2
 801a914:	701a      	strb	r2, [r3, #0]
      break;
 801a916:	e0f2      	b.n	801aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	885b      	ldrh	r3, [r3, #2]
 801a91c:	b2db      	uxtb	r3, r3
 801a91e:	2b05      	cmp	r3, #5
 801a920:	f200 80ac 	bhi.w	801aa7c <USBD_GetDescriptor+0x258>
 801a924:	a201      	add	r2, pc, #4	; (adr r2, 801a92c <USBD_GetDescriptor+0x108>)
 801a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a92a:	bf00      	nop
 801a92c:	0801a945 	.word	0x0801a945
 801a930:	0801a979 	.word	0x0801a979
 801a934:	0801a9ad 	.word	0x0801a9ad
 801a938:	0801a9e1 	.word	0x0801a9e1
 801a93c:	0801aa15 	.word	0x0801aa15
 801a940:	0801aa49 	.word	0x0801aa49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a94a:	685b      	ldr	r3, [r3, #4]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d00b      	beq.n	801a968 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a956:	685b      	ldr	r3, [r3, #4]
 801a958:	687a      	ldr	r2, [r7, #4]
 801a95a:	7c12      	ldrb	r2, [r2, #16]
 801a95c:	f107 0108 	add.w	r1, r7, #8
 801a960:	4610      	mov	r0, r2
 801a962:	4798      	blx	r3
 801a964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a966:	e091      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a968:	6839      	ldr	r1, [r7, #0]
 801a96a:	6878      	ldr	r0, [r7, #4]
 801a96c:	f000 fab2 	bl	801aed4 <USBD_CtlError>
            err++;
 801a970:	7afb      	ldrb	r3, [r7, #11]
 801a972:	3301      	adds	r3, #1
 801a974:	72fb      	strb	r3, [r7, #11]
          break;
 801a976:	e089      	b.n	801aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a97e:	689b      	ldr	r3, [r3, #8]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d00b      	beq.n	801a99c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a98a:	689b      	ldr	r3, [r3, #8]
 801a98c:	687a      	ldr	r2, [r7, #4]
 801a98e:	7c12      	ldrb	r2, [r2, #16]
 801a990:	f107 0108 	add.w	r1, r7, #8
 801a994:	4610      	mov	r0, r2
 801a996:	4798      	blx	r3
 801a998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a99a:	e077      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a99c:	6839      	ldr	r1, [r7, #0]
 801a99e:	6878      	ldr	r0, [r7, #4]
 801a9a0:	f000 fa98 	bl	801aed4 <USBD_CtlError>
            err++;
 801a9a4:	7afb      	ldrb	r3, [r7, #11]
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	72fb      	strb	r3, [r7, #11]
          break;
 801a9aa:	e06f      	b.n	801aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d00b      	beq.n	801a9d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9be:	68db      	ldr	r3, [r3, #12]
 801a9c0:	687a      	ldr	r2, [r7, #4]
 801a9c2:	7c12      	ldrb	r2, [r2, #16]
 801a9c4:	f107 0108 	add.w	r1, r7, #8
 801a9c8:	4610      	mov	r0, r2
 801a9ca:	4798      	blx	r3
 801a9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a9ce:	e05d      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801a9d0:	6839      	ldr	r1, [r7, #0]
 801a9d2:	6878      	ldr	r0, [r7, #4]
 801a9d4:	f000 fa7e 	bl	801aed4 <USBD_CtlError>
            err++;
 801a9d8:	7afb      	ldrb	r3, [r7, #11]
 801a9da:	3301      	adds	r3, #1
 801a9dc:	72fb      	strb	r3, [r7, #11]
          break;
 801a9de:	e055      	b.n	801aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9e6:	691b      	ldr	r3, [r3, #16]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d00b      	beq.n	801aa04 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a9f2:	691b      	ldr	r3, [r3, #16]
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	7c12      	ldrb	r2, [r2, #16]
 801a9f8:	f107 0108 	add.w	r1, r7, #8
 801a9fc:	4610      	mov	r0, r2
 801a9fe:	4798      	blx	r3
 801aa00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa02:	e043      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa04:	6839      	ldr	r1, [r7, #0]
 801aa06:	6878      	ldr	r0, [r7, #4]
 801aa08:	f000 fa64 	bl	801aed4 <USBD_CtlError>
            err++;
 801aa0c:	7afb      	ldrb	r3, [r7, #11]
 801aa0e:	3301      	adds	r3, #1
 801aa10:	72fb      	strb	r3, [r7, #11]
          break;
 801aa12:	e03b      	b.n	801aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa1a:	695b      	ldr	r3, [r3, #20]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d00b      	beq.n	801aa38 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa26:	695b      	ldr	r3, [r3, #20]
 801aa28:	687a      	ldr	r2, [r7, #4]
 801aa2a:	7c12      	ldrb	r2, [r2, #16]
 801aa2c:	f107 0108 	add.w	r1, r7, #8
 801aa30:	4610      	mov	r0, r2
 801aa32:	4798      	blx	r3
 801aa34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa36:	e029      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa38:	6839      	ldr	r1, [r7, #0]
 801aa3a:	6878      	ldr	r0, [r7, #4]
 801aa3c:	f000 fa4a 	bl	801aed4 <USBD_CtlError>
            err++;
 801aa40:	7afb      	ldrb	r3, [r7, #11]
 801aa42:	3301      	adds	r3, #1
 801aa44:	72fb      	strb	r3, [r7, #11]
          break;
 801aa46:	e021      	b.n	801aa8c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa4e:	699b      	ldr	r3, [r3, #24]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d00b      	beq.n	801aa6c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801aa5a:	699b      	ldr	r3, [r3, #24]
 801aa5c:	687a      	ldr	r2, [r7, #4]
 801aa5e:	7c12      	ldrb	r2, [r2, #16]
 801aa60:	f107 0108 	add.w	r1, r7, #8
 801aa64:	4610      	mov	r0, r2
 801aa66:	4798      	blx	r3
 801aa68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa6a:	e00f      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801aa6c:	6839      	ldr	r1, [r7, #0]
 801aa6e:	6878      	ldr	r0, [r7, #4]
 801aa70:	f000 fa30 	bl	801aed4 <USBD_CtlError>
            err++;
 801aa74:	7afb      	ldrb	r3, [r7, #11]
 801aa76:	3301      	adds	r3, #1
 801aa78:	72fb      	strb	r3, [r7, #11]
          break;
 801aa7a:	e007      	b.n	801aa8c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801aa7c:	6839      	ldr	r1, [r7, #0]
 801aa7e:	6878      	ldr	r0, [r7, #4]
 801aa80:	f000 fa28 	bl	801aed4 <USBD_CtlError>
          err++;
 801aa84:	7afb      	ldrb	r3, [r7, #11]
 801aa86:	3301      	adds	r3, #1
 801aa88:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801aa8a:	bf00      	nop
      }
      break;
 801aa8c:	e037      	b.n	801aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	7c1b      	ldrb	r3, [r3, #16]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d109      	bne.n	801aaaa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa9e:	f107 0208 	add.w	r2, r7, #8
 801aaa2:	4610      	mov	r0, r2
 801aaa4:	4798      	blx	r3
 801aaa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aaa8:	e029      	b.n	801aafe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801aaaa:	6839      	ldr	r1, [r7, #0]
 801aaac:	6878      	ldr	r0, [r7, #4]
 801aaae:	f000 fa11 	bl	801aed4 <USBD_CtlError>
        err++;
 801aab2:	7afb      	ldrb	r3, [r7, #11]
 801aab4:	3301      	adds	r3, #1
 801aab6:	72fb      	strb	r3, [r7, #11]
      break;
 801aab8:	e021      	b.n	801aafe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	7c1b      	ldrb	r3, [r3, #16]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d10d      	bne.n	801aade <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aaca:	f107 0208 	add.w	r2, r7, #8
 801aace:	4610      	mov	r0, r2
 801aad0:	4798      	blx	r3
 801aad2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	3301      	adds	r3, #1
 801aad8:	2207      	movs	r2, #7
 801aada:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aadc:	e00f      	b.n	801aafe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801aade:	6839      	ldr	r1, [r7, #0]
 801aae0:	6878      	ldr	r0, [r7, #4]
 801aae2:	f000 f9f7 	bl	801aed4 <USBD_CtlError>
        err++;
 801aae6:	7afb      	ldrb	r3, [r7, #11]
 801aae8:	3301      	adds	r3, #1
 801aaea:	72fb      	strb	r3, [r7, #11]
      break;
 801aaec:	e007      	b.n	801aafe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801aaee:	6839      	ldr	r1, [r7, #0]
 801aaf0:	6878      	ldr	r0, [r7, #4]
 801aaf2:	f000 f9ef 	bl	801aed4 <USBD_CtlError>
      err++;
 801aaf6:	7afb      	ldrb	r3, [r7, #11]
 801aaf8:	3301      	adds	r3, #1
 801aafa:	72fb      	strb	r3, [r7, #11]
      break;
 801aafc:	bf00      	nop
  }

  if (err != 0U)
 801aafe:	7afb      	ldrb	r3, [r7, #11]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d11e      	bne.n	801ab42 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801ab04:	683b      	ldr	r3, [r7, #0]
 801ab06:	88db      	ldrh	r3, [r3, #6]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d016      	beq.n	801ab3a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801ab0c:	893b      	ldrh	r3, [r7, #8]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d00e      	beq.n	801ab30 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	88da      	ldrh	r2, [r3, #6]
 801ab16:	893b      	ldrh	r3, [r7, #8]
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	bf28      	it	cs
 801ab1c:	4613      	movcs	r3, r2
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ab22:	893b      	ldrh	r3, [r7, #8]
 801ab24:	461a      	mov	r2, r3
 801ab26:	68f9      	ldr	r1, [r7, #12]
 801ab28:	6878      	ldr	r0, [r7, #4]
 801ab2a:	f000 fb66 	bl	801b1fa <USBD_CtlSendData>
 801ab2e:	e009      	b.n	801ab44 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801ab30:	6839      	ldr	r1, [r7, #0]
 801ab32:	6878      	ldr	r0, [r7, #4]
 801ab34:	f000 f9ce 	bl	801aed4 <USBD_CtlError>
 801ab38:	e004      	b.n	801ab44 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801ab3a:	6878      	ldr	r0, [r7, #4]
 801ab3c:	f000 fbb7 	bl	801b2ae <USBD_CtlSendStatus>
 801ab40:	e000      	b.n	801ab44 <USBD_GetDescriptor+0x320>
    return;
 801ab42:	bf00      	nop
  }
}
 801ab44:	3710      	adds	r7, #16
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop

0801ab4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	b084      	sub	sp, #16
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
 801ab54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	889b      	ldrh	r3, [r3, #4]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d131      	bne.n	801abc2 <USBD_SetAddress+0x76>
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	88db      	ldrh	r3, [r3, #6]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d12d      	bne.n	801abc2 <USBD_SetAddress+0x76>
 801ab66:	683b      	ldr	r3, [r7, #0]
 801ab68:	885b      	ldrh	r3, [r3, #2]
 801ab6a:	2b7f      	cmp	r3, #127	; 0x7f
 801ab6c:	d829      	bhi.n	801abc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	885b      	ldrh	r3, [r3, #2]
 801ab72:	b2db      	uxtb	r3, r3
 801ab74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ab78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab80:	b2db      	uxtb	r3, r3
 801ab82:	2b03      	cmp	r3, #3
 801ab84:	d104      	bne.n	801ab90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801ab86:	6839      	ldr	r1, [r7, #0]
 801ab88:	6878      	ldr	r0, [r7, #4]
 801ab8a:	f000 f9a3 	bl	801aed4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab8e:	e01d      	b.n	801abcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	7bfa      	ldrb	r2, [r7, #15]
 801ab94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ab98:	7bfb      	ldrb	r3, [r7, #15]
 801ab9a:	4619      	mov	r1, r3
 801ab9c:	6878      	ldr	r0, [r7, #4]
 801ab9e:	f7fe ffcd 	bl	8019b3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801aba2:	6878      	ldr	r0, [r7, #4]
 801aba4:	f000 fb83 	bl	801b2ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801aba8:	7bfb      	ldrb	r3, [r7, #15]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d004      	beq.n	801abb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	2202      	movs	r2, #2
 801abb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abb6:	e009      	b.n	801abcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2201      	movs	r2, #1
 801abbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abc0:	e004      	b.n	801abcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801abc2:	6839      	ldr	r1, [r7, #0]
 801abc4:	6878      	ldr	r0, [r7, #4]
 801abc6:	f000 f985 	bl	801aed4 <USBD_CtlError>
  }
}
 801abca:	bf00      	nop
 801abcc:	bf00      	nop
 801abce:	3710      	adds	r7, #16
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}

0801abd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
 801abdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801abde:	2300      	movs	r3, #0
 801abe0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801abe2:	683b      	ldr	r3, [r7, #0]
 801abe4:	885b      	ldrh	r3, [r3, #2]
 801abe6:	b2da      	uxtb	r2, r3
 801abe8:	4b4c      	ldr	r3, [pc, #304]	; (801ad1c <USBD_SetConfig+0x148>)
 801abea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801abec:	4b4b      	ldr	r3, [pc, #300]	; (801ad1c <USBD_SetConfig+0x148>)
 801abee:	781b      	ldrb	r3, [r3, #0]
 801abf0:	2b01      	cmp	r3, #1
 801abf2:	d905      	bls.n	801ac00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801abf4:	6839      	ldr	r1, [r7, #0]
 801abf6:	6878      	ldr	r0, [r7, #4]
 801abf8:	f000 f96c 	bl	801aed4 <USBD_CtlError>
    return USBD_FAIL;
 801abfc:	2303      	movs	r3, #3
 801abfe:	e088      	b.n	801ad12 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ac06:	b2db      	uxtb	r3, r3
 801ac08:	2b02      	cmp	r3, #2
 801ac0a:	d002      	beq.n	801ac12 <USBD_SetConfig+0x3e>
 801ac0c:	2b03      	cmp	r3, #3
 801ac0e:	d025      	beq.n	801ac5c <USBD_SetConfig+0x88>
 801ac10:	e071      	b.n	801acf6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ac12:	4b42      	ldr	r3, [pc, #264]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d01c      	beq.n	801ac54 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801ac1a:	4b40      	ldr	r3, [pc, #256]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac1c:	781b      	ldrb	r3, [r3, #0]
 801ac1e:	461a      	mov	r2, r3
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ac24:	4b3d      	ldr	r3, [pc, #244]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac26:	781b      	ldrb	r3, [r3, #0]
 801ac28:	4619      	mov	r1, r3
 801ac2a:	6878      	ldr	r0, [r7, #4]
 801ac2c:	f7ff f91e 	bl	8019e6c <USBD_SetClassConfig>
 801ac30:	4603      	mov	r3, r0
 801ac32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801ac34:	7bfb      	ldrb	r3, [r7, #15]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d004      	beq.n	801ac44 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801ac3a:	6839      	ldr	r1, [r7, #0]
 801ac3c:	6878      	ldr	r0, [r7, #4]
 801ac3e:	f000 f949 	bl	801aed4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ac42:	e065      	b.n	801ad10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ac44:	6878      	ldr	r0, [r7, #4]
 801ac46:	f000 fb32 	bl	801b2ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	2203      	movs	r2, #3
 801ac4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ac52:	e05d      	b.n	801ad10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801ac54:	6878      	ldr	r0, [r7, #4]
 801ac56:	f000 fb2a 	bl	801b2ae <USBD_CtlSendStatus>
      break;
 801ac5a:	e059      	b.n	801ad10 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801ac5c:	4b2f      	ldr	r3, [pc, #188]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac5e:	781b      	ldrb	r3, [r3, #0]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d112      	bne.n	801ac8a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	2202      	movs	r2, #2
 801ac68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801ac6c:	4b2b      	ldr	r3, [pc, #172]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	461a      	mov	r2, r3
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ac76:	4b29      	ldr	r3, [pc, #164]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	4619      	mov	r1, r3
 801ac7c:	6878      	ldr	r0, [r7, #4]
 801ac7e:	f7ff f911 	bl	8019ea4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801ac82:	6878      	ldr	r0, [r7, #4]
 801ac84:	f000 fb13 	bl	801b2ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ac88:	e042      	b.n	801ad10 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801ac8a:	4b24      	ldr	r3, [pc, #144]	; (801ad1c <USBD_SetConfig+0x148>)
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	461a      	mov	r2, r3
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	685b      	ldr	r3, [r3, #4]
 801ac94:	429a      	cmp	r2, r3
 801ac96:	d02a      	beq.n	801acee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	685b      	ldr	r3, [r3, #4]
 801ac9c:	b2db      	uxtb	r3, r3
 801ac9e:	4619      	mov	r1, r3
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f7ff f8ff 	bl	8019ea4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801aca6:	4b1d      	ldr	r3, [pc, #116]	; (801ad1c <USBD_SetConfig+0x148>)
 801aca8:	781b      	ldrb	r3, [r3, #0]
 801acaa:	461a      	mov	r2, r3
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801acb0:	4b1a      	ldr	r3, [pc, #104]	; (801ad1c <USBD_SetConfig+0x148>)
 801acb2:	781b      	ldrb	r3, [r3, #0]
 801acb4:	4619      	mov	r1, r3
 801acb6:	6878      	ldr	r0, [r7, #4]
 801acb8:	f7ff f8d8 	bl	8019e6c <USBD_SetClassConfig>
 801acbc:	4603      	mov	r3, r0
 801acbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801acc0:	7bfb      	ldrb	r3, [r7, #15]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d00f      	beq.n	801ace6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801acc6:	6839      	ldr	r1, [r7, #0]
 801acc8:	6878      	ldr	r0, [r7, #4]
 801acca:	f000 f903 	bl	801aed4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	685b      	ldr	r3, [r3, #4]
 801acd2:	b2db      	uxtb	r3, r3
 801acd4:	4619      	mov	r1, r3
 801acd6:	6878      	ldr	r0, [r7, #4]
 801acd8:	f7ff f8e4 	bl	8019ea4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	2202      	movs	r2, #2
 801ace0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801ace4:	e014      	b.n	801ad10 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801ace6:	6878      	ldr	r0, [r7, #4]
 801ace8:	f000 fae1 	bl	801b2ae <USBD_CtlSendStatus>
      break;
 801acec:	e010      	b.n	801ad10 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	f000 fadd 	bl	801b2ae <USBD_CtlSendStatus>
      break;
 801acf4:	e00c      	b.n	801ad10 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801acf6:	6839      	ldr	r1, [r7, #0]
 801acf8:	6878      	ldr	r0, [r7, #4]
 801acfa:	f000 f8eb 	bl	801aed4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801acfe:	4b07      	ldr	r3, [pc, #28]	; (801ad1c <USBD_SetConfig+0x148>)
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	4619      	mov	r1, r3
 801ad04:	6878      	ldr	r0, [r7, #4]
 801ad06:	f7ff f8cd 	bl	8019ea4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801ad0a:	2303      	movs	r3, #3
 801ad0c:	73fb      	strb	r3, [r7, #15]
      break;
 801ad0e:	bf00      	nop
  }

  return ret;
 801ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	3710      	adds	r7, #16
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
 801ad1a:	bf00      	nop
 801ad1c:	20001f28 	.word	0x20001f28

0801ad20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b082      	sub	sp, #8
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
 801ad28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	88db      	ldrh	r3, [r3, #6]
 801ad2e:	2b01      	cmp	r3, #1
 801ad30:	d004      	beq.n	801ad3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801ad32:	6839      	ldr	r1, [r7, #0]
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f000 f8cd 	bl	801aed4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801ad3a:	e023      	b.n	801ad84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	2b02      	cmp	r3, #2
 801ad46:	dc02      	bgt.n	801ad4e <USBD_GetConfig+0x2e>
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	dc03      	bgt.n	801ad54 <USBD_GetConfig+0x34>
 801ad4c:	e015      	b.n	801ad7a <USBD_GetConfig+0x5a>
 801ad4e:	2b03      	cmp	r3, #3
 801ad50:	d00b      	beq.n	801ad6a <USBD_GetConfig+0x4a>
 801ad52:	e012      	b.n	801ad7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	2200      	movs	r2, #0
 801ad58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	3308      	adds	r3, #8
 801ad5e:	2201      	movs	r2, #1
 801ad60:	4619      	mov	r1, r3
 801ad62:	6878      	ldr	r0, [r7, #4]
 801ad64:	f000 fa49 	bl	801b1fa <USBD_CtlSendData>
        break;
 801ad68:	e00c      	b.n	801ad84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	3304      	adds	r3, #4
 801ad6e:	2201      	movs	r2, #1
 801ad70:	4619      	mov	r1, r3
 801ad72:	6878      	ldr	r0, [r7, #4]
 801ad74:	f000 fa41 	bl	801b1fa <USBD_CtlSendData>
        break;
 801ad78:	e004      	b.n	801ad84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801ad7a:	6839      	ldr	r1, [r7, #0]
 801ad7c:	6878      	ldr	r0, [r7, #4]
 801ad7e:	f000 f8a9 	bl	801aed4 <USBD_CtlError>
        break;
 801ad82:	bf00      	nop
}
 801ad84:	bf00      	nop
 801ad86:	3708      	adds	r7, #8
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	bd80      	pop	{r7, pc}

0801ad8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b082      	sub	sp, #8
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
 801ad94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ad9c:	b2db      	uxtb	r3, r3
 801ad9e:	3b01      	subs	r3, #1
 801ada0:	2b02      	cmp	r3, #2
 801ada2:	d81e      	bhi.n	801ade2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	88db      	ldrh	r3, [r3, #6]
 801ada8:	2b02      	cmp	r3, #2
 801adaa:	d004      	beq.n	801adb6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801adac:	6839      	ldr	r1, [r7, #0]
 801adae:	6878      	ldr	r0, [r7, #4]
 801adb0:	f000 f890 	bl	801aed4 <USBD_CtlError>
        break;
 801adb4:	e01a      	b.n	801adec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	2201      	movs	r2, #1
 801adba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d005      	beq.n	801add2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	68db      	ldr	r3, [r3, #12]
 801adca:	f043 0202 	orr.w	r2, r3, #2
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	330c      	adds	r3, #12
 801add6:	2202      	movs	r2, #2
 801add8:	4619      	mov	r1, r3
 801adda:	6878      	ldr	r0, [r7, #4]
 801addc:	f000 fa0d 	bl	801b1fa <USBD_CtlSendData>
      break;
 801ade0:	e004      	b.n	801adec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801ade2:	6839      	ldr	r1, [r7, #0]
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f000 f875 	bl	801aed4 <USBD_CtlError>
      break;
 801adea:	bf00      	nop
  }
}
 801adec:	bf00      	nop
 801adee:	3708      	adds	r7, #8
 801adf0:	46bd      	mov	sp, r7
 801adf2:	bd80      	pop	{r7, pc}

0801adf4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b082      	sub	sp, #8
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]
 801adfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801adfe:	683b      	ldr	r3, [r7, #0]
 801ae00:	885b      	ldrh	r3, [r3, #2]
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d106      	bne.n	801ae14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	2201      	movs	r2, #1
 801ae0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f000 fa4d 	bl	801b2ae <USBD_CtlSendStatus>
  }
}
 801ae14:	bf00      	nop
 801ae16:	3708      	adds	r7, #8
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}

0801ae1c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b082      	sub	sp, #8
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
 801ae24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ae2c:	b2db      	uxtb	r3, r3
 801ae2e:	3b01      	subs	r3, #1
 801ae30:	2b02      	cmp	r3, #2
 801ae32:	d80b      	bhi.n	801ae4c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	885b      	ldrh	r3, [r3, #2]
 801ae38:	2b01      	cmp	r3, #1
 801ae3a:	d10c      	bne.n	801ae56 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2200      	movs	r2, #0
 801ae40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	f000 fa32 	bl	801b2ae <USBD_CtlSendStatus>
      }
      break;
 801ae4a:	e004      	b.n	801ae56 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801ae4c:	6839      	ldr	r1, [r7, #0]
 801ae4e:	6878      	ldr	r0, [r7, #4]
 801ae50:	f000 f840 	bl	801aed4 <USBD_CtlError>
      break;
 801ae54:	e000      	b.n	801ae58 <USBD_ClrFeature+0x3c>
      break;
 801ae56:	bf00      	nop
  }
}
 801ae58:	bf00      	nop
 801ae5a:	3708      	adds	r7, #8
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bd80      	pop	{r7, pc}

0801ae60 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b084      	sub	sp, #16
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
 801ae68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	781a      	ldrb	r2, [r3, #0]
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	3301      	adds	r3, #1
 801ae7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	781a      	ldrb	r2, [r3, #0]
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	3301      	adds	r3, #1
 801ae88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801ae8a:	68f8      	ldr	r0, [r7, #12]
 801ae8c:	f7ff fa91 	bl	801a3b2 <SWAPBYTE>
 801ae90:	4603      	mov	r3, r0
 801ae92:	461a      	mov	r2, r3
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	3301      	adds	r3, #1
 801ae9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	3301      	adds	r3, #1
 801aea2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801aea4:	68f8      	ldr	r0, [r7, #12]
 801aea6:	f7ff fa84 	bl	801a3b2 <SWAPBYTE>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	461a      	mov	r2, r3
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	3301      	adds	r3, #1
 801aeb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	3301      	adds	r3, #1
 801aebc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801aebe:	68f8      	ldr	r0, [r7, #12]
 801aec0:	f7ff fa77 	bl	801a3b2 <SWAPBYTE>
 801aec4:	4603      	mov	r3, r0
 801aec6:	461a      	mov	r2, r3
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	80da      	strh	r2, [r3, #6]
}
 801aecc:	bf00      	nop
 801aece:	3710      	adds	r7, #16
 801aed0:	46bd      	mov	sp, r7
 801aed2:	bd80      	pop	{r7, pc}

0801aed4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aed4:	b580      	push	{r7, lr}
 801aed6:	b082      	sub	sp, #8
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
 801aedc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801aede:	2180      	movs	r1, #128	; 0x80
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	f7fe fd93 	bl	8019a0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801aee6:	2100      	movs	r1, #0
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	f7fe fd8f 	bl	8019a0c <USBD_LL_StallEP>
}
 801aeee:	bf00      	nop
 801aef0:	3708      	adds	r7, #8
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}

0801aef6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801aef6:	b580      	push	{r7, lr}
 801aef8:	b086      	sub	sp, #24
 801aefa:	af00      	add	r7, sp, #0
 801aefc:	60f8      	str	r0, [r7, #12]
 801aefe:	60b9      	str	r1, [r7, #8]
 801af00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801af02:	2300      	movs	r3, #0
 801af04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d036      	beq.n	801af7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801af10:	6938      	ldr	r0, [r7, #16]
 801af12:	f000 f836 	bl	801af82 <USBD_GetLen>
 801af16:	4603      	mov	r3, r0
 801af18:	3301      	adds	r3, #1
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	005b      	lsls	r3, r3, #1
 801af1e:	b29a      	uxth	r2, r3
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801af24:	7dfb      	ldrb	r3, [r7, #23]
 801af26:	68ba      	ldr	r2, [r7, #8]
 801af28:	4413      	add	r3, r2
 801af2a:	687a      	ldr	r2, [r7, #4]
 801af2c:	7812      	ldrb	r2, [r2, #0]
 801af2e:	701a      	strb	r2, [r3, #0]
  idx++;
 801af30:	7dfb      	ldrb	r3, [r7, #23]
 801af32:	3301      	adds	r3, #1
 801af34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801af36:	7dfb      	ldrb	r3, [r7, #23]
 801af38:	68ba      	ldr	r2, [r7, #8]
 801af3a:	4413      	add	r3, r2
 801af3c:	2203      	movs	r2, #3
 801af3e:	701a      	strb	r2, [r3, #0]
  idx++;
 801af40:	7dfb      	ldrb	r3, [r7, #23]
 801af42:	3301      	adds	r3, #1
 801af44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801af46:	e013      	b.n	801af70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801af48:	7dfb      	ldrb	r3, [r7, #23]
 801af4a:	68ba      	ldr	r2, [r7, #8]
 801af4c:	4413      	add	r3, r2
 801af4e:	693a      	ldr	r2, [r7, #16]
 801af50:	7812      	ldrb	r2, [r2, #0]
 801af52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801af54:	693b      	ldr	r3, [r7, #16]
 801af56:	3301      	adds	r3, #1
 801af58:	613b      	str	r3, [r7, #16]
    idx++;
 801af5a:	7dfb      	ldrb	r3, [r7, #23]
 801af5c:	3301      	adds	r3, #1
 801af5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801af60:	7dfb      	ldrb	r3, [r7, #23]
 801af62:	68ba      	ldr	r2, [r7, #8]
 801af64:	4413      	add	r3, r2
 801af66:	2200      	movs	r2, #0
 801af68:	701a      	strb	r2, [r3, #0]
    idx++;
 801af6a:	7dfb      	ldrb	r3, [r7, #23]
 801af6c:	3301      	adds	r3, #1
 801af6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801af70:	693b      	ldr	r3, [r7, #16]
 801af72:	781b      	ldrb	r3, [r3, #0]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d1e7      	bne.n	801af48 <USBD_GetString+0x52>
 801af78:	e000      	b.n	801af7c <USBD_GetString+0x86>
    return;
 801af7a:	bf00      	nop
  }
}
 801af7c:	3718      	adds	r7, #24
 801af7e:	46bd      	mov	sp, r7
 801af80:	bd80      	pop	{r7, pc}

0801af82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801af82:	b480      	push	{r7}
 801af84:	b085      	sub	sp, #20
 801af86:	af00      	add	r7, sp, #0
 801af88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801af8a:	2300      	movs	r3, #0
 801af8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801af92:	e005      	b.n	801afa0 <USBD_GetLen+0x1e>
  {
    len++;
 801af94:	7bfb      	ldrb	r3, [r7, #15]
 801af96:	3301      	adds	r3, #1
 801af98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	3301      	adds	r3, #1
 801af9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	781b      	ldrb	r3, [r3, #0]
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d1f5      	bne.n	801af94 <USBD_GetLen+0x12>
  }

  return len;
 801afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3714      	adds	r7, #20
 801afae:	46bd      	mov	sp, r7
 801afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb4:	4770      	bx	lr
	...

0801afb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afb8:	b480      	push	{r7}
 801afba:	b083      	sub	sp, #12
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	4603      	mov	r3, r0
 801afc0:	6039      	str	r1, [r7, #0]
 801afc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801afc4:	683b      	ldr	r3, [r7, #0]
 801afc6:	2212      	movs	r2, #18
 801afc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801afca:	4b03      	ldr	r3, [pc, #12]	; (801afd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801afcc:	4618      	mov	r0, r3
 801afce:	370c      	adds	r7, #12
 801afd0:	46bd      	mov	sp, r7
 801afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd6:	4770      	bx	lr
 801afd8:	20000580 	.word	0x20000580

0801afdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afdc:	b480      	push	{r7}
 801afde:	b083      	sub	sp, #12
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	4603      	mov	r3, r0
 801afe4:	6039      	str	r1, [r7, #0]
 801afe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	2204      	movs	r2, #4
 801afec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801afee:	4b03      	ldr	r3, [pc, #12]	; (801affc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	370c      	adds	r7, #12
 801aff4:	46bd      	mov	sp, r7
 801aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affa:	4770      	bx	lr
 801affc:	200005a0 	.word	0x200005a0

0801b000 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b082      	sub	sp, #8
 801b004:	af00      	add	r7, sp, #0
 801b006:	4603      	mov	r3, r0
 801b008:	6039      	str	r1, [r7, #0]
 801b00a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b00c:	79fb      	ldrb	r3, [r7, #7]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d105      	bne.n	801b01e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b012:	683a      	ldr	r2, [r7, #0]
 801b014:	4907      	ldr	r1, [pc, #28]	; (801b034 <USBD_FS_ProductStrDescriptor+0x34>)
 801b016:	4808      	ldr	r0, [pc, #32]	; (801b038 <USBD_FS_ProductStrDescriptor+0x38>)
 801b018:	f7ff ff6d 	bl	801aef6 <USBD_GetString>
 801b01c:	e004      	b.n	801b028 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b01e:	683a      	ldr	r2, [r7, #0]
 801b020:	4904      	ldr	r1, [pc, #16]	; (801b034 <USBD_FS_ProductStrDescriptor+0x34>)
 801b022:	4805      	ldr	r0, [pc, #20]	; (801b038 <USBD_FS_ProductStrDescriptor+0x38>)
 801b024:	f7ff ff67 	bl	801aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b028:	4b02      	ldr	r3, [pc, #8]	; (801b034 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b02a:	4618      	mov	r0, r3
 801b02c:	3708      	adds	r7, #8
 801b02e:	46bd      	mov	sp, r7
 801b030:	bd80      	pop	{r7, pc}
 801b032:	bf00      	nop
 801b034:	20009e20 	.word	0x20009e20
 801b038:	08022400 	.word	0x08022400

0801b03c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b082      	sub	sp, #8
 801b040:	af00      	add	r7, sp, #0
 801b042:	4603      	mov	r3, r0
 801b044:	6039      	str	r1, [r7, #0]
 801b046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b048:	683a      	ldr	r2, [r7, #0]
 801b04a:	4904      	ldr	r1, [pc, #16]	; (801b05c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b04c:	4804      	ldr	r0, [pc, #16]	; (801b060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b04e:	f7ff ff52 	bl	801aef6 <USBD_GetString>
  return USBD_StrDesc;
 801b052:	4b02      	ldr	r3, [pc, #8]	; (801b05c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b054:	4618      	mov	r0, r3
 801b056:	3708      	adds	r7, #8
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}
 801b05c:	20009e20 	.word	0x20009e20
 801b060:	08022408 	.word	0x08022408

0801b064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	af00      	add	r7, sp, #0
 801b06a:	4603      	mov	r3, r0
 801b06c:	6039      	str	r1, [r7, #0]
 801b06e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b070:	683b      	ldr	r3, [r7, #0]
 801b072:	221a      	movs	r2, #26
 801b074:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b076:	f000 f855 	bl	801b124 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b07a:	4b02      	ldr	r3, [pc, #8]	; (801b084 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b07c:	4618      	mov	r0, r3
 801b07e:	3708      	adds	r7, #8
 801b080:	46bd      	mov	sp, r7
 801b082:	bd80      	pop	{r7, pc}
 801b084:	200005a4 	.word	0x200005a4

0801b088 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b088:	b580      	push	{r7, lr}
 801b08a:	b082      	sub	sp, #8
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	4603      	mov	r3, r0
 801b090:	6039      	str	r1, [r7, #0]
 801b092:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b094:	79fb      	ldrb	r3, [r7, #7]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d105      	bne.n	801b0a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b09a:	683a      	ldr	r2, [r7, #0]
 801b09c:	4907      	ldr	r1, [pc, #28]	; (801b0bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801b09e:	4808      	ldr	r0, [pc, #32]	; (801b0c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b0a0:	f7ff ff29 	bl	801aef6 <USBD_GetString>
 801b0a4:	e004      	b.n	801b0b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b0a6:	683a      	ldr	r2, [r7, #0]
 801b0a8:	4904      	ldr	r1, [pc, #16]	; (801b0bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801b0aa:	4805      	ldr	r0, [pc, #20]	; (801b0c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b0ac:	f7ff ff23 	bl	801aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b0b0:	4b02      	ldr	r3, [pc, #8]	; (801b0bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	3708      	adds	r7, #8
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	bf00      	nop
 801b0bc:	20009e20 	.word	0x20009e20
 801b0c0:	0802241c 	.word	0x0802241c

0801b0c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b082      	sub	sp, #8
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	6039      	str	r1, [r7, #0]
 801b0ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b0d0:	79fb      	ldrb	r3, [r7, #7]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d105      	bne.n	801b0e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b0d6:	683a      	ldr	r2, [r7, #0]
 801b0d8:	4907      	ldr	r1, [pc, #28]	; (801b0f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b0da:	4808      	ldr	r0, [pc, #32]	; (801b0fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b0dc:	f7ff ff0b 	bl	801aef6 <USBD_GetString>
 801b0e0:	e004      	b.n	801b0ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b0e2:	683a      	ldr	r2, [r7, #0]
 801b0e4:	4904      	ldr	r1, [pc, #16]	; (801b0f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b0e6:	4805      	ldr	r0, [pc, #20]	; (801b0fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b0e8:	f7ff ff05 	bl	801aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b0ec:	4b02      	ldr	r3, [pc, #8]	; (801b0f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	3708      	adds	r7, #8
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}
 801b0f6:	bf00      	nop
 801b0f8:	20009e20 	.word	0x20009e20
 801b0fc:	0802242c 	.word	0x0802242c

0801b100 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b100:	b480      	push	{r7}
 801b102:	b083      	sub	sp, #12
 801b104:	af00      	add	r7, sp, #0
 801b106:	4603      	mov	r3, r0
 801b108:	6039      	str	r1, [r7, #0]
 801b10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801b10c:	683b      	ldr	r3, [r7, #0]
 801b10e:	220c      	movs	r2, #12
 801b110:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801b112:	4b03      	ldr	r3, [pc, #12]	; (801b120 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801b114:	4618      	mov	r0, r3
 801b116:	370c      	adds	r7, #12
 801b118:	46bd      	mov	sp, r7
 801b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11e:	4770      	bx	lr
 801b120:	20000594 	.word	0x20000594

0801b124 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b084      	sub	sp, #16
 801b128:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b12a:	4b0f      	ldr	r3, [pc, #60]	; (801b168 <Get_SerialNum+0x44>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b130:	4b0e      	ldr	r3, [pc, #56]	; (801b16c <Get_SerialNum+0x48>)
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b136:	4b0e      	ldr	r3, [pc, #56]	; (801b170 <Get_SerialNum+0x4c>)
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b13c:	68fa      	ldr	r2, [r7, #12]
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	4413      	add	r3, r2
 801b142:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d009      	beq.n	801b15e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b14a:	2208      	movs	r2, #8
 801b14c:	4909      	ldr	r1, [pc, #36]	; (801b174 <Get_SerialNum+0x50>)
 801b14e:	68f8      	ldr	r0, [r7, #12]
 801b150:	f000 f814 	bl	801b17c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b154:	2204      	movs	r2, #4
 801b156:	4908      	ldr	r1, [pc, #32]	; (801b178 <Get_SerialNum+0x54>)
 801b158:	68b8      	ldr	r0, [r7, #8]
 801b15a:	f000 f80f 	bl	801b17c <IntToUnicode>
  }
}
 801b15e:	bf00      	nop
 801b160:	3710      	adds	r7, #16
 801b162:	46bd      	mov	sp, r7
 801b164:	bd80      	pop	{r7, pc}
 801b166:	bf00      	nop
 801b168:	1fff7590 	.word	0x1fff7590
 801b16c:	1fff7594 	.word	0x1fff7594
 801b170:	1fff7598 	.word	0x1fff7598
 801b174:	200005a6 	.word	0x200005a6
 801b178:	200005b6 	.word	0x200005b6

0801b17c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b17c:	b480      	push	{r7}
 801b17e:	b087      	sub	sp, #28
 801b180:	af00      	add	r7, sp, #0
 801b182:	60f8      	str	r0, [r7, #12]
 801b184:	60b9      	str	r1, [r7, #8]
 801b186:	4613      	mov	r3, r2
 801b188:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b18a:	2300      	movs	r3, #0
 801b18c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b18e:	2300      	movs	r3, #0
 801b190:	75fb      	strb	r3, [r7, #23]
 801b192:	e027      	b.n	801b1e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	0f1b      	lsrs	r3, r3, #28
 801b198:	2b09      	cmp	r3, #9
 801b19a:	d80b      	bhi.n	801b1b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	0f1b      	lsrs	r3, r3, #28
 801b1a0:	b2da      	uxtb	r2, r3
 801b1a2:	7dfb      	ldrb	r3, [r7, #23]
 801b1a4:	005b      	lsls	r3, r3, #1
 801b1a6:	4619      	mov	r1, r3
 801b1a8:	68bb      	ldr	r3, [r7, #8]
 801b1aa:	440b      	add	r3, r1
 801b1ac:	3230      	adds	r2, #48	; 0x30
 801b1ae:	b2d2      	uxtb	r2, r2
 801b1b0:	701a      	strb	r2, [r3, #0]
 801b1b2:	e00a      	b.n	801b1ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	0f1b      	lsrs	r3, r3, #28
 801b1b8:	b2da      	uxtb	r2, r3
 801b1ba:	7dfb      	ldrb	r3, [r7, #23]
 801b1bc:	005b      	lsls	r3, r3, #1
 801b1be:	4619      	mov	r1, r3
 801b1c0:	68bb      	ldr	r3, [r7, #8]
 801b1c2:	440b      	add	r3, r1
 801b1c4:	3237      	adds	r2, #55	; 0x37
 801b1c6:	b2d2      	uxtb	r2, r2
 801b1c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	011b      	lsls	r3, r3, #4
 801b1ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b1d0:	7dfb      	ldrb	r3, [r7, #23]
 801b1d2:	005b      	lsls	r3, r3, #1
 801b1d4:	3301      	adds	r3, #1
 801b1d6:	68ba      	ldr	r2, [r7, #8]
 801b1d8:	4413      	add	r3, r2
 801b1da:	2200      	movs	r2, #0
 801b1dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b1de:	7dfb      	ldrb	r3, [r7, #23]
 801b1e0:	3301      	adds	r3, #1
 801b1e2:	75fb      	strb	r3, [r7, #23]
 801b1e4:	7dfa      	ldrb	r2, [r7, #23]
 801b1e6:	79fb      	ldrb	r3, [r7, #7]
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	d3d3      	bcc.n	801b194 <IntToUnicode+0x18>
  }
}
 801b1ec:	bf00      	nop
 801b1ee:	bf00      	nop
 801b1f0:	371c      	adds	r7, #28
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f8:	4770      	bx	lr

0801b1fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801b1fa:	b580      	push	{r7, lr}
 801b1fc:	b084      	sub	sp, #16
 801b1fe:	af00      	add	r7, sp, #0
 801b200:	60f8      	str	r0, [r7, #12]
 801b202:	60b9      	str	r1, [r7, #8]
 801b204:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	2202      	movs	r2, #2
 801b20a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	687a      	ldr	r2, [r7, #4]
 801b212:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	687a      	ldr	r2, [r7, #4]
 801b218:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	68ba      	ldr	r2, [r7, #8]
 801b21e:	2100      	movs	r1, #0
 801b220:	68f8      	ldr	r0, [r7, #12]
 801b222:	f7fe fcc1 	bl	8019ba8 <USBD_LL_Transmit>

  return USBD_OK;
 801b226:	2300      	movs	r3, #0
}
 801b228:	4618      	mov	r0, r3
 801b22a:	3710      	adds	r7, #16
 801b22c:	46bd      	mov	sp, r7
 801b22e:	bd80      	pop	{r7, pc}

0801b230 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b084      	sub	sp, #16
 801b234:	af00      	add	r7, sp, #0
 801b236:	60f8      	str	r0, [r7, #12]
 801b238:	60b9      	str	r1, [r7, #8]
 801b23a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	68ba      	ldr	r2, [r7, #8]
 801b240:	2100      	movs	r1, #0
 801b242:	68f8      	ldr	r0, [r7, #12]
 801b244:	f7fe fcb0 	bl	8019ba8 <USBD_LL_Transmit>

  return USBD_OK;
 801b248:	2300      	movs	r3, #0
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3710      	adds	r7, #16
 801b24e:	46bd      	mov	sp, r7
 801b250:	bd80      	pop	{r7, pc}

0801b252 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b252:	b580      	push	{r7, lr}
 801b254:	b084      	sub	sp, #16
 801b256:	af00      	add	r7, sp, #0
 801b258:	60f8      	str	r0, [r7, #12]
 801b25a:	60b9      	str	r1, [r7, #8]
 801b25c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	2203      	movs	r2, #3
 801b262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	687a      	ldr	r2, [r7, #4]
 801b272:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	68ba      	ldr	r2, [r7, #8]
 801b27a:	2100      	movs	r1, #0
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f7fe fccb 	bl	8019c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b282:	2300      	movs	r3, #0
}
 801b284:	4618      	mov	r0, r3
 801b286:	3710      	adds	r7, #16
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}

0801b28c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b084      	sub	sp, #16
 801b290:	af00      	add	r7, sp, #0
 801b292:	60f8      	str	r0, [r7, #12]
 801b294:	60b9      	str	r1, [r7, #8]
 801b296:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	68ba      	ldr	r2, [r7, #8]
 801b29c:	2100      	movs	r1, #0
 801b29e:	68f8      	ldr	r0, [r7, #12]
 801b2a0:	f7fe fcba 	bl	8019c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b2a4:	2300      	movs	r3, #0
}
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	3710      	adds	r7, #16
 801b2aa:	46bd      	mov	sp, r7
 801b2ac:	bd80      	pop	{r7, pc}

0801b2ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b2ae:	b580      	push	{r7, lr}
 801b2b0:	b082      	sub	sp, #8
 801b2b2:	af00      	add	r7, sp, #0
 801b2b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	2204      	movs	r2, #4
 801b2ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b2be:	2300      	movs	r3, #0
 801b2c0:	2200      	movs	r2, #0
 801b2c2:	2100      	movs	r1, #0
 801b2c4:	6878      	ldr	r0, [r7, #4]
 801b2c6:	f7fe fc6f 	bl	8019ba8 <USBD_LL_Transmit>

  return USBD_OK;
 801b2ca:	2300      	movs	r3, #0
}
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	3708      	adds	r7, #8
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	bd80      	pop	{r7, pc}

0801b2d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	2205      	movs	r2, #5
 801b2e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	2100      	movs	r1, #0
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	f7fe fc94 	bl	8019c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b2f0:	2300      	movs	r3, #0
}
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	3708      	adds	r7, #8
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}

0801b2fa <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b2fa:	b580      	push	{r7, lr}
 801b2fc:	b084      	sub	sp, #16
 801b2fe:	af00      	add	r7, sp, #0
 801b300:	6078      	str	r0, [r7, #4]
 801b302:	460b      	mov	r3, r1
 801b304:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDCMSC_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_CDCMSC_HandleTypeDef));
 801b306:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b30a:	f7fe fd1f 	bl	8019d4c <USBD_static_malloc>
 801b30e:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d105      	bne.n	801b322 <USBD_MSC_Init+0x28>
  {
    pdev->pClassDataMSC = NULL;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	2200      	movs	r2, #0
 801b31a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801b31e:	2302      	movs	r3, #2
 801b320:	e034      	b.n	801b38c <USBD_MSC_Init+0x92>
  }

  pdev->pClassDataMSC = (void *)hmsc;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	68fa      	ldr	r2, [r7, #12]
 801b326:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	7c1b      	ldrb	r3, [r3, #16]
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d115      	bne.n	801b35e <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b332:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b336:	2202      	movs	r2, #2
 801b338:	2101      	movs	r1, #1
 801b33a:	6878      	ldr	r0, [r7, #4]
 801b33c:	f7fe fabc 	bl	80198b8 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2201      	movs	r2, #1
 801b344:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801b348:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b34c:	2202      	movs	r2, #2
 801b34e:	2181      	movs	r1, #129	; 0x81
 801b350:	6878      	ldr	r0, [r7, #4]
 801b352:	f7fe fab1 	bl	80198b8 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	2201      	movs	r2, #1
 801b35a:	871a      	strh	r2, [r3, #56]	; 0x38
 801b35c:	e012      	b.n	801b384 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_OUT_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b35e:	2340      	movs	r3, #64	; 0x40
 801b360:	2202      	movs	r2, #2
 801b362:	2101      	movs	r1, #1
 801b364:	6878      	ldr	r0, [r7, #4]
 801b366:	f7fe faa7 	bl	80198b8 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 1U;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2201      	movs	r2, #1
 801b36e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_IN_EP, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801b372:	2340      	movs	r3, #64	; 0x40
 801b374:	2202      	movs	r2, #2
 801b376:	2181      	movs	r1, #129	; 0x81
 801b378:	6878      	ldr	r0, [r7, #4]
 801b37a:	f7fe fa9d 	bl	80198b8 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 1U;
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	2201      	movs	r2, #1
 801b382:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	f000 f958 	bl	801b63a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801b38a:	2300      	movs	r3, #0
}
 801b38c:	4618      	mov	r0, r3
 801b38e:	3710      	adds	r7, #16
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}

0801b394 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b082      	sub	sp, #8
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
 801b39c:	460b      	mov	r3, r1
 801b39e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_OUT_EP);
 801b3a0:	2101      	movs	r1, #1
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	f7fe fac6 	bl	8019934 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_OUT_EP & 0xFU].is_used = 0U;
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_IN_EP);
 801b3b0:	2181      	movs	r1, #129	; 0x81
 801b3b2:	6878      	ldr	r0, [r7, #4]
 801b3b4:	f7fe fabe 	bl	8019934 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_IN_EP & 0xFU].is_used = 0U;
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassDataMSC != NULL)
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d00c      	beq.n	801b3e2 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801b3c8:	6878      	ldr	r0, [r7, #4]
 801b3ca:	f000 f994 	bl	801b6f6 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataMSC);
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f7fe fcc7 	bl	8019d68 <USBD_static_free>
    pdev->pClassDataMSC = NULL;
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	2200      	movs	r2, #0
 801b3de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801b3e2:	2300      	movs	r3, #0
}
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3708      	adds	r7, #8
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}

0801b3ec <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b086      	sub	sp, #24
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
 801b3f4:	6039      	str	r1, [r7, #0]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b3fc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801b3fe:	2300      	movs	r3, #0
 801b400:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801b402:	2300      	movs	r3, #0
 801b404:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801b406:	693b      	ldr	r3, [r7, #16]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d101      	bne.n	801b410 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801b40c:	2303      	movs	r3, #3
 801b40e:	e0db      	b.n	801b5c8 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b410:	683b      	ldr	r3, [r7, #0]
 801b412:	781b      	ldrb	r3, [r3, #0]
 801b414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d04e      	beq.n	801b4ba <USBD_MSC_Setup+0xce>
 801b41c:	2b20      	cmp	r3, #32
 801b41e:	f040 80cb 	bne.w	801b5b8 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801b422:	683b      	ldr	r3, [r7, #0]
 801b424:	785b      	ldrb	r3, [r3, #1]
 801b426:	2bfe      	cmp	r3, #254	; 0xfe
 801b428:	d002      	beq.n	801b430 <USBD_MSC_Setup+0x44>
 801b42a:	2bff      	cmp	r3, #255	; 0xff
 801b42c:	d025      	beq.n	801b47a <USBD_MSC_Setup+0x8e>
 801b42e:	e03c      	b.n	801b4aa <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b430:	683b      	ldr	r3, [r7, #0]
 801b432:	885b      	ldrh	r3, [r3, #2]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d119      	bne.n	801b46c <USBD_MSC_Setup+0x80>
 801b438:	683b      	ldr	r3, [r7, #0]
 801b43a:	88db      	ldrh	r3, [r3, #6]
 801b43c:	2b01      	cmp	r3, #1
 801b43e:	d115      	bne.n	801b46c <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801b440:	683b      	ldr	r3, [r7, #0]
 801b442:	781b      	ldrb	r3, [r3, #0]
 801b444:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801b446:	2b00      	cmp	r3, #0
 801b448:	da10      	bge.n	801b46c <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetMaxLun();
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b450:	699b      	ldr	r3, [r3, #24]
 801b452:	4798      	blx	r3
 801b454:	4603      	mov	r3, r0
 801b456:	461a      	mov	r2, r3
 801b458:	693b      	ldr	r3, [r7, #16]
 801b45a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	2201      	movs	r2, #1
 801b460:	4619      	mov	r1, r3
 801b462:	6878      	ldr	r0, [r7, #4]
 801b464:	f7ff fec9 	bl	801b1fa <USBD_CtlSendData>
 801b468:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b46a:	e025      	b.n	801b4b8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b46c:	6839      	ldr	r1, [r7, #0]
 801b46e:	6878      	ldr	r0, [r7, #4]
 801b470:	f7ff fd30 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 801b474:	2303      	movs	r3, #3
 801b476:	75fb      	strb	r3, [r7, #23]
          break;
 801b478:	e01e      	b.n	801b4b8 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	885b      	ldrh	r3, [r3, #2]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d10c      	bne.n	801b49c <USBD_MSC_Setup+0xb0>
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	88db      	ldrh	r3, [r3, #6]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d108      	bne.n	801b49c <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801b48a:	683b      	ldr	r3, [r7, #0]
 801b48c:	781b      	ldrb	r3, [r3, #0]
 801b48e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801b490:	2b00      	cmp	r3, #0
 801b492:	db03      	blt.n	801b49c <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801b494:	6878      	ldr	r0, [r7, #4]
 801b496:	f000 f908 	bl	801b6aa <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b49a:	e00d      	b.n	801b4b8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801b49c:	6839      	ldr	r1, [r7, #0]
 801b49e:	6878      	ldr	r0, [r7, #4]
 801b4a0:	f7ff fd18 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 801b4a4:	2303      	movs	r3, #3
 801b4a6:	75fb      	strb	r3, [r7, #23]
          break;
 801b4a8:	e006      	b.n	801b4b8 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801b4aa:	6839      	ldr	r1, [r7, #0]
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	f7ff fd11 	bl	801aed4 <USBD_CtlError>
          ret = USBD_FAIL;
 801b4b2:	2303      	movs	r3, #3
 801b4b4:	75fb      	strb	r3, [r7, #23]
          break;
 801b4b6:	bf00      	nop
      }
      break;
 801b4b8:	e085      	b.n	801b5c6 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b4ba:	683b      	ldr	r3, [r7, #0]
 801b4bc:	785b      	ldrb	r3, [r3, #1]
 801b4be:	2b0b      	cmp	r3, #11
 801b4c0:	d871      	bhi.n	801b5a6 <USBD_MSC_Setup+0x1ba>
 801b4c2:	a201      	add	r2, pc, #4	; (adr r2, 801b4c8 <USBD_MSC_Setup+0xdc>)
 801b4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4c8:	0801b4f9 	.word	0x0801b4f9
 801b4cc:	0801b575 	.word	0x0801b575
 801b4d0:	0801b5a7 	.word	0x0801b5a7
 801b4d4:	0801b5a7 	.word	0x0801b5a7
 801b4d8:	0801b5a7 	.word	0x0801b5a7
 801b4dc:	0801b5a7 	.word	0x0801b5a7
 801b4e0:	0801b5a7 	.word	0x0801b5a7
 801b4e4:	0801b5a7 	.word	0x0801b5a7
 801b4e8:	0801b5a7 	.word	0x0801b5a7
 801b4ec:	0801b5a7 	.word	0x0801b5a7
 801b4f0:	0801b523 	.word	0x0801b523
 801b4f4:	0801b54d 	.word	0x0801b54d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b4fe:	b2db      	uxtb	r3, r3
 801b500:	2b03      	cmp	r3, #3
 801b502:	d107      	bne.n	801b514 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801b504:	f107 030e 	add.w	r3, r7, #14
 801b508:	2202      	movs	r2, #2
 801b50a:	4619      	mov	r1, r3
 801b50c:	6878      	ldr	r0, [r7, #4]
 801b50e:	f7ff fe74 	bl	801b1fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b512:	e050      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b514:	6839      	ldr	r1, [r7, #0]
 801b516:	6878      	ldr	r0, [r7, #4]
 801b518:	f7ff fcdc 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 801b51c:	2303      	movs	r3, #3
 801b51e:	75fb      	strb	r3, [r7, #23]
          break;
 801b520:	e049      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b528:	b2db      	uxtb	r3, r3
 801b52a:	2b03      	cmp	r3, #3
 801b52c:	d107      	bne.n	801b53e <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801b52e:	693b      	ldr	r3, [r7, #16]
 801b530:	3304      	adds	r3, #4
 801b532:	2201      	movs	r2, #1
 801b534:	4619      	mov	r1, r3
 801b536:	6878      	ldr	r0, [r7, #4]
 801b538:	f7ff fe5f 	bl	801b1fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b53c:	e03b      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b53e:	6839      	ldr	r1, [r7, #0]
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f7ff fcc7 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 801b546:	2303      	movs	r3, #3
 801b548:	75fb      	strb	r3, [r7, #23]
          break;
 801b54a:	e034      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b552:	b2db      	uxtb	r3, r3
 801b554:	2b03      	cmp	r3, #3
 801b556:	d106      	bne.n	801b566 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801b558:	683b      	ldr	r3, [r7, #0]
 801b55a:	885b      	ldrh	r3, [r3, #2]
 801b55c:	b2db      	uxtb	r3, r3
 801b55e:	461a      	mov	r2, r3
 801b560:	693b      	ldr	r3, [r7, #16]
 801b562:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b564:	e027      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801b566:	6839      	ldr	r1, [r7, #0]
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	f7ff fcb3 	bl	801aed4 <USBD_CtlError>
            ret = USBD_FAIL;
 801b56e:	2303      	movs	r3, #3
 801b570:	75fb      	strb	r3, [r7, #23]
          break;
 801b572:	e020      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	2b03      	cmp	r3, #3
 801b57e:	d119      	bne.n	801b5b4 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	885b      	ldrh	r3, [r3, #2]
 801b584:	2b00      	cmp	r3, #0
 801b586:	d115      	bne.n	801b5b4 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801b588:	683b      	ldr	r3, [r7, #0]
 801b58a:	889b      	ldrh	r3, [r3, #4]
 801b58c:	b2db      	uxtb	r3, r3
 801b58e:	4619      	mov	r1, r3
 801b590:	6878      	ldr	r0, [r7, #4]
 801b592:	f7fe fa05 	bl	80199a0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	889b      	ldrh	r3, [r3, #4]
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	4619      	mov	r1, r3
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f000 fa42 	bl	801ba28 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801b5a4:	e006      	b.n	801b5b4 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801b5a6:	6839      	ldr	r1, [r7, #0]
 801b5a8:	6878      	ldr	r0, [r7, #4]
 801b5aa:	f7ff fc93 	bl	801aed4 <USBD_CtlError>
          ret = USBD_FAIL;
 801b5ae:	2303      	movs	r3, #3
 801b5b0:	75fb      	strb	r3, [r7, #23]
          break;
 801b5b2:	e000      	b.n	801b5b6 <USBD_MSC_Setup+0x1ca>
          break;
 801b5b4:	bf00      	nop
      }
      break;
 801b5b6:	e006      	b.n	801b5c6 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801b5b8:	6839      	ldr	r1, [r7, #0]
 801b5ba:	6878      	ldr	r0, [r7, #4]
 801b5bc:	f7ff fc8a 	bl	801aed4 <USBD_CtlError>
      ret = USBD_FAIL;
 801b5c0:	2303      	movs	r3, #3
 801b5c2:	75fb      	strb	r3, [r7, #23]
      break;
 801b5c4:	bf00      	nop
  }

  return (uint8_t)ret;
 801b5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3718      	adds	r7, #24
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}

0801b5d0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	b082      	sub	sp, #8
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	6078      	str	r0, [r7, #4]
 801b5d8:	460b      	mov	r3, r1
 801b5da:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801b5dc:	78fb      	ldrb	r3, [r7, #3]
 801b5de:	4619      	mov	r1, r3
 801b5e0:	6878      	ldr	r0, [r7, #4]
 801b5e2:	f000 f89c 	bl	801b71e <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801b5e6:	2300      	movs	r3, #0
}
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	3708      	adds	r7, #8
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}

0801b5f0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b082      	sub	sp, #8
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
 801b5f8:	460b      	mov	r3, r1
 801b5fa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801b5fc:	78fb      	ldrb	r3, [r7, #3]
 801b5fe:	4619      	mov	r1, r3
 801b600:	6878      	ldr	r0, [r7, #4]
 801b602:	f000 f8c2 	bl	801b78a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801b606:	2300      	movs	r3, #0
}
 801b608:	4618      	mov	r0, r3
 801b60a:	3708      	adds	r7, #8
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bd80      	pop	{r7, pc}

0801b610 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801b610:	b480      	push	{r7}
 801b612:	b083      	sub	sp, #12
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801b61a:	683b      	ldr	r3, [r7, #0]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d101      	bne.n	801b624 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801b620:	2303      	movs	r3, #3
 801b622:	e004      	b.n	801b62e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserDataMSC = fops;
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	683a      	ldr	r2, [r7, #0]
 801b628:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801b62c:	2300      	movs	r3, #0
}
 801b62e:	4618      	mov	r0, r3
 801b630:	370c      	adds	r7, #12
 801b632:	46bd      	mov	sp, r7
 801b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b638:	4770      	bx	lr

0801b63a <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801b63a:	b580      	push	{r7, lr}
 801b63c:	b084      	sub	sp, #16
 801b63e:	af00      	add	r7, sp, #0
 801b640:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b648:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d028      	beq.n	801b6a2 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	2200      	movs	r2, #0
 801b654:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	2200      	movs	r2, #0
 801b65a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	2200      	movs	r2, #0
 801b660:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	2200      	movs	r2, #0
 801b668:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	2200      	movs	r2, #0
 801b670:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Init(0U);
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	2000      	movs	r0, #0
 801b67e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_OUT_EP);
 801b680:	2101      	movs	r1, #1
 801b682:	6878      	ldr	r0, [r7, #4]
 801b684:	f7fe f98c 	bl	80199a0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_IN_EP);
 801b688:	2181      	movs	r1, #129	; 0x81
 801b68a:	6878      	ldr	r0, [r7, #4]
 801b68c:	f7fe f988 	bl	80199a0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b696:	231f      	movs	r3, #31
 801b698:	2101      	movs	r1, #1
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f7fe fabc 	bl	8019c18 <USBD_LL_PrepareReceive>
 801b6a0:	e000      	b.n	801b6a4 <MSC_BOT_Init+0x6a>
    return;
 801b6a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b6a4:	3710      	adds	r7, #16
 801b6a6:	46bd      	mov	sp, r7
 801b6a8:	bd80      	pop	{r7, pc}

0801b6aa <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801b6aa:	b580      	push	{r7, lr}
 801b6ac:	b084      	sub	sp, #16
 801b6ae:	af00      	add	r7, sp, #0
 801b6b0:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b6b8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d016      	beq.n	801b6ee <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	2201      	movs	r2, #1
 801b6ca:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_IN_EP);
 801b6cc:	2181      	movs	r1, #129	; 0x81
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f7fe f9d2 	bl	8019a78 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_OUT_EP);
 801b6d4:	2101      	movs	r1, #1
 801b6d6:	6878      	ldr	r0, [r7, #4]
 801b6d8:	f7fe f9ce 	bl	8019a78 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b6e2:	231f      	movs	r3, #31
 801b6e4:	2101      	movs	r1, #1
 801b6e6:	6878      	ldr	r0, [r7, #4]
 801b6e8:	f7fe fa96 	bl	8019c18 <USBD_LL_PrepareReceive>
 801b6ec:	e000      	b.n	801b6f0 <MSC_BOT_Reset+0x46>
    return;
 801b6ee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b6f0:	3710      	adds	r7, #16
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	bd80      	pop	{r7, pc}

0801b6f6 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801b6f6:	b480      	push	{r7}
 801b6f8:	b085      	sub	sp, #20
 801b6fa:	af00      	add	r7, sp, #0
 801b6fc:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b704:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d002      	beq.n	801b712 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	2200      	movs	r2, #0
 801b710:	721a      	strb	r2, [r3, #8]
  }
}
 801b712:	bf00      	nop
 801b714:	3714      	adds	r7, #20
 801b716:	46bd      	mov	sp, r7
 801b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71c:	4770      	bx	lr

0801b71e <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b71e:	b580      	push	{r7, lr}
 801b720:	b084      	sub	sp, #16
 801b722:	af00      	add	r7, sp, #0
 801b724:	6078      	str	r0, [r7, #4]
 801b726:	460b      	mov	r3, r1
 801b728:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b730:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d020      	beq.n	801b77a <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	7a1b      	ldrb	r3, [r3, #8]
 801b73c:	2b02      	cmp	r3, #2
 801b73e:	d005      	beq.n	801b74c <MSC_BOT_DataIn+0x2e>
 801b740:	2b02      	cmp	r3, #2
 801b742:	db1c      	blt.n	801b77e <MSC_BOT_DataIn+0x60>
 801b744:	3b03      	subs	r3, #3
 801b746:	2b01      	cmp	r3, #1
 801b748:	d819      	bhi.n	801b77e <MSC_BOT_DataIn+0x60>
 801b74a:	e011      	b.n	801b770 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b758:	461a      	mov	r2, r3
 801b75a:	6878      	ldr	r0, [r7, #4]
 801b75c:	f000 f992 	bl	801ba84 <SCSI_ProcessCmd>
 801b760:	4603      	mov	r3, r0
 801b762:	2b00      	cmp	r3, #0
 801b764:	da0d      	bge.n	801b782 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b766:	2101      	movs	r1, #1
 801b768:	6878      	ldr	r0, [r7, #4]
 801b76a:	f000 f8fb 	bl	801b964 <MSC_BOT_SendCSW>
      }
      break;
 801b76e:	e008      	b.n	801b782 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b770:	2100      	movs	r1, #0
 801b772:	6878      	ldr	r0, [r7, #4]
 801b774:	f000 f8f6 	bl	801b964 <MSC_BOT_SendCSW>
      break;
 801b778:	e004      	b.n	801b784 <MSC_BOT_DataIn+0x66>
    return;
 801b77a:	bf00      	nop
 801b77c:	e002      	b.n	801b784 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801b77e:	bf00      	nop
 801b780:	e000      	b.n	801b784 <MSC_BOT_DataIn+0x66>
      break;
 801b782:	bf00      	nop
  }
}
 801b784:	3710      	adds	r7, #16
 801b786:	46bd      	mov	sp, r7
 801b788:	bd80      	pop	{r7, pc}

0801b78a <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b78a:	b580      	push	{r7, lr}
 801b78c:	b084      	sub	sp, #16
 801b78e:	af00      	add	r7, sp, #0
 801b790:	6078      	str	r0, [r7, #4]
 801b792:	460b      	mov	r3, r1
 801b794:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b79c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d01c      	beq.n	801b7de <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	7a1b      	ldrb	r3, [r3, #8]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d002      	beq.n	801b7b2 <MSC_BOT_DataOut+0x28>
 801b7ac:	2b01      	cmp	r3, #1
 801b7ae:	d004      	beq.n	801b7ba <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801b7b0:	e018      	b.n	801b7e4 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801b7b2:	6878      	ldr	r0, [r7, #4]
 801b7b4:	f000 f81a 	bl	801b7ec <MSC_BOT_CBW_Decode>
      break;
 801b7b8:	e014      	b.n	801b7e4 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b7ba:	68fb      	ldr	r3, [r7, #12]
 801b7bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b7c6:	461a      	mov	r2, r3
 801b7c8:	6878      	ldr	r0, [r7, #4]
 801b7ca:	f000 f95b 	bl	801ba84 <SCSI_ProcessCmd>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	da06      	bge.n	801b7e2 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b7d4:	2101      	movs	r1, #1
 801b7d6:	6878      	ldr	r0, [r7, #4]
 801b7d8:	f000 f8c4 	bl	801b964 <MSC_BOT_SendCSW>
      break;
 801b7dc:	e001      	b.n	801b7e2 <MSC_BOT_DataOut+0x58>
    return;
 801b7de:	bf00      	nop
 801b7e0:	e000      	b.n	801b7e4 <MSC_BOT_DataOut+0x5a>
      break;
 801b7e2:	bf00      	nop
  }
}
 801b7e4:	3710      	adds	r7, #16
 801b7e6:	46bd      	mov	sp, r7
 801b7e8:	bd80      	pop	{r7, pc}
	...

0801b7ec <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b7fa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d077      	beq.n	801b8f2 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b81a:	2101      	movs	r1, #1
 801b81c:	6878      	ldr	r0, [r7, #4]
 801b81e:	f7fe fa33 	bl	8019c88 <USBD_LL_GetRxDataSize>
 801b822:	4603      	mov	r3, r0
 801b824:	2b1f      	cmp	r3, #31
 801b826:	d114      	bne.n	801b852 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_OUT_EP) != USBD_BOT_CBW_LENGTH) ||
 801b82e:	4a34      	ldr	r2, [pc, #208]	; (801b900 <MSC_BOT_CBW_Decode+0x114>)
 801b830:	4293      	cmp	r3, r2
 801b832:	d10e      	bne.n	801b852 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801b83a:	2b01      	cmp	r3, #1
 801b83c:	d809      	bhi.n	801b852 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801b844:	2b00      	cmp	r3, #0
 801b846:	d004      	beq.n	801b852 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801b84e:	2b10      	cmp	r3, #16
 801b850:	d90e      	bls.n	801b870 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b858:	2320      	movs	r3, #32
 801b85a:	2205      	movs	r2, #5
 801b85c:	6878      	ldr	r0, [r7, #4]
 801b85e:	f000 fdbc 	bl	801c3da <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	2202      	movs	r2, #2
 801b866:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801b868:	6878      	ldr	r0, [r7, #4]
 801b86a:	f000 f8ab 	bl	801b9c4 <MSC_BOT_Abort>
 801b86e:	e043      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801b87c:	461a      	mov	r2, r3
 801b87e:	6878      	ldr	r0, [r7, #4]
 801b880:	f000 f900 	bl	801ba84 <SCSI_ProcessCmd>
 801b884:	4603      	mov	r3, r0
 801b886:	2b00      	cmp	r3, #0
 801b888:	da0c      	bge.n	801b8a4 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	7a1b      	ldrb	r3, [r3, #8]
 801b88e:	2b05      	cmp	r3, #5
 801b890:	d104      	bne.n	801b89c <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801b892:	2101      	movs	r1, #1
 801b894:	6878      	ldr	r0, [r7, #4]
 801b896:	f000 f865 	bl	801b964 <MSC_BOT_SendCSW>
 801b89a:	e02d      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	f000 f891 	bl	801b9c4 <MSC_BOT_Abort>
 801b8a2:	e029      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	7a1b      	ldrb	r3, [r3, #8]
 801b8a8:	2b02      	cmp	r3, #2
 801b8aa:	d024      	beq.n	801b8f6 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801b8b0:	2b01      	cmp	r3, #1
 801b8b2:	d020      	beq.n	801b8f6 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801b8b8:	2b03      	cmp	r3, #3
 801b8ba:	d01c      	beq.n	801b8f6 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	68db      	ldr	r3, [r3, #12]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d009      	beq.n	801b8d8 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	f103 0110 	add.w	r1, r3, #16
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	68db      	ldr	r3, [r3, #12]
 801b8ce:	461a      	mov	r2, r3
 801b8d0:	6878      	ldr	r0, [r7, #4]
 801b8d2:	f000 f817 	bl	801b904 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801b8d6:	e00f      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	68db      	ldr	r3, [r3, #12]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d104      	bne.n	801b8ea <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801b8e0:	2100      	movs	r1, #0
 801b8e2:	6878      	ldr	r0, [r7, #4]
 801b8e4:	f000 f83e 	bl	801b964 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801b8e8:	e006      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801b8ea:	6878      	ldr	r0, [r7, #4]
 801b8ec:	f000 f86a 	bl	801b9c4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801b8f0:	e002      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801b8f2:	bf00      	nop
 801b8f4:	e000      	b.n	801b8f8 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801b8f6:	bf00      	nop
    }
  }
}
 801b8f8:	3710      	adds	r7, #16
 801b8fa:	46bd      	mov	sp, r7
 801b8fc:	bd80      	pop	{r7, pc}
 801b8fe:	bf00      	nop
 801b900:	43425355 	.word	0x43425355

0801b904 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b086      	sub	sp, #24
 801b908:	af00      	add	r7, sp, #0
 801b90a:	60f8      	str	r0, [r7, #12]
 801b90c:	60b9      	str	r1, [r7, #8]
 801b90e:	607a      	str	r2, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b916:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801b918:	697b      	ldr	r3, [r7, #20]
 801b91a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801b91e:	687a      	ldr	r2, [r7, #4]
 801b920:	4293      	cmp	r3, r2
 801b922:	bf28      	it	cs
 801b924:	4613      	movcs	r3, r2
 801b926:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d015      	beq.n	801b95a <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	1ad2      	subs	r2, r2, r3
 801b938:	697b      	ldr	r3, [r7, #20]
 801b93a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801b93e:	697b      	ldr	r3, [r7, #20]
 801b940:	2200      	movs	r2, #0
 801b942:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801b946:	697b      	ldr	r3, [r7, #20]
 801b948:	2204      	movs	r2, #4
 801b94a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, pbuf, length);
 801b94c:	693b      	ldr	r3, [r7, #16]
 801b94e:	68ba      	ldr	r2, [r7, #8]
 801b950:	2181      	movs	r1, #129	; 0x81
 801b952:	68f8      	ldr	r0, [r7, #12]
 801b954:	f7fe f928 	bl	8019ba8 <USBD_LL_Transmit>
 801b958:	e000      	b.n	801b95c <MSC_BOT_SendData+0x58>
    return;
 801b95a:	bf00      	nop
}
 801b95c:	3718      	adds	r7, #24
 801b95e:	46bd      	mov	sp, r7
 801b960:	bd80      	pop	{r7, pc}
	...

0801b964 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b084      	sub	sp, #16
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
 801b96c:	460b      	mov	r3, r1
 801b96e:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b976:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d01b      	beq.n	801b9b6 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	4a0f      	ldr	r2, [pc, #60]	; (801b9c0 <MSC_BOT_SendCSW+0x5c>)
 801b982:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	78fa      	ldrb	r2, [r7, #3]
 801b98a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	2200      	movs	r2, #0
 801b992:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, (uint8_t *)&hmsc->csw,
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801b99a:	230d      	movs	r3, #13
 801b99c:	2181      	movs	r1, #129	; 0x81
 801b99e:	6878      	ldr	r0, [r7, #4]
 801b9a0:	f7fe f902 	bl	8019ba8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, (uint8_t *)&hmsc->cbw,
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801b9aa:	231f      	movs	r3, #31
 801b9ac:	2101      	movs	r1, #1
 801b9ae:	6878      	ldr	r0, [r7, #4]
 801b9b0:	f7fe f932 	bl	8019c18 <USBD_LL_PrepareReceive>
 801b9b4:	e000      	b.n	801b9b8 <MSC_BOT_SendCSW+0x54>
    return;
 801b9b6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801b9b8:	3710      	adds	r7, #16
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bd80      	pop	{r7, pc}
 801b9be:	bf00      	nop
 801b9c0:	53425355 	.word	0x53425355

0801b9c4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b084      	sub	sp, #16
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b9d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d022      	beq.n	801ba20 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d10c      	bne.n	801b9fe <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d007      	beq.n	801b9fe <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d103      	bne.n	801b9fe <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801b9f6:	2101      	movs	r1, #1
 801b9f8:	6878      	ldr	r0, [r7, #4]
 801b9fa:	f7fe f807 	bl	8019a0c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801b9fe:	2181      	movs	r1, #129	; 0x81
 801ba00:	6878      	ldr	r0, [r7, #4]
 801ba02:	f7fe f803 	bl	8019a0c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	7a5b      	ldrb	r3, [r3, #9]
 801ba0a:	2b02      	cmp	r3, #2
 801ba0c:	d109      	bne.n	801ba22 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801ba0e:	2181      	movs	r1, #129	; 0x81
 801ba10:	6878      	ldr	r0, [r7, #4]
 801ba12:	f7fd fffb 	bl	8019a0c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801ba16:	2101      	movs	r1, #1
 801ba18:	6878      	ldr	r0, [r7, #4]
 801ba1a:	f7fd fff7 	bl	8019a0c <USBD_LL_StallEP>
 801ba1e:	e000      	b.n	801ba22 <MSC_BOT_Abort+0x5e>
    return;
 801ba20:	bf00      	nop
  }
}
 801ba22:	3710      	adds	r7, #16
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bd80      	pop	{r7, pc}

0801ba28 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ba28:	b580      	push	{r7, lr}
 801ba2a:	b084      	sub	sp, #16
 801ba2c:	af00      	add	r7, sp, #0
 801ba2e:	6078      	str	r0, [r7, #4]
 801ba30:	460b      	mov	r3, r1
 801ba32:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba3a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d019      	beq.n	801ba76 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	7a5b      	ldrb	r3, [r3, #9]
 801ba46:	2b02      	cmp	r3, #2
 801ba48:	d108      	bne.n	801ba5c <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_IN_EP);
 801ba4a:	2181      	movs	r1, #129	; 0x81
 801ba4c:	6878      	ldr	r0, [r7, #4]
 801ba4e:	f7fd ffdd 	bl	8019a0c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_OUT_EP);
 801ba52:	2101      	movs	r1, #1
 801ba54:	6878      	ldr	r0, [r7, #4]
 801ba56:	f7fd ffd9 	bl	8019a0c <USBD_LL_StallEP>
 801ba5a:	e00f      	b.n	801ba7c <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801ba5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	da0a      	bge.n	801ba7a <MSC_BOT_CplClrFeature+0x52>
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	7a5b      	ldrb	r3, [r3, #9]
 801ba68:	2b01      	cmp	r3, #1
 801ba6a:	d006      	beq.n	801ba7a <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801ba6c:	2101      	movs	r1, #1
 801ba6e:	6878      	ldr	r0, [r7, #4]
 801ba70:	f7ff ff78 	bl	801b964 <MSC_BOT_SendCSW>
 801ba74:	e002      	b.n	801ba7c <MSC_BOT_CplClrFeature+0x54>
    return;
 801ba76:	bf00      	nop
 801ba78:	e000      	b.n	801ba7c <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801ba7a:	bf00      	nop
  }
}
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
	...

0801ba84 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b086      	sub	sp, #24
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	60f8      	str	r0, [r7, #12]
 801ba8c:	460b      	mov	r3, r1
 801ba8e:	607a      	str	r2, [r7, #4]
 801ba90:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ba98:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801ba9a:	693b      	ldr	r3, [r7, #16]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d102      	bne.n	801baa6 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801baa0:	f04f 33ff 	mov.w	r3, #4294967295
 801baa4:	e168      	b.n	801bd78 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	781b      	ldrb	r3, [r3, #0]
 801baaa:	2baa      	cmp	r3, #170	; 0xaa
 801baac:	f000 8144 	beq.w	801bd38 <SCSI_ProcessCmd+0x2b4>
 801bab0:	2baa      	cmp	r3, #170	; 0xaa
 801bab2:	f300 8153 	bgt.w	801bd5c <SCSI_ProcessCmd+0x2d8>
 801bab6:	2ba8      	cmp	r3, #168	; 0xa8
 801bab8:	f000 812c 	beq.w	801bd14 <SCSI_ProcessCmd+0x290>
 801babc:	2ba8      	cmp	r3, #168	; 0xa8
 801babe:	f300 814d 	bgt.w	801bd5c <SCSI_ProcessCmd+0x2d8>
 801bac2:	2b5a      	cmp	r3, #90	; 0x5a
 801bac4:	f300 80c0 	bgt.w	801bc48 <SCSI_ProcessCmd+0x1c4>
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f2c0 8147 	blt.w	801bd5c <SCSI_ProcessCmd+0x2d8>
 801bace:	2b5a      	cmp	r3, #90	; 0x5a
 801bad0:	f200 8144 	bhi.w	801bd5c <SCSI_ProcessCmd+0x2d8>
 801bad4:	a201      	add	r2, pc, #4	; (adr r2, 801badc <SCSI_ProcessCmd+0x58>)
 801bad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bada:	bf00      	nop
 801badc:	0801bc4f 	.word	0x0801bc4f
 801bae0:	0801bd5d 	.word	0x0801bd5d
 801bae4:	0801bd5d 	.word	0x0801bd5d
 801bae8:	0801bc61 	.word	0x0801bc61
 801baec:	0801bd5d 	.word	0x0801bd5d
 801baf0:	0801bd5d 	.word	0x0801bd5d
 801baf4:	0801bd5d 	.word	0x0801bd5d
 801baf8:	0801bd5d 	.word	0x0801bd5d
 801bafc:	0801bd5d 	.word	0x0801bd5d
 801bb00:	0801bd5d 	.word	0x0801bd5d
 801bb04:	0801bd5d 	.word	0x0801bd5d
 801bb08:	0801bd5d 	.word	0x0801bd5d
 801bb0c:	0801bd5d 	.word	0x0801bd5d
 801bb10:	0801bd5d 	.word	0x0801bd5d
 801bb14:	0801bd5d 	.word	0x0801bd5d
 801bb18:	0801bd5d 	.word	0x0801bd5d
 801bb1c:	0801bd5d 	.word	0x0801bd5d
 801bb20:	0801bd5d 	.word	0x0801bd5d
 801bb24:	0801bc73 	.word	0x0801bc73
 801bb28:	0801bd5d 	.word	0x0801bd5d
 801bb2c:	0801bd5d 	.word	0x0801bd5d
 801bb30:	0801bd5d 	.word	0x0801bd5d
 801bb34:	0801bd5d 	.word	0x0801bd5d
 801bb38:	0801bd5d 	.word	0x0801bd5d
 801bb3c:	0801bd5d 	.word	0x0801bd5d
 801bb40:	0801bd5d 	.word	0x0801bd5d
 801bb44:	0801bca9 	.word	0x0801bca9
 801bb48:	0801bc85 	.word	0x0801bc85
 801bb4c:	0801bd5d 	.word	0x0801bd5d
 801bb50:	0801bd5d 	.word	0x0801bd5d
 801bb54:	0801bc97 	.word	0x0801bc97
 801bb58:	0801bd5d 	.word	0x0801bd5d
 801bb5c:	0801bd5d 	.word	0x0801bd5d
 801bb60:	0801bd5d 	.word	0x0801bd5d
 801bb64:	0801bd5d 	.word	0x0801bd5d
 801bb68:	0801bccd 	.word	0x0801bccd
 801bb6c:	0801bd5d 	.word	0x0801bd5d
 801bb70:	0801bcdf 	.word	0x0801bcdf
 801bb74:	0801bd5d 	.word	0x0801bd5d
 801bb78:	0801bd5d 	.word	0x0801bd5d
 801bb7c:	0801bd03 	.word	0x0801bd03
 801bb80:	0801bd5d 	.word	0x0801bd5d
 801bb84:	0801bd27 	.word	0x0801bd27
 801bb88:	0801bd5d 	.word	0x0801bd5d
 801bb8c:	0801bd5d 	.word	0x0801bd5d
 801bb90:	0801bd5d 	.word	0x0801bd5d
 801bb94:	0801bd5d 	.word	0x0801bd5d
 801bb98:	0801bd4b 	.word	0x0801bd4b
 801bb9c:	0801bd5d 	.word	0x0801bd5d
 801bba0:	0801bd5d 	.word	0x0801bd5d
 801bba4:	0801bd5d 	.word	0x0801bd5d
 801bba8:	0801bd5d 	.word	0x0801bd5d
 801bbac:	0801bd5d 	.word	0x0801bd5d
 801bbb0:	0801bd5d 	.word	0x0801bd5d
 801bbb4:	0801bd5d 	.word	0x0801bd5d
 801bbb8:	0801bd5d 	.word	0x0801bd5d
 801bbbc:	0801bd5d 	.word	0x0801bd5d
 801bbc0:	0801bd5d 	.word	0x0801bd5d
 801bbc4:	0801bd5d 	.word	0x0801bd5d
 801bbc8:	0801bd5d 	.word	0x0801bd5d
 801bbcc:	0801bd5d 	.word	0x0801bd5d
 801bbd0:	0801bd5d 	.word	0x0801bd5d
 801bbd4:	0801bd5d 	.word	0x0801bd5d
 801bbd8:	0801bd5d 	.word	0x0801bd5d
 801bbdc:	0801bd5d 	.word	0x0801bd5d
 801bbe0:	0801bd5d 	.word	0x0801bd5d
 801bbe4:	0801bd5d 	.word	0x0801bd5d
 801bbe8:	0801bd5d 	.word	0x0801bd5d
 801bbec:	0801bd5d 	.word	0x0801bd5d
 801bbf0:	0801bd5d 	.word	0x0801bd5d
 801bbf4:	0801bd5d 	.word	0x0801bd5d
 801bbf8:	0801bd5d 	.word	0x0801bd5d
 801bbfc:	0801bd5d 	.word	0x0801bd5d
 801bc00:	0801bd5d 	.word	0x0801bd5d
 801bc04:	0801bd5d 	.word	0x0801bd5d
 801bc08:	0801bd5d 	.word	0x0801bd5d
 801bc0c:	0801bd5d 	.word	0x0801bd5d
 801bc10:	0801bd5d 	.word	0x0801bd5d
 801bc14:	0801bd5d 	.word	0x0801bd5d
 801bc18:	0801bd5d 	.word	0x0801bd5d
 801bc1c:	0801bd5d 	.word	0x0801bd5d
 801bc20:	0801bd5d 	.word	0x0801bd5d
 801bc24:	0801bd5d 	.word	0x0801bd5d
 801bc28:	0801bd5d 	.word	0x0801bd5d
 801bc2c:	0801bd5d 	.word	0x0801bd5d
 801bc30:	0801bd5d 	.word	0x0801bd5d
 801bc34:	0801bd5d 	.word	0x0801bd5d
 801bc38:	0801bd5d 	.word	0x0801bd5d
 801bc3c:	0801bd5d 	.word	0x0801bd5d
 801bc40:	0801bd5d 	.word	0x0801bd5d
 801bc44:	0801bcbb 	.word	0x0801bcbb
 801bc48:	2b9e      	cmp	r3, #158	; 0x9e
 801bc4a:	d051      	beq.n	801bcf0 <SCSI_ProcessCmd+0x26c>
 801bc4c:	e086      	b.n	801bd5c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801bc4e:	7afb      	ldrb	r3, [r7, #11]
 801bc50:	687a      	ldr	r2, [r7, #4]
 801bc52:	4619      	mov	r1, r3
 801bc54:	68f8      	ldr	r0, [r7, #12]
 801bc56:	f000 f893 	bl	801bd80 <SCSI_TestUnitReady>
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	75fb      	strb	r3, [r7, #23]
      break;
 801bc5e:	e089      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801bc60:	7afb      	ldrb	r3, [r7, #11]
 801bc62:	687a      	ldr	r2, [r7, #4]
 801bc64:	4619      	mov	r1, r3
 801bc66:	68f8      	ldr	r0, [r7, #12]
 801bc68:	f000 fb38 	bl	801c2dc <SCSI_RequestSense>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	75fb      	strb	r3, [r7, #23]
      break;
 801bc70:	e080      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801bc72:	7afb      	ldrb	r3, [r7, #11]
 801bc74:	687a      	ldr	r2, [r7, #4]
 801bc76:	4619      	mov	r1, r3
 801bc78:	68f8      	ldr	r0, [r7, #12]
 801bc7a:	f000 f8d1 	bl	801be20 <SCSI_Inquiry>
 801bc7e:	4603      	mov	r3, r0
 801bc80:	75fb      	strb	r3, [r7, #23]
      break;
 801bc82:	e077      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801bc84:	7afb      	ldrb	r3, [r7, #11]
 801bc86:	687a      	ldr	r2, [r7, #4]
 801bc88:	4619      	mov	r1, r3
 801bc8a:	68f8      	ldr	r0, [r7, #12]
 801bc8c:	f000 fbec 	bl	801c468 <SCSI_StartStopUnit>
 801bc90:	4603      	mov	r3, r0
 801bc92:	75fb      	strb	r3, [r7, #23]
      break;
 801bc94:	e06e      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801bc96:	7afb      	ldrb	r3, [r7, #11]
 801bc98:	687a      	ldr	r2, [r7, #4]
 801bc9a:	4619      	mov	r1, r3
 801bc9c:	68f8      	ldr	r0, [r7, #12]
 801bc9e:	f000 fc34 	bl	801c50a <SCSI_AllowPreventRemovable>
 801bca2:	4603      	mov	r3, r0
 801bca4:	75fb      	strb	r3, [r7, #23]
      break;
 801bca6:	e065      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801bca8:	7afb      	ldrb	r3, [r7, #11]
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	4619      	mov	r1, r3
 801bcae:	68f8      	ldr	r0, [r7, #12]
 801bcb0:	f000 fabc 	bl	801c22c <SCSI_ModeSense6>
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	75fb      	strb	r3, [r7, #23]
      break;
 801bcb8:	e05c      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801bcba:	7afb      	ldrb	r3, [r7, #11]
 801bcbc:	687a      	ldr	r2, [r7, #4]
 801bcbe:	4619      	mov	r1, r3
 801bcc0:	68f8      	ldr	r0, [r7, #12]
 801bcc2:	f000 fadf 	bl	801c284 <SCSI_ModeSense10>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	75fb      	strb	r3, [r7, #23]
      break;
 801bcca:	e053      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801bccc:	7afb      	ldrb	r3, [r7, #11]
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	68f8      	ldr	r0, [r7, #12]
 801bcd4:	f000 fa37 	bl	801c146 <SCSI_ReadFormatCapacity>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	75fb      	strb	r3, [r7, #23]
      break;
 801bcdc:	e04a      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801bcde:	7afb      	ldrb	r3, [r7, #11]
 801bce0:	687a      	ldr	r2, [r7, #4]
 801bce2:	4619      	mov	r1, r3
 801bce4:	68f8      	ldr	r0, [r7, #12]
 801bce6:	f000 f90f 	bl	801bf08 <SCSI_ReadCapacity10>
 801bcea:	4603      	mov	r3, r0
 801bcec:	75fb      	strb	r3, [r7, #23]
      break;
 801bcee:	e041      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801bcf0:	7afb      	ldrb	r3, [r7, #11]
 801bcf2:	687a      	ldr	r2, [r7, #4]
 801bcf4:	4619      	mov	r1, r3
 801bcf6:	68f8      	ldr	r0, [r7, #12]
 801bcf8:	f000 f97b 	bl	801bff2 <SCSI_ReadCapacity16>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	75fb      	strb	r3, [r7, #23]
      break;
 801bd00:	e038      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801bd02:	7afb      	ldrb	r3, [r7, #11]
 801bd04:	687a      	ldr	r2, [r7, #4]
 801bd06:	4619      	mov	r1, r3
 801bd08:	68f8      	ldr	r0, [r7, #12]
 801bd0a:	f000 fc27 	bl	801c55c <SCSI_Read10>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	75fb      	strb	r3, [r7, #23]
      break;
 801bd12:	e02f      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801bd14:	7afb      	ldrb	r3, [r7, #11]
 801bd16:	687a      	ldr	r2, [r7, #4]
 801bd18:	4619      	mov	r1, r3
 801bd1a:	68f8      	ldr	r0, [r7, #12]
 801bd1c:	f000 fcbe 	bl	801c69c <SCSI_Read12>
 801bd20:	4603      	mov	r3, r0
 801bd22:	75fb      	strb	r3, [r7, #23]
      break;
 801bd24:	e026      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801bd26:	7afb      	ldrb	r3, [r7, #11]
 801bd28:	687a      	ldr	r2, [r7, #4]
 801bd2a:	4619      	mov	r1, r3
 801bd2c:	68f8      	ldr	r0, [r7, #12]
 801bd2e:	f000 fd60 	bl	801c7f2 <SCSI_Write10>
 801bd32:	4603      	mov	r3, r0
 801bd34:	75fb      	strb	r3, [r7, #23]
      break;
 801bd36:	e01d      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801bd38:	7afb      	ldrb	r3, [r7, #11]
 801bd3a:	687a      	ldr	r2, [r7, #4]
 801bd3c:	4619      	mov	r1, r3
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	f000 fe1c 	bl	801c97c <SCSI_Write12>
 801bd44:	4603      	mov	r3, r0
 801bd46:	75fb      	strb	r3, [r7, #23]
      break;
 801bd48:	e014      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801bd4a:	7afb      	ldrb	r3, [r7, #11]
 801bd4c:	687a      	ldr	r2, [r7, #4]
 801bd4e:	4619      	mov	r1, r3
 801bd50:	68f8      	ldr	r0, [r7, #12]
 801bd52:	f000 fee8 	bl	801cb26 <SCSI_Verify10>
 801bd56:	4603      	mov	r3, r0
 801bd58:	75fb      	strb	r3, [r7, #23]
      break;
 801bd5a:	e00b      	b.n	801bd74 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801bd5c:	7af9      	ldrb	r1, [r7, #11]
 801bd5e:	2320      	movs	r3, #32
 801bd60:	2205      	movs	r2, #5
 801bd62:	68f8      	ldr	r0, [r7, #12]
 801bd64:	f000 fb39 	bl	801c3da <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801bd68:	693b      	ldr	r3, [r7, #16]
 801bd6a:	2202      	movs	r2, #2
 801bd6c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801bd6e:	23ff      	movs	r3, #255	; 0xff
 801bd70:	75fb      	strb	r3, [r7, #23]
      break;
 801bd72:	bf00      	nop
  }

  return ret;
 801bd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bd78:	4618      	mov	r0, r3
 801bd7a:	3718      	adds	r7, #24
 801bd7c:	46bd      	mov	sp, r7
 801bd7e:	bd80      	pop	{r7, pc}

0801bd80 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b086      	sub	sp, #24
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	60f8      	str	r0, [r7, #12]
 801bd88:	460b      	mov	r3, r1
 801bd8a:	607a      	str	r2, [r7, #4]
 801bd8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bd94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d102      	bne.n	801bda2 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801bd9c:	f04f 33ff 	mov.w	r3, #4294967295
 801bda0:	e03a      	b.n	801be18 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d00a      	beq.n	801bdc2 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bdb2:	2320      	movs	r3, #32
 801bdb4:	2205      	movs	r2, #5
 801bdb6:	68f8      	ldr	r0, [r7, #12]
 801bdb8:	f000 fb0f 	bl	801c3da <SCSI_SenseCode>

    return -1;
 801bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 801bdc0:	e02a      	b.n	801be18 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801bdc2:	697b      	ldr	r3, [r7, #20]
 801bdc4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801bdc8:	2b02      	cmp	r3, #2
 801bdca:	d10b      	bne.n	801bde4 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bdcc:	7af9      	ldrb	r1, [r7, #11]
 801bdce:	233a      	movs	r3, #58	; 0x3a
 801bdd0:	2202      	movs	r2, #2
 801bdd2:	68f8      	ldr	r0, [r7, #12]
 801bdd4:	f000 fb01 	bl	801c3da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801bdd8:	697b      	ldr	r3, [r7, #20]
 801bdda:	2205      	movs	r2, #5
 801bddc:	721a      	strb	r2, [r3, #8]
    return -1;
 801bdde:	f04f 33ff 	mov.w	r3, #4294967295
 801bde2:	e019      	b.n	801be18 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bdea:	689b      	ldr	r3, [r3, #8]
 801bdec:	7afa      	ldrb	r2, [r7, #11]
 801bdee:	4610      	mov	r0, r2
 801bdf0:	4798      	blx	r3
 801bdf2:	4603      	mov	r3, r0
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d00b      	beq.n	801be10 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bdf8:	7af9      	ldrb	r1, [r7, #11]
 801bdfa:	233a      	movs	r3, #58	; 0x3a
 801bdfc:	2202      	movs	r2, #2
 801bdfe:	68f8      	ldr	r0, [r7, #12]
 801be00:	f000 faeb 	bl	801c3da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801be04:	697b      	ldr	r3, [r7, #20]
 801be06:	2205      	movs	r2, #5
 801be08:	721a      	strb	r2, [r3, #8]

    return -1;
 801be0a:	f04f 33ff 	mov.w	r3, #4294967295
 801be0e:	e003      	b.n	801be18 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801be10:	697b      	ldr	r3, [r7, #20]
 801be12:	2200      	movs	r2, #0
 801be14:	60da      	str	r2, [r3, #12]

  return 0;
 801be16:	2300      	movs	r3, #0
}
 801be18:	4618      	mov	r0, r3
 801be1a:	3718      	adds	r7, #24
 801be1c:	46bd      	mov	sp, r7
 801be1e:	bd80      	pop	{r7, pc}

0801be20 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801be20:	b580      	push	{r7, lr}
 801be22:	b088      	sub	sp, #32
 801be24:	af00      	add	r7, sp, #0
 801be26:	60f8      	str	r0, [r7, #12]
 801be28:	460b      	mov	r3, r1
 801be2a:	607a      	str	r2, [r7, #4]
 801be2c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801be34:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801be36:	69bb      	ldr	r3, [r7, #24]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d102      	bne.n	801be42 <SCSI_Inquiry+0x22>
  {
    return -1;
 801be3c:	f04f 33ff 	mov.w	r3, #4294967295
 801be40:	e05a      	b.n	801bef8 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801be42:	69bb      	ldr	r3, [r7, #24]
 801be44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d10a      	bne.n	801be62 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801be4c:	69bb      	ldr	r3, [r7, #24]
 801be4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801be52:	2320      	movs	r3, #32
 801be54:	2205      	movs	r2, #5
 801be56:	68f8      	ldr	r0, [r7, #12]
 801be58:	f000 fabf 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801be5c:	f04f 33ff 	mov.w	r3, #4294967295
 801be60:	e04a      	b.n	801bef8 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	3301      	adds	r3, #1
 801be66:	781b      	ldrb	r3, [r3, #0]
 801be68:	f003 0301 	and.w	r3, r3, #1
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d020      	beq.n	801beb2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	3302      	adds	r3, #2
 801be74:	781b      	ldrb	r3, [r3, #0]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d105      	bne.n	801be86 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801be7a:	2206      	movs	r2, #6
 801be7c:	4920      	ldr	r1, [pc, #128]	; (801bf00 <SCSI_Inquiry+0xe0>)
 801be7e:	69b8      	ldr	r0, [r7, #24]
 801be80:	f000 ffb4 	bl	801cdec <SCSI_UpdateBotData>
 801be84:	e037      	b.n	801bef6 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	3302      	adds	r3, #2
 801be8a:	781b      	ldrb	r3, [r3, #0]
 801be8c:	2b80      	cmp	r3, #128	; 0x80
 801be8e:	d105      	bne.n	801be9c <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801be90:	2208      	movs	r2, #8
 801be92:	491c      	ldr	r1, [pc, #112]	; (801bf04 <SCSI_Inquiry+0xe4>)
 801be94:	69b8      	ldr	r0, [r7, #24]
 801be96:	f000 ffa9 	bl	801cdec <SCSI_UpdateBotData>
 801be9a:	e02c      	b.n	801bef6 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801be9c:	69bb      	ldr	r3, [r7, #24]
 801be9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801bea2:	2324      	movs	r3, #36	; 0x24
 801bea4:	2205      	movs	r2, #5
 801bea6:	68f8      	ldr	r0, [r7, #12]
 801bea8:	f000 fa97 	bl	801c3da <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801beac:	f04f 33ff 	mov.w	r3, #4294967295
 801beb0:	e022      	b.n	801bef8 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserDataMSC)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801beb8:	69d9      	ldr	r1, [r3, #28]
 801beba:	7afa      	ldrb	r2, [r7, #11]
 801bebc:	4613      	mov	r3, r2
 801bebe:	00db      	lsls	r3, r3, #3
 801bec0:	4413      	add	r3, r2
 801bec2:	009b      	lsls	r3, r3, #2
 801bec4:	440b      	add	r3, r1
 801bec6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	3304      	adds	r3, #4
 801becc:	781b      	ldrb	r3, [r3, #0]
 801bece:	b29b      	uxth	r3, r3
 801bed0:	3305      	adds	r3, #5
 801bed2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	3304      	adds	r3, #4
 801bed8:	781b      	ldrb	r3, [r3, #0]
 801beda:	b29b      	uxth	r3, r3
 801bedc:	8bfa      	ldrh	r2, [r7, #30]
 801bede:	429a      	cmp	r2, r3
 801bee0:	d303      	bcc.n	801beea <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	3304      	adds	r3, #4
 801bee6:	781b      	ldrb	r3, [r3, #0]
 801bee8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801beea:	8bfb      	ldrh	r3, [r7, #30]
 801beec:	461a      	mov	r2, r3
 801beee:	6979      	ldr	r1, [r7, #20]
 801bef0:	69b8      	ldr	r0, [r7, #24]
 801bef2:	f000 ff7b 	bl	801cdec <SCSI_UpdateBotData>
  }

  return 0;
 801bef6:	2300      	movs	r3, #0
}
 801bef8:	4618      	mov	r0, r3
 801befa:	3720      	adds	r7, #32
 801befc:	46bd      	mov	sp, r7
 801befe:	bd80      	pop	{r7, pc}
 801bf00:	200005c0 	.word	0x200005c0
 801bf04:	200005c8 	.word	0x200005c8

0801bf08 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b086      	sub	sp, #24
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	60f8      	str	r0, [r7, #12]
 801bf10:	460b      	mov	r3, r1
 801bf12:	607a      	str	r2, [r7, #4]
 801bf14:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bf1c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d102      	bne.n	801bf2a <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801bf24:	f04f 33ff 	mov.w	r3, #4294967295
 801bf28:	e05f      	b.n	801bfea <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801bf30:	685b      	ldr	r3, [r3, #4]
 801bf32:	697a      	ldr	r2, [r7, #20]
 801bf34:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801bf38:	697a      	ldr	r2, [r7, #20]
 801bf3a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801bf3e:	7af8      	ldrb	r0, [r7, #11]
 801bf40:	4798      	blx	r3
 801bf42:	4603      	mov	r3, r0
 801bf44:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801bf46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d104      	bne.n	801bf58 <SCSI_ReadCapacity10+0x50>
 801bf4e:	697b      	ldr	r3, [r7, #20]
 801bf50:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801bf54:	2b02      	cmp	r3, #2
 801bf56:	d108      	bne.n	801bf6a <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801bf58:	7af9      	ldrb	r1, [r7, #11]
 801bf5a:	233a      	movs	r3, #58	; 0x3a
 801bf5c:	2202      	movs	r2, #2
 801bf5e:	68f8      	ldr	r0, [r7, #12]
 801bf60:	f000 fa3b 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801bf64:	f04f 33ff 	mov.w	r3, #4294967295
 801bf68:	e03f      	b.n	801bfea <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801bf6a:	697b      	ldr	r3, [r7, #20]
 801bf6c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bf70:	3b01      	subs	r3, #1
 801bf72:	0e1b      	lsrs	r3, r3, #24
 801bf74:	b2da      	uxtb	r2, r3
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bf80:	3b01      	subs	r3, #1
 801bf82:	0c1b      	lsrs	r3, r3, #16
 801bf84:	b2da      	uxtb	r2, r3
 801bf86:	697b      	ldr	r3, [r7, #20]
 801bf88:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801bf8a:	697b      	ldr	r3, [r7, #20]
 801bf8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bf90:	3b01      	subs	r3, #1
 801bf92:	0a1b      	lsrs	r3, r3, #8
 801bf94:	b2da      	uxtb	r2, r3
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801bfa0:	b2db      	uxtb	r3, r3
 801bfa2:	3b01      	subs	r3, #1
 801bfa4:	b2da      	uxtb	r2, r3
 801bfa6:	697b      	ldr	r3, [r7, #20]
 801bfa8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801bfb0:	161b      	asrs	r3, r3, #24
 801bfb2:	b2da      	uxtb	r2, r3
 801bfb4:	697b      	ldr	r3, [r7, #20]
 801bfb6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801bfb8:	697b      	ldr	r3, [r7, #20]
 801bfba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801bfbe:	141b      	asrs	r3, r3, #16
 801bfc0:	b2da      	uxtb	r2, r3
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801bfc6:	697b      	ldr	r3, [r7, #20]
 801bfc8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801bfcc:	0a1b      	lsrs	r3, r3, #8
 801bfce:	b29b      	uxth	r3, r3
 801bfd0:	b2da      	uxtb	r2, r3
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801bfdc:	b2da      	uxtb	r2, r3
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801bfe2:	697b      	ldr	r3, [r7, #20]
 801bfe4:	2208      	movs	r2, #8
 801bfe6:	60da      	str	r2, [r3, #12]

  return 0;
 801bfe8:	2300      	movs	r3, #0

}
 801bfea:	4618      	mov	r0, r3
 801bfec:	3718      	adds	r7, #24
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bd80      	pop	{r7, pc}

0801bff2 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801bff2:	b580      	push	{r7, lr}
 801bff4:	b088      	sub	sp, #32
 801bff6:	af00      	add	r7, sp, #0
 801bff8:	60f8      	str	r0, [r7, #12]
 801bffa:	460b      	mov	r3, r1
 801bffc:	607a      	str	r2, [r7, #4]
 801bffe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c006:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c008:	69bb      	ldr	r3, [r7, #24]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d102      	bne.n	801c014 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801c00e:	f04f 33ff 	mov.w	r3, #4294967295
 801c012:	e094      	b.n	801c13e <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c01a:	685b      	ldr	r3, [r3, #4]
 801c01c:	69ba      	ldr	r2, [r7, #24]
 801c01e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801c022:	69ba      	ldr	r2, [r7, #24]
 801c024:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801c028:	7af8      	ldrb	r0, [r7, #11]
 801c02a:	4798      	blx	r3
 801c02c:	4603      	mov	r3, r0
 801c02e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d104      	bne.n	801c042 <SCSI_ReadCapacity16+0x50>
 801c038:	69bb      	ldr	r3, [r7, #24]
 801c03a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c03e:	2b02      	cmp	r3, #2
 801c040:	d108      	bne.n	801c054 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c042:	7af9      	ldrb	r1, [r7, #11]
 801c044:	233a      	movs	r3, #58	; 0x3a
 801c046:	2202      	movs	r2, #2
 801c048:	68f8      	ldr	r0, [r7, #12]
 801c04a:	f000 f9c6 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801c04e:	f04f 33ff 	mov.w	r3, #4294967295
 801c052:	e074      	b.n	801c13e <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	330a      	adds	r3, #10
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	330b      	adds	r3, #11
 801c060:	781b      	ldrb	r3, [r3, #0]
 801c062:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c064:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	330c      	adds	r3, #12
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c06e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c070:	687a      	ldr	r2, [r7, #4]
 801c072:	320d      	adds	r2, #13
 801c074:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c076:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c078:	69bb      	ldr	r3, [r7, #24]
 801c07a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c07c:	2300      	movs	r3, #0
 801c07e:	77fb      	strb	r3, [r7, #31]
 801c080:	e007      	b.n	801c092 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801c082:	7ffb      	ldrb	r3, [r7, #31]
 801c084:	69ba      	ldr	r2, [r7, #24]
 801c086:	4413      	add	r3, r2
 801c088:	2200      	movs	r2, #0
 801c08a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801c08c:	7ffb      	ldrb	r3, [r7, #31]
 801c08e:	3301      	adds	r3, #1
 801c090:	77fb      	strb	r3, [r7, #31]
 801c092:	7ffa      	ldrb	r2, [r7, #31]
 801c094:	69bb      	ldr	r3, [r7, #24]
 801c096:	68db      	ldr	r3, [r3, #12]
 801c098:	429a      	cmp	r2, r3
 801c09a:	d3f2      	bcc.n	801c082 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801c09c:	69bb      	ldr	r3, [r7, #24]
 801c09e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0a2:	3b01      	subs	r3, #1
 801c0a4:	0e1b      	lsrs	r3, r3, #24
 801c0a6:	b2da      	uxtb	r2, r3
 801c0a8:	69bb      	ldr	r3, [r7, #24]
 801c0aa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801c0ac:	69bb      	ldr	r3, [r7, #24]
 801c0ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0b2:	3b01      	subs	r3, #1
 801c0b4:	0c1b      	lsrs	r3, r3, #16
 801c0b6:	b2da      	uxtb	r2, r3
 801c0b8:	69bb      	ldr	r3, [r7, #24]
 801c0ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801c0bc:	69bb      	ldr	r3, [r7, #24]
 801c0be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0c2:	3b01      	subs	r3, #1
 801c0c4:	0a1b      	lsrs	r3, r3, #8
 801c0c6:	b2da      	uxtb	r2, r3
 801c0c8:	69bb      	ldr	r3, [r7, #24]
 801c0ca:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801c0cc:	69bb      	ldr	r3, [r7, #24]
 801c0ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801c0d2:	b2db      	uxtb	r3, r3
 801c0d4:	3b01      	subs	r3, #1
 801c0d6:	b2da      	uxtb	r2, r3
 801c0d8:	69bb      	ldr	r3, [r7, #24]
 801c0da:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801c0dc:	69bb      	ldr	r3, [r7, #24]
 801c0de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c0e2:	161b      	asrs	r3, r3, #24
 801c0e4:	b2da      	uxtb	r2, r3
 801c0e6:	69bb      	ldr	r3, [r7, #24]
 801c0e8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801c0ea:	69bb      	ldr	r3, [r7, #24]
 801c0ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c0f0:	141b      	asrs	r3, r3, #16
 801c0f2:	b2da      	uxtb	r2, r3
 801c0f4:	69bb      	ldr	r3, [r7, #24]
 801c0f6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801c0f8:	69bb      	ldr	r3, [r7, #24]
 801c0fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c0fe:	0a1b      	lsrs	r3, r3, #8
 801c100:	b29b      	uxth	r3, r3
 801c102:	b2da      	uxtb	r2, r3
 801c104:	69bb      	ldr	r3, [r7, #24]
 801c106:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801c108:	69bb      	ldr	r3, [r7, #24]
 801c10a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801c10e:	b2da      	uxtb	r2, r3
 801c110:	69bb      	ldr	r3, [r7, #24]
 801c112:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	330a      	adds	r3, #10
 801c118:	781b      	ldrb	r3, [r3, #0]
 801c11a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	330b      	adds	r3, #11
 801c120:	781b      	ldrb	r3, [r3, #0]
 801c122:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c124:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	330c      	adds	r3, #12
 801c12a:	781b      	ldrb	r3, [r3, #0]
 801c12c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801c12e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801c130:	687a      	ldr	r2, [r7, #4]
 801c132:	320d      	adds	r2, #13
 801c134:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801c136:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801c138:	69bb      	ldr	r3, [r7, #24]
 801c13a:	60da      	str	r2, [r3, #12]

  return 0;
 801c13c:	2300      	movs	r3, #0
}
 801c13e:	4618      	mov	r0, r3
 801c140:	3720      	adds	r7, #32
 801c142:	46bd      	mov	sp, r7
 801c144:	bd80      	pop	{r7, pc}

0801c146 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c146:	b580      	push	{r7, lr}
 801c148:	b088      	sub	sp, #32
 801c14a:	af00      	add	r7, sp, #0
 801c14c:	60f8      	str	r0, [r7, #12]
 801c14e:	460b      	mov	r3, r1
 801c150:	607a      	str	r2, [r7, #4]
 801c152:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c15a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801c15c:	69bb      	ldr	r3, [r7, #24]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d102      	bne.n	801c168 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801c162:	f04f 33ff 	mov.w	r3, #4294967295
 801c166:	e05c      	b.n	801c222 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserDataMSC)->GetCapacity(lun, &blk_nbr, &blk_size);
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c16e:	685b      	ldr	r3, [r3, #4]
 801c170:	f107 0214 	add.w	r2, r7, #20
 801c174:	f107 0110 	add.w	r1, r7, #16
 801c178:	7af8      	ldrb	r0, [r7, #11]
 801c17a:	4798      	blx	r3
 801c17c:	4603      	mov	r3, r0
 801c17e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801c180:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d104      	bne.n	801c192 <SCSI_ReadFormatCapacity+0x4c>
 801c188:	69bb      	ldr	r3, [r7, #24]
 801c18a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c18e:	2b02      	cmp	r3, #2
 801c190:	d108      	bne.n	801c1a4 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c192:	7af9      	ldrb	r1, [r7, #11]
 801c194:	233a      	movs	r3, #58	; 0x3a
 801c196:	2202      	movs	r2, #2
 801c198:	68f8      	ldr	r0, [r7, #12]
 801c19a:	f000 f91e 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801c19e:	f04f 33ff 	mov.w	r3, #4294967295
 801c1a2:	e03e      	b.n	801c222 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801c1a4:	2300      	movs	r3, #0
 801c1a6:	83fb      	strh	r3, [r7, #30]
 801c1a8:	e007      	b.n	801c1ba <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 801c1aa:	8bfb      	ldrh	r3, [r7, #30]
 801c1ac:	69ba      	ldr	r2, [r7, #24]
 801c1ae:	4413      	add	r3, r2
 801c1b0:	2200      	movs	r2, #0
 801c1b2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801c1b4:	8bfb      	ldrh	r3, [r7, #30]
 801c1b6:	3301      	adds	r3, #1
 801c1b8:	83fb      	strh	r3, [r7, #30]
 801c1ba:	8bfb      	ldrh	r3, [r7, #30]
 801c1bc:	2b0b      	cmp	r3, #11
 801c1be:	d9f4      	bls.n	801c1aa <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 801c1c0:	69bb      	ldr	r3, [r7, #24]
 801c1c2:	2208      	movs	r2, #8
 801c1c4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801c1c6:	693b      	ldr	r3, [r7, #16]
 801c1c8:	3b01      	subs	r3, #1
 801c1ca:	0e1b      	lsrs	r3, r3, #24
 801c1cc:	b2da      	uxtb	r2, r3
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801c1d2:	693b      	ldr	r3, [r7, #16]
 801c1d4:	3b01      	subs	r3, #1
 801c1d6:	0c1b      	lsrs	r3, r3, #16
 801c1d8:	b2da      	uxtb	r2, r3
 801c1da:	69bb      	ldr	r3, [r7, #24]
 801c1dc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801c1de:	693b      	ldr	r3, [r7, #16]
 801c1e0:	3b01      	subs	r3, #1
 801c1e2:	0a1b      	lsrs	r3, r3, #8
 801c1e4:	b2da      	uxtb	r2, r3
 801c1e6:	69bb      	ldr	r3, [r7, #24]
 801c1e8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801c1ea:	693b      	ldr	r3, [r7, #16]
 801c1ec:	b2db      	uxtb	r3, r3
 801c1ee:	3b01      	subs	r3, #1
 801c1f0:	b2da      	uxtb	r2, r3
 801c1f2:	69bb      	ldr	r3, [r7, #24]
 801c1f4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801c1f6:	69bb      	ldr	r3, [r7, #24]
 801c1f8:	2202      	movs	r2, #2
 801c1fa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801c1fc:	8abb      	ldrh	r3, [r7, #20]
 801c1fe:	141b      	asrs	r3, r3, #16
 801c200:	b2da      	uxtb	r2, r3
 801c202:	69bb      	ldr	r3, [r7, #24]
 801c204:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801c206:	8abb      	ldrh	r3, [r7, #20]
 801c208:	0a1b      	lsrs	r3, r3, #8
 801c20a:	b29b      	uxth	r3, r3
 801c20c:	b2da      	uxtb	r2, r3
 801c20e:	69bb      	ldr	r3, [r7, #24]
 801c210:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801c212:	8abb      	ldrh	r3, [r7, #20]
 801c214:	b2da      	uxtb	r2, r3
 801c216:	69bb      	ldr	r3, [r7, #24]
 801c218:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801c21a:	69bb      	ldr	r3, [r7, #24]
 801c21c:	220c      	movs	r2, #12
 801c21e:	60da      	str	r2, [r3, #12]

  return 0;
 801c220:	2300      	movs	r3, #0
}
 801c222:	4618      	mov	r0, r3
 801c224:	3720      	adds	r7, #32
 801c226:	46bd      	mov	sp, r7
 801c228:	bd80      	pop	{r7, pc}
	...

0801c22c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b086      	sub	sp, #24
 801c230:	af00      	add	r7, sp, #0
 801c232:	60f8      	str	r0, [r7, #12]
 801c234:	460b      	mov	r3, r1
 801c236:	607a      	str	r2, [r7, #4]
 801c238:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c240:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801c242:	2317      	movs	r3, #23
 801c244:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c246:	693b      	ldr	r3, [r7, #16]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d102      	bne.n	801c252 <SCSI_ModeSense6+0x26>
  {
    return -1;
 801c24c:	f04f 33ff 	mov.w	r3, #4294967295
 801c250:	e011      	b.n	801c276 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	3304      	adds	r3, #4
 801c256:	781b      	ldrb	r3, [r3, #0]
 801c258:	b29b      	uxth	r3, r3
 801c25a:	8afa      	ldrh	r2, [r7, #22]
 801c25c:	429a      	cmp	r2, r3
 801c25e:	d303      	bcc.n	801c268 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	3304      	adds	r3, #4
 801c264:	781b      	ldrb	r3, [r3, #0]
 801c266:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801c268:	8afb      	ldrh	r3, [r7, #22]
 801c26a:	461a      	mov	r2, r3
 801c26c:	4904      	ldr	r1, [pc, #16]	; (801c280 <SCSI_ModeSense6+0x54>)
 801c26e:	6938      	ldr	r0, [r7, #16]
 801c270:	f000 fdbc 	bl	801cdec <SCSI_UpdateBotData>

  return 0;
 801c274:	2300      	movs	r3, #0
}
 801c276:	4618      	mov	r0, r3
 801c278:	3718      	adds	r7, #24
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}
 801c27e:	bf00      	nop
 801c280:	200005d0 	.word	0x200005d0

0801c284 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b086      	sub	sp, #24
 801c288:	af00      	add	r7, sp, #0
 801c28a:	60f8      	str	r0, [r7, #12]
 801c28c:	460b      	mov	r3, r1
 801c28e:	607a      	str	r2, [r7, #4]
 801c290:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c298:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801c29a:	231b      	movs	r3, #27
 801c29c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801c29e:	693b      	ldr	r3, [r7, #16]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d102      	bne.n	801c2aa <SCSI_ModeSense10+0x26>
  {
    return -1;
 801c2a4:	f04f 33ff 	mov.w	r3, #4294967295
 801c2a8:	e011      	b.n	801c2ce <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	3308      	adds	r3, #8
 801c2ae:	781b      	ldrb	r3, [r3, #0]
 801c2b0:	b29b      	uxth	r3, r3
 801c2b2:	8afa      	ldrh	r2, [r7, #22]
 801c2b4:	429a      	cmp	r2, r3
 801c2b6:	d303      	bcc.n	801c2c0 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	3308      	adds	r3, #8
 801c2bc:	781b      	ldrb	r3, [r3, #0]
 801c2be:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 801c2c0:	8afb      	ldrh	r3, [r7, #22]
 801c2c2:	461a      	mov	r2, r3
 801c2c4:	4904      	ldr	r1, [pc, #16]	; (801c2d8 <SCSI_ModeSense10+0x54>)
 801c2c6:	6938      	ldr	r0, [r7, #16]
 801c2c8:	f000 fd90 	bl	801cdec <SCSI_UpdateBotData>

  return 0;
 801c2cc:	2300      	movs	r3, #0
}
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	3718      	adds	r7, #24
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	bf00      	nop
 801c2d8:	200005e8 	.word	0x200005e8

0801c2dc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b086      	sub	sp, #24
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	60f8      	str	r0, [r7, #12]
 801c2e4:	460b      	mov	r3, r1
 801c2e6:	607a      	str	r2, [r7, #4]
 801c2e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c2f0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801c2f2:	693b      	ldr	r3, [r7, #16]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d102      	bne.n	801c2fe <SCSI_RequestSense+0x22>
  {
    return -1;
 801c2f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c2fc:	e069      	b.n	801c3d2 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801c2fe:	693b      	ldr	r3, [r7, #16]
 801c300:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c304:	2b00      	cmp	r3, #0
 801c306:	d10a      	bne.n	801c31e <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c308:	693b      	ldr	r3, [r7, #16]
 801c30a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c30e:	2320      	movs	r3, #32
 801c310:	2205      	movs	r2, #5
 801c312:	68f8      	ldr	r0, [r7, #12]
 801c314:	f000 f861 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801c318:	f04f 33ff 	mov.w	r3, #4294967295
 801c31c:	e059      	b.n	801c3d2 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c31e:	2300      	movs	r3, #0
 801c320:	75fb      	strb	r3, [r7, #23]
 801c322:	e007      	b.n	801c334 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801c324:	7dfb      	ldrb	r3, [r7, #23]
 801c326:	693a      	ldr	r2, [r7, #16]
 801c328:	4413      	add	r3, r2
 801c32a:	2200      	movs	r2, #0
 801c32c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801c32e:	7dfb      	ldrb	r3, [r7, #23]
 801c330:	3301      	adds	r3, #1
 801c332:	75fb      	strb	r3, [r7, #23]
 801c334:	7dfb      	ldrb	r3, [r7, #23]
 801c336:	2b11      	cmp	r3, #17
 801c338:	d9f4      	bls.n	801c324 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801c33a:	693b      	ldr	r3, [r7, #16]
 801c33c:	2270      	movs	r2, #112	; 0x70
 801c33e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801c340:	693b      	ldr	r3, [r7, #16]
 801c342:	220c      	movs	r2, #12
 801c344:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801c346:	693b      	ldr	r3, [r7, #16]
 801c348:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 801c34c:	693b      	ldr	r3, [r7, #16]
 801c34e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c352:	429a      	cmp	r2, r3
 801c354:	d02e      	beq.n	801c3b4 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801c356:	693b      	ldr	r3, [r7, #16]
 801c358:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c35c:	461a      	mov	r2, r3
 801c35e:	693b      	ldr	r3, [r7, #16]
 801c360:	3248      	adds	r2, #72	; 0x48
 801c362:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801c366:	693b      	ldr	r3, [r7, #16]
 801c368:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801c36a:	693b      	ldr	r3, [r7, #16]
 801c36c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c370:	693a      	ldr	r2, [r7, #16]
 801c372:	3348      	adds	r3, #72	; 0x48
 801c374:	00db      	lsls	r3, r3, #3
 801c376:	4413      	add	r3, r2
 801c378:	791a      	ldrb	r2, [r3, #4]
 801c37a:	693b      	ldr	r3, [r7, #16]
 801c37c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801c37e:	693b      	ldr	r3, [r7, #16]
 801c380:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c384:	693a      	ldr	r2, [r7, #16]
 801c386:	3348      	adds	r3, #72	; 0x48
 801c388:	00db      	lsls	r3, r3, #3
 801c38a:	4413      	add	r3, r2
 801c38c:	795a      	ldrb	r2, [r3, #5]
 801c38e:	693b      	ldr	r3, [r7, #16]
 801c390:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801c392:	693b      	ldr	r3, [r7, #16]
 801c394:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c398:	3301      	adds	r3, #1
 801c39a:	b2da      	uxtb	r2, r3
 801c39c:	693b      	ldr	r3, [r7, #16]
 801c39e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801c3a2:	693b      	ldr	r3, [r7, #16]
 801c3a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801c3a8:	2b04      	cmp	r3, #4
 801c3aa:	d103      	bne.n	801c3b4 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 801c3ac:	693b      	ldr	r3, [r7, #16]
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801c3b4:	693b      	ldr	r3, [r7, #16]
 801c3b6:	2212      	movs	r2, #18
 801c3b8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	3304      	adds	r3, #4
 801c3be:	781b      	ldrb	r3, [r3, #0]
 801c3c0:	2b12      	cmp	r3, #18
 801c3c2:	d805      	bhi.n	801c3d0 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	3304      	adds	r3, #4
 801c3c8:	781b      	ldrb	r3, [r3, #0]
 801c3ca:	461a      	mov	r2, r3
 801c3cc:	693b      	ldr	r3, [r7, #16]
 801c3ce:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801c3d0:	2300      	movs	r3, #0
}
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	3718      	adds	r7, #24
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bd80      	pop	{r7, pc}

0801c3da <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801c3da:	b480      	push	{r7}
 801c3dc:	b085      	sub	sp, #20
 801c3de:	af00      	add	r7, sp, #0
 801c3e0:	6078      	str	r0, [r7, #4]
 801c3e2:	4608      	mov	r0, r1
 801c3e4:	4611      	mov	r1, r2
 801c3e6:	461a      	mov	r2, r3
 801c3e8:	4603      	mov	r3, r0
 801c3ea:	70fb      	strb	r3, [r7, #3]
 801c3ec:	460b      	mov	r3, r1
 801c3ee:	70bb      	strb	r3, [r7, #2]
 801c3f0:	4613      	mov	r3, r2
 801c3f2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c3fa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d02c      	beq.n	801c45c <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c408:	461a      	mov	r2, r3
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	3248      	adds	r2, #72	; 0x48
 801c40e:	78b9      	ldrb	r1, [r7, #2]
 801c410:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c41a:	68fa      	ldr	r2, [r7, #12]
 801c41c:	3348      	adds	r3, #72	; 0x48
 801c41e:	00db      	lsls	r3, r3, #3
 801c420:	4413      	add	r3, r2
 801c422:	787a      	ldrb	r2, [r7, #1]
 801c424:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c42c:	68fa      	ldr	r2, [r7, #12]
 801c42e:	3348      	adds	r3, #72	; 0x48
 801c430:	00db      	lsls	r3, r3, #3
 801c432:	4413      	add	r3, r2
 801c434:	2200      	movs	r2, #0
 801c436:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c43e:	3301      	adds	r3, #1
 801c440:	b2da      	uxtb	r2, r3
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801c44e:	2b04      	cmp	r3, #4
 801c450:	d105      	bne.n	801c45e <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	2200      	movs	r2, #0
 801c456:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801c45a:	e000      	b.n	801c45e <SCSI_SenseCode+0x84>
    return;
 801c45c:	bf00      	nop
  }
}
 801c45e:	3714      	adds	r7, #20
 801c460:	46bd      	mov	sp, r7
 801c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c466:	4770      	bx	lr

0801c468 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b086      	sub	sp, #24
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	60f8      	str	r0, [r7, #12]
 801c470:	460b      	mov	r3, r1
 801c472:	607a      	str	r2, [r7, #4]
 801c474:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c47c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c47e:	697b      	ldr	r3, [r7, #20]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d102      	bne.n	801c48a <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801c484:	f04f 33ff 	mov.w	r3, #4294967295
 801c488:	e03b      	b.n	801c502 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801c48a:	697b      	ldr	r3, [r7, #20]
 801c48c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c490:	2b01      	cmp	r3, #1
 801c492:	d10f      	bne.n	801c4b4 <SCSI_StartStopUnit+0x4c>
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	3304      	adds	r3, #4
 801c498:	781b      	ldrb	r3, [r3, #0]
 801c49a:	f003 0303 	and.w	r3, r3, #3
 801c49e:	2b02      	cmp	r3, #2
 801c4a0:	d108      	bne.n	801c4b4 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801c4a2:	7af9      	ldrb	r1, [r7, #11]
 801c4a4:	2324      	movs	r3, #36	; 0x24
 801c4a6:	2205      	movs	r2, #5
 801c4a8:	68f8      	ldr	r0, [r7, #12]
 801c4aa:	f7ff ff96 	bl	801c3da <SCSI_SenseCode>

    return -1;
 801c4ae:	f04f 33ff 	mov.w	r3, #4294967295
 801c4b2:	e026      	b.n	801c502 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	3304      	adds	r3, #4
 801c4b8:	781b      	ldrb	r3, [r3, #0]
 801c4ba:	f003 0303 	and.w	r3, r3, #3
 801c4be:	2b01      	cmp	r3, #1
 801c4c0:	d104      	bne.n	801c4cc <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c4c2:	697b      	ldr	r3, [r7, #20]
 801c4c4:	2200      	movs	r2, #0
 801c4c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c4ca:	e016      	b.n	801c4fa <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	3304      	adds	r3, #4
 801c4d0:	781b      	ldrb	r3, [r3, #0]
 801c4d2:	f003 0303 	and.w	r3, r3, #3
 801c4d6:	2b02      	cmp	r3, #2
 801c4d8:	d104      	bne.n	801c4e4 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801c4da:	697b      	ldr	r3, [r7, #20]
 801c4dc:	2202      	movs	r2, #2
 801c4de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c4e2:	e00a      	b.n	801c4fa <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	3304      	adds	r3, #4
 801c4e8:	781b      	ldrb	r3, [r3, #0]
 801c4ea:	f003 0303 	and.w	r3, r3, #3
 801c4ee:	2b03      	cmp	r3, #3
 801c4f0:	d103      	bne.n	801c4fa <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c4f2:	697b      	ldr	r3, [r7, #20]
 801c4f4:	2200      	movs	r2, #0
 801c4f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801c4fa:	697b      	ldr	r3, [r7, #20]
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	60da      	str	r2, [r3, #12]

  return 0;
 801c500:	2300      	movs	r3, #0
}
 801c502:	4618      	mov	r0, r3
 801c504:	3718      	adds	r7, #24
 801c506:	46bd      	mov	sp, r7
 801c508:	bd80      	pop	{r7, pc}

0801c50a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c50a:	b480      	push	{r7}
 801c50c:	b087      	sub	sp, #28
 801c50e:	af00      	add	r7, sp, #0
 801c510:	60f8      	str	r0, [r7, #12]
 801c512:	460b      	mov	r3, r1
 801c514:	607a      	str	r2, [r7, #4]
 801c516:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c51e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d102      	bne.n	801c52c <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801c526:	f04f 33ff 	mov.w	r3, #4294967295
 801c52a:	e011      	b.n	801c550 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	3304      	adds	r3, #4
 801c530:	781b      	ldrb	r3, [r3, #0]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d104      	bne.n	801c540 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801c536:	697b      	ldr	r3, [r7, #20]
 801c538:	2200      	movs	r2, #0
 801c53a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801c53e:	e003      	b.n	801c548 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801c540:	697b      	ldr	r3, [r7, #20]
 801c542:	2201      	movs	r2, #1
 801c544:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801c548:	697b      	ldr	r3, [r7, #20]
 801c54a:	2200      	movs	r2, #0
 801c54c:	60da      	str	r2, [r3, #12]

  return 0;
 801c54e:	2300      	movs	r3, #0
}
 801c550:	4618      	mov	r0, r3
 801c552:	371c      	adds	r7, #28
 801c554:	46bd      	mov	sp, r7
 801c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55a:	4770      	bx	lr

0801c55c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b086      	sub	sp, #24
 801c560:	af00      	add	r7, sp, #0
 801c562:	60f8      	str	r0, [r7, #12]
 801c564:	460b      	mov	r3, r1
 801c566:	607a      	str	r2, [r7, #4]
 801c568:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c570:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c572:	697b      	ldr	r3, [r7, #20]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d102      	bne.n	801c57e <SCSI_Read10+0x22>
  {
    return -1;
 801c578:	f04f 33ff 	mov.w	r3, #4294967295
 801c57c:	e08a      	b.n	801c694 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	7a1b      	ldrb	r3, [r3, #8]
 801c582:	2b00      	cmp	r3, #0
 801c584:	d17c      	bne.n	801c680 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c586:	697b      	ldr	r3, [r7, #20]
 801c588:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c58c:	b25b      	sxtb	r3, r3
 801c58e:	2b00      	cmp	r3, #0
 801c590:	db0a      	blt.n	801c5a8 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c592:	697b      	ldr	r3, [r7, #20]
 801c594:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c598:	2320      	movs	r3, #32
 801c59a:	2205      	movs	r2, #5
 801c59c:	68f8      	ldr	r0, [r7, #12]
 801c59e:	f7ff ff1c 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c5a6:	e075      	b.n	801c694 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c5a8:	697b      	ldr	r3, [r7, #20]
 801c5aa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c5ae:	2b02      	cmp	r3, #2
 801c5b0:	d108      	bne.n	801c5c4 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c5b2:	7af9      	ldrb	r1, [r7, #11]
 801c5b4:	233a      	movs	r3, #58	; 0x3a
 801c5b6:	2202      	movs	r2, #2
 801c5b8:	68f8      	ldr	r0, [r7, #12]
 801c5ba:	f7ff ff0e 	bl	801c3da <SCSI_SenseCode>

      return -1;
 801c5be:	f04f 33ff 	mov.w	r3, #4294967295
 801c5c2:	e067      	b.n	801c694 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c5ca:	689b      	ldr	r3, [r3, #8]
 801c5cc:	7afa      	ldrb	r2, [r7, #11]
 801c5ce:	4610      	mov	r0, r2
 801c5d0:	4798      	blx	r3
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d008      	beq.n	801c5ea <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c5d8:	7af9      	ldrb	r1, [r7, #11]
 801c5da:	233a      	movs	r3, #58	; 0x3a
 801c5dc:	2202      	movs	r2, #2
 801c5de:	68f8      	ldr	r0, [r7, #12]
 801c5e0:	f7ff fefb 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c5e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c5e8:	e054      	b.n	801c694 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	3302      	adds	r3, #2
 801c5ee:	781b      	ldrb	r3, [r3, #0]
 801c5f0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	3303      	adds	r3, #3
 801c5f6:	781b      	ldrb	r3, [r3, #0]
 801c5f8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c5fa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	3304      	adds	r3, #4
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c604:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c606:	687a      	ldr	r2, [r7, #4]
 801c608:	3205      	adds	r2, #5
 801c60a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c60c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c60e:	697b      	ldr	r3, [r7, #20]
 801c610:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	3307      	adds	r3, #7
 801c618:	781b      	ldrb	r3, [r3, #0]
 801c61a:	021b      	lsls	r3, r3, #8
 801c61c:	687a      	ldr	r2, [r7, #4]
 801c61e:	3208      	adds	r2, #8
 801c620:	7812      	ldrb	r2, [r2, #0]
 801c622:	431a      	orrs	r2, r3
 801c624:	697b      	ldr	r3, [r7, #20]
 801c626:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c62a:	697b      	ldr	r3, [r7, #20]
 801c62c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c630:	697b      	ldr	r3, [r7, #20]
 801c632:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c636:	7af9      	ldrb	r1, [r7, #11]
 801c638:	68f8      	ldr	r0, [r7, #12]
 801c63a:	f000 faad 	bl	801cb98 <SCSI_CheckAddressRange>
 801c63e:	4603      	mov	r3, r0
 801c640:	2b00      	cmp	r3, #0
 801c642:	da02      	bge.n	801c64a <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c644:	f04f 33ff 	mov.w	r3, #4294967295
 801c648:	e024      	b.n	801c694 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c64a:	697b      	ldr	r3, [r7, #20]
 801c64c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c650:	697b      	ldr	r3, [r7, #20]
 801c652:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c656:	6979      	ldr	r1, [r7, #20]
 801c658:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c65c:	fb01 f303 	mul.w	r3, r1, r3
 801c660:	429a      	cmp	r2, r3
 801c662:	d00a      	beq.n	801c67a <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c664:	697b      	ldr	r3, [r7, #20]
 801c666:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c66a:	2320      	movs	r3, #32
 801c66c:	2205      	movs	r2, #5
 801c66e:	68f8      	ldr	r0, [r7, #12]
 801c670:	f7ff feb3 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c674:	f04f 33ff 	mov.w	r3, #4294967295
 801c678:	e00c      	b.n	801c694 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c67a:	697b      	ldr	r3, [r7, #20]
 801c67c:	2202      	movs	r2, #2
 801c67e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c680:	697b      	ldr	r3, [r7, #20]
 801c682:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c686:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c688:	7afb      	ldrb	r3, [r7, #11]
 801c68a:	4619      	mov	r1, r3
 801c68c:	68f8      	ldr	r0, [r7, #12]
 801c68e:	f000 faab 	bl	801cbe8 <SCSI_ProcessRead>
 801c692:	4603      	mov	r3, r0
}
 801c694:	4618      	mov	r0, r3
 801c696:	3718      	adds	r7, #24
 801c698:	46bd      	mov	sp, r7
 801c69a:	bd80      	pop	{r7, pc}

0801c69c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c69c:	b580      	push	{r7, lr}
 801c69e:	b086      	sub	sp, #24
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	60f8      	str	r0, [r7, #12]
 801c6a4:	460b      	mov	r3, r1
 801c6a6:	607a      	str	r2, [r7, #4]
 801c6a8:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c6b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801c6b2:	697b      	ldr	r3, [r7, #20]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d102      	bne.n	801c6be <SCSI_Read12+0x22>
  {
    return -1;
 801c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6bc:	e095      	b.n	801c7ea <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c6be:	697b      	ldr	r3, [r7, #20]
 801c6c0:	7a1b      	ldrb	r3, [r3, #8]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f040 8087 	bne.w	801c7d6 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801c6c8:	697b      	ldr	r3, [r7, #20]
 801c6ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c6ce:	b25b      	sxtb	r3, r3
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	db0a      	blt.n	801c6ea <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c6d4:	697b      	ldr	r3, [r7, #20]
 801c6d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c6da:	2320      	movs	r3, #32
 801c6dc:	2205      	movs	r2, #5
 801c6de:	68f8      	ldr	r0, [r7, #12]
 801c6e0:	f7ff fe7b 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c6e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6e8:	e07f      	b.n	801c7ea <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801c6f0:	2b02      	cmp	r3, #2
 801c6f2:	d108      	bne.n	801c706 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c6f4:	7af9      	ldrb	r1, [r7, #11]
 801c6f6:	233a      	movs	r3, #58	; 0x3a
 801c6f8:	2202      	movs	r2, #2
 801c6fa:	68f8      	ldr	r0, [r7, #12]
 801c6fc:	f7ff fe6d 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c700:	f04f 33ff 	mov.w	r3, #4294967295
 801c704:	e071      	b.n	801c7ea <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c70c:	689b      	ldr	r3, [r3, #8]
 801c70e:	7afa      	ldrb	r2, [r7, #11]
 801c710:	4610      	mov	r0, r2
 801c712:	4798      	blx	r3
 801c714:	4603      	mov	r3, r0
 801c716:	2b00      	cmp	r3, #0
 801c718:	d008      	beq.n	801c72c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c71a:	7af9      	ldrb	r1, [r7, #11]
 801c71c:	233a      	movs	r3, #58	; 0x3a
 801c71e:	2202      	movs	r2, #2
 801c720:	68f8      	ldr	r0, [r7, #12]
 801c722:	f7ff fe5a 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c726:	f04f 33ff 	mov.w	r3, #4294967295
 801c72a:	e05e      	b.n	801c7ea <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	3302      	adds	r3, #2
 801c730:	781b      	ldrb	r3, [r3, #0]
 801c732:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	3303      	adds	r3, #3
 801c738:	781b      	ldrb	r3, [r3, #0]
 801c73a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c73c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	3304      	adds	r3, #4
 801c742:	781b      	ldrb	r3, [r3, #0]
 801c744:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c746:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c748:	687a      	ldr	r2, [r7, #4]
 801c74a:	3205      	adds	r2, #5
 801c74c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801c74e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c750:	697b      	ldr	r3, [r7, #20]
 801c752:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	3306      	adds	r3, #6
 801c75a:	781b      	ldrb	r3, [r3, #0]
 801c75c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	3307      	adds	r3, #7
 801c762:	781b      	ldrb	r3, [r3, #0]
 801c764:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c766:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	3308      	adds	r3, #8
 801c76c:	781b      	ldrb	r3, [r3, #0]
 801c76e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801c770:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801c772:	687a      	ldr	r2, [r7, #4]
 801c774:	3209      	adds	r2, #9
 801c776:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801c778:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801c77a:	697b      	ldr	r3, [r7, #20]
 801c77c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c780:	697b      	ldr	r3, [r7, #20]
 801c782:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c786:	697b      	ldr	r3, [r7, #20]
 801c788:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c78c:	7af9      	ldrb	r1, [r7, #11]
 801c78e:	68f8      	ldr	r0, [r7, #12]
 801c790:	f000 fa02 	bl	801cb98 <SCSI_CheckAddressRange>
 801c794:	4603      	mov	r3, r0
 801c796:	2b00      	cmp	r3, #0
 801c798:	da02      	bge.n	801c7a0 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c79a:	f04f 33ff 	mov.w	r3, #4294967295
 801c79e:	e024      	b.n	801c7ea <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801c7a0:	697b      	ldr	r3, [r7, #20]
 801c7a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c7ac:	6979      	ldr	r1, [r7, #20]
 801c7ae:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801c7b2:	fb01 f303 	mul.w	r3, r1, r3
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	d00a      	beq.n	801c7d0 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c7c0:	2320      	movs	r3, #32
 801c7c2:	2205      	movs	r2, #5
 801c7c4:	68f8      	ldr	r0, [r7, #12]
 801c7c6:	f7ff fe08 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c7ca:	f04f 33ff 	mov.w	r3, #4294967295
 801c7ce:	e00c      	b.n	801c7ea <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801c7d0:	697b      	ldr	r3, [r7, #20]
 801c7d2:	2202      	movs	r2, #2
 801c7d4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c7dc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801c7de:	7afb      	ldrb	r3, [r7, #11]
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	68f8      	ldr	r0, [r7, #12]
 801c7e4:	f000 fa00 	bl	801cbe8 <SCSI_ProcessRead>
 801c7e8:	4603      	mov	r3, r0
}
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	3718      	adds	r7, #24
 801c7ee:	46bd      	mov	sp, r7
 801c7f0:	bd80      	pop	{r7, pc}

0801c7f2 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c7f2:	b580      	push	{r7, lr}
 801c7f4:	b086      	sub	sp, #24
 801c7f6:	af00      	add	r7, sp, #0
 801c7f8:	60f8      	str	r0, [r7, #12]
 801c7fa:	460b      	mov	r3, r1
 801c7fc:	607a      	str	r2, [r7, #4]
 801c7fe:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c806:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c808:	697b      	ldr	r3, [r7, #20]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d102      	bne.n	801c814 <SCSI_Write10+0x22>
  {
    return -1;
 801c80e:	f04f 33ff 	mov.w	r3, #4294967295
 801c812:	e0af      	b.n	801c974 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c814:	697b      	ldr	r3, [r7, #20]
 801c816:	7a1b      	ldrb	r3, [r3, #8]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	f040 80a5 	bne.w	801c968 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801c81e:	697b      	ldr	r3, [r7, #20]
 801c820:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c824:	2b00      	cmp	r3, #0
 801c826:	d10a      	bne.n	801c83e <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c828:	697b      	ldr	r3, [r7, #20]
 801c82a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c82e:	2320      	movs	r3, #32
 801c830:	2205      	movs	r2, #5
 801c832:	68f8      	ldr	r0, [r7, #12]
 801c834:	f7ff fdd1 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c838:	f04f 33ff 	mov.w	r3, #4294967295
 801c83c:	e09a      	b.n	801c974 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801c83e:	697b      	ldr	r3, [r7, #20]
 801c840:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c844:	b25b      	sxtb	r3, r3
 801c846:	2b00      	cmp	r3, #0
 801c848:	da0a      	bge.n	801c860 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c84a:	697b      	ldr	r3, [r7, #20]
 801c84c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c850:	2320      	movs	r3, #32
 801c852:	2205      	movs	r2, #5
 801c854:	68f8      	ldr	r0, [r7, #12]
 801c856:	f7ff fdc0 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c85a:	f04f 33ff 	mov.w	r3, #4294967295
 801c85e:	e089      	b.n	801c974 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c866:	689b      	ldr	r3, [r3, #8]
 801c868:	7afa      	ldrb	r2, [r7, #11]
 801c86a:	4610      	mov	r0, r2
 801c86c:	4798      	blx	r3
 801c86e:	4603      	mov	r3, r0
 801c870:	2b00      	cmp	r3, #0
 801c872:	d008      	beq.n	801c886 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c874:	7af9      	ldrb	r1, [r7, #11]
 801c876:	233a      	movs	r3, #58	; 0x3a
 801c878:	2202      	movs	r2, #2
 801c87a:	68f8      	ldr	r0, [r7, #12]
 801c87c:	f7ff fdad 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c880:	f04f 33ff 	mov.w	r3, #4294967295
 801c884:	e076      	b.n	801c974 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c88c:	68db      	ldr	r3, [r3, #12]
 801c88e:	7afa      	ldrb	r2, [r7, #11]
 801c890:	4610      	mov	r0, r2
 801c892:	4798      	blx	r3
 801c894:	4603      	mov	r3, r0
 801c896:	2b00      	cmp	r3, #0
 801c898:	d008      	beq.n	801c8ac <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801c89a:	7af9      	ldrb	r1, [r7, #11]
 801c89c:	2327      	movs	r3, #39	; 0x27
 801c89e:	2202      	movs	r2, #2
 801c8a0:	68f8      	ldr	r0, [r7, #12]
 801c8a2:	f7ff fd9a 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c8a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c8aa:	e063      	b.n	801c974 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	3302      	adds	r3, #2
 801c8b0:	781b      	ldrb	r3, [r3, #0]
 801c8b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	3303      	adds	r3, #3
 801c8b8:	781b      	ldrb	r3, [r3, #0]
 801c8ba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	3304      	adds	r3, #4
 801c8c2:	781b      	ldrb	r3, [r3, #0]
 801c8c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801c8c6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801c8c8:	687a      	ldr	r2, [r7, #4]
 801c8ca:	3205      	adds	r2, #5
 801c8cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801c8ce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	3307      	adds	r3, #7
 801c8da:	781b      	ldrb	r3, [r3, #0]
 801c8dc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801c8de:	687a      	ldr	r2, [r7, #4]
 801c8e0:	3208      	adds	r2, #8
 801c8e2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801c8e4:	431a      	orrs	r2, r3
 801c8e6:	697b      	ldr	r3, [r7, #20]
 801c8e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801c8ec:	697b      	ldr	r3, [r7, #20]
 801c8ee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801c8f2:	697b      	ldr	r3, [r7, #20]
 801c8f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c8f8:	7af9      	ldrb	r1, [r7, #11]
 801c8fa:	68f8      	ldr	r0, [r7, #12]
 801c8fc:	f000 f94c 	bl	801cb98 <SCSI_CheckAddressRange>
 801c900:	4603      	mov	r3, r0
 801c902:	2b00      	cmp	r3, #0
 801c904:	da02      	bge.n	801c90c <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801c906:	f04f 33ff 	mov.w	r3, #4294967295
 801c90a:	e033      	b.n	801c974 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801c912:	697a      	ldr	r2, [r7, #20]
 801c914:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801c918:	fb02 f303 	mul.w	r3, r2, r3
 801c91c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801c91e:	697b      	ldr	r3, [r7, #20]
 801c920:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c924:	693a      	ldr	r2, [r7, #16]
 801c926:	429a      	cmp	r2, r3
 801c928:	d00a      	beq.n	801c940 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c92a:	697b      	ldr	r3, [r7, #20]
 801c92c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c930:	2320      	movs	r3, #32
 801c932:	2205      	movs	r2, #5
 801c934:	68f8      	ldr	r0, [r7, #12]
 801c936:	f7ff fd50 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c93a:	f04f 33ff 	mov.w	r3, #4294967295
 801c93e:	e019      	b.n	801c974 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801c940:	693b      	ldr	r3, [r7, #16]
 801c942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c946:	bf28      	it	cs
 801c948:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801c94c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801c94e:	697b      	ldr	r3, [r7, #20]
 801c950:	2201      	movs	r2, #1
 801c952:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	f103 0210 	add.w	r2, r3, #16
 801c95a:	693b      	ldr	r3, [r7, #16]
 801c95c:	2101      	movs	r1, #1
 801c95e:	68f8      	ldr	r0, [r7, #12]
 801c960:	f7fd f95a 	bl	8019c18 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801c964:	2300      	movs	r3, #0
 801c966:	e005      	b.n	801c974 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 801c968:	7afb      	ldrb	r3, [r7, #11]
 801c96a:	4619      	mov	r1, r3
 801c96c:	68f8      	ldr	r0, [r7, #12]
 801c96e:	f000 f9b4 	bl	801ccda <SCSI_ProcessWrite>
 801c972:	4603      	mov	r3, r0
}
 801c974:	4618      	mov	r0, r3
 801c976:	3718      	adds	r7, #24
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd80      	pop	{r7, pc}

0801c97c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b086      	sub	sp, #24
 801c980:	af00      	add	r7, sp, #0
 801c982:	60f8      	str	r0, [r7, #12]
 801c984:	460b      	mov	r3, r1
 801c986:	607a      	str	r2, [r7, #4]
 801c988:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c990:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d102      	bne.n	801c99e <SCSI_Write12+0x22>
  {
    return -1;
 801c998:	f04f 33ff 	mov.w	r3, #4294967295
 801c99c:	e0bf      	b.n	801cb1e <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801c99e:	697b      	ldr	r3, [r7, #20]
 801c9a0:	7a1b      	ldrb	r3, [r3, #8]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	f040 80b5 	bne.w	801cb12 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801c9a8:	697b      	ldr	r3, [r7, #20]
 801c9aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d10a      	bne.n	801c9c8 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9b2:	697b      	ldr	r3, [r7, #20]
 801c9b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c9b8:	2320      	movs	r3, #32
 801c9ba:	2205      	movs	r2, #5
 801c9bc:	68f8      	ldr	r0, [r7, #12]
 801c9be:	f7ff fd0c 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c9c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c9c6:	e0aa      	b.n	801cb1e <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801c9c8:	697b      	ldr	r3, [r7, #20]
 801c9ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801c9ce:	b25b      	sxtb	r3, r3
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	da0a      	bge.n	801c9ea <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801c9d4:	697b      	ldr	r3, [r7, #20]
 801c9d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801c9da:	2320      	movs	r3, #32
 801c9dc:	2205      	movs	r2, #5
 801c9de:	68f8      	ldr	r0, [r7, #12]
 801c9e0:	f7ff fcfb 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801c9e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c9e8:	e099      	b.n	801cb1e <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsReady(lun) != 0)
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c9f0:	689b      	ldr	r3, [r3, #8]
 801c9f2:	7afa      	ldrb	r2, [r7, #11]
 801c9f4:	4610      	mov	r0, r2
 801c9f6:	4798      	blx	r3
 801c9f8:	4603      	mov	r3, r0
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d00b      	beq.n	801ca16 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801c9fe:	7af9      	ldrb	r1, [r7, #11]
 801ca00:	233a      	movs	r3, #58	; 0x3a
 801ca02:	2202      	movs	r2, #2
 801ca04:	68f8      	ldr	r0, [r7, #12]
 801ca06:	f7ff fce8 	bl	801c3da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801ca0a:	697b      	ldr	r3, [r7, #20]
 801ca0c:	2205      	movs	r2, #5
 801ca0e:	721a      	strb	r2, [r3, #8]
      return -1;
 801ca10:	f04f 33ff 	mov.w	r3, #4294967295
 801ca14:	e083      	b.n	801cb1e <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->IsWriteProtected(lun) != 0)
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ca1c:	68db      	ldr	r3, [r3, #12]
 801ca1e:	7afa      	ldrb	r2, [r7, #11]
 801ca20:	4610      	mov	r0, r2
 801ca22:	4798      	blx	r3
 801ca24:	4603      	mov	r3, r0
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d00b      	beq.n	801ca42 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801ca2a:	7af9      	ldrb	r1, [r7, #11]
 801ca2c:	2327      	movs	r3, #39	; 0x27
 801ca2e:	2202      	movs	r2, #2
 801ca30:	68f8      	ldr	r0, [r7, #12]
 801ca32:	f7ff fcd2 	bl	801c3da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801ca36:	697b      	ldr	r3, [r7, #20]
 801ca38:	2205      	movs	r2, #5
 801ca3a:	721a      	strb	r2, [r3, #8]
      return -1;
 801ca3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ca40:	e06d      	b.n	801cb1e <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	3302      	adds	r3, #2
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	3303      	adds	r3, #3
 801ca4e:	781b      	ldrb	r3, [r3, #0]
 801ca50:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca52:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	3304      	adds	r3, #4
 801ca58:	781b      	ldrb	r3, [r3, #0]
 801ca5a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801ca5c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801ca5e:	687a      	ldr	r2, [r7, #4]
 801ca60:	3205      	adds	r2, #5
 801ca62:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801ca64:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	3306      	adds	r3, #6
 801ca70:	781b      	ldrb	r3, [r3, #0]
 801ca72:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	3307      	adds	r3, #7
 801ca78:	781b      	ldrb	r3, [r3, #0]
 801ca7a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801ca7c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	3308      	adds	r3, #8
 801ca82:	781b      	ldrb	r3, [r3, #0]
 801ca84:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801ca86:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801ca88:	687a      	ldr	r2, [r7, #4]
 801ca8a:	3209      	adds	r2, #9
 801ca8c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801ca8e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801ca90:	697b      	ldr	r3, [r7, #20]
 801ca92:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801ca96:	697b      	ldr	r3, [r7, #20]
 801ca98:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801ca9c:	697b      	ldr	r3, [r7, #20]
 801ca9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801caa2:	7af9      	ldrb	r1, [r7, #11]
 801caa4:	68f8      	ldr	r0, [r7, #12]
 801caa6:	f000 f877 	bl	801cb98 <SCSI_CheckAddressRange>
 801caaa:	4603      	mov	r3, r0
 801caac:	2b00      	cmp	r3, #0
 801caae:	da02      	bge.n	801cab6 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801cab0:	f04f 33ff 	mov.w	r3, #4294967295
 801cab4:	e033      	b.n	801cb1e <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cabc:	697a      	ldr	r2, [r7, #20]
 801cabe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cac2:	fb02 f303 	mul.w	r3, r2, r3
 801cac6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801cace:	693a      	ldr	r2, [r7, #16]
 801cad0:	429a      	cmp	r2, r3
 801cad2:	d00a      	beq.n	801caea <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801cada:	2320      	movs	r3, #32
 801cadc:	2205      	movs	r2, #5
 801cade:	68f8      	ldr	r0, [r7, #12]
 801cae0:	f7ff fc7b 	bl	801c3da <SCSI_SenseCode>
      return -1;
 801cae4:	f04f 33ff 	mov.w	r3, #4294967295
 801cae8:	e019      	b.n	801cb1e <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801caea:	693b      	ldr	r3, [r7, #16]
 801caec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801caf0:	bf28      	it	cs
 801caf2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801caf6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801caf8:	697b      	ldr	r3, [r7, #20]
 801cafa:	2201      	movs	r2, #1
 801cafc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	f103 0210 	add.w	r2, r3, #16
 801cb04:	693b      	ldr	r3, [r7, #16]
 801cb06:	2101      	movs	r1, #1
 801cb08:	68f8      	ldr	r0, [r7, #12]
 801cb0a:	f7fd f885 	bl	8019c18 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801cb0e:	2300      	movs	r3, #0
 801cb10:	e005      	b.n	801cb1e <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801cb12:	7afb      	ldrb	r3, [r7, #11]
 801cb14:	4619      	mov	r1, r3
 801cb16:	68f8      	ldr	r0, [r7, #12]
 801cb18:	f000 f8df 	bl	801ccda <SCSI_ProcessWrite>
 801cb1c:	4603      	mov	r3, r0
}
 801cb1e:	4618      	mov	r0, r3
 801cb20:	3718      	adds	r7, #24
 801cb22:	46bd      	mov	sp, r7
 801cb24:	bd80      	pop	{r7, pc}

0801cb26 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801cb26:	b580      	push	{r7, lr}
 801cb28:	b086      	sub	sp, #24
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	60f8      	str	r0, [r7, #12]
 801cb2e:	460b      	mov	r3, r1
 801cb30:	607a      	str	r2, [r7, #4]
 801cb32:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cb3a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cb3c:	697b      	ldr	r3, [r7, #20]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d102      	bne.n	801cb48 <SCSI_Verify10+0x22>
  {
    return -1;
 801cb42:	f04f 33ff 	mov.w	r3, #4294967295
 801cb46:	e023      	b.n	801cb90 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	3301      	adds	r3, #1
 801cb4c:	781b      	ldrb	r3, [r3, #0]
 801cb4e:	f003 0302 	and.w	r3, r3, #2
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d008      	beq.n	801cb68 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801cb56:	7af9      	ldrb	r1, [r7, #11]
 801cb58:	2324      	movs	r3, #36	; 0x24
 801cb5a:	2205      	movs	r2, #5
 801cb5c:	68f8      	ldr	r0, [r7, #12]
 801cb5e:	f7ff fc3c 	bl	801c3da <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801cb62:	f04f 33ff 	mov.w	r3, #4294967295
 801cb66:	e013      	b.n	801cb90 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801cb68:	697b      	ldr	r3, [r7, #20]
 801cb6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cb6e:	697b      	ldr	r3, [r7, #20]
 801cb70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cb74:	7af9      	ldrb	r1, [r7, #11]
 801cb76:	68f8      	ldr	r0, [r7, #12]
 801cb78:	f000 f80e 	bl	801cb98 <SCSI_CheckAddressRange>
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	da02      	bge.n	801cb88 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801cb82:	f04f 33ff 	mov.w	r3, #4294967295
 801cb86:	e003      	b.n	801cb90 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 801cb88:	697b      	ldr	r3, [r7, #20]
 801cb8a:	2200      	movs	r2, #0
 801cb8c:	60da      	str	r2, [r3, #12]

  return 0;
 801cb8e:	2300      	movs	r3, #0
}
 801cb90:	4618      	mov	r0, r3
 801cb92:	3718      	adds	r7, #24
 801cb94:	46bd      	mov	sp, r7
 801cb96:	bd80      	pop	{r7, pc}

0801cb98 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b086      	sub	sp, #24
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	60f8      	str	r0, [r7, #12]
 801cba0:	607a      	str	r2, [r7, #4]
 801cba2:	603b      	str	r3, [r7, #0]
 801cba4:	460b      	mov	r3, r1
 801cba6:	72fb      	strb	r3, [r7, #11]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cbae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801cbb0:	697b      	ldr	r3, [r7, #20]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d102      	bne.n	801cbbc <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 801cbba:	e011      	b.n	801cbe0 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801cbbc:	687a      	ldr	r2, [r7, #4]
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	441a      	add	r2, r3
 801cbc2:	697b      	ldr	r3, [r7, #20]
 801cbc4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801cbc8:	429a      	cmp	r2, r3
 801cbca:	d908      	bls.n	801cbde <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801cbcc:	7af9      	ldrb	r1, [r7, #11]
 801cbce:	2321      	movs	r3, #33	; 0x21
 801cbd0:	2205      	movs	r2, #5
 801cbd2:	68f8      	ldr	r0, [r7, #12]
 801cbd4:	f7ff fc01 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801cbd8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbdc:	e000      	b.n	801cbe0 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 801cbde:	2300      	movs	r3, #0
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3718      	adds	r7, #24
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}

0801cbe8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801cbe8:	b590      	push	{r4, r7, lr}
 801cbea:	b085      	sub	sp, #20
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
 801cbf0:	460b      	mov	r3, r1
 801cbf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801cbfa:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cc02:	68fa      	ldr	r2, [r7, #12]
 801cc04:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cc08:	fb02 f303 	mul.w	r3, r2, r3
 801cc0c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cc0e:	68fb      	ldr	r3, [r7, #12]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d102      	bne.n	801cc1a <SCSI_ProcessRead+0x32>
  {
    return -1;
 801cc14:	f04f 33ff 	mov.w	r3, #4294967295
 801cc18:	e05b      	b.n	801ccd2 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cc1a:	68bb      	ldr	r3, [r7, #8]
 801cc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc20:	bf28      	it	cs
 801cc22:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cc26:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cc2e:	691c      	ldr	r4, [r3, #16]
 801cc30:	68fb      	ldr	r3, [r7, #12]
 801cc32:	f103 0110 	add.w	r1, r3, #16
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cc42:	4618      	mov	r0, r3
 801cc44:	68bb      	ldr	r3, [r7, #8]
 801cc46:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Read(lun, hmsc->bot_data,
 801cc4a:	b29b      	uxth	r3, r3
 801cc4c:	78f8      	ldrb	r0, [r7, #3]
 801cc4e:	47a0      	blx	r4
 801cc50:	4603      	mov	r3, r0
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	da08      	bge.n	801cc68 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801cc56:	78f9      	ldrb	r1, [r7, #3]
 801cc58:	2311      	movs	r3, #17
 801cc5a:	2204      	movs	r2, #4
 801cc5c:	6878      	ldr	r0, [r7, #4]
 801cc5e:	f7ff fbbc 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801cc62:	f04f 33ff 	mov.w	r3, #4294967295
 801cc66:	e034      	b.n	801ccd2 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_IN_EP, hmsc->bot_data, len);
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	f103 0210 	add.w	r2, r3, #16
 801cc6e:	68bb      	ldr	r3, [r7, #8]
 801cc70:	2181      	movs	r1, #129	; 0x81
 801cc72:	6878      	ldr	r0, [r7, #4]
 801cc74:	f7fc ff98 	bl	8019ba8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cc84:	4619      	mov	r1, r3
 801cc86:	68bb      	ldr	r3, [r7, #8]
 801cc88:	fbb3 f3f1 	udiv	r3, r3, r1
 801cc8c:	441a      	add	r2, r3
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cca0:	4619      	mov	r1, r3
 801cca2:	68bb      	ldr	r3, [r7, #8]
 801cca4:	fbb3 f3f1 	udiv	r3, r3, r1
 801cca8:	1ad2      	subs	r2, r2, r3
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801ccb6:	68bb      	ldr	r3, [r7, #8]
 801ccb8:	1ad2      	subs	r2, r2, r3
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d102      	bne.n	801ccd0 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	2203      	movs	r2, #3
 801ccce:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801ccd0:	2300      	movs	r3, #0
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3714      	adds	r7, #20
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd90      	pop	{r4, r7, pc}

0801ccda <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801ccda:	b590      	push	{r4, r7, lr}
 801ccdc:	b085      	sub	sp, #20
 801ccde:	af00      	add	r7, sp, #0
 801cce0:	6078      	str	r0, [r7, #4]
 801cce2:	460b      	mov	r3, r1
 801cce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDCMSC_HandleTypeDef *hmsc = (USBD_CDCMSC_HandleTypeDef *)pdev->pClassDataMSC;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ccec:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801ccf4:	68fa      	ldr	r2, [r7, #12]
 801ccf6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801ccfa:	fb02 f303 	mul.w	r3, r2, r3
 801ccfe:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d102      	bne.n	801cd0c <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801cd06:	f04f 33ff 	mov.w	r3, #4294967295
 801cd0a:	e06b      	b.n	801cde4 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd12:	bf28      	it	cs
 801cd14:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cd18:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cd20:	695c      	ldr	r4, [r3, #20]
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	f103 0110 	add.w	r1, r3, #16
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd34:	4618      	mov	r0, r3
 801cd36:	68bb      	ldr	r3, [r7, #8]
 801cd38:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserDataMSC)->Write(lun, hmsc->bot_data,
 801cd3c:	b29b      	uxth	r3, r3
 801cd3e:	78f8      	ldrb	r0, [r7, #3]
 801cd40:	47a0      	blx	r4
 801cd42:	4603      	mov	r3, r0
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	da08      	bge.n	801cd5a <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801cd48:	78f9      	ldrb	r1, [r7, #3]
 801cd4a:	2303      	movs	r3, #3
 801cd4c:	2204      	movs	r2, #4
 801cd4e:	6878      	ldr	r0, [r7, #4]
 801cd50:	f7ff fb43 	bl	801c3da <SCSI_SenseCode>
    return -1;
 801cd54:	f04f 33ff 	mov.w	r3, #4294967295
 801cd58:	e044      	b.n	801cde4 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd66:	4619      	mov	r1, r3
 801cd68:	68bb      	ldr	r3, [r7, #8]
 801cd6a:	fbb3 f3f1 	udiv	r3, r3, r1
 801cd6e:	441a      	add	r2, r3
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801cd82:	4619      	mov	r1, r3
 801cd84:	68bb      	ldr	r3, [r7, #8]
 801cd86:	fbb3 f3f1 	udiv	r3, r3, r1
 801cd8a:	1ad2      	subs	r2, r2, r3
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801cd98:	68bb      	ldr	r3, [r7, #8]
 801cd9a:	1ad2      	subs	r2, r2, r3
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d104      	bne.n	801cdb6 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801cdac:	2100      	movs	r1, #0
 801cdae:	6878      	ldr	r0, [r7, #4]
 801cdb0:	f7fe fdd8 	bl	801b964 <MSC_BOT_SendCSW>
 801cdb4:	e015      	b.n	801cde2 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801cdbc:	68fa      	ldr	r2, [r7, #12]
 801cdbe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801cdc2:	fb02 f303 	mul.w	r3, r2, r3
 801cdc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cdca:	bf28      	it	cs
 801cdcc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801cdd0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_OUT_EP, hmsc->bot_data, len);
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	f103 0210 	add.w	r2, r3, #16
 801cdd8:	68bb      	ldr	r3, [r7, #8]
 801cdda:	2101      	movs	r1, #1
 801cddc:	6878      	ldr	r0, [r7, #4]
 801cdde:	f7fc ff1b 	bl	8019c18 <USBD_LL_PrepareReceive>
  }

  return 0;
 801cde2:	2300      	movs	r3, #0
}
 801cde4:	4618      	mov	r0, r3
 801cde6:	3714      	adds	r7, #20
 801cde8:	46bd      	mov	sp, r7
 801cdea:	bd90      	pop	{r4, r7, pc}

0801cdec <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_CDCMSC_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801cdec:	b480      	push	{r7}
 801cdee:	b087      	sub	sp, #28
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	60f8      	str	r0, [r7, #12]
 801cdf4:	60b9      	str	r1, [r7, #8]
 801cdf6:	4613      	mov	r3, r2
 801cdf8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801cdfa:	88fb      	ldrh	r3, [r7, #6]
 801cdfc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d102      	bne.n	801ce0a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801ce04:	f04f 33ff 	mov.w	r3, #4294967295
 801ce08:	e013      	b.n	801ce32 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801ce0a:	8afa      	ldrh	r2, [r7, #22]
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801ce10:	e00b      	b.n	801ce2a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801ce12:	8afb      	ldrh	r3, [r7, #22]
 801ce14:	3b01      	subs	r3, #1
 801ce16:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801ce18:	8afb      	ldrh	r3, [r7, #22]
 801ce1a:	68ba      	ldr	r2, [r7, #8]
 801ce1c:	441a      	add	r2, r3
 801ce1e:	8afb      	ldrh	r3, [r7, #22]
 801ce20:	7811      	ldrb	r1, [r2, #0]
 801ce22:	68fa      	ldr	r2, [r7, #12]
 801ce24:	4413      	add	r3, r2
 801ce26:	460a      	mov	r2, r1
 801ce28:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801ce2a:	8afb      	ldrh	r3, [r7, #22]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d1f0      	bne.n	801ce12 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801ce30:	2300      	movs	r3, #0
}
 801ce32:	4618      	mov	r0, r3
 801ce34:	371c      	adds	r7, #28
 801ce36:	46bd      	mov	sp, r7
 801ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce3c:	4770      	bx	lr

0801ce3e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801ce3e:	b480      	push	{r7}
 801ce40:	b083      	sub	sp, #12
 801ce42:	af00      	add	r7, sp, #0
 801ce44:	4603      	mov	r3, r0
 801ce46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801ce48:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	370c      	adds	r7, #12
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce54:	4770      	bx	lr

0801ce56 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801ce56:	b480      	push	{r7}
 801ce58:	b085      	sub	sp, #20
 801ce5a:	af00      	add	r7, sp, #0
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	60b9      	str	r1, [r7, #8]
 801ce60:	607a      	str	r2, [r7, #4]
 801ce62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801ce64:	68bb      	ldr	r3, [r7, #8]
 801ce66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ce6a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ce72:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801ce74:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ce76:	4618      	mov	r0, r3
 801ce78:	3714      	adds	r7, #20
 801ce7a:	46bd      	mov	sp, r7
 801ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce80:	4770      	bx	lr

0801ce82 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801ce82:	b480      	push	{r7}
 801ce84:	b083      	sub	sp, #12
 801ce86:	af00      	add	r7, sp, #0
 801ce88:	4603      	mov	r3, r0
 801ce8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ce8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ce8e:	4618      	mov	r0, r3
 801ce90:	370c      	adds	r7, #12
 801ce92:	46bd      	mov	sp, r7
 801ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce98:	4770      	bx	lr

0801ce9a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801ce9a:	b480      	push	{r7}
 801ce9c:	b083      	sub	sp, #12
 801ce9e:	af00      	add	r7, sp, #0
 801cea0:	4603      	mov	r3, r0
 801cea2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801cea4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cea6:	4618      	mov	r0, r3
 801cea8:	370c      	adds	r7, #12
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceb0:	4770      	bx	lr

0801ceb2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801ceb2:	b580      	push	{r7, lr}
 801ceb4:	b086      	sub	sp, #24
 801ceb6:	af00      	add	r7, sp, #0
 801ceb8:	60b9      	str	r1, [r7, #8]
 801ceba:	607a      	str	r2, [r7, #4]
 801cebc:	461a      	mov	r2, r3
 801cebe:	4603      	mov	r3, r0
 801cec0:	73fb      	strb	r3, [r7, #15]
 801cec2:	4613      	mov	r3, r2
 801cec4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	uint16_t block_cntr=0;
 801cec6:	2300      	movs	r3, #0
 801cec8:	82fb      	strh	r3, [r7, #22]
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801ceca:	2300      	movs	r3, #0
 801cecc:	82fb      	strh	r3, [r7, #22]
 801cece:	e00f      	b.n	801cef0 <STORAGE_Read_FS+0x3e>
				W25_ReadBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801ced0:	8afb      	ldrh	r3, [r7, #22]
 801ced2:	025b      	lsls	r3, r3, #9
 801ced4:	461a      	mov	r2, r3
 801ced6:	68bb      	ldr	r3, [r7, #8]
 801ced8:	1898      	adds	r0, r3, r2
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	b29a      	uxth	r2, r3
 801cede:	8afb      	ldrh	r3, [r7, #22]
 801cee0:	4413      	add	r3, r2
 801cee2:	b29b      	uxth	r3, r3
 801cee4:	4619      	mov	r1, r3
 801cee6:	f7e7 fc3d 	bl	8004764 <W25_ReadBuf>
			for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801ceea:	8afb      	ldrh	r3, [r7, #22]
 801ceec:	3301      	adds	r3, #1
 801ceee:	82fb      	strh	r3, [r7, #22]
 801cef0:	8afa      	ldrh	r2, [r7, #22]
 801cef2:	89bb      	ldrh	r3, [r7, #12]
 801cef4:	429a      	cmp	r2, r3
 801cef6:	d3eb      	bcc.n	801ced0 <STORAGE_Read_FS+0x1e>
	  return (USBD_OK);
 801cef8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cefa:	4618      	mov	r0, r3
 801cefc:	3718      	adds	r7, #24
 801cefe:	46bd      	mov	sp, r7
 801cf00:	bd80      	pop	{r7, pc}

0801cf02 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801cf02:	b580      	push	{r7, lr}
 801cf04:	b086      	sub	sp, #24
 801cf06:	af00      	add	r7, sp, #0
 801cf08:	60b9      	str	r1, [r7, #8]
 801cf0a:	607a      	str	r2, [r7, #4]
 801cf0c:	461a      	mov	r2, r3
 801cf0e:	4603      	mov	r3, r0
 801cf10:	73fb      	strb	r3, [r7, #15]
 801cf12:	4613      	mov	r3, r2
 801cf14:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint16_t block_cntr=0;
 801cf16:	2300      	movs	r3, #0
 801cf18:	82fb      	strh	r3, [r7, #22]
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	82fb      	strh	r3, [r7, #22]
 801cf1e:	e00f      	b.n	801cf40 <STORAGE_Write_FS+0x3e>
					W25_WriteBuf(&buf[block_cntr*STORAGE_BLK_SIZ], block_cntr+blk_addr);
 801cf20:	8afb      	ldrh	r3, [r7, #22]
 801cf22:	025b      	lsls	r3, r3, #9
 801cf24:	461a      	mov	r2, r3
 801cf26:	68bb      	ldr	r3, [r7, #8]
 801cf28:	1898      	adds	r0, r3, r2
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	b29a      	uxth	r2, r3
 801cf2e:	8afb      	ldrh	r3, [r7, #22]
 801cf30:	4413      	add	r3, r2
 801cf32:	b29b      	uxth	r3, r3
 801cf34:	4619      	mov	r1, r3
 801cf36:	f7e7 fc85 	bl	8004844 <W25_WriteBuf>
				for(block_cntr=0;block_cntr<blk_len;block_cntr++)
 801cf3a:	8afb      	ldrh	r3, [r7, #22]
 801cf3c:	3301      	adds	r3, #1
 801cf3e:	82fb      	strh	r3, [r7, #22]
 801cf40:	8afa      	ldrh	r2, [r7, #22]
 801cf42:	89bb      	ldrh	r3, [r7, #12]
 801cf44:	429a      	cmp	r2, r3
 801cf46:	d3eb      	bcc.n	801cf20 <STORAGE_Write_FS+0x1e>
	  return (USBD_OK);
 801cf48:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	3718      	adds	r7, #24
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bd80      	pop	{r7, pc}

0801cf52 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801cf52:	b480      	push	{r7}
 801cf54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801cf56:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801cf58:	4618      	mov	r0, r3
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf60:	4770      	bx	lr
	...

0801cf64 <__errno>:
 801cf64:	4b01      	ldr	r3, [pc, #4]	; (801cf6c <__errno+0x8>)
 801cf66:	6818      	ldr	r0, [r3, #0]
 801cf68:	4770      	bx	lr
 801cf6a:	bf00      	nop
 801cf6c:	20000624 	.word	0x20000624

0801cf70 <__libc_init_array>:
 801cf70:	b570      	push	{r4, r5, r6, lr}
 801cf72:	4d0d      	ldr	r5, [pc, #52]	; (801cfa8 <__libc_init_array+0x38>)
 801cf74:	4c0d      	ldr	r4, [pc, #52]	; (801cfac <__libc_init_array+0x3c>)
 801cf76:	1b64      	subs	r4, r4, r5
 801cf78:	10a4      	asrs	r4, r4, #2
 801cf7a:	2600      	movs	r6, #0
 801cf7c:	42a6      	cmp	r6, r4
 801cf7e:	d109      	bne.n	801cf94 <__libc_init_array+0x24>
 801cf80:	4d0b      	ldr	r5, [pc, #44]	; (801cfb0 <__libc_init_array+0x40>)
 801cf82:	4c0c      	ldr	r4, [pc, #48]	; (801cfb4 <__libc_init_array+0x44>)
 801cf84:	f004 fd40 	bl	8021a08 <_init>
 801cf88:	1b64      	subs	r4, r4, r5
 801cf8a:	10a4      	asrs	r4, r4, #2
 801cf8c:	2600      	movs	r6, #0
 801cf8e:	42a6      	cmp	r6, r4
 801cf90:	d105      	bne.n	801cf9e <__libc_init_array+0x2e>
 801cf92:	bd70      	pop	{r4, r5, r6, pc}
 801cf94:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf98:	4798      	blx	r3
 801cf9a:	3601      	adds	r6, #1
 801cf9c:	e7ee      	b.n	801cf7c <__libc_init_array+0xc>
 801cf9e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfa2:	4798      	blx	r3
 801cfa4:	3601      	adds	r6, #1
 801cfa6:	e7f2      	b.n	801cf8e <__libc_init_array+0x1e>
 801cfa8:	08029ae4 	.word	0x08029ae4
 801cfac:	08029ae4 	.word	0x08029ae4
 801cfb0:	08029ae4 	.word	0x08029ae4
 801cfb4:	08029ae8 	.word	0x08029ae8

0801cfb8 <memset>:
 801cfb8:	4402      	add	r2, r0
 801cfba:	4603      	mov	r3, r0
 801cfbc:	4293      	cmp	r3, r2
 801cfbe:	d100      	bne.n	801cfc2 <memset+0xa>
 801cfc0:	4770      	bx	lr
 801cfc2:	f803 1b01 	strb.w	r1, [r3], #1
 801cfc6:	e7f9      	b.n	801cfbc <memset+0x4>

0801cfc8 <__cvt>:
 801cfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cfcc:	ec55 4b10 	vmov	r4, r5, d0
 801cfd0:	2d00      	cmp	r5, #0
 801cfd2:	460e      	mov	r6, r1
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	462b      	mov	r3, r5
 801cfd8:	bfbb      	ittet	lt
 801cfda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801cfde:	461d      	movlt	r5, r3
 801cfe0:	2300      	movge	r3, #0
 801cfe2:	232d      	movlt	r3, #45	; 0x2d
 801cfe4:	700b      	strb	r3, [r1, #0]
 801cfe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cfe8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801cfec:	4691      	mov	r9, r2
 801cfee:	f023 0820 	bic.w	r8, r3, #32
 801cff2:	bfbc      	itt	lt
 801cff4:	4622      	movlt	r2, r4
 801cff6:	4614      	movlt	r4, r2
 801cff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801cffc:	d005      	beq.n	801d00a <__cvt+0x42>
 801cffe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d002:	d100      	bne.n	801d006 <__cvt+0x3e>
 801d004:	3601      	adds	r6, #1
 801d006:	2102      	movs	r1, #2
 801d008:	e000      	b.n	801d00c <__cvt+0x44>
 801d00a:	2103      	movs	r1, #3
 801d00c:	ab03      	add	r3, sp, #12
 801d00e:	9301      	str	r3, [sp, #4]
 801d010:	ab02      	add	r3, sp, #8
 801d012:	9300      	str	r3, [sp, #0]
 801d014:	ec45 4b10 	vmov	d0, r4, r5
 801d018:	4653      	mov	r3, sl
 801d01a:	4632      	mov	r2, r6
 801d01c:	f001 fdc8 	bl	801ebb0 <_dtoa_r>
 801d020:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801d024:	4607      	mov	r7, r0
 801d026:	d102      	bne.n	801d02e <__cvt+0x66>
 801d028:	f019 0f01 	tst.w	r9, #1
 801d02c:	d022      	beq.n	801d074 <__cvt+0xac>
 801d02e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d032:	eb07 0906 	add.w	r9, r7, r6
 801d036:	d110      	bne.n	801d05a <__cvt+0x92>
 801d038:	783b      	ldrb	r3, [r7, #0]
 801d03a:	2b30      	cmp	r3, #48	; 0x30
 801d03c:	d10a      	bne.n	801d054 <__cvt+0x8c>
 801d03e:	2200      	movs	r2, #0
 801d040:	2300      	movs	r3, #0
 801d042:	4620      	mov	r0, r4
 801d044:	4629      	mov	r1, r5
 801d046:	f7e3 fd4f 	bl	8000ae8 <__aeabi_dcmpeq>
 801d04a:	b918      	cbnz	r0, 801d054 <__cvt+0x8c>
 801d04c:	f1c6 0601 	rsb	r6, r6, #1
 801d050:	f8ca 6000 	str.w	r6, [sl]
 801d054:	f8da 3000 	ldr.w	r3, [sl]
 801d058:	4499      	add	r9, r3
 801d05a:	2200      	movs	r2, #0
 801d05c:	2300      	movs	r3, #0
 801d05e:	4620      	mov	r0, r4
 801d060:	4629      	mov	r1, r5
 801d062:	f7e3 fd41 	bl	8000ae8 <__aeabi_dcmpeq>
 801d066:	b108      	cbz	r0, 801d06c <__cvt+0xa4>
 801d068:	f8cd 900c 	str.w	r9, [sp, #12]
 801d06c:	2230      	movs	r2, #48	; 0x30
 801d06e:	9b03      	ldr	r3, [sp, #12]
 801d070:	454b      	cmp	r3, r9
 801d072:	d307      	bcc.n	801d084 <__cvt+0xbc>
 801d074:	9b03      	ldr	r3, [sp, #12]
 801d076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d078:	1bdb      	subs	r3, r3, r7
 801d07a:	4638      	mov	r0, r7
 801d07c:	6013      	str	r3, [r2, #0]
 801d07e:	b004      	add	sp, #16
 801d080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d084:	1c59      	adds	r1, r3, #1
 801d086:	9103      	str	r1, [sp, #12]
 801d088:	701a      	strb	r2, [r3, #0]
 801d08a:	e7f0      	b.n	801d06e <__cvt+0xa6>

0801d08c <__exponent>:
 801d08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d08e:	4603      	mov	r3, r0
 801d090:	2900      	cmp	r1, #0
 801d092:	bfb8      	it	lt
 801d094:	4249      	neglt	r1, r1
 801d096:	f803 2b02 	strb.w	r2, [r3], #2
 801d09a:	bfb4      	ite	lt
 801d09c:	222d      	movlt	r2, #45	; 0x2d
 801d09e:	222b      	movge	r2, #43	; 0x2b
 801d0a0:	2909      	cmp	r1, #9
 801d0a2:	7042      	strb	r2, [r0, #1]
 801d0a4:	dd2a      	ble.n	801d0fc <__exponent+0x70>
 801d0a6:	f10d 0407 	add.w	r4, sp, #7
 801d0aa:	46a4      	mov	ip, r4
 801d0ac:	270a      	movs	r7, #10
 801d0ae:	46a6      	mov	lr, r4
 801d0b0:	460a      	mov	r2, r1
 801d0b2:	fb91 f6f7 	sdiv	r6, r1, r7
 801d0b6:	fb07 1516 	mls	r5, r7, r6, r1
 801d0ba:	3530      	adds	r5, #48	; 0x30
 801d0bc:	2a63      	cmp	r2, #99	; 0x63
 801d0be:	f104 34ff 	add.w	r4, r4, #4294967295
 801d0c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d0c6:	4631      	mov	r1, r6
 801d0c8:	dcf1      	bgt.n	801d0ae <__exponent+0x22>
 801d0ca:	3130      	adds	r1, #48	; 0x30
 801d0cc:	f1ae 0502 	sub.w	r5, lr, #2
 801d0d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801d0d4:	1c44      	adds	r4, r0, #1
 801d0d6:	4629      	mov	r1, r5
 801d0d8:	4561      	cmp	r1, ip
 801d0da:	d30a      	bcc.n	801d0f2 <__exponent+0x66>
 801d0dc:	f10d 0209 	add.w	r2, sp, #9
 801d0e0:	eba2 020e 	sub.w	r2, r2, lr
 801d0e4:	4565      	cmp	r5, ip
 801d0e6:	bf88      	it	hi
 801d0e8:	2200      	movhi	r2, #0
 801d0ea:	4413      	add	r3, r2
 801d0ec:	1a18      	subs	r0, r3, r0
 801d0ee:	b003      	add	sp, #12
 801d0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d0f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801d0fa:	e7ed      	b.n	801d0d8 <__exponent+0x4c>
 801d0fc:	2330      	movs	r3, #48	; 0x30
 801d0fe:	3130      	adds	r1, #48	; 0x30
 801d100:	7083      	strb	r3, [r0, #2]
 801d102:	70c1      	strb	r1, [r0, #3]
 801d104:	1d03      	adds	r3, r0, #4
 801d106:	e7f1      	b.n	801d0ec <__exponent+0x60>

0801d108 <_printf_float>:
 801d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d10c:	ed2d 8b02 	vpush	{d8}
 801d110:	b08d      	sub	sp, #52	; 0x34
 801d112:	460c      	mov	r4, r1
 801d114:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d118:	4616      	mov	r6, r2
 801d11a:	461f      	mov	r7, r3
 801d11c:	4605      	mov	r5, r0
 801d11e:	f002 ff97 	bl	8020050 <_localeconv_r>
 801d122:	f8d0 a000 	ldr.w	sl, [r0]
 801d126:	4650      	mov	r0, sl
 801d128:	f7e3 f862 	bl	80001f0 <strlen>
 801d12c:	2300      	movs	r3, #0
 801d12e:	930a      	str	r3, [sp, #40]	; 0x28
 801d130:	6823      	ldr	r3, [r4, #0]
 801d132:	9305      	str	r3, [sp, #20]
 801d134:	f8d8 3000 	ldr.w	r3, [r8]
 801d138:	f894 b018 	ldrb.w	fp, [r4, #24]
 801d13c:	3307      	adds	r3, #7
 801d13e:	f023 0307 	bic.w	r3, r3, #7
 801d142:	f103 0208 	add.w	r2, r3, #8
 801d146:	f8c8 2000 	str.w	r2, [r8]
 801d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d14e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801d152:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801d156:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d15a:	9307      	str	r3, [sp, #28]
 801d15c:	f8cd 8018 	str.w	r8, [sp, #24]
 801d160:	ee08 0a10 	vmov	s16, r0
 801d164:	4b9f      	ldr	r3, [pc, #636]	; (801d3e4 <_printf_float+0x2dc>)
 801d166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d16a:	f04f 32ff 	mov.w	r2, #4294967295
 801d16e:	f7e3 fced 	bl	8000b4c <__aeabi_dcmpun>
 801d172:	bb88      	cbnz	r0, 801d1d8 <_printf_float+0xd0>
 801d174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d178:	4b9a      	ldr	r3, [pc, #616]	; (801d3e4 <_printf_float+0x2dc>)
 801d17a:	f04f 32ff 	mov.w	r2, #4294967295
 801d17e:	f7e3 fcc7 	bl	8000b10 <__aeabi_dcmple>
 801d182:	bb48      	cbnz	r0, 801d1d8 <_printf_float+0xd0>
 801d184:	2200      	movs	r2, #0
 801d186:	2300      	movs	r3, #0
 801d188:	4640      	mov	r0, r8
 801d18a:	4649      	mov	r1, r9
 801d18c:	f7e3 fcb6 	bl	8000afc <__aeabi_dcmplt>
 801d190:	b110      	cbz	r0, 801d198 <_printf_float+0x90>
 801d192:	232d      	movs	r3, #45	; 0x2d
 801d194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d198:	4b93      	ldr	r3, [pc, #588]	; (801d3e8 <_printf_float+0x2e0>)
 801d19a:	4894      	ldr	r0, [pc, #592]	; (801d3ec <_printf_float+0x2e4>)
 801d19c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801d1a0:	bf94      	ite	ls
 801d1a2:	4698      	movls	r8, r3
 801d1a4:	4680      	movhi	r8, r0
 801d1a6:	2303      	movs	r3, #3
 801d1a8:	6123      	str	r3, [r4, #16]
 801d1aa:	9b05      	ldr	r3, [sp, #20]
 801d1ac:	f023 0204 	bic.w	r2, r3, #4
 801d1b0:	6022      	str	r2, [r4, #0]
 801d1b2:	f04f 0900 	mov.w	r9, #0
 801d1b6:	9700      	str	r7, [sp, #0]
 801d1b8:	4633      	mov	r3, r6
 801d1ba:	aa0b      	add	r2, sp, #44	; 0x2c
 801d1bc:	4621      	mov	r1, r4
 801d1be:	4628      	mov	r0, r5
 801d1c0:	f000 f9d8 	bl	801d574 <_printf_common>
 801d1c4:	3001      	adds	r0, #1
 801d1c6:	f040 8090 	bne.w	801d2ea <_printf_float+0x1e2>
 801d1ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d1ce:	b00d      	add	sp, #52	; 0x34
 801d1d0:	ecbd 8b02 	vpop	{d8}
 801d1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1d8:	4642      	mov	r2, r8
 801d1da:	464b      	mov	r3, r9
 801d1dc:	4640      	mov	r0, r8
 801d1de:	4649      	mov	r1, r9
 801d1e0:	f7e3 fcb4 	bl	8000b4c <__aeabi_dcmpun>
 801d1e4:	b140      	cbz	r0, 801d1f8 <_printf_float+0xf0>
 801d1e6:	464b      	mov	r3, r9
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	bfbc      	itt	lt
 801d1ec:	232d      	movlt	r3, #45	; 0x2d
 801d1ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d1f2:	487f      	ldr	r0, [pc, #508]	; (801d3f0 <_printf_float+0x2e8>)
 801d1f4:	4b7f      	ldr	r3, [pc, #508]	; (801d3f4 <_printf_float+0x2ec>)
 801d1f6:	e7d1      	b.n	801d19c <_printf_float+0x94>
 801d1f8:	6863      	ldr	r3, [r4, #4]
 801d1fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801d1fe:	9206      	str	r2, [sp, #24]
 801d200:	1c5a      	adds	r2, r3, #1
 801d202:	d13f      	bne.n	801d284 <_printf_float+0x17c>
 801d204:	2306      	movs	r3, #6
 801d206:	6063      	str	r3, [r4, #4]
 801d208:	9b05      	ldr	r3, [sp, #20]
 801d20a:	6861      	ldr	r1, [r4, #4]
 801d20c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801d210:	2300      	movs	r3, #0
 801d212:	9303      	str	r3, [sp, #12]
 801d214:	ab0a      	add	r3, sp, #40	; 0x28
 801d216:	e9cd b301 	strd	fp, r3, [sp, #4]
 801d21a:	ab09      	add	r3, sp, #36	; 0x24
 801d21c:	ec49 8b10 	vmov	d0, r8, r9
 801d220:	9300      	str	r3, [sp, #0]
 801d222:	6022      	str	r2, [r4, #0]
 801d224:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801d228:	4628      	mov	r0, r5
 801d22a:	f7ff fecd 	bl	801cfc8 <__cvt>
 801d22e:	9b06      	ldr	r3, [sp, #24]
 801d230:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d232:	2b47      	cmp	r3, #71	; 0x47
 801d234:	4680      	mov	r8, r0
 801d236:	d108      	bne.n	801d24a <_printf_float+0x142>
 801d238:	1cc8      	adds	r0, r1, #3
 801d23a:	db02      	blt.n	801d242 <_printf_float+0x13a>
 801d23c:	6863      	ldr	r3, [r4, #4]
 801d23e:	4299      	cmp	r1, r3
 801d240:	dd41      	ble.n	801d2c6 <_printf_float+0x1be>
 801d242:	f1ab 0b02 	sub.w	fp, fp, #2
 801d246:	fa5f fb8b 	uxtb.w	fp, fp
 801d24a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d24e:	d820      	bhi.n	801d292 <_printf_float+0x18a>
 801d250:	3901      	subs	r1, #1
 801d252:	465a      	mov	r2, fp
 801d254:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d258:	9109      	str	r1, [sp, #36]	; 0x24
 801d25a:	f7ff ff17 	bl	801d08c <__exponent>
 801d25e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d260:	1813      	adds	r3, r2, r0
 801d262:	2a01      	cmp	r2, #1
 801d264:	4681      	mov	r9, r0
 801d266:	6123      	str	r3, [r4, #16]
 801d268:	dc02      	bgt.n	801d270 <_printf_float+0x168>
 801d26a:	6822      	ldr	r2, [r4, #0]
 801d26c:	07d2      	lsls	r2, r2, #31
 801d26e:	d501      	bpl.n	801d274 <_printf_float+0x16c>
 801d270:	3301      	adds	r3, #1
 801d272:	6123      	str	r3, [r4, #16]
 801d274:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d09c      	beq.n	801d1b6 <_printf_float+0xae>
 801d27c:	232d      	movs	r3, #45	; 0x2d
 801d27e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d282:	e798      	b.n	801d1b6 <_printf_float+0xae>
 801d284:	9a06      	ldr	r2, [sp, #24]
 801d286:	2a47      	cmp	r2, #71	; 0x47
 801d288:	d1be      	bne.n	801d208 <_printf_float+0x100>
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d1bc      	bne.n	801d208 <_printf_float+0x100>
 801d28e:	2301      	movs	r3, #1
 801d290:	e7b9      	b.n	801d206 <_printf_float+0xfe>
 801d292:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801d296:	d118      	bne.n	801d2ca <_printf_float+0x1c2>
 801d298:	2900      	cmp	r1, #0
 801d29a:	6863      	ldr	r3, [r4, #4]
 801d29c:	dd0b      	ble.n	801d2b6 <_printf_float+0x1ae>
 801d29e:	6121      	str	r1, [r4, #16]
 801d2a0:	b913      	cbnz	r3, 801d2a8 <_printf_float+0x1a0>
 801d2a2:	6822      	ldr	r2, [r4, #0]
 801d2a4:	07d0      	lsls	r0, r2, #31
 801d2a6:	d502      	bpl.n	801d2ae <_printf_float+0x1a6>
 801d2a8:	3301      	adds	r3, #1
 801d2aa:	440b      	add	r3, r1
 801d2ac:	6123      	str	r3, [r4, #16]
 801d2ae:	65a1      	str	r1, [r4, #88]	; 0x58
 801d2b0:	f04f 0900 	mov.w	r9, #0
 801d2b4:	e7de      	b.n	801d274 <_printf_float+0x16c>
 801d2b6:	b913      	cbnz	r3, 801d2be <_printf_float+0x1b6>
 801d2b8:	6822      	ldr	r2, [r4, #0]
 801d2ba:	07d2      	lsls	r2, r2, #31
 801d2bc:	d501      	bpl.n	801d2c2 <_printf_float+0x1ba>
 801d2be:	3302      	adds	r3, #2
 801d2c0:	e7f4      	b.n	801d2ac <_printf_float+0x1a4>
 801d2c2:	2301      	movs	r3, #1
 801d2c4:	e7f2      	b.n	801d2ac <_printf_float+0x1a4>
 801d2c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801d2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2cc:	4299      	cmp	r1, r3
 801d2ce:	db05      	blt.n	801d2dc <_printf_float+0x1d4>
 801d2d0:	6823      	ldr	r3, [r4, #0]
 801d2d2:	6121      	str	r1, [r4, #16]
 801d2d4:	07d8      	lsls	r0, r3, #31
 801d2d6:	d5ea      	bpl.n	801d2ae <_printf_float+0x1a6>
 801d2d8:	1c4b      	adds	r3, r1, #1
 801d2da:	e7e7      	b.n	801d2ac <_printf_float+0x1a4>
 801d2dc:	2900      	cmp	r1, #0
 801d2de:	bfd4      	ite	le
 801d2e0:	f1c1 0202 	rsble	r2, r1, #2
 801d2e4:	2201      	movgt	r2, #1
 801d2e6:	4413      	add	r3, r2
 801d2e8:	e7e0      	b.n	801d2ac <_printf_float+0x1a4>
 801d2ea:	6823      	ldr	r3, [r4, #0]
 801d2ec:	055a      	lsls	r2, r3, #21
 801d2ee:	d407      	bmi.n	801d300 <_printf_float+0x1f8>
 801d2f0:	6923      	ldr	r3, [r4, #16]
 801d2f2:	4642      	mov	r2, r8
 801d2f4:	4631      	mov	r1, r6
 801d2f6:	4628      	mov	r0, r5
 801d2f8:	47b8      	blx	r7
 801d2fa:	3001      	adds	r0, #1
 801d2fc:	d12c      	bne.n	801d358 <_printf_float+0x250>
 801d2fe:	e764      	b.n	801d1ca <_printf_float+0xc2>
 801d300:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801d304:	f240 80e0 	bls.w	801d4c8 <_printf_float+0x3c0>
 801d308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d30c:	2200      	movs	r2, #0
 801d30e:	2300      	movs	r3, #0
 801d310:	f7e3 fbea 	bl	8000ae8 <__aeabi_dcmpeq>
 801d314:	2800      	cmp	r0, #0
 801d316:	d034      	beq.n	801d382 <_printf_float+0x27a>
 801d318:	4a37      	ldr	r2, [pc, #220]	; (801d3f8 <_printf_float+0x2f0>)
 801d31a:	2301      	movs	r3, #1
 801d31c:	4631      	mov	r1, r6
 801d31e:	4628      	mov	r0, r5
 801d320:	47b8      	blx	r7
 801d322:	3001      	adds	r0, #1
 801d324:	f43f af51 	beq.w	801d1ca <_printf_float+0xc2>
 801d328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d32c:	429a      	cmp	r2, r3
 801d32e:	db02      	blt.n	801d336 <_printf_float+0x22e>
 801d330:	6823      	ldr	r3, [r4, #0]
 801d332:	07d8      	lsls	r0, r3, #31
 801d334:	d510      	bpl.n	801d358 <_printf_float+0x250>
 801d336:	ee18 3a10 	vmov	r3, s16
 801d33a:	4652      	mov	r2, sl
 801d33c:	4631      	mov	r1, r6
 801d33e:	4628      	mov	r0, r5
 801d340:	47b8      	blx	r7
 801d342:	3001      	adds	r0, #1
 801d344:	f43f af41 	beq.w	801d1ca <_printf_float+0xc2>
 801d348:	f04f 0800 	mov.w	r8, #0
 801d34c:	f104 091a 	add.w	r9, r4, #26
 801d350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d352:	3b01      	subs	r3, #1
 801d354:	4543      	cmp	r3, r8
 801d356:	dc09      	bgt.n	801d36c <_printf_float+0x264>
 801d358:	6823      	ldr	r3, [r4, #0]
 801d35a:	079b      	lsls	r3, r3, #30
 801d35c:	f100 8105 	bmi.w	801d56a <_printf_float+0x462>
 801d360:	68e0      	ldr	r0, [r4, #12]
 801d362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d364:	4298      	cmp	r0, r3
 801d366:	bfb8      	it	lt
 801d368:	4618      	movlt	r0, r3
 801d36a:	e730      	b.n	801d1ce <_printf_float+0xc6>
 801d36c:	2301      	movs	r3, #1
 801d36e:	464a      	mov	r2, r9
 801d370:	4631      	mov	r1, r6
 801d372:	4628      	mov	r0, r5
 801d374:	47b8      	blx	r7
 801d376:	3001      	adds	r0, #1
 801d378:	f43f af27 	beq.w	801d1ca <_printf_float+0xc2>
 801d37c:	f108 0801 	add.w	r8, r8, #1
 801d380:	e7e6      	b.n	801d350 <_printf_float+0x248>
 801d382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d384:	2b00      	cmp	r3, #0
 801d386:	dc39      	bgt.n	801d3fc <_printf_float+0x2f4>
 801d388:	4a1b      	ldr	r2, [pc, #108]	; (801d3f8 <_printf_float+0x2f0>)
 801d38a:	2301      	movs	r3, #1
 801d38c:	4631      	mov	r1, r6
 801d38e:	4628      	mov	r0, r5
 801d390:	47b8      	blx	r7
 801d392:	3001      	adds	r0, #1
 801d394:	f43f af19 	beq.w	801d1ca <_printf_float+0xc2>
 801d398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d39c:	4313      	orrs	r3, r2
 801d39e:	d102      	bne.n	801d3a6 <_printf_float+0x29e>
 801d3a0:	6823      	ldr	r3, [r4, #0]
 801d3a2:	07d9      	lsls	r1, r3, #31
 801d3a4:	d5d8      	bpl.n	801d358 <_printf_float+0x250>
 801d3a6:	ee18 3a10 	vmov	r3, s16
 801d3aa:	4652      	mov	r2, sl
 801d3ac:	4631      	mov	r1, r6
 801d3ae:	4628      	mov	r0, r5
 801d3b0:	47b8      	blx	r7
 801d3b2:	3001      	adds	r0, #1
 801d3b4:	f43f af09 	beq.w	801d1ca <_printf_float+0xc2>
 801d3b8:	f04f 0900 	mov.w	r9, #0
 801d3bc:	f104 0a1a 	add.w	sl, r4, #26
 801d3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3c2:	425b      	negs	r3, r3
 801d3c4:	454b      	cmp	r3, r9
 801d3c6:	dc01      	bgt.n	801d3cc <_printf_float+0x2c4>
 801d3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3ca:	e792      	b.n	801d2f2 <_printf_float+0x1ea>
 801d3cc:	2301      	movs	r3, #1
 801d3ce:	4652      	mov	r2, sl
 801d3d0:	4631      	mov	r1, r6
 801d3d2:	4628      	mov	r0, r5
 801d3d4:	47b8      	blx	r7
 801d3d6:	3001      	adds	r0, #1
 801d3d8:	f43f aef7 	beq.w	801d1ca <_printf_float+0xc2>
 801d3dc:	f109 0901 	add.w	r9, r9, #1
 801d3e0:	e7ee      	b.n	801d3c0 <_printf_float+0x2b8>
 801d3e2:	bf00      	nop
 801d3e4:	7fefffff 	.word	0x7fefffff
 801d3e8:	08029628 	.word	0x08029628
 801d3ec:	0802962c 	.word	0x0802962c
 801d3f0:	08029634 	.word	0x08029634
 801d3f4:	08029630 	.word	0x08029630
 801d3f8:	08029638 	.word	0x08029638
 801d3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d400:	429a      	cmp	r2, r3
 801d402:	bfa8      	it	ge
 801d404:	461a      	movge	r2, r3
 801d406:	2a00      	cmp	r2, #0
 801d408:	4691      	mov	r9, r2
 801d40a:	dc37      	bgt.n	801d47c <_printf_float+0x374>
 801d40c:	f04f 0b00 	mov.w	fp, #0
 801d410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d414:	f104 021a 	add.w	r2, r4, #26
 801d418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801d41a:	9305      	str	r3, [sp, #20]
 801d41c:	eba3 0309 	sub.w	r3, r3, r9
 801d420:	455b      	cmp	r3, fp
 801d422:	dc33      	bgt.n	801d48c <_printf_float+0x384>
 801d424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d428:	429a      	cmp	r2, r3
 801d42a:	db3b      	blt.n	801d4a4 <_printf_float+0x39c>
 801d42c:	6823      	ldr	r3, [r4, #0]
 801d42e:	07da      	lsls	r2, r3, #31
 801d430:	d438      	bmi.n	801d4a4 <_printf_float+0x39c>
 801d432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d434:	9b05      	ldr	r3, [sp, #20]
 801d436:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d438:	1ad3      	subs	r3, r2, r3
 801d43a:	eba2 0901 	sub.w	r9, r2, r1
 801d43e:	4599      	cmp	r9, r3
 801d440:	bfa8      	it	ge
 801d442:	4699      	movge	r9, r3
 801d444:	f1b9 0f00 	cmp.w	r9, #0
 801d448:	dc35      	bgt.n	801d4b6 <_printf_float+0x3ae>
 801d44a:	f04f 0800 	mov.w	r8, #0
 801d44e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d452:	f104 0a1a 	add.w	sl, r4, #26
 801d456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d45a:	1a9b      	subs	r3, r3, r2
 801d45c:	eba3 0309 	sub.w	r3, r3, r9
 801d460:	4543      	cmp	r3, r8
 801d462:	f77f af79 	ble.w	801d358 <_printf_float+0x250>
 801d466:	2301      	movs	r3, #1
 801d468:	4652      	mov	r2, sl
 801d46a:	4631      	mov	r1, r6
 801d46c:	4628      	mov	r0, r5
 801d46e:	47b8      	blx	r7
 801d470:	3001      	adds	r0, #1
 801d472:	f43f aeaa 	beq.w	801d1ca <_printf_float+0xc2>
 801d476:	f108 0801 	add.w	r8, r8, #1
 801d47a:	e7ec      	b.n	801d456 <_printf_float+0x34e>
 801d47c:	4613      	mov	r3, r2
 801d47e:	4631      	mov	r1, r6
 801d480:	4642      	mov	r2, r8
 801d482:	4628      	mov	r0, r5
 801d484:	47b8      	blx	r7
 801d486:	3001      	adds	r0, #1
 801d488:	d1c0      	bne.n	801d40c <_printf_float+0x304>
 801d48a:	e69e      	b.n	801d1ca <_printf_float+0xc2>
 801d48c:	2301      	movs	r3, #1
 801d48e:	4631      	mov	r1, r6
 801d490:	4628      	mov	r0, r5
 801d492:	9205      	str	r2, [sp, #20]
 801d494:	47b8      	blx	r7
 801d496:	3001      	adds	r0, #1
 801d498:	f43f ae97 	beq.w	801d1ca <_printf_float+0xc2>
 801d49c:	9a05      	ldr	r2, [sp, #20]
 801d49e:	f10b 0b01 	add.w	fp, fp, #1
 801d4a2:	e7b9      	b.n	801d418 <_printf_float+0x310>
 801d4a4:	ee18 3a10 	vmov	r3, s16
 801d4a8:	4652      	mov	r2, sl
 801d4aa:	4631      	mov	r1, r6
 801d4ac:	4628      	mov	r0, r5
 801d4ae:	47b8      	blx	r7
 801d4b0:	3001      	adds	r0, #1
 801d4b2:	d1be      	bne.n	801d432 <_printf_float+0x32a>
 801d4b4:	e689      	b.n	801d1ca <_printf_float+0xc2>
 801d4b6:	9a05      	ldr	r2, [sp, #20]
 801d4b8:	464b      	mov	r3, r9
 801d4ba:	4442      	add	r2, r8
 801d4bc:	4631      	mov	r1, r6
 801d4be:	4628      	mov	r0, r5
 801d4c0:	47b8      	blx	r7
 801d4c2:	3001      	adds	r0, #1
 801d4c4:	d1c1      	bne.n	801d44a <_printf_float+0x342>
 801d4c6:	e680      	b.n	801d1ca <_printf_float+0xc2>
 801d4c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4ca:	2a01      	cmp	r2, #1
 801d4cc:	dc01      	bgt.n	801d4d2 <_printf_float+0x3ca>
 801d4ce:	07db      	lsls	r3, r3, #31
 801d4d0:	d538      	bpl.n	801d544 <_printf_float+0x43c>
 801d4d2:	2301      	movs	r3, #1
 801d4d4:	4642      	mov	r2, r8
 801d4d6:	4631      	mov	r1, r6
 801d4d8:	4628      	mov	r0, r5
 801d4da:	47b8      	blx	r7
 801d4dc:	3001      	adds	r0, #1
 801d4de:	f43f ae74 	beq.w	801d1ca <_printf_float+0xc2>
 801d4e2:	ee18 3a10 	vmov	r3, s16
 801d4e6:	4652      	mov	r2, sl
 801d4e8:	4631      	mov	r1, r6
 801d4ea:	4628      	mov	r0, r5
 801d4ec:	47b8      	blx	r7
 801d4ee:	3001      	adds	r0, #1
 801d4f0:	f43f ae6b 	beq.w	801d1ca <_printf_float+0xc2>
 801d4f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d4f8:	2200      	movs	r2, #0
 801d4fa:	2300      	movs	r3, #0
 801d4fc:	f7e3 faf4 	bl	8000ae8 <__aeabi_dcmpeq>
 801d500:	b9d8      	cbnz	r0, 801d53a <_printf_float+0x432>
 801d502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d504:	f108 0201 	add.w	r2, r8, #1
 801d508:	3b01      	subs	r3, #1
 801d50a:	4631      	mov	r1, r6
 801d50c:	4628      	mov	r0, r5
 801d50e:	47b8      	blx	r7
 801d510:	3001      	adds	r0, #1
 801d512:	d10e      	bne.n	801d532 <_printf_float+0x42a>
 801d514:	e659      	b.n	801d1ca <_printf_float+0xc2>
 801d516:	2301      	movs	r3, #1
 801d518:	4652      	mov	r2, sl
 801d51a:	4631      	mov	r1, r6
 801d51c:	4628      	mov	r0, r5
 801d51e:	47b8      	blx	r7
 801d520:	3001      	adds	r0, #1
 801d522:	f43f ae52 	beq.w	801d1ca <_printf_float+0xc2>
 801d526:	f108 0801 	add.w	r8, r8, #1
 801d52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d52c:	3b01      	subs	r3, #1
 801d52e:	4543      	cmp	r3, r8
 801d530:	dcf1      	bgt.n	801d516 <_printf_float+0x40e>
 801d532:	464b      	mov	r3, r9
 801d534:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d538:	e6dc      	b.n	801d2f4 <_printf_float+0x1ec>
 801d53a:	f04f 0800 	mov.w	r8, #0
 801d53e:	f104 0a1a 	add.w	sl, r4, #26
 801d542:	e7f2      	b.n	801d52a <_printf_float+0x422>
 801d544:	2301      	movs	r3, #1
 801d546:	4642      	mov	r2, r8
 801d548:	e7df      	b.n	801d50a <_printf_float+0x402>
 801d54a:	2301      	movs	r3, #1
 801d54c:	464a      	mov	r2, r9
 801d54e:	4631      	mov	r1, r6
 801d550:	4628      	mov	r0, r5
 801d552:	47b8      	blx	r7
 801d554:	3001      	adds	r0, #1
 801d556:	f43f ae38 	beq.w	801d1ca <_printf_float+0xc2>
 801d55a:	f108 0801 	add.w	r8, r8, #1
 801d55e:	68e3      	ldr	r3, [r4, #12]
 801d560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d562:	1a5b      	subs	r3, r3, r1
 801d564:	4543      	cmp	r3, r8
 801d566:	dcf0      	bgt.n	801d54a <_printf_float+0x442>
 801d568:	e6fa      	b.n	801d360 <_printf_float+0x258>
 801d56a:	f04f 0800 	mov.w	r8, #0
 801d56e:	f104 0919 	add.w	r9, r4, #25
 801d572:	e7f4      	b.n	801d55e <_printf_float+0x456>

0801d574 <_printf_common>:
 801d574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d578:	4616      	mov	r6, r2
 801d57a:	4699      	mov	r9, r3
 801d57c:	688a      	ldr	r2, [r1, #8]
 801d57e:	690b      	ldr	r3, [r1, #16]
 801d580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d584:	4293      	cmp	r3, r2
 801d586:	bfb8      	it	lt
 801d588:	4613      	movlt	r3, r2
 801d58a:	6033      	str	r3, [r6, #0]
 801d58c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d590:	4607      	mov	r7, r0
 801d592:	460c      	mov	r4, r1
 801d594:	b10a      	cbz	r2, 801d59a <_printf_common+0x26>
 801d596:	3301      	adds	r3, #1
 801d598:	6033      	str	r3, [r6, #0]
 801d59a:	6823      	ldr	r3, [r4, #0]
 801d59c:	0699      	lsls	r1, r3, #26
 801d59e:	bf42      	ittt	mi
 801d5a0:	6833      	ldrmi	r3, [r6, #0]
 801d5a2:	3302      	addmi	r3, #2
 801d5a4:	6033      	strmi	r3, [r6, #0]
 801d5a6:	6825      	ldr	r5, [r4, #0]
 801d5a8:	f015 0506 	ands.w	r5, r5, #6
 801d5ac:	d106      	bne.n	801d5bc <_printf_common+0x48>
 801d5ae:	f104 0a19 	add.w	sl, r4, #25
 801d5b2:	68e3      	ldr	r3, [r4, #12]
 801d5b4:	6832      	ldr	r2, [r6, #0]
 801d5b6:	1a9b      	subs	r3, r3, r2
 801d5b8:	42ab      	cmp	r3, r5
 801d5ba:	dc26      	bgt.n	801d60a <_printf_common+0x96>
 801d5bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d5c0:	1e13      	subs	r3, r2, #0
 801d5c2:	6822      	ldr	r2, [r4, #0]
 801d5c4:	bf18      	it	ne
 801d5c6:	2301      	movne	r3, #1
 801d5c8:	0692      	lsls	r2, r2, #26
 801d5ca:	d42b      	bmi.n	801d624 <_printf_common+0xb0>
 801d5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d5d0:	4649      	mov	r1, r9
 801d5d2:	4638      	mov	r0, r7
 801d5d4:	47c0      	blx	r8
 801d5d6:	3001      	adds	r0, #1
 801d5d8:	d01e      	beq.n	801d618 <_printf_common+0xa4>
 801d5da:	6823      	ldr	r3, [r4, #0]
 801d5dc:	68e5      	ldr	r5, [r4, #12]
 801d5de:	6832      	ldr	r2, [r6, #0]
 801d5e0:	f003 0306 	and.w	r3, r3, #6
 801d5e4:	2b04      	cmp	r3, #4
 801d5e6:	bf08      	it	eq
 801d5e8:	1aad      	subeq	r5, r5, r2
 801d5ea:	68a3      	ldr	r3, [r4, #8]
 801d5ec:	6922      	ldr	r2, [r4, #16]
 801d5ee:	bf0c      	ite	eq
 801d5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d5f4:	2500      	movne	r5, #0
 801d5f6:	4293      	cmp	r3, r2
 801d5f8:	bfc4      	itt	gt
 801d5fa:	1a9b      	subgt	r3, r3, r2
 801d5fc:	18ed      	addgt	r5, r5, r3
 801d5fe:	2600      	movs	r6, #0
 801d600:	341a      	adds	r4, #26
 801d602:	42b5      	cmp	r5, r6
 801d604:	d11a      	bne.n	801d63c <_printf_common+0xc8>
 801d606:	2000      	movs	r0, #0
 801d608:	e008      	b.n	801d61c <_printf_common+0xa8>
 801d60a:	2301      	movs	r3, #1
 801d60c:	4652      	mov	r2, sl
 801d60e:	4649      	mov	r1, r9
 801d610:	4638      	mov	r0, r7
 801d612:	47c0      	blx	r8
 801d614:	3001      	adds	r0, #1
 801d616:	d103      	bne.n	801d620 <_printf_common+0xac>
 801d618:	f04f 30ff 	mov.w	r0, #4294967295
 801d61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d620:	3501      	adds	r5, #1
 801d622:	e7c6      	b.n	801d5b2 <_printf_common+0x3e>
 801d624:	18e1      	adds	r1, r4, r3
 801d626:	1c5a      	adds	r2, r3, #1
 801d628:	2030      	movs	r0, #48	; 0x30
 801d62a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d62e:	4422      	add	r2, r4
 801d630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d638:	3302      	adds	r3, #2
 801d63a:	e7c7      	b.n	801d5cc <_printf_common+0x58>
 801d63c:	2301      	movs	r3, #1
 801d63e:	4622      	mov	r2, r4
 801d640:	4649      	mov	r1, r9
 801d642:	4638      	mov	r0, r7
 801d644:	47c0      	blx	r8
 801d646:	3001      	adds	r0, #1
 801d648:	d0e6      	beq.n	801d618 <_printf_common+0xa4>
 801d64a:	3601      	adds	r6, #1
 801d64c:	e7d9      	b.n	801d602 <_printf_common+0x8e>
	...

0801d650 <_printf_i>:
 801d650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d654:	460c      	mov	r4, r1
 801d656:	4691      	mov	r9, r2
 801d658:	7e27      	ldrb	r7, [r4, #24]
 801d65a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d65c:	2f78      	cmp	r7, #120	; 0x78
 801d65e:	4680      	mov	r8, r0
 801d660:	469a      	mov	sl, r3
 801d662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d666:	d807      	bhi.n	801d678 <_printf_i+0x28>
 801d668:	2f62      	cmp	r7, #98	; 0x62
 801d66a:	d80a      	bhi.n	801d682 <_printf_i+0x32>
 801d66c:	2f00      	cmp	r7, #0
 801d66e:	f000 80d8 	beq.w	801d822 <_printf_i+0x1d2>
 801d672:	2f58      	cmp	r7, #88	; 0x58
 801d674:	f000 80a3 	beq.w	801d7be <_printf_i+0x16e>
 801d678:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d67c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d680:	e03a      	b.n	801d6f8 <_printf_i+0xa8>
 801d682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d686:	2b15      	cmp	r3, #21
 801d688:	d8f6      	bhi.n	801d678 <_printf_i+0x28>
 801d68a:	a001      	add	r0, pc, #4	; (adr r0, 801d690 <_printf_i+0x40>)
 801d68c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d690:	0801d6e9 	.word	0x0801d6e9
 801d694:	0801d6fd 	.word	0x0801d6fd
 801d698:	0801d679 	.word	0x0801d679
 801d69c:	0801d679 	.word	0x0801d679
 801d6a0:	0801d679 	.word	0x0801d679
 801d6a4:	0801d679 	.word	0x0801d679
 801d6a8:	0801d6fd 	.word	0x0801d6fd
 801d6ac:	0801d679 	.word	0x0801d679
 801d6b0:	0801d679 	.word	0x0801d679
 801d6b4:	0801d679 	.word	0x0801d679
 801d6b8:	0801d679 	.word	0x0801d679
 801d6bc:	0801d809 	.word	0x0801d809
 801d6c0:	0801d72d 	.word	0x0801d72d
 801d6c4:	0801d7eb 	.word	0x0801d7eb
 801d6c8:	0801d679 	.word	0x0801d679
 801d6cc:	0801d679 	.word	0x0801d679
 801d6d0:	0801d82b 	.word	0x0801d82b
 801d6d4:	0801d679 	.word	0x0801d679
 801d6d8:	0801d72d 	.word	0x0801d72d
 801d6dc:	0801d679 	.word	0x0801d679
 801d6e0:	0801d679 	.word	0x0801d679
 801d6e4:	0801d7f3 	.word	0x0801d7f3
 801d6e8:	680b      	ldr	r3, [r1, #0]
 801d6ea:	1d1a      	adds	r2, r3, #4
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	600a      	str	r2, [r1, #0]
 801d6f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d6f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d6f8:	2301      	movs	r3, #1
 801d6fa:	e0a3      	b.n	801d844 <_printf_i+0x1f4>
 801d6fc:	6825      	ldr	r5, [r4, #0]
 801d6fe:	6808      	ldr	r0, [r1, #0]
 801d700:	062e      	lsls	r6, r5, #24
 801d702:	f100 0304 	add.w	r3, r0, #4
 801d706:	d50a      	bpl.n	801d71e <_printf_i+0xce>
 801d708:	6805      	ldr	r5, [r0, #0]
 801d70a:	600b      	str	r3, [r1, #0]
 801d70c:	2d00      	cmp	r5, #0
 801d70e:	da03      	bge.n	801d718 <_printf_i+0xc8>
 801d710:	232d      	movs	r3, #45	; 0x2d
 801d712:	426d      	negs	r5, r5
 801d714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d718:	485e      	ldr	r0, [pc, #376]	; (801d894 <_printf_i+0x244>)
 801d71a:	230a      	movs	r3, #10
 801d71c:	e019      	b.n	801d752 <_printf_i+0x102>
 801d71e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d722:	6805      	ldr	r5, [r0, #0]
 801d724:	600b      	str	r3, [r1, #0]
 801d726:	bf18      	it	ne
 801d728:	b22d      	sxthne	r5, r5
 801d72a:	e7ef      	b.n	801d70c <_printf_i+0xbc>
 801d72c:	680b      	ldr	r3, [r1, #0]
 801d72e:	6825      	ldr	r5, [r4, #0]
 801d730:	1d18      	adds	r0, r3, #4
 801d732:	6008      	str	r0, [r1, #0]
 801d734:	0628      	lsls	r0, r5, #24
 801d736:	d501      	bpl.n	801d73c <_printf_i+0xec>
 801d738:	681d      	ldr	r5, [r3, #0]
 801d73a:	e002      	b.n	801d742 <_printf_i+0xf2>
 801d73c:	0669      	lsls	r1, r5, #25
 801d73e:	d5fb      	bpl.n	801d738 <_printf_i+0xe8>
 801d740:	881d      	ldrh	r5, [r3, #0]
 801d742:	4854      	ldr	r0, [pc, #336]	; (801d894 <_printf_i+0x244>)
 801d744:	2f6f      	cmp	r7, #111	; 0x6f
 801d746:	bf0c      	ite	eq
 801d748:	2308      	moveq	r3, #8
 801d74a:	230a      	movne	r3, #10
 801d74c:	2100      	movs	r1, #0
 801d74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d752:	6866      	ldr	r6, [r4, #4]
 801d754:	60a6      	str	r6, [r4, #8]
 801d756:	2e00      	cmp	r6, #0
 801d758:	bfa2      	ittt	ge
 801d75a:	6821      	ldrge	r1, [r4, #0]
 801d75c:	f021 0104 	bicge.w	r1, r1, #4
 801d760:	6021      	strge	r1, [r4, #0]
 801d762:	b90d      	cbnz	r5, 801d768 <_printf_i+0x118>
 801d764:	2e00      	cmp	r6, #0
 801d766:	d04d      	beq.n	801d804 <_printf_i+0x1b4>
 801d768:	4616      	mov	r6, r2
 801d76a:	fbb5 f1f3 	udiv	r1, r5, r3
 801d76e:	fb03 5711 	mls	r7, r3, r1, r5
 801d772:	5dc7      	ldrb	r7, [r0, r7]
 801d774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d778:	462f      	mov	r7, r5
 801d77a:	42bb      	cmp	r3, r7
 801d77c:	460d      	mov	r5, r1
 801d77e:	d9f4      	bls.n	801d76a <_printf_i+0x11a>
 801d780:	2b08      	cmp	r3, #8
 801d782:	d10b      	bne.n	801d79c <_printf_i+0x14c>
 801d784:	6823      	ldr	r3, [r4, #0]
 801d786:	07df      	lsls	r7, r3, #31
 801d788:	d508      	bpl.n	801d79c <_printf_i+0x14c>
 801d78a:	6923      	ldr	r3, [r4, #16]
 801d78c:	6861      	ldr	r1, [r4, #4]
 801d78e:	4299      	cmp	r1, r3
 801d790:	bfde      	ittt	le
 801d792:	2330      	movle	r3, #48	; 0x30
 801d794:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d798:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d79c:	1b92      	subs	r2, r2, r6
 801d79e:	6122      	str	r2, [r4, #16]
 801d7a0:	f8cd a000 	str.w	sl, [sp]
 801d7a4:	464b      	mov	r3, r9
 801d7a6:	aa03      	add	r2, sp, #12
 801d7a8:	4621      	mov	r1, r4
 801d7aa:	4640      	mov	r0, r8
 801d7ac:	f7ff fee2 	bl	801d574 <_printf_common>
 801d7b0:	3001      	adds	r0, #1
 801d7b2:	d14c      	bne.n	801d84e <_printf_i+0x1fe>
 801d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d7b8:	b004      	add	sp, #16
 801d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7be:	4835      	ldr	r0, [pc, #212]	; (801d894 <_printf_i+0x244>)
 801d7c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d7c4:	6823      	ldr	r3, [r4, #0]
 801d7c6:	680e      	ldr	r6, [r1, #0]
 801d7c8:	061f      	lsls	r7, r3, #24
 801d7ca:	f856 5b04 	ldr.w	r5, [r6], #4
 801d7ce:	600e      	str	r6, [r1, #0]
 801d7d0:	d514      	bpl.n	801d7fc <_printf_i+0x1ac>
 801d7d2:	07d9      	lsls	r1, r3, #31
 801d7d4:	bf44      	itt	mi
 801d7d6:	f043 0320 	orrmi.w	r3, r3, #32
 801d7da:	6023      	strmi	r3, [r4, #0]
 801d7dc:	b91d      	cbnz	r5, 801d7e6 <_printf_i+0x196>
 801d7de:	6823      	ldr	r3, [r4, #0]
 801d7e0:	f023 0320 	bic.w	r3, r3, #32
 801d7e4:	6023      	str	r3, [r4, #0]
 801d7e6:	2310      	movs	r3, #16
 801d7e8:	e7b0      	b.n	801d74c <_printf_i+0xfc>
 801d7ea:	6823      	ldr	r3, [r4, #0]
 801d7ec:	f043 0320 	orr.w	r3, r3, #32
 801d7f0:	6023      	str	r3, [r4, #0]
 801d7f2:	2378      	movs	r3, #120	; 0x78
 801d7f4:	4828      	ldr	r0, [pc, #160]	; (801d898 <_printf_i+0x248>)
 801d7f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d7fa:	e7e3      	b.n	801d7c4 <_printf_i+0x174>
 801d7fc:	065e      	lsls	r6, r3, #25
 801d7fe:	bf48      	it	mi
 801d800:	b2ad      	uxthmi	r5, r5
 801d802:	e7e6      	b.n	801d7d2 <_printf_i+0x182>
 801d804:	4616      	mov	r6, r2
 801d806:	e7bb      	b.n	801d780 <_printf_i+0x130>
 801d808:	680b      	ldr	r3, [r1, #0]
 801d80a:	6826      	ldr	r6, [r4, #0]
 801d80c:	6960      	ldr	r0, [r4, #20]
 801d80e:	1d1d      	adds	r5, r3, #4
 801d810:	600d      	str	r5, [r1, #0]
 801d812:	0635      	lsls	r5, r6, #24
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	d501      	bpl.n	801d81c <_printf_i+0x1cc>
 801d818:	6018      	str	r0, [r3, #0]
 801d81a:	e002      	b.n	801d822 <_printf_i+0x1d2>
 801d81c:	0671      	lsls	r1, r6, #25
 801d81e:	d5fb      	bpl.n	801d818 <_printf_i+0x1c8>
 801d820:	8018      	strh	r0, [r3, #0]
 801d822:	2300      	movs	r3, #0
 801d824:	6123      	str	r3, [r4, #16]
 801d826:	4616      	mov	r6, r2
 801d828:	e7ba      	b.n	801d7a0 <_printf_i+0x150>
 801d82a:	680b      	ldr	r3, [r1, #0]
 801d82c:	1d1a      	adds	r2, r3, #4
 801d82e:	600a      	str	r2, [r1, #0]
 801d830:	681e      	ldr	r6, [r3, #0]
 801d832:	6862      	ldr	r2, [r4, #4]
 801d834:	2100      	movs	r1, #0
 801d836:	4630      	mov	r0, r6
 801d838:	f7e2 fce2 	bl	8000200 <memchr>
 801d83c:	b108      	cbz	r0, 801d842 <_printf_i+0x1f2>
 801d83e:	1b80      	subs	r0, r0, r6
 801d840:	6060      	str	r0, [r4, #4]
 801d842:	6863      	ldr	r3, [r4, #4]
 801d844:	6123      	str	r3, [r4, #16]
 801d846:	2300      	movs	r3, #0
 801d848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d84c:	e7a8      	b.n	801d7a0 <_printf_i+0x150>
 801d84e:	6923      	ldr	r3, [r4, #16]
 801d850:	4632      	mov	r2, r6
 801d852:	4649      	mov	r1, r9
 801d854:	4640      	mov	r0, r8
 801d856:	47d0      	blx	sl
 801d858:	3001      	adds	r0, #1
 801d85a:	d0ab      	beq.n	801d7b4 <_printf_i+0x164>
 801d85c:	6823      	ldr	r3, [r4, #0]
 801d85e:	079b      	lsls	r3, r3, #30
 801d860:	d413      	bmi.n	801d88a <_printf_i+0x23a>
 801d862:	68e0      	ldr	r0, [r4, #12]
 801d864:	9b03      	ldr	r3, [sp, #12]
 801d866:	4298      	cmp	r0, r3
 801d868:	bfb8      	it	lt
 801d86a:	4618      	movlt	r0, r3
 801d86c:	e7a4      	b.n	801d7b8 <_printf_i+0x168>
 801d86e:	2301      	movs	r3, #1
 801d870:	4632      	mov	r2, r6
 801d872:	4649      	mov	r1, r9
 801d874:	4640      	mov	r0, r8
 801d876:	47d0      	blx	sl
 801d878:	3001      	adds	r0, #1
 801d87a:	d09b      	beq.n	801d7b4 <_printf_i+0x164>
 801d87c:	3501      	adds	r5, #1
 801d87e:	68e3      	ldr	r3, [r4, #12]
 801d880:	9903      	ldr	r1, [sp, #12]
 801d882:	1a5b      	subs	r3, r3, r1
 801d884:	42ab      	cmp	r3, r5
 801d886:	dcf2      	bgt.n	801d86e <_printf_i+0x21e>
 801d888:	e7eb      	b.n	801d862 <_printf_i+0x212>
 801d88a:	2500      	movs	r5, #0
 801d88c:	f104 0619 	add.w	r6, r4, #25
 801d890:	e7f5      	b.n	801d87e <_printf_i+0x22e>
 801d892:	bf00      	nop
 801d894:	0802963a 	.word	0x0802963a
 801d898:	0802964b 	.word	0x0802964b

0801d89c <_scanf_float>:
 801d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a0:	b087      	sub	sp, #28
 801d8a2:	4617      	mov	r7, r2
 801d8a4:	9303      	str	r3, [sp, #12]
 801d8a6:	688b      	ldr	r3, [r1, #8]
 801d8a8:	1e5a      	subs	r2, r3, #1
 801d8aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d8ae:	bf83      	ittte	hi
 801d8b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d8b4:	195b      	addhi	r3, r3, r5
 801d8b6:	9302      	strhi	r3, [sp, #8]
 801d8b8:	2300      	movls	r3, #0
 801d8ba:	bf86      	itte	hi
 801d8bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d8c0:	608b      	strhi	r3, [r1, #8]
 801d8c2:	9302      	strls	r3, [sp, #8]
 801d8c4:	680b      	ldr	r3, [r1, #0]
 801d8c6:	468b      	mov	fp, r1
 801d8c8:	2500      	movs	r5, #0
 801d8ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d8ce:	f84b 3b1c 	str.w	r3, [fp], #28
 801d8d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d8d6:	4680      	mov	r8, r0
 801d8d8:	460c      	mov	r4, r1
 801d8da:	465e      	mov	r6, fp
 801d8dc:	46aa      	mov	sl, r5
 801d8de:	46a9      	mov	r9, r5
 801d8e0:	9501      	str	r5, [sp, #4]
 801d8e2:	68a2      	ldr	r2, [r4, #8]
 801d8e4:	b152      	cbz	r2, 801d8fc <_scanf_float+0x60>
 801d8e6:	683b      	ldr	r3, [r7, #0]
 801d8e8:	781b      	ldrb	r3, [r3, #0]
 801d8ea:	2b4e      	cmp	r3, #78	; 0x4e
 801d8ec:	d864      	bhi.n	801d9b8 <_scanf_float+0x11c>
 801d8ee:	2b40      	cmp	r3, #64	; 0x40
 801d8f0:	d83c      	bhi.n	801d96c <_scanf_float+0xd0>
 801d8f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d8f6:	b2c8      	uxtb	r0, r1
 801d8f8:	280e      	cmp	r0, #14
 801d8fa:	d93a      	bls.n	801d972 <_scanf_float+0xd6>
 801d8fc:	f1b9 0f00 	cmp.w	r9, #0
 801d900:	d003      	beq.n	801d90a <_scanf_float+0x6e>
 801d902:	6823      	ldr	r3, [r4, #0]
 801d904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d908:	6023      	str	r3, [r4, #0]
 801d90a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d90e:	f1ba 0f01 	cmp.w	sl, #1
 801d912:	f200 8113 	bhi.w	801db3c <_scanf_float+0x2a0>
 801d916:	455e      	cmp	r6, fp
 801d918:	f200 8105 	bhi.w	801db26 <_scanf_float+0x28a>
 801d91c:	2501      	movs	r5, #1
 801d91e:	4628      	mov	r0, r5
 801d920:	b007      	add	sp, #28
 801d922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d926:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d92a:	2a0d      	cmp	r2, #13
 801d92c:	d8e6      	bhi.n	801d8fc <_scanf_float+0x60>
 801d92e:	a101      	add	r1, pc, #4	; (adr r1, 801d934 <_scanf_float+0x98>)
 801d930:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d934:	0801da73 	.word	0x0801da73
 801d938:	0801d8fd 	.word	0x0801d8fd
 801d93c:	0801d8fd 	.word	0x0801d8fd
 801d940:	0801d8fd 	.word	0x0801d8fd
 801d944:	0801dad3 	.word	0x0801dad3
 801d948:	0801daab 	.word	0x0801daab
 801d94c:	0801d8fd 	.word	0x0801d8fd
 801d950:	0801d8fd 	.word	0x0801d8fd
 801d954:	0801da81 	.word	0x0801da81
 801d958:	0801d8fd 	.word	0x0801d8fd
 801d95c:	0801d8fd 	.word	0x0801d8fd
 801d960:	0801d8fd 	.word	0x0801d8fd
 801d964:	0801d8fd 	.word	0x0801d8fd
 801d968:	0801da39 	.word	0x0801da39
 801d96c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801d970:	e7db      	b.n	801d92a <_scanf_float+0x8e>
 801d972:	290e      	cmp	r1, #14
 801d974:	d8c2      	bhi.n	801d8fc <_scanf_float+0x60>
 801d976:	a001      	add	r0, pc, #4	; (adr r0, 801d97c <_scanf_float+0xe0>)
 801d978:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d97c:	0801da2b 	.word	0x0801da2b
 801d980:	0801d8fd 	.word	0x0801d8fd
 801d984:	0801da2b 	.word	0x0801da2b
 801d988:	0801dabf 	.word	0x0801dabf
 801d98c:	0801d8fd 	.word	0x0801d8fd
 801d990:	0801d9d9 	.word	0x0801d9d9
 801d994:	0801da15 	.word	0x0801da15
 801d998:	0801da15 	.word	0x0801da15
 801d99c:	0801da15 	.word	0x0801da15
 801d9a0:	0801da15 	.word	0x0801da15
 801d9a4:	0801da15 	.word	0x0801da15
 801d9a8:	0801da15 	.word	0x0801da15
 801d9ac:	0801da15 	.word	0x0801da15
 801d9b0:	0801da15 	.word	0x0801da15
 801d9b4:	0801da15 	.word	0x0801da15
 801d9b8:	2b6e      	cmp	r3, #110	; 0x6e
 801d9ba:	d809      	bhi.n	801d9d0 <_scanf_float+0x134>
 801d9bc:	2b60      	cmp	r3, #96	; 0x60
 801d9be:	d8b2      	bhi.n	801d926 <_scanf_float+0x8a>
 801d9c0:	2b54      	cmp	r3, #84	; 0x54
 801d9c2:	d077      	beq.n	801dab4 <_scanf_float+0x218>
 801d9c4:	2b59      	cmp	r3, #89	; 0x59
 801d9c6:	d199      	bne.n	801d8fc <_scanf_float+0x60>
 801d9c8:	2d07      	cmp	r5, #7
 801d9ca:	d197      	bne.n	801d8fc <_scanf_float+0x60>
 801d9cc:	2508      	movs	r5, #8
 801d9ce:	e029      	b.n	801da24 <_scanf_float+0x188>
 801d9d0:	2b74      	cmp	r3, #116	; 0x74
 801d9d2:	d06f      	beq.n	801dab4 <_scanf_float+0x218>
 801d9d4:	2b79      	cmp	r3, #121	; 0x79
 801d9d6:	e7f6      	b.n	801d9c6 <_scanf_float+0x12a>
 801d9d8:	6821      	ldr	r1, [r4, #0]
 801d9da:	05c8      	lsls	r0, r1, #23
 801d9dc:	d51a      	bpl.n	801da14 <_scanf_float+0x178>
 801d9de:	9b02      	ldr	r3, [sp, #8]
 801d9e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801d9e4:	6021      	str	r1, [r4, #0]
 801d9e6:	f109 0901 	add.w	r9, r9, #1
 801d9ea:	b11b      	cbz	r3, 801d9f4 <_scanf_float+0x158>
 801d9ec:	3b01      	subs	r3, #1
 801d9ee:	3201      	adds	r2, #1
 801d9f0:	9302      	str	r3, [sp, #8]
 801d9f2:	60a2      	str	r2, [r4, #8]
 801d9f4:	68a3      	ldr	r3, [r4, #8]
 801d9f6:	3b01      	subs	r3, #1
 801d9f8:	60a3      	str	r3, [r4, #8]
 801d9fa:	6923      	ldr	r3, [r4, #16]
 801d9fc:	3301      	adds	r3, #1
 801d9fe:	6123      	str	r3, [r4, #16]
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	3b01      	subs	r3, #1
 801da04:	2b00      	cmp	r3, #0
 801da06:	607b      	str	r3, [r7, #4]
 801da08:	f340 8084 	ble.w	801db14 <_scanf_float+0x278>
 801da0c:	683b      	ldr	r3, [r7, #0]
 801da0e:	3301      	adds	r3, #1
 801da10:	603b      	str	r3, [r7, #0]
 801da12:	e766      	b.n	801d8e2 <_scanf_float+0x46>
 801da14:	eb1a 0f05 	cmn.w	sl, r5
 801da18:	f47f af70 	bne.w	801d8fc <_scanf_float+0x60>
 801da1c:	6822      	ldr	r2, [r4, #0]
 801da1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801da22:	6022      	str	r2, [r4, #0]
 801da24:	f806 3b01 	strb.w	r3, [r6], #1
 801da28:	e7e4      	b.n	801d9f4 <_scanf_float+0x158>
 801da2a:	6822      	ldr	r2, [r4, #0]
 801da2c:	0610      	lsls	r0, r2, #24
 801da2e:	f57f af65 	bpl.w	801d8fc <_scanf_float+0x60>
 801da32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801da36:	e7f4      	b.n	801da22 <_scanf_float+0x186>
 801da38:	f1ba 0f00 	cmp.w	sl, #0
 801da3c:	d10e      	bne.n	801da5c <_scanf_float+0x1c0>
 801da3e:	f1b9 0f00 	cmp.w	r9, #0
 801da42:	d10e      	bne.n	801da62 <_scanf_float+0x1c6>
 801da44:	6822      	ldr	r2, [r4, #0]
 801da46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801da4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801da4e:	d108      	bne.n	801da62 <_scanf_float+0x1c6>
 801da50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801da54:	6022      	str	r2, [r4, #0]
 801da56:	f04f 0a01 	mov.w	sl, #1
 801da5a:	e7e3      	b.n	801da24 <_scanf_float+0x188>
 801da5c:	f1ba 0f02 	cmp.w	sl, #2
 801da60:	d055      	beq.n	801db0e <_scanf_float+0x272>
 801da62:	2d01      	cmp	r5, #1
 801da64:	d002      	beq.n	801da6c <_scanf_float+0x1d0>
 801da66:	2d04      	cmp	r5, #4
 801da68:	f47f af48 	bne.w	801d8fc <_scanf_float+0x60>
 801da6c:	3501      	adds	r5, #1
 801da6e:	b2ed      	uxtb	r5, r5
 801da70:	e7d8      	b.n	801da24 <_scanf_float+0x188>
 801da72:	f1ba 0f01 	cmp.w	sl, #1
 801da76:	f47f af41 	bne.w	801d8fc <_scanf_float+0x60>
 801da7a:	f04f 0a02 	mov.w	sl, #2
 801da7e:	e7d1      	b.n	801da24 <_scanf_float+0x188>
 801da80:	b97d      	cbnz	r5, 801daa2 <_scanf_float+0x206>
 801da82:	f1b9 0f00 	cmp.w	r9, #0
 801da86:	f47f af3c 	bne.w	801d902 <_scanf_float+0x66>
 801da8a:	6822      	ldr	r2, [r4, #0]
 801da8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801da90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801da94:	f47f af39 	bne.w	801d90a <_scanf_float+0x6e>
 801da98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801da9c:	6022      	str	r2, [r4, #0]
 801da9e:	2501      	movs	r5, #1
 801daa0:	e7c0      	b.n	801da24 <_scanf_float+0x188>
 801daa2:	2d03      	cmp	r5, #3
 801daa4:	d0e2      	beq.n	801da6c <_scanf_float+0x1d0>
 801daa6:	2d05      	cmp	r5, #5
 801daa8:	e7de      	b.n	801da68 <_scanf_float+0x1cc>
 801daaa:	2d02      	cmp	r5, #2
 801daac:	f47f af26 	bne.w	801d8fc <_scanf_float+0x60>
 801dab0:	2503      	movs	r5, #3
 801dab2:	e7b7      	b.n	801da24 <_scanf_float+0x188>
 801dab4:	2d06      	cmp	r5, #6
 801dab6:	f47f af21 	bne.w	801d8fc <_scanf_float+0x60>
 801daba:	2507      	movs	r5, #7
 801dabc:	e7b2      	b.n	801da24 <_scanf_float+0x188>
 801dabe:	6822      	ldr	r2, [r4, #0]
 801dac0:	0591      	lsls	r1, r2, #22
 801dac2:	f57f af1b 	bpl.w	801d8fc <_scanf_float+0x60>
 801dac6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801daca:	6022      	str	r2, [r4, #0]
 801dacc:	f8cd 9004 	str.w	r9, [sp, #4]
 801dad0:	e7a8      	b.n	801da24 <_scanf_float+0x188>
 801dad2:	6822      	ldr	r2, [r4, #0]
 801dad4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801dad8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801dadc:	d006      	beq.n	801daec <_scanf_float+0x250>
 801dade:	0550      	lsls	r0, r2, #21
 801dae0:	f57f af0c 	bpl.w	801d8fc <_scanf_float+0x60>
 801dae4:	f1b9 0f00 	cmp.w	r9, #0
 801dae8:	f43f af0f 	beq.w	801d90a <_scanf_float+0x6e>
 801daec:	0591      	lsls	r1, r2, #22
 801daee:	bf58      	it	pl
 801daf0:	9901      	ldrpl	r1, [sp, #4]
 801daf2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801daf6:	bf58      	it	pl
 801daf8:	eba9 0101 	subpl.w	r1, r9, r1
 801dafc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801db00:	bf58      	it	pl
 801db02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801db06:	6022      	str	r2, [r4, #0]
 801db08:	f04f 0900 	mov.w	r9, #0
 801db0c:	e78a      	b.n	801da24 <_scanf_float+0x188>
 801db0e:	f04f 0a03 	mov.w	sl, #3
 801db12:	e787      	b.n	801da24 <_scanf_float+0x188>
 801db14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801db18:	4639      	mov	r1, r7
 801db1a:	4640      	mov	r0, r8
 801db1c:	4798      	blx	r3
 801db1e:	2800      	cmp	r0, #0
 801db20:	f43f aedf 	beq.w	801d8e2 <_scanf_float+0x46>
 801db24:	e6ea      	b.n	801d8fc <_scanf_float+0x60>
 801db26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801db2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801db2e:	463a      	mov	r2, r7
 801db30:	4640      	mov	r0, r8
 801db32:	4798      	blx	r3
 801db34:	6923      	ldr	r3, [r4, #16]
 801db36:	3b01      	subs	r3, #1
 801db38:	6123      	str	r3, [r4, #16]
 801db3a:	e6ec      	b.n	801d916 <_scanf_float+0x7a>
 801db3c:	1e6b      	subs	r3, r5, #1
 801db3e:	2b06      	cmp	r3, #6
 801db40:	d825      	bhi.n	801db8e <_scanf_float+0x2f2>
 801db42:	2d02      	cmp	r5, #2
 801db44:	d836      	bhi.n	801dbb4 <_scanf_float+0x318>
 801db46:	455e      	cmp	r6, fp
 801db48:	f67f aee8 	bls.w	801d91c <_scanf_float+0x80>
 801db4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801db50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801db54:	463a      	mov	r2, r7
 801db56:	4640      	mov	r0, r8
 801db58:	4798      	blx	r3
 801db5a:	6923      	ldr	r3, [r4, #16]
 801db5c:	3b01      	subs	r3, #1
 801db5e:	6123      	str	r3, [r4, #16]
 801db60:	e7f1      	b.n	801db46 <_scanf_float+0x2aa>
 801db62:	9802      	ldr	r0, [sp, #8]
 801db64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801db68:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801db6c:	9002      	str	r0, [sp, #8]
 801db6e:	463a      	mov	r2, r7
 801db70:	4640      	mov	r0, r8
 801db72:	4798      	blx	r3
 801db74:	6923      	ldr	r3, [r4, #16]
 801db76:	3b01      	subs	r3, #1
 801db78:	6123      	str	r3, [r4, #16]
 801db7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801db7e:	fa5f fa8a 	uxtb.w	sl, sl
 801db82:	f1ba 0f02 	cmp.w	sl, #2
 801db86:	d1ec      	bne.n	801db62 <_scanf_float+0x2c6>
 801db88:	3d03      	subs	r5, #3
 801db8a:	b2ed      	uxtb	r5, r5
 801db8c:	1b76      	subs	r6, r6, r5
 801db8e:	6823      	ldr	r3, [r4, #0]
 801db90:	05da      	lsls	r2, r3, #23
 801db92:	d52f      	bpl.n	801dbf4 <_scanf_float+0x358>
 801db94:	055b      	lsls	r3, r3, #21
 801db96:	d510      	bpl.n	801dbba <_scanf_float+0x31e>
 801db98:	455e      	cmp	r6, fp
 801db9a:	f67f aebf 	bls.w	801d91c <_scanf_float+0x80>
 801db9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dba6:	463a      	mov	r2, r7
 801dba8:	4640      	mov	r0, r8
 801dbaa:	4798      	blx	r3
 801dbac:	6923      	ldr	r3, [r4, #16]
 801dbae:	3b01      	subs	r3, #1
 801dbb0:	6123      	str	r3, [r4, #16]
 801dbb2:	e7f1      	b.n	801db98 <_scanf_float+0x2fc>
 801dbb4:	46aa      	mov	sl, r5
 801dbb6:	9602      	str	r6, [sp, #8]
 801dbb8:	e7df      	b.n	801db7a <_scanf_float+0x2de>
 801dbba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dbbe:	6923      	ldr	r3, [r4, #16]
 801dbc0:	2965      	cmp	r1, #101	; 0x65
 801dbc2:	f103 33ff 	add.w	r3, r3, #4294967295
 801dbc6:	f106 35ff 	add.w	r5, r6, #4294967295
 801dbca:	6123      	str	r3, [r4, #16]
 801dbcc:	d00c      	beq.n	801dbe8 <_scanf_float+0x34c>
 801dbce:	2945      	cmp	r1, #69	; 0x45
 801dbd0:	d00a      	beq.n	801dbe8 <_scanf_float+0x34c>
 801dbd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dbd6:	463a      	mov	r2, r7
 801dbd8:	4640      	mov	r0, r8
 801dbda:	4798      	blx	r3
 801dbdc:	6923      	ldr	r3, [r4, #16]
 801dbde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dbe2:	3b01      	subs	r3, #1
 801dbe4:	1eb5      	subs	r5, r6, #2
 801dbe6:	6123      	str	r3, [r4, #16]
 801dbe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dbec:	463a      	mov	r2, r7
 801dbee:	4640      	mov	r0, r8
 801dbf0:	4798      	blx	r3
 801dbf2:	462e      	mov	r6, r5
 801dbf4:	6825      	ldr	r5, [r4, #0]
 801dbf6:	f015 0510 	ands.w	r5, r5, #16
 801dbfa:	d158      	bne.n	801dcae <_scanf_float+0x412>
 801dbfc:	7035      	strb	r5, [r6, #0]
 801dbfe:	6823      	ldr	r3, [r4, #0]
 801dc00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801dc04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc08:	d11c      	bne.n	801dc44 <_scanf_float+0x3a8>
 801dc0a:	9b01      	ldr	r3, [sp, #4]
 801dc0c:	454b      	cmp	r3, r9
 801dc0e:	eba3 0209 	sub.w	r2, r3, r9
 801dc12:	d124      	bne.n	801dc5e <_scanf_float+0x3c2>
 801dc14:	2200      	movs	r2, #0
 801dc16:	4659      	mov	r1, fp
 801dc18:	4640      	mov	r0, r8
 801dc1a:	f000 feaf 	bl	801e97c <_strtod_r>
 801dc1e:	9b03      	ldr	r3, [sp, #12]
 801dc20:	6821      	ldr	r1, [r4, #0]
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	f011 0f02 	tst.w	r1, #2
 801dc28:	ec57 6b10 	vmov	r6, r7, d0
 801dc2c:	f103 0204 	add.w	r2, r3, #4
 801dc30:	d020      	beq.n	801dc74 <_scanf_float+0x3d8>
 801dc32:	9903      	ldr	r1, [sp, #12]
 801dc34:	600a      	str	r2, [r1, #0]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	e9c3 6700 	strd	r6, r7, [r3]
 801dc3c:	68e3      	ldr	r3, [r4, #12]
 801dc3e:	3301      	adds	r3, #1
 801dc40:	60e3      	str	r3, [r4, #12]
 801dc42:	e66c      	b.n	801d91e <_scanf_float+0x82>
 801dc44:	9b04      	ldr	r3, [sp, #16]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d0e4      	beq.n	801dc14 <_scanf_float+0x378>
 801dc4a:	9905      	ldr	r1, [sp, #20]
 801dc4c:	230a      	movs	r3, #10
 801dc4e:	462a      	mov	r2, r5
 801dc50:	3101      	adds	r1, #1
 801dc52:	4640      	mov	r0, r8
 801dc54:	f000 ff1c 	bl	801ea90 <_strtol_r>
 801dc58:	9b04      	ldr	r3, [sp, #16]
 801dc5a:	9e05      	ldr	r6, [sp, #20]
 801dc5c:	1ac2      	subs	r2, r0, r3
 801dc5e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801dc62:	429e      	cmp	r6, r3
 801dc64:	bf28      	it	cs
 801dc66:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801dc6a:	4912      	ldr	r1, [pc, #72]	; (801dcb4 <_scanf_float+0x418>)
 801dc6c:	4630      	mov	r0, r6
 801dc6e:	f000 f82b 	bl	801dcc8 <siprintf>
 801dc72:	e7cf      	b.n	801dc14 <_scanf_float+0x378>
 801dc74:	f011 0f04 	tst.w	r1, #4
 801dc78:	9903      	ldr	r1, [sp, #12]
 801dc7a:	600a      	str	r2, [r1, #0]
 801dc7c:	d1db      	bne.n	801dc36 <_scanf_float+0x39a>
 801dc7e:	f8d3 8000 	ldr.w	r8, [r3]
 801dc82:	ee10 2a10 	vmov	r2, s0
 801dc86:	ee10 0a10 	vmov	r0, s0
 801dc8a:	463b      	mov	r3, r7
 801dc8c:	4639      	mov	r1, r7
 801dc8e:	f7e2 ff5d 	bl	8000b4c <__aeabi_dcmpun>
 801dc92:	b128      	cbz	r0, 801dca0 <_scanf_float+0x404>
 801dc94:	4808      	ldr	r0, [pc, #32]	; (801dcb8 <_scanf_float+0x41c>)
 801dc96:	f000 f811 	bl	801dcbc <nanf>
 801dc9a:	ed88 0a00 	vstr	s0, [r8]
 801dc9e:	e7cd      	b.n	801dc3c <_scanf_float+0x3a0>
 801dca0:	4630      	mov	r0, r6
 801dca2:	4639      	mov	r1, r7
 801dca4:	f7e2 ffb0 	bl	8000c08 <__aeabi_d2f>
 801dca8:	f8c8 0000 	str.w	r0, [r8]
 801dcac:	e7c6      	b.n	801dc3c <_scanf_float+0x3a0>
 801dcae:	2500      	movs	r5, #0
 801dcb0:	e635      	b.n	801d91e <_scanf_float+0x82>
 801dcb2:	bf00      	nop
 801dcb4:	0802965c 	.word	0x0802965c
 801dcb8:	08029ad8 	.word	0x08029ad8

0801dcbc <nanf>:
 801dcbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801dcc4 <nanf+0x8>
 801dcc0:	4770      	bx	lr
 801dcc2:	bf00      	nop
 801dcc4:	7fc00000 	.word	0x7fc00000

0801dcc8 <siprintf>:
 801dcc8:	b40e      	push	{r1, r2, r3}
 801dcca:	b500      	push	{lr}
 801dccc:	b09c      	sub	sp, #112	; 0x70
 801dcce:	ab1d      	add	r3, sp, #116	; 0x74
 801dcd0:	9002      	str	r0, [sp, #8]
 801dcd2:	9006      	str	r0, [sp, #24]
 801dcd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dcd8:	4809      	ldr	r0, [pc, #36]	; (801dd00 <siprintf+0x38>)
 801dcda:	9107      	str	r1, [sp, #28]
 801dcdc:	9104      	str	r1, [sp, #16]
 801dcde:	4909      	ldr	r1, [pc, #36]	; (801dd04 <siprintf+0x3c>)
 801dce0:	f853 2b04 	ldr.w	r2, [r3], #4
 801dce4:	9105      	str	r1, [sp, #20]
 801dce6:	6800      	ldr	r0, [r0, #0]
 801dce8:	9301      	str	r3, [sp, #4]
 801dcea:	a902      	add	r1, sp, #8
 801dcec:	f002 ffb0 	bl	8020c50 <_svfiprintf_r>
 801dcf0:	9b02      	ldr	r3, [sp, #8]
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	701a      	strb	r2, [r3, #0]
 801dcf6:	b01c      	add	sp, #112	; 0x70
 801dcf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801dcfc:	b003      	add	sp, #12
 801dcfe:	4770      	bx	lr
 801dd00:	20000624 	.word	0x20000624
 801dd04:	ffff0208 	.word	0xffff0208

0801dd08 <strncpy>:
 801dd08:	b510      	push	{r4, lr}
 801dd0a:	3901      	subs	r1, #1
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	b132      	cbz	r2, 801dd1e <strncpy+0x16>
 801dd10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dd14:	f803 4b01 	strb.w	r4, [r3], #1
 801dd18:	3a01      	subs	r2, #1
 801dd1a:	2c00      	cmp	r4, #0
 801dd1c:	d1f7      	bne.n	801dd0e <strncpy+0x6>
 801dd1e:	441a      	add	r2, r3
 801dd20:	2100      	movs	r1, #0
 801dd22:	4293      	cmp	r3, r2
 801dd24:	d100      	bne.n	801dd28 <strncpy+0x20>
 801dd26:	bd10      	pop	{r4, pc}
 801dd28:	f803 1b01 	strb.w	r1, [r3], #1
 801dd2c:	e7f9      	b.n	801dd22 <strncpy+0x1a>

0801dd2e <sulp>:
 801dd2e:	b570      	push	{r4, r5, r6, lr}
 801dd30:	4604      	mov	r4, r0
 801dd32:	460d      	mov	r5, r1
 801dd34:	ec45 4b10 	vmov	d0, r4, r5
 801dd38:	4616      	mov	r6, r2
 801dd3a:	f002 fd25 	bl	8020788 <__ulp>
 801dd3e:	ec51 0b10 	vmov	r0, r1, d0
 801dd42:	b17e      	cbz	r6, 801dd64 <sulp+0x36>
 801dd44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801dd48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	dd09      	ble.n	801dd64 <sulp+0x36>
 801dd50:	051b      	lsls	r3, r3, #20
 801dd52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801dd56:	2400      	movs	r4, #0
 801dd58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801dd5c:	4622      	mov	r2, r4
 801dd5e:	462b      	mov	r3, r5
 801dd60:	f7e2 fc5a 	bl	8000618 <__aeabi_dmul>
 801dd64:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dd68 <_strtod_l>:
 801dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd6c:	b0a3      	sub	sp, #140	; 0x8c
 801dd6e:	461f      	mov	r7, r3
 801dd70:	2300      	movs	r3, #0
 801dd72:	931e      	str	r3, [sp, #120]	; 0x78
 801dd74:	4ba4      	ldr	r3, [pc, #656]	; (801e008 <_strtod_l+0x2a0>)
 801dd76:	9219      	str	r2, [sp, #100]	; 0x64
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	9307      	str	r3, [sp, #28]
 801dd7c:	4604      	mov	r4, r0
 801dd7e:	4618      	mov	r0, r3
 801dd80:	4688      	mov	r8, r1
 801dd82:	f7e2 fa35 	bl	80001f0 <strlen>
 801dd86:	f04f 0a00 	mov.w	sl, #0
 801dd8a:	4605      	mov	r5, r0
 801dd8c:	f04f 0b00 	mov.w	fp, #0
 801dd90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801dd94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dd96:	781a      	ldrb	r2, [r3, #0]
 801dd98:	2a2b      	cmp	r2, #43	; 0x2b
 801dd9a:	d04c      	beq.n	801de36 <_strtod_l+0xce>
 801dd9c:	d839      	bhi.n	801de12 <_strtod_l+0xaa>
 801dd9e:	2a0d      	cmp	r2, #13
 801dda0:	d832      	bhi.n	801de08 <_strtod_l+0xa0>
 801dda2:	2a08      	cmp	r2, #8
 801dda4:	d832      	bhi.n	801de0c <_strtod_l+0xa4>
 801dda6:	2a00      	cmp	r2, #0
 801dda8:	d03c      	beq.n	801de24 <_strtod_l+0xbc>
 801ddaa:	2300      	movs	r3, #0
 801ddac:	930e      	str	r3, [sp, #56]	; 0x38
 801ddae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ddb0:	7833      	ldrb	r3, [r6, #0]
 801ddb2:	2b30      	cmp	r3, #48	; 0x30
 801ddb4:	f040 80b4 	bne.w	801df20 <_strtod_l+0x1b8>
 801ddb8:	7873      	ldrb	r3, [r6, #1]
 801ddba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ddbe:	2b58      	cmp	r3, #88	; 0x58
 801ddc0:	d16c      	bne.n	801de9c <_strtod_l+0x134>
 801ddc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddc4:	9301      	str	r3, [sp, #4]
 801ddc6:	ab1e      	add	r3, sp, #120	; 0x78
 801ddc8:	9702      	str	r7, [sp, #8]
 801ddca:	9300      	str	r3, [sp, #0]
 801ddcc:	4a8f      	ldr	r2, [pc, #572]	; (801e00c <_strtod_l+0x2a4>)
 801ddce:	ab1f      	add	r3, sp, #124	; 0x7c
 801ddd0:	a91d      	add	r1, sp, #116	; 0x74
 801ddd2:	4620      	mov	r0, r4
 801ddd4:	f001 fe34 	bl	801fa40 <__gethex>
 801ddd8:	f010 0707 	ands.w	r7, r0, #7
 801dddc:	4605      	mov	r5, r0
 801ddde:	d005      	beq.n	801ddec <_strtod_l+0x84>
 801dde0:	2f06      	cmp	r7, #6
 801dde2:	d12a      	bne.n	801de3a <_strtod_l+0xd2>
 801dde4:	3601      	adds	r6, #1
 801dde6:	2300      	movs	r3, #0
 801dde8:	961d      	str	r6, [sp, #116]	; 0x74
 801ddea:	930e      	str	r3, [sp, #56]	; 0x38
 801ddec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	f040 8596 	bne.w	801e920 <_strtod_l+0xbb8>
 801ddf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddf6:	b1db      	cbz	r3, 801de30 <_strtod_l+0xc8>
 801ddf8:	4652      	mov	r2, sl
 801ddfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ddfe:	ec43 2b10 	vmov	d0, r2, r3
 801de02:	b023      	add	sp, #140	; 0x8c
 801de04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de08:	2a20      	cmp	r2, #32
 801de0a:	d1ce      	bne.n	801ddaa <_strtod_l+0x42>
 801de0c:	3301      	adds	r3, #1
 801de0e:	931d      	str	r3, [sp, #116]	; 0x74
 801de10:	e7c0      	b.n	801dd94 <_strtod_l+0x2c>
 801de12:	2a2d      	cmp	r2, #45	; 0x2d
 801de14:	d1c9      	bne.n	801ddaa <_strtod_l+0x42>
 801de16:	2201      	movs	r2, #1
 801de18:	920e      	str	r2, [sp, #56]	; 0x38
 801de1a:	1c5a      	adds	r2, r3, #1
 801de1c:	921d      	str	r2, [sp, #116]	; 0x74
 801de1e:	785b      	ldrb	r3, [r3, #1]
 801de20:	2b00      	cmp	r3, #0
 801de22:	d1c4      	bne.n	801ddae <_strtod_l+0x46>
 801de24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de26:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	f040 8576 	bne.w	801e91c <_strtod_l+0xbb4>
 801de30:	4652      	mov	r2, sl
 801de32:	465b      	mov	r3, fp
 801de34:	e7e3      	b.n	801ddfe <_strtod_l+0x96>
 801de36:	2200      	movs	r2, #0
 801de38:	e7ee      	b.n	801de18 <_strtod_l+0xb0>
 801de3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801de3c:	b13a      	cbz	r2, 801de4e <_strtod_l+0xe6>
 801de3e:	2135      	movs	r1, #53	; 0x35
 801de40:	a820      	add	r0, sp, #128	; 0x80
 801de42:	f002 fdac 	bl	802099e <__copybits>
 801de46:	991e      	ldr	r1, [sp, #120]	; 0x78
 801de48:	4620      	mov	r0, r4
 801de4a:	f002 f971 	bl	8020130 <_Bfree>
 801de4e:	3f01      	subs	r7, #1
 801de50:	2f05      	cmp	r7, #5
 801de52:	d807      	bhi.n	801de64 <_strtod_l+0xfc>
 801de54:	e8df f007 	tbb	[pc, r7]
 801de58:	1d180b0e 	.word	0x1d180b0e
 801de5c:	030e      	.short	0x030e
 801de5e:	f04f 0b00 	mov.w	fp, #0
 801de62:	46da      	mov	sl, fp
 801de64:	0728      	lsls	r0, r5, #28
 801de66:	d5c1      	bpl.n	801ddec <_strtod_l+0x84>
 801de68:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801de6c:	e7be      	b.n	801ddec <_strtod_l+0x84>
 801de6e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801de72:	e7f7      	b.n	801de64 <_strtod_l+0xfc>
 801de74:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801de78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801de7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801de7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801de82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801de86:	e7ed      	b.n	801de64 <_strtod_l+0xfc>
 801de88:	f8df b184 	ldr.w	fp, [pc, #388]	; 801e010 <_strtod_l+0x2a8>
 801de8c:	f04f 0a00 	mov.w	sl, #0
 801de90:	e7e8      	b.n	801de64 <_strtod_l+0xfc>
 801de92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801de96:	f04f 3aff 	mov.w	sl, #4294967295
 801de9a:	e7e3      	b.n	801de64 <_strtod_l+0xfc>
 801de9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801de9e:	1c5a      	adds	r2, r3, #1
 801dea0:	921d      	str	r2, [sp, #116]	; 0x74
 801dea2:	785b      	ldrb	r3, [r3, #1]
 801dea4:	2b30      	cmp	r3, #48	; 0x30
 801dea6:	d0f9      	beq.n	801de9c <_strtod_l+0x134>
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	d09f      	beq.n	801ddec <_strtod_l+0x84>
 801deac:	2301      	movs	r3, #1
 801deae:	f04f 0900 	mov.w	r9, #0
 801deb2:	9304      	str	r3, [sp, #16]
 801deb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801deb6:	930a      	str	r3, [sp, #40]	; 0x28
 801deb8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801debc:	464f      	mov	r7, r9
 801debe:	220a      	movs	r2, #10
 801dec0:	981d      	ldr	r0, [sp, #116]	; 0x74
 801dec2:	7806      	ldrb	r6, [r0, #0]
 801dec4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801dec8:	b2d9      	uxtb	r1, r3
 801deca:	2909      	cmp	r1, #9
 801decc:	d92a      	bls.n	801df24 <_strtod_l+0x1bc>
 801dece:	9907      	ldr	r1, [sp, #28]
 801ded0:	462a      	mov	r2, r5
 801ded2:	f003 f818 	bl	8020f06 <strncmp>
 801ded6:	b398      	cbz	r0, 801df40 <_strtod_l+0x1d8>
 801ded8:	2000      	movs	r0, #0
 801deda:	4633      	mov	r3, r6
 801dedc:	463d      	mov	r5, r7
 801dede:	9007      	str	r0, [sp, #28]
 801dee0:	4602      	mov	r2, r0
 801dee2:	2b65      	cmp	r3, #101	; 0x65
 801dee4:	d001      	beq.n	801deea <_strtod_l+0x182>
 801dee6:	2b45      	cmp	r3, #69	; 0x45
 801dee8:	d118      	bne.n	801df1c <_strtod_l+0x1b4>
 801deea:	b91d      	cbnz	r5, 801def4 <_strtod_l+0x18c>
 801deec:	9b04      	ldr	r3, [sp, #16]
 801deee:	4303      	orrs	r3, r0
 801def0:	d098      	beq.n	801de24 <_strtod_l+0xbc>
 801def2:	2500      	movs	r5, #0
 801def4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801def8:	f108 0301 	add.w	r3, r8, #1
 801defc:	931d      	str	r3, [sp, #116]	; 0x74
 801defe:	f898 3001 	ldrb.w	r3, [r8, #1]
 801df02:	2b2b      	cmp	r3, #43	; 0x2b
 801df04:	d075      	beq.n	801dff2 <_strtod_l+0x28a>
 801df06:	2b2d      	cmp	r3, #45	; 0x2d
 801df08:	d07b      	beq.n	801e002 <_strtod_l+0x29a>
 801df0a:	f04f 0c00 	mov.w	ip, #0
 801df0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801df12:	2909      	cmp	r1, #9
 801df14:	f240 8082 	bls.w	801e01c <_strtod_l+0x2b4>
 801df18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801df1c:	2600      	movs	r6, #0
 801df1e:	e09d      	b.n	801e05c <_strtod_l+0x2f4>
 801df20:	2300      	movs	r3, #0
 801df22:	e7c4      	b.n	801deae <_strtod_l+0x146>
 801df24:	2f08      	cmp	r7, #8
 801df26:	bfd8      	it	le
 801df28:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801df2a:	f100 0001 	add.w	r0, r0, #1
 801df2e:	bfda      	itte	le
 801df30:	fb02 3301 	mlale	r3, r2, r1, r3
 801df34:	9309      	strle	r3, [sp, #36]	; 0x24
 801df36:	fb02 3909 	mlagt	r9, r2, r9, r3
 801df3a:	3701      	adds	r7, #1
 801df3c:	901d      	str	r0, [sp, #116]	; 0x74
 801df3e:	e7bf      	b.n	801dec0 <_strtod_l+0x158>
 801df40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df42:	195a      	adds	r2, r3, r5
 801df44:	921d      	str	r2, [sp, #116]	; 0x74
 801df46:	5d5b      	ldrb	r3, [r3, r5]
 801df48:	2f00      	cmp	r7, #0
 801df4a:	d037      	beq.n	801dfbc <_strtod_l+0x254>
 801df4c:	9007      	str	r0, [sp, #28]
 801df4e:	463d      	mov	r5, r7
 801df50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801df54:	2a09      	cmp	r2, #9
 801df56:	d912      	bls.n	801df7e <_strtod_l+0x216>
 801df58:	2201      	movs	r2, #1
 801df5a:	e7c2      	b.n	801dee2 <_strtod_l+0x17a>
 801df5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df5e:	1c5a      	adds	r2, r3, #1
 801df60:	921d      	str	r2, [sp, #116]	; 0x74
 801df62:	785b      	ldrb	r3, [r3, #1]
 801df64:	3001      	adds	r0, #1
 801df66:	2b30      	cmp	r3, #48	; 0x30
 801df68:	d0f8      	beq.n	801df5c <_strtod_l+0x1f4>
 801df6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801df6e:	2a08      	cmp	r2, #8
 801df70:	f200 84db 	bhi.w	801e92a <_strtod_l+0xbc2>
 801df74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801df76:	9007      	str	r0, [sp, #28]
 801df78:	2000      	movs	r0, #0
 801df7a:	920a      	str	r2, [sp, #40]	; 0x28
 801df7c:	4605      	mov	r5, r0
 801df7e:	3b30      	subs	r3, #48	; 0x30
 801df80:	f100 0201 	add.w	r2, r0, #1
 801df84:	d014      	beq.n	801dfb0 <_strtod_l+0x248>
 801df86:	9907      	ldr	r1, [sp, #28]
 801df88:	4411      	add	r1, r2
 801df8a:	9107      	str	r1, [sp, #28]
 801df8c:	462a      	mov	r2, r5
 801df8e:	eb00 0e05 	add.w	lr, r0, r5
 801df92:	210a      	movs	r1, #10
 801df94:	4572      	cmp	r2, lr
 801df96:	d113      	bne.n	801dfc0 <_strtod_l+0x258>
 801df98:	182a      	adds	r2, r5, r0
 801df9a:	2a08      	cmp	r2, #8
 801df9c:	f105 0501 	add.w	r5, r5, #1
 801dfa0:	4405      	add	r5, r0
 801dfa2:	dc1c      	bgt.n	801dfde <_strtod_l+0x276>
 801dfa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dfa6:	220a      	movs	r2, #10
 801dfa8:	fb02 3301 	mla	r3, r2, r1, r3
 801dfac:	9309      	str	r3, [sp, #36]	; 0x24
 801dfae:	2200      	movs	r2, #0
 801dfb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dfb2:	1c59      	adds	r1, r3, #1
 801dfb4:	911d      	str	r1, [sp, #116]	; 0x74
 801dfb6:	785b      	ldrb	r3, [r3, #1]
 801dfb8:	4610      	mov	r0, r2
 801dfba:	e7c9      	b.n	801df50 <_strtod_l+0x1e8>
 801dfbc:	4638      	mov	r0, r7
 801dfbe:	e7d2      	b.n	801df66 <_strtod_l+0x1fe>
 801dfc0:	2a08      	cmp	r2, #8
 801dfc2:	dc04      	bgt.n	801dfce <_strtod_l+0x266>
 801dfc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801dfc6:	434e      	muls	r6, r1
 801dfc8:	9609      	str	r6, [sp, #36]	; 0x24
 801dfca:	3201      	adds	r2, #1
 801dfcc:	e7e2      	b.n	801df94 <_strtod_l+0x22c>
 801dfce:	f102 0c01 	add.w	ip, r2, #1
 801dfd2:	f1bc 0f10 	cmp.w	ip, #16
 801dfd6:	bfd8      	it	le
 801dfd8:	fb01 f909 	mulle.w	r9, r1, r9
 801dfdc:	e7f5      	b.n	801dfca <_strtod_l+0x262>
 801dfde:	2d10      	cmp	r5, #16
 801dfe0:	bfdc      	itt	le
 801dfe2:	220a      	movle	r2, #10
 801dfe4:	fb02 3909 	mlale	r9, r2, r9, r3
 801dfe8:	e7e1      	b.n	801dfae <_strtod_l+0x246>
 801dfea:	2300      	movs	r3, #0
 801dfec:	9307      	str	r3, [sp, #28]
 801dfee:	2201      	movs	r2, #1
 801dff0:	e77c      	b.n	801deec <_strtod_l+0x184>
 801dff2:	f04f 0c00 	mov.w	ip, #0
 801dff6:	f108 0302 	add.w	r3, r8, #2
 801dffa:	931d      	str	r3, [sp, #116]	; 0x74
 801dffc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801e000:	e785      	b.n	801df0e <_strtod_l+0x1a6>
 801e002:	f04f 0c01 	mov.w	ip, #1
 801e006:	e7f6      	b.n	801dff6 <_strtod_l+0x28e>
 801e008:	0802991c 	.word	0x0802991c
 801e00c:	08029664 	.word	0x08029664
 801e010:	7ff00000 	.word	0x7ff00000
 801e014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e016:	1c59      	adds	r1, r3, #1
 801e018:	911d      	str	r1, [sp, #116]	; 0x74
 801e01a:	785b      	ldrb	r3, [r3, #1]
 801e01c:	2b30      	cmp	r3, #48	; 0x30
 801e01e:	d0f9      	beq.n	801e014 <_strtod_l+0x2ac>
 801e020:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801e024:	2908      	cmp	r1, #8
 801e026:	f63f af79 	bhi.w	801df1c <_strtod_l+0x1b4>
 801e02a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801e02e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e030:	9308      	str	r3, [sp, #32]
 801e032:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e034:	1c59      	adds	r1, r3, #1
 801e036:	911d      	str	r1, [sp, #116]	; 0x74
 801e038:	785b      	ldrb	r3, [r3, #1]
 801e03a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801e03e:	2e09      	cmp	r6, #9
 801e040:	d937      	bls.n	801e0b2 <_strtod_l+0x34a>
 801e042:	9e08      	ldr	r6, [sp, #32]
 801e044:	1b89      	subs	r1, r1, r6
 801e046:	2908      	cmp	r1, #8
 801e048:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801e04c:	dc02      	bgt.n	801e054 <_strtod_l+0x2ec>
 801e04e:	4576      	cmp	r6, lr
 801e050:	bfa8      	it	ge
 801e052:	4676      	movge	r6, lr
 801e054:	f1bc 0f00 	cmp.w	ip, #0
 801e058:	d000      	beq.n	801e05c <_strtod_l+0x2f4>
 801e05a:	4276      	negs	r6, r6
 801e05c:	2d00      	cmp	r5, #0
 801e05e:	d14f      	bne.n	801e100 <_strtod_l+0x398>
 801e060:	9904      	ldr	r1, [sp, #16]
 801e062:	4301      	orrs	r1, r0
 801e064:	f47f aec2 	bne.w	801ddec <_strtod_l+0x84>
 801e068:	2a00      	cmp	r2, #0
 801e06a:	f47f aedb 	bne.w	801de24 <_strtod_l+0xbc>
 801e06e:	2b69      	cmp	r3, #105	; 0x69
 801e070:	d027      	beq.n	801e0c2 <_strtod_l+0x35a>
 801e072:	dc24      	bgt.n	801e0be <_strtod_l+0x356>
 801e074:	2b49      	cmp	r3, #73	; 0x49
 801e076:	d024      	beq.n	801e0c2 <_strtod_l+0x35a>
 801e078:	2b4e      	cmp	r3, #78	; 0x4e
 801e07a:	f47f aed3 	bne.w	801de24 <_strtod_l+0xbc>
 801e07e:	499e      	ldr	r1, [pc, #632]	; (801e2f8 <_strtod_l+0x590>)
 801e080:	a81d      	add	r0, sp, #116	; 0x74
 801e082:	f001 ff35 	bl	801fef0 <__match>
 801e086:	2800      	cmp	r0, #0
 801e088:	f43f aecc 	beq.w	801de24 <_strtod_l+0xbc>
 801e08c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e08e:	781b      	ldrb	r3, [r3, #0]
 801e090:	2b28      	cmp	r3, #40	; 0x28
 801e092:	d12d      	bne.n	801e0f0 <_strtod_l+0x388>
 801e094:	4999      	ldr	r1, [pc, #612]	; (801e2fc <_strtod_l+0x594>)
 801e096:	aa20      	add	r2, sp, #128	; 0x80
 801e098:	a81d      	add	r0, sp, #116	; 0x74
 801e09a:	f001 ff3d 	bl	801ff18 <__hexnan>
 801e09e:	2805      	cmp	r0, #5
 801e0a0:	d126      	bne.n	801e0f0 <_strtod_l+0x388>
 801e0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e0a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801e0a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801e0ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801e0b0:	e69c      	b.n	801ddec <_strtod_l+0x84>
 801e0b2:	210a      	movs	r1, #10
 801e0b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 801e0b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801e0bc:	e7b9      	b.n	801e032 <_strtod_l+0x2ca>
 801e0be:	2b6e      	cmp	r3, #110	; 0x6e
 801e0c0:	e7db      	b.n	801e07a <_strtod_l+0x312>
 801e0c2:	498f      	ldr	r1, [pc, #572]	; (801e300 <_strtod_l+0x598>)
 801e0c4:	a81d      	add	r0, sp, #116	; 0x74
 801e0c6:	f001 ff13 	bl	801fef0 <__match>
 801e0ca:	2800      	cmp	r0, #0
 801e0cc:	f43f aeaa 	beq.w	801de24 <_strtod_l+0xbc>
 801e0d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0d2:	498c      	ldr	r1, [pc, #560]	; (801e304 <_strtod_l+0x59c>)
 801e0d4:	3b01      	subs	r3, #1
 801e0d6:	a81d      	add	r0, sp, #116	; 0x74
 801e0d8:	931d      	str	r3, [sp, #116]	; 0x74
 801e0da:	f001 ff09 	bl	801fef0 <__match>
 801e0de:	b910      	cbnz	r0, 801e0e6 <_strtod_l+0x37e>
 801e0e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e0e2:	3301      	adds	r3, #1
 801e0e4:	931d      	str	r3, [sp, #116]	; 0x74
 801e0e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801e314 <_strtod_l+0x5ac>
 801e0ea:	f04f 0a00 	mov.w	sl, #0
 801e0ee:	e67d      	b.n	801ddec <_strtod_l+0x84>
 801e0f0:	4885      	ldr	r0, [pc, #532]	; (801e308 <_strtod_l+0x5a0>)
 801e0f2:	f002 fead 	bl	8020e50 <nan>
 801e0f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801e0fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801e0fe:	e675      	b.n	801ddec <_strtod_l+0x84>
 801e100:	9b07      	ldr	r3, [sp, #28]
 801e102:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e104:	1af3      	subs	r3, r6, r3
 801e106:	2f00      	cmp	r7, #0
 801e108:	bf08      	it	eq
 801e10a:	462f      	moveq	r7, r5
 801e10c:	2d10      	cmp	r5, #16
 801e10e:	9308      	str	r3, [sp, #32]
 801e110:	46a8      	mov	r8, r5
 801e112:	bfa8      	it	ge
 801e114:	f04f 0810 	movge.w	r8, #16
 801e118:	f7e2 fa04 	bl	8000524 <__aeabi_ui2d>
 801e11c:	2d09      	cmp	r5, #9
 801e11e:	4682      	mov	sl, r0
 801e120:	468b      	mov	fp, r1
 801e122:	dd13      	ble.n	801e14c <_strtod_l+0x3e4>
 801e124:	4b79      	ldr	r3, [pc, #484]	; (801e30c <_strtod_l+0x5a4>)
 801e126:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801e12a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801e12e:	f7e2 fa73 	bl	8000618 <__aeabi_dmul>
 801e132:	4682      	mov	sl, r0
 801e134:	4648      	mov	r0, r9
 801e136:	468b      	mov	fp, r1
 801e138:	f7e2 f9f4 	bl	8000524 <__aeabi_ui2d>
 801e13c:	4602      	mov	r2, r0
 801e13e:	460b      	mov	r3, r1
 801e140:	4650      	mov	r0, sl
 801e142:	4659      	mov	r1, fp
 801e144:	f7e2 f8b2 	bl	80002ac <__adddf3>
 801e148:	4682      	mov	sl, r0
 801e14a:	468b      	mov	fp, r1
 801e14c:	2d0f      	cmp	r5, #15
 801e14e:	dc38      	bgt.n	801e1c2 <_strtod_l+0x45a>
 801e150:	9b08      	ldr	r3, [sp, #32]
 801e152:	2b00      	cmp	r3, #0
 801e154:	f43f ae4a 	beq.w	801ddec <_strtod_l+0x84>
 801e158:	dd24      	ble.n	801e1a4 <_strtod_l+0x43c>
 801e15a:	2b16      	cmp	r3, #22
 801e15c:	dc0b      	bgt.n	801e176 <_strtod_l+0x40e>
 801e15e:	4d6b      	ldr	r5, [pc, #428]	; (801e30c <_strtod_l+0x5a4>)
 801e160:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801e164:	e9d5 0100 	ldrd	r0, r1, [r5]
 801e168:	4652      	mov	r2, sl
 801e16a:	465b      	mov	r3, fp
 801e16c:	f7e2 fa54 	bl	8000618 <__aeabi_dmul>
 801e170:	4682      	mov	sl, r0
 801e172:	468b      	mov	fp, r1
 801e174:	e63a      	b.n	801ddec <_strtod_l+0x84>
 801e176:	9a08      	ldr	r2, [sp, #32]
 801e178:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801e17c:	4293      	cmp	r3, r2
 801e17e:	db20      	blt.n	801e1c2 <_strtod_l+0x45a>
 801e180:	4c62      	ldr	r4, [pc, #392]	; (801e30c <_strtod_l+0x5a4>)
 801e182:	f1c5 050f 	rsb	r5, r5, #15
 801e186:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801e18a:	4652      	mov	r2, sl
 801e18c:	465b      	mov	r3, fp
 801e18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e192:	f7e2 fa41 	bl	8000618 <__aeabi_dmul>
 801e196:	9b08      	ldr	r3, [sp, #32]
 801e198:	1b5d      	subs	r5, r3, r5
 801e19a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801e19e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e1a2:	e7e3      	b.n	801e16c <_strtod_l+0x404>
 801e1a4:	9b08      	ldr	r3, [sp, #32]
 801e1a6:	3316      	adds	r3, #22
 801e1a8:	db0b      	blt.n	801e1c2 <_strtod_l+0x45a>
 801e1aa:	9b07      	ldr	r3, [sp, #28]
 801e1ac:	4a57      	ldr	r2, [pc, #348]	; (801e30c <_strtod_l+0x5a4>)
 801e1ae:	1b9e      	subs	r6, r3, r6
 801e1b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801e1b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e1b8:	4650      	mov	r0, sl
 801e1ba:	4659      	mov	r1, fp
 801e1bc:	f7e2 fb56 	bl	800086c <__aeabi_ddiv>
 801e1c0:	e7d6      	b.n	801e170 <_strtod_l+0x408>
 801e1c2:	9b08      	ldr	r3, [sp, #32]
 801e1c4:	eba5 0808 	sub.w	r8, r5, r8
 801e1c8:	4498      	add	r8, r3
 801e1ca:	f1b8 0f00 	cmp.w	r8, #0
 801e1ce:	dd71      	ble.n	801e2b4 <_strtod_l+0x54c>
 801e1d0:	f018 030f 	ands.w	r3, r8, #15
 801e1d4:	d00a      	beq.n	801e1ec <_strtod_l+0x484>
 801e1d6:	494d      	ldr	r1, [pc, #308]	; (801e30c <_strtod_l+0x5a4>)
 801e1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e1dc:	4652      	mov	r2, sl
 801e1de:	465b      	mov	r3, fp
 801e1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e1e4:	f7e2 fa18 	bl	8000618 <__aeabi_dmul>
 801e1e8:	4682      	mov	sl, r0
 801e1ea:	468b      	mov	fp, r1
 801e1ec:	f038 080f 	bics.w	r8, r8, #15
 801e1f0:	d04d      	beq.n	801e28e <_strtod_l+0x526>
 801e1f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801e1f6:	dd22      	ble.n	801e23e <_strtod_l+0x4d6>
 801e1f8:	2500      	movs	r5, #0
 801e1fa:	462e      	mov	r6, r5
 801e1fc:	9509      	str	r5, [sp, #36]	; 0x24
 801e1fe:	9507      	str	r5, [sp, #28]
 801e200:	2322      	movs	r3, #34	; 0x22
 801e202:	f8df b110 	ldr.w	fp, [pc, #272]	; 801e314 <_strtod_l+0x5ac>
 801e206:	6023      	str	r3, [r4, #0]
 801e208:	f04f 0a00 	mov.w	sl, #0
 801e20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e20e:	2b00      	cmp	r3, #0
 801e210:	f43f adec 	beq.w	801ddec <_strtod_l+0x84>
 801e214:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e216:	4620      	mov	r0, r4
 801e218:	f001 ff8a 	bl	8020130 <_Bfree>
 801e21c:	9907      	ldr	r1, [sp, #28]
 801e21e:	4620      	mov	r0, r4
 801e220:	f001 ff86 	bl	8020130 <_Bfree>
 801e224:	4631      	mov	r1, r6
 801e226:	4620      	mov	r0, r4
 801e228:	f001 ff82 	bl	8020130 <_Bfree>
 801e22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e22e:	4620      	mov	r0, r4
 801e230:	f001 ff7e 	bl	8020130 <_Bfree>
 801e234:	4629      	mov	r1, r5
 801e236:	4620      	mov	r0, r4
 801e238:	f001 ff7a 	bl	8020130 <_Bfree>
 801e23c:	e5d6      	b.n	801ddec <_strtod_l+0x84>
 801e23e:	2300      	movs	r3, #0
 801e240:	ea4f 1828 	mov.w	r8, r8, asr #4
 801e244:	4650      	mov	r0, sl
 801e246:	4659      	mov	r1, fp
 801e248:	4699      	mov	r9, r3
 801e24a:	f1b8 0f01 	cmp.w	r8, #1
 801e24e:	dc21      	bgt.n	801e294 <_strtod_l+0x52c>
 801e250:	b10b      	cbz	r3, 801e256 <_strtod_l+0x4ee>
 801e252:	4682      	mov	sl, r0
 801e254:	468b      	mov	fp, r1
 801e256:	4b2e      	ldr	r3, [pc, #184]	; (801e310 <_strtod_l+0x5a8>)
 801e258:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801e25c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801e260:	4652      	mov	r2, sl
 801e262:	465b      	mov	r3, fp
 801e264:	e9d9 0100 	ldrd	r0, r1, [r9]
 801e268:	f7e2 f9d6 	bl	8000618 <__aeabi_dmul>
 801e26c:	4b29      	ldr	r3, [pc, #164]	; (801e314 <_strtod_l+0x5ac>)
 801e26e:	460a      	mov	r2, r1
 801e270:	400b      	ands	r3, r1
 801e272:	4929      	ldr	r1, [pc, #164]	; (801e318 <_strtod_l+0x5b0>)
 801e274:	428b      	cmp	r3, r1
 801e276:	4682      	mov	sl, r0
 801e278:	d8be      	bhi.n	801e1f8 <_strtod_l+0x490>
 801e27a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e27e:	428b      	cmp	r3, r1
 801e280:	bf86      	itte	hi
 801e282:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801e31c <_strtod_l+0x5b4>
 801e286:	f04f 3aff 	movhi.w	sl, #4294967295
 801e28a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801e28e:	2300      	movs	r3, #0
 801e290:	9304      	str	r3, [sp, #16]
 801e292:	e081      	b.n	801e398 <_strtod_l+0x630>
 801e294:	f018 0f01 	tst.w	r8, #1
 801e298:	d007      	beq.n	801e2aa <_strtod_l+0x542>
 801e29a:	4b1d      	ldr	r3, [pc, #116]	; (801e310 <_strtod_l+0x5a8>)
 801e29c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a4:	f7e2 f9b8 	bl	8000618 <__aeabi_dmul>
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	f109 0901 	add.w	r9, r9, #1
 801e2ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 801e2b2:	e7ca      	b.n	801e24a <_strtod_l+0x4e2>
 801e2b4:	d0eb      	beq.n	801e28e <_strtod_l+0x526>
 801e2b6:	f1c8 0800 	rsb	r8, r8, #0
 801e2ba:	f018 020f 	ands.w	r2, r8, #15
 801e2be:	d00a      	beq.n	801e2d6 <_strtod_l+0x56e>
 801e2c0:	4b12      	ldr	r3, [pc, #72]	; (801e30c <_strtod_l+0x5a4>)
 801e2c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e2c6:	4650      	mov	r0, sl
 801e2c8:	4659      	mov	r1, fp
 801e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ce:	f7e2 facd 	bl	800086c <__aeabi_ddiv>
 801e2d2:	4682      	mov	sl, r0
 801e2d4:	468b      	mov	fp, r1
 801e2d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 801e2da:	d0d8      	beq.n	801e28e <_strtod_l+0x526>
 801e2dc:	f1b8 0f1f 	cmp.w	r8, #31
 801e2e0:	dd1e      	ble.n	801e320 <_strtod_l+0x5b8>
 801e2e2:	2500      	movs	r5, #0
 801e2e4:	462e      	mov	r6, r5
 801e2e6:	9509      	str	r5, [sp, #36]	; 0x24
 801e2e8:	9507      	str	r5, [sp, #28]
 801e2ea:	2322      	movs	r3, #34	; 0x22
 801e2ec:	f04f 0a00 	mov.w	sl, #0
 801e2f0:	f04f 0b00 	mov.w	fp, #0
 801e2f4:	6023      	str	r3, [r4, #0]
 801e2f6:	e789      	b.n	801e20c <_strtod_l+0x4a4>
 801e2f8:	08029635 	.word	0x08029635
 801e2fc:	08029678 	.word	0x08029678
 801e300:	0802962d 	.word	0x0802962d
 801e304:	080297bc 	.word	0x080297bc
 801e308:	08029ad8 	.word	0x08029ad8
 801e30c:	080299b8 	.word	0x080299b8
 801e310:	08029990 	.word	0x08029990
 801e314:	7ff00000 	.word	0x7ff00000
 801e318:	7ca00000 	.word	0x7ca00000
 801e31c:	7fefffff 	.word	0x7fefffff
 801e320:	f018 0310 	ands.w	r3, r8, #16
 801e324:	bf18      	it	ne
 801e326:	236a      	movne	r3, #106	; 0x6a
 801e328:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e6e0 <_strtod_l+0x978>
 801e32c:	9304      	str	r3, [sp, #16]
 801e32e:	4650      	mov	r0, sl
 801e330:	4659      	mov	r1, fp
 801e332:	2300      	movs	r3, #0
 801e334:	f018 0f01 	tst.w	r8, #1
 801e338:	d004      	beq.n	801e344 <_strtod_l+0x5dc>
 801e33a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e33e:	f7e2 f96b 	bl	8000618 <__aeabi_dmul>
 801e342:	2301      	movs	r3, #1
 801e344:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e348:	f109 0908 	add.w	r9, r9, #8
 801e34c:	d1f2      	bne.n	801e334 <_strtod_l+0x5cc>
 801e34e:	b10b      	cbz	r3, 801e354 <_strtod_l+0x5ec>
 801e350:	4682      	mov	sl, r0
 801e352:	468b      	mov	fp, r1
 801e354:	9b04      	ldr	r3, [sp, #16]
 801e356:	b1bb      	cbz	r3, 801e388 <_strtod_l+0x620>
 801e358:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e35c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e360:	2b00      	cmp	r3, #0
 801e362:	4659      	mov	r1, fp
 801e364:	dd10      	ble.n	801e388 <_strtod_l+0x620>
 801e366:	2b1f      	cmp	r3, #31
 801e368:	f340 8128 	ble.w	801e5bc <_strtod_l+0x854>
 801e36c:	2b34      	cmp	r3, #52	; 0x34
 801e36e:	bfde      	ittt	le
 801e370:	3b20      	suble	r3, #32
 801e372:	f04f 32ff 	movle.w	r2, #4294967295
 801e376:	fa02 f303 	lslle.w	r3, r2, r3
 801e37a:	f04f 0a00 	mov.w	sl, #0
 801e37e:	bfcc      	ite	gt
 801e380:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e384:	ea03 0b01 	andle.w	fp, r3, r1
 801e388:	2200      	movs	r2, #0
 801e38a:	2300      	movs	r3, #0
 801e38c:	4650      	mov	r0, sl
 801e38e:	4659      	mov	r1, fp
 801e390:	f7e2 fbaa 	bl	8000ae8 <__aeabi_dcmpeq>
 801e394:	2800      	cmp	r0, #0
 801e396:	d1a4      	bne.n	801e2e2 <_strtod_l+0x57a>
 801e398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e39a:	9300      	str	r3, [sp, #0]
 801e39c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e39e:	462b      	mov	r3, r5
 801e3a0:	463a      	mov	r2, r7
 801e3a2:	4620      	mov	r0, r4
 801e3a4:	f001 ff30 	bl	8020208 <__s2b>
 801e3a8:	9009      	str	r0, [sp, #36]	; 0x24
 801e3aa:	2800      	cmp	r0, #0
 801e3ac:	f43f af24 	beq.w	801e1f8 <_strtod_l+0x490>
 801e3b0:	9b07      	ldr	r3, [sp, #28]
 801e3b2:	1b9e      	subs	r6, r3, r6
 801e3b4:	9b08      	ldr	r3, [sp, #32]
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	bfb4      	ite	lt
 801e3ba:	4633      	movlt	r3, r6
 801e3bc:	2300      	movge	r3, #0
 801e3be:	9310      	str	r3, [sp, #64]	; 0x40
 801e3c0:	9b08      	ldr	r3, [sp, #32]
 801e3c2:	2500      	movs	r5, #0
 801e3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e3c8:	9318      	str	r3, [sp, #96]	; 0x60
 801e3ca:	462e      	mov	r6, r5
 801e3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3ce:	4620      	mov	r0, r4
 801e3d0:	6859      	ldr	r1, [r3, #4]
 801e3d2:	f001 fe6d 	bl	80200b0 <_Balloc>
 801e3d6:	9007      	str	r0, [sp, #28]
 801e3d8:	2800      	cmp	r0, #0
 801e3da:	f43f af11 	beq.w	801e200 <_strtod_l+0x498>
 801e3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3e0:	691a      	ldr	r2, [r3, #16]
 801e3e2:	3202      	adds	r2, #2
 801e3e4:	f103 010c 	add.w	r1, r3, #12
 801e3e8:	0092      	lsls	r2, r2, #2
 801e3ea:	300c      	adds	r0, #12
 801e3ec:	f001 fe52 	bl	8020094 <memcpy>
 801e3f0:	ec4b ab10 	vmov	d0, sl, fp
 801e3f4:	aa20      	add	r2, sp, #128	; 0x80
 801e3f6:	a91f      	add	r1, sp, #124	; 0x7c
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e3fe:	f002 fa3f 	bl	8020880 <__d2b>
 801e402:	901e      	str	r0, [sp, #120]	; 0x78
 801e404:	2800      	cmp	r0, #0
 801e406:	f43f aefb 	beq.w	801e200 <_strtod_l+0x498>
 801e40a:	2101      	movs	r1, #1
 801e40c:	4620      	mov	r0, r4
 801e40e:	f001 ff95 	bl	802033c <__i2b>
 801e412:	4606      	mov	r6, r0
 801e414:	2800      	cmp	r0, #0
 801e416:	f43f aef3 	beq.w	801e200 <_strtod_l+0x498>
 801e41a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e41c:	9904      	ldr	r1, [sp, #16]
 801e41e:	2b00      	cmp	r3, #0
 801e420:	bfab      	itete	ge
 801e422:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e424:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e426:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e428:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e42c:	bfac      	ite	ge
 801e42e:	eb03 0902 	addge.w	r9, r3, r2
 801e432:	1ad7      	sublt	r7, r2, r3
 801e434:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e436:	eba3 0801 	sub.w	r8, r3, r1
 801e43a:	4490      	add	r8, r2
 801e43c:	4ba3      	ldr	r3, [pc, #652]	; (801e6cc <_strtod_l+0x964>)
 801e43e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e442:	4598      	cmp	r8, r3
 801e444:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e448:	f280 80cc 	bge.w	801e5e4 <_strtod_l+0x87c>
 801e44c:	eba3 0308 	sub.w	r3, r3, r8
 801e450:	2b1f      	cmp	r3, #31
 801e452:	eba2 0203 	sub.w	r2, r2, r3
 801e456:	f04f 0101 	mov.w	r1, #1
 801e45a:	f300 80b6 	bgt.w	801e5ca <_strtod_l+0x862>
 801e45e:	fa01 f303 	lsl.w	r3, r1, r3
 801e462:	9311      	str	r3, [sp, #68]	; 0x44
 801e464:	2300      	movs	r3, #0
 801e466:	930c      	str	r3, [sp, #48]	; 0x30
 801e468:	eb09 0802 	add.w	r8, r9, r2
 801e46c:	9b04      	ldr	r3, [sp, #16]
 801e46e:	45c1      	cmp	r9, r8
 801e470:	4417      	add	r7, r2
 801e472:	441f      	add	r7, r3
 801e474:	464b      	mov	r3, r9
 801e476:	bfa8      	it	ge
 801e478:	4643      	movge	r3, r8
 801e47a:	42bb      	cmp	r3, r7
 801e47c:	bfa8      	it	ge
 801e47e:	463b      	movge	r3, r7
 801e480:	2b00      	cmp	r3, #0
 801e482:	bfc2      	ittt	gt
 801e484:	eba8 0803 	subgt.w	r8, r8, r3
 801e488:	1aff      	subgt	r7, r7, r3
 801e48a:	eba9 0903 	subgt.w	r9, r9, r3
 801e48e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e490:	2b00      	cmp	r3, #0
 801e492:	dd17      	ble.n	801e4c4 <_strtod_l+0x75c>
 801e494:	4631      	mov	r1, r6
 801e496:	461a      	mov	r2, r3
 801e498:	4620      	mov	r0, r4
 801e49a:	f002 f80b 	bl	80204b4 <__pow5mult>
 801e49e:	4606      	mov	r6, r0
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	f43f aead 	beq.w	801e200 <_strtod_l+0x498>
 801e4a6:	4601      	mov	r1, r0
 801e4a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e4aa:	4620      	mov	r0, r4
 801e4ac:	f001 ff5c 	bl	8020368 <__multiply>
 801e4b0:	900f      	str	r0, [sp, #60]	; 0x3c
 801e4b2:	2800      	cmp	r0, #0
 801e4b4:	f43f aea4 	beq.w	801e200 <_strtod_l+0x498>
 801e4b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e4ba:	4620      	mov	r0, r4
 801e4bc:	f001 fe38 	bl	8020130 <_Bfree>
 801e4c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4c2:	931e      	str	r3, [sp, #120]	; 0x78
 801e4c4:	f1b8 0f00 	cmp.w	r8, #0
 801e4c8:	f300 8091 	bgt.w	801e5ee <_strtod_l+0x886>
 801e4cc:	9b08      	ldr	r3, [sp, #32]
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	dd08      	ble.n	801e4e4 <_strtod_l+0x77c>
 801e4d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e4d4:	9907      	ldr	r1, [sp, #28]
 801e4d6:	4620      	mov	r0, r4
 801e4d8:	f001 ffec 	bl	80204b4 <__pow5mult>
 801e4dc:	9007      	str	r0, [sp, #28]
 801e4de:	2800      	cmp	r0, #0
 801e4e0:	f43f ae8e 	beq.w	801e200 <_strtod_l+0x498>
 801e4e4:	2f00      	cmp	r7, #0
 801e4e6:	dd08      	ble.n	801e4fa <_strtod_l+0x792>
 801e4e8:	9907      	ldr	r1, [sp, #28]
 801e4ea:	463a      	mov	r2, r7
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f002 f83b 	bl	8020568 <__lshift>
 801e4f2:	9007      	str	r0, [sp, #28]
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	f43f ae83 	beq.w	801e200 <_strtod_l+0x498>
 801e4fa:	f1b9 0f00 	cmp.w	r9, #0
 801e4fe:	dd08      	ble.n	801e512 <_strtod_l+0x7aa>
 801e500:	4631      	mov	r1, r6
 801e502:	464a      	mov	r2, r9
 801e504:	4620      	mov	r0, r4
 801e506:	f002 f82f 	bl	8020568 <__lshift>
 801e50a:	4606      	mov	r6, r0
 801e50c:	2800      	cmp	r0, #0
 801e50e:	f43f ae77 	beq.w	801e200 <_strtod_l+0x498>
 801e512:	9a07      	ldr	r2, [sp, #28]
 801e514:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e516:	4620      	mov	r0, r4
 801e518:	f002 f8ae 	bl	8020678 <__mdiff>
 801e51c:	4605      	mov	r5, r0
 801e51e:	2800      	cmp	r0, #0
 801e520:	f43f ae6e 	beq.w	801e200 <_strtod_l+0x498>
 801e524:	68c3      	ldr	r3, [r0, #12]
 801e526:	930f      	str	r3, [sp, #60]	; 0x3c
 801e528:	2300      	movs	r3, #0
 801e52a:	60c3      	str	r3, [r0, #12]
 801e52c:	4631      	mov	r1, r6
 801e52e:	f002 f887 	bl	8020640 <__mcmp>
 801e532:	2800      	cmp	r0, #0
 801e534:	da65      	bge.n	801e602 <_strtod_l+0x89a>
 801e536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e538:	ea53 030a 	orrs.w	r3, r3, sl
 801e53c:	f040 8087 	bne.w	801e64e <_strtod_l+0x8e6>
 801e540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e544:	2b00      	cmp	r3, #0
 801e546:	f040 8082 	bne.w	801e64e <_strtod_l+0x8e6>
 801e54a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e54e:	0d1b      	lsrs	r3, r3, #20
 801e550:	051b      	lsls	r3, r3, #20
 801e552:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e556:	d97a      	bls.n	801e64e <_strtod_l+0x8e6>
 801e558:	696b      	ldr	r3, [r5, #20]
 801e55a:	b913      	cbnz	r3, 801e562 <_strtod_l+0x7fa>
 801e55c:	692b      	ldr	r3, [r5, #16]
 801e55e:	2b01      	cmp	r3, #1
 801e560:	dd75      	ble.n	801e64e <_strtod_l+0x8e6>
 801e562:	4629      	mov	r1, r5
 801e564:	2201      	movs	r2, #1
 801e566:	4620      	mov	r0, r4
 801e568:	f001 fffe 	bl	8020568 <__lshift>
 801e56c:	4631      	mov	r1, r6
 801e56e:	4605      	mov	r5, r0
 801e570:	f002 f866 	bl	8020640 <__mcmp>
 801e574:	2800      	cmp	r0, #0
 801e576:	dd6a      	ble.n	801e64e <_strtod_l+0x8e6>
 801e578:	9904      	ldr	r1, [sp, #16]
 801e57a:	4a55      	ldr	r2, [pc, #340]	; (801e6d0 <_strtod_l+0x968>)
 801e57c:	465b      	mov	r3, fp
 801e57e:	2900      	cmp	r1, #0
 801e580:	f000 8085 	beq.w	801e68e <_strtod_l+0x926>
 801e584:	ea02 010b 	and.w	r1, r2, fp
 801e588:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e58c:	dc7f      	bgt.n	801e68e <_strtod_l+0x926>
 801e58e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e592:	f77f aeaa 	ble.w	801e2ea <_strtod_l+0x582>
 801e596:	4a4f      	ldr	r2, [pc, #316]	; (801e6d4 <_strtod_l+0x96c>)
 801e598:	2300      	movs	r3, #0
 801e59a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e59e:	4650      	mov	r0, sl
 801e5a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e5a4:	4659      	mov	r1, fp
 801e5a6:	f7e2 f837 	bl	8000618 <__aeabi_dmul>
 801e5aa:	460b      	mov	r3, r1
 801e5ac:	4303      	orrs	r3, r0
 801e5ae:	bf08      	it	eq
 801e5b0:	2322      	moveq	r3, #34	; 0x22
 801e5b2:	4682      	mov	sl, r0
 801e5b4:	468b      	mov	fp, r1
 801e5b6:	bf08      	it	eq
 801e5b8:	6023      	streq	r3, [r4, #0]
 801e5ba:	e62b      	b.n	801e214 <_strtod_l+0x4ac>
 801e5bc:	f04f 32ff 	mov.w	r2, #4294967295
 801e5c0:	fa02 f303 	lsl.w	r3, r2, r3
 801e5c4:	ea03 0a0a 	and.w	sl, r3, sl
 801e5c8:	e6de      	b.n	801e388 <_strtod_l+0x620>
 801e5ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e5ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e5d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e5d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e5da:	fa01 f308 	lsl.w	r3, r1, r8
 801e5de:	930c      	str	r3, [sp, #48]	; 0x30
 801e5e0:	9111      	str	r1, [sp, #68]	; 0x44
 801e5e2:	e741      	b.n	801e468 <_strtod_l+0x700>
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	930c      	str	r3, [sp, #48]	; 0x30
 801e5e8:	2301      	movs	r3, #1
 801e5ea:	9311      	str	r3, [sp, #68]	; 0x44
 801e5ec:	e73c      	b.n	801e468 <_strtod_l+0x700>
 801e5ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e5f0:	4642      	mov	r2, r8
 801e5f2:	4620      	mov	r0, r4
 801e5f4:	f001 ffb8 	bl	8020568 <__lshift>
 801e5f8:	901e      	str	r0, [sp, #120]	; 0x78
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	f47f af66 	bne.w	801e4cc <_strtod_l+0x764>
 801e600:	e5fe      	b.n	801e200 <_strtod_l+0x498>
 801e602:	465f      	mov	r7, fp
 801e604:	d16e      	bne.n	801e6e4 <_strtod_l+0x97c>
 801e606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e60c:	b342      	cbz	r2, 801e660 <_strtod_l+0x8f8>
 801e60e:	4a32      	ldr	r2, [pc, #200]	; (801e6d8 <_strtod_l+0x970>)
 801e610:	4293      	cmp	r3, r2
 801e612:	d128      	bne.n	801e666 <_strtod_l+0x8fe>
 801e614:	9b04      	ldr	r3, [sp, #16]
 801e616:	4650      	mov	r0, sl
 801e618:	b1eb      	cbz	r3, 801e656 <_strtod_l+0x8ee>
 801e61a:	4a2d      	ldr	r2, [pc, #180]	; (801e6d0 <_strtod_l+0x968>)
 801e61c:	403a      	ands	r2, r7
 801e61e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e622:	f04f 31ff 	mov.w	r1, #4294967295
 801e626:	d819      	bhi.n	801e65c <_strtod_l+0x8f4>
 801e628:	0d12      	lsrs	r2, r2, #20
 801e62a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e62e:	fa01 f303 	lsl.w	r3, r1, r3
 801e632:	4298      	cmp	r0, r3
 801e634:	d117      	bne.n	801e666 <_strtod_l+0x8fe>
 801e636:	4b29      	ldr	r3, [pc, #164]	; (801e6dc <_strtod_l+0x974>)
 801e638:	429f      	cmp	r7, r3
 801e63a:	d102      	bne.n	801e642 <_strtod_l+0x8da>
 801e63c:	3001      	adds	r0, #1
 801e63e:	f43f addf 	beq.w	801e200 <_strtod_l+0x498>
 801e642:	4b23      	ldr	r3, [pc, #140]	; (801e6d0 <_strtod_l+0x968>)
 801e644:	403b      	ands	r3, r7
 801e646:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e64a:	f04f 0a00 	mov.w	sl, #0
 801e64e:	9b04      	ldr	r3, [sp, #16]
 801e650:	2b00      	cmp	r3, #0
 801e652:	d1a0      	bne.n	801e596 <_strtod_l+0x82e>
 801e654:	e5de      	b.n	801e214 <_strtod_l+0x4ac>
 801e656:	f04f 33ff 	mov.w	r3, #4294967295
 801e65a:	e7ea      	b.n	801e632 <_strtod_l+0x8ca>
 801e65c:	460b      	mov	r3, r1
 801e65e:	e7e8      	b.n	801e632 <_strtod_l+0x8ca>
 801e660:	ea53 030a 	orrs.w	r3, r3, sl
 801e664:	d088      	beq.n	801e578 <_strtod_l+0x810>
 801e666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e668:	b1db      	cbz	r3, 801e6a2 <_strtod_l+0x93a>
 801e66a:	423b      	tst	r3, r7
 801e66c:	d0ef      	beq.n	801e64e <_strtod_l+0x8e6>
 801e66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e670:	9a04      	ldr	r2, [sp, #16]
 801e672:	4650      	mov	r0, sl
 801e674:	4659      	mov	r1, fp
 801e676:	b1c3      	cbz	r3, 801e6aa <_strtod_l+0x942>
 801e678:	f7ff fb59 	bl	801dd2e <sulp>
 801e67c:	4602      	mov	r2, r0
 801e67e:	460b      	mov	r3, r1
 801e680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e684:	f7e1 fe12 	bl	80002ac <__adddf3>
 801e688:	4682      	mov	sl, r0
 801e68a:	468b      	mov	fp, r1
 801e68c:	e7df      	b.n	801e64e <_strtod_l+0x8e6>
 801e68e:	4013      	ands	r3, r2
 801e690:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e694:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e698:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e69c:	f04f 3aff 	mov.w	sl, #4294967295
 801e6a0:	e7d5      	b.n	801e64e <_strtod_l+0x8e6>
 801e6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6a4:	ea13 0f0a 	tst.w	r3, sl
 801e6a8:	e7e0      	b.n	801e66c <_strtod_l+0x904>
 801e6aa:	f7ff fb40 	bl	801dd2e <sulp>
 801e6ae:	4602      	mov	r2, r0
 801e6b0:	460b      	mov	r3, r1
 801e6b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e6b6:	f7e1 fdf7 	bl	80002a8 <__aeabi_dsub>
 801e6ba:	2200      	movs	r2, #0
 801e6bc:	2300      	movs	r3, #0
 801e6be:	4682      	mov	sl, r0
 801e6c0:	468b      	mov	fp, r1
 801e6c2:	f7e2 fa11 	bl	8000ae8 <__aeabi_dcmpeq>
 801e6c6:	2800      	cmp	r0, #0
 801e6c8:	d0c1      	beq.n	801e64e <_strtod_l+0x8e6>
 801e6ca:	e60e      	b.n	801e2ea <_strtod_l+0x582>
 801e6cc:	fffffc02 	.word	0xfffffc02
 801e6d0:	7ff00000 	.word	0x7ff00000
 801e6d4:	39500000 	.word	0x39500000
 801e6d8:	000fffff 	.word	0x000fffff
 801e6dc:	7fefffff 	.word	0x7fefffff
 801e6e0:	08029690 	.word	0x08029690
 801e6e4:	4631      	mov	r1, r6
 801e6e6:	4628      	mov	r0, r5
 801e6e8:	f002 f926 	bl	8020938 <__ratio>
 801e6ec:	ec59 8b10 	vmov	r8, r9, d0
 801e6f0:	ee10 0a10 	vmov	r0, s0
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e6fa:	4649      	mov	r1, r9
 801e6fc:	f7e2 fa08 	bl	8000b10 <__aeabi_dcmple>
 801e700:	2800      	cmp	r0, #0
 801e702:	d07c      	beq.n	801e7fe <_strtod_l+0xa96>
 801e704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e706:	2b00      	cmp	r3, #0
 801e708:	d04c      	beq.n	801e7a4 <_strtod_l+0xa3c>
 801e70a:	4b95      	ldr	r3, [pc, #596]	; (801e960 <_strtod_l+0xbf8>)
 801e70c:	2200      	movs	r2, #0
 801e70e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e712:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801e960 <_strtod_l+0xbf8>
 801e716:	f04f 0800 	mov.w	r8, #0
 801e71a:	4b92      	ldr	r3, [pc, #584]	; (801e964 <_strtod_l+0xbfc>)
 801e71c:	403b      	ands	r3, r7
 801e71e:	9311      	str	r3, [sp, #68]	; 0x44
 801e720:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e722:	4b91      	ldr	r3, [pc, #580]	; (801e968 <_strtod_l+0xc00>)
 801e724:	429a      	cmp	r2, r3
 801e726:	f040 80b2 	bne.w	801e88e <_strtod_l+0xb26>
 801e72a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e732:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e736:	ec4b ab10 	vmov	d0, sl, fp
 801e73a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e73e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e742:	f002 f821 	bl	8020788 <__ulp>
 801e746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e74a:	ec53 2b10 	vmov	r2, r3, d0
 801e74e:	f7e1 ff63 	bl	8000618 <__aeabi_dmul>
 801e752:	4652      	mov	r2, sl
 801e754:	465b      	mov	r3, fp
 801e756:	f7e1 fda9 	bl	80002ac <__adddf3>
 801e75a:	460b      	mov	r3, r1
 801e75c:	4981      	ldr	r1, [pc, #516]	; (801e964 <_strtod_l+0xbfc>)
 801e75e:	4a83      	ldr	r2, [pc, #524]	; (801e96c <_strtod_l+0xc04>)
 801e760:	4019      	ands	r1, r3
 801e762:	4291      	cmp	r1, r2
 801e764:	4682      	mov	sl, r0
 801e766:	d95e      	bls.n	801e826 <_strtod_l+0xabe>
 801e768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e76a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e76e:	4293      	cmp	r3, r2
 801e770:	d103      	bne.n	801e77a <_strtod_l+0xa12>
 801e772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e774:	3301      	adds	r3, #1
 801e776:	f43f ad43 	beq.w	801e200 <_strtod_l+0x498>
 801e77a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801e978 <_strtod_l+0xc10>
 801e77e:	f04f 3aff 	mov.w	sl, #4294967295
 801e782:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e784:	4620      	mov	r0, r4
 801e786:	f001 fcd3 	bl	8020130 <_Bfree>
 801e78a:	9907      	ldr	r1, [sp, #28]
 801e78c:	4620      	mov	r0, r4
 801e78e:	f001 fccf 	bl	8020130 <_Bfree>
 801e792:	4631      	mov	r1, r6
 801e794:	4620      	mov	r0, r4
 801e796:	f001 fccb 	bl	8020130 <_Bfree>
 801e79a:	4629      	mov	r1, r5
 801e79c:	4620      	mov	r0, r4
 801e79e:	f001 fcc7 	bl	8020130 <_Bfree>
 801e7a2:	e613      	b.n	801e3cc <_strtod_l+0x664>
 801e7a4:	f1ba 0f00 	cmp.w	sl, #0
 801e7a8:	d11b      	bne.n	801e7e2 <_strtod_l+0xa7a>
 801e7aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e7ae:	b9f3      	cbnz	r3, 801e7ee <_strtod_l+0xa86>
 801e7b0:	4b6b      	ldr	r3, [pc, #428]	; (801e960 <_strtod_l+0xbf8>)
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	4640      	mov	r0, r8
 801e7b6:	4649      	mov	r1, r9
 801e7b8:	f7e2 f9a0 	bl	8000afc <__aeabi_dcmplt>
 801e7bc:	b9d0      	cbnz	r0, 801e7f4 <_strtod_l+0xa8c>
 801e7be:	4640      	mov	r0, r8
 801e7c0:	4649      	mov	r1, r9
 801e7c2:	4b6b      	ldr	r3, [pc, #428]	; (801e970 <_strtod_l+0xc08>)
 801e7c4:	2200      	movs	r2, #0
 801e7c6:	f7e1 ff27 	bl	8000618 <__aeabi_dmul>
 801e7ca:	4680      	mov	r8, r0
 801e7cc:	4689      	mov	r9, r1
 801e7ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e7d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e7d6:	931b      	str	r3, [sp, #108]	; 0x6c
 801e7d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e7dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e7e0:	e79b      	b.n	801e71a <_strtod_l+0x9b2>
 801e7e2:	f1ba 0f01 	cmp.w	sl, #1
 801e7e6:	d102      	bne.n	801e7ee <_strtod_l+0xa86>
 801e7e8:	2f00      	cmp	r7, #0
 801e7ea:	f43f ad7e 	beq.w	801e2ea <_strtod_l+0x582>
 801e7ee:	4b61      	ldr	r3, [pc, #388]	; (801e974 <_strtod_l+0xc0c>)
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	e78c      	b.n	801e70e <_strtod_l+0x9a6>
 801e7f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801e970 <_strtod_l+0xc08>
 801e7f8:	f04f 0800 	mov.w	r8, #0
 801e7fc:	e7e7      	b.n	801e7ce <_strtod_l+0xa66>
 801e7fe:	4b5c      	ldr	r3, [pc, #368]	; (801e970 <_strtod_l+0xc08>)
 801e800:	4640      	mov	r0, r8
 801e802:	4649      	mov	r1, r9
 801e804:	2200      	movs	r2, #0
 801e806:	f7e1 ff07 	bl	8000618 <__aeabi_dmul>
 801e80a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e80c:	4680      	mov	r8, r0
 801e80e:	4689      	mov	r9, r1
 801e810:	b933      	cbnz	r3, 801e820 <_strtod_l+0xab8>
 801e812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e816:	9012      	str	r0, [sp, #72]	; 0x48
 801e818:	9313      	str	r3, [sp, #76]	; 0x4c
 801e81a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e81e:	e7dd      	b.n	801e7dc <_strtod_l+0xa74>
 801e820:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801e824:	e7f9      	b.n	801e81a <_strtod_l+0xab2>
 801e826:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801e82a:	9b04      	ldr	r3, [sp, #16]
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d1a8      	bne.n	801e782 <_strtod_l+0xa1a>
 801e830:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e834:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e836:	0d1b      	lsrs	r3, r3, #20
 801e838:	051b      	lsls	r3, r3, #20
 801e83a:	429a      	cmp	r2, r3
 801e83c:	d1a1      	bne.n	801e782 <_strtod_l+0xa1a>
 801e83e:	4640      	mov	r0, r8
 801e840:	4649      	mov	r1, r9
 801e842:	f7e2 fa99 	bl	8000d78 <__aeabi_d2lz>
 801e846:	f7e1 feb9 	bl	80005bc <__aeabi_l2d>
 801e84a:	4602      	mov	r2, r0
 801e84c:	460b      	mov	r3, r1
 801e84e:	4640      	mov	r0, r8
 801e850:	4649      	mov	r1, r9
 801e852:	f7e1 fd29 	bl	80002a8 <__aeabi_dsub>
 801e856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e858:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e85c:	ea43 030a 	orr.w	r3, r3, sl
 801e860:	4313      	orrs	r3, r2
 801e862:	4680      	mov	r8, r0
 801e864:	4689      	mov	r9, r1
 801e866:	d053      	beq.n	801e910 <_strtod_l+0xba8>
 801e868:	a335      	add	r3, pc, #212	; (adr r3, 801e940 <_strtod_l+0xbd8>)
 801e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e86e:	f7e2 f945 	bl	8000afc <__aeabi_dcmplt>
 801e872:	2800      	cmp	r0, #0
 801e874:	f47f acce 	bne.w	801e214 <_strtod_l+0x4ac>
 801e878:	a333      	add	r3, pc, #204	; (adr r3, 801e948 <_strtod_l+0xbe0>)
 801e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e87e:	4640      	mov	r0, r8
 801e880:	4649      	mov	r1, r9
 801e882:	f7e2 f959 	bl	8000b38 <__aeabi_dcmpgt>
 801e886:	2800      	cmp	r0, #0
 801e888:	f43f af7b 	beq.w	801e782 <_strtod_l+0xa1a>
 801e88c:	e4c2      	b.n	801e214 <_strtod_l+0x4ac>
 801e88e:	9b04      	ldr	r3, [sp, #16]
 801e890:	b333      	cbz	r3, 801e8e0 <_strtod_l+0xb78>
 801e892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e894:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e898:	d822      	bhi.n	801e8e0 <_strtod_l+0xb78>
 801e89a:	a32d      	add	r3, pc, #180	; (adr r3, 801e950 <_strtod_l+0xbe8>)
 801e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8a0:	4640      	mov	r0, r8
 801e8a2:	4649      	mov	r1, r9
 801e8a4:	f7e2 f934 	bl	8000b10 <__aeabi_dcmple>
 801e8a8:	b1a0      	cbz	r0, 801e8d4 <_strtod_l+0xb6c>
 801e8aa:	4649      	mov	r1, r9
 801e8ac:	4640      	mov	r0, r8
 801e8ae:	f7e2 f98b 	bl	8000bc8 <__aeabi_d2uiz>
 801e8b2:	2801      	cmp	r0, #1
 801e8b4:	bf38      	it	cc
 801e8b6:	2001      	movcc	r0, #1
 801e8b8:	f7e1 fe34 	bl	8000524 <__aeabi_ui2d>
 801e8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8be:	4680      	mov	r8, r0
 801e8c0:	4689      	mov	r9, r1
 801e8c2:	bb13      	cbnz	r3, 801e90a <_strtod_l+0xba2>
 801e8c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e8c8:	9014      	str	r0, [sp, #80]	; 0x50
 801e8ca:	9315      	str	r3, [sp, #84]	; 0x54
 801e8cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e8d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e8d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e8dc:	1a9b      	subs	r3, r3, r2
 801e8de:	930d      	str	r3, [sp, #52]	; 0x34
 801e8e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e8e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e8e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e8ec:	f001 ff4c 	bl	8020788 <__ulp>
 801e8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e8f4:	ec53 2b10 	vmov	r2, r3, d0
 801e8f8:	f7e1 fe8e 	bl	8000618 <__aeabi_dmul>
 801e8fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e900:	f7e1 fcd4 	bl	80002ac <__adddf3>
 801e904:	4682      	mov	sl, r0
 801e906:	468b      	mov	fp, r1
 801e908:	e78f      	b.n	801e82a <_strtod_l+0xac2>
 801e90a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801e90e:	e7dd      	b.n	801e8cc <_strtod_l+0xb64>
 801e910:	a311      	add	r3, pc, #68	; (adr r3, 801e958 <_strtod_l+0xbf0>)
 801e912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e916:	f7e2 f8f1 	bl	8000afc <__aeabi_dcmplt>
 801e91a:	e7b4      	b.n	801e886 <_strtod_l+0xb1e>
 801e91c:	2300      	movs	r3, #0
 801e91e:	930e      	str	r3, [sp, #56]	; 0x38
 801e920:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e922:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e924:	6013      	str	r3, [r2, #0]
 801e926:	f7ff ba65 	b.w	801ddf4 <_strtod_l+0x8c>
 801e92a:	2b65      	cmp	r3, #101	; 0x65
 801e92c:	f43f ab5d 	beq.w	801dfea <_strtod_l+0x282>
 801e930:	2b45      	cmp	r3, #69	; 0x45
 801e932:	f43f ab5a 	beq.w	801dfea <_strtod_l+0x282>
 801e936:	2201      	movs	r2, #1
 801e938:	f7ff bb92 	b.w	801e060 <_strtod_l+0x2f8>
 801e93c:	f3af 8000 	nop.w
 801e940:	94a03595 	.word	0x94a03595
 801e944:	3fdfffff 	.word	0x3fdfffff
 801e948:	35afe535 	.word	0x35afe535
 801e94c:	3fe00000 	.word	0x3fe00000
 801e950:	ffc00000 	.word	0xffc00000
 801e954:	41dfffff 	.word	0x41dfffff
 801e958:	94a03595 	.word	0x94a03595
 801e95c:	3fcfffff 	.word	0x3fcfffff
 801e960:	3ff00000 	.word	0x3ff00000
 801e964:	7ff00000 	.word	0x7ff00000
 801e968:	7fe00000 	.word	0x7fe00000
 801e96c:	7c9fffff 	.word	0x7c9fffff
 801e970:	3fe00000 	.word	0x3fe00000
 801e974:	bff00000 	.word	0xbff00000
 801e978:	7fefffff 	.word	0x7fefffff

0801e97c <_strtod_r>:
 801e97c:	4b01      	ldr	r3, [pc, #4]	; (801e984 <_strtod_r+0x8>)
 801e97e:	f7ff b9f3 	b.w	801dd68 <_strtod_l>
 801e982:	bf00      	nop
 801e984:	2000068c 	.word	0x2000068c

0801e988 <_strtol_l.isra.0>:
 801e988:	2b01      	cmp	r3, #1
 801e98a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e98e:	d001      	beq.n	801e994 <_strtol_l.isra.0+0xc>
 801e990:	2b24      	cmp	r3, #36	; 0x24
 801e992:	d906      	bls.n	801e9a2 <_strtol_l.isra.0+0x1a>
 801e994:	f7fe fae6 	bl	801cf64 <__errno>
 801e998:	2316      	movs	r3, #22
 801e99a:	6003      	str	r3, [r0, #0]
 801e99c:	2000      	movs	r0, #0
 801e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9a2:	4f3a      	ldr	r7, [pc, #232]	; (801ea8c <_strtol_l.isra.0+0x104>)
 801e9a4:	468e      	mov	lr, r1
 801e9a6:	4676      	mov	r6, lr
 801e9a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e9ac:	5de5      	ldrb	r5, [r4, r7]
 801e9ae:	f015 0508 	ands.w	r5, r5, #8
 801e9b2:	d1f8      	bne.n	801e9a6 <_strtol_l.isra.0+0x1e>
 801e9b4:	2c2d      	cmp	r4, #45	; 0x2d
 801e9b6:	d134      	bne.n	801ea22 <_strtol_l.isra.0+0x9a>
 801e9b8:	f89e 4000 	ldrb.w	r4, [lr]
 801e9bc:	f04f 0801 	mov.w	r8, #1
 801e9c0:	f106 0e02 	add.w	lr, r6, #2
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	d05c      	beq.n	801ea82 <_strtol_l.isra.0+0xfa>
 801e9c8:	2b10      	cmp	r3, #16
 801e9ca:	d10c      	bne.n	801e9e6 <_strtol_l.isra.0+0x5e>
 801e9cc:	2c30      	cmp	r4, #48	; 0x30
 801e9ce:	d10a      	bne.n	801e9e6 <_strtol_l.isra.0+0x5e>
 801e9d0:	f89e 4000 	ldrb.w	r4, [lr]
 801e9d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e9d8:	2c58      	cmp	r4, #88	; 0x58
 801e9da:	d14d      	bne.n	801ea78 <_strtol_l.isra.0+0xf0>
 801e9dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801e9e0:	2310      	movs	r3, #16
 801e9e2:	f10e 0e02 	add.w	lr, lr, #2
 801e9e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801e9ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e9ee:	2600      	movs	r6, #0
 801e9f0:	fbbc f9f3 	udiv	r9, ip, r3
 801e9f4:	4635      	mov	r5, r6
 801e9f6:	fb03 ca19 	mls	sl, r3, r9, ip
 801e9fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801e9fe:	2f09      	cmp	r7, #9
 801ea00:	d818      	bhi.n	801ea34 <_strtol_l.isra.0+0xac>
 801ea02:	463c      	mov	r4, r7
 801ea04:	42a3      	cmp	r3, r4
 801ea06:	dd24      	ble.n	801ea52 <_strtol_l.isra.0+0xca>
 801ea08:	2e00      	cmp	r6, #0
 801ea0a:	db1f      	blt.n	801ea4c <_strtol_l.isra.0+0xc4>
 801ea0c:	45a9      	cmp	r9, r5
 801ea0e:	d31d      	bcc.n	801ea4c <_strtol_l.isra.0+0xc4>
 801ea10:	d101      	bne.n	801ea16 <_strtol_l.isra.0+0x8e>
 801ea12:	45a2      	cmp	sl, r4
 801ea14:	db1a      	blt.n	801ea4c <_strtol_l.isra.0+0xc4>
 801ea16:	fb05 4503 	mla	r5, r5, r3, r4
 801ea1a:	2601      	movs	r6, #1
 801ea1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ea20:	e7eb      	b.n	801e9fa <_strtol_l.isra.0+0x72>
 801ea22:	2c2b      	cmp	r4, #43	; 0x2b
 801ea24:	bf08      	it	eq
 801ea26:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ea2a:	46a8      	mov	r8, r5
 801ea2c:	bf08      	it	eq
 801ea2e:	f106 0e02 	addeq.w	lr, r6, #2
 801ea32:	e7c7      	b.n	801e9c4 <_strtol_l.isra.0+0x3c>
 801ea34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ea38:	2f19      	cmp	r7, #25
 801ea3a:	d801      	bhi.n	801ea40 <_strtol_l.isra.0+0xb8>
 801ea3c:	3c37      	subs	r4, #55	; 0x37
 801ea3e:	e7e1      	b.n	801ea04 <_strtol_l.isra.0+0x7c>
 801ea40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ea44:	2f19      	cmp	r7, #25
 801ea46:	d804      	bhi.n	801ea52 <_strtol_l.isra.0+0xca>
 801ea48:	3c57      	subs	r4, #87	; 0x57
 801ea4a:	e7db      	b.n	801ea04 <_strtol_l.isra.0+0x7c>
 801ea4c:	f04f 36ff 	mov.w	r6, #4294967295
 801ea50:	e7e4      	b.n	801ea1c <_strtol_l.isra.0+0x94>
 801ea52:	2e00      	cmp	r6, #0
 801ea54:	da05      	bge.n	801ea62 <_strtol_l.isra.0+0xda>
 801ea56:	2322      	movs	r3, #34	; 0x22
 801ea58:	6003      	str	r3, [r0, #0]
 801ea5a:	4665      	mov	r5, ip
 801ea5c:	b942      	cbnz	r2, 801ea70 <_strtol_l.isra.0+0xe8>
 801ea5e:	4628      	mov	r0, r5
 801ea60:	e79d      	b.n	801e99e <_strtol_l.isra.0+0x16>
 801ea62:	f1b8 0f00 	cmp.w	r8, #0
 801ea66:	d000      	beq.n	801ea6a <_strtol_l.isra.0+0xe2>
 801ea68:	426d      	negs	r5, r5
 801ea6a:	2a00      	cmp	r2, #0
 801ea6c:	d0f7      	beq.n	801ea5e <_strtol_l.isra.0+0xd6>
 801ea6e:	b10e      	cbz	r6, 801ea74 <_strtol_l.isra.0+0xec>
 801ea70:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ea74:	6011      	str	r1, [r2, #0]
 801ea76:	e7f2      	b.n	801ea5e <_strtol_l.isra.0+0xd6>
 801ea78:	2430      	movs	r4, #48	; 0x30
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d1b3      	bne.n	801e9e6 <_strtol_l.isra.0+0x5e>
 801ea7e:	2308      	movs	r3, #8
 801ea80:	e7b1      	b.n	801e9e6 <_strtol_l.isra.0+0x5e>
 801ea82:	2c30      	cmp	r4, #48	; 0x30
 801ea84:	d0a4      	beq.n	801e9d0 <_strtol_l.isra.0+0x48>
 801ea86:	230a      	movs	r3, #10
 801ea88:	e7ad      	b.n	801e9e6 <_strtol_l.isra.0+0x5e>
 801ea8a:	bf00      	nop
 801ea8c:	080296b9 	.word	0x080296b9

0801ea90 <_strtol_r>:
 801ea90:	f7ff bf7a 	b.w	801e988 <_strtol_l.isra.0>

0801ea94 <quorem>:
 801ea94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea98:	6903      	ldr	r3, [r0, #16]
 801ea9a:	690c      	ldr	r4, [r1, #16]
 801ea9c:	42a3      	cmp	r3, r4
 801ea9e:	4607      	mov	r7, r0
 801eaa0:	f2c0 8081 	blt.w	801eba6 <quorem+0x112>
 801eaa4:	3c01      	subs	r4, #1
 801eaa6:	f101 0814 	add.w	r8, r1, #20
 801eaaa:	f100 0514 	add.w	r5, r0, #20
 801eaae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eab2:	9301      	str	r3, [sp, #4]
 801eab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801eab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eabc:	3301      	adds	r3, #1
 801eabe:	429a      	cmp	r2, r3
 801eac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801eac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801eac8:	fbb2 f6f3 	udiv	r6, r2, r3
 801eacc:	d331      	bcc.n	801eb32 <quorem+0x9e>
 801eace:	f04f 0e00 	mov.w	lr, #0
 801ead2:	4640      	mov	r0, r8
 801ead4:	46ac      	mov	ip, r5
 801ead6:	46f2      	mov	sl, lr
 801ead8:	f850 2b04 	ldr.w	r2, [r0], #4
 801eadc:	b293      	uxth	r3, r2
 801eade:	fb06 e303 	mla	r3, r6, r3, lr
 801eae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801eae6:	b29b      	uxth	r3, r3
 801eae8:	ebaa 0303 	sub.w	r3, sl, r3
 801eaec:	0c12      	lsrs	r2, r2, #16
 801eaee:	f8dc a000 	ldr.w	sl, [ip]
 801eaf2:	fb06 e202 	mla	r2, r6, r2, lr
 801eaf6:	fa13 f38a 	uxtah	r3, r3, sl
 801eafa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801eafe:	fa1f fa82 	uxth.w	sl, r2
 801eb02:	f8dc 2000 	ldr.w	r2, [ip]
 801eb06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801eb0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eb14:	4581      	cmp	r9, r0
 801eb16:	f84c 3b04 	str.w	r3, [ip], #4
 801eb1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801eb1e:	d2db      	bcs.n	801ead8 <quorem+0x44>
 801eb20:	f855 300b 	ldr.w	r3, [r5, fp]
 801eb24:	b92b      	cbnz	r3, 801eb32 <quorem+0x9e>
 801eb26:	9b01      	ldr	r3, [sp, #4]
 801eb28:	3b04      	subs	r3, #4
 801eb2a:	429d      	cmp	r5, r3
 801eb2c:	461a      	mov	r2, r3
 801eb2e:	d32e      	bcc.n	801eb8e <quorem+0xfa>
 801eb30:	613c      	str	r4, [r7, #16]
 801eb32:	4638      	mov	r0, r7
 801eb34:	f001 fd84 	bl	8020640 <__mcmp>
 801eb38:	2800      	cmp	r0, #0
 801eb3a:	db24      	blt.n	801eb86 <quorem+0xf2>
 801eb3c:	3601      	adds	r6, #1
 801eb3e:	4628      	mov	r0, r5
 801eb40:	f04f 0c00 	mov.w	ip, #0
 801eb44:	f858 2b04 	ldr.w	r2, [r8], #4
 801eb48:	f8d0 e000 	ldr.w	lr, [r0]
 801eb4c:	b293      	uxth	r3, r2
 801eb4e:	ebac 0303 	sub.w	r3, ip, r3
 801eb52:	0c12      	lsrs	r2, r2, #16
 801eb54:	fa13 f38e 	uxtah	r3, r3, lr
 801eb58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801eb5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801eb60:	b29b      	uxth	r3, r3
 801eb62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801eb66:	45c1      	cmp	r9, r8
 801eb68:	f840 3b04 	str.w	r3, [r0], #4
 801eb6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801eb70:	d2e8      	bcs.n	801eb44 <quorem+0xb0>
 801eb72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eb76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eb7a:	b922      	cbnz	r2, 801eb86 <quorem+0xf2>
 801eb7c:	3b04      	subs	r3, #4
 801eb7e:	429d      	cmp	r5, r3
 801eb80:	461a      	mov	r2, r3
 801eb82:	d30a      	bcc.n	801eb9a <quorem+0x106>
 801eb84:	613c      	str	r4, [r7, #16]
 801eb86:	4630      	mov	r0, r6
 801eb88:	b003      	add	sp, #12
 801eb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb8e:	6812      	ldr	r2, [r2, #0]
 801eb90:	3b04      	subs	r3, #4
 801eb92:	2a00      	cmp	r2, #0
 801eb94:	d1cc      	bne.n	801eb30 <quorem+0x9c>
 801eb96:	3c01      	subs	r4, #1
 801eb98:	e7c7      	b.n	801eb2a <quorem+0x96>
 801eb9a:	6812      	ldr	r2, [r2, #0]
 801eb9c:	3b04      	subs	r3, #4
 801eb9e:	2a00      	cmp	r2, #0
 801eba0:	d1f0      	bne.n	801eb84 <quorem+0xf0>
 801eba2:	3c01      	subs	r4, #1
 801eba4:	e7eb      	b.n	801eb7e <quorem+0xea>
 801eba6:	2000      	movs	r0, #0
 801eba8:	e7ee      	b.n	801eb88 <quorem+0xf4>
 801ebaa:	0000      	movs	r0, r0
 801ebac:	0000      	movs	r0, r0
	...

0801ebb0 <_dtoa_r>:
 801ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebb4:	ed2d 8b02 	vpush	{d8}
 801ebb8:	ec57 6b10 	vmov	r6, r7, d0
 801ebbc:	b095      	sub	sp, #84	; 0x54
 801ebbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ebc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ebc4:	9105      	str	r1, [sp, #20]
 801ebc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ebca:	4604      	mov	r4, r0
 801ebcc:	9209      	str	r2, [sp, #36]	; 0x24
 801ebce:	930f      	str	r3, [sp, #60]	; 0x3c
 801ebd0:	b975      	cbnz	r5, 801ebf0 <_dtoa_r+0x40>
 801ebd2:	2010      	movs	r0, #16
 801ebd4:	f001 fa44 	bl	8020060 <malloc>
 801ebd8:	4602      	mov	r2, r0
 801ebda:	6260      	str	r0, [r4, #36]	; 0x24
 801ebdc:	b920      	cbnz	r0, 801ebe8 <_dtoa_r+0x38>
 801ebde:	4bb2      	ldr	r3, [pc, #712]	; (801eea8 <_dtoa_r+0x2f8>)
 801ebe0:	21ea      	movs	r1, #234	; 0xea
 801ebe2:	48b2      	ldr	r0, [pc, #712]	; (801eeac <_dtoa_r+0x2fc>)
 801ebe4:	f002 fa82 	bl	80210ec <__assert_func>
 801ebe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ebec:	6005      	str	r5, [r0, #0]
 801ebee:	60c5      	str	r5, [r0, #12]
 801ebf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ebf2:	6819      	ldr	r1, [r3, #0]
 801ebf4:	b151      	cbz	r1, 801ec0c <_dtoa_r+0x5c>
 801ebf6:	685a      	ldr	r2, [r3, #4]
 801ebf8:	604a      	str	r2, [r1, #4]
 801ebfa:	2301      	movs	r3, #1
 801ebfc:	4093      	lsls	r3, r2
 801ebfe:	608b      	str	r3, [r1, #8]
 801ec00:	4620      	mov	r0, r4
 801ec02:	f001 fa95 	bl	8020130 <_Bfree>
 801ec06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ec08:	2200      	movs	r2, #0
 801ec0a:	601a      	str	r2, [r3, #0]
 801ec0c:	1e3b      	subs	r3, r7, #0
 801ec0e:	bfb9      	ittee	lt
 801ec10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ec14:	9303      	strlt	r3, [sp, #12]
 801ec16:	2300      	movge	r3, #0
 801ec18:	f8c8 3000 	strge.w	r3, [r8]
 801ec1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ec20:	4ba3      	ldr	r3, [pc, #652]	; (801eeb0 <_dtoa_r+0x300>)
 801ec22:	bfbc      	itt	lt
 801ec24:	2201      	movlt	r2, #1
 801ec26:	f8c8 2000 	strlt.w	r2, [r8]
 801ec2a:	ea33 0309 	bics.w	r3, r3, r9
 801ec2e:	d11b      	bne.n	801ec68 <_dtoa_r+0xb8>
 801ec30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec32:	f242 730f 	movw	r3, #9999	; 0x270f
 801ec36:	6013      	str	r3, [r2, #0]
 801ec38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ec3c:	4333      	orrs	r3, r6
 801ec3e:	f000 857a 	beq.w	801f736 <_dtoa_r+0xb86>
 801ec42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ec44:	b963      	cbnz	r3, 801ec60 <_dtoa_r+0xb0>
 801ec46:	4b9b      	ldr	r3, [pc, #620]	; (801eeb4 <_dtoa_r+0x304>)
 801ec48:	e024      	b.n	801ec94 <_dtoa_r+0xe4>
 801ec4a:	4b9b      	ldr	r3, [pc, #620]	; (801eeb8 <_dtoa_r+0x308>)
 801ec4c:	9300      	str	r3, [sp, #0]
 801ec4e:	3308      	adds	r3, #8
 801ec50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ec52:	6013      	str	r3, [r2, #0]
 801ec54:	9800      	ldr	r0, [sp, #0]
 801ec56:	b015      	add	sp, #84	; 0x54
 801ec58:	ecbd 8b02 	vpop	{d8}
 801ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec60:	4b94      	ldr	r3, [pc, #592]	; (801eeb4 <_dtoa_r+0x304>)
 801ec62:	9300      	str	r3, [sp, #0]
 801ec64:	3303      	adds	r3, #3
 801ec66:	e7f3      	b.n	801ec50 <_dtoa_r+0xa0>
 801ec68:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ec6c:	2200      	movs	r2, #0
 801ec6e:	ec51 0b17 	vmov	r0, r1, d7
 801ec72:	2300      	movs	r3, #0
 801ec74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ec78:	f7e1 ff36 	bl	8000ae8 <__aeabi_dcmpeq>
 801ec7c:	4680      	mov	r8, r0
 801ec7e:	b158      	cbz	r0, 801ec98 <_dtoa_r+0xe8>
 801ec80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec82:	2301      	movs	r3, #1
 801ec84:	6013      	str	r3, [r2, #0]
 801ec86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	f000 8551 	beq.w	801f730 <_dtoa_r+0xb80>
 801ec8e:	488b      	ldr	r0, [pc, #556]	; (801eebc <_dtoa_r+0x30c>)
 801ec90:	6018      	str	r0, [r3, #0]
 801ec92:	1e43      	subs	r3, r0, #1
 801ec94:	9300      	str	r3, [sp, #0]
 801ec96:	e7dd      	b.n	801ec54 <_dtoa_r+0xa4>
 801ec98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ec9c:	aa12      	add	r2, sp, #72	; 0x48
 801ec9e:	a913      	add	r1, sp, #76	; 0x4c
 801eca0:	4620      	mov	r0, r4
 801eca2:	f001 fded 	bl	8020880 <__d2b>
 801eca6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ecaa:	4683      	mov	fp, r0
 801ecac:	2d00      	cmp	r5, #0
 801ecae:	d07c      	beq.n	801edaa <_dtoa_r+0x1fa>
 801ecb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ecb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ecba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ecbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ecc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ecc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ecca:	4b7d      	ldr	r3, [pc, #500]	; (801eec0 <_dtoa_r+0x310>)
 801eccc:	2200      	movs	r2, #0
 801ecce:	4630      	mov	r0, r6
 801ecd0:	4639      	mov	r1, r7
 801ecd2:	f7e1 fae9 	bl	80002a8 <__aeabi_dsub>
 801ecd6:	a36e      	add	r3, pc, #440	; (adr r3, 801ee90 <_dtoa_r+0x2e0>)
 801ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecdc:	f7e1 fc9c 	bl	8000618 <__aeabi_dmul>
 801ece0:	a36d      	add	r3, pc, #436	; (adr r3, 801ee98 <_dtoa_r+0x2e8>)
 801ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ece6:	f7e1 fae1 	bl	80002ac <__adddf3>
 801ecea:	4606      	mov	r6, r0
 801ecec:	4628      	mov	r0, r5
 801ecee:	460f      	mov	r7, r1
 801ecf0:	f7e1 fc28 	bl	8000544 <__aeabi_i2d>
 801ecf4:	a36a      	add	r3, pc, #424	; (adr r3, 801eea0 <_dtoa_r+0x2f0>)
 801ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecfa:	f7e1 fc8d 	bl	8000618 <__aeabi_dmul>
 801ecfe:	4602      	mov	r2, r0
 801ed00:	460b      	mov	r3, r1
 801ed02:	4630      	mov	r0, r6
 801ed04:	4639      	mov	r1, r7
 801ed06:	f7e1 fad1 	bl	80002ac <__adddf3>
 801ed0a:	4606      	mov	r6, r0
 801ed0c:	460f      	mov	r7, r1
 801ed0e:	f7e1 ff33 	bl	8000b78 <__aeabi_d2iz>
 801ed12:	2200      	movs	r2, #0
 801ed14:	4682      	mov	sl, r0
 801ed16:	2300      	movs	r3, #0
 801ed18:	4630      	mov	r0, r6
 801ed1a:	4639      	mov	r1, r7
 801ed1c:	f7e1 feee 	bl	8000afc <__aeabi_dcmplt>
 801ed20:	b148      	cbz	r0, 801ed36 <_dtoa_r+0x186>
 801ed22:	4650      	mov	r0, sl
 801ed24:	f7e1 fc0e 	bl	8000544 <__aeabi_i2d>
 801ed28:	4632      	mov	r2, r6
 801ed2a:	463b      	mov	r3, r7
 801ed2c:	f7e1 fedc 	bl	8000ae8 <__aeabi_dcmpeq>
 801ed30:	b908      	cbnz	r0, 801ed36 <_dtoa_r+0x186>
 801ed32:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed36:	f1ba 0f16 	cmp.w	sl, #22
 801ed3a:	d854      	bhi.n	801ede6 <_dtoa_r+0x236>
 801ed3c:	4b61      	ldr	r3, [pc, #388]	; (801eec4 <_dtoa_r+0x314>)
 801ed3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ed4a:	f7e1 fed7 	bl	8000afc <__aeabi_dcmplt>
 801ed4e:	2800      	cmp	r0, #0
 801ed50:	d04b      	beq.n	801edea <_dtoa_r+0x23a>
 801ed52:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed56:	2300      	movs	r3, #0
 801ed58:	930e      	str	r3, [sp, #56]	; 0x38
 801ed5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ed5c:	1b5d      	subs	r5, r3, r5
 801ed5e:	1e6b      	subs	r3, r5, #1
 801ed60:	9304      	str	r3, [sp, #16]
 801ed62:	bf43      	ittte	mi
 801ed64:	2300      	movmi	r3, #0
 801ed66:	f1c5 0801 	rsbmi	r8, r5, #1
 801ed6a:	9304      	strmi	r3, [sp, #16]
 801ed6c:	f04f 0800 	movpl.w	r8, #0
 801ed70:	f1ba 0f00 	cmp.w	sl, #0
 801ed74:	db3b      	blt.n	801edee <_dtoa_r+0x23e>
 801ed76:	9b04      	ldr	r3, [sp, #16]
 801ed78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ed7c:	4453      	add	r3, sl
 801ed7e:	9304      	str	r3, [sp, #16]
 801ed80:	2300      	movs	r3, #0
 801ed82:	9306      	str	r3, [sp, #24]
 801ed84:	9b05      	ldr	r3, [sp, #20]
 801ed86:	2b09      	cmp	r3, #9
 801ed88:	d869      	bhi.n	801ee5e <_dtoa_r+0x2ae>
 801ed8a:	2b05      	cmp	r3, #5
 801ed8c:	bfc4      	itt	gt
 801ed8e:	3b04      	subgt	r3, #4
 801ed90:	9305      	strgt	r3, [sp, #20]
 801ed92:	9b05      	ldr	r3, [sp, #20]
 801ed94:	f1a3 0302 	sub.w	r3, r3, #2
 801ed98:	bfcc      	ite	gt
 801ed9a:	2500      	movgt	r5, #0
 801ed9c:	2501      	movle	r5, #1
 801ed9e:	2b03      	cmp	r3, #3
 801eda0:	d869      	bhi.n	801ee76 <_dtoa_r+0x2c6>
 801eda2:	e8df f003 	tbb	[pc, r3]
 801eda6:	4e2c      	.short	0x4e2c
 801eda8:	5a4c      	.short	0x5a4c
 801edaa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801edae:	441d      	add	r5, r3
 801edb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801edb4:	2b20      	cmp	r3, #32
 801edb6:	bfc1      	itttt	gt
 801edb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801edbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801edc0:	fa09 f303 	lslgt.w	r3, r9, r3
 801edc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801edc8:	bfda      	itte	le
 801edca:	f1c3 0320 	rsble	r3, r3, #32
 801edce:	fa06 f003 	lslle.w	r0, r6, r3
 801edd2:	4318      	orrgt	r0, r3
 801edd4:	f7e1 fba6 	bl	8000524 <__aeabi_ui2d>
 801edd8:	2301      	movs	r3, #1
 801edda:	4606      	mov	r6, r0
 801eddc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ede0:	3d01      	subs	r5, #1
 801ede2:	9310      	str	r3, [sp, #64]	; 0x40
 801ede4:	e771      	b.n	801ecca <_dtoa_r+0x11a>
 801ede6:	2301      	movs	r3, #1
 801ede8:	e7b6      	b.n	801ed58 <_dtoa_r+0x1a8>
 801edea:	900e      	str	r0, [sp, #56]	; 0x38
 801edec:	e7b5      	b.n	801ed5a <_dtoa_r+0x1aa>
 801edee:	f1ca 0300 	rsb	r3, sl, #0
 801edf2:	9306      	str	r3, [sp, #24]
 801edf4:	2300      	movs	r3, #0
 801edf6:	eba8 080a 	sub.w	r8, r8, sl
 801edfa:	930d      	str	r3, [sp, #52]	; 0x34
 801edfc:	e7c2      	b.n	801ed84 <_dtoa_r+0x1d4>
 801edfe:	2300      	movs	r3, #0
 801ee00:	9308      	str	r3, [sp, #32]
 801ee02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	dc39      	bgt.n	801ee7c <_dtoa_r+0x2cc>
 801ee08:	f04f 0901 	mov.w	r9, #1
 801ee0c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ee10:	464b      	mov	r3, r9
 801ee12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ee16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ee18:	2200      	movs	r2, #0
 801ee1a:	6042      	str	r2, [r0, #4]
 801ee1c:	2204      	movs	r2, #4
 801ee1e:	f102 0614 	add.w	r6, r2, #20
 801ee22:	429e      	cmp	r6, r3
 801ee24:	6841      	ldr	r1, [r0, #4]
 801ee26:	d92f      	bls.n	801ee88 <_dtoa_r+0x2d8>
 801ee28:	4620      	mov	r0, r4
 801ee2a:	f001 f941 	bl	80200b0 <_Balloc>
 801ee2e:	9000      	str	r0, [sp, #0]
 801ee30:	2800      	cmp	r0, #0
 801ee32:	d14b      	bne.n	801eecc <_dtoa_r+0x31c>
 801ee34:	4b24      	ldr	r3, [pc, #144]	; (801eec8 <_dtoa_r+0x318>)
 801ee36:	4602      	mov	r2, r0
 801ee38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ee3c:	e6d1      	b.n	801ebe2 <_dtoa_r+0x32>
 801ee3e:	2301      	movs	r3, #1
 801ee40:	e7de      	b.n	801ee00 <_dtoa_r+0x250>
 801ee42:	2300      	movs	r3, #0
 801ee44:	9308      	str	r3, [sp, #32]
 801ee46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee48:	eb0a 0903 	add.w	r9, sl, r3
 801ee4c:	f109 0301 	add.w	r3, r9, #1
 801ee50:	2b01      	cmp	r3, #1
 801ee52:	9301      	str	r3, [sp, #4]
 801ee54:	bfb8      	it	lt
 801ee56:	2301      	movlt	r3, #1
 801ee58:	e7dd      	b.n	801ee16 <_dtoa_r+0x266>
 801ee5a:	2301      	movs	r3, #1
 801ee5c:	e7f2      	b.n	801ee44 <_dtoa_r+0x294>
 801ee5e:	2501      	movs	r5, #1
 801ee60:	2300      	movs	r3, #0
 801ee62:	9305      	str	r3, [sp, #20]
 801ee64:	9508      	str	r5, [sp, #32]
 801ee66:	f04f 39ff 	mov.w	r9, #4294967295
 801ee6a:	2200      	movs	r2, #0
 801ee6c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ee70:	2312      	movs	r3, #18
 801ee72:	9209      	str	r2, [sp, #36]	; 0x24
 801ee74:	e7cf      	b.n	801ee16 <_dtoa_r+0x266>
 801ee76:	2301      	movs	r3, #1
 801ee78:	9308      	str	r3, [sp, #32]
 801ee7a:	e7f4      	b.n	801ee66 <_dtoa_r+0x2b6>
 801ee7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ee80:	f8cd 9004 	str.w	r9, [sp, #4]
 801ee84:	464b      	mov	r3, r9
 801ee86:	e7c6      	b.n	801ee16 <_dtoa_r+0x266>
 801ee88:	3101      	adds	r1, #1
 801ee8a:	6041      	str	r1, [r0, #4]
 801ee8c:	0052      	lsls	r2, r2, #1
 801ee8e:	e7c6      	b.n	801ee1e <_dtoa_r+0x26e>
 801ee90:	636f4361 	.word	0x636f4361
 801ee94:	3fd287a7 	.word	0x3fd287a7
 801ee98:	8b60c8b3 	.word	0x8b60c8b3
 801ee9c:	3fc68a28 	.word	0x3fc68a28
 801eea0:	509f79fb 	.word	0x509f79fb
 801eea4:	3fd34413 	.word	0x3fd34413
 801eea8:	080297c6 	.word	0x080297c6
 801eeac:	080297dd 	.word	0x080297dd
 801eeb0:	7ff00000 	.word	0x7ff00000
 801eeb4:	080297c2 	.word	0x080297c2
 801eeb8:	080297b9 	.word	0x080297b9
 801eebc:	08029639 	.word	0x08029639
 801eec0:	3ff80000 	.word	0x3ff80000
 801eec4:	080299b8 	.word	0x080299b8
 801eec8:	0802983c 	.word	0x0802983c
 801eecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eece:	9a00      	ldr	r2, [sp, #0]
 801eed0:	601a      	str	r2, [r3, #0]
 801eed2:	9b01      	ldr	r3, [sp, #4]
 801eed4:	2b0e      	cmp	r3, #14
 801eed6:	f200 80ad 	bhi.w	801f034 <_dtoa_r+0x484>
 801eeda:	2d00      	cmp	r5, #0
 801eedc:	f000 80aa 	beq.w	801f034 <_dtoa_r+0x484>
 801eee0:	f1ba 0f00 	cmp.w	sl, #0
 801eee4:	dd36      	ble.n	801ef54 <_dtoa_r+0x3a4>
 801eee6:	4ac3      	ldr	r2, [pc, #780]	; (801f1f4 <_dtoa_r+0x644>)
 801eee8:	f00a 030f 	and.w	r3, sl, #15
 801eeec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801eef0:	ed93 7b00 	vldr	d7, [r3]
 801eef4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801eef8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801eefc:	eeb0 8a47 	vmov.f32	s16, s14
 801ef00:	eef0 8a67 	vmov.f32	s17, s15
 801ef04:	d016      	beq.n	801ef34 <_dtoa_r+0x384>
 801ef06:	4bbc      	ldr	r3, [pc, #752]	; (801f1f8 <_dtoa_r+0x648>)
 801ef08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ef0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ef10:	f7e1 fcac 	bl	800086c <__aeabi_ddiv>
 801ef14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef18:	f007 070f 	and.w	r7, r7, #15
 801ef1c:	2503      	movs	r5, #3
 801ef1e:	4eb6      	ldr	r6, [pc, #728]	; (801f1f8 <_dtoa_r+0x648>)
 801ef20:	b957      	cbnz	r7, 801ef38 <_dtoa_r+0x388>
 801ef22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef26:	ec53 2b18 	vmov	r2, r3, d8
 801ef2a:	f7e1 fc9f 	bl	800086c <__aeabi_ddiv>
 801ef2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef32:	e029      	b.n	801ef88 <_dtoa_r+0x3d8>
 801ef34:	2502      	movs	r5, #2
 801ef36:	e7f2      	b.n	801ef1e <_dtoa_r+0x36e>
 801ef38:	07f9      	lsls	r1, r7, #31
 801ef3a:	d508      	bpl.n	801ef4e <_dtoa_r+0x39e>
 801ef3c:	ec51 0b18 	vmov	r0, r1, d8
 801ef40:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ef44:	f7e1 fb68 	bl	8000618 <__aeabi_dmul>
 801ef48:	ec41 0b18 	vmov	d8, r0, r1
 801ef4c:	3501      	adds	r5, #1
 801ef4e:	107f      	asrs	r7, r7, #1
 801ef50:	3608      	adds	r6, #8
 801ef52:	e7e5      	b.n	801ef20 <_dtoa_r+0x370>
 801ef54:	f000 80a6 	beq.w	801f0a4 <_dtoa_r+0x4f4>
 801ef58:	f1ca 0600 	rsb	r6, sl, #0
 801ef5c:	4ba5      	ldr	r3, [pc, #660]	; (801f1f4 <_dtoa_r+0x644>)
 801ef5e:	4fa6      	ldr	r7, [pc, #664]	; (801f1f8 <_dtoa_r+0x648>)
 801ef60:	f006 020f 	and.w	r2, r6, #15
 801ef64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ef70:	f7e1 fb52 	bl	8000618 <__aeabi_dmul>
 801ef74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef78:	1136      	asrs	r6, r6, #4
 801ef7a:	2300      	movs	r3, #0
 801ef7c:	2502      	movs	r5, #2
 801ef7e:	2e00      	cmp	r6, #0
 801ef80:	f040 8085 	bne.w	801f08e <_dtoa_r+0x4de>
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	d1d2      	bne.n	801ef2e <_dtoa_r+0x37e>
 801ef88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	f000 808c 	beq.w	801f0a8 <_dtoa_r+0x4f8>
 801ef90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ef94:	4b99      	ldr	r3, [pc, #612]	; (801f1fc <_dtoa_r+0x64c>)
 801ef96:	2200      	movs	r2, #0
 801ef98:	4630      	mov	r0, r6
 801ef9a:	4639      	mov	r1, r7
 801ef9c:	f7e1 fdae 	bl	8000afc <__aeabi_dcmplt>
 801efa0:	2800      	cmp	r0, #0
 801efa2:	f000 8081 	beq.w	801f0a8 <_dtoa_r+0x4f8>
 801efa6:	9b01      	ldr	r3, [sp, #4]
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d07d      	beq.n	801f0a8 <_dtoa_r+0x4f8>
 801efac:	f1b9 0f00 	cmp.w	r9, #0
 801efb0:	dd3c      	ble.n	801f02c <_dtoa_r+0x47c>
 801efb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801efb6:	9307      	str	r3, [sp, #28]
 801efb8:	2200      	movs	r2, #0
 801efba:	4b91      	ldr	r3, [pc, #580]	; (801f200 <_dtoa_r+0x650>)
 801efbc:	4630      	mov	r0, r6
 801efbe:	4639      	mov	r1, r7
 801efc0:	f7e1 fb2a 	bl	8000618 <__aeabi_dmul>
 801efc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efc8:	3501      	adds	r5, #1
 801efca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801efce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801efd2:	4628      	mov	r0, r5
 801efd4:	f7e1 fab6 	bl	8000544 <__aeabi_i2d>
 801efd8:	4632      	mov	r2, r6
 801efda:	463b      	mov	r3, r7
 801efdc:	f7e1 fb1c 	bl	8000618 <__aeabi_dmul>
 801efe0:	4b88      	ldr	r3, [pc, #544]	; (801f204 <_dtoa_r+0x654>)
 801efe2:	2200      	movs	r2, #0
 801efe4:	f7e1 f962 	bl	80002ac <__adddf3>
 801efe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801efec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eff0:	9303      	str	r3, [sp, #12]
 801eff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	d15c      	bne.n	801f0b2 <_dtoa_r+0x502>
 801eff8:	4b83      	ldr	r3, [pc, #524]	; (801f208 <_dtoa_r+0x658>)
 801effa:	2200      	movs	r2, #0
 801effc:	4630      	mov	r0, r6
 801effe:	4639      	mov	r1, r7
 801f000:	f7e1 f952 	bl	80002a8 <__aeabi_dsub>
 801f004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f008:	4606      	mov	r6, r0
 801f00a:	460f      	mov	r7, r1
 801f00c:	f7e1 fd94 	bl	8000b38 <__aeabi_dcmpgt>
 801f010:	2800      	cmp	r0, #0
 801f012:	f040 8296 	bne.w	801f542 <_dtoa_r+0x992>
 801f016:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f01a:	4630      	mov	r0, r6
 801f01c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f020:	4639      	mov	r1, r7
 801f022:	f7e1 fd6b 	bl	8000afc <__aeabi_dcmplt>
 801f026:	2800      	cmp	r0, #0
 801f028:	f040 8288 	bne.w	801f53c <_dtoa_r+0x98c>
 801f02c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f030:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f034:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f036:	2b00      	cmp	r3, #0
 801f038:	f2c0 8158 	blt.w	801f2ec <_dtoa_r+0x73c>
 801f03c:	f1ba 0f0e 	cmp.w	sl, #14
 801f040:	f300 8154 	bgt.w	801f2ec <_dtoa_r+0x73c>
 801f044:	4b6b      	ldr	r3, [pc, #428]	; (801f1f4 <_dtoa_r+0x644>)
 801f046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f04a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f050:	2b00      	cmp	r3, #0
 801f052:	f280 80e3 	bge.w	801f21c <_dtoa_r+0x66c>
 801f056:	9b01      	ldr	r3, [sp, #4]
 801f058:	2b00      	cmp	r3, #0
 801f05a:	f300 80df 	bgt.w	801f21c <_dtoa_r+0x66c>
 801f05e:	f040 826d 	bne.w	801f53c <_dtoa_r+0x98c>
 801f062:	4b69      	ldr	r3, [pc, #420]	; (801f208 <_dtoa_r+0x658>)
 801f064:	2200      	movs	r2, #0
 801f066:	4640      	mov	r0, r8
 801f068:	4649      	mov	r1, r9
 801f06a:	f7e1 fad5 	bl	8000618 <__aeabi_dmul>
 801f06e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f072:	f7e1 fd57 	bl	8000b24 <__aeabi_dcmpge>
 801f076:	9e01      	ldr	r6, [sp, #4]
 801f078:	4637      	mov	r7, r6
 801f07a:	2800      	cmp	r0, #0
 801f07c:	f040 8243 	bne.w	801f506 <_dtoa_r+0x956>
 801f080:	9d00      	ldr	r5, [sp, #0]
 801f082:	2331      	movs	r3, #49	; 0x31
 801f084:	f805 3b01 	strb.w	r3, [r5], #1
 801f088:	f10a 0a01 	add.w	sl, sl, #1
 801f08c:	e23f      	b.n	801f50e <_dtoa_r+0x95e>
 801f08e:	07f2      	lsls	r2, r6, #31
 801f090:	d505      	bpl.n	801f09e <_dtoa_r+0x4ee>
 801f092:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f096:	f7e1 fabf 	bl	8000618 <__aeabi_dmul>
 801f09a:	3501      	adds	r5, #1
 801f09c:	2301      	movs	r3, #1
 801f09e:	1076      	asrs	r6, r6, #1
 801f0a0:	3708      	adds	r7, #8
 801f0a2:	e76c      	b.n	801ef7e <_dtoa_r+0x3ce>
 801f0a4:	2502      	movs	r5, #2
 801f0a6:	e76f      	b.n	801ef88 <_dtoa_r+0x3d8>
 801f0a8:	9b01      	ldr	r3, [sp, #4]
 801f0aa:	f8cd a01c 	str.w	sl, [sp, #28]
 801f0ae:	930c      	str	r3, [sp, #48]	; 0x30
 801f0b0:	e78d      	b.n	801efce <_dtoa_r+0x41e>
 801f0b2:	9900      	ldr	r1, [sp, #0]
 801f0b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f0b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f0b8:	4b4e      	ldr	r3, [pc, #312]	; (801f1f4 <_dtoa_r+0x644>)
 801f0ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f0be:	4401      	add	r1, r0
 801f0c0:	9102      	str	r1, [sp, #8]
 801f0c2:	9908      	ldr	r1, [sp, #32]
 801f0c4:	eeb0 8a47 	vmov.f32	s16, s14
 801f0c8:	eef0 8a67 	vmov.f32	s17, s15
 801f0cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f0d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f0d4:	2900      	cmp	r1, #0
 801f0d6:	d045      	beq.n	801f164 <_dtoa_r+0x5b4>
 801f0d8:	494c      	ldr	r1, [pc, #304]	; (801f20c <_dtoa_r+0x65c>)
 801f0da:	2000      	movs	r0, #0
 801f0dc:	f7e1 fbc6 	bl	800086c <__aeabi_ddiv>
 801f0e0:	ec53 2b18 	vmov	r2, r3, d8
 801f0e4:	f7e1 f8e0 	bl	80002a8 <__aeabi_dsub>
 801f0e8:	9d00      	ldr	r5, [sp, #0]
 801f0ea:	ec41 0b18 	vmov	d8, r0, r1
 801f0ee:	4639      	mov	r1, r7
 801f0f0:	4630      	mov	r0, r6
 801f0f2:	f7e1 fd41 	bl	8000b78 <__aeabi_d2iz>
 801f0f6:	900c      	str	r0, [sp, #48]	; 0x30
 801f0f8:	f7e1 fa24 	bl	8000544 <__aeabi_i2d>
 801f0fc:	4602      	mov	r2, r0
 801f0fe:	460b      	mov	r3, r1
 801f100:	4630      	mov	r0, r6
 801f102:	4639      	mov	r1, r7
 801f104:	f7e1 f8d0 	bl	80002a8 <__aeabi_dsub>
 801f108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f10a:	3330      	adds	r3, #48	; 0x30
 801f10c:	f805 3b01 	strb.w	r3, [r5], #1
 801f110:	ec53 2b18 	vmov	r2, r3, d8
 801f114:	4606      	mov	r6, r0
 801f116:	460f      	mov	r7, r1
 801f118:	f7e1 fcf0 	bl	8000afc <__aeabi_dcmplt>
 801f11c:	2800      	cmp	r0, #0
 801f11e:	d165      	bne.n	801f1ec <_dtoa_r+0x63c>
 801f120:	4632      	mov	r2, r6
 801f122:	463b      	mov	r3, r7
 801f124:	4935      	ldr	r1, [pc, #212]	; (801f1fc <_dtoa_r+0x64c>)
 801f126:	2000      	movs	r0, #0
 801f128:	f7e1 f8be 	bl	80002a8 <__aeabi_dsub>
 801f12c:	ec53 2b18 	vmov	r2, r3, d8
 801f130:	f7e1 fce4 	bl	8000afc <__aeabi_dcmplt>
 801f134:	2800      	cmp	r0, #0
 801f136:	f040 80b9 	bne.w	801f2ac <_dtoa_r+0x6fc>
 801f13a:	9b02      	ldr	r3, [sp, #8]
 801f13c:	429d      	cmp	r5, r3
 801f13e:	f43f af75 	beq.w	801f02c <_dtoa_r+0x47c>
 801f142:	4b2f      	ldr	r3, [pc, #188]	; (801f200 <_dtoa_r+0x650>)
 801f144:	ec51 0b18 	vmov	r0, r1, d8
 801f148:	2200      	movs	r2, #0
 801f14a:	f7e1 fa65 	bl	8000618 <__aeabi_dmul>
 801f14e:	4b2c      	ldr	r3, [pc, #176]	; (801f200 <_dtoa_r+0x650>)
 801f150:	ec41 0b18 	vmov	d8, r0, r1
 801f154:	2200      	movs	r2, #0
 801f156:	4630      	mov	r0, r6
 801f158:	4639      	mov	r1, r7
 801f15a:	f7e1 fa5d 	bl	8000618 <__aeabi_dmul>
 801f15e:	4606      	mov	r6, r0
 801f160:	460f      	mov	r7, r1
 801f162:	e7c4      	b.n	801f0ee <_dtoa_r+0x53e>
 801f164:	ec51 0b17 	vmov	r0, r1, d7
 801f168:	f7e1 fa56 	bl	8000618 <__aeabi_dmul>
 801f16c:	9b02      	ldr	r3, [sp, #8]
 801f16e:	9d00      	ldr	r5, [sp, #0]
 801f170:	930c      	str	r3, [sp, #48]	; 0x30
 801f172:	ec41 0b18 	vmov	d8, r0, r1
 801f176:	4639      	mov	r1, r7
 801f178:	4630      	mov	r0, r6
 801f17a:	f7e1 fcfd 	bl	8000b78 <__aeabi_d2iz>
 801f17e:	9011      	str	r0, [sp, #68]	; 0x44
 801f180:	f7e1 f9e0 	bl	8000544 <__aeabi_i2d>
 801f184:	4602      	mov	r2, r0
 801f186:	460b      	mov	r3, r1
 801f188:	4630      	mov	r0, r6
 801f18a:	4639      	mov	r1, r7
 801f18c:	f7e1 f88c 	bl	80002a8 <__aeabi_dsub>
 801f190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f192:	3330      	adds	r3, #48	; 0x30
 801f194:	f805 3b01 	strb.w	r3, [r5], #1
 801f198:	9b02      	ldr	r3, [sp, #8]
 801f19a:	429d      	cmp	r5, r3
 801f19c:	4606      	mov	r6, r0
 801f19e:	460f      	mov	r7, r1
 801f1a0:	f04f 0200 	mov.w	r2, #0
 801f1a4:	d134      	bne.n	801f210 <_dtoa_r+0x660>
 801f1a6:	4b19      	ldr	r3, [pc, #100]	; (801f20c <_dtoa_r+0x65c>)
 801f1a8:	ec51 0b18 	vmov	r0, r1, d8
 801f1ac:	f7e1 f87e 	bl	80002ac <__adddf3>
 801f1b0:	4602      	mov	r2, r0
 801f1b2:	460b      	mov	r3, r1
 801f1b4:	4630      	mov	r0, r6
 801f1b6:	4639      	mov	r1, r7
 801f1b8:	f7e1 fcbe 	bl	8000b38 <__aeabi_dcmpgt>
 801f1bc:	2800      	cmp	r0, #0
 801f1be:	d175      	bne.n	801f2ac <_dtoa_r+0x6fc>
 801f1c0:	ec53 2b18 	vmov	r2, r3, d8
 801f1c4:	4911      	ldr	r1, [pc, #68]	; (801f20c <_dtoa_r+0x65c>)
 801f1c6:	2000      	movs	r0, #0
 801f1c8:	f7e1 f86e 	bl	80002a8 <__aeabi_dsub>
 801f1cc:	4602      	mov	r2, r0
 801f1ce:	460b      	mov	r3, r1
 801f1d0:	4630      	mov	r0, r6
 801f1d2:	4639      	mov	r1, r7
 801f1d4:	f7e1 fc92 	bl	8000afc <__aeabi_dcmplt>
 801f1d8:	2800      	cmp	r0, #0
 801f1da:	f43f af27 	beq.w	801f02c <_dtoa_r+0x47c>
 801f1de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f1e0:	1e6b      	subs	r3, r5, #1
 801f1e2:	930c      	str	r3, [sp, #48]	; 0x30
 801f1e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f1e8:	2b30      	cmp	r3, #48	; 0x30
 801f1ea:	d0f8      	beq.n	801f1de <_dtoa_r+0x62e>
 801f1ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f1f0:	e04a      	b.n	801f288 <_dtoa_r+0x6d8>
 801f1f2:	bf00      	nop
 801f1f4:	080299b8 	.word	0x080299b8
 801f1f8:	08029990 	.word	0x08029990
 801f1fc:	3ff00000 	.word	0x3ff00000
 801f200:	40240000 	.word	0x40240000
 801f204:	401c0000 	.word	0x401c0000
 801f208:	40140000 	.word	0x40140000
 801f20c:	3fe00000 	.word	0x3fe00000
 801f210:	4baf      	ldr	r3, [pc, #700]	; (801f4d0 <_dtoa_r+0x920>)
 801f212:	f7e1 fa01 	bl	8000618 <__aeabi_dmul>
 801f216:	4606      	mov	r6, r0
 801f218:	460f      	mov	r7, r1
 801f21a:	e7ac      	b.n	801f176 <_dtoa_r+0x5c6>
 801f21c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f220:	9d00      	ldr	r5, [sp, #0]
 801f222:	4642      	mov	r2, r8
 801f224:	464b      	mov	r3, r9
 801f226:	4630      	mov	r0, r6
 801f228:	4639      	mov	r1, r7
 801f22a:	f7e1 fb1f 	bl	800086c <__aeabi_ddiv>
 801f22e:	f7e1 fca3 	bl	8000b78 <__aeabi_d2iz>
 801f232:	9002      	str	r0, [sp, #8]
 801f234:	f7e1 f986 	bl	8000544 <__aeabi_i2d>
 801f238:	4642      	mov	r2, r8
 801f23a:	464b      	mov	r3, r9
 801f23c:	f7e1 f9ec 	bl	8000618 <__aeabi_dmul>
 801f240:	4602      	mov	r2, r0
 801f242:	460b      	mov	r3, r1
 801f244:	4630      	mov	r0, r6
 801f246:	4639      	mov	r1, r7
 801f248:	f7e1 f82e 	bl	80002a8 <__aeabi_dsub>
 801f24c:	9e02      	ldr	r6, [sp, #8]
 801f24e:	9f01      	ldr	r7, [sp, #4]
 801f250:	3630      	adds	r6, #48	; 0x30
 801f252:	f805 6b01 	strb.w	r6, [r5], #1
 801f256:	9e00      	ldr	r6, [sp, #0]
 801f258:	1bae      	subs	r6, r5, r6
 801f25a:	42b7      	cmp	r7, r6
 801f25c:	4602      	mov	r2, r0
 801f25e:	460b      	mov	r3, r1
 801f260:	d137      	bne.n	801f2d2 <_dtoa_r+0x722>
 801f262:	f7e1 f823 	bl	80002ac <__adddf3>
 801f266:	4642      	mov	r2, r8
 801f268:	464b      	mov	r3, r9
 801f26a:	4606      	mov	r6, r0
 801f26c:	460f      	mov	r7, r1
 801f26e:	f7e1 fc63 	bl	8000b38 <__aeabi_dcmpgt>
 801f272:	b9c8      	cbnz	r0, 801f2a8 <_dtoa_r+0x6f8>
 801f274:	4642      	mov	r2, r8
 801f276:	464b      	mov	r3, r9
 801f278:	4630      	mov	r0, r6
 801f27a:	4639      	mov	r1, r7
 801f27c:	f7e1 fc34 	bl	8000ae8 <__aeabi_dcmpeq>
 801f280:	b110      	cbz	r0, 801f288 <_dtoa_r+0x6d8>
 801f282:	9b02      	ldr	r3, [sp, #8]
 801f284:	07d9      	lsls	r1, r3, #31
 801f286:	d40f      	bmi.n	801f2a8 <_dtoa_r+0x6f8>
 801f288:	4620      	mov	r0, r4
 801f28a:	4659      	mov	r1, fp
 801f28c:	f000 ff50 	bl	8020130 <_Bfree>
 801f290:	2300      	movs	r3, #0
 801f292:	702b      	strb	r3, [r5, #0]
 801f294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f296:	f10a 0001 	add.w	r0, sl, #1
 801f29a:	6018      	str	r0, [r3, #0]
 801f29c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	f43f acd8 	beq.w	801ec54 <_dtoa_r+0xa4>
 801f2a4:	601d      	str	r5, [r3, #0]
 801f2a6:	e4d5      	b.n	801ec54 <_dtoa_r+0xa4>
 801f2a8:	f8cd a01c 	str.w	sl, [sp, #28]
 801f2ac:	462b      	mov	r3, r5
 801f2ae:	461d      	mov	r5, r3
 801f2b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f2b4:	2a39      	cmp	r2, #57	; 0x39
 801f2b6:	d108      	bne.n	801f2ca <_dtoa_r+0x71a>
 801f2b8:	9a00      	ldr	r2, [sp, #0]
 801f2ba:	429a      	cmp	r2, r3
 801f2bc:	d1f7      	bne.n	801f2ae <_dtoa_r+0x6fe>
 801f2be:	9a07      	ldr	r2, [sp, #28]
 801f2c0:	9900      	ldr	r1, [sp, #0]
 801f2c2:	3201      	adds	r2, #1
 801f2c4:	9207      	str	r2, [sp, #28]
 801f2c6:	2230      	movs	r2, #48	; 0x30
 801f2c8:	700a      	strb	r2, [r1, #0]
 801f2ca:	781a      	ldrb	r2, [r3, #0]
 801f2cc:	3201      	adds	r2, #1
 801f2ce:	701a      	strb	r2, [r3, #0]
 801f2d0:	e78c      	b.n	801f1ec <_dtoa_r+0x63c>
 801f2d2:	4b7f      	ldr	r3, [pc, #508]	; (801f4d0 <_dtoa_r+0x920>)
 801f2d4:	2200      	movs	r2, #0
 801f2d6:	f7e1 f99f 	bl	8000618 <__aeabi_dmul>
 801f2da:	2200      	movs	r2, #0
 801f2dc:	2300      	movs	r3, #0
 801f2de:	4606      	mov	r6, r0
 801f2e0:	460f      	mov	r7, r1
 801f2e2:	f7e1 fc01 	bl	8000ae8 <__aeabi_dcmpeq>
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	d09b      	beq.n	801f222 <_dtoa_r+0x672>
 801f2ea:	e7cd      	b.n	801f288 <_dtoa_r+0x6d8>
 801f2ec:	9a08      	ldr	r2, [sp, #32]
 801f2ee:	2a00      	cmp	r2, #0
 801f2f0:	f000 80c4 	beq.w	801f47c <_dtoa_r+0x8cc>
 801f2f4:	9a05      	ldr	r2, [sp, #20]
 801f2f6:	2a01      	cmp	r2, #1
 801f2f8:	f300 80a8 	bgt.w	801f44c <_dtoa_r+0x89c>
 801f2fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f2fe:	2a00      	cmp	r2, #0
 801f300:	f000 80a0 	beq.w	801f444 <_dtoa_r+0x894>
 801f304:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f308:	9e06      	ldr	r6, [sp, #24]
 801f30a:	4645      	mov	r5, r8
 801f30c:	9a04      	ldr	r2, [sp, #16]
 801f30e:	2101      	movs	r1, #1
 801f310:	441a      	add	r2, r3
 801f312:	4620      	mov	r0, r4
 801f314:	4498      	add	r8, r3
 801f316:	9204      	str	r2, [sp, #16]
 801f318:	f001 f810 	bl	802033c <__i2b>
 801f31c:	4607      	mov	r7, r0
 801f31e:	2d00      	cmp	r5, #0
 801f320:	dd0b      	ble.n	801f33a <_dtoa_r+0x78a>
 801f322:	9b04      	ldr	r3, [sp, #16]
 801f324:	2b00      	cmp	r3, #0
 801f326:	dd08      	ble.n	801f33a <_dtoa_r+0x78a>
 801f328:	42ab      	cmp	r3, r5
 801f32a:	9a04      	ldr	r2, [sp, #16]
 801f32c:	bfa8      	it	ge
 801f32e:	462b      	movge	r3, r5
 801f330:	eba8 0803 	sub.w	r8, r8, r3
 801f334:	1aed      	subs	r5, r5, r3
 801f336:	1ad3      	subs	r3, r2, r3
 801f338:	9304      	str	r3, [sp, #16]
 801f33a:	9b06      	ldr	r3, [sp, #24]
 801f33c:	b1fb      	cbz	r3, 801f37e <_dtoa_r+0x7ce>
 801f33e:	9b08      	ldr	r3, [sp, #32]
 801f340:	2b00      	cmp	r3, #0
 801f342:	f000 809f 	beq.w	801f484 <_dtoa_r+0x8d4>
 801f346:	2e00      	cmp	r6, #0
 801f348:	dd11      	ble.n	801f36e <_dtoa_r+0x7be>
 801f34a:	4639      	mov	r1, r7
 801f34c:	4632      	mov	r2, r6
 801f34e:	4620      	mov	r0, r4
 801f350:	f001 f8b0 	bl	80204b4 <__pow5mult>
 801f354:	465a      	mov	r2, fp
 801f356:	4601      	mov	r1, r0
 801f358:	4607      	mov	r7, r0
 801f35a:	4620      	mov	r0, r4
 801f35c:	f001 f804 	bl	8020368 <__multiply>
 801f360:	4659      	mov	r1, fp
 801f362:	9007      	str	r0, [sp, #28]
 801f364:	4620      	mov	r0, r4
 801f366:	f000 fee3 	bl	8020130 <_Bfree>
 801f36a:	9b07      	ldr	r3, [sp, #28]
 801f36c:	469b      	mov	fp, r3
 801f36e:	9b06      	ldr	r3, [sp, #24]
 801f370:	1b9a      	subs	r2, r3, r6
 801f372:	d004      	beq.n	801f37e <_dtoa_r+0x7ce>
 801f374:	4659      	mov	r1, fp
 801f376:	4620      	mov	r0, r4
 801f378:	f001 f89c 	bl	80204b4 <__pow5mult>
 801f37c:	4683      	mov	fp, r0
 801f37e:	2101      	movs	r1, #1
 801f380:	4620      	mov	r0, r4
 801f382:	f000 ffdb 	bl	802033c <__i2b>
 801f386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f388:	2b00      	cmp	r3, #0
 801f38a:	4606      	mov	r6, r0
 801f38c:	dd7c      	ble.n	801f488 <_dtoa_r+0x8d8>
 801f38e:	461a      	mov	r2, r3
 801f390:	4601      	mov	r1, r0
 801f392:	4620      	mov	r0, r4
 801f394:	f001 f88e 	bl	80204b4 <__pow5mult>
 801f398:	9b05      	ldr	r3, [sp, #20]
 801f39a:	2b01      	cmp	r3, #1
 801f39c:	4606      	mov	r6, r0
 801f39e:	dd76      	ble.n	801f48e <_dtoa_r+0x8de>
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	9306      	str	r3, [sp, #24]
 801f3a4:	6933      	ldr	r3, [r6, #16]
 801f3a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f3aa:	6918      	ldr	r0, [r3, #16]
 801f3ac:	f000 ff76 	bl	802029c <__hi0bits>
 801f3b0:	f1c0 0020 	rsb	r0, r0, #32
 801f3b4:	9b04      	ldr	r3, [sp, #16]
 801f3b6:	4418      	add	r0, r3
 801f3b8:	f010 001f 	ands.w	r0, r0, #31
 801f3bc:	f000 8086 	beq.w	801f4cc <_dtoa_r+0x91c>
 801f3c0:	f1c0 0320 	rsb	r3, r0, #32
 801f3c4:	2b04      	cmp	r3, #4
 801f3c6:	dd7f      	ble.n	801f4c8 <_dtoa_r+0x918>
 801f3c8:	f1c0 001c 	rsb	r0, r0, #28
 801f3cc:	9b04      	ldr	r3, [sp, #16]
 801f3ce:	4403      	add	r3, r0
 801f3d0:	4480      	add	r8, r0
 801f3d2:	4405      	add	r5, r0
 801f3d4:	9304      	str	r3, [sp, #16]
 801f3d6:	f1b8 0f00 	cmp.w	r8, #0
 801f3da:	dd05      	ble.n	801f3e8 <_dtoa_r+0x838>
 801f3dc:	4659      	mov	r1, fp
 801f3de:	4642      	mov	r2, r8
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f001 f8c1 	bl	8020568 <__lshift>
 801f3e6:	4683      	mov	fp, r0
 801f3e8:	9b04      	ldr	r3, [sp, #16]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	dd05      	ble.n	801f3fa <_dtoa_r+0x84a>
 801f3ee:	4631      	mov	r1, r6
 801f3f0:	461a      	mov	r2, r3
 801f3f2:	4620      	mov	r0, r4
 801f3f4:	f001 f8b8 	bl	8020568 <__lshift>
 801f3f8:	4606      	mov	r6, r0
 801f3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d069      	beq.n	801f4d4 <_dtoa_r+0x924>
 801f400:	4631      	mov	r1, r6
 801f402:	4658      	mov	r0, fp
 801f404:	f001 f91c 	bl	8020640 <__mcmp>
 801f408:	2800      	cmp	r0, #0
 801f40a:	da63      	bge.n	801f4d4 <_dtoa_r+0x924>
 801f40c:	2300      	movs	r3, #0
 801f40e:	4659      	mov	r1, fp
 801f410:	220a      	movs	r2, #10
 801f412:	4620      	mov	r0, r4
 801f414:	f000 feae 	bl	8020174 <__multadd>
 801f418:	9b08      	ldr	r3, [sp, #32]
 801f41a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f41e:	4683      	mov	fp, r0
 801f420:	2b00      	cmp	r3, #0
 801f422:	f000 818f 	beq.w	801f744 <_dtoa_r+0xb94>
 801f426:	4639      	mov	r1, r7
 801f428:	2300      	movs	r3, #0
 801f42a:	220a      	movs	r2, #10
 801f42c:	4620      	mov	r0, r4
 801f42e:	f000 fea1 	bl	8020174 <__multadd>
 801f432:	f1b9 0f00 	cmp.w	r9, #0
 801f436:	4607      	mov	r7, r0
 801f438:	f300 808e 	bgt.w	801f558 <_dtoa_r+0x9a8>
 801f43c:	9b05      	ldr	r3, [sp, #20]
 801f43e:	2b02      	cmp	r3, #2
 801f440:	dc50      	bgt.n	801f4e4 <_dtoa_r+0x934>
 801f442:	e089      	b.n	801f558 <_dtoa_r+0x9a8>
 801f444:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f446:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f44a:	e75d      	b.n	801f308 <_dtoa_r+0x758>
 801f44c:	9b01      	ldr	r3, [sp, #4]
 801f44e:	1e5e      	subs	r6, r3, #1
 801f450:	9b06      	ldr	r3, [sp, #24]
 801f452:	42b3      	cmp	r3, r6
 801f454:	bfbf      	itttt	lt
 801f456:	9b06      	ldrlt	r3, [sp, #24]
 801f458:	9606      	strlt	r6, [sp, #24]
 801f45a:	1af2      	sublt	r2, r6, r3
 801f45c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f45e:	bfb6      	itet	lt
 801f460:	189b      	addlt	r3, r3, r2
 801f462:	1b9e      	subge	r6, r3, r6
 801f464:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f466:	9b01      	ldr	r3, [sp, #4]
 801f468:	bfb8      	it	lt
 801f46a:	2600      	movlt	r6, #0
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	bfb5      	itete	lt
 801f470:	eba8 0503 	sublt.w	r5, r8, r3
 801f474:	9b01      	ldrge	r3, [sp, #4]
 801f476:	2300      	movlt	r3, #0
 801f478:	4645      	movge	r5, r8
 801f47a:	e747      	b.n	801f30c <_dtoa_r+0x75c>
 801f47c:	9e06      	ldr	r6, [sp, #24]
 801f47e:	9f08      	ldr	r7, [sp, #32]
 801f480:	4645      	mov	r5, r8
 801f482:	e74c      	b.n	801f31e <_dtoa_r+0x76e>
 801f484:	9a06      	ldr	r2, [sp, #24]
 801f486:	e775      	b.n	801f374 <_dtoa_r+0x7c4>
 801f488:	9b05      	ldr	r3, [sp, #20]
 801f48a:	2b01      	cmp	r3, #1
 801f48c:	dc18      	bgt.n	801f4c0 <_dtoa_r+0x910>
 801f48e:	9b02      	ldr	r3, [sp, #8]
 801f490:	b9b3      	cbnz	r3, 801f4c0 <_dtoa_r+0x910>
 801f492:	9b03      	ldr	r3, [sp, #12]
 801f494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f498:	b9a3      	cbnz	r3, 801f4c4 <_dtoa_r+0x914>
 801f49a:	9b03      	ldr	r3, [sp, #12]
 801f49c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f4a0:	0d1b      	lsrs	r3, r3, #20
 801f4a2:	051b      	lsls	r3, r3, #20
 801f4a4:	b12b      	cbz	r3, 801f4b2 <_dtoa_r+0x902>
 801f4a6:	9b04      	ldr	r3, [sp, #16]
 801f4a8:	3301      	adds	r3, #1
 801f4aa:	9304      	str	r3, [sp, #16]
 801f4ac:	f108 0801 	add.w	r8, r8, #1
 801f4b0:	2301      	movs	r3, #1
 801f4b2:	9306      	str	r3, [sp, #24]
 801f4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	f47f af74 	bne.w	801f3a4 <_dtoa_r+0x7f4>
 801f4bc:	2001      	movs	r0, #1
 801f4be:	e779      	b.n	801f3b4 <_dtoa_r+0x804>
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	e7f6      	b.n	801f4b2 <_dtoa_r+0x902>
 801f4c4:	9b02      	ldr	r3, [sp, #8]
 801f4c6:	e7f4      	b.n	801f4b2 <_dtoa_r+0x902>
 801f4c8:	d085      	beq.n	801f3d6 <_dtoa_r+0x826>
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	301c      	adds	r0, #28
 801f4ce:	e77d      	b.n	801f3cc <_dtoa_r+0x81c>
 801f4d0:	40240000 	.word	0x40240000
 801f4d4:	9b01      	ldr	r3, [sp, #4]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	dc38      	bgt.n	801f54c <_dtoa_r+0x99c>
 801f4da:	9b05      	ldr	r3, [sp, #20]
 801f4dc:	2b02      	cmp	r3, #2
 801f4de:	dd35      	ble.n	801f54c <_dtoa_r+0x99c>
 801f4e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f4e4:	f1b9 0f00 	cmp.w	r9, #0
 801f4e8:	d10d      	bne.n	801f506 <_dtoa_r+0x956>
 801f4ea:	4631      	mov	r1, r6
 801f4ec:	464b      	mov	r3, r9
 801f4ee:	2205      	movs	r2, #5
 801f4f0:	4620      	mov	r0, r4
 801f4f2:	f000 fe3f 	bl	8020174 <__multadd>
 801f4f6:	4601      	mov	r1, r0
 801f4f8:	4606      	mov	r6, r0
 801f4fa:	4658      	mov	r0, fp
 801f4fc:	f001 f8a0 	bl	8020640 <__mcmp>
 801f500:	2800      	cmp	r0, #0
 801f502:	f73f adbd 	bgt.w	801f080 <_dtoa_r+0x4d0>
 801f506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f508:	9d00      	ldr	r5, [sp, #0]
 801f50a:	ea6f 0a03 	mvn.w	sl, r3
 801f50e:	f04f 0800 	mov.w	r8, #0
 801f512:	4631      	mov	r1, r6
 801f514:	4620      	mov	r0, r4
 801f516:	f000 fe0b 	bl	8020130 <_Bfree>
 801f51a:	2f00      	cmp	r7, #0
 801f51c:	f43f aeb4 	beq.w	801f288 <_dtoa_r+0x6d8>
 801f520:	f1b8 0f00 	cmp.w	r8, #0
 801f524:	d005      	beq.n	801f532 <_dtoa_r+0x982>
 801f526:	45b8      	cmp	r8, r7
 801f528:	d003      	beq.n	801f532 <_dtoa_r+0x982>
 801f52a:	4641      	mov	r1, r8
 801f52c:	4620      	mov	r0, r4
 801f52e:	f000 fdff 	bl	8020130 <_Bfree>
 801f532:	4639      	mov	r1, r7
 801f534:	4620      	mov	r0, r4
 801f536:	f000 fdfb 	bl	8020130 <_Bfree>
 801f53a:	e6a5      	b.n	801f288 <_dtoa_r+0x6d8>
 801f53c:	2600      	movs	r6, #0
 801f53e:	4637      	mov	r7, r6
 801f540:	e7e1      	b.n	801f506 <_dtoa_r+0x956>
 801f542:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f544:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f548:	4637      	mov	r7, r6
 801f54a:	e599      	b.n	801f080 <_dtoa_r+0x4d0>
 801f54c:	9b08      	ldr	r3, [sp, #32]
 801f54e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f552:	2b00      	cmp	r3, #0
 801f554:	f000 80fd 	beq.w	801f752 <_dtoa_r+0xba2>
 801f558:	2d00      	cmp	r5, #0
 801f55a:	dd05      	ble.n	801f568 <_dtoa_r+0x9b8>
 801f55c:	4639      	mov	r1, r7
 801f55e:	462a      	mov	r2, r5
 801f560:	4620      	mov	r0, r4
 801f562:	f001 f801 	bl	8020568 <__lshift>
 801f566:	4607      	mov	r7, r0
 801f568:	9b06      	ldr	r3, [sp, #24]
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d05c      	beq.n	801f628 <_dtoa_r+0xa78>
 801f56e:	6879      	ldr	r1, [r7, #4]
 801f570:	4620      	mov	r0, r4
 801f572:	f000 fd9d 	bl	80200b0 <_Balloc>
 801f576:	4605      	mov	r5, r0
 801f578:	b928      	cbnz	r0, 801f586 <_dtoa_r+0x9d6>
 801f57a:	4b80      	ldr	r3, [pc, #512]	; (801f77c <_dtoa_r+0xbcc>)
 801f57c:	4602      	mov	r2, r0
 801f57e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f582:	f7ff bb2e 	b.w	801ebe2 <_dtoa_r+0x32>
 801f586:	693a      	ldr	r2, [r7, #16]
 801f588:	3202      	adds	r2, #2
 801f58a:	0092      	lsls	r2, r2, #2
 801f58c:	f107 010c 	add.w	r1, r7, #12
 801f590:	300c      	adds	r0, #12
 801f592:	f000 fd7f 	bl	8020094 <memcpy>
 801f596:	2201      	movs	r2, #1
 801f598:	4629      	mov	r1, r5
 801f59a:	4620      	mov	r0, r4
 801f59c:	f000 ffe4 	bl	8020568 <__lshift>
 801f5a0:	9b00      	ldr	r3, [sp, #0]
 801f5a2:	3301      	adds	r3, #1
 801f5a4:	9301      	str	r3, [sp, #4]
 801f5a6:	9b00      	ldr	r3, [sp, #0]
 801f5a8:	444b      	add	r3, r9
 801f5aa:	9307      	str	r3, [sp, #28]
 801f5ac:	9b02      	ldr	r3, [sp, #8]
 801f5ae:	f003 0301 	and.w	r3, r3, #1
 801f5b2:	46b8      	mov	r8, r7
 801f5b4:	9306      	str	r3, [sp, #24]
 801f5b6:	4607      	mov	r7, r0
 801f5b8:	9b01      	ldr	r3, [sp, #4]
 801f5ba:	4631      	mov	r1, r6
 801f5bc:	3b01      	subs	r3, #1
 801f5be:	4658      	mov	r0, fp
 801f5c0:	9302      	str	r3, [sp, #8]
 801f5c2:	f7ff fa67 	bl	801ea94 <quorem>
 801f5c6:	4603      	mov	r3, r0
 801f5c8:	3330      	adds	r3, #48	; 0x30
 801f5ca:	9004      	str	r0, [sp, #16]
 801f5cc:	4641      	mov	r1, r8
 801f5ce:	4658      	mov	r0, fp
 801f5d0:	9308      	str	r3, [sp, #32]
 801f5d2:	f001 f835 	bl	8020640 <__mcmp>
 801f5d6:	463a      	mov	r2, r7
 801f5d8:	4681      	mov	r9, r0
 801f5da:	4631      	mov	r1, r6
 801f5dc:	4620      	mov	r0, r4
 801f5de:	f001 f84b 	bl	8020678 <__mdiff>
 801f5e2:	68c2      	ldr	r2, [r0, #12]
 801f5e4:	9b08      	ldr	r3, [sp, #32]
 801f5e6:	4605      	mov	r5, r0
 801f5e8:	bb02      	cbnz	r2, 801f62c <_dtoa_r+0xa7c>
 801f5ea:	4601      	mov	r1, r0
 801f5ec:	4658      	mov	r0, fp
 801f5ee:	f001 f827 	bl	8020640 <__mcmp>
 801f5f2:	9b08      	ldr	r3, [sp, #32]
 801f5f4:	4602      	mov	r2, r0
 801f5f6:	4629      	mov	r1, r5
 801f5f8:	4620      	mov	r0, r4
 801f5fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f5fe:	f000 fd97 	bl	8020130 <_Bfree>
 801f602:	9b05      	ldr	r3, [sp, #20]
 801f604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f606:	9d01      	ldr	r5, [sp, #4]
 801f608:	ea43 0102 	orr.w	r1, r3, r2
 801f60c:	9b06      	ldr	r3, [sp, #24]
 801f60e:	430b      	orrs	r3, r1
 801f610:	9b08      	ldr	r3, [sp, #32]
 801f612:	d10d      	bne.n	801f630 <_dtoa_r+0xa80>
 801f614:	2b39      	cmp	r3, #57	; 0x39
 801f616:	d029      	beq.n	801f66c <_dtoa_r+0xabc>
 801f618:	f1b9 0f00 	cmp.w	r9, #0
 801f61c:	dd01      	ble.n	801f622 <_dtoa_r+0xa72>
 801f61e:	9b04      	ldr	r3, [sp, #16]
 801f620:	3331      	adds	r3, #49	; 0x31
 801f622:	9a02      	ldr	r2, [sp, #8]
 801f624:	7013      	strb	r3, [r2, #0]
 801f626:	e774      	b.n	801f512 <_dtoa_r+0x962>
 801f628:	4638      	mov	r0, r7
 801f62a:	e7b9      	b.n	801f5a0 <_dtoa_r+0x9f0>
 801f62c:	2201      	movs	r2, #1
 801f62e:	e7e2      	b.n	801f5f6 <_dtoa_r+0xa46>
 801f630:	f1b9 0f00 	cmp.w	r9, #0
 801f634:	db06      	blt.n	801f644 <_dtoa_r+0xa94>
 801f636:	9905      	ldr	r1, [sp, #20]
 801f638:	ea41 0909 	orr.w	r9, r1, r9
 801f63c:	9906      	ldr	r1, [sp, #24]
 801f63e:	ea59 0101 	orrs.w	r1, r9, r1
 801f642:	d120      	bne.n	801f686 <_dtoa_r+0xad6>
 801f644:	2a00      	cmp	r2, #0
 801f646:	ddec      	ble.n	801f622 <_dtoa_r+0xa72>
 801f648:	4659      	mov	r1, fp
 801f64a:	2201      	movs	r2, #1
 801f64c:	4620      	mov	r0, r4
 801f64e:	9301      	str	r3, [sp, #4]
 801f650:	f000 ff8a 	bl	8020568 <__lshift>
 801f654:	4631      	mov	r1, r6
 801f656:	4683      	mov	fp, r0
 801f658:	f000 fff2 	bl	8020640 <__mcmp>
 801f65c:	2800      	cmp	r0, #0
 801f65e:	9b01      	ldr	r3, [sp, #4]
 801f660:	dc02      	bgt.n	801f668 <_dtoa_r+0xab8>
 801f662:	d1de      	bne.n	801f622 <_dtoa_r+0xa72>
 801f664:	07da      	lsls	r2, r3, #31
 801f666:	d5dc      	bpl.n	801f622 <_dtoa_r+0xa72>
 801f668:	2b39      	cmp	r3, #57	; 0x39
 801f66a:	d1d8      	bne.n	801f61e <_dtoa_r+0xa6e>
 801f66c:	9a02      	ldr	r2, [sp, #8]
 801f66e:	2339      	movs	r3, #57	; 0x39
 801f670:	7013      	strb	r3, [r2, #0]
 801f672:	462b      	mov	r3, r5
 801f674:	461d      	mov	r5, r3
 801f676:	3b01      	subs	r3, #1
 801f678:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f67c:	2a39      	cmp	r2, #57	; 0x39
 801f67e:	d050      	beq.n	801f722 <_dtoa_r+0xb72>
 801f680:	3201      	adds	r2, #1
 801f682:	701a      	strb	r2, [r3, #0]
 801f684:	e745      	b.n	801f512 <_dtoa_r+0x962>
 801f686:	2a00      	cmp	r2, #0
 801f688:	dd03      	ble.n	801f692 <_dtoa_r+0xae2>
 801f68a:	2b39      	cmp	r3, #57	; 0x39
 801f68c:	d0ee      	beq.n	801f66c <_dtoa_r+0xabc>
 801f68e:	3301      	adds	r3, #1
 801f690:	e7c7      	b.n	801f622 <_dtoa_r+0xa72>
 801f692:	9a01      	ldr	r2, [sp, #4]
 801f694:	9907      	ldr	r1, [sp, #28]
 801f696:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f69a:	428a      	cmp	r2, r1
 801f69c:	d02a      	beq.n	801f6f4 <_dtoa_r+0xb44>
 801f69e:	4659      	mov	r1, fp
 801f6a0:	2300      	movs	r3, #0
 801f6a2:	220a      	movs	r2, #10
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	f000 fd65 	bl	8020174 <__multadd>
 801f6aa:	45b8      	cmp	r8, r7
 801f6ac:	4683      	mov	fp, r0
 801f6ae:	f04f 0300 	mov.w	r3, #0
 801f6b2:	f04f 020a 	mov.w	r2, #10
 801f6b6:	4641      	mov	r1, r8
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	d107      	bne.n	801f6cc <_dtoa_r+0xb1c>
 801f6bc:	f000 fd5a 	bl	8020174 <__multadd>
 801f6c0:	4680      	mov	r8, r0
 801f6c2:	4607      	mov	r7, r0
 801f6c4:	9b01      	ldr	r3, [sp, #4]
 801f6c6:	3301      	adds	r3, #1
 801f6c8:	9301      	str	r3, [sp, #4]
 801f6ca:	e775      	b.n	801f5b8 <_dtoa_r+0xa08>
 801f6cc:	f000 fd52 	bl	8020174 <__multadd>
 801f6d0:	4639      	mov	r1, r7
 801f6d2:	4680      	mov	r8, r0
 801f6d4:	2300      	movs	r3, #0
 801f6d6:	220a      	movs	r2, #10
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f000 fd4b 	bl	8020174 <__multadd>
 801f6de:	4607      	mov	r7, r0
 801f6e0:	e7f0      	b.n	801f6c4 <_dtoa_r+0xb14>
 801f6e2:	f1b9 0f00 	cmp.w	r9, #0
 801f6e6:	9a00      	ldr	r2, [sp, #0]
 801f6e8:	bfcc      	ite	gt
 801f6ea:	464d      	movgt	r5, r9
 801f6ec:	2501      	movle	r5, #1
 801f6ee:	4415      	add	r5, r2
 801f6f0:	f04f 0800 	mov.w	r8, #0
 801f6f4:	4659      	mov	r1, fp
 801f6f6:	2201      	movs	r2, #1
 801f6f8:	4620      	mov	r0, r4
 801f6fa:	9301      	str	r3, [sp, #4]
 801f6fc:	f000 ff34 	bl	8020568 <__lshift>
 801f700:	4631      	mov	r1, r6
 801f702:	4683      	mov	fp, r0
 801f704:	f000 ff9c 	bl	8020640 <__mcmp>
 801f708:	2800      	cmp	r0, #0
 801f70a:	dcb2      	bgt.n	801f672 <_dtoa_r+0xac2>
 801f70c:	d102      	bne.n	801f714 <_dtoa_r+0xb64>
 801f70e:	9b01      	ldr	r3, [sp, #4]
 801f710:	07db      	lsls	r3, r3, #31
 801f712:	d4ae      	bmi.n	801f672 <_dtoa_r+0xac2>
 801f714:	462b      	mov	r3, r5
 801f716:	461d      	mov	r5, r3
 801f718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f71c:	2a30      	cmp	r2, #48	; 0x30
 801f71e:	d0fa      	beq.n	801f716 <_dtoa_r+0xb66>
 801f720:	e6f7      	b.n	801f512 <_dtoa_r+0x962>
 801f722:	9a00      	ldr	r2, [sp, #0]
 801f724:	429a      	cmp	r2, r3
 801f726:	d1a5      	bne.n	801f674 <_dtoa_r+0xac4>
 801f728:	f10a 0a01 	add.w	sl, sl, #1
 801f72c:	2331      	movs	r3, #49	; 0x31
 801f72e:	e779      	b.n	801f624 <_dtoa_r+0xa74>
 801f730:	4b13      	ldr	r3, [pc, #76]	; (801f780 <_dtoa_r+0xbd0>)
 801f732:	f7ff baaf 	b.w	801ec94 <_dtoa_r+0xe4>
 801f736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f738:	2b00      	cmp	r3, #0
 801f73a:	f47f aa86 	bne.w	801ec4a <_dtoa_r+0x9a>
 801f73e:	4b11      	ldr	r3, [pc, #68]	; (801f784 <_dtoa_r+0xbd4>)
 801f740:	f7ff baa8 	b.w	801ec94 <_dtoa_r+0xe4>
 801f744:	f1b9 0f00 	cmp.w	r9, #0
 801f748:	dc03      	bgt.n	801f752 <_dtoa_r+0xba2>
 801f74a:	9b05      	ldr	r3, [sp, #20]
 801f74c:	2b02      	cmp	r3, #2
 801f74e:	f73f aec9 	bgt.w	801f4e4 <_dtoa_r+0x934>
 801f752:	9d00      	ldr	r5, [sp, #0]
 801f754:	4631      	mov	r1, r6
 801f756:	4658      	mov	r0, fp
 801f758:	f7ff f99c 	bl	801ea94 <quorem>
 801f75c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f760:	f805 3b01 	strb.w	r3, [r5], #1
 801f764:	9a00      	ldr	r2, [sp, #0]
 801f766:	1aaa      	subs	r2, r5, r2
 801f768:	4591      	cmp	r9, r2
 801f76a:	ddba      	ble.n	801f6e2 <_dtoa_r+0xb32>
 801f76c:	4659      	mov	r1, fp
 801f76e:	2300      	movs	r3, #0
 801f770:	220a      	movs	r2, #10
 801f772:	4620      	mov	r0, r4
 801f774:	f000 fcfe 	bl	8020174 <__multadd>
 801f778:	4683      	mov	fp, r0
 801f77a:	e7eb      	b.n	801f754 <_dtoa_r+0xba4>
 801f77c:	0802983c 	.word	0x0802983c
 801f780:	08029638 	.word	0x08029638
 801f784:	080297b9 	.word	0x080297b9

0801f788 <std>:
 801f788:	2300      	movs	r3, #0
 801f78a:	b510      	push	{r4, lr}
 801f78c:	4604      	mov	r4, r0
 801f78e:	e9c0 3300 	strd	r3, r3, [r0]
 801f792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f796:	6083      	str	r3, [r0, #8]
 801f798:	8181      	strh	r1, [r0, #12]
 801f79a:	6643      	str	r3, [r0, #100]	; 0x64
 801f79c:	81c2      	strh	r2, [r0, #14]
 801f79e:	6183      	str	r3, [r0, #24]
 801f7a0:	4619      	mov	r1, r3
 801f7a2:	2208      	movs	r2, #8
 801f7a4:	305c      	adds	r0, #92	; 0x5c
 801f7a6:	f7fd fc07 	bl	801cfb8 <memset>
 801f7aa:	4b05      	ldr	r3, [pc, #20]	; (801f7c0 <std+0x38>)
 801f7ac:	6263      	str	r3, [r4, #36]	; 0x24
 801f7ae:	4b05      	ldr	r3, [pc, #20]	; (801f7c4 <std+0x3c>)
 801f7b0:	62a3      	str	r3, [r4, #40]	; 0x28
 801f7b2:	4b05      	ldr	r3, [pc, #20]	; (801f7c8 <std+0x40>)
 801f7b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f7b6:	4b05      	ldr	r3, [pc, #20]	; (801f7cc <std+0x44>)
 801f7b8:	6224      	str	r4, [r4, #32]
 801f7ba:	6323      	str	r3, [r4, #48]	; 0x30
 801f7bc:	bd10      	pop	{r4, pc}
 801f7be:	bf00      	nop
 801f7c0:	08020e81 	.word	0x08020e81
 801f7c4:	08020ea3 	.word	0x08020ea3
 801f7c8:	08020edb 	.word	0x08020edb
 801f7cc:	08020eff 	.word	0x08020eff

0801f7d0 <_cleanup_r>:
 801f7d0:	4901      	ldr	r1, [pc, #4]	; (801f7d8 <_cleanup_r+0x8>)
 801f7d2:	f000 b8af 	b.w	801f934 <_fwalk_reent>
 801f7d6:	bf00      	nop
 801f7d8:	08021255 	.word	0x08021255

0801f7dc <__sfmoreglue>:
 801f7dc:	b570      	push	{r4, r5, r6, lr}
 801f7de:	1e4a      	subs	r2, r1, #1
 801f7e0:	2568      	movs	r5, #104	; 0x68
 801f7e2:	4355      	muls	r5, r2
 801f7e4:	460e      	mov	r6, r1
 801f7e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f7ea:	f001 f97b 	bl	8020ae4 <_malloc_r>
 801f7ee:	4604      	mov	r4, r0
 801f7f0:	b140      	cbz	r0, 801f804 <__sfmoreglue+0x28>
 801f7f2:	2100      	movs	r1, #0
 801f7f4:	e9c0 1600 	strd	r1, r6, [r0]
 801f7f8:	300c      	adds	r0, #12
 801f7fa:	60a0      	str	r0, [r4, #8]
 801f7fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f800:	f7fd fbda 	bl	801cfb8 <memset>
 801f804:	4620      	mov	r0, r4
 801f806:	bd70      	pop	{r4, r5, r6, pc}

0801f808 <__sfp_lock_acquire>:
 801f808:	4801      	ldr	r0, [pc, #4]	; (801f810 <__sfp_lock_acquire+0x8>)
 801f80a:	f000 bc26 	b.w	802005a <__retarget_lock_acquire_recursive>
 801f80e:	bf00      	nop
 801f810:	2000a024 	.word	0x2000a024

0801f814 <__sfp_lock_release>:
 801f814:	4801      	ldr	r0, [pc, #4]	; (801f81c <__sfp_lock_release+0x8>)
 801f816:	f000 bc21 	b.w	802005c <__retarget_lock_release_recursive>
 801f81a:	bf00      	nop
 801f81c:	2000a024 	.word	0x2000a024

0801f820 <__sinit_lock_acquire>:
 801f820:	4801      	ldr	r0, [pc, #4]	; (801f828 <__sinit_lock_acquire+0x8>)
 801f822:	f000 bc1a 	b.w	802005a <__retarget_lock_acquire_recursive>
 801f826:	bf00      	nop
 801f828:	2000a023 	.word	0x2000a023

0801f82c <__sinit_lock_release>:
 801f82c:	4801      	ldr	r0, [pc, #4]	; (801f834 <__sinit_lock_release+0x8>)
 801f82e:	f000 bc15 	b.w	802005c <__retarget_lock_release_recursive>
 801f832:	bf00      	nop
 801f834:	2000a023 	.word	0x2000a023

0801f838 <__sinit>:
 801f838:	b510      	push	{r4, lr}
 801f83a:	4604      	mov	r4, r0
 801f83c:	f7ff fff0 	bl	801f820 <__sinit_lock_acquire>
 801f840:	69a3      	ldr	r3, [r4, #24]
 801f842:	b11b      	cbz	r3, 801f84c <__sinit+0x14>
 801f844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f848:	f7ff bff0 	b.w	801f82c <__sinit_lock_release>
 801f84c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f850:	6523      	str	r3, [r4, #80]	; 0x50
 801f852:	4b13      	ldr	r3, [pc, #76]	; (801f8a0 <__sinit+0x68>)
 801f854:	4a13      	ldr	r2, [pc, #76]	; (801f8a4 <__sinit+0x6c>)
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	62a2      	str	r2, [r4, #40]	; 0x28
 801f85a:	42a3      	cmp	r3, r4
 801f85c:	bf04      	itt	eq
 801f85e:	2301      	moveq	r3, #1
 801f860:	61a3      	streq	r3, [r4, #24]
 801f862:	4620      	mov	r0, r4
 801f864:	f000 f820 	bl	801f8a8 <__sfp>
 801f868:	6060      	str	r0, [r4, #4]
 801f86a:	4620      	mov	r0, r4
 801f86c:	f000 f81c 	bl	801f8a8 <__sfp>
 801f870:	60a0      	str	r0, [r4, #8]
 801f872:	4620      	mov	r0, r4
 801f874:	f000 f818 	bl	801f8a8 <__sfp>
 801f878:	2200      	movs	r2, #0
 801f87a:	60e0      	str	r0, [r4, #12]
 801f87c:	2104      	movs	r1, #4
 801f87e:	6860      	ldr	r0, [r4, #4]
 801f880:	f7ff ff82 	bl	801f788 <std>
 801f884:	68a0      	ldr	r0, [r4, #8]
 801f886:	2201      	movs	r2, #1
 801f888:	2109      	movs	r1, #9
 801f88a:	f7ff ff7d 	bl	801f788 <std>
 801f88e:	68e0      	ldr	r0, [r4, #12]
 801f890:	2202      	movs	r2, #2
 801f892:	2112      	movs	r1, #18
 801f894:	f7ff ff78 	bl	801f788 <std>
 801f898:	2301      	movs	r3, #1
 801f89a:	61a3      	str	r3, [r4, #24]
 801f89c:	e7d2      	b.n	801f844 <__sinit+0xc>
 801f89e:	bf00      	nop
 801f8a0:	08029624 	.word	0x08029624
 801f8a4:	0801f7d1 	.word	0x0801f7d1

0801f8a8 <__sfp>:
 801f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8aa:	4607      	mov	r7, r0
 801f8ac:	f7ff ffac 	bl	801f808 <__sfp_lock_acquire>
 801f8b0:	4b1e      	ldr	r3, [pc, #120]	; (801f92c <__sfp+0x84>)
 801f8b2:	681e      	ldr	r6, [r3, #0]
 801f8b4:	69b3      	ldr	r3, [r6, #24]
 801f8b6:	b913      	cbnz	r3, 801f8be <__sfp+0x16>
 801f8b8:	4630      	mov	r0, r6
 801f8ba:	f7ff ffbd 	bl	801f838 <__sinit>
 801f8be:	3648      	adds	r6, #72	; 0x48
 801f8c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f8c4:	3b01      	subs	r3, #1
 801f8c6:	d503      	bpl.n	801f8d0 <__sfp+0x28>
 801f8c8:	6833      	ldr	r3, [r6, #0]
 801f8ca:	b30b      	cbz	r3, 801f910 <__sfp+0x68>
 801f8cc:	6836      	ldr	r6, [r6, #0]
 801f8ce:	e7f7      	b.n	801f8c0 <__sfp+0x18>
 801f8d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f8d4:	b9d5      	cbnz	r5, 801f90c <__sfp+0x64>
 801f8d6:	4b16      	ldr	r3, [pc, #88]	; (801f930 <__sfp+0x88>)
 801f8d8:	60e3      	str	r3, [r4, #12]
 801f8da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f8de:	6665      	str	r5, [r4, #100]	; 0x64
 801f8e0:	f000 fbba 	bl	8020058 <__retarget_lock_init_recursive>
 801f8e4:	f7ff ff96 	bl	801f814 <__sfp_lock_release>
 801f8e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f8ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f8f0:	6025      	str	r5, [r4, #0]
 801f8f2:	61a5      	str	r5, [r4, #24]
 801f8f4:	2208      	movs	r2, #8
 801f8f6:	4629      	mov	r1, r5
 801f8f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f8fc:	f7fd fb5c 	bl	801cfb8 <memset>
 801f900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f908:	4620      	mov	r0, r4
 801f90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f90c:	3468      	adds	r4, #104	; 0x68
 801f90e:	e7d9      	b.n	801f8c4 <__sfp+0x1c>
 801f910:	2104      	movs	r1, #4
 801f912:	4638      	mov	r0, r7
 801f914:	f7ff ff62 	bl	801f7dc <__sfmoreglue>
 801f918:	4604      	mov	r4, r0
 801f91a:	6030      	str	r0, [r6, #0]
 801f91c:	2800      	cmp	r0, #0
 801f91e:	d1d5      	bne.n	801f8cc <__sfp+0x24>
 801f920:	f7ff ff78 	bl	801f814 <__sfp_lock_release>
 801f924:	230c      	movs	r3, #12
 801f926:	603b      	str	r3, [r7, #0]
 801f928:	e7ee      	b.n	801f908 <__sfp+0x60>
 801f92a:	bf00      	nop
 801f92c:	08029624 	.word	0x08029624
 801f930:	ffff0001 	.word	0xffff0001

0801f934 <_fwalk_reent>:
 801f934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f938:	4606      	mov	r6, r0
 801f93a:	4688      	mov	r8, r1
 801f93c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f940:	2700      	movs	r7, #0
 801f942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f946:	f1b9 0901 	subs.w	r9, r9, #1
 801f94a:	d505      	bpl.n	801f958 <_fwalk_reent+0x24>
 801f94c:	6824      	ldr	r4, [r4, #0]
 801f94e:	2c00      	cmp	r4, #0
 801f950:	d1f7      	bne.n	801f942 <_fwalk_reent+0xe>
 801f952:	4638      	mov	r0, r7
 801f954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f958:	89ab      	ldrh	r3, [r5, #12]
 801f95a:	2b01      	cmp	r3, #1
 801f95c:	d907      	bls.n	801f96e <_fwalk_reent+0x3a>
 801f95e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f962:	3301      	adds	r3, #1
 801f964:	d003      	beq.n	801f96e <_fwalk_reent+0x3a>
 801f966:	4629      	mov	r1, r5
 801f968:	4630      	mov	r0, r6
 801f96a:	47c0      	blx	r8
 801f96c:	4307      	orrs	r7, r0
 801f96e:	3568      	adds	r5, #104	; 0x68
 801f970:	e7e9      	b.n	801f946 <_fwalk_reent+0x12>

0801f972 <rshift>:
 801f972:	6903      	ldr	r3, [r0, #16]
 801f974:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f97c:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f980:	f100 0414 	add.w	r4, r0, #20
 801f984:	dd45      	ble.n	801fa12 <rshift+0xa0>
 801f986:	f011 011f 	ands.w	r1, r1, #31
 801f98a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f98e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f992:	d10c      	bne.n	801f9ae <rshift+0x3c>
 801f994:	f100 0710 	add.w	r7, r0, #16
 801f998:	4629      	mov	r1, r5
 801f99a:	42b1      	cmp	r1, r6
 801f99c:	d334      	bcc.n	801fa08 <rshift+0x96>
 801f99e:	1a9b      	subs	r3, r3, r2
 801f9a0:	009b      	lsls	r3, r3, #2
 801f9a2:	1eea      	subs	r2, r5, #3
 801f9a4:	4296      	cmp	r6, r2
 801f9a6:	bf38      	it	cc
 801f9a8:	2300      	movcc	r3, #0
 801f9aa:	4423      	add	r3, r4
 801f9ac:	e015      	b.n	801f9da <rshift+0x68>
 801f9ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f9b2:	f1c1 0820 	rsb	r8, r1, #32
 801f9b6:	40cf      	lsrs	r7, r1
 801f9b8:	f105 0e04 	add.w	lr, r5, #4
 801f9bc:	46a1      	mov	r9, r4
 801f9be:	4576      	cmp	r6, lr
 801f9c0:	46f4      	mov	ip, lr
 801f9c2:	d815      	bhi.n	801f9f0 <rshift+0x7e>
 801f9c4:	1a9b      	subs	r3, r3, r2
 801f9c6:	009a      	lsls	r2, r3, #2
 801f9c8:	3a04      	subs	r2, #4
 801f9ca:	3501      	adds	r5, #1
 801f9cc:	42ae      	cmp	r6, r5
 801f9ce:	bf38      	it	cc
 801f9d0:	2200      	movcc	r2, #0
 801f9d2:	18a3      	adds	r3, r4, r2
 801f9d4:	50a7      	str	r7, [r4, r2]
 801f9d6:	b107      	cbz	r7, 801f9da <rshift+0x68>
 801f9d8:	3304      	adds	r3, #4
 801f9da:	1b1a      	subs	r2, r3, r4
 801f9dc:	42a3      	cmp	r3, r4
 801f9de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f9e2:	bf08      	it	eq
 801f9e4:	2300      	moveq	r3, #0
 801f9e6:	6102      	str	r2, [r0, #16]
 801f9e8:	bf08      	it	eq
 801f9ea:	6143      	streq	r3, [r0, #20]
 801f9ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f9f0:	f8dc c000 	ldr.w	ip, [ip]
 801f9f4:	fa0c fc08 	lsl.w	ip, ip, r8
 801f9f8:	ea4c 0707 	orr.w	r7, ip, r7
 801f9fc:	f849 7b04 	str.w	r7, [r9], #4
 801fa00:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fa04:	40cf      	lsrs	r7, r1
 801fa06:	e7da      	b.n	801f9be <rshift+0x4c>
 801fa08:	f851 cb04 	ldr.w	ip, [r1], #4
 801fa0c:	f847 cf04 	str.w	ip, [r7, #4]!
 801fa10:	e7c3      	b.n	801f99a <rshift+0x28>
 801fa12:	4623      	mov	r3, r4
 801fa14:	e7e1      	b.n	801f9da <rshift+0x68>

0801fa16 <__hexdig_fun>:
 801fa16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fa1a:	2b09      	cmp	r3, #9
 801fa1c:	d802      	bhi.n	801fa24 <__hexdig_fun+0xe>
 801fa1e:	3820      	subs	r0, #32
 801fa20:	b2c0      	uxtb	r0, r0
 801fa22:	4770      	bx	lr
 801fa24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801fa28:	2b05      	cmp	r3, #5
 801fa2a:	d801      	bhi.n	801fa30 <__hexdig_fun+0x1a>
 801fa2c:	3847      	subs	r0, #71	; 0x47
 801fa2e:	e7f7      	b.n	801fa20 <__hexdig_fun+0xa>
 801fa30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801fa34:	2b05      	cmp	r3, #5
 801fa36:	d801      	bhi.n	801fa3c <__hexdig_fun+0x26>
 801fa38:	3827      	subs	r0, #39	; 0x27
 801fa3a:	e7f1      	b.n	801fa20 <__hexdig_fun+0xa>
 801fa3c:	2000      	movs	r0, #0
 801fa3e:	4770      	bx	lr

0801fa40 <__gethex>:
 801fa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa44:	ed2d 8b02 	vpush	{d8}
 801fa48:	b089      	sub	sp, #36	; 0x24
 801fa4a:	ee08 0a10 	vmov	s16, r0
 801fa4e:	9304      	str	r3, [sp, #16]
 801fa50:	4bbc      	ldr	r3, [pc, #752]	; (801fd44 <__gethex+0x304>)
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	9301      	str	r3, [sp, #4]
 801fa56:	4618      	mov	r0, r3
 801fa58:	468b      	mov	fp, r1
 801fa5a:	4690      	mov	r8, r2
 801fa5c:	f7e0 fbc8 	bl	80001f0 <strlen>
 801fa60:	9b01      	ldr	r3, [sp, #4]
 801fa62:	f8db 2000 	ldr.w	r2, [fp]
 801fa66:	4403      	add	r3, r0
 801fa68:	4682      	mov	sl, r0
 801fa6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fa6e:	9305      	str	r3, [sp, #20]
 801fa70:	1c93      	adds	r3, r2, #2
 801fa72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801fa76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801fa7a:	32fe      	adds	r2, #254	; 0xfe
 801fa7c:	18d1      	adds	r1, r2, r3
 801fa7e:	461f      	mov	r7, r3
 801fa80:	f813 0b01 	ldrb.w	r0, [r3], #1
 801fa84:	9100      	str	r1, [sp, #0]
 801fa86:	2830      	cmp	r0, #48	; 0x30
 801fa88:	d0f8      	beq.n	801fa7c <__gethex+0x3c>
 801fa8a:	f7ff ffc4 	bl	801fa16 <__hexdig_fun>
 801fa8e:	4604      	mov	r4, r0
 801fa90:	2800      	cmp	r0, #0
 801fa92:	d13a      	bne.n	801fb0a <__gethex+0xca>
 801fa94:	9901      	ldr	r1, [sp, #4]
 801fa96:	4652      	mov	r2, sl
 801fa98:	4638      	mov	r0, r7
 801fa9a:	f001 fa34 	bl	8020f06 <strncmp>
 801fa9e:	4605      	mov	r5, r0
 801faa0:	2800      	cmp	r0, #0
 801faa2:	d168      	bne.n	801fb76 <__gethex+0x136>
 801faa4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801faa8:	eb07 060a 	add.w	r6, r7, sl
 801faac:	f7ff ffb3 	bl	801fa16 <__hexdig_fun>
 801fab0:	2800      	cmp	r0, #0
 801fab2:	d062      	beq.n	801fb7a <__gethex+0x13a>
 801fab4:	4633      	mov	r3, r6
 801fab6:	7818      	ldrb	r0, [r3, #0]
 801fab8:	2830      	cmp	r0, #48	; 0x30
 801faba:	461f      	mov	r7, r3
 801fabc:	f103 0301 	add.w	r3, r3, #1
 801fac0:	d0f9      	beq.n	801fab6 <__gethex+0x76>
 801fac2:	f7ff ffa8 	bl	801fa16 <__hexdig_fun>
 801fac6:	2301      	movs	r3, #1
 801fac8:	fab0 f480 	clz	r4, r0
 801facc:	0964      	lsrs	r4, r4, #5
 801face:	4635      	mov	r5, r6
 801fad0:	9300      	str	r3, [sp, #0]
 801fad2:	463a      	mov	r2, r7
 801fad4:	4616      	mov	r6, r2
 801fad6:	3201      	adds	r2, #1
 801fad8:	7830      	ldrb	r0, [r6, #0]
 801fada:	f7ff ff9c 	bl	801fa16 <__hexdig_fun>
 801fade:	2800      	cmp	r0, #0
 801fae0:	d1f8      	bne.n	801fad4 <__gethex+0x94>
 801fae2:	9901      	ldr	r1, [sp, #4]
 801fae4:	4652      	mov	r2, sl
 801fae6:	4630      	mov	r0, r6
 801fae8:	f001 fa0d 	bl	8020f06 <strncmp>
 801faec:	b980      	cbnz	r0, 801fb10 <__gethex+0xd0>
 801faee:	b94d      	cbnz	r5, 801fb04 <__gethex+0xc4>
 801faf0:	eb06 050a 	add.w	r5, r6, sl
 801faf4:	462a      	mov	r2, r5
 801faf6:	4616      	mov	r6, r2
 801faf8:	3201      	adds	r2, #1
 801fafa:	7830      	ldrb	r0, [r6, #0]
 801fafc:	f7ff ff8b 	bl	801fa16 <__hexdig_fun>
 801fb00:	2800      	cmp	r0, #0
 801fb02:	d1f8      	bne.n	801faf6 <__gethex+0xb6>
 801fb04:	1bad      	subs	r5, r5, r6
 801fb06:	00ad      	lsls	r5, r5, #2
 801fb08:	e004      	b.n	801fb14 <__gethex+0xd4>
 801fb0a:	2400      	movs	r4, #0
 801fb0c:	4625      	mov	r5, r4
 801fb0e:	e7e0      	b.n	801fad2 <__gethex+0x92>
 801fb10:	2d00      	cmp	r5, #0
 801fb12:	d1f7      	bne.n	801fb04 <__gethex+0xc4>
 801fb14:	7833      	ldrb	r3, [r6, #0]
 801fb16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fb1a:	2b50      	cmp	r3, #80	; 0x50
 801fb1c:	d13b      	bne.n	801fb96 <__gethex+0x156>
 801fb1e:	7873      	ldrb	r3, [r6, #1]
 801fb20:	2b2b      	cmp	r3, #43	; 0x2b
 801fb22:	d02c      	beq.n	801fb7e <__gethex+0x13e>
 801fb24:	2b2d      	cmp	r3, #45	; 0x2d
 801fb26:	d02e      	beq.n	801fb86 <__gethex+0x146>
 801fb28:	1c71      	adds	r1, r6, #1
 801fb2a:	f04f 0900 	mov.w	r9, #0
 801fb2e:	7808      	ldrb	r0, [r1, #0]
 801fb30:	f7ff ff71 	bl	801fa16 <__hexdig_fun>
 801fb34:	1e43      	subs	r3, r0, #1
 801fb36:	b2db      	uxtb	r3, r3
 801fb38:	2b18      	cmp	r3, #24
 801fb3a:	d82c      	bhi.n	801fb96 <__gethex+0x156>
 801fb3c:	f1a0 0210 	sub.w	r2, r0, #16
 801fb40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801fb44:	f7ff ff67 	bl	801fa16 <__hexdig_fun>
 801fb48:	1e43      	subs	r3, r0, #1
 801fb4a:	b2db      	uxtb	r3, r3
 801fb4c:	2b18      	cmp	r3, #24
 801fb4e:	d91d      	bls.n	801fb8c <__gethex+0x14c>
 801fb50:	f1b9 0f00 	cmp.w	r9, #0
 801fb54:	d000      	beq.n	801fb58 <__gethex+0x118>
 801fb56:	4252      	negs	r2, r2
 801fb58:	4415      	add	r5, r2
 801fb5a:	f8cb 1000 	str.w	r1, [fp]
 801fb5e:	b1e4      	cbz	r4, 801fb9a <__gethex+0x15a>
 801fb60:	9b00      	ldr	r3, [sp, #0]
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	bf14      	ite	ne
 801fb66:	2700      	movne	r7, #0
 801fb68:	2706      	moveq	r7, #6
 801fb6a:	4638      	mov	r0, r7
 801fb6c:	b009      	add	sp, #36	; 0x24
 801fb6e:	ecbd 8b02 	vpop	{d8}
 801fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb76:	463e      	mov	r6, r7
 801fb78:	4625      	mov	r5, r4
 801fb7a:	2401      	movs	r4, #1
 801fb7c:	e7ca      	b.n	801fb14 <__gethex+0xd4>
 801fb7e:	f04f 0900 	mov.w	r9, #0
 801fb82:	1cb1      	adds	r1, r6, #2
 801fb84:	e7d3      	b.n	801fb2e <__gethex+0xee>
 801fb86:	f04f 0901 	mov.w	r9, #1
 801fb8a:	e7fa      	b.n	801fb82 <__gethex+0x142>
 801fb8c:	230a      	movs	r3, #10
 801fb8e:	fb03 0202 	mla	r2, r3, r2, r0
 801fb92:	3a10      	subs	r2, #16
 801fb94:	e7d4      	b.n	801fb40 <__gethex+0x100>
 801fb96:	4631      	mov	r1, r6
 801fb98:	e7df      	b.n	801fb5a <__gethex+0x11a>
 801fb9a:	1bf3      	subs	r3, r6, r7
 801fb9c:	3b01      	subs	r3, #1
 801fb9e:	4621      	mov	r1, r4
 801fba0:	2b07      	cmp	r3, #7
 801fba2:	dc0b      	bgt.n	801fbbc <__gethex+0x17c>
 801fba4:	ee18 0a10 	vmov	r0, s16
 801fba8:	f000 fa82 	bl	80200b0 <_Balloc>
 801fbac:	4604      	mov	r4, r0
 801fbae:	b940      	cbnz	r0, 801fbc2 <__gethex+0x182>
 801fbb0:	4b65      	ldr	r3, [pc, #404]	; (801fd48 <__gethex+0x308>)
 801fbb2:	4602      	mov	r2, r0
 801fbb4:	21de      	movs	r1, #222	; 0xde
 801fbb6:	4865      	ldr	r0, [pc, #404]	; (801fd4c <__gethex+0x30c>)
 801fbb8:	f001 fa98 	bl	80210ec <__assert_func>
 801fbbc:	3101      	adds	r1, #1
 801fbbe:	105b      	asrs	r3, r3, #1
 801fbc0:	e7ee      	b.n	801fba0 <__gethex+0x160>
 801fbc2:	f100 0914 	add.w	r9, r0, #20
 801fbc6:	f04f 0b00 	mov.w	fp, #0
 801fbca:	f1ca 0301 	rsb	r3, sl, #1
 801fbce:	f8cd 9008 	str.w	r9, [sp, #8]
 801fbd2:	f8cd b000 	str.w	fp, [sp]
 801fbd6:	9306      	str	r3, [sp, #24]
 801fbd8:	42b7      	cmp	r7, r6
 801fbda:	d340      	bcc.n	801fc5e <__gethex+0x21e>
 801fbdc:	9802      	ldr	r0, [sp, #8]
 801fbde:	9b00      	ldr	r3, [sp, #0]
 801fbe0:	f840 3b04 	str.w	r3, [r0], #4
 801fbe4:	eba0 0009 	sub.w	r0, r0, r9
 801fbe8:	1080      	asrs	r0, r0, #2
 801fbea:	0146      	lsls	r6, r0, #5
 801fbec:	6120      	str	r0, [r4, #16]
 801fbee:	4618      	mov	r0, r3
 801fbf0:	f000 fb54 	bl	802029c <__hi0bits>
 801fbf4:	1a30      	subs	r0, r6, r0
 801fbf6:	f8d8 6000 	ldr.w	r6, [r8]
 801fbfa:	42b0      	cmp	r0, r6
 801fbfc:	dd63      	ble.n	801fcc6 <__gethex+0x286>
 801fbfe:	1b87      	subs	r7, r0, r6
 801fc00:	4639      	mov	r1, r7
 801fc02:	4620      	mov	r0, r4
 801fc04:	f000 feee 	bl	80209e4 <__any_on>
 801fc08:	4682      	mov	sl, r0
 801fc0a:	b1a8      	cbz	r0, 801fc38 <__gethex+0x1f8>
 801fc0c:	1e7b      	subs	r3, r7, #1
 801fc0e:	1159      	asrs	r1, r3, #5
 801fc10:	f003 021f 	and.w	r2, r3, #31
 801fc14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801fc18:	f04f 0a01 	mov.w	sl, #1
 801fc1c:	fa0a f202 	lsl.w	r2, sl, r2
 801fc20:	420a      	tst	r2, r1
 801fc22:	d009      	beq.n	801fc38 <__gethex+0x1f8>
 801fc24:	4553      	cmp	r3, sl
 801fc26:	dd05      	ble.n	801fc34 <__gethex+0x1f4>
 801fc28:	1eb9      	subs	r1, r7, #2
 801fc2a:	4620      	mov	r0, r4
 801fc2c:	f000 feda 	bl	80209e4 <__any_on>
 801fc30:	2800      	cmp	r0, #0
 801fc32:	d145      	bne.n	801fcc0 <__gethex+0x280>
 801fc34:	f04f 0a02 	mov.w	sl, #2
 801fc38:	4639      	mov	r1, r7
 801fc3a:	4620      	mov	r0, r4
 801fc3c:	f7ff fe99 	bl	801f972 <rshift>
 801fc40:	443d      	add	r5, r7
 801fc42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fc46:	42ab      	cmp	r3, r5
 801fc48:	da4c      	bge.n	801fce4 <__gethex+0x2a4>
 801fc4a:	ee18 0a10 	vmov	r0, s16
 801fc4e:	4621      	mov	r1, r4
 801fc50:	f000 fa6e 	bl	8020130 <_Bfree>
 801fc54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc56:	2300      	movs	r3, #0
 801fc58:	6013      	str	r3, [r2, #0]
 801fc5a:	27a3      	movs	r7, #163	; 0xa3
 801fc5c:	e785      	b.n	801fb6a <__gethex+0x12a>
 801fc5e:	1e73      	subs	r3, r6, #1
 801fc60:	9a05      	ldr	r2, [sp, #20]
 801fc62:	9303      	str	r3, [sp, #12]
 801fc64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fc68:	4293      	cmp	r3, r2
 801fc6a:	d019      	beq.n	801fca0 <__gethex+0x260>
 801fc6c:	f1bb 0f20 	cmp.w	fp, #32
 801fc70:	d107      	bne.n	801fc82 <__gethex+0x242>
 801fc72:	9b02      	ldr	r3, [sp, #8]
 801fc74:	9a00      	ldr	r2, [sp, #0]
 801fc76:	f843 2b04 	str.w	r2, [r3], #4
 801fc7a:	9302      	str	r3, [sp, #8]
 801fc7c:	2300      	movs	r3, #0
 801fc7e:	9300      	str	r3, [sp, #0]
 801fc80:	469b      	mov	fp, r3
 801fc82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fc86:	f7ff fec6 	bl	801fa16 <__hexdig_fun>
 801fc8a:	9b00      	ldr	r3, [sp, #0]
 801fc8c:	f000 000f 	and.w	r0, r0, #15
 801fc90:	fa00 f00b 	lsl.w	r0, r0, fp
 801fc94:	4303      	orrs	r3, r0
 801fc96:	9300      	str	r3, [sp, #0]
 801fc98:	f10b 0b04 	add.w	fp, fp, #4
 801fc9c:	9b03      	ldr	r3, [sp, #12]
 801fc9e:	e00d      	b.n	801fcbc <__gethex+0x27c>
 801fca0:	9b03      	ldr	r3, [sp, #12]
 801fca2:	9a06      	ldr	r2, [sp, #24]
 801fca4:	4413      	add	r3, r2
 801fca6:	42bb      	cmp	r3, r7
 801fca8:	d3e0      	bcc.n	801fc6c <__gethex+0x22c>
 801fcaa:	4618      	mov	r0, r3
 801fcac:	9901      	ldr	r1, [sp, #4]
 801fcae:	9307      	str	r3, [sp, #28]
 801fcb0:	4652      	mov	r2, sl
 801fcb2:	f001 f928 	bl	8020f06 <strncmp>
 801fcb6:	9b07      	ldr	r3, [sp, #28]
 801fcb8:	2800      	cmp	r0, #0
 801fcba:	d1d7      	bne.n	801fc6c <__gethex+0x22c>
 801fcbc:	461e      	mov	r6, r3
 801fcbe:	e78b      	b.n	801fbd8 <__gethex+0x198>
 801fcc0:	f04f 0a03 	mov.w	sl, #3
 801fcc4:	e7b8      	b.n	801fc38 <__gethex+0x1f8>
 801fcc6:	da0a      	bge.n	801fcde <__gethex+0x29e>
 801fcc8:	1a37      	subs	r7, r6, r0
 801fcca:	4621      	mov	r1, r4
 801fccc:	ee18 0a10 	vmov	r0, s16
 801fcd0:	463a      	mov	r2, r7
 801fcd2:	f000 fc49 	bl	8020568 <__lshift>
 801fcd6:	1bed      	subs	r5, r5, r7
 801fcd8:	4604      	mov	r4, r0
 801fcda:	f100 0914 	add.w	r9, r0, #20
 801fcde:	f04f 0a00 	mov.w	sl, #0
 801fce2:	e7ae      	b.n	801fc42 <__gethex+0x202>
 801fce4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fce8:	42a8      	cmp	r0, r5
 801fcea:	dd72      	ble.n	801fdd2 <__gethex+0x392>
 801fcec:	1b45      	subs	r5, r0, r5
 801fcee:	42ae      	cmp	r6, r5
 801fcf0:	dc36      	bgt.n	801fd60 <__gethex+0x320>
 801fcf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fcf6:	2b02      	cmp	r3, #2
 801fcf8:	d02a      	beq.n	801fd50 <__gethex+0x310>
 801fcfa:	2b03      	cmp	r3, #3
 801fcfc:	d02c      	beq.n	801fd58 <__gethex+0x318>
 801fcfe:	2b01      	cmp	r3, #1
 801fd00:	d115      	bne.n	801fd2e <__gethex+0x2ee>
 801fd02:	42ae      	cmp	r6, r5
 801fd04:	d113      	bne.n	801fd2e <__gethex+0x2ee>
 801fd06:	2e01      	cmp	r6, #1
 801fd08:	d10b      	bne.n	801fd22 <__gethex+0x2e2>
 801fd0a:	9a04      	ldr	r2, [sp, #16]
 801fd0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fd10:	6013      	str	r3, [r2, #0]
 801fd12:	2301      	movs	r3, #1
 801fd14:	6123      	str	r3, [r4, #16]
 801fd16:	f8c9 3000 	str.w	r3, [r9]
 801fd1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fd1c:	2762      	movs	r7, #98	; 0x62
 801fd1e:	601c      	str	r4, [r3, #0]
 801fd20:	e723      	b.n	801fb6a <__gethex+0x12a>
 801fd22:	1e71      	subs	r1, r6, #1
 801fd24:	4620      	mov	r0, r4
 801fd26:	f000 fe5d 	bl	80209e4 <__any_on>
 801fd2a:	2800      	cmp	r0, #0
 801fd2c:	d1ed      	bne.n	801fd0a <__gethex+0x2ca>
 801fd2e:	ee18 0a10 	vmov	r0, s16
 801fd32:	4621      	mov	r1, r4
 801fd34:	f000 f9fc 	bl	8020130 <_Bfree>
 801fd38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd3a:	2300      	movs	r3, #0
 801fd3c:	6013      	str	r3, [r2, #0]
 801fd3e:	2750      	movs	r7, #80	; 0x50
 801fd40:	e713      	b.n	801fb6a <__gethex+0x12a>
 801fd42:	bf00      	nop
 801fd44:	0802991c 	.word	0x0802991c
 801fd48:	0802983c 	.word	0x0802983c
 801fd4c:	080298b0 	.word	0x080298b0
 801fd50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d1eb      	bne.n	801fd2e <__gethex+0x2ee>
 801fd56:	e7d8      	b.n	801fd0a <__gethex+0x2ca>
 801fd58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d1d5      	bne.n	801fd0a <__gethex+0x2ca>
 801fd5e:	e7e6      	b.n	801fd2e <__gethex+0x2ee>
 801fd60:	1e6f      	subs	r7, r5, #1
 801fd62:	f1ba 0f00 	cmp.w	sl, #0
 801fd66:	d131      	bne.n	801fdcc <__gethex+0x38c>
 801fd68:	b127      	cbz	r7, 801fd74 <__gethex+0x334>
 801fd6a:	4639      	mov	r1, r7
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	f000 fe39 	bl	80209e4 <__any_on>
 801fd72:	4682      	mov	sl, r0
 801fd74:	117b      	asrs	r3, r7, #5
 801fd76:	2101      	movs	r1, #1
 801fd78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fd7c:	f007 071f 	and.w	r7, r7, #31
 801fd80:	fa01 f707 	lsl.w	r7, r1, r7
 801fd84:	421f      	tst	r7, r3
 801fd86:	4629      	mov	r1, r5
 801fd88:	4620      	mov	r0, r4
 801fd8a:	bf18      	it	ne
 801fd8c:	f04a 0a02 	orrne.w	sl, sl, #2
 801fd90:	1b76      	subs	r6, r6, r5
 801fd92:	f7ff fdee 	bl	801f972 <rshift>
 801fd96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fd9a:	2702      	movs	r7, #2
 801fd9c:	f1ba 0f00 	cmp.w	sl, #0
 801fda0:	d048      	beq.n	801fe34 <__gethex+0x3f4>
 801fda2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fda6:	2b02      	cmp	r3, #2
 801fda8:	d015      	beq.n	801fdd6 <__gethex+0x396>
 801fdaa:	2b03      	cmp	r3, #3
 801fdac:	d017      	beq.n	801fdde <__gethex+0x39e>
 801fdae:	2b01      	cmp	r3, #1
 801fdb0:	d109      	bne.n	801fdc6 <__gethex+0x386>
 801fdb2:	f01a 0f02 	tst.w	sl, #2
 801fdb6:	d006      	beq.n	801fdc6 <__gethex+0x386>
 801fdb8:	f8d9 0000 	ldr.w	r0, [r9]
 801fdbc:	ea4a 0a00 	orr.w	sl, sl, r0
 801fdc0:	f01a 0f01 	tst.w	sl, #1
 801fdc4:	d10e      	bne.n	801fde4 <__gethex+0x3a4>
 801fdc6:	f047 0710 	orr.w	r7, r7, #16
 801fdca:	e033      	b.n	801fe34 <__gethex+0x3f4>
 801fdcc:	f04f 0a01 	mov.w	sl, #1
 801fdd0:	e7d0      	b.n	801fd74 <__gethex+0x334>
 801fdd2:	2701      	movs	r7, #1
 801fdd4:	e7e2      	b.n	801fd9c <__gethex+0x35c>
 801fdd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fdd8:	f1c3 0301 	rsb	r3, r3, #1
 801fddc:	9315      	str	r3, [sp, #84]	; 0x54
 801fdde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d0f0      	beq.n	801fdc6 <__gethex+0x386>
 801fde4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fde8:	f104 0314 	add.w	r3, r4, #20
 801fdec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801fdf0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801fdf4:	f04f 0c00 	mov.w	ip, #0
 801fdf8:	4618      	mov	r0, r3
 801fdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 801fdfe:	f1b2 3fff 	cmp.w	r2, #4294967295
 801fe02:	d01c      	beq.n	801fe3e <__gethex+0x3fe>
 801fe04:	3201      	adds	r2, #1
 801fe06:	6002      	str	r2, [r0, #0]
 801fe08:	2f02      	cmp	r7, #2
 801fe0a:	f104 0314 	add.w	r3, r4, #20
 801fe0e:	d13f      	bne.n	801fe90 <__gethex+0x450>
 801fe10:	f8d8 2000 	ldr.w	r2, [r8]
 801fe14:	3a01      	subs	r2, #1
 801fe16:	42b2      	cmp	r2, r6
 801fe18:	d10a      	bne.n	801fe30 <__gethex+0x3f0>
 801fe1a:	1171      	asrs	r1, r6, #5
 801fe1c:	2201      	movs	r2, #1
 801fe1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801fe22:	f006 061f 	and.w	r6, r6, #31
 801fe26:	fa02 f606 	lsl.w	r6, r2, r6
 801fe2a:	421e      	tst	r6, r3
 801fe2c:	bf18      	it	ne
 801fe2e:	4617      	movne	r7, r2
 801fe30:	f047 0720 	orr.w	r7, r7, #32
 801fe34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fe36:	601c      	str	r4, [r3, #0]
 801fe38:	9b04      	ldr	r3, [sp, #16]
 801fe3a:	601d      	str	r5, [r3, #0]
 801fe3c:	e695      	b.n	801fb6a <__gethex+0x12a>
 801fe3e:	4299      	cmp	r1, r3
 801fe40:	f843 cc04 	str.w	ip, [r3, #-4]
 801fe44:	d8d8      	bhi.n	801fdf8 <__gethex+0x3b8>
 801fe46:	68a3      	ldr	r3, [r4, #8]
 801fe48:	459b      	cmp	fp, r3
 801fe4a:	db19      	blt.n	801fe80 <__gethex+0x440>
 801fe4c:	6861      	ldr	r1, [r4, #4]
 801fe4e:	ee18 0a10 	vmov	r0, s16
 801fe52:	3101      	adds	r1, #1
 801fe54:	f000 f92c 	bl	80200b0 <_Balloc>
 801fe58:	4681      	mov	r9, r0
 801fe5a:	b918      	cbnz	r0, 801fe64 <__gethex+0x424>
 801fe5c:	4b1a      	ldr	r3, [pc, #104]	; (801fec8 <__gethex+0x488>)
 801fe5e:	4602      	mov	r2, r0
 801fe60:	2184      	movs	r1, #132	; 0x84
 801fe62:	e6a8      	b.n	801fbb6 <__gethex+0x176>
 801fe64:	6922      	ldr	r2, [r4, #16]
 801fe66:	3202      	adds	r2, #2
 801fe68:	f104 010c 	add.w	r1, r4, #12
 801fe6c:	0092      	lsls	r2, r2, #2
 801fe6e:	300c      	adds	r0, #12
 801fe70:	f000 f910 	bl	8020094 <memcpy>
 801fe74:	4621      	mov	r1, r4
 801fe76:	ee18 0a10 	vmov	r0, s16
 801fe7a:	f000 f959 	bl	8020130 <_Bfree>
 801fe7e:	464c      	mov	r4, r9
 801fe80:	6923      	ldr	r3, [r4, #16]
 801fe82:	1c5a      	adds	r2, r3, #1
 801fe84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fe88:	6122      	str	r2, [r4, #16]
 801fe8a:	2201      	movs	r2, #1
 801fe8c:	615a      	str	r2, [r3, #20]
 801fe8e:	e7bb      	b.n	801fe08 <__gethex+0x3c8>
 801fe90:	6922      	ldr	r2, [r4, #16]
 801fe92:	455a      	cmp	r2, fp
 801fe94:	dd0b      	ble.n	801feae <__gethex+0x46e>
 801fe96:	2101      	movs	r1, #1
 801fe98:	4620      	mov	r0, r4
 801fe9a:	f7ff fd6a 	bl	801f972 <rshift>
 801fe9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fea2:	3501      	adds	r5, #1
 801fea4:	42ab      	cmp	r3, r5
 801fea6:	f6ff aed0 	blt.w	801fc4a <__gethex+0x20a>
 801feaa:	2701      	movs	r7, #1
 801feac:	e7c0      	b.n	801fe30 <__gethex+0x3f0>
 801feae:	f016 061f 	ands.w	r6, r6, #31
 801feb2:	d0fa      	beq.n	801feaa <__gethex+0x46a>
 801feb4:	449a      	add	sl, r3
 801feb6:	f1c6 0620 	rsb	r6, r6, #32
 801feba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801febe:	f000 f9ed 	bl	802029c <__hi0bits>
 801fec2:	42b0      	cmp	r0, r6
 801fec4:	dbe7      	blt.n	801fe96 <__gethex+0x456>
 801fec6:	e7f0      	b.n	801feaa <__gethex+0x46a>
 801fec8:	0802983c 	.word	0x0802983c

0801fecc <L_shift>:
 801fecc:	f1c2 0208 	rsb	r2, r2, #8
 801fed0:	0092      	lsls	r2, r2, #2
 801fed2:	b570      	push	{r4, r5, r6, lr}
 801fed4:	f1c2 0620 	rsb	r6, r2, #32
 801fed8:	6843      	ldr	r3, [r0, #4]
 801feda:	6804      	ldr	r4, [r0, #0]
 801fedc:	fa03 f506 	lsl.w	r5, r3, r6
 801fee0:	432c      	orrs	r4, r5
 801fee2:	40d3      	lsrs	r3, r2
 801fee4:	6004      	str	r4, [r0, #0]
 801fee6:	f840 3f04 	str.w	r3, [r0, #4]!
 801feea:	4288      	cmp	r0, r1
 801feec:	d3f4      	bcc.n	801fed8 <L_shift+0xc>
 801feee:	bd70      	pop	{r4, r5, r6, pc}

0801fef0 <__match>:
 801fef0:	b530      	push	{r4, r5, lr}
 801fef2:	6803      	ldr	r3, [r0, #0]
 801fef4:	3301      	adds	r3, #1
 801fef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fefa:	b914      	cbnz	r4, 801ff02 <__match+0x12>
 801fefc:	6003      	str	r3, [r0, #0]
 801fefe:	2001      	movs	r0, #1
 801ff00:	bd30      	pop	{r4, r5, pc}
 801ff02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ff0a:	2d19      	cmp	r5, #25
 801ff0c:	bf98      	it	ls
 801ff0e:	3220      	addls	r2, #32
 801ff10:	42a2      	cmp	r2, r4
 801ff12:	d0f0      	beq.n	801fef6 <__match+0x6>
 801ff14:	2000      	movs	r0, #0
 801ff16:	e7f3      	b.n	801ff00 <__match+0x10>

0801ff18 <__hexnan>:
 801ff18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff1c:	680b      	ldr	r3, [r1, #0]
 801ff1e:	6801      	ldr	r1, [r0, #0]
 801ff20:	115e      	asrs	r6, r3, #5
 801ff22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ff26:	f013 031f 	ands.w	r3, r3, #31
 801ff2a:	b087      	sub	sp, #28
 801ff2c:	bf18      	it	ne
 801ff2e:	3604      	addne	r6, #4
 801ff30:	2500      	movs	r5, #0
 801ff32:	1f37      	subs	r7, r6, #4
 801ff34:	4682      	mov	sl, r0
 801ff36:	4690      	mov	r8, r2
 801ff38:	9301      	str	r3, [sp, #4]
 801ff3a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ff3e:	46b9      	mov	r9, r7
 801ff40:	463c      	mov	r4, r7
 801ff42:	9502      	str	r5, [sp, #8]
 801ff44:	46ab      	mov	fp, r5
 801ff46:	784a      	ldrb	r2, [r1, #1]
 801ff48:	1c4b      	adds	r3, r1, #1
 801ff4a:	9303      	str	r3, [sp, #12]
 801ff4c:	b342      	cbz	r2, 801ffa0 <__hexnan+0x88>
 801ff4e:	4610      	mov	r0, r2
 801ff50:	9105      	str	r1, [sp, #20]
 801ff52:	9204      	str	r2, [sp, #16]
 801ff54:	f7ff fd5f 	bl	801fa16 <__hexdig_fun>
 801ff58:	2800      	cmp	r0, #0
 801ff5a:	d14f      	bne.n	801fffc <__hexnan+0xe4>
 801ff5c:	9a04      	ldr	r2, [sp, #16]
 801ff5e:	9905      	ldr	r1, [sp, #20]
 801ff60:	2a20      	cmp	r2, #32
 801ff62:	d818      	bhi.n	801ff96 <__hexnan+0x7e>
 801ff64:	9b02      	ldr	r3, [sp, #8]
 801ff66:	459b      	cmp	fp, r3
 801ff68:	dd13      	ble.n	801ff92 <__hexnan+0x7a>
 801ff6a:	454c      	cmp	r4, r9
 801ff6c:	d206      	bcs.n	801ff7c <__hexnan+0x64>
 801ff6e:	2d07      	cmp	r5, #7
 801ff70:	dc04      	bgt.n	801ff7c <__hexnan+0x64>
 801ff72:	462a      	mov	r2, r5
 801ff74:	4649      	mov	r1, r9
 801ff76:	4620      	mov	r0, r4
 801ff78:	f7ff ffa8 	bl	801fecc <L_shift>
 801ff7c:	4544      	cmp	r4, r8
 801ff7e:	d950      	bls.n	8020022 <__hexnan+0x10a>
 801ff80:	2300      	movs	r3, #0
 801ff82:	f1a4 0904 	sub.w	r9, r4, #4
 801ff86:	f844 3c04 	str.w	r3, [r4, #-4]
 801ff8a:	f8cd b008 	str.w	fp, [sp, #8]
 801ff8e:	464c      	mov	r4, r9
 801ff90:	461d      	mov	r5, r3
 801ff92:	9903      	ldr	r1, [sp, #12]
 801ff94:	e7d7      	b.n	801ff46 <__hexnan+0x2e>
 801ff96:	2a29      	cmp	r2, #41	; 0x29
 801ff98:	d156      	bne.n	8020048 <__hexnan+0x130>
 801ff9a:	3102      	adds	r1, #2
 801ff9c:	f8ca 1000 	str.w	r1, [sl]
 801ffa0:	f1bb 0f00 	cmp.w	fp, #0
 801ffa4:	d050      	beq.n	8020048 <__hexnan+0x130>
 801ffa6:	454c      	cmp	r4, r9
 801ffa8:	d206      	bcs.n	801ffb8 <__hexnan+0xa0>
 801ffaa:	2d07      	cmp	r5, #7
 801ffac:	dc04      	bgt.n	801ffb8 <__hexnan+0xa0>
 801ffae:	462a      	mov	r2, r5
 801ffb0:	4649      	mov	r1, r9
 801ffb2:	4620      	mov	r0, r4
 801ffb4:	f7ff ff8a 	bl	801fecc <L_shift>
 801ffb8:	4544      	cmp	r4, r8
 801ffba:	d934      	bls.n	8020026 <__hexnan+0x10e>
 801ffbc:	f1a8 0204 	sub.w	r2, r8, #4
 801ffc0:	4623      	mov	r3, r4
 801ffc2:	f853 1b04 	ldr.w	r1, [r3], #4
 801ffc6:	f842 1f04 	str.w	r1, [r2, #4]!
 801ffca:	429f      	cmp	r7, r3
 801ffcc:	d2f9      	bcs.n	801ffc2 <__hexnan+0xaa>
 801ffce:	1b3b      	subs	r3, r7, r4
 801ffd0:	f023 0303 	bic.w	r3, r3, #3
 801ffd4:	3304      	adds	r3, #4
 801ffd6:	3401      	adds	r4, #1
 801ffd8:	3e03      	subs	r6, #3
 801ffda:	42b4      	cmp	r4, r6
 801ffdc:	bf88      	it	hi
 801ffde:	2304      	movhi	r3, #4
 801ffe0:	4443      	add	r3, r8
 801ffe2:	2200      	movs	r2, #0
 801ffe4:	f843 2b04 	str.w	r2, [r3], #4
 801ffe8:	429f      	cmp	r7, r3
 801ffea:	d2fb      	bcs.n	801ffe4 <__hexnan+0xcc>
 801ffec:	683b      	ldr	r3, [r7, #0]
 801ffee:	b91b      	cbnz	r3, 801fff8 <__hexnan+0xe0>
 801fff0:	4547      	cmp	r7, r8
 801fff2:	d127      	bne.n	8020044 <__hexnan+0x12c>
 801fff4:	2301      	movs	r3, #1
 801fff6:	603b      	str	r3, [r7, #0]
 801fff8:	2005      	movs	r0, #5
 801fffa:	e026      	b.n	802004a <__hexnan+0x132>
 801fffc:	3501      	adds	r5, #1
 801fffe:	2d08      	cmp	r5, #8
 8020000:	f10b 0b01 	add.w	fp, fp, #1
 8020004:	dd06      	ble.n	8020014 <__hexnan+0xfc>
 8020006:	4544      	cmp	r4, r8
 8020008:	d9c3      	bls.n	801ff92 <__hexnan+0x7a>
 802000a:	2300      	movs	r3, #0
 802000c:	f844 3c04 	str.w	r3, [r4, #-4]
 8020010:	2501      	movs	r5, #1
 8020012:	3c04      	subs	r4, #4
 8020014:	6822      	ldr	r2, [r4, #0]
 8020016:	f000 000f 	and.w	r0, r0, #15
 802001a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802001e:	6022      	str	r2, [r4, #0]
 8020020:	e7b7      	b.n	801ff92 <__hexnan+0x7a>
 8020022:	2508      	movs	r5, #8
 8020024:	e7b5      	b.n	801ff92 <__hexnan+0x7a>
 8020026:	9b01      	ldr	r3, [sp, #4]
 8020028:	2b00      	cmp	r3, #0
 802002a:	d0df      	beq.n	801ffec <__hexnan+0xd4>
 802002c:	f04f 32ff 	mov.w	r2, #4294967295
 8020030:	f1c3 0320 	rsb	r3, r3, #32
 8020034:	fa22 f303 	lsr.w	r3, r2, r3
 8020038:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802003c:	401a      	ands	r2, r3
 802003e:	f846 2c04 	str.w	r2, [r6, #-4]
 8020042:	e7d3      	b.n	801ffec <__hexnan+0xd4>
 8020044:	3f04      	subs	r7, #4
 8020046:	e7d1      	b.n	801ffec <__hexnan+0xd4>
 8020048:	2004      	movs	r0, #4
 802004a:	b007      	add	sp, #28
 802004c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020050 <_localeconv_r>:
 8020050:	4800      	ldr	r0, [pc, #0]	; (8020054 <_localeconv_r+0x4>)
 8020052:	4770      	bx	lr
 8020054:	2000077c 	.word	0x2000077c

08020058 <__retarget_lock_init_recursive>:
 8020058:	4770      	bx	lr

0802005a <__retarget_lock_acquire_recursive>:
 802005a:	4770      	bx	lr

0802005c <__retarget_lock_release_recursive>:
 802005c:	4770      	bx	lr
	...

08020060 <malloc>:
 8020060:	4b02      	ldr	r3, [pc, #8]	; (802006c <malloc+0xc>)
 8020062:	4601      	mov	r1, r0
 8020064:	6818      	ldr	r0, [r3, #0]
 8020066:	f000 bd3d 	b.w	8020ae4 <_malloc_r>
 802006a:	bf00      	nop
 802006c:	20000624 	.word	0x20000624

08020070 <__ascii_mbtowc>:
 8020070:	b082      	sub	sp, #8
 8020072:	b901      	cbnz	r1, 8020076 <__ascii_mbtowc+0x6>
 8020074:	a901      	add	r1, sp, #4
 8020076:	b142      	cbz	r2, 802008a <__ascii_mbtowc+0x1a>
 8020078:	b14b      	cbz	r3, 802008e <__ascii_mbtowc+0x1e>
 802007a:	7813      	ldrb	r3, [r2, #0]
 802007c:	600b      	str	r3, [r1, #0]
 802007e:	7812      	ldrb	r2, [r2, #0]
 8020080:	1e10      	subs	r0, r2, #0
 8020082:	bf18      	it	ne
 8020084:	2001      	movne	r0, #1
 8020086:	b002      	add	sp, #8
 8020088:	4770      	bx	lr
 802008a:	4610      	mov	r0, r2
 802008c:	e7fb      	b.n	8020086 <__ascii_mbtowc+0x16>
 802008e:	f06f 0001 	mvn.w	r0, #1
 8020092:	e7f8      	b.n	8020086 <__ascii_mbtowc+0x16>

08020094 <memcpy>:
 8020094:	440a      	add	r2, r1
 8020096:	4291      	cmp	r1, r2
 8020098:	f100 33ff 	add.w	r3, r0, #4294967295
 802009c:	d100      	bne.n	80200a0 <memcpy+0xc>
 802009e:	4770      	bx	lr
 80200a0:	b510      	push	{r4, lr}
 80200a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80200a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80200aa:	4291      	cmp	r1, r2
 80200ac:	d1f9      	bne.n	80200a2 <memcpy+0xe>
 80200ae:	bd10      	pop	{r4, pc}

080200b0 <_Balloc>:
 80200b0:	b570      	push	{r4, r5, r6, lr}
 80200b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80200b4:	4604      	mov	r4, r0
 80200b6:	460d      	mov	r5, r1
 80200b8:	b976      	cbnz	r6, 80200d8 <_Balloc+0x28>
 80200ba:	2010      	movs	r0, #16
 80200bc:	f7ff ffd0 	bl	8020060 <malloc>
 80200c0:	4602      	mov	r2, r0
 80200c2:	6260      	str	r0, [r4, #36]	; 0x24
 80200c4:	b920      	cbnz	r0, 80200d0 <_Balloc+0x20>
 80200c6:	4b18      	ldr	r3, [pc, #96]	; (8020128 <_Balloc+0x78>)
 80200c8:	4818      	ldr	r0, [pc, #96]	; (802012c <_Balloc+0x7c>)
 80200ca:	2166      	movs	r1, #102	; 0x66
 80200cc:	f001 f80e 	bl	80210ec <__assert_func>
 80200d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80200d4:	6006      	str	r6, [r0, #0]
 80200d6:	60c6      	str	r6, [r0, #12]
 80200d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80200da:	68f3      	ldr	r3, [r6, #12]
 80200dc:	b183      	cbz	r3, 8020100 <_Balloc+0x50>
 80200de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80200e0:	68db      	ldr	r3, [r3, #12]
 80200e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80200e6:	b9b8      	cbnz	r0, 8020118 <_Balloc+0x68>
 80200e8:	2101      	movs	r1, #1
 80200ea:	fa01 f605 	lsl.w	r6, r1, r5
 80200ee:	1d72      	adds	r2, r6, #5
 80200f0:	0092      	lsls	r2, r2, #2
 80200f2:	4620      	mov	r0, r4
 80200f4:	f000 fc97 	bl	8020a26 <_calloc_r>
 80200f8:	b160      	cbz	r0, 8020114 <_Balloc+0x64>
 80200fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80200fe:	e00e      	b.n	802011e <_Balloc+0x6e>
 8020100:	2221      	movs	r2, #33	; 0x21
 8020102:	2104      	movs	r1, #4
 8020104:	4620      	mov	r0, r4
 8020106:	f000 fc8e 	bl	8020a26 <_calloc_r>
 802010a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802010c:	60f0      	str	r0, [r6, #12]
 802010e:	68db      	ldr	r3, [r3, #12]
 8020110:	2b00      	cmp	r3, #0
 8020112:	d1e4      	bne.n	80200de <_Balloc+0x2e>
 8020114:	2000      	movs	r0, #0
 8020116:	bd70      	pop	{r4, r5, r6, pc}
 8020118:	6802      	ldr	r2, [r0, #0]
 802011a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802011e:	2300      	movs	r3, #0
 8020120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020124:	e7f7      	b.n	8020116 <_Balloc+0x66>
 8020126:	bf00      	nop
 8020128:	080297c6 	.word	0x080297c6
 802012c:	08029930 	.word	0x08029930

08020130 <_Bfree>:
 8020130:	b570      	push	{r4, r5, r6, lr}
 8020132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020134:	4605      	mov	r5, r0
 8020136:	460c      	mov	r4, r1
 8020138:	b976      	cbnz	r6, 8020158 <_Bfree+0x28>
 802013a:	2010      	movs	r0, #16
 802013c:	f7ff ff90 	bl	8020060 <malloc>
 8020140:	4602      	mov	r2, r0
 8020142:	6268      	str	r0, [r5, #36]	; 0x24
 8020144:	b920      	cbnz	r0, 8020150 <_Bfree+0x20>
 8020146:	4b09      	ldr	r3, [pc, #36]	; (802016c <_Bfree+0x3c>)
 8020148:	4809      	ldr	r0, [pc, #36]	; (8020170 <_Bfree+0x40>)
 802014a:	218a      	movs	r1, #138	; 0x8a
 802014c:	f000 ffce 	bl	80210ec <__assert_func>
 8020150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020154:	6006      	str	r6, [r0, #0]
 8020156:	60c6      	str	r6, [r0, #12]
 8020158:	b13c      	cbz	r4, 802016a <_Bfree+0x3a>
 802015a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802015c:	6862      	ldr	r2, [r4, #4]
 802015e:	68db      	ldr	r3, [r3, #12]
 8020160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020164:	6021      	str	r1, [r4, #0]
 8020166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802016a:	bd70      	pop	{r4, r5, r6, pc}
 802016c:	080297c6 	.word	0x080297c6
 8020170:	08029930 	.word	0x08029930

08020174 <__multadd>:
 8020174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020178:	690e      	ldr	r6, [r1, #16]
 802017a:	4607      	mov	r7, r0
 802017c:	4698      	mov	r8, r3
 802017e:	460c      	mov	r4, r1
 8020180:	f101 0014 	add.w	r0, r1, #20
 8020184:	2300      	movs	r3, #0
 8020186:	6805      	ldr	r5, [r0, #0]
 8020188:	b2a9      	uxth	r1, r5
 802018a:	fb02 8101 	mla	r1, r2, r1, r8
 802018e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8020192:	0c2d      	lsrs	r5, r5, #16
 8020194:	fb02 c505 	mla	r5, r2, r5, ip
 8020198:	b289      	uxth	r1, r1
 802019a:	3301      	adds	r3, #1
 802019c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80201a0:	429e      	cmp	r6, r3
 80201a2:	f840 1b04 	str.w	r1, [r0], #4
 80201a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80201aa:	dcec      	bgt.n	8020186 <__multadd+0x12>
 80201ac:	f1b8 0f00 	cmp.w	r8, #0
 80201b0:	d022      	beq.n	80201f8 <__multadd+0x84>
 80201b2:	68a3      	ldr	r3, [r4, #8]
 80201b4:	42b3      	cmp	r3, r6
 80201b6:	dc19      	bgt.n	80201ec <__multadd+0x78>
 80201b8:	6861      	ldr	r1, [r4, #4]
 80201ba:	4638      	mov	r0, r7
 80201bc:	3101      	adds	r1, #1
 80201be:	f7ff ff77 	bl	80200b0 <_Balloc>
 80201c2:	4605      	mov	r5, r0
 80201c4:	b928      	cbnz	r0, 80201d2 <__multadd+0x5e>
 80201c6:	4602      	mov	r2, r0
 80201c8:	4b0d      	ldr	r3, [pc, #52]	; (8020200 <__multadd+0x8c>)
 80201ca:	480e      	ldr	r0, [pc, #56]	; (8020204 <__multadd+0x90>)
 80201cc:	21b5      	movs	r1, #181	; 0xb5
 80201ce:	f000 ff8d 	bl	80210ec <__assert_func>
 80201d2:	6922      	ldr	r2, [r4, #16]
 80201d4:	3202      	adds	r2, #2
 80201d6:	f104 010c 	add.w	r1, r4, #12
 80201da:	0092      	lsls	r2, r2, #2
 80201dc:	300c      	adds	r0, #12
 80201de:	f7ff ff59 	bl	8020094 <memcpy>
 80201e2:	4621      	mov	r1, r4
 80201e4:	4638      	mov	r0, r7
 80201e6:	f7ff ffa3 	bl	8020130 <_Bfree>
 80201ea:	462c      	mov	r4, r5
 80201ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80201f0:	3601      	adds	r6, #1
 80201f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80201f6:	6126      	str	r6, [r4, #16]
 80201f8:	4620      	mov	r0, r4
 80201fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201fe:	bf00      	nop
 8020200:	0802983c 	.word	0x0802983c
 8020204:	08029930 	.word	0x08029930

08020208 <__s2b>:
 8020208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802020c:	460c      	mov	r4, r1
 802020e:	4615      	mov	r5, r2
 8020210:	461f      	mov	r7, r3
 8020212:	2209      	movs	r2, #9
 8020214:	3308      	adds	r3, #8
 8020216:	4606      	mov	r6, r0
 8020218:	fb93 f3f2 	sdiv	r3, r3, r2
 802021c:	2100      	movs	r1, #0
 802021e:	2201      	movs	r2, #1
 8020220:	429a      	cmp	r2, r3
 8020222:	db09      	blt.n	8020238 <__s2b+0x30>
 8020224:	4630      	mov	r0, r6
 8020226:	f7ff ff43 	bl	80200b0 <_Balloc>
 802022a:	b940      	cbnz	r0, 802023e <__s2b+0x36>
 802022c:	4602      	mov	r2, r0
 802022e:	4b19      	ldr	r3, [pc, #100]	; (8020294 <__s2b+0x8c>)
 8020230:	4819      	ldr	r0, [pc, #100]	; (8020298 <__s2b+0x90>)
 8020232:	21ce      	movs	r1, #206	; 0xce
 8020234:	f000 ff5a 	bl	80210ec <__assert_func>
 8020238:	0052      	lsls	r2, r2, #1
 802023a:	3101      	adds	r1, #1
 802023c:	e7f0      	b.n	8020220 <__s2b+0x18>
 802023e:	9b08      	ldr	r3, [sp, #32]
 8020240:	6143      	str	r3, [r0, #20]
 8020242:	2d09      	cmp	r5, #9
 8020244:	f04f 0301 	mov.w	r3, #1
 8020248:	6103      	str	r3, [r0, #16]
 802024a:	dd16      	ble.n	802027a <__s2b+0x72>
 802024c:	f104 0909 	add.w	r9, r4, #9
 8020250:	46c8      	mov	r8, r9
 8020252:	442c      	add	r4, r5
 8020254:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020258:	4601      	mov	r1, r0
 802025a:	3b30      	subs	r3, #48	; 0x30
 802025c:	220a      	movs	r2, #10
 802025e:	4630      	mov	r0, r6
 8020260:	f7ff ff88 	bl	8020174 <__multadd>
 8020264:	45a0      	cmp	r8, r4
 8020266:	d1f5      	bne.n	8020254 <__s2b+0x4c>
 8020268:	f1a5 0408 	sub.w	r4, r5, #8
 802026c:	444c      	add	r4, r9
 802026e:	1b2d      	subs	r5, r5, r4
 8020270:	1963      	adds	r3, r4, r5
 8020272:	42bb      	cmp	r3, r7
 8020274:	db04      	blt.n	8020280 <__s2b+0x78>
 8020276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802027a:	340a      	adds	r4, #10
 802027c:	2509      	movs	r5, #9
 802027e:	e7f6      	b.n	802026e <__s2b+0x66>
 8020280:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020284:	4601      	mov	r1, r0
 8020286:	3b30      	subs	r3, #48	; 0x30
 8020288:	220a      	movs	r2, #10
 802028a:	4630      	mov	r0, r6
 802028c:	f7ff ff72 	bl	8020174 <__multadd>
 8020290:	e7ee      	b.n	8020270 <__s2b+0x68>
 8020292:	bf00      	nop
 8020294:	0802983c 	.word	0x0802983c
 8020298:	08029930 	.word	0x08029930

0802029c <__hi0bits>:
 802029c:	0c03      	lsrs	r3, r0, #16
 802029e:	041b      	lsls	r3, r3, #16
 80202a0:	b9d3      	cbnz	r3, 80202d8 <__hi0bits+0x3c>
 80202a2:	0400      	lsls	r0, r0, #16
 80202a4:	2310      	movs	r3, #16
 80202a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80202aa:	bf04      	itt	eq
 80202ac:	0200      	lsleq	r0, r0, #8
 80202ae:	3308      	addeq	r3, #8
 80202b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80202b4:	bf04      	itt	eq
 80202b6:	0100      	lsleq	r0, r0, #4
 80202b8:	3304      	addeq	r3, #4
 80202ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80202be:	bf04      	itt	eq
 80202c0:	0080      	lsleq	r0, r0, #2
 80202c2:	3302      	addeq	r3, #2
 80202c4:	2800      	cmp	r0, #0
 80202c6:	db05      	blt.n	80202d4 <__hi0bits+0x38>
 80202c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80202cc:	f103 0301 	add.w	r3, r3, #1
 80202d0:	bf08      	it	eq
 80202d2:	2320      	moveq	r3, #32
 80202d4:	4618      	mov	r0, r3
 80202d6:	4770      	bx	lr
 80202d8:	2300      	movs	r3, #0
 80202da:	e7e4      	b.n	80202a6 <__hi0bits+0xa>

080202dc <__lo0bits>:
 80202dc:	6803      	ldr	r3, [r0, #0]
 80202de:	f013 0207 	ands.w	r2, r3, #7
 80202e2:	4601      	mov	r1, r0
 80202e4:	d00b      	beq.n	80202fe <__lo0bits+0x22>
 80202e6:	07da      	lsls	r2, r3, #31
 80202e8:	d424      	bmi.n	8020334 <__lo0bits+0x58>
 80202ea:	0798      	lsls	r0, r3, #30
 80202ec:	bf49      	itett	mi
 80202ee:	085b      	lsrmi	r3, r3, #1
 80202f0:	089b      	lsrpl	r3, r3, #2
 80202f2:	2001      	movmi	r0, #1
 80202f4:	600b      	strmi	r3, [r1, #0]
 80202f6:	bf5c      	itt	pl
 80202f8:	600b      	strpl	r3, [r1, #0]
 80202fa:	2002      	movpl	r0, #2
 80202fc:	4770      	bx	lr
 80202fe:	b298      	uxth	r0, r3
 8020300:	b9b0      	cbnz	r0, 8020330 <__lo0bits+0x54>
 8020302:	0c1b      	lsrs	r3, r3, #16
 8020304:	2010      	movs	r0, #16
 8020306:	f013 0fff 	tst.w	r3, #255	; 0xff
 802030a:	bf04      	itt	eq
 802030c:	0a1b      	lsreq	r3, r3, #8
 802030e:	3008      	addeq	r0, #8
 8020310:	071a      	lsls	r2, r3, #28
 8020312:	bf04      	itt	eq
 8020314:	091b      	lsreq	r3, r3, #4
 8020316:	3004      	addeq	r0, #4
 8020318:	079a      	lsls	r2, r3, #30
 802031a:	bf04      	itt	eq
 802031c:	089b      	lsreq	r3, r3, #2
 802031e:	3002      	addeq	r0, #2
 8020320:	07da      	lsls	r2, r3, #31
 8020322:	d403      	bmi.n	802032c <__lo0bits+0x50>
 8020324:	085b      	lsrs	r3, r3, #1
 8020326:	f100 0001 	add.w	r0, r0, #1
 802032a:	d005      	beq.n	8020338 <__lo0bits+0x5c>
 802032c:	600b      	str	r3, [r1, #0]
 802032e:	4770      	bx	lr
 8020330:	4610      	mov	r0, r2
 8020332:	e7e8      	b.n	8020306 <__lo0bits+0x2a>
 8020334:	2000      	movs	r0, #0
 8020336:	4770      	bx	lr
 8020338:	2020      	movs	r0, #32
 802033a:	4770      	bx	lr

0802033c <__i2b>:
 802033c:	b510      	push	{r4, lr}
 802033e:	460c      	mov	r4, r1
 8020340:	2101      	movs	r1, #1
 8020342:	f7ff feb5 	bl	80200b0 <_Balloc>
 8020346:	4602      	mov	r2, r0
 8020348:	b928      	cbnz	r0, 8020356 <__i2b+0x1a>
 802034a:	4b05      	ldr	r3, [pc, #20]	; (8020360 <__i2b+0x24>)
 802034c:	4805      	ldr	r0, [pc, #20]	; (8020364 <__i2b+0x28>)
 802034e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020352:	f000 fecb 	bl	80210ec <__assert_func>
 8020356:	2301      	movs	r3, #1
 8020358:	6144      	str	r4, [r0, #20]
 802035a:	6103      	str	r3, [r0, #16]
 802035c:	bd10      	pop	{r4, pc}
 802035e:	bf00      	nop
 8020360:	0802983c 	.word	0x0802983c
 8020364:	08029930 	.word	0x08029930

08020368 <__multiply>:
 8020368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802036c:	4614      	mov	r4, r2
 802036e:	690a      	ldr	r2, [r1, #16]
 8020370:	6923      	ldr	r3, [r4, #16]
 8020372:	429a      	cmp	r2, r3
 8020374:	bfb8      	it	lt
 8020376:	460b      	movlt	r3, r1
 8020378:	460d      	mov	r5, r1
 802037a:	bfbc      	itt	lt
 802037c:	4625      	movlt	r5, r4
 802037e:	461c      	movlt	r4, r3
 8020380:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8020384:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020388:	68ab      	ldr	r3, [r5, #8]
 802038a:	6869      	ldr	r1, [r5, #4]
 802038c:	eb0a 0709 	add.w	r7, sl, r9
 8020390:	42bb      	cmp	r3, r7
 8020392:	b085      	sub	sp, #20
 8020394:	bfb8      	it	lt
 8020396:	3101      	addlt	r1, #1
 8020398:	f7ff fe8a 	bl	80200b0 <_Balloc>
 802039c:	b930      	cbnz	r0, 80203ac <__multiply+0x44>
 802039e:	4602      	mov	r2, r0
 80203a0:	4b42      	ldr	r3, [pc, #264]	; (80204ac <__multiply+0x144>)
 80203a2:	4843      	ldr	r0, [pc, #268]	; (80204b0 <__multiply+0x148>)
 80203a4:	f240 115d 	movw	r1, #349	; 0x15d
 80203a8:	f000 fea0 	bl	80210ec <__assert_func>
 80203ac:	f100 0614 	add.w	r6, r0, #20
 80203b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80203b4:	4633      	mov	r3, r6
 80203b6:	2200      	movs	r2, #0
 80203b8:	4543      	cmp	r3, r8
 80203ba:	d31e      	bcc.n	80203fa <__multiply+0x92>
 80203bc:	f105 0c14 	add.w	ip, r5, #20
 80203c0:	f104 0314 	add.w	r3, r4, #20
 80203c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80203c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80203cc:	9202      	str	r2, [sp, #8]
 80203ce:	ebac 0205 	sub.w	r2, ip, r5
 80203d2:	3a15      	subs	r2, #21
 80203d4:	f022 0203 	bic.w	r2, r2, #3
 80203d8:	3204      	adds	r2, #4
 80203da:	f105 0115 	add.w	r1, r5, #21
 80203de:	458c      	cmp	ip, r1
 80203e0:	bf38      	it	cc
 80203e2:	2204      	movcc	r2, #4
 80203e4:	9201      	str	r2, [sp, #4]
 80203e6:	9a02      	ldr	r2, [sp, #8]
 80203e8:	9303      	str	r3, [sp, #12]
 80203ea:	429a      	cmp	r2, r3
 80203ec:	d808      	bhi.n	8020400 <__multiply+0x98>
 80203ee:	2f00      	cmp	r7, #0
 80203f0:	dc55      	bgt.n	802049e <__multiply+0x136>
 80203f2:	6107      	str	r7, [r0, #16]
 80203f4:	b005      	add	sp, #20
 80203f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203fa:	f843 2b04 	str.w	r2, [r3], #4
 80203fe:	e7db      	b.n	80203b8 <__multiply+0x50>
 8020400:	f8b3 a000 	ldrh.w	sl, [r3]
 8020404:	f1ba 0f00 	cmp.w	sl, #0
 8020408:	d020      	beq.n	802044c <__multiply+0xe4>
 802040a:	f105 0e14 	add.w	lr, r5, #20
 802040e:	46b1      	mov	r9, r6
 8020410:	2200      	movs	r2, #0
 8020412:	f85e 4b04 	ldr.w	r4, [lr], #4
 8020416:	f8d9 b000 	ldr.w	fp, [r9]
 802041a:	b2a1      	uxth	r1, r4
 802041c:	fa1f fb8b 	uxth.w	fp, fp
 8020420:	fb0a b101 	mla	r1, sl, r1, fp
 8020424:	4411      	add	r1, r2
 8020426:	f8d9 2000 	ldr.w	r2, [r9]
 802042a:	0c24      	lsrs	r4, r4, #16
 802042c:	0c12      	lsrs	r2, r2, #16
 802042e:	fb0a 2404 	mla	r4, sl, r4, r2
 8020432:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8020436:	b289      	uxth	r1, r1
 8020438:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802043c:	45f4      	cmp	ip, lr
 802043e:	f849 1b04 	str.w	r1, [r9], #4
 8020442:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8020446:	d8e4      	bhi.n	8020412 <__multiply+0xaa>
 8020448:	9901      	ldr	r1, [sp, #4]
 802044a:	5072      	str	r2, [r6, r1]
 802044c:	9a03      	ldr	r2, [sp, #12]
 802044e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020452:	3304      	adds	r3, #4
 8020454:	f1b9 0f00 	cmp.w	r9, #0
 8020458:	d01f      	beq.n	802049a <__multiply+0x132>
 802045a:	6834      	ldr	r4, [r6, #0]
 802045c:	f105 0114 	add.w	r1, r5, #20
 8020460:	46b6      	mov	lr, r6
 8020462:	f04f 0a00 	mov.w	sl, #0
 8020466:	880a      	ldrh	r2, [r1, #0]
 8020468:	f8be b002 	ldrh.w	fp, [lr, #2]
 802046c:	fb09 b202 	mla	r2, r9, r2, fp
 8020470:	4492      	add	sl, r2
 8020472:	b2a4      	uxth	r4, r4
 8020474:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020478:	f84e 4b04 	str.w	r4, [lr], #4
 802047c:	f851 4b04 	ldr.w	r4, [r1], #4
 8020480:	f8be 2000 	ldrh.w	r2, [lr]
 8020484:	0c24      	lsrs	r4, r4, #16
 8020486:	fb09 2404 	mla	r4, r9, r4, r2
 802048a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802048e:	458c      	cmp	ip, r1
 8020490:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020494:	d8e7      	bhi.n	8020466 <__multiply+0xfe>
 8020496:	9a01      	ldr	r2, [sp, #4]
 8020498:	50b4      	str	r4, [r6, r2]
 802049a:	3604      	adds	r6, #4
 802049c:	e7a3      	b.n	80203e6 <__multiply+0x7e>
 802049e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	d1a5      	bne.n	80203f2 <__multiply+0x8a>
 80204a6:	3f01      	subs	r7, #1
 80204a8:	e7a1      	b.n	80203ee <__multiply+0x86>
 80204aa:	bf00      	nop
 80204ac:	0802983c 	.word	0x0802983c
 80204b0:	08029930 	.word	0x08029930

080204b4 <__pow5mult>:
 80204b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204b8:	4615      	mov	r5, r2
 80204ba:	f012 0203 	ands.w	r2, r2, #3
 80204be:	4606      	mov	r6, r0
 80204c0:	460f      	mov	r7, r1
 80204c2:	d007      	beq.n	80204d4 <__pow5mult+0x20>
 80204c4:	4c25      	ldr	r4, [pc, #148]	; (802055c <__pow5mult+0xa8>)
 80204c6:	3a01      	subs	r2, #1
 80204c8:	2300      	movs	r3, #0
 80204ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80204ce:	f7ff fe51 	bl	8020174 <__multadd>
 80204d2:	4607      	mov	r7, r0
 80204d4:	10ad      	asrs	r5, r5, #2
 80204d6:	d03d      	beq.n	8020554 <__pow5mult+0xa0>
 80204d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80204da:	b97c      	cbnz	r4, 80204fc <__pow5mult+0x48>
 80204dc:	2010      	movs	r0, #16
 80204de:	f7ff fdbf 	bl	8020060 <malloc>
 80204e2:	4602      	mov	r2, r0
 80204e4:	6270      	str	r0, [r6, #36]	; 0x24
 80204e6:	b928      	cbnz	r0, 80204f4 <__pow5mult+0x40>
 80204e8:	4b1d      	ldr	r3, [pc, #116]	; (8020560 <__pow5mult+0xac>)
 80204ea:	481e      	ldr	r0, [pc, #120]	; (8020564 <__pow5mult+0xb0>)
 80204ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80204f0:	f000 fdfc 	bl	80210ec <__assert_func>
 80204f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80204f8:	6004      	str	r4, [r0, #0]
 80204fa:	60c4      	str	r4, [r0, #12]
 80204fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020504:	b94c      	cbnz	r4, 802051a <__pow5mult+0x66>
 8020506:	f240 2171 	movw	r1, #625	; 0x271
 802050a:	4630      	mov	r0, r6
 802050c:	f7ff ff16 	bl	802033c <__i2b>
 8020510:	2300      	movs	r3, #0
 8020512:	f8c8 0008 	str.w	r0, [r8, #8]
 8020516:	4604      	mov	r4, r0
 8020518:	6003      	str	r3, [r0, #0]
 802051a:	f04f 0900 	mov.w	r9, #0
 802051e:	07eb      	lsls	r3, r5, #31
 8020520:	d50a      	bpl.n	8020538 <__pow5mult+0x84>
 8020522:	4639      	mov	r1, r7
 8020524:	4622      	mov	r2, r4
 8020526:	4630      	mov	r0, r6
 8020528:	f7ff ff1e 	bl	8020368 <__multiply>
 802052c:	4639      	mov	r1, r7
 802052e:	4680      	mov	r8, r0
 8020530:	4630      	mov	r0, r6
 8020532:	f7ff fdfd 	bl	8020130 <_Bfree>
 8020536:	4647      	mov	r7, r8
 8020538:	106d      	asrs	r5, r5, #1
 802053a:	d00b      	beq.n	8020554 <__pow5mult+0xa0>
 802053c:	6820      	ldr	r0, [r4, #0]
 802053e:	b938      	cbnz	r0, 8020550 <__pow5mult+0x9c>
 8020540:	4622      	mov	r2, r4
 8020542:	4621      	mov	r1, r4
 8020544:	4630      	mov	r0, r6
 8020546:	f7ff ff0f 	bl	8020368 <__multiply>
 802054a:	6020      	str	r0, [r4, #0]
 802054c:	f8c0 9000 	str.w	r9, [r0]
 8020550:	4604      	mov	r4, r0
 8020552:	e7e4      	b.n	802051e <__pow5mult+0x6a>
 8020554:	4638      	mov	r0, r7
 8020556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802055a:	bf00      	nop
 802055c:	08029a80 	.word	0x08029a80
 8020560:	080297c6 	.word	0x080297c6
 8020564:	08029930 	.word	0x08029930

08020568 <__lshift>:
 8020568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802056c:	460c      	mov	r4, r1
 802056e:	6849      	ldr	r1, [r1, #4]
 8020570:	6923      	ldr	r3, [r4, #16]
 8020572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020576:	68a3      	ldr	r3, [r4, #8]
 8020578:	4607      	mov	r7, r0
 802057a:	4691      	mov	r9, r2
 802057c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020580:	f108 0601 	add.w	r6, r8, #1
 8020584:	42b3      	cmp	r3, r6
 8020586:	db0b      	blt.n	80205a0 <__lshift+0x38>
 8020588:	4638      	mov	r0, r7
 802058a:	f7ff fd91 	bl	80200b0 <_Balloc>
 802058e:	4605      	mov	r5, r0
 8020590:	b948      	cbnz	r0, 80205a6 <__lshift+0x3e>
 8020592:	4602      	mov	r2, r0
 8020594:	4b28      	ldr	r3, [pc, #160]	; (8020638 <__lshift+0xd0>)
 8020596:	4829      	ldr	r0, [pc, #164]	; (802063c <__lshift+0xd4>)
 8020598:	f240 11d9 	movw	r1, #473	; 0x1d9
 802059c:	f000 fda6 	bl	80210ec <__assert_func>
 80205a0:	3101      	adds	r1, #1
 80205a2:	005b      	lsls	r3, r3, #1
 80205a4:	e7ee      	b.n	8020584 <__lshift+0x1c>
 80205a6:	2300      	movs	r3, #0
 80205a8:	f100 0114 	add.w	r1, r0, #20
 80205ac:	f100 0210 	add.w	r2, r0, #16
 80205b0:	4618      	mov	r0, r3
 80205b2:	4553      	cmp	r3, sl
 80205b4:	db33      	blt.n	802061e <__lshift+0xb6>
 80205b6:	6920      	ldr	r0, [r4, #16]
 80205b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80205bc:	f104 0314 	add.w	r3, r4, #20
 80205c0:	f019 091f 	ands.w	r9, r9, #31
 80205c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80205c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80205cc:	d02b      	beq.n	8020626 <__lshift+0xbe>
 80205ce:	f1c9 0e20 	rsb	lr, r9, #32
 80205d2:	468a      	mov	sl, r1
 80205d4:	2200      	movs	r2, #0
 80205d6:	6818      	ldr	r0, [r3, #0]
 80205d8:	fa00 f009 	lsl.w	r0, r0, r9
 80205dc:	4302      	orrs	r2, r0
 80205de:	f84a 2b04 	str.w	r2, [sl], #4
 80205e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80205e6:	459c      	cmp	ip, r3
 80205e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80205ec:	d8f3      	bhi.n	80205d6 <__lshift+0x6e>
 80205ee:	ebac 0304 	sub.w	r3, ip, r4
 80205f2:	3b15      	subs	r3, #21
 80205f4:	f023 0303 	bic.w	r3, r3, #3
 80205f8:	3304      	adds	r3, #4
 80205fa:	f104 0015 	add.w	r0, r4, #21
 80205fe:	4584      	cmp	ip, r0
 8020600:	bf38      	it	cc
 8020602:	2304      	movcc	r3, #4
 8020604:	50ca      	str	r2, [r1, r3]
 8020606:	b10a      	cbz	r2, 802060c <__lshift+0xa4>
 8020608:	f108 0602 	add.w	r6, r8, #2
 802060c:	3e01      	subs	r6, #1
 802060e:	4638      	mov	r0, r7
 8020610:	612e      	str	r6, [r5, #16]
 8020612:	4621      	mov	r1, r4
 8020614:	f7ff fd8c 	bl	8020130 <_Bfree>
 8020618:	4628      	mov	r0, r5
 802061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802061e:	f842 0f04 	str.w	r0, [r2, #4]!
 8020622:	3301      	adds	r3, #1
 8020624:	e7c5      	b.n	80205b2 <__lshift+0x4a>
 8020626:	3904      	subs	r1, #4
 8020628:	f853 2b04 	ldr.w	r2, [r3], #4
 802062c:	f841 2f04 	str.w	r2, [r1, #4]!
 8020630:	459c      	cmp	ip, r3
 8020632:	d8f9      	bhi.n	8020628 <__lshift+0xc0>
 8020634:	e7ea      	b.n	802060c <__lshift+0xa4>
 8020636:	bf00      	nop
 8020638:	0802983c 	.word	0x0802983c
 802063c:	08029930 	.word	0x08029930

08020640 <__mcmp>:
 8020640:	b530      	push	{r4, r5, lr}
 8020642:	6902      	ldr	r2, [r0, #16]
 8020644:	690c      	ldr	r4, [r1, #16]
 8020646:	1b12      	subs	r2, r2, r4
 8020648:	d10e      	bne.n	8020668 <__mcmp+0x28>
 802064a:	f100 0314 	add.w	r3, r0, #20
 802064e:	3114      	adds	r1, #20
 8020650:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020654:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020658:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802065c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020660:	42a5      	cmp	r5, r4
 8020662:	d003      	beq.n	802066c <__mcmp+0x2c>
 8020664:	d305      	bcc.n	8020672 <__mcmp+0x32>
 8020666:	2201      	movs	r2, #1
 8020668:	4610      	mov	r0, r2
 802066a:	bd30      	pop	{r4, r5, pc}
 802066c:	4283      	cmp	r3, r0
 802066e:	d3f3      	bcc.n	8020658 <__mcmp+0x18>
 8020670:	e7fa      	b.n	8020668 <__mcmp+0x28>
 8020672:	f04f 32ff 	mov.w	r2, #4294967295
 8020676:	e7f7      	b.n	8020668 <__mcmp+0x28>

08020678 <__mdiff>:
 8020678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802067c:	460c      	mov	r4, r1
 802067e:	4606      	mov	r6, r0
 8020680:	4611      	mov	r1, r2
 8020682:	4620      	mov	r0, r4
 8020684:	4617      	mov	r7, r2
 8020686:	f7ff ffdb 	bl	8020640 <__mcmp>
 802068a:	1e05      	subs	r5, r0, #0
 802068c:	d110      	bne.n	80206b0 <__mdiff+0x38>
 802068e:	4629      	mov	r1, r5
 8020690:	4630      	mov	r0, r6
 8020692:	f7ff fd0d 	bl	80200b0 <_Balloc>
 8020696:	b930      	cbnz	r0, 80206a6 <__mdiff+0x2e>
 8020698:	4b39      	ldr	r3, [pc, #228]	; (8020780 <__mdiff+0x108>)
 802069a:	4602      	mov	r2, r0
 802069c:	f240 2132 	movw	r1, #562	; 0x232
 80206a0:	4838      	ldr	r0, [pc, #224]	; (8020784 <__mdiff+0x10c>)
 80206a2:	f000 fd23 	bl	80210ec <__assert_func>
 80206a6:	2301      	movs	r3, #1
 80206a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80206ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b0:	bfa4      	itt	ge
 80206b2:	463b      	movge	r3, r7
 80206b4:	4627      	movge	r7, r4
 80206b6:	4630      	mov	r0, r6
 80206b8:	6879      	ldr	r1, [r7, #4]
 80206ba:	bfa6      	itte	ge
 80206bc:	461c      	movge	r4, r3
 80206be:	2500      	movge	r5, #0
 80206c0:	2501      	movlt	r5, #1
 80206c2:	f7ff fcf5 	bl	80200b0 <_Balloc>
 80206c6:	b920      	cbnz	r0, 80206d2 <__mdiff+0x5a>
 80206c8:	4b2d      	ldr	r3, [pc, #180]	; (8020780 <__mdiff+0x108>)
 80206ca:	4602      	mov	r2, r0
 80206cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80206d0:	e7e6      	b.n	80206a0 <__mdiff+0x28>
 80206d2:	693e      	ldr	r6, [r7, #16]
 80206d4:	60c5      	str	r5, [r0, #12]
 80206d6:	6925      	ldr	r5, [r4, #16]
 80206d8:	f107 0114 	add.w	r1, r7, #20
 80206dc:	f104 0914 	add.w	r9, r4, #20
 80206e0:	f100 0e14 	add.w	lr, r0, #20
 80206e4:	f107 0210 	add.w	r2, r7, #16
 80206e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80206ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80206f0:	46f2      	mov	sl, lr
 80206f2:	2700      	movs	r7, #0
 80206f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80206f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80206fc:	fa1f f883 	uxth.w	r8, r3
 8020700:	fa17 f78b 	uxtah	r7, r7, fp
 8020704:	0c1b      	lsrs	r3, r3, #16
 8020706:	eba7 0808 	sub.w	r8, r7, r8
 802070a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802070e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020712:	fa1f f888 	uxth.w	r8, r8
 8020716:	141f      	asrs	r7, r3, #16
 8020718:	454d      	cmp	r5, r9
 802071a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802071e:	f84a 3b04 	str.w	r3, [sl], #4
 8020722:	d8e7      	bhi.n	80206f4 <__mdiff+0x7c>
 8020724:	1b2b      	subs	r3, r5, r4
 8020726:	3b15      	subs	r3, #21
 8020728:	f023 0303 	bic.w	r3, r3, #3
 802072c:	3304      	adds	r3, #4
 802072e:	3415      	adds	r4, #21
 8020730:	42a5      	cmp	r5, r4
 8020732:	bf38      	it	cc
 8020734:	2304      	movcc	r3, #4
 8020736:	4419      	add	r1, r3
 8020738:	4473      	add	r3, lr
 802073a:	469e      	mov	lr, r3
 802073c:	460d      	mov	r5, r1
 802073e:	4565      	cmp	r5, ip
 8020740:	d30e      	bcc.n	8020760 <__mdiff+0xe8>
 8020742:	f10c 0203 	add.w	r2, ip, #3
 8020746:	1a52      	subs	r2, r2, r1
 8020748:	f022 0203 	bic.w	r2, r2, #3
 802074c:	3903      	subs	r1, #3
 802074e:	458c      	cmp	ip, r1
 8020750:	bf38      	it	cc
 8020752:	2200      	movcc	r2, #0
 8020754:	441a      	add	r2, r3
 8020756:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802075a:	b17b      	cbz	r3, 802077c <__mdiff+0x104>
 802075c:	6106      	str	r6, [r0, #16]
 802075e:	e7a5      	b.n	80206ac <__mdiff+0x34>
 8020760:	f855 8b04 	ldr.w	r8, [r5], #4
 8020764:	fa17 f488 	uxtah	r4, r7, r8
 8020768:	1422      	asrs	r2, r4, #16
 802076a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802076e:	b2a4      	uxth	r4, r4
 8020770:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020774:	f84e 4b04 	str.w	r4, [lr], #4
 8020778:	1417      	asrs	r7, r2, #16
 802077a:	e7e0      	b.n	802073e <__mdiff+0xc6>
 802077c:	3e01      	subs	r6, #1
 802077e:	e7ea      	b.n	8020756 <__mdiff+0xde>
 8020780:	0802983c 	.word	0x0802983c
 8020784:	08029930 	.word	0x08029930

08020788 <__ulp>:
 8020788:	b082      	sub	sp, #8
 802078a:	ed8d 0b00 	vstr	d0, [sp]
 802078e:	9b01      	ldr	r3, [sp, #4]
 8020790:	4912      	ldr	r1, [pc, #72]	; (80207dc <__ulp+0x54>)
 8020792:	4019      	ands	r1, r3
 8020794:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020798:	2900      	cmp	r1, #0
 802079a:	dd05      	ble.n	80207a8 <__ulp+0x20>
 802079c:	2200      	movs	r2, #0
 802079e:	460b      	mov	r3, r1
 80207a0:	ec43 2b10 	vmov	d0, r2, r3
 80207a4:	b002      	add	sp, #8
 80207a6:	4770      	bx	lr
 80207a8:	4249      	negs	r1, r1
 80207aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80207ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 80207b2:	f04f 0200 	mov.w	r2, #0
 80207b6:	f04f 0300 	mov.w	r3, #0
 80207ba:	da04      	bge.n	80207c6 <__ulp+0x3e>
 80207bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80207c0:	fa41 f300 	asr.w	r3, r1, r0
 80207c4:	e7ec      	b.n	80207a0 <__ulp+0x18>
 80207c6:	f1a0 0114 	sub.w	r1, r0, #20
 80207ca:	291e      	cmp	r1, #30
 80207cc:	bfda      	itte	le
 80207ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80207d2:	fa20 f101 	lsrle.w	r1, r0, r1
 80207d6:	2101      	movgt	r1, #1
 80207d8:	460a      	mov	r2, r1
 80207da:	e7e1      	b.n	80207a0 <__ulp+0x18>
 80207dc:	7ff00000 	.word	0x7ff00000

080207e0 <__b2d>:
 80207e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207e2:	6905      	ldr	r5, [r0, #16]
 80207e4:	f100 0714 	add.w	r7, r0, #20
 80207e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80207ec:	1f2e      	subs	r6, r5, #4
 80207ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80207f2:	4620      	mov	r0, r4
 80207f4:	f7ff fd52 	bl	802029c <__hi0bits>
 80207f8:	f1c0 0320 	rsb	r3, r0, #32
 80207fc:	280a      	cmp	r0, #10
 80207fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802087c <__b2d+0x9c>
 8020802:	600b      	str	r3, [r1, #0]
 8020804:	dc14      	bgt.n	8020830 <__b2d+0x50>
 8020806:	f1c0 0e0b 	rsb	lr, r0, #11
 802080a:	fa24 f10e 	lsr.w	r1, r4, lr
 802080e:	42b7      	cmp	r7, r6
 8020810:	ea41 030c 	orr.w	r3, r1, ip
 8020814:	bf34      	ite	cc
 8020816:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802081a:	2100      	movcs	r1, #0
 802081c:	3015      	adds	r0, #21
 802081e:	fa04 f000 	lsl.w	r0, r4, r0
 8020822:	fa21 f10e 	lsr.w	r1, r1, lr
 8020826:	ea40 0201 	orr.w	r2, r0, r1
 802082a:	ec43 2b10 	vmov	d0, r2, r3
 802082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020830:	42b7      	cmp	r7, r6
 8020832:	bf3a      	itte	cc
 8020834:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020838:	f1a5 0608 	subcc.w	r6, r5, #8
 802083c:	2100      	movcs	r1, #0
 802083e:	380b      	subs	r0, #11
 8020840:	d017      	beq.n	8020872 <__b2d+0x92>
 8020842:	f1c0 0c20 	rsb	ip, r0, #32
 8020846:	fa04 f500 	lsl.w	r5, r4, r0
 802084a:	42be      	cmp	r6, r7
 802084c:	fa21 f40c 	lsr.w	r4, r1, ip
 8020850:	ea45 0504 	orr.w	r5, r5, r4
 8020854:	bf8c      	ite	hi
 8020856:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802085a:	2400      	movls	r4, #0
 802085c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8020860:	fa01 f000 	lsl.w	r0, r1, r0
 8020864:	fa24 f40c 	lsr.w	r4, r4, ip
 8020868:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802086c:	ea40 0204 	orr.w	r2, r0, r4
 8020870:	e7db      	b.n	802082a <__b2d+0x4a>
 8020872:	ea44 030c 	orr.w	r3, r4, ip
 8020876:	460a      	mov	r2, r1
 8020878:	e7d7      	b.n	802082a <__b2d+0x4a>
 802087a:	bf00      	nop
 802087c:	3ff00000 	.word	0x3ff00000

08020880 <__d2b>:
 8020880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020884:	4689      	mov	r9, r1
 8020886:	2101      	movs	r1, #1
 8020888:	ec57 6b10 	vmov	r6, r7, d0
 802088c:	4690      	mov	r8, r2
 802088e:	f7ff fc0f 	bl	80200b0 <_Balloc>
 8020892:	4604      	mov	r4, r0
 8020894:	b930      	cbnz	r0, 80208a4 <__d2b+0x24>
 8020896:	4602      	mov	r2, r0
 8020898:	4b25      	ldr	r3, [pc, #148]	; (8020930 <__d2b+0xb0>)
 802089a:	4826      	ldr	r0, [pc, #152]	; (8020934 <__d2b+0xb4>)
 802089c:	f240 310a 	movw	r1, #778	; 0x30a
 80208a0:	f000 fc24 	bl	80210ec <__assert_func>
 80208a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80208a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80208ac:	bb35      	cbnz	r5, 80208fc <__d2b+0x7c>
 80208ae:	2e00      	cmp	r6, #0
 80208b0:	9301      	str	r3, [sp, #4]
 80208b2:	d028      	beq.n	8020906 <__d2b+0x86>
 80208b4:	4668      	mov	r0, sp
 80208b6:	9600      	str	r6, [sp, #0]
 80208b8:	f7ff fd10 	bl	80202dc <__lo0bits>
 80208bc:	9900      	ldr	r1, [sp, #0]
 80208be:	b300      	cbz	r0, 8020902 <__d2b+0x82>
 80208c0:	9a01      	ldr	r2, [sp, #4]
 80208c2:	f1c0 0320 	rsb	r3, r0, #32
 80208c6:	fa02 f303 	lsl.w	r3, r2, r3
 80208ca:	430b      	orrs	r3, r1
 80208cc:	40c2      	lsrs	r2, r0
 80208ce:	6163      	str	r3, [r4, #20]
 80208d0:	9201      	str	r2, [sp, #4]
 80208d2:	9b01      	ldr	r3, [sp, #4]
 80208d4:	61a3      	str	r3, [r4, #24]
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	bf14      	ite	ne
 80208da:	2202      	movne	r2, #2
 80208dc:	2201      	moveq	r2, #1
 80208de:	6122      	str	r2, [r4, #16]
 80208e0:	b1d5      	cbz	r5, 8020918 <__d2b+0x98>
 80208e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80208e6:	4405      	add	r5, r0
 80208e8:	f8c9 5000 	str.w	r5, [r9]
 80208ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80208f0:	f8c8 0000 	str.w	r0, [r8]
 80208f4:	4620      	mov	r0, r4
 80208f6:	b003      	add	sp, #12
 80208f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020900:	e7d5      	b.n	80208ae <__d2b+0x2e>
 8020902:	6161      	str	r1, [r4, #20]
 8020904:	e7e5      	b.n	80208d2 <__d2b+0x52>
 8020906:	a801      	add	r0, sp, #4
 8020908:	f7ff fce8 	bl	80202dc <__lo0bits>
 802090c:	9b01      	ldr	r3, [sp, #4]
 802090e:	6163      	str	r3, [r4, #20]
 8020910:	2201      	movs	r2, #1
 8020912:	6122      	str	r2, [r4, #16]
 8020914:	3020      	adds	r0, #32
 8020916:	e7e3      	b.n	80208e0 <__d2b+0x60>
 8020918:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802091c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020920:	f8c9 0000 	str.w	r0, [r9]
 8020924:	6918      	ldr	r0, [r3, #16]
 8020926:	f7ff fcb9 	bl	802029c <__hi0bits>
 802092a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802092e:	e7df      	b.n	80208f0 <__d2b+0x70>
 8020930:	0802983c 	.word	0x0802983c
 8020934:	08029930 	.word	0x08029930

08020938 <__ratio>:
 8020938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802093c:	4688      	mov	r8, r1
 802093e:	4669      	mov	r1, sp
 8020940:	4681      	mov	r9, r0
 8020942:	f7ff ff4d 	bl	80207e0 <__b2d>
 8020946:	a901      	add	r1, sp, #4
 8020948:	4640      	mov	r0, r8
 802094a:	ec55 4b10 	vmov	r4, r5, d0
 802094e:	f7ff ff47 	bl	80207e0 <__b2d>
 8020952:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020956:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802095a:	eba3 0c02 	sub.w	ip, r3, r2
 802095e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020962:	1a9b      	subs	r3, r3, r2
 8020964:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020968:	ec51 0b10 	vmov	r0, r1, d0
 802096c:	2b00      	cmp	r3, #0
 802096e:	bfd6      	itet	le
 8020970:	460a      	movle	r2, r1
 8020972:	462a      	movgt	r2, r5
 8020974:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020978:	468b      	mov	fp, r1
 802097a:	462f      	mov	r7, r5
 802097c:	bfd4      	ite	le
 802097e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8020982:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020986:	4620      	mov	r0, r4
 8020988:	ee10 2a10 	vmov	r2, s0
 802098c:	465b      	mov	r3, fp
 802098e:	4639      	mov	r1, r7
 8020990:	f7df ff6c 	bl	800086c <__aeabi_ddiv>
 8020994:	ec41 0b10 	vmov	d0, r0, r1
 8020998:	b003      	add	sp, #12
 802099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802099e <__copybits>:
 802099e:	3901      	subs	r1, #1
 80209a0:	b570      	push	{r4, r5, r6, lr}
 80209a2:	1149      	asrs	r1, r1, #5
 80209a4:	6914      	ldr	r4, [r2, #16]
 80209a6:	3101      	adds	r1, #1
 80209a8:	f102 0314 	add.w	r3, r2, #20
 80209ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80209b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80209b4:	1f05      	subs	r5, r0, #4
 80209b6:	42a3      	cmp	r3, r4
 80209b8:	d30c      	bcc.n	80209d4 <__copybits+0x36>
 80209ba:	1aa3      	subs	r3, r4, r2
 80209bc:	3b11      	subs	r3, #17
 80209be:	f023 0303 	bic.w	r3, r3, #3
 80209c2:	3211      	adds	r2, #17
 80209c4:	42a2      	cmp	r2, r4
 80209c6:	bf88      	it	hi
 80209c8:	2300      	movhi	r3, #0
 80209ca:	4418      	add	r0, r3
 80209cc:	2300      	movs	r3, #0
 80209ce:	4288      	cmp	r0, r1
 80209d0:	d305      	bcc.n	80209de <__copybits+0x40>
 80209d2:	bd70      	pop	{r4, r5, r6, pc}
 80209d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80209d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80209dc:	e7eb      	b.n	80209b6 <__copybits+0x18>
 80209de:	f840 3b04 	str.w	r3, [r0], #4
 80209e2:	e7f4      	b.n	80209ce <__copybits+0x30>

080209e4 <__any_on>:
 80209e4:	f100 0214 	add.w	r2, r0, #20
 80209e8:	6900      	ldr	r0, [r0, #16]
 80209ea:	114b      	asrs	r3, r1, #5
 80209ec:	4298      	cmp	r0, r3
 80209ee:	b510      	push	{r4, lr}
 80209f0:	db11      	blt.n	8020a16 <__any_on+0x32>
 80209f2:	dd0a      	ble.n	8020a0a <__any_on+0x26>
 80209f4:	f011 011f 	ands.w	r1, r1, #31
 80209f8:	d007      	beq.n	8020a0a <__any_on+0x26>
 80209fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80209fe:	fa24 f001 	lsr.w	r0, r4, r1
 8020a02:	fa00 f101 	lsl.w	r1, r0, r1
 8020a06:	428c      	cmp	r4, r1
 8020a08:	d10b      	bne.n	8020a22 <__any_on+0x3e>
 8020a0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020a0e:	4293      	cmp	r3, r2
 8020a10:	d803      	bhi.n	8020a1a <__any_on+0x36>
 8020a12:	2000      	movs	r0, #0
 8020a14:	bd10      	pop	{r4, pc}
 8020a16:	4603      	mov	r3, r0
 8020a18:	e7f7      	b.n	8020a0a <__any_on+0x26>
 8020a1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020a1e:	2900      	cmp	r1, #0
 8020a20:	d0f5      	beq.n	8020a0e <__any_on+0x2a>
 8020a22:	2001      	movs	r0, #1
 8020a24:	e7f6      	b.n	8020a14 <__any_on+0x30>

08020a26 <_calloc_r>:
 8020a26:	b513      	push	{r0, r1, r4, lr}
 8020a28:	434a      	muls	r2, r1
 8020a2a:	4611      	mov	r1, r2
 8020a2c:	9201      	str	r2, [sp, #4]
 8020a2e:	f000 f859 	bl	8020ae4 <_malloc_r>
 8020a32:	4604      	mov	r4, r0
 8020a34:	b118      	cbz	r0, 8020a3e <_calloc_r+0x18>
 8020a36:	9a01      	ldr	r2, [sp, #4]
 8020a38:	2100      	movs	r1, #0
 8020a3a:	f7fc fabd 	bl	801cfb8 <memset>
 8020a3e:	4620      	mov	r0, r4
 8020a40:	b002      	add	sp, #8
 8020a42:	bd10      	pop	{r4, pc}

08020a44 <_free_r>:
 8020a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020a46:	2900      	cmp	r1, #0
 8020a48:	d048      	beq.n	8020adc <_free_r+0x98>
 8020a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020a4e:	9001      	str	r0, [sp, #4]
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	f1a1 0404 	sub.w	r4, r1, #4
 8020a56:	bfb8      	it	lt
 8020a58:	18e4      	addlt	r4, r4, r3
 8020a5a:	f000 fcd9 	bl	8021410 <__malloc_lock>
 8020a5e:	4a20      	ldr	r2, [pc, #128]	; (8020ae0 <_free_r+0x9c>)
 8020a60:	9801      	ldr	r0, [sp, #4]
 8020a62:	6813      	ldr	r3, [r2, #0]
 8020a64:	4615      	mov	r5, r2
 8020a66:	b933      	cbnz	r3, 8020a76 <_free_r+0x32>
 8020a68:	6063      	str	r3, [r4, #4]
 8020a6a:	6014      	str	r4, [r2, #0]
 8020a6c:	b003      	add	sp, #12
 8020a6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020a72:	f000 bcd3 	b.w	802141c <__malloc_unlock>
 8020a76:	42a3      	cmp	r3, r4
 8020a78:	d90b      	bls.n	8020a92 <_free_r+0x4e>
 8020a7a:	6821      	ldr	r1, [r4, #0]
 8020a7c:	1862      	adds	r2, r4, r1
 8020a7e:	4293      	cmp	r3, r2
 8020a80:	bf04      	itt	eq
 8020a82:	681a      	ldreq	r2, [r3, #0]
 8020a84:	685b      	ldreq	r3, [r3, #4]
 8020a86:	6063      	str	r3, [r4, #4]
 8020a88:	bf04      	itt	eq
 8020a8a:	1852      	addeq	r2, r2, r1
 8020a8c:	6022      	streq	r2, [r4, #0]
 8020a8e:	602c      	str	r4, [r5, #0]
 8020a90:	e7ec      	b.n	8020a6c <_free_r+0x28>
 8020a92:	461a      	mov	r2, r3
 8020a94:	685b      	ldr	r3, [r3, #4]
 8020a96:	b10b      	cbz	r3, 8020a9c <_free_r+0x58>
 8020a98:	42a3      	cmp	r3, r4
 8020a9a:	d9fa      	bls.n	8020a92 <_free_r+0x4e>
 8020a9c:	6811      	ldr	r1, [r2, #0]
 8020a9e:	1855      	adds	r5, r2, r1
 8020aa0:	42a5      	cmp	r5, r4
 8020aa2:	d10b      	bne.n	8020abc <_free_r+0x78>
 8020aa4:	6824      	ldr	r4, [r4, #0]
 8020aa6:	4421      	add	r1, r4
 8020aa8:	1854      	adds	r4, r2, r1
 8020aaa:	42a3      	cmp	r3, r4
 8020aac:	6011      	str	r1, [r2, #0]
 8020aae:	d1dd      	bne.n	8020a6c <_free_r+0x28>
 8020ab0:	681c      	ldr	r4, [r3, #0]
 8020ab2:	685b      	ldr	r3, [r3, #4]
 8020ab4:	6053      	str	r3, [r2, #4]
 8020ab6:	4421      	add	r1, r4
 8020ab8:	6011      	str	r1, [r2, #0]
 8020aba:	e7d7      	b.n	8020a6c <_free_r+0x28>
 8020abc:	d902      	bls.n	8020ac4 <_free_r+0x80>
 8020abe:	230c      	movs	r3, #12
 8020ac0:	6003      	str	r3, [r0, #0]
 8020ac2:	e7d3      	b.n	8020a6c <_free_r+0x28>
 8020ac4:	6825      	ldr	r5, [r4, #0]
 8020ac6:	1961      	adds	r1, r4, r5
 8020ac8:	428b      	cmp	r3, r1
 8020aca:	bf04      	itt	eq
 8020acc:	6819      	ldreq	r1, [r3, #0]
 8020ace:	685b      	ldreq	r3, [r3, #4]
 8020ad0:	6063      	str	r3, [r4, #4]
 8020ad2:	bf04      	itt	eq
 8020ad4:	1949      	addeq	r1, r1, r5
 8020ad6:	6021      	streq	r1, [r4, #0]
 8020ad8:	6054      	str	r4, [r2, #4]
 8020ada:	e7c7      	b.n	8020a6c <_free_r+0x28>
 8020adc:	b003      	add	sp, #12
 8020ade:	bd30      	pop	{r4, r5, pc}
 8020ae0:	20001f2c 	.word	0x20001f2c

08020ae4 <_malloc_r>:
 8020ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ae6:	1ccd      	adds	r5, r1, #3
 8020ae8:	f025 0503 	bic.w	r5, r5, #3
 8020aec:	3508      	adds	r5, #8
 8020aee:	2d0c      	cmp	r5, #12
 8020af0:	bf38      	it	cc
 8020af2:	250c      	movcc	r5, #12
 8020af4:	2d00      	cmp	r5, #0
 8020af6:	4606      	mov	r6, r0
 8020af8:	db01      	blt.n	8020afe <_malloc_r+0x1a>
 8020afa:	42a9      	cmp	r1, r5
 8020afc:	d903      	bls.n	8020b06 <_malloc_r+0x22>
 8020afe:	230c      	movs	r3, #12
 8020b00:	6033      	str	r3, [r6, #0]
 8020b02:	2000      	movs	r0, #0
 8020b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b06:	f000 fc83 	bl	8021410 <__malloc_lock>
 8020b0a:	4921      	ldr	r1, [pc, #132]	; (8020b90 <_malloc_r+0xac>)
 8020b0c:	680a      	ldr	r2, [r1, #0]
 8020b0e:	4614      	mov	r4, r2
 8020b10:	b99c      	cbnz	r4, 8020b3a <_malloc_r+0x56>
 8020b12:	4f20      	ldr	r7, [pc, #128]	; (8020b94 <_malloc_r+0xb0>)
 8020b14:	683b      	ldr	r3, [r7, #0]
 8020b16:	b923      	cbnz	r3, 8020b22 <_malloc_r+0x3e>
 8020b18:	4621      	mov	r1, r4
 8020b1a:	4630      	mov	r0, r6
 8020b1c:	f000 f9a0 	bl	8020e60 <_sbrk_r>
 8020b20:	6038      	str	r0, [r7, #0]
 8020b22:	4629      	mov	r1, r5
 8020b24:	4630      	mov	r0, r6
 8020b26:	f000 f99b 	bl	8020e60 <_sbrk_r>
 8020b2a:	1c43      	adds	r3, r0, #1
 8020b2c:	d123      	bne.n	8020b76 <_malloc_r+0x92>
 8020b2e:	230c      	movs	r3, #12
 8020b30:	6033      	str	r3, [r6, #0]
 8020b32:	4630      	mov	r0, r6
 8020b34:	f000 fc72 	bl	802141c <__malloc_unlock>
 8020b38:	e7e3      	b.n	8020b02 <_malloc_r+0x1e>
 8020b3a:	6823      	ldr	r3, [r4, #0]
 8020b3c:	1b5b      	subs	r3, r3, r5
 8020b3e:	d417      	bmi.n	8020b70 <_malloc_r+0x8c>
 8020b40:	2b0b      	cmp	r3, #11
 8020b42:	d903      	bls.n	8020b4c <_malloc_r+0x68>
 8020b44:	6023      	str	r3, [r4, #0]
 8020b46:	441c      	add	r4, r3
 8020b48:	6025      	str	r5, [r4, #0]
 8020b4a:	e004      	b.n	8020b56 <_malloc_r+0x72>
 8020b4c:	6863      	ldr	r3, [r4, #4]
 8020b4e:	42a2      	cmp	r2, r4
 8020b50:	bf0c      	ite	eq
 8020b52:	600b      	streq	r3, [r1, #0]
 8020b54:	6053      	strne	r3, [r2, #4]
 8020b56:	4630      	mov	r0, r6
 8020b58:	f000 fc60 	bl	802141c <__malloc_unlock>
 8020b5c:	f104 000b 	add.w	r0, r4, #11
 8020b60:	1d23      	adds	r3, r4, #4
 8020b62:	f020 0007 	bic.w	r0, r0, #7
 8020b66:	1ac2      	subs	r2, r0, r3
 8020b68:	d0cc      	beq.n	8020b04 <_malloc_r+0x20>
 8020b6a:	1a1b      	subs	r3, r3, r0
 8020b6c:	50a3      	str	r3, [r4, r2]
 8020b6e:	e7c9      	b.n	8020b04 <_malloc_r+0x20>
 8020b70:	4622      	mov	r2, r4
 8020b72:	6864      	ldr	r4, [r4, #4]
 8020b74:	e7cc      	b.n	8020b10 <_malloc_r+0x2c>
 8020b76:	1cc4      	adds	r4, r0, #3
 8020b78:	f024 0403 	bic.w	r4, r4, #3
 8020b7c:	42a0      	cmp	r0, r4
 8020b7e:	d0e3      	beq.n	8020b48 <_malloc_r+0x64>
 8020b80:	1a21      	subs	r1, r4, r0
 8020b82:	4630      	mov	r0, r6
 8020b84:	f000 f96c 	bl	8020e60 <_sbrk_r>
 8020b88:	3001      	adds	r0, #1
 8020b8a:	d1dd      	bne.n	8020b48 <_malloc_r+0x64>
 8020b8c:	e7cf      	b.n	8020b2e <_malloc_r+0x4a>
 8020b8e:	bf00      	nop
 8020b90:	20001f2c 	.word	0x20001f2c
 8020b94:	20001f30 	.word	0x20001f30

08020b98 <__ssputs_r>:
 8020b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b9c:	688e      	ldr	r6, [r1, #8]
 8020b9e:	429e      	cmp	r6, r3
 8020ba0:	4682      	mov	sl, r0
 8020ba2:	460c      	mov	r4, r1
 8020ba4:	4690      	mov	r8, r2
 8020ba6:	461f      	mov	r7, r3
 8020ba8:	d838      	bhi.n	8020c1c <__ssputs_r+0x84>
 8020baa:	898a      	ldrh	r2, [r1, #12]
 8020bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020bb0:	d032      	beq.n	8020c18 <__ssputs_r+0x80>
 8020bb2:	6825      	ldr	r5, [r4, #0]
 8020bb4:	6909      	ldr	r1, [r1, #16]
 8020bb6:	eba5 0901 	sub.w	r9, r5, r1
 8020bba:	6965      	ldr	r5, [r4, #20]
 8020bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020bc4:	3301      	adds	r3, #1
 8020bc6:	444b      	add	r3, r9
 8020bc8:	106d      	asrs	r5, r5, #1
 8020bca:	429d      	cmp	r5, r3
 8020bcc:	bf38      	it	cc
 8020bce:	461d      	movcc	r5, r3
 8020bd0:	0553      	lsls	r3, r2, #21
 8020bd2:	d531      	bpl.n	8020c38 <__ssputs_r+0xa0>
 8020bd4:	4629      	mov	r1, r5
 8020bd6:	f7ff ff85 	bl	8020ae4 <_malloc_r>
 8020bda:	4606      	mov	r6, r0
 8020bdc:	b950      	cbnz	r0, 8020bf4 <__ssputs_r+0x5c>
 8020bde:	230c      	movs	r3, #12
 8020be0:	f8ca 3000 	str.w	r3, [sl]
 8020be4:	89a3      	ldrh	r3, [r4, #12]
 8020be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bea:	81a3      	strh	r3, [r4, #12]
 8020bec:	f04f 30ff 	mov.w	r0, #4294967295
 8020bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bf4:	6921      	ldr	r1, [r4, #16]
 8020bf6:	464a      	mov	r2, r9
 8020bf8:	f7ff fa4c 	bl	8020094 <memcpy>
 8020bfc:	89a3      	ldrh	r3, [r4, #12]
 8020bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c06:	81a3      	strh	r3, [r4, #12]
 8020c08:	6126      	str	r6, [r4, #16]
 8020c0a:	6165      	str	r5, [r4, #20]
 8020c0c:	444e      	add	r6, r9
 8020c0e:	eba5 0509 	sub.w	r5, r5, r9
 8020c12:	6026      	str	r6, [r4, #0]
 8020c14:	60a5      	str	r5, [r4, #8]
 8020c16:	463e      	mov	r6, r7
 8020c18:	42be      	cmp	r6, r7
 8020c1a:	d900      	bls.n	8020c1e <__ssputs_r+0x86>
 8020c1c:	463e      	mov	r6, r7
 8020c1e:	4632      	mov	r2, r6
 8020c20:	6820      	ldr	r0, [r4, #0]
 8020c22:	4641      	mov	r1, r8
 8020c24:	f000 fbda 	bl	80213dc <memmove>
 8020c28:	68a3      	ldr	r3, [r4, #8]
 8020c2a:	6822      	ldr	r2, [r4, #0]
 8020c2c:	1b9b      	subs	r3, r3, r6
 8020c2e:	4432      	add	r2, r6
 8020c30:	60a3      	str	r3, [r4, #8]
 8020c32:	6022      	str	r2, [r4, #0]
 8020c34:	2000      	movs	r0, #0
 8020c36:	e7db      	b.n	8020bf0 <__ssputs_r+0x58>
 8020c38:	462a      	mov	r2, r5
 8020c3a:	f000 fbf5 	bl	8021428 <_realloc_r>
 8020c3e:	4606      	mov	r6, r0
 8020c40:	2800      	cmp	r0, #0
 8020c42:	d1e1      	bne.n	8020c08 <__ssputs_r+0x70>
 8020c44:	6921      	ldr	r1, [r4, #16]
 8020c46:	4650      	mov	r0, sl
 8020c48:	f7ff fefc 	bl	8020a44 <_free_r>
 8020c4c:	e7c7      	b.n	8020bde <__ssputs_r+0x46>
	...

08020c50 <_svfiprintf_r>:
 8020c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c54:	4698      	mov	r8, r3
 8020c56:	898b      	ldrh	r3, [r1, #12]
 8020c58:	061b      	lsls	r3, r3, #24
 8020c5a:	b09d      	sub	sp, #116	; 0x74
 8020c5c:	4607      	mov	r7, r0
 8020c5e:	460d      	mov	r5, r1
 8020c60:	4614      	mov	r4, r2
 8020c62:	d50e      	bpl.n	8020c82 <_svfiprintf_r+0x32>
 8020c64:	690b      	ldr	r3, [r1, #16]
 8020c66:	b963      	cbnz	r3, 8020c82 <_svfiprintf_r+0x32>
 8020c68:	2140      	movs	r1, #64	; 0x40
 8020c6a:	f7ff ff3b 	bl	8020ae4 <_malloc_r>
 8020c6e:	6028      	str	r0, [r5, #0]
 8020c70:	6128      	str	r0, [r5, #16]
 8020c72:	b920      	cbnz	r0, 8020c7e <_svfiprintf_r+0x2e>
 8020c74:	230c      	movs	r3, #12
 8020c76:	603b      	str	r3, [r7, #0]
 8020c78:	f04f 30ff 	mov.w	r0, #4294967295
 8020c7c:	e0d1      	b.n	8020e22 <_svfiprintf_r+0x1d2>
 8020c7e:	2340      	movs	r3, #64	; 0x40
 8020c80:	616b      	str	r3, [r5, #20]
 8020c82:	2300      	movs	r3, #0
 8020c84:	9309      	str	r3, [sp, #36]	; 0x24
 8020c86:	2320      	movs	r3, #32
 8020c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020c90:	2330      	movs	r3, #48	; 0x30
 8020c92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020e3c <_svfiprintf_r+0x1ec>
 8020c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020c9a:	f04f 0901 	mov.w	r9, #1
 8020c9e:	4623      	mov	r3, r4
 8020ca0:	469a      	mov	sl, r3
 8020ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ca6:	b10a      	cbz	r2, 8020cac <_svfiprintf_r+0x5c>
 8020ca8:	2a25      	cmp	r2, #37	; 0x25
 8020caa:	d1f9      	bne.n	8020ca0 <_svfiprintf_r+0x50>
 8020cac:	ebba 0b04 	subs.w	fp, sl, r4
 8020cb0:	d00b      	beq.n	8020cca <_svfiprintf_r+0x7a>
 8020cb2:	465b      	mov	r3, fp
 8020cb4:	4622      	mov	r2, r4
 8020cb6:	4629      	mov	r1, r5
 8020cb8:	4638      	mov	r0, r7
 8020cba:	f7ff ff6d 	bl	8020b98 <__ssputs_r>
 8020cbe:	3001      	adds	r0, #1
 8020cc0:	f000 80aa 	beq.w	8020e18 <_svfiprintf_r+0x1c8>
 8020cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020cc6:	445a      	add	r2, fp
 8020cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8020cca:	f89a 3000 	ldrb.w	r3, [sl]
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	f000 80a2 	beq.w	8020e18 <_svfiprintf_r+0x1c8>
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8020cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020cde:	f10a 0a01 	add.w	sl, sl, #1
 8020ce2:	9304      	str	r3, [sp, #16]
 8020ce4:	9307      	str	r3, [sp, #28]
 8020ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020cea:	931a      	str	r3, [sp, #104]	; 0x68
 8020cec:	4654      	mov	r4, sl
 8020cee:	2205      	movs	r2, #5
 8020cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020cf4:	4851      	ldr	r0, [pc, #324]	; (8020e3c <_svfiprintf_r+0x1ec>)
 8020cf6:	f7df fa83 	bl	8000200 <memchr>
 8020cfa:	9a04      	ldr	r2, [sp, #16]
 8020cfc:	b9d8      	cbnz	r0, 8020d36 <_svfiprintf_r+0xe6>
 8020cfe:	06d0      	lsls	r0, r2, #27
 8020d00:	bf44      	itt	mi
 8020d02:	2320      	movmi	r3, #32
 8020d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d08:	0711      	lsls	r1, r2, #28
 8020d0a:	bf44      	itt	mi
 8020d0c:	232b      	movmi	r3, #43	; 0x2b
 8020d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d12:	f89a 3000 	ldrb.w	r3, [sl]
 8020d16:	2b2a      	cmp	r3, #42	; 0x2a
 8020d18:	d015      	beq.n	8020d46 <_svfiprintf_r+0xf6>
 8020d1a:	9a07      	ldr	r2, [sp, #28]
 8020d1c:	4654      	mov	r4, sl
 8020d1e:	2000      	movs	r0, #0
 8020d20:	f04f 0c0a 	mov.w	ip, #10
 8020d24:	4621      	mov	r1, r4
 8020d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d2a:	3b30      	subs	r3, #48	; 0x30
 8020d2c:	2b09      	cmp	r3, #9
 8020d2e:	d94e      	bls.n	8020dce <_svfiprintf_r+0x17e>
 8020d30:	b1b0      	cbz	r0, 8020d60 <_svfiprintf_r+0x110>
 8020d32:	9207      	str	r2, [sp, #28]
 8020d34:	e014      	b.n	8020d60 <_svfiprintf_r+0x110>
 8020d36:	eba0 0308 	sub.w	r3, r0, r8
 8020d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8020d3e:	4313      	orrs	r3, r2
 8020d40:	9304      	str	r3, [sp, #16]
 8020d42:	46a2      	mov	sl, r4
 8020d44:	e7d2      	b.n	8020cec <_svfiprintf_r+0x9c>
 8020d46:	9b03      	ldr	r3, [sp, #12]
 8020d48:	1d19      	adds	r1, r3, #4
 8020d4a:	681b      	ldr	r3, [r3, #0]
 8020d4c:	9103      	str	r1, [sp, #12]
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	bfbb      	ittet	lt
 8020d52:	425b      	neglt	r3, r3
 8020d54:	f042 0202 	orrlt.w	r2, r2, #2
 8020d58:	9307      	strge	r3, [sp, #28]
 8020d5a:	9307      	strlt	r3, [sp, #28]
 8020d5c:	bfb8      	it	lt
 8020d5e:	9204      	strlt	r2, [sp, #16]
 8020d60:	7823      	ldrb	r3, [r4, #0]
 8020d62:	2b2e      	cmp	r3, #46	; 0x2e
 8020d64:	d10c      	bne.n	8020d80 <_svfiprintf_r+0x130>
 8020d66:	7863      	ldrb	r3, [r4, #1]
 8020d68:	2b2a      	cmp	r3, #42	; 0x2a
 8020d6a:	d135      	bne.n	8020dd8 <_svfiprintf_r+0x188>
 8020d6c:	9b03      	ldr	r3, [sp, #12]
 8020d6e:	1d1a      	adds	r2, r3, #4
 8020d70:	681b      	ldr	r3, [r3, #0]
 8020d72:	9203      	str	r2, [sp, #12]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	bfb8      	it	lt
 8020d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8020d7c:	3402      	adds	r4, #2
 8020d7e:	9305      	str	r3, [sp, #20]
 8020d80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020e4c <_svfiprintf_r+0x1fc>
 8020d84:	7821      	ldrb	r1, [r4, #0]
 8020d86:	2203      	movs	r2, #3
 8020d88:	4650      	mov	r0, sl
 8020d8a:	f7df fa39 	bl	8000200 <memchr>
 8020d8e:	b140      	cbz	r0, 8020da2 <_svfiprintf_r+0x152>
 8020d90:	2340      	movs	r3, #64	; 0x40
 8020d92:	eba0 000a 	sub.w	r0, r0, sl
 8020d96:	fa03 f000 	lsl.w	r0, r3, r0
 8020d9a:	9b04      	ldr	r3, [sp, #16]
 8020d9c:	4303      	orrs	r3, r0
 8020d9e:	3401      	adds	r4, #1
 8020da0:	9304      	str	r3, [sp, #16]
 8020da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020da6:	4826      	ldr	r0, [pc, #152]	; (8020e40 <_svfiprintf_r+0x1f0>)
 8020da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020dac:	2206      	movs	r2, #6
 8020dae:	f7df fa27 	bl	8000200 <memchr>
 8020db2:	2800      	cmp	r0, #0
 8020db4:	d038      	beq.n	8020e28 <_svfiprintf_r+0x1d8>
 8020db6:	4b23      	ldr	r3, [pc, #140]	; (8020e44 <_svfiprintf_r+0x1f4>)
 8020db8:	bb1b      	cbnz	r3, 8020e02 <_svfiprintf_r+0x1b2>
 8020dba:	9b03      	ldr	r3, [sp, #12]
 8020dbc:	3307      	adds	r3, #7
 8020dbe:	f023 0307 	bic.w	r3, r3, #7
 8020dc2:	3308      	adds	r3, #8
 8020dc4:	9303      	str	r3, [sp, #12]
 8020dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc8:	4433      	add	r3, r6
 8020dca:	9309      	str	r3, [sp, #36]	; 0x24
 8020dcc:	e767      	b.n	8020c9e <_svfiprintf_r+0x4e>
 8020dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8020dd2:	460c      	mov	r4, r1
 8020dd4:	2001      	movs	r0, #1
 8020dd6:	e7a5      	b.n	8020d24 <_svfiprintf_r+0xd4>
 8020dd8:	2300      	movs	r3, #0
 8020dda:	3401      	adds	r4, #1
 8020ddc:	9305      	str	r3, [sp, #20]
 8020dde:	4619      	mov	r1, r3
 8020de0:	f04f 0c0a 	mov.w	ip, #10
 8020de4:	4620      	mov	r0, r4
 8020de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020dea:	3a30      	subs	r2, #48	; 0x30
 8020dec:	2a09      	cmp	r2, #9
 8020dee:	d903      	bls.n	8020df8 <_svfiprintf_r+0x1a8>
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d0c5      	beq.n	8020d80 <_svfiprintf_r+0x130>
 8020df4:	9105      	str	r1, [sp, #20]
 8020df6:	e7c3      	b.n	8020d80 <_svfiprintf_r+0x130>
 8020df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8020dfc:	4604      	mov	r4, r0
 8020dfe:	2301      	movs	r3, #1
 8020e00:	e7f0      	b.n	8020de4 <_svfiprintf_r+0x194>
 8020e02:	ab03      	add	r3, sp, #12
 8020e04:	9300      	str	r3, [sp, #0]
 8020e06:	462a      	mov	r2, r5
 8020e08:	4b0f      	ldr	r3, [pc, #60]	; (8020e48 <_svfiprintf_r+0x1f8>)
 8020e0a:	a904      	add	r1, sp, #16
 8020e0c:	4638      	mov	r0, r7
 8020e0e:	f7fc f97b 	bl	801d108 <_printf_float>
 8020e12:	1c42      	adds	r2, r0, #1
 8020e14:	4606      	mov	r6, r0
 8020e16:	d1d6      	bne.n	8020dc6 <_svfiprintf_r+0x176>
 8020e18:	89ab      	ldrh	r3, [r5, #12]
 8020e1a:	065b      	lsls	r3, r3, #25
 8020e1c:	f53f af2c 	bmi.w	8020c78 <_svfiprintf_r+0x28>
 8020e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e22:	b01d      	add	sp, #116	; 0x74
 8020e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e28:	ab03      	add	r3, sp, #12
 8020e2a:	9300      	str	r3, [sp, #0]
 8020e2c:	462a      	mov	r2, r5
 8020e2e:	4b06      	ldr	r3, [pc, #24]	; (8020e48 <_svfiprintf_r+0x1f8>)
 8020e30:	a904      	add	r1, sp, #16
 8020e32:	4638      	mov	r0, r7
 8020e34:	f7fc fc0c 	bl	801d650 <_printf_i>
 8020e38:	e7eb      	b.n	8020e12 <_svfiprintf_r+0x1c2>
 8020e3a:	bf00      	nop
 8020e3c:	08029a8c 	.word	0x08029a8c
 8020e40:	08029a96 	.word	0x08029a96
 8020e44:	0801d109 	.word	0x0801d109
 8020e48:	08020b99 	.word	0x08020b99
 8020e4c:	08029a92 	.word	0x08029a92

08020e50 <nan>:
 8020e50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020e58 <nan+0x8>
 8020e54:	4770      	bx	lr
 8020e56:	bf00      	nop
 8020e58:	00000000 	.word	0x00000000
 8020e5c:	7ff80000 	.word	0x7ff80000

08020e60 <_sbrk_r>:
 8020e60:	b538      	push	{r3, r4, r5, lr}
 8020e62:	4d06      	ldr	r5, [pc, #24]	; (8020e7c <_sbrk_r+0x1c>)
 8020e64:	2300      	movs	r3, #0
 8020e66:	4604      	mov	r4, r0
 8020e68:	4608      	mov	r0, r1
 8020e6a:	602b      	str	r3, [r5, #0]
 8020e6c:	f7e6 fc06 	bl	800767c <_sbrk>
 8020e70:	1c43      	adds	r3, r0, #1
 8020e72:	d102      	bne.n	8020e7a <_sbrk_r+0x1a>
 8020e74:	682b      	ldr	r3, [r5, #0]
 8020e76:	b103      	cbz	r3, 8020e7a <_sbrk_r+0x1a>
 8020e78:	6023      	str	r3, [r4, #0]
 8020e7a:	bd38      	pop	{r3, r4, r5, pc}
 8020e7c:	2000a02c 	.word	0x2000a02c

08020e80 <__sread>:
 8020e80:	b510      	push	{r4, lr}
 8020e82:	460c      	mov	r4, r1
 8020e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e88:	f000 fc4e 	bl	8021728 <_read_r>
 8020e8c:	2800      	cmp	r0, #0
 8020e8e:	bfab      	itete	ge
 8020e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020e92:	89a3      	ldrhlt	r3, [r4, #12]
 8020e94:	181b      	addge	r3, r3, r0
 8020e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020e9a:	bfac      	ite	ge
 8020e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8020e9e:	81a3      	strhlt	r3, [r4, #12]
 8020ea0:	bd10      	pop	{r4, pc}

08020ea2 <__swrite>:
 8020ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ea6:	461f      	mov	r7, r3
 8020ea8:	898b      	ldrh	r3, [r1, #12]
 8020eaa:	05db      	lsls	r3, r3, #23
 8020eac:	4605      	mov	r5, r0
 8020eae:	460c      	mov	r4, r1
 8020eb0:	4616      	mov	r6, r2
 8020eb2:	d505      	bpl.n	8020ec0 <__swrite+0x1e>
 8020eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020eb8:	2302      	movs	r3, #2
 8020eba:	2200      	movs	r2, #0
 8020ebc:	f000 fa18 	bl	80212f0 <_lseek_r>
 8020ec0:	89a3      	ldrh	r3, [r4, #12]
 8020ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020eca:	81a3      	strh	r3, [r4, #12]
 8020ecc:	4632      	mov	r2, r6
 8020ece:	463b      	mov	r3, r7
 8020ed0:	4628      	mov	r0, r5
 8020ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020ed6:	f000 b889 	b.w	8020fec <_write_r>

08020eda <__sseek>:
 8020eda:	b510      	push	{r4, lr}
 8020edc:	460c      	mov	r4, r1
 8020ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ee2:	f000 fa05 	bl	80212f0 <_lseek_r>
 8020ee6:	1c43      	adds	r3, r0, #1
 8020ee8:	89a3      	ldrh	r3, [r4, #12]
 8020eea:	bf15      	itete	ne
 8020eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8020eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020ef6:	81a3      	strheq	r3, [r4, #12]
 8020ef8:	bf18      	it	ne
 8020efa:	81a3      	strhne	r3, [r4, #12]
 8020efc:	bd10      	pop	{r4, pc}

08020efe <__sclose>:
 8020efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f02:	f000 b911 	b.w	8021128 <_close_r>

08020f06 <strncmp>:
 8020f06:	b510      	push	{r4, lr}
 8020f08:	b16a      	cbz	r2, 8020f26 <strncmp+0x20>
 8020f0a:	3901      	subs	r1, #1
 8020f0c:	1884      	adds	r4, r0, r2
 8020f0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020f12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020f16:	4293      	cmp	r3, r2
 8020f18:	d103      	bne.n	8020f22 <strncmp+0x1c>
 8020f1a:	42a0      	cmp	r0, r4
 8020f1c:	d001      	beq.n	8020f22 <strncmp+0x1c>
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	d1f5      	bne.n	8020f0e <strncmp+0x8>
 8020f22:	1a98      	subs	r0, r3, r2
 8020f24:	bd10      	pop	{r4, pc}
 8020f26:	4610      	mov	r0, r2
 8020f28:	e7fc      	b.n	8020f24 <strncmp+0x1e>
	...

08020f2c <__swbuf_r>:
 8020f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f2e:	460e      	mov	r6, r1
 8020f30:	4614      	mov	r4, r2
 8020f32:	4605      	mov	r5, r0
 8020f34:	b118      	cbz	r0, 8020f3e <__swbuf_r+0x12>
 8020f36:	6983      	ldr	r3, [r0, #24]
 8020f38:	b90b      	cbnz	r3, 8020f3e <__swbuf_r+0x12>
 8020f3a:	f7fe fc7d 	bl	801f838 <__sinit>
 8020f3e:	4b21      	ldr	r3, [pc, #132]	; (8020fc4 <__swbuf_r+0x98>)
 8020f40:	429c      	cmp	r4, r3
 8020f42:	d12b      	bne.n	8020f9c <__swbuf_r+0x70>
 8020f44:	686c      	ldr	r4, [r5, #4]
 8020f46:	69a3      	ldr	r3, [r4, #24]
 8020f48:	60a3      	str	r3, [r4, #8]
 8020f4a:	89a3      	ldrh	r3, [r4, #12]
 8020f4c:	071a      	lsls	r2, r3, #28
 8020f4e:	d52f      	bpl.n	8020fb0 <__swbuf_r+0x84>
 8020f50:	6923      	ldr	r3, [r4, #16]
 8020f52:	b36b      	cbz	r3, 8020fb0 <__swbuf_r+0x84>
 8020f54:	6923      	ldr	r3, [r4, #16]
 8020f56:	6820      	ldr	r0, [r4, #0]
 8020f58:	1ac0      	subs	r0, r0, r3
 8020f5a:	6963      	ldr	r3, [r4, #20]
 8020f5c:	b2f6      	uxtb	r6, r6
 8020f5e:	4283      	cmp	r3, r0
 8020f60:	4637      	mov	r7, r6
 8020f62:	dc04      	bgt.n	8020f6e <__swbuf_r+0x42>
 8020f64:	4621      	mov	r1, r4
 8020f66:	4628      	mov	r0, r5
 8020f68:	f000 f974 	bl	8021254 <_fflush_r>
 8020f6c:	bb30      	cbnz	r0, 8020fbc <__swbuf_r+0x90>
 8020f6e:	68a3      	ldr	r3, [r4, #8]
 8020f70:	3b01      	subs	r3, #1
 8020f72:	60a3      	str	r3, [r4, #8]
 8020f74:	6823      	ldr	r3, [r4, #0]
 8020f76:	1c5a      	adds	r2, r3, #1
 8020f78:	6022      	str	r2, [r4, #0]
 8020f7a:	701e      	strb	r6, [r3, #0]
 8020f7c:	6963      	ldr	r3, [r4, #20]
 8020f7e:	3001      	adds	r0, #1
 8020f80:	4283      	cmp	r3, r0
 8020f82:	d004      	beq.n	8020f8e <__swbuf_r+0x62>
 8020f84:	89a3      	ldrh	r3, [r4, #12]
 8020f86:	07db      	lsls	r3, r3, #31
 8020f88:	d506      	bpl.n	8020f98 <__swbuf_r+0x6c>
 8020f8a:	2e0a      	cmp	r6, #10
 8020f8c:	d104      	bne.n	8020f98 <__swbuf_r+0x6c>
 8020f8e:	4621      	mov	r1, r4
 8020f90:	4628      	mov	r0, r5
 8020f92:	f000 f95f 	bl	8021254 <_fflush_r>
 8020f96:	b988      	cbnz	r0, 8020fbc <__swbuf_r+0x90>
 8020f98:	4638      	mov	r0, r7
 8020f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f9c:	4b0a      	ldr	r3, [pc, #40]	; (8020fc8 <__swbuf_r+0x9c>)
 8020f9e:	429c      	cmp	r4, r3
 8020fa0:	d101      	bne.n	8020fa6 <__swbuf_r+0x7a>
 8020fa2:	68ac      	ldr	r4, [r5, #8]
 8020fa4:	e7cf      	b.n	8020f46 <__swbuf_r+0x1a>
 8020fa6:	4b09      	ldr	r3, [pc, #36]	; (8020fcc <__swbuf_r+0xa0>)
 8020fa8:	429c      	cmp	r4, r3
 8020faa:	bf08      	it	eq
 8020fac:	68ec      	ldreq	r4, [r5, #12]
 8020fae:	e7ca      	b.n	8020f46 <__swbuf_r+0x1a>
 8020fb0:	4621      	mov	r1, r4
 8020fb2:	4628      	mov	r0, r5
 8020fb4:	f000 f82c 	bl	8021010 <__swsetup_r>
 8020fb8:	2800      	cmp	r0, #0
 8020fba:	d0cb      	beq.n	8020f54 <__swbuf_r+0x28>
 8020fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8020fc0:	e7ea      	b.n	8020f98 <__swbuf_r+0x6c>
 8020fc2:	bf00      	nop
 8020fc4:	08029870 	.word	0x08029870
 8020fc8:	08029890 	.word	0x08029890
 8020fcc:	08029850 	.word	0x08029850

08020fd0 <__ascii_wctomb>:
 8020fd0:	b149      	cbz	r1, 8020fe6 <__ascii_wctomb+0x16>
 8020fd2:	2aff      	cmp	r2, #255	; 0xff
 8020fd4:	bf85      	ittet	hi
 8020fd6:	238a      	movhi	r3, #138	; 0x8a
 8020fd8:	6003      	strhi	r3, [r0, #0]
 8020fda:	700a      	strbls	r2, [r1, #0]
 8020fdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8020fe0:	bf98      	it	ls
 8020fe2:	2001      	movls	r0, #1
 8020fe4:	4770      	bx	lr
 8020fe6:	4608      	mov	r0, r1
 8020fe8:	4770      	bx	lr
	...

08020fec <_write_r>:
 8020fec:	b538      	push	{r3, r4, r5, lr}
 8020fee:	4d07      	ldr	r5, [pc, #28]	; (802100c <_write_r+0x20>)
 8020ff0:	4604      	mov	r4, r0
 8020ff2:	4608      	mov	r0, r1
 8020ff4:	4611      	mov	r1, r2
 8020ff6:	2200      	movs	r2, #0
 8020ff8:	602a      	str	r2, [r5, #0]
 8020ffa:	461a      	mov	r2, r3
 8020ffc:	f7e6 faed 	bl	80075da <_write>
 8021000:	1c43      	adds	r3, r0, #1
 8021002:	d102      	bne.n	802100a <_write_r+0x1e>
 8021004:	682b      	ldr	r3, [r5, #0]
 8021006:	b103      	cbz	r3, 802100a <_write_r+0x1e>
 8021008:	6023      	str	r3, [r4, #0]
 802100a:	bd38      	pop	{r3, r4, r5, pc}
 802100c:	2000a02c 	.word	0x2000a02c

08021010 <__swsetup_r>:
 8021010:	4b32      	ldr	r3, [pc, #200]	; (80210dc <__swsetup_r+0xcc>)
 8021012:	b570      	push	{r4, r5, r6, lr}
 8021014:	681d      	ldr	r5, [r3, #0]
 8021016:	4606      	mov	r6, r0
 8021018:	460c      	mov	r4, r1
 802101a:	b125      	cbz	r5, 8021026 <__swsetup_r+0x16>
 802101c:	69ab      	ldr	r3, [r5, #24]
 802101e:	b913      	cbnz	r3, 8021026 <__swsetup_r+0x16>
 8021020:	4628      	mov	r0, r5
 8021022:	f7fe fc09 	bl	801f838 <__sinit>
 8021026:	4b2e      	ldr	r3, [pc, #184]	; (80210e0 <__swsetup_r+0xd0>)
 8021028:	429c      	cmp	r4, r3
 802102a:	d10f      	bne.n	802104c <__swsetup_r+0x3c>
 802102c:	686c      	ldr	r4, [r5, #4]
 802102e:	89a3      	ldrh	r3, [r4, #12]
 8021030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021034:	0719      	lsls	r1, r3, #28
 8021036:	d42c      	bmi.n	8021092 <__swsetup_r+0x82>
 8021038:	06dd      	lsls	r5, r3, #27
 802103a:	d411      	bmi.n	8021060 <__swsetup_r+0x50>
 802103c:	2309      	movs	r3, #9
 802103e:	6033      	str	r3, [r6, #0]
 8021040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021044:	81a3      	strh	r3, [r4, #12]
 8021046:	f04f 30ff 	mov.w	r0, #4294967295
 802104a:	e03e      	b.n	80210ca <__swsetup_r+0xba>
 802104c:	4b25      	ldr	r3, [pc, #148]	; (80210e4 <__swsetup_r+0xd4>)
 802104e:	429c      	cmp	r4, r3
 8021050:	d101      	bne.n	8021056 <__swsetup_r+0x46>
 8021052:	68ac      	ldr	r4, [r5, #8]
 8021054:	e7eb      	b.n	802102e <__swsetup_r+0x1e>
 8021056:	4b24      	ldr	r3, [pc, #144]	; (80210e8 <__swsetup_r+0xd8>)
 8021058:	429c      	cmp	r4, r3
 802105a:	bf08      	it	eq
 802105c:	68ec      	ldreq	r4, [r5, #12]
 802105e:	e7e6      	b.n	802102e <__swsetup_r+0x1e>
 8021060:	0758      	lsls	r0, r3, #29
 8021062:	d512      	bpl.n	802108a <__swsetup_r+0x7a>
 8021064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021066:	b141      	cbz	r1, 802107a <__swsetup_r+0x6a>
 8021068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802106c:	4299      	cmp	r1, r3
 802106e:	d002      	beq.n	8021076 <__swsetup_r+0x66>
 8021070:	4630      	mov	r0, r6
 8021072:	f7ff fce7 	bl	8020a44 <_free_r>
 8021076:	2300      	movs	r3, #0
 8021078:	6363      	str	r3, [r4, #52]	; 0x34
 802107a:	89a3      	ldrh	r3, [r4, #12]
 802107c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021080:	81a3      	strh	r3, [r4, #12]
 8021082:	2300      	movs	r3, #0
 8021084:	6063      	str	r3, [r4, #4]
 8021086:	6923      	ldr	r3, [r4, #16]
 8021088:	6023      	str	r3, [r4, #0]
 802108a:	89a3      	ldrh	r3, [r4, #12]
 802108c:	f043 0308 	orr.w	r3, r3, #8
 8021090:	81a3      	strh	r3, [r4, #12]
 8021092:	6923      	ldr	r3, [r4, #16]
 8021094:	b94b      	cbnz	r3, 80210aa <__swsetup_r+0x9a>
 8021096:	89a3      	ldrh	r3, [r4, #12]
 8021098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802109c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80210a0:	d003      	beq.n	80210aa <__swsetup_r+0x9a>
 80210a2:	4621      	mov	r1, r4
 80210a4:	4630      	mov	r0, r6
 80210a6:	f000 f959 	bl	802135c <__smakebuf_r>
 80210aa:	89a0      	ldrh	r0, [r4, #12]
 80210ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80210b0:	f010 0301 	ands.w	r3, r0, #1
 80210b4:	d00a      	beq.n	80210cc <__swsetup_r+0xbc>
 80210b6:	2300      	movs	r3, #0
 80210b8:	60a3      	str	r3, [r4, #8]
 80210ba:	6963      	ldr	r3, [r4, #20]
 80210bc:	425b      	negs	r3, r3
 80210be:	61a3      	str	r3, [r4, #24]
 80210c0:	6923      	ldr	r3, [r4, #16]
 80210c2:	b943      	cbnz	r3, 80210d6 <__swsetup_r+0xc6>
 80210c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80210c8:	d1ba      	bne.n	8021040 <__swsetup_r+0x30>
 80210ca:	bd70      	pop	{r4, r5, r6, pc}
 80210cc:	0781      	lsls	r1, r0, #30
 80210ce:	bf58      	it	pl
 80210d0:	6963      	ldrpl	r3, [r4, #20]
 80210d2:	60a3      	str	r3, [r4, #8]
 80210d4:	e7f4      	b.n	80210c0 <__swsetup_r+0xb0>
 80210d6:	2000      	movs	r0, #0
 80210d8:	e7f7      	b.n	80210ca <__swsetup_r+0xba>
 80210da:	bf00      	nop
 80210dc:	20000624 	.word	0x20000624
 80210e0:	08029870 	.word	0x08029870
 80210e4:	08029890 	.word	0x08029890
 80210e8:	08029850 	.word	0x08029850

080210ec <__assert_func>:
 80210ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80210ee:	4614      	mov	r4, r2
 80210f0:	461a      	mov	r2, r3
 80210f2:	4b09      	ldr	r3, [pc, #36]	; (8021118 <__assert_func+0x2c>)
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	4605      	mov	r5, r0
 80210f8:	68d8      	ldr	r0, [r3, #12]
 80210fa:	b14c      	cbz	r4, 8021110 <__assert_func+0x24>
 80210fc:	4b07      	ldr	r3, [pc, #28]	; (802111c <__assert_func+0x30>)
 80210fe:	9100      	str	r1, [sp, #0]
 8021100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021104:	4906      	ldr	r1, [pc, #24]	; (8021120 <__assert_func+0x34>)
 8021106:	462b      	mov	r3, r5
 8021108:	f000 f8e0 	bl	80212cc <fiprintf>
 802110c:	f000 fb1e 	bl	802174c <abort>
 8021110:	4b04      	ldr	r3, [pc, #16]	; (8021124 <__assert_func+0x38>)
 8021112:	461c      	mov	r4, r3
 8021114:	e7f3      	b.n	80210fe <__assert_func+0x12>
 8021116:	bf00      	nop
 8021118:	20000624 	.word	0x20000624
 802111c:	08029a9d 	.word	0x08029a9d
 8021120:	08029aaa 	.word	0x08029aaa
 8021124:	08029ad8 	.word	0x08029ad8

08021128 <_close_r>:
 8021128:	b538      	push	{r3, r4, r5, lr}
 802112a:	4d06      	ldr	r5, [pc, #24]	; (8021144 <_close_r+0x1c>)
 802112c:	2300      	movs	r3, #0
 802112e:	4604      	mov	r4, r0
 8021130:	4608      	mov	r0, r1
 8021132:	602b      	str	r3, [r5, #0]
 8021134:	f7e6 fa6d 	bl	8007612 <_close>
 8021138:	1c43      	adds	r3, r0, #1
 802113a:	d102      	bne.n	8021142 <_close_r+0x1a>
 802113c:	682b      	ldr	r3, [r5, #0]
 802113e:	b103      	cbz	r3, 8021142 <_close_r+0x1a>
 8021140:	6023      	str	r3, [r4, #0]
 8021142:	bd38      	pop	{r3, r4, r5, pc}
 8021144:	2000a02c 	.word	0x2000a02c

08021148 <__sflush_r>:
 8021148:	898a      	ldrh	r2, [r1, #12]
 802114a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802114e:	4605      	mov	r5, r0
 8021150:	0710      	lsls	r0, r2, #28
 8021152:	460c      	mov	r4, r1
 8021154:	d458      	bmi.n	8021208 <__sflush_r+0xc0>
 8021156:	684b      	ldr	r3, [r1, #4]
 8021158:	2b00      	cmp	r3, #0
 802115a:	dc05      	bgt.n	8021168 <__sflush_r+0x20>
 802115c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802115e:	2b00      	cmp	r3, #0
 8021160:	dc02      	bgt.n	8021168 <__sflush_r+0x20>
 8021162:	2000      	movs	r0, #0
 8021164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802116a:	2e00      	cmp	r6, #0
 802116c:	d0f9      	beq.n	8021162 <__sflush_r+0x1a>
 802116e:	2300      	movs	r3, #0
 8021170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021174:	682f      	ldr	r7, [r5, #0]
 8021176:	602b      	str	r3, [r5, #0]
 8021178:	d032      	beq.n	80211e0 <__sflush_r+0x98>
 802117a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802117c:	89a3      	ldrh	r3, [r4, #12]
 802117e:	075a      	lsls	r2, r3, #29
 8021180:	d505      	bpl.n	802118e <__sflush_r+0x46>
 8021182:	6863      	ldr	r3, [r4, #4]
 8021184:	1ac0      	subs	r0, r0, r3
 8021186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021188:	b10b      	cbz	r3, 802118e <__sflush_r+0x46>
 802118a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802118c:	1ac0      	subs	r0, r0, r3
 802118e:	2300      	movs	r3, #0
 8021190:	4602      	mov	r2, r0
 8021192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021194:	6a21      	ldr	r1, [r4, #32]
 8021196:	4628      	mov	r0, r5
 8021198:	47b0      	blx	r6
 802119a:	1c43      	adds	r3, r0, #1
 802119c:	89a3      	ldrh	r3, [r4, #12]
 802119e:	d106      	bne.n	80211ae <__sflush_r+0x66>
 80211a0:	6829      	ldr	r1, [r5, #0]
 80211a2:	291d      	cmp	r1, #29
 80211a4:	d82c      	bhi.n	8021200 <__sflush_r+0xb8>
 80211a6:	4a2a      	ldr	r2, [pc, #168]	; (8021250 <__sflush_r+0x108>)
 80211a8:	40ca      	lsrs	r2, r1
 80211aa:	07d6      	lsls	r6, r2, #31
 80211ac:	d528      	bpl.n	8021200 <__sflush_r+0xb8>
 80211ae:	2200      	movs	r2, #0
 80211b0:	6062      	str	r2, [r4, #4]
 80211b2:	04d9      	lsls	r1, r3, #19
 80211b4:	6922      	ldr	r2, [r4, #16]
 80211b6:	6022      	str	r2, [r4, #0]
 80211b8:	d504      	bpl.n	80211c4 <__sflush_r+0x7c>
 80211ba:	1c42      	adds	r2, r0, #1
 80211bc:	d101      	bne.n	80211c2 <__sflush_r+0x7a>
 80211be:	682b      	ldr	r3, [r5, #0]
 80211c0:	b903      	cbnz	r3, 80211c4 <__sflush_r+0x7c>
 80211c2:	6560      	str	r0, [r4, #84]	; 0x54
 80211c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80211c6:	602f      	str	r7, [r5, #0]
 80211c8:	2900      	cmp	r1, #0
 80211ca:	d0ca      	beq.n	8021162 <__sflush_r+0x1a>
 80211cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80211d0:	4299      	cmp	r1, r3
 80211d2:	d002      	beq.n	80211da <__sflush_r+0x92>
 80211d4:	4628      	mov	r0, r5
 80211d6:	f7ff fc35 	bl	8020a44 <_free_r>
 80211da:	2000      	movs	r0, #0
 80211dc:	6360      	str	r0, [r4, #52]	; 0x34
 80211de:	e7c1      	b.n	8021164 <__sflush_r+0x1c>
 80211e0:	6a21      	ldr	r1, [r4, #32]
 80211e2:	2301      	movs	r3, #1
 80211e4:	4628      	mov	r0, r5
 80211e6:	47b0      	blx	r6
 80211e8:	1c41      	adds	r1, r0, #1
 80211ea:	d1c7      	bne.n	802117c <__sflush_r+0x34>
 80211ec:	682b      	ldr	r3, [r5, #0]
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d0c4      	beq.n	802117c <__sflush_r+0x34>
 80211f2:	2b1d      	cmp	r3, #29
 80211f4:	d001      	beq.n	80211fa <__sflush_r+0xb2>
 80211f6:	2b16      	cmp	r3, #22
 80211f8:	d101      	bne.n	80211fe <__sflush_r+0xb6>
 80211fa:	602f      	str	r7, [r5, #0]
 80211fc:	e7b1      	b.n	8021162 <__sflush_r+0x1a>
 80211fe:	89a3      	ldrh	r3, [r4, #12]
 8021200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021204:	81a3      	strh	r3, [r4, #12]
 8021206:	e7ad      	b.n	8021164 <__sflush_r+0x1c>
 8021208:	690f      	ldr	r7, [r1, #16]
 802120a:	2f00      	cmp	r7, #0
 802120c:	d0a9      	beq.n	8021162 <__sflush_r+0x1a>
 802120e:	0793      	lsls	r3, r2, #30
 8021210:	680e      	ldr	r6, [r1, #0]
 8021212:	bf08      	it	eq
 8021214:	694b      	ldreq	r3, [r1, #20]
 8021216:	600f      	str	r7, [r1, #0]
 8021218:	bf18      	it	ne
 802121a:	2300      	movne	r3, #0
 802121c:	eba6 0807 	sub.w	r8, r6, r7
 8021220:	608b      	str	r3, [r1, #8]
 8021222:	f1b8 0f00 	cmp.w	r8, #0
 8021226:	dd9c      	ble.n	8021162 <__sflush_r+0x1a>
 8021228:	6a21      	ldr	r1, [r4, #32]
 802122a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802122c:	4643      	mov	r3, r8
 802122e:	463a      	mov	r2, r7
 8021230:	4628      	mov	r0, r5
 8021232:	47b0      	blx	r6
 8021234:	2800      	cmp	r0, #0
 8021236:	dc06      	bgt.n	8021246 <__sflush_r+0xfe>
 8021238:	89a3      	ldrh	r3, [r4, #12]
 802123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802123e:	81a3      	strh	r3, [r4, #12]
 8021240:	f04f 30ff 	mov.w	r0, #4294967295
 8021244:	e78e      	b.n	8021164 <__sflush_r+0x1c>
 8021246:	4407      	add	r7, r0
 8021248:	eba8 0800 	sub.w	r8, r8, r0
 802124c:	e7e9      	b.n	8021222 <__sflush_r+0xda>
 802124e:	bf00      	nop
 8021250:	20400001 	.word	0x20400001

08021254 <_fflush_r>:
 8021254:	b538      	push	{r3, r4, r5, lr}
 8021256:	690b      	ldr	r3, [r1, #16]
 8021258:	4605      	mov	r5, r0
 802125a:	460c      	mov	r4, r1
 802125c:	b913      	cbnz	r3, 8021264 <_fflush_r+0x10>
 802125e:	2500      	movs	r5, #0
 8021260:	4628      	mov	r0, r5
 8021262:	bd38      	pop	{r3, r4, r5, pc}
 8021264:	b118      	cbz	r0, 802126e <_fflush_r+0x1a>
 8021266:	6983      	ldr	r3, [r0, #24]
 8021268:	b90b      	cbnz	r3, 802126e <_fflush_r+0x1a>
 802126a:	f7fe fae5 	bl	801f838 <__sinit>
 802126e:	4b14      	ldr	r3, [pc, #80]	; (80212c0 <_fflush_r+0x6c>)
 8021270:	429c      	cmp	r4, r3
 8021272:	d11b      	bne.n	80212ac <_fflush_r+0x58>
 8021274:	686c      	ldr	r4, [r5, #4]
 8021276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802127a:	2b00      	cmp	r3, #0
 802127c:	d0ef      	beq.n	802125e <_fflush_r+0xa>
 802127e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021280:	07d0      	lsls	r0, r2, #31
 8021282:	d404      	bmi.n	802128e <_fflush_r+0x3a>
 8021284:	0599      	lsls	r1, r3, #22
 8021286:	d402      	bmi.n	802128e <_fflush_r+0x3a>
 8021288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802128a:	f7fe fee6 	bl	802005a <__retarget_lock_acquire_recursive>
 802128e:	4628      	mov	r0, r5
 8021290:	4621      	mov	r1, r4
 8021292:	f7ff ff59 	bl	8021148 <__sflush_r>
 8021296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021298:	07da      	lsls	r2, r3, #31
 802129a:	4605      	mov	r5, r0
 802129c:	d4e0      	bmi.n	8021260 <_fflush_r+0xc>
 802129e:	89a3      	ldrh	r3, [r4, #12]
 80212a0:	059b      	lsls	r3, r3, #22
 80212a2:	d4dd      	bmi.n	8021260 <_fflush_r+0xc>
 80212a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212a6:	f7fe fed9 	bl	802005c <__retarget_lock_release_recursive>
 80212aa:	e7d9      	b.n	8021260 <_fflush_r+0xc>
 80212ac:	4b05      	ldr	r3, [pc, #20]	; (80212c4 <_fflush_r+0x70>)
 80212ae:	429c      	cmp	r4, r3
 80212b0:	d101      	bne.n	80212b6 <_fflush_r+0x62>
 80212b2:	68ac      	ldr	r4, [r5, #8]
 80212b4:	e7df      	b.n	8021276 <_fflush_r+0x22>
 80212b6:	4b04      	ldr	r3, [pc, #16]	; (80212c8 <_fflush_r+0x74>)
 80212b8:	429c      	cmp	r4, r3
 80212ba:	bf08      	it	eq
 80212bc:	68ec      	ldreq	r4, [r5, #12]
 80212be:	e7da      	b.n	8021276 <_fflush_r+0x22>
 80212c0:	08029870 	.word	0x08029870
 80212c4:	08029890 	.word	0x08029890
 80212c8:	08029850 	.word	0x08029850

080212cc <fiprintf>:
 80212cc:	b40e      	push	{r1, r2, r3}
 80212ce:	b503      	push	{r0, r1, lr}
 80212d0:	4601      	mov	r1, r0
 80212d2:	ab03      	add	r3, sp, #12
 80212d4:	4805      	ldr	r0, [pc, #20]	; (80212ec <fiprintf+0x20>)
 80212d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80212da:	6800      	ldr	r0, [r0, #0]
 80212dc:	9301      	str	r3, [sp, #4]
 80212de:	f000 f8f3 	bl	80214c8 <_vfiprintf_r>
 80212e2:	b002      	add	sp, #8
 80212e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80212e8:	b003      	add	sp, #12
 80212ea:	4770      	bx	lr
 80212ec:	20000624 	.word	0x20000624

080212f0 <_lseek_r>:
 80212f0:	b538      	push	{r3, r4, r5, lr}
 80212f2:	4d07      	ldr	r5, [pc, #28]	; (8021310 <_lseek_r+0x20>)
 80212f4:	4604      	mov	r4, r0
 80212f6:	4608      	mov	r0, r1
 80212f8:	4611      	mov	r1, r2
 80212fa:	2200      	movs	r2, #0
 80212fc:	602a      	str	r2, [r5, #0]
 80212fe:	461a      	mov	r2, r3
 8021300:	f7e6 f9ae 	bl	8007660 <_lseek>
 8021304:	1c43      	adds	r3, r0, #1
 8021306:	d102      	bne.n	802130e <_lseek_r+0x1e>
 8021308:	682b      	ldr	r3, [r5, #0]
 802130a:	b103      	cbz	r3, 802130e <_lseek_r+0x1e>
 802130c:	6023      	str	r3, [r4, #0]
 802130e:	bd38      	pop	{r3, r4, r5, pc}
 8021310:	2000a02c 	.word	0x2000a02c

08021314 <__swhatbuf_r>:
 8021314:	b570      	push	{r4, r5, r6, lr}
 8021316:	460e      	mov	r6, r1
 8021318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802131c:	2900      	cmp	r1, #0
 802131e:	b096      	sub	sp, #88	; 0x58
 8021320:	4614      	mov	r4, r2
 8021322:	461d      	mov	r5, r3
 8021324:	da07      	bge.n	8021336 <__swhatbuf_r+0x22>
 8021326:	2300      	movs	r3, #0
 8021328:	602b      	str	r3, [r5, #0]
 802132a:	89b3      	ldrh	r3, [r6, #12]
 802132c:	061a      	lsls	r2, r3, #24
 802132e:	d410      	bmi.n	8021352 <__swhatbuf_r+0x3e>
 8021330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021334:	e00e      	b.n	8021354 <__swhatbuf_r+0x40>
 8021336:	466a      	mov	r2, sp
 8021338:	f000 fa10 	bl	802175c <_fstat_r>
 802133c:	2800      	cmp	r0, #0
 802133e:	dbf2      	blt.n	8021326 <__swhatbuf_r+0x12>
 8021340:	9a01      	ldr	r2, [sp, #4]
 8021342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802134a:	425a      	negs	r2, r3
 802134c:	415a      	adcs	r2, r3
 802134e:	602a      	str	r2, [r5, #0]
 8021350:	e7ee      	b.n	8021330 <__swhatbuf_r+0x1c>
 8021352:	2340      	movs	r3, #64	; 0x40
 8021354:	2000      	movs	r0, #0
 8021356:	6023      	str	r3, [r4, #0]
 8021358:	b016      	add	sp, #88	; 0x58
 802135a:	bd70      	pop	{r4, r5, r6, pc}

0802135c <__smakebuf_r>:
 802135c:	898b      	ldrh	r3, [r1, #12]
 802135e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021360:	079d      	lsls	r5, r3, #30
 8021362:	4606      	mov	r6, r0
 8021364:	460c      	mov	r4, r1
 8021366:	d507      	bpl.n	8021378 <__smakebuf_r+0x1c>
 8021368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802136c:	6023      	str	r3, [r4, #0]
 802136e:	6123      	str	r3, [r4, #16]
 8021370:	2301      	movs	r3, #1
 8021372:	6163      	str	r3, [r4, #20]
 8021374:	b002      	add	sp, #8
 8021376:	bd70      	pop	{r4, r5, r6, pc}
 8021378:	ab01      	add	r3, sp, #4
 802137a:	466a      	mov	r2, sp
 802137c:	f7ff ffca 	bl	8021314 <__swhatbuf_r>
 8021380:	9900      	ldr	r1, [sp, #0]
 8021382:	4605      	mov	r5, r0
 8021384:	4630      	mov	r0, r6
 8021386:	f7ff fbad 	bl	8020ae4 <_malloc_r>
 802138a:	b948      	cbnz	r0, 80213a0 <__smakebuf_r+0x44>
 802138c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021390:	059a      	lsls	r2, r3, #22
 8021392:	d4ef      	bmi.n	8021374 <__smakebuf_r+0x18>
 8021394:	f023 0303 	bic.w	r3, r3, #3
 8021398:	f043 0302 	orr.w	r3, r3, #2
 802139c:	81a3      	strh	r3, [r4, #12]
 802139e:	e7e3      	b.n	8021368 <__smakebuf_r+0xc>
 80213a0:	4b0d      	ldr	r3, [pc, #52]	; (80213d8 <__smakebuf_r+0x7c>)
 80213a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80213a4:	89a3      	ldrh	r3, [r4, #12]
 80213a6:	6020      	str	r0, [r4, #0]
 80213a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80213ac:	81a3      	strh	r3, [r4, #12]
 80213ae:	9b00      	ldr	r3, [sp, #0]
 80213b0:	6163      	str	r3, [r4, #20]
 80213b2:	9b01      	ldr	r3, [sp, #4]
 80213b4:	6120      	str	r0, [r4, #16]
 80213b6:	b15b      	cbz	r3, 80213d0 <__smakebuf_r+0x74>
 80213b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80213bc:	4630      	mov	r0, r6
 80213be:	f000 f9df 	bl	8021780 <_isatty_r>
 80213c2:	b128      	cbz	r0, 80213d0 <__smakebuf_r+0x74>
 80213c4:	89a3      	ldrh	r3, [r4, #12]
 80213c6:	f023 0303 	bic.w	r3, r3, #3
 80213ca:	f043 0301 	orr.w	r3, r3, #1
 80213ce:	81a3      	strh	r3, [r4, #12]
 80213d0:	89a0      	ldrh	r0, [r4, #12]
 80213d2:	4305      	orrs	r5, r0
 80213d4:	81a5      	strh	r5, [r4, #12]
 80213d6:	e7cd      	b.n	8021374 <__smakebuf_r+0x18>
 80213d8:	0801f7d1 	.word	0x0801f7d1

080213dc <memmove>:
 80213dc:	4288      	cmp	r0, r1
 80213de:	b510      	push	{r4, lr}
 80213e0:	eb01 0402 	add.w	r4, r1, r2
 80213e4:	d902      	bls.n	80213ec <memmove+0x10>
 80213e6:	4284      	cmp	r4, r0
 80213e8:	4623      	mov	r3, r4
 80213ea:	d807      	bhi.n	80213fc <memmove+0x20>
 80213ec:	1e43      	subs	r3, r0, #1
 80213ee:	42a1      	cmp	r1, r4
 80213f0:	d008      	beq.n	8021404 <memmove+0x28>
 80213f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80213f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80213fa:	e7f8      	b.n	80213ee <memmove+0x12>
 80213fc:	4402      	add	r2, r0
 80213fe:	4601      	mov	r1, r0
 8021400:	428a      	cmp	r2, r1
 8021402:	d100      	bne.n	8021406 <memmove+0x2a>
 8021404:	bd10      	pop	{r4, pc}
 8021406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802140a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802140e:	e7f7      	b.n	8021400 <memmove+0x24>

08021410 <__malloc_lock>:
 8021410:	4801      	ldr	r0, [pc, #4]	; (8021418 <__malloc_lock+0x8>)
 8021412:	f7fe be22 	b.w	802005a <__retarget_lock_acquire_recursive>
 8021416:	bf00      	nop
 8021418:	2000a020 	.word	0x2000a020

0802141c <__malloc_unlock>:
 802141c:	4801      	ldr	r0, [pc, #4]	; (8021424 <__malloc_unlock+0x8>)
 802141e:	f7fe be1d 	b.w	802005c <__retarget_lock_release_recursive>
 8021422:	bf00      	nop
 8021424:	2000a020 	.word	0x2000a020

08021428 <_realloc_r>:
 8021428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802142a:	4607      	mov	r7, r0
 802142c:	4614      	mov	r4, r2
 802142e:	460e      	mov	r6, r1
 8021430:	b921      	cbnz	r1, 802143c <_realloc_r+0x14>
 8021432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021436:	4611      	mov	r1, r2
 8021438:	f7ff bb54 	b.w	8020ae4 <_malloc_r>
 802143c:	b922      	cbnz	r2, 8021448 <_realloc_r+0x20>
 802143e:	f7ff fb01 	bl	8020a44 <_free_r>
 8021442:	4625      	mov	r5, r4
 8021444:	4628      	mov	r0, r5
 8021446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021448:	f000 f9aa 	bl	80217a0 <_malloc_usable_size_r>
 802144c:	42a0      	cmp	r0, r4
 802144e:	d20f      	bcs.n	8021470 <_realloc_r+0x48>
 8021450:	4621      	mov	r1, r4
 8021452:	4638      	mov	r0, r7
 8021454:	f7ff fb46 	bl	8020ae4 <_malloc_r>
 8021458:	4605      	mov	r5, r0
 802145a:	2800      	cmp	r0, #0
 802145c:	d0f2      	beq.n	8021444 <_realloc_r+0x1c>
 802145e:	4631      	mov	r1, r6
 8021460:	4622      	mov	r2, r4
 8021462:	f7fe fe17 	bl	8020094 <memcpy>
 8021466:	4631      	mov	r1, r6
 8021468:	4638      	mov	r0, r7
 802146a:	f7ff faeb 	bl	8020a44 <_free_r>
 802146e:	e7e9      	b.n	8021444 <_realloc_r+0x1c>
 8021470:	4635      	mov	r5, r6
 8021472:	e7e7      	b.n	8021444 <_realloc_r+0x1c>

08021474 <__sfputc_r>:
 8021474:	6893      	ldr	r3, [r2, #8]
 8021476:	3b01      	subs	r3, #1
 8021478:	2b00      	cmp	r3, #0
 802147a:	b410      	push	{r4}
 802147c:	6093      	str	r3, [r2, #8]
 802147e:	da08      	bge.n	8021492 <__sfputc_r+0x1e>
 8021480:	6994      	ldr	r4, [r2, #24]
 8021482:	42a3      	cmp	r3, r4
 8021484:	db01      	blt.n	802148a <__sfputc_r+0x16>
 8021486:	290a      	cmp	r1, #10
 8021488:	d103      	bne.n	8021492 <__sfputc_r+0x1e>
 802148a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802148e:	f7ff bd4d 	b.w	8020f2c <__swbuf_r>
 8021492:	6813      	ldr	r3, [r2, #0]
 8021494:	1c58      	adds	r0, r3, #1
 8021496:	6010      	str	r0, [r2, #0]
 8021498:	7019      	strb	r1, [r3, #0]
 802149a:	4608      	mov	r0, r1
 802149c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214a0:	4770      	bx	lr

080214a2 <__sfputs_r>:
 80214a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214a4:	4606      	mov	r6, r0
 80214a6:	460f      	mov	r7, r1
 80214a8:	4614      	mov	r4, r2
 80214aa:	18d5      	adds	r5, r2, r3
 80214ac:	42ac      	cmp	r4, r5
 80214ae:	d101      	bne.n	80214b4 <__sfputs_r+0x12>
 80214b0:	2000      	movs	r0, #0
 80214b2:	e007      	b.n	80214c4 <__sfputs_r+0x22>
 80214b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80214b8:	463a      	mov	r2, r7
 80214ba:	4630      	mov	r0, r6
 80214bc:	f7ff ffda 	bl	8021474 <__sfputc_r>
 80214c0:	1c43      	adds	r3, r0, #1
 80214c2:	d1f3      	bne.n	80214ac <__sfputs_r+0xa>
 80214c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080214c8 <_vfiprintf_r>:
 80214c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214cc:	460d      	mov	r5, r1
 80214ce:	b09d      	sub	sp, #116	; 0x74
 80214d0:	4614      	mov	r4, r2
 80214d2:	4698      	mov	r8, r3
 80214d4:	4606      	mov	r6, r0
 80214d6:	b118      	cbz	r0, 80214e0 <_vfiprintf_r+0x18>
 80214d8:	6983      	ldr	r3, [r0, #24]
 80214da:	b90b      	cbnz	r3, 80214e0 <_vfiprintf_r+0x18>
 80214dc:	f7fe f9ac 	bl	801f838 <__sinit>
 80214e0:	4b89      	ldr	r3, [pc, #548]	; (8021708 <_vfiprintf_r+0x240>)
 80214e2:	429d      	cmp	r5, r3
 80214e4:	d11b      	bne.n	802151e <_vfiprintf_r+0x56>
 80214e6:	6875      	ldr	r5, [r6, #4]
 80214e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80214ea:	07d9      	lsls	r1, r3, #31
 80214ec:	d405      	bmi.n	80214fa <_vfiprintf_r+0x32>
 80214ee:	89ab      	ldrh	r3, [r5, #12]
 80214f0:	059a      	lsls	r2, r3, #22
 80214f2:	d402      	bmi.n	80214fa <_vfiprintf_r+0x32>
 80214f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80214f6:	f7fe fdb0 	bl	802005a <__retarget_lock_acquire_recursive>
 80214fa:	89ab      	ldrh	r3, [r5, #12]
 80214fc:	071b      	lsls	r3, r3, #28
 80214fe:	d501      	bpl.n	8021504 <_vfiprintf_r+0x3c>
 8021500:	692b      	ldr	r3, [r5, #16]
 8021502:	b9eb      	cbnz	r3, 8021540 <_vfiprintf_r+0x78>
 8021504:	4629      	mov	r1, r5
 8021506:	4630      	mov	r0, r6
 8021508:	f7ff fd82 	bl	8021010 <__swsetup_r>
 802150c:	b1c0      	cbz	r0, 8021540 <_vfiprintf_r+0x78>
 802150e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021510:	07dc      	lsls	r4, r3, #31
 8021512:	d50e      	bpl.n	8021532 <_vfiprintf_r+0x6a>
 8021514:	f04f 30ff 	mov.w	r0, #4294967295
 8021518:	b01d      	add	sp, #116	; 0x74
 802151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802151e:	4b7b      	ldr	r3, [pc, #492]	; (802170c <_vfiprintf_r+0x244>)
 8021520:	429d      	cmp	r5, r3
 8021522:	d101      	bne.n	8021528 <_vfiprintf_r+0x60>
 8021524:	68b5      	ldr	r5, [r6, #8]
 8021526:	e7df      	b.n	80214e8 <_vfiprintf_r+0x20>
 8021528:	4b79      	ldr	r3, [pc, #484]	; (8021710 <_vfiprintf_r+0x248>)
 802152a:	429d      	cmp	r5, r3
 802152c:	bf08      	it	eq
 802152e:	68f5      	ldreq	r5, [r6, #12]
 8021530:	e7da      	b.n	80214e8 <_vfiprintf_r+0x20>
 8021532:	89ab      	ldrh	r3, [r5, #12]
 8021534:	0598      	lsls	r0, r3, #22
 8021536:	d4ed      	bmi.n	8021514 <_vfiprintf_r+0x4c>
 8021538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802153a:	f7fe fd8f 	bl	802005c <__retarget_lock_release_recursive>
 802153e:	e7e9      	b.n	8021514 <_vfiprintf_r+0x4c>
 8021540:	2300      	movs	r3, #0
 8021542:	9309      	str	r3, [sp, #36]	; 0x24
 8021544:	2320      	movs	r3, #32
 8021546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802154a:	f8cd 800c 	str.w	r8, [sp, #12]
 802154e:	2330      	movs	r3, #48	; 0x30
 8021550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021714 <_vfiprintf_r+0x24c>
 8021554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021558:	f04f 0901 	mov.w	r9, #1
 802155c:	4623      	mov	r3, r4
 802155e:	469a      	mov	sl, r3
 8021560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021564:	b10a      	cbz	r2, 802156a <_vfiprintf_r+0xa2>
 8021566:	2a25      	cmp	r2, #37	; 0x25
 8021568:	d1f9      	bne.n	802155e <_vfiprintf_r+0x96>
 802156a:	ebba 0b04 	subs.w	fp, sl, r4
 802156e:	d00b      	beq.n	8021588 <_vfiprintf_r+0xc0>
 8021570:	465b      	mov	r3, fp
 8021572:	4622      	mov	r2, r4
 8021574:	4629      	mov	r1, r5
 8021576:	4630      	mov	r0, r6
 8021578:	f7ff ff93 	bl	80214a2 <__sfputs_r>
 802157c:	3001      	adds	r0, #1
 802157e:	f000 80aa 	beq.w	80216d6 <_vfiprintf_r+0x20e>
 8021582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021584:	445a      	add	r2, fp
 8021586:	9209      	str	r2, [sp, #36]	; 0x24
 8021588:	f89a 3000 	ldrb.w	r3, [sl]
 802158c:	2b00      	cmp	r3, #0
 802158e:	f000 80a2 	beq.w	80216d6 <_vfiprintf_r+0x20e>
 8021592:	2300      	movs	r3, #0
 8021594:	f04f 32ff 	mov.w	r2, #4294967295
 8021598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802159c:	f10a 0a01 	add.w	sl, sl, #1
 80215a0:	9304      	str	r3, [sp, #16]
 80215a2:	9307      	str	r3, [sp, #28]
 80215a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80215a8:	931a      	str	r3, [sp, #104]	; 0x68
 80215aa:	4654      	mov	r4, sl
 80215ac:	2205      	movs	r2, #5
 80215ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215b2:	4858      	ldr	r0, [pc, #352]	; (8021714 <_vfiprintf_r+0x24c>)
 80215b4:	f7de fe24 	bl	8000200 <memchr>
 80215b8:	9a04      	ldr	r2, [sp, #16]
 80215ba:	b9d8      	cbnz	r0, 80215f4 <_vfiprintf_r+0x12c>
 80215bc:	06d1      	lsls	r1, r2, #27
 80215be:	bf44      	itt	mi
 80215c0:	2320      	movmi	r3, #32
 80215c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80215c6:	0713      	lsls	r3, r2, #28
 80215c8:	bf44      	itt	mi
 80215ca:	232b      	movmi	r3, #43	; 0x2b
 80215cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80215d0:	f89a 3000 	ldrb.w	r3, [sl]
 80215d4:	2b2a      	cmp	r3, #42	; 0x2a
 80215d6:	d015      	beq.n	8021604 <_vfiprintf_r+0x13c>
 80215d8:	9a07      	ldr	r2, [sp, #28]
 80215da:	4654      	mov	r4, sl
 80215dc:	2000      	movs	r0, #0
 80215de:	f04f 0c0a 	mov.w	ip, #10
 80215e2:	4621      	mov	r1, r4
 80215e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80215e8:	3b30      	subs	r3, #48	; 0x30
 80215ea:	2b09      	cmp	r3, #9
 80215ec:	d94e      	bls.n	802168c <_vfiprintf_r+0x1c4>
 80215ee:	b1b0      	cbz	r0, 802161e <_vfiprintf_r+0x156>
 80215f0:	9207      	str	r2, [sp, #28]
 80215f2:	e014      	b.n	802161e <_vfiprintf_r+0x156>
 80215f4:	eba0 0308 	sub.w	r3, r0, r8
 80215f8:	fa09 f303 	lsl.w	r3, r9, r3
 80215fc:	4313      	orrs	r3, r2
 80215fe:	9304      	str	r3, [sp, #16]
 8021600:	46a2      	mov	sl, r4
 8021602:	e7d2      	b.n	80215aa <_vfiprintf_r+0xe2>
 8021604:	9b03      	ldr	r3, [sp, #12]
 8021606:	1d19      	adds	r1, r3, #4
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	9103      	str	r1, [sp, #12]
 802160c:	2b00      	cmp	r3, #0
 802160e:	bfbb      	ittet	lt
 8021610:	425b      	neglt	r3, r3
 8021612:	f042 0202 	orrlt.w	r2, r2, #2
 8021616:	9307      	strge	r3, [sp, #28]
 8021618:	9307      	strlt	r3, [sp, #28]
 802161a:	bfb8      	it	lt
 802161c:	9204      	strlt	r2, [sp, #16]
 802161e:	7823      	ldrb	r3, [r4, #0]
 8021620:	2b2e      	cmp	r3, #46	; 0x2e
 8021622:	d10c      	bne.n	802163e <_vfiprintf_r+0x176>
 8021624:	7863      	ldrb	r3, [r4, #1]
 8021626:	2b2a      	cmp	r3, #42	; 0x2a
 8021628:	d135      	bne.n	8021696 <_vfiprintf_r+0x1ce>
 802162a:	9b03      	ldr	r3, [sp, #12]
 802162c:	1d1a      	adds	r2, r3, #4
 802162e:	681b      	ldr	r3, [r3, #0]
 8021630:	9203      	str	r2, [sp, #12]
 8021632:	2b00      	cmp	r3, #0
 8021634:	bfb8      	it	lt
 8021636:	f04f 33ff 	movlt.w	r3, #4294967295
 802163a:	3402      	adds	r4, #2
 802163c:	9305      	str	r3, [sp, #20]
 802163e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021724 <_vfiprintf_r+0x25c>
 8021642:	7821      	ldrb	r1, [r4, #0]
 8021644:	2203      	movs	r2, #3
 8021646:	4650      	mov	r0, sl
 8021648:	f7de fdda 	bl	8000200 <memchr>
 802164c:	b140      	cbz	r0, 8021660 <_vfiprintf_r+0x198>
 802164e:	2340      	movs	r3, #64	; 0x40
 8021650:	eba0 000a 	sub.w	r0, r0, sl
 8021654:	fa03 f000 	lsl.w	r0, r3, r0
 8021658:	9b04      	ldr	r3, [sp, #16]
 802165a:	4303      	orrs	r3, r0
 802165c:	3401      	adds	r4, #1
 802165e:	9304      	str	r3, [sp, #16]
 8021660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021664:	482c      	ldr	r0, [pc, #176]	; (8021718 <_vfiprintf_r+0x250>)
 8021666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802166a:	2206      	movs	r2, #6
 802166c:	f7de fdc8 	bl	8000200 <memchr>
 8021670:	2800      	cmp	r0, #0
 8021672:	d03f      	beq.n	80216f4 <_vfiprintf_r+0x22c>
 8021674:	4b29      	ldr	r3, [pc, #164]	; (802171c <_vfiprintf_r+0x254>)
 8021676:	bb1b      	cbnz	r3, 80216c0 <_vfiprintf_r+0x1f8>
 8021678:	9b03      	ldr	r3, [sp, #12]
 802167a:	3307      	adds	r3, #7
 802167c:	f023 0307 	bic.w	r3, r3, #7
 8021680:	3308      	adds	r3, #8
 8021682:	9303      	str	r3, [sp, #12]
 8021684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021686:	443b      	add	r3, r7
 8021688:	9309      	str	r3, [sp, #36]	; 0x24
 802168a:	e767      	b.n	802155c <_vfiprintf_r+0x94>
 802168c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021690:	460c      	mov	r4, r1
 8021692:	2001      	movs	r0, #1
 8021694:	e7a5      	b.n	80215e2 <_vfiprintf_r+0x11a>
 8021696:	2300      	movs	r3, #0
 8021698:	3401      	adds	r4, #1
 802169a:	9305      	str	r3, [sp, #20]
 802169c:	4619      	mov	r1, r3
 802169e:	f04f 0c0a 	mov.w	ip, #10
 80216a2:	4620      	mov	r0, r4
 80216a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80216a8:	3a30      	subs	r2, #48	; 0x30
 80216aa:	2a09      	cmp	r2, #9
 80216ac:	d903      	bls.n	80216b6 <_vfiprintf_r+0x1ee>
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d0c5      	beq.n	802163e <_vfiprintf_r+0x176>
 80216b2:	9105      	str	r1, [sp, #20]
 80216b4:	e7c3      	b.n	802163e <_vfiprintf_r+0x176>
 80216b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80216ba:	4604      	mov	r4, r0
 80216bc:	2301      	movs	r3, #1
 80216be:	e7f0      	b.n	80216a2 <_vfiprintf_r+0x1da>
 80216c0:	ab03      	add	r3, sp, #12
 80216c2:	9300      	str	r3, [sp, #0]
 80216c4:	462a      	mov	r2, r5
 80216c6:	4b16      	ldr	r3, [pc, #88]	; (8021720 <_vfiprintf_r+0x258>)
 80216c8:	a904      	add	r1, sp, #16
 80216ca:	4630      	mov	r0, r6
 80216cc:	f7fb fd1c 	bl	801d108 <_printf_float>
 80216d0:	4607      	mov	r7, r0
 80216d2:	1c78      	adds	r0, r7, #1
 80216d4:	d1d6      	bne.n	8021684 <_vfiprintf_r+0x1bc>
 80216d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80216d8:	07d9      	lsls	r1, r3, #31
 80216da:	d405      	bmi.n	80216e8 <_vfiprintf_r+0x220>
 80216dc:	89ab      	ldrh	r3, [r5, #12]
 80216de:	059a      	lsls	r2, r3, #22
 80216e0:	d402      	bmi.n	80216e8 <_vfiprintf_r+0x220>
 80216e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80216e4:	f7fe fcba 	bl	802005c <__retarget_lock_release_recursive>
 80216e8:	89ab      	ldrh	r3, [r5, #12]
 80216ea:	065b      	lsls	r3, r3, #25
 80216ec:	f53f af12 	bmi.w	8021514 <_vfiprintf_r+0x4c>
 80216f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80216f2:	e711      	b.n	8021518 <_vfiprintf_r+0x50>
 80216f4:	ab03      	add	r3, sp, #12
 80216f6:	9300      	str	r3, [sp, #0]
 80216f8:	462a      	mov	r2, r5
 80216fa:	4b09      	ldr	r3, [pc, #36]	; (8021720 <_vfiprintf_r+0x258>)
 80216fc:	a904      	add	r1, sp, #16
 80216fe:	4630      	mov	r0, r6
 8021700:	f7fb ffa6 	bl	801d650 <_printf_i>
 8021704:	e7e4      	b.n	80216d0 <_vfiprintf_r+0x208>
 8021706:	bf00      	nop
 8021708:	08029870 	.word	0x08029870
 802170c:	08029890 	.word	0x08029890
 8021710:	08029850 	.word	0x08029850
 8021714:	08029a8c 	.word	0x08029a8c
 8021718:	08029a96 	.word	0x08029a96
 802171c:	0801d109 	.word	0x0801d109
 8021720:	080214a3 	.word	0x080214a3
 8021724:	08029a92 	.word	0x08029a92

08021728 <_read_r>:
 8021728:	b538      	push	{r3, r4, r5, lr}
 802172a:	4d07      	ldr	r5, [pc, #28]	; (8021748 <_read_r+0x20>)
 802172c:	4604      	mov	r4, r0
 802172e:	4608      	mov	r0, r1
 8021730:	4611      	mov	r1, r2
 8021732:	2200      	movs	r2, #0
 8021734:	602a      	str	r2, [r5, #0]
 8021736:	461a      	mov	r2, r3
 8021738:	f7e5 ff32 	bl	80075a0 <_read>
 802173c:	1c43      	adds	r3, r0, #1
 802173e:	d102      	bne.n	8021746 <_read_r+0x1e>
 8021740:	682b      	ldr	r3, [r5, #0]
 8021742:	b103      	cbz	r3, 8021746 <_read_r+0x1e>
 8021744:	6023      	str	r3, [r4, #0]
 8021746:	bd38      	pop	{r3, r4, r5, pc}
 8021748:	2000a02c 	.word	0x2000a02c

0802174c <abort>:
 802174c:	b508      	push	{r3, lr}
 802174e:	2006      	movs	r0, #6
 8021750:	f000 f856 	bl	8021800 <raise>
 8021754:	2001      	movs	r0, #1
 8021756:	f7e5 ff19 	bl	800758c <_exit>
	...

0802175c <_fstat_r>:
 802175c:	b538      	push	{r3, r4, r5, lr}
 802175e:	4d07      	ldr	r5, [pc, #28]	; (802177c <_fstat_r+0x20>)
 8021760:	2300      	movs	r3, #0
 8021762:	4604      	mov	r4, r0
 8021764:	4608      	mov	r0, r1
 8021766:	4611      	mov	r1, r2
 8021768:	602b      	str	r3, [r5, #0]
 802176a:	f7e5 ff5e 	bl	800762a <_fstat>
 802176e:	1c43      	adds	r3, r0, #1
 8021770:	d102      	bne.n	8021778 <_fstat_r+0x1c>
 8021772:	682b      	ldr	r3, [r5, #0]
 8021774:	b103      	cbz	r3, 8021778 <_fstat_r+0x1c>
 8021776:	6023      	str	r3, [r4, #0]
 8021778:	bd38      	pop	{r3, r4, r5, pc}
 802177a:	bf00      	nop
 802177c:	2000a02c 	.word	0x2000a02c

08021780 <_isatty_r>:
 8021780:	b538      	push	{r3, r4, r5, lr}
 8021782:	4d06      	ldr	r5, [pc, #24]	; (802179c <_isatty_r+0x1c>)
 8021784:	2300      	movs	r3, #0
 8021786:	4604      	mov	r4, r0
 8021788:	4608      	mov	r0, r1
 802178a:	602b      	str	r3, [r5, #0]
 802178c:	f7e5 ff5d 	bl	800764a <_isatty>
 8021790:	1c43      	adds	r3, r0, #1
 8021792:	d102      	bne.n	802179a <_isatty_r+0x1a>
 8021794:	682b      	ldr	r3, [r5, #0]
 8021796:	b103      	cbz	r3, 802179a <_isatty_r+0x1a>
 8021798:	6023      	str	r3, [r4, #0]
 802179a:	bd38      	pop	{r3, r4, r5, pc}
 802179c:	2000a02c 	.word	0x2000a02c

080217a0 <_malloc_usable_size_r>:
 80217a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80217a4:	1f18      	subs	r0, r3, #4
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	bfbc      	itt	lt
 80217aa:	580b      	ldrlt	r3, [r1, r0]
 80217ac:	18c0      	addlt	r0, r0, r3
 80217ae:	4770      	bx	lr

080217b0 <_raise_r>:
 80217b0:	291f      	cmp	r1, #31
 80217b2:	b538      	push	{r3, r4, r5, lr}
 80217b4:	4604      	mov	r4, r0
 80217b6:	460d      	mov	r5, r1
 80217b8:	d904      	bls.n	80217c4 <_raise_r+0x14>
 80217ba:	2316      	movs	r3, #22
 80217bc:	6003      	str	r3, [r0, #0]
 80217be:	f04f 30ff 	mov.w	r0, #4294967295
 80217c2:	bd38      	pop	{r3, r4, r5, pc}
 80217c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80217c6:	b112      	cbz	r2, 80217ce <_raise_r+0x1e>
 80217c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80217cc:	b94b      	cbnz	r3, 80217e2 <_raise_r+0x32>
 80217ce:	4620      	mov	r0, r4
 80217d0:	f000 f830 	bl	8021834 <_getpid_r>
 80217d4:	462a      	mov	r2, r5
 80217d6:	4601      	mov	r1, r0
 80217d8:	4620      	mov	r0, r4
 80217da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80217de:	f000 b817 	b.w	8021810 <_kill_r>
 80217e2:	2b01      	cmp	r3, #1
 80217e4:	d00a      	beq.n	80217fc <_raise_r+0x4c>
 80217e6:	1c59      	adds	r1, r3, #1
 80217e8:	d103      	bne.n	80217f2 <_raise_r+0x42>
 80217ea:	2316      	movs	r3, #22
 80217ec:	6003      	str	r3, [r0, #0]
 80217ee:	2001      	movs	r0, #1
 80217f0:	e7e7      	b.n	80217c2 <_raise_r+0x12>
 80217f2:	2400      	movs	r4, #0
 80217f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80217f8:	4628      	mov	r0, r5
 80217fa:	4798      	blx	r3
 80217fc:	2000      	movs	r0, #0
 80217fe:	e7e0      	b.n	80217c2 <_raise_r+0x12>

08021800 <raise>:
 8021800:	4b02      	ldr	r3, [pc, #8]	; (802180c <raise+0xc>)
 8021802:	4601      	mov	r1, r0
 8021804:	6818      	ldr	r0, [r3, #0]
 8021806:	f7ff bfd3 	b.w	80217b0 <_raise_r>
 802180a:	bf00      	nop
 802180c:	20000624 	.word	0x20000624

08021810 <_kill_r>:
 8021810:	b538      	push	{r3, r4, r5, lr}
 8021812:	4d07      	ldr	r5, [pc, #28]	; (8021830 <_kill_r+0x20>)
 8021814:	2300      	movs	r3, #0
 8021816:	4604      	mov	r4, r0
 8021818:	4608      	mov	r0, r1
 802181a:	4611      	mov	r1, r2
 802181c:	602b      	str	r3, [r5, #0]
 802181e:	f7e5 fea5 	bl	800756c <_kill>
 8021822:	1c43      	adds	r3, r0, #1
 8021824:	d102      	bne.n	802182c <_kill_r+0x1c>
 8021826:	682b      	ldr	r3, [r5, #0]
 8021828:	b103      	cbz	r3, 802182c <_kill_r+0x1c>
 802182a:	6023      	str	r3, [r4, #0]
 802182c:	bd38      	pop	{r3, r4, r5, pc}
 802182e:	bf00      	nop
 8021830:	2000a02c 	.word	0x2000a02c

08021834 <_getpid_r>:
 8021834:	f7e5 be92 	b.w	800755c <_getpid>

08021838 <sqrt>:
 8021838:	b538      	push	{r3, r4, r5, lr}
 802183a:	ed2d 8b02 	vpush	{d8}
 802183e:	ec55 4b10 	vmov	r4, r5, d0
 8021842:	f000 f82d 	bl	80218a0 <__ieee754_sqrt>
 8021846:	4b15      	ldr	r3, [pc, #84]	; (802189c <sqrt+0x64>)
 8021848:	eeb0 8a40 	vmov.f32	s16, s0
 802184c:	eef0 8a60 	vmov.f32	s17, s1
 8021850:	f993 3000 	ldrsb.w	r3, [r3]
 8021854:	3301      	adds	r3, #1
 8021856:	d019      	beq.n	802188c <sqrt+0x54>
 8021858:	4622      	mov	r2, r4
 802185a:	462b      	mov	r3, r5
 802185c:	4620      	mov	r0, r4
 802185e:	4629      	mov	r1, r5
 8021860:	f7df f974 	bl	8000b4c <__aeabi_dcmpun>
 8021864:	b990      	cbnz	r0, 802188c <sqrt+0x54>
 8021866:	2200      	movs	r2, #0
 8021868:	2300      	movs	r3, #0
 802186a:	4620      	mov	r0, r4
 802186c:	4629      	mov	r1, r5
 802186e:	f7df f945 	bl	8000afc <__aeabi_dcmplt>
 8021872:	b158      	cbz	r0, 802188c <sqrt+0x54>
 8021874:	f7fb fb76 	bl	801cf64 <__errno>
 8021878:	2321      	movs	r3, #33	; 0x21
 802187a:	6003      	str	r3, [r0, #0]
 802187c:	2200      	movs	r2, #0
 802187e:	2300      	movs	r3, #0
 8021880:	4610      	mov	r0, r2
 8021882:	4619      	mov	r1, r3
 8021884:	f7de fff2 	bl	800086c <__aeabi_ddiv>
 8021888:	ec41 0b18 	vmov	d8, r0, r1
 802188c:	eeb0 0a48 	vmov.f32	s0, s16
 8021890:	eef0 0a68 	vmov.f32	s1, s17
 8021894:	ecbd 8b02 	vpop	{d8}
 8021898:	bd38      	pop	{r3, r4, r5, pc}
 802189a:	bf00      	nop
 802189c:	200007f8 	.word	0x200007f8

080218a0 <__ieee754_sqrt>:
 80218a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218a4:	ec55 4b10 	vmov	r4, r5, d0
 80218a8:	4e56      	ldr	r6, [pc, #344]	; (8021a04 <__ieee754_sqrt+0x164>)
 80218aa:	43ae      	bics	r6, r5
 80218ac:	ee10 0a10 	vmov	r0, s0
 80218b0:	ee10 3a10 	vmov	r3, s0
 80218b4:	4629      	mov	r1, r5
 80218b6:	462a      	mov	r2, r5
 80218b8:	d110      	bne.n	80218dc <__ieee754_sqrt+0x3c>
 80218ba:	ee10 2a10 	vmov	r2, s0
 80218be:	462b      	mov	r3, r5
 80218c0:	f7de feaa 	bl	8000618 <__aeabi_dmul>
 80218c4:	4602      	mov	r2, r0
 80218c6:	460b      	mov	r3, r1
 80218c8:	4620      	mov	r0, r4
 80218ca:	4629      	mov	r1, r5
 80218cc:	f7de fcee 	bl	80002ac <__adddf3>
 80218d0:	4604      	mov	r4, r0
 80218d2:	460d      	mov	r5, r1
 80218d4:	ec45 4b10 	vmov	d0, r4, r5
 80218d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218dc:	2d00      	cmp	r5, #0
 80218de:	dc10      	bgt.n	8021902 <__ieee754_sqrt+0x62>
 80218e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80218e4:	4330      	orrs	r0, r6
 80218e6:	d0f5      	beq.n	80218d4 <__ieee754_sqrt+0x34>
 80218e8:	b15d      	cbz	r5, 8021902 <__ieee754_sqrt+0x62>
 80218ea:	ee10 2a10 	vmov	r2, s0
 80218ee:	462b      	mov	r3, r5
 80218f0:	ee10 0a10 	vmov	r0, s0
 80218f4:	f7de fcd8 	bl	80002a8 <__aeabi_dsub>
 80218f8:	4602      	mov	r2, r0
 80218fa:	460b      	mov	r3, r1
 80218fc:	f7de ffb6 	bl	800086c <__aeabi_ddiv>
 8021900:	e7e6      	b.n	80218d0 <__ieee754_sqrt+0x30>
 8021902:	1509      	asrs	r1, r1, #20
 8021904:	d076      	beq.n	80219f4 <__ieee754_sqrt+0x154>
 8021906:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802190a:	07ce      	lsls	r6, r1, #31
 802190c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8021910:	bf5e      	ittt	pl
 8021912:	0fda      	lsrpl	r2, r3, #31
 8021914:	005b      	lslpl	r3, r3, #1
 8021916:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802191a:	0fda      	lsrs	r2, r3, #31
 802191c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8021920:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021924:	2000      	movs	r0, #0
 8021926:	106d      	asrs	r5, r5, #1
 8021928:	005b      	lsls	r3, r3, #1
 802192a:	f04f 0e16 	mov.w	lr, #22
 802192e:	4684      	mov	ip, r0
 8021930:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021934:	eb0c 0401 	add.w	r4, ip, r1
 8021938:	4294      	cmp	r4, r2
 802193a:	bfde      	ittt	le
 802193c:	1b12      	suble	r2, r2, r4
 802193e:	eb04 0c01 	addle.w	ip, r4, r1
 8021942:	1840      	addle	r0, r0, r1
 8021944:	0052      	lsls	r2, r2, #1
 8021946:	f1be 0e01 	subs.w	lr, lr, #1
 802194a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802194e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021952:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021956:	d1ed      	bne.n	8021934 <__ieee754_sqrt+0x94>
 8021958:	4671      	mov	r1, lr
 802195a:	2720      	movs	r7, #32
 802195c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021960:	4562      	cmp	r2, ip
 8021962:	eb04 060e 	add.w	r6, r4, lr
 8021966:	dc02      	bgt.n	802196e <__ieee754_sqrt+0xce>
 8021968:	d113      	bne.n	8021992 <__ieee754_sqrt+0xf2>
 802196a:	429e      	cmp	r6, r3
 802196c:	d811      	bhi.n	8021992 <__ieee754_sqrt+0xf2>
 802196e:	2e00      	cmp	r6, #0
 8021970:	eb06 0e04 	add.w	lr, r6, r4
 8021974:	da43      	bge.n	80219fe <__ieee754_sqrt+0x15e>
 8021976:	f1be 0f00 	cmp.w	lr, #0
 802197a:	db40      	blt.n	80219fe <__ieee754_sqrt+0x15e>
 802197c:	f10c 0801 	add.w	r8, ip, #1
 8021980:	eba2 020c 	sub.w	r2, r2, ip
 8021984:	429e      	cmp	r6, r3
 8021986:	bf88      	it	hi
 8021988:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802198c:	1b9b      	subs	r3, r3, r6
 802198e:	4421      	add	r1, r4
 8021990:	46c4      	mov	ip, r8
 8021992:	0052      	lsls	r2, r2, #1
 8021994:	3f01      	subs	r7, #1
 8021996:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802199a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802199e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80219a2:	d1dd      	bne.n	8021960 <__ieee754_sqrt+0xc0>
 80219a4:	4313      	orrs	r3, r2
 80219a6:	d006      	beq.n	80219b6 <__ieee754_sqrt+0x116>
 80219a8:	1c4c      	adds	r4, r1, #1
 80219aa:	bf13      	iteet	ne
 80219ac:	3101      	addne	r1, #1
 80219ae:	3001      	addeq	r0, #1
 80219b0:	4639      	moveq	r1, r7
 80219b2:	f021 0101 	bicne.w	r1, r1, #1
 80219b6:	1043      	asrs	r3, r0, #1
 80219b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80219bc:	0849      	lsrs	r1, r1, #1
 80219be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80219c2:	07c2      	lsls	r2, r0, #31
 80219c4:	bf48      	it	mi
 80219c6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80219ca:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80219ce:	460c      	mov	r4, r1
 80219d0:	463d      	mov	r5, r7
 80219d2:	e77f      	b.n	80218d4 <__ieee754_sqrt+0x34>
 80219d4:	0ada      	lsrs	r2, r3, #11
 80219d6:	3815      	subs	r0, #21
 80219d8:	055b      	lsls	r3, r3, #21
 80219da:	2a00      	cmp	r2, #0
 80219dc:	d0fa      	beq.n	80219d4 <__ieee754_sqrt+0x134>
 80219de:	02d7      	lsls	r7, r2, #11
 80219e0:	d50a      	bpl.n	80219f8 <__ieee754_sqrt+0x158>
 80219e2:	f1c1 0420 	rsb	r4, r1, #32
 80219e6:	fa23 f404 	lsr.w	r4, r3, r4
 80219ea:	1e4d      	subs	r5, r1, #1
 80219ec:	408b      	lsls	r3, r1
 80219ee:	4322      	orrs	r2, r4
 80219f0:	1b41      	subs	r1, r0, r5
 80219f2:	e788      	b.n	8021906 <__ieee754_sqrt+0x66>
 80219f4:	4608      	mov	r0, r1
 80219f6:	e7f0      	b.n	80219da <__ieee754_sqrt+0x13a>
 80219f8:	0052      	lsls	r2, r2, #1
 80219fa:	3101      	adds	r1, #1
 80219fc:	e7ef      	b.n	80219de <__ieee754_sqrt+0x13e>
 80219fe:	46e0      	mov	r8, ip
 8021a00:	e7be      	b.n	8021980 <__ieee754_sqrt+0xe0>
 8021a02:	bf00      	nop
 8021a04:	7ff00000 	.word	0x7ff00000

08021a08 <_init>:
 8021a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a0a:	bf00      	nop
 8021a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a0e:	bc08      	pop	{r3}
 8021a10:	469e      	mov	lr, r3
 8021a12:	4770      	bx	lr

08021a14 <_fini>:
 8021a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a16:	bf00      	nop
 8021a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a1a:	bc08      	pop	{r3}
 8021a1c:	469e      	mov	lr, r3
 8021a1e:	4770      	bx	lr
